quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20143/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.meta.genreflex.TClass.roottest_root_meta_genreflex_TClass_execbasic](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20143/testReport/projectroot.roottest.root.meta.genreflex/TClass/roottest_root_meta_genreflex_TClass_execbasic/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1762#issuecomment-375298957:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1762#issuecomment-375298957,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20325/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-375810748:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-375810748,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20326/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-375808897:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-375808897,1,['Timeout'],['Timeout']
Safety,Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20349/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error cloning remote repo 'origin' ; - ERROR: Error cloning remote repo 'origin' . ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_interface](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20349/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_interface/); - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_utils](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20349/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_utils/); - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_leaves](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20349/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_leaves/); - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_snapshot](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20349/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_stringfiltercolumn](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20349/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_stringfiltercolumn/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_splitcoll_arrayview](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20349/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_splitcoll_arrayview/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20349/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_snapshot/); - [projectroot.roottest.root.da,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1764#issuecomment-376164208:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1764#issuecomment-376164208,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20414/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1763#issuecomment-376480433:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1763#issuecomment-376480433,2,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20453/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1789#issuecomment-376519597:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1789#issuecomment-376519597,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20454/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1789#issuecomment-376516684:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1789#issuecomment-376516684,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20778/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1761#issuecomment-377244874:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1761#issuecomment-377244874,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20818/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error cloning remote repo 'origin' ; - ERROR: Error cloning remote repo 'origin' ; - Error in &lt;TStreamerInfo::Build&gt;: TH1, discarding: double* fBuffer, no [dimension] ; - Error in &lt;TStreamerInfo::Build&gt;: TH1, discarding: double* fIntegral, no [dimension] ; - Error in &lt;TStreamerInfo::Build&gt;: TArrayF, discarding: float* fArray, no [dimension] ; - Error in &lt;TStreamerInfo::Build&gt;: TString::Rep_t, unknown type: TString::Rep_t::(anonymous) ; - Error in &lt;TStreamerInfo::Build&gt;: __shared_ptr&lt;TObjLink&gt;: TObjLink* has no streamer or dictionary, data member _M_ptr will not be saved ; - Error in &lt;TStreamerInfo::Build&gt;: __weak_ptr&lt;TObjLink,__gnu_cxx::_Lock_policy::_S_atomic&gt;: TObjLink* has no streamer or dictionary, data member _M_ptr will not be saved ; - Error in &lt;TStreamerInfo::Build&gt;: __weak_count&lt;__gnu_cxx::_Lock_policy::_S_atomic&gt;: _Sp_counted_base&lt;__gnu_cxx::_Lock_policy::_S_atomic&gt;* has no streamer or dictionary, data member _M_pi will not be saved . And 26 more. ### Warnings:; - ../root/core/metacling/src/TCling.cxx:1118:13: warning: ‘void loadModulePath(clang::HeaderSearch&, const char*)’ defined but not used [-Wunused-function]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1697#issuecomment-377938883:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1697#issuecomment-377938883,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/20827/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin' ; - Error: /mnt/build/jenkins/workspace/root-pullrequests-build/build/bin/rootcling: compilation failure (/mnt/build/jenkins/workspace/root-pullrequests-build/build/lib/libMathCore87e80712ed_dictUmbrella.h) . ### Warnings:; - ../root/core/metacling/src/TCling.cxx:1118:13: warning: ‘void loadModulePath(clang::HeaderSearch&, const char*)’ defined but not used [-Wunused-function]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1697#issuecomment-378053042:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1697#issuecomment-378053042,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21260/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1825#issuecomment-379569864:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1825#issuecomment-379569864,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21356/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - include/ROOT/TDFInterface.hxx:1538:70: error: no matching function for call to ‘forward(TDataFrameInterface_CreateAliases_Test::TestBody()::&lt;lambda()&gt;&)’ ; - include/ROOT/TDFInterface.hxx:1538:70: error: no matching function for call to ‘forward(TDataFrameInterface_CheckAliasesPerChain_Test::TestBody()::&lt;lambda()&gt;&)’ ; - include/ROOT/TDFInterface.hxx:1538:70: error: no matching function for call to ‘forward(TDataFrameInterface_GetColumnNamesFromScratch_Test::TestBody()::&lt;lambda()&gt;&)’ ; - include/ROOT/TDFInterface.hxx:1538:70: error: no matching function for call to ‘forward(TDataFrameInterface_GetColumnNamesFromSource_Test::TestBody()::&lt;lambda()&gt;&)’ ; - include/ROOT/TDFInterface.hxx:1538:70: error: no matching function for call to ‘forward(TDataFrameHistoModels_Histo1D_Test::TestBody()::&lt;lambda()&gt;&)’ ; - include/ROOT/TDFInterface.hxx:1538:70: error: no matching function for call to ‘forward(TDataFrameHistoModels_Histo1D_Test::TestBody()::&lt;lambda()&gt;&)’ . And 39 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1833#issuecomment-380038435:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1833#issuecomment-380038435,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21357/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - include/ROOT/TDFInterface.hxx:1538:70: error: no matching function for call to ‘forward(TDFLeaves_ReadIndividualLeaves_Test::TestBody()::&lt;lambda(Float_t)&gt;&)’",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1833#issuecomment-380042522:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1833#issuecomment-380042522,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21372/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ninja: error: loading 'build.ninja': No such file or directory",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1766#issuecomment-380042952:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1766#issuecomment-380042952,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21373/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ninja: error: loading 'build.ninja': No such file or directory",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1766#issuecomment-380043031:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1766#issuecomment-380043031,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21476/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1841#issuecomment-380167438:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1841#issuecomment-380167438,2,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21477/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1841#issuecomment-380169873:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1841#issuecomment-380169873,2,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21701/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1850#issuecomment-380853778:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1850#issuecomment-380853778,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21724/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21724/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1832#issuecomment-380848753:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1832#issuecomment-380848753,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21740/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - collect2: error: ld returned 1 exit status",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1845#issuecomment-380852422:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1845#issuecomment-380852422,2,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21748/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1751#issuecomment-380860648:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1751#issuecomment-380860648,2,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/21749/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1751#issuecomment-380857601:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1751#issuecomment-380857601,2,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22048/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.multicore.roottest_root_multicore_processExecutorH1Test](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22048/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_processExecutorH1Test/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22048/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1845#issuecomment-381713512:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1845#issuecomment-381713512,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22177/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22177/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_snapshot/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshotNFiles](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22177/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_snapshotNFiles/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1870#issuecomment-381988903:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1870#issuecomment-381988903,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22178/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshotNFiles](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22178/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_snapshotNFiles/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_snapshot](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22178/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_snapshot/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1870#issuecomment-381991921:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1870#issuecomment-381991921,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22387/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.collection.roottest_root_collection_arrayViewBasic](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22387/testReport/projectroot.roottest.root/collection/roottest_root_collection_arrayViewBasic/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1884#issuecomment-382647731:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1884#issuecomment-382647731,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22594/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1878#issuecomment-382894816:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1878#issuecomment-382894816,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22595/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1878#issuecomment-382893122:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1878#issuecomment-382893122,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22706/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1897#issuecomment-383091004:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1897#issuecomment-383091004,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/22707/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1897#issuecomment-383092799:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1897#issuecomment-383092799,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23176/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1911#issuecomment-384253690:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1911#issuecomment-384253690,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23241/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - error: fetch-pack died of signal 15 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1916#issuecomment-384370528:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1916#issuecomment-384370528,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23390/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Warnings:; - include/Minuit2/MinimumBuilder.h:43:17: warning: ‘virtual void ROOT::Minuit2::MinimumBuilder::SetPrintLevel(int) const’ was hidden [-Woverloaded-virtual] ; - include/Minuit2/CombinedMinimumBuilder.h:34:17: warning: by ‘virtual void ROOT::Minuit2::CombinedMinimumBuilder::SetPrintLevel(int)’ [-Woverloaded-virtual] ; - include/Minuit2/MinimumBuilder.h:43:17: warning: ‘virtual void ROOT::Minuit2::MinimumBuilder::SetPrintLevel(int) const’ was hidden [-Woverloaded-virtual] ; - include/Minuit2/CombinedMinimumBuilder.h:34:17: warning: by ‘virtual void ROOT::Minuit2::CombinedMinimumBuilder::SetPrintLevel(int)’ [-Woverloaded-virtual] ; - include/Minuit2/MinimumBuilder.h:43:17: warning: ‘virtual void ROOT::Minuit2::MinimumBuilder::SetPrintLevel(int) const’ was hidden [-Woverloaded-virtual] ; - include/Minuit2/CombinedMinimumBuilder.h:34:17: warning: by ‘virtual void ROOT::Minuit2::CombinedMinimumBuilder::SetPrintLevel(int)’ [-Woverloaded-virtual] . ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_interface](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23390/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_interface/); - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_simple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23390/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_simple/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677#issuecomment-384583425:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1677#issuecomment-384583425,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23391/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Warnings:; - include/Minuit2/MinimumBuilder.h:43:17: warning: ‘virtual void ROOT::Minuit2::MinimumBuilder::SetPrintLevel(int) const’ was hidden [-Woverloaded-virtual] ; - include/Minuit2/CombinedMinimumBuilder.h:34:17: warning: by ‘virtual void ROOT::Minuit2::CombinedMinimumBuilder::SetPrintLevel(int)’ [-Woverloaded-virtual] ; - include/Minuit2/MinimumBuilder.h:43:17: warning: ‘virtual void ROOT::Minuit2::MinimumBuilder::SetPrintLevel(int) const’ was hidden [-Woverloaded-virtual] ; - include/Minuit2/CombinedMinimumBuilder.h:34:17: warning: by ‘virtual void ROOT::Minuit2::CombinedMinimumBuilder::SetPrintLevel(int)’ [-Woverloaded-virtual] ; - include/Minuit2/MinimumBuilder.h:43:17: warning: ‘virtual void ROOT::Minuit2::MinimumBuilder::SetPrintLevel(int) const’ was hidden [-Woverloaded-virtual] ; - include/Minuit2/CombinedMinimumBuilder.h:34:17: warning: by ‘virtual void ROOT::Minuit2::CombinedMinimumBuilder::SetPrintLevel(int)’ [-Woverloaded-virtual]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677#issuecomment-384581931:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1677#issuecomment-384581931,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23464/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_simple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23464/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_simple/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1925#issuecomment-384652252:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1925#issuecomment-384652252,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23465/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1925#issuecomment-384633185:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1925#issuecomment-384633185,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23497/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_simple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23497/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_simple/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1929#issuecomment-384667325:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1929#issuecomment-384667325,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23498/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1929#issuecomment-384665391:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1929#issuecomment-384665391,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23545/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_simple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23545/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_simple/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1931#issuecomment-384699753:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1931#issuecomment-384699753,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23546/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1931#issuecomment-384697311:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1931#issuecomment-384697311,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23578/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=56, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_readTotemNtuple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23578/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_readTotemNtuple/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1937#issuecomment-384726654:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1937#issuecomment-384726654,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23582/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.test.test_stresshistofit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23582/testReport/projectroot/test/test_stresshistofit/); - [projectroot.test.test_stresshistogram](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23582/testReport/projectroot/test/test_stresshistogram/); - [projectroot.roottest.root.io.transient.base.roottest_root_io_transient_base_WriteFile](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23582/testReport/projectroot.roottest.root.io.transient/base/roottest_root_io_transient_base_WriteFile/); - [projectroot.math.mathcore.test.mathcore_testFit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23582/testReport/projectroot.math.mathcore/test/mathcore_testFit/); - [projectroot.math.mathcore.test.mathcore_testGraphFit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23582/testReport/projectroot.math.mathcore/test/mathcore_testGraphFit/); - [projectroot.test.test_stress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23582/testReport/projectroot/test/test_stress/); - [projectroot.test.test_stresshistofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23582/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.test.test_stresshistogram_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23582/testReport/projectroot/test/test_stresshistogram_interpreted/); - [projectroot.runtutorials.tutorial_fit_ErrorIntegral](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23582/testReport/projectroot/runtutorials/tutorial_fit_ErrorIntegral/); - [projectroot.runtutorials.tutor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1814#issuecomment-384800684:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1814#issuecomment-384800684,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23586/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_simple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23586/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_simple/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_test_readTotemNtuple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23586/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_test_readTotemNtuple/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1916#issuecomment-384756615:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1916#issuecomment-384756615,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23602/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_simple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23602/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_simple/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1938#issuecomment-384778565:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1938#issuecomment-384778565,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23626/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_simple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23626/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_simple/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1931#issuecomment-384908076:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1931#issuecomment-384908076,2,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23627/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1931#issuecomment-384907199:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1931#issuecomment-384907199,2,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23675/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.test.test_stresshistofit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23675/testReport/projectroot/test/test_stresshistofit/); - [projectroot.test.test_stresshistogram](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23675/testReport/projectroot/test/test_stresshistogram/); - [projectroot.roottest.root.io.transient.base.roottest_root_io_transient_base_WriteFile](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23675/testReport/projectroot.roottest.root.io.transient/base/roottest_root_io_transient_base_WriteFile/); - [projectroot.math.mathcore.test.mathcore_testFit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23675/testReport/projectroot.math.mathcore/test/mathcore_testFit/); - [projectroot.math.mathcore.test.mathcore_testGraphFit](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23675/testReport/projectroot.math.mathcore/test/mathcore_testGraphFit/); - [projectroot.test.test_stress](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23675/testReport/projectroot/test/test_stress/); - [projectroot.test.test_stresshistofit_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23675/testReport/projectroot/test/test_stresshistofit_interpreted/); - [projectroot.test.test_stresshistogram_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23675/testReport/projectroot/test/test_stresshistogram_interpreted/); - [projectroot.runtutorials.tutorial_fit_ErrorIntegral](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23675/testReport/projectroot/runtutorials/tutorial_fit_ErrorIntegral/); - [projectroot.runtutorials.tutor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1814#issuecomment-384970815:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1814#issuecomment-384970815,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23687/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_simple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23687/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_simple/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1896#issuecomment-384939322:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1896#issuecomment-384939322,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23688/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1896#issuecomment-384940848:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1896#issuecomment-384940848,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23759/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1939#issuecomment-385025619:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1939#issuecomment-385025619,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23760/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=56, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1939#issuecomment-385023804:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1939#issuecomment-385023804,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23960/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.multicore.roottest_root_multicore_tp_process_imt](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/23960/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tp_process_imt/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1953#issuecomment-385403687:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1953#issuecomment-385403687,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/24264/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - 721/1721 Test #627: tutorial-roostats-HybridInstructional .............................................................***Failed Error regular expression found in output. Regex=[: error:] 2.57 sec ; - 724/1721 Test #629: tutorial-roostats-HybridStandardForm ..............................................................***Failed Error regular expression found in output. Regex=[: error:] 2.46 sec . ### Failing tests:; - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/24264/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/24264/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v1/); - [projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/24264/testReport/projectroot.roottest.root.io/complex/roottest_root_io_complex_writecomplex/); - [projectroot.roottest.root.io.stdarray.roottest_root_io_stdarray_modelReadDictTXMLFile](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/24264/testReport/projectroot.roottest.root.io/stdarray/roottest_root_io_stdarray_modelReadDictTXMLFile/); - [projectroot.roottest.root.io.transient.roottest_root_io_transient_execOld](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/24264/testReport/projectroot.roottest.root.io/transient/roottest_root_io_transient_execOld/); - [projectroot.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1814#issuecomment-385948308:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1814#issuecomment-385948308,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/25686/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2009#issuecomment-388831401:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/2009#issuecomment-388831401,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28784/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28784/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28784/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28784/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v2/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28784/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v2/); - [projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execTmpltD32](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28784/testReport/projectroot.roottest.root.meta/tclass/roottest_root_meta_tclass_execTmpltD32/); - [projectroot.roottest.root.multicore.roottest_root_multicore_generate_imt_tree](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28784/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_generate_imt_tree/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_writeFcc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28784/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1971#issuecomment-394570049:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/1971#issuecomment-394570049,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28994/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28994/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28994/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v1/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execBaseClass_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28994/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execBaseClass_v2/); - [projectroot.roottest.root.multicore.roottest_root_multicore_generate_imt_tree](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28994/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_generate_imt_tree/); - [projectroot.roottest.root.meta.evolution.roottest_root_meta_evolution_execMixedBaseClass_v2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28994/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v2/); - [projectroot.roottest.root.dataframe.roottest_root_dataframe_writeFcc](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28994/testReport/projectroot.roottest.root/dataframe/roottest_root_dataframe_writeFcc/); - [projectroot.hist.hist.test.gtest_hist_hist_test_testTProfile2Poly](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28994/testReport/projectr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2141#issuecomment-394779175:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/2141#issuecomment-394779175,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29375/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - Error in &lt;TCling::LoadModule&gt;: Module VecOps not found!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2163#issuecomment-395452667:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/2163#issuecomment-395452667,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29784/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - Error in &lt;TCling::LoadModule&gt;: Module VecOps not found!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2133#issuecomment-396294403:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/2133#issuecomment-396294403,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31458/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - 63/1449 Test #516: tutorial-multicore-mp101_fillNtuples ..............................................................***Failed Error regular expression found in output. Regex=[: error:] 0.99 sec ; - 314/1449 Test #220: tutorial-dataframe-df001_introduction .............................................................***Failed Error regular expression found in output. Regex=[: error:] 1.32 sec . And 24 more. ### Warnings:; - ../root/core/metacling/src/TCling.cxx:1133:20: warning: ‘std::__cxx11::string GetModuleNameAsString(clang::Module*, const clang::Preprocessor&)’ defined but not used [-Wunused-function] ; - ../root/core/metacling/src/TCling.cxx:1115:13: warning: ‘void LoadModules(const std::vector&lt;std::__cxx11::basic_string&lt;char&gt; &gt;&, cling::Interpreter&)’ defined but not used [-Wunused-function] . ### Failing tests:; - [projectroot.runtutorials.tutorial_pyroot_fillrandom_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31458/testReport/projectroot/runtutorials/tutorial_pyroot_fillrandom_py/); - [projectroot.runtutorials.tutorial_pyroot_hsimple_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31458/testReport/projectroot/runtutorials/tutorial_pyroot_hsimple_py/); - [projectroot.runtutorials.tutorial_pyroot_geometry_py](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31458/testReport/projectroot/runtutorials/tutorial_pyroot_geometry_py/); - [projectroot.test.test_stresslinear](https://epsft-jenkins.cern.ch/job/r",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2255#issuecomment-400650719:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/2255#issuecomment-400650719,2,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/33319/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.tree.branches.roottest_root_tree_branches_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/33319/testReport/projectroot.roottest.root.tree/branches/roottest_root_tree_branches_make/); - [projectroot.roottest.root.tree.index.roottest_root_tree_index_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/33319/testReport/projectroot.roottest.root.tree/index/roottest_root_tree_index_make/); - [projectroot.roottest.root.tree.leaves.roottest_root_tree_leaves_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/33319/testReport/projectroot.roottest.root.tree/leaves/roottest_root_tree_leaves_make/); - [projectroot.roottest.root.tree.query.roottest_root_tree_query_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/33319/testReport/projectroot.roottest.root.tree/query/roottest_root_tree_query_make/); - [projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/33319/testReport/projectroot.roottest.root.tree/friend/roottest_root_tree_friend_make/); - [projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/33319/testReport/projectroot.roottest.root.treeformula/sync/roottest_root_treeformula_sync_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2307#issuecomment-407706357:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/2307#issuecomment-407706357,1,['Timeout'],['Timeout']
Safety,Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/33467/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error cloning remote repo 'origin' ; - ERROR: Error cloning remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2307#issuecomment-407790559:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/2307#issuecomment-407790559,2,['Timeout'],['Timeout']
Safety,Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34041/console).; ### Errors:; - ERROR: Timeout after 5 minutes ; - ERROR: Error cloning remote repo 'origin' ; - ERROR: Error cloning remote repo 'origin' . ### Failing tests:; - [projectroot.test.test_stressmathcore_interpreted](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34041/testReport/projectroot/test/test_stressmathcore_interpreted/); - [projectroot.roottest.root.tree.branches.roottest_root_tree_branches_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34041/testReport/projectroot.roottest.root.tree/branches/roottest_root_tree_branches_make/); - [projectroot.roottest.root.meta.MakeProject.roottest_root_meta_MakeProject_examples](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34041/testReport/projectroot.roottest.root.meta/MakeProject/roottest_root_meta_MakeProject_examples/); - [projectroot.roottest.root.meta.MakeProject.roottest_root_meta_MakeProject_stltest](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34041/testReport/projectroot.roottest.root.meta/MakeProject/roottest_root_meta_MakeProject_stltest/); - [projectroot.roottest.cling.dict.ROOT-8739.roottest_cling_dict_ROOT_8739_execNextTest](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34041/testReport/projectroot.roottest.cling.dict/ROOT-8739/roottest_cling_dict_ROOT_8739_execNextTest/); - [projectroot.roottest.cling.dict.fwd-decl-stdless.roottest_cling_dict_fwd_decl_stdless_execLessyTest](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34041/testReport/projectroot.roottest.cling.dict/fwd-decl-stdless/roottest_cling_dict_fwd_decl_stdless_execLessyTest/); - [projectroot.roottest.cling.parsing.roottest_cling_parsing_runTTestClass](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34041/testReport/projectroot.roottest.cling/parsing/roottest_cling_parsing_runTTestClass/); - [projectroot.roottest.cling.typedef_global.roottest_,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2375#issuecomment-408800383:147,Timeout,Timeout,147,https://root.cern,https://github.com/root-project/root/pull/2375#issuecomment-408800383,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4047/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_LongRootls2](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4047/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_LongRootls2/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_LongRootls3](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4047/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_LongRootls3/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_LongRootls1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4047/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_LongRootls1/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_LongRootls4](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4047/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_LongRootls4/); - [projectroot.roottest.python.cmdLineUtils.roottest_python_cmdLineUtils_TreeRootls1](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4047/testReport/projectroot.roottest.python/cmdLineUtils/roottest_python_cmdLineUtils_TreeRootls1/); - [projectroot.roottest.root.meta.roottest_root_meta_runPublicDataMembers_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4047/testReport/projectroot.roottest.root/meta/roottest_root_meta_runPublicDataMembers_auto/); - [projectroot.roottest.root.multicore.roottest_root_multicore_tthrobj_ttreeview_regression_build](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4047/testReport/projectroot.roottest.root",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/799#issuecomment-321215957:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/799#issuecomment-321215957,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4230/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/857#issuecomment-322412429:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/857#issuecomment-322412429,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4507/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - error: fetch-pack died of signal 15 ; - ERROR: Error fetching remote repo 'origin' ; - collect2: error: ld returned 1 exit status",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/887#issuecomment-324695899:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/887#issuecomment-324695899,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4588/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/893#issuecomment-325161736:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/893#issuecomment-325161736,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4655/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/891#issuecomment-325341659:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/891#issuecomment-325341659,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4690/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - error: fetch-pack died of signal 15 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/900#issuecomment-325614790:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/900#issuecomment-325614790,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4770/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/906#issuecomment-325780187:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/906#issuecomment-325780187,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/4975/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/920#issuecomment-326566174:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/920#issuecomment-326566174,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/5000/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/921#issuecomment-326588775:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/921#issuecomment-326588775,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/5201/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/941#issuecomment-327000658:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/941#issuecomment-327000658,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/5536/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/949#issuecomment-327898166:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/949#issuecomment-327898166,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/5666/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/963#issuecomment-328086168:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/963#issuecomment-328086168,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/5761/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.math.mathcore.test.mathcore_stressGoFTest](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/5761/testReport/projectroot.math.mathcore/test/mathcore_stressGoFTest/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/955#issuecomment-328637401:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/955#issuecomment-328637401,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/5846/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - error: fetch-pack died of signal 15 ; - ERROR: Error fetching remote repo 'origin' . ### Warnings:; - include/ROOT/TDFNodes.hxx:428:38: warning: unused parameter ‘shouldPassSlotNumber’ [-Wunused-parameter] ; - include/ROOT/TDFNodes.hxx:418:37: warning: unused parameter ‘shouldPassSlotNumber’ [-Wunused-parameter] ; - include/ROOT/TDFNodes.hxx:418:37: warning: unused parameter ‘shouldPassSlotNumber’ [-Wunused-parameter] ; - include/ROOT/TDFNodes.hxx:428:38: warning: unused parameter ‘shouldPassSlotNumber’ [-Wunused-parameter] ; - include/ROOT/TDFNodes.hxx:428:38: warning: unused parameter ‘shouldPassSlotNumber’ [-Wunused-parameter] ; - include/ROOT/TDFNodes.hxx:428:38: warning: unused parameter ‘shouldPassSlotNumber’ [-Wunused-parameter] ; - include/ROOT/TDFNodes.hxx:428:38: warning: unused parameter ‘shouldPassSlotNumber’ [-Wunused-parameter] ; - include/ROOT/TDFNodes.hxx:428:38: warning: unused parameter ‘shouldPassSlotNumber’ [-Wunused-parameter] ; - include/ROOT/TDFNodes.hxx:428:38: warning: unused parameter ‘shouldPassSlotNumber’ [-Wunused-parameter] ; - include/ROOT/TDFNodes.hxx:428:38: warning: unused parameter ‘shouldPassSlotNumber’ [-Wunused-parameter] . And 23 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/982#issuecomment-329148378:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/982#issuecomment-329148378,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/5856/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - error: fetch-pack died of signal 15 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/982#issuecomment-329166852:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/982#issuecomment-329166852,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/5956/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - error: fetch-pack died of signal 15 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/992#issuecomment-329431793:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/992#issuecomment-329431793,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/5976/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.bindings.pyroot.test.pyroot_list_init](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/5976/testReport/projectroot.bindings.pyroot/test/pyroot_list_init/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/993#issuecomment-329444965:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/993#issuecomment-329444965,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/6131/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.meta.naming.roottest_root_meta_naming_execParamPack_auto](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/6131/testReport/projectroot.roottest.root.meta/naming/roottest_root_meta_naming_execParamPack_auto/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/999#issuecomment-329806804:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/999#issuecomment-329806804,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/6344/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1015#issuecomment-330571994:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1015#issuecomment-330571994,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/6444/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/995#issuecomment-330809169:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/995#issuecomment-330809169,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/6499/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1028#issuecomment-330928620:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1028#issuecomment-330928620,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/6574/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1034#issuecomment-331115135:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1034#issuecomment-331115135,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/6679/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=56, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1041#issuecomment-331428802:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1041#issuecomment-331428802,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7141/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1058#issuecomment-332962171:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1058#issuecomment-332962171,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7491/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - error: fetch-pack died of signal 15 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1088#issuecomment-333523100:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1088#issuecomment-333523100,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7726/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1113#issuecomment-333796354:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1113#issuecomment-333796354,2,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7731/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1114#issuecomment-333796700:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1114#issuecomment-333796700,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7796/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1120#issuecomment-333837091:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1120#issuecomment-333837091,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7806/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1120#issuecomment-333858042:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1120#issuecomment-333858042,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7926/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1114#issuecomment-334105890:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1114#issuecomment-334105890,2,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7931/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1113#issuecomment-334102301:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1113#issuecomment-334102301,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7936/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1112#issuecomment-334103136:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1112#issuecomment-334103136,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7991/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.tree.reader.roottest_root_tree_reader_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/7991/testReport/projectroot.roottest.root.tree/reader/roottest_root_tree_reader_make/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1127#issuecomment-334149051:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1127#issuecomment-334149051,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8021/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1127#issuecomment-334206923:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1127#issuecomment-334206923,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8046/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1127#issuecomment-334265511:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1127#issuecomment-334265511,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8066/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-334302090:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-334302090,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8106/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1112#issuecomment-334407960:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1112#issuecomment-334407960,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8111/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1113#issuecomment-334406651:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1113#issuecomment-334406651,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8131/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1109#issuecomment-334424464:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1109#issuecomment-334424464,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8366/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1143#issuecomment-334696387:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1143#issuecomment-334696387,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8367/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1143#issuecomment-334698212:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1143#issuecomment-334698212,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8618/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_assertHumanReadable](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8618/testReport/projectroot.roottest.root/core/roottest_root_core_assertHumanReadable/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1159#issuecomment-335158777:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1159#issuecomment-335158777,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8619/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.core.roottest_root_core_assertHumanReadable](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8619/testReport/projectroot.roottest.root/core/roottest_root_core_assertHumanReadable/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1159#issuecomment-335155059:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1159#issuecomment-335155059,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8682/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1160#issuecomment-335410645:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1160#issuecomment-335410645,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8816/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1173#issuecomment-335791649:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1173#issuecomment-335791649,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/8837/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1176#issuecomment-335821109:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1176#issuecomment-335821109,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9076/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1065#issuecomment-337005122:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1065#issuecomment-337005122,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9306/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Warnings:; - googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:1522:28: warning: the compiler can assume that the address of ‘val1’ will never be NULL [-Waddress] ; - googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:1510:3: warning: nonnull argument ‘val1’ compared to NULL [-Wnonnull-compare] . ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_reread](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9306/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_reread/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1206#issuecomment-337977669:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1206#issuecomment-337977669,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9307/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Warnings:; - googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:1522:28: warning: the compiler can assume that the address of ‘val1’ will never be NULL [-Waddress] ; - googletest-prefix/src/googletest/googletest/include/gtest/gtest.h:1510:3: warning: nonnull argument ‘val1’ compared to NULL [-Wnonnull-compare] . ### Failing tests:; - [projectroot.roottest.cling.specialobj.roottest_cling_specialobj_reread](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9307/testReport/projectroot.roottest.cling/specialobj/roottest_cling_specialobj_reread/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1206#issuecomment-337977677:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1206#issuecomment-337977677,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9633/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1223#issuecomment-339125728:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1223#issuecomment-339125728,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9740/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1226#issuecomment-339482615:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1226#issuecomment-339482615,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9741/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1226#issuecomment-339483118:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1226#issuecomment-339483118,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9834/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1233#issuecomment-339649779:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1233#issuecomment-339649779,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9917/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin'",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1241#issuecomment-339908841:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1241#issuecomment-339908841,1,['Timeout'],['Timeout']
Safety,"Build failed on slc6/gcc62.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9986/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - stderr: error: RPC failed; result=18, HTTP code = 200 ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.io.treeForeign.roottest_root_io_treeForeign_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9986/testReport/projectroot.roottest.root.io/treeForeign/roottest_root_io_treeForeign_make/); - [projectroot.roottest.root.io.treeproblem.roottest_root_io_treeproblem_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9986/testReport/projectroot.roottest.root.io/treeproblem/roottest_root_io_treeproblem_make/); - [projectroot.roottest.root.tree.chain.roottest_root_tree_chain_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9986/testReport/projectroot.roottest.root.tree/chain/roottest_root_tree_chain_make/); - [projectroot.roottest.root.tree.cloning.roottest_root_tree_cloning_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9986/testReport/projectroot.roottest.root.tree/cloning/roottest_root_tree_cloning_make/); - [projectroot.roottest.root.tree.split.roottest_root_tree_split_make](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9986/testReport/projectroot.roottest.root.tree/split/roottest_root_tree_split_make/); - [projectroot.roottest.root.tree.readcin.roottest_root_tree_readcin_parseCin](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9986/testReport/projectroot.roottest.root.tree/readcin/roottest_root_tree_readcin_parseCin/); - [projectroot.roottest.root.tree.readcin.roottest_root_tree_readcin_readFromCin](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/9986/testReport/projectroot.roottest.root.tree/readcin/roottest_root_tree_readcin_readFromCin/)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1226#issuecomment-340012683:146,Timeout,Timeout,146,https://root.cern,https://github.com/root-project/root/pull/1226#issuecomment-340012683,1,['Timeout'],['Timeout']
Safety,Build failed on ubuntu14/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/13184/console).; ### Errors:; - /mnt/vdb/lsf/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:92:34: error: no template named 'remove_const_t' in namespace 'std'; did you mean 'remove_const'? ; - /mnt/vdb/lsf/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:97:40: error: no template named 'remove_const_t' in namespace 'std'; did you mean 'remove_const'? ; - Error: /mnt/vdb/lsf/workspace/root-pullrequests-build/build/core/rootcling_stage1/src/rootcling_stage1: compilation failure (/mnt/vdb/lsf/workspace/root-pullrequests-build/build/lib/libCore70f32af92c_dictUmbrella.h) . ### Warnings:; - /mnt/vdb/lsf/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:116:18: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - /mnt/vdb/lsf/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:117:18: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - /mnt/vdb/lsf/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:83:5: warning: use of this statement in a constexpr constructor is a C++14 extension [-Wc++14-extensions] ; - /mnt/vdb/lsf/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:85:5: warning: use of this statement in a constexpr constructor is a C++14 extension [-Wc++14-extensions],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1405#issuecomment-348252861:921,avoid,avoid,921,https://root.cern,https://github.com/root-project/root/pull/1405#issuecomment-348252861,2,['avoid'],['avoid']
Safety,Build failed on ubuntu14/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/13185/console).; ### Errors:; - /mnt/vdb/lsf/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:92:34: error: no template named 'remove_const_t' in namespace 'std'; did you mean 'remove_const'? ; - /mnt/vdb/lsf/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:97:40: error: no template named 'remove_const_t' in namespace 'std'; did you mean 'remove_const'? ; - Error: /mnt/vdb/lsf/workspace/root-pullrequests-build/build/core/rootcling_stage1/src/rootcling_stage1: compilation failure (/mnt/vdb/lsf/workspace/root-pullrequests-build/build/lib/libCorea5d33d9ed9_dictUmbrella.h) . ### Warnings:; - /mnt/vdb/lsf/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:116:18: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - /mnt/vdb/lsf/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:117:18: warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior [-Wconstexpr-not-const] ; - /mnt/vdb/lsf/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:83:5: warning: use of this statement in a constexpr constructor is a C++14 extension [-Wc++14-extensions] ; - /mnt/vdb/lsf/workspace/root-pullrequests-build/build/include/ROOT/span.hxx:85:5: warning: use of this statement in a constexpr constructor is a C++14 extension [-Wc++14-extensions],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1405#issuecomment-348253794:921,avoid,avoid,921,https://root.cern,https://github.com/root-project/root/pull/1405#issuecomment-348253794,2,['avoid'],['avoid']
Safety,Build failed on ubuntu14/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/14431/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.tree.treeplayer.test.gtest_tree_treeplayer_test_dataframe_simple](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/14431/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_simple/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1454#issuecomment-353063791:152,Timeout,Timeout,152,https://root.cern,https://github.com/root-project/root/pull/1454#issuecomment-353063791,1,['Timeout'],['Timeout']
Safety,Build failed on ubuntu16/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/28119/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2102#issuecomment-392816360:152,Timeout,Timeout,152,https://root.cern,https://github.com/root-project/root/pull/2102#issuecomment-392816360,1,['Timeout'],['Timeout']
Safety,Build failed on ubuntu16/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31530/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error cloning remote repo 'origin' ; - ERROR: Error cloning remote repo 'origin' ; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2266#issuecomment-401150360:152,Timeout,Timeout,152,https://root.cern,https://github.com/root-project/root/pull/2266#issuecomment-401150360,2,['Timeout'],['Timeout']
Safety,Build failed on ubuntu16/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31629/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2277#issuecomment-401573554:152,Timeout,Timeout,152,https://root.cern,https://github.com/root-project/root/pull/2277#issuecomment-401573554,1,['Timeout'],['Timeout']
Safety,"Build failed on ubuntu16/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31665/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error cloning remote repo 'origin' ; - ERROR: Error cloning remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error cloning remote repo 'origin' ; - ERROR: Error cloning remote repo 'origin' ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/test/testVectorizedTMath.cxx:39:56: error: cannot convert ‘ROOT::Double_v {aka Vc_1::Vector&lt;double, Vc_1::VectorAbi::Sse&gt;}’ to ‘Double_t {aka double}’ for argument ‘1’ to ‘Double_t TMath::Log2(Double_t)’ ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/test/testVectorizedTMath.cxx:39:56: error: cannot convert ‘ROOT::Double_v {aka Vc_1::Vector&lt;double, Vc_1::VectorAbi::Sse&gt;}’ to ‘Double_t {aka double}’ for argument ‘1’ to ‘Double_t TMath::BreitWigner(Double_t, Double_t, Double_t)’ ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/test/testVectorizedTMath.cxx:39:56: error: cannot convert ‘ROOT::Double_v {aka Vc_1::Vector&lt;double, Vc_1::VectorAbi::Sse&gt;}’ to ‘Double_t {aka double}’ for argument ‘1’ to ‘Double_t TMath::Gaus(Double_t, Double_t, Double_t, Bool_t)’ ; - /mnt/build/workspace/root-pullrequests-build/root/math/mathcore/test/testVectorizedTMath.cxx:39:56: error: cannot convert ‘ROOT::Double_v {aka Vc_1::Vector&lt;double, Vc_1::VectorAbi::Sse&gt;}’ to ‘Double_t {aka double}’ for argument ‘1’ to ‘Double_t TMath::LaplaceDist(Double_t, Double_t, Double_t)’ . And 4 more",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-401800599:152,Timeout,Timeout,152,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-401800599,2,['Timeout'],['Timeout']
Safety,Build failed on ubuntu16/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31728/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin' . ### Failing tests:; - [projectroot.roottest.root.multicore.roottest_root_multicore_processExecutorH1Test](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/31728/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_processExecutorH1Test/),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2283#issuecomment-402419469:152,Timeout,Timeout,152,https://root.cern,https://github.com/root-project/root/pull/2283#issuecomment-402419469,1,['Timeout'],['Timeout']
Safety,Build failed on ubuntu16/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/32448/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error cloning remote repo 'origin' ; - ERROR: Error cloning remote repo 'origin' . ### Warnings:; - include/ROOT/RDFActionHelpers.hxx:334:51: warning: ‘ROOT::Internal::RDF::FillTGraphHelper::fTo’ will be initialized after [-Wreorder] ; - include/ROOT/RDFActionHelpers.hxx:331:28: warning: ‘std::shared_ptr&lt;TGraph&gt; ROOT::Internal::RDF::FillTGraphHelper::fResultGraph’ [-Wreorder] ; - include/ROOT/RDFActionHelpers.hxx:341:4: warning: when initialized here [-Wreorder] ; - include/ROOT/RDFActionHelpers.hxx:334:51: warning: ‘ROOT::Internal::RDF::FillTGraphHelper::fTo’ will be initialized after [-Wreorder] ; - include/ROOT/RDFActionHelpers.hxx:331:28: warning: ‘std::shared_ptr&lt;TGraph&gt; ROOT::Internal::RDF::FillTGraphHelper::fResultGraph’ [-Wreorder] ; - include/ROOT/RDFActionHelpers.hxx:341:4: warning: when initialized here [-Wreorder] ; - include/ROOT/RDFActionHelpers.hxx:334:51: warning: ‘ROOT::Internal::RDF::FillTGraphHelper::fTo’ will be initialized after [-Wreorder] ; - include/ROOT/RDFActionHelpers.hxx:331:28: warning: ‘std::shared_ptr&lt;TGraph&gt; ROOT::Internal::RDF::FillTGraphHelper::fResultGraph’ [-Wreorder] ; - include/ROOT/RDFActionHelpers.hxx:341:4: warning: when initialized here [-Wreorder] ; - include/ROOT/RDFActionHelpers.hxx:334:51: warning: ‘ROOT::Internal::RDF::FillTGraphHelper::fTo’ will be initialized after [-Wreorder] . And 84 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2318#issuecomment-405244648:152,Timeout,Timeout,152,https://root.cern,https://github.com/root-project/root/pull/2318#issuecomment-405244648,1,['Timeout'],['Timeout']
Safety,Build failed on ubuntu16/native.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/33025/console).; ### Errors:; - ERROR: Timeout after 30 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2324#issuecomment-406858321:152,Timeout,Timeout,152,https://root.cern,https://github.com/root-project/root/pull/2324#issuecomment-406858321,1,['Timeout'],['Timeout']
Safety,"Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/119078/console).; ### Warnings:; - [2021-06-02T09:28:56.271Z] ghprbPullLongDescription=Warning like:\r\n```\r\ngeom/geom/src/TGeoManager.cxx:521:4: warning: this 'if' clause does not guard... [-Wmisleading-indentation]\r\n 521 | if (fHashVolumes) fHashVolumes-&gt;Clear(\""nodelete\""); SafeDelete(fHashVolumes);\r\n``` ; - [2021-06-02T10:19:30.580Z] ghprbPullLongDescription=Warning like:\r\n```\r\ngeom/geom/src/TGeoManager.cxx:521:4: warning: this 'if' clause does not guard... [-Wmisleading-indentation]\r\n 521 | if (fHashVolumes) fHashVolumes-&gt;Clear(\""nodelete\""); SafeDelete(fHashVolumes);\r\n```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8316#issuecomment-852950636:473,Safe,SafeDelete,473,https://root.cern,https://github.com/root-project/root/pull/8316#issuecomment-852950636,2,['Safe'],['SafeDelete']
Safety,"Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121135/console).; ### Warnings:; - [2021-06-28T14:32:17.842Z] ghprbPullLongDescription=Enable `-Wredundant-parens`, to warn about redundant parentheses in declarators whose parsing might not match the user intent, e.g.\r\n```\r\nroot [0] int i = 1;\r\nroot [1] (bool)i\r\n(bool) true\r\nroot [2] bool(i)\r\nROOT_prompt_1:1:5: warning: redundant parentheses surrounding declarator [-Wredundant-parens]\r\nbool(i)\r\n ^~~\r\n(bool) false\r\n```\r\n\r\nFor more information see the discussion [here](http://github.com/root-project/issues/8304).\r\nThis PR fixes issue #8304.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555#issuecomment-869800178:318,redund,redundant,318,https://root.cern,https://github.com/root-project/root/pull/8555#issuecomment-869800178,2,['redund'],['redundant']
Safety,"Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/121588/console).; ### Warnings:; - [2021-07-02T10:37:58.722Z] ghprbPullLongDescription=Enable `-Wredundant-parens`, to warn about redundant parentheses in declarators whose parsing might not match the user intent, e.g.\r\n```\r\nroot [0] int i = 1;\r\nroot [1] (bool)i\r\n(bool) true\r\nroot [2] bool(i)\r\nROOT_prompt_1:1:5: warning: redundant parentheses surrounding declarator [-Wredundant-parens]\r\nbool(i)\r\n ^~~\r\n(bool) false\r\n```\r\n\r\nFor more information see the discussion [here](http://github.com/root-project/issues/8304).\r\nThis PR fixes issue #8304.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555#issuecomment-872954438:318,redund,redundant,318,https://root.cern,https://github.com/root-project/root/pull/8555#issuecomment-872954438,2,['redund'],['redundant']
Safety,"Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/143838/console).; ### Warnings:; - [2022-05-01T11:19:54.706Z] ghprbPullLongDescription=This is done to avoid this compiler warning that I get when compiling\r\nROOT with gcc:\r\n\r\n```\r\ncore/base/inc/TStorage.h:131:37: warning: declaration of 'static void TStorage::UpdateIsOnHeap(const volatile UInt_t&, volatile UInt_t&)' with attribute 'noinline' follows inline declaration [-Wattributes]\r\n 131 | R__NEVER_INLINE void TStorage::UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits) {\r\n | ^~~~~~~~\r\ncore/base/inc/TStorage.h:91:20: note: previous declaration of 'static void TStorage::UpdateIsOnHeap(const volatile UInt_t&, volatile UInt_t&)' here\r\n 91 | static void UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits);\r\n```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10500#issuecomment-1114211439:291,avoid,avoid,291,https://root.cern,https://github.com/root-project/root/pull/10500#issuecomment-1114211439,1,['avoid'],['avoid']
Safety,Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164118/console).; ### Errors:; - [2023-01-12T21:27:15.332Z] CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1138 (message): . ### Warnings:; - [2023-01-12T21:26:08.928Z] stderr: warning: inexact rename detection was skipped due to too many files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11208#issuecomment-1381012590:433,detect,detection,433,https://root.cern,https://github.com/root-project/root/pull/11208#issuecomment-1381012590,1,['detect'],['detection']
Safety,Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164220/console).; ### Errors:; - [2023-01-14T15:46:21.185Z] CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1138 (message): . ### Warnings:; - [2023-01-14T15:45:19.477Z] stderr: warning: inexact rename detection was skipped due to too many files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11208#issuecomment-1382826142:433,detect,detection,433,https://root.cern,https://github.com/root-project/root/pull/11208#issuecomment-1382826142,1,['detect'],['detection']
Safety,Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164227/console).; ### Errors:; - [2023-01-14T15:58:26.086Z] CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1138 (message): . ### Warnings:; - [2023-01-14T15:57:23.366Z] stderr: warning: inexact rename detection was skipped due to too many files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11208#issuecomment-1382829925:433,detect,detection,433,https://root.cern,https://github.com/root-project/root/pull/11208#issuecomment-1382829925,1,['detect'],['detection']
Safety,Build failed on windows10/cxx14.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/164353/console).; ### Errors:; - [2023-01-16T16:05:23.834Z] CMake Error at C:/build/workspace/root-pullrequests-build/rootspi/jenkins/root-build.cmake:1138 (message): . ### Warnings:; - [2023-01-16T16:04:15.465Z] stderr: warning: inexact rename detection was skipped due to too many files.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11208#issuecomment-1384256245:433,detect,detection,433,https://root.cern,https://github.com/root-project/root/pull/11208#issuecomment-1384256245,1,['detect'],['detection']
Safety,"Build failed on windows10/default.; Running on null:C:\build\workspace\root-pullrequests-build; [See console output](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/191653/console).; ### Errors:; - [2023-12-18T16:27:35.113Z] C:\build\workspace\root-pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\include\clang/AST/Attrs.inc(7944,44): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Analysis\UnsafeBufferUsage.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\lib\Analysis\obj.clangAnalysis.vcxproj] ; - [2023-12-18T16:27:35.113Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\include\clang/AST/Type.h(3196,26): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Frontend\Rewrite\FrontendActions.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\lib\Frontend\Rewrite\obj.clangRewriteFrontend.vcxproj] ; - [2023-12-18T16:27:35.113Z] C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.32.31326\include\vector(701,1): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Parse\ParseExpr.cpp) [C:\build\workspace\root-pullrequests-build\build\interpreter\llvm-project\llvm\tools\clang\lib\Parse\obj.clangParse.vcxproj] ; - [2023-12-18T16:27:35.113Z] C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\include\clang/Sema/ScopeInfo.h(925,53): fatal error C1060: compiler is out of heap space (compiling source file C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaTemplateInstantiateDecl.cpp) [C:\build\workspace\root-pullrequests",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14245#issuecomment-1861003544:543,Unsafe,UnsafeBufferUsage,543,https://root.cern,https://github.com/root-project/root/pull/14245#issuecomment-1861003544,1,['Unsafe'],['UnsafeBufferUsage']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/49914/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3118#issuecomment-445181107:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/3118#issuecomment-445181107,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/51812/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852#issuecomment-455136970:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/2852#issuecomment-455136970,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/56980/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3663#issuecomment-481601436:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/3663#issuecomment-481601436,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/57092/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3677#issuecomment-481837444:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/3677#issuecomment-481837444,2,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/58307/console).; ### Errors:; - ERROR: Timeout after 10 minutes . ### Warnings:; - CMake Warning at interpreter/llvm/src/CMakeLists.txt:56 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3726#issuecomment-487540885:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/3726#issuecomment-487540885,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/59541/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3834#issuecomment-493932579:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/3834#issuecomment-493932579,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/60010/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3856#issuecomment-496141317:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/3856#issuecomment-496141317,2,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/61500/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3940#issuecomment-502700768:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/3940#issuecomment-502700768,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64100/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin' ; - CMake Error at C:/build/workspace/root-pullrequests-build_2/rootspi/jenkins/root-build.cmake:845 (message):,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4128#issuecomment-515975035:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/4128#issuecomment-515975035,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64262/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3962#issuecomment-517655339:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/3962#issuecomment-517655339,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64316/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4146#issuecomment-517791912:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/4146#issuecomment-517791912,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64328/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-517795855:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-517795855,2,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/64468/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4157#issuecomment-519067049:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/4157#issuecomment-519067049,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65422/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin' ; - error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. ; - error: cannot lock ref 'refs/remotes/origin/pr/3957/head': Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/refs/remotes/origin/pr/3957/head.lock': File exists. ; - error: cannot lock ref 'refs/remotes/origin/pr/4056/head': Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/refs/remotes/origin/pr/4056/head.lock': File exists. ; - error: failed to run reflog ; - error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. ; - error: cannot lock ref 'refs/remotes/origin/pr/3957/head': Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/refs/remotes/origin/pr/3957/head.lock': File exists. ; - error: cannot lock ref 'refs/remotes/origin/pr/4056/head': Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/refs/remotes/origin/pr/4056/head.lock': File exists. . And 1 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4234#issuecomment-522265727:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/4234#issuecomment-522265727,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/default.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/65458/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin' ; - error: Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/logs/HEAD.lock': File exists. ; - error: cannot lock ref 'refs/heads/agheata-agheata/unitsTGeoG4': Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/refs/heads/agheata-agheata/unitsTGeoG4.lock': File exists. ; - error: cannot lock ref 'refs/heads/maxgalli-HistoModelRDF': Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/refs/heads/maxgalli-HistoModelRDF.lock': File exists. ; - error: cannot lock ref 'refs/remotes/origin/pr/3957/head': Unable to create 'C:/build/workspace/root-pullrequests-build_2/root/.git/refs/remotes/origin/pr/3957/head.lock': File exists. . And 8 more,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4234#issuecomment-522541402:154,Timeout,Timeout,154,https://root.cern,https://github.com/root-project/root/pull/4234#issuecomment-522541402,2,['Timeout'],['Timeout']
Safety,Build failed on windows10/vc15.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/13031/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1399#issuecomment-347878279:151,Timeout,Timeout,151,https://root.cern,https://github.com/root-project/root/pull/1399#issuecomment-347878279,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/vc15.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/13884/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1439#issuecomment-350336721:151,Timeout,Timeout,151,https://root.cern,https://github.com/root-project/root/pull/1439#issuecomment-350336721,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/vc15.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/19531/console).; ### Errors:; - ERROR: Timeout after 10 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1737#issuecomment-372837315:151,Timeout,Timeout,151,https://root.cern,https://github.com/root-project/root/pull/1737#issuecomment-372837315,1,['Timeout'],['Timeout']
Safety,Build failed on windows10/vc15.; [See console output](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/34013/console).; ### Errors:; - ERROR: Timeout after 5 minutes ; - ERROR: Error fetching remote repo 'origin' ; - ERROR: Error fetching remote repo 'origin',MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2351#issuecomment-408764670:151,Timeout,Timeout,151,https://root.cern,https://github.com/root-project/root/pull/2351#issuecomment-408764670,1,['Timeout'],['Timeout']
Safety,Build system cannot detect version of oneTBB,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8260:20,detect,detect,20,https://root.cern,https://github.com/root-project/root/issues/8260,1,['detect'],['detect']
Safety,Builtin CFITSIO: 3.45 -> 4.4.0 to avoid indirect CURL dependency,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508:34,avoid,avoid,34,https://root.cern,https://github.com/root-project/root/pull/15508,1,['avoid'],['avoid']
Safety,"C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 880: Environment variables:; 880: ROOT_HIST=0; 880: Test timeout computed to be: 1500; 880: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 880: error code: -529697949; 880:; 880:; 3/16 Test #880: tutorial-dataframe-df003_profiles-py .....................***Failed 4.47 sec; test 881; Start 881: tutorial-dataframe-df004_cutFlowReport-py. 881: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df004_cutFlowReport.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 881: Environment variables:; 881: ROOT_HIST=0; 881: Test timeout computed to be: 1500; 881: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 881: error code: -529697949; 881:; 881:; 4/16 Test #881: tutorial-dataframe-df004_cutFlowReport-py ................***Failed 4.53 sec; test 882; Start 882: tutorial-dataframe-df006_ranges-py. 882: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df006_ranges.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 882: Environment variables:; 882: ROOT_HIST=0; 882: Test timeout computed to be: 1500; 882: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 882: error code: -529697949; 882:; 882:; 5/16 Test #882: tutorial-dataframe-df006_ranges-py .......................***Failed ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:3121,timeout,timeout,3121,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['timeout'],['timeout']
Safety,CMake ExternalProject: add `TIMEOUT`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6635:28,TIMEOUT,TIMEOUT,28,https://root.cern,https://github.com/root-project/root/issues/6635,1,['TIMEOUT'],['TIMEOUT']
Safety,"CMake should detect this, but since the output `G__Imt.cxx` is used both by `G__Imt` (custom target created by `ROOT_GENERATE_DICTIONARY()`) and `Imt` (via `target_sources()`), it leads to problems in parallel builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3227:13,detect,detect,13,https://root.cern,https://github.com/root-project/root/pull/3227,1,['detect'],['detect']
Safety,"CN=dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Ftriumf.ca%2F&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400460986294%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=h9OXPXSoNf6rog1YhZy1Iuiji7Tq8asNeePutHMw2rs%3D&reserved=0>,O=Grid,C=CA; >>>>>>> * 	start date: Apr 08 16:29:03 2021 GMT; >>>>>>> * 	expire date: May 08 16:29:03 2022 GMT; >>>>>>> * 	common name: dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>; >>>>>>> * 	issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>>>>>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>>>>>> * Peer's Certificate issuer is not recognized.; >>>>>>> * Closing connection 0; >>>>>>> curl: (60) Peer's Certificate issuer is not recognized.; >>>>>>> More details here: http://curl.haxx.se/docs/sslcerts.html <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%2Fdocs%2Fsslcerts.html&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400460996291%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=s%2FTzkvNzM41e0GBRqYtbxaUzcM3edlGm0YFY9wV%2BN2M%3D&reserved=0>; >>>>>>> ; >>>>>>> curl performs SSL certificate verification by default, using a ""bundle""; >>>>>>> of Certificate Authority (CA) public keys (CA certs). If the default; >>>>>>> bundle file isn't adequate, you can specify an alternate file; >>>>>>> using the --cacert option.; >>>>>>> If this HTTPS server uses a certificate signed by a CA represented in; >>>>>>> the bundle, the certificate verification probably failed due to a; >>>>>>> problem with the certificate (it might be expired, or the name might; >>>>>>> not match the domain name in the URL).; >>>>>>> If you'd like to turn off curl's verification of th",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840018942:5998,safe,safelinks,5998,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840018942,1,['safe'],['safelinks']
Safety,CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Checking whether Fortran compiler has -isysroot; -- Checking whether Fortran compiler has -isysroot - yes; -- Checking whether Fortran compiler supports OSX deployment target flag; -- Checking whether Fortran compiler supports OSX deployment target flag - yes; -- Check for working Fortran compiler: /usr/local/bin/gfortran; -- Check for working Fortran compiler: /usr/local/bin/gfortran -- works; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Checking whether /usr/local/bin/gfortran supports Fortran 90; -- Checking whether /usr/local/bin/gfortran supports Fortran 90 -- yes; -- Performing Test COMPILER_SUPPORTS_-O1; -- Performing Test COMPILER_SUPPORTS_-O1 - Success; -- Performing Test COMPILER_SUPPORTS_-pipe; -- Performing Test COMPILER_SUPPORTS_-pipe - Success; -- Performing Test COMPILER_SUPPORTS_-g; -- Performing Test COMPILER_SUPPORTS_-g - Success; -- Performing Test COMPILER_SUPPORTS_-Wall; -- Performing Test COMPILER_SUPPORTS_-Wall - Success; -- ROOT_FOUND: 1; -- ROOT_USE_FILE /Users/couet/git/roottrunk-bin/ROOTUseFile.cmake; -- ROOT includes: /Users/couet/git/roottrunk-bin/include; -- ROOT libraries: /Users/couet/git/roottrunk-bin/lib/libCore.so;/Users/couet/git/roottrunk-bin/lib/libImt.so;/Users/couet/git/roottrunk-bin/lib/libRIO.so;/Users/couet/git/roottrunk-bin/lib/libNet.so;/Users/couet/git/roottrunk-bin/lib/libHist.so;/Users/couet/git/roottrunk-bin/lib/libGraf.so;/Users/cou,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-692657827:1096,Detect,Detecting,1096,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-692657827,6,['Detect'],['Detecting']
Safety,"CXX_FLAG_WCAST_QUAL - Success; -- Performing Test C_FLAG_WSTRICT_PROTOTYPES; -- Performing Test C_FLAG_WSTRICT_PROTOTYPES - Success; -- Building AfterImage library included in ROOT itself; -- Looking for XROOTD; -- Found Xrootd version num: 5.5.4 (setting -DROOTXRDVERS=500050004); -- libXrdMain not found: xproofd will be a wrapper around xrootd; -- libXrdClient not found: use built-in; -- include_dirs: /home/ubuntu/temp/install/include/xrootd;/home/ubuntu/git/root/proof/xrdinc; -- libraries: /home/ubuntu/temp/install/lib/libXrdUtils.so;/home/ubuntu/temp/install/lib/libXrdCl.so; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success; -- Building LLVM in 'Release' mode.; -- The ASM compiler identification is GNU; -- Found assembler: /usr/bin/cc; -- Found LibXml2: /usr/lib/x86_64-linux-gnu/libxml2.so (found version ""2.9.10""); -- Looking for backtrace; -- Looking for backtrace - found; -- backtrace facility detected in default set of libraries; -- Found Backtrace: /usr/include; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- Found Python module pygments; -- Found Python module pygments.lexers.c_cpp; -- Found Python module yaml; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.10"", minimum required is ""3.0"") found components: Interpreter; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 13.0.0; -- Not building amdgpu-arch: hsa-runtime64 not found; -- Cling version (from VERSION file): ROOT_1.0~dev; -- Cling will look for C++ headers in '/usr/include/c++/9:/usr/include/x86_64-linux-gnu/c++/9:/usr/include/c++/9/backward' at runtime.; -- And then fallback to: 'x86_64-l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12631#issuecomment-1504751163:4792,detect,detected,4792,https://root.cern,https://github.com/root-project/root/issues/12631#issuecomment-1504751163,1,['detect'],['detected']
Safety,Caching and initialization of TClass::fIsAMethod have been changed; to make them thread safe and for calls to the TMethodCall can happen; concurrently.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/28:88,safe,safe,88,https://root.cern,https://github.com/root-project/root/pull/28,1,['safe'],['safe']
Safety,Call SetDirectory(0) for the internal histogram ( plot + MC prediction templates) managed by TFractionFitter. This avoids double-delete when deleting TFractionFitter and gDirectory and fixes ROOT-10752,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6255:60,predict,prediction,60,https://root.cern,https://github.com/root-project/root/pull/6255,2,"['avoid', 'predict']","['avoids', 'prediction']"
Safety,Call `Modified()` method for the canvas itself - there are no logical reasons why `gPad->Modified()` was called. Instead calling `SetName(name)` directly set `fName` member in all TCanvas constructors. ; This avoids triggering of `Modified()` signal from the constructor itself. Fix logic around empty canvas name in `TCanvas::SaveSource`. ; There also use direct assignment of `fName` member.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15518:209,avoid,avoids,209,https://root.cern,https://github.com/root-project/root/pull/15518,1,['avoid'],['avoids']
Safety,"Call `TCanvas::HighlightConnect` before canvas draw for the first time.; This let in case of `TWebCanvas` immediately detect such state and configure canvas. Also avoid forward declaration of functions just by resorting their order.; Use more c++11 syntax. Important - adjust `TH1::SetHighlight()` to use it without histogram painting, as with `TWebCanvas`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9714:118,detect,detect,118,https://root.cern,https://github.com/root-project/root/pull/9714,2,"['avoid', 'detect']","['avoid', 'detect']"
Safety,"Call typed overload of `SetBranchAddress` for array types like `np.ndarray` or `array.array`. The correct C++ template parameter is inferred from the array interface type information. This is an improvement for two reasons:. 1. We don't need to cast the arrays to a `void *` to avoid template resolution problems anymore. 2. More importantly: ROOT will do a runtime check for type compatibility, which was requested in the JIRA ticked linked below. To see the benefit of the added type check, take for example this code, where the branch address is set to an array address with a mismatched type:. ```python; import array; import ROOT. def create():; f = ROOT.TFile(""dummy.root"", 'RECREATE'); t = ROOT.TTree(""tree"", 'A tree'); a = array.array('f', [42]); br = t.Branch('a', a, 'a/F'). for x in (21, 42, 1337):; a[0] = x; t.Fill(). t.Write(); f.Close(). def test(typecode='f'):; f = ROOT.TFile(""dummy.root"", 'READ'); t = f.Get('tree'); a = array.array(typecode, [0]); status = t.SetBranchAddress('a', a); print(""Status = %s"" % (status, )). for i in range(t.GetEntries()):; t.GetEntry(i); print(""a = %s"" % (a[0], )). create(); test(""f""); test(""d""); ```. Before this commit, the output would be like this:; ```txt; Status = 4; a = 21.0; a = 42.0; a = 1337.0; Status = 4; a = 5.442276803e-315; a = 5.483722033e-315; a = 5.690664868e-315; ```. With this commit, you get a clear error:; ```txt; Status = 0; a = 21.0; a = 42.0; a = 1337.0; Error in <TTree::SetBranchAddress>: The pointer type given ""Double_t"" (8) does not correspond to the type needed ""Float_t"" (5) by the branch: a; Status = -2; a = 0.0; a = 0.0; a = 0.0; ```. Closes the following JIRA ticket:; https://its.cern.ch/jira/browse/ROOT-8213",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16171:278,avoid,avoid,278,https://root.cern,https://github.com/root-project/root/pull/16171,1,['avoid'],['avoid']
Safety,Can be activated for RWebWindow. ; Avoids blocking of application code due-to single slow client.; Use `cond.notify_all()` only when really condition in the wait state,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4143:35,Avoid,Avoids,35,https://root.cern,https://github.com/root-project/root/pull/4143,1,['Avoid'],['Avoids']
Safety,Can the build be aborted and restarted ?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8220#issuecomment-868392903:17,abort,aborted,17,https://root.cern,https://github.com/root-project/root/pull/8220#issuecomment-868392903,1,['abort'],['aborted']
Safety,Can we also add a test to avoid regressions in the future?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15810#issuecomment-2162346278:26,avoid,avoid,26,https://root.cern,https://github.com/root-project/root/pull/15810#issuecomment-2162346278,1,['avoid'],['avoid']
Safety,"Can we merge this change together with calling `EnableThreadSafety` from `TTreeProcessorMT`'s constructor too? We remove the `EnableImplicitMT` from `Process`, but we ensure the thread safety in the constructor, and we make it symmetric with `TThreadExecutor`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5304#issuecomment-609777878:185,safe,safety,185,https://root.cern,https://github.com/root-project/root/pull/5304#issuecomment-609777878,1,['safe'],['safety']
Safety,"Can we merge this? Currently `net/netx` is still built I think, and and it would be cool to avoid the corresponding build time and binary sizes!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15244#issuecomment-2068952497:92,avoid,avoid,92,https://root.cern,https://github.com/root-project/root/pull/15244#issuecomment-2068952497,1,['avoid'],['avoid']
Safety,Change clang-format settings to avoid if statement and its body on the same line,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/795:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/795,1,['avoid'],['avoid']
Safety,Change raw pointer methods to shared pointers or const ref. Remove unsafe and unnecessary methods. Add `RNTupleModel::GenerateBulk()`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14454:67,unsafe,unsafe,67,https://root.cern,https://github.com/root-project/root/pull/14454,1,['unsafe'],['unsafe']
Safety,"Change the buffer management in the new RooFit BatchMode such that; queues get cleared when the RooFitDriver gets destructed. Like this one avoids the steady increase in memory that one would get; when doing different fits in one go with different numbers of events,; such as in test suites or MC studies with extended models.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10736:140,avoid,avoids,140,https://root.cern,https://github.com/root-project/root/pull/10736,1,['avoid'],['avoids']
Safety,"Change the name of the file where the tutorial TMVA_SOFIE_RDataFrame.py writes the model, to avoid a conflict with TMVA_SOFIE_RDataFrame.C",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15622:93,avoid,avoid,93,https://root.cern,https://github.com/root-project/root/pull/15622,1,['avoid'],['avoid']
Safety,Changed all static variables which were only being used as local variables to be local variables. This avoids threading problems.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/20:103,avoid,avoids,103,https://root.cern,https://github.com/root-project/root/pull/20,1,['avoid'],['avoids']
Safety,"Changes the file I/O in the CSV data source from `std::fstream` to `RRawFile`. This brings the following advantages. - Remote reading: the CSV file can come directly from a web server (via Davix); - Automatic detection of line breaks: CSV files on Windows can be processed on UNIX and vice versa. In addition, fixes an endless loop for empty input files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6458:209,detect,detection,209,https://root.cern,https://github.com/root-project/root/pull/6458,1,['detect'],['detection']
Safety,"Changing the definition of infinity in RooFit from `1e30` to `std::numeric_limits<double>::infinity()`, and making some other changes that ensure no evaluation errors are logged with this new definition. * Code-format RooNumber.h and RooNumber.cxx; * Inline infinity constant and checks in `RooNumber`; * Make `TMath::AreEqualAbs()` return `true` when comparing `inf`; * Define infinity as `std::numeric_limits<double>::infinity()`; * RooTruthModel: local `xmin` and `xmax` to make code more readable; * Avoid `sin` or `cos` of infinity in RooTruthModel integral code; * Note change of infinity definition in RooFit. More details in the commit descriptions. With the increased use of inlined code and simpler comparisons in `RooNumber`, this is also speeding up RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12016:504,Avoid,Avoid,504,https://root.cern,https://github.com/root-project/root/pull/12016,1,['Avoid'],['Avoid']
Safety,Check qt5/qt6/cef in cmake before building ROOTWebDisplay library. Required to correctly detect if such displays can be used by default,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15349:89,detect,detect,89,https://root.cern,https://github.com/root-project/root/pull/15349,1,['detect'],['detect']
Safety,Check the CMake `TIMEOUT` parameter for `ExternalProject`. Not sure what else to add. If this is unclear for you then maybe pick a different issue to start with?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6635#issuecomment-770677735:17,TIMEOUT,TIMEOUT,17,https://root.cern,https://github.com/root-project/root/issues/6635#issuecomment-770677735,1,['TIMEOUT'],['TIMEOUT']
Safety,"Checked for duplicates: not found. Discussion started here:; https://root-forum.cern.ch/t/validity-health-checking-for-a-tfile-content-tfile-ok-but-ttree-corrupted-and-no-error/47304. ### Describe the bug; Using from python:; A TFile not isZombie() and not TestBit(ROOT.TFile.kRecovered) throw these error when parsing a TTree:; ```; Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596; Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608; Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0; Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596; Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608; Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:1905651, badread=1, nerrors=2, basketnumber=0; Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596; Error in <TBasket::ReadBasketBuffers>: fNbytes = 5760784, fKeylen = 74, fObjlen = 7615836, noutot = 0, nout=0, nin=5760710, nbuf=7615836; Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:460579199, branch:fSnp, entry:0, badread=1, nerrors=3, basketnumber=0; ```. ### Expected behavior; Any catch-able error either at TFile opening or at least when parsing and error is encounter ...; At this point i cannot check and asses the health of the file from within python. ### To Reproduce; https://gist.github.com/adriansev/5274de723333cd0afff774cb4d48d202; a test file can be provided through private communication. ### Setup; fedora 34/ ROOT git v6-24-00-patches @5af1fa4d3d; manual build",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9154:378,detect,detected,378,https://root.cern,https://github.com/root-project/root/issues/9154,3,['detect'],['detected']
Safety,"Clang 18 changed the name mangling of function templates, see https://releases.llvm.org/18.1.0/tools/clang/docs/ReleaseNotes.html#c-specific-potentially-breaking-changes. The first mentioned case is ""When a template parameter in a function template depends on a previous template parameter"", for example:; ```; struct A {; template <typename T, std::enable_if_t<std::is_integral_v<T>, int> = 0>; void Member(T p) {}; };. template void A::Member(int);; ```. With Clang < 18 and current versions of GCC, this will mangle to `_ZN1A6MemberIiLi0EEEvT_`, but Clang 18 and later will mangle it to `_ZN1A6MemberIiTnNSt9enable_ifIXsr3stdE13is_integral_vIT_EEiE4typeELi0EEEvS2_` (unless reverted for compatibility with `-fclang-abi-compat=17`). For ROOT's use of Cling, this poses a bidirectional problem:; * If building current master with Clang 18, the compiler will, by default, mangle according to the new rules. At runtime, Cling based on LLVM/Clang 16 will generate the old name, but that symbol cannot be found in the shared library.; * Conversely, in the current attempt to upgrade to LLVM/Clang 18, the opposite situation will happen when building with an ""older"" compiler so the shared library has the old name. In both cases, a failure of `tutorial-tmva-tmva103_Application` can be observed, when Cling cannot find the symbol. Unfortunately, it is not easily possible to detect which symbol names are in the shared library because it depends on the host compiler and configuration. Furthermore, with the current LLVM/Clang 16, we do not have access to the new mangling. Finally, it is unclear if generating the template instantiations in question actually takes up significant time during compilation. As such, the best approach in the current situation is to remove the `extern template` declarations and let the compiler / Cling re-generate them as needed. FYI @devajithvs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16176:1372,detect,detect,1372,https://root.cern,https://github.com/root-project/root/pull/16176,1,['detect'],['detect']
Safety,"Clang allows third party shared libraries to provide user-defined; extensions. For example, a custom libTemplateInstantiation.so can; visualize all template instantiation chains in clang. To enable it; one needs to pass a set of options such as -fplugin. Cling should be able to inherently work with clang plugins. However,; cling still does not make full use of the clang driver where the plugin; setup is handled. This patch enables plugins in cling and extends them in some aspects.; In particular, cling allows loading of plugins from shared libraries; but also if they are linked to the same library where cling is. This is; very useful in cases where cling runs itself in a shared library (eg; libCling). Users of libCling (such as ROOT) prefer to keep all llvm and; clang related symbols local to avoid symbol clashes if there is another; version of clang and llvm linked against a package. This can be done by; dlopen-ing libCling with RTLD_LOCAL visibility mode. Then the only way; for clang plugins to work in this scenario is to be linked to libCling. Patch by Aleksandr Efremov (@efremale) and me.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2371:804,avoid,avoid,804,https://root.cern,https://github.com/root-project/root/pull/2371,1,['avoid'],['avoid']
Safety,"Clang, and therefore cling, doesn't deal well with large amounts of; variable instantiations of types with non-trivial destructors in the; same function body. In this scenario the list of exception-handling; ""landing pads"" grows to sizes that make compilation times blow up.; What takes time specifically is the generation of code that deals; with calling the destructors of these variables in case an exception is; thrown in the function body. This patch avoids allocating many temporary std::strings and; std::vector<std::string>s in jitted code by generating code of the form; Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...) rather; than Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7651:456,avoid,avoids,456,https://root.cern,https://github.com/root-project/root/pull/7651,2,['avoid'],['avoids']
Safety,Clean up all accumulated redundant files over the llvm upgrades.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1296:25,redund,redundant,25,https://root.cern,https://github.com/root-project/root/pull/1296,1,['redund'],['redundant']
Safety,"Cleaned up commit history, rebased and pushed again.; All previous comments should have been addressed except avoiding code duplication in the unit test. I have also introduced `iterator operator+(int, iterator)`, which cppreference lists as required.; Also, now incrementing an invalid (e.g. past-the-end) iterator is a no-op.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1259#issuecomment-342897891:110,avoid,avoiding,110,https://root.cern,https://github.com/root-project/root/pull/1259#issuecomment-342897891,1,['avoid'],['avoiding']
Safety,Cleaned up dependencies for TMVA tuts for avoiding race conditions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/426:42,avoid,avoiding,42,https://root.cern,https://github.com/root-project/root/pull/426,1,['avoid'],['avoiding']
Safety,"Closing as ""won't fix"", please specify a binning to avoid accumulation of a large number of values in memory.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-771531563:52,avoid,avoid,52,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-771531563,1,['avoid'],['avoid']
Safety,"Closing as this looks like this issue has workarounds avoiding calls like `super(MyPyClass, self).MyMethod()`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6637#issuecomment-2311923494:54,avoid,avoiding,54,https://root.cern,https://github.com/root-project/root/issues/6637#issuecomment-2311923494,1,['avoid'],['avoiding']
Safety,Closing as we probably want `numeric_limits` and anyway we want to investigate the timeouts should they not be solved by #2240,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2231#issuecomment-399935129:83,timeout,timeouts,83,https://root.cern,https://github.com/root-project/root/pull/2231#issuecomment-399935129,1,['timeout'],['timeouts']
Safety,"Closing since this is one of the not supported overlap detection cases. The overlap checker tries to compromise between coverage and speed. In future we may support a ""slow & more accurate"" mode, like the one done for example by Geant4.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6556#issuecomment-937581343:55,detect,detection,55,https://root.cern,https://github.com/root-project/root/issues/6556#issuecomment-937581343,1,['detect'],['detection']
Safety,"Closing the PR because it got superseeded by #12961, where the need to the RooAddPdf cache element in the finalized computation graph is avoided.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12546#issuecomment-1594591661:137,avoid,avoided,137,https://root.cern,https://github.com/root-project/root/pull/12546#issuecomment-1594591661,1,['avoid'],['avoided']
Safety,"Closing this in favour of #14510 , as I imagined the machinery was there for a reason, i.e. to avoid having all branches of the computation graph share the same set of available columns, leading to errors such as this one taken from the CI runs of this PR. ```; [ RUN ] RDataFrameInterface.DefineAliasedColumn; unknown file: Failure; C++ exception with description ""RDataFrame::Define: cannot define column ""newVar"". A column with that name has already been Define'd. Use Redefine to force redefinition."" thrown in the test body.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14490#issuecomment-1919864843:95,avoid,avoid,95,https://root.cern,https://github.com/root-project/root/pull/14490#issuecomment-1919864843,1,['avoid'],['avoid']
Safety,"Command set variable in parent scope which is identical with variable in local scope. I suspect, that sometime `cmake` makes failure. In principle, it is the only place in roottest - we could just avoid usage of that variable at all. . Trying to fix sporadic problem like [here](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/81406/testReport/projectroot.roottest.root/multicore/roottest_root_multicore_tclass_methods_libgen_build/). Output is:; ```; Generating tclass_methods.cxx, tclass_methods.rootmap; Building CXX object roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o; clang: error: no such file or directory: '/Users/sftnight/build/workspace/root-pullrequests-build/build/roottest/root/multicore/tclass_methods.cxx'; clang: error: no input files; make[1]: *** [roottest/root/multicore/CMakeFiles/roottest-root-multicore-tclass_methods-libgen.dir/tclass_methods.cxx.o] Error 1; make: *** [roottest-root-multicore-tclass_methods-libgen/fast] Error 2; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5585:197,avoid,avoid,197,https://root.cern,https://github.com/root-project/root/pull/5585,1,['avoid'],['avoid']
Safety,Comment out part of the code to try to prevent false positive detection from several anti-virus engines on Windows (and multiproc is not supported on Windows anyway),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7005:62,detect,detection,62,https://root.cern,https://github.com/root-project/root/pull/7005,1,['detect'],['detection']
Safety,"Commit df0b689 simplified the search for the C++ include directories and; tried to use a locale independent regex. However this regex doesn't work for all locales, for example in German; the string in the output is not. ```; #include <...> search starts here:; ```. but the word order is switched and we have. ```; Suche für »#include <...>« beginnt hier:; ```. As such I propose to go back to C-locale for this query to be completely; safe against weird locale settings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5547:436,safe,safe,436,https://root.cern,https://github.com/root-project/root/pull/5547,1,['safe'],['safe']
Safety,"Commit ff86c30992 (""[RF] Implement SumW2 correction in new BatchMode with RooFitDriver"") introduced some `static constexpr`. When building with C++14, at least `weightVarName` requires a declaration because it is odr-used. Provide them for all three variables to avoid undefined references seen in debug builds without compiler optimizations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10263:263,avoid,avoid,263,https://root.cern,https://github.com/root-project/root/pull/10263,1,['avoid'],['avoid']
Safety,"Compared to `GetAtSlotUnchecked`, `GetAtSlotRaw` trades some more; safety for some more performance: not only it avoids checking for; slot initialization (as `GetAtSlotUnchecked` does) but it also avoids; (copy-)construction of a `shared_ptr`. I can add a test, just tell me where :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/934:67,safe,safety,67,https://root.cern,https://github.com/root-project/root/pull/934,3,"['avoid', 'safe']","['avoids', 'safety']"
Safety,"Compilation with c++14 works on my system, ; None of Jenkins are testing root7 with c++14 therefore failure like this was not detected",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8149#issuecomment-838105924:126,detect,detected,126,https://root.cern,https://github.com/root-project/root/pull/8149#issuecomment-838105924,1,['detect'],['detected']
Safety,"Confirmed that this occurs on `master` (though the top node is a nullptr when using the previous separate constructor and Import):; ```; 12:24:51 wdconinc@menelaos ~/EIC/detectors/epic (testcase *$%=) $ root -l; root [0] auto* geo = TGeoManager::Import(""HCAL_Chimney_Sector_Half_Plate.gdml""); Info in <TGeoManager::Import>: Reading geometry from file: HCAL_Chimney_Sector_Half_Plate.gdml; Info in <TGeoManager::TGeoManager>: Geometry GDMLImport, Geometry imported from GDML created; Info in <TGeoManager::SetTopVolume>: Top volume is worldVOL. Master volume is worldVOL; Info in <TGeoNavigator::BuildCache>: --- Maximum geometry depth set to 100; Info in <TGeoManager::CheckGeometry>: Fixing runtime shapes...; Info in <TGeoManager::CheckGeometry>: ...Nothing to fix; Info in <TGeoManager::CloseGeometry>: Counting nodes...; Info in <TGeoManager::Voxelize>: Voxelizing...; Info in <TGeoManager::CloseGeometry>: Building cache...; Info in <TGeoManager::CountLevels>: max level = 1, max placements = 2; Info in <TGeoManager::CloseGeometry>: 3 nodes/ 2 volume UID's in Geometry imported from GDML; Info in <TGeoManager::CloseGeometry>: ----------------modeler ready----------------; (TGeoManager *) 0x56439e0ddb00; root [1] geo->CheckOverlaps(); Info in <TGeoNodeMatrix::CheckOverlaps>: Checking overlaps for worldVOL and daughters within 0.1; warning: Failed to call `P020_REveGeoPainter()` to execute the macro.; Add this function or rename the macro. Falling back to `.L`.; Check overlaps: [==========] 3 [100.00 %] 00:00; Info in <TGeoNodeMatrix::CheckOverlaps>: Number of illegal overlaps/extrusions : 1. root [2] geo->PrintOverlaps(); === Overlaps for Default ===; = Overlap ov00000: worldVOL/PV-LV_HCAL_Chimney_Sector_Half_Plate__Meshed_0 overlapping worldVOL/PV-LV_HCAL_Chimney_Sector_Half_Plate__Meshed_1 ovlp=7.60311; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11781#issuecomment-1328093928:170,detect,detectors,170,https://root.cern,https://github.com/root-project/root/issues/11781#issuecomment-1328093928,1,['detect'],['detectors']
Safety,"Consider the following code snippet:. nbkg = 10000; nsig = 100; masses = [125,400]; ; import ROOT; ws = ROOT.RooWorkspace(""workspace""); m = ws.factory(""m[0,1000]""); bkg_shape = ws.factory(""RooExponential::bkg_shape(m,c_bkg[-0.005])""); bkg = ws.factory(""RooExtendPdf::bkg(bkg_shape,n_bkg[{:f},0,{:f}])"".format(nbkg,2*nbkg)); ; bkgdata = bkg.generate(m,nbkg); bkgdata.SetName(""asimov_0""); ws.Import(bkgdata); ; funcs = ROOT.RooArgList(); funcs.add(bkg); for i in range(0,len(masses)):; sig_shape = ws.factory(""RooGaussian::sig_shape_{:d}(m,m_{:d}[{:f},0,1000],sigma_{:d}[10,1e-6,100])"".format(i,i,masses[i],i)); sig = ws.factory(""RooExtendPdf::sig_{:d}(sig_shape_{:d},n_sig_{:d}[{:f},0,{:f}])"".format(i,i,i,nsig,2*nsig)); funcs.add(sig); mainPdf = ws.factory(""RooAddPdf({""+"","".join([f.GetName() for f in funcs])+""})""). The last line results in . [#0] ERROR:ObjectHandling -- RooFactoryWSTool::createArg() ERROR number of arguments provided (1) for class is invalid, RooAddPdf expects 3; [#0] ERROR:ObjectHandling -- RooFactoryWSTool::processExpression() ERRORS detected, transaction to workspace aborted, no objects committed. despite this constructor being available for RooAddPdf:. RooAddPdf (const char *name, const char *title, const RooArgList &pdfList)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7965:1059,detect,detected,1059,https://root.cern,https://github.com/root-project/root/issues/7965,2,"['abort', 'detect']","['aborted', 'detected']"
Safety,"Consider; ```; commit f0be4fb83343a3f32e22b1badbd6b6898e2debb6; Author: Philippe Canal <pcanal@fnal.gov>; Date: Tue May 1 11:47:26 2018 -0500. Avoid unused variable warning. diff --git a/gui/webdisplay/src/TWebWindowsManager.cxx b/gui/webdisplay/src/TWebWindowsManager.cxx; index 1bf0d0d431..72279f993a 100644; --- a/gui/webdisplay/src/TWebWindowsManager.cxx; +++ b/gui/webdisplay/src/TWebWindowsManager.cxx; @@ -314,11 +314,21 @@ bool ROOT::Experimental::TWebWindowsManager::Show(ROOT::Experimental::TWebWindow; where = gROOT->GetWebDisplay().Data();; ; bool is_native = where.empty() || (where == ""native""),; - is_qt5 = (where == ""qt5""), is_cef = (where == ""cef""),; - is_local = where == ""local"", // either cef or qt5; is_chrome = (where == ""chrome"") || (where == ""chromium""),; is_firefox = (where == ""firefox"");; ; +#ifdef R__HAS_CEFWEB; + bool is_cef = (where == ""cef"");; +#endif; +; +#ifdef R__HAS_QT5WEB; + bool is_qt5 = (where == ""qt5"");; +#endif; +; +#if defined(R__HAS_CEFWEB) || defined(R__HAS_QT5WEB); + bool is_local = where == ""local""; // either cef or qt5; +#endif; +; #ifdef R__HAS_CEFWEB; if (is_local); is_cef = true;; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1964#issuecomment-386070783:143,Avoid,Avoid,143,https://root.cern,https://github.com/root-project/root/pull/1964#issuecomment-386070783,1,['Avoid'],['Avoid']
Safety,"Cool, thanks! I don't have a strong opinion on it either, but if it works this should be the simplest solution to avoid replacing `find_package` and we can close #8633.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16274#issuecomment-2298776505:114,avoid,avoid,114,https://root.cern,https://github.com/root-project/root/pull/16274#issuecomment-2298776505,2,['avoid'],['avoid']
Safety,"Copy assignment for RooAbsArgs was implemented in an unexpected and; inconsistent way. While one would expect that the copy assignment is; copying the object, it said in the documentation of; `RooAbsArg::operator=` that it will ""assign all boolean and string; properties of the original bject. Transient properties and client-server; links are not assigned."" This contradicted with the implementation,; where the server links were actually copied too. Indeed it is; questionable that adding also the servers of the `other` RooAbsArg makes; sense when the proxies are not changed. There was also a memory leak of the `_ownedComponents`, because; `_ownedComponents` got reset to `nullptr` without deleting the; pointed-to owned collection. Furthermore, in `RooAbsRealLValue`, the assigment operator was; overloaded by a function that only assigns the value of another; `RooAbsReal`. With all these inconsistencies, it was deemed safer to disable copy; assignment of RooAbsArgs from now on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11079:927,safe,safer,927,https://root.cern,https://github.com/root-project/root/pull/11079,1,['safe'],['safer']
Safety,Core: Avoid (indirect) memory hoarding in TPluginManager.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14200:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/14200,1,['Avoid'],['Avoid']
Safety,"Could an admin please run ""@phsft-bot build just on windows10/cxx14"" to be on the safe side?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4796#issuecomment-575512019:82,safe,safe,82,https://root.cern,https://github.com/root-project/root/pull/4796#issuecomment-575512019,1,['safe'],['safe']
Safety,Could the commit message be enhanced with a discussion of why the change is being made and why a vector is sufficient (Note that vec[slot] = ... may or may not be thread safe in the general case because of cache line sharing across indices ... the much slower *(vec[slot]) = ... would be safer),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2708#issuecomment-425172680:170,safe,safe,170,https://root.cern,https://github.com/root-project/root/pull/2708#issuecomment-425172680,2,['safe'],"['safe', 'safer']"
Safety,Could you rework the commits to avoid any 'Merge' commit? thanks.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1712#issuecomment-371522310:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/1712#issuecomment-371522310,1,['avoid'],['avoid']
Safety,"Creating RooArgSets on the heap should be avoided. The existing; `RooAbsArg::getParameters/Observables` created a RooArgSet calling `operator new`.; This commit adds an overload of `RooAbsArg::getParameters/Observables` that takes an; output parameter such that the output RooArgSet can also be created on; the stack. Using these new methods, a memory leak in `RooAbsReal::evaluateSpan` is fixed. This leak was recently introduced in PR https://github.com/root-project/root/pull/7742 and backported to 6.24. Therefore, this fix should also be backported to 6.24.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8142:42,avoid,avoided,42,https://root.cern,https://github.com/root-project/root/pull/8142,1,['avoid'],['avoided']
Safety,"Current JSROOT dev version with lot of changes, potential v7.0 release. Really a lot of changes in dev version.; Fully avoids jQuery in the GUI, replace it by HTML5 code; Reduce significantly used code from d3.js (factor 3); Improve flexible layout in the GUI. Add support of many new classes/draw options; Like CANDLE/VIOLIN plots, TEfficiency,; Add many standard math functions to support majority of TF1/TF2 from tutorials. Upgrade three.js to r136. Adjust Eve7 code, fix few problems",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9638:119,avoid,avoids,119,https://root.cern,https://github.com/root-project/root/pull/9638,1,['avoid'],['avoids']
Safety,"Current failures fixed by https://github.com/root-project/roottest/pull/924 , although they underline a deeper problem with avoiding the use of `?#`, which is more robust but does not support wildcards",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11885#issuecomment-1348750023:124,avoid,avoiding,124,https://root.cern,https://github.com/root-project/root/pull/11885#issuecomment-1348750023,1,['avoid'],['avoiding']
Safety,"Currently http/webgui/eve7 tutorials are vetoed because of many reasons; But main reason - such tutorials designed so that `THttpServer` should runs forever ; that user can test them in the web browsers. This can be changed.; All tutorials used in ROOT testing started with arguments `root -b -l -q tutorial_name.C`; In tutorials itself one could detect that using something like:; ```; bool test_mode = gApplication->Argn() > 3 &&; !strcmp(gApplication->Argv(1),""-b"") && ; !strcmp(gApplication->Argv(2),""-l"") && ; !strcmp(gApplication->Argv(3),""-q"");; ```; Especially `-q` argument is clear sign that macro should not be running forever. Alternatively, one can set special environment variable and test it inside tutorials with:; ```; bool test_mode = gSystem->Getenv(""ROOT_TESTING"") != nullptr;; ```; But this requires that ROOT_TESTING environment variable should be set before. In any case - if such `test_mode` detected, macro should behaves differently:; 1. Do not start real http server while it most probably will conflict with other tutorials running in parallel.; 2. Run macro for only limited number of loops for ~3 seconds.; 3. Check production of png images - for most of these tutorials `THttpServer` or `RCanvas` or `REve` can generate image",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6651:347,detect,detect,347,https://root.cern,https://github.com/root-project/root/issues/6651,2,['detect'],"['detect', 'detected']"
Safety,Currently if `CMAKE_SYSTEM_PROCESSOR` is not set ROOT silently falls back to returning `-m32` in `root-config --cflags` among other things. This can easily happen when cross-compiling and caused an issue in the first build of 6.18.00 for Conda (see https://github.com/conda-forge/root-feedstock/issues/41). I think it would be safer to fail immediately if the architecture is not recognised rather than allowing this to be missed and this is the approach used [elsewhere](https://boringssl.googlesource.com/boringssl/+/2272/CMakeLists.txt).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4013:327,safe,safer,327,https://root.cern,https://github.com/root-project/root/pull/4013,1,['safe'],['safer']
Safety,"Currently when installed with `-Dgnuinstall=ON` ROOT ends up exporting relative paths from the `${CMAKE_INSTALL_CMAKEDIR}` to the relevant binary, include and library directories. This can be a problem, especially when these paths may be evaluated from a different system folder assumed by CMake (e.g. when `CMAKE_INTSTALL_CMAKEDIR` is not the same for ROOT and CMake) as well as in other cases, when relative paths are not appropriate. Thus, it is safer in the general case to have these relative paths resolved to absolute system paths immediately before being passed to a caller. This merge request tries to accomplish just that with complete transparency and zero side-effects. It has been tested and deployed in Arch Linux x86_64, CMake 3.16.4, GCC 9.2.1:; - resulting relevant CMake config:; ```cmake; #----------------------------------------------------------------------------; # Configure the path to the ROOT headers, using a relative path if possible.; # This is only known at CMake time, so we expand a CMake supplied variable.; #. # ROOT configured for the install with relative paths, so use these; get_filename_component(_ROOT_INCLUDE_DIRS ""${_thisdir}/../../../include"" REALPATH). # resolve relative paths to absolute system paths; get_filename_component(ROOT_INCLUDE_DIRS ""${_ROOT_INCLUDE_DIRS}"" REALPATH). # ROOT configured for the install with relative paths, so use these; get_filename_component(_ROOT_LIBRARY_DIR ""${_thisdir}/../../root"" REALPATH). # resolve relative paths to absolute system paths; get_filename_component(ROOT_LIBRARY_DIR ""${_ROOT_LIBRARY_DIR}"" REALPATH). # ROOT configured for the install with relative paths, so use these; get_filename_component(_ROOT_BINDIR ""${_thisdir}/../../../bin"" REALPATH). # resolve relative paths to absolute system paths; get_filename_component(ROOT_BINDIR ""${_ROOT_BINDIR}"" REALPATH). # Deprecated value, please don't use it and use ROOT_BINDIR instead.; get_filename_component(ROOT_BINARY_DIR ""${ROOT_BINDIR}"" REALPATH); ```; - CMa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5084:449,safe,safer,449,https://root.cern,https://github.com/root-project/root/pull/5084,1,['safe'],['safer']
Safety,"Currently, jitted actions spawn into existence right before the event; loop (at jitting time). This makes it impossible or unnecessarily complex to:; 1) let RResultPtrs own actions; 2) let actions own their previous node; 3) detect that an action has been booked before the event loop has run. Points 1 and 2 are required by ROOT-9416.; Point 3 is required by several graph-traversing features, e.g. ROOT-9458. The solution is to align the jitted action logic with jitted filters and; defines, and use a placeholder RJittedAction object that sits into the; computation graph and forwards all relevant calls to the concrete, jitted; action which will be created at a later time. RResultPtr logic is also greatly simplified since its action pointer can now always be set at construction time and is always guaranteed to be valid (it points to the RJittedAction owned by the RLoopManager).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2398:225,detect,detect,225,https://root.cern,https://github.com/root-project/root/pull/2398,1,['detect'],['detect']
Safety,"Currently, when I visited any page hosted at root.cern (but not root.cern.ch...) I get a big scary warning (on Firefox) which directs me to https://transparencyreport.google.com/safe-browsing/search?url=http:%2F%2Froot.cern%2F. ![image](https://user-images.githubusercontent.com/9206569/94927540-0b810400-0488-11eb-995d-0eb9ac4e9faf.png). This started this morning. I assume this will eventually be fixed, but as a workaround to make the documentation usable it might be worth changing all the internal links to point to root.cern.ch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6539:178,safe,safe-browsing,178,https://root.cern,https://github.com/root-project/root/issues/6539,1,['safe'],['safe-browsing']
Safety,"Curve::shiftCurveToZero()`; cf98956266 [RF] Add exceptions to setter methods for non-existing objects; 1cc5ec46c8 [RF] Forbid resetting RooFormula; b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test; 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes; 3dcea7036a [RF] Support simultaneous fits in NLL code generation; a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface; 3d01cd2e8f [RF] Remove deprecated RooAbsString; 059af6d55a [RF] Remove RooAbsRootFinder; bdc19e090e [RF] Get rid of RooScaledFunc; 88dbb6ad17 [RF] Make RooGenProdProj private; 94ee158ddc [RF] Remove deprecated RooCatType; d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h; f78558eb0a [RF] Mark template specialization as inline; ca29ccf161 [RF] Some cleanup of public `roofitcore` classes; 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code; 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads; 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`; 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum].; 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar; 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma; f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`; b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation; 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf.; 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files.; 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial.; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12971:2604,Avoid,Avoid,2604,https://root.cern,https://github.com/root-project/root/pull/12971,3,['Avoid'],['Avoid']
Safety,"D&reserved=0> ; >>> --key ~/.globus/userkey.pem  --cert ~/.globus/usercert.pem --capath ; >>> /etc/grid-security/certificates; >>>; >>>; >>> regards,; >>> Asoka; >>>; >>>> On May 12, 2021, at 10:18 AM, Axel Naumann ; >>>> ***@***.*** ***@***.***>> wrote:; >>>>; >>>>; >>>> Right - without authentication I cannot see what's happening. /If/ ; >>>> this is due to a redirect it would be a dupe of #8155 ; >>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428538437%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=NSH3DFaDuhyR%2FbU8u99%2BhMt%2F%2Bl%2BPFoyMoNKO2CIFrZM%3D&reserved=0> ; >>>> - if not then it's different :-) But I don't know how to tell ; >>>> whether it's a redirect. Do you?; >>>>; >>>> If not let's get #8155 ; >>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428538437%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=NSH3DFaDuhyR%2FbU8u99%2BhMt%2F%2Bl%2BPFoyMoNKO2CIFrZM%3D&reserved=0> ; >>>> fixed and then we re-visit this one: either it's fixed, too, or we ; >>>> need to call in help from the Davix (?) folks.; >>>>; >>>> —; >>>> You are receiving this because you authored the thread.; >>>> Reply to this email directly, view it on GitHub ; >>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8092%23issuecomment-839953723&data=04%7C01%7Cdqing%40triumf.ca%7Cb7cde810efc1452a4eab08d9156d8727%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564382428548436%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiL",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839989913:8046,safe,safelinks,8046,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839989913,1,['safe'],['safelinks']
Safety,"Dear @couet thank you very much. Is this something that could be implemented soon in ROOT. If it's a simple change to add the copy CTOR to the API it would avoid us in CMSSW to have to create a custom-made wrapper for TH2Poly.; Many thanks in advance, Pedro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13075#issuecomment-1891586098:156,avoid,avoid,156,https://root.cern,https://github.com/root-project/root/issues/13075#issuecomment-1891586098,2,['avoid'],['avoid']
Safety,"Dear ROOT experts,. When using [DD4hep](https://dd4hep.web.cern.ch/dd4hep/) to try and describe the geometry of the upgraded LHCb detector geometry, we've noticed overlapping geometry that's not picked up by running `gGeoManager::CheckOverlaps`. The geometry is attached as ROOT files (Geometry.root and Geometry_ClampInModule.root). To view the geometry we run in a ROOT session (or as a macro); ```c++; TGeoManager::Import(""Geometry.root""); gGeoManager->GetMasterVolume()->Draw(""ogl""); ```; and then running `gGeoManager->CheckOverlaps(0.00001)` Does not find the overlap between the shapes `pvCoolingClamp` and `pvPipeBottom` (The list of shapes can be found by opening a `TBrowser` after importing the geometry and navigating the 'default' folder). The expected behavior here is that overlaps would be found between these shapes as one passes straight through the other. I have also tried moving the Cooling Clamp to the top of the shape and trying again there (see Geometry_ClampInModule.root) and here overlaps are only identified between the Cooling Clamp and simple shapes (e.g. Chips, glue) but not `lvDet` or `lvModule` itself. These 'simple shapes' refer to just cuboids/cylinders/etc rather than subtractions of shapes which is how the others are produced. The expected behavior here is that overlaps would be found between each of these visibly overlapping shapes. Do you know what may be causing this or how it could be fixed?. My setup typically is done by running dd4hep `geoDisplay` however with the attached root files it can be reproduced using any recent LCG view (I used 96b). Geometry ROOT files: [GeometryFiles.zip](https://github.com/root-project/root/files/5328354/GeometryFiles.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6556:130,detect,detector,130,https://root.cern,https://github.com/root-project/root/issues/6556,1,['detect'],['detector']
Safety,"DeclUnloader was trying to unload template instantiations whose point of (first) instantiation was the PCH. This caused problems with the code below. In particular, the class specialization `std::vector<int>` was instantiated in the PCH as part of `std::stack<...>`, which in turn was required by the STL <regex> header.; ```; root [0] std::vector<int> foo, bar;; root [1] std::swap(foo, bar);; root [2] .undo 1; root [3] std::swap(foo, bar);; IncrementalExecutor::executeFunction: symbol '_ZSt15__alloc_on_swapISaIiEEvRT_S2_' unresolved while linking [cling interface function]!; ```. This PR fixes the issue avoiding the unload of decls instantiated in the PCH.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4447:610,avoid,avoiding,610,https://root.cern,https://github.com/root-project/root/pull/4447,1,['avoid'],['avoiding']
Safety,"Declares a new method `RNTuple::Merge` to conform to the `hadd` merger interface, namely: ; https://github.com/root-project/root/blob/331efa4c00fefc38980eaaf7b41b8e95fcd1a23b/io/doc/v530/index.html#L43-L53. I originally thought about to adding this method `RNTupleReader`, but think this is the right choice since it's the `RNTuple` blob that's stored on disk, and we have to parse it into a `RNTupleReader` to do any useful work. . Actually running it segfaults, and I'm not sure whether I've made a mistake in linking or elsewhere. ; ~~**Edit:** segfault fixed by #6016~~; **Edit**: I believe the segfault is fixed by 12fef499c109da4c2454d9cca2e60e88a883aa1c, where I avoid assuming that mergeable objects are derived from `TObject`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6008:670,avoid,avoid,670,https://root.cern,https://github.com/root-project/root/pull/6008,1,['avoid'],['avoid']
Safety,Deleted branch to avoid wasting infra resources on building this.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2727#issuecomment-426190874:18,avoid,avoid,18,https://root.cern,https://github.com/root-project/root/pull/2727#issuecomment-426190874,1,['avoid'],['avoid']
Safety,Detect and act upon incomplete TTree entries in RDataFrame,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641:0,Detect,Detect,0,https://root.cern,https://github.com/root-project/root/pull/15641,1,['Detect'],['Detect']
Safety,Detect mismatched event counts in TTreeReader with friends,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16165:0,Detect,Detect,0,https://root.cern,https://github.com/root-project/root/pull/16165,1,['Detect'],['Detect']
Safety,Detected with -Ddev=ON cmake flags,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12216:0,Detect,Detected,0,https://root.cern,https://github.com/root-project/root/pull/12216,1,['Detect'],['Detected']
Safety,"Detecting if a debugger is attached isn't very straightforward unless on Windows. I can add something similar to the solution here: https://stackoverflow.com/questions/3596781/how-to-detect-if-the-current-process-is-being-run-by-gdb, but not sure if that's ideal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11770#issuecomment-2082077325:0,Detect,Detecting,0,https://root.cern,https://github.com/root-project/root/issues/11770#issuecomment-2082077325,2,"['Detect', 'detect']","['Detecting', 'detect-if-the-current-process-is-being-run-by-gdb']"
Safety,"Didn't recognize `ROOT-centos7`/`default`, `ROOT-ubuntu14`/`default` aborting build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14844#issuecomment-1990934365:69,abort,aborting,69,https://root.cern,https://github.com/root-project/root/pull/14844#issuecomment-1990934365,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-centos9`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11551#issuecomment-1276771767:42,abort,aborting,42,https://root.cern,https://github.com/root-project/root/pull/11551#issuecomment-1276771767,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-debian-i386`/`cxx14` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8402#issuecomment-860622093:44,abort,aborting,44,https://root.cern,https://github.com/root-project/root/pull/8402#issuecomment-860622093,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-fedora29`/`python3.` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4568#issuecomment-546034852:44,abort,aborting,44,https://root.cern,https://github.com/root-project/root/pull/4568#issuecomment-546034852,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-fedora30`/`cxx14.` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6952#issuecomment-745379444:42,abort,aborting,42,https://root.cern,https://github.com/root-project/root/pull/6952#issuecomment-745379444,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-fedora31`/`noimtmac1015` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-620243113:48,abort,aborting,48,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-620243113,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-fedora31`/`noimtwindows10` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-784363811:50,abort,aborting,50,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-784363811,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-performance-centos7-multicore`/`default.` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6445#issuecomment-698669501:65,abort,aborting,65,https://root.cern,https://github.com/root-project/root/pull/6445#issuecomment-698669501,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-performance-centos8-multicore`/`defaul` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6854#issuecomment-734003611:63,abort,aborting,63,https://root.cern,https://github.com/root-project/root/pull/6854#issuecomment-734003611,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-performance-centos8-multicore`/`default.` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-1022683619:65,abort,aborting,65,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-1022683619,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu16`/`nortcxxmod` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4676#issuecomment-562968367:46,abort,aborting,46,https://root.cern,https://github.com/root-project/root/pull/4676#issuecomment-562968367,2,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu16`/`nortcxxmodwindows10` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7725#issuecomment-815372211:55,abort,aborting,55,https://root.cern,https://github.com/root-project/root/pull/7725#issuecomment-815372211,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu16`/`rtcxxmod` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3020#issuecomment-440958685:44,abort,aborting,44,https://root.cern,https://github.com/root-project/root/pull/3020#issuecomment-440958685,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu18.04`/`defaultwith` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9119#issuecomment-989973376:50,abort,aborting,50,https://root.cern,https://github.com/root-project/root/pull/9119#issuecomment-989973376,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu1804-clangHEAD`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3583#issuecomment-486576151:55,abort,aborting,55,https://root.cern,https://github.com/root-project/root/pull/3583#issuecomment-486576151,2,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu1804-clangHEAD`/`noimt` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5720#issuecomment-634829132:53,abort,aborting,53,https://root.cern,https://github.com/root-project/root/pull/5720#issuecomment-634829132,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu1804`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5720#issuecomment-634824086:45,abort,aborting,45,https://root.cern,https://github.com/root-project/root/pull/5720#issuecomment-634824086,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu18`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3286#issuecomment-456543111:43,abort,aborting,43,https://root.cern,https://github.com/root-project/root/pull/3286#issuecomment-456543111,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu1904-1`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5660#issuecomment-631307352:47,abort,aborting,47,https://root.cern,https://github.com/root-project/root/pull/5660#issuecomment-631307352,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu1904-clang`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5066#issuecomment-591905999:51,abort,aborting,51,https://root.cern,https://github.com/root-project/root/pull/5066#issuecomment-591905999,2,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu1904`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5660#issuecomment-631307560:45,abort,aborting,45,https://root.cern,https://github.com/root-project/root/pull/5660#issuecomment-631307560,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu20.04`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8809#issuecomment-895125348:46,abort,aborting,46,https://root.cern,https://github.com/root-project/root/pull/8809#issuecomment-895125348,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu2004-2-clang`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5660#issuecomment-669197894:53,abort,aborting,53,https://root.cern,https://github.com/root-project/root/pull/5660#issuecomment-669197894,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu2004-clang`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5660#issuecomment-669196854:51,abort,aborting,51,https://root.cern,https://github.com/root-project/root/pull/5660#issuecomment-669196854,3,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu20`/`cxx17` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6260#issuecomment-681826610:41,abort,aborting,41,https://root.cern,https://github.com/root-project/root/pull/6260#issuecomment-681826610,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu20`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8799#issuecomment-892773535:43,abort,aborting,43,https://root.cern,https://github.com/root-project/root/pull/8799#issuecomment-892773535,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu22.04`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11458#issuecomment-1263239119:46,abort,aborting,46,https://root.cern,https://github.com/root-project/root/pull/11458#issuecomment-1263239119,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-ubuntu2204`/`nortcxxmod.` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13592#issuecomment-1705272220:49,abort,aborting,49,https://root.cern,https://github.com/root-project/root/pull/13592#issuecomment-1705272220,1,['abort'],['aborting']
Safety,Didn't recognize `ROOT-windows10`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11546#issuecomment-1275992276:44,abort,aborting,44,https://root.cern,https://github.com/root-project/root/pull/11546#issuecomment-1275992276,1,['abort'],['aborting']
Safety,"Didn't recognize `fedora27`/`noimt`, `fedora29`/`python3`, `ubuntu16`/`rtcxxmod` aborting build.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3480#issuecomment-468247394:81,abort,aborting,81,https://root.cern,https://github.com/root-project/root/pull/3480#issuecomment-468247394,1,['abort'],['aborting']
Safety,Didn't recognize `fedora28`/`native` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2698#issuecomment-426693833:37,abort,aborting,37,https://root.cern,https://github.com/root-project/root/pull/2698#issuecomment-426693833,2,['abort'],['aborting']
Safety,Didn't recognize `fedora30`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3872#issuecomment-496246831:38,abort,aborting,38,https://root.cern,https://github.com/root-project/root/pull/3872#issuecomment-496246831,2,['abort'],['aborting']
Safety,Didn't recognize `gcc54`/`centos7` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/793#issuecomment-317508405:35,abort,aborting,35,https://root.cern,https://github.com/root-project/root/pull/793#issuecomment-317508405,1,['abort'],['aborting']
Safety,Didn't recognize `mac-1013`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5720#issuecomment-635158347:38,abort,aborting,38,https://root.cern,https://github.com/root-project/root/pull/5720#issuecomment-635158347,1,['abort'],['aborting']
Safety,Didn't recognize `mac1012`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3098#issuecomment-444445868:37,abort,aborting,37,https://root.cern,https://github.com/root-project/root/pull/3098#issuecomment-444445868,1,['abort'],['aborting']
Safety,Didn't recognize `mac1014`/`native` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2766#issuecomment-427860787:36,abort,aborting,36,https://root.cern,https://github.com/root-project/root/pull/2766#issuecomment-427860787,1,['abort'],['aborting']
Safety,Didn't recognize `mac1014`/`python3ROOT-ubuntu16` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7725#issuecomment-815372407:50,abort,aborting,50,https://root.cern,https://github.com/root-project/root/pull/7725#issuecomment-815372407,1,['abort'],['aborting']
Safety,Didn't recognize `mac11arm`/`cxx17` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7020#issuecomment-758831129:36,abort,aborting,36,https://root.cern,https://github.com/root-project/root/pull/7020#issuecomment-758831129,1,['abort'],['aborting']
Safety,Didn't recognize `mac12`/`noimtwindows10` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-1382363746:42,abort,aborting,42,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-1382363746,1,['abort'],['aborting']
Safety,Didn't recognize `mac12arm`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10050#issuecomment-1059378906:38,abort,aborting,38,https://root.cern,https://github.com/root-project/root/pull/10050#issuecomment-1059378906,1,['abort'],['aborting']
Safety,Didn't recognize `mac13`/`cxx20ROOT-ubuntu2204` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11874#issuecomment-1361363361:48,abort,aborting,48,https://root.cern,https://github.com/root-project/root/pull/11874#issuecomment-1361363361,1,['abort'],['aborting']
Safety,Didn't recognize `mac13`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11432#issuecomment-1310491043:35,abort,aborting,35,https://root.cern,https://github.com/root-project/root/pull/11432#issuecomment-1310491043,1,['abort'],['aborting']
Safety,Didn't recognize `mac13arm`/`deafult` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13592#issuecomment-1705214336:38,abort,aborting,38,https://root.cern,https://github.com/root-project/root/pull/13592#issuecomment-1705214336,1,['abort'],['aborting']
Safety,Didn't recognize `native`/`ubuntu16` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/830#issuecomment-319974375:37,abort,aborting,37,https://root.cern,https://github.com/root-project/root/pull/830#issuecomment-319974375,2,['abort'],['aborting']
Safety,Didn't recognize `slc6`/`gcc52` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1381#issuecomment-347479246:32,abort,aborting,32,https://root.cern,https://github.com/root-project/root/pull/1381#issuecomment-347479246,1,['abort'],['aborting']
Safety,Didn't recognize `ubuntu18-gcc7-opt`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3286#issuecomment-456542211:47,abort,aborting,47,https://root.cern,https://github.com/root-project/root/pull/3286#issuecomment-456542211,1,['abort'],['aborting']
Safety,Didn't recognize `ubuntu1804-clangHEAD`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5720#issuecomment-634825431:50,abort,aborting,50,https://root.cern,https://github.com/root-project/root/pull/5720#issuecomment-634825431,1,['abort'],['aborting']
Safety,Didn't recognize `ubuntu18`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3286#issuecomment-456535185:38,abort,aborting,38,https://root.cern,https://github.com/root-project/root/pull/3286#issuecomment-456535185,1,['abort'],['aborting']
Safety,Didn't recognize `ubuntu1904-clang`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5066#issuecomment-591941495:46,abort,aborting,46,https://root.cern,https://github.com/root-project/root/pull/5066#issuecomment-591941495,1,['abort'],['aborting']
Safety,Didn't recognize `ubuntu2204`/`cxx17` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12519#issuecomment-1484165339:38,abort,aborting,38,https://root.cern,https://github.com/root-project/root/pull/12519#issuecomment-1484165339,1,['abort'],['aborting']
Safety,Didn't recognize `ubuntu2204`/`nortcxxmod` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1658220713:43,abort,aborting,43,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1658220713,1,['abort'],['aborting']
Safety,Didn't recognize `windows10`/`cxx14.` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690#issuecomment-1145282787:38,abort,aborting,38,https://root.cern,https://github.com/root-project/root/pull/10690#issuecomment-1145282787,1,['abort'],['aborting']
Safety,Didn't recognize `windows10`/`default` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2933#issuecomment-441573611:39,abort,aborting,39,https://root.cern,https://github.com/root-project/root/pull/2933#issuecomment-441573611,1,['abort'],['aborting']
Safety,Didn't recognize `windows10`/`vc15` aborting build.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1225#issuecomment-339029463:36,abort,aborting,36,https://root.cern,https://github.com/root-project/root/pull/1225#issuecomment-339029463,2,['abort'],['aborting']
Safety,"Directly iterate over all columns and filter by the `fieldId`, avoiding quadratic complexity. This reduces the time for writing 10k integer fields from 28s to 20s. Note that the complexity overall still seems to be quadratic because mapping each field constructs an iterator for it, which requires looping over all columns. ---. Builds on https://github.com/root-project/root/pull/14365",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14366:63,avoid,avoiding,63,https://root.cern,https://github.com/root-project/root/pull/14366,1,['avoid'],['avoiding']
Safety,Disable tensorflow eager execution when evaluating the model in MethodPyKeras This speeds up by more than 100 the model prediction. Re-arrange the code and fixes also a memory leak in allocating the input array,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12261:120,predict,prediction,120,https://root.cern,https://github.com/root-project/root/pull/12261,1,['predict'],['prediction']
Safety,"Disabled not-allowed methods in derived classes (TH2,TH3) by making them protected, this will avoid calling them at run time and now one gets a compile error instead of a run time error as before. ; Unfortunately one cannot prevent calling these methods when using a base class pointer (e.g. TH1 for a TH2). IN that case a run time error will be produced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4427:94,avoid,avoid,94,https://root.cern,https://github.com/root-project/root/pull/4427,1,['avoid'],['avoid']
Safety,"Disabling LTO for the whole build avoids the problem, but this is of course only a stopgap measure.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11135#issuecomment-1207950587:34,avoid,avoids,34,https://root.cern,https://github.com/root-project/root/issues/11135#issuecomment-1207950587,1,['avoid'],['avoids']
Safety,"Discussed with Danilo: We will not backport this to 6.32 because there is a risk of breaking stuff. It fixes a memory leak, but it is bounded as confirmed by Dev's tests, and was only found one and half years after it's introduction during the upgrade to LLVM 13.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16150#issuecomment-2273719008:76,risk,risk,76,https://root.cern,https://github.com/root-project/root/pull/16150#issuecomment-2273719008,1,['risk'],['risk']
Safety,"Discussing with @ktf, we decided to add `RCombinedDS` as a friend of `RDataSource` to avoid the `#define protected public` that is now required to call `GetColumnReadersImpl` from `RCombinedDS`. I will do that and resolve the few conflicts this PR now has before merging. I don't think the other comments still apply (right @pcanal ?)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3443#issuecomment-688301798:86,avoid,avoid,86,https://root.cern,https://github.com/root-project/root/pull/3443#issuecomment-688301798,1,['avoid'],['avoid']
Safety,"Do I understand correctly that a second modulemap would allow us to avoid the changes to the diagnostics in this PR, because it would not mention the missing header(s)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12519#issuecomment-1486269533:68,avoid,avoid,68,https://root.cern,https://github.com/root-project/root/pull/12519#issuecomment-1486269533,1,['avoid'],['avoid']
Safety,"Do not skip the condition to avoid to build a normalization ratio integrals for the composite terms of the conditional RooProdPdf. The code which was avoid to create the ratio of integrals when the provided range is equal to the default range of the variables was skipped. Not clear why, it is now re-added. This seems to fix the performance issue observed in ; https://root-forum.cern.ch/t/bug-range-command-enforces-numerical-integral/43350.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7178:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/7178,2,['avoid'],['avoid']
Safety,"Do we have to patch LLVM, ie is that an error or a warning? We're preparing changes to how we handle patches with LLVM, and in general we try to avoid them...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12086#issuecomment-1399942669:145,avoid,avoid,145,https://root.cern,https://github.com/root-project/root/pull/12086#issuecomment-1399942669,1,['avoid'],['avoid']
Safety,"Do we perhaps have a way to detect the usage of modules at runtime? ""gROOT->HasModules()""?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2854#issuecomment-433901130:28,detect,detect,28,https://root.cern,https://github.com/root-project/root/pull/2854#issuecomment-433901130,1,['detect'],['detect']
Safety,Do we still want this? It does not seem really safe...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11614#issuecomment-1628564203:47,safe,safe,47,https://root.cern,https://github.com/root-project/root/pull/11614#issuecomment-1628564203,1,['safe'],['safe']
Safety,"Does RDF have a test for this scenario?. I thought about that and I am not really sure if that'd work. If the semantics of the Cache/Snapshot suppose resolution of missing entities while running the produced code then it'd indeed fail. I can imagine this can be detected at the string generation time and we could explicitly load the relevant library beforehand. This can reduce the implicitness of how things happen and improve performance for the 'regular' code (assuming your example is exotic). Either way, if that's not the intended semantics I would be totally fine if we close this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3765#issuecomment-489132467:262,detect,detected,262,https://root.cern,https://github.com/root-project/root/pull/3765#issuecomment-489132467,1,['detect'],['detected']
Safety,Does having nodiscard avoid stack corruption if we still forget to return a result?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12654#issuecomment-1511961586:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/12654#issuecomment-1511961586,1,['avoid'],['avoid']
Safety,Done! I think I've integrated all changes. **TODO:**. - [x] Make commit message more expressive; - [x] Try to make the counters in `RDefineBase` and `GraphNode` atomics; - [x] Look for another solution for the static `TRegex` members; - [x] Add a random sleep to the test cases to stir things up; - [x] Add tests for `Cache` and `Snapshot`; - [x] Point out in the docs that `SaveGraph` is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6266:400,safe,safe,400,https://root.cern,https://github.com/root-project/root/pull/6266,1,['safe'],['safe']
Safety,"DrawClone also create a new object object see line 225 [here](https://root.cern/doc/master/TObject_8cxx_source.html#l00219) . The problem with DrawClone is that it will go in the SelectedPad, not in the Pad define by cd()... They may coincide sometime but not always. So, I think it is better to make it clear a Clone is needed to avoir deletion. Then this object is drawn ... but the primary thing is to avoid deletion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5680#issuecomment-633535272:405,avoid,avoid,405,https://root.cern,https://github.com/root-project/root/pull/5680#issuecomment-633535272,2,['avoid'],['avoid']
Safety,"Dropped the draft status, as this should be now safe to merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1299932058:48,safe,safe,48,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1299932058,1,['safe'],['safe']
Safety,"Due to the way it works by default, sourcing a root version built with; current pyroot was failing, due to the fact that operations such as:. for pyroot_libs_dir in ${old_rootsys}/lib/python*. were performed both in experimental and current. In zsh, if a path specified with '*' is not found, an error like the; following is raised:. clean_environment:20: no matches found: zsh_build/lib/python*. and the program aborts, without sourcing anything. With these change, such loops are performed only if root is built with; pyroot experimental.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4693:413,abort,aborts,413,https://root.cern,https://github.com/root-project/root/pull/4693,1,['abort'],['aborts']
Safety,"Dvecgeom=OFF -Dvmc=no -Dx11=yes -Dxml=yes -Dxrootd=yes -DCMAKE_BUILD_TYPE=Debug -DCMAKE_TOOLCHAIN_FILE=/var/tmp/portage/sci-physics/root-9999/work/root-9999_build/gentoo_toolchain.cmake /var/tmp/portage/sci-physics/root-9999/work/root-9999; loading initial cache file /var/tmp/portage/sci-physics/root-9999/work/root-9999_build/gentoo_common_config.cmake; -- The C compiler identification is GNU 10.3.0; -- The CXX compiler identification is GNU 10.3.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/lib/ccache/bin/x86_64-pc-linux-gnu-gcc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/lib/ccache/bin/x86_64-pc-linux-gnu-g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.31.1"") ; -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Found Python3: /usr/bin/python3.8 (found version ""3.8.10"") found components: Interpreter Development NumPy Development.Module Development.Embed ; -- The Fortran compiler identification is GNU 10.3.0; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Check for working Fortran compiler: /usr/bin/x86_64-pc-linux-gnu-gfortran - skipped; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90 - yes; -- Found GCC. Major version 10, minor version 3; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8193:3239,Detect,Detected,3239,https://root.cern,https://github.com/root-project/root/issues/8193,1,['Detect'],['Detected']
Safety,"Enable ROOT's builtin_llvm=Off. This patch allows ROOT to be built against compatible external llvm (5.0 or 5.0.1). Note that we still need to build clang (eg. we require builtin_clang=On) due to the ROOT-specific patches which are not yet upstream. Since we have externally installed llvm, we configure and build clang as a standalone project. The configuration relies on finding llvm-config-5.0 and uses an adapted version of the standard clang standalone build procedure. Clang provides dependencies such as FileCheck and not which are used by cling's testsuite and are not being installed with the standard llvm package. Cling (which depends on llvm and clang) is built as a clang tool to avoid unresolved dependencies to clang and complicating further the already complicated cmake setup.; ; This patch intends a minimal change and follows the initial (suboptimal) design to configure and build llvm, clang and cling as part of ROOT. An ultimate solution would be to have llvm, clang and cling built as separate standalone projects (following the recommended way by the LLVM cmake developers). This should reduce the compile times by approx 20% (if we have llvm-5.0-dev installed) and make cross compilation of ROOT a little easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1632:693,avoid,avoid,693,https://root.cern,https://github.com/root-project/root/pull/1632,1,['avoid'],['avoid']
Safety,"Enable `-Wredundant-parens`, to warn about redundant parentheses in declarators whose parsing might not match the user intent, e.g.; ```; root [0] int i = 1;; root [1] (bool)i; (bool) true; root [2] bool(i); ROOT_prompt_1:1:5: redundant parentheses surrounding declarator [-Wredundant-parens]; bool(i); ^~~; (bool) false; ```. For more information see the discussion [here](http://github.com/root-project/issues/8304).; This PR fixes issue #8304.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555:43,redund,redundant,43,https://root.cern,https://github.com/root-project/root/pull/8555,2,['redund'],['redundant']
Safety,Enabled the cuda flag if the tmva-gpu flag is enabled with regards to this forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764/4,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3438#issuecomment-464776054:148,detect,detected,148,https://root.cern,https://github.com/root-project/root/pull/3438#issuecomment-464776054,1,['detect'],['detected']
Safety,"Enabled when configured with `root --web` or `root --web=on`; It tries to use local displays like CEF or Qt6 or Qt5 first. ; If not available, try to use detected ""native"" browsers like Chrome or Firefox. ; All these display kinds provides comfortable window management which are very like to normal windows.; Only if none of this will work default system web browser will be started - as it was up to now. Extend TROOT::SetWebDisplay() docu and `root --help` output",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15313:154,detect,detected,154,https://root.cern,https://github.com/root-project/root/pull/15313,1,['detect'],['detected']
Safety,"Enabling builtin_clang did help with the linker errors, we are now getting the familiar; ```; [ 72%] Generating G__Core.cxx, ../lib/Core.pcm; : CommandLine Error: Option 'W' registered more than once!; LLVM ERROR: inconsistency in registered CommandLine options; Subprocess aborted; make[2]: *** [core/CMakeFiles/G__Core.dir/build.make:472: core/G__Core.cxx] Error 1; make[1]: *** [CMakeFiles/Makefile2:13469: core/CMakeFiles/G__Core.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; [ 72%] Built target Cling; ```; on Linux as well",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12156#issuecomment-1674994434:274,abort,aborted,274,https://root.cern,https://github.com/root-project/root/issues/12156#issuecomment-1674994434,1,['abort'],['aborted']
Safety,"Especially `gROOT->ProcessLine(Form(""pattern"",...))` can be risky.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13439:60,risk,risky,60,https://root.cern,https://github.com/root-project/root/pull/13439,1,['risk'],['risky']
Safety,Especially the integral code in `RooAbsAnaConvPdf` can be made more; concise by avoiding boilerplate code for iterators and manual memory; management.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10686:80,avoid,avoiding,80,https://root.cern,https://github.com/root-project/root/pull/10686,1,['avoid'],['avoiding']
Safety,Eve7: try avoid conflicts with normal GL/glu.h include,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2873:10,avoid,avoid,10,https://root.cern,https://github.com/root-project/root/pull/2873,1,['avoid'],['avoid']
Safety,Eve7: try to avoid TVirtualx.h and GL_glu.h in same file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2905:13,avoid,avoid,13,https://root.cern,https://github.com/root-project/root/pull/2905,1,['avoid'],['avoid']
Safety,"Even if something within the event loop throws, we still need to call `CleanUpTask` to make sure `SnapshotHelperMT::FinalizeTask` gets called, to avoid teardown issues due to input and output TTrees of a Snapshot being deleted concurrently.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5214:146,avoid,avoid,146,https://root.cern,https://github.com/root-project/root/pull/5214,1,['avoid'],['avoid']
Safety,"Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11669:161,safe,safer,161,https://root.cern,https://github.com/root-project/root/pull/11669,3,"['avoid', 'safe']","['avoid', 'safe', 'safer']"
Safety,"Events are double counted if one accidentally defines overlapping ranges; and uses them in a multi-range fit. This happened for example in Jira; issue ROOT-9548 where the whole dataset was double counted, leading to; the parameter uncertainties being underestimated by a factor of sqrt(2).; ; That situation should be avoided. This commit introduces a check for; overlapping ranges before the multi-range likelihood is created. Confusing situations such as reported in [ROOT-9548](https://sft.its.cern.ch/jira/browse/ROOT-9548) are avoided now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7816:318,avoid,avoided,318,https://root.cern,https://github.com/root-project/root/pull/7816,2,['avoid'],['avoided']
Safety,"Every RooFit pdf is evaluated with a set of variables to normalize over; (normalization set). A pointer to the last used normalization set is; stored in the pdf class. sometimes, pdfs are evaluated without a; normalization set in RooFit if the normalization doesn't matter. But for; a specific class the normalization always matters: the RooAddPdf Because; if the components are unnormalized, you get the wrong shape of the sum. That's why commit f6d1543 added some lines to use the last-used; normalization set if you evaluate a RooAddPdf without a normalization; set. But since the pdf only has a *pointer* to the last-used; normalization set, it will have an invalid pointer if the actual; previous normalization set gets destroyed. Because of RooFits memory pool for the RooArgSets that only recycles; memory every 6000 RooArgSets, the invalid `_normSet` problem only gets; visible in large models, but if the model is large enough it causes; reproducible crashes, as reported by the ATLAS Higgs combination group. This commit fixes the issue by copying the last-used normalization set; into the RooAddPdf, instead of only storing a pointer. Furthermore, the; logic to override the empty normalization set with the last-stored; normalization set is moved to `RooAbsPdf::getNormAndCache()`, avoiding; the overload of `RooAbsPdf::getValV()`. Initially, the check where the copied normalization set needs to be updated was done based on the address of the normalization set. However, comparisons by address should be avoided because they can lead to false positives if memory is recycled. That's why this PR also contains the UniqueId mechanism already proposed and reviewed in https://github.com/root-project/root/pull/8324. The backport of this PR to v624 is the PR https://github.com/root-project/root/pull/8579, which doesn't use the safer uniqueId mechanism, which is probably too big of a change for a patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8580:1294,avoid,avoiding,1294,https://root.cern,https://github.com/root-project/root/pull/8580,3,"['avoid', 'safe']","['avoided', 'avoiding', 'safer']"
Safety,"Every RooFit pdf is evaluated with a set of variables to normalize over; (normalization set). A pointer to the last used normalization set is; stored in the pdf class. sometimes, pdfs are evaluated without a; normalization set in RooFit if the normalization doesn't matter. But for; a specific class the normalization always matters: the RooAddPdf Because; if the components are unnormalized, you get the wrong shape of the sum. That's why commit f6d1543 added some lines to use the last-used; normalization set if you evaluate a RooAddPdf without a normalization; set. But since the pdf only has a *pointer* to the last-used; normalization set, it will have an invalid pointer if the actual; previous normalization set gets destroyed. Because of RooFits memory pool for the RooArgSets that only recycles; memory every 6000 RooArgSets, the invalid `_normSet` problem only gets; visible in large models, but if the model is large enough it causes; reproducible crashes, as reported by the ATLAS Higgs combination group. This commit fixes the issue by copying the last-used normalization set; into the RooAddPdf, instead of only storing a pointer. Furthermore, the; logic to override the empty normalization set with the last-stored; normalization set is moved to `RooAbsPdf::getNormAndCache()`, avoiding; the overload of `RooAbsPdf::getValV()`. This is a backport of https://github.com/root-project/root/pull/8580, minus the safer uniqueId mechanism, which is probably too big of a change for a patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8579:1294,avoid,avoiding,1294,https://root.cern,https://github.com/root-project/root/pull/8579,2,"['avoid', 'safe']","['avoiding', 'safer']"
Safety,"Every worker stores the RDataFrame created and the computation graph jitted during the first task in a process-wide dictionary serving as a cache. This is required in order to avoid having to re-jit the computation graph at each task. This commit introduces a post-execution cleanup job for the Dask workers so that when a distributed execution ends, the workers are instructed to remove the artifacts generated by the execution from the caches. In particular, if the RDataFrame execution was processing a TTree-based dataset, removing the artifact from the cache also notably deallocates the corresponding TTreeCache, one per RDataFrame in-flight in the process. Here are some memory usage flamegraphs obtained with memray running the AGC analysis script. https://cernbox.cern.ch/s/YPEmBfULdvy8CbN. You will find the following:; * report_1sample_1file_2task_master.html : 1 RDataFrame, 1 file, 2 partitions. Total memory seen 293 MB; * report_1sample_1file_2task_cleancache.html : 1 RDataFrame, 1 file, 2 partitions. Total memory seen 238 MB; * report_5sample_1file_2task_master.html: 5 RDataFrames, 1 file each, 2 partitions each. Total memory seen 521 MB; * report_5sample_1file_2task_cleancache.html: 5 RDataFrames, 1 file each, 2 partitions each. Total memory seen 249 MB. One can search for the `TTreeCache` symbol and notice that e.g. between the second and the first flamegraphs the difference is ~40MB which is the size of the TTreeCache. Similarly between the 4th and 3rd there is approximately a difference of ~5 TTreeCache sizes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16094:176,avoid,avoid,176,https://root.cern,https://github.com/root-project/root/pull/16094,1,['avoid'],['avoid']
Safety,"Example effect of the new, complete implementation:; ```.cpp; #include ""ROOT/RDataFrame.hxx"". struct DecayAngles {; Double_t phi{0.0};; };. int main(); {; ROOT::RDataFrame d( 10 );; auto dnotype = d.Define( ""foo"", [](){ return DecayAngles(); } );; *dnotype.Count(); // does work; // *dnotype.Filter(""foo.phi > 0"").Count(); // does not work and prints nice error message; return 0;; }; ```; error message; ```; input_line_15:1:56: error: variable has incomplete type '__tdf1::foo_type' (aka '__tdf1::DecayAngles'); namespace __tdf_0{ auto tdf_f = []() {__tdf1::foo_type foo;; ^; input_line_13:1:26: note: forward declaration of '__tdf1::DecayAngles'; namespace __tdf1 { class DecayAngles;/* Did you forget to declare type DecayAngles in the interpreter?*/ using foo_type = DecayAngles; }; ^; libc++abi.dylib: terminating with uncaught exception of type std::runtime_error: Cannot interpret the following expression:; foo.phi > 0. Make sure it is valid C++.; Abort trap: 6; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2558#issuecomment-417694357:957,Abort,Abort,957,https://root.cern,https://github.com/root-project/root/pull/2558#issuecomment-417694357,1,['Abort'],['Abort']
Safety,"Export RooSimultaneous channels as dictionary of names instead of having; the full pdf specification as the value. This change is done because all pdfs should be specified in the; top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that; `exportObject` doesn't need to take the node where is should put the; object. It's better if it figures out itself to avoid errors when; calling it. Also, I suggest to not strip the `model_` prefix of the name from the; pdf that specifies a HistFactory channel. Otherwise, the name values in; the RooSimultaneous don't match anymore, which is a problem now that we; use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10791:394,avoid,avoid,394,https://root.cern,https://github.com/root-project/root/pull/10791,1,['avoid'],['avoid']
Safety,External XrootD built from git commit is not detected,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10604:45,detect,detected,45,https://root.cern,https://github.com/root-project/root/issues/10604,1,['detect'],['detected']
Safety,Extraction from #5181 . First of all - add libraries in dependency list when class from such library used; Second - try to remove includes which are not used and coming from libraries which are not in dep list; In two places try to use virtual interfaces (TVirtualTreePlayer and TVirtualPacketizer) to avoid linking to implementation library.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5231:302,avoid,avoid,302,https://root.cern,https://github.com/root-project/root/pull/5231,1,['avoid'],['avoid']
Safety,"FF -Dbuiltin_gtest=OFF -Dbuiltin_nlohmannjson=OFF -Dbuiltin_openui5=OFF -Dalien=OFF -Dbonjour=OFF -Dcastor=OFF -Dchirp=OFF -Dclad=OFF -Ddavix=ON -Ddcache=OFF -Dfail-on-missing=ON -Dfftw3=OFF -Dfitsio=OFF -Dfortran=OFF -Dgnuinstall=ON -Dimt=ON -Dgfal=OFF -Dgviz=OFF -Dhdfs=OFF -Dhttp=ON -Dkrb5=OFF -Dldap=OFF -Dmonalisa=OFF -Dmysql=OFF -Dodbc=OFF -Dopengl=ON -Doracle=OFF -Dpgsql=OFF -Dpythia6=OFF -Dpythia8=OFF -Drfio=OFF -Droot7=OFF -Dsqlite=OFF -Dssl=ON -Dtmva=ON -Dvdt=OFF -Dwebgui=OFF -Dxml=ON -Dxrootd=ON -DC_INCLUDE_DIRS=/nix/store/nasgvbblxi25r6y1s82il4m0m4ghib68-glibc-2.35-224-dev/include ; -- The C compiler identification is GNU 11.3.0; -- The CXX compiler identification is GNU 11.3.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /nix/store/1y8i61anhs9hh1g5x3zw2fvdbivwixzg-gcc-wrapper-11.3.0/bin/gcc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /nix/store/1y8i61anhs9hh1g5x3zw2fvdbivwixzg-gcc-wrapper-11.3.0/bin/g++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /nix/store/bslw1kzx445wxp08ykq2vdsgnr516vcq-git-2.39.1/bin/git (found version ""2.39.1"") ; -- Checking internet connectivity; -- Checking internet connectivity - failed: will not automatically download external dependencies; -- Looking for Python; -- Found Python3: /nix/store/sp5x6s8n36gjlwck74xhj1i61p66vcpa-python3-3.10.9/bin/python3.10 (found version ""3.10.9"") found components: Interpreter Development NumPy Development.Module Development.Embed ; -- Could NOT find Python2 (missing: Python2_EXECUTABLE Python2_INCLUDE_DIRS Python2_LIBRARIES Python2_NumPy_INCLUDE_DIRS Interpreter Development NumPy Development.Module Development.Embed) ; Reason given by package: ; Interpreter: Wrong major version for the interpreter ""/nix/store/sp5x6s8n36gjlwck74x",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12153#issuecomment-1429284232:4728,Detect,Detecting,4728,https://root.cern,https://github.com/root-project/root/pull/12153#issuecomment-1429284232,4,['Detect'],['Detecting']
Safety,"FWIW I managed to make `llvm::identify_magic` crash with a bus error like this:; ```c++; #include <llvm/ADT/Twine.h>; #include <llvm/BinaryFormat/Magic.h>; #include <llvm/Support/MemoryBuffer.h>. #include <iostream>. #include <unistd.h>. int main(int argc, char *argv[]) {; if (argc < 2) {; std::cerr << ""Usage: "" << argv[0] << "" <file>"" << std::endl;; return 1;; }. llvm::Twine Path(argv[1]);. auto FileOrError =; #ifdef FIXED; llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,; /*RequiresNullTerminator=*/true,; /*IsVolatile=*/true);; #else; llvm::MemoryBuffer::getFile(Path, /*IsText=*/false,; /*RequiresNullTerminator=*/false);; #endif; if (!FileOrError) {; std::cerr << ""Problem reading '"" << argv[1] << ""'!"" << std::endl;; return 1;; }. std::unique_ptr<llvm::MemoryBuffer> FileBuffer = std::move(*FileOrError);; sleep(5);; llvm::file_magic Magic = llvm::identify_magic(FileBuffer->getBuffer());. std::cout << ""Magic = "" << Magic << std::endl;. return 0;; }; ```; Compile this into an executable, and then make a copy to use as input. While the program is sleeping, call `truncate -s 0` on the input and it should crash. (I *hope* this is also what happens in Jenkins with the random crashes we've been seeing...) The version with `FIXED` calls `getFile` with `IsVolatile=true` (and `RequiresNullTerminator=true`) to avoid using `mmap` and the crash. For Cling, I decided to just go with a `std::ifstream` to read the first 128 bytes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11174#issuecomment-1212128917:1324,avoid,avoid,1324,https://root.cern,https://github.com/root-project/root/pull/11174#issuecomment-1212128917,1,['avoid'],['avoid']
Safety,"FYI a related discussion from back then:. ""Should TTreeProcessor disable ParTreeProcessing once Process() is done? If so, maybe these functions should be an RAII instead of a pair of enable/disable (also to restore correctly to the *previous* state instead of enable/disable). This was discussed during the parallelisation meetings, and the point here is that it is safer to activate it the first time Process() is called and never deactivate it. The reason is people might call this method from different threads, and if we do activate-deactivate there could be interleaving of the two Process() calls. This could potentially deactivate the locks in one call when they are still needed in the other call. Sounds like you just need an atomic use count? If there is a cost associated to turning this mode on then it would still be better to turn it off once it's not needed anymore.""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5288#issuecomment-608706344:366,safe,safer,366,https://root.cern,https://github.com/root-project/root/pull/5288#issuecomment-608706344,1,['safe'],['safer']
Safety,"FYI, I will merge this *right* after the tag of 6.16/00 tomorrow. I really do not want to take *any* risk - we're two months late with that tag! This will thus be part of 6.16/02, which will likely (given past experience...) be released in February.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3247#issuecomment-455907869:101,risk,risk,101,https://root.cern,https://github.com/root-project/root/pull/3247#issuecomment-455907869,1,['risk'],['risk']
Safety,"FYI: The reason for the slow test execution and many of the timeouts was `ReuseExistingWeakSymbols`, added mostly as an optimization in commit adec92d1e763143dfcd151718418a3c1834824a8. It calls `getSymbolAddress` for a lot of `GlobalValue`s which is apparently much more expensive with LLVM 13 (probably due to locking, discussed above). However, the original commit message also mentions that this actually solves problems on M1, so we'll have to see later on how to re-enable it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1124936547:60,timeout,timeouts,60,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1124936547,1,['timeout'],['timeouts']
Safety,"F] Correctly propagate error storage in `RooDataSet::emptyClone()`; [RF][HS3] Don't assume that combined dataset name is always `""obsData""`; [RF][HS3] Use less `c_str()` conversions in RooFitHS3; [RF][HS3] New `wsEmplace()` method for creating objects in workspace; [RF][HS3] New `wsImport()` function to avoid repeating command args; [RF] Less manual memory management in RooAbsArg and RooProdGenContext; [RF] Code modernization of RooAbsReal; [RF][HS3] Renaming some distributions to conform with HS3 standard; [RF][HS3] Use HistFunc variables instead of underlying hist variables; [RF] Added protection against invalid variable names in createHistogram; [RF][HS3] Correct error messages when IO keys are missing; [RF][HS3] Code improvements in HS3 HistFactory; [RF][HS3] Small HS3 closure fixes; [RF][HS3] Import HistFactory constraints directly upon creation; [RF][HS3] Cleanup of generic functions to avoid using arguments; [RF][HS3] Don't import embedded data directly to RooWorkspace; [RF] Avoid false warnings in RooAbsReal::createHistogram(); [RF][HS3] Reduce verbosity of unit tests; [RF][HS3] Less usage of TString; [RF][HS3] Avoid code duplication when requesting RooArgLists and Sets; [RF][HS3] Remove unused functions from JSONFactories_HistFactory; [RF][HS3] Export `staterror` correctly for HistFactory; [RF][HS3] Major restructuring of HistFactory in HS3 - part 2; [RF][HS3] Major refactoring of `JSONFactories_HistFactory`; [RF][HS3] Correctly consider weight errors in `readBinnedData()`; [RF][HS3] Small code style improvement (renaming); [RF][HS3] Make `testHS3HistFactory` less verbose; [RF][HS3] Changed some JSON keywords to comply with new HS3 standard; [RF][HS3] Moved `DependencyMissingError` to public to make it catchable; [RF][HS3] Support MultiVarGaussian and TF1Binding plus code cleanup; [RF][HS3] Added helper function for writing matrices in JSONInterface; [RF][HS3] JSON IO of positive definite flag in PiecewiseInterpolation; [RF] Added getters to TFnBinding, Mul",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12590#issuecomment-1491813664:5869,Avoid,Avoid,5869,https://root.cern,https://github.com/root-project/root/pull/12590#issuecomment-1491813664,2,['Avoid'],['Avoid']
Safety,Failure with `tutorial-rcanvas-df105-py` is timeout.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15868#issuecomment-2173321917:44,timeout,timeout,44,https://root.cern,https://github.com/root-project/root/pull/15868#issuecomment-2173321917,1,['timeout'],['timeout']
Safety,"Failures are due to network problems and timeouts related to that I presume. Building is fine, so I will merge this despite the failures, since they are not related to the changes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4330#issuecomment-527417527:41,timeout,timeouts,41,https://root.cern,https://github.com/root-project/root/pull/4330#issuecomment-527417527,1,['timeout'],['timeouts']
Safety,"Failures are expected because OpenMP cannot be enabled when using ROOT fitting. It requires a full thread safe implementation of the objective function, and this is not done to cache some quantities such as parameter values or normalization integrals.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9327#issuecomment-996584783:106,safe,safe,106,https://root.cern,https://github.com/root-project/root/pull/9327#issuecomment-996584783,1,['safe'],['safe']
Safety,Failures can be ignored (CDash submission timeout),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6277#issuecomment-687229299:42,timeout,timeout,42,https://root.cern,https://github.com/root-project/root/pull/6277#issuecomment-687229299,1,['timeout'],['timeout']
Safety,Fair enough (we have potential to recover python and jitted functions then!). The comments above are still valid though.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16184#issuecomment-2275818467:34,recover,recover,34,https://root.cern,https://github.com/root-project/root/issues/16184#issuecomment-2275818467,1,['recover'],['recover']
Safety,"Fair enough. The LLVM 16 is revealing a part of the problem we had not solved yet :) [Note the simplified example is different from the real use case in that there is no expectation of recovery in that case while inside Core/Meta there is; i.e. once the problem is fixed, the command line reproducer will (and should) still fail ]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1757758714:185,recover,recovery,185,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1757758714,2,['recover'],['recovery']
Safety,"File::~TFile (this=0x559367a40820, __in_chrg=<optimized out>) at ../io/io/src/TFile.cxx:566; #17 0x00007fea7e9288d9 in TObject::Delete (this=0x559367a40820) at ../core/base/src/TObject.cxx:178; #18 0x00007fea802bbf82 in TTree::ChangeFile (this=0x559368ca6c20, file=0x559367a40820) at ../tree/tree/src/TTree.cxx:2813; #19 0x00007fea802bf66e in TTree::CopyEntries (this=0x559368ca6c20, tree=0x559368ca7a30, nentries=53446198, option=0x7ffcad78e7a1 "" fast"", needCopyAddresses=true) at ../tree/tree/src/TTree.cxx:3567; #20 0x00007fea802c825a in TTree::Merge (this=0x559368ca6c20, li=0x7ffcad78e560, info=0x7ffcad78e780) at ../tree/tree/src/TTree.cxx:6940; #21 0x00007fea8020066b in ROOT::merge_TTree (obj=0x559368ca6c20, coll=0x7ffcad78e560, info=0x7ffcad78e780) at tree/tree/G__Tree.cxx:4209; #22 0x00007fea7ef8e60d in TFileMerger::MergeOne (this=0x7ffcad78f2b0, target=0x559367a40820, sourcelist=0x7ffcad78f308, type=12, info=..., oldkeyname="""", allNames=..., status=; 0x7ffcad78e6ec: true, onlyListed=; 0x7ffcad78e6ed: false, path="""", current_sourcedir=0x559367c95120, current_file=0x559367c95120, key=0x55936842d580, obj=0x559368ca6c20, nextkey=...) at ../io/io/src/TFileMerger.cxx:660; #23 0x00007fea7ef8f9ae in TFileMerger::MergeRecursive (this=0x7ffcad78f2b0, target=0x559367a40820, sourcelist=0x7ffcad78f308, type=12) at ../io/io/src/TFileMerger.cxx:878; #24 0x00007fea7ef902d4 in TFileMerger::PartialMerge (this=0x7ffcad78f2b0, in_type=12) at ../io/io/src/TFileMerger.cxx:968; #25 0x00007fea7ef8ce3f in TFileMerger::Merge (this=0x7ffcad78f2b0) at ../io/io/src/TFileMerger.cxx:372; #26 0x000055936623997a in operator() (__closure=0x7ffcad78eee0, merger=...) at ../main/src/hadd.cxx:473; #27 0x0000559366239d6e in operator() (__closure=0x7ffcad78ee90, merger=..., start=3, nFiles=10) at ../main/src/hadd.cxx:501; #28 0x000055936623c2a0 in main (argc=13, argv=0x7ffcad78f618) at ../main/src/hadd.cxx:543; fish: Job 1, 'hadd -ff Run2012B_SingleMu10x.r…' terminated by signal SIGABRT (Abort); ⏎ ; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10102:6377,Abort,Abort,6377,https://root.cern,https://github.com/root-project/root/issues/10102,1,['Abort'],['Abort']
Safety,"Final note: In the commits left on the branch there was a ""merge"" commit, we want to avoid them. When updating your branch with the content of the master branch, please use 'git rebase' rather than `git merge`. Also we tend to prefer to simplify the history by keeping only the effective commits. [For example, in this case, you could (have done)/do `git rebase -i` to remove the commit that was reverse and its reversal :)]. For this PR, I effectively handled these changes by doing a ""merge and squash"" but this works out only for PR that have one effective commit (the case here).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8425#issuecomment-865184527:85,avoid,avoid,85,https://root.cern,https://github.com/root-project/root/pull/8425#issuecomment-865184527,2,['avoid'],['avoid']
Safety,FindVdt.cmake: create imported target and detect version,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3827:42,detect,detect,42,https://root.cern,https://github.com/root-project/root/pull/3827,1,['detect'],['detect']
Safety,"First delete nop method `TMVA::SVWorkingSet::PrintStat()`, then remove many more unused variables in various areas. **Note**: If you absolutely require your part of this PR be split out, we can discuss but it's going to be work that I'd like to avoid if possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11157:245,avoid,avoid,245,https://root.cern,https://github.com/root-project/root/pull/11157,1,['avoid'],['avoid']
Safety,"First introduced by #5083, a mechanism was put in place to build PyROOT for both Python 2 and Python 3. As Python 2 is not supported anymore by ROOT, this patch can be reverted. This helps to get again closer with upstream cppyy and CPyCppyy, avoids setting environment variables when importing ROOT, and reduces overhead in importing the ROOT module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14703:243,avoid,avoids,243,https://root.cern,https://github.com/root-project/root/pull/14703,1,['avoid'],['avoids']
Safety,"First reported at https://root-forum.cern.ch/t/question-about-aliases-in-rdataframe/51155 . Reproducer:. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <TTree.h>. int main() {; TTree t(""t"", ""t"");; auto x = std::make_pair(42, 84);; // This is a weird way to build a tree, but for the purposes of this test; // we we just need to mock a TTree with branches ""topbranch"" and; // ""topbranch.something"" where `something` must not be a data member of the type of ""topbranch""; // (otherwise things ""happen"" to work due to the order in which we do substitutions in RDF, see below).; t.Branch(""topbranch"", &x);; t.Branch(""topbranch"", &x, ""a/I:b/I"");; t.Fill();. auto df = ROOT::RDataFrame(t).Alias(""alias"", ""topbranch"");; // Here we transform `""alias.a == 42""` into `[](std::pair<int, int> &var0) { return var0.a == 42; }`,; // which is not valid C++.; return df.Filter(""alias.a == 42"").Count().GetValue();; }; ```; which yields:. ```; input_line_8:2:45: error: no member named 'a' in 'std::pair<int, int>'; auto func0(pair<int,int>& var0){return var0.a == 42; ~~~~ ^; terminate called after throwing an instance of 'std::runtime_error'; what():; RDataFrame: An error occurred during just-in-time compilation. The lines above might indicate the cause of the crash; All RDF objects that have not run an event loop yet should be considered in an invalid state. fish: Job 1, './repro2' terminated by signal SIGABRT (Abort); ```. The solution is to perform alias substitution in the expression first and then, in a second pass, substitute branch names with dummy variable names (`var0`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11207:1405,Abort,Abort,1405,https://root.cern,https://github.com/root-project/root/issues/11207,1,['Abort'],['Abort']
Safety,"First reported at https://root-forum.cern.ch/t/sequence-of-loading-root-file/48601 . The following is a reproducer:. ```cpp; #include <TFile.h>; #include <TNtuple.h>; #include <iostream>. int main() {; TFile f0(""o1.root"");; TFile f1(""o2.root"");. TNtuple *B2L = f0.Get<TNtuple>(""B2Lc"");; std::cout << ""No clone:\n"";; B2L->GetEntry(0);; std::cout << ""done\n"";. //f0.cd(); uncommenting fixes the issue; TNtuple *B2Lc = static_cast<TNtuple *>(B2L->Clone());; f1.cd();; std::cout << ""Clone:\n"";; B2Lc->GetEntry(0);; std::cout << ""done\n"";; return 0;; }; ```; prints; ```; No clone:; done; Clone:; Error in <TBasket::Streamer>: The value of fKeylen is incorrect (-23644) ; trying to recover by setting it to zero; Error in <TBasket::Streamer>: The value of fObjlen is incorrect (-2020426277) ; trying to recover by setting it to zero; Error in <TBranch::GetBasket>: File: o2.root at byte:3872444835, branch:m, entry:0, badread=1, nerrors=1, basketnumber=0; done; ```. [files.zip](https://github.com/root-project/root/files/7969912/files.zip)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9757:677,recover,recover,677,https://root.cern,https://github.com/root-project/root/issues/9757,2,['recover'],['recover']
Safety,"Fits using bin integrals or fits of ThnSparse where not working in multi-thread mode due to a usage of the non thread-safe function BinData::BinUpEdge; This was showing by failures of bin integral fits and thnsparse fits in the stressHIstoFit.cxx when running with ROOT MT. . This PR fixes this issues. Improvements have been done also for stressHIstoFit such as adding an option ""-t"" to run the tes in MT mode",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5626:118,safe,safe,118,https://root.cern,https://github.com/root-project/root/pull/5626,1,['safe'],['safe']
Safety,"Fix #6393 (at least incrementally) by avoiding the demangling step, and instead exposing the template-ness consistently.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6418:38,avoid,avoiding,38,https://root.cern,https://github.com/root-project/root/pull/6418,1,['avoid'],['avoiding']
Safety,Fix GetZaxis - may fail while dimension was checked before checking histogram. Simplify code - avoid gPad testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14892:95,avoid,avoid,95,https://root.cern,https://github.com/root-project/root/pull/14892,1,['avoid'],['avoid']
Safety,"Fix Jira issue #9469: TGFileBrowser ""ExpandDirectories"" Network FS detection",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3265:67,detect,detection,67,https://root.cern,https://github.com/root-project/root/pull/3265,1,['detect'],['detection']
Safety,Fix ROOT-9784. Avoid to use empty name in v5 'replacement name'.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3143:15,Avoid,Avoid,15,https://root.cern,https://github.com/root-project/root/pull/3143,1,['Avoid'],['Avoid']
Safety,Fix [this issue](https://github.com/root-project/root/issues/9514). The change inserts a new line in the SVG file before the <\text> tag. This avoids the syntax error the user sees when inserting a very long text.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14590:143,avoid,avoids,143,https://root.cern,https://github.com/root-project/root/pull/14590,1,['avoid'],['avoids']
Safety,"Fix a debug assertion failure with `vector iterators incompatible` error on Windows in debug mode.; In `std::vector<Float_t>::const_iterator it = ev->GetValues().begin()`, `it` is initialised to `GetValues().begin()` and is then compared by `!=` to `GetValues().end()`. But `getValue()` returns a vector by value, not by reference, so it returns a copy, which means that every time we call `getValue()`, we get a different vector, so we get incompatible iterators. For the compiler, this does not make any difference. Type safety does not help, two iterators which belong to different container instances have the same type, so the code compiles. At run time, however, additional checks are made to ensure that two iterators that are being compared really belong to the same container object. (As explained [here](https://stackoverflow.com/questions/32978410/debug-assertion-vector-iterators-incompatible-c))",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13321:523,safe,safety,523,https://root.cern,https://github.com/root-project/root/pull/13321,1,['safe'],['safety']
Safety,"Fix a few minor things and pave the way to integrate cutflow reports in TDataFrame. * TDFAction ctor can take a shared_ptr instead of a weak_ptr: TDFAction; can safely assume that the previous node in the chain still exists when it is; being constructed; * fPrevData is now a reference instead of a raw pointer in all classes:; a reference better indicates that we always expect fPrevData to be a valid; node of the chain. In fact, the only case when this condition might not be; met is when the TDataFrameImpl object goes out-of-scope before other nodes; of the chain; we detect this case and throw before trying to access; invalid fPrevData pointers/references.; * use `Long64_t` instead of `int` for all entry variables",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/333:161,safe,safely,161,https://root.cern,https://github.com/root-project/root/pull/333,2,"['detect', 'safe']","['detect', 'safely']"
Safety,Fix according to: https://root-forum.cern.ch/t/redundant-argument-in-tgraphpolar/40368,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6067:47,redund,redundant-argument-in-tgraphpolar,47,https://root.cern,https://github.com/root-project/root/pull/6067,1,['redund'],['redundant-argument-in-tgraphpolar']
Safety,Fix bug ROOT-10854. WHen a parameter is bound don;t go in the regions outside the bounds. This avoids that a new minimum is found. ; Add also a protection to avoid an infinite loop in the new minimum iterative search. Add fix also for the related issue ROOT-10835. In that case avoid 0/0 division in TMInuit when parameter is bounded and minimum is at 0 and bound is 0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5899:95,avoid,avoids,95,https://root.cern,https://github.com/root-project/root/pull/5899,3,['avoid'],"['avoid', 'avoids']"
Safety,"Fix detected bugs, add separate function for chunk loading with filters, add tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15510:4,detect,detected,4,https://root.cern,https://github.com/root-project/root/pull/15510,1,['detect'],['detected']
Safety,Fix detection of Python3 on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5414:4,detect,detection,4,https://root.cern,https://github.com/root-project/root/pull/5414,1,['detect'],['detection']
Safety,Fix detection of clang version on macOS for builtin TBB,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3926:4,detect,detection,4,https://root.cern,https://github.com/root-project/root/pull/3926,1,['detect'],['detection']
Safety,Fix issue #6670. Avoid infinite recursion from TClass::InheritsFrom.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6680:17,Avoid,Avoid,17,https://root.cern,https://github.com/root-project/root/pull/6680,1,['Avoid'],['Avoid']
Safety,Fix minor redundant code in PyKeras,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6253:10,redund,redundant,10,https://root.cern,https://github.com/root-project/root/pull/6253,1,['redund'],['redundant']
Safety,"Fix nullptr dereference bugs in TClass and TList, wrap TClass.cxx to 120 columns to follow coding conventions, and avoid StreamerInfo lookup when it is cached.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/953:115,avoid,avoid,115,https://root.cern,https://github.com/root-project/root/pull/953,1,['avoid'],['avoid']
Safety,Fix small issues in JavaScript detected by DeepCode [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7467:31,detect,detected,31,https://root.cern,https://github.com/root-project/root/pull/7467,1,['detect'],['detected']
Safety,Fix stressRooFit #4 avoiding an integral error in fitting. Fixes ROOT-10834,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5860:20,avoid,avoiding,20,https://root.cern,https://github.com/root-project/root/pull/5860,1,['avoid'],['avoiding']
Safety,"Fix stressRooFit test #4, a fit of a beta pdf, avoiding the x=0 point where the pdf diverges for some parameter values. This fixes ROOT-10834. This PR fixes also a dependency issue in building test with make in both stressRooFit and StressRooStats",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5860:47,avoid,avoiding,47,https://root.cern,https://github.com/root-project/root/pull/5860,1,['avoid'],['avoiding']
Safety,Fix test tolerance to avoid some failures observed in the last nightly builds ; Do not build cudnn full test for simple RNN when cudnn is not available,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5380:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/5380,1,['avoid'],['avoid']
Safety,Fix the following crash when running `roodataset-numpy` and `roodatahist-numpy` on Windows 64:; ```; *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================. ================ Thread 0 ================; C:\build\night\LABEL\windows64\SPEC\default\V\master\root\bindings\pyroot\cppyy\cppyy-backend\clingwrapper\src\clingwrapper.cxx(198): `anonymous namespace'::TExceptionHandlerImp::HandleException(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\core\winnt\src\TWinNTSystem.cxx(1766): TWinNTSystem::DispatchSignals(); ucrtbase!raise(); ucrtbase!abort(); ucrtbase!terminate(); VCRUNTIME140!_std_terminate(); VCRUNTIME140_1!??; VCRUNTIME140_1!_NLG_Return2(); VCRUNTIME140_1!_NLG_Return2(); VCRUNTIME140_1!_NLG_Return2(); VCRUNTIME140_1!_CxxFrameHandler4(); d:\a01\_work\43\s\src\vctools\crt\vcstartup\src\gs\amd64\gshandlereh4.cpp(86): __GSHandlerCheck_EH4(); ntdll!_chkstk(); ntdll!RtlUnwindEx(); ntdll!RtlUnwind(); VCRUNTIME140!_report_gsfailure(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\core\base\src\TException.cxx(33): Throw(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\bindings\pyroot\cppyy\cppyy-backend\clingwrapper\src\clingwrapper.cxx(201): `anonymous namespace'::TExceptionHandlerImp::HandleException(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\core\winnt\src\TWinNTSystem.cxx(1766): TWinNTSystem::DispatchSignals(); ucrtbase!seh_filter_exe(); python!??; VCRUNTIME140!_C_specific_handler(); ntdll!_chkstk(); ntdll!RtlRaiseException(); ntdll!KiUserExceptionDispatcher(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\bindings\pyroot\cppyy\cppyy-backend\clingwrapper\src\clingwrapper.cxx(600): Cppyy::GetActualClass(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\bindings\pyroot\cppyy\CPyCppyy\src\ProxyWrappers.cxx(897): CPyCppyy::BindCppObject(); C:\build\night\LABEL\windows64\SPEC\default\V\master\root\b,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10741:115,abort,abort,115,https://root.cern,https://github.com/root-project/root/pull/10741,2,['abort'],['abort']
Safety,"Fix the reference file for the v6.22 read test of RooCategory now that; v6.22 has been tagged. The previous file was using an outdated class; structure, and was therefore triggering warnings. (Warnings are not detected yet by CI, but can be seen here: #5591.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5658:210,detect,detected,210,https://root.cern,https://github.com/root-project/root/pull/5658,1,['detect'],['detected']
Safety,Fix thread safety data races,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8572:11,safe,safety,11,https://root.cern,https://github.com/root-project/root/pull/8572,1,['safe'],['safety']
Safety,Fix to avoid redefinition of injected value of macro in test stressTMVA. Visible for C++ module build for Clang 8.0.0:. In file included from <module-includes>:26: ../build/include/TMVA/MethodDNN.h:56:9: warning: 'DNNCPU' macro redefined [-Wmacro-redefined]. #define DNNCPU. While building module 'TMVA' imported from /.../root/test/stressTMVA.cxx:70: In file included from <built-in>:379:; #define DNNCPU 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2598:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/2598,1,['avoid'],['avoid']
Safety,Fix to avoid redefinition of injected value of macro in test stressTMVA. Visible for C++ module build for Clang 8.0.0:; ```; In file included from <module-includes>:26: ../build/include/TMVA/MethodDNN.h:56:9: warning: 'DNNCPU' macro redefined [-Wmacro-redefined]. #define DNNCPU. While building module 'TMVA' imported from /.../root/test/stressTMVA.cxx:70: In file included from <built-in>:379:; #define DNNCPU 1; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2582:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/2582,1,['avoid'],['avoid']
Safety,"Fixed the Travis build, moved build script, and added the cmake build-and-test test to the tests (Turns out, CMake's own source has lots of examples of that since that's what a test of CMake itself is generally doing). Fixed a bug in the calculation of the standalone directory, and simplified the CMake code a bit. `make package_source` now produces an error if in used in the wrong configuration. I've tried to avoid making any changes to the parts of Travis that are not affected, but there's a bug in the yaml: making a node anchor is also a normal definition; so if no packages are added, they get the default (which includes a non-existent timeout package). I'll see if I can make a separate PR with some improvements for Travis clarity/speed not related to Minuit2. This PR should be ready for review.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-375310840:413,avoid,avoid,413,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-375310840,4,"['avoid', 'timeout']","['avoid', 'timeout']"
Safety,Fixed typedef names in TMCAutolock to avoid name clash with Geant4 :,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2662:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/2662,1,['avoid'],['avoid']
Safety,"Fixes #10449 . Avoids serialisation of the head node which triggered recursive serialisation of all nodes in the graph. The graph is now represented with a flat list with node information. Each element has the operation of the current node and a (integer id) reference to the parent , which the operation should be called upon. In turn, also recreating the graph on each task is not done recursively anymore. Update:. Tests added, code reviewed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10459:15,Avoid,Avoids,15,https://root.cern,https://github.com/root-project/root/pull/10459,1,['Avoid'],['Avoids']
Safety,"Fixes #11390. Improves the workflow of `DisplayHelper::Exec` as follows:; 1. We always check whether there are entries to be displayed with `RDisplay::HasNext`. If so, add one row to the display object; 2. If no more entries should be displayed, signal this node has finished its job. Make sure the call to `StopProcessing` is done only once with a boolean flag, to avoid early stop of the execution due to more stop signals than the children who actually have finished their job.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11398:366,avoid,avoid,366,https://root.cern,https://github.com/root-project/root/pull/11398,1,['avoid'],['avoid']
Safety,"Fixes #6523 . As per comments by Philippe and Guilherme, the behaviour triggered by `TTree::Fill` to change the associated TFile when reaching a size greater than `fgMaxTreeSize` doesn't fit within the scope of TBufferMerger. Avoid calling `TTree::ChangeFile` doesn't change anything from the user perspective and doesn't interfere with the I/O mechanism of TBufferMerger (and thus of the multithreaded RDF Snapshot as well). . While fixing the above issue I found another one that may be related to this. Meanwhile the draft can be discussed. TODO; - [x] Update docs in TTree::Fill, TTree::ChangeFile and TBufferMerger. Tell the users that TBufferMergerFile doesn't trigger this behaviour; - [x] Include the reproducer as test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6570:226,Avoid,Avoid,226,https://root.cern,https://github.com/root-project/root/pull/6570,1,['Avoid'],['Avoid']
Safety,"Fixes #8750 . To support this usecase we need to send the distributed workers also the names of the subtrees in the main chain. At this point we might want to think of a bit of a reworking of the data structures like `ChainCluster` and `FileAndIndex`, plus I would like to make the function `get_clusters` return less redundant info (currently each cluster also reports the name of the file, the name of the tree and the number of entries which are all the same for clusters belonging to the same file). These improvements are left for the next PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8858:318,redund,redundant,318,https://root.cern,https://github.com/root-project/root/pull/8858,1,['redund'],['redundant']
Safety,"Fixes a ""buffer overflow"" in `G__defineMacro` of `cint`, where `snprintf` is given buffer length that is 1 byte longer that the actual buffer. It is seems like this never caused any actual buffer overflows - at least while building ROOT, where `cint` or rather `rootcint_tmp` is already used. However, this causes issues in certain scenarios, where GCC's (?) fortify mechanism causes `cint` (or rather `rootcint_tmp`) to abort during `G__DEFINE_MACRO(__linux__);`. Notes on my encounter with this issue:; - using GCC 13.2.0 on Ubuntu 24.04; - does not occur in `Debug` build mode, but was debuggable when using `RelWithDebInfo`; - the ROOT version is some legacy patched tarball apparently based on v5.34.00. I did not reproduce this issue using this branch, nor do I plan to, since I encountered other issues earlier during such a build attempt. Consequently, I also didn't run any tests.; If this makes this PR ineligible to merge, I'm fine with having it closed. This way, at least the potential error scenario and a solution are effectively ""documented"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16141:421,abort,abort,421,https://root.cern,https://github.com/root-project/root/pull/16141,1,['abort'],['abort']
Safety,"Fixes a compiler warning. Freetype 2.13.3 changed the type of a data member from char* to; unsigned char*, so we need to pass the correct type to FTContour to; avoid compiler warnings",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16706:160,avoid,avoid,160,https://root.cern,https://github.com/root-project/root/pull/16706,1,['avoid'],['avoid']
Safety,Fixes a problem with using genreflex to create a dictionary for a class that inherits from TObject. The problem was triggered by the thread-safety changes.; Depends on previous pull request (#12).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13:140,safe,safety,140,https://root.cern,https://github.com/root-project/root/pull/13,1,['safe'],['safety']
Safety,"Fixes for Python 3.7. * PyROOT_PyUnicode_AsString changed return type from char* to const char*; * Using _PyObject_GC_TRACK results in linking error:; undefined reference to `_PyGC_generation0'; The python documentation says this about _PyObject_GC_TRACK:; ""A macro version of PyObject_GC_Track(). It should not be used for extension modules.""; So it should not be used. Calling PyObject_GC_Track instead avoids the undefined symbol. I also removed the #ifndef R__WIN32 since the comment indicates that this was added to avoid the same issue on windows. Calling PyObject_GC_Track instead of using the _PyObject_GC_TRACK macro should fix the undefined symbol probelem on windows too.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2276:405,avoid,avoids,405,https://root.cern,https://github.com/root-project/root/pull/2276,2,['avoid'],"['avoid', 'avoids']"
Safety,"Fixes for bug ROOT-1036 (FitResult::Scan); When fitting histograms a shared_pointer of FitData must be passed to the Fitter class, in Fitter::Fit( data,...) functions instead of a row pointer !; This fixes the shared ownership of the fitting data between the Fitter and the FitResult classes and avoid that the data are deleted when exiting TH1::Fit. ; One can then use FitResult::Scan , FitResult::Contour or FitResult::GetConfidenceIntervals.; Before the data were accidentally not deleted, when multi-thread wad not enabled, because in that case a reference for the data was kept in the global TVirtualFitter class, available only in non-mt mode/. This PR also fixes the case of bin integral fit in multithreading. The problem was caused by using the GSL integrator from Mathmore. . testFit has been improved by adding test for FitResult::Scan and tests for multi-threading fitting",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4557:296,avoid,avoid,296,https://root.cern,https://github.com/root-project/root/pull/4557,1,['avoid'],['avoid']
Safety,"Fixes issue #8284 where TKeys with the same name as the requested RNTuple; would be attempted to be parsed as an RNTuple, leading to internal; parser assert failures later on. e.g.; ```cpp; // actually holds a TTree named ""Events""; auto reader = RNTupleReader::Open(""Events"", ""test80X_NANO.root"");; ```. Internal error before: ; ```; Fatal: nread == nbytes violated at line 1011 of `~/root/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; ```. Exception thrown after: ; ```; C++ exception with description ""no RNTuple named 'Events' in file 'test80X_NANO.root' (unchecked RResult access!); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8285:425,abort,aborting,425,https://root.cern,https://github.com/root-project/root/pull/8285,1,['abort'],['aborting']
Safety,"Fixes the following warning with CMake 3.24:; ```; CMake Warning (dev) at /usr/share/cmake/Modules/ExternalProject.cmake:3071 (message):; The DOWNLOAD_EXTRACT_TIMESTAMP option was not given and policy CMP0135 is; not set. The policy's OLD behavior will be used. When using a URL; download, the timestamps of extracted files should preferably be that of; the time of extraction, otherwise code that depends on the extracted; contents might not be rebuilt if the URL changes. The OLD behavior; preserves the timestamps from the archive instead, but this is usually not; what you want. Update your project to the NEW behavior or specify the; DOWNLOAD_EXTRACT_TIMESTAMP option with a value of true to avoid this; robustness issue.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11231:697,avoid,avoid,697,https://root.cern,https://github.com/root-project/root/pull/11231,2,['avoid'],['avoid']
Safety,Fixes thread safety issues in the matrix package. Adds consistent operators for TGeoMatrix-derived types.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2365:13,safe,safety,13,https://root.cern,https://github.com/root-project/root/pull/2365,1,['safe'],['safety']
Safety,Fixes version detection e.g. for release / cpack builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3174:14,detect,detection,14,https://root.cern,https://github.com/root-project/root/pull/3174,1,['detect'],['detection']
Safety,Following reproducer fails with a segfault:. ```python; import cppyy. cppyy.cppdef('''; struct Base {; float data;; float& operator[](int idx) { return data; }; };. struct Derived: public Base {; float data;. // Note that you have to derive from Base to make it break!; float& operator[](int idx) { return data; }. // Note that you must put the template here!; template <typename T>; float& operator[](int idx) { return data; }; };; '''). cppyy.gbl.Derived(); ```. There's a corresponding issue submitted to upstream cppyy: https://bitbucket.org/wlav/cppyy/issues/334/segfault-when-creating-proxy-to-derived. This issues were found in the wake of RVec 2.0 (#7502) and may just scratch the surface of an issue in cppyy with picking up methods from derived classes. See the workarounds for `operator[]` and `size` in RVec 2.0 to avoid this problem.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7686:827,avoid,avoid,827,https://root.cern,https://github.com/root-project/root/issues/7686,1,['avoid'],['avoid']
Safety,Following up on 1bd63965cf1 to avoid warnings like these on macOS:; ```; ld: warning: ignoring duplicate libraries: 'googletest-prefix/src/googletest-build/lib//libgtest.a'; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16255:31,avoid,avoid,31,https://root.cern,https://github.com/root-project/root/pull/16255,1,['avoid'],['avoid']
Safety,For Chrome and Firefox browsers full executable path should exists.; It is required to correctly start it with the fork. ; If browser executable was not detected - no need to try it,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2871:153,detect,detected,153,https://root.cern,https://github.com/root-project/root/pull/2871,1,['detect'],['detected']
Safety,For `TSystem's Exit and Abort` I would add a throw after the `AbstractMethod` (At first I thought about calling `Fatal` but those 2 routines could be involved in the implementation of `Fatal` causing more trouble).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11443#issuecomment-1267207616:24,Abort,Abort,24,https://root.cern,https://github.com/root-project/root/pull/11443#issuecomment-1267207616,1,['Abort'],['Abort']
Safety,"For better modularity in the future, the major end-user ROOT components; like RDataFrame, RooFit, and TMVA should not depend on each other. There was a dependency of RooFit on RDataFrame because of the; RooAbsDataHelper, but it is actually easy to avoid this with forward; declarations. This should have no impact on the user, because if they use RDF, they; probably include it already if they're not using the interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16606:248,avoid,avoid,248,https://root.cern,https://github.com/root-project/root/pull/16606,1,['avoid'],['avoid']
Safety,"For our reference, these are the usual sanity checks; ```; $: strace -z -f -o openat.log -e trace=open,openat python3 -c 'import ROOT;print(ROOT.gErrorIgnoreLevel);print(ROOT.kError)'; -1; 3000; $: grep openat openat.log | wc -l; 406; $: nm -C $ROOTSYS/lib/*.so | grep TString::kNPOS | wc -l; 0; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14352#issuecomment-1893692955:39,sanity check,sanity checks,39,https://root.cern,https://github.com/root-project/root/pull/14352#issuecomment-1893692955,1,['sanity check'],['sanity checks']
Safety,"For our users, it's important to fix certain parameters in the likelihood easily with any overhead. So far, this didn't work when using gradients from AD, because the gradients were only produced for the parameters that are floating at the time where the likelihood is created. However, it has no additional runtime overhead in backwards AD mode to simply generate the gradient for **all** parameters, and then filter out the right elements in the the RooMinimizer-related code. This is what is implemented in the second commit of this PR. Some changes in the RooAbsMinimizerFcn were necessary to do this filtering: so far it didn't store any information on all the parameters in order. It only stored two separate lists for floating and constant parameters. The first commit in this PR adds the necessary data members (`_allParams` and `_allParamsInit`) to the RooAbsMinimizerFcn for the filtering of parameters. Furthermore, the previous datamembers that stored the parameters separately are removed to avoid duplication and possible desync of information. On this occasion, the parameter management was completely rewritten to be more concise and robust. This will also help later when we integrate the discrete profiling from CMS combine, where changing the state and filtering of minimization parameters is also relevant. It was validated with the ATLAS and CMS likelihoods from ICHEP 2024 that this PR results in no performance regression, even though we are now generating the gradient for more parameters (roughly up to two times more, because for every floating nuisance parameter there is usually one constant global observable that constrains it).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16750:1005,avoid,avoid,1005,https://root.cern,https://github.com/root-project/root/pull/16750,1,['avoid'],['avoid']
Safety,For the CI this worked quite well. I would be in favour of merging this because the changes will avoid constant failures related to PyKeras on Mac builds.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13718#issuecomment-1741129931:97,avoid,avoid,97,https://root.cern,https://github.com/root-project/root/pull/13718#issuecomment-1741129931,1,['avoid'],['avoid']
Safety,For the `TObject` documentation I would add something along the line of:; ```; Classes derived from `TObject` can not use the `= default` syntax for their constructor as some compilers implement optimizations that prevents the `TObject::kIsOnHeap` detection mechanism from working properly.; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15469#issuecomment-2150845339:248,detect,detection,248,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2150845339,1,['detect'],['detection']
Safety,"For the record, one such discussion yield the following:. a) Update the merging operation (if not already done) to make sure that the output file is kept open during the length of the process (this is to avoid re-reading the output TTree from the output file) and the TTree is written to the output file only once at the end. b) CMSSW can detect when a 'merge' operation was requested by checking the return value of Fill and the number of entry: if Fill succeed and the TTree has zero entries afterwards then a merge operation was requested (the TTree was reset). c) We need to call a callback (std::function) provided at CMS when a merge operation is completed (i.e all its baskets are on the output file and the output TTree has been updated accordingly). d) When CMSSW noticed that a 'merge' operation has been requested, it will shutdown the CMSSW output module (make it unavailable to other modules). This guarantees that if CMSSW has N output modules, there will be at most N queued merge operations and while the merge are going on only 1 thread is used for it (and the other N-1 can be used for other CMSSW work). e) We need to implement a queuing of the merge operations tasks without relying on the ROOT global write lock. See for example the way something similar is done in CSMSW: https://github.com/cms-sw/cmssw/blob/master/FWCore/Concurrency/interface/SerialTaskQueue.h. f) CMSSW need to call a 'finalization' API to 'close-out' the output file (without this call the output file is useless).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1866#issuecomment-387769514:204,avoid,avoid,204,https://root.cern,https://github.com/root-project/root/pull/1866#issuecomment-387769514,2,"['avoid', 'detect']","['avoid', 'detect']"
Safety,"For the record, with v6.26/04 and gcc 11.3 Ubuntu 22. I get the same valgrind error and the following crash:; ```; #0 __pthread_kill_implementation (no_tid=0, signo=6, threadid=140737323350784) at ./nptl/pthread_kill.c:44; #1 __pthread_kill_internal (signo=6, threadid=140737323350784) at ./nptl/pthread_kill.c:78; #2 __GI___pthread_kill (threadid=140737323350784, signo=signo@entry=6) at ./nptl/pthread_kill.c:89; #3 0x00007ffff6cbc476 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #4 0x00007ffff6ca27f3 in __GI_abort () at ./stdlib/abort.c:79; #5 0x00007ffff6d036f6 in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff6e55b8c ""%s\n"") at ../sysdeps/posix/libc_fatal.c:155; #6 0x00007ffff6d1ad7c in malloc_printerr (str=str@entry=0x7ffff6e587b0 ""double free or corruption (out)"") at ./malloc/malloc.c:5664; #7 0x00007ffff6d1cef0 in _int_free (av=0x7ffff6e93c80 <main_arena>, p=0x7fffe2896000, have_lock=<optimized out>) at ./malloc/malloc.c:4588; #8 0x00007ffff6d1f4d3 in __GI___libc_free (mem=<optimized out>) at ./malloc/malloc.c:3391; #9 0x000055555555b133 in __gnu_cxx::new_allocator<char>::deallocate (this=0x7fffffffd4b0, __p=0x7fffe2896010 """", __t=27601898) at /usr/include/c++/11/ext/new_allocator.h:145 ; #10 0x000055555555ae34 in std::allocator_traits<std::allocator<char> >::deallocate (__a=..., __p=0x7fffe2896010 """", __n=27601898) at /usr/include/c++/11/bits/alloc_traits.h:496 ; #11 0x000055555555a82c in std::_Vector_base<char, std::allocator<char> >::_M_deallocate (this=0x7fffffffd4b0, __p=0x7fffe2896010 """", __n=27601898); at /usr/include/c++/11/bits/stl_vector.h:354; #12 0x000055555555a32c in std::_Vector_base<char, std::allocator<char> >::~_Vector_base (this=0x7fffffffd4b0, __in_chrg=<optimized out>); at /usr/include/c++/11/bits/stl_vector.h:335; #13 0x000055555555a381 in std::vector<char, std::allocator<char> >::~vector (this=0x7fffffffd4b0, __in_chrg=<optimized out>) at /usr/include/c++/11/bits/stl_vector.h:683; #14 0x0000555555559c9b ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11853#issuecomment-1342997692:552,abort,abort,552,https://root.cern,https://github.com/root-project/root/issues/11853#issuecomment-1342997692,1,['abort'],['abort']
Safety,"Freedesktop.org shared-mime-info is not a mime type registry, IANA is. Preferably, a media-type is [registered with IANA](https://www.iana.org/form/media-types) first. Someone from ROOT/Cern should register e.g. `application/x+cern-root` with IANA. Desktop environments don´t use the `file` utility, but FDOs smi DB. If one wants `root` files to be detected properly, a useful match has to be registered with FDO. `file`s match DB and FDOs DB are two completely separate entities. The match as submitted to FDO orignally is not very useful, as it is too generic:; 1. The ""root"" signature **must** be a offset 0, not in the range 0:64. This would match too many plain ASCII files.; 2. The binary nature of the `fVersion` and `fBegin` fields can be used to distinguish ROOT files from ASCII files:; * `fVersion` is `<major>*10000 + <minor>*100 + <micro> + <large_file:1e6>`, thus something very likely < 2 million, and definitely < 16.7 million (2^24). The MSB of fVersion can be assumed to be 0x00 always.; * `fBEGIN` is also very likely a very small value, in the examples above 0x64, i.e. we have another 2-3 zero bytes. If the first record is guaranteed _to be aligned_ to at least 4 bytes, we can also match with `fBEGIN | 0x3 == 0`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6771#issuecomment-1205771528:349,detect,detected,349,https://root.cern,https://github.com/root-project/root/issues/6771#issuecomment-1205771528,1,['detect'],['detected']
Safety,"From Isabel Goos:. I am just writing because I found a mistake on your reference guide that should be corrected.; On this page: https://root.cern.ch/doc/master/classTRolke.html#a77ed9095b5fe47050eeec195eb3b669d; we see the example ""SetPoissonBkgGaussEff(x,y,em,sde,tau)""; but later ""void 	SetPoissonBkgGaussEff (Int_t x, Int_t y, Double_t em, Double_t tau, Double_t sde)"".; So, in the example sde and tau are interchanged. ; We lost some nerves finding this out :) so, if we can avoid this for someone else, we are happy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12976:479,avoid,avoid,479,https://root.cern,https://github.com/root-project/root/pull/12976,1,['avoid'],['avoid']
Safety,"From a high-level perspective, this PR does two things:; * It converts the LCG state back to RANLUX numbers to avoid a bias in the generated numbers as reported by Martin Lüscher. This comes from the fact that the modulus `m = 2 ** 576 - 2 ** 240 + 1` is not a power of 2, so just treating the LCG state as a pool of entropy means that the upper `576 - 240 = 336` bits have a higher probability of being 0 than 1.; * Extract only 48 bits instead of 52 bits per random number. This restores the connection to the theoretical properties derived from understanding the original subtract-with-borrow recursion as a dynamical system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8293:111,avoid,avoid,111,https://root.cern,https://github.com/root-project/root/pull/8293,1,['avoid'],['avoid']
Safety,Fully avoid blocking in TCanvas::Update().; Only for expert use.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9713:6,avoid,avoid,6,https://root.cern,https://github.com/root-project/root/pull/9713,1,['avoid'],['avoid']
Safety,"Fyi I am currently doing my own sanity check (outside `SetEntriesRange`) by first calling ~~`SetEntry`~~ `GetEntries(true)`. . ~~`SetEntry` returns an entry status, which is 0 upon success, and works in my case as expected, i.e. it properly catches that `SetEntry(lastEntry)` is invalid.~~",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10774#issuecomment-1159464103:32,sanity check,sanity check,32,https://root.cern,https://github.com/root-project/root/issues/10774#issuecomment-1159464103,1,['sanity check'],['sanity check']
Safety,"Get rid of the remaining memory leaks, avoid code duplication for simultaneous binned fit test, etc. There is also an additional commit that continues the campaign of making the `roofitcore` tests depend less on `roofit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11793:39,avoid,avoid,39,https://root.cern,https://github.com/root-project/root/pull/11793,1,['avoid'],['avoid']
Safety,GetCollectionProxy during the setting of fCollProxy calls; TBranchElement::GetInfoImp that in some cases sets fCollProxy; and ends up recording it (sometimes) in the action sequence.; When GetCollectionProxy sets it too (i.e. change it) there is; now a disconnect between the branch and the action sequences that; lead to the action sequence to used an unset collection proxy:. Fatal in <TGenCollectionProxy>: Size> Logic error - no proxy object set.; aborting,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2834:452,abort,aborting,452,https://root.cern,https://github.com/root-project/root/pull/2834,2,['abort'],['aborting']
Safety,"GetTitle is const now, avoid const_cast",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/198:23,avoid,avoid,23,https://root.cern,https://github.com/root-project/root/pull/198,1,['avoid'],['avoid']
Safety,"Give more informative member names to avoid confusion (e.g. eveId, elementId, eve_id); Remove redundant member in object3d: eveId and mstrId, which can be accessed ad eve_el.fElementId, and eve_el.fMasterId. This PR is not a design change.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4810:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/4810,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"Given a tree with a branch of type `map<string, bool>`, like the one [in this forum post](https://root-forum.cern.ch/t/sample-splitting-using-rdataframe-not-working-for-the-trees-which-contains-vector-branches/49377), reading it with TTreeReader just yields a crash, while reading it with TTree first prints an error about the missing dictionary, _then_ crashes. ### TTreeReader. ```cpp; void repro_treereader() {; TFile f(""flatntuple_MC_.root"");; auto *t = f.Get<TTree>(""ntuplizer/tree"");; R__ASSERT(t != nullptr);; TTreeReader r(t);; TTreeReaderValue<std::map<std::string, bool>> rv(r, ""HLT_BPH_isFired"");; r.Next();; *rv;; }; ```; ```cpp; $ root -l repro_treereader.C; root [0]; Processing repro_treereader.C... *** Break *** segmentation violation; Root > .qqqqq; Info in <TRint::ProcessLine>: Bye... (try '.qqqqqqq' if still running). *** Break *** segmentation violation; Root > .qqqqqqq; ```. ### TTree. ```cpp; void repro_tree() {; TFile f(""flatntuple_MC_.root"");; auto *t = f.Get<TTree>(""ntuplizer/tree"");; R__ASSERT(t != nullptr);; std::map<std::string, bool> *m = nullptr;; t->SetBranchAddress(""HLT_BPH_isFired"", &m);; t->GetEntry(0);; }; ```; ```; $ root -l -b -q repro_tree.C. Processing repro_tree.C...; Error in <TTree::SetBranchAddress>: The class requested (map<string,bool>) for the branch ""HLT_BPH_isFired"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (map<string,bool>) to avoid to write corrupted data. *** Break *** segmentation violation; Root >; *** Break *** segmentation violation; ```. The TTreeReader version should also print the error, so users [don't get confused](https://root-forum.cern.ch/t/sample-splitting-using-rdataframe-not-working-for-the-trees-which-contains-vector-branches/49377).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10254:1481,avoid,avoid,1481,https://root.cern,https://github.com/root-project/root/issues/10254,1,['avoid'],['avoid']
Safety,"Given the discussion about deadlocks using ``static thread_local``` I pushed an alternate solution to avoid exclusive locks in ReadLock() based on shared mutexes, which is only used for C++14 or higher in this case. The indentation should also be fixed now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-740261240:102,avoid,avoid,102,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-740261240,1,['avoid'],['avoid']
Safety,"Given the discussion on the above mentioned link, I think we might have to implement our own solution (eg. for example have the test run a side thread that wakes up right before the timeout and print the stack track (important details in that implementation: how do we start this thread? how do we tell it the requested timeout). [I suppose it could also be a side process that send a segfault signal to the test process]",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15144#issuecomment-2040358698:182,timeout,timeout,182,https://root.cern,https://github.com/root-project/root/issues/15144#issuecomment-2040358698,2,['timeout'],['timeout']
Safety,"Given the fact that you found bugs in the safety algorithm and that you've added so many optimizations, I think we also need an improved version of the `parallel_world.C` test, that uses the new features you introduced. Now the rays are propagated based on the distance to the boundary, but we could make them for example change direction and move with the safety value if further than a given distance from the boundary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442#issuecomment-2354909585:42,safe,safety,42,https://root.cern,https://github.com/root-project/root/pull/16442#issuecomment-2354909585,2,['safe'],['safety']
Safety,"Given the following function declared to ROOT and accessed via a Python proxy:. ```; int foo(int x);; ```. Currently accessing its `func_doc`, which in turn calls `CPPMethod::GetPrototype`, gives:. 'int ::foo(int x)'. The extra set of '::' can be avoided by checking that the function is not declared inside a namespace. Note: this is a check, may be not worthy in the end if we find places that rely on those extra ""::"" being present",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11413:247,avoid,avoided,247,https://root.cern,https://github.com/root-project/root/pull/11413,1,['avoid'],['avoided']
Safety,"Given; ```cpp; // tree_with_pair.cpp; void tree_with_pair() {; TTree t(""t"", ""t"");; auto x = std::make_pair(42, 84);; //t.Branch(""topbranch"", &x, ""a/I:b/I""); t.Branch(""topbranch"", &x);; t.Fill();; t.Scan();; }; ```. , without this patch the output is:. ```; Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; In module 'Core':; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; ```. with this patch:. ```; Processing tree_with_pair.cpp...; ************************************; * Row * topbranch * topbranch *; ************************************; * 0 * 42 * 84 *; ************************************; ```. This fixes #11215 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11227:411,abort,aborted,411,https://root.cern,https://github.com/root-project/root/pull/11227,1,['abort'],['aborted']
Safety,"Gives an example of how to create a derived dataset with the RNTuple API. As an API change, allows accessing a model's default entry while the entry is building. This is safe as values are only added to the entry and existing values remain untouched.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14604:170,safe,safe,170,https://root.cern,https://github.com/root-project/root/pull/14604,1,['safe'],['safe']
Safety,"GraphPolar.cxx.o CMakeFiles/Graf.dir/src/TGraphPolargram.cxx.o CMakeFiles/Graf.dir/src/TGraphQQ.cxx.o CMakeFiles/Graf.dir/src/TImage.cxx.o CMakeFiles/Graf.dir/src/TLatex.cxx.o CMakeFiles/Graf.dir/src/TLegend.cxx.o CMakeFiles/Graf.dir/src/TLegendEntry.cxx.o CMakeFiles/Graf.dir/src/TLine.cxx.o CMakeFiles/Graf.dir/src/TLink.cxx.o CMakeFiles/Graf.dir/src/TMarker.cxx.o CMakeFiles/Graf.dir/src/TMathText.cxx.o CMakeFiles/Graf.dir/src/TPave.cxx.o CMakeFiles/Graf.dir/src/TPaveLabel.cxx.o CMakeFiles/Graf.dir/src/TPaveStats.cxx.o CMakeFiles/Graf.dir/src/TPaveText.cxx.o CMakeFiles/Graf.dir/src/TPavesText.cxx.o CMakeFiles/Graf.dir/src/TPie.cxx.o CMakeFiles/Graf.dir/src/TPieSlice.cxx.o CMakeFiles/Graf.dir/src/TPoints.cxx.o CMakeFiles/Graf.dir/src/TPolyLine.cxx.o CMakeFiles/Graf.dir/src/TTF.cxx.o CMakeFiles/Graf.dir/src/TText.cxx.o CMakeFiles/Graf.dir/src/TWbox.cxx.o CMakeFiles/G__Graf.dir/G__Graf.cxx.o -Wl,-rpath,/home/graemes/tmp/root-build-nobrotli/lib: ../../FREETYPE-prefix/src/FREETYPE/objs/.libs/libfreetype.a /usr/lib/x86_64-linux-gnu/libz.so ../../lib/libmathtext.a ../../lib/libHist.so ../../lib/libMatrix.so ../../lib/libMathCore.so ../../lib/libImt.so ../../lib/libMultiProc.so ../../lib/libNet.so ../../lib/libRIO.so ../../lib/libThread.so ../../lib/libCore.so; 	/usr/bin/ld: ../../FREETYPE-prefix/src/FREETYPE/objs/.libs/libfreetype.a(sfnt.o): in function `sfnt_init_face':; 	sfnt.c:(.text+0x1173a): undefined reference to `BrotliDecoderDecompress'; 	collect2: error: ld returned 1 exit status; ```. If I re-run the link manually adding `/usr/lib/x86_64-linux-gnu/libbrotlicommon.so` it succeeds. The error is avoided entirely if the FTGL libraries are found on the system (specifically for Ubuntu by installing the `libfgtl-dev` package). Naively, it seems there is probably a missing library in `graf2d/graf/CMakeLists.txt`. ### To Reproduce. Try to build ROOT 6.26/06 on an Ubuntu 22.04 machine where FTGL is not natively installed and ROOT self-builds it (`builtin_ftgl` is enabled).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11239:2752,avoid,avoided,2752,https://root.cern,https://github.com/root-project/root/issues/11239,1,['avoid'],['avoided']
Safety,"Happens when try to find and execute static class method without arguments and which returns `void`. First detected with `TPluginHandler`. This is only plugin handler which defined with 0 arguments:; ```; gPluginMgr->AddHandler(""TGeoManagerEditor"", ""*"", ""TGeoManagerEditor"", ""GeomBuilder"", ""LoadLib()"");; ```; ROOT crashes when executed this plugin.; Problem can be cooked down to the reproducer - code which is executed by plugin handler:; ```; {; TClass *cl = TClass::GetClass(""TGeoManagerEditor"");. TString fCtor = ""LoadLib()"";. TString method = fCtor(0, fCtor.Index(""(""));; TString proto = fCtor(fCtor.Index(""("")+1, fCtor.Index("")"")-fCtor.Index(""("")-1);. auto fMethod = cl->GetMethodWithPrototype(method, proto);. auto fCallEnv = new TMethodCall;; fCallEnv->Init(fMethod);. fCallEnv->SetParams();. Longptr_t ret = 0;; fCallEnv->Execute(ret);; }. ```; It crashed when `fCallEnv->Execute` is called. . There is simple workaround:; ```; if (proto.Length() == 0) proto = ""()"";; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11930:107,detect,detected,107,https://root.cern,https://github.com/root-project/root/issues/11930,1,['detect'],['detected']
Safety,"Hello @guitargeek .Thanks for this PR, I see you even fill the local buffer with 0s to avoid fp exceptions later on. Just a naive question: how did you notice this defect in the code? Is there a way to know whether we have others hiding somewhere else?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13772#issuecomment-1743501861:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/13772#issuecomment-1743501861,1,['avoid'],['avoid']
Safety,"Hello @mkrzewic, we try to avoid patching our copy of LLVM / Clang if we can help it. What's the deal with `_REENTRANT`, are there FreeBSD headers expecting this to be set or is this ROOT checking something that isn't needed on FreeBSD?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13069#issuecomment-1602326602:27,avoid,avoid,27,https://root.cern,https://github.com/root-project/root/pull/13069#issuecomment-1602326602,1,['avoid'],['avoid']
Safety,"Hello again, we discussed this internally, brainstormed solutions etc. and the outcome is that this cannot be fixed in RDF (or possibly at all): as I mentioned above this is a quirk of managing C++ objects from Python: because of C++ lifetimes and undefined behavior with use-after-deletes, there is no surefire way in which RDF can detect that the TChain object it's referring to went out of scope. Please do this instead:. ```python; def build_rdataframe_2(filepath, tree): ; return ROOT.RDataFrame(tree, filepath); ```. or if you need friend trees (from ROOT v6.28):. ```python; def build_rdataframe_2(filepath, tree): ; spec = ROOT.RDF.Experimental.RDatasetSpec()\; .AddGroup(; (; ""samples"",; [""subTree1"", ""subTree2""],; [""PYspecTestFile5.root"", ""PYspecTestFile6.root""],; ); )\; .WithGlobalFriends(""anotherTree"", ""PYspecTestFile7.root"", ""friendTree""); ; return ROOT.RDataFrame(spec); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10965#issuecomment-1405382810:333,detect,detect,333,https://root.cern,https://github.com/root-project/root/issues/10965#issuecomment-1405382810,1,['detect'],['detect']
Safety,"Hello! I see that your dataset has bins with negative weights. That's not a good start.; ![plot](https://github.com/root-project/root/assets/6578603/f213df07-1c68-4453-9e6e-5f9cbb24787c); In newer ROOT versions, the Chi2 are more consistent with the likelihood fits. Meaning that if you have an extendible pdf, it will automatically do an extended fit (i.e., a Poisson term to constrain the number of predicted events is added). However, if you have weights this is not meaningful anymore. I guess you don't even want to do an extended fit in your case. You can explicitly pass `RooFit::Extended(false)` to get back the old behavior:; ```c++; using namespace RooFit;. TFile file{""test.root""};; auto workspace = file.Get<RooWorkspace>(""w_test"");. auto hist = static_cast<RooDataHist *>(workspace->data(""jpsi_ppbar_mass""));; auto x = workspace->var(""Jpsi_m_fitted"");; auto pdf = workspace->pdf(""model_Low"");. auto result = pdf->chi2FitTo(*hist, Save(), Extended(false));; result->Print();; ```. But your fit has also has a different problem (any status other than `MINIMIZE=0` means an error in Minuit). You use a [RooAddPdf](https://root.cern.ch/doc/master/classRooAddPdf.html) for the model. This class inherits from RooAbsPdf, and a pdf in RooFit is forced to be positive everywhere. Therefore, you can't fit the your data with the negative bin contents at all. You need to create a RooAbsReal-derived function, maybe a [RooRealSumFunc](https://root.cern.ch/doc/master/classRooRealSumFunc.html). Or maybe can you avoid the negative bin content all together? Where does it even come from, from subtracting a background? IN this case this is the wrong thing do do for statistical analysis. I would rather keep the background in the data and add a component to the model, maybe a fixed [RooHistPdf](https://root.cern.ch/doc/master/classRooHistPdf.html) for that part that exactly corresponds to the background estimation. I'll close this issue because it's not a bug in RooFit, or an improvement of feat",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15196#issuecomment-2105738221:401,predict,predicted,401,https://root.cern,https://github.com/root-project/root/issues/15196#issuecomment-2105738221,1,['predict'],['predicted']
Safety,"Here is full output from debugger:; ```; #0 0x00007ffff7a59fb1 in raise () from /lib64/libc.so.6; #1 0x00007ffff7a4355d in abort () from /lib64/libc.so.6; #2 0x00007ffff7a43431 in __assert_fail_base.cold () from /lib64/libc.so.6; #3 0x00007ffff7a52592 in __assert_fail () from /lib64/libc.so.6; #4 0x0000000000a94fee in llvm::isa_impl_cl<clang::EnumDecl, clang::NamedDecl const*>::doit (Val=0x0) at /home/linev/git/root6/interpreter/llvm/src/include/llvm/Support/Casting.h:106; #5 0x0000000000a94ec7 in llvm::isa_impl_wrap<clang::EnumDecl, clang::NamedDecl const*, clang::NamedDecl const*>::doit (Val=@0x7fffffff33c8: 0x0) at /home/linev/git/root6/interpreter/llvm/src/include/llvm/Support/Casting.h:133; #6 0x0000000000a94bca in llvm::isa_impl_wrap<clang::EnumDecl, clang::NamedDecl* const, clang::NamedDecl const*>::doit (Val=@0x7fffffff3408: 0x0) at /home/linev/git/root6/interpreter/llvm/src/include/llvm/Support/Casting.h:124; #7 0x0000000000a943f8 in llvm::isa<clang::EnumDecl, clang::NamedDecl*> (Val=@0x7fffffff3408: 0x0) at /home/linev/git/root6/interpreter/llvm/src/include/llvm/Support/Casting.h:144; #8 0x0000000000a94412 in llvm::cast<clang::EnumDecl, clang::NamedDecl> (Val=0x0) at /home/linev/git/root6/interpreter/llvm/src/include/llvm/Support/Casting.h:255; #9 0x00000000015fe2d8 in clang::Sema::ActOnTag (this=0x79158a0, S=0x7c467c0, TagSpec=16, TUK=clang::Sema::TUK_Definition, KWLoc=..., SS=..., Name=0x954d000, NameLoc=..., Attr=0x0, AS=clang::AS_none, ModulePrivateLoc=..., TemplateParameterLists=..., ; OwnedDecl=@0x7fffffff3f5f: false, IsDependent=@0x7fffffff3f5e: false, ScopedEnumKWLoc=..., ScopedEnumUsesClassTag=false, UnderlyingType=..., IsTypeSpecifier=false, IsTemplateParamOrArg=false, SkipBody=0x7fffffff3f60); at /home/linev/git/root6/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:13678; #10 0x000000000120b6d6 in clang::Parser::ParseEnumSpecifier (this=0x74b46c0, StartLoc=..., DS=..., TemplateInfo=..., AS=clang::AS_none, DSC=clang::Parser::DSC_top_level) ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5004#issuecomment-586370429:123,abort,abort,123,https://root.cern,https://github.com/root-project/root/pull/5004#issuecomment-586370429,1,['abort'],['abort']
Safety,"Here is the stack trace of the error. Now I just simply use type casting gSystem to TUnixSystem to get rid of defining DispatchTimers() in TSystem. . ```; [zhan0915@hcc-zhan root]$ root -l. A fatal system signal has occurred: segmentation violation error; Thread 1 (Thread 0x7f8b05aa0920 (LWP 10908)):; #0 0x0000003fa220e82d in read () from /lib64/libpthread.so.0; #1 0x00007f8b05fa3c64 in SignalSafeRead (fd=3, inbuf=inbuf; entry=0x7ffd70966680 ""\001"", timeout=timeout; entry=-1, len=1) at /home/bockelman/zhan0915/root/core/unix/src/TUnixSigHandling.cxx:195; #2 0x00007f8b05fa4435 in TUnixSigHandling::StackTraceTriggerThread () at /home/bockelman/zhan0915/root/core/unix/src/TUnixSigHandling.cxx:816; #3 0x00007f8b05fa450c in TUnixSigHandling::DispatchSignals (this=0x1534f70, sig=kSigSegmentationViolation) at /home/bockelman/zhan0915/root/core/unix/src/TUnixSigHandling.cxx:552; #4 <signal handler called>; #5 0x0000003fa1e811a1 in __strlen_sse2 () from /lib64/libc.so.6; #6 0x00007f8b0255f728 in length (__s=0x0) at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/char_traits.h:259; #7 assign (__s=0x0, this=0x7ffd70966c40) at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/basic_string.h:1131; #8 operator= (__s=0x0, this=0x7ffd70966c40) at /opt/rh/devtoolset-2/root/usr/include/c++/4.8.2/bits/basic_string.h:555; #9 TCling::TCling (this=0x1594620, name=<optimized out>, title=<optimized out>) at /home/bockelman/zhan0915/root/core/meta/src/TCling.cxx:1068; #10 0x00007f8b025602ae in CreateInterpreter (interpLibHandle=<optimized out>) at /home/bockelman/zhan0915/root/core/meta/src/TCling.cxx:578; #11 0x00007f8b05e2daa8 in TROOT::InitInterpreter (this=0x7f8b062a5520 <ROOT::Internal::GetROOT1()::alloc>) at /home/bockelman/zhan0915/root/core/base/src/TROOT.cxx:1821; #12 0x00007f8b05e2de26 in ROOT::Internal::GetROOT2 () at /home/bockelman/zhan0915/root/core/base/src/TROOT.cxx:363; #13 0x00007f8b05f03845 in TApplication::TApplication (this=0x1582e40, appClassName=0x401350 ""Rint""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/134#issuecomment-195488572:454,timeout,timeout,454,https://root.cern,https://github.com/root-project/root/pull/134#issuecomment-195488572,2,['timeout'],['timeout']
Safety,"Hey, good work! Given that it's in a (kind of internal) base class, it's probably not going to break much code. I don't have time to go through the implementation, but two answer for what you asked. > Two open questions are still:; > ; > * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable?. It's not so nice because you pile up more legacy things. If a flag disappears, schema evolution is actually quite easy: it's just not read, any more.; The more interesting question is how the information is passed up from a legacy RooNLLVar to the AbsOptTestStatistic.; I *think* it's quite easy to write a read rule that reads the bool, and then sets the flag in the base class. That would look something like; ```; #pragma read sourceClass=""RooNLLVar"" targetClass=""RooAbsTestStatistic"" version=""[1-4]"" source=""bool _oldBool"" target=""_newBool"" \; code=""{ _newBool = onfile._oldBool; }""; ```; You have to see which class versions had the bool, and insert this into `[1-4]` above. > * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used. Yes, acceptable 👍. If a member wasn't there before, it will just be default constructed. If you use an in-class initialiser, you don't have to do anything more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7616#issuecomment-805109161:287,redund,redundant,287,https://root.cern,https://github.com/root-project/root/pull/7616#issuecomment-805109161,1,['redund'],['redundant']
Safety,"Hi @Axel-Naumann , @couet . >Given these statistics . OK. Makes sense. . >you can always build your own ROOT. The idea is to make things work with what you build so the people who will use that event display will avoid building ROOT and related issues. Also, I do not build ""own"" ROOT since many years. See no reason to do that -- there are great binary packages in repositories and on the ROOT site. > If you provide a PR . Please see . #6684. > a test going with it would be also appreciated. Will to to add it. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713649459:213,avoid,avoid,213,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713649459,1,['avoid'],['avoid']
Safety,"Hi @Axel-Naumann ,. >IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. That is true. But does not help practically. It is better that a program (e.g. with complicated integration) fails with FPE in 30 minutes than ends successfully in a week and delivers a well-defined result '-NaN'. Or, even worse, produces a result that looks fine but is incorrect and then user (e.g. me) will spend some days to understand where the problem is. > as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions. As far as I understand, very formally clang did nothing wrong there, it is just GCC that tried to be a bit smarter -- in the code I've copied from TColor all the used constants should be in float and not in (standard) double. No FPE in this case. ; So one can blame the code, but because mixing floats and double constants is a common practice I would blame the compiler. . >is there something left to be clarified. Ok. As far as I understood, changing the flags for the release builds is not an option, right?; If so, would a patch that assures all constants in TColor::RGB2HLS are float an acceptable solution? I can do that. Best regards,; Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713589532:546,safe,safe,546,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713589532,1,['safe'],['safe']
Safety,"Hi @HannaOlvhammar and @guitargeek,. the things you discussed in the review are great, but I would recommend a few changes in commit messages in addition. Two examples:; `replaced loop -->`; ```; [RF] Modernise a loop in RooXXX; ```. Or:; ```; test; forgot to save parenthesis; ```; *Just an example, I'm not saying that it applies for this commit:*; ```; [RF] Improve type safety using static_range_cast. The previous loop was using C-style casts for all items. Now, static_cast; is employed for all elements. ; ```; or something like that. Make sure that your first sentence is short (about 80 characters) for git's short preview, include an empty line, and then discuss details (if necessary). Have a look into `git rebase -i` to beautify the commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10947#issuecomment-1181672850:374,safe,safety,374,https://root.cern,https://github.com/root-project/root/pull/10947#issuecomment-1181672850,1,['safe'],['safety']
Safety,"Hi @Neumann-A, thanks for the PR and sorry for the late reply!. Does that mean we should also remove this check (which is redundant with the `MSVC` check two lines before that)?; https://github.com/root-project/root/blob/master/builtins/zstd/cmake/AddZstdCompilationFlags.cmake#L43. If yes, maybe it can be changed in this PR too?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12705#issuecomment-1808257927:122,redund,redundant,122,https://root.cern,https://github.com/root-project/root/pull/12705#issuecomment-1808257927,1,['redund'],['redundant']
Safety,"Hi @ShamrockLee , specifying a binning for the histogram is often better than disabling multi-threading (which potentially implies a large performance decrease), but yes that also works :D . The fundamental problem here is the lack of a good multi-thread auto-binning algorithm that does not require synchronization between threads (which we want to avoid at all costs in order to scale well to large amounts of cores and large amounts of histograms produced).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-937759611:350,avoid,avoid,350,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-937759611,1,['avoid'],['avoid']
Safety,"Hi @ShirinGolpayeganiCern ,; RDataFrame should print errors and also exit with an error status for the case you describe, is that not the case for you?. I tried to reproduce the problem but I get a noisy error:. ```cpp; #include <ROOT/RDataFrame.hxx>. int main() {; {; ROOT::RDataFrame(10); .Define(""x"", [] { return 1; }); .Define(""y"", [] { return 1; }); .Snapshot(""t"", ""f1.root"");. ROOT::RDataFrame(10).Define(""x"", [] { return 1; }).Snapshot(""t"", ""f2.root"");. ROOT::RDataFrame(10); .Define(""x"", [] { return 1; }); .Define(""y"", [] { return 1; }); .Snapshot(""t"", ""f3.root"");; }. ROOT::EnableImplicitMT();; ROOT::RDataFrame df(""t"", {""f1.root"", ""f2.root"", ""f3.root""});; df.Snapshot(""t"", ""fmerged.root"");; }; ```. yields:. ```; ~/S/w/gh9366 rootcompile repro.cpp && ./repro; g++ -g -Wall -Wextra -Wpedantic -o ""repro"" ""repro.cpp"" $(root-config --cflags --libs); Error in <TTreeReaderValueBase::CreateProxy()>: The tree does not have a branch called y. You could check with TTree::Print() for available branches.; terminate called after throwing an instance of 'std::runtime_error'; what(): An error was encountered while processing the data. TTreeReader status code is: 6; fish: Job 1, './repro' terminated by signal SIGABRT (Abort); ```. As RDataFrame does not support processing disappearing/appearing branches (in Snapshots or any other method) everything seems to be working as expected here. I'd like to figure out why your colleagues don't see these error messages and the exception being thrown, but I would need help on your side to reproduce the issue. Cheers,; Enrico",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9366#issuecomment-1006422425:1222,Abort,Abort,1222,https://root.cern,https://github.com/root-project/root/issues/9366#issuecomment-1006422425,1,['Abort'],['Abort']
Safety,"Hi @VanyaBelyaev, thanks for posting about this!. As explained in [this PR](https://github.com/root-project/root/pull/11909/files) and later also dicussed in [this forum post](https://root-forum.cern.ch/t/retreiving-the-calculation-strategy-of-a-roonll/55715/2), saving test statistics objects to ROOT files like `RooNLLVar` is now prohibited since ROOT 6.28. It only technically seemed to work without error, but in fact the read-back RooNLLVars are corrupted and give wrong results when you read them back even for simple Gaussian cases, as I showed in the description of the linked PR. This and other reasons lead us to the decision to disallow the IO of `RooNLLVar` and other test statistics classes. From your warnings and error messages, it seems like you're trying to do IO of the RooNLLVar. Is there a way you can avoid this in your workflow? As I said it's not allowed anymore and in older ROOT versions it was not reliable. What people usually do is to save the pdf and the datasets in a RooWorkspace, and maybe a `ModelConfig` to simplify the NLL creation when reading back the data and pdf. Is that not an option for your?. Certainly I was not expecting that the removal of this accidental and buggy IO feature would cause some friction with some users, so I'm happy to help you finding an alternative and better solution!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13280#issuecomment-1644053557:822,avoid,avoid,822,https://root.cern,https://github.com/root-project/root/issues/13280#issuecomment-1644053557,2,['avoid'],['avoid']
Safety,"Hi @acampove, thanks for reporting this issue!. I have opened a to avoid the overly-verbose printout in the unbinned case:; https://github.com/root-project/root/pull/14309. However, I would refrain from implementing a progress bar, because this makes the output more difficult to digest when reading log files from e.g. grid jobs. So while I agree it would be nice for interactive use, it would do more harm that good in batch jobs. One could maybe hack something that detects the context in which RooFit is used, but these hacks are usually fragile and I would prefer not to do it. I'll close this issue after merging the PR with the log in the unbinned case. If you *really* want this progress bar, feel free to open a new issue about this, but I'm afraid I can't justify giving that one a high priority. Thanks for your understanding!; Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9489#issuecomment-1881439092:67,avoid,avoid,67,https://root.cern,https://github.com/root-project/root/issues/9489#issuecomment-1881439092,4,"['avoid', 'detect']","['avoid', 'detects']"
Safety,"Hi @bbockelm, @zzxuanyuan,; wouldn't the nested loop provide the same advantages you mention (waiting and move off the ""main"" thread)?; The advantage of not using directly TBB primitives is that we avoid the lock-in and become flexible enough to swap runtimes if/when needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/785#issuecomment-320844783:198,avoid,avoid,198,https://root.cern,https://github.com/root-project/root/pull/785#issuecomment-320844783,1,['avoid'],['avoid']
Safety,"Hi @bellenot ,. The patch fixes the crash in reproducer in #6483 . The reason of the crash is that in a batch mode the ListFonts() from TVirtualX is called. The current version of ListFonts() does not return 0 fonts (but it should!) and then the functions that try to deal with fonts crash everything.; Right now I cannot recall the exact call chain that leads to crash, but here are just some cases of undefined behaviour:; ```; char **TGFontPool::GetFontFamilies(); {; Int_t i, numNames;; char *family, *end, *p;. THashTable familyTable(100);; familyTable.SetOwner();. char **nameList;; char **dst;. // coverity[returned_null]; // coverity[dereference]; nameList = gVirtualX->ListFonts(""*"", 10000, numNames);. for (i = 0; i < numNames; i++) { <-- numNames is not initialized explicitly . ```. The second part of the fix is in the TGResourcePool.cxx . Basically the fix is for the case when no fonts were given back, i.e. just avoiding null pointer dereference. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6547#issuecomment-712806198:928,avoid,avoiding,928,https://root.cern,https://github.com/root-project/root/pull/6547#issuecomment-712806198,1,['avoid'],['avoiding']
Safety,"Hi @bluehood ,; just to double check: in order to enable full nested parallelism we need also to have task safe processing index assigning, right?; Because I am working on it. I will have an implementation soon :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/828#issuecomment-319726773:107,safe,safe,107,https://root.cern,https://github.com/root-project/root/pull/828#issuecomment-319726773,1,['safe'],['safe']
Safety,"Hi @ccarels, thanks for your contribution!. Unfortunately we have to reject it for the following reasons:. * This would change ROOT in a way that fundamental classes like `TGraph` are not forward compatible anymore (old versions of ROOT can't read a `TGraph` written with a newer version); * That TGraphs share data when copied is quite a drastic change that would surely disturb users; * There is already a way to change the data in a TGraph as pointed out by Axel in the previous comment; * If you want to avoid TGraph copies in your user code, please fix this on your end. That being said, feel free to implement the move constructor for TGraph and friends, if it is not already implemented (as suggested by @Axel-Naumann )! That could be useful to avoid copies, without breaking compatibility!. If you need any advice or have suggestions on how to optimize the ROOT code, please continue to engage with us on GitHub, or the [ROOT forum](https://root-forum.cern.ch/).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9610#issuecomment-1807127997:508,avoid,avoid,508,https://root.cern,https://github.com/root-project/root/pull/9610#issuecomment-1807127997,2,['avoid'],['avoid']
Safety,"Hi @couet , @lmoneta , @pcanal ,. here is a reproducer.; ```. #include <TCanvas.h>; #include <TBox.h>; #include <thread>; #include <vector>. TCanvas* C=nullptr;; void test_function(const int& id); {; C->cd(id);; TPad* p= new TPad();; p->Draw();; p->cd();; TBox *x = new TBox( );; for (int i=0; i<10; i++) p->ShowGuidelines(x, kButton1Down, 'l', true );; delete x;; delete p;; return;; }; int main(int argc, char **argv) {; C= new TCanvas(""C"",""C"",1024,768);; const int N=20;; C->Divide(1,N);; std::vector<std::thread> threads;; std::vector<int> ids;; for (int j=0; j<N; j++) ids.push_back(j+1);; for (size_t j=0; j<ids.size(); j++); threads.push_back(std::thread(test_function,ids[j]));; for (auto& th : threads) th.join();; threads.clear();; delete C;; return 0;; }; ```; I do. ```; g++ $(root-config --glibs --cflags ) -g pad9.cxx -o pad9.exe; ./pad9.exe; ````; and get; ```; *** Error in `./pad9.exe': double free or corruption (fasttop): 0x00007f125c001100 ***; *** Error in `./pad9.exe; *** Break *** segmentation violation; Aborted (core dumped); ```; if I comment line with ``p->ShowGuidelines`` everything is fine. ROOT 6.22.02/gcc 4.8.5/CentOS7 x64_64. Best regards,. Andrii. Sorry if there are more crashes.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6510#issuecomment-702865715:1029,Abort,Aborted,1029,https://root.cern,https://github.com/root-project/root/issues/6510#issuecomment-702865715,1,['Abort'],['Aborted']
Safety,"Hi @couet ,. > and see a crash. OK. That is kind of good. > I have no idea when you take it off . Just to avoid misunderstanding I describe what I did.; As TColor::RGB2HLS is just a static function I've just copy-pasted the code. ```; void FakeRGB2HLS(Float_t rr, Float_t gg, Float_t bb,; Float_t &hue, Float_t &light, Float_t &satur); {; Float_t rnorm, gnorm, bnorm, minval, maxval, msum, mdiff, r, g, b;; minval = maxval =0 ;; r = g = b = 0;; if (rr > 0) { r = rr; if (r > 1) r = 1; }; if (gg > 0) { g = gg; if (g > 1) g = 1; }; if (bb > 0) { b = bb; if (b > 1) b = 1; }. minval = r;; if (g < minval) minval = g;; if (b < minval) minval = b;; maxval = r;; if (g > maxval) maxval = g;; if (b > maxval) maxval = b;. rnorm = gnorm = bnorm = 0;; mdiff = maxval - minval;; msum = maxval + minval;; light = 0.5 * msum;; if (maxval != minval) {; rnorm = (maxval - r)/mdiff;; gnorm = (maxval - g)/mdiff;; bnorm = (maxval - b)/mdiff;; } else {; satur = hue = 0;; return;; }. if (light < 0.5); satur = mdiff/msum;; else; satur = mdiff/(2.0 - msum);. if (r == maxval); hue = 60.0 * (6.0 + bnorm - gnorm);; else if (g == maxval); hue = 60.0 * (2.0 + rnorm - bnorm);; else; hue = 60.0 * (4.0 + gnorm - rnorm);. if (hue > 360); hue = hue - 360;; }. ```. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6373#issuecomment-712719017:106,avoid,avoid,106,https://root.cern,https://github.com/root-project/root/issues/6373#issuecomment-712719017,1,['avoid'],['avoid']
Safety,"Hi @couet ,. Well, the classical method of protection is to chack the numbers before the unsafe operation is executed, i.e. Just before the difisions in Resize method. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6374#issuecomment-696579385:89,unsafe,unsafe,89,https://root.cern,https://github.com/root-project/root/issues/6374#issuecomment-696579385,1,['unsafe'],['unsafe']
Safety,"Hi @dpiparo, since there are no commit or PR descriptions: what was the reason to add this `spectrum` option? As far as I can see, it makes the build configuration more complicated with no tangible benefit, such as avoiding optional external dependencies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3935#issuecomment-1826753548:215,avoid,avoiding,215,https://root.cern,https://github.com/root-project/root/pull/3935#issuecomment-1826753548,1,['avoid'],['avoiding']
Safety,"Hi @dpiparo,. the problem is not the top-short-term fix, but the longer term. I started to see this behavior in summer and reported it to Axel, when I could not use the LCG views anymore to build dd4hep. Unfortunately Axel was highly busy since and I am glad you now take care!. However, now I also start seeing the behavior also in the LHCb-online nightly builds, because tests sometimes tend to fail, because images activated from python using pyROOT simetimes take several 100 seconds (I have set the timeout now to 300 seconds) to start up. This is not really good anymore given that the dictionaries for these apps are far from gigantic and starting (during the same test run) the same app using some kind of ini files does not at all suffer from this problem. Tell me if I should test using a private build with root master. Markus",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14223#issuecomment-1858306740:504,timeout,timeout,504,https://root.cern,https://github.com/root-project/root/issues/14223#issuecomment-1858306740,1,['timeout'],['timeout']
Safety,"Hi @edfink234, thanks for the PR and thanks to @hageboeck for reminding that these `test/rf*.cxx` files are redundant! The tutorials are already tested in unit tests in `stressRooFit`, so we don't need them again in `test`. These files are also badly out of sync, as the last non-trivial change to them was almost 10 years ago. I opened a follow-up PR with the deletion of these files:. https://github.com/root-project/root/pull/11361. This PR can hence be closed, and the translation of the tutorial will be followed up here: https://github.com/root-project/root/pull/9218",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8965#issuecomment-1246546761:108,redund,redundant,108,https://root.cern,https://github.com/root-project/root/pull/8965#issuecomment-1246546761,1,['redund'],['redundant']
Safety,"Hi @eguiraud ,. > Exact equality comparisons with floating-point values are usually discouraged. . I know and try to avoid that if possible. . > Can you tell whether that might be a problem? E.g. what if by some calculation the value is not an exact zero but it's 1e-6?. The problem typically arises when one tries to scale some objects in the pad, like setting object widths of font sizes to; ``scale=somenumber/width_of_gPad``. In the case if width_of_gPad is 0 that is FPE and a bad thing in any case.; But if the width by some miracle is 1e-6, then the value of `scale` could be big,; but demanding e.g. window width 100000 pixels is fine on the ROOT and the graphics system should deal with it, not ROOT. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6754#issuecomment-722348866:117,avoid,avoid,117,https://root.cern,https://github.com/root-project/root/pull/6754#issuecomment-722348866,1,['avoid'],['avoid']
Safety,"Hi @eguiraud and @hageboeck, thanks a lot for your reviews!. I implemented almost everything you requested in the new fixup commits, except for two things:. 1. https://github.com/root-project/root/pull/8769#issuecomment-891036930: I didn't generalize TRangeDynCast and TRangeStaticCast. They are tied to TCollection and fulfill a different purpose because of that. They are also part of `ROOT::Internal`, while my new functions are supposed to be also used by the RooFit users. I would suggest we leave them as they are, but if you think the new `static_range_cast` and `dynamic_range_cast` are useful for everyone we can move the new file if you want. But where?. 2. https://github.com/root-project/root/pull/8769#discussion_r680892053: I didn't add the `assert(dynamic_cast)` to the `static_range_cast` because the performance penalty it introduces in debug mode is not probably not expected by non-RooFit developers. 3. https://github.com/root-project/root/pull/8769#issuecomment-890998817: I stuck with the detection of `dynamic_cast` vs. `static_cast` at compile time to also support non-polymorphic types. Let me know where I still need to follow up, in particular concerning the more general location of the `RangeCast.h` file! Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8769#issuecomment-891126379:1011,detect,detection,1011,https://root.cern,https://github.com/root-project/root/pull/8769#issuecomment-891126379,1,['detect'],['detection']
Safety,"Hi @eguiraud, thanks for the review and the comments! I addressed almost all of them, except for the ones related to the destructors. There are three options we have for the overriding destructors, and there are arguments against all of them:. 1. Add `override` as suggested by `clang-tidy`, which you don't like because it appears redundant; 2. Adding nothing, but then removing the base class would break downsteam inheritance; 3. Adding `virtual`, but this implies that it's the first function in the override chain. Let me know what you want me to do! Personally, I'm for doing what clang-tidy wants :). Clang tidy suggests to add `override` to the constructor if it overrides a base class,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11285#issuecomment-1264412131:332,redund,redundant,332,https://root.cern,https://github.com/root-project/root/pull/11285#issuecomment-1264412131,1,['redund'],['redundant']
Safety,"Hi @ellert, thanks for updating this PR!. My preferred solution would be to detect in the build system if the machine in big endian, and only build/execute the NaN - packer test if this is not the case. Would this be possible? Then we don't need to hack into the ROOT test system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10303#issuecomment-1826757717:76,detect,detect,76,https://root.cern,https://github.com/root-project/root/pull/10303#issuecomment-1826757717,1,['detect'],['detect']
Safety,"Hi @etejedor,; > will be up to the DS to decide on the size of the portion of the source file that it reads each time and stores in memory?. TDataFrame is completely agnostic regarding file reading, entry chunking etc. The only thing TDF sees are the batches of entry ranges that `TDataSource::GetEntryRanges` returns -- one task is spawned for each of the range. So basically every decision in this regard is in the hands of `TDataSource`. > does this mean that after each of these reads there will be a synchronization barrier?. Yes. I didn't feel like implementing a one-producer-many-consumers thread-safe queue 😅 but it can always be done later if we want/need it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1219#issuecomment-338629908:605,safe,safe,605,https://root.cern,https://github.com/root-project/root/pull/1219#issuecomment-338629908,1,['safe'],['safe']
Safety,"Hi @ferdymercury,. at least for the first point (rebuilding without any change), you should try using Ninja via `cmake -G Ninja`. Makefiles are known inefficient to detect that no work has to be done - the `Built target [...]` lines don't actually do anything, it's the point where the build system detects that the target has already been built. With Ninja, a ""build"" takes only a split of a second if there's nothing to be done (even though I'd argue that's not really the important benchmark for a build system). For the second point, I think `core/base/src/TROOT.cxx` is so fundamental that it needs to rebuild `root.exe` and `rootcling` which in turn triggers rebuilding of a whole bunch of other things. Not sure if it would be possible to do something about this, cc @Axel-Naumann?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8624#issuecomment-878078031:165,detect,detect,165,https://root.cern,https://github.com/root-project/root/issues/8624#issuecomment-878078031,2,['detect'],"['detect', 'detects']"
Safety,"Hi @guitargeek , this pull request add the tutorials for the lagrangian morphing class and also; add an example for the factory interface. The are some accompanying fixes as listed below.; Please take a look and let me know if this looks good !. ## This Pull request:. - Add two tutorials `rf711_lagrangianmorph` and `rf712_lagrangianmorphfit` to demonstrate ; the usage of the `RooLagrangianMorphFunc` class; - The PR also includes an update to `rf512_wsfactory_oper` showing an example for the new; options of `taylorexpand` and `lagrangianmorph`; ; ## Changes or fixes:; - formatting of `tutorials/roofit/rf710_roopoly.py`; - The attribute for new physics couplings in the `RooLagrangianMorphFunc` class is changed ; from `NP` to `NewPhysics` to avoid confusion with other abbreviations; - The `lagrangianmorph` factory interface is update to accept arguments in any order. ## Checklist:. - [ ] tested changes locally. Cheers,; Rahul",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9665:749,avoid,avoid,749,https://root.cern,https://github.com/root-project/root/pull/9665,1,['avoid'],['avoid']
Safety,"Hi @guitargeek, I think this is probably how you intended it. I've reverted the earlier commit and made a new one with your suggestion but feel free to squash them into a single commit when merging, there are not that many changes in this PR anyway. I've mostly avoided touching GetName as the current implementation is probably already pretty similar to how it works in the rest of RooFit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10043#issuecomment-1059063969:262,avoid,avoided,262,https://root.cern,https://github.com/root-project/root/pull/10043#issuecomment-1059063969,1,['avoid'],['avoided']
Safety,"Hi @guitargeek, yeah that does sound like a good idea. The reason why I kept the GetName() just as the class name for now is that I wanted to avoid building the full name as a char* to not have to deal with messy c-string concatenation in a very simple function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10043#issuecomment-1058334840:142,avoid,avoid,142,https://root.cern,https://github.com/root-project/root/pull/10043#issuecomment-1058334840,2,['avoid'],['avoid']
Safety,"Hi @hageboeck and @manolismih, thanks for you comments! Sorry for the late answer, it took me some time to come up with a better solution. Making the `RooAbsOptTestStatistic` aware of the batchmode is the biggest challenge in this PR, as you have noticed.; Like Stephan suggested, I have tried no to pass as much information as possible in the constructors to hopefully avoid some of the new member variables I introduced here. In part I have succeeded, because now the cache optimization will now always be skipped in the construction in batch mode is enabled. So I don't need a `_originallyCacheOptimized` flag to remember if the optimization has to be reverted after the construction which was not the nicest hack anyway. Still, I could not do without a new `_batchMode` flag in `RooAbsTestStatistic` because the cache optimization can also happen after the construction via `RooAbsTestStatistic::constOptimizeTestStatistic`. Adding a batch mode flag to the constructor also required me to change all the constructor signatures of `RooAbsTestStatistic` and derived classes. I took that opportunity to revisit how the configuration parameters are passed such that if the future it will be much easier to add a new parameter. This has been a significant refactor, so I made a new PR with these changes excluding the `RunContextTracker` which we could introduce in a second step:. https://github.com/root-project/root/pull/7616",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7344#issuecomment-802953807:370,avoid,avoid,370,https://root.cern,https://github.com/root-project/root/pull/7344#issuecomment-802953807,1,['avoid'],['avoid']
Safety,"Hi @hageboeck, thank you very much for taking the time to write up what's going on with the (non-)type-safety in RooFit! This will be a helpful reference and I see that it was naive to think I could assume that ""if it compiles it is correct"". I will migrate the relevant proxies to this PR when I have time to do that. Until then I put this PR in WIP.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7325#issuecomment-789241784:103,safe,safety,103,https://root.cern,https://github.com/root-project/root/pull/7325#issuecomment-789241784,1,['safe'],['safety']
Safety,"Hi @hageboeck, thanks a lot for the quick fix! About your naming problem:. > I'm not happy with the naming. The folder is `core/test_support`, the library `ROOT::ROOTTestSupport`, but the namespace and the header are historically named `ROOTUnitTestSupport`. Which one?. This would be my reasoning:; 0) Assuming that no user uses the test support library, only us in `root-project` repos so we can do namespace changes ; 1) Looking at the the other libraries in `core`, the folder names are all concatenated without any delimiter (`rootcling_stage` is the only exception).; 2) Historical names are not important anymore (at least for the git history) because the files are move anyway.; 3) If you propose to name the library `ROOT::ROOTTestSupport`, is `ROOT` not redundant?. So I would go for folder `core/testsupport`, both library and namespace `ROOT::TestSupport`, and the header file moves from `ROOTUnitTestSupport.h` to `inc/ROOT/TestSupport.hxx`. This would follow the example set by [`core/foundation`](https://github.com/root-project/root/tree/master/core/foundation), which I consider as a modern ROOT library where everything is done correctly.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9528#issuecomment-1009850853:764,redund,redundant,764,https://root.cern,https://github.com/root-project/root/pull/9528#issuecomment-1009850853,1,['redund'],['redundant']
Safety,"Hi @jblomer, the new test `RNTuple.SmallClusters` seems a bit flaky, sometimes [running into timeouts](https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac13arm,SPEC=cxx17,V=master/3502/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_extended/), sometimes [throwing exceptions](https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=mac13arm,SPEC=cxx17,V=master/3500/testReport/junit/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_extended/) (both `mac13arm`), and one time [crashing on Linux](https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=ROOT-ubuntu2004,SPEC=cxx17,V=master/3501/testReport/junit/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_extended/) (how does it get to `llvm::LazyMachineBlockFrequencyInfoPass::ID()` though?). An address-sanitized build doesn't show anything when executing the test, any idea where we could start looking?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12665#issuecomment-1549144907:93,timeout,timeouts,93,https://root.cern,https://github.com/root-project/root/pull/12665#issuecomment-1549144907,1,['timeout'],['timeouts']
Safety,"Hi @juanfe , thanks for addressing the comments. Would you remove the merge commits from the PR? We try to avoid those in our code base.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1364#issuecomment-347210847:107,avoid,avoid,107,https://root.cern,https://github.com/root-project/root/pull/1364#issuecomment-347210847,1,['avoid'],['avoid']
Safety,"Hi @kholoimov thanks for the update! I have appended some small improvements, now it's ready to merge:; * add you to the list of contributors; * remove the output file with the TGraph and the fit result, since this is redundant with the Plot and the printout of the fit result. The point of the tutorial is not to show how to save stuff in a ROOT file.; * Code format; * take the `import ROOT` out of this try-catch block",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16323#issuecomment-2322932825:218,redund,redundant,218,https://root.cern,https://github.com/root-project/root/pull/16323#issuecomment-2322932825,1,['redund'],['redundant']
Safety,"Hi @linev, this seems to have broken a number of tests in the new CI, see also [this summary page](https://github.com/root-project/root/runs/14569986255):; ```; Fail to detect supported browsers for image production; ```; Could you please have a look?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13097#issuecomment-1611003963:169,detect,detect,169,https://root.cern,https://github.com/root-project/root/pull/13097#issuecomment-1611003963,1,['detect'],['detect']
Safety,"Hi @lmoneta, I agree with you that these number literal names are confusing, but I'm afraid we can't get rid of this without risking to break user code. It was always the case that the `RooConstVar` created with `RooFit::RooConst` have their value directly as a name. If we would change that now, it could have unexpected consequences for user code.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10105#issuecomment-1066846918:125,risk,risking,125,https://root.cern,https://github.com/root-project/root/pull/10105#issuecomment-1066846918,1,['risk'],['risking']
Safety,"Hi @lmoneta, as for `TProfile` I'm not sure what would be the behavior when defining a default weight because there the redundancy happens in that particular member:. https://github.com/root-project/root/blob/d99446efa92485518cc13a3dba85176f83f2dccc/hist/hist/inc/TProfile.h#L100; https://github.com/root-project/root/blob/d99446efa92485518cc13a3dba85176f83f2dccc/hist/hist/inc/TProfile.h#L98. If default `w` is set to 1. Which method will be executed when calling `Fill(""3.14"",2.78)`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5010#issuecomment-590751585:120,redund,redundancy,120,https://root.cern,https://github.com/root-project/root/pull/5010#issuecomment-590751585,1,['redund'],['redundancy']
Safety,Hi @omazapa ! Can you fork also roottest? That will prevent build failure (timeout) on Windows. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6935#issuecomment-742619715:75,timeout,timeout,75,https://root.cern,https://github.com/root-project/root/pull/6935#issuecomment-742619715,1,['timeout'],['timeout']
Safety,"Hi @pcanal ,. 1). > I don't see why those would help. ... being replace by; ```; while (obj) ; if (obj) { use obj; }; ```. Oh. You are right. Shame on me. Then I have to find out why do I get these crashes in TCollection. . 2) But does that mean that essentially to break TList/TCollection one can just delete any element from it manually and there will be no way to iterate safely over them?. > What was the original problem that lead you to this reproducer?. The problems with the event display I debug for some time. I try to chop the problems into smaller pieces and it mostly works but not this time. > The right pattern is either: ... Yes, but I have to debug what is already written. Best regards,; Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6749#issuecomment-721369535:375,safe,safely,375,https://root.cern,https://github.com/root-project/root/pull/6749#issuecomment-721369535,1,['safe'],['safely']
Safety,"Hi @pcanal! I could not produce a simpler reproducer, but I noticed that we have also problematic workspaces that are about 6 times smaller (from the same repo linked above):; ```; auto f = TFile::Open(""toyws/WS-HGam-STXS_xs_toy.root"");; auto w = (RooWorkspace*)f->Get(""combWS"");; ```. With this one, I can reproduce the problem without messing around with the stack size limit. Also, your PR #10230 actually affects also this issue, but it does not resolve it. There is now a different crash with a different stack trace, that looks like there is interference of your changes with some `RooWorkspace::Streamer` hackery:; ```; #0 0x000015555276f34c in __pthread_kill_implementation () from /usr/lib/libc.so.6; #1 0x00001555527224b8 in raise () from /usr/lib/libc.so.6; #2 0x000015555270c534 in abort () from /usr/lib/libc.so.6; #3 0x000015555299e7ee in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #4 0x00001555529aac4c in __cxxabiv1::__terminate (handler=<optimized out>); at /usr/src/debug/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00001555529aacb9 in std::terminate () at /usr/src/debug/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00001555529aba77 in __cxxabiv1::__cxa_deleted_virtual () at /usr/src/debug/gcc/libstdc++-v3/libsupc++/pure.cc:57; #7 0x0000155553413509 in RooWorkspace::Streamer (this=0x55555698ea60, R__b=...); at /home/rembserj/spaces/master/root/src/root/roofit/roofitcore/src/RooWorkspace.cxx:2591; #8 0x0000155554e2df7e in TKey::ReadObj (this=0x555556757fc0) at /home/rembserj/spaces/master/root/src/root/io/io/src/TKey.cxx:834; #9 0x0000155554df25e0 in TDirectoryFile::Get (this=0x5555556e2510, namecycle=<optimized out>); at /home/rembserj/spaces/master/root/src/root/io/io/src/TDirectoryFile.cxx:975; #10 0x0000555555555235 in repro () at repro.C:25; #11 0x00005555555551d9 in main () at /tmp/root-compile/repro/main.cpp:4; ```. Fortunately, the stack trace is shorter now! Does this tell you anyth",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1087909663:794,abort,abort,794,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1087909663,2,['abort'],['abort']
Safety,"Hi @pcanal,. The input is a list of 133 files in the format root://x509up_u<userid>@xrootd.grid.surfsara.nl//pnfs/grid.sara.nl/data/lhcb/LHCb_USER/lhcb/user/v/username/2021_08/520789/520789382/x24mu__wmomsc_a.root. The limit is in the dCache storage system (xrootd.grid.surfsara.nl), not on the client side. This limit is there for a reason: it prevents the storage pools from being overloaded with transfers and crashing. When hadd tries to open all files at once, it tries to read more files concurrently than the limit per dCache storage pool allows. The first files are served, but the rest of the transfers are queued. This means, that they remain open but zero bytes are served, until some of the other transfers finish. But hadd never finishes those because it insists on reading from all files at the same time. So it gets stuck into a deadlock situation. If hadd would detect this situation (I'm getting data for some files but zero bytes for other files), it would make sense to stop reading all files concurrently, but instead continue reading from all files that it can, close those files, and then receive data for the other files. If hadd could do that, such a deadlock would be prevented, while performance would still be the maximum available. Cheers,; Onno",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11276#issuecomment-1240361937:878,detect,detect,878,https://root.cern,https://github.com/root-project/root/issues/11276#issuecomment-1240361937,1,['detect'],['detect']
Safety,Hi @sawenzel . I encountered a problem reproducing:; ```; $ lsb_release --all; LSB Version:	:core-4.1-amd64:core-4.1-noarch; Distributor ID:	CentOS; Description:	CentOS Linux release 7.9.2009 (Core) ; Release:	7.9.2009; Codename:	Core. $ /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231207-1 ; libgcc_s.so.1 must be installed for pthread_cancel to work; /cvmfs/alice.cern.ch/bin/alienv: line 291: 9641 Aborted (core dumped) tclsh > /dev/null 2>&1 <<EOF; EOF. init.c(556):ERROR:161: Cannot initialize TCL; test 0 = 1. $ /cvmfs/alice.cern.ch/bin/alienv printenv O2sim::v20231208-1; libgcc_s.so.1 must be installed for pthread_cancel to work; /cvmfs/alice.cern.ch/bin/alienv: line 291: 9795 Aborted (core dumped) tclsh > /dev/null 2>&1 <<EOF; EOF. init.c(556):ERROR:161: Cannot initialize TCL; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15579#issuecomment-2156490625:408,Abort,Aborted,408,https://root.cern,https://github.com/root-project/root/issues/15579#issuecomment-2156490625,2,['Abort'],['Aborted']
Safety,"Hi @sitongan ! Please fork also [roottest](https://github.com/root-project/roottest) to prevent timeout on the Windows build nodes, thanks!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7544#issuecomment-852444414:96,timeout,timeout,96,https://root.cern,https://github.com/root-project/root/pull/7544#issuecomment-852444414,1,['timeout'],['timeout']
Safety,"Hi @umbertozappi, thanks for testing! Is this a backport from `master`? We usually try to avoid commits that are on release branches only (except documentation and release notes). Also I think there were some more fix to Python 3.11 support in the mean time; if we want ROOT 6.24 to fully support Python 3.11, we will also need to backport them...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13974#issuecomment-1784790292:90,avoid,avoid,90,https://root.cern,https://github.com/root-project/root/pull/13974#issuecomment-1784790292,1,['avoid'],['avoid']
Safety,"Hi @vepadulano,. I think I have to disagree on all counts. The application that writes the data to a file may have it's own memory management policy and it should not be required for it to always use `SetOwner` on its data. Memory management in the reading application should be responsibility of the reading application, not writing one. . Your examples of `sqlite3` or Python files are misplaced, none of those is leaking memory like ROOT. Again, my point is that whatever Python extension does, it is not supposed to leak memory or require some special code to avoid memory leak. I do understand how Python garbage collection works but that has nothing to do with the memory leak in this case. And of course it is not always possible to migrate from `TObjArray` to vector, the files are already written and archived for posteriority, no one is going to update or replace those files.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11099#issuecomment-1205560901:564,avoid,avoid,564,https://root.cern,https://github.com/root-project/root/issues/11099#issuecomment-1205560901,1,['avoid'],['avoid']
Safety,"Hi @yamaguchi1024 @vgvassilev , I have a last comment. We provide in the ROOT type system an endpoint to check if the enum is available, `TEnum::GetEnum(const char*)`. It can be used as; ```; TEnum::GetEnum(""ROOT::Detail::VecOps::TAdoptAllocator<double>::EAllocType""); ```; I don't know if it can be used inside these utils but it would have an advantage wrt to the current solution, namely the ability to avoid lookups in case the enum is present in the type-system (selected by the user). This would avoid memory consumption in case of autoparsing being triggered.; The PR is a nice improvement, I am discussiong a *possible* performance improvement on top of it!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1715#issuecomment-371736535:406,avoid,avoid,406,https://root.cern,https://github.com/root-project/root/pull/1715#issuecomment-371736535,2,['avoid'],['avoid']
Safety,"Hi @ynikitenko, thanks for the request! There are several reasons for not supporting PyPy. PyROOT, which is building on top of cppyy, is very deeply connected to the CPython implementation of CPyCppyy. Just like the CPython version of cppyy, PyROOT consists of a Python module and a compiled CPython extension (`libROOTPythonization`). And you can't use CPython extensions in PyPy. So to support PyPy, we would have to rewrite [all this code](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/src), and work closely with the cppyy team to make sure it's PyPy implementation also provides the interfaces that PyROOT expects. That would be a *huge* amount of work with no usecase to justify it. And there are so many alternative of fast analysis frameworks that people are trying out right now: RDataFrame, NumPy, numba, awkward arrays, etc. And let's not forget that pypy has it's limitations! It only supports a restricted subset of Python, and it would require large efforts to port PyROOT to this. One final point: the future of PyPy development is not very clear. Right now, they don't support Python 3.11 yet, for example. Builds are only available for [Python 3.9 and Python 3.10](https://www.pypy.org/download_advanced.html). So investing in PyPy compatibility is also risky because of that. Imagine we would spend half a year trying to support it, and then PyPy would not be maintained anymore :(. I'll therefore close this issue as ""not planned"". tldr; the HEP community is gravitation towards other C++ native of jit-based Python packages to speed up analysis, and at this point investing in pypy is not worth it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8110#issuecomment-2148504771:1305,risk,risky,1305,https://root.cern,https://github.com/root-project/root/issues/8110#issuecomment-2148504771,2,['risk'],['risky']
Safety,"Hi @ywkao, following up on my last comment, what would be motivation for the backports? Are you using these older ROOT version in production and this is a crucial fix? Or you're using ROOT on your laptop and if would be easy to update to 6.34 risk-free? How we proceed depends also on that",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16773#issuecomment-2457457327:243,risk,risk-free,243,https://root.cern,https://github.com/root-project/root/pull/16773#issuecomment-2457457327,1,['risk'],['risk-free']
Safety,"Hi Andrei. It looks ok for me. Note that I did a spell check and found a typo on line 586. It is written ""avaoid"" instead of ""avoid"". May be you can add this little fix to this PR ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9393#issuecomment-988693425:126,avoid,avoid,126,https://root.cern,https://github.com/root-project/root/pull/9393#issuecomment-988693425,1,['avoid'],['avoid']
Safety,"Hi Arif, I will add comments soon, but the code still does not compile, please try to fix that in the mean time. Please make sure to test locally with both `veccore=ON` and `veccore=OFF` to avoid the long time it takes to run on all platforms here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236#issuecomment-400720614:190,avoid,avoid,190,https://root.cern,https://github.com/root-project/root/pull/2236#issuecomment-400720614,1,['avoid'],['avoid']
Safety,"Hi Enric, ; Thank you very much! ; Indeed it is a kind of problem; I rely on pickling in my project for two cases:. 1. implicitely, where I use the `parallel python`/`multiprocess`/`multiprocessing`/`pathos` to split the task into subtasks that can be executed in parallel in different processes or even on different nodes. Behind the scene such stuff relies on serialization/deserialization of objects via `pickle` or `dill`; 2. explicitely where I store my data into custom `shelve`-like database, that relies on serialization of objects via pickling. - for (1) I do not know if I can properly inject ""import ROOT"" into the code flow at all vital occurances. ; - for (2) of course I can pre-import `ROOT` for all manipulations with custom database, but it is rather unnatural solution. E.g. opening a (originally `ROOT`-blind) database I need to know that it contains some `ROOT`-objects, and in this case use `import ROOT` before accessing objects from the database. Currently I've added `import ROOT` just in the code of database, but it is not a perfect solution. It is acceptable as kind of a temporary patch, but if possible I'd like to avoid it in the long-term future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6552#issuecomment-709078495:1144,avoid,avoid,1144,https://root.cern,https://github.com/root-project/root/issues/6552#issuecomment-709078495,1,['avoid'],['avoid']
Safety,"Hi Guys,. * Added support to check if R interface is running in the thread of event loop, to avoid segfault in scientific linux running tests.; * Fixed some datatypes according to coding conventions. Cheers,; Omar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/446:93,avoid,avoid,93,https://root.cern,https://github.com/root-project/root/pull/446,1,['avoid'],['avoid']
Safety,"Hi Luca,. nice job. Some comments about aspects that need improving before merging, namely all of the following items with equal priority:; 1) Remove all variable names in Italian language; 2) The help of the individual switches for the command line is there to be helpful. Please take some time to write proper text there, for example avoiding contentless tautologies like ""inputFile is the input file""; 3) The script is missing a description to be prompted when the user requires help with the -h switch. This description does not need to be a long text but a short synopsis of the utility. Adding example invocations would greatly increase its usefulness.; 4) You do not need to parse the header. I saw you now have a dictionary for the class. The autoloating and autoparsing will kick in and provide the ROOT typesystem with the necessary info. The direct usage of RunSumpleAnalysis should be discarded in favour of an explicit instantiation of a TSimpleAnalysis object (ROOT cannot autoload based on free function names); 5) ""Invalid argument set"" shall be printed on stderr; 6) The script must be compatible python2 and python3, e.g. for what concerns the print function; 7) The deciding factor for invoking the constructor with only the configuration file or the separate arguments is the presence of the ""inputfile"". The rest of the checks are not useful. One should rather make very clear in the documentation of the switches that the priority is given to the config file and perhaps print in case both a config and other parameters are present a warning about the non-config parameters being ignored. Cheers,; Danilo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/236#issuecomment-245232939:336,avoid,avoiding,336,https://root.cern,https://github.com/root-project/root/pull/236#issuecomment-245232939,1,['avoid'],['avoiding']
Safety,"Hi Oksana, I think it's better to fix all at once in a single commit, and you probably have to tweak the temporary install location to avoid the test failure. Once that's fixed, it should be ok to merge. Please also check that `root -l -e '#include <Math/CladDerivator.h>'` works after ROOT has been installed, since the tests won't catch this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3337#issuecomment-458872716:135,avoid,avoid,135,https://root.cern,https://github.com/root-project/root/pull/3337#issuecomment-458872716,1,['avoid'],['avoid']
Safety,"Hi Oliver,. There is ""false-positive"" warning in CentOS (see our discussion before); It is about pointer arithmetic with `const char*`; I will change code in the future to avoid it. Regards,; Sergey",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/819#issuecomment-319592823:172,avoid,avoid,172,https://root.cern,https://github.com/root-project/root/pull/819#issuecomment-319592823,1,['avoid'],['avoid']
Safety,"Hi Patrick, thanks a lot for these excellent developments! I will start the Jenkins tests to see if the CI can build it. To successfully integrate these developments, we should split the changes up into smaller PRs, as discussed in the RooFit weekly meeting. We could, for example, chunk it like this:. 1. First PR with changes to `math` only (`mathcore` and `minuit2`). Please ensure that no commit in this PR doesn't touch both math packages at the same time if not necessary. As far as I understood, the changes to `mathcore` and `minuit2` factorize, and you can make a commit for `mathcore` and then one or more for `minuit2`.; 2. Second PR with the new `roofit` packages `multiprocess` and `roofitZMQ`, again with separate commits for the individual packages. I guess you'd have to exclude the multiprocessing test that depends on roofit at that point, though. In this PR, we can also discuss in more detail how to manage the zero MQ dependency.; 3. Third PR with the rest, integrating the new `multiprocess` and `roofit/ZMQ` packages into RooFit. Feel free to split it up further if you think that's better. Some general things to consider in the new PRs:. * It seems unfeasible to rewrite the commit history in this PR to something that factorizes as proposed above. I guess you need to create new commits from the diff that only affect single packages.; * Please avoid mixing code formatting changes with actual changes in the same commit.; * Even better, avoid code formatting changes altogether. We want to eventually use a well-defined clang-format style (specified in [this file](https://github.com/root-project/root/blob/master/.clang-format)), so changing the formatting in your PRs to something that is not compliant with the clang-format style is not meaningful.; * If your developments introduce new files (in particular the new `roofit` packages), please apply the ROOT clang-format style, so we don't have to touch these files again later just for the sake of reformatting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294#issuecomment-854587983:1371,avoid,avoid,1371,https://root.cern,https://github.com/root-project/root/pull/8294#issuecomment-854587983,2,['avoid'],['avoid']
Safety,"Hi Patrick, thanks for the explanation, things make more sense for me now! Interesting that you also experimented with making the full RooAbsMinimizer templated. I agree that making the RooAbsMinimizer a templated class is not the best solution, but I still think we can even avoid the templated constructor, making the code more clear and reducing compile time/binary size. You already have this nice `FcnMode` enum class which I think is great because enum class is typesafe while enum is not. Taking this enum, you could have a RooMinimizer constructor with the signature:; ```; RooMinimizer(RooAbsReal &function, FcnMode fcnMode);; ```; Then depending on `fcnMode`, you can create the correct function instance. You would not even have to check for the `logic_error`, because with the enum class is is ensured that the value is either `classic` or `gradient`. You would just need a little helper struct to make the `RooMinimizer::create()` function work, something to translate from the function class to the FcnMode:. ```C++; class RooMinimizer { ; ; ... ; private: ; ; template <typename MinimizerFcn ; struct GetFcnMode { ; static const FcnMode value = FcnMode::classic; ; }; ; ; ... ; ; } ; ; ; template<> ; struct RooMinimizer::GetFcnMode<RooGradMinimizerFcn> { ; static const FcnMode value = FcnMode::gradient; ; }; ; ; ; // static function ; template <typename MinimizerFcn> ; std::unique_ptr<RooMinimizer> RooMinimizer::create(RooAbsReal &function) { ; return std::make_unique<RooMinimizer>(function, GetFcnMode<MinimizerFcn>::value); ; } ; ```. Would this approach also work with your upcoming developments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596#issuecomment-879770741:276,avoid,avoid,276,https://root.cern,https://github.com/root-project/root/pull/8596#issuecomment-879770741,2,['avoid'],['avoid']
Safety,"Hi Philippe,; ; > it might be impossible to avoid synonyms that are semantically distincts ... a good example is two free standings (not attached to any directory) histograms that happens to have the same name in two distinct and independent part of the code (e.g. two CMSSW modules). Good point. I admit that did not really think to this case. > The other major problem is that it unnecessary tie (via that global mutex) all the 'parallel' histogram, this means that the overall scalability is inherently decreased. > Rather than a completely global state, wouldn't it make sense to have a wrapper object (for example TThreadedObject) be the holder of the lock and list for a single set of related histogram.; > This would both reduce contention and guarantees that the histograms are really related. I agree on this and TThreadedObject could be the place where to control this. The drawback is that we would then not have a solution outside TThreadedObject, i.e. we will have to find a way to force the use of TThreadedObject in MT cases. > A 3rd significant problem (but fixeable) is that the operation covered by the ReadWrite lock are not atomic (and/or trivial) and for the look of it could plausibly indirectly request the ROOT global lock and thus can lead to deadlocks (from some other code that hold the ROOT global locks and request the Write part of the ReadWrite lock). Not sure to understand, you mean FindObject?; I will have a closer look. > A 4th deficiency is that once activated for one histogram it seems to apply to all histogram. i.e. as far as can tell if you one parallel histograms and 10,000 single-thread histograms, filling the single-thread histogram still has to go through the multi-thread registration/mechanism. Ok, a solution 'per histogram' would also address this. Thanks for going deep into it,; Gerri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/902#issuecomment-325703398:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/902#issuecomment-325703398,1,['avoid'],['avoid']
Safety,"Hi ROOTers!. ### Description; When setting text color in TPaveText (via TAttText::SetTextColor()), text that is set to white displays as black. ### To Reproduce; I produced this unexpected behavior by running the PyROOT code below (Python3). I was _also_ able to reproduce the error by running the equivalent C++ code in the ROOT interactive prompt.; ```; import sys, ROOT as rt; def main(args):; c = rt.TCanvas('c','c',800,600); pave = rt.TPaveText(0.25,0.25,0.75,0.75,option='NDC'); pave.AddText('This line is in black.'); # pave.GetListOfLines().Last().SetTextColor(rt.kBlack) # redundant (black is default); pave.AddText('This line is in red.'); pave.GetListOfLines().Last().SetTextColor(rt.kRed); pave.AddText('This line is in white.'); pave.GetListOfLines().Last().SetTextColor(rt.kWhite); pave.Draw(); c.Draw(); c.SaveAs('color_pave.png'); return; if __name__ == '__main__':; main(sys.argv); ```. ### Output; [Here is what I see as output from the code above (color_pave.png).](https://drive.google.com/file/d/16rtJc1gQtYeifRwNi4ZjDEOvg0TTVqQa/view?usp=sharing). ### Setup; ROOT version: 6.22/02 (built from source); Operating system: macOS 10.14.6. ---------------------------------------------; Let me know if you have any questions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6593:582,redund,redundant,582,https://root.cern,https://github.com/root-project/root/issues/6593,1,['redund'],['redundant']
Safety,"Hi Ravi, ; Can you add MaxEpochs=50 or even less in the test to avoid the timeout. We should also understand why the test error continues to decrease. Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2441#issuecomment-411786515:64,avoid,avoid,64,https://root.cern,https://github.com/root-project/root/pull/2441#issuecomment-411786515,2,"['avoid', 'timeout']","['avoid', 'timeout']"
Safety,"Hi Simon,. >>>>>>>> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400460976298%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=YgqiD9GIPDhABbE6mxc9%2BtWy8Q8red4Pa6zme6lmNgs%3D&reserved=0>; How do I use curl to download on lxplus ?. regards,; Asoka. > On May 12, 2021, at 11:47 AM, Simon Liu ***@***.***> wrote:; > ; > Hi, Asoka; > ; > I'm not sure which exactly problem you are chasing for, as far as I can tell, there is no problem access webdav.lcg.triumf.ca from lxplus, and downloading files from there works fine.; > ; > thanks; > ; > Simon; > ; > On 5/12/2021 11:13 AM, Asoka De Silva wrote:; >> ah ... thanks, I missed that. So ping works from lxplus but I still cannot do a curl to ***@***.***; >> ; >> regards,; >> Asoka; >> ; >>> On May 12, 2021, at 11:11 AM, Di Qing ***@***.*** ***@***.***>> wrote:; >>> ; >>> Asoka,; >>> ; >>> There was a mistake in your ping command, did you see the 'ping' in the middle, so actually it was pinging host ping. ; >>> ; >>> Regards,; >>> ; >>> Di; >>> ; >>> On 2021-05-12 10:43 a.m., Asoka De Silva wrote:; >>>> hmm ... that was really unexpected for me for lxplus ...; >>>> ; >>>> ***@***.*** ~]$ ping -c 10 ping webdav.lcg.triumf.ca <http://webdav.lcg.triumf.ca/>; >>>> PING (137.138.28.175) 56(124) bytes of data.; >>>> ; >>>> --- ping statistics ---; >>>> 10 packets transmitted, 0 received, 100% packet loss, time 8999ms; >>>> ; >>>> ***@***.*** ~]$ ; >>>> ; >>>> Vitaliy, shouldn't we expect that to be accessible from lxplus ?; >>>> ; >>>> regards,; >>>> Asoka; >>>> ; >>>>> On May 12, 2021, at 10:37 AM, Di Qing ***@***.*** ***@***.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840018942:142,safe,safelinks,142,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840018942,1,['safe'],['safelinks']
Safety,"Hi Vincenzo,. So one thing I didn't mention is that in this case, we were also building Python 3.11, and it seems that the key is that it was being built with assertions enabled, unlike the default Fedora 38 python3 build. Whether or not the python3 assertion failing corresponds to a real problem, I can't say... . It seems that it's possible to reproduce the issue without building anything by using the F38-packaged `root` and `python3-debug`, and then running my reproducer with `python3-debug` (which has assertions enabled) rather than python3. . ```; $ cat test.py ; import ROOT. f= ROOT.TFile(""test.root"",""RECREATE""); $ python3 test.py # succeeds; $ python3-debug test.py #fails; python3-debug: /builddir/build/BUILD/Python-3.11.5/Objects/typeobject.c:1210: subtype_traverse: Assertion `type->tp_dictoffset' failed.; *** Break *** abort ; ....; ```. So it might be worth trying to run the CI tests with `python3-debug` rather than or in addition to `python3`? . Thanks,; -Cosmin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13694#issuecomment-1738701515:839,abort,abort,839,https://root.cern,https://github.com/root-project/root/issues/13694#issuecomment-1738701515,1,['abort'],['abort']
Safety,"Hi! I'm not sure if this is a good idea. The ROOT Fitter is not meant to be inherited from in C++, right? It has no virtual functions, and nowhere do we inherit from it. I'm worried that encouraging users to inherit from the Fitter like this will cause further complications, so maybe it's good that it doesn't work? What is the benefit of this?. If you think this is really necessary, maybe better add a comment to the destructor explaining why it needs to be `virtual` for PyROOT, because when reading the C++ code it's not clear why it should be there and there is the risk that future developers interpret it as an accidentally added keyword and remove it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12397#issuecomment-1448506389:572,risk,risk,572,https://root.cern,https://github.com/root-project/root/pull/12397#issuecomment-1448506389,2,['risk'],['risk']
Safety,"Hi! It seems ROOT picks up some outdated headers from `/opt/root/install/include/` during the build. This is a general problem that has nothing to do with RooFit, I have seen it several times happening in different contexts before. You can avoid this problem by un-installing ROOT from your system before you build the new ROOT version. Since this is a build-related issue, I have changed the issue title to reflect this and have assigned @bellenot. If uninstalling the existing ROOT release is not an acceptable solution for you for whatever reason, maybe @bellenot can comment more on what are the options.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13101#issuecomment-1608397904:240,avoid,avoid,240,https://root.cern,https://github.com/root-project/root/issues/13101#issuecomment-1608397904,1,['avoid'],['avoid']
Safety,"Hi! Nothing will happen to the old C++ code. The point of this PR is to have the possibility in C++ to use each command only one time. This is to make it consistent with the pyROOT interface, where the commands will be passed as keyword arguments that can't be repeated. I was just saying that after this PR, we could easily resolve ROOT-2784 by issuing a warning when any command argument is repeated, since now every command that can be repeated has also an aggregate alternative (`Link`, `Import`, and `Slice`). I guess we can even detect if the repeated command is one of these three commands and then suggest the `std::map` alternative in the warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8406#issuecomment-860531734:535,detect,detect,535,https://root.cern,https://github.com/root-project/root/pull/8406#issuecomment-860531734,1,['detect'],['detect']
Safety,"Hi! RooAddition and RooRealSumFunc are actually not that similar. The RooAddition only sums up its components, and the RooRealSumFunc first multiples each component with a coefficient. Hence, they need different data members and unifying the classes would bring us in schema evolution hell which is too risky in my opinion. However, it is safe to directly reuse the RooRealSumPdf implementation in RooAddition if the implementation for a given function is the same. This is proposed in #10851. I hope this is a satisfactory response to this issue for you!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7825#issuecomment-1170135408:303,risk,risky,303,https://root.cern,https://github.com/root-project/root/issues/7825#issuecomment-1170135408,2,"['risk', 'safe']","['risky', 'safe']"
Safety,"Hi! This problem is now fixed in `master`. There should be no spurious parameters anymore, and naming collisions are avoided by renaming all RooAbsArgs for each component with a prefix. The fix will make it to the next patch release, as tracked in this issue:; https://github.com/root-project/root/issues/11534",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10991#issuecomment-1291810851:117,avoid,avoided,117,https://root.cern,https://github.com/root-project/root/issues/10991#issuecomment-1291810851,1,['avoid'],['avoided']
Safety,"Hi, ; Do you need to have the changes in GetRandom in 6.22 ? ; These are more feature changes than bug fixes, so I will prefer avoiding the back port.; Anyway, yes this should be in case a separate PR to distinguish the two cases. ; Furthermore, if we back port the fix in TF1::Copy we should also back port this one too, ; https://github.com/root-project/root/pull/7274. If you have trouble doing this back port, I can do it. But please confirm, what exactly you need to be back ported in 6.22. Cheers ; Lorenzo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7193#issuecomment-787805073:127,avoid,avoiding,127,https://root.cern,https://github.com/root-project/root/pull/7193#issuecomment-787805073,1,['avoid'],['avoiding']
Safety,"Hi, ; Thank you for the fix. I do not have anymore that crash in gPrefixStack. ; Yes, I can reproduce those failures of the other tests running with multi-thread and openMP. This is most likely caused by non-thread safe implementations of the likelihood functions used for the fitting. It is something needing a fix, but it is outside of the scope of this PR. . I think we are ready to merge this one. Let me run the CI first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705#issuecomment-735713339:215,safe,safe,215,https://root.cern,https://github.com/root-project/root/pull/6705#issuecomment-735713339,1,['safe'],['safe']
Safety,"Hi, ; We could add this method, but we have already `TFormula::EvalPar` which has as default parameter a nullptr. I would then prefer avoiding adding this function. ; Any particular reason that you need it and you cannot use EvalPar ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9395#issuecomment-992229601:134,avoid,avoiding,134,https://root.cern,https://github.com/root-project/root/issues/9395#issuecomment-992229601,1,['avoid'],['avoiding']
Safety,"Hi, ; Yes, I think it will be good to have the build option for RooFit::MultiProcess there. I think since for the time being we need to patch ZeroMQ, if I have understood well, we need to have the built-in solution. We can then change later on. We need however to be sure we do not export ZeroMQ symbols to avoid conflict with other code that need to use another installed version of ZeroMQ.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385#issuecomment-870450052:307,avoid,avoid,307,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-870450052,1,['avoid'],['avoid']
Safety,"Hi, Asoka. I see, it's curl cmd usage then, -v means verbose but nothing else. You ; may want to add a method for further operation with authention files ; specified. Here is an example, check file existing. curl --verbose -I --head https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root. For your case, it's more like an authencation issue, this is curl SSL ; verification trick, error code 35, here is a way I figured out long time ; ago,specify cacert and capath to verify host. To download a file that needs redirection, use -L. curl --silent --show-error --cacert /tmp/x509up_u501  --connect-timeout 300 --max-time 3600 --capath /etc/grid-security/certificates --cert /tmp/x509up_u501 --key /tmp/x509up_u501 -L https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root  -o /tmp/ddddd-https. Hope it helps. Simon. On 5/12/2021 11:51 AM, Asoka De Silva wrote:; > Hi Simon,; >; >>>>>>>>> |curl -v ; >>>>>>>>> https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root ; >>>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422908647699%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=DKbH3DJgHqWR8O0YknLB85pID2Q2zwz0CqqB18vukA4%3D&reserved=0>|; >; > How do I use curl to download on lxplus ?; >; > regards,; > Asoka; >; >> On May 12, 2021, at 11:47 AM, Simon Liu ***@***.*** ; >> ***@***.***>> wrote:; >>; >> Hi, Asoka; >>; >> I'm not sure which exactly problem you are chasing for, as far as I ; >> can tell, there is no problem access webdav.lcg.triumf.ca ; >> <http://webdav.lcg.triumf.ca> from lxplus, and downloading files from ; >> there works fine.; >>; >>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840043080:641,timeout,timeout,641,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840043080,1,['timeout'],['timeout']
Safety,"Hi, I am running nightly tests of COOL which is built using PyROOT, and since the 10th September, one test is failing when using ROOT master branch on all the platforms we test (slc6 with gcc8 and centos7 with gcc8-10 and clang10).; I suspect one commit from Sep 9, 2020 to be responsible for this change of behaviour. Here is the error and backtrace:; ```; python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; *** Break *** abort; ===========================================================; There was a crash (#7 0x00007facdfe876c8 in SigHandler(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:407).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007facdeaa889e in waitpid () from /lib64/libc.so.6; #1 0x00007facdea3a4e9 in do_system () from /lib64/libc.so.6; #2 0x00007facdfe8b434 in TUnixSystem::Exec(char const*) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120; #3 0x00007facdfe8bc6a in TUnixSystem::StackTrace() () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411; #4 0x00007facdc599248 in (anonymous namespace)::do_trace(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00007facdc5992c1 in (anonymous namespace)::TExceptionHandlerImp::HandleException(int) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:195; #6 0x00007facdfe8f519 in TUnixSystem::DispatchSignals(ESignals) () at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:3644; #7 0x00007facdfe876c8 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6359:662,abort,abort,662,https://root.cern,https://github.com/root-project/root/issues/6359,1,['abort'],['abort']
Safety,"Hi, I cannot reproduce.; If I follow the instructions in the readme (below point 1 and 2 together) the example configures, builds and runs fine: perhaps I am missing something?. ```; cmake -B build -S . ; cmake --build build ; ./build/treeExample; ```; outputs; ```; -> cmake -B build -S .; -- The C compiler identification is AppleClang 15.0.0.15000040; -- The CXX compiler identification is AppleClang 15.0.0.15000040; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Vdt: /foo/bar/baz (found version ""0.4"") ; -- Configuring done (6.9s); -- Generating done (0.1s); -- Build files have been written to: /foo/bar/eggs/build/tutorials/tree/dictionary/build. -> cmake --build build ; [ 11%] Generating G__data2Tree.cxx, libdata2Tree_rdict.pcm, libdata2Tree.rootmap; [ 22%] Building CXX object CMakeFiles/data2TreeLib.dir/data2Tree.cxx.o; [ 33%] Building CXX object CMakeFiles/data2TreeLib.dir/G__data2Tree.cxx.o; [ 44%] Linking CXX shared library libdata2TreeLib.dylib; [ 44%] Built target data2TreeLib; [ 55%] Building CXX object CMakeFiles/treeExample.dir/main.cpp.o; [ 66%] Building CXX object CMakeFiles/treeExample.dir/writeTree.cxx.o; [ 77%] Building CXX object CMakeFiles/treeExample.dir/readTree.cxx.o; [ 88%] Building CXX object CMakeFiles/treeExample.dir/readTreeDF.cxx.o; [100%] Linking CXX executable treeExample; [100%] Built target treeExample. -> ./build/treeExample; Starting writeTree()...; ************************************************************",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14595#issuecomment-1929066837:424,Detect,Detecting,424,https://root.cern,https://github.com/root-project/root/issues/14595#issuecomment-1929066837,8,['Detect'],['Detecting']
Safety,"Hi, Philippe,. Just an update to the issue, ; after having upgraded the OS to Ubuntu 22.04 LTS, Root version 6.30.02. The compilation with ""-Wl, --no-as-needed -lNew"" works fine. . But problems still remain:; run the demo macro of TApplication, Error messages are as following,; ```; Fatal in <operator new>: with std::align_val_t is not implemented yet; aborting; #0 0x00007f7901aea3ea in __GI___wait4 (pid=10250, stat_loc=stat_loc; entry=0x7ffeb2a715a8, options=options; entry=0, usage=usage; entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30; #1 0x00007f7901aea3ab in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc; entry=0x7ffeb2a715a8, options=options; entry=0) at ./posix/waitpid.c:38; #2 0x00007f7901a50bdb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171; #3 0x00007f7902b13034 in TUnixSystem::StackTrace() () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #4 0x00007f79029d0702 in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #5 0x00007f7902a96fe9 in ErrorHandler () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #6 0x00007f7902a97b69 in Fatal(char const*, char const*, ...) () from /home/koala/ROOT/root_v6.30.02/lib/libCore.so; #7 0x00007f7902d5e6ed in operator new(unsigned long, std::align_val_t) () from /home/koala/ROOT/root_v6.30.02/lib/libNew.so; #8 0x00007f78ff1f5430 in std::pair<llvm::StringMapIterator<llvm::cl::Option*>, bool> llvm::StringMap<llvm::cl::Option*, llvm::MallocAllocator>::try_emplace<llvm::cl::Option*>(llvm::StringRef, llvm::cl::Option*&&) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #9 0x00007f78ff1f5b3d in (anonymous namespace)::CommandLineParser::addOption(llvm::cl::Option*, llvm::cl::SubCommand*) () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #10 0x00007f78ff1f6805 in llvm::cl::Option::addArgument() () from /home/koala/ROOT/root_v6.30.02/lib/libCling.so; #11 0x00007f78fb1ba304 in __static_initialization_and_destruction_0(int",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13511#issuecomment-1867607489:355,abort,aborting,355,https://root.cern,https://github.com/root-project/root/issues/13511#issuecomment-1867607489,1,['abort'],['aborting']
Safety,"Hi, thank you very much for reporting this!. It's indeed a bug that I will fix, but for the CMSSW side we can avoid the problem easily so you can proceed quickly with the update of the ROOT master branch. I have created a PR for that:. https://github.com/cms-sw/cmssw/pull/39867. Indeed, it appears I introduced a bug with recent developments where the overhead when using the `RooFit::Range()` argument blew up. But I suggest you remove this argument to begin with, because the range was the same that is used to define the `InvMass` variable to begin with. So in any case it's better for you to not use `Range()`, and then you also don't hit the code path that has the bug (and you will have less overhead once the bug is gone).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11637#issuecomment-1292750664:110,avoid,avoid,110,https://root.cern,https://github.com/root-project/root/issues/11637#issuecomment-1292750664,1,['avoid'],['avoid']
Safety,"Hi, thanks for reporting this!. It is indeed a bug that you can't read the 6.26 workspace in 6.28. The other way around is expected, with RooFit you can't read back a RooWorkspace with any ROOT version that is older that the version it was created with. When I run the reproducer in the debugger, I get this stack trace:; ```; Program received signal SIGABRT, Aborted.; 0x00007ffff4a9f26c in ?? () from /usr/lib/libc.so.6; (gdb) bt; #0 0x00007ffff4a9f26c in ?? () from /usr/lib/libc.so.6; #1 0x00007ffff4a4fa08 in raise () from /usr/lib/libc.so.6; #2 0x00007ffff4a38538 in abort () from /usr/lib/libc.so.6; #3 0x00007ffff4c9ca6f in __gnu_cxx::__verbose_terminate_handler () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #4 0x00007ffff4cb011c in __cxxabiv1::__terminate (handler=<optimized out>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #5 0x00007ffff4cb0189 in std::terminate () at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #6 0x00007ffff4cb03ed in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x7ffff4e6c0d0 <typeinfo for std::length_error>,; dest=0x7ffff4cc8580 <std::length_error::~length_error()>) at /usr/src/debug/gcc/gcc/libstdc++-v3/libsupc++/eh_throw.cc:98; #7 0x00007ffff4ca01ca in std::__throw_length_error (__s=__s@entry=0x7ffff79711aa ""basic_string::_M_replace_aux""); at /usr/src/debug/gcc/gcc/libstdc++-v3/src/c++11/functexcept.cc:82; #8 0x00007ffff76f2ae8 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_check_length (__s=<optimized out>,; __n2=<optimized out>, __n1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.h:403; #9 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace_aux (__c=<optimized out>, __n2=<optimized out>,; __n1=<optimized out>, __pos1=<optimized out>, this=<optimized out>) at /usr/include/c++/13.1.1/bits/basic_string.tcc:450; #10 std::__cxx11::basic_string<char, std::c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12967#issuecomment-1581261520:360,Abort,Aborted,360,https://root.cern,https://github.com/root-project/root/issues/12967#issuecomment-1581261520,3,"['Abort', 'abort']","['Aborted', 'abort']"
Safety,"Hi, thanks for reporting! The `RooRealProxy` move constructor makes no sense, that's why it is now explicitly deleted in ROOT master. I have opened a PR in CMSSW to avoid using these deleted function:. https://github.com/cms-sw/cmssw/pull/39066",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11188#issuecomment-1215194019:165,avoid,avoid,165,https://root.cern,https://github.com/root-project/root/issues/11188#issuecomment-1215194019,1,['avoid'],['avoid']
Safety,"Hi, thanks for the question!. The standard way of do this in ROOT is to use [TParameter](https://root.cern.ch/doc/v612/classTParameter.html) or an `std::` container, as also discussed here:; https://root-forum.cern.ch/t/writing-simple-variable-in-root-files/11094/5. For example:; ```C++; void write() {. TParameter<int> x1{""x1"", 5};; std::vector<int> x2{4};. std::unique_ptr<TFile> file{TFile::Open(""myfile.root"", ""RECREATE"")};. file->WriteObject(&x1, ""x1"");; file->WriteObject(&x2, ""x2"");; }; ```; Therefore, having this functionality is redundant as therefore it was removed. If you still need to use `RooInt` in your framework for backwards compatibility, please just copy-paste its source code into your framework. It's very simple:; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/inc/RooInt.h; * https://github.com/root-project/root/blob/v6-28-00-patches/roofit/roofitcore/src/RooInt.cxx; You can even remove the sorting interface if you don't need it. Are these possible ways forward? I would be very reluctant to bring this class back, because RooFit is for statistical analysis. Using its classes to store metadata in a ROOT file is really not the idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16380#issuecomment-2335109569:540,redund,redundant,540,https://root.cern,https://github.com/root-project/root/issues/16380#issuecomment-2335109569,2,['redund'],['redundant']
Safety,"Hi, this issue is causing us problems running differential cross-section measurements using RDataFrame. It is very common that you have events passing the detector level selection but not the truth level selection (often separate trees that you need to match). And I am not aware of any workaround directly from RDataFrame. We discussed a bit with @vepadulano and it would be ideal to provide a function that would allow users to check if a given friend event exists - this would allow the option for the users to filter on this and skip the problematic events.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7713#issuecomment-2219712851:155,detect,detector,155,https://root.cern,https://github.com/root-project/root/issues/7713#issuecomment-2219712851,1,['detect'],['detector']
Safety,"Hi, yes it is more of a design issue i guess. I would like to avoid organizing this into directories, because this would be handled in a custom object. Reading and writing from root functions without ambiguities. . Some of my programs are looking for TDirectory structures and some others for TKey. ; So I think this would be kind of a mess to distinguish in a proper way.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13352#issuecomment-1657945739:62,avoid,avoid,62,https://root.cern,https://github.com/root-project/root/issues/13352#issuecomment-1657945739,1,['avoid'],['avoid']
Safety,"Hi,. I have tested the method `TH1::Chisquare` and seems to calculate the Pearson Chi2 properly. ```; // File: test.cxx; // test TH1::Chisquare function. Pearson Chi2 is calculated as expected; // To run the script: root test.cxx; void test(); {. int nbins = 100;; double xmin =-5;; double xmax = 5;. TF1 * f = new TF1(""f"",""gausn"");; double nentries = 1000;; double binwidth = (xmax-xmin)/nbins;; f->SetParameters(nentries*binwidth,0.,1.);; f->SetRange(-10,10);. TH1D *h = new TH1D(""h"","""", nbins, xmin,xmax);; h->FillRandom(""f2"",nentries);; h->Draw();; f->Draw(""same"");. //-- Chi2 Pearson; double chi2_th1 = h->Chisquare( f , ""P"");. // note: below it is assumed that ""bin error"" = sqrt( f(""bin center"") ); double chi2_P = 0.;; for (int i = 1; i <= h->GetNbinsX(); i++) {; double v = f->Eval(h->GetBinCenter(i));; if (v) chi2_P += TMath::Sq(v - h->GetBinContent(i)) / TMath::Abs(v);; }; std::cout << ""hand calculated Pearson chi2 = "" << chi2_P << ""\n"";; std::cout << ""ROOT TH1::Chisquare chi2 = "" << chi2_th1 << ""\n"";. }; ```. Question: Should `ROOT::Fit::FitResult::Chi2` call `TH1::Chisquare` to avoid writing the same piece of code in two different places?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11143#issuecomment-1941799173:1097,avoid,avoid,1097,https://root.cern,https://github.com/root-project/root/issues/11143#issuecomment-1941799173,1,['avoid'],['avoid']
Safety,"Hi,. I need to install ROOT 6.16 in my laptop (macOS Monterey M1 chip), but it's becoming so difficult due to the installation of TBB, and it also cannot detect the arm architecture (so when I configure the cmake building, I get ```Targeting X86```). . Regarding the TBB issue, this is the output; ```cmake; -- TBB download command succeeded. See also /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-download-*.log; [ 0%] No update step for 'TBB'; [ 0%] No patch step for 'TBB'; [ 0%] No configure step for 'TBB'; [ 0%] Performing build step for 'TBB'; CMake Error at /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-build-RelWithDebInfo.cmake:49 (message):; Command failed: 2. 'make' 'compiler=clang' 'CXXFLAGS= -mno-rtm -isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX12.1.sdk' 'CPLUS=/Library/Developer/CommandLineTools/usr/bin/c++' 'CONLY=/Library/Developer/CommandLineTools/usr/bin/cc'. See also. /Users/apereiro/root-histfact-test/new_build/TBB-prefix/src/TBB-stamp/TBB-build-*.log; ```. I have been following [this](https://github.com/root-project/root/pull/6120/commits) pull request made by Axel and I made the same changes from the commits, but it's not sufficient to fix the whole problem. . Also I tried to configure with ```-Dbuiltin_tbb=OFF``` since I have the latest tbb from homebrew, but I get; ```cmake; -- Found TBB: /opt/homebrew; CMake Error at cmake/modules/SearchInstalledSoftware.cmake:1159 (if):; if given arguments:. ""VERSION_LESS"" ""2018""; ```. Can you point me to a solution, or propagate the patches you have been developing to older versions like this one?. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10370:154,detect,detect,154,https://root.cern,https://github.com/root-project/root/issues/10370,1,['detect'],['detect']
Safety,"Hi,. On Thursday 2015-09-03 10:56, xantares wrote:. > Forgive me but your objections do not seem rock-solid:; > - '""distutils.sysconfig"" is far from robust as claimed' : afaik it; > works very well from 2.6-2.7, 3.1,3.2, 3.3 to 3.4. sure, on Linux. Did you try all main platforms? (And do add at least p2.5,; as that for sure is still in use.). > - ""package as a whole gets split, which risks that one part gets updated; > whereas another doesn't"": how would that be possible for users ? a; > decent package manager should handle that well. A package manager can install wherever it wants and can make its own; adjustment (simply copy over the two files, or put symlinks); this will; affect users building from source. I don't worry about package managers,; only about the latter users. As to 'how': the common case mixing; installations (e.g. from packagers and building from source), versions; (different pythons), system upgrades (that wipe out site-packages), or; simply a user doing 'rm -rf' for only half the installation. Users are; very, very inventive in creating trouble. :P None of that if all of ROOT; is kept in a single directory. So the only upside there seems to be is removing of this teeny-weeny; inconvenience of having to setup PYTHONPATH if you install in /usr/local.; But A) most from-source builders don't do that, they use bin/thisroot.sh,; which sets up PYTHONPATH; and B) installing in /usr/local is not; recommended to begin with, b/c of the same problem with remnants. Debugging a setup problem is very time consuming and frustrating: the; error messages are spurious and only occur on the user's machine to which; I have no access. In sum, I see no upside to speak of, but do see enormous downsides. And; if you really believe otherwise: sign that blood contract. Best regards,. ## Wim. WLavrijsen@lbl.gov -- +1 (510) 486 6411 -- www.lavrijsen.net",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/73#issuecomment-137538771:387,risk,risks,387,https://root.cern,https://github.com/root-project/root/pull/73#issuecomment-137538771,1,['risk'],['risks']
Safety,"Hi,. Your code in JSROOT was not working. ; I add commit to JSROOT with proper implementation:. https://github.com/root-project/jsroot/commit/3fa5882ebb8aa17eaa704bcc7319a0dac4eb1258. I also used second variant of iteration mentioned in https://en.wikipedia.org/wiki/Mollweide_projection#cite_note-6; It avoids infinite values. . Also there are unnecessary scaling coefficients, which are vanishing at the end.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13212#issuecomment-1628499558:304,avoid,avoids,304,https://root.cern,https://github.com/root-project/root/pull/13212#issuecomment-1628499558,1,['avoid'],['avoids']
Safety,"Hi,; I double-checked the behavior of `TTree::Draw` and `TTreeReader` when reading ""misaligned"" friends in a number of situations: as `TTrees`/`TChains`, friends longer/shorter than the main tree, friends with/without a `TTreeIndex`. With the path at https://github.com/root-project/root/pull/7131, which avoids an infinite loop with `TTreeReader` + indexed friend tree, `TTreeReader` and `TTree::Draw` behave the same in all cases except the one reported here. This means e.g. that switching from using a `TTree` to using a `TChain` to read the same data can change the number of entries `TTreeReader` reads in case of a friend that's larger than the main `TTree`. The problematic logic is that of `TTree::LoadTree(entry)`, which does not return an error if `entry` is larger than the number of entries in the main tree as long as the friend tree has enough entries (again note that `TChain` behaves differently, ending the event loop as soon as the main tree entries are over, and `TTree/TChain::Draw` also behaves like that). In particular, these lines are what causes `TTree::LoadTree` to not return an error:. https://github.com/root-project/root/blob/8d616f45e399d3a918b6a78edf98aa54219eb5d2/tree/tree/src/TTree.cxx#L6447-L6452. <hr>. Now, should `TTree::LoadTree` behave differently, or should `TTreeReader::SetEntryBase` not rely (just) on the return value of `LoadTree` to decide whether the event loop is over?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6518#issuecomment-773505129:305,avoid,avoids,305,https://root.cern,https://github.com/root-project/root/issues/6518#issuecomment-773505129,1,['avoid'],['avoids']
Safety,"Hi,; Ok I went though your commits:. It seems that the default timeout for wget is 900s !!. Because pf this; $ wget https://root.cern.ch/files/dummy.txt; --2021-06-24 13:01:05-- https://root.cern.ch/files/dummy.txt; Resolving root.cern.ch (root.cern.ch)... 137.138.18.236, 2001:1458:201:ee::100:6; Connecting to root.cern.ch (root.cern.ch)|137.138.18.236|:443... connected. is bloody long time. I would recommend: ; $ wget --timeout=10 https://root.cern.ch/files/dummy.txt; --2021-06-24 13:04:20-- https://root.cern.ch/files/dummy.txt; Resolving root.cern.ch (root.cern.ch)... 137.138.18.236, 2001:1458:201:ee::100:6; Connecting to root.cern.ch (root.cern.ch)|137.138.18.236|:443... connected.; Unable to establish SSL connection. An echo like "" --Checking for internet connection"" would be befinical too. Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-867621925:63,timeout,timeout,63,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-867621925,2,['timeout'],['timeout']
Safety,"Hi,; One unit test in CMSSW is failing on `aarch64` ( https://github.com/cms-sw/cmssw/issues/31194 ) . We noticed that root is treating `char` as `unsigned` while root is build with `-fsigned-char` e.g. in root interactive shell we get this; 1. aarch64; ```; root [0] static_cast<int>(static_cast<char>(-1)); (int) 255; ``` . 2. amd64; ```; root [0] static_cast<int>(static_cast<char>(-1)); (int) -1; ```. https://github.com/cms-sw/cmsdist/blob/IB/CMSSW_11_2_X/master/root.spec#L40 is how we configure and build root for both amd64 and aarch64. . Is it a known issue? Any suggestion how to fix/avoid this. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6465:594,avoid,avoid,594,https://root.cern,https://github.com/root-project/root/issues/6465,1,['avoid'],['avoid']
Safety,"Hi,; still not working:; It detects a working connection: . t$ cmake -DCMAKE_INSALL_PREFIX=../root-inst-test ../root-check-internet-connection; -- The C compiler identification is GNU 8.3.1; -- The CXX compiler identification is GNU 8.3.1; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.27.0""); -- Checking internet connectivity...; -- Yes. I'm trying this manually:. $ wget --timeout=10 https://root.cern.ch/files/dummy.txt; --2021-06-24 13:20:37-- https://root.cern.ch/files/dummy.txt; Resolving root.cern.ch (root.cern.ch)... 137.138.18.236, 2001:1458:201:ee::100:6; Connecting to root.cern.ch (root.cern.ch)|137.138.18.236|:443... connected.; Unable to establish SSL connection.; ussapc@warlv0010/~$ echo $?; 4. man of wget says:; EXIT STATUS; Wget may return one of several error codes if it encounters problems. 0 No problems occurred.; 1 Generic error code.; 2 Parse error---for instance, when parsing command-line options, the .wgetrc or .netrc...; 3 File I/O error.; 4 Network failure.; 5 SSL verification failure.; 6 Username/password authentication failure.; 7 Protocol errors.; 8 Server issued an error response. I would recommend STATUS != 0 instead of STATUS=6. As you can see above name resolution is working, but the connection is blocked by the firewall. Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-867634208:28,detect,detects,28,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-867634208,10,"['Detect', 'detect', 'timeout']","['Detecting', 'detects', 'timeout']"
Safety,"Hi,; thank you very much, that you spend time on this!. I do not understand some things:; * In the Doc the packages that do need internet access are usually named - this does not seem to be correct; * Furthermore, all packages that need internet access should be turned off in installation by default - they are not; * I think it is a difference if a system is cut off from the internet by a firewall, or if a system has no network (maybe that's why cmake does not detect it properly?); * I do not understand why I have to make -Dsuchalognoption to make a simple basic installation. If you can't put out that packages from the default installation and if cmake can't detect that there is not valid connection and if you do not want to make an extra option please: write a chapter in the docs what you have to do in case you want to compile on a local system. Thanks; Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-864610580:465,detect,detect,465,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-864610580,4,['detect'],['detect']
Safety,"Highlights:; - Aliases to columns can be defined; - Aliases to column aliases can be defined; - Early detection of mistakes: non-existing column names, incoherent aliasing; - Support of aliased columns in actions and transformations, also jitted",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1048:102,detect,detection,102,https://root.cern,https://github.com/root-project/root/pull/1048,1,['detect'],['detection']
Safety,"HistFactory normally collects histograms automatically, but not if; `HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace` is used.; This commit fixes this defect, and adds sanity checks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3859:176,sanity check,sanity checks,176,https://root.cern,https://github.com/root-project/root/pull/3859,1,['sanity check'],['sanity checks']
Safety,"HistFactory normally collects histograms automatically, but not if; `HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace` is used.; This commit fixes this defect, and adds sanity checks. ROOT-10162. (cherry picked from commit 0f59f6b678ddbd95df0a1319eabbe4772b4b7541)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3899:176,sanity check,sanity checks,176,https://root.cern,https://github.com/root-project/root/pull/3899,1,['sanity check'],['sanity checks']
Safety,"Histo{1,2,3}D and Profile{1,2}D now return objects whose; fDirectory == nullptr, avoiding the possibility of double deletes; due to fDirectory being deleted before the TResultProxy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1772:81,avoid,avoiding,81,https://root.cern,https://github.com/root-project/root/pull/1772,1,['avoid'],['avoiding']
Safety,"Hm ok, actually it does also work with a custom built/installed from source version of the unreleased libzmq library, so that would be an option to avoid builtins in those situations. But I guess that's not something they will want to invest time in.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-981738425:148,avoid,avoid,148,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-981738425,1,['avoid'],['avoid']
Safety,"Hm, could it be that we don't release some memory? Just trying with a real world analysis and after a certain number of events I get a crash like this. ```; Processed 130000 entries; terminate called after throwing an instance of 'std::runtime_error'; what(): Error initializing io_uring: Invalid argument; ```. ```; #0 0x00007ffff51a1355 in raise () from /usr/lib/libc.so.6; #1 0x00007ffff518a853 in abort () from /usr/lib/libc.so.6; #2 0x00007ffff554586a in __gnu_cxx::__verbose_terminate_handler () at /build/gcc/src/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x00007ffff5551d8a in __cxxabiv1::__terminate (handler=<optimized out>) at /build/gcc/src/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #4 0x00007ffff5551df7 in std::terminate () at /build/gcc/src/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #5 0x00007ffff555209e in __cxxabiv1::__cxa_throw (obj=<optimized out>, tinfo=0x5555555a2800 <typeinfo for std::runtime_error@@GLIBCXX_3.4>, ; dest=0x7ffff5567fd0 <std::runtime_error::~runtime_error()>) at /build/gcc/src/gcc/libstdc++-v3/libsupc++/eh_throw.cc:95; #6 0x00007ffff75c4914 in ROOT::Internal::RIoUring::RIoUring() () from /home/jakob/Documents/CERN/ROOT/ntuple/install-git/lib/libRIO.so; #7 0x00007ffff75c3b01 in ROOT::Internal::RRawFileUnix::ReadVImpl(ROOT::Internal::RRawFile::RIOVec*, unsigned int) () from /home/jakob/Documents/CERN/ROOT/ntuple/install-git/lib/libRIO.so; #8 0x00007ffff75c21cb in ROOT::Internal::RRawFile::ReadV(ROOT::Internal::RRawFile::RIOVec*, unsigned int) () from /home/jakob/Documents/CERN/ROOT/ntuple/install-git/lib/libRIO.so; #9 0x00007ffff5853e72 in ROOT::Experimental::Detail::RPageSourceFile::LoadCluster(unsigned long, std::unordered_set<unsigned long, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<unsigned long> > const&) () from /home/jakob/Documents/CERN/ROOT/ntuple/install-git/lib/libROOTNTuple.so; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6162#issuecomment-678297228:401,abort,abort,401,https://root.cern,https://github.com/root-project/root/pull/6162#issuecomment-678297228,1,['abort'],['abort']
Safety,"Hm, the ""finding"" from ASan was #7968 aka Clad built without ASan and setting some memory that the sanitizer afterwards doesn't know about. Both tests, `gtest-math-mathcore-test-CladDerivatorTests` and `gtest-hist-hist-test-TFormulaGradientTests`, still fail in the same way as before, but ASan stays silent so it either can't detect the problem or there's none from the class of errors it checks. Back to the beginning...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7488#issuecomment-824883422:327,detect,detect,327,https://root.cern,https://github.com/root-project/root/pull/7488#issuecomment-824883422,1,['detect'],['detect']
Safety,"Hmm that's not good that you get a crash like this. The thing is that the `RooArgSet` and `RooArgList` created with the constructor where you pass multiple elements are non-owning collections, so they should never passed temporaries. It is also possible to have an owning RooArgList/Set, but in this case it would own all the elements and it would not cover the case where you pass a mix of temporaries and non-temporaries. A possible solution would be to have a mechanism that detects which arguments need to be owned and which not, but I think that would be too convoluted and not really necessary. However, we can easily change it such that you get a nice exception with useful information text if the RooArgSet/List constructor detects that one argument is a temporary. Does that sound like an acceptable solution to you?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8052#issuecomment-830025120:478,detect,detects,478,https://root.cern,https://github.com/root-project/root/issues/8052#issuecomment-830025120,2,['detect'],['detects']
Safety,"Hmm, strange that the build fails, but the error seems to be not connected to the PR:. > 22:53:26 < HTTP/1.1 401 Authorization Required; > 22:53:26 < Server: GitHub Babel 2.0; > 22:53:26 < Content-Type: text/plain; > 22:53:26 < Content-Length: 21; > 22:53:26 < WWW-Authenticate: Basic realm=""GitHub""; > 22:53:26 < X-Frame-Options: DENY; > 22:53:26 < X-GitHub-Request-Id: F8B0:30DD2:1EF7253:2E3CE06:5C79A9D6; > 22:53:26 < ; > 22:53:26 * Connection #0 to host github.com left intact; > 02:52:59 Cancelling nested steps due to timeout. A few seconds before a similar request succeded. I found this line a few lines before the fail:. > 22:53:26 > GET /Triple-S/roottest.git/info/refs?service=git-upload-pack HTTP/1.1. At this moment I had no fork of roottest, so this might be the reason the request failed. I just added a fork of roottest so hopefully this error will not occur again.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3452#issuecomment-468893912:524,timeout,timeout,524,https://root.cern,https://github.com/root-project/root/pull/3452#issuecomment-468893912,1,['timeout'],['timeout']
Safety,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```; [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20); project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED); [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/; -- The CXX compiler identification is GNU 11.3.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") ; -- Configuring done; -- Generating done; -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest; [bash][pcadp04]:buildtest >; ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14163#issuecomment-1840409089:523,Detect,Detecting,523,https://root.cern,https://github.com/root-project/root/issues/14163#issuecomment-1840409089,4,['Detect'],['Detecting']
Safety,"Hmm... Okay, so you use `ROOT_DIR`. I could reproduce the issue with that finally. Though still a bit differently from what you posted just now. ```; [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/; -- The CXX compiler identification is GNU 11.3.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; CMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY); Call Stack (most recent call first):; /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:594 (_FPHSA_FAILURE_MESSAGE); /mnt/hdd1/krasznaa/projects/root/install/cmake/modules/FindVdt.cmake:63 (find_package_handle_standard_args); /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package); /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:137 (find_dependency); CMakeLists.txt:5 (find_package). -- Configuring incomplete, errors occurred!; See also ""/mnt/hdd1/krasznaa/projects/root/buildtest/CMakeFiles/CMakeOutput.log"".; [bash][pcadp04]:buildtest >; ```. I.e. One should not use `<Foo>_DIR` normally, as that needs to point at the directory holding the CMake code. While `<Foo>_ROOT` is a much easier-to-use variable. I'll open a PR with the update, but I'm less and less convinced that the issue would be in ROOT at this point, and not in your build setup. :frowning:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14163#issuecomment-1840438213:311,Detect,Detecting,311,https://root.cern,https://github.com/root-project/root/issues/14163#issuecomment-1840438213,4,['Detect'],['Detecting']
Safety,"Hmmh, but then I'd need to stream path information with every REveText object, now only the font name is streamed. It is indeed a reasonable thing to check if the font files exist before object's json is sent over to the client --- but creating a font during the streaming traversal would be pushing it a bit. Is it possible to register custom prefixes and callbacks from REveManager (via RWebWindow) so they can be handled when requests come in? Like: http://server/sdf-fonts/. I went through the code a bit (but clearly do not have the full picture) ... one way would be to add THttpServer::fActiveLocations, where instead of replacement string one provides a lambda [](TString& prefix, TString& reminder, THttpRequest& req, THttpServer &srv) so one can then do appropriate lookup in the callback, potentially generating the font, and then calling srv->SendFile() (or sending back the default font, if the desired one can not be found/generated). I think this functionality could be useful for other cases in REve, where semi-static data needs to be provided. The font-generation code in REveText invokes TGL generator through the interpreter now, via gROOT->ProcessLine(), to avoid dependency of REve on RGL. Is this OK to do from a request handler thread or should cross-thread request to the main thread be made (and request told to try again in N seconds)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15812#issuecomment-2176441216:1179,avoid,avoid,1179,https://root.cern,https://github.com/root-project/root/pull/15812#issuecomment-2176441216,2,['avoid'],['avoid']
Safety,"Humm .. the files are ""Closed"" but not deleted .. the comment relevant comment from `TROOT.cxx:1086` is:; ```; // Now were done, clear the list but do not delete the objects as; // they have been moved to the list of closed objects and must be; // deleted from there in order to avoid a double delete from a; // use objects (on the interpreter stack).; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8767#issuecomment-890403157:279,avoid,avoid,279,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-890403157,2,['avoid'],['avoid']
Safety,"Humm ... I don't see why those would help. In all the case the pattern seems to be similar to:; ```; while (obj) ; { use obj; }; ```; being replace by; ```; while (obj) ; if (obj) { use obj; }; ```; where the if seems redundant with the while, what am I missing?. Note that:; ```; TList* L= new TList();; TH1F* H= new TH1F();; L->Add(H);; L->Dump();//OK; delete H;; L->Dump();//NPD; ```; If the TList is not registered (directly or indirectly) with the least of cleanup is (per C++ rules) undefined behavior seems the collection seems contains a reference to the collection. The right pattern is either:; ```; TList* L= new TList();; TH1F* H= new TH1F();; L->Add(H);; L->Dump();//OK; L->Remove(H);; delete H;; L->Dump();//NPD; ```; or ; ```; TList* L= new TList();; gROOT->GetListOfCleanups()->Add(L);; TH1F* H= new TH1F();; L->Add(H);; L->Dump();//OK; L->Remove(H);; delete H;; L->Dump();//NPD; ```. What was the original problem that lead you to this reproducer?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6749#issuecomment-721283103:218,redund,redundant,218,https://root.cern,https://github.com/root-project/root/pull/6749#issuecomment-721283103,1,['redund'],['redundant']
Safety,"Humm ... yes but this would not take care of the infinite recursion ... ; So, the PR is probably right .. never print the Stack Trace (nor call ::abort) during that signal handling.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5034#issuecomment-587559776:146,abort,abort,146,https://root.cern,https://github.com/root-project/root/pull/5034#issuecomment-587559776,1,['abort'],['abort']
Safety,"I _installed_ ROOT on Fedora 29 nodes to show the problem that roottest is picking it up instead of the ROOT being tested. > @amadio I am getting next errors:; > ; > -- TEST COMMAND --; > cd /mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray; > /usr/bin/timeout -s USR2 270s /usr/bin/root.exe -e '#define ClingWorkAroundMissingDynamicScope' -e '#define ClingWorkAroundUnnamedInclude' -e '#define ClingWorkAroundMissingSmartInclude' -e '#define ClingWorkAroundNoDotInclude' -e '#define ClingWorkAroundMissingAutoLoadingForTemplates' -e '#define ClingWorkAroundAutoParseUsingNamespace' -e '#define ClingWorkAroundTClassUpdateDouble32' -e '#define ClingWorkAroundAutoParseDeclaration' -e '#define ClingWorkAroundMissingUnloading' -e '#define ClingWorkAroundBrokenUnnamedReturn' -e '#define ClingWorkAroundUnnamedDetection2' -e 'gSystem->SetBuildDir(""/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"",true)' -e 'gSystem->AddDynamicPath(""/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"")' -e 'gROOT->SetMacroPath(""/mnt/build/workspace/root-pullrequests-build/roottest/root/io/stdarray"")' -e 'gInterpreter->AddIncludePath(""-I/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"")' -e 'gSystem->AddIncludePath(""-I/mnt/build/workspace/root-pullrequests-build/build/roottest/root/io/stdarray"")' -q -l -b /mnt/build/workspace/root-pullrequests-build/roottest/root/io/stdarray/aclicModelWrite.C+; > -- BEGIN TEST OUTPUT --; > /usr/bin/timeout: failed to run command /usr/bin/root.exe: No such file or directory; > ; > ===============================; > ; > I am confused, it is because you uninstalled root binaries at fedora node?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3940#issuecomment-502712700:280,timeout,timeout,280,https://root.cern,https://github.com/root-project/root/pull/3940#issuecomment-502712700,2,['timeout'],['timeout']
Safety,I aborted the build since this file is not involved in anything except help git create better shortlogs...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3141#issuecomment-445278257:2,abort,aborted,2,https://root.cern,https://github.com/root-project/root/pull/3141#issuecomment-445278257,1,['abort'],['aborted']
Safety,I aborted the built on ROOT-performance-centos7-multicore/default since the node is offline.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3259#issuecomment-456010159:2,abort,aborted,2,https://root.cern,https://github.com/root-project/root/pull/3259#issuecomment-456010159,1,['abort'],['aborted']
Safety,I aborted the fedora29 build due to machine huge backlog.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5613#issuecomment-631316716:2,abort,aborted,2,https://root.cern,https://github.com/root-project/root/pull/5613#issuecomment-631316716,1,['abort'],['aborted']
Safety,I aborted the two missing Jenkins jobs.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12105#issuecomment-1401756133:2,abort,aborted,2,https://root.cern,https://github.com/root-project/root/pull/12105#issuecomment-1401756133,1,['abort'],['aborted']
Safety,"I acknowledge this issue needs a detailed discussion within the ROOT team. Now, focussing on ATLAS Data Quality (Monitoring?), would fixing `TASImage::FromPad` put that part of the processing in a safe place? No need to say this would be only a mitigation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14156#issuecomment-1994152949:197,safe,safe,197,https://root.cern,https://github.com/root-project/root/issues/14156#issuecomment-1994152949,1,['safe'],['safe']
Safety,"I add ""QUIT"" and ""INTERRUPT"" commands.; Code with gROOT->ProcessLine() is removed.; But in the future we can not avoid usage of interpreter for execution of drawables methods.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/829#issuecomment-319935459:113,avoid,avoid,113,https://root.cern,https://github.com/root-project/root/pull/829#issuecomment-319935459,1,['avoid'],['avoid']
Safety,"I agree Philipe, thanks a lot for the suggestion. ; I did not know about this trick, is it documented somewhere ? ; Also the current situation when creating an Histogram is not thread safe overall, see for example code in ; TH1::Build; https://root.cern.ch/root/html606/TH1_8cxx_source.html#l00728. and a similar issues is in TGraph2D::GetHistogram(). Maybe worth opening a new Issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6493#issuecomment-700727741:184,safe,safe,184,https://root.cern,https://github.com/root-project/root/pull/6493#issuecomment-700727741,1,['safe'],['safe']
Safety,"I agree this would be a nice improvement, for example to detect network glitches, deadlocks and other kind of behaviours. I wonder if this is an issue for ROOT itself, given that we cannot really have control over cmake?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15144#issuecomment-2039330510:57,detect,detect,57,https://root.cern,https://github.com/root-project/root/issues/15144#issuecomment-2039330510,1,['detect'],['detect']
Safety,"I also have a general comment, . https://github.com/root-project/root/blob/5d2c835d1c707dbbb9d7f1a82425c0567d5527dd/tree/ntuple/v7/doc/specifications.md?plain=1#L341-L342. it's not yet clear what are the expectation around these strings, my hunch is at write-time they come from reflection, and at read-time ROOT's internal compiler will be used to restore the field to a known (maybe user-defined) C++ type. However, in principle all the logical layout of data and types are encoded without these strings, so my questions are:. 1. for non-ROOT reader, can these be safely ignored (e.g. instead of getting back a named data struct, you get an anonymous struct by ignoring the type name); 2. for non-ROOT writer, if these are left empty, can ROOT figure out based on primitive types and compositions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13779#issuecomment-1806758875:566,safe,safely,566,https://root.cern,https://github.com/root-project/root/pull/13779#issuecomment-1806758875,2,['safe'],['safely']
Safety,"I also missed it at the time. Sorry. . To avoid this, we should also add test of the backward compatibility (especially the reading of older file).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15874#issuecomment-2174017399:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/issues/15874#issuecomment-2174017399,1,['avoid'],['avoid']
Safety,I am a bit lost ... Do we understand the reason for the thread unsafety? What data is there a race condition on? [Note for example that gPad is thread-local and in-itself not a cause for problem (unless several threads have their gPad pointing to the same pad).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6511#issuecomment-701541304:63,unsafe,unsafety,63,https://root.cern,https://github.com/root-project/root/pull/6511#issuecomment-701541304,1,['unsafe'],['unsafety']
Safety,"I am a little concerned about the basic idea. If I understood correctly, there is a (unique) global registry where the histogram are identified based on their 'full path name' (beside the fact that GetNameForRanges seems both brittle and currently seems on first reading 'wrong'/'not-as-intended'). I see two major problems, one is that the 'full path name' may never be really unique i.e. it might be impossible to avoid synonyms that are semantically distincts ... a good example is two free standings (not attached to any directory) histograms that happens to have the same name in two distinct and independent part of the code (e.g. two CMSSW modules). The other major problem is that it unnecessary tie (via that global mutex) all the 'parallel' histogram, this means that the overall scalability is inherently decreased. Rather than a completely global state, wouldn't it make sense to have a wrapper object (for example TThreadedObject) be the holder of the lock and list for a single set of related histogram.; This would both reduce contention and guarantees that the histograms are really related. A 3rd significant problem (but fixeable) is that the operation covered by the ReadWrite lock are not atomic (and/or trivial) and for the look of it could plausibly indirectly request the ROOT global lock and thus can lead to deadlocks (from some other code that hold the ROOT global locks and request the Write part of the ReadWrite lock). A 4th deficiency is that once activated for one histogram it *seems* to apply to all histogram. i.e. as far as can tell if you one parallel histograms and 10,000 single-thread histograms, filling the single-thread histogram still has to go through the multi-thread registration/mechanism. And that remind me, that another challenge for the 'unique registry' solution is to understand its scalability where reaching 10 to 100 thousands histograms. Thanks,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/902#issuecomment-325689991:416,avoid,avoid,416,https://root.cern,https://github.com/root-project/root/pull/902#issuecomment-325689991,1,['avoid'],['avoid']
Safety,"I am back to this. I tried again this morning. In empty folder `/tmp/docbuild`. I do:; ```; cmake -B./ -S/Users/couet/git/couet-root/documentation/doxygen/ -DDOCU_INPUT=""./mainpage.md;../../core/base/;../../hist/hist"" -DDOCU_LOCATION=/tmp/docoutput -DDOCU_THREADS=8 -DDOCU_LOGFILE=/tmp/warnings.txt; ```; it gives:; ```; -- The C compiler identification is AppleClang 13.1.6.13160021; -- The CXX compiler identification is AppleClang 13.1.6.13160021; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Doxygen: /Users/couet/bin/doxygen (found version ""1.9.4 (a85850bf5b32843d6cde6b9a25b147c9a40bbc8a)"") found components: doxygen dot ; -- Found Python: /Applications/Xcode.app/Contents/Developer/Library/Frameworks/Python3.framework/Versions/3.8/bin/python3.8 (found version ""3.8.9"") found components: Interpreter ; -- Configuring done; -- Generating done; -- Build files have been written to: /tmp/docbuild. ```; then:; ```; make; ```; I get:; ```; Generating code for file core/base/src/TAttFill.cxx...; /bin/sh: line 1: 70249 Segmentation fault: 11 /Users/couet/bin/doxygen /tmp/docbuild/Doxyfile.dox; make[2]: *** [CMakeFiles/dox] Error 139; make[1]: *** [CMakeFiles/dox.dir/all] Error 2; make: *** [all] Error 2. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1080327954:454,Detect,Detecting,454,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1080327954,8,['Detect'],['Detecting']
Safety,"I am not sure how we can fix this issue. The cmake `ExternalProject_Add` is meant to operate on projects which are not changed in tree. There seems to be an option: BUILD_ALWAYS <bool> which says "" Enabling this option forces the build step to always be run. This can be the easiest way to robustly ensure that the external project's own build dependencies are evaluated rather than relying on the default success timestamp-based method. This option is not normally needed unless developers are expected to modify something the external project's build depends on in a way that is not detectable via the step target dependencies (e.g. SOURCE_DIR is used without a download method and developers might modify the sources in SOURCE_DIR)."". That would fix this problem but introduce another one -- clad would be rebuilt every time one types `make`. ROOT has good amount of uses of `ExternalProject_Add` and that kind of issue is not only specific to clad. . I think we have several options: a) close the bug and ignore that type of errors (which can waste dev debug time); b) add BUILD_ALWAYS and waste a lot of user/dev time; c) check if it is feasible to somehow track changes in the source code within the regular cmake (which probably has proven hard and people added the BUILD_ALWAYS option).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7977#issuecomment-931950718:585,detect,detectable,585,https://root.cern,https://github.com/root-project/root/issues/7977#issuecomment-931950718,1,['detect'],['detectable']
Safety,"I am not sure whether there is something actionable about the vector of pointers. The only improvement I can see is to have a cache alined allocator to avoid false sharing but when comparing to the rest, I am not sure this will be a serious advantage.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2708#issuecomment-425559341:152,avoid,avoid,152,https://root.cern,https://github.com/root-project/root/pull/2708#issuecomment-425559341,1,['avoid'],['avoid']
Safety,"I am trying to refactor the old code of ROOT I/O for compression but the even the simplest change has side effects across the code base so I would like to reach a consensus regarding how changes should be done. The changes of this PR are based on top of another PR https://github.com/root-project/root/pull/3947 for adding support for ZSTD so for our goal just focus on the following commits. ### Removed pointers and unsigned chars https://github.com/fylux/root/commit/155c405ba6beb21075f436a0380d1cb8378213c3; Most of the compression functions take pointers for values that should be constant, mainly the source and target size of the compression buffer.; Also there is a mess in the compression algorithms since consider the buffers as unsigned chars, and other as chars. The type does not matter since we are only working with bytes but we should use only one to avoid all the casting that we find across the code base. ## TODO; - Decide what type should be given for `tgtsize` and `srcsize`. The most suitable could be unsigned but perhaps in some section of the code a negative value is used to represent something.; - Instead of using `&irep` for returning information about the compressed size or possible errors better make that the function instead of being void is int so the return value would be `&irep`.; - ZLIB right now does not have separated files but it is embedded inside RZIP what is not desirable. It would be better to make it follow the same structure of LZ4 or LZMA.; - What is the current value of maintaining the legacy algorithm (from 1990) of ROOT compression? If it is maintained it would be nice to make it more readable and follow the same structure and naming as the rest of compression algorithm.; - [To be extended]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4037:867,avoid,avoid,867,https://root.cern,https://github.com/root-project/root/pull/4037,1,['avoid'],['avoid']
Safety,"I asked Timur about that. He told me that Cocca can be installed without OpenGl and a few ifdefs should make it. Indeed I just tried and found that in TGCocoa.mm, TGLIncludes.h should be under a ""opengl ifdef""... in that same file glFlush(); should be also. Then in CMakeFiles/GCocoa.dir/link.txt , -lRGlew should not be generated. ; So that mainly defining a new GL flag (or using an existing one) and changing the cmake procedure to avoid generating -lRGlew. May be @oshadura can help ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7160#issuecomment-779681459:435,avoid,avoid,435,https://root.cern,https://github.com/root-project/root/issues/7160#issuecomment-779681459,1,['avoid'],['avoid']
Safety,I avoid completely the complication since now we have again the capacity we need.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15005#issuecomment-2007129194:2,avoid,avoid,2,https://root.cern,https://github.com/root-project/root/pull/15005#issuecomment-2007129194,1,['avoid'],['avoid']
Safety,"I believe you need the ""clean build"" label here to avoid incremental builds tripping over the old pcms...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14495#issuecomment-1918869960:51,avoid,avoid,51,https://root.cern,https://github.com/root-project/root/pull/14495#issuecomment-1918869960,1,['avoid'],['avoid']
Safety,I cancelled the builds since the branch was already merged and Jenkins was failing on timeout to checkout.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1420#issuecomment-349335724:86,timeout,timeout,86,https://root.cern,https://github.com/root-project/root/pull/1420#issuecomment-349335724,1,['timeout'],['timeout']
Safety,"I cannot reproduce this :-/ I'm looking at ROOT just-before-the-llvm-upgrade (I do realize that you detected a perf regression also wrt to that - but let's focus on the llvm upgrade first) and ROOT right after, in a release-with-debug build, running; ```; time python3 ./tst100.py; ```; For user CPU time I get 2.60s for llvm9 and 2.69s for llvm13. So indeed it would be good to have flamegraphs from you - or anything like that (callgrind,...). @VanyaBelyaev could you update your sentence from the [first post](https://github.com/root-project/root/issues/11927#issue-1502617659). > but about of factor of 2 in performance comes from the of 2 of this difference that comes the Friday build. I guess I know what you mean but I'd like to make sure :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11927#issuecomment-1360985210:100,detect,detected,100,https://root.cern,https://github.com/root-project/root/issues/11927#issuecomment-1360985210,1,['detect'],['detected']
Safety,"I copied the recipe in your `To Reproduce` section:; ```; ubuntu@root-cmake-devel:~/git/root/builddir$ cmake -DCMAKE_PREFIX_PATH=~/temp/install -Dminimal=ON -Dbuiltin_xrootd=OFF -Dxrootd=ON -Dfail-on-missing=ON -Dbuiltin_nlohmannjson=ON -Dbuiltin_lzma=ON -Dbuiltin_xxhash=ON -Dbuiltin_zstd=ON -Dbuiltin_lz4=ON -Dbuiltin_afterimage=ON -Dbuiltin_gl2ps=ON -DCMAKE_VERBOSE_MAKEFILE=ON ../; -- The C compiler identification is GNU 9.4.0; -- The CXX compiler identification is GNU 9.4.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.25.1""); -- Detected ROOT_VERSION 6.29.01; -- Checking internet connectivity; -- Checking internet connectivity - found; -- Looking for Python; -- Found Python3: /usr/bin/python3.8 (found version ""3.8.10"") found components: Interpreter Development NumPy; -- Could NOT find Python2 (missing: Python2_NumPy_INCLUDE_DIRS NumPy) (found version ""2.7.18""); -- Found GCC. Major version 9, minor version 4; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 9.4.0; -- ROOT Processor: x86_64; -- ROOT Architectu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12631#issuecomment-1504751163:586,Detect,Detecting,586,https://root.cern,https://github.com/root-project/root/issues/12631#issuecomment-1504751163,8,['Detect'],['Detecting']
Safety,"I could verify that very difference in layout on linux and osx, I bet on Windows there will be a third configuration (data begin, allocator, vector size :) ). I wonder if maybe we can detect this (at build time?) and go through the fast path if possible without checking the platform name itself but just the vector layout...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1707#issuecomment-371305354:184,detect,detect,184,https://root.cern,https://github.com/root-project/root/pull/1707#issuecomment-371305354,1,['detect'],['detect']
Safety,"I did a fresh `git clone`:. ```; % git clone ssh://github.com/andriish/zevis.git. Cloning into 'zevis'...; remote: Enumerating objects: 880, done.; remote: Counting objects: 100% (880/880), done.; remote: Compressing objects: 100% (529/529), done.; remote: Total 880 (delta 344), reused 839 (delta 311), pack-reused 0; Receiving objects: 100% (880/880), 5.36 MiB | 8.56 MiB/s, done.; Resolving deltas: 100% (344/344), done. % mkdir zevis-build; % cd zevis-build; ; % cmake ../zevis; -- The CXX compiler identification is AppleClang 11.0.3.11030032; -- The C compiler identification is AppleClang 11.0.3.11030032; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; -- Check for working C compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Performing Test COMPILER_SUPPORTS_-O1; -- Performing Test COMPILER_SUPPORTS_-O1 - Success; -- Performing Test COMPILER_SUPPORTS_-pipe; -- Performing Test COMPILER_SUPPORTS_-pipe - Success; -- Performing Test COMPILER_SUPPORTS_-g; -- Performing Test COMPILER_SUPPORTS_-g - Success; -- Performing Test COMPILER_SUPPORTS_-Wall; -- Performing Test COMPILER_SUPPORTS_-Wall - Success; -- ROOT_FOUND: 1; -- ROOT_USE_FILE /Users/couet/git/couet-root-bin/ROOTUseFile.cmake; -- ROOT includes: /Users/couet/git/couet-root-bin/include; -- ROOT libraries: /Users/couet/git/c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-693277452:879,Detect,Detecting,879,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-693277452,4,['Detect'],['Detecting']
Safety,"I discovered 2 memory hoarding issues (which were seen from code paths that were not scaling as expected with the number of dlopen/dlclose cycles). However, the underlying problem is still present but is due glic itself. As seen in https://sourceware.org/git/?p=glibc.git;a=tree;f=stdlib;h=b5a85b12ee3a72ea2a6df2be8bea9d0eba38eeb5;hb=refs/heads/release/2.28/master in the files `cxa_atexit.c` and `cxa_finalize.c. When a library is loaded, the atexit functions (including global object destructors) are added to a global linked list `__exit_funcs` (see [cxa_atexit](https://sourceware.org/git/?p=glibc.git;a=blame;f=stdlib/cxa_atexit.c;h=6d65f7e615bd8e9b0bcdb4655945d7ddfc514f2b;hb=refs/heads/release/2.28/master) ). In `cxa_finalize.c` that list is looped over (see line [34+](https://sourceware.org/git?p=glibc.git;a=blame;f=stdlib/cxa_finalize.c;hb=c41041bc2f84eb8f44ff36c3d14e55944185e665#l34)). However, the `__exit_funcs` is never cleaned up (and apparently element are not reused at least in our case). The number of iterations in that loop increased with the number of dlopen/dlclose cycles square. (Indeed the output of callgrind (with `--dump-inst=yes`) confirms that this (and even worse the inner loop) exactly as `(N*(N-1)/2) N=number of dlopen/dlclose`. So the best we can do is to adjust the test length to fit within the timeout (the length is to increase the chances of multi-thread clash).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12863#issuecomment-1561881205:1337,timeout,timeout,1337,https://root.cern,https://github.com/root-project/root/pull/12863#issuecomment-1561881205,1,['timeout'],['timeout']
Safety,I discovered this by accident when working on [CbmRoot](https://git.cbm.gsi.de/computing/cbmroot). Basically I created a branch with the setup from the reproducer and was greeted with that error message. The base class in that case is pretty old code. I assume nobody ever bothered to update the link def and that's why the '+' was missing in the first place. However it took me some time to figure out that this was the problem and caused quite a bit of headache. That's why I wrote it would be nice if Root would abort with a better error message here. Becomes trivial to fix then.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10240#issuecomment-1082385261:515,abort,abort,515,https://root.cern,https://github.com/root-project/root/issues/10240#issuecomment-1082385261,1,['abort'],['abort']
Safety,"I don't get it, this branch is rebased on `v6-24-00-patches`. Why would it fail with:; ```; 11:04:06 -- Rebasing kgizdov-v6-24-00-patches-nonull-backport against v6-24-00-patches: [Executing COMMAND;C:/Program Files/Git/cmd/git.exe;-c;user.name=sftnight;-c;user.email=sftnight@cern.ch;rebase;-f;-v;v6-24-00-patches;kgizdov-v6-24-00-patches-nonull-backport;WORKING_DIRECTORY;C:/build/workspace/root-pullrequests-build/root;TIMEOUT;300]; 11:04:07 stdout: ; 11:04:07 stderr: ; 11:04:07 It seems that there is already a rebase-apply directory, and; 11:04:07 I wonder if you are in the middle of another rebase. If that is the; 11:04:07 case, please try; 11:04:07 	git rebase (--continue | --abort | --skip); 11:04:07 If that is not the case, please; 11:04:07 	rm -fr ""C:/build/workspace/root-pullrequests-build/root/.git/rebase-apply""; 11:04:07 and run me again. I am stopping in case you still have something; 11:04:07 valuable there.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9276#issuecomment-977678966:422,TIMEOUT,TIMEOUT,422,https://root.cern,https://github.com/root-project/root/pull/9276#issuecomment-977678966,2,"['TIMEOUT', 'abort']","['TIMEOUT', 'abort']"
Safety,I don't know what to do...I need to find a way to find in safe way to find python3 on windows for 6.20 release. (now we have two different implementations for 6.20 and master).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5513#issuecomment-621828336:58,safe,safe,58,https://root.cern,https://github.com/root-project/root/pull/5513#issuecomment-621828336,1,['safe'],['safe']
Safety,"I don't see why the same reasons of being more concise and ensuring exception safety should not apply in this case. And move assignment and move construction of unique pointers should be equally cheap, right?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10263#issuecomment-1081661704:78,safe,safety,78,https://root.cern,https://github.com/root-project/root/pull/10263#issuecomment-1081661704,1,['safe'],['safety']
Safety,I don't think so. I think a non-const version of the getters could be added safely and that would fix the problem. Something like:; ```cpp; const ModularFunctionMinimizer& Minimizer() const overload {return fMinimizer;}; ModularFunctionMinimizer& Minimizer() overload {return fMinimizer;}; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1677#issuecomment-385014688:76,safe,safely,76,https://root.cern,https://github.com/root-project/root/pull/1677#issuecomment-385014688,1,['safe'],['safely']
Safety,"I don't think that exists. Are you suggesting we collect everything from all these files - and what is their relative priority? Or if we don't collect everything, how do we detect which ""package"" the current process belongs to?. Another option is for a library to modify the combined `rootrc` entries, by means of `gEnv->GetValue()`, `gEnv->SetValue()`, e.g. during static initialization.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7031#issuecomment-801992253:173,detect,detect,173,https://root.cern,https://github.com/root-project/root/pull/7031#issuecomment-801992253,1,['detect'],['detect']
Safety,"I don't think that's relevant to the issue :-) I tried to avoid any type that might have been instantiated already somewhere else, and with `TParameter<char>` I was positive that's not the case. You could also try with `std::vector<TObject******>` - if that had an `enum` member :-)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10724#issuecomment-1151554354:58,avoid,avoid,58,https://root.cern,https://github.com/root-project/root/issues/10724#issuecomment-1151554354,1,['avoid'],['avoid']
Safety,"I don't understand your comment; I can reproduce this (as you predicted) with [your second reproducer](https://github.com/root-project/root/issues/10512#issuecomment-1115915798) which uses `std::vector<MyClass>`. In principle any `std::foo<MyClass>` member that needs some `std::bar<MyClass>` for its definition will suffer from this, when triggering autoparsing by instantiating `std::bar<MyClass>` on the prompt.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10512#issuecomment-1118482118:62,predict,predicted,62,https://root.cern,https://github.com/root-project/root/issues/10512#issuecomment-1118482118,1,['predict'],['predicted']
Safety,"I don't understand. Why do you need to source `/usr/local/bin/thisroot.fish`. Isn't the `gnuinstall=ON` option supposed to install ROOT in the system standard location and hence avoid the need of sourcing anything? (sorry if it's a stupid question, but I work on Windows...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8435#issuecomment-866784563:178,avoid,avoid,178,https://root.cern,https://github.com/root-project/root/issues/8435#issuecomment-866784563,1,['avoid'],['avoid']
Safety,"I faced the following problem when compiling ROOT from source,. > [ 73%] Performing download step (git clone) for 'clad'. however, I was offline, and the whole build process interrupted. I think that building from source assumes you have downloaded everything and you can safely compile in an isolated environment. At least it must be specified somewhere beforehand that one needs a connection or *those* modules. Does your commit fix that in future versions?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15416#issuecomment-2106187422:272,safe,safely,272,https://root.cern,https://github.com/root-project/root/pull/15416#issuecomment-2106187422,1,['safe'],['safely']
Safety,"I figured out the reason of my apparent 'instability' in results. Rather than a problem with the ROOT build, it was actually a variation in the way I generated/created the library needed to emulated the ATLAS libraries. The original 2 files contains respectively 1 and 2 ATLAS classes derived from the RooAbsPdf and because the objects of that type are added to a compiled list, they must be created properly (otherwise you get type detection errors .. in part because RooAbsPdf is an abstract class). In order to generate this library, I use TFile::MakeProject (which almost works, I have to add an implementation for the abstract functions by hand). Part of the this MakeProject is to generate a LinkDef file. Because the output of MakeProject should not depend on the ROOT version, I generated the libraries with an arbitrary version of ROOT (and did not pay attention which one at the time, but it was different on different machine and upon seeing the weird crash, I may have regenerated the project on the machine I was using at the time). The issue is that a particular commit (e8eb7875c73ea00bedf11c022a055d50ec5f081d, part of the new PR) change whether the dictionary was requested (in the LinkDef file) for the pair that was causing the problem (pair<string,RooArgSet>) ... and having an explicit dictionary for that pair works around the problem introduced by the first wave of pair related changes. . Now that this is clarified, I can confirm that https://github.com/root-project/root/pull/10230 is solving this problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10282#issuecomment-1089498573:433,detect,detection,433,https://root.cern,https://github.com/root-project/root/issues/10282#issuecomment-1089498573,1,['detect'],['detection']
Safety,"I found a solution. Not sure if the difference is that when releasing the mouse, in MacOS another 'button' is detected which already calls the Modified/Update sequence, in comparison to with Ubuntu.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9763#issuecomment-1027027547:110,detect,detected,110,https://root.cern,https://github.com/root-project/root/issues/9763#issuecomment-1027027547,1,['detect'],['detected']
Safety,"I found how to disable the sanitizer with `__declspec(no_sanitize_address),` but it doesn't prevent `heap-use-after-free` at run-time. So my solution (hack) for the time being is the following:; ```; diff --git a/core/base/src/TObject.cxx b/core/base/src/TObject.cxx; index 1fdabcc2fd..c5358d1f21 100644; --- a/core/base/src/TObject.cxx; +++ b/core/base/src/TObject.cxx; @@ -117,11 +127,15 @@ bool DeleteChangesMemoryImpl(); // can guess this is always the case and we can rely on the changes to fBits made; // by ~TObject to detect use-after-delete error (and print a message rather than; // stop the program with a segmentation fault); +#ifndef __SANITIZE_ADDRESS__; if ( *o_fbits != 0x01000000 ) {; // operator delete tainted the memory, we can not rely on TestBit(kNotDeleted); return true;; }; return false;; +#else; + return true;; +#endif; }; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445#issuecomment-2378694443:526,detect,detect,526,https://root.cern,https://github.com/root-project/root/issues/9445#issuecomment-2378694443,1,['detect'],['detect']
Safety,"I guess there is an issue with the environment for COOL, I will look into it.; For now you can just add these 2 lines ; ```; . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Mon/x86_64-centos7-gcc8-dbg/setup.sh; export LD_LIBRARY_PATH=/cvmfs/sft-nightlies.cern.ch/lcg/latest/CORAL/master-ebc50/x86_64-centos7-gcc8-dbg/lib/:$LD_LIBRARY_PATH; export ROOT_INCLUDE_PATH=/cvmfs/sft-nightlies.cern.ch/lcg/latest/CORAL/master-ebc50/x86_64-centos7-gcc8-dbg/include:$ROOT_INCLUDE_PATH; python -c 'from PyCool import cool; cool.FieldSelection'; ```; And the result is:; ```; python: /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::UsingDecl; From = clang::Decl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; *** Break *** abort. ===========================================================; There was a crash (kSigAbort).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007f7ce8f8446c in waitpid () from /lib64/libc.so.6; #1 0x00007f7ce8f01f62 in do_system () from /lib64/libc.so.6; #2 0x00007f7ce1c6d484 in TUnixSystem::Exec (this=0x1d21040, shellcmd=0x11c2f7d0 ""/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Mon/ROOT/HEAD/x86_64-centos7-gcc8-dbg/etc/gdb-backtrace.sh 27438 1>&2"") at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2120; #3 0x00007f7ce1c6dce0 in TUnixSystem::StackTrace (this=0x1d21040) at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/core/unix/src/TUnixSystem.cxx:2411; #4 0x00007f7ce216f258 in (anonymous namespace)::do_trace (sig=5) at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00007f7ce216f2d1 in (anonymous namespace)::TExceptionHandlerImp::HandleException (this=0x39148d0, sig=5) at /workspace/build/projects/ROOT-HEAD/src/ROOT/HEAD/bindi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6359#issuecomment-694290624:866,abort,abort,866,https://root.cern,https://github.com/root-project/root/issues/6359#issuecomment-694290624,1,['abort'],['abort']
Safety,"I had this lying around in an older branch. Could be interesting to add for 6.24, since it makes the new functionality more consistent. Otherwise, the recovery would only work in single-value mode. So far, the recovery from invalid parameters only worked in scalar mode.; Here, RooAbsPdf and RooNLLVar are augmented with the NaN packer trick; also in batch mode.; This allows for propagating information about evaluation errors to the; minimiser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7266:151,recover,recovery,151,https://root.cern,https://github.com/root-project/root/pull/7266,2,['recover'],['recovery']
Safety,"I have a couple of Debian/Ubuntu packages which depend (and build-depend) on ROOT; the only clean way to support those is to have a ROOT *package* (or package set) as well. Running `cmake` and `make` by hand succeeds while putting exactly the same instructions into a `debian/rules` file (as `override`s for the default debhelper build steps) results in failure(s). Dropping debhelper, and going back to an old-style `binary` target, might be the last resort, but I'm trying to avoid this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10777#issuecomment-1169632086:478,avoid,avoid,478,https://root.cern,https://github.com/root-project/root/issues/10777#issuecomment-1169632086,1,['avoid'],['avoid']
Safety,"I have in the mean time found the root cause why my patch fails:; - It is due to copy relocations of <iostream> symbols from libstdc++; - Crashes happen whenever cling wants to output text via cout / cerr / etc.; - The problem is that there are 2 instances of cout / cerr: The first created by the executable itself through copy relocation, when the executable prints something via cout. The second created by libCling loaded with RTLD_DEEPBIND. (By design, RTLD_DEEPBIND links to libstdc++ first before checking the global namespace, so it does not see the copy-relocated symbol.). The problem can be avoided if executables are compiled with -fPIC as well.; I just tried locally to compile the failing ROOT ctests with -fPIC and this fixed the segmentation faults.; The question is whether this is a proper solution, since it would require to compile all executables with -fPIC. On the other hand, I don't know how to fix this in another way. Perhaps this could be enabled via a special CMake option for ROOT, which enables RTLD_DEEPBIND for libCling and -fPIC for all executables.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668#issuecomment-564007525:602,avoid,avoided,602,https://root.cern,https://github.com/root-project/root/pull/4668#issuecomment-564007525,1,['avoid'],['avoided']
Safety,"I have modified the initial commit to include the `IgnoreSignal` call in `TXXSystem::Abort` before throwing the signal, in order to avoid the infinite recursion cases. Regarding the two doubts:. > Should it print a stack trace? (This may or may not be useful for an assert). In the end I have not moved the return after `StackTrace`, so with this solution we don't print the stack trace for an unexpected `SIGABRT`. In the case of an assert, the assert failure itself is still notified with a message that tells you the file and line where it happened, so perhaps we don't need a stack trace. > When on the prompt, should it recover or stop the process? (probably stop the process but then again we don't stop the process for other 'bad' state: SigBus, SigSegmentationViolation, SigIllegalInstruction, SigFloatingException). The current solution stops the process. If a `SIGABRT` was thrown it's because a critical (unrecoverable) error happened, so it makes sense to stop. When I use the ROOT prompt and get a SigSegmentionViolation, it does not stop, I get back to the prompt and if I try to run something I usually get another seg fault.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5034#issuecomment-589630499:85,Abort,Abort,85,https://root.cern,https://github.com/root-project/root/pull/5034#issuecomment-589630499,3,"['Abort', 'avoid', 'recover']","['Abort', 'avoid', 'recover']"
Safety,"I have now avoided the interpreter call, which caused some performance regression. Then I did some benchmarking with:; ```bash; perf stat -r 100 -B python -c 'import ROOT; ROOT._finalSetup()'; ```; It takes about 0.45 seconds. But there is no significant difference with or without this PR (seems to depend on what else is running on my system at that moment I guess), sometimes one is faster sometimes the other.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15788#issuecomment-2160789690:11,avoid,avoided,11,https://root.cern,https://github.com/root-project/root/pull/15788#issuecomment-2160789690,1,['avoid'],['avoided']
Safety,"I have the same/similar issue. ROOT 6.28.04 installed from source, macOS 13.4, Xcode 14.3.1, MacBook Pro with Intel i9-9880H. Running TMVA tests in the build directory, I get. ```; $ ctest --output-on-failure -R TMVA-DNN-MethodDL-SGD-Optimization-Cpu; Test project /Users/ole/Develop/BUILD/ROOT/6.28.04b; Start 357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu; 1/1 Test #357: TMVA-DNN-MethodDL-SGD-Optimization-Cpu ...***Failed 0.61 sec; Testing Method DL with SGD Optimizer for CPU backend:; libc++abi: __cxa_guard_acquire detected recursive initialization; CMake Error at /Users/ole/Develop/BUILD/ROOT/root-6.28.04/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted. 0% tests passed, 1 tests failed out of 1. Total Test time (real) = 0.74 sec. The following tests FAILED:; 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed); Errors while running CTest; ```. When running all the TMVA tests:; ```; $ ctest -R ""^TMVA"" -j6; ...; 81% tests passed, 7 tests failed out of 36. Total Test time (real) = 10.47 sec. The following tests FAILED:; 	357 - TMVA-DNN-MethodDL-SGD-Optimization-Cpu (Failed); 	358 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Failed); 	359 - TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu (Failed); 	360 - TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu (Failed); 	361 - TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu (Failed); 	362 - TMVA-DNN-Regression-Cpu (Failed); 	376 - TMVA-DNN-GRU-Backward-Cpu (Failed); Errors while running CTest; ```; All these failing tests abort with ""libc++abi: __cxa_guard_acquire detected recursive initialization"". The TMVA.* tests pass without any issue on a different system: ROOT 6.28.04 installed from source (exact same configuration as the installation with errors mentioned above), macOS 11.7.7, Xcode 13.2.1, Intel i7-10700K. Seems to be related to the newer libc++ on the macOS 13.4/Xcode 14 system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13002#issuecomment-1594949419:519,detect,detected,519,https://root.cern,https://github.com/root-project/root/issues/13002#issuecomment-1594949419,4,"['abort', 'detect']","['abort', 'aborted', 'detected']"
Safety,"I hope it's not adding noise, but I do want to mention that it's possible to hit this issue in completely unexpected (and, from the user perspective, hard to avoid) ways. For example, `TASImage::FromPad` has the line. `gVirtualPS = (TVirtualPS*)gROOT->ProcessLineFast(""new TImageDump()"");`. and so the following will crash on lxplus:; ```; import ROOT; ROOT.gROOT.SetBatch(); h = ROOT.TH1F(); img = ROOT.TImage.Create(); pad = ROOT.TCanvas(); h.Draw(); for i in range(30000):; img.FromPad(pad); ```; without an obvious workaround. This winds up being a blocker for ATLAS data quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14156#issuecomment-1982163949:158,avoid,avoid,158,https://root.cern,https://github.com/root-project/root/issues/14156#issuecomment-1982163949,1,['avoid'],['avoid']
Safety,"I indeed see in the man page for pthread_atfork(3) http://manpages.courier-mta.org/htmlman3/pthread_atfork.3.html. > When fork(2) is called in a multithreaded process, only the calling thread is duplicated in the child process. The original intention of pthread_atfork() was to allow the calling thread to be returned to a consistent state. For example, at the time of the call to fork(2), other threads may have locked mutexes that are visible in the user-space memory duplicated in the child. Such mutexes would never be unlocked, since the threads that placed the locks are not duplicated in the child. The intent of pthread_atfork() was to provide a mechanism whereby the application (or a library) could ensure that mutexes and other process and thread state would be restored to a consistent state. In practice, this task is generally too difficult to be practicable.; > ; > After a fork(2) in a multithreaded process returns in the child, the child should call only async-signal-safe functions (see signal-safety(7)) until such time as it calls execve(2) to execute a new program.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7075#issuecomment-764810002:986,safe,safe,986,https://root.cern,https://github.com/root-project/root/pull/7075#issuecomment-764810002,2,['safe'],"['safe', 'safety']"
Safety,"I initially reported this on the [root forum](https://root-forum.cern.ch/t/roodllsignificancemcsmodule-merge-error/42702). ### Describe the bug; RooAbsMCStudyModule::finalizeRun() returning a RooDataSet sometimes causes a merge error which is difficult to avoid.; Caused by RooMCStudy::_fitParData and RooAbsMCStudyModule data being different sizes. ### Expected behavior; RooMCStudy and RooAbsMCStudyModule data merging correctly,; OR; A way to consistently make the datasets the same size. ### To Reproduce; Run included macro. ```. #include ""RooRealVar.h""; #include ""RooGaussian.h""; #include ""RooConstVar.h""; #include ""RooAddPdf.h""; #include ""RooMCStudy.h""; #include ""RooFFTConvPdf.h""; #include ""RooArgusBG.h""; #include ""RooDLLSignificanceMCSModule.h"". using namespace RooFit;; const double xmin = 4.3, xmax = 4.55, bratio = 0.3, m0 = 4.482;; const int nevents = 100;. void min_mcsign_error() {; 	RooRealVar x(""mresp"", ""x"", 4.3, 4.55);. 	// signal; 	RooRealVar mean_res(""#mean_{gauss}"", ""mean_res"", 4.47);; 	RooRealVar sigma_res(""#sigma_{gauss}"", ""sigma_res"", 0.05);; 	RooGaussian sig(""gs_res"", ""gs_res"", x, mean_res, sigma_res);. 	// background; 	RooRealVar argpar(""shape"", ""argus shape parameter"", -7);; 	RooRealVar power(""power"", ""argus power parameter"", 0.75);; 	RooArgusBG bkg(""bkg"", Form(""Background ARGUS, m_{0} = %.3f"", m0), x, RooConst(m0), argpar, power);. 	// generating distribution; 	RooRealVar nsig(""nsig"", ""signal number"", bratio);; 	RooRealVar nbg(""nbg"", ""bg number"", 1.-bratio); ; 	RooAddPdf mcdist(""distribution"", ""BW+a"", RooArgList(sig, bkg), RooArgList(nsig, nbg));. 	// signal used in model; 	RooRealVar fitmean_res(""#mean_{gauss}"", ""mean_res"", 4.2, 4., 5.);; 	RooRealVar fitsigma_res(""#sigma_{gauss}"", ""sigma_res"", 0.1, 0., 1.);; 	RooGaussian fitsig(""gs_res"", ""gs_res"", x, fitmean_res, fitsigma_res);; 	; 	// background used in model; 	RooRealVar fitargpar(""shape"", ""fit argus shape parameter"", -6.5, -8, -6);; 	RooRealVar fitpower(""power"", ""fit argus power parameter"", 0.5, 0",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6949:256,avoid,avoid,256,https://root.cern,https://github.com/root-project/root/issues/6949,1,['avoid'],['avoid']
Safety,"I introduced those targets because I thought we actually have; dependencies between the different rootcling invocations because; of the C++ modules. After some discussion with Axel, it turns out; we actually always have dependencies here, as the dictionaries; should regenerate the dictionary when one of the referenced; libraries/headers change (as the declarations in there change,; which might influence the current dictionary). We can just safely remove this, the actual dependency which is; ARG_DEPENDENCIES is still in the custom command dependencies; (currently the ROOTCLING_ targets where just a no-op that was; supposed to activated in a later commit when we remove the; ARG_DEPENDENCIES and replace it with the ROOTCLING_; dependencies if runtime_modules was set to ON).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/963:444,safe,safely,444,https://root.cern,https://github.com/root-project/root/pull/963,1,['safe'],['safely']
Safety,"I investigated a bit more in depth the problem and it seems like the regex_error gets thrown as soon as I plot a composite pdf or by calling RooFit::Components, in fact given the previous example with expo being a simple exponential. ```; RooExponential expo((""modelBkgTot""+trigCatS).c_str(), (""modelBkgTot""+trigCatS).c_str(), *B_plus_DTFM_M_zero, lambda);; expo.plotOn(frame);; ```. works, but as soon as I do for example:. ```; RooAddPdf modelSigTot((""modelSigTot""+trigCatS).c_str(), (""modelSigTot""+trigCatS).c_str(), RooArgList(modelSig0, modelSig1, modelSig2), RooArgList(frac0gamma, frac1gamma));; modelSigTot.plotOn(frame); ```. I get:. ```; terminate called after throwing an instance of 'std::regex_error'; what(): Unexpected character in brace expression.; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7115#issuecomment-770361561:766,Abort,Aborted,766,https://root.cern,https://github.com/root-project/root/issues/7115#issuecomment-770361561,1,['Abort'],['Aborted']
Safety,"I just realized that it's probably safer to use the change tracker because then you are not tracking the dependency on the observables, only the parameters. It should not happen that someone changes the observable value between two likelihood evaluations, but who knows :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10832#issuecomment-1167783258:35,safe,safer,35,https://root.cern,https://github.com/root-project/root/pull/10832#issuecomment-1167783258,1,['safe'],['safer']
Safety,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:; https://github.com/root-project/root/pull/14161; ```; Failed; Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- ; cd /github/home/ROOT-CI/build/roottest/python/basic; /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling; -- BEGIN TEST OUTPUT --; ============================= test session starts ==============================; platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0; rootdir: /github/home/ROOT-CI; plugins: anyio-4.1.0; collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):; File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error; File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__; File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr; File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py; File ""/py-venv/ROOT-CI/lib64/python3.12/si",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14098#issuecomment-1837114968:362,timeout,timeout,362,https://root.cern,https://github.com/root-project/root/pull/14098#issuecomment-1837114968,1,['timeout'],['timeout']
Safety,"I just tried to compile and run the example with clang on my machine (running Debian trixie/sid). **command line used**: ; ```fish; clang++ -fsanitize=address $(root-config --cflags) long.cxx $(root-config --libs) -O#; ```; (where `# = 0,1,2,3`). **clang version**: ; ```; Debian clang version 16.0.6 (27); Target: x86_64-pc-linux-gnu; Thread model: posix; InstalledDir: /usr/bin; ```. The results were all the same independently on the opt level. ROOT was compiled from source from the `master` branch. Tried both in Debug and in RelWithDebSymbols modes. ROOT RelWithDebSymbols:; ```; ==7224==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8176 byte(s) in 70 object(s) allocated from:; #0 0x55c975513f82 in malloc (/home/jp/a.out+0xb9f82) (BuildId: f22a18192d6097da92ce5b1350d6cc50f66c0c83); #1 0x7f3f1567d59a in clang::TemplateIdAnnotation::Create(clang::SourceLocation, clang::SourceLocation, clang::IdentifierInfo*, clang::OverloadedOperatorKind, clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<clang::ParsedTemplateArgument>, bool, llvm::SmallVectorImpl<clang::TemplateIdAnnotation*>&) (/home/jp/root_build/release/lib/libCling.so+0x147d59a) (BuildId: 3d3940bfa5d71a7ddadacb52dc8efab302b58bd0). SUMMARY: AddressSanitizer: 8176 byte(s) leaked in 70 allocation(s).; ```. ROOT Debug:; ```; ==6956==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8904 byte(s) in 76 object(s) allocated from:; #0 0x557ce50baf82 in malloc (/home/jp/a.out+0xb9f82) (BuildId: f61cf0a7a2dabd0ff44f3a73dc969a3c8bbdbc6b); #1 0x7fe17b35224a in clang::TemplateIdAnnotation::Create(clang::SourceLocation, clang::SourceLocation, clang::IdentifierInfo*, clang::OverloadedOperatorKind, clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::SourceLocation, clang::SourceLocation, llvm::ArrayRef<clang::ParsedTemplateArgument>, bool, llvm::SmallVectorImpl<clang::TemplateIdAnnotation*>&) ParseExprCXX.cpp. SUMMAR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15818#issuecomment-2162394965:616,detect,detected,616,https://root.cern,https://github.com/root-project/root/issues/15818#issuecomment-2162394965,1,['detect'],['detected']
Safety,I know but it was just to avoid more noise from a simple mistake :-),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1239#issuecomment-341526163:26,avoid,avoid,26,https://root.cern,https://github.com/root-project/root/pull/1239#issuecomment-341526163,2,['avoid'],['avoid']
Safety,"I made minimal change concerning thread safety.; As I learned in workshop, one should use ROOT::EnableThreadSafety() to enable proper locking for I/O.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2603#issuecomment-422001206:40,safe,safety,40,https://root.cern,https://github.com/root-project/root/pull/2603#issuecomment-422001206,2,['safe'],['safety']
Safety,"I noticed that in the logs of the CI runs of this particular PR, The two relevant tutorials are being run 3 times on the windows nodes, e.g. searching for; ```; Start 959: tutorial-v7-concurrentfill.cxx; ```; Returns 3 results. Now this is extremely weird, but I could not see it happening in any other PR or in the nightlies. I even triggered a [CI run](https://github.com/root-project/root/pull/14481) to print the target tutorials created at configuration time and that still returned only 1 target tutorial. At this point I don't see what can be immediately improved in the tutorials to avoid the sporadic failures, I am closing this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14472#issuecomment-1916191292:591,avoid,avoid,591,https://root.cern,https://github.com/root-project/root/pull/14472#issuecomment-1916191292,1,['avoid'],['avoid']
Safety,"I ported the changes from [pseyfert/tmva-mlp](https://github.com/pseyfert/tmva-mlp) to the code generation. As a test I just ran the class.C network resulting from tutorials/tmva/TMVAClassification.C (with ""MLP"") and evaluated it similar to tutorials/tmva/TMVAClassificationApplication.C. According to callgrind the network evaluation is ~17% cpu cycles faster.; NB: i did not port all changes from pseyfert/tmva-mlp - I did not import the SSE/AVX intrinsics and avoided what seemed too difficult (optimising the putIndices and getIndices out)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/121:463,avoid,avoided,463,https://root.cern,https://github.com/root-project/root/pull/121,1,['avoid'],['avoided']
Safety,I propose to close this issue as clarified: I agree that the solution is to make backporting as easy as possible (https://github.com/root-project/root/issues/14889) to avoid these cases. We can focus our attention to the automation.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14439#issuecomment-2136956523:168,avoid,avoid,168,https://root.cern,https://github.com/root-project/root/issues/14439#issuecomment-2136956523,1,['avoid'],['avoid']
Safety,"I pushed a new version with some further cleanups (unused or unfinished code, reducing common code for priority queue). I also made sure to be as thread-safe as possible (use of `static thread_local` instead of `static` as well as protecting the safety-cache writing with a mutex)... although I mind the cost of doing so. However, please note that the original code itself is not thread-safe since it has state modified by routines called from TGeoNavigator. This will not be addressed here because it has nothing to do with the proposed changes. Until then, one should potentially forbid use of TGeoParallelWorld in combination with multiple TGeoNavigators.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442#issuecomment-2358266984:153,safe,safe,153,https://root.cern,https://github.com/root-project/root/pull/16442#issuecomment-2358266984,3,['safe'],"['safe', 'safety-cache']"
Safety,"I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/598:192,avoid,avoid,192,https://root.cern,https://github.com/root-project/root/pull/598,1,['avoid'],['avoid']
Safety,I rebase last commit to avoid multiple commits around same line,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14119#issuecomment-1827786618:24,avoid,avoid,24,https://root.cern,https://github.com/root-project/root/pull/14119#issuecomment-1827786618,1,['avoid'],['avoid']
Safety,I rebase my commit - problem was little bit more complicated. One need to add `TRatioPlot` to list of cleanups also in default constructor - when it read from the file.; And then correctly cleanup all refs. . Crash was already in the first `safeDelete(fRatioGraph);` - while graph was drawn in subpads.; Workaround with `ROOT::Detail::HasBeenDeleted(obj)` was not really working here.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14861#issuecomment-1971549412:241,safe,safeDelete,241,https://root.cern,https://github.com/root-project/root/pull/14861#issuecomment-1971549412,1,['safe'],['safeDelete']
Safety,I see ... RDataFrame probably need to go through the same kind of transformation TTreeReader went through to avoid call GetAddress for every entry but rather once per file (via being 'notified').,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3216#issuecomment-455882564:109,avoid,avoid,109,https://root.cern,https://github.com/root-project/root/pull/3216#issuecomment-455882564,1,['avoid'],['avoid']
Safety,"I see https://github.com/root-project/root/pull/11311. Is missing the R__HAS_STD_SPAN, I would say to avoid more improper reporting, it should be made more clear when those header are imported that this is the intended behaviour. I would say you should add a ; ```; #if __cplusplus >= 202002L; ```. inside those code block if they are enabled due to this mismatched compilation version and report the error",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13042#issuecomment-1595270233:102,avoid,avoid,102,https://root.cern,https://github.com/root-project/root/issues/13042#issuecomment-1595270233,2,['avoid'],['avoid']
Safety,"I see, thanks @pcanal , I indeed get the infinite recursion for:; ```; root.exe -b -l -e 'gErrorAbortLevel = kWarning;Warning(""prompt"",""finido .."")'; ```; The second case of infinite recursion:; ```; root.exe -b -l -e 'gApplication->ExitOnException(TApplication::kAbort);'; root [] .qqqqqq; ```; can be solved by calling `gSystem->IgnoreSignal(kSigAbort)` in the place where I specified in my comment above, but we still have the first case. At this point, to avoid all cases of infinite recursion, we have the option to come back to the changes originally proposed by this PR. The problem is that, for an unexpected `SIGABRT`, we would not print the stack trace. I thought of adding a condition check here:. https://github.com/root-project/root/pull/5034/files#diff-bf6694106c88ff6a674af44b92371bbaR3635. to also see if `gApplication` is `TRint` (I come from the ROOT prompt), and only in that case I return and don't print the stack trace. But that would still prevent printing the stack trace in an unexpected `SIGABRT` from the ROOT prompt (not `.qqqqqq`). So what is your opinion @pcanal , do you think there is a way to make it work for all cases or should we think of removing the registration of a handler for `SIGABRT` in TXXXSystem as it was before?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5034#issuecomment-589165599:460,avoid,avoid,460,https://root.cern,https://github.com/root-project/root/pull/5034#issuecomment-589165599,1,['avoid'],['avoid']
Safety,I see. So actually this is a case where the limit is not known to the OS/through-getrlimit. How can we detect locally the limit of concurrent transfers for a given server?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11276#issuecomment-1235438496:103,detect,detect,103,https://root.cern,https://github.com/root-project/root/issues/11276#issuecomment-1235438496,1,['detect'],['detect']
Safety,"I suspect that instead we should still rely on detecting the availability of TBB *but* disable this feature on Windows, at least for now. (I.e. the condition is ""has a TBB and not on Windows"").",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7260#issuecomment-799829127:47,detect,detecting,47,https://root.cern,https://github.com/root-project/root/pull/7260#issuecomment-799829127,1,['detect'],['detecting']
Safety,"I tested offline @hahnjo 's proposal, as it would have had the nice advantage of avoiding the backwards-incompatible change brought by the current status of this PR. A summary of the insights I gathered:. 1. There are some technical obstacles, the main one being that we don't have a single, coherent code path for all data sources. Crucially, `TTree` is handled differently from any other data format (i.e. it doesn't use the `RDataSource` mechanism). This practically means that I cannot create a lazy `RDataSource` to handle them all. But in first approximation this could have been solved with one extra branching; 2. It is not straightforward to know where exactly to trigger the inferring of the data source. Practically, this is needed at the very latest in `RLoopManager::Run`, i.e. right before the start of the event loop. But it can also be needed before that, namely whenever a node of the computation graph is created it might need to know about the column names it uses, so the dataset schema must be gathered thus the data source type must be inferred. Admittedly, this is also another fixable problem with a better documentation or cleaner code to explain exactly at what point of any RDataFrame application the loop manager would need the dataset schema in place; 3. Probably the greatest obstacle posed by this idea is that it indeed fixes one backwards-incompatible change, but introduces another one. RDataFrame allows some operations to run without triggering the computation graph, actually without even needing to populate the computation graph at all. Specifically, `Describe` produces a string description of some metadata of the dataset wrapped by the RDataFrame, e.g. the name of the TTree and the file it is stored in. This info doesn't need file opening (at least with `TChain`). The lazy data source would effectively change the behaviour of `Describe` as it would hide the type of the data source even if in principle it could be known (supposing the same workflow with ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13090#issuecomment-1889018672:81,avoid,avoiding,81,https://root.cern,https://github.com/root-project/root/pull/13090#issuecomment-1889018672,1,['avoid'],['avoiding']
Safety,"I think `if (demangledEnumName)` was meant here, but it is redundant, because behaviour of `free`ing a null pointer is defined and it is no-op.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/248:59,redund,redundant,59,https://root.cern,https://github.com/root-project/root/pull/248,1,['redund'],['redundant']
Safety,"I think it behaves just as expected:. NOCLEAR By default the background of the histograms is erased before drawing the histograms. The option ""noclear"" avoids this behavior. This is useful when drawing a [THStack](https://root.cern/doc/master/classTHStack.html) on top of another plot. If the patterns used to draw the histograms in the stack are transparent, then the plot behind will be visible.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14605#issuecomment-1931462956:152,avoid,avoids,152,https://root.cern,https://github.com/root-project/root/issues/14605#issuecomment-1931462956,1,['avoid'],['avoids']
Safety,"I think it's safe to merge, I'll leave it to you to push the button :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1440#issuecomment-350399332:13,safe,safe,13,https://root.cern,https://github.com/root-project/root/pull/1440#issuecomment-350399332,1,['safe'],['safe']
Safety,"I think that still means that label sizes are not being correctly accounted for, with font precision 43 one should change from e.g. 0.1 label size to some number of pixels like 20, right? In this case, the pre-font-precision size is still there, whatever its value (unless the conversion is entirely implicit, which is... well... I need to use this to harmonize labels across adjacent pads that do not share the same heights/widths, so avoiding attempts to match the fontprecision 42 sizes on those is the purpose of going to precision 43). For the alignment, that was my mistake, I thought it was 10*vAlign + hAlign, and that's wrong, so it's working as expected. I'll see what I can do from python, that's going to involve a fair amount of wrapping and ctypes, it looks like. Also, is that only going to work once the axis has been added to the paint list with Draw()? i.e. return inapplicable/incorrect numbers of labels beforehand?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10279#issuecomment-1084490685:436,avoid,avoiding,436,https://root.cern,https://github.com/root-project/root/issues/10279#issuecomment-1084490685,1,['avoid'],['avoiding']
Safety,I think the failure is due to a timeout?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3432#issuecomment-463938283:32,timeout,timeout,32,https://root.cern,https://github.com/root-project/root/pull/3432#issuecomment-463938283,1,['timeout'],['timeout']
Safety,I think the problem is that hsimple.root doesnt exist without hsimple.C being run first. I aborted the jenkins.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8699#issuecomment-883586668:91,abort,aborted,91,https://root.cern,https://github.com/root-project/root/pull/8699#issuecomment-883586668,1,['abort'],['aborted']
Safety,"I think there is one thing that is clear:. * T*System::Abort should disable the signal handling before calling ::abort [rather than the caller of gSystem->Abort doing so]. What is not as clear is what should be the behavior for unexpected (which include failure of a 'regular' assert macro):. * Should it print a stack trace? (This may or may not be useful for an assert).; * When on the prompt, should it recover or stop the process? (probably stop the process but then again we don't stop the process for other 'bad' state: SigBus, SigSegmentationViolation, SigIllegalInstruction, SigFloatingException). Note: to print stack and still always abort, we just need to move the return introduce by the PR to after the call to StackTrack and before the call to HandleException/Exit. Note: to print stack and not exit when on the prompt, just tweaking T*System::Abort should be enough to quit for .qqqq and avoid the infinite recursions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5034#issuecomment-589272246:113,abort,abort,113,https://root.cern,https://github.com/root-project/root/pull/5034#issuecomment-589272246,11,"['Abort', 'abort', 'avoid', 'recover']","['Abort', 'abort', 'avoid', 'recover']"
Safety,"I think these files are fine to remove, but maybe even removing only the ROOT 5 ones would be already enough (they can be recovered from the older version tarballs in any case).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3202:122,recover,recovered,122,https://root.cern,https://github.com/root-project/root/pull/3202,1,['recover'],['recovered']
Safety,"I think this is because array_ref has both operators - conversion to pointer, as well as array indexing, which is making ambiguity.; I think we can safely remove the operator[]; that should fix it. ; Found a similar Stackoverflow question: https://stackoverflow.com/questions/49607565/error-use-of-overloaded-operator-is-ambiguous-while-building-for-i386",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14165#issuecomment-1925310155:148,safe,safely,148,https://root.cern,https://github.com/root-project/root/pull/14165#issuecomment-1925310155,1,['safe'],['safely']
Safety,"I think this is ready for review. My intent is to fix the segfault and provide scaffolding for RNTuple merges in this PR and follow up with the actual implementation PRs. . @pcanal are you comfortable with the error message printed on an attempted merge for non-inheriting objects? . ```text; hadd Target file: ../merged.root; hadd compression setting for all output: 1; hadd Source file 1: ntuple1.root; hadd Source file 2: ntuple2.root; hadd Sources and Target have different compression levels; hadd merging will be slower; hadd Target path: ../merged.root:/; Fatal in <TFileMerger::MergeRecursive>: Merging objects that don't inherit from TObject is unimplemented (key: ntuple in file ntuple2.root); aborting; grep: warning: GREP_OPTIONS is deprecated; please use an alias or script; #0 0x00007f2dfd7ec07a in __GI___waitpid (pid=20605, stat_loc=stat_loc; entry=0x7fffc72e6c90, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29; #1 0x00007f2dfd764fbb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007f2dfe92beb6 in TUnixSystem::StackTrace() () from /home/max/projects/root/new-errors/lib/libCore.so; #3 0x00007f2dfe7fe1aa in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/max/projects/root/new-errors/lib/libCore.so; #4 0x00007f2dfe8b9be8 in ErrorHandler () from /home/max/projects/root/new-errors/lib/libCore.so; #5 0x00007f2dfe810e29 in TObject::Fatal(char const*, char const*, ...) const () from /home/max/projects/root/new-errors/lib/libCore.so; #6 0x00007f2dfeed49e3 in TFileMerger::MergeRecursive(TDirectory*, TList*, int) () from /home/max/projects/root/new-errors/lib/libRIO.so; #7 0x00007f2dfeed2e41 in TFileMerger::PartialMerge(int) () from /home/max/projects/root/new-errors/lib/libRIO.so; #8 0x0000000000406c8d in main::{lambda(TFileMerger&, int, int)#2}::operator()(TFileMerger&, int, int) const [clone .constprop.0] (); #9 0x0000000000404ccd in main (); #10 0x00007f2dfd740830 in __libc_start_main (main=0x403f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6008#issuecomment-662581836:704,abort,aborting,704,https://root.cern,https://github.com/root-project/root/pull/6008#issuecomment-662581836,1,['abort'],['aborting']
Safety,"I think this looks mostly good, the failures on `ROOT-debian10-i386` are timeouts (even though it's suspicious that the same tests timed out as the last time)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13123#issuecomment-1618051055:73,timeout,timeouts,73,https://root.cern,https://github.com/root-project/root/pull/13123#issuecomment-1618051055,1,['timeout'],['timeouts']
Safety,"I think was redundant, since no class had a `ClassDef` version >= 1. So there was no IO possible anyway",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15708#issuecomment-2143578713:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/15708#issuecomment-2143578713,1,['redund'],['redundant']
Safety,I think we can avoid requiring the method count. I will discuss with Yuka offline and we will let you know.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1743#issuecomment-372650471:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/1743#issuecomment-372650471,1,['avoid'],['avoid']
Safety,"I think we can get away with something simpler where when IMT is on (or more precisely when TBB has been detected by cmake), we turn on a flag (`#define` in RConfigure.h) that change the way core/thread is build (and yes, in this optional mode, libThread would link against libTBB.so (or however it is spelt)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-780926697:105,detect,detected,105,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-780926697,2,['detect'],['detected']
Safety,"I think we can improve on the fix. This prevents the StackTrace from being printed also when the abort signal is unexpected but at least this patch seem (likely) the break the infinite recursion (abort being caught and then calling abort and then it is caught again, etc...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5034#issuecomment-587530717:97,abort,abort,97,https://root.cern,https://github.com/root-project/root/pull/5034#issuecomment-587530717,3,['abort'],['abort']
Safety,"I think we want to test code in core/foundation which is the most restrictive place in ROOT - eg we can run with rootcling_stage1, etc. I think we can move the library there to avoid introducing incompatible changes. Maybe we can avoid the new library situation and conditionally add the testing header/source files to an existing library, eg libFoundation?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9528#issuecomment-1009265001:177,avoid,avoid,177,https://root.cern,https://github.com/root-project/root/pull/9528#issuecomment-1009265001,2,['avoid'],['avoid']
Safety,"I tried a bit but I'm confused with the safeDelete function, so I think I'll leave this one to someone else ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14855#issuecomment-1970974818:40,safe,safeDelete,40,https://root.cern,https://github.com/root-project/root/issues/14855#issuecomment-1970974818,1,['safe'],['safeDelete']
Safety,"I usually always ""squash and merge"" to avoid the intermediate steps",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2513#issuecomment-415690391:39,avoid,avoid,39,https://root.cern,https://github.com/root-project/root/pull/2513#issuecomment-415690391,1,['avoid'],['avoid']
Safety,"I very much like the idea of being able to define a model inline! See #8711 . What the `auto fldXyz = MakeField<type>(""xyz"")` approach is trying to avoid is having to spell the schema more than once. As schemas get large, it can be a little cumbersome to remember and write down all the different types and field names in different places of the program. I do see, however, that the approach complicates reasoning about the lifetimes of the different variables.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8688#issuecomment-884329108:148,avoid,avoid,148,https://root.cern,https://github.com/root-project/root/pull/8688#issuecomment-884329108,1,['avoid'],['avoid']
Safety,"I wanted to make a ""no functional change"" PR, but looking at `.gitignore` I realized we had all those useless lines. I never see the source directory of ROOT being polluted with build artifacts (i.e. your git status would come clean). The same is not true for roottest, though. I think we can safely remove these lines from the `.gitignore`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3971#issuecomment-502660740:293,safe,safely,293,https://root.cern,https://github.com/root-project/root/pull/3971#issuecomment-502660740,1,['safe'],['safely']
Safety,"I was looking into ways to improve the target-based usage of ROOT in CMake. I found the missing `INTERFACE_INCLUDE_DIRECTORIES` has already been added to master (Yay!), but there are still other additions that could really help a user trying to use targets:. | New target | Usage |; |---|---|; | `ROOT::Libraries` | This is the target equivalent of `ROOT_LIBRARIES`, and links all common and requested components. |; | ~~`ROOT::Flags`~~ | ~~The target equivalent of `ROOT_*_FLAGS`, `ROOT_DEFINITIONS`, and `ROOT_EXE_LINKER_FLAGS`. Adds the flags that ROOT recommends; this is a smart target and will add `C`, `CXX`, and `FORTRAN` flags as needed depending on the target you link to.~~ |. ~~I have added `_LIST` versions of `FLAGS` variables, since CMake expects the flags to be a real list in most cases (really everywhere except in the `CMAKE_CXX_FLAGS` variable itself). Actually changing them to CMake lists directly might break users code, so this way is safer.~~. Target based approach before (showing the old INCLUDE issue too). ```cmake; cmake_minimum_required(VERSION 3.4). project(RootSimpleExample LANGUAGES CXX); find_package(ROOT CONFIG REQUIRED COMPONENTS RooFit RooFitCore); # Note: Symbols missing compiling error if user forgets RooFitCore!. # Already fixed in ROOT master; set_property(TARGET ROOT::Core PROPERTY; INTERFACE_INCLUDE_DIRECTORIES ""${ROOT_INCLUDE_DIRS}""). # Fix for ROOT_*_FLAGS not actually being a CMake list; separate_arguments(ROOT_CXX_FLAGS); separate_arguments(ROOT_EXE_LINKER_FLAGS). # Setting up the recommended ROOT flags; add_library(ROOT::Flags IMPORTED INTERFACE); set_property(TARGET ROOT::Flags APPEND PROPERTY; INTERFACE_COMPILE_OPTIONS ${ROOT_CXX_FLAGS}); set_property(TARGET ROOT::Flags APPEND PROPERTY; INTERFACE_COMPILE_DEFINITIONS ${ROOT_DEFINITIONS}); #set_property(TARGET ROOT::Flags APPEND PROPERTY; # INTERFACE_LINK_LIBRARIES ${ROOT_EXE_LINKER_FLAGS}). # Adding an exectuable program and linking to needed ROOT libraries; add_executable(RootSimple",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1959:959,safe,safer,959,https://root.cern,https://github.com/root-project/root/pull/1959,1,['safe'],['safer']
Safety,I wonder if a simple compare and swap could be used in TSlotStack to avoid the need for a mutex.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3189#issuecomment-448442077:69,avoid,avoid,69,https://root.cern,https://github.com/root-project/root/pull/3189#issuecomment-448442077,2,['avoid'],['avoid']
Safety,"I wonder why CMake doesn't notice ""no network access""; this sounds like a good feature for it to have... I'd propose we do not offer builtins that require network access if we detect that no network is present, along the lines of https://stackoverflow.com/questions/62214621/how-to-check-for-internet-connection-with-cmake-automatically-prevent-fails-if. If you then do `-Dfail-on-missing=On -Dimt` and builtin-tbb gets turned off, and no system tbb is found, you'd get a nice error message. I find this more helpful than adding another config option. Is that an acceptable approach?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-863178474:176,detect,detect,176,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-863178474,1,['detect'],['detect']
Safety,"I would also argue that the answer might be different for different level of message. For example, I can see a use (maybe) for the line number for Fatal and Debug message, but I don't see it for ""Info"" message. I.e. some message are directed at the user (Print, Info, Warning .. maybe even Error) and other messare are directed (indirectly) at the developers (Fatal, Debug ... maybe Error). When reading:; ```; Info in ROOT.RDF, void ROOT::Detail::RDF::RLoopManager::Run() [tree/dataframe/src/RLoopManager.cxx:658]: Starting event loop number 0.; ```; I find the (relative path) filename and line number entirely redundant. The information is already contained in the ouput message and function name (just open the file, get to the routine and search for the message). Ambiguous messages (same text for different lines) are rare and it is even rarer that you can't figure it out. [This applies ""less"" to debug message that are more likely to be terser and more repeated]. In term of useful information content (for an Info message directed at the user), the following might be sufficient:; ```; Info in ROOT.RDF, RLoopManager::Run: Starting event loop number 0.; ```; or even ""just""; ```; Info in ROOT.RDF: Starting event loop number 0.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7008#issuecomment-756867365:613,redund,redundant,613,https://root.cern,https://github.com/root-project/root/issues/7008#issuecomment-756867365,1,['redund'],['redundant']
Safety,"I would avoid including the code in ROOT. Wrapper for GSL exists, I would use those if needed, see ; https://www.thesalmons.org/john/random123/releases/latest/docs/index.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14564#issuecomment-1940697880:8,avoid,avoid,8,https://root.cern,https://github.com/root-project/root/issues/14564#issuecomment-1940697880,1,['avoid'],['avoid']
Safety,"I would like to complement all the comments made to this nice improvements with a few thoughts from a different perspective.; It's true that CompileMacro has threading issues at the moment. We see this for example when during an RDF distributed execution HTCondor workers (""pilot processes"") are spawned and subsequent tasks that need to compile macros/code cells are executed by them. However, if I understand correctly, we could avoid completely all code interpretation (which can be thread unsafe and memory consuming) after the first compilation of the macro/code cell. This could be achieved if we had in place a thread safe mechanism to recognise the code to be compiled, and, if already compiled within the same process, not compiled again, e.g. some hashing, instead of the current time stamp check (not like ccache, but somehow being inspired by it). Then a worker would behave as follows:; - first task: compile macro and load library; - second task: hash macro code, and, if already compiled, no-op; - ...; - n-th task: hash macro code, and, if already compiled, no-op; This would have the advantage of being manageable from the thread-safety point of view and consume just the memory necessary to interpret the macro once.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13655#issuecomment-1762173995:431,avoid,avoid,431,https://root.cern,https://github.com/root-project/root/pull/13655#issuecomment-1762173995,4,"['avoid', 'safe', 'unsafe']","['avoid', 'safe', 'safety', 'unsafe']"
Safety,"I write in my role of Shifter:; @vepadulano do you think this PR is good to go?; If you think so, I propose to go ahead, even if a zero copy algorithm of an increased complexity would have avoided duplicating the memory during the sorting (I guess this is no big deal after all - where you can fit a TGraph, you can fit 2)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13635#issuecomment-1724963327:189,avoid,avoided,189,https://root.cern,https://github.com/root-project/root/pull/13635#issuecomment-1724963327,1,['avoid'],['avoided']
Safety,"I'd like to call a timeout, merge this and revert once we reach a better understanding or find a better solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5548#issuecomment-650945999:19,timeout,timeout,19,https://root.cern,https://github.com/root-project/root/pull/5548#issuecomment-650945999,1,['timeout'],['timeout']
Safety,"I'd prefer avoiding it, too. All I need is the changes in TFormula and it's ClassDef ; change:. https://github.com/root-project/root/pull/7193/files#diff-ca4416e47d798b9a8d5fbf80c478df1437d0ea6a9def18939f8d9c6d29869906R254. If I take line 96 and 254 alone, where I assume 96 is the reason for incrementing the ClassDef ; will that be enough ? I need the TFormula ClassDef change, thats it",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7193#issuecomment-787814579:11,avoid,avoiding,11,https://root.cern,https://github.com/root-project/root/pull/7193#issuecomment-787814579,1,['avoid'],['avoiding']
Safety,I'd really like to avoid having to deal with the conflicts between this and the llvm upgrade. Can we close this and have a new version once the llvm upgrade is in?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11351#issuecomment-1244993407:19,avoid,avoid,19,https://root.cern,https://github.com/root-project/root/pull/11351#issuecomment-1244993407,1,['avoid'],['avoid']
Safety,"I'll merge this PR now with a commit that I added, because that commit needs to go in tonight before the docker images are rebuilt. If removes CUDA from the python requirements to avoid that the runners go out of disk space, which is right now a very annoying problem. If we fix it now, then the nighlies of Sunday will run with the updated image without CUDA. That means on Monday, we'll have a test results on all platforms again and we can much better assess the terrible situation of red builds.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15293#issuecomment-2067786114:180,avoid,avoid,180,https://root.cern,https://github.com/root-project/root/pull/15293#issuecomment-2067786114,1,['avoid'],['avoid']
Safety,"I'm having the problem again now, and I am not sure how to 'reset' my keyboard so that it starts working again. Even restarting my computer didn't make it work again. Searching a bit more, I think this might be related to this ""feature"" of X11:. https://bugs.freedesktop.org/show_bug.cgi?id=99280; https://stackoverflow.com/questions/18160792/python-xlib-xgrabkey-keyrelease-events-not-firing; https://github.com/zhanghai/xkeymacs/issues/1; https://stackoverflow.com/questions/39087079/detect-modifier-key-release-in-x11-root-window. Maybe it also explains why, randomly, my keyboard key repetition is 'deactivated'. And also that sometimes, pressing ALT+Key (in a TGTextbutton) lefts the button engaged / stuck insted of press and release. And it would also explain why changing to ""kAnyModifier"" makes it work. Even if CTRL is still trapped, pressing CTRL+S is detected as pressing just 'S' by X11, and then in HandleKey, doing event->fState & kKeyControlMask does detect correctly the mask. So fState seems to work, and the problem is just with XGrabKey and XUngrabKey sometimes not working in the release sequence I guess.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8665#issuecomment-880188512:486,detect,detect-modifier-key-release-in-,486,https://root.cern,https://github.com/root-project/root/issues/8665#issuecomment-880188512,3,['detect'],"['detect', 'detect-modifier-key-release-in-', 'detected']"
Safety,"I'm not so sure about using **-fno-threadsafe-statics**.; That is a part of the standard now, so users may expect (I do) **threadlocal** and **std::thread** to work. Are both of these (& possibly more) now undefined behavior to avoid a link-level error that both fixable and demonstrating an actual problem?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1607#issuecomment-364153964:228,avoid,avoid,228,https://root.cern,https://github.com/root-project/root/pull/1607#issuecomment-364153964,1,['avoid'],['avoid']
Safety,"I've also tried . ```; cmake -DPython3_EXECUTABLE=/usr/bin/python3.8 -DPython2_EXECUTABLE=/usr/bin/python2.7 ..; ```; and after seeing issue #8095 I've tried manually setting the flags Python3_* and using `-DPyRoot=on` but no changes to the following output:. ```; -- Detected ROOT_VERSION 6.24.99; -- Looking for Python; -- Could NOT find Python3 (missing: Python3_INCLUDE_DIRS Python3_LIBRARIES Python3_NumPy_INCLUDE_DIRS Development NumPy Development.Module Development.Embed) (found version ""3.8.9""); -- Could NOT find Python2 (missing: Python2_NumPy_INCLUDE_DIRS NumPy) (found version ""2.7.18""); -- ROOT Platform: linux; -- ROOT Compiler: Clang 12.0.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Release' (flags = '-O2'); -- Compiler Flags: -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O2; -- ROOT default compression algorithm: zlib; -- PyROOT will be built for version 2.7.18; -- Looking for ZLib; -- Looking for Freetype; -- Looking for LZMA; -- Looking for X11; -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR); -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR); -- Could NOT find PNG (missing: PNG_LIBRARY PNG_PNG_INCLUDE_DIR); -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR); -- Building AfterImage library included in ROOT itself; -- Looking for LibXml2; -- Downloading and building XROOTD version; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; -- Building LLVM in 'Release' mode.; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings enabled.; -- Could NOT find OCaml (missing: OCAMLFIND ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8097#issuecomment-832676622:268,Detect,Detected,268,https://root.cern,https://github.com/root-project/root/issues/8097#issuecomment-832676622,1,['Detect'],['Detected']
Safety,I've looked a bit further and found that is only happens in my reproducer if I have `#include <iostream>`:. ```bash; $ cat test2.cpp; #include <iostream>; size_t test2() { return 1+1; }. $ EXTRA_CLING_ARGS='-O1' root.exe -l -b -q -x test2.cpp++. Processing test2.cpp++...; Info in <TUnixSystem::ACLiC>: creating shared library /scratch2/root-debug2/./test2_cpp.so. *** Break *** segmentation violation; Root > pure virtual method called; terminate called without an active exception; Aborted (core dumped). $ EXTRA_CLING_ARGS='-O0' root.exe -l -b -q -x test2.cpp++. Processing test2.cpp++...; Info in <TUnixSystem::ACLiC>: creating shared library /scratch2/root-debug2/./test2_cpp.so; (unsigned long) 2. $ EXTRA_CLING_ARGS='-O1' root.exe -l -b -q -x test2.cpp. Processing test2.cpp...; (unsigned long) 2; ```. Same thing with `#include <iostream>` removed:. ```bash; $ cat test3.cpp; size_t test3() { return 1+1; }. $ EXTRA_CLING_ARGS='-O1' root.exe -l -b -q -x test3.cpp++. Processing test3.cpp++...; Info in <TUnixSystem::ACLiC>: creating shared library /scratch2/root-debug2/./test3_cpp.so; (unsigned long) 2; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9595#issuecomment-1014323666:484,Abort,Aborted,484,https://root.cern,https://github.com/root-project/root/issues/9595#issuecomment-1014323666,1,['Abort'],['Aborted']
Safety,"I've looked at this again, and in current dev4, anyway, the blocking issue is somewhat different, and it looks like we can avoid the issue on the ATLAS side. Further details to follow.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12406#issuecomment-1547002955:123,avoid,avoid,123,https://root.cern,https://github.com/root-project/root/issues/12406#issuecomment-1547002955,1,['avoid'],['avoid']
Safety,"I've tried to replicate the issue on a second machine running openSUSE Leap 15.2 and I got no problems. ```; -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Could NOT find Python2 (missing: Python2_NumPy_INCLUDE_DIRS NumPy) (found version ""2.7.18""); ...; -- ROOT Platform: linux; -- ROOT Compiler: GNU 9.3.1; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; ...; -- Compiler Flags: -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG; -- PyROOT will be built for versions 3.8.9 (Main) and 2.7.18; -- Linker detection: GNU ld; ```. I'm almost certain now that this issue is linked to Tumbleweed and/or the vendor (package providor) that I'm using as available packages for python3 development files differ between the two machines:. Leap 15.2; ```; i | libpython2_7-1_0 | Python Interpreter shared library | package; i | libpython3_8-1_0 | Python Interpreter shared library | package; i+ | python | Python Interpreter | package; i | python-base | Python Interpreter base package | package; i+ | python-devel | Include Files and Libraries Mandatory for Building Python Modules | package; i | python38 | Python 3 Interpreter | package; i | python38-base | Python 3 Interpreter and Stdlib Core | package; i | python38-devel | Include Files and Libraries Mandatory for Building Python Modules | package; i | python38-pyudev | Udev bindings for Python | package; ```; Tumbleweed 20210502; ```; i | devel_python3 | Python 3 Developement | pattern; i | libpython2_7-1_0 | Python Interpreter shared library | package; i | libpython3_8-1_0 | Python Interpreter shared library | package; i+ | patterns-devel-python-devel_python3 | Python 3 Developement | package; i+ | python | Python Interpreter | package; i | python-base | Python Interpreter base packa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8097#issuecomment-832966390:112,Detect,Detected,112,https://root.cern,https://github.com/root-project/root/issues/8097#issuecomment-832966390,2,"['Detect', 'detect']","['Detected', 'detection']"
Safety,"Idea to create separate actions list, which will be used only for text-based streaming.; Most actions functions can be reused from normal I/O, ; only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:; - creating separate list **fWriteText,** now used only with JSON; - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list; - actions build from the full list of class members (avoid compressed members); - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop; - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:; - TNamed and TObject as direct data members; - correct store of kSTLp members with arrays; - kStreamLoop member with fCounter==0; - kStreamLoop member with fCounter==1; - rudimentary support for TRef; - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/578:573,avoid,avoid,573,https://root.cern,https://github.com/root-project/root/pull/578,1,['avoid'],['avoid']
Safety,Ideally AddressSanitizer should detect all illegal memory operations?. Then this operation is first one? One need to check `TString::Append()`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11629#issuecomment-1308388262:32,detect,detect,32,https://root.cern,https://github.com/root-project/root/issues/11629#issuecomment-1308388262,1,['detect'],['detect']
Safety,"If I add those lines in my files (on Ubuntu), I get this error:; `# error ""ROOT requires Visual Studio 2017 or higher.""`. > One can add; > ; > ```; > #if !defined(_MSC_VER); > #define _MSC_VER 0; > #endif; > ```; > ; > but in the current version there is no undefined behavior, so it is safe.; > I would even blame the compiller/preprocessor as the offending code; > ; > ```; > defined(_MSVC_LANG) && _MSVC_LANG >= 201703L; > ```; > ; > is very standard.; > ; > Best regards,; > ; > Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8267#issuecomment-851603253:287,safe,safe,287,https://root.cern,https://github.com/root-project/root/issues/8267#issuecomment-851603253,1,['safe'],['safe']
Safety,"If IMT is disabled, TTree::Fill() is constructing and destructing the; imtHelper object at every call and never using it. By moving its; declaration into the #ifdef, we avoid this penalty. This commit also; avoids the penalty of checking for fIMTEnabled if IMT is disabled. VTune performance analysis (comparison of two basic hotspots analyses):. ![screenshot](https://user-images.githubusercontent.com/249404/27871466-078e31c0-61a6-11e7-99f7-295d7282bc5c.png). Note the time difference in `TTree::Fill()`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/741:169,avoid,avoid,169,https://root.cern,https://github.com/root-project/root/pull/741,2,['avoid'],"['avoid', 'avoids']"
Safety,"If ROOT compiled with CEF3 support, new canvas will be created not in the web browser, ; but with CEF methods. ; Also when rootqt5 is compiled, one can run macro and open canvas with Qt windows; See gui/canvaspainter/README for more details. @peremato ; Build procedure should be changed; CEF should be detected/configured when top ROOT cmake is called; Also some resources should be copied or linked from CEF into ROOT installation; ; rootqt5 executable should be compiled when qt5 with required plugins (qt5-webengine) is exists",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/789:303,detect,detected,303,https://root.cern,https://github.com/root-project/root/pull/789,1,['detect'],['detected']
Safety,"If `file://` cannot consistently prevent redirection (also for `TChain`) then this mechanism is inconsistent, the behavior will be hard to understand / predict, and we should always redirect (or fix the `TChain` case). I find it a good idea to have an `Info` once per process that the URL is redirected. Neither of these two are super strong opinions of mine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11644#issuecomment-1309855228:152,predict,predict,152,https://root.cern,https://github.com/root-project/root/pull/11644#issuecomment-1309855228,1,['predict'],['predict']
Safety,"If browser executable were detected by cmake,; add `test-stressgraphics-chrome` and `test-stressgraphics-firefox` test. Analyze produced images by blocks - first run N tests and then check image sizes.; In web mode this allows to really use batch mode when up to 80 images produced with single browser call.; This reduce test execution time from 110 to 52 seconds, or even 43 seconds with firefox. Calculate web rootmark based on realtime - while most time spent in the browser execution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16610:27,detect,detected,27,https://root.cern,https://github.com/root-project/root/pull/16610,2,['detect'],['detected']
Safety,If gDirectory is a nullptr use gROOT. TObject::Clone uses; TDirectory[File]::CloneObject and the TDirectoryFile object; actually change the behavior (set gFile to nullptr) in a way; that probably require significant surgery to avoid using the; virtual function.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3184:227,avoid,avoid,227,https://root.cern,https://github.com/root-project/root/pull/3184,4,['avoid'],['avoid']
Safety,"If it works in `master` (that one I tested some time ago with a release candidate of GCC 14) and `v6-32-00-patches`, then it's likely that the upgrade to LLVM + Clang 16.0 is needed to parse the libstdc++ headers. It might be possible to identify and backport a patch to `v6-30-00-patches` and its LLVM + Clang 13.0, but I'd rather avoid that if possible. In general ROOT only supports the latest compilers with the latest release (granted, 6.32 isn't out yet...)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15585#issuecomment-2132384131:332,avoid,avoid,332,https://root.cern,https://github.com/root-project/root/issues/15585#issuecomment-2132384131,1,['avoid'],['avoid']
Safety,"If the constructor of the contained object is not run (e.g. because; assembling its arguments triggered an exception), the dtor must not; be run when destructing the cling::Value. Detect this case by imprinting; canary bytes into the contained object bytes: if they have changed,; run the dtor, if not assume that the constructor has failed. This will cause false positives in those cases where the constructor; is not modifying the first object bytes: in these cases, the dtor; is not run even though the ctor is run. That is still better than; the other case (where the dtor crashes because no ctor was run).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4074:180,Detect,Detect,180,https://root.cern,https://github.com/root-project/root/pull/4074,1,['Detect'],['Detect']
Safety,"If the parameters of a function are outside of the definition range,; all kinds of errors might occur. PDFs might be negative, have negative; integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit.; This value was always the same, though.; Like this, Minuit cannot compute a gradient to get out of this region,; because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a; parameter point into the mantissa of a NaN, e.g. how much negative the; values of a PDF came out or how far the sum of PDF coefficients is from; 1. This information is packed into NaN using ""RooNaNPacker"", and passed; through the computation graph. It is finally unpacked in RooMinimizerFcn; before being handed to the minimiser. This allows for the calculation of; gradients, enabling the fitter to recover from an invalid state more; easily. When NaNs are being unpacked, they are presented to Minuit as maximum; function value + badness * penaltyStrength, so a gradient can be; computed that points away from the bad region. The maximum function; value comes from previous minimisation steps, the badness is the payload; of the packed NaN, and the strength can be set from the outside. If the minimisation starts out in an undefined region, and the maximum; function value is not (yet) known, 0. + badness * strength is used.; Once a well-defined region is found, the valid function values are; offset such that they are all lower than 0. In this way, Minuit is; encouraged to step into the well-defined regions, and sees a rapidly; rising function when stepping out. When fit results are saved, though,; this offset is subtracted in order to recover ""correct"" NLL values. Concretely:; - Add RooNaNPacker.; - Add a function to set the magnitude of the penalty term that's; supposed to drive the minimiser away from undefined regions.; - Add a function to RooMinim",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6401:935,recover,recover,935,https://root.cern,https://github.com/root-project/root/pull/6401,1,['recover'],['recover']
Safety,"If the parameters of a function are outside of the definition range,; all kinds of errors might occur. PDFs might be negative, have negative; integrals, coefficients for the summation of PDFs might degenerate, ... Previously, RooFit was just returning a high function value to Minuit.; This value was always the same, though.; Like this, Minuit cannot compute a gradient to get out of this region,; because all bad parameter points yield the same function value. With this commit, RooFit can pack information about the ""badness"" of a; parameter point into the mantissa of a NaN, e.g. how much negative the; values of a PDF came out or how far the sum of PDF coefficients is from; 1. This information is packed into NaN using ""RooNaNPacker"", and passed; through the computation graph. It is finally unpacked in RooMinimizerFcn; before being handed to the minimiser. This allows for the calculation of; gradients, enabling the fitter to recover from an invalid state more; easily. When NaNs are being unpacked, they are presented to Minuit as maximum; function value + badness * penaltyStrength, so a gradient can be; computed that points away from the bad region.; If the minimisation starts out in an undefined region, and the maximum; function value is unknown, 0. + badness * strength is passed on.; Once a well-defined region is found, the valid function values are; offset such that they are all lower than 0. This way, Minuit is; encouraged to step into the well-defined regions. When fit results are; saved, this offset is subtracted, in order to recover ""correct"" NLLs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6383:935,recover,recover,935,https://root.cern,https://github.com/root-project/root/pull/6383,2,['recover'],['recover']
Safety,"If we enable ORCV2 asynchronous compilation, it is clear we have to enable threading support in LLVM. So the question is whether we do want to enable ORCV2 asynchronous compilation or not, some things to consider:; * cost to all or most (?) of the interpreter calls (which then would likely takes 2 locks instead of one); * risk of dead locks; now that the interpreter takes 2 locks, if there is any way that code that takes the LLVM lock calls code directly or indirectly (via user function or even dlopen) take the ROOT locks then they will be dead locks.; * risk of over-subscribing the CPU (i.e. see the many back and forth in the PPP between the way we setup resource sharing between the experiment framework and the implicit multi-threading). ; * size of the gain; given than most (but indeed not all) compilation are very small, is it worth the costs?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11699#issuecomment-1312791296:324,risk,risk,324,https://root.cern,https://github.com/root-project/root/issues/11699#issuecomment-1312791296,4,['risk'],['risk']
Safety,"If you already have time to review than it should be fine to start now, yes. I think the failing test is just a matter of too strict assumptions, should be easily fixable by relaxing that. Btw, if you have suggestions there of how to construct a better test, I'm all ears. What the failing test does is: 1. assign task priorities, 2. run the tasks and record the order in which they are executed, 3. check the received order against the suggested one via the priorities. The problem is that due to random OS process scheduling delays, the received order is never 100% predictable. The only thing that is guaranteed is that if it has multiple tasks in the queue at one time that it will execute the one with highest priority first. I could introduce `sleep`s in each task so that the queue has time to fill up, but it could still fail randomly if for some reason the queue filling is delayed, so it still doesn't guarantee anything...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11627#issuecomment-1291893648:568,predict,predictable,568,https://root.cern,https://github.com/root-project/root/pull/11627#issuecomment-1291893648,1,['predict'],['predictable']
Safety,"If you try fitting the obtained slice (slice 21), you will see that in both Minuit and Minuit2 the fit did not work. ; Just run this simple code: ; ```; auto f = TFile::Open(""histo.root"", ""READ"");; auto hist = f->Get<TH2>(""dxyres_vs_eta"");. auto h20 = hist->ProjectionY(""h20"",20,20);; auto h21 = hist->ProjectionY(""h21"",21,21);; auto c1 = new TCanvas();; c1->Divide(1,2);; c1->cd(1);; h20->Fit(""gaus"");; c1->cd(2);; // second fit fails ; h21->Fit(""gaus"");; ```. If you run only the second fit, it works because some default steps sizes are used at the beginning. ; You will get better slice fits if using option `L` when fitting the slices:; ```; hist->FitSlicesY(nullptr, 10, 21, 0, ""LR"");; ```; and defining a restricted range for the fitted functions to avoid fitting the outlier events. Close the issue since it is not a bug.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13852#issuecomment-1777016344:757,avoid,avoid,757,https://root.cern,https://github.com/root-project/root/issues/13852#issuecomment-1777016344,2,['avoid'],['avoid']
Safety,"Implement and use a thread-safe container for caching strings that are created and used in the computation graph. Notably, these include the strings representing column names generated by `Define`. This fixes the recent failures seen on MacOS in the `dataframe-vary` unittest. Since that underlines a thread-safety issue in the overall initialisation phase of MT RDF runs, it should be backported to 6.32",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15652:27,safe,safe,27,https://root.cern,https://github.com/root-project/root/pull/15652,2,['safe'],"['safe', 'safety']"
Safety,"Implement parallel page compression using `RPageSinkBuf`. When it's time to commit the cluster, the buffered pages are passed to the task scheduler to be compressed. Each page is given a `RNTupleCompressor` which both handles the compression and serves as the compression scratch buffer. `RNTupleCompressor` was adjusted to take a user-provided size to avoid wasting memory for small pages (16MB was the fixed size).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8077:353,avoid,avoid,353,https://root.cern,https://github.com/root-project/root/pull/8077,1,['avoid'],['avoid']
Safety,Improve startup by 15% (avoid redundant work).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10354:24,avoid,avoid,24,https://root.cern,https://github.com/root-project/root/pull/10354,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,Improve the calculation for the binary cross entropy loss when the inputs are very large (and also very large negative). Use correct log approximation to avoid loss of precisions and returning infinity values. Fix both the CPU and GPU calculations. This has been initiated by this post https://root-forum.cern.ch/t/when-tmva-comput-loss-some-eopchs-loss-is-inf/57018/ where `inf` loss values were obtained during training,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14092:154,avoid,avoid,154,https://root.cern,https://github.com/root-project/root/pull/14092,1,['avoid'],['avoid']
Safety,Improve thread-safety in tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14472:15,safe,safety,15,https://root.cern,https://github.com/root-project/root/pull/14472,1,['safe'],['safety']
Safety,"Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming.; Most actions functions can be reused from normal I/O,; only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON; provide new method TStreamerInfo::AddWriteTextAction() to fill actions list; actions build from the full list of class members (avoid compressed members); provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop; make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members; correct store of kSTLp members with arrays; kStreamLoop member with fCounter==0; kStreamLoop member with fCounter==1; rudimentary support for TRef; store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/580:592,avoid,avoid,592,https://root.cern,https://github.com/root-project/root/pull/580,1,['avoid'],['avoid']
Safety,In MakeProject avoid dereferencing deleted object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4285:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/4285,1,['avoid'],['avoid']
Safety,"In Python 3, you can't do this because `None` is special:; ```Python; DataError=ROOT.RooAbsArg.None # syntax error!; ```. The tutorials used some workarounds that were either obfuscating `None`; by using the enum value directly, or used the more verbose `getattr`; approach:; ```Python; DataError=ROOT.RooAbsData.ErrorType(2); DataError=getattr(ROOT.RooAbsData, ""None""); ```. This commit pythonizes DataError with the usual string-to-enum; pythonization pattern already used for `LineColor` or `LineStyle` to; avoid this uglieness. One can do now:; ```Python; DataError=""None""; DataError=None; ```. This PR also generalized the string-to-enum pythonization for strings (see the first commit).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9721:510,avoid,avoid,510,https://root.cern,https://github.com/root-project/root/pull/9721,1,['avoid'],['avoid']
Safety,"In RooAbsPdf, the following check is done to check if the normalization; set has changed:; ```C++; RooFit::getUniqueId(nset) != RooFit::getUniqueId(_normSet); ```. This works, but like the previous pointer comparison it still gives; false results if the `_normSet` was replaced buy another RooArgSet at; the same memory location. The problem can be reproduced with this code:. ```C++; using namespace RooFit;. // Create observables; RooRealVar x(""x"", ""x"", -5, 5);; RooRealVar y(""y"", ""y"", -5, 5);. // Create signal pdf gauss(x)*gauss(y); RooGaussian gx(""gx"", ""gx"", x, RooConst(0), RooConst(1));; RooGaussian gy(""gy"", ""gy"", y, RooConst(0), RooConst(1));; RooProdPdf sig(""sig"", ""sig"", {gx, gy});. // Create composite pdf; RooAddPdf model(""model"", ""model"", RooArgList(sig), RooConst(100.));. // The results of the last two lines depend on the order of execution; // which should not be the case!; std::cout << model.getVal(x) << std::endl;; std::cout << model.getVal({x, y}) << std::endl;; ```. The solution would be to replace the `_normSet` member directly with; its unique ID value, but then it could not be used anymore. Hence we; need both. This commit also adds a new private `RooAbsPdf` member functions to set; the `_normSet` together with the new `_normSetId` member, and one; protected `isActiveNormSet(RooArgSet const*)` function. The latter; function is comparing the input to the current `_normSet`, but shortcuts; to `false` is the ID does not match with the last `_normSet` ID. Like; this, we avoid dereferencing invalid `_normSet` pointers. This change is mainly done to fix several of the ASAN build failures in; RooFit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11176:1504,avoid,avoid,1504,https://root.cern,https://github.com/root-project/root/pull/11176,1,['avoid'],['avoid']
Safety,"In RooDataSet, there are constructors to create a dataset as a subset of; another RooDataSet or a TTree, passing either a cut string or a; RooFormulaVar as the cut variable. There were two implementations for the cut string and the RooFormulaVar; case, but it's better to implement one in terms of the other to avoid; code duplication and divergence. The RooFormulaVar version has to be implemented in terms of the cut; string version, because the cut string version is more general: it can; also take an empty string, signifying no cut. Removing functions from the public interface of the data store classes is; okay, because as implementation details of the RooFit dataset classes; they are not supposed to be public anyway.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10506:311,avoid,avoid,311,https://root.cern,https://github.com/root-project/root/pull/10506,1,['avoid'],['avoid']
Safety,"In RooFit, there are many functions that return pointers that are owned; by the caller. We can't change this interface anymore, but we can wrap; the return values transparently in a raw pointer wrapper that is called; a `RooFit::Owner`. On the C++ side, this helps to analyze your code and detect potential; memory leaks. On the Python side, we can tell cppyy to take ownership; of the object if the pointer is wrapped in a owning pointer such as the; `RooFit::Owner`. This is more flexible and convenient than the existing; cppyy way of flagging the CPPOverloads on the Python side with the; `__creates__ = True` attribute for at least two reasons:. 1. This flag can't be applied at the granularity of indivirual C++; overloads; 2. It's only on the Python side, so if you want to flag these functions; in C++ as well as in Python you have to do some bookkeeping. A unit test was implemented to check that the `RooFit::Owner` behaves in; Python as expected, and that there is no memory leaking when using; functions that return them. As a first example, the `RooFit::Owner` is used in the highly used; function `RooAbsPdf::generate`, so we also get quite some test coverage; from the tutorials. In the future after this initial effort, the remaining RooFit functions; should be migrated to fix many memory leaks in PyROOT user code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9392:290,detect,detect,290,https://root.cern,https://github.com/root-project/root/pull/9392,1,['detect'],['detect']
Safety,In TBranchElement init offset avoid stripping part of the name.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7119:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/7119,1,['avoid'],['avoid']
Safety,"In `RooAbsReal::getPropagatedError`, the whole computation graph is; cloned with `RooAbsArg::cloneTree` just to evaluate the variations. The; original parameter values are reset after the variations, so it is safe; to use the original graph instead of a clone. The motivation for this change was that when the uncertainties of a; RooRealIntegral are evaluated with `RooAbsReal::getPropagatedError`, a; custom observable range is not effective anymore after cloning the; integral with `cloneTree`. Besides from the integral problem, it's probably good to avoid the clone; because there might be other issues related to the cloning that have not; been discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7477:209,safe,safe,209,https://root.cern,https://github.com/root-project/root/pull/7477,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,"In a basic [toy experiment example from CMS](https://cms-analysis.github.io/HiggsAnalysis-CombinedLimit/part5/longexercise/#advanced-section-b-computing-limits-with-toys) one can see that [RooProdPdf::factorizeProduct](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_old/59) function takes a significant fraction of the runtime, most of which is spent in `RooArgSet::~RooArgSet()`. In this PR, the factorizeProduct method is rewritten with `std::vector`s that are kept alive during the whole loop over pdfs such that memory allocation is avoided in this performance-critical code. A more sustainable solution would be to reuse the model for every toy such that `factorizeProduct` is only called once, but since a lot of RooFit-based code probably doesn't do this I think it's worth speeding up this function. Igprof reports for the CMS combine toy experiment example:; * [without this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_old); * [with this PR](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/combine_example_2_new)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7907:571,avoid,avoided,571,https://root.cern,https://github.com/root-project/root/pull/7907,1,['avoid'],['avoided']
Safety,"In a similar issue: https://github.com/root-project/root/issues/14199, the problem was avoided by reducing the number of (indirect) calls to `findScope` (with the side-effect of reducing overall work needed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16121#issuecomment-2252880495:87,avoid,avoided,87,https://root.cern,https://github.com/root-project/root/issues/16121#issuecomment-2252880495,1,['avoid'],['avoided']
Safety,"In all actual ABIs, pointers to non-member function are simply addresses, a raw pointer. The return type doesn't matter for the storage. For type-safety, correcting the function's return type to be `void* &` would be indeed an improvement. The cost and complexity of going through lambdas seems fairly high to me. Let's see what @pcanal thinks about this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3208#issuecomment-449357187:146,safe,safety,146,https://root.cern,https://github.com/root-project/root/pull/3208#issuecomment-449357187,2,['safe'],['safety']
Safety,"In all sub-classes same part to store histogram, list of functions and basic attributes was duplicated. Now all this ; functionality collected in protected `TGraph::SaveHistogramAndFunctions` method. . Also provide `TGraph::SaveArray` method to optimize storage of TGraph arrays in macro - there are quite of them in `TGraphBentErrors` class. Use more compact form for arrays - 16 values in the line. Made `THStack::SavePrimitve()` re-entrant. Histograms names were changed when stored - now names set back. Check for `gPad` in several interactive methods like `TGraph::InsertPoint()` to avoid crash when called from macro. Exclude unnecessary casting to `TObjOptLink` - base `TObjLink` has all required virtual methods already.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11884:588,avoid,avoid,588,https://root.cern,https://github.com/root-project/root/pull/11884,1,['avoid'],['avoid']
Safety,"In case of named arguments, the RooFormula will replace the argument; names with `x[0]` to `x[n]`. There are two things that can go wrong if; RooFormula is not implemented right. First, if there is a variable named; ""x"" it should only be substituted if the matching substring is not; followed by ""["", to not replace existing x[i]. Second, variables with; integer names like ""0"" should only be substituted if the match is not; followed by a ""]"", again to avoid replacing x[i]. This test checks that; these cases are handled correctly. The second case was so far not dealt with correctly, but with this; commit it is. A corresponding unit test was also implemented. The preprocessor commands in `RooFormula` were also reorganized; slightly, such that one can test the `TPRegexp` backend simply by; commenting out the `define ROOFORMULA_HAVE_STD_REGEX`. This pull request fixes an issue reported in the forum:; https://root-forum.cern.ch/t/a-strange-bug-in-rf708-bphysics-c/49152/2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10105:454,avoid,avoid,454,https://root.cern,https://github.com/root-project/root/pull/10105,1,['avoid'],['avoid']
Safety,In cases where ACLiC builds a library without a rootmap file or a modulemap file we have no reasonable way to detect what are the library dependencies. Occasionally when loading a shared object the dynamic linker will tell us if something is missing (via dlerror) but only on the intialization path. This patch fixes ROOT-10637.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5235:110,detect,detect,110,https://root.cern,https://github.com/root-project/root/pull/5235,1,['detect'],['detect']
Safety,"In clang a transient file is a header file which is stored in the pch/pcm file. If this file does not exist, clang creates a virtual file of the unzipped stored file. However, if the file exists it compares the size of the file on disk and the size of the transent file. If the two sizes are different it does not complain (as validation is off) but it triggers an assert in when constructing and outdated clang::InputFile. The implementation disallows a overridden or transient file to be out of date. This patch extends the DisableValidation abilities to span not only for timestamps but we avoid checking the file sizes if the file is on the disk. And, instead we just create a virtual file of the file that we already have. This patch should fix a relocation issue for cmssw and some of the reported LCG issues. cc: @oshadura, @davidlange6, @smuzaffar, @emanca, @zygoloid",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4480:593,avoid,avoid,593,https://root.cern,https://github.com/root-project/root/pull/4480,1,['avoid'],['avoid']
Safety,"In either the original test (via `TClingClassInfo`) or the latest example `TClass::GetClass(""B<NS::A<int>>"")`, the code triggers attempts to instantiate a template which fails (due to the type being only forward declared). The later error messages (after the full declaration is loaded) indicates that some of the traits template instance are NOT being re-instantiated based using the complete information (and instead the one based on the incomplete information are used). Technically, we don't know yet whether it is a problem with the transaction unloader or the the transaction decl capture (or possibly even on the failure detection). What we do know is that the desired behavior [in last example](https://github.com/root-project/root/issues/13815#issuecomment-1759250811) is that after the execution of `TClass::GetClass(""B<NS::A<int>>"")` (i.e at the end of line 2), `Cling` should NOT be holding an instantiation of the trait (not sure which)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13815#issuecomment-1766925765:628,detect,detection,628,https://root.cern,https://github.com/root-project/root/issues/13815#issuecomment-1766925765,1,['detect'],['detection']
Safety,"In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,; and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not; take a `bool optConst` argument anymore. Ths is because the value of; the argument that was passed by the RooMinimizer instance was always a; member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because; `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration; such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11695:57,redund,redundancies,57,https://root.cern,https://github.com/root-project/root/pull/11695,2,"['avoid', 'redund']","['avoid', 'redundancies']"
Safety,"In line with what it's done for jitted filters, now the jitting; of custom columns creates the RCustomColumn and assigns it as the; fConcreteCustomColumn of the corresponding RJittedCustomColumn that; was previously booked.; This avoids having the situation in which a certain custom column; has been ""booked"" but is not yet present in the map of custom columns. It will also help with the ""local custom columns"" that are coming; with ROOT-9465.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2239:230,avoid,avoids,230,https://root.cern,https://github.com/root-project/root/pull/2239,1,['avoid'],['avoids']
Safety,In methods like `FindBranch` or `GetBranch` nullptr as argument causing failure. Avoid casting to `(char *)`. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10882:81,Avoid,Avoid,81,https://root.cern,https://github.com/root-project/root/pull/10882,1,['Avoid'],['Avoid']
Safety,"In my analysis program I faced a memory leak which was caused by `TH3::DoProject2D` according to `valgrind --leak-check=full` and independently by simple git dissection. Valgrind report:; ```; ==24570== 114,000 (5,160 direct, 108,840 indirect) bytes in 5 blocks are definitely lost in loss record 16,382 of 16,451; ==24570== at 0x483FF3F: operator new(unsigned long) (vg_replace_malloc.c:422); ==24570== by 0x4D9CEF9: TStorage::ObjectAlloc(unsigned long) (in /opt/ROOT-6.24.06/lib/libCore.so.6.24.06); ==24570== by 0x577B7DF: TH3::DoProject2D(char const*, char const*, TAxis const*, TAxis const*, bool, bool, bool, bool) const (in /opt/ROOT-6.24.06/lib/libHist.so.6.24.06); ==24570== by 0x5776AA7: TH3::Project3D(char const*) const (in /opt/ROOT-6.24.06/lib/libHist.so.6.24.06); ```. So I quickly looked at the source code and found TH2D objects are created with the new operator but newer deleted.; https://github.com/root-project/root/blob/1f9dc812978722660f4a5f8310e0ca5fdf442ebe/hist/hist/src/TH3.cxx#L2114. Usually this if-branch in this function is avoided because TH2 is already created (if I understand the code above correctly), but I unfortunately chose the same name for all of my TH3 hists. [Here](https://github.com/root-project/root/files/8488019/report.txt) is my code which causes the memory leak.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10400:1055,avoid,avoided,1055,https://root.cern,https://github.com/root-project/root/issues/10400,1,['avoid'],['avoided']
Safety,"In old versions of RooFormula, one could mutate the internal formula; object from the outside. This was unsafe. Therefore, the visibility of; formula() was reduced.; It can, however, be beneficial to have at least read access. Therefore,; a const overload of the function was provided to give users access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6250:104,unsafe,unsafe,104,https://root.cern,https://github.com/root-project/root/pull/6250,1,['unsafe'],['unsafe']
Safety,In order to avoid packaging errors from rpmlint:; root.x86_64: E: incorrect-fsf-address /usr/share/emacs/site-lisp/root/root-help.el,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/270:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/270,1,['avoid'],['avoid']
Safety,"In order to avoid thread-safety issues, the static class member; TClass::fgCallingNew is no longer a class member and is instead; a file scoped static declared thread_local. It was necessary to; not have it is a class member since CINT could not parse the new; thread_local keyword.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/11,2,"['avoid', 'safe']","['avoid', 'safety']"
Safety,"In order to avoid {namespace std} interfering with following include files,; when generating a dictionary file add the {using namespace std;} only after; GenerateNecessaryIncludes method is called. Since many legacy root header files do require this global {using namespace std;}; to complete the tests, old behaviour is kept by default and the global; {using namespace std} can be avoided by adding -noGlobalUsingStd to rootcling invocation. Allow passing ACLiC RootCling flags via .rootrc (Vassil). This is a special patch tailored for v6-20-02",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5510:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/5510,2,['avoid'],"['avoid', 'avoided']"
Safety,"In order to avoid {namespace std} interfering with following include files,; when generating a dictionary file declare the {namespace std} only after; GenerateNecessaryIncludes method is called",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5296:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/5296,1,['avoid'],['avoid']
Safety,"In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11719:263,sanity check,sanity check,263,https://root.cern,https://github.com/root-project/root/pull/11719,1,['sanity check'],['sanity check']
Safety,"In other PR @amadio made comment:. > We do want to use the source directory includes when possible. But there is problem with several generated headers like `RConfigure.h` - is it the only one?; Only because of it we have to add `$ROOTSYS/include` in ROOT build paths.; Ending in situation, that every header available twice - via source dir and via '$ROOTSYS/include` dir. This should be avoided in any case. I propose a solution - generate RConfigure.h in special directory like `${CMAKE_BINARY_DIR}/generated_includes` and copy it into `${CMAKE_BINARY_DIR}/includes`. And in the list of include paths for ROOT libraries only source dirs and `${CMAKE_BINARY_DIR}/generated_includes` should be used.; Do we agree on this? . @amadio @vgvassilev @Axel-Naumann @oshadura",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5170#issuecomment-600617968:389,avoid,avoided,389,https://root.cern,https://github.com/root-project/root/pull/5170#issuecomment-600617968,1,['avoid'],['avoided']
Safety,"In particular, `RJitted{Action,Filter,Define}::Run` and similar functions; can be performance hotspots. Avoid the nullptr check there. Many thanks to Josh Bendavid for reporting the problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9258:104,Avoid,Avoid,104,https://root.cern,https://github.com/root-project/root/pull/9258,1,['Avoid'],['Avoid']
Safety,"In preparation of moving TError to foundation, this PR removes the direct use of gEnv and gSystem from TError. The functionality is implemented by helper functions instead, which are registered and de-registered upon creation and destruction gEnv and gSystem. The three tasks implemented by helpers are. - Read the ROOT environment in order to get the value of `Root.ErrorIgnoreLevel`; - Get the last system error message; - Abort the process",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5855:425,Abort,Abort,425,https://root.cern,https://github.com/root-project/root/pull/5855,1,['Abort'],['Abort']
Safety,"In rare cases, when processing a TChain and producing a Snapshot,; no entry in the first input TTree passes all Filters, so we never; have the chance to create the branches of the output TTree.; As a consequence, when switching from the first file to the next,; TTree::CopyAddresses fails to find the corresponding branches in; the output tree (which was added as its clone via TTree::AddClone),; and prints a warning (that can be safely ignored). We now instead add the output tree of a Snapshot as a clone of the; input tree more lazily, only when we first process an entry (if ever).; This removes the aforementioned warning, reported at #6848.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7121:431,safe,safely,431,https://root.cern,https://github.com/root-project/root/pull/7121,1,['safe'],['safely']
Safety,"In reply to: https://github.com/root-project/root/pull/8703#issuecomment-920044106. > You mean keeping the average of the last $x$ MB written per column? . Not quite, I meant simply an overall average, i.e. simply keeping `total_number_of_bytes` and `total_number_of_compressed_bytes` for each column and then average compression ration is a simple division. But ... actually ... closer to the original proposal is simply the ""total_number_of_bytes_in_all_flushed_clusters"" and ""corresponding_compressed_size"" (i.e. a per RNtuple running total). However this makes me thing of another (potential more noticeable) instability. If there is 2 columns; column A with an constant/average compression ration of 100 and column B with a constant/average compression ration of 1 (or 1.1 :) ) but both columns are collections. If for most of the entries (for more proposal) or only the last cluster (for the PR's proposal), column A has a lot of data and column B has very little data, then the compression ration use for prediction will be 100 (ish). If suddenly the cardinality flip/flop and column A has very little data but column B has a lot of data, then the compression ration of that cluster will be 1 but it would still contains `100 * target_cluster_size_in_compressed_bytes`, namely in this case 100 times larger (on disk) than any other cluster. Obviously this is an extreme example but it points to the benefit of using `per column` compression ratio rather than overall compression ratio (whether it is whole-ntuple or last (few) clusters). The cost for implementation seems to be that after each `Fill`, each column would have to increment a (global-per-RNtuple) counter with `data_written / estimated_compression_ratio` which:; * for collection column should be a small over-head; * for single value column should be a large over-head. however conversely, an accurate estimate is ""only important"" for collection column, so maybe an hybrid solution is a workable compromise?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8703#issuecomment-920229853:1012,predict,prediction,1012,https://root.cern,https://github.com/root-project/root/pull/8703#issuecomment-920229853,2,['predict'],['prediction']
Safety,"In the RooBatchCompute CPU library, all scalar inputs have to be copied; n times into a buffer that is as long as the SIMD registers, to allow; for vectorization in all cases. To avoid frequent memory allocations, this buffer was made a `static`; variable in the original implementation of the batchcompute library,; which of course made it non-threadsafe. This is now hitting us, because RooFit needs to be able to do multiple; fits concurrently. This is a requirement for CMSSW, and a blocker for; ROOT master adoption in CMSSW since the new CPU backend is the default:; https://github.com/cms-sw/cmsdist/pull/9034. This commit fixes the concurrency problem by doing the buffering in the; DataMaps that are used in the `RooFit::Evaluator`. Like this, multiple; computation graphs can be concurrently evaluated. It was tested with the ATLAS benchmarks in `rootbench` that the fitting; performance remains the same. This PR also makes some code style and memory management improvements documented in the commit messages. It also updates the documentation to make clear the new CPU backend is now the default, which was not done in this PR:; https://github.com/root-project/root/pull/14742",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14877:179,avoid,avoid,179,https://root.cern,https://github.com/root-project/root/pull/14877,1,['avoid'],['avoid']
Safety,"In the RooChi2Var and the related `createChi2` functions in RooAbsReal; and RooAbsPdf, the `DataError` was not explained precisely enough. This commit changes the documentation of the RooChi2Var constructor to; exactly explain what is going on, and the the documentation of the; `createChi2` is updated to link to the RooChi2Var documentation to avoid; code duplication. This commit also replaces some LaTeX formulae from titiles in the; documentation because they are not rendered there. Closes #8615.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10914:346,avoid,avoid,346,https://root.cern,https://github.com/root-project/root/pull/10914,1,['avoid'],['avoid']
Safety,"In the `RooRealIntegral` constructor, there was a `O(N^2)` operation on; the computation graph, checking the dependency of the top-level function; on each other node. This is very expensive in the numer of RooAbsArgs N; is large. Instead of calling `dependsOnValue` for each leaf node, which is; very expensive because it's a recursive function, the value server; leaves are all put in a RooArgSet before the leaf iteration to check; quickly if a leaf is also a value server. This change speeds up the `createNLL` step of large models like the; ATLAS Higgs combination by at least a factor of two or three. In the same PR, I also bring a little other commit, where the ownership of the `cloneSet` in `cloneTree` is released before removing the top node element, in order to avoid ownership ambiguities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10959:774,avoid,avoid,774,https://root.cern,https://github.com/root-project/root/pull/10959,1,['avoid'],['avoid']
Safety,"In the `master` nightlies on Ubuntu 22.04, we see some warnings caused by civentweb:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastBuild/parsed_console/. ```; warning: ‘SHA1_Init’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; 12345 | SHA1_Init(&sha_ctx);; warning: ‘SHA1_Update’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; warning: ‘SHA1_Final’ is deprecated: Since OpenSSL 3.0 [-Wdeprecated-declarations]; ```. Usage of these deprecated functions has been removed in the civetweb master branch:; https://github.com/civetweb/civetweb/pull/1072. Hence, once civetweb 1.16 is out, the code should by synchronized again with the ROOT repository to avoid these warnings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10403:773,avoid,avoid,773,https://root.cern,https://github.com/root-project/root/issues/10403,1,['avoid'],['avoid']
Safety,"In the current implementation of `RooDataSet::reduceEng`, the dataset; itself was queried to get the weight variable used in the reduced; dataset. This didn't work with the `RooCompositeDataStore`, because a; dataset with this data store doesn't have a weight variable, as these; are encapsulated in the components of the composite store. Hence,; reducing a weighted dataset with a RooCompositeDataStore yields an; unweighted dataset, which is a bug. To fix this problem, this commit implements a separate reduction logic; for the RooCompositeDataStore: the components are now reduced; individually, instead of naively creating a RooCompositeDataStore from a; RooVectorDataStore/RooTreeDataStore. To avoid further code branches in; RooDataSet, a new virtual function `RooAbsDataStore::reduce` is; introduced. The first two commits update the data reduction implementation details such the bugfix is easier to implement (see commit messages for more details). This closes https://github.com/root-project/root/issues/6951.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10397:700,avoid,avoid,700,https://root.cern,https://github.com/root-project/root/pull/10397,1,['avoid'],['avoid']
Safety,"In the implementation of `RooAbsArg::recursiveRedirectServers` a static variable was used to check for cyclic recursion. This is not thread safe an should be avoided. The problem is solved by creating a new `recursiveRedirectServersImpl` function that takes the `callStack` variable also as an argument, and this variable is instantiated separately in each `recursiveRedirectServers` call. Since the code was touched and moved anyway, the implementation of `recursiveRedirectServers` was formatted with clang-format.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11970:140,safe,safe,140,https://root.cern,https://github.com/root-project/root/pull/11970,2,"['avoid', 'safe']","['avoided', 'safe']"
Safety,"In the implementation of `RooHistPdf::plotSamplingHint`, some of the; returned values can be outside the variable definition range. This might; lead to invalid evaluations when the sampling hints are also used to; evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:; consider only bin boundaries that are strictly between the plot limits; within some epsilon, and for the limits just sample two additional; points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this; change, because the sampling changes the RooPlots that are used as; reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11701:798,avoid,avoids,798,https://root.cern,https://github.com/root-project/root/pull/11701,2,"['avoid', 'redund']","['avoids', 'redundancy']"
Safety,"In the jitted version of the `Vary` transformation a node is allocated on the heap and its address is passed down to the function `JitVariationHelper`, which is also responsible for deleting the allocated memory. In case a mismatch in the return type of the jitted function given to the Vary call is detected, we throw an error to inform the user they should return an RVec for the Vary to properly work. This means that the call to JitVariationHelper does not happen, thus the memory of the node is not deallocated. This commit corrects that behaviour by properly deleting the pointer before throwing the exception. Thanks to the address sanitizer:; ```; Direct leak of 16 byte(s) in 1 object(s) allocated from:; #0 0x7f28c78d9e28 in operator new(unsigned long) (/lib64/libasan.so.8+0xd9e28) (BuildId: 2b657470ea196ba4342e3bd8a3cc138b1e200599); #1 0xb711e0 in std::shared_ptr<ROOT::Detail::RDF::RNodeBase>* ROOT::Internal::RDF::MakeSharedOnHeap<ROOT::Detail::RDF::RNodeBase>(std::shared_ptr<ROOT::Detail::RDF::RNodeBase> const&) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/InterfaceUtils.hxx:370; #2 0xb843a8 in ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager, void>::JittedVaryImpl(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::basic_string_view<char, std::char_traits<char> >, bool) /home/vpadulan/Programs/rootproject/rootbuild/master-a73f11dfc5-testing-asan/include/ROOT/RDF/RInterface.hxx:3108; ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15477:300,detect,detected,300,https://root.cern,https://github.com/root-project/root/pull/15477,1,['detect'],['detected']
Safety,"In the last screen shot, the ""no lock held"" in the write is suspicious. It is suppose to have take the write lock in `AddLast` line 158. For the lock to be missed, it would need to have been executed before the thread-safety was enable or before the list was made thread-safe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365#issuecomment-875959511:218,safe,safety,218,https://root.cern,https://github.com/root-project/root/issues/8365#issuecomment-875959511,2,['safe'],"['safe', 'safety']"
Safety,"In the previous PR https://github.com/root-project/root/pull/7344, the biggest challenge has been to make `RooAbsOptTestStatistic` aware if batch mode is enabled to skip the cache optimization. The cleanest way of disabling the cache optimization is to do so directly in the `RooAbsOptTestStatistic` constructor so it is skipped. Unfortunately, the constructor of `RooAbsOptTestStatistic` and its base class `RooAbsTestStatistic` has already a very long signature, and it is already challenging to correctly align all parameters correctly with the position they should have. That's why I propose in this PR to use a struct to group all `RooAbsTestStatistic` parameters. This has several advantages:; * the struct can be initialized with tagged initialization, so alignment errors can be easily avoided; * if a new parameter is added (such as the `batchMode` flag in this PR), only the configuration struct declaration struct needs to be changed; * the default values are defined in a central place and not redundantly in all the relevant constructor declarations/`RooAbsTestStatistic::create` overrides. To make the review easier, this PR only includes the configuration refactor and disabling the cache optimization is batch mode is used. The `RunContextTracker`-related commits would follow in a separate PR, but I already tested that everything together does work and the unit test I created for the `RunContextTracker` succeeds. Two open questions are still:; * the `RooNLLVar::_batchEvaluations` flag is now redundant, but I still kept it to not have to change class versions too often. Is this acceptable?; * the new `RooAbsTestStatistic::_batchMode` takes part in the IO, entailing an increment of the class version. I that acceptable? The advantage here is that if one reads back a serialized RooFit workspace, it can remember if batch mode is used",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7616:794,avoid,avoided,794,https://root.cern,https://github.com/root-project/root/pull/7616,3,"['avoid', 'redund']","['avoided', 'redundant', 'redundantly']"
Safety,"In the v6.26 development cycle cycle, some RooFit helper header files; whose names don't start with the `Roo` prefix sneaked into the; RooFitCore library. These headers have the overly generic names; `Floats.h` and `UniqueId.h`, which calls for trouble in environments; where the ROOT headers are directly installed in the main system include; path (most Linux distributions). To prevent any possible issues, this commit proposes and follows new; conventions for RooFit headers:. * Installed RooFit headers must start with `Roo*` or must be located; in a subdirectory starting with `Roo*` (e.g. RooFit or RooStats).; * Similarly, if the class name doesn't start with Roo, it has to go in; a `Roo*` namespace (usually `RooFit`); * Free functions always need to go in this namespace; * For implmentation details that we can't avoid installing, we can use; a `Roo*::Detail` namespace like we have with `ROOT::Detail` (same; with `Experimental`). We should also keep in mind what we established in PR #9078:. * `inc/` is for installed headers; * `res/` is for headers that are only used at compile time of other; ROOT components; * Headers only used within a library go to `src/`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9394:824,avoid,avoid,824,https://root.cern,https://github.com/root-project/root/pull/9394,1,['avoid'],['avoid']
Safety,"In today's team meeting we discussed this PR and reached the following conclusion:; * This PR is too big and the many changes will hinder backporting.; * To avoid the many formatting changes, I shall apply this clang-tidy fix and leave the `virtual` keyword, so the function names do not move.; * No clang-format.; * For this and future automatic refactorings, we will focus on the newer parts of ROOT, which are in .hxx files and source files starting with 'R' (with some exceptions).; * We will try these refactorings on parts of ROOT first, like the Tree library.; * I will close this PR and open a new one with a new changeset.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6007#issuecomment-671415694:157,avoid,avoid,157,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-671415694,1,['avoid'],['avoid']
Safety,"In what situation is `R__HAS_STD_SPAN` not sufficient? If `ROOT` has been configured to build in C++20 mode and properly installed, it must be set in `RConfigure.h`. If it is not set, this means that the `ROOT` code will use an alternative to `std::span` (because at configure and build time, it detected it was not available).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311#issuecomment-1252699407:296,detect,detected,296,https://root.cern,https://github.com/root-project/root/pull/11311#issuecomment-1252699407,1,['detect'],['detected']
Safety,"Incidentally, couldnt one avoid that loop over the bits at that bit of the code by just doing `count += nbits[fAllBits[startByte]>>ibit]` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7988#issuecomment-825756214:26,avoid,avoid,26,https://root.cern,https://github.com/root-project/root/pull/7988#issuecomment-825756214,1,['avoid'],['avoid']
Safety,Increase test timeout,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10886:14,timeout,timeout,14,https://root.cern,https://github.com/root-project/root/pull/10886,1,['timeout'],['timeout']
Safety,Increase thread safety to fix RBatchGenerator tutorials segfaults,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13302:16,safe,safety,16,https://root.cern,https://github.com/root-project/root/pull/13302,1,['safe'],['safety']
Safety,Increase timeout for PPC64,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6246:9,timeout,timeout,9,https://root.cern,https://github.com/root-project/root/pull/6246,1,['timeout'],['timeout']
Safety,"Indeed there is a complex logic doing exactly the opposite of what is requested in this issue. **On purpose** the error bars are drawn from the limit of the empty markers to avoid seeing them inside the marker. In the example given here, it is marker 4 which behaves differently from the others and might be fixed. But 24 is an empty circle too and produces the right drawing. I propose to close this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14549#issuecomment-1940926553:174,avoid,avoid,174,https://root.cern,https://github.com/root-project/root/issues/14549#issuecomment-1940926553,1,['avoid'],['avoid']
Safety,"Indeed, @pcanal invested a lot of time to avoid these cases but we still have to allocate some memory on making lookups.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13130#issuecomment-1619504965:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/issues/13130#issuecomment-1619504965,1,['avoid'],['avoid']
Safety,"Indeed, this shows no ZeroMQ symbols in `libRooFitZMQ.so` or `libRooFitMultiProcess.so`, nor in the new `libRooFitCore.so` of #9349, so it seems we are safe. @guitargeek Indeed, in #9349, `roofit_multiprocess` will be switched off. In the coming release, people can start trying it out and it could be defaulted ON later on, when the ZeroMQ release with `zmq_ppoll` has also happened.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9078#issuecomment-985532273:152,safe,safe,152,https://root.cern,https://github.com/root-project/root/pull/9078#issuecomment-985532273,1,['safe'],['safe']
Safety,"Initial problem - static array `gLbc`, filled every time file dialog created new with entries with `StrDup`.; Was fixed with first commit. Then replace `char *` by `std::string` and avoid `StrDup`. And finally replace static array by `std::vector` - cleanup automatically when file dialog closed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7337:182,avoid,avoid,182,https://root.cern,https://github.com/root-project/root/pull/7337,1,['avoid'],['avoid']
Safety,"Initialization of a function static variable is guaranteed to be; done in a thread safe manner by the C++11 standard. Previously, the; static was initialized to 0 and then reset which lead to a data race.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/48:83,safe,safe,83,https://root.cern,https://github.com/root-project/root/pull/48,1,['safe'],['safe']
Safety,"Initializing RooBatchCompute takes over a second when CUDA is also; available on the system. It is unreasonable to do this everytime the; RooFit library is loaded. For example, the time of small unit tests was; completely dominated by the RooBatchCompute initialization time before; this commit. This change entailed another change in `Buffers.cxx` to avoid static; initialization problems. If possible, I'll still try to backport this to the release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9915:352,avoid,avoid,352,https://root.cern,https://github.com/root-project/root/pull/9915,1,['avoid'],['avoid']
Safety,"Inject the ""_tls_array"" constant (0x2C) symbol to avoid unresolved symbol er…",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1804:50,avoid,avoid,50,https://root.cern,https://github.com/root-project/root/pull/1804,1,['avoid'],['avoid']
Safety,Inspired by this forum post:; https://root-forum.cern.ch/t/install-root-in-my-directory-in-a-share-server/60150/2. We can simply require the needed components to avoid manual checking and emitting `FATAL_ERROR`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16008:162,avoid,avoid,162,https://root.cern,https://github.com/root-project/root/pull/16008,1,['avoid'],['avoid']
Safety,"Instead of aborting after `R__ASSERT` fails, a proper exception is now thrown when the `RNTupleInspector` detects inconsistent compression across columns or clusters. Additionally, this PR improves the documentation related to this. N.B. Because at this point there is no way to have different compression across columns or clusters, no tests for checking this assumption have been added yet. When at one point this becomes possible, this should obviously be added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13401:11,abort,aborting,11,https://root.cern,https://github.com/root-project/root/pull/13401,2,"['abort', 'detect']","['aborting', 'detects']"
Safety,"Instead of aborting on an `R__ASSERT`, with this patch RNTuple throws a meaningful exception when trying to open a file that was generated in an incompatible, future format. Fixes lazy loading of the model in `RNTupleReader::LoadEntry()` along the way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7739:11,abort,aborting,11,https://root.cern,https://github.com/root-project/root/pull/7739,1,['abort'],['aborting']
Safety,Instead of exposing `TF1FunctorPointer` and `TMethodCall` you can also outline all constructors and the destructor of `TF1`. Given that construction and destructions isn't a hot call that would be my preferred solution - especially as it also avoids having to expose `TF1FunctorPointer` to the dictionary. Did / can you try that?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7035#issuecomment-762122876:243,avoid,avoids,243,https://root.cern,https://github.com/root-project/root/pull/7035#issuecomment-762122876,1,['avoid'],['avoids']
Safety,"Instead, split the code RDataFrame jits every 1k newlines and jit; in chunks. This avoids an explosion in the time required by; optimizer passes, which seem to not deal well with very large; function bodies. See https://github.com/root-project/root/issues/9312 and; https://github.com/root-project/root/issues/7604 for more discussion. @hahnjo can you confirm this helps? It brings jitting times down to reasonable (<1m times) for the cases I tested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9328:83,avoid,avoids,83,https://root.cern,https://github.com/root-project/root/pull/9328,1,['avoid'],['avoids']
Safety,"Intentional. An `std::string` has a single-char array representation underlying it, which is a Python `bytes` object, not a `str`, which is unicode. The point of `repr()` is to be able to provide a `str` object from which the original object can be reconstructed. That, therefore, has to be a `bytes` representation. The point of `str()` is to provide something that looks pretty and informational, which in practice is more likely to be a decoded `str`, hence that choice. Specifically, b/c unicode isn't properly implemented in any C++ standard string class, it's common practice to place an encoded unicode string into `std::string`. Regardless, even if it contains unencoded ASCII, whenever a C++ `std::string` is represented as a Python `str`, it needs decoding. However, no information is available on the encoding scheme. It's typically safe to assume an UTF-8 encoding b/c ASCII is a subset, but there's no guarantee. Hence the current implementation tries to avoid decoding as much as possible and only does so when absolutely necessary (e.g. when doing string comparisons or, as in this example, when calling `str()`). The implementation of `std::string` has been Pythonized so that it can be used as a drop-in replacement wherever a `str` object is expected, with the exception of when you do anything type specific, such as `repr()`, `type()`, and `isinstance()`, where it will represent as an `std::string`, which it is. For CERN, none of this is likely to matter as all European languages are encodable UTF-8 AFAIK. The most common language, in my experience, where this assumption fails is Chinese. (Edit: I read up on it and turns out that *all* languages are encodable in UTF-8, it's just that that encoding is designed to be space-efficient for Latin languages, but is rather inefficient for Asian languages, hence the common choice of different encodings there.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15153#issuecomment-2040504962:844,safe,safe,844,https://root.cern,https://github.com/root-project/root/issues/15153#issuecomment-2040504962,2,"['avoid', 'safe']","['avoid', 'safe']"
Safety,Interpreter::TCling::AutoParse>: Starting autoparse for HepMC::Flow. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::Flow; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::Flow. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::Flow; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::Flow. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::Flow; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::Flow. Info in <TInterpreter::TCling::AutoLoad>: Explicitly disabled (the class name is HepMC::Flow); TClass::GetClass: Header Parsing - The representation of HepMC::Flow was not found in the type system. A lookup in the interpreter is about to be tried: this can cause parsing. This can be avoided selecting HepMC::Flow in the linkdef/selection file.; Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenEvent; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenEvent. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenEvent; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenEvent. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenEvent; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenEvent. Info in <TInterpreter::TCling::AutoParse>: Trying to autoparse for HepMC::GenEvent; Info in <TInterpreter::TCling::AutoParse>: Starting autoparse for HepMC::GenEvent. ,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910#issuecomment-1268084280:8083,avoid,avoided,8083,https://root.cern,https://github.com/root-project/root/pull/10910#issuecomment-1268084280,1,['avoid'],['avoided']
Safety,"Introduce a new connectivity check macro to only check for internet connection if needed. If the connection check fails, it means that the feature requiring the; internet connection has to be disabled. This is not allowed when; `fail-on-missing=ON`. Therefore, we can raise the fatal error already in; the connectivity check macro, to avoid some code repetition. The connectivity check macro takes parameter to propagate a hint; to the user on what option to set if he wants to avoid the configuration; code branch that requires the connection check. Also, move all connection check related things in; `SearchInstalledSoftware` to keep things simpler. This PR implements something suggested by @pcanal in this comment: https://github.com/root-project/root/pull/15467#discussion_r1596973607. Closes #11603.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16594:335,avoid,avoid,335,https://root.cern,https://github.com/root-project/root/pull/16594,2,['avoid'],['avoid']
Safety,"Introduce a new method to get a label for the data source that the current RDataFrame is processing. There are three major types:; * The dataframe will process a TTree dataset; * The dataframe will process an empty dataset; * The dataframe will process data from an RDataSource. The function returns a label with the suffix ""DS"" also for the first two cases, to be aligned as much as possible with the RDataSource infrastructure. Make use of this function in distributed RDataFrame to create the headnode of the Python computation graph. This also avoids extra parsing in the factory function which includes opening the first input file once more to distinguish between TTree or RNTuple input (in case the first input argument is a string).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15554:548,avoid,avoids,548,https://root.cern,https://github.com/root-project/root/pull/15554,1,['avoid'],['avoids']
Safety,"Introduce an internal elper class to build a map object that only uses `std::vector`, which can be implicitly converted to `std::map` in C++. This avoids using `std::map` in pythonizations, which can cause assertion failures in Windows debug builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16156:147,avoid,avoids,147,https://root.cern,https://github.com/root-project/root/pull/16156,1,['avoid'],['avoids']
Safety,"Introduce special handler for connecting and disconnecting events; Avoid usage of predefined ""CONN_READY"" and ""CONN_CLOSED"" arguments; Adjust existing widgets and tutorials; These changes in callbacks **brakes backward compatibility** - in my mind, it was necessary. Hide RWebWindowsManager for ordinary users - provide convenience `RWebWindow::Create()` and `RWebWindow::TerinateROOT()` methods. Now one can include just `ROOT/RWebWindow.hxx` to get all necessary functionality. Provide tutorial with simple openui5 panel - of course, using new methods",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4035:67,Avoid,Avoid,67,https://root.cern,https://github.com/root-project/root/pull/4035,1,['Avoid'],['Avoid']
Safety,Introduced by https://github.com/root-project/root/commit/617f5fb4fab9b92b2a95e506b4801364473672bc. The change to a variable length size was not properly propagated to the rest of the `TBranch::Init` function. Fixes the recent ubuntu24 failures of the type; ```; 2400/2509 Test #2432: roottest-root-tree-branches-make ..................................................................***Failed 1.79 sec; -- TEST COMMAND -- ; cd /github/home/ROOT-CI/roottest/root/tree/branches; /usr/bin/timeout -s USR2 1770s /usr/bin/gmake cleantest; -- BEGIN TEST OUTPUT --; /usr/bin/gmake -f Makefile test; gmake[1]: Entering directory '/github/home/ROOT-CI/roottest/root/tree/branches'; ; Processing runnoname.C...; Warning in <TBranch::TBranch>: No name was given to the leaf number '1' in the leaflist of the branch 'nhitshcal'.; *** buffer overflow detected ***: terminated; Aborted (core dumped); gmake[1]: Leaving directory '/github/home/ROOT-CI/roottest/root/tree/branches'; ```. as seen for example [here](https://github.com/root-project/root/actions/runs/9201038116/job/25308591312#step:11:26510),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15620:487,timeout,timeout,487,https://root.cern,https://github.com/root-project/root/pull/15620,3,"['Abort', 'detect', 'timeout']","['Aborted', 'detected', 'timeout']"
Safety,Is that possible to use the precompilled version of root either on Linux or Mac to avoid installation issues?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-693443249:83,avoid,avoid,83,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-693443249,1,['avoid'],['avoid']
Safety,Is this still needed? Can we safely merge?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1162#issuecomment-346836497:29,safe,safely,29,https://root.cern,https://github.com/root-project/root/pull/1162#issuecomment-346836497,1,['safe'],['safely']
Safety,It fully duplicates TPave::fName member and not required here; Detected in JSON code for TPaletteAxis class,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7490:63,Detect,Detected,63,https://root.cern,https://github.com/root-project/root/pull/7490,1,['Detect'],['Detected']
Safety,It is a minor fix but I though it would be nice to have the complete list since; I always forget the style names for polymarkers and use this documentation as; a reference. May also save someone else's time by avoiding a lookup in the; header file.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/98:210,avoid,avoiding,210,https://root.cern,https://github.com/root-project/root/pull/98,1,['avoid'],['avoiding']
Safety,"It is broken by design, there is no way that this interface can; be used in a safe way. Just get rid of it.# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12166:78,safe,safe,78,https://root.cern,https://github.com/root-project/root/pull/12166,1,['safe'],['safe']
Safety,"It is now base class for `RLegend`, `RPaveText`, `RHistStatsBox`.; Main functionality - consistent positioning relative to the `RFrame`. ; But also drawing without frame is possible - in that case just default frame position will be used.; Plus interactive moving of `RPave` around. Improve `RLegend` class. Now it correctly drawn and can be interactively moved.; Also one can configure custom attributes disregard of other drawables.; Also special I/O mechanism is used to avoid large data transfer of RLegend::REntry - ; referenced drawable ""masked out"" before streaming. Introduce `RPaveText` class. Update JSROOT code correspondingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5897:474,avoid,avoid,474,https://root.cern,https://github.com/root-project/root/pull/5897,1,['avoid'],['avoid']
Safety,"It is now possible to create independent TMVA::Readers and use; them simultaneously on different threads.; Training of MVAs is still only safe single-threaded. In addition,; it is not safe to use multiple instances of MethodCFMlpANN either; single or multi-threaded because of a global 'this' pointer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/25:138,safe,safe,138,https://root.cern,https://github.com/root-project/root/pull/25,2,['safe'],['safe']
Safety,"It is true that in the past versions TEfficiency was added automatically to gDIrectory. ; Although I am not keen on this, I think it would be better to maintain the past behavior.; The commit causing this was https://github.com/root-project/root/commit/ab9b80a651d458f5cf64d8d9aa5708495c00da4e; which was done to fix some thread issue and to avoid using the global `TH1::AddDirectoryStatus`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9189#issuecomment-964342093:342,avoid,avoid,342,https://root.cern,https://github.com/root-project/root/issues/9189#issuecomment-964342093,1,['avoid'],['avoid']
Safety,"It looks like the ""easy"" solution to add these 2 lines in the end of `Finalize` *work*. Cannot tell if it can go unsafe:; ```cpp; for (auto it = ++fGraphs.begin(); it != fGraphs.end(); ++it); delete *it;; ```; (and `fGraphAsymmErrors` for the other class accordingly)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10484#issuecomment-1112308278:113,unsafe,unsafe,113,https://root.cern,https://github.com/root-project/root/issues/10484#issuecomment-1112308278,1,['unsafe'],['unsafe']
Safety,"It makes recovery of column values slightly faster, which is visible in rootbench.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6325:9,recover,recovery,9,https://root.cern,https://github.com/root-project/root/pull/6325,1,['recover'],['recovery']
Safety,"It performs asynchronous canvas update. In case of web-based canvas triggers update of the canvas; on the client side, but does not wait that real update is completed.; Avoids blocking of caller thread.; Have to be used if called from other web-based widget to avoid logical; dead-locks. In case of normal canvas just canvas->Update() is performed. Use it in `RFitPanel` and `RBrowser`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13552:169,Avoid,Avoids,169,https://root.cern,https://github.com/root-project/root/pull/13552,2,"['Avoid', 'avoid']","['Avoids', 'avoid']"
Safety,It was deprecated (by comment) and emptied in year 2000. This patch removes all uses of it and 'registers' it to the modulemap to avoid our duplication algorithms do not find it as a duplicate.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2500:130,avoid,avoid,130,https://root.cern,https://github.com/root-project/root/pull/2500,1,['avoid'],['avoid']
Safety,"It will be central method to paint any primitive on specified pad. To support all kinds of old implementations in TObject class Paint() method will be implemented as:; ```; void TObject::Paint(Option_t *opt); {; if (gPad) ; PaintOn(gPad);; }; ```. Main trick will be painting of pad primitives. There one can use semi-standard method to detect ; if custom `Paint()` method implemented for the object. If yes - such old `Paint()` will be invoked.; ```; if ((void *) (obj->*(&TObject::Paint)) != (void *) (&TObject::Paint)); obj->Paint(lnk->GetOption());; else; obj->PaintOn(this, lnk->GetOption());; ```. If class converted into new scheme - `Paint()` method **MUST** be re removed and replaced by new `PaintOn()`. This is very important to support sub-classes of classes like `TLine` or `TBox`. `TLine::PaintOn()` implemented from very beginning, but `SubClass::Paint()` will exists. Calling scheme will be: `SubClass::Paint()` -> `TObject::Paint()` -> `TLine::PaintOn()`. Step-by-step in all ROOT classes one will implement `PaintOn()` methods - without breaking any existing code.; PR shows example with several ""simple"" classes how it can be done. . During ROOT code modifications graphics continues to work as before. ; But contentiously usage of `gPad` will be reduced.; Main goal - `gPad` should not be touched when painting ROOT classes. ; Only to support arbitrary user classes one will keep `TObject::PaintOn()` as shown. After code conversion is completed, one can declare ; special methods which are using `gPad` (like `TLine::PaintLineNDC()`) deprecated and ; advertise use of new methods (like `TLine::PaintLineNDCOn()`). Ultimate goal - painting of main ROOT classes do not touch `gPad` and thus will be really thread-safe. Interactive methods (like moving stats box around) will still rely on `gPad`, ; but this pointer will not be touched during any re-painting and will remain consistent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15937:337,detect,detect,337,https://root.cern,https://github.com/root-project/root/pull/15937,2,"['detect', 'safe']","['detect', 'safe']"
Safety,"It would be better, if you rename TClientInfo -> TMPIClientInfo to avoid confusion",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4375#issuecomment-530319854:67,avoid,avoid,67,https://root.cern,https://github.com/root-project/root/pull/4375#issuecomment-530319854,1,['avoid'],['avoid']
Safety,"It would be great if the `F.ModuleName` could be printed out when this assert fires. https://github.com/root-project/root/blob/dfbe5ae4f74a197182feb28b2b9052b73e7a3f45/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp#L4018. Would make it much easier to understand that one has to for example `export ROOT_INCLUDE_PATH=${VC_HOME}/include` because the Vc module was not found, instead of guessing about what is happening from this. ```; genconf: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Serialization/ASTReader.cpp:4018: clang::ASTReader::ASTReadResult clang::ASTReader::ReadModuleMapFileBlock(clang::ASTReader::RecordData&, clang::ASTReader::ModuleFile&, const ModuleFile*, unsigned int): Assertion `M && M->Name == F.ModuleName && ""found module with different name""' failed.; --; /bin/sh: line 1: 158369 Aborted                 (core dumped) ../run /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/genconf --configurable-module=GaudiKernel.Proxy --configurable-default-name=Configurable.DefaultName --configurable-algorithm=ConfigurableAlgorithm --configurable-algtool=ConfigurableAlgTool --configurable-auditor=ConfigurableAuditor --configurable-service=ConfigurableService -o genConfDir/GaudiKernel -p GaudiKernel -i /build/jenkins/workspace/lcg_nightly_pipeline/build/frameworks/Gaudi-master/src/Gaudi-master-build/GaudiKernel/libtest_CustomFactory.so. ```. Root version: This is ROOT master",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12138:901,Abort,Aborted,901,https://root.cern,https://github.com/root-project/root/issues/12138,1,['Abort'],['Aborted']
Safety,"It would greatly help memory safety if ROOT could use more smart pointers in its interfaces. However, the automatic downcasting of returned values is only working for raw pointers. It should work for smart pointers as well. For example, right now this doesn't work:; ```Python; class ClassA {; public:. ClassDef(ClassA, 0);; };. class ClassB : public ClassA {; public:; void helloB() {}. ClassDef(ClassB, 0);; };. ClassA *fooRawPtr() { return new ClassB{}; }. std::unique_ptr<ClassA> fooUniquePtr() { return std::make_unique<ClassB>(); }; ```; Output:; ```txt; <class cppyy.gbl.ClassB at 0x5e1ddf85ed20>; Traceback (most recent call last):; File ""/home/rembserj/repro.py"", line 30, in <module>; out_2.helloB(); ^^^^^^^^^^^^; AttributeError: 'ClassA' object has no attribute 'helloB'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16210:29,safe,safety,29,https://root.cern,https://github.com/root-project/root/issues/16210,1,['safe'],['safety']
Safety,"It's also version-checked for precisely those older PyPy interpreters that require the compatibility layer:. ```; version = sys.pypy_version_info; if version[0] == 5:; if 6 < version[1] <= 8:; pypy58_57_compat(); elif version[1] == 9:; py59_compat(); ```. so even if/when PyPy supports 3.12, it's still a non-issue. At some point, this code may be safely removed, especially as I've had zero time to work on the PyPy end of things, but as-is, it's harmless.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14824#issuecomment-1964569486:348,safe,safely,348,https://root.cern,https://github.com/root-project/root/issues/14824#issuecomment-1964569486,1,['safe'],['safely']
Safety,"It's fair to say that in my example the missing explicit destructor is the issue. So yes, in this particular case, since `ROOT::Internal::TaskArenaWrapper` doesn't have a public constructor, I guess just having a custom implementation for the constructor and destructor is fine. In the end my point still stands. If you need to anyway put a custom implementation of all constructors/destructor into your source file, you might as well avoid using a smart pointer. As I still maintain that smart pointers in such cases are just not a good fit.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7062#issuecomment-762864629:435,avoid,avoid,435,https://root.cern,https://github.com/root-project/root/pull/7062#issuecomment-762864629,1,['avoid'],['avoid']
Safety,"It's not great that we have to consider all these redundant overloads. I would suggest getting rid of them first, to keep the interface clean and consistent:; * https://github.com/root-project/root/pull/16443; ; What do you think, @lmoneta?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16437#issuecomment-2353578161:50,redund,redundant,50,https://root.cern,https://github.com/root-project/root/pull/16437#issuecomment-2353578161,1,['redund'],['redundant']
Safety,"It's not necessary because the data token is not set for `RooRealVar`s to begin with:; https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooFit/Evaluator.cxx#L185. And by not doing this unnecessary resetting, we avoid potential crashes in case the `RooRealVar`s live not as long as the evaluator.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15844:233,avoid,avoid,233,https://root.cern,https://github.com/root-project/root/pull/15844,1,['avoid'],['avoid']
Safety,"I’ve recently updated my ROOT version to v6.20.06 and my once working code snippet to plot several pdf components on the same canvas broke. No matter if I select the pdf components by object reference or by name, i.e. by:. ```; modelTot.plotOn(frame, RooFit::Components(“ modelBkgTotTrig*”),; FillColor(93), LineColor(93), DrawOption(“F”));; ```. or by:. ```; modelTot.plotOn(frame, RooFit::Components(RooArgSet(expo)),; FillColor(93), LineColor(93), DrawOption(“F”));; ```. I get:. ```; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelTot0) directly selected PDF components: (modelBkgTotTrig0); [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelTot0) indirectly selected PDF components: (); terminate called after throwing an instance of 'std::regex_error'; what(): Unexpected character in brace expression.; Aborted (core dumped); ```. It looks like they are found but then the regex_error appears.; Is this a known issure or shall I do something different to select the pdfs to plot?. Thanks,; Davide",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7115:802,Abort,Aborted,802,https://root.cern,https://github.com/root-project/root/issues/7115,1,['Abort'],['Aborted']
Safety,"JBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=NTi7%2BFO82QY6dKBp1en9fAODpFl%2FzZ0cHCZ3DsJzOIM%3D&reserved=0>; >>> ; >>> curl performs SSL certificate verification by default, using a ""bundle""; >>> of Certificate Authority (CA) public keys (CA certs). If the default; >>> bundle file isn't adequate, you can specify an alternate file; >>> using the --cacert option.; >>> If this HTTPS server uses a certificate signed by a CA represented in; >>> the bundle, the certificate verification probably failed due to a; >>> problem with the certificate (it might be expired, or the name might; >>> not match the domain name in the URL).; >>> If you'd like to turn off curl's verification of the certificate, use; >>> the -k (or --insecure) option.; >>> ***@***.*** t5]$ ; >> ; >> ; >> I am unfamiliar with how to use curl with X509 and everything I tried so far has not worked. eg; >> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643157499%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=56%2Fzdx8AYUMDio2HJ6lKgj%2BEhDVoS5nYEh69aXHYZS8%3D&reserved=0> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem; >> or; >> curl -v https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fwebdav.lcg.triumf.ca%3A2880%2Fatlas%2Fatlaslocalgroupdisk%2Frucio%2Fuser%2Fdesilva%2Fa1%2Fa8%2FmyFile.1.root&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643157499%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiL",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839972447:5433,safe,safelinks,5433,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839972447,1,['safe'],['safelinks']
Safety,Jenkins failed because I aborted it. The changes are only comments.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6836#issuecomment-729646855:25,abort,aborted,25,https://root.cern,https://github.com/root-project/root/pull/6836#issuecomment-729646855,1,['abort'],['aborted']
Safety,"Jenkins is green, the failures on the new CI seem unrelated (Windows has `Failed to open the S3 connection: You must provide an auth secret.`, Fedora is a timeout in a distrdf test). Given that this PR fixes a recurring failure in nightlies/PR builds, I will go ahead and merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14800#issuecomment-1962144958:155,timeout,timeout,155,https://root.cern,https://github.com/root-project/root/pull/14800#issuecomment-1962144958,1,['timeout'],['timeout']
Safety,"Just a reminder that when writing (new) function that break const-ness, one need to consider the consequence on thread-safety (i.e. in first approximation the user might expect that if they do only const calls to an another it is safe to make them from multiple threads). .. humm actually this is odder ... the return type of genData is a const pointer. Do we know even know why?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1721#issuecomment-371797064:119,safe,safety,119,https://root.cern,https://github.com/root-project/root/pull/1721#issuecomment-371797064,2,['safe'],"['safe', 'safety']"
Safety,"Just a short summary of our discussion in https://github.com/xrootd/xrootd/issues/1495. 1. Threads in xrootd client:. - `XRD_PARALLELEVTLOOP` is by default set to 1, and is the number of event-loop threads handling the async I/O; in some cases e.g. if the xrootd client is interacting with many servers (as it does in case of XCache) a single event loop can become CPU bound and in those scenarios it makes sense to use multiple event-loops; - `XRD_WORKERTHREADS` is by default set to 3, and is the number of threads in the thread-pool used to call completion handlers; - there is also the `TaskManager` thread, which runs various timers, amongst others responsible for the request timeouts; - in case of `xrdcp` there is also the main execution thread. 2. `XRD_PARALLELEVTLOOP`; The XRD_PARALLELEVTLOOP, it is the parallel number of event loops the client is using. In case of single event loop, all socket I/O events are processed by a single thread, in general this is good because we avoid context switching (as opposed to synchronous I/O). However in some cases this can lead to a situation where the client becomes CPU bound. For example imagine xrdcp is copying data between two very fast servers (say 100GE, with ramdisk or optane). In a setup like this the event-loop will be receiving new I/O events faster than it is able to process them and as a results will limit the transfer rate. If we use 2 event-loops on the other hand, the source and the destination I/O events will be handled by separate threads/event-loops which could result in 2x faster I/O event processing (I measured 2.5GB/s vs 4.5GB/s). Similar effect could be also observed if your application is using `XRootD` client to fetch data in parallel from multiple locations.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7709#issuecomment-910143432:682,timeout,timeouts,682,https://root.cern,https://github.com/root-project/root/issues/7709#issuecomment-910143432,2,"['avoid', 'timeout']","['avoid', 'timeouts']"
Safety,"Just for the records, working with a software that uses ROOT as a library and switching on the address sanitiser in our unit tests, we get the following report with all `6.28.XX` versions:; ```; ==15==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 8792 byte(s) in 75 object(s) allocated from:; #0 0x7ff05e914887 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cpp:145; #1 0x7ff04609ad21 in clang::Parser::AnnotateTemplateIdToken(clang::OpaquePtr<clang::TemplateName>, clang::TemplateNameKind, clang::CXXScopeSpec&, clang::SourceLocation, clang::UnqualifiedId&, bool, bool) (/SMASH/root_install/lib/libCling.so+0x15b5d21). SUMMARY: AddressSanitizer: 8792 byte(s) leaked in 75 allocation(s).; ```; **Using ROOT `6.26.10` does not display the problem.**. I am not sure this is exactly the same problem of this issue, but I did not want to open a new issue at first as in the description `clang::Parser::AnnotateTemplateIdToken` is part of the Valgrind output. If you need more information from my side, feel free to ask.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13130#issuecomment-1798152115:223,detect,detected,223,https://root.cern,https://github.com/root-project/root/issues/13130#issuecomment-1798152115,1,['detect'],['detected']
Safety,"Just to be on the safe side I will not merge this PR until I have time to check with the people who saw the building errors before, probably next week (if not possible, after CSC)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2723#issuecomment-426270761:18,safe,safe,18,https://root.cern,https://github.com/root-project/root/pull/2723#issuecomment-426270761,1,['safe'],['safe']
Safety,Kindly run the ROOT CI TEST action in order to avoid conflicts.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13394#issuecomment-1664399238:47,avoid,avoid,47,https://root.cern,https://github.com/root-project/root/pull/13394#issuecomment-1664399238,1,['avoid'],['avoid']
Safety,"LGTM if the bots are green. I'd expect, in long term, to avoid calling the entire routine.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/912#issuecomment-326300629:57,avoid,avoid,57,https://root.cern,https://github.com/root-project/root/pull/912#issuecomment-326300629,1,['avoid'],['avoid']
Safety,"LGTM, basically we need to carry around the pointers to the leaves we have already visited, and discard any new leaf that has the same pointer. The overall logic stays the same with this extra check to avoid the leaf duplicates.; I shared some more ROOT files with @imaxoi to test his code with other trees.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2443#issuecomment-411053878:202,avoid,avoid,202,https://root.cern,https://github.com/root-project/root/pull/2443#issuecomment-411053878,1,['avoid'],['avoid']
Safety,"LLVM had a bug where constructors with the same priority would not be stably sorted. This has been fixed upstream by https://github.com/llvm/llvm-project/pull/95532, but to avoid relying on a backport this commit works around the issue: The idea is that we lower the default priority of concerned constructors to make them sort correctly. ---. As discussed, this provides a bit of magic :magic_wand: to work around the bug if we don't have the backport, for example in the Conda releases. I propose we still leave the backport in our copy of LLVM though.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16420:173,avoid,avoid,173,https://root.cern,https://github.com/root-project/root/pull/16420,1,['avoid'],['avoid']
Safety,"LLVM had a bug where constructors with the same priority would not be stably sorted. This has been fixed upstream by; https://github.com/llvm/llvm-project/pull/95532, but to avoid relying on a backport this commit works around the issue: The idea is that we lower the default priority of concerned constructors to make them sort correctly. (cherry picked from commit https://github.com/root-project/root/commit/7db43f776d191807c1e4893312fabce7c60160bd, backport of https://github.com/root-project/root/pull/16420)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16462:174,avoid,avoid,174,https://root.cern,https://github.com/root-project/root/pull/16462,1,['avoid'],['avoid']
Safety,"LRngWrapper` pointer and thus invokes its dtor as well. However, `~GSLRngWrapper()` frees the allocated memory only if `fOwn` pointer is set to true, which is only set so in the assignment operator, but not in the `Allocate()` member function. Therefore, the `GSLMCIntegrator` class is leaking memory. This poses a problem, when doing a large number of integrations inside a for loop. The leak was discovered by running valgrind and inspecting the code. Minimal example:; ```cpp; #include <Math/GSLMCIntegrator.h> // ROOT::Math::GSLMCIntegrator. /* built with:. g++ -ggdb3 -Og `root-config --cflags` mcintegrator.cpp -o mcintegrator \; `root-config --libs` -lMathMore. */. int; main(); {; for(unsigned i = 0; i < 20000; ++i); {; ROOT::Math::GSLMCIntegrator vegas(""vegas"", 0., 1.e-1, 10);; }; return 0;; }; ```. Before fix:; ```; valgrind --tool=memcheck --leak-check=full --show-leak-kinds=definite \; --undef-value-errors=no ./mcintegrator. ==12320== Memcheck, a memory error detector; ==12320== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==12320== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info; ==12320== Command: ./mcintegrator; ==12320==; ==12320==; ==12320== HEAP SUMMARY:; ==12320== in use at exit: 100,655,858 bytes in 44,260 blocks; ==12320== total heap usage: 67,782 allocs, 23,522 frees, 101,539,078 bytes allocated; ==12320==; ==12320== 99,089,984 (319,984 direct, 98,770,000 indirect) bytes in 19,999 blocks are definitely lost in loss record 3,515 of 3,515; ==12320== at 0x4C2BE7F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so); ==12320== by 0xAD090F2: gsl_rng_alloc (in /usr/lib/libgsl.so.23.0.0); ==12320== by 0x8223765: Allocate (GSLRngWrapper.h:99); ==12320== by 0x8223765: ROOT::Math::GSLMCIntegrator::GSLMCIntegrator(char const*, double, double, unsigned int) (GSLMCIntegrator.cxx:117); ==12320== by 0x108BF5: main (mcintegrator.cpp:8); ==12320==; ==12320== LEAK SUMMARY:; ==12320== definitely lost: 319,984 bytes in 19,9",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/928:1281,detect,detector,1281,https://root.cern,https://github.com/root-project/root/pull/928,1,['detect'],['detector']
Safety,"Last point - when I generate signature ClassName(*((__void__*)nullptr)), I get warning from cling:; ```; binding dereferenced null pointer to reference has undefined behavior [-Wnull-dereference]; ```; How one can avoid it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5133#issuecomment-598202387:214,avoid,avoid,214,https://root.cern,https://github.com/root-project/root/pull/5133#issuecomment-598202387,1,['avoid'],['avoid']
Safety,"Latest commit includes small modification suggested by Enrico, also including a more homogeneous approach wrt sanity checks across the three functions, i.e. anytime `TChain::GetListOfFiles` is called, the check `if (!chainFiles || chainFiles->GetEntries() == 0)` is present and throws an error if true, according to what was previously done in function `GetTreeFullPaths` only",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7785#issuecomment-814890257:110,sanity check,sanity checks,110,https://root.cern,https://github.com/root-project/root/pull/7785#issuecomment-814890257,1,['sanity check'],['sanity checks']
Safety,Let avoid compiler warnings if sub-project compiled with `-Wsuggest-override` . Only some classes are adjusted,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10444:4,avoid,avoid,4,https://root.cern,https://github.com/root-project/root/pull/10444,1,['avoid'],['avoid']
Safety,"Let's see how this goes now that we are back on the old externals... I would prefer avoiding the smart pointers with ROOT 6 interfaces, because I'm sure there are corner cases where it will lead to problems, and I pointed out some of it in previous comments. Other than that, I once this PR is ready for merge, the typos, etc, should be amended into the right commits.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-333487667:84,avoid,avoiding,84,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-333487667,1,['avoid'],['avoiding']
Safety,"Like the tests added in https://github.com/root-project/root/pull/15499/commits/e00aded416c4d8b0c364035353dfb529602fd0e1, these are also sanity checks meant in part as code-as-documentation for users to see how things work. It turns out in this case that GCC on the one hand and Clang and MSVC on the other hand have two different solutions for binary arithmetic operations on two NaNs. In both cases, one of the two NaNs is returned, but in one case it's the first, in the other is it's the second. The tests added in this commit will hopefully warn RooNaNPacker users of this behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15908:137,sanity check,sanity checks,137,https://root.cern,https://github.com/root-project/root/pull/15908,1,['sanity check'],['sanity checks']
Safety,"Link to compilation error:; https://epsft-jenkins.cern.ch/view/ROOT%20Nightly/job/root-nightly-master/1977/LABEL=mac1012,SPEC=noimt/parsed_console/. The error is due to a bug in clang3.5, reproducible in isolation:; https://godbolt.org/z/jtYXv6. The workaround is to avoid specifying the template parameters of a; template base class -- the full type is injected in the derived class; anyway (thanks Axel!).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3098:267,avoid,avoid,267,https://root.cern,https://github.com/root-project/root/pull/3098,1,['avoid'],['avoid']
Safety,"Linux and macOS passed in the new CI, and Windows passed on Jenkins (plus some Linux and macOS builds), so I'm going to merge this slightly early to avoid the annoying warning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13073#issuecomment-1602756936:149,avoid,avoid,149,https://root.cern,https://github.com/root-project/root/pull/13073#issuecomment-1602756936,1,['avoid'],['avoid']
Safety,List of changes in JSROOT. 1. Fix - abort tree draw operation faster. 1. Fix - catch exception when parsing TF1 formula; 2. Fix - properly check THStack histograms axes when doing sum; 3. Fix - correctly handle negative offset on time axis; 4. Fix - do not use `inset` because of old Chrome browsers; 5. Fix - properly provide object hints. 1. Fix - draw histograms with negative bins #276; 2. Fix - correctly read TLeaf with fixed-size array; 3. Fix - bug in options handling in startGUI; 4. Fix - greyscale support in TLegend drawing; 5. Fix - correctly use text font for TGaxis title; 6. Fix - preserve auto colors in THStack #277; 7. Fix - correctly set pave name #278,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14804:36,abort,abort,36,https://root.cern,https://github.com/root-project/root/pull/14804,1,['abort'],['abort']
Safety,Long time ago this protection was introduced to avoid parsing of complex SQL includes.; With a cling this protection no longer work properly.; Remove it completely,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5255:48,avoid,avoid,48,https://root.cern,https://github.com/root-project/root/pull/5255,1,['avoid'],['avoid']
Safety,"Looking at the code again, I believe the following should be more obvious and easier to understand in the future:; ```c++; std::string canonicalLoadedLib;; if (resolved) {; canonicalLoadedLib = libStem.str();; } else {; canonicalLoadedLib = lookupLibrary(libStem);; if (canonicalLoadedLib.empty()); return kLoadLibNotFound;; }; ```; That should also avoid copying the string twice.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10593#issuecomment-1129730852:350,avoid,avoid,350,https://root.cern,https://github.com/root-project/root/pull/10593#issuecomment-1129730852,1,['avoid'],['avoid']
Safety,"Looking at the code, it was probably the idea at some point in the `RooAbsData` design that the ownership of the variables in the dataset can be shared, i.e. that the outside world can ""claim"" and ""release"" the variables in a RooAbsData. If anything else is still claiming the variables, they will not be deleted by the RooAbsData destructor. That's quite messy. For example, if the RooAbsData is destructed before the external ""claimers"" releases the variables, the claimers suddenly has the responsability to delete the variables themselves. And who of them should do it then? The ownership model is completely unclear. This and other reasons explain probably why the; `RooAbsData::claimVars()` and `RooAbsData::releaseVars()` are not used at all outside the RooAbsData, and this commit suggests to remove these memory-unsafe functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13179:821,unsafe,unsafe,821,https://root.cern,https://github.com/root-project/root/pull/13179,1,['unsafe'],['unsafe']
Safety,"Looking for LZMA; -- Looking for X11; -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR); -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR); -- Could NOT find PNG (missing: PNG_LIBRARY PNG_PNG_INCLUDE_DIR); -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR); -- Building AfterImage library included in ROOT itself; -- Looking for LibXml2; -- Downloading and building XROOTD version; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; -- Building LLVM in 'Release' mode.; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_0.9; -- Cling will look for C++ headers in '/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10:/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/x86_64-suse-linux:/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/backward' at runtime.; -- And then fallback to: 'clang-12.0.0'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Failed; -- Performing Test found_stdexpstringview; -- Performing Test found_stdexpstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Failed; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Failed; -- Performing Test found_stdindexsequence; -- ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8097:3288,detect,detection,3288,https://root.cern,https://github.com/root-project/root/issues/8097,1,['detect'],['detection']
Safety,"Looking into that. This kind of overlap where all the vertices of one shape are outside (or worse on the surface) of the other can be missed, because TGeo does not generate points on the surface of the solids (as the Geant4 checker). Some overlaps like this can be detected if increasing the number of points generated on the segments connecting adjacent vertices, using:; `gGeoManager->SetNmeshPoints(N); // where the default is 1000, so N has to be larger`; This does not help in this particular case. Note that this is not a bug, but a known limitation of the algorithm used in ROOT, having a strategy to allow some false negatives to gain checking speed. I'll see if something can be done w/o producing false positives.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6556#issuecomment-704316189:265,detect,detected,265,https://root.cern,https://github.com/root-project/root/issues/6556#issuecomment-704316189,1,['detect'],['detected']
Safety,Looks like `TThread` is not able to correctly detect python thread id?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15498#issuecomment-2149507064:46,detect,detect,46,https://root.cern,https://github.com/root-project/root/issues/15498#issuecomment-2149507064,1,['detect'],['detect']
Safety,Looks like all these tests are failed because of timeout?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7932#issuecomment-823968745:49,timeout,timeout,49,https://root.cern,https://github.com/root-project/root/pull/7932#issuecomment-823968745,1,['timeout'],['timeout']
Safety,"Looks like the mac build just got aborted. I will remove the LLVM change, since it's in a separate PR and re-run Jenkins.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4342#issuecomment-528731373:34,abort,aborted,34,https://root.cern,https://github.com/root-project/root/pull/4342#issuecomment-528731373,1,['abort'],['aborted']
Safety,"MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.0.0/include -compilerI/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -I/Users/suter_a/Applications/root/root_exec/include -I/opt/local/include -I/Users/suter_a/Applications/musrfit/src/include -I/Users/suter_a/Applications/musrfit/src/classes PUserFcnBase.h /Users/suter_a/Applications/musrfit/src/include/PUserFcnBaseLinkDef.h; dyld[7935]: Library not loaded: @rpath/libRIO.so; Referenced from: /Users/suter_a/Applications/root/root_exec/bin/rootcling; Reason: tried: '/usr/local/lib/libRIO.so' (no such file), '/usr/lib/libRIO.so' (no such file); Subprocess aborted; make[2]: *** [src/classes/PUserFcnBaseDict.cxx] Error 1; make[1]: *** [src/classes/CMakeFiles/PUserFcnBase.dir/all] Error 2; make: *** [all] Error 2. root v6-26 with patch; ---------------------; cd /Users/suter_a/Applications/musrfit/build/src/classes && /opt/local/bin/cmake -E env DYLD_LIBRARY_PATH=/Users/suter_a/Applications/root/root_exec/lib: /Users/suter_a/Applications/root/root_exec/bin/rootcling -v2 -f PUserFcnBaseDict.cxx -s /Users/suter_a/Applications/musrfit/build/src/classes/libPUserFcnBase.dylib -rml libPUserFcnBase.dylib -rmf /Users/suter_a/Applications/musrfit/build/src/classes/libPUserFcnBase.rootmap -inlineInputHeader -I/opt/local/include -I/Users/suter_a/Applications/musrfit/src/include -DPNEXUS_ENABLED -compilerI/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk/usr/include/c++/v1 -compilerI/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/13.0.0/include -compilerI/Applications/X",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10062#issuecomment-1061481610:2080,abort,aborted,2080,https://root.cern,https://github.com/root-project/root/issues/10062#issuecomment-1061481610,1,['abort'],['aborted']
Safety,Made TIsAProxy thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/49:22,safe,safe,22,https://root.cern,https://github.com/root-project/root/pull/49,1,['safe'],['safe']
Safety,Made calling TGenCollectionStreamer::Generate thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/57:53,safe,safe,53,https://root.cern,https://github.com/root-project/root/pull/57,2,['safe'],['safe']
Safety,"Made obtaining the list of enums from a TClass thread safe. As part of that, made all the statics used as return values by TCling to be thread_local.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/55:54,safe,safe,54,https://root.cern,https://github.com/root-project/root/pull/55,1,['safe'],['safe']
Safety,Made reading/writing ROOT files thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12:39,safe,safe,39,https://root.cern,https://github.com/root-project/root/pull/12,1,['safe'],['safe']
Safety,Made smatrix code thread safe by removing statics,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/20:25,safe,safe,25,https://root.cern,https://github.com/root-project/root/pull/20,1,['safe'],['safe']
Safety,Main GUI-related classes should be collected in `core/gui` folder.; Avoid situation like TToggle class situated in `core/meta` subfolder,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4543:68,Avoid,Avoid,68,https://root.cern,https://github.com/root-project/root/pull/4543,1,['Avoid'],['Avoid']
Safety,"Make ConditionalObservables accept RooRealVars directly by perfect forwarding all arguments to the RooArgSet constructor. Using ConditionalObservables command argument failed with some Python 3; versions due to ownership problems with the RooArgSet. This commit suggests to always make a copy of (or move) the passed RooArgSet,; and at the same time to change the function signature such that; it can also accept an arbitrary number of observables directly via; variadic templates. This change is to fix the RooFit python tutorial failures in the current nightlies. Note, @Harshalzzzzzzz, that you can reuse this pattern also for the other RooGlobalFuncs, as it also makes calling them more pythonic. For example, with ConditionalObservables, you can now use a tuple (or list) of arguments:; ```Python; effPdf.fitTo(data, ConditionalObservables=(x, y)); ```; instead of:; ```Python; effPdf.fitTo(data, ConditionalObservables=ROOT.RooArgSet(x, y)); ```; although the latter syntax still works because it will use the RooArgSet copy constructor (or move constructor if it's a temporary and detected as such in Python). So we don't break any existing code. This example is from the [rf702_efficiencyfit_2D.py](https://github.com/root-project/root/blob/master/tutorials/roofit/rf702_efficiencyfit_2D.py) tutorial.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8416:1088,detect,detected,1088,https://root.cern,https://github.com/root-project/root/pull/8416,1,['detect'],['detected']
Safety,Make G__FastAllocString cache thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/34:37,safe,safe,37,https://root.cern,https://github.com/root-project/root/pull/34,1,['safe'],['safe']
Safety,Make TCheckHashRecurveRemoveConsistency thread-safe for RecursiveRemo…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1339:47,safe,safe,47,https://root.cern,https://github.com/root-project/root/pull/1339,2,['safe'],['safe']
Safety,Make TClass::fIsAMethod setting thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/28:39,safe,safe,39,https://root.cern,https://github.com/root-project/root/pull/28,1,['safe'],['safe']
Safety,Make TClass::fStreamerImpl thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/51:34,safe,safe,34,https://root.cern,https://github.com/root-project/root/pull/51,1,['safe'],['safe']
Safety,Make TListOfFunctions::Get thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/118:34,safe,safe,34,https://root.cern,https://github.com/root-project/root/pull/118,1,['safe'],['safe']
Safety,Make TMVA thread-safe with respect to use of Reader,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/25:17,safe,safe,17,https://root.cern,https://github.com/root-project/root/pull/25,1,['safe'],['safe']
Safety,Make TSystem::CompileMacro thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13655:34,safe,safe,34,https://root.cern,https://github.com/root-project/root/pull/13655,1,['safe'],['safe']
Safety,Make string caching in RLoopManager thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15652:43,safe,safe,43,https://root.cern,https://github.com/root-project/root/pull/15652,1,['safe'],['safe']
Safety,Make sure we're using the macOS-native framework version in the OpenGL case. See:; * https://cmake.org/cmake/help/latest/module/FindOpenGL.html#macos-specific; * https://github.com/root-project/root/blob/master/cmake/modules/SearchInstalledSoftware.cmake#L22. This avoids indirectly picking up a X11 dependency by using some other OpenGL installed on the system.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15435:265,avoid,avoids,265,https://root.cern,https://github.com/root-project/root/pull/15435,1,['avoid'],['avoids']
Safety,Make tutorial filenames unique to avoid overwrites,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3029:34,avoid,avoid,34,https://root.cern,https://github.com/root-project/root/pull/3029,1,['avoid'],['avoid']
Safety,"Manually aborted ""ROOT-debian10-i386/cxx14"" due to huge backlog.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5444#issuecomment-618626306:9,abort,aborted,9,https://root.cern,https://github.com/root-project/root/pull/5444#issuecomment-618626306,1,['abort'],['aborted']
Safety,"Many improvements in CEF:; - support POST requests, let transfer arbitrary data from client to server; - replace text-based cefQuery messaging by longpoll, required for binary transfer; - assign X11 error handler to avoid application abort in case of minor X11 warnings; - use single-process mode in batch to reduce number of running processes. Provide special handling of batch mode for Chrome and Firefox:; - both support `--headless` mode completely without X ; - very simple workaround to stop browser after 30 s with `timeout 30 chromium ...` command; - let configure custom shell commands via `.rootrc` parameters. Changes in http and webgui libraries:; - ""hide"" TCivetweb, TFastCgi, THttpWSEngine classes from end-user (@Axel-Naumann); - remove some comments from civetweb.c (@amadio); - use std::copy() instead of memcpy() for std::string (@Axel-Naumann); - introduce simple key identification of clients, let recognize which client starts by TWebWindow::Show(); - simplify cmake files, separate v7 code in FitPanel",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1886:216,avoid,avoid,216,https://root.cern,https://github.com/root-project/root/pull/1886,3,"['abort', 'avoid', 'timeout']","['abort', 'avoid', 'timeout']"
Safety,Many thanks Simon. That worked. . Axel:. ***@***.*** ~]$ curl -v --show-error --cacert /tmp/x509up_u`id -u` --connect-timeout 300 --max-time 3600 --capath /etc/grid-security/certificates --cert /tmp/x509up_u`id -u` --key /tmp/x509up_u`id -u` -L https://webdav.lcg.triumf.ca:2880/atlas/atlaslocalgroupdisk/rucio/user/desilva/a1/a8/myFile.1.root -o /dev/null; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0* About to connect() to webdav.lcg.triumf.ca port 2880 (#0); * Trying 2607:f8f0:660:3::40...; * Connected to webdav.lcg.triumf.ca (2607:f8f0:660:3::40) port 2880 (#0); * Initializing NSS with certpath: sql:/etc/pki/nssdb; * failed to load '/etc/grid-security/certificates/7022e3c4.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/69105f4f.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CERN-Root-2.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/69105f4f.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertGridRootCA-Root.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/edca0fc0.signing_policy' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CNRS2-Projets.info' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.namespaces' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/CESNET-CA-Root.crl_url' from CURLOPT_CAPATH; * failed to load '/etc/grid-security/certificates/DigiCertAssuredIDRootCA-Root.signi,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840048181:118,timeout,timeout,118,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840048181,1,['timeout'],['timeout']
Safety,"Many thanks. Jiang Yi ***@***.***> 于 2023年6月5日周一 05:15写道：. > @jalopezg-git <https://github.com/jalopezg-git> Sorry for the late reply.; > I am still trying to fix some corner cases while avoiding too intrusive; > changes. I will update the pull request soon.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/pull/11265#issuecomment-1576431258>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ACN3SSVEF3GLBPRSV2CHAELXJWPUNANCNFSM573UE76Q>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11265#issuecomment-1577084075:187,avoid,avoiding,187,https://root.cern,https://github.com/root-project/root/pull/11265#issuecomment-1577084075,1,['avoid'],['avoiding']
Safety,"May be the following `sed` line in `listlibs.sh`. ```; grep ""Collaboration diagram for"" /Users/couet/rootdoc/html/classTWriteEnvParser.html | sed -e ""s/:<\/div>.*$//"" | sed -e ""s/^.*Collaboration diagram for /\.\/makelibs.sh /""; ```; might be safer to get the class name ?; I am not sure how it translates in the new scheme though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1080770169:243,safe,safer,243,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1080770169,1,['safe'],['safer']
Safety,May be we wait Monday to merge ? always a bit risky to merge just before the week end .....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4151#issuecomment-524287543:46,risk,risky,46,https://root.cern,https://github.com/root-project/root/pull/4151#issuecomment-524287543,1,['risk'],['risky']
Safety,"Maybe it is better to have a unique method to scale and translate, i.e. passing to coefficient c1 and c2 and do c1*y+c2, and by default c2=0. This would avoid adding more functions to all the TGRaph objects.; On the other hand it is easy to operate to the TGraph content, since the underlined vectors are exposed and the user can easily modify them.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8143#issuecomment-946816815:153,avoid,avoid,153,https://root.cern,https://github.com/root-project/root/pull/8143#issuecomment-946816815,1,['avoid'],['avoid']
Safety,Maybe related with thread safety? Can you run it with helgrind? Or do you get the same error with ROOT::EnableThreadSafety() activated?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8767#issuecomment-888648258:26,safe,safety,26,https://root.cern,https://github.com/root-project/root/issues/8767#issuecomment-888648258,1,['safe'],['safety']
Safety,Maybe related: https://discuss.dizzycoding.com/passing-command-line-arguments-to-argv-in-jupyter-ipython-notebook/. A quick fix might be to detect if these scripts are run within a notebook and skip the argparse part?. Taken from: https://gist.github.com/gbishop/acf40b86a9bca2d571fa; ```; # try to detect that I'm in a notebook; try:; __IPYTHON__; except NameError:; inIPython = False; else:; inIPython = True; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10430#issuecomment-1105774034:140,detect,detect,140,https://root.cern,https://github.com/root-project/root/issues/10430#issuecomment-1105774034,2,['detect'],['detect']
Safety,Maybe this can help with timeouts such as https://github.com/root-project/root/actions/runs/8645662018/job/23703294577?pr=15200,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15209:25,timeout,timeouts,25,https://root.cern,https://github.com/root-project/root/pull/15209,1,['timeout'],['timeouts']
Safety,Mention that it is thread-safe and can be called after some data has already been written. Explain that the model is cloned internally and therefore recommend `RNTupleModel::CreateBare`. FYI @makortel @Dr15Jones,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15235:26,safe,safe,26,https://root.cern,https://github.com/root-project/root/pull/15235,1,['safe'],['safe']
Safety,"Minor optimization found by looking at profiles a while ago... `GetSpecialProtocols()` takes the global lock, so it's best to avoid calling it too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4357:126,avoid,avoid,126,https://root.cern,https://github.com/root-project/root/pull/4357,1,['avoid'],['avoid']
Safety,"Minuit2 uses the Pimpl idiom with a shared_ptr to avoid frequent copies, but the implementation is not good. The full interface of each class is duplicated, which is not necessary and makes the code confusing and difficult to change. This patch simplifies the implementation but keeps the semantics the same. This patch is a precursor of some improvements that I have prepared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7882:50,avoid,avoid,50,https://root.cern,https://github.com/root-project/root/pull/7882,1,['avoid'],['avoid']
Safety,Missing Lock Error Detection for TCollection,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/647:19,Detect,Detection,19,https://root.cern,https://github.com/root-project/root/pull/647,1,['Detect'],['Detection']
Safety,Modified signal handler to avoid async-unsafe functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/96:27,avoid,avoid,27,https://root.cern,https://github.com/root-project/root/pull/96,2,"['avoid', 'unsafe']","['avoid', 'unsafe']"
Safety,"More info to add:. On godbolt, clang 16.0.0 (unfortunately no 16.0.6 available) aborts with SIGSEGV, but clang 18.1.0 is fine. https://godbolt.org/z/dKfsfh44j. Also just for reference, the number of times `var0` is summed is 4096.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15818#issuecomment-2162404947:80,abort,aborts,80,https://root.cern,https://github.com/root-project/root/issues/15818#issuecomment-2162404947,1,['abort'],['aborts']
Safety,Most leaks are due to wrong management of allocated `char*` buffers via StrDup - thats how I detect them. Better to be applied after #4874,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4887:93,detect,detect,93,https://root.cern,https://github.com/root-project/root/pull/4887,1,['detect'],['detect']
Safety,"Moves from fixed page sizes on write to adaptive page sizes, following the original idea of @hahnjo . The new mechanism is explained in the tuning.md document in the PR. The PR also bumps the target compressed cluster size to 150MB. We may want to reduce that still. Evaluation of the new method is currently ongoing and the PR description will be amended with the results. EDIT: [Comparison](https://docs.google.com/spreadsheets/d/1maJhgvgVU8RkX7QXd7B3QiTBfKuYbTbvgkoHzBUOurY/edit?usp=sharing) of current write performance vs adaptive page sizes with 50MB, 100MB, 150MB target cluster size. To me it seems that there is not a good argument to go to 150 MB clusters. There may be an argument for 100 MB clusters. For the moment, I'll remove the commit that changes the default settings from the PR. An additional flavor, `adaptive / exp`, is included in the table to test the effect of flushing _foreign columns_. In the experimental mode, columns only flush themselves, which simplifies the `RWritePageMemoryManager` and avoids the upcall from the sink to the column. There is a small positive effect of foreign flushes on the file size in the nanoAOD sample. The effect is more visible for the number of pages. The memory consumption is slightly smaller without foreign column flushes. I'll see if I can construct an example that shows better the advantage of foreign column flushes (or not). As expected, the memory savings become visible for large EDMs (e.g., nanoAOD in this set of samples).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16311:1022,avoid,avoids,1022,https://root.cern,https://github.com/root-project/root/pull/16311,1,['avoid'],['avoids']
Safety,"Moving `RooMath` to RooBatchCompute caused linker errors for users that; we want to avoid: RooBatchCompute is a RooFit implementation detail and; we don't want poeple to link against it. For this reason, RooMath is moved back into RooFitCore, and the; Faddeeva implementation that is also used in RooBatchCompute is split; off into a new file `faddeeva_impl.h` that is not part of the public; interface.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10359:84,avoid,avoid,84,https://root.cern,https://github.com/root-project/root/pull/10359,1,['avoid'],['avoid']
Safety,"Much of the functionality of RooAddition and RooAddPdf is implemented in exactly the; same way as in RooRealSumPdf. Hence, to avoid code duplication, we can; reuse the static functions in RooRealSumPdf that provide this; implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10851:126,avoid,avoid,126,https://root.cern,https://github.com/root-project/root/pull/10851,1,['avoid'],['avoid']
Safety,"My 2 cents:. 1. It is extremly weird/ a bug that the webgui needs to depend on `TObject`.; 2. `RBrowserDataCleanup` derives from `TObject`, so it *must* have a `ClassDef` as per https://root.cern/manual/io_custom_classes/#the-classdef-macro . I am not sure about what using `ClassDefInline` as suggested by @pcanal would change; 2a. Can `RBrowserDataCleanup` just avoid inheriting from `TObject` completely? ; 3. `RBrowserData` has a dictionary and allows I/O, as it is defined in `LinkDef.h`, so it is only natural that its data members need a dictionary as well. As @hahnjo commented, the particular error coming from a `std::tuple` is due to the fact that the class uses ` std::unique_ptr<RBrowserDataCleanup>`. Bottom line, to me everything looks very clear and I don't understand the comments regarding looking for a deeper reason behind the error. The only thing I don't understand is the dependency from `TObject` itself, but that's beyond the scope of this PR",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134#issuecomment-1637626198:364,avoid,avoid,364,https://root.cern,https://github.com/root-project/root/pull/13134#issuecomment-1637626198,2,['avoid'],['avoid']
Safety,"My general comment is that I would try to avoid doing a plain copy of code that is somewhere else. I checked `rootx/src/rootx.cxx` and it not only parses `--notebook`, but also several other options such as `-b`, `-l`, etc. This makes me wonder: is `rootx/src/rootx.cxx` the right place to parse options or it's not?. Also, is there a place where options are parsed no matter the platform? If yes, we should put there the code for `--notebook`, shouldn't we?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9142#issuecomment-946770752:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/pull/9142#issuecomment-946770752,1,['avoid'],['avoid']
Safety,"My guess is that because a binning is not specified RDF is storing `std::vector<double>`s with all entries of all columns and that's just too much. I don't think anyone ever tried to fill so many histograms with so many entries each (no filters) without specifying a binning. We could do something like `TTree::Draw` does and estimate the binning from the first N entries, but we always avoided it because it requires locking during a multi-thread event loop. Let's see what massif says first though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6676#issuecomment-712821523:387,avoid,avoided,387,https://root.cern,https://github.com/root-project/root/issues/6676#issuecomment-712821523,1,['avoid'],['avoided']
Safety,"My reasoning for removing usage of `std::string_view` is that using `const std::string&` avoids copying memory and only requires C++11, while `std::string_view` requires C++17 or a backport. Moreover, along with the extra requirements of `std::string_view`, when it is passed by value it uses a pointer + length, which means possibly twice the size of just a reference. If we are not using the editing potential of `std::string_view`, or even worse, are just using it to actually make a copy of the data inside, then I see no real advantage in using it relative to just using a reference to `std::string` in the interface that basically does the same job better without adding the extra requirements of a higher C++ standard and/or a backport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/804#issuecomment-318633601:89,avoid,avoids,89,https://root.cern,https://github.com/root-project/root/pull/804#issuecomment-318633601,1,['avoid'],['avoids']
Safety,"My two cents: I guess the question is whether there are other developers than Max that assume `R__ASSERT` also gets compiled in release builds, and I guess the safe option is to assume there are. Personally I would be ok with a `R__DEBUG_ASSERT` (+ an audit of `R__ASSERT` usages in RDF & co., + a big banner in R__ASSERT's docs). Note that there are other places like `math` where usages of `R__ASSERT` might warrant an audit, they might happen in hot code paths:. ```; roofit/roofitmore/src/RooNonCentralChiSquare.cxx:1; roofit/roofitcore/src/RooHistFunc.cxx:1; roofit/roofitmore/src/RooLegendre.cxx:3; roofit/roofit/src/RooCrystalBall.cxx:2; roofit/roofit/src/RooArgusBG.cxx:1; roofit/roofit/src/RooParamHistFunc.cxx:1; roofit/roofit/src/RooKeysPdf.cxx:2; roofit/roofit/src/RooCBShape.cxx:2; roofit/roofit/src/RooGaussModel.cxx:6; roofit/roofit/src/RooParametricStepFunction.cxx:2; roofit/roofit/src/RooDecay.cxx:1; roofit/roofit/src/RooLognormal.cxx:2; roofit/roofit/src/RooBernstein.cxx:2; roofit/roofit/src/RooBDecay.cxx:1; roofit/roofit/src/RooPolynomial.cxx:2; roofit/roofit/src/RooGamma.cxx:2; roofit/roofit/src/RooNDKeysPdf.cxx:6; roofit/roofit/src/RooPoisson.cxx:2; roofit/roofit/src/RooGExpModel.cxx:4; roofit/roofitcore/src/RooHistPdf.cxx:1; roofit/roofitcore/src/RooRealSumPdf.cxx:2; roofit/roofitcore/src/RooTruthModel.cxx:5; roofit/roofitcore/src/RooEfficiency.cxx:1; roofit/roofitcore/src/RooPolyVar.cxx:2; roofit/histfactory/src/HistoToWorkspaceFactoryFast.cxx:2; roofit/histfactory/src/FlexibleInterpVar.cxx:11; gui/fitpanel/src/TFitEditor.cxx:1; hist/hist/test/test_THBinIterator.cxx:1; hist/hist/src/THistRange.cxx:1; hist/hist/src/TH1Merger.cxx:5; hist/hist/inc/THistRange.h:4; hist/hist/src/TF1.cxx:2; hist/hist/src/TProfile2D.cxx:4; hist/hist/src/TFormula_v5.cxx:1; hist/hist/src/TH3.cxx:5; hist/hist/inc/TNDArray.h:3; hist/hist/src/TH1.cxx:5; hist/hist/src/TProfileHelper.h:2; hist/hist/src/HFitImpl.cxx:5; hist/hist/src/TPrincipal.cxx:1; hist/hist/src/TProfile3D.cxx:4; hist/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8587#issuecomment-872791223:160,safe,safe,160,https://root.cern,https://github.com/root-project/root/pull/8587#issuecomment-872791223,1,['safe'],['safe']
Safety,"My use case is to `#include <...>` some standard headers I often use. e.g. filesystem and thread.; I will also put `namespace fs = std::filesystem;` in my startup file.; cling already implicitly includes some standard headers so I think letting users to customize it makes sense. About ""execute random code"", is there risk if the executed code/script is in user's home directory or `XDG_CONFIG_HOME` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11262#issuecomment-1253392731:318,risk,risk,318,https://root.cern,https://github.com/root-project/root/pull/11262#issuecomment-1253392731,1,['risk'],['risk']
Safety,"Native JSON does not support them, but at least use `null` to avoid problem with standard parsers.; Also null value can be distinguished from 0 in JavaScript.; When reading back with TBufferJSON, any null will be converted into NaN",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1927:62,avoid,avoid,62,https://root.cern,https://github.com/root-project/root/pull/1927,1,['avoid'],['avoid']
Safety,No need to have two separate places where the list of supported operations in distributed mode is declared. This PR also avoids that the operations are redeclared everytime in the `_classify_operation` method (now removed).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9867:121,avoid,avoids,121,https://root.cern,https://github.com/root-project/root/pull/9867,1,['avoid'],['avoids']
Safety,"No, there is exactly one remaining usage of the global lock which still needs to be addressed. This happens when the TFile object is added or removed from the global list of UUIDs. It can be bypassed by e.g. the following patch; https://github.com/bendavid/root/commit/7262eb3babbb660c497fb879e4cdd32b99927c26. But this isn't safe in general as we previously discussed, since it could break the (maybe esoteric) case where a TRef points to a TFile object. One way out could be to add another static switch to TFile (a la ```TFIle::SetReadStreamerInfo(false)``) to disable this. Unfortunate that this can't be the default given that it's probably only a small number of workflows that rely on this behaviour, but I don't have any better ideas for the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7710#issuecomment-1070971919:326,safe,safe,326,https://root.cern,https://github.com/root-project/root/issues/7710#issuecomment-1070971919,1,['safe'],['safe']
Safety,"Not sure we want to provide possibility replace basic fonts in ROOT.; There are many other misc files like icons, images, macros which are distributed together with ROOT and cannot be avoided. I just merge PR which shows usage of custom fonts with `TWebCanvas`. Any kind of TTF font can be used there. https://github.com/root-project/root/blob/master/tutorials/webcanv/fonts_ttf.cxx",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16229#issuecomment-2388594326:184,avoid,avoided,184,https://root.cern,https://github.com/root-project/root/issues/16229#issuecomment-2388594326,1,['avoid'],['avoided']
Safety,"Note that https://github.com/root-project/root/pull/8093 is to be merged first, which should avoid the above test failures.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8094#issuecomment-832165555:93,avoid,avoid,93,https://root.cern,https://github.com/root-project/root/pull/8094#issuecomment-832165555,1,['avoid'],['avoid']
Safety,Note that you don't need to use the `ROOFIT_BUILDS_ITSELF` macro here. This is only to avoid dprecation warnings when RooFit builds itself in case one deprecated function calls another deprecated function.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16334#issuecomment-2319138735:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/16334#issuecomment-2319138735,1,['avoid'],['avoid']
Safety,"Note this still doesn't work after yesterdays cppyy upgrade:; ```txt; C:\root-dev\build\x64\debug>python; Python 3.11.4 (tags/v3.11.4:d2340ef, Jun 7 2023, 05:45:37) [MSC v.1934 64 bit (AMD64)] on win32; Type ""help"", ""copyright"", ""credits"" or ""license"" for more information.; >>> import ROOT; >>> s = ROOT.std.set['int'](); Assertion failed: Loc.isValid() && ""point of instantiation must be valid!"", file C:\root-dev\git\master\interpreter\llvm-project\clang\include\clang/AST/DeclTemplate.h, line 2010; *** Break *** abort; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14710#issuecomment-2009411986:517,abort,abort,517,https://root.cern,https://github.com/root-project/root/issues/14710#issuecomment-2009411986,1,['abort'],['abort']
Safety,"Note: We are intentionally building `LLVM` and `Clang` as static library to avoid conflict with other uses of the `LLVM` and `Clang` libraries (i.e. by keeping the usage as internal as possible). Using shared library will require all other usage of those libraries within a process to be using our version of `LLVM` and `Clang`, this has shown to be an impossible requirement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15563#issuecomment-2120770289:76,avoid,avoid,76,https://root.cern,https://github.com/root-project/root/pull/15563#issuecomment-2120770289,1,['avoid'],['avoid']
Safety,"Note: at least on Intel architectures, a single 64bit pointer cannot be split into more than one cache line due to alignment of 8 bytes (i.e. it's thread-safe to read it). Therefore, any thread will either see `fBase == nullptr` and acquire a lock to create the list of bases, or it will find the value already computed and return it immediately.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/957#issuecomment-327749242:154,safe,safe,154,https://root.cern,https://github.com/root-project/root/pull/957#issuecomment-327749242,1,['safe'],['safe']
Safety,"Note: this was intentionally not rebased on master for now, I will rebase before merging (incrementals currently show a test failure I want to avoid).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1058#issuecomment-332520777:143,avoid,avoid,143,https://root.cern,https://github.com/root-project/root/pull/1058#issuecomment-332520777,1,['avoid'],['avoid']
Safety,"Note:. When histograms are added to the directory, there will still be a slow down. This is because for histogram we can not assume that they are not shared. There is 2 patterns that can be used to speed up the file closing *if and only if* the histograms are not shared between the `TFile` and other containers/code (or if the double delete is avoided through other means):. (a) Detach the `TFile` from the `ROOT` list of files, which (indirectly) tells the clean up system that it does not need to inform the directories of that file of any deletion.; ```; std::unique_ptr<TFile> out(TFile::Open(""example.root"", ""RECREATE""));; gROOT->GetListOfFiles()->Remove(out.get());; ```. (b) Tell the histogram that they will not be shared and that they don't need to inform any entities that they are being deleted.; ```; auto h = new TH1F(histo_name, histo_title, 100, 0, 100);; h->ResetBit(kMustCleanup); // This is necessary to avoid scanning all the directories when deleting this histogram; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13449#issuecomment-1872379242:345,avoid,avoided,345,https://root.cern,https://github.com/root-project/root/issues/13449#issuecomment-1872379242,2,['avoid'],"['avoid', 'avoided']"
Safety,"Now I'm doing another thing, and return again to this issue. I want to make a 3-dimensional fit, but some pdfs depend only on z, so I multiply them by uniform pdfs on x and y. I mean RooUniform for the whole domain of a variable, not what I proposed in https://github.com/root-project/root/issues/7880. So I create a uniform distribution like that. RooUniform u_nt_x(""u_nt_x"", ""u_nt_x"", x);; RooUniform u_nt_y(""u_nt_y"", ""u_nt_y"", y);; RooProdPdf uxy_nt(""uxy_nt"", ""uxy_nt"", RooArgList(u_nt_x, u_nt_y));. So I have 5 pdfs for which I need to create a separate uniform distribution on (x, y), which in turn requires creation of new pdfs on x (and on y), which are all uniform and absolutely the same. This leads to 15 new lines of code, which is not that much, but seems redundant (as names and titles of the uniform distribution on all x) and even more error-prone (because of very similar code). Maybe there must be a way to explicitly allow same pdfs, if you know that they are really identical ones with same parameters? Say a new class, RooRefPdf, RooCopyPdf, ... .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8000#issuecomment-830081883:768,redund,redundant,768,https://root.cern,https://github.com/root-project/root/issues/8000#issuecomment-830081883,1,['redund'],['redundant']
Safety,"Now TMVA does not have anymore dependency on Cuda at the header file.; In principle one could have MethodDL depending on Cuda tensor, but this is not needed if single event evaluation is not done on GPU.; With this PR now the Cuda headers are included from TMVA source files . This PR should avoid the problem of ROOT-10980 and #6999 should not be anymore needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7017:292,avoid,avoid,292,https://root.cern,https://github.com/root-project/root/pull/7017,1,['avoid'],['avoid']
Safety,"Now several parameters can be configured via rootrc file:. ```; WebEve.JsRootRender: 1 # use JSROOT Geometry Painter for GL drawings, default off; WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called; WebEve.HTimeout: 200 # timeout in ms for elements highlight; WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset; WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact; ```. Provide context menu, which activate browser at specified element; Improve/repair functionality with JSROOT GeoPainter. ; Provide single-click mouse handler, used for tracks/jets selection; Improve highlight handling in plain three.js mode; Make possibility to specify table row width via rootrc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4966:257,timeout,timeout,257,https://root.cern,https://github.com/root-project/root/pull/4966,1,['timeout'],['timeout']
Safety,"Now that `builtin_afterimage` is deprecated and always `ON`, it has to build on all platforms. Update `config.guess` to the latest upstream version to auto-detect `riscv64-unknown-linux-gnu` and fix the build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16260:156,detect,detect,156,https://root.cern,https://github.com/root-project/root/pull/16260,1,['detect'],['detect']
Safety,"OK thanks. I believe that ""there is no other way to get reliable results"" is a bit of an exaggeration - many numerical libraries and programs do not turn fp exceptions on. IEEE 754 allows them to survive just fine the cases you are hunting down, because (as you certainly know) IEEE 754 brings defined behavior to ""degenerate"" (not in the IEEE 754 sense) cases. As a matter of fact, I believe you have just proven to yourself that ""there is no other way to get reliable results"" is also incorrect, as the optimizer might change fp operations. Yes, GCC tries to keep them ""fp-safe"" but that might change in any of the upcoming versions, just like it did for instance for clang, the Intel compiler, and - if I remember correctly - MSVC. Our approach is not to rely on fp exceptions but on coverage in regression tests. That has limited reach (as would fp exceptions) but it allows us to detect when results change in a visible, ""unreliable"" way. Shall we close this then or is there something left to be clarified?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713528820:575,safe,safe,575,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713528820,2,"['detect', 'safe']","['detect', 'safe']"
Safety,"OK, I un-commented the safety check, I don't remember the reason why I disabled it in the first place. Please open a separate issue if needed with a macro to test for the random sequence. In principle, `gRandom->Rndm()` is used for sampling, which should produce the same sequence if not seeded elsewhere.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14675#issuecomment-1966773753:23,safe,safety,23,https://root.cern,https://github.com/root-project/root/issues/14675#issuecomment-1966773753,1,['safe'],['safety']
Safety,"OK, well, it doesn't work for me:; ```; [bellenot@bbcc7x64 gui]$ root -l games.C; root [0]; Processing games.C...; input_line_14:1:10: fatal error: 'Hello.h' file not found; #include ""Hello.h""; ^~~~~~~~~; input_line_15:1:10: fatal error: 'Aclock.h' file not found; #include ""Aclock.h""; ^~~~~~~~~~; input_line_16:1:10: fatal error: 'Tetris.h' file not found; #include ""Tetris.h""; ^~~~~~~~~~; In file included from input_line_17:1:; ./games.C:72:23: error: allocation of incomplete type 'Hello'; Hello *hello = new Hello();; ^~~~~; ./games.C:65:7: note: forward declaration of 'Hello'; class Hello;; ^; input_line_19:2:3: error: use of undeclared identifier 'rungames'; (rungames()); ^; Error in <HandleInterpreterException>: Error evaluating expression (rungames()).; Execution of your code was aborted.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7184#issuecomment-778226348:794,abort,aborted,794,https://root.cern,https://github.com/root-project/root/pull/7184#issuecomment-778226348,1,['abort'],['aborted']
Safety,"OMICS_WITHOUT_LIB - Success; -- Building LLVM in 'Release' mode.; -- The ASM compiler identification is GNU; -- Found assembler: /usr/bin/cc; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Looking for backtrace; -- Looking for backtrace - found; -- backtrace facility detected in default set of libraries; -- Found Backtrace: /usr/include; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- Found Python module pygments; -- Found Python module pygments.lexers.c_cpp; -- Found Python module yaml; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Found PythonInterp: /usr/bin/python3.10 (found version ""3.10.4""); -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_1.0~dev; -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0:/usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0/x86_64-pc-linux-gnu:/usr/lib/gcc/x86_64-pc-linux-gnu/11.2.0/../../../../include/c++/11.2.0/backward' at runtime.; -- And then fallback to: 'c++'; -- Performing Test CXX_HAS_fno_rtti; -- Performing Test CXX_HAS_fno_rtti - Success; -- Performing Test C_HAS_Wno_strict_overflow; -- Performing Test C_HAS_Wno_strict_overflow - Success; -- Performing Test C_HAS_Wno_maybe_uninitialized; -- Performing Test C_HAS_Wno_maybe_uninitialized - Success; -- Performing Test C_HAS_Wno_parentheses_equality; -- Performing Test C_HAS_Wno_parentheses_equality - Success; -- Looking for m; -- Looking for m - not found; -- Use SSL API VERSION 1.1 for civetweb; -- Performing Test GCC_HAS_BIDI_CHARS_FLAG; -- Per",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:9198,detect,detection,9198,https://root.cern,https://github.com/root-project/root/issues/10528,1,['detect'],['detection']
Safety,"OOT::RDataFrame rdf(100);. // Define a new column `x` that contains random numbers and create a histogram; ROOT::RDF::RResultPtr<TH1D> h = rdf.Define(""x"", [](){ return gRandom->Rndm(); }).Histo1D(""x"");. // Add the histogram to a vector; vector<ROOT::RDF::RResultPtr<TH1D>> histograms;; histograms.push_back(h);. // Attempt to throw an error; throw std::runtime_error(""intended error throw for debugging"");. return histograms;; }; ```. ### Additional context; For additional context see https://root-forum.cern.ch/t/pointer-not-allocated-when-adding-rresultptr-to-vector/51831/2. Interesting part of the gdb backtrace follows (thanks @eguiraud!):; ```; >>> bt; #0 __pthread_kill_implementation (threadid=<optimized out>, signo=signo@entry=6, no_tid=no_tid@entry=0) at pthread_kill.c:44; #1 0x00007ffff72a1503 in __pthread_kill_internal (signo=6, threadid=<optimized out>) at pthread_kill.c:78; #2 0x00007ffff7251958 in __GI_raise (sig=sig@entry=6) at ../sysdeps/posix/raise.c:26; #3 0x00007ffff723b53d in __GI_abort () at abort.c:79; #4 0x00007ffff729563e in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff73b4432 ""%s\n"") at ../sysdeps/posix/libc_fatal.c:155; #5 0x00007ffff72ab22c in malloc_printerr (str=str@entry=0x7ffff73b6ff8 ""free(): double free detected in tcache 2"") at malloc.c:5660; #6 0x00007ffff72ad587 in _int_free (av=0x7ffff73f1ba0 <main_arena>, p=0x55555e7134c0, have_lock=have_lock@entry=0) at malloc.c:4469; #7 0x00007ffff72af9f3 in __GI___libc_free (mem=<optimized out>) at malloc.c:3385; #8 0x00007ffff18d07b4 in std::_Vector_base<ROOT::RDF::RResultPtr<TH1D>, std::allocator<ROOT::RDF::RResultPtr<TH1D> > >::~_Vector_base (this=0x55555881f750) at /usr/lib/gcc/x86_64-pc-linux-gnu/12.2.0/../../../../include/c++/12.2.0/bits/stl_vector.h:366; #9 0x00007ffff23aa435 in cling::Value::~Value() () from /home/blue/ROOT/master/cmake-build-foo/lib/libCling.so; #10 0x00007ffff21a1869 in TCling::ProcessLine (this=0x5555555ee950, line=0x5555563e9c60 "".X /tmp/./pointer_n",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11494:1913,abort,abort,1913,https://root.cern,https://github.com/root-project/root/issues/11494,1,['abort'],['abort']
Safety,"OOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 888: Environment variables:; 888: ROOT_HIST=0; 888: Test timeout computed to be: 1500; 888: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 888: error code: -529697949; 888:; 888:; 11/16 Test #888: tutorial-dataframe-df016_vecOps-py .......................***Failed 4.51 sec; test 889; Start 889: tutorial-dataframe-df017_vecOpsHEP-py. 889: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df017_vecOpsHEP.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 889: Environment variables:; 889: ROOT_HIST=0; 889: Test timeout computed to be: 1500; 889: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 889: error code: -529697949; 889:; 889:; 12/16 Test #889: tutorial-dataframe-df017_vecOpsHEP-py ....................***Failed 5.05 sec; test 890; Start 890: tutorial-dataframe-df019_Cache-py. 890: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df019_Cache.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 890: Environment variables:; 890: ROOT_HIST=0; 890: Test timeout computed to be: 1500; 890: Error in <TChain::LoadTree>: Cannot find tree with name ÉB D═ in file C:\Users\sftnight\build\release\tutorials\hsimple.root; 890: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (messa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:12172,timeout,timeout,12172,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['timeout'],['timeout']
Safety,"OT. The DEBUG messages are particularly problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). ### Possible negative side-effects. #### Breaking changes?. This proposal does not change the output for print level 0, but there is a minor change for print level 1. It changes the output of scripts/software that uses print level 1, because previously level 1 meant ""print errors and info"" while in the new hierarchy it means ""print errors and warnings"". I think this is a minor effect, which has to be documented in the next changelog but it cannot cause backward incompatibilities or breakage. #### Reduced performance?. The impact on performance is expected to be negligible. I propose to place additional calls into the compiled code for everyone, but these calls are not executed unless the user picks a high print level. For a low print level, there is just the minor additional cost of a branch, which moreover can be predicted very well by the CPU, so the added cost should be almost zero. Furthermore, these branches do not happen in hot code paths. Hot paths are inside the cost function (which are unaffected) and in the linear algebra routines that Minuit2 uses (which are not instrumented with debug messages). ### Positive side-effects for wrappers and frontends. An important positive side effect for wrappers like iminuit is that we could show our users debug messages, too. Right now, we cannot, because DEBUG messages can only be enabled at compile-time, not at run-time. The DEBUG messages are also problematic in the current system, because they use std::cout while MnPrint uses the compile-time configurable MNLOG (which defaults to std::cerr). For wrappers like iminuit, it is important to redirect the log to its own streams that can be readout and displayed in Python, for example in a Jupyter notebook session (std::cerr and std::cout always go to the terminal and are invisible in a Jup",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6421:3460,predict,predicted,3460,https://root.cern,https://github.com/root-project/root/issues/6421,1,['predict'],['predicted']
Safety,"Oh I was too fast: So the `BranchTypes` part of the template was simply not used? In case I undestand this correctly, is it possible to detect something like this at compile time?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5208#issuecomment-603090920:136,detect,detect,136,https://root.cern,https://github.com/root-project/root/pull/5208#issuecomment-603090920,2,['detect'],['detect']
Safety,"Ok so there are few different issues here. Leaving aside the question of why the template error isn't detected, the reason why it's not even printed to the console is because the problematic instantiation occurs via the LookupHelper which calls ```setSuppressAllDiagnostics``` by default. The stack trace leading up to the instantiation looks as below*. So as a workaround at least the user can call from python ```ROOT.gDebug = 6``` to get the full output from clang. Maybe the defaults need to be reconsidered here. The optimal solution here for pyroot/cppyy in general is maybe a bit involved. What is probably desired is; 1) Don't print the clang output, but store any errors or warnings during template instantiation attempts e.g. using ```cling::utils::DiagnosticsStore```; 2) If no template is successfully instantiated then print the stored warnings and errors for each case; 3) If a template is successfully instantiated, but had warnings, at least print those for the successful case. I have some idea what's going wrong with the error detection as well, more news on that soon. \*; ```gdb; Thread 1 ""python"" hit Breakpoint 1, 0x00007ffff2df28e0 in clang::Sema::InstantiateFunctionDefinition(clang::SourceLocation, clang::FunctionDecl*, bool, bool, bool) () from /home/b/bendavid/rootdev28/install/lib/libCling.so; (gdb) bt; #0 0x00007ffff2df28e0 in clang::Sema::InstantiateFunctionDefinition(clang::SourceLocation, clang::FunctionDecl*, bool, bool, bool) (); from /home/b/bendavid/rootdev28/install/lib/libCling.so; #1 0x00007ffff1a30ff7 in cling::overloadFunctionSelector(clang::DeclContext*, bool, llvm::SmallVectorImpl<clang::Expr*> const&, clang::LookupResult&, clang::DeclarationNameInfo&, clang::TemplateArgumentListInfo const*, clang::ASTContext&, clang::Parser&, clang::Sema&, cling::LookupHelper::DiagSetting) () from /home/b/bendavid/rootdev28/install/lib/libCling.so; #2 0x00007ffff1a387f7 in clang::FunctionDecl const* cling::findFunction<clang::FunctionDecl const*>(clang::Decl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11854#issuecomment-1455272493:102,detect,detected,102,https://root.cern,https://github.com/root-project/root/issues/11854#issuecomment-1455272493,1,['detect'],['detected']
Safety,"Ok the idea works, I will open a different PR with an implementation that uses CRTP to avoid repeating the body of `RAction` three times (thanks @Axel-Naumann for the suggestion).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2595#issuecomment-425416733:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/2595#issuecomment-425416733,1,['avoid'],['avoid']
Safety,"Ok what about this: we throw away the changes currently proposed in this PR, and instead we go here:. https://github.com/root-project/root/blob/master/core/base/src/TApplication.cxx#L1347. and before calling `gSystem->Abort()`, we call `gSystem->IgnoreSignal(kSigAbort)`, so that `TXXSystem::DispatchSignals` is not even invoked when the user types `.qqqqqq` from the ROOT prompt. This fixes the case of not printing an unexpected abort signal.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5034#issuecomment-587554017:218,Abort,Abort,218,https://root.cern,https://github.com/root-project/root/pull/5034#issuecomment-587554017,2,"['Abort', 'abort']","['Abort', 'abort']"
Safety,"Ok, I think we can avoid it by inlining one or two more functions",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15491#issuecomment-2108071040:19,avoid,avoid,19,https://root.cern,https://github.com/root-project/root/pull/15491#issuecomment-2108071040,1,['avoid'],['avoid']
Safety,"Ok, I'll leave this to @dpiparo then. I think the changes are simple enough and can be safely merged, though.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1046#issuecomment-331808979:87,safe,safely,87,https://root.cern,https://github.com/root-project/root/pull/1046#issuecomment-331808979,2,['safe'],['safely']
Safety,"Ok, I've had a first quick look. This is rather a feature than a bug. During alignment, some bounding boxes and voxels need to be recomputed (see the logic in [TGeoPhysicalNode::Align](https://github.com/root-project/root/blob/7c81a10d9fa965b25f35b0ec709d6095a209ac16/geom/geom/src/TGeoPhysicalNode.cxx#L293#L306)). Since a given volume may be changed by many physical node alignments, their bounding boxes and voxels are only marked to be recomputed, otherwise the operation takes too long for complex cases. This lazy recomputation occurs only when any navigation function is called for the given volume, but not when calling just the getter of the box dimensions. So the behavior runtime should be OK, even if you see that some bounding boxes appear to be zero just after alignment. The recomputation of boxes/voxels can be however triggered manually using the following code:; ```; TIter nextv(gGeoManager->GetListOfVolumes());; TGeoVolume *vol;; while ((vol = (TGeoVolume*)nextv())) {; if (vol->IsAssembly()) vol->GetShape()->ComputeBBox();; auto finder = vol->GetVoxels();; if (finder && finder->NeedRebuild()) {; finder->Voxelize();; vol->FindOverlaps();; }; }; ```; I guess this code could be automatically called inside TGeoManager::RefreshPhysicalNodes() which needs to be called anyway by the user to recover pointer consistency after all alignments are applied. Let me know if this code does the job for you and I'll put it there.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12242#issuecomment-1431352951:1312,recover,recover,1312,https://root.cern,https://github.com/root-project/root/issues/12242#issuecomment-1431352951,1,['recover'],['recover']
Safety,"Ok, after discussing this with @cburgard and others, we think we came up with a solution that leaves the ROOT side untouched for now, but deprecates the functionality that uses `get_wgt` on the RooFitExtensions side when using RooFitExtensions together with ROOT versions later than 6.18.x. This may break RooFitExtensions users' workflows (we unfortunately don't know who still uses the affected functionality), in which case we will have to revisit the suggestions made in this PR. But in any case this solution avoids the unacceptable situation of leaving things as they are which has silently failed for some years now. Hopefully, nobody misses the functionality in RooFitExtensions, so we can let this rest permanently :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11736#issuecomment-1330910904:514,avoid,avoids,514,https://root.cern,https://github.com/root-project/root/pull/11736#issuecomment-1330910904,1,['avoid'],['avoids']
Safety,"Ok, but level has to be an `Int_t`, as that's the type `TFile` accepts. *Edit:* The reasoning is that I want to avoid warnings about truncation when the enum and char are mixed to create the parameter that is passed to TFile. Also 300 is a perfect value for algorithm when creating the `Int_t` that TFile takes...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/965#issuecomment-328833706:112,avoid,avoid,112,https://root.cern,https://github.com/root-project/root/pull/965#issuecomment-328833706,1,['avoid'],['avoid']
Safety,"Ok, looking in more detail, I THINK that the original deadlock issue with UniqueLockRecurseCount can actually be avoided by declaring the LocalCounts as a thread_local data member of UniqueLockRecurseCount rather than a local variable inside of GetLocal() so this might be an even better solution.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-800561784:113,avoid,avoided,113,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-800561784,1,['avoid'],['avoided']
Safety,"Ok, thanks for checking @linev! In that case, I'll remove the commit with the `Qt` detection from this PR. It was not so important for me anyway, the main motivation for this PR was that ROOT doesn't silently disable CUDA. Are you okay with how the PR is now, @linev?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14834#issuecomment-1980803700:83,detect,detection,83,https://root.cern,https://github.com/root-project/root/pull/14834#issuecomment-1980803700,1,['detect'],['detection']
Safety,"Ok, thanks for investigating. I think it's safe to treat it as a `TTree::Draw` bug unless @pcanal figures out otherwise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6671#issuecomment-712756397:43,safe,safe,43,https://root.cern,https://github.com/root-project/root/issues/6671#issuecomment-712756397,1,['safe'],['safe']
Safety,"Ok, then the current tip of the 6-32-XX branch does not compile with `-Droot7=OFF`. I will change that in our builds, keep that however in mind when you do the tag to avoid extra macOS related noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16449#issuecomment-2355996406:167,avoid,avoid,167,https://root.cern,https://github.com/root-project/root/issues/16449#issuecomment-2355996406,1,['avoid'],['avoid']
Safety,"Okay, the updates to CallFunc would be too controversial. See also: https://github.com/root-project/root/pull/14426. Also, I don't like it that the `unique_ptr` overload is wrongly chosen, even if it doesn't harm in you example. I suggest to disable the implicit promotion to smart pointers now:; https://github.com/root-project/root/pull/15125. Then the behavior of PyROOT is the same as in ROOT 6.30 for your reproducer, which I think is safest. What do you think?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15117#issuecomment-2035838121:440,safe,safest,440,https://root.cern,https://github.com/root-project/root/issues/15117#issuecomment-2035838121,1,['safe'],['safest']
Safety,"Okay, this is mostly a configuration problem from my side: I didn't install the `libssl-dev` package, so ROOT's configuration defaulted to `builtin_openssl` because `ssl` is `ON` but it couldn't find the OpenSSL headers. On Debian Unstable and Testing, this is a serious problem because it means we effectively end up with OpenSSL 1.1.1g (from the builtin, linked statically) *and* OpenSSL 3.0.8 (from the system, linked as a shared library) in *one process*. We are rather lucky that it doesn't blow up harder... @bellenot do you think we should add a check to detect this configuration (`xrootd AND NOT builtin_xrootd AND builtin_openssl`) and emit a hard error? The tricky part is that this can end up being the automatic choice, as I witnessed...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12231#issuecomment-1435932572:562,detect,detect,562,https://root.cern,https://github.com/root-project/root/issues/12231#issuecomment-1435932572,1,['detect'],['detect']
Safety,"Olivier, can one just automatically switch to col option when doing batch output with `gVirtualPS`? ; Just to avoid confusion in the future?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6822#issuecomment-728774569:110,avoid,avoid,110,https://root.cern,https://github.com/root-project/root/issues/6822#issuecomment-728774569,1,['avoid'],['avoid']
Safety,"On 02/10/17 11:43, Guilherme Amadio wrote:; >; > Let's see how this goes now that we are back on the old externals...; >; > I would prefer avoiding the smart pointers with ROOT 6 interfaces, ; > because I'm sure there are corner cases where it will lead to ; > problems, and I pointed out some of it in previous comments.; >; > Other than that, I once this PR is ready for merge, the typos, etc, ; > should be amended into the right commits.; >; I am not sure I understand in which commit the typo fix will go.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub ; > <https://github.com/root-project/root/pull/1073#issuecomment-333487667>, ; > or mute the thread ; > <https://github.com/notifications/unsubscribe-auth/AGNuUxFmbbOXWlPg2lV0qNy3rDTPoYFmks5soLArgaJpZM4Pn4OQ>.; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073#issuecomment-333489320:139,avoid,avoiding,139,https://root.cern,https://github.com/root-project/root/pull/1073#issuecomment-333489320,1,['avoid'],['avoiding']
Safety,"On MacOS this simple code using std::sort of RooAbsArg crashed because std::sort MacOS implementation goes to element outside of the collection. ; This simple code reproduced the problem by crashing on MacOS. ```; std::vector<RooAbsArg*> v;; int n = 38;. for (int i = 0; i < n; ++i) {; TString name = TString::Format(""a_%d"",i);; v.push_back( new RooRealVar (name, name, 10,0,20) );; }. std::sort(v.begin(), v.end(), [](RooAbsArg*a, RooAbsArg*b) { return a->dependsOn(*b); } );; ```; ; The PR with the simple check avoid a crash observed running the example in ; https://root-forum.cern.ch/t/upper-limit-for-signal-strength-on-off-problem-multiple-independent-runs/44657",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8111:514,avoid,avoid,514,https://root.cern,https://github.com/root-project/root/pull/8111,1,['avoid'],['avoid']
Safety,"On linux vector with custom allocator do indeed have a different layout that vector with the default allocator, The reason is that std::vector is that case ""starts' with an embedded instance of the allocator ... I am guessing that on MacOS the allocator is at the end instead .... I corrected the behavior of TStreamerInfo to not use the 'vector-shortcut' in the case of vector with custom allocator. This makes is go somewhat slower but at least works correctly. Since all vectors with the same custom allocator have the same layout, we could recover the performance by embedded support for VecOps::TAdoptAllocator directly in TStreamerInfo's actions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1707#issuecomment-371299491:544,recover,recover,544,https://root.cern,https://github.com/root-project/root/pull/1707#issuecomment-371299491,1,['recover'],['recover']
Safety,"On my machine the build with `runtime_cxxmodule` one failed with:; ```; Assertion failed: (idx < size()), function operator[], file SmallVector.h, line 304.; Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):; 0 rootcling_stage1 0x000000010d8f248c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 88; 1 rootcling_stage1 0x000000010d8f29d0 PrintStackTraceSignalHandler(void*) + 28; 2 rootcling_stage1 0x000000010d8f0908 llvm::sys::RunSignalHandlers() + 152; 3 rootcling_stage1 0x000000010d8f3744 SignalHandler(int) + 276; 4 libsystem_platform.dylib 0x000000018f51a584 _sigtramp + 56; 5 libsystem_pthread.dylib 0x000000018f4e9c20 pthread_kill + 288; 6 libsystem_c.dylib 0x000000018f3f6a30 abort + 180; 7 libsystem_c.dylib 0x000000018f3f5d20 err + 0; 8 rootcling_stage1 0x00000001059936b8 llvm::SmallVectorTemplateCommon<unsigned long long, void>::operator[](unsigned long) + 92; ....; 1.	/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/usr/include/stdint.h:18:2: current parser token 'include'; Subprocess aborted; ninja: build stopped: subcommand failed.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16494#issuecomment-2377165354:786,abort,abort,786,https://root.cern,https://github.com/root-project/root/pull/16494#issuecomment-2377165354,2,['abort'],"['abort', 'aborted']"
Safety,"On my platform I see following crash; ```; rootcling_stage1: /home/linev/git/root6/interpreter/llvm/src/include/llvm/Support/Casting.h:106: static bool llvm::isa_impl_cl<To, const From*>::doit(const From*) [with To = clang::EnumDecl; From = clang::NamedDecl]: Assertion `Val && ""isa<> used on a null pointer""' failed.; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0x2d1cbdf]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0x2d1a73e]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0x2d1a9ba]; /lib64/libpthread.so.0(+0x142d0)[0x7efbff6982d0]; /lib64/libc.so.6(gsignal+0x141)[0x7efbff15ffb1]; /lib64/libc.so.6(abort+0x127)[0x7efbff14955d]; /lib64/libc.so.6(+0x25431)[0x7efbff149431]; /lib64/libc.so.6(+0x34592)[0x7efbff158592]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xf7eba3]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xfaf9f5]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xcb65b4]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xcb9d94]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xd41d76]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xd42411]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xd48ea2]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xcd06fa]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xcd1133]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xcc42d1]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xd488e8]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1[0xd492f9]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1(_ZN5cling17IncrementalParser13ParseInternalEN4llvm9StringRefE+0x6b6)[0x747596]; /home/linev/build/root6/core/rootcling_stage1/src/rootcling_stage1(_ZN5cling17IncrementalParser7CompileEN4llvm9StringRefERKNS_18",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5004#issuecomment-586356179:672,abort,abort,672,https://root.cern,https://github.com/root-project/root/pull/5004#issuecomment-586356179,1,['abort'],['abort']
Safety,"On some platform operator delete taints the memory, so even right after the deletion the information stored by ~TObject is already erased. On those platform we no longer rely on the kNotDelete bit hack and rely on the system (which has tainted the memory assumingly for a reason) to detect the use-after-delete problems. Introduce 2 new functions. TObject::IsDestructed (used by TClonesArray) that detects that the destructor has been run and is active in all configuration. This should be used if the code knows that the memory has not been freed/deleted. ROOT::Detail::HasBeenDeleted(TObject*) with returns true if the platform does not taint the memory and if the kNotDeleted is not set (in all other case, it returns false). This fixes #11330",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11334:283,detect,detect,283,https://root.cern,https://github.com/root-project/root/pull/11334,2,['detect'],"['detect', 'detects']"
Safety,"On some platform operator delete taints the memory, so even right after the deletion the information stored by ~TObject is already erased. On those platform we no longer rely on the kNotDelete bit hack and rely on the system (which has tainted the memory assumingly for a reason) to detect the use-after-delete problems. Introduce 2 new functions. TObject::IsDestructed (used by TClonesArray) that detects that the destructor has been run and is active in all configuration. This should be used if the code knows that the memory has not been freed/deleted. ROOT::Detail::HasBeenDeleted(TObject*) with returns true if the platform does not taint the memory and if the kNotDeleted is not set (in all other case, it returns false). This fixes #11330. Backport of https://github.com/root-project/root/pull/11334",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11405:283,detect,detect,283,https://root.cern,https://github.com/root-project/root/pull/11405,2,['detect'],"['detect', 'detects']"
Safety,"On some systems (CentOS 8) latest chrome not allows to run HTML files,; which are situated in /tmp directory. Only if such situation detected,; try to place HTML files into home directory and run headless chrome from such file. Fixes problem like this:; https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=ROOT-ubuntu2004,SPEC=cxx17,V=master/2435/testReport/projectroot/runtutorials/tutorial_v7_line_cxx/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5403:133,detect,detected,133,https://root.cern,https://github.com/root-project/root/pull/5403,1,['detect'],['detected']
Safety,"On the other hand, I have prepared a rehauled-version that is thread-safe so that doxygen can run in parallel: https://github.com/root-project/root/pull/9966#issuecomment-1055977012. (Here I did check that things were faster.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10195#issuecomment-1075135595:69,safe,safe,69,https://root.cern,https://github.com/root-project/root/pull/10195#issuecomment-1075135595,1,['safe'],['safe']
Safety,"On weak GPUs, tests might take very long when they all run in parallel.; This can be avoided with a resource lock.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16803:85,avoid,avoided,85,https://root.cern,https://github.com/root-project/root/pull/16803,1,['avoid'],['avoided']
Safety,"On windows, there are instances when the rdict file is still in use when we try to remove it. This happens due to some problem with file handling in LLVM5 which got resolved in D63453(https://reviews.llvm.org/D63453). But it was difficult to backport. With this commit, we switch to the standard C++ library functions for generating rdict files and avoid using this particular API of LLVM. @vgvassilev @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6184:349,avoid,avoid,349,https://root.cern,https://github.com/root-project/root/pull/6184,1,['avoid'],['avoid']
Safety,"Once merged, this should give us fresh states for the incremental builds in pull requests for the platforms that are currently failing; massively speeding them up and also avoiding; ```; Warning in cling::IncrementalParser::CheckABICompatibility():; Possible C++ standard library mismatch, compiled with __GLIBCXX__ '20230426'; Extraction of runtime standard library version was: '20230511'; ```; on Fedora 38, which recently had a compiler upgrade.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12830#issuecomment-1550932442:172,avoid,avoiding,172,https://root.cern,https://github.com/root-project/root/pull/12830#issuecomment-1550932442,1,['avoid'],['avoiding']
Safety,One 'meta question'. How much of this 'duplicates' the functionality of TTree::ReadFile? [Just trying to avoid maintaining two .csv parser if we can avoid it ...],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1160#issuecomment-335487239:105,avoid,avoid,105,https://root.cern,https://github.com/root-project/root/pull/1160#issuecomment-335487239,2,['avoid'],['avoid']
Safety,"One also can configure websocket timeout when creating THttpServer. Required for TWebCanvas prototype,; but also can be used in other applications",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/503:33,timeout,timeout,33,https://root.cern,https://github.com/root-project/root/pull/503,1,['timeout'],['timeout']
Safety,"One can add ; ```; #if !defined(_MSC_VER); #define _MSC_VER 0; #endif; ```; but in the current version there is no undefined behavior, so it is safe.; I would even blame the compiller/preprocessor as the offending code ; ```; defined(_MSVC_LANG) && _MSVC_LANG >= 201703L; ``` ; is very standard. Best regards,. Andrii",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8267#issuecomment-851398062:144,safe,safe,144,https://root.cern,https://github.com/root-project/root/issues/8267#issuecomment-851398062,1,['safe'],['safe']
Safety,"One challenge (see the related unfinished PR: https://github.com/root-project/root/pull/1053) is that it is always ""risky"" to make memory allocation (or any other 'can fail' operation) within a signal handling routine. I would strongly recommend that the capture the stack-trace be attempted in a separate PR. (And it would be even better if #1053 was first completed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10366#issuecomment-1122806975:116,risk,risky,116,https://root.cern,https://github.com/root-project/root/pull/10366#issuecomment-1122806975,1,['risk'],['risky']
Safety,"One have to provide connection id when accepting file dialog request from client.; This allows to use file dialogs for window with multiple connections at the same time. In eve7 use `RWebWindow` methods to avoid direct dependency from `RBrowser`. `RFileDialog` also used in `RBrowser`, `RCanvas`, `TWebCanvas`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13154:206,avoid,avoid,206,https://root.cern,https://github.com/root-project/root/pull/13154,1,['avoid'],['avoid']
Safety,One meta point. I am not sure whether a global setting (as opposed to a per tree) setting is the right interface. (As is the setting is inherently non-thread safe and another thread could switch during the creation of a TTree) ....,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1003#issuecomment-329969189:158,safe,safe,158,https://root.cern,https://github.com/root-project/root/pull/1003#issuecomment-329969189,1,['safe'],['safe']
Safety,Only a clone timeout.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1984#issuecomment-407999130:13,timeout,timeout,13,https://root.cern,https://github.com/root-project/root/pull/1984#issuecomment-407999130,1,['timeout'],['timeout']
Safety,"Only register actual observables as value servers in the `RooEvaluatorWrapper` this avoids that spurious variables appear in user code, which were only meant to be used internally by the new CPU evaluation backend. To make the management of the parameter easier, impose the new reasonable constraint that when resetting the data via `setData()`, the new dataset needs to have the same structure as the old one. It was confirmed with an ATLAS model provided by Will that this commit is fixing the problem of spurious variables. A unit test is also implemented. FYI @will-cern",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15061:84,avoid,avoids,84,https://root.cern,https://github.com/root-project/root/pull/15061,1,['avoid'],['avoids']
Safety,Original commit message:. The Sema::LookupConstructor is not iteration safe. When looking up a ctor the modules infrasturcture deserializes more ctor; candidates in the body of the function causing the internal vector implementation; to rellocate and invalidate the pointers. This workaround should address the failures reported by LCG. The real fix is being processed here https://reviews.llvm.org/D91524 and we; after being merged we should be able to backport it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7350:71,safe,safe,71,https://root.cern,https://github.com/root-project/root/pull/7350,1,['safe'],['safe']
Safety,"Originally, the changes in this branch avoided the unload/load cycle for the `.x` command, if the timestamp of a file has not changed. Due to potential problems with static variable initialization, this behavior is not finally part of this PR. Other than that, this branch includes several improvements:; - General `MetaSema.cpp` code cleanup.; - `.x` now has a list of (fallback) function names that we will try to call, in order. This makes it possible to add alternate entry points for a macro that are independent from the filename, and therefore immune to file renaming.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4465:39,avoid,avoided,39,https://root.cern,https://github.com/root-project/root/pull/4465,1,['avoid'],['avoided']
Safety,"Other problem with Cling and tree in memory:; Fedora, root master version; ```; $ root scan.C; root [0]; Processing scan.C...; root [1] t->Draw(""a[0]""); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; root [2] scan(); root [3] t->Draw(""a[0]""). *** Break *** segmentation violation; ```; ```; $ root; root [0] .L scan.C++; Info in <TUnixSystem::ACLiC>: creating shared library /home/musinsky/./scan_C.so; root [1] scan(); root [2] t->Draw(""a[0]""); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; root [3] scan(); root [4] t->Draw(""a[0]""); root [5] scan(); root [6] t->Draw(""a[0]""); root [7] scan(); root [8] t->Draw(""a[0]""). *** Break *** segmentation violation; ```; lxplus.cern.ch (RHEL 9.4), root v6.32.06; ```; $ root; root [0] .L scan.C++; Info in <TUnixSystem::ACLiC>: creating shared library /afs/cern.ch/user/m/musinsky/./scan_C.so; root [1] scan(); root [2] t->Draw(""a[0]""); Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; *** stack smashing detected ***: terminated; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16730#issuecomment-2432414023:1022,detect,detected,1022,https://root.cern,https://github.com/root-project/root/issues/16730#issuecomment-2432414023,1,['detect'],['detected']
Safety,Our CMake code for making path to headers relative is broken; for the v7 headers (as they don't have the 'CURRENT_SOURCE/inc'; prefix we check for). This caused that we have absolute paths for; those headers in the modulemap we ship with ROOT. This patch just hacks in the additional check for v7 headers; and a sanity check that should prevent this error in the future.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2003:312,sanity check,sanity check,312,https://root.cern,https://github.com/root-project/root/pull/2003,1,['sanity check'],['sanity check']
Safety,"Our CMake code modifies `find_package` to ignore any ROOT builtins, such that the builtin LLVM doesn't find and use system versions of the builtin dependencies. This is a bit hacky, but fortunately this needs to be done only when builtins are used. Therefore, this commit suggests to only do this redefinition of `find_package` if any builtins are used. This closes #8633, where it was requested to avoid this hack for the sake of being compatible with the `vcpkg` package manager. Although the hack is not completely removed, it is removed for the case where not builtins are used, which is probably what is done when using a C++ package manager to manage dependencies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16274:399,avoid,avoid,399,https://root.cern,https://github.com/root-project/root/pull/16274,1,['avoid'],['avoid']
Safety,"Output of `valgrind` with the original report of just `#include <LoKi/ParticleCuts.h>`, replacing `1519` in the paths with `1529`:; ```; $ VALGRIND_LIB=/cvmfs/lhcb.cern.ch/lib/lcg/releases/valgrind/3.22.0-113bc/x86_64-el9-gcc13-dbg/libexec/valgrind/ valgrind --leak-check=full --suppressions=/cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/etc/valgrind-root.supp root.exe -q -e ""#include <LoKi/ParticleCuts.h>""; ==652727== Memcheck, a memory error detector; ==652727== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.; ==652727== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info; ==652727== Command: root.exe -q -e #include\ \<LoKi/ParticleCuts.h\>; ==652727== ; ------------------------------------------------------------------; | Welcome to ROOT 6.30/04 https://root.cern |; | (c) 1995-2024, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Feb 03 2024, 17:20:15 |; | From heads/master@tags/v6-30-04 |; | With g++ (GCC) 13.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. ==652727== Conditional jump or move depends on uninitialised value(s); ==652727== at 0xB2BAFE3: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so); ==652727== by 0xA9E4679: llvm::Evaluator::EvaluateBlock(llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Instruction, false, false, void>, false, false>, llvm::BasicBlock*&, bool&) (in /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86_64-el9-gcc13-dbg/lib/libCling.so); ==652727== by 0xA9E5D5C: llvm::Evaluator::EvaluateFunction(llvm::Function*, llvm::Constant*&, llvm::SmallVectorImpl<llvm::Constant*> const&) (in /cvmfs/lhcb.cern.ch/lib/lcg/releases/ROOT/6.30.04-dd2db/x86",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15511#issuecomment-2166043260:477,detect,detector,477,https://root.cern,https://github.com/root-project/root/issues/15511#issuecomment-2166043260,1,['detect'],['detector']
Safety,"Over the years we have a pathological issue with cling when it calls directly; compiler API. Most of the API assume they are called from code residing in a; text file. This code has valid source locations which can be used for; comparisons and things like point of instantiation for template instantiations. This means that whenever a clang API requires a valid source location, cling; should have an interface which gives a pseudo-valid, commonly-rooted unique; source location. We are bitten by this fact when preloading modules as if we have diagnostics; they cannot be ordered due to the fact that the compared decls from two; different modules do not have a common includer. This patch avoids using an API and relies on a textual form which does not have; this problem at the cost of synthesizing an extra string. This should fix the roottest python stl-stl test failure in the incremental builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4339:691,avoid,avoids,691,https://root.cern,https://github.com/root-project/root/pull/4339,1,['avoid'],['avoids']
Safety,"P.S. @olifre Note that there are still some potential issues without my changes:; ```; root [1] TBrowser b; (TBrowser &) Name: Browser Title: ROOT Object Browser; root [2] Error in <TTreeFormula::DefinedVariable>: operator is not a datamember of ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >; Error in <TTreeFormula::Compile>: Bad numerical expression : ""tracks.operator""; Info in <TSelectorDraw::AbortProcess>: Variable compilation failed: {tracks.operator-().operator+().Py(),}; Error in <TTreeFormula::DefinedVariable>: operator is not a datamember of ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >; Error in <TTreeFormula::Compile>: Bad numerical expression : ""tracks.operator""; Info in <TSelectorDraw::AbortProcess>: Variable compilation failed: {tracks.operator-().Vect().unit().unit().Rho(),}; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13284#issuecomment-1642707327:413,Abort,AbortProcess,413,https://root.cern,https://github.com/root-project/root/pull/13284#issuecomment-1642707327,2,['Abort'],['AbortProcess']
Safety,PR updated to also address. 	346 - gtest-tree-tree-test-testBulkApiMultiple (Timeout),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10886#issuecomment-1318278945:77,Timeout,Timeout,77,https://root.cern,https://github.com/root-project/root/pull/10886#issuecomment-1318278945,1,['Timeout'],['Timeout']
Safety,"PS by having a closer look at the `TFileMerger` class I think we should have here ; https://github.com/root-project/root/blob/d286987139f8ba0833ab438c4523e388156deeb1/io/io/src/TFileMerger.cxx?plain=1#L893; the following lines ; ```C++; // save modifications to the target directory.; if (!(type&kIncremental)) {; // In case of incremental build, we will call Write on the top directory/file, so we do not need; // to call SaveSelf explicilty.; target->SaveSelf(kTRUE);; if (target != fOutputFile){; // Delete target directory after writting it ; // and avoid deleting output file if target is the output file ; delete target;; }; }; ```; which is the equivalent lines that I have put in my `fasterCustomHadd` script",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13531#issuecomment-1691863973:554,avoid,avoid,554,https://root.cern,https://github.com/root-project/root/issues/13531#issuecomment-1691863973,1,['avoid'],['avoid']
Safety,"Part of the RooFit code modernization, avoiding the use of unnecessary; wrapper classes and using a simple templated struct instead. The change in this PR is thoroughly tested by `stressRooFit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10115:39,avoid,avoiding,39,https://root.cern,https://github.com/root-project/root/pull/10115,1,['avoid'],['avoiding']
Safety,"Partial fix of #8708.; In a setup where ROOT was installed in a system directory, ROOT was picking up headers from that directory instead of its own. . ## How to reproduce:; 1. `echo '#error This is the wrong header' > /my/include/directory/RooSpan.h` (or a few other headers).; 2. Install some builtins into that directory, e.g. VDT; 3. `cmake -DCMAKE_PREFIX_PATH=/my/include/directory/ <root>` to create a dependency to that include directory.; 4. Build. The problem only becomes visible when `A` depends on `B and C`, and `B` depends on something in `/system/include/`, and `C` is installed in those system includes as well. This generates a compile command such as:; ```; -I.../core/x -I.../core/y -I.../core/... -I.../A/include -I.../B/include -I/system/include/ -I.../C/include ...; ```. ## In this PR:; - Includes for VDT and XROOTD are fixed by making them `IMPORTED` targets, so their includes have lowest precedence.; - Some cheating where include directories are copied around between targets is removed. CMake should handle this.; - Some dependency and target management is simplified (or rather modernised with target-based cmake); - A broken dependency in RooFit is fixed, which was previously hidden by the cheating with include directories. ## What remains to be done:; It is likely that more builtins (or rather `FindXXX` have to be converted to `IMPORTED` targets, so they don't provoke this error again. A broken configuration can be detected by; 1. Having CMake pick up a dependency in some common directory; 2. Either; - Placing a lot of `#error`-ROOT headers in there or; - Searching `compile_commands.json` for `-I/my/include/directory/`; 3. Fixing the `FindXXX` for this dependency.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8709:1453,detect,detected,1453,https://root.cern,https://github.com/root-project/root/pull/8709,1,['detect'],['detected']
Safety,Patch Vc to avoid warnings about macro redefinitions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5168:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/5168,3,['avoid'],['avoid']
Safety,"Patch to handle template instantiation error recovery:; The current class SavePendingInstantiationsRAII ([L8109 -L8125](https://github.com/root-project/root/blob/a402af862ace9573193500bcccaa8b4d56cc6632/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h#L8109)) in clang/Sema.h which is called from cling/InterpreterParser.cpp [L920](https://github.com/root-project/root/blob/a402af862ace9573193500bcccaa8b4d56cc6632/interpreter/cling/lib/Interpreter/IncrementalParser.cpp#L920) can be replaced with the following patch in Sema.h; ```class PerformPendingInstantiationsRAII {; Sema &S;; public:; PerformPendingInstantiationsRAII(Sema &S): S(S) {} ;. ~PerformPendingInstantiationsRAII() {; S.PerformPendingInstantiations();; assert(S.PendingInstantiations.empty() &&; ""there shouldn't be any pending instantiations"");; }; };; ```; ; Change in InterpreterParser.cpp L902:; ```Sema::PerformPendingInstantiationsRAII PerformPendingInstantiations(S);```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1145689988:45,recover,recovery,45,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1145689988,1,['recover'],['recovery']
Safety,"People use RooFormula a lot via RooGenericPdf and RooFormulaVar!; Performance matters here. This commit avoids non-static `std::regex` in; `RooFormula::processFormula`, because constructing these on the fly can; become a bottleneck. This is a non-intrusive performance optimization that reduces the time spent for CMS workflows like the HZZ global fit by up to 5 %. Example profiles:; * HZZ multi-dim fit before this PR: https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hzz_1/74; * HZZ multi-dim fit after this PR: https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hzz_3/1815. `RooFormula::processFormula` is now more than ten times faster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10205:104,avoid,avoids,104,https://root.cern,https://github.com/root-project/root/pull/10205,1,['avoid'],['avoids']
Safety,"Personally I avoid merging parameters, the GNU/getopts standards might allow it, but I personally think it's a source of confusion for new users. Regardless I'll do it, but @lmoneta has mentioned on the forums that he might be making a seperate PR swapping the protocol from HTTP to HTTPS, since this actually seems to be what the redirect is doing to begin with. Incidentally every instance of curl in this PR does seem to be using http. Alternative he proposed `data = TFile.Open('http://root.cern.ch/files/tmva_class_example.root')`. Personally I think the best approach would be to use both, since it ensures the security guarantees of HTTPS whilst also proactively fixing any potential redirects in the future just on the off chance. Would you like me to handle HTTPS in this PR?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7725#issuecomment-809361845:13,avoid,avoid,13,https://root.cern,https://github.com/root-project/root/pull/7725#issuecomment-809361845,1,['avoid'],['avoid']
Safety,Please recover `SrvAuthenticate` from libSrvAuth library,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13387:7,recover,recover,7,https://root.cern,https://github.com/root-project/root/issues/13387,1,['recover'],['recover']
Safety,"Please use the overload of `RooAbsData::createHistogram` with the RooFit command arguments, which doesn't showcase this confusing behavior. To avoid confusion in the future, the overload that you used with the int parameters is deprecated now, which should solve the issue. Let me know if that's fine for you!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10401#issuecomment-1103180614:143,avoid,avoid,143,https://root.cern,https://github.com/root-project/root/issues/10401#issuecomment-1103180614,1,['avoid'],['avoid']
Safety,"Please, if you can, do the PR. I actually don't understand where it should go, `v6-28-00-patches` branch of ROOT?. I have one more observation. When I don't modify the cmake, then as expected I get during configuration message; ```; Not able to recognize SSL version 3.1.0, disable SSL; ```; and `civetweb` is built with `-DNO_SSL` but `libssl.so.3` still gets linked. As I understand, this is because the `libRHTTP.so` is linked to `libNet.so` which links `libssl.so.3`. This is quite misleading as looking at `ldd libRHTTP.so` one can come to conclusion that it has been built with support of openssl even though this is not the case. I understand that this can't be avoided, it is just an observation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12766#issuecomment-1542123980:669,avoid,avoided,669,https://root.cern,https://github.com/root-project/root/issues/12766#issuecomment-1542123980,1,['avoid'],['avoided']
Safety,"Ported from Cppyy patch by @wlav :`; https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff. Adds an iterator for using declarations to `TClingMethodInfo`. it should make redundant the pythonisations that add the method overloads from a base class to the derived class that uses them:; https://github.com/root-project/root/blob/master/bindings/pyroot_experimental/PyROOT/src/PyzPythonHelpers.cxx#L113. Instead of relying on pythonisations for specific classes, this PR adds the necessary logic to have this functionality solved in a generic way in the bindings.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3640:199,redund,redundant,199,https://root.cern,https://github.com/root-project/root/pull/3640,1,['redund'],['redundant']
Safety,Possibly scary timeout in `projectroot.roottest.root.hist.misc.roottest_root_hist_misc_runownership` on 32bits (@Axel-Naumann ) but unrelated to this PR. Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7384#issuecomment-801278572:15,timeout,timeout,15,https://root.cern,https://github.com/root-project/root/pull/7384#issuecomment-801278572,1,['timeout'],['timeout']
Safety,Prefer string_view in function signatures.; Avoid instantiating strings whenever possible.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/937:44,Avoid,Avoid,44,https://root.cern,https://github.com/root-project/root/pull/937,1,['Avoid'],['Avoid']
Safety,"Prevent a TTree from calling its won RecursiveRemove. Call RecursiveRemove early in the TTree destructor (rather than last thing), to remove the tree; from any list (like another TTree's list of clones) to avoid that the destructor's deletion of; item (eg. the list of friends), provoke a call to this same TTree's RecursiveRemove which; will try to call the RecursiveRemove on the item being deleted. An alternative would be; to replace the pattern. `delete fFriends; fFriends = nullptr;`; with `auto tmp = fFriends; fFriends = nullptr; delete tmp;`. This fixes issue #9017 where we had a tear down crash because:. ~TTree call delete fFriends which call RecursiveRemove which reach another TTree's list of clone; where its find the (original) TTree and call its RecursiveRemove which tries (and fail) to call; RecursiveRemove on fFriends",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9021:206,avoid,avoid,206,https://root.cern,https://github.com/root-project/root/pull/9021,3,['avoid'],['avoid']
Safety,"Prevent unsafe shift that can cause FPE. Tag @couet . Note: no bad behavior of this code was observed, so this is ""an improvement"" rather than ""bug fix"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6561:8,unsafe,unsafe,8,https://root.cern,https://github.com/root-project/root/pull/6561,1,['unsafe'],['unsafe']
Safety,"Previously it detected the change of entry by comparing the 'current' instance to the last 'instance'; recorded. If all instance are used, this worked perfectly. If the instance are used sparsely (eg. with; selection in TTree::Draw) then from entry to the other, the 'first' instance used in an entry might be later/higher; than the last 'instance' used in the previous entry. This corrects the behavior introduced in 064e0a7d49b08e03667f9312421b6fb5b8d82285. This fixes ROOT-10170",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3946:14,detect,detected,14,https://root.cern,https://github.com/root-project/root/pull/3946,1,['detect'],['detected']
Safety,"Previously, the Canvas `Close` signal which triggers a call to the local function `close` which; was unconditionally call `Kill` on its associated thread would call it on an already deleted; object if the `TThread` was deleted before the `TCanvas`. This fix #10015 (detected by using ASAN).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10068:266,detect,detected,266,https://root.cern,https://github.com/root-project/root/pull/10068,1,['detect'],['detected']
Safety,"Primary changes proposed; - avoiding char to TString to char conversions; - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr.; - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/584:28,avoid,avoiding,28,https://root.cern,https://github.com/root-project/root/pull/584,3,"['avoid', 'redund']","['avoid', 'avoiding', 'redundant']"
Safety,Problem is not only eve7 - where derived classes used in examples. nlohmann/json used in TBufferJSON and planned for usage with TJSONFile.; There much more operations used with it. Idea to wait for llvm13 where one fully can avoid forward declarations and use directly `nlohmann::json`,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11196#issuecomment-1216792717:225,avoid,avoid,225,https://root.cern,https://github.com/root-project/root/pull/11196#issuecomment-1216792717,1,['avoid'],['avoid']
Safety,"Problem with files globing - it takes alll files. ; But depending on compiled ROOT components, some pythonization files should be excluded.; It is already happens with `dataframe` component here.; Some time ago we redo all c++ cmake files to avoid files globing - I guess here we also should avoid it.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8509#issuecomment-866732469:242,avoid,avoid,242,https://root.cern,https://github.com/root-project/root/pull/8509#issuecomment-866732469,2,['avoid'],['avoid']
Safety,Put float and int first as they might be more common column types. Also move call to TClass::GetClass last as it takes a lock and it's better to avoid it when possible. Following suggestion from https://github.com/root-project/root/pull/16528#issuecomment-2375899434,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16529:145,avoid,avoid,145,https://root.cern,https://github.com/root-project/root/pull/16529,1,['avoid'],['avoid']
Safety,Qualify calls to llvm::format that have ::std:: types as parameters to avoid ambiguity in overload resolution when ADL finds `std::format`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12730:71,avoid,avoid,71,https://root.cern,https://github.com/root-project/root/pull/12730,1,['avoid'],['avoid']
Safety,Quote variable to avoid CMake syntax warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1304:18,avoid,avoid,18,https://root.cern,https://github.com/root-project/root/pull/1304,1,['avoid'],['avoid']
Safety,"Quoting @pcanal:. > I am a bit lost ... Do we understand the reason for the thread unsafety? What data is there a race condition on? [Note for example that gPad is thread-local and in-itself not a cause for problem (unless several threads have their gPad pointing to the same pad). > One thing that would be helpful to understand the scope is the 2 stack traces of the 2 threads accessing the same pointer. Since you @andriish also found a workaround for your problem, it would be better to only change the code in ROOT once we understand exactly what the problem on the ROOT side is and how it is solved by this change (or another change). Therefore I'll close this PR here, but please feel free to engage with us again either here on GitHub or on the ROOT forum if you have practical problems again! Thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6511#issuecomment-1808094349:83,unsafe,unsafety,83,https://root.cern,https://github.com/root-project/root/pull/6511#issuecomment-1808094349,1,['unsafe'],['unsafety']
Safety,"RARY GIF_INCLUDE_DIR); -- Could NOT find TIFF (missing: TIFF_LIBRARY TIFF_INCLUDE_DIR); -- Could NOT find PNG (missing: PNG_LIBRARY PNG_PNG_INCLUDE_DIR); -- Could NOT find JPEG (missing: JPEG_LIBRARY JPEG_INCLUDE_DIR); -- Building AfterImage library included in ROOT itself; -- Looking for LibXml2; -- Downloading and building XROOTD version; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; -- Building LLVM in 'Release' mode.; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings enabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Constructing LLVMBuild project information; -- Linker detection: GNU ld; -- Targeting X86; -- Targeting NVPTX; -- Clang version: 9.0.1; -- Cling version (from VERSION file): ROOT_0.9~dev; -- Cling will look for C++ headers in '/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10:/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/x86_64-suse-linux:/usr/bin/../lib64/gcc/x86_64-suse-linux/10/../../../../include/c++/10/backward' at runtime.; -- And then fallback to: 'clang-12.0.0'; -- Performing Test found_stdstringview; -- Performing Test found_stdstringview - Failed; -- Performing Test found_stdexpstringview; -- Performing Test found_stdexpstringview - Success; -- Performing Test found_stod_stringview; -- Performing Test found_stod_stringview - Failed; -- Performing Test found_stdapply; -- Performing Test found_stdapply - Failed; -- Performing Test found_stdinvoke; -- Performing Test found_stdinvoke - Failed; -- Performing Test found_stdindexsequence;",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8097#issuecomment-832676622:2327,detect,detection,2327,https://root.cern,https://github.com/root-project/root/issues/8097#issuecomment-832676622,1,['detect'],['detection']
Safety,"RBrowser: fix layout, avoid use of private data members",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4628:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/4628,1,['avoid'],['avoid']
Safety,"REFIX} -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++ -DCMAKE_INSTALL_LIBDIR=${CONDA_PREFIX}/lib -DCMAKE_LINKER=/usr/bin/gold -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS=""-I/home/sehrig/workspace/cling9demo/install/include/cling/"" -DCMAKE_PREFIX_PATH=/home/sehrig/workspace/cling9demo/install/lib/cmake/cling/; -- The C compiler identification is Clang 11.0.0; -- The CXX compiler identification is Clang 11.0.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/llvm-11.0.0-ubn363okfkmwy6dpoozlbgidl4bks3wd/bin/clang - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/llvm-11.0.0-ubn363okfkmwy6dpoozlbgidl4bks3wd/bin/clang++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building xeus-cling v0.12.0; -- Found LLVM_CONFIG as /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/llvm-11.0.0-ubn363okfkmwy6dpoozlbgidl4bks3wd/bin/llvm-config; -- Found nlohmann_json: /home/sehrig/application/miniconda3/envs/cling9demo/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.9.1"", minimum required is ""3.2.0"") ; -- Found LibUUID: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/libuuid-1.0.3-lxispdpiiahk26ye53cg5qn7bk24tywj/lib/libuuid.so ; -- Found OpenSSL: /opt/spack-modules/linux-ubuntu20.04-skylake_avx512/gcc-10.2.0/openssl-1.1.1g-doxvrf6l7lm7c55agwefmfbxe4kwwwbi/lib/libcrypto.so (found version ""1.1.1g"") ; CMake Error at CMakeLists.txt:114 (find_package):; Found package configuration file:. /home/sehrig/workspace/cling9demo/install/lib/cmake/cling/ClingConfig.cmake. but it set Cling_FOUND to FALSE so package ""Cling"" is considered to be NOT; FOUND. Reason give",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6385#issuecomment-784497193:1390,Detect,Detecting,1390,https://root.cern,https://github.com/root-project/root/pull/6385#issuecomment-784497193,2,['Detect'],['Detecting']
Safety,"RNTupleWriter::CommitCluster (this=0xd7486120, commitClusterGroup=true) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:370; #12 0xf7e2c674 in ROOT::Experimental::RNTupleWriter::~RNTupleWriter (this=0xd7486120, __in_chrg=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:327; #13 0x56560f58 in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=0xd7486120, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:100; #14 0x565606cf in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=<optimized out>, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:94; #15 std::unique_ptr<ROOT::Experimental::RNTupleWriter, std::default_delete<ROOT::Experimental::RNTupleWriter> >::~unique_ptr (this=0xffde8b50, __in_chrg=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:405; #16 RNTuple_LargeFile2_Test::TestBody (this=0x57246b80) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_extended.cxx:260; #17 0xf7d7159c in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib/libgtest.so.1.13.0; #18 0xf7d5cf46 in testing::Test::Run() () from /lib/libgtest.so.1.13.0; #19 0xf7d5d17a in testing::TestInfo::Run() () from /lib/libgtest.so.1.13.0; #20 0xf7d5d327 in testing::TestSuite::Run() () from /lib/libgtest.so.1.13.0; #21 0xf7d6a95b in testing::internal::UnitTestImpl::RunAllTests() () from /lib/libgtest.so.1.13.0; #22 0xf7d695cb in testing::UnitTest::Run() () from /lib/libgtest.so.1.13.0; #23 0xf7d1e137 in main () from /lib/libgtest_main.so.1.13.0; #24 0xf6837969 in __libc_start_call_main () from /lib/libc.so.6; #25 0xf6837a2c in __libc_start_main_impl () from /lib/libc.so.6; #26 0x56560e0b in _start (); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:12422,abort,aborted,12422,https://root.cern,https://github.com/root-project/root/issues/12427,1,['abort'],['aborted']
Safety,"ROOT ""swallows"" `std::`, and we need to figure out how to handle the namespaces; `std::foo` vs `::foo`. Until we do that, avoid the issue by renaming the only; known ""clash"", using `std::__ROOT` as in several other backport cases. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9093:122,avoid,avoid,122,https://root.cern,https://github.com/root-project/root/pull/9093,1,['avoid'],['avoid']
Safety,"ROOT has several features which interact with libraries and require implicit header inclusion. This can be triggered by reading or writing data on disk, or user actions at the prompt. Often, the headers are immutable and reparsing is redundant. C++ Modules are designed to minimize the reparsing of the same header content by providing an efficient on-disk representation of C++ Code. More information about the C++ modules technology can be found at README/README.CXXMODULES.md. This undertaking was successful due to the efforts of many people. Especially, Raphael Isemann (@Teemperor), Oksana Shadura(@oshadura) and Yuka Takahashi (@yamaguchi1024). We are grateful to Liz Sexton-Kennedy, Peter Elmer (@pelmer), Brian Bockelman(@bbockelm) and Ken Bloom for putting (wo)manpower into the project and supporting it. This work has been supported by an Intel Parallel Computing Center grant, by U.S.National Science Foundation grants PHY-1450377, ACI-1450323 and PHY-1624356, and by the U.S. Department of Energy, Office of Science. Special thanks to Axel Naumann (@Axel-Naumann) and Philippe Canal (@pcanal) for helping and supporting the technical efforts over the years. We are thankful to Shahzad Malik Muzaffar (@smuzaffar), David Lange (@davidlange6) and Mircho Rodozov (@mrodozov) from the CMSSW development team, CERN/EP-SFT and the ROOT team.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4395:234,redund,redundant,234,https://root.cern,https://github.com/root-project/root/pull/4395,1,['redund'],['redundant']
Safety,"ROOT introduced a build flag in 6.26.00 that allowed you to build it using the `ryml` library instead of nlohmann-json as the backend for the JSON IO. But that was not particularly great. The `ryml` backend code is at risk of rotting, because to try and test it one needs a special ROOT build. It would be much better to just build both backends if `ryml` is installed on the system, and have a mechanism for developers to try this other backend. This is implemented in this commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12221:218,risk,risk,218,https://root.cern,https://github.com/root-project/root/pull/12221,1,['risk'],['risk']
Safety,"ROOT's current copy of `FindTBB.cmake` cannot detect versions of newer TBBs without the header `tbb/tbb_stddef.h`. As a result, `TBB_VERSION` is unset and cannot be used for further checks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8260:46,detect,detect,46,https://root.cern,https://github.com/root-project/root/issues/8260,1,['detect'],['detect']
Safety,ROOT-8872 Optimize TTree::Fill() to avoid expensive modulo operations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1058:36,avoid,avoid,36,https://root.cern,https://github.com/root-project/root/pull/1058,1,['avoid'],['avoid']
Safety,ROOT-9435 [TMVA] -- Avoid unsafe reinterpret_cast,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2254:20,Avoid,Avoid,20,https://root.cern,https://github.com/root-project/root/pull/2254,2,"['Avoid', 'unsafe']","['Avoid', 'unsafe']"
Safety,"ROOT/REntry.hxx>; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleModel.hxx>. using ROOT::Experimental::REntry;; using ROOT::Experimental::RNTupleModel;; using ROOT::Experimental::RNTupleReader;; using ROOT::Experimental::RNTupleWriter;. static void write() {; auto particleModel = RNTupleModel::Create();; auto energy = particleModel->MakeField<float>(""energy"");. auto model = RNTupleModel::CreateBare();; auto particles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");; auto entry = writer->CreateEntry();. *energy = 1.0;; particles->Fill();; writer->Fill(*entry);; }. void collection_entry() {; write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");; reader->Show(0);; }. int main() {; collection_entry();; return 0;; }; ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:; ```; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; Aborted (core dumped); ```. This is because `RNTupleModel::CreateEntry()` calls; https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365; for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like; ```diff; diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx; index c652608bf1..ed02338e2b 100644; --- a/tree/ntuple/v7/src/RNTupleModel.cxx; +++ b/tree/ntuple/v7/src/RNTupleModel.cxx; @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr; ; auto entry = std::unique_ptr<REntry>(new REntry(fModelId));; for (const auto &f : fFieldZero->GetSubFields()) {; - entry->AddValue(f->CreateValue());; + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {; + entry->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14642:2334,Abort,Aborted,2334,https://root.cern,https://github.com/root-project/root/issues/14642,1,['Abort'],['Aborted']
Safety,"ROOT/RVec.hxx(2062,16):. warning C4805: '==': unsafe mix of type 'const T' and type 'bool'; in operation [C:\Soft\root_64\math\vecops\test\vecops_rvec.vcxproj]; with; [; T=int; ]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9812:46,unsafe,unsafe,46,https://root.cern,https://github.com/root-project/root/pull/9812,1,['unsafe'],['unsafe']
Safety,"ROOT::R::Label is a synonym of Rcpp::_. We should just bind to it, instead of; introducing a new variable causing redundant deserialization from the C++ module.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4409:114,redund,redundant,114,https://root.cern,https://github.com/root-project/root/pull/4409,1,['redund'],['redundant']
Safety,ROOT_HEAD failed with error message: Fail to detect cryptographic random generator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14958:45,detect,detect,45,https://root.cern,https://github.com/root-project/root/issues/14958,1,['detect'],['detect']
Safety,"RWebWindow uses credit-based data transport. ; Default number of credits was always 10 and can be too small.; Now this default value can be changed via ""WebGui.ConnCredits"" variable. In WebEve checks amount of available credits to suppress highlight operations - main source of small packets send to server.; Let avoid situation when such small packets over-flood communication channel. Latest JSROOT code with better organization how TCanvas and TFrame painters provided when required.; Previous implementation was not adequate, while cannot take into account that object may be drawn on TCanvas or on RCanvas. Now it clearly stated in the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6920:313,avoid,avoid,313,https://root.cern,https://github.com/root-project/root/pull/6920,1,['avoid'],['avoid']
Safety,"Rather than non-const reference. This has two advantages:; - passing fundamental types by value is slightly more efficient; - passing by const value helps avoiding typos such as `if (x = 0)`. This fixes ROOT-11009. Reviewers, what do you think? Can this break any currently valid code?. - [x] add test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6526:155,avoid,avoiding,155,https://root.cern,https://github.com/root-project/root/pull/6526,1,['avoid'],['avoiding']
Safety,"Re-implement `MakeNumpyDataFrame` with no interpreter calls, and avoid a; explicit lifetime management of Python objects in the RDNumpyDS helper. Like this, the former `RNumpyDS.hxx` helper could be moved to; `tree/dataframe`, as it doesn't import `Python.h` anymore. The `RNumpyDS` also got renamed to `RVecDS`, because it takes RVecs and; not NumPy arrays directly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15031:65,avoid,avoid,65,https://root.cern,https://github.com/root-project/root/pull/15031,1,['avoid'],['avoid']
Safety,Re-running mac1015/cxx17 makes it work. i.e the failure ; ```; 11:06:30 [ 71%] Building CXX object io/io/CMakeFiles/RIO.dir/v7/src/RFile.cxx.o; 14:48:26 Cancelling nested steps due to timeout; 14:48:26 Could not connect to macphsft20 to send interrupt signal to process; ```; was transient.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760#issuecomment-630506499:184,timeout,timeout,184,https://root.cern,https://github.com/root-project/root/pull/3760#issuecomment-630506499,1,['timeout'],['timeout']
Safety,"Reading with TTree works. This affects RDataFrame critically. To reproduce at the prompt:. ```; /tmp source /home/blue/ROOT/v6.24/_build/bin/thisroot.fish; /tmp root -l # with v6.24; root [0] ROOT::RDataFrame(10).Define(""x"", ""ROOT::RVec<int>{1,2,3}"").Snapshot(""t"", ""f.root"");; root [1] .q; /tmp source /home/blue/ROOT/master/_build/bin/thisroot.fish; /tmp root -l # now with master; root [0] ROOT::RDataFrame(""t"", ""f.root"").Display(""x"")->Print(); Fatal: 0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'; aborting; #0 0x00007f4f9c4a99ea in wait4 () from /usr/lib/libc.so.6; #1 0x00007f4f9c427a2b in do_system () from /usr/lib/libc.so.6; #2 0x00007f4f9cdcc21c in TUnixSystem::Exec (this=0x55b0a9ebf800, shellcmd=0x55b0ae8f76d0 ""/home/blue/ROOT/master/_build/etc/gdb-backtrace.sh 143932 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2120; #3 0x00007f4f9cdccb0e in TUnixSystem::StackTrace (this=0x55b0a9ebf800) at ../core/unix/src/TUnixSystem.cxx:2411; #4 0x00007f4f9cc5e089 in DefaultErrorHandler (level=6000, abort_bool=true, location=0x7f4f9c10b012 """", msg=0x55b0af523450 ""0 violated at line 1509 of `../io/io/src/TGenCollectionProxy.cxx'"") at ../core/base/src/TErrorDefaultHandler.cxx:174; #5 0x00007f4f9cd3a560 in ErrorHandler(Int_t, const char *, const char *, typedef __va_list_tag __va_list_tag *) (level=6000, location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"", ap=0x7ffe675d1310) at ../core/foundation/src/TError.cxx:152; #6 0x00007f4f9cd3ab94 in Fatal (location=0x7f4f9c10b012 """", fmt=0x7f4f9ce795d8 ""%s violated at line %d of `%s'"") at ../core/foundation/src/TError.cxx:249; #7 0x00007f4f9bf0a0fa in TGenCollectionProxy__VectorNext () at ../io/io/src/TGenCollectionProxy.cxx:1509; #8 0x00007f4f9c009167 in TStreamerInfoActions::GenericLooper::Numeric<int, int>::ConvertAction (items=0x55b0af2ac580, start=0x55b0af0e38d0, end=0x55b0af0e38dc, loopconf=0x7ffe675d1550) at ../io/io/src/TStreamerInfoActions.cxx:2447; #9 0x00007f4f9bff45fd in TStreamerInf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9136:521,abort,aborting,521,https://root.cern,https://github.com/root-project/root/issues/9136,1,['abort'],['aborting']
Safety,Rebased and addressed review comments. The registration and cleanup of the UUID is kept for now because it cannot be safely removed in all cases. To be addressed in a future PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9486#issuecomment-1011299257:117,safe,safely,117,https://root.cern,https://github.com/root-project/root/pull/9486#issuecomment-1011299257,1,['safe'],['safely']
Safety,Rebased and addressed the remaining comments. The redundant size variables have also been removed from TNDArray and TNDArrayT.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499#issuecomment-994498821:50,redund,redundant,50,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-994498821,1,['redund'],['redundant']
Safety,Rebased on master to fix conflicts.; I will definitely add more multi-thread tests but I think this can be safely merged if jenkins returns green.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1037#issuecomment-333239205:107,safe,safely,107,https://root.cern,https://github.com/root-project/root/pull/1037#issuecomment-333239205,1,['safe'],['safely']
Safety,Rebased to hopefully avoid the previously remaining test failure.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11631#issuecomment-1480146242:21,avoid,avoid,21,https://root.cern,https://github.com/root-project/root/pull/11631#issuecomment-1480146242,1,['avoid'],['avoid']
Safety,"Rebased/improved version of #4966. Several parameters can be configured via rootrc file:; ```; WebEve.GLViewer: Three #kind of GLViewer, either Three, JSRoot or RCore; WebEve.DisableShow: 1 # do not start new web browser when REveManager::Show is called; WebEve.HTimeout: 200 # timeout in ms for elements highlight; WebEve.DblClick: Off # mouse double click handling in GL viewer: Off or Reset; WebEve.TableRowHeight: 33 # size of each row in pixels in the Table view, can be used to make design more compact; ```; Implement Browse functionality - shows selected item in SummaryView. In `JSRoot` viewer: ; * Provide single-click mouse handler, used for tracks/jets selection; In `Three` viewer: ; * Improve highlight handling in plain three.js mode; * provide position-dependent context menu; In `RCore` viewer:; * load required script during `init` call. Support more dashed styles for lines. By default, double-click ignored in GL view, can be configured",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4972:278,timeout,timeout,278,https://root.cern,https://github.com/root-project/root/pull/4972,1,['timeout'],['timeout']
Safety,"Recent llvm versions use llvm::Error as a facility for error handling. It includes an ErrorInfoBase class which has virtual methods (with a pinned vtable in the object file). This makes it harder to include headers that use transitively include llvm/Support/Error.h crossing rtti/no-rtti worlds (that is llvm is compiled with -fno-rtti and TCling and friends with -frtti). Newer llvm versions have a lot of usage of llvm::Error in its header files and it is practically impossible to solve this problem by avoiding the headers that use ErrorInfoBase. There are two other alternatives. First we can outline the functions in Error.h which use ErrorInfoBase but then we will hit other things like RTTIRoot which also needs special treatment. Secondly, we can enable llvm's RTTI builds for ROOT and this is what this patch does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10289:506,avoid,avoiding,506,https://root.cern,https://github.com/root-project/root/pull/10289,1,['avoid'],['avoiding']
Safety,"Reduce amount of code, special treatments and the need for casting in RooFit by providing a type-safe proxy template that acts a bit like smart pointers. **For reviewers**:; The central part of this PR is the file `RooProxy.h`. Many other changes are just a fallout from unifying all proxy classes in this one. A `RooProxy<T>` is like a smart pointer to `T`, but it does additional important stuff in the base class.; Previously, RooFit proxies were storing only base class pointers forcing users of these proxies to cast whenever they wanted to do something. The weak point of the new thing is backward compatibility. Legacy root files and legacy RooFit classes act like a `RooProxy<RooAbsArg>`, a pointer to a very basic class. If the template argument was chosen properly, one wouldn't need any special functions because one can just use the newly provided `proxy->` to type-safely dereference the proxy, but that only works for new code. To support old code (e.g. outside of RooFit), there's four overloads of the function `lvptr`, which is supposed to cast the pointer to the payload into a type deriving from one of the ""LValue"" classes `RooAbsRealLValue` or `RooAbsCategoryLValue`. That's safe if the template argument derives from those, but it's unsafe for all other (=legacy) proxies. I tagged the unsafe conversion functions with `R__SUGGEST_ALTERNATIVE` to give users a way to move away from unsafe casts, but I'm unsure if one should just `static_cast` as RooFit was doing in the past (= no change of runtime behaviour) or `dynamic_cast` for better type safety. Opinions?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4969:97,safe,safe,97,https://root.cern,https://github.com/root-project/root/pull/4969,7,"['safe', 'unsafe']","['safe', 'safely', 'safety', 'unsafe']"
Safety,"Reduce usage of unsafe `Form()` function, especially in Thread.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11744:16,unsafe,unsafe,16,https://root.cern,https://github.com/root-project/root/pull/11744,1,['unsafe'],['unsafe']
Safety,Refactor signal handling and replace signal handlers with thread-safe functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/133:65,safe,safe,65,https://root.cern,https://github.com/root-project/root/pull/133,3,['safe'],['safe']
Safety,"Regarding `roottest-python-pickle-read`:. ```; Start 1437: roottest-python-pickle-read; 14/20 Test #1437: roottest-python-pickle-read ........................***Failed 1.36 sec; -- TEST COMMAND -- ; cd /srv/root/build/roottest/python/pickle; /usr/bin/timeout -s USR2 270s /usr/bin/python /srv/root/src/roottest/python/pickle/PyROOT_readtests.py --fixcling; -- BEGIN TEST OUTPUT --; Test reference counting of pickled object ... ok; Test that a TBufferFile can be pickled ... ok; Test serialization of the ROOT Python module. ... ERROR; Test reading of a histogram from a pickle file ... ok; Test reading of an std::vector<double> from a pickle file ... ok; Test reading of a user-defined object from a pickle file ... ok; Test reading of a ROOT object in a namespace from a pickle file ... ok; Test reading PyROOT custom types ... ok; [ROOT-10810] Test reading a RooDataSet with weights ... ok. ======================================================================; ERROR: Test serialization of the ROOT Python module.; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/srv/root/src/roottest/python/pickle/PyROOT_readtests.py"", line 177, in test3PickleFacadeCheck; facade = pickle.loads(pickle.dumps(get_root_facade())); TypeError: cannot pickle 'ROOTFacade' object; ```. This piece of the pickle test was added by @vepadulano yesterday, it must have failed because your ROOT installation was not updated with the corresponding fix in PyROOT (also merged by @vepadulano yesterday).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936#issuecomment-823938499:251,timeout,timeout,251,https://root.cern,https://github.com/root-project/root/issues/7936#issuecomment-823938499,1,['timeout'],['timeout']
Safety,"Regarding the clang-tidy fail: https://travis-ci.org/github/root-project/root/jobs/767085481#L4062. This is unrelated to this patch. I plan to replace the StackAllocator in a follow-up patch, because it does not work with multi-threading. There is a better/safer way of achieving this. Regarding the clang-format fail: https://travis-ci.org/github/root-project/root/jobs/767085483#L254. This is the issue we had before, the CI bot uses an order version of clang-format which produces this weird formatting based on the same style file. I locally use version 9.0 of clang-format and the formatting actually looks more reasonable. Perhaps it would be better to update the clang-format version that the CI bot uses?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7882#issuecomment-820287700:257,safe,safer,257,https://root.cern,https://github.com/root-project/root/pull/7882#issuecomment-820287700,1,['safe'],['safer']
Safety,"RegisterClasses"" ||; ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~; In file included from /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TNamed.h:26,; from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TDictionary.h:44,; from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TDataType.h:25,; from /home/jhahnfel/ROOT/llvm13/src/core/meta/inc/TInterpreter.h:25,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.h:27,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:20:; /home/jhahnfel/ROOT/llvm13/src/core/base/inc/TString.h:844:15: note: candidate: ‘Bool_t operator==(const string_view&, const char*)’; inline Bool_t operator==(const std::string_view &s1, const char *s2); ^~~~~~~~; In file included from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/DiagnosticIDs.h:19,; from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/Basic/Diagnostic.h:17,; from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/NestedNameSpecifier.h:18,; from /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/tools/clang/include/clang/AST/Type.h:21,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingDeclInfo.h:20,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingClassInfo.h:28,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TClingBaseClassInfo.h:29,; from /home/jhahnfel/ROOT/llvm13/src/core/metacling/src/TCling.cxx:24:; /home/jhahnfel/ROOT/llvm13/src/interpreter/llvm/src/include/llvm/ADT/StringRef.h:919:15: note: candidate: ‘bool llvm::operator==(llvm::StringRef, llvm::StringRef)’; inline bool operator==(StringRef LHS, StringRef RHS) {; ^~~~~~~~; ```; This happens with a C++17 build in general, C++14 is fine. On the performance side, the current state seems to veery slow: `ctest -j12 -R dataframe .` used to take in the order of 2m30s, now I aborted it after 13 minutes. A lot of time seems to be spent in `sys`, are you aware of changes that could explain this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294#issuecomment-1088491041:2351,abort,aborted,2351,https://root.cern,https://github.com/root-project/root/pull/10294#issuecomment-1088491041,1,['abort'],['aborted']
Safety,Reimplement signal handler to avoid async-unsafe functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/97:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/97,2,"['avoid', 'unsafe']","['avoid', 'unsafe']"
Safety,"Related to this problems, there was also a question on the forum:; * https://root-forum.cern.ch/t/roofit-numcpu-in-pyroot/57424. Then, there is also the possibility to build ROOT with the `std::unique_ptr` interfaces already:; * https://root.cern/doc/master/release-notes.html#compile-your-code-with-memory-safe-interfaces",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11397#issuecomment-1848591204:307,safe,safe-interfaces,307,https://root.cern,https://github.com/root-project/root/issues/11397#issuecomment-1848591204,1,['safe'],['safe-interfaces']
Safety,"Remotely related to this PR, could remove the redundant `#include ""RooCintUtils.h""`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1714#issuecomment-371549314:46,redund,redundant,46,https://root.cern,https://github.com/root-project/root/pull/1714#issuecomment-371549314,1,['redund'],['redundant']
Safety,Remove all redundant header guards around #include directives,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/341:11,redund,redundant,11,https://root.cern,https://github.com/root-project/root/pull/341,1,['redund'],['redundant']
Safety,"Remove class hierarchy in RFieldValue. The templated, type-safe; inherited classes made the design vulnerable to slicing, because the; RField interface uses the base class. Instead, we use now templated; constructors and templated member functions in RFieldValue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3829:59,safe,safe,59,https://root.cern,https://github.com/root-project/root/pull/3829,1,['safe'],['safe']
Safety,Remove dangerous thread-unsafe accessors of RHistConcurrentFiller,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4708:24,unsafe,unsafe,24,https://root.cern,https://github.com/root-project/root/pull/4708,1,['unsafe'],['unsafe']
Safety,Remove extra redundant tensorboard Option,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5936:13,redund,redundant,13,https://root.cern,https://github.com/root-project/root/pull/5936,1,['redund'],['redundant']
Safety,Remove extra single quote in error message to avoid confusion what the actual class name is.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10099:46,avoid,avoid,46,https://root.cern,https://github.com/root-project/root/pull/10099,1,['avoid'],['avoid']
Safety,"Remove one layer of indirection by merging MakeColumnReadersHelper; and MakeColumnReader. Less code, we avoid some repeated checks,; and MakeColumnReader is not a bit simpler to call directly, which; we will need to implement RVariedColumnReaders for systematic variations. CC: @bendavid -- I think you are touching this code too, sorry! :sweat_smile:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9275:104,avoid,avoid,104,https://root.cern,https://github.com/root-project/root/pull/9275,1,['avoid'],['avoid']
Safety,Remove redundant RooCintUtils.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1720:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/1720,1,['redund'],['redundant']
Safety,Remove redundant checks in TThreadExecutor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/361:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/361,1,['redund'],['redundant']
Safety,Remove redundant includes from http/webgui,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5045:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/5045,1,['redund'],['redundant']
Safety,Remove redundant null pointer check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/249:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/249,1,['redund'],['redundant']
Safety,Remove redundant null pointer checks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/260:7,redund,redundant,7,https://root.cern,https://github.com/root-project/root/pull/260,1,['redund'],['redundant']
Safety,Remove splash screen to avoid `root.exe` dependence on x11 or cocoa,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15056:24,avoid,avoid,24,https://root.cern,https://github.com/root-project/root/pull/15056,1,['avoid'],['avoid']
Safety,Remove the redundant dependencies from the target. This fixes a cxxmodules; nightly builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1741:11,redund,redundant,11,https://root.cern,https://github.com/root-project/root/pull/1741,1,['redund'],['redundant']
Safety,"Remove trailing whitespaces to avoid warnings like these:; ```; /home/rembserj/code/root/tree/treeplayer/src/TTreeFormula.cxx:3760:97: warning: backslash and newline separated by space; 3760 | ""Could not init branch associated to this leaf (%s)."", leaf->GetName()); \; |; /home/rembserj/code/root/tree/treeplayer/src/TTreeFormula.cxx:3829:97: warning: backslash and newline separated by space; 3829 | } \; |; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15465:31,avoid,avoid,31,https://root.cern,https://github.com/root-project/root/pull/15465,1,['avoid'],['avoid']
Safety,Remove wrong and redundant null pointer check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/248:17,redund,redundant,17,https://root.cern,https://github.com/root-project/root/pull/248,1,['redund'],['redundant']
Safety,Removed milestone - timeout.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12846#issuecomment-1754805137:20,timeout,timeout,20,https://root.cern,https://github.com/root-project/root/pull/12846#issuecomment-1754805137,1,['timeout'],['timeout']
Safety,Removed redundant -fmodule-map-file= compilation flag.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/551:8,redund,redundant,8,https://root.cern,https://github.com/root-project/root/pull/551,1,['redund'],['redundant']
Safety,"Removed the false comment and moved the `unique_ptr` declaration above `TextInputHolder`, in case `TextInputHolder::~TextInputHolder()` still access it (in the future). However, I am thinking about enhancing CLI completion support of cling. Such as tab completion. Currently cling only prints completion suggestion but does not complete the input buffer for the user when only single unambiguous completion exists. Also the completion does not recognize meta command like `.x`, `.L` so it does not try to complete its arguments (paths). And the path does not expand `~` to home dir.; @Axel-Naumann , do you think it is a good idea for cling to adopt `llvm::LineEditor` ? (https://llvm.org/doxygen/classllvm_1_1LineEditor.html) ; Or building cling's own readline/libedit wrapper? ; `core/textinput/src/textinput/doc/textinput.txt` states that `textinput` is created to avoid depending on readline/libedit in year 2011.; Is it still true today 2022? cling highly depends on llvm now so it should be fine to adopt `llvm::LineEditor` (created in 2013. `textinput` predates it).; I have a prototype cling with the above enhanced completion support based on libedit but I will only create PR if cling (and all root components currently using `textinput` ) are open to such changes and dependency. I can refactor to use `llvm::LineEditor` instead. It is not too hard since the latter is also a libedit wrapper.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11274#issuecomment-1232115062:868,avoid,avoid,868,https://root.cern,https://github.com/root-project/root/pull/11274#issuecomment-1232115062,1,['avoid'],['avoid']
Safety,Removing usage of enum is easy in favor of using builtin strings to distinguish operation type in distributed RDataFrame. This also avoids an extra dependency for Python2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7772:132,avoid,avoids,132,https://root.cern,https://github.com/root-project/root/pull/7772,1,['avoid'],['avoids']
Safety,Rename RooHistFunc::getObservables to not hide; RooAbsArg::getObservables. This is done to avoid breaking user code in the upcoming release (doesn't affect ROOT 6.24).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7911:91,avoid,avoid,91,https://root.cern,https://github.com/root-project/root/pull/7911,1,['avoid'],['avoid']
Safety,Replace gSystem->Which() with gSystem->FindFile() calls; Idea to avoid methods which returns `char *` value which should be deleted.; While there is already alternative - use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4889:65,avoid,avoid,65,https://root.cern,https://github.com/root-project/root/pull/4889,1,['avoid'],['avoid']
Safety,"Reproducer:. ```; root [0] auto x = std::make_pair(42, 84);; root [1] auto *xp = &x;; root [2] TTree t(""t"", ""t""); (TTree &) Name: t Title: t; root [3] t.Branch(""x"", &xp); Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; In module 'Core':; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; root [4] t.Branch(""x"", &x); Error in <HandleInterpreterException>: Trying to dereference null pointer or trying to call routine taking non-null arguments; Execution of your code was aborted.; /home/blue/ROOT/dev/cmake-build-foo/include/TClass.h:635:38: warning: null passed to a callee that requires a non-null argument [-Wnonnull]; size_t hint_offset = ((char*)&(p->second)) - (char*)p;; ^; ```. Note the ""Execution of your code was aborted"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11215:325,abort,aborted,325,https://root.cern,https://github.com/root-project/root/issues/11215,3,['abort'],['aborted']
Safety,"Respawn genvector tests because they accidentally dropped out from the building and testing process during the migration to CMake.; Minimal changes to the code were applied to let them run, respecting the original coding style. # This Pull request:. ## Changes or fixes:; It does not fix an existing issue, but rather it increases the test coverage recovering some tests. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13633:349,recover,recovering,349,https://root.cern,https://github.com/root-project/root/pull/13633,1,['recover'],['recovering']
Safety,Reuse component from `RBrowser`. Provide plugin to load file dialog on demand.; Avoids hard dependency from RBrowser libs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13118:80,Avoid,Avoids,80,https://root.cern,https://github.com/root-project/root/pull/13118,1,['Avoid'],['Avoids']
Safety,"Revert ""Avoid dupe ""llvm.ident"" operands.""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10964:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/10964,1,['Avoid'],['Avoid']
Safety,"Revert ""Fix detection of Python3 on Windows""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5503:12,detect,detection,12,https://root.cern,https://github.com/root-project/root/pull/5503,1,['detect'],['detection']
Safety,"Revert ""Move inline method to implementation file to avoid inline",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/722:53,avoid,avoid,53,https://root.cern,https://github.com/root-project/root/pull/722,1,['avoid'],['avoid']
Safety,"Reverts root-project/root#9251 due to failures in LCG. In 1c38aa0 we made it possible to use installed json versions which do not have `json_fwd.h` to forward declare the json classes. However in this case, that brings the entire json package in the dictionaries. In turn, then we will need to build Json.pcm to avoid content duplication. This in turn requires LCG to provide ROOT_INCLUDE_PATH=/path/to/json at runtime. Is this all worth it?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9267:312,avoid,avoid,312,https://root.cern,https://github.com/root-project/root/pull/9267,1,['avoid'],['avoid']
Safety,Rewrite the RDataFrame JIT logic to avoid controlled leaks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15520:36,avoid,avoid,36,https://root.cern,https://github.com/root-project/root/issues/15520,1,['avoid'],['avoid']
Safety,"Right, thanks for the explanation. I see now there is a comment about this @ https://root.cern.ch/doc/master/classTColor.html ... I'll tell my users to avoid thinking that kWhite fillcolor is a white fill color. It would be nice if there was a predefined actually-white fill color, but for now I'll try to work around this ""feature"" with the users. Thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14605#issuecomment-1933719744:152,avoid,avoid,152,https://root.cern,https://github.com/root-project/root/issues/14605#issuecomment-1933719744,1,['avoid'],['avoid']
Safety,RooAddPdf: Avoid UB in checkObservables [v6.20],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9571:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/9571,1,['Avoid'],['Avoid']
Safety,RooAddPdf: Avoid UB in checkObservables [v6.22],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9570:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/9570,1,['Avoid'],['Avoid']
Safety,RooAddPdf: Avoid UB in checkObservables [v6.24],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9569:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/9569,1,['Avoid'],['Avoid']
Safety,RooAddPdf: Avoid UB in checkObservables [v6.26],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9568:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/9568,1,['Avoid'],['Avoid']
Safety,"RooFit currently includes the `RooCBShape` and `RooDSCBShape` to; represent the family of crystal ball distributions. The `RooCBShape`; only has a left tail, and `RooDSCBShape` has two independently; parametrized tails. Some users also want a crystal ball where the width of the Gaussian; core is different on the left and the right side (see e.g. Jira ticket; [ROOT-10388](https://sft.its.cern.ch/jira/browse/ROOT-10388)). To make the RooFit code more maintainable and also cover the use case; of an asymmetric Gaussian core, this commit implements a new; `RooCrystalBall` class that should cover all classes of crystal ball; shapes, such that `RooCBShape` and `RooDSCBShape` are in principle not; necessary anymore. The new features of the `RooCrystalBall` class that make it different; from `RooDSCBShape` are:. - possibility to set sigma of left side and right side of Gaussian; core separately. - code modernization and using `std::` math functions. - three constructors: fully parametrized, symmetric Gaussian core; (to replace `RooDSCBShape`), only left tail (to replace; `RooCBShape`). - useage of inlined helper functions to avoid code duplication. It is also carefully tested in `testRooCrystalBal`:. - test the fully parameterized case. - test the constructor for left-tail only case and compare values; with `RooCBShape`. - test the constructor with symmetric Gaussian core and compare; values with `RooDSCBShape`. - test the constructor for right-tail only and symmetric tails. - test integration with many possible combinations integration; ranges to cover all branches of integration code",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7257:1134,avoid,avoid,1134,https://root.cern,https://github.com/root-project/root/pull/7257,1,['avoid'],['avoid']
Safety,"RooFit is never used without optimization flags, and I want to avoid calling `new` and `delete` explicitly in RooFit to minimize the risk of unintended memory leaks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10263#issuecomment-1081687103:63,avoid,avoid,63,https://root.cern,https://github.com/root-project/root/pull/10263#issuecomment-1081687103,2,"['avoid', 'risk']","['avoid', 'risk']"
Safety,"RooMomentMorphND was initialising fractions to zero. That will lead to; an all-zero PDF, which triggers evaluation errors. Setting all fractions; to 1 avoids those warnings, and the correct values will be calculated; during the first fit step.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6110:151,avoid,avoids,151,https://root.cern,https://github.com/root-project/root/pull/6110,1,['avoid'],['avoids']
Safety,RooThresholdCategory cannot be successfully streamed because not all members are initialized safely in the default constructor. This PR fixes that.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4007:93,safe,safely,93,https://root.cern,https://github.com/root-project/root/pull/4007,1,['safe'],['safely']
Safety,"Root has two different ways to configure the build - the traditional configure script and cmake. The builds generated by the two systems are similar, but far from equivalent. Historically the configure script has been more feature complete and some things that the configure script is able to do are either missing or broken in the cmake build. However, new features are often only added to the cmake build. This has resulted in that today neither of the two is able to build root with a complete set of features. The cmake build is more standard and behaves in a more predictive way, e.g. it understands CFLAGS, LDFLAGS and friends which the configure script never did. It also integrates the test suite in the build and allows for running ""make test"", a feature that the configure script is missing. So the cmake build is in many ways better, if it wasn't for those missing and broken things mentioned earlier. This pull request is an attempt to address those missing and broken issues (though it fixes a few things for the configure script as well). Also contains a fix for ROOT-7326.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/153:569,predict,predictive,569,https://root.cern,https://github.com/root-project/root/pull/153,1,['predict'],['predictive']
Safety,"RptjBM1fTLrmOZgEI%3D&reserved=0> --key ~/.globus/userkey.pem --cert ~/.globus/usercert.pem --capath /etc/grid-security/certificates; >>>>>> ; >>>>>> ; >>>>>> regards,; >>>>>> Asoka; >>>>>> ; >>>>>>> On May 12, 2021, at 10:18 AM, Axel Naumann ***@***.*** ***@***.***>> wrote:; >>>>>>> ; >>>>>>> ; >>>>>>> Right - without authentication I cannot see what's happening. If this is due to a redirect it would be a dupe of #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461016279%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Sfm43%2BJmWVsFVHOn7Tob%2BXe4STr003%2FgQQiBpBRgur0%3D&reserved=0> - if not then it's different :-) But I don't know how to tell whether it's a redirect. Do you?; >>>>>>> ; >>>>>>> If not let's get #8155 <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461016279%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=Sfm43%2BJmWVsFVHOn7Tob%2BXe4STr003%2FgQQiBpBRgur0%3D&reserved=0> fixed and then we re-visit this one: either it's fixed, too, or we need to call in help from the Davix (?) folks.; >>>>>>> ; >>>>>>> —; >>>>>>> You are receiving this because you authored the thread.; >>>>>>> Reply to this email directly, view it on GitHub <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8092%23issuecomment-839953723&data=04%7C01%7Csimonliu%40triumf.ca%7C2bf615c9bb89486eaecd08d91571b94b%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564400461026272%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840018942:9424,safe,safelinks,9424,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840018942,1,['safe'],['safelinks']
Safety,Run `stressGraphics` in web mode when chrome/firefox detected,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16610:53,detect,detected,53,https://root.cern,https://github.com/root-project/root/pull/16610,1,['detect'],['detected']
Safety,Run stressGraphics in web mode when chrome/firefox detected,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16635:51,detect,detected,51,https://root.cern,https://github.com/root-project/root/pull/16635,1,['detect'],['detected']
Safety,Run tutorials with a maximum of 4 threads to avoid MT problems on some machines. Disable also OpenMP when running in MT in ROOT. Reduce also by a factor of 5 the number of input events,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12310:45,avoid,avoid,45,https://root.cern,https://github.com/root-project/root/pull/12310,1,['avoid'],['avoid']
Safety,"RunGraphs makes a summary log entry for the jitting time of all computation graphs that are being run concurrently. Generally this is ok, but in the case users specifically requested a log level of kDebug+10 or higher this would accidentally silence the logging of what code is being jitted.; With this patch, if log level is kDebug+10 or higher, RunGraphs avoids silencing inner logs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11832:357,avoid,avoids,357,https://root.cern,https://github.com/root-project/root/pull/11832,1,['avoid'],['avoids']
Safety,"Running `roottest-python-basic-datatype` under `gdb`:; ```; #0 0x00007ffff63ee52f in raise () from /lib64/libc.so.6; #1 0x00007ffff63c1e65 in abort () from /lib64/libc.so.6; #2 0x00007ffff63c1d39 in __assert_fail_base.cold.0 () from /lib64/libc.so.6; #3 0x00007ffff63e6e86 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffeab9b265 in cling::Transaction::addNestedTransaction (this=<optimized out>, nested=<optimized out>) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/Transaction.cpp:98; #5 0x00007fffeaad2f23 in cling::IncrementalParser::beginTransaction (this=0x555555c3bee0, Opts=...) at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/IncrementalParser.cpp:496; #6 0x00007fffeaac4776 in cling::Interpreter::PushTransactionRAII::PushTransactionRAII (this=0x7fffffff7338, i=<optimized out>); at /home/jhahnfel/ROOT/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:105; #7 0x00007fffeaa5b252 in ClingMemberIterInternal::DCIter::DCIter (this=0x7fffffff73d0, DC=0x555557208818, interp=0x0) at /home/jhahnfel/ROOT/src/core/metacling/src/TClingMemberIter.cxx:21; #8 0x00007fffeaa57951 in TClingMemberIter::TClingMemberIter (this=0x7fffffff73b8, interp=0x555555803e60, DC=0x7fffffff6ff0) at /home/jhahnfel/ROOT/src/core/metacling/src/TClingMemberIter.h:145; #9 TClingDataMemberIter::TClingDataMemberIter (this=0x7fffffff73b8, interp=0x555555803e60, DC=0x7fffffff6ff0, selection=TDictionary::EMemberSelection::kNoUsingDecls); at /home/jhahnfel/ROOT/src/core/metacling/src/TClingDataMemberInfo.h:66; #10 TClingDataMemberInfo::TClingDataMemberInfo (this=0x55555b2f2b30, interp=0x555555803e60, ci=<optimized out>, selection=TDictionary::EMemberSelection::kNoUsingDecls); at /home/jhahnfel/ROOT/src/core/metacling/src/TClingDataMemberInfo.cxx:115; #11 0x00007fffea9c66da in TCling::DataMemberInfo_Factory (this=0x555555b29730, clinfo=0x55555a9b6510, selection=TDictionary::EMemberSelection::kNoUsingDecls); at /home/jhahnfel/ROOT/src/core/metacling/src/TCling.cxx:8599; #12",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16338#issuecomment-2370776890:142,abort,abort,142,https://root.cern,https://github.com/root-project/root/pull/16338#issuecomment-2370776890,1,['abort'],['abort']
Safety,"S/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranch.cxx:854; #11 0x00007ff4494ae36b in TBranchElement::FillImpl (this=0x7ff42547e5f0, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1265; #12 0x00007ff4494ae069 in TBranchElement::FillImpl (this=0x7ff425170850, imtHelper=0x0) at /home/aliperf/aliperf_workspace/sw/SOURCES/ROOT/v6-24-02/v6-24-02/tree/tree/src/TBranchElement.cxx:1290; #13 0x00007ff44f4faf89 in TBranch::Fill (this=0x7ff425170850) at /home/aliperf/aliperf_workspace/sw/slc7_x86-64/ROOT/v6-24-02-local5/include/TBranch.h:201; #14 o2::base::DetImpl<o2::trd::Detector>::mergeAndAdjustHits<std::vector<o2::trd::Hit, std::allocator<o2::trd::Hit> > > (this=this; entry=0x3e69680, brname=..., origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:403; #15 0x00007ff44f4fb507 in o2::base::DetImpl<o2::trd::Detector>::mergeHitEntries (this=0x3e69680, origin=..., target=..., trackoffsets=..., nprimaries=..., subevtsOrdered=...) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/Detectors/Base/include/DetectorsBase/Detector.h:422; #16 0x00000000004456e1 in o2::devices::O2HitMerger::mergeAndFlushData (this=0x162d640, eventID=<optimized out>) at /home/aliperf/aliperf_workspace/sw/SOURCES/O2/dev/0/run/O2HitMerger.h:745; #17 0x00007ff446ec9f10 in std::execute_native_thread_routine (__p=0x7ad9e10) at ../../../../../gcc/libstdc++-v3/src/c++11/thread.cc:80; #18 0x00007ff44e186ea5 in start_thread () from /lib64/libpthread.so.0; #19 0x00007ff44680796d in clone () from /lib64/libc.so.6. Thread 5 (Thread 0x7ff42a18e700 (LWP 25519) ""o2-sim-hit-merg""):; #0 0x00007ff44e18ade2 in pthread_cond_timedwait. GLIBC_2.3.2 () from /lib64/libpthread.so.0; #1 0x00007ff44aca29d3 in __gthread_cond_timedwait (__abs_timeout=0x7ff42a187a30, __mutex=<optimized out>, __cond=<optimized out>) at /home/aliperf/aliper",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8931:4160,Detect,Detector,4160,https://root.cern,https://github.com/root-project/root/issues/8931,1,['Detect'],['Detector']
Safety,"SPlot; Failed to load module Hbook; Failed to load module RooFit; Failed to load module RCsg; Failed to load module RooStats; Failed to load module RooFitRDataFrameHelpers; Failed to load module GeomBuilder; Failed to load module Proof; Failed to load module FITSIO; Failed to load module Ged; Failed to load module Recorder; Failed to load module FFTW; Failed to load module GuiBld; Failed to load module ROOTWebDisplay; Failed to load module RooFitCore; Failed to load module Gui; Failed to load module ROOTHistDraw; Failed to load module GX11TTF; Failed to load module ROOTTMVASofie; Failed to load module ProofPlayer; Failed to load module ASImage; Failed to load module MathMore; Failed to load module RooFitHS3; Failed to load module Foam; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ProofBench; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; Failed to load module SessionViewer; RunTest: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:3940: bool clang::Lexer::LexTokenInternal(clang::Token&, bool): Assertion `Result.is(tok::eof) && ""Preprocessor did not set tok:eof""' failed.; Aborted (core dumped); ```; Even though Vc.pcm is sitting right next to MathCore.pcm; export ROOT_INCLUDE_PATH does solve this problem (see the other tests in the repeater), but at least to me this behaviour or at least the error message seems questionable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9594#issuecomment-1029801305:4182,Abort,Aborted,4182,https://root.cern,https://github.com/root-project/root/issues/9594#issuecomment-1029801305,1,['Abort'],['Aborted']
Safety,Same issue on Ubuntu 22.04. Happens in `core/newdelete/src/NewDelete.cxx:207`. Maybe related: https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989/21,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14767#issuecomment-1953734723:123,abort,aborting-with-std-align-val-t-is-not-implemented-yet-rhel-,123,https://root.cern,https://github.com/root-project/root/issues/14767#issuecomment-1953734723,1,['abort'],['aborting-with-std-align-val-t-is-not-implemented-yet-rhel-']
Safety,"Second round of testing with `./tree/dataframe/test/dataframe_cache --gtest_filter=Cache.Ambiguity`, the result with `git-bisect` is:; ```; 99701af2bae25872aa0795fa08c6337232ff2f3c is the first bad commit; commit 99701af2bae25872aa0795fa08c6337232ff2f3c; Author: Enrico Guiraud <enrico.guiraud@cern.ch>; Date: Tue Oct 26 10:28:14 2021 +0200. [DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines. Before this commit, each action and filter was calling InitSlot on all; the defines it knew about. As a consequence, RDefine had to keep track; of whether InitSlot was already called on it for a given task and a; given slot. We can avoid the multiple InitSlot calls on the same objects and the; book-keeping of whether the call already happened or not by having; RLoopManager call InitSlot on every defined column once per task and per; slot. To this end, we need to register RDefine objects with the; RLoopManager when they are created and deregister them when they are; destroyed. tree/dataframe/inc/ROOT/RDF/RAction.hxx | 14 +++++++-------; tree/dataframe/inc/ROOT/RDF/RBookedDefines.hxx | 5 +++++; tree/dataframe/inc/ROOT/RDF/RDefine.hxx | 20 ++++++--------------; tree/dataframe/inc/ROOT/RDF/RDefineBase.hxx | 1 -; tree/dataframe/inc/ROOT/RDF/RFilter.hxx | 14 ++++++--------; tree/dataframe/inc/ROOT/RDF/RInterface.hxx | 8 +++++---; tree/dataframe/inc/ROOT/RDF/RJittedDefine.hxx | 1 +; tree/dataframe/inc/ROOT/RDF/RLoopManager.hxx | 4 ++++; tree/dataframe/src/RDFBookedDefines.cxx | 5 +++++; tree/dataframe/src/RDefineBase.cxx | 10 ++++------; tree/dataframe/src/RJittedDefine.cxx | 6 ++++++; tree/dataframe/src/RLoopManager.cxx | 15 +++++++++++++++; 12 files changed, 64 insertions(+), 39 deletions(-); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10007#issuecomment-1057004565:347,Avoid,Avoid,347,https://root.cern,https://github.com/root-project/root/issues/10007#issuecomment-1057004565,2,"['Avoid', 'avoid']","['Avoid', 'avoid']"
Safety,"See [SafeDelete definition](https://github.com/root-mirror/root/blob/edfa4cc5d8c02c626dbc3f0e9283f8fd9b28698b/core/base/inc/RConfig.h#L465). It seems that new static analyzer exhumes lots of ancient legacy. Do I (we) need to give attention to such cases?. And it seems that there is no ""Issues"" tab in this repository. I have got some suspicious places and I'm not sure how to fix them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/249:5,Safe,SafeDelete,5,https://root.cern,https://github.com/root-project/root/pull/249,1,['Safe'],['SafeDelete']
Safety,"See discussion at https://github.com/root-project/root/pull/7286. This set of improvements to TBufferMerger (and more) was inspired by the terrible performance of the parallel merging (and fast merging in general) in the case where the TTree has a very large number of branches (1000+). Where in the original version a TBufferMerger with a file with 1000+ branches and only 50s and ran with any number of threads would take more than 3m (did not wait until the end) the new version takes 11s with 1 thread, 8s with 6 threads and 22s with 6 thread when increased to 500 events. (using the CMS file ../data//250202_181_RECO.root). This PR includes:. * Skipping the boxing/compressing/uncompressing/unboxing cycle if the TBufferMerger is available (not already merging) when the thread is writing its TMemFile. * Skipping SetBranchAddress and SetMakeClass in when doing fast cloning (where that information is not used anyway). * Replacing calling to the slow TObjArray::GetEntries (which counts the slot used) by calling GetEntriesFast. * Speeding up the GetMother implementation (caching parent's address sooner when reading, use that information in GetMother). * In fast cloning, delay writing the output until the last input is processed (instead of writing the output after each input),. * Optimization of fast cloning handing of empty write basket. It also contains a couple of bug fixes (RNtuple merging forgetting to merge the result of the objects in the file, iofeatures incorrectly cloned). Also made TBufferMerger::GetQueueSize actually thread safe (it is necessary to use it to stop the producer from adding more data if the queue is too full). Also improved TClass::GetBaseClassOffset parallelism (benefit parallel boxing/unboxing) and reduced/removed contention see in the mechanism use to determine the actual object type at run-time (TIsAProxy).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7339:1553,safe,safe,1553,https://root.cern,https://github.com/root-project/root/pull/7339,1,['safe'],['safe']
Safety,See the bug report at Microsoft: [Problem with how the compiler generates covariant virtual functions](https://developercommunity.visualstudio.com/t/Problem-with-how-the-compiler-generates/1441440); And the proposed workaround:; >It turns out to be a problem with how the compiler generates the covariant virtual function `Clone` in `FunctorGradHandler`. To address the issue just use the original return type of the virtual base:; >```; >template; >class FunctorGradHandler : public ParentFunctor::Impl {; >...; > typename ParentFunctor::ImplBase* Clone() const { return Copy(); }; >...; >};; >```; > This should avoid the need for the compiler to generate the problematic covariant function.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8335:614,avoid,avoid,614,https://root.cern,https://github.com/root-project/root/pull/8335,1,['avoid'],['avoid']
Safety,"See the related failures created on the CI: https://github.com/root-project/root/pull/16664/checks?check_run_id=31435842971 where we run just the TMVA test to increase the chance of collisions .... and indeed the `tutorial-tmva-TMVA_SOFIE_GNN_Application` fails on most platforms with:; ```; /github/home/ROOT-CI/src/tutorials/tmva/TMVA_SOFIE_GNN_Application.C:10:10: fatal error: 'encoder.hxx' file not found; #include ""encoder.hxx""; ^~~~~~~~~~~~~; ```; and `tutorial-tmva-TMVA_RNN_Classification-py` fails (on just alma9-clang) due to timeout. -------. This specific issue is resolved by https://github.com/root-project/root/pull/16711",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16553#issuecomment-2408535597:537,timeout,timeout,537,https://root.cern,https://github.com/root-project/root/issues/16553#issuecomment-2408535597,1,['timeout'],['timeout']
Safety,"Seems like ignore-non-existent-contents is quite new,; so we just remove it for now to avoid crashing on; parsing this file with the old clang version inside; ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/536:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/536,1,['avoid'],['avoid']
Safety,"Seems no :-(. I downloaded https://github.com/bellenot/root/tree/check-internet-connection but I didn't expect that:. it hangs after git; ~/sw/root-bld-test$ cmake -DCMAKE_INSALL_PREFIX=../root-inst-test ../root-check-internet-connection; -- The C compiler identification is GNU 8.3.1; -- The CXX compiler identification is GNU 8.3.1; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: /usr/bin/git (found version ""2.27.0""); ^C. I retired the same command on the (6.24.00) here it workes. I'm sorry, there is still something wrong in the build system. Georg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-867613908:439,Detect,Detecting,439,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-867613908,8,['Detect'],['Detecting']
Safety,"Server certificate:; >>> * 	subject: CN=dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>,OU=triumf.ca <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Ftriumf.ca%2F&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643147501%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=0DVPYYS02Z%2FWDinl5epoHThDnGOb4UCelc0w7lDZwVc%3D&reserved=0>,O=Grid,C=CA; >>> * 	start date: Apr 08 16:29:03 2021 GMT; >>> * 	expire date: May 08 16:29:03 2022 GMT; >>> * 	common name: dpool46.lcg.triumf.ca <http://dpool46.lcg.triumf.ca/>; >>> * 	issuer: CN=Grid Canada Certificate Authority,O=Grid,C=CA; >>> * NSS error -8179 (SEC_ERROR_UNKNOWN_ISSUER); >>> * Peer's Certificate issuer is not recognized.; >>> * Closing connection 0; >>> curl: (60) Peer's Certificate issuer is not recognized.; >>> More details here: http://curl.haxx.se/docs/sslcerts.html <https://can01.safelinks.protection.outlook.com/?url=http%3A%2F%2Fcurl.haxx.se%2Fdocs%2Fsslcerts.html&data=04%7C01%7Cdqing%40triumf.ca%7C96f8066e53054f808afe08d9156b7b02%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564373643147501%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=NTi7%2BFO82QY6dKBp1en9fAODpFl%2FzZ0cHCZ3DsJzOIM%3D&reserved=0>; >>> ; >>> curl performs SSL certificate verification by default, using a ""bundle""; >>> of Certificate Authority (CA) public keys (CA certs). If the default; >>> bundle file isn't adequate, you can specify an alternate file; >>> using the --cacert option.; >>> If this HTTPS server uses a certificate signed by a CA represented in; >>> the bundle, the certificate verification probably failed due to a; >>> problem with the certificate (it might be expired, or the name might; >>> not match the domain name in the URL).; >>> If you'd like to turn off curl's verification of the certificate, use; >>> the -k (or --insecu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-839972447:4157,safe,safelinks,4157,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-839972447,1,['safe'],['safelinks']
Safety,Set the CMake policy `CMP0091 (MSVC runtime library flags are selected by an abstraction)` to `OLD` to keep the old way of selecting the runtime library with the `-MD`/`-MDd` compiler flag. This fixes several compilation errors like:; ```; RStl.obj : error LNK2038: mismatch detected for '_ITERATOR_DEBUG_LEVEL': value '0' doesn't match value '2' in rootcling_stage1.obj; RStl.obj : error LNK2038: mismatch detected for 'RuntimeLibrary': value 'MD_DynamicRelease' doesn't match value 'MDd_DynamicDebug' in rootcling_stage1.obj; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8810:275,detect,detected,275,https://root.cern,https://github.com/root-project/root/pull/8810,2,['detect'],['detected']
Safety,"Set the environment for the tutorials, which is the eventual ROOT_environ plus some environment variables related to limiting the number of threads used by NumPy.; See: https://stackoverflow.com/questions/30791550/limit-number-of-threads-in-numpy. Possibly related to #16552, but the main motivation is to avoid an excessive number of threads when running the RooFit tutorials for simulation based inference. So far, the environment was set inside these tutorials, but this is distracting to users who look at these tutorials. Also, make sure that the same environment is used for all tutorials that are wrapped in `ROOT_ADD_TEST`. Furthermore, remove unused helper function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16717:306,avoid,avoid,306,https://root.cern,https://github.com/root-project/root/pull/16717,1,['avoid'],['avoid']
Safety,"Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```; Thread 2 (Thread 0xa2784b40 (LWP 4590)):; #0 0xb7fa1d61 in __kernel_vsyscall (); #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88; #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502; #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655; #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6; #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99; #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674); at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167; #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (; __f=...) at /usr/include/c++/8/bits/invoke.h:60; #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...); at /usr/include/c++/8/bits/invoke.h:95; #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674); at /usr/include/c++/8/thread:244; #10 0x004809",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5596:175,timeout,timeout,175,https://root.cern,https://github.com/root-project/root/pull/5596,1,['timeout'],['timeout']
Safety,"Setting the move constructor and move assignment operator to = default; causes linker errors because the copy assignment operator is not; implemented in the TIterator base class. Having the RooLinkedListIter move constructor and assignment operators; work is important to keep user code compatibility. This is done to avoid breaking user code in the upcoming release (doesn't affect ROOT 6.24 because problem exists only since https://github.com/root-project/root/pull/7641). With the current master, the linker error can be reproduces like this;; ```C++; void iterator_test() {. RooArgSet argSet1;; RooArgSet argSet2;. RooLinkedListIter iter{argSet1.iterator()};. iter = argSet2.iterator();; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7910:318,avoid,avoid,318,https://root.cern,https://github.com/root-project/root/pull/7910,1,['avoid'],['avoid']
Safety,"Setting the size of the transient buffer only in the constructor was a mistake, because it's never called when the RooBernstein is read back from a file. To be safe, the buffer size should be checked everytime that it's used. Closes #15690.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15695:160,safe,safe,160,https://root.cern,https://github.com/root-project/root/pull/15695,1,['safe'],['safe']
Safety,"Several small issues came up in the forum, and this is a collection of documentation updates, a few safety checks added to roofit and more understandable warning/error messages. Further, the class RooRealProxy (kind of a pointer with extra functionality) has been replaced by a templated class, as it always requires casting when the pointed-to object is used. Since it is internal to RooFit, this should not affect users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4739:100,safe,safety,100,https://root.cern,https://github.com/root-project/root/pull/4739,1,['safe'],['safety']
Safety,Should avoid problems on 32bit debian,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8574:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/8574,1,['avoid'],['avoid']
Safety,Should one actually have a look at all the casts between double/float and int? Maybe even use some kind of safe cast function?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6499#issuecomment-700850085:107,safe,safe,107,https://root.cern,https://github.com/root-project/root/pull/6499#issuecomment-700850085,1,['safe'],['safe']
Safety,"Should solve ROOT-10583; When pgon used in CSG transformation, it is important to have shape without inner surface.; Also avoid use of implicit Bool_t -> Int_t conversion, it is not guaranteed that kTRUE value always 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5050:122,avoid,avoid,122,https://root.cern,https://github.com/root-project/root/pull/5050,1,['avoid'],['avoid']
Safety,"Should the limit be lowered to `EnableExplicitMT()` (i.e. when called with the default argument)? If 32bit and > 8 cores, cap it at 8 threads? Else we run the risk of exhausting the address space again soon enough with some other test, or on some user's analysis... What do you think? Or is this the user's responsibility?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6842#issuecomment-729921680:159,risk,risk,159,https://root.cern,https://github.com/root-project/root/pull/6842#issuecomment-729921680,1,['risk'],['risk']
Safety,"Should we get this into master before the v6-16-patches branch, or is there a risk of havoc and it should only end up after the branch / only in master? (I am convinced we should merge it now, but this is your call.). Btw, you can just add ""ready to merge"" tag to signal this.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2945#issuecomment-437296352:78,risk,risk,78,https://root.cern,https://github.com/root-project/root/pull/2945#issuecomment-437296352,1,['risk'],['risk']
Safety,Shouldn't we put some conditions in order to avoid the libmvec bug?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2072#issuecomment-391376012:45,avoid,avoid,45,https://root.cern,https://github.com/root-project/root/pull/2072#issuecomment-391376012,1,['avoid'],['avoid']
Safety,"Significant revamp of FillBuffer. The new scheme insures a much more stable and efficient behavior in case of low; memory given by the user compared to the size of the buffer or 'odd' basket; layout. The basket collection is now done in 4 phases:. 1. One basket per branch, basket must contains the request entry and is not yet loaded or used,; 2. Even out by adding baskets so that all branches reach the same entry (or close); 3. Add the remaining branches from the current cluster.; 4. Add the basket from the begining of the clsuter to the current entry (if any). then repeat the 4 steps for the next cluster. The iteration is stopped as soon as the cache is 'full' as defined by these; rules:. - During step 1 of the first cluster, continue up to 4 times the user requested; cache size; - During steps 2 to 4 of the first cluster, continue up to 2 times the user; requested cache sizep; - During steps 2 to 4, the 'first' basket of a branch is accepted up to 4 times; the user requested cache size (i.e as if it had been selected during the 1st; step); - During the other clusters, continue up to the user requested cache size. A basket if rejected/skipped if its individual size is larger than the user; requested cache size. In addition, upon seeing a cache miss, FillBuffer now detects if all the basket; in the cache have already been used (read from the cache) in which case we can\; discard them and load the next set of baskets. As a side effect, we now keep a record of which baskets are in the cache and; which of those baskets have been used. The TTreePerfStats now keep a complete; log of all the basket that are:; - loaded in the main cache (and how many times); - loaded in the 'misss' cache (and how many times); - used; - read directly (complete cache miss); This will be helpful in understanding situation of over-read or slow operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1960:1286,detect,detects,1286,https://root.cern,https://github.com/root-project/root/pull/1960,1,['detect'],['detects']
Safety,"Silence a zillion of compilation warnings like:; ```; warning C4267: 'initializing': conversion from 'size_t' to 'UInt_t', possible loss of data; ```; From Microsoft:; Compiler Warning (level 3) C4267; 'var' : conversion from 'size_t' to 'type', possible loss of data; The compiler detected a conversion from size_t to a smaller type.; To fix this warning, use size_t instead of type. Alternatively, use an integral type that is at least as large as size_t.; (size_t is unsigned __int64 or unsigned integer, depending on the target platform)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9197:282,detect,detected,282,https://root.cern,https://github.com/root-project/root/pull/9197,1,['detect'],['detected']
Safety,Simplify the deregistration procedure to `RLoopManager` and avoid relying on the order during member destruction of `RColumnRegister`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10072:60,avoid,avoid,60,https://root.cern,https://github.com/root-project/root/pull/10072,1,['avoid'],['avoid']
Safety,Since JSROOT v7 one should use modules or bundle provided as `build/jsroot.js`.; This bundle can be loaded with `require.js` (as in jupyter notebooks) or just as regular script (as in jupyter lab). Usage of `JSRootCore.js` is obsolete and should be avoided. Use JSROOT version 7.2.1 as fallback if local version is not available.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11767:249,avoid,avoided,249,https://root.cern,https://github.com/root-project/root/pull/11767,1,['avoid'],['avoided']
Safety,"Since ROOT 6.26, the HistFactory models include the RooBinWidthFunction; to multiply the yields in the RooHistFuncs with the inverse bin widths,; in order to get the correct probability density. That's great and fixes HistFactory for non-uniform binnings, but it is; not optimal for the `BinnedLikelihood` code path. Here, the bin widths; need to multiplied back again to get the event yields in each bin. This commit suggests to improve the situation for the new BatchMode by; propagating the information that we are building a binned likelihood; down to the RooBinWidthFunctions, such that they can remove themselves. Then, if such RooBinWidthFunctions were encountered and disabled, the NLL; knows that it can skip the multiplication with the bin widths. What is proposed here looks like a small performance optimization only,; but actually the main motivation is not performance but RooFit AD; support. By removing the RooBinWidthFunctions from the computation graphs; of HistFactory likelihoods, we don't need to implement code generation; support for this class, which would be not trivial in the general; n-dimensional case. With the suggestion in this PR, all that work is; avoided.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13024:1182,avoid,avoided,1182,https://root.cern,https://github.com/root-project/root/pull/13024,1,['avoid'],['avoided']
Safety,"Since TFormula accepts seriously broken formulae, ""x+t"" is, for example,; interpreted as a four-dimensional formula that can be evaluated; using Eval(x=2), using undefined values for {y,z,t}, RooFit needs to do; some safety checks. This formula would otherwise be valid in RooFit:; RooFormula form(""form"", ""x<y"", x);. That's an aftermath to #5360, where Enrico correctly raised that point that only writing a warning in the documentation will not help most users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5413:217,safe,safety,217,https://root.cern,https://github.com/root-project/root/pull/5413,1,['safe'],['safety']
Safety,"Since all df10* tutorials use IMT(hardware concurrency), it's; inefficient to run them in parallel. This regularly brings us into; timeouts in the nightlies.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6274:131,timeout,timeouts,131,https://root.cern,https://github.com/root-project/root/pull/6274,1,['timeout'],['timeouts']
Safety,"Since all df10* tutorials use IMT(hardware concurrency), it's; inefficient to run them in parallel. This regularly brings us into; timeouts in the nightlies.; To avoid this, those tutorials are now locking the resource; ""multithreaded"", which means that they don't run in parallel. Other; tests that don't have this resource lock still run, though. To reduce; congestion, the RDF tutorials now claim that they use 4 CPUs. That's in; general not true, on an e.g. 8-core machine, CMake will run an IMT=8; with 4 single-threaded ctest, leading to an oversubscription of 1.5; instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6280:131,timeout,timeouts,131,https://root.cern,https://github.com/root-project/root/pull/6280,2,"['avoid', 'timeout']","['avoid', 'timeouts']"
Safety,"Since output trees are recreated for each task, and each task only; processes one tree cluster (and never crosses file boundaries), we; don't need to add the output trees as clones of the input tress; unless the input trees have friends (which might cross file boundaries); even if the main tree does not. Usage of AddClone here is undesirable in the general case because; it generates many (safe) warnings printed at screen during the event; loop, see ROOT-9487.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2234:392,safe,safe,392,https://root.cern,https://github.com/root-project/root/pull/2234,2,['safe'],['safe']
Safety,"Since the derived class did not have data member, what was the 'problem' with slicing (or did mean a form of type erasure)? As is the new code is 'type-unsafe' as there is no way for the user to even record the type in the RFieldValue ... or am I missing something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3829#issuecomment-493466255:152,unsafe,unsafe,152,https://root.cern,https://github.com/root-project/root/pull/3829#issuecomment-493466255,1,['unsafe'],['unsafe']
Safety,"Since the upgrade to LLVM 13, the Cling test `CodeUnloading/RereadFile.C` fails with; ```; cling: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1499: clang::NamedDecl *getLambdaCallOperatorHelper(const clang::CXXRecordDecl &): Assertion `!Calls.empty() && ""Missing lambda call operator!""' failed.; #0 0x00000000023cb663 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /home/jhahnfel/ROOT/src/interpreter/llvm/src/lib/Support/Unix/Signals.inc:565:13; #1 0x00000000023c9822 llvm::sys::RunSignalHandlers() /home/jhahnfel/ROOT/src/interpreter/llvm/src/lib/Support/Signals.cpp:98:18; #2 0x00000000023cbc6f SignalHandler(int) /home/jhahnfel/ROOT/src/interpreter/llvm/src/lib/Support/Unix/Signals.inc:407:1; #3 0x00007fdc3a8d4b50 __restore_rt (/lib64/libc.so.6+0x4eb50); #4 0x00007fdc3a8d4acf raise (/lib64/libc.so.6+0x4eacf); #5 0x00007fdc3a8a7ea5 abort (/lib64/libc.so.6+0x21ea5); #6 0x00007fdc3a8a7d79 _nl_load_domain.cold.0 (/lib64/libc.so.6+0x21d79); #7 0x00007fdc3a8cd426 (/lib64/libc.so.6+0x47426); #8 0x00000000037504a4 (/home/jhahnfel/ROOT/build-cling-clang/interpreter/llvm/src/bin/cling+0x37504a4); #9 0x00000000037504b6 clang::CXXRecordDecl::getLambdaCallOperator() const /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1513:14; #10 0x0000000003750559 clang::ValueDecl::getType() const /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/include/clang/AST/Decl.h:687:37; #11 0x0000000003750559 clang::CXXRecordDecl::getLambdaStaticInvoker() const /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1524:28; #12 0x00000000038a67b7 (anonymous namespace)::CXXNameMangler::mangleLambdaSig(clang::CXXRecordDecl const*) /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/ItaniumMangle.cpp:1977:3; #13 0x00000000038a59be (anonymous namespace)::CXXNameMangler::mangleLambda(clang::CXXRecordDecl const*) /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/ItaniumMangle.cpp:1948:3; #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12457:877,abort,abort,877,https://root.cern,https://github.com/root-project/root/issues/12457,1,['abort'],['abort']
Safety,"Since there are no tests, it's quite risky ;)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3869#issuecomment-496547077:37,risk,risky,37,https://root.cern,https://github.com/root-project/root/pull/3869#issuecomment-496547077,1,['risk'],['risky']
Safety,"Skip registration of TFile UUIDs in the global list when using the """"""READ_WITHOUT_GLOBALREGISTRATION"""""" option with TFile (used by default in TTreeProcessorMT). This avoids the final use of the global write lock during typical RDataFrame event loops, significantly improving multi-threaded performance for cases with many files and many threads. This follows up on https://github.com/root-project/root/pull/9486 and mostly finishes addressing https://github.com/root-project/root/issues/7710. Skipping the UUID registration breaks the particular case where a TRef points to the TFile object, but as per the discussion in this PR, this use case has thread-safety problems for TFile objects being managed by TTreeProcessorMT anyways. A test case is below. Produce the test dataset:. ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();; }. }; ```. Test event loop:. ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threads (on partly loaded machine, but still representative):. Baseline:; Percent of CPU this job got: 1557%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:49.89. +this PR; Percent of CPU this job got: 14271%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.11",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10318:167,avoid,avoids,167,https://root.cern,https://github.com/root-project/root/pull/10318,2,"['avoid', 'safe']","['avoids', 'safety']"
Safety,Small Minuit2 Improvements: Avoid a duplicate state in FunctionMinimum,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7109:28,Avoid,Avoid,28,https://root.cern,https://github.com/root-project/root/pull/7109,1,['Avoid'],['Avoid']
Safety,Small change to TTree::OptimizeBaskets to avoid disc reads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/369:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/pull/369,1,['avoid'],['avoid']
Safety,Small fix for geometry state recovery in VMC,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3882:29,recover,recovery,29,https://root.cern,https://github.com/root-project/root/pull/3882,1,['recover'],['recovery']
Safety,"So I finally managed to get back to this and try a few things and as a result in my tests I managed to go from 82 MB of overhead to 62 MB. See https://github.com/root-project/root/pull/13641 for the actual code. While there is still a few things to cleanup, I think what I have is fairly general and quite self contained change, so I would appreciate feedback and if people like it, instructions on how to proceed to make sure this ends up upstream. The solution is based on a newly introduced `PagedVector<T>` which allows registering callbacks which get invoked whenever the associated range is accessed the first time. At such point, the range is actually allocated and each element of the range is passed to the callback. Initially I developed a mechanism to be general enough to do complex initialisations of the elements, however I later realised this is not actually needed. In order to optimise the issue with the large vectors `TypesLoaded` and `DeclsLoaded` one only needs to have something which does the default construction of their elements for ranges which are small enough to avoid to large upfront allocations. The code which is currently there in root / clang is already smart enough to lazily initialise only the elements which are actually needed, so the whole issue is to find a good tradeoff between number of ranges and sparse enough ones. A few caveats:. - `PagedVector` is a bad name, I agree. Suggestions are welcome.; - At the moment the implementation allows generic callbacks for ranges, however as I said we only need default initialisation. Removing such flexibility should buy another 1 MB from my test.; - In case `DeclID*` and `QualType` can default to all 0, one could probably achieve the same result in a more elegant way using calloc / realloc.; - There are probably other vectors which can be optimised in the same way, in particular IdentifiersLoaded as already mentioned by @vgvassilev. Comments?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13000#issuecomment-1715921216:1092,avoid,avoid,1092,https://root.cern,https://github.com/root-project/root/issues/13000#issuecomment-1715921216,2,['avoid'],['avoid']
Safety,"So also in the standard RDF workflows we have lots of ReadLock() still present, but managed to avoid the thread scaling problems by eliminating all of the WriteLock() occurrences.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7710#issuecomment-1623846875:95,avoid,avoid,95,https://root.cern,https://github.com/root-project/root/issues/7710#issuecomment-1623846875,1,['avoid'],['avoid']
Safety,"So far, we have been unable to come up with a reliable way to detect runtime_cxxmodules. The problem is that one can detect easily if ROOT was built with -Druntime_cxxmodules=On, however, the system can have a module which cannot load successfully (due to for example missing requirements). In that case, the implementation will switch back to non-modules. Short answer, yes we can provide such API, however, that would not be 100% reliable. A reliable API should work on per-library basis. It should check if we are in running in runtime_cxxmodules mode, if there is a prebuilt pcm file for this library and if it has fulfilled requirements. In essence that'd be loading of the module in dry-run mode.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2854#issuecomment-434252716:62,detect,detect,62,https://root.cern,https://github.com/root-project/root/pull/2854#issuecomment-434252716,2,['detect'],['detect']
Safety,"So out of 1012 such `pragma link`, there 199 classes I could not (i.e. I did not build the plugin).; 590 classes had a class version of 0 (so it is fine); 150 classes had no ClassDef (so it is fine); 12 were reported as having no Steamer function but inherited from `TObject` (and upon inspection seemed to have a ClassDef), so it looks a bug in the detection in rootcling for some case of class template instance. That left 61 potential issue (list below) and from that list only `TTime` seemed to be both intended for I/O and might be put in a `TTree`:. ```; Potential issue: TAttImage; Potential issue: TImage; Potential issue: TImagePalette; Potential issue: TPyReturn; Potential issue: TPyArg; Potential issue: TPyReturn; Potential issue: TPyArg; Potential issue: TRecEvent; Potential issue: TRecCmdEvent; Potential issue: TRecExtraEvent; Potential issue: TRecGuiEvent; Potential issue: TRecWinPair; Potential issue: TRecorder; Potential issue: TXMLPlayer; Potential issue: TXMLEngine; Potential issue: TXMLSetup; Potential issue: TXMLFile; Potential issue: TKeyXML; Potential issue: TKeySQL; Potential issue: TSQLClassInfo; Potential issue: TSQLClassColumnInfo; Potential issue: TSQLObjectInfo; Potential issue: TSQLObjectData; Potential issue: TSQLObjectDataPool; Potential issue: TSQLStructure; Potential issue: TSQLColumnData; Potential issue: TSQLTableData; Potential issue: TFree; Potential issue: TFumiliMinimizer; Potential issue: TStructNodeProperty; Potential issue: TGLVertex3; Potential issue: TGLVector3; Potential issue: TGLMatrix; Potential issue: TGLCamera; Potential issue: TGLOrthoCamera; Potential issue: TGLPerspectiveCamera; Potential issue: TGLCameraOverlay; Potential issue: TVirtualMonitoringReader; Potential issue: TUri; Potential issue: TUrl; Potential issue: SysInfo_t; Potential issue: CpuInfo_t; Potential issue: MemInfo_t; Potential issue: ProcInfo_t; Potential issue: TTime; Potential issue: TPluginHandler; Potential issue: TPluginManager; Potential issue: TArray",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12499#issuecomment-1474373359:350,detect,detection,350,https://root.cern,https://github.com/root-project/root/pull/12499#issuecomment-1474373359,1,['detect'],['detection']
Safety,"So this problem has been known for 5 years :( https://github.com/root-project/root/pull/4320 but we manage to indeed lose track of it. That PR used the following more concise pattern:; ```; TView() {} // NOLINT: not allowed to use = default because of TObject::kIsOnHeap detection, see ROOT-10300; ```; where both the `NOLINT` is indeed useful to avoid spurious tool recommendation and the wording was clear but should probably be updated (`ROOT-10300` is a ticket number in the JIRA instance which is now read-only). It would be good to add some wording in the `TObject` documentation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15469#issuecomment-2150303383:271,detect,detection,271,https://root.cern,https://github.com/root-project/root/pull/15469#issuecomment-2150303383,4,"['avoid', 'detect']","['avoid', 'detection']"
Safety,"So, I added an attempt for doing this in the least invasive way. :thinking: With this latest setting, the configuration. ```cmake; cmake_minimum_required(VERSION 3.10); project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED); ```. succeeds. ```; [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/; -- The CXX compiler identification is GNU 11.3.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") ; -- Configuring done; -- Generating done; -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest; [bash][pcadp04]:buildtest >; ```. Wile previously it failed. ```; [bash][pcadp04]:buildtest > cmake -DROOT_DIR=/mnt/hdd1/krasznaa/projects/root/install/cmake ../findtester/; -- The CXX compiler identification is GNU 11.3.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; CMake Warning (dev) at /usr/share/cmake/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):; Policy CMP0074 is not set: find_package uses <PackageName>_ROOT variables.; Run ""cmake --help-policy CMP0074"" for policy details. Use the cmake_policy; command to set the policy and suppress this warning. CMake variable Vdt_ROOT is set to:. /mnt/hdd1/krasznaa/projects/root/install/cmake/.. For compatibility, CMake is ignoring the variable.; Call Stack (most recent call first):; /mnt/hdd1/krasznaa/projects/root/install/cmake/ROOTConfig.cmake:140 (find_dependency); CMakeLists.txt:5 (find_package); This warning is for project developers. Use -Wno-dev to suppress it. CMake Error at /usr/share/cm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14178#issuecomment-1840829056:444,Detect,Detecting,444,https://root.cern,https://github.com/root-project/root/pull/14178#issuecomment-1840829056,4,['Detect'],['Detecting']
Safety,"So, there were some developments: it seems that trying to catch an exception lead to no proper return for GetEntry.; Removing the try/except i have now a proper `-1` result on GetEntry and i do have this:; ```; ALIBUILD##[Monday 25.10.21 19:18] adrian@hal : ~/work/jalien-cache-manager (master) $; ./tfile_check.py parse broken_AO2D.root step 100000; Error in unzip ZSTD. Type = Corrupted block detected . Code = 18446744073709551596; Error in <TBasket::ReadBasketBuffers>: fNbytes = 6787763, fKeylen = 72, fObjlen = 7622608, noutot = 0, nout=0, nin=6787691, nbuf=7622608; Error in <TBranch::GetBasket>: File: broken_AO2D.root at byte:240631153, branch:fZ, entry:0, badread=1, nerrors=1, basketnumber=0; DF_2913970966704988325/O2track::Entry(0) -> result: -1; ALIBUILD##[Monday 25.10.21 19:18] adrian@hal : ~/work/jalien-cache-manager (master) $; echo $?; 5; ```; The file unfortunately is quite big: https://cernbox.cern.ch/index.php/s/YM3ONVhEVa72KNX; and for reference the code that i use for testing is: https://github.com/adriansev/AO2Dproto/blob/0eff5a37fd0622767ee01b2b3da84b29e996a1ef/tfile_check.py",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9154#issuecomment-951092615:395,detect,detected,395,https://root.cern,https://github.com/root-project/root/issues/9154#issuecomment-951092615,1,['detect'],['detected']
Safety,"Solves problem with `rootbrowse` utility. In PyROOT there are different ways how event loop is running.; Finally there is special thread where gSystem->ProcessEvents() regularly called. In such special case webgui should be informed that ProcessEvents called from special thread - ; via `gEnv->SetValue(""WebGui.ExternalProcessEvents"", ""yes"")`.; In such case RWebWindowManager tries to detect thread id and really use ProcessEvents context to process WebGui functionality. In such configuration extra http thread not required and will be disabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7948:385,detect,detect,385,https://root.cern,https://github.com/root-project/root/pull/7948,1,['detect'],['detect']
Safety,Solves problem with gcc10 warnings. Temporary skip CI to avoid load on Jenkins nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5840:57,avoid,avoid,57,https://root.cern,https://github.com/root-project/root/pull/5840,1,['avoid'],['avoid']
Safety,"Some food for thought for your questions:; - instead of a global, we could use a function-local static; the function returns a ref. That way, initialization is guaranteed to be thread-safe, and we don't run the risk of entering the initialization order hell.; - Now that the name `gErrorMutex` is unused, we could *keep* it, as a pointer to a fwd declared class `TVirtualMutex`, initialized to `nullptr`, and mark it as `R__DEPRECATED(6.24,...)`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5762#issuecomment-637578021:184,safe,safe,184,https://root.cern,https://github.com/root-project/root/pull/5762#issuecomment-637578021,2,"['risk', 'safe']","['risk', 'safe']"
Safety,"Some headers contain redundant header guards around #include directives like this:. #ifndef ROOT_TTree; #include ""TTree.h""; #endif. This patch removes the #ifndef's around these includes as they don't serve any practical purpose and are no longer part of the current ROOT coding convention. This patch also fixes the 153 typos that are contained in the symbols of the #ifndef directives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/341:21,redund,redundant,21,https://root.cern,https://github.com/root-project/root/pull/341,1,['redund'],['redundant']
Safety,"Some improvements in the RooFit build configuration to avoid that information that is only necessary for RooFit at build time is leaking into the public user interface. In particular, it is not necessary to define these `R__HAS_<*>` flags in the public ROOT config only to use them in the private `.cxx` sources. This should be avoided and instead be done with defines in the build configuration. * Move stressRooFit and stressRooStats to `roofit` directory; * Remove `R__HAS_ROOFIT_MULTIPROCESS` from ROOT configuration; * No need to check `R__HAS_MATHMORE` in roofitmore sources; * Avoid need for `R__HAS_CUDA`. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13915:55,avoid,avoid,55,https://root.cern,https://github.com/root-project/root/pull/13915,3,"['Avoid', 'avoid']","['Avoid', 'avoid', 'avoided']"
Safety,"Sometimes the `getxattr` call returns a valid string, but the string is incomplete. Namely, part of the full URL to the file on EOS is missing (usually the filename itself). Workaround by checking for the presence of the filename in the xurl string and in case it is not present, avoid calling TFile::Open.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16173:280,avoid,avoid,280,https://root.cern,https://github.com/root-project/root/pull/16173,1,['avoid'],['avoid']
Safety,"Sone changes are made to both the Python and C++ version of the; `rf212_plottingInRanges_blinding` tutorial:. * move around the `-----` that denote section headers to fix the; notebook formatting; * rename `exp` to `expo` to avoid an ambiguity error because of; `std::expr` in C++ tutorial notebook; * use `std::unique_ptr` to avoid leaking of datasets. In particular, the call to `fitTo` includes now the; `Range(""left,right"")` command argument. Otherthise, the fit would also; try to make the model adapt to the empty bins in the blinded region,; giving a wrong fit result (it can be easily seen that the fit was wrong; before by increasing the number of events in the toy dataset to 100k). To avoid that the plotting takes the (now correct) fit range as; `NormRange()` and we can't show what happens if the normalization range; is not set, the `fitrange` string attribute is reset after fitting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10955:225,avoid,avoid,225,https://root.cern,https://github.com/root-project/root/pull/10955,3,['avoid'],['avoid']
Safety,"Sorry too much info, too little bandwidth :sweat_smile: If I understand correctly:. - the `is_equal` redefinition is a real issue but unrelated to RVec 2.0 (thanks @wlav for pointing that out) and now tracked by #7678 ; - you have a patch that works around the cppyy bug with `operator[]`; - iteration is broken because `RVec::begin` returns a raw pointer. In principle `begin` can absolutely return a raw pointer (I _think_ LLVM's SmallVector was designed like that for simplicity, to avoid having to define a custom iterator type). But raw pointers make for fine iterators :smile: Seems like a bug in PyROOT?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-806477941:486,avoid,avoid,486,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-806477941,2,['avoid'],['avoid']
Safety,"Sorta. If (and it look like it here) it succeeded in writing it, it did not in a likely platform dependent manners (i.e. recording the complete set of implementation dependent class hierarchy in the currently used std library). We had a similar problem for `std::unique_ptr` which we solved by the I/O ""ignoring"", per se, the implementation and treating it memory content almost the same as a raw pointer. We could to do something similar for std::atomic but that would circumvent the thread-safety parts; so the real solution needs more thoughts :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9371#issuecomment-985367859:492,safe,safety,492,https://root.cern,https://github.com/root-project/root/issues/9371#issuecomment-985367859,1,['safe'],['safety']
Safety,Specifically this fixes the one described at:; https://sft.its.cern.ch/jira/browse/ROOT-9773?focusedCommentId=87824&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-87824; where the issue was that adding a single branch did not close the learning and 'worth' provoke a learning; prefill. We solved this by distinguishing at the interface level adding branch manual and adding branch as; part of the learning. We can now avoid the LearningPrefill during manual adds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3007:449,avoid,avoid,449,https://root.cern,https://github.com/root-project/root/pull/3007,3,['avoid'],['avoid']
Safety,Speed-up CNN and RNN tutorials in TMVA (use less epochs) and add some fixes for IMT and to not use root-config in the python versions. ; Add also a dependency in the Python tutorials on the C++ to avoid conflicts with the same file name. Remove not needed veto for the no-imt case for the TMVA_CNN_Classification.C tutorial introduced in #13712,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13818:197,avoid,avoid,197,https://root.cern,https://github.com/root-project/root/pull/13818,1,['avoid'],['avoid']
Safety,"Spun off from [discussion](https://github.com/root-project/root/pull/5934/commits/6f3ec9372b011536fc314eef0835508a07d2513b#r448782416) on #5934, this PR lets us wrap move-only types in `RResult`. We add a new method `Unwrap()` to obtain the inner type by value. The caller takes ownership of the inner type, and for move-only types the `RResult` is left in an unspecified state. I decided against adding safeguards against double-moves for now because it would result in false-positive messages for types without move specializations (e.g. `return std::move(42)`). Instead, we should make clear through documentation and examples that `Unwrap()` consumes the `RResult`. . The existing const-ref access method `Get()` has been renamed `Inspect()` following Mozilla's `RResult`-like type [here](https://searchfox.org/mozilla-central/source/mfbt/Result.h#90-91). `Get()` has caused some confusion in code review and we've been looking for alternative names. . Example: ; ```cpp; auto TestMoveOnly = []() -> RResult<std::unique_ptr<int>> {; return std::make_unique<int>(1);; };; auto res = TestMoveOnly();. // Using Inspect to make a copy won't compile; // auto copy_inner = res.Inspect();. // This will compile, but we only have read-only access; const auto& copy_inner = res.Inspect();; EXPECT_EQ(1, *copy_inner);. // Instead, Unwrap is required to get ownership of the move-only type; auto move_inner = res.Unwrap();; EXPECT_EQ(1, *move_inner);; move_inner.reset();; move_inner = std::make_unique<int>(2);; EXPECT_EQ(2, *move_inner);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5985:404,safe,safeguards,404,https://root.cern,https://github.com/root-project/root/pull/5985,1,['safe'],['safeguards']
Safety,"Stack trace when I have these changes in:; ```; [ 67%] Generating G__MathCore.cxx, ../../lib/libMathCore_rdict.pcm, ../../lib/libMathCore.rootmap; ROOT::AddClass("""") : N4ROOT6Detail10TTypedIterI10TBaseClassEE; ROOT::AddClass("""") : N4ROOT8Internal34TCheckHashRecurveRemoveConsistencyE; ROOT::AddClass("""") : N4ROOT6Detail10TTypedIterI13TEnumConstantEE; ROOT::AddClass("""") : 19TViewPubDataMembers; ROOT::AddClass("""") : 17TViewPubFunctions; ROOT::AddClass("""") : N4ROOT11TRWMutexImpI6TMutexNS_8Internal13RecurseCountsEEE; ROOT::AddClass("""") : N4ROOT11TRWMutexImpINS_10TSpinMutexENS_8Internal13RecurseCountsEEE; ROOT::AddClass("""") : N4ROOT11TRWMutexImpI6TMutexNS_8Internal22UniqueLockRecurseCountEEE; ROOT::AddClass("""") : N4ROOT11TRWMutexImpINS_10TSpinMutexENS_8Internal22UniqueLockRecurseCountEEE; ROOT::AddClass("""") : N4ROOT6Detail10TTypedIterI10TBaseClassEE; ROOT::AddClass("""") : N4ROOT8Internal34TCheckHashRecurveRemoveConsistencyE; Fatal in <TClassTable::Add>: Trying to add class with empty name to TClassTable; aborting; #0 0x00007fa7e57aacbe in __GI___waitpid (pid=32048, stat_loc=stat_loc; entry=0x7fffab271828, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:29; #1 0x00007fa7e572138f in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fa7e67b9c4f in TUnixSystem::StackTrace (this=0x7d30) at /home/amadio/src/root/core/unix/src/TUnixSystem.cxx:2412; #3 0x00007fa7e66900e8 in DefaultErrorHandler (level=32048, abort_bool=40, location=0x0, msg=0x7fa7e57aacbe <__GI___waitpid+46> ""H="") at /home/amadio/src/root/core/base/src/TError.cxx:192; #4 0x00007fa7e668ff16 in ErrorHandler (level=32048, location=0x7fffab271828 """", fmt=0x0, ap=0x7fa7e57aacbe <__GI___waitpid+46>) at /home/amadio/src/root/core/base/src/TError.cxx:251; #5 0x00007fa7e668fb04 in Fatal (location=0x7d30 <error: Cannot access memory at address 0x7d30>, fmt=0x7fffab271828 """") at /home/amadio/src/root/core/base/src/TError.cxx:350; #6 0x00007fa7e67058b2 in TClassTable::Add (cname=0x7d3",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1389#issuecomment-347619862:1012,abort,aborting,1012,https://root.cern,https://github.com/root-project/root/pull/1389#issuecomment-347619862,1,['abort'],['aborting']
Safety,"Stacktrace printed by ROOT:. ```; ===========================================================; #10 0x00007f7b4b7a234c in __pthread_kill_implementation () from /usr/lib/libc.so.6; #11 0x00007f7b4b7554b8 in raise () from /usr/lib/libc.so.6; #12 0x00007f7b4b73f534 in abort () from /usr/lib/libc.so.6; #13 0x00007f7b4b796397 in __libc_message () from /usr/lib/libc.so.6; #14 0x00007f7b4b7ac33c in malloc_printerr () from /usr/lib/libc.so.6; #15 0x00007f7b4b7ae65c in _int_free () from /usr/lib/libc.so.6; #16 0x00007f7b4b7b0be3 in free () from /usr/lib/libc.so.6; #17 0x00007f7b4a62d5ca in operator delete (ptr=<optimized out>) at /usr/src/debug/gcc/libstdc++-v3/libsupc++/del_op.cc:49; #18 0x00007f7b4a6d0402 in __gnu_cxx::new_allocator<char>::deallocate (__t=<optimized out>, __p=<optimized out>, this=0x556146114390) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/ext/new_allocator.h:132; #19 std::allocator_traits<std::allocator<char> >::deallocate (__n=<optimized out>, __p=<optimized out>, __a=...) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/alloc_traits.h:492; #20 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_destroy (__size=<optimized out>, this=0x556146114390) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:245; #21 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_dispose (this=0x556146114390) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.h:240; #22 std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate (this=this; entry=0x556146114390, __pos=0, __len1=__len1; entry=93876280332080, __s=__s; entry=0x7f7b4b2e4420 ""x"", __len2=1) at /usr/src/debug/gcc-build/x86_64-pc-linux-gnu/libstdc++-v3/include/bits/basic_string.tcc:317; #23 0x00007f7b4a6d14bf in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_replace (",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10092#issuecomment-1063993297:265,abort,abort,265,https://root.cern,https://github.com/root-project/root/issues/10092#issuecomment-1063993297,1,['abort'],['abort']
Safety,"Starting from current master, we generate JSON for different v7 tutorials and embed them into HTML pages to; provide interactive images like:. https://root.cern/doc/master/draw__rh1__twoaxes_8cxx.html. For these images we are using https://root.cern/js/dev/ version, which constantly changes.; To be on the safe side, we should preserve JSROOT version with generated reference guide.; Most easy way - just copy JSROOT from ROOT sources into directory with doxygen HTML files ; and use that version of JSROOT in reference guide.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8599:307,safe,safe,307,https://root.cern,https://github.com/root-project/root/issues/8599,1,['safe'],['safe']
Safety,"Summary:; * This appears because stripping `std::` allows 2 entities to have the same normalized name; ~~* This can also appears in case of inline namespace (but does not seem to cause the same problem)~~; * In ~~both~~ the `std` scenario we ends up a (delayed diagnosed :( ) ambiguous symbol.; * The UpdateClassInfo machinery ~~somehow~~ only fails in the std case.; * The error handling could be improved by tweaking in `TCling::RefreshClassInfo(TClass *cl, const clang::NamedDecl *def, bool alias)`:; ```; if (!oldDef || (def && def != oldDef)) {; cl->ResetCaches();; TClass::RemoveClassDeclId(cci->GetDeclId());; if (def) {; // It's a tag decl, not a namespace decl.; cci->Init(*cci->GetType());; ```; to detect that even though old and new (`def` and `oldDef`) decl are different they are still a namespace and issue an error rather than calling `cci->Init` which (even if we passed the right type) would still semantically do the 'wrong' thing (technically updating the `TClass` for the first namespace to now look at the second namespace). For completeness, result with a 3 week old commit 58a96e2a8e (a priori the only relevant change since is LLVM 18 which should not affect the result since the above code is 'wrong').; ```; root [0] gInterpreter->Declare(""inline namespace __inlinens__ { namespace Detail {} } ""); (bool) true; root [1] auto c = TClass::GetClass(""Detail""); (TClass *) 0x14e1048d0; root [2] namespace Detail {}; ```; but ; ```; root [0] namespace std { namespace Detail {} }; root [1] auto c = TClass::GetClass(""Detail""); (TClass *) 0x1497316a0; root [2] namespace Detail {}; Assertion failed: (detail::isPresent(Val) && ""dyn_cast on a non-existent value""), function dyn_cast, file Casting.h, line 663.; Abort trap: 6; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8828#issuecomment-2372467341:709,detect,detect,709,https://root.cern,https://github.com/root-project/root/issues/8828#issuecomment-2372467341,2,"['Abort', 'detect']","['Abort', 'detect']"
Safety,"Support for user defined sensitive detectors; new TVirtualMC::NIELEdep(); clean-up:; Details:; o TVirtualMCSensitiveDetector: the interface class for a user sensitive detector; o New functions in TVirtualMC:; void SetSensitiveDetector(const TString &volName, TVirtualMCSensitiveDetector *sd);; TVirtualMCSensitiveDetector *GetSensitiveDetector(const TString &volName) const;; void SetExclusiveSDScoring(Bool_t exclusiveSDScoring);; o New function in TVirtualMCApplication:; void ConstructSensitiveDetectors();; - Added new TVirtualMC::NIELEdep() function; - Removed default implementation for TVirtualMC::TrackPosition/Momentum with Float_t arguments",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1892:35,detect,detectors,35,https://root.cern,https://github.com/root-project/root/pull/1892,2,['detect'],"['detector', 'detectors']"
Safety,Synchronizes with this upstream commit and directly makes use of the new; API to avoid a patch:; https://github.com/wlav/CPyCppyy/commit/993b17bce2f43516a85931b40035ac7252e2ab7e,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15788:81,avoid,avoid,81,https://root.cern,https://github.com/root-project/root/pull/15788,1,['avoid'],['avoid']
Safety,"Synopsis of the original error report:. Description. I had thought that our `art v3_09_01` based art passed all of our validation tests but I missed a single histogram that failed. I discovered it yesterday. I traced it back to the following. We have a file. `/pnfs/mu2e/scratch/users/brownd/workflow/default/outstage/44170899/00/00000/dig.brownd.CeEndpointMix.MDC2020b.001201_00000000.art`. It was written by `art v3_06_03`. One of the data products is of type `std::vector<StepPointMC>`, where `StepPointMC` is a class in our code base. The class contains 4 data members of type `CLHEP::Hep3Vector`:. https://github.com/Mu2e/Offline/blob/da4772bcb99f7b42bd401c3b15d56a211124553a/MCDataProducts/inc/StepPointMC.hh#L209. The `art::InputTag` is `""compressDigiMCs:virtualdetector""` . When I write a small job using `art v3_09_01` to read this data product and print out it's data members, all 4 of the `Hep3Vector` are `(0,0,0)`. When I run the same job using `art v3_06_03` all of the printout is correct. Remember that between `art v3_06_03` and `art v3_09_01` there was a schema change in `CLHEP::Hep3Vector`. You already fixed one bug related to that. I will prepare a stripped down example and add it to this issue. To reproduce. Unwind the following tar file on a machine that sees `/pnfs/mu2e and /cvmfs/mu2e.opensciencegrid.org`; ```; tar xzf /mu2e/app/users/kutschke/Bugs/Hep3Vector/artv3_09.tar.gz ; cd artv3_09; source /cvmfs/mu2e.opensciencegrid.org/setupmu2e-art.sh; source setup.sh; scons -j 8; mu2e -c bug.fcl; ```; This prints most of the content of the the `StepPointMCs`. The bug is that the 4 `Hep3Vectors` are **all zero**. It's OK that the non-ionizing and visual energy depositions are zero; this data product captures steps in a virtual detector embedded inside a volume with a vacuum of `10^{-4} torr`. This uses the deprecated Mu2e ""Satellite release"" system to build on top of the Offline tag v10_00_00 on /cvmfs/mu2e.opensciencegrid.org/Offline/v10_00_00/SLF7/prof/Offline .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8428#issuecomment-875583779:1758,detect,detector,1758,https://root.cern,https://github.com/root-project/root/issues/8428#issuecomment-875583779,1,['detect'],['detector']
Safety,"T'` it will fail. That's what I mean when I say that by relying on `PYTHONPATH` only one version will work. > we need to continue to support using multiple ROOT versions with python, also outside conda. That is always possible, but it requires setup scripts. I'm usually talking here about the situation in which you do `yum install root`, and it should work out of the box, without any extra setup. Same for other distributions. This is already the case in Fedora, but they have to go through hoops to make it work, like using alternatives for `libPyROOT.so` in `/etc/alternatives`. That's what I'd like to address. > we must not run setup.py as part of a ROOT installation. This makes it much harder to do the right thing during installation in order for things to work properly. PyROOT is a python package afterall, so what's the problem in using Python's native methods of installation as part of `make install`?. > It would be great if import ROOT can auto-detect which libPython (python2 or python3) to load; that would take care of the multi-python case after source thisroot.sh. At the moment, `libPyROOT.so` can only work with either Python 2.x or 3.x, not both. We need to change compile-time checks into runtime checks to make the same library work with both Python 2.x and 3.x (there are many `#ifdef`s on the Python version, for example). Finally, `thisroot.sh` is totally evil and should be deprecated. It messes up the environment when sourcing it, by potentially removing things from the path that should not be removed. It also assumes things about how ROOT was installed, so if ROOT's libraries are not in `$ROOTSYS/lib` (e.g., if they are in `$ROOTSYS/lib64`, or `$ROOTSYS/root/lib` with `gnuinstall=ON`) the script won't work. It also uses a colon for separator in `CMAKE_PREFIX_PATH`, which is separated by semicolons, among other problems. My advice to people is to just stop using the script. Anyway, this is all a digression from this PR. Please merge it so I can close [ROOT-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3843#issuecomment-495154092:1113,detect,detect,1113,https://root.cern,https://github.com/root-project/root/pull/3843#issuecomment-495154092,1,['detect'],['detect']
Safety,"T; -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""); -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH; -- Switching ON 'builtin_vdt' option; -- Looking for BLAS for optional parts of TMVA; -- Looking for sgemm_; -- Looking for sgemm_ - not found; -- Looking for sgemm_; -- Looking for sgemm_ - found; -- Found BLAS: /usr/lib64/libopenblas.so; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success; -- Building LLVM in 'Release' mode.; -- The ASM compiler identification is GNU; -- Found assembler: /usr/bin/cc; -- clang project is enabled; -- clang-tools-extra project is disabled; -- compiler-rt project is disabled; -- cross-project-tests project is disabled; -- libc project is disabled; -- libclc project is disabled; -- libcxx project is disabled; -- libcxxabi project is disabled; -- libunwind project is disabled; -- lld project is disabled; -- lldb project is disabled; -- mlir project is disabled; -- openmp project is disabled; -- parallel-libs project is disabled; -- polly project is disabled; -- pstl project is disabled; -- flang project is disabled; -- Looking for backtrace; -- Looking for backtrace - found; -- backtrace facility detected in default set of libraries; -- Found Backtrace: /usr/include; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- Could NOT find Python module pygments; -- Could NOT find Python module pygments.lexers.c_cpp; -- Could NOT find Python module yaml; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter; -- Linker detection: GNU ld; ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14159#issuecomment-1838972446:8805,detect,detected,8805,https://root.cern,https://github.com/root-project/root/issues/14159#issuecomment-1838972446,1,['detect'],['detected']
Safety,"TAGE 1: Overlap checking by sampling within 10 microns; ====================================================================; Info in <TGeoNodeMatrix::CheckOverlaps>: Checking overlaps for worldVOL and daughters within 0.001; Info in <TGeoNodeMatrix::CheckOverlaps>: Checking overlaps by sampling <s> for worldVOL and daughters; Info in <TGeoNodeMatrix::CheckOverlaps>: === NOTE: Extrusions NOT checked with sampling option ! ===; Info in <TGeoChecker::CheckOverlapsBySampling>: #Found 1 overlaps adding-up to 443214 +/- 52974.2 [cm3] for daughters of worldVOL; Check overlaps: [==========] 3 [100.00 %]; Info in <TGeoNodeMatrix::CheckOverlaps>: Number of illegal overlaps/extrusions : 1. ====================================================================; STAGE 2: Global overlap/extrusion checking within 10 microns; ====================================================================; Info in <TGeoNodeMatrix::CheckOverlaps>: Checking overlaps for worldVOL and daughters within 0.001; Check overlaps: [==========] 3 [100.00 %] 00:00; Info in <TGeoNodeMatrix::CheckOverlaps>: Number of illegal overlaps/extrusions : 1. ====================================================================; STAGE 3: Propagating 1000000 tracks starting from vertex; and counting number of boundary crossings...; ====================================================================; Transporting tracks [==========] 1000000 [100.00 %] 00:01; Time for crossing 10673 boundaries: 990000 [ms]; Time per track for full geometry traversal: 0.99 [ms], per crossing: 92.7574 [ms]; ====================================================================; STAGE 4: How much navigation time per volume per next+safety call; ====================================================================; Time for volume worldVOL (assemb=0): 0.72 [ms] ndaughters=2 ncross=4956; Time for volume LV_HCAL_Chimney_Sector_Half_Plate__Meshed_0 (shape=Mesh2Tess): 0.34 [ms] ndaughters=0 ncross=5717; STAGE 4 completed [======| ] 2 [ 66.67 %]; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11781#issuecomment-1328096049:1988,safe,safety,1988,https://root.cern,https://github.com/root-project/root/issues/11781#issuecomment-1328096049,1,['safe'],['safety']
Safety,TBuffer* classes should abort in case the 1GB limit is being hit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14770:24,abort,abort,24,https://root.cern,https://github.com/root-project/root/issues/14770,1,['abort'],['abort']
Safety,"TCP_NODELAY, (char*)val, &optlen) == -1) {; | ^~~~~~~; | |; | int*; In file included from /builddir/root-6.24.06/core/unix/src/TUnixSystem.cxx:101:; /usr/include/sys/socket.h:348:50: note: initializing argument 5 of 'int getsockopt(int, int, int, void*, socklen_t*)'; 348 | int getsockopt (int, int, int, void *__restrict, socklen_t *__restrict);; | ^~~~~~~~~~~~~~~~~~~~~; ```; is the next error. The problem stems from the fact, that the condition for using `socklen_t` is (among others) glibc:; ```c; #if (defined(R__AIX) && !defined(_AIX43)) || \; (defined(R__SUNGCC3) && !defined(__arch64__)); # define USE_SIZE_T; #elif defined(R__GLIBC) || defined(R__FBSD) || \; (defined(R__SUNGCC3) && defined(__arch64__)) || \; defined(R__OBSD) || defined(MAC_OS_X_VERSION_10_4) || \; (defined(R__AIX) && defined(_AIX43)) || \; (defined(R__SOLARIS) && defined(_SOCKLEN_T)); # define USE_SOCKLEN_T; #endif; ```; [Here](https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xsh_chap02.html#tag_22_02_10_06) is some context:; > All socklen_t types were originally (in BSD UNIX) of type int. During the development of POSIX.1-2017, it was decided to change all buffer lengths to size_t, which appears at face value to make sense. When dual mode 32/64-bit systems came along, this choice unnecessarily complicated system interfaces because size_t (with long) was a different size under ILP32 and LP64 models. Reverting to int would have happened except that some implementations had already shipped 64-bit-only interfaces. The compromise was a type which could be defined to be any size by the implementation: socklen_t. I am not sure how to approach this, because the standardization of `socklen_t` seems fairly recent, but in the long run, avoiding this whole types dance altogether and simply using explicit `socklen_t` seems to make most sense and will make for a simpler code. I will appreciate any comments, especially regarding any compatibility issues this might cause - else I will add this to the PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9253#issuecomment-963600314:7286,avoid,avoiding,7286,https://root.cern,https://github.com/root-project/root/issues/9253#issuecomment-963600314,2,['avoid'],['avoiding']
Safety,TClass::GetClassInfo() is not thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15090:37,safe,safe,37,https://root.cern,https://github.com/root-project/root/issues/15090,1,['safe'],['safe']
Safety,TClassEdit: make usage of static cache container thread safe.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10369:56,safe,safe,56,https://root.cern,https://github.com/root-project/root/pull/10369,1,['safe'],['safe']
Safety,TCling::UpdateListOfLoadedSharedLibraries() Linux thread safety,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6797:57,safe,safety,57,https://root.cern,https://github.com/root-project/root/issues/6797,1,['safe'],['safety']
Safety,TClingUtils: Avoid growing paths in GetFileName,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10387:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/10387,1,['Avoid'],['Avoid']
Safety,"TColor::GetColor(r,g,b) uses 5bit threshold by; default to create new colors. This differs; from normal X11 with 8bit colors. As a result,; images produced in batch and in interactive; session may differ - see greyscale.C macro. Make default 8bit resolution for colors, and; reduce it only if detecting such display.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14063:293,detect,detecting,293,https://root.cern,https://github.com/root-project/root/pull/14063,1,['detect'],['detecting']
Safety,TDatabasePDG::GetParticle(...) not being thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11580:48,safe,safe,48,https://root.cern,https://github.com/root-project/root/issues/11580,1,['safe'],['safe']
Safety,TF2 (with same name) construction can not be made thread safe without taking a lock,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11460:57,safe,safe,57,https://root.cern,https://github.com/root-project/root/issues/11460,1,['safe'],['safe']
Safety,"TFormula indirectly accesses gROOT->fGlobalFunctions. Therefore to safely call different TFormula on different threads, access to the global function list must be serialized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/31:67,safe,safely,67,https://root.cern,https://github.com/root-project/root/pull/31,1,['safe'],['safely']
Safety,TH1::Fill Avoid redundancy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5010:10,Avoid,Avoid,10,https://root.cern,https://github.com/root-project/root/pull/5010,2,"['Avoid', 'redund']","['Avoid', 'redundancy']"
Safety,TMVA GPU features are enabled only when both the cuda and tmva-gpu flags are enabled. These flags are not used anywhere else. It looks like the cuda flag is redundant in this case. . Related forum post - https://root-forum.cern.ch/t/feature-request-enable-cuda-if-detected/32764,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3438:157,redund,redundant,157,https://root.cern,https://github.com/root-project/root/pull/3438,2,"['detect', 'redund']","['detected', 'redundant']"
Safety,TMVA RReader not multithread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16600:29,safe,safe,29,https://root.cern,https://github.com/root-project/root/issues/16600,1,['safe'],['safe']
Safety,"TMVA headers must be included before TODBCServer.h to avoid compile error in TVirtualTreePlayer.h(45,75): error C2589: '(': illegal token on right side of '::'",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16638:54,avoid,avoid,54,https://root.cern,https://github.com/root-project/root/issues/16638,1,['avoid'],['avoid']
Safety,TODO: find a way to avoid repeating `RAction`'s code three times without losing performance,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2595:20,avoid,avoid,20,https://root.cern,https://github.com/root-project/root/pull/2595,1,['avoid'],['avoid']
Safety,TString sanity check nchar not larger than capacity,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11444:8,sanity check,sanity check,8,https://root.cern,https://github.com/root-project/root/pull/11444,1,['sanity check'],['sanity check']
Safety,"TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. ; This makes ; ``` while((task=(TTask*)next())) {```; an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. ; C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11663:193,unsafe,unsafe,193,https://root.cern,https://github.com/root-project/root/issues/11663,3,"['avoid', 'unsafe']","['avoid', 'avoided', 'unsafe']"
Safety,TTask: unsafe cast in ExecuteTasks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11663:7,unsafe,unsafe,7,https://root.cern,https://github.com/root-project/root/issues/11663,1,['unsafe'],['unsafe']
Safety,"TThreadedObject currently has a fixed amount of available slots,; the number of which can be set at construction time. This makes; it impossible to use TThreadedObject inside TBB tasks safely, because; TBB can potentially swap out worker threads for different threads at; runtime, resulting in TThreadedObject counting more thread ID's than; slots, and therefore in out-of-bound accesses to its contents. With this patch, TThreadedObject just appends a new slot when needed,; so it nevers runs out.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5464:185,safe,safely,185,https://root.cern,https://github.com/root-project/root/pull/5464,1,['safe'],['safely']
Safety,"TTree::CopyAddresses has the built-in pre-condition that the input and; output branches are of the same kind. Clones might be added, however,; for which the pre-condition is violated. This is currently the case,; for example, with certain usages of RDataFrame::Snapshot, which might; create an output branch that is a simple TBranch while the input branch; is e.g. a TBranchElement. This results in wrong data being written out. With this patch we detect this case and complain.; A proper fix will be proposed soon. The issue is tracked as #8295.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8314:448,detect,detect,448,https://root.cern,https://github.com/root-project/root/pull/8314,2,['detect'],['detect']
Safety,TTreeCacheUnzip thread safety with prefetching enabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10095:23,safe,safety,23,https://root.cern,https://github.com/root-project/root/issues/10095,1,['safe'],['safety']
Safety,"TTreeProcessorMT now spawns tasks that process clusters from tasks that process files:; this should decrease the amount of file switches that each thread-local; TChain performs during an event loop, as each thread will tend to; process clusters that belong to the same file. In addition, when no friends and no TEntryList are present, we can avoid the preliminary full sweep of; input files, since we we can use local rather than global entry numbers.; In this case TTreeProcessorMT spawns one task per input file which first retrieves cluster boundaries; for that file and then spawns one sub-task per cluster. I also added myself to the list of authors. @etejedor there are a couple of things I am not super happy with in this implementation:; - each thread-local `TTreeView` duplicates all info about the dataset (file names, friend names, friend file names...); - `TTreeProcessorMT` has to query all of this information from `TTreeView`; - ~~the per-file task should only call `Internal::MakeClusters` once (just noticed, that's an easy refactoring)~~ fixed and squashed. Moving the dataset info from `TTreeView` to `TTreeProcessorMT`, on the other hand, would mean adding even more parameters to `TTreeView::GetTreeReader`. What do you think?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2143:342,avoid,avoid,342,https://root.cern,https://github.com/root-project/root/pull/2143,1,['avoid'],['avoid']
Safety,"TVirtualX.h contains not correct definition ""class GLUtesselator"", which is conflicts with real ""struct GLUtesselator"". ; For now just avoid use of both includes in one place.; In principle, one should remove GLUtesselator for TVirtualX at all",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2905:135,avoid,avoid,135,https://root.cern,https://github.com/root-project/root/pull/2905,1,['avoid'],['avoid']
Safety,Taking note of all the things will try to modify them as suggested and look again in all files and will surely avoid casting when it can be avoided . Will PR this above files and new files after that :). Thank you for your time and suggestions.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10022#issuecomment-1058179166:111,avoid,avoid,111,https://root.cern,https://github.com/root-project/root/pull/10022#issuecomment-1058179166,2,['avoid'],"['avoid', 'avoided']"
Safety,"Test directories should be added using ROOT_ADD_TEST_SUBDIRECTORY. If add_subdirectory is used the test binaries get installed during ""make install"". if(testing) is redundant - it is already part of the ROOT_ADD_TEST_SUBDIRECTORY macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2247:165,redund,redundant,165,https://root.cern,https://github.com/root-project/root/pull/2247,1,['redund'],['redundant']
Safety,Test failures are all timeouts in jupyter notebooks. I don't think that is related...?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4974#issuecomment-586911454:22,timeout,timeouts,22,https://root.cern,https://github.com/root-project/root/pull/4974#issuecomment-586911454,1,['timeout'],['timeouts']
Safety,"Test failures are unrelated, we can safely merge.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5307#issuecomment-610209307:36,safe,safely,36,https://root.cern,https://github.com/root-project/root/pull/5307#issuecomment-610209307,1,['safe'],['safely']
Safety,Testing failure are because of networks timeout.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15931#issuecomment-2191492754:40,timeout,timeout,40,https://root.cern,https://github.com/root-project/root/pull/15931#issuecomment-2191492754,1,['timeout'],['timeout']
Safety,"Tests has been augmented and refactored to avoid code duplication. There's one issue that I'm not sure how to solve: random access iterators are required to support the forms `it + n` as well as `n + it` (where `n` in our case is of type `std::ptrdiff_t`. The second form requires the definition of a free-standing `operator+`, which I implemented this way:. ```c++; template <typename T>; auto operator+(std::ptrdiff_t n, const typename TTreeReaderArray<T>::iterator &it); -> decltype(it + n); {; return it + n;; }; ```. Problem: in the definition above `T` cannot be deduced from the dependent type `iterator`, so this overload is never considered. Any idea how to work around this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1259#issuecomment-343112197:43,avoid,avoid,43,https://root.cern,https://github.com/root-project/root/pull/1259#issuecomment-343112197,1,['avoid'],['avoid']
Safety,Thank you !. The problem seems coming from using Vc as type instead of float or double with std::sqrt instead of sqrt. Vc probably re-implement the sqrt() function but not in namespace std. Maybe we should not apply this to avoid breaking support for Vc.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7909#issuecomment-822556035:224,avoid,avoid,224,https://root.cern,https://github.com/root-project/root/pull/7909#issuecomment-822556035,1,['avoid'],['avoid']
Safety,"Thank you for the suggestion, @Dr15Jones . I think that works nicely. I like that we can now exchange the mechanics of the token without changing the interface. We'll use the model ID as a safety check. This PR now include a patch to the RNTupleModel id management.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14531#issuecomment-1933863300:189,safe,safety,189,https://root.cern,https://github.com/root-project/root/pull/14531#issuecomment-1933863300,1,['safe'],['safety']
Safety,"Thank you very much Bertrand for the explanation. I tried with this one-liner in my code, and now it works perfectly:. `Gl_histinit(gEnv->GetValue(""Rint.History"", gSystem->HomeDirectory()));`. The problem I see if it is not introduced in the plugin is that the SetHistAdd() function has no effect. To avoid confusion, I would suggest to add the following in the documentation:. ```; // The function SetHistAdd() is needed for a standalone TApplication to log the TGCommandPlugin commands into a ROOT history file.; // However, this function has no effect if the user does not explictly set on his standalone application the name of the ROOT history file.; // To log into the default ROOT history file, call this on the user-side of the code:; // Gl_histinit(gEnv->GetValue(""Rint.History"", gSystem->HomeDirectory()));; // Otherwise, replace the argument of Gl_histinit with a text file name you want to use for application-specific logging.; ```. After that addition, it looks great and ready to merge in my opinion :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7180#issuecomment-780881584:301,avoid,avoid,301,https://root.cern,https://github.com/root-project/root/issues/7180#issuecomment-780881584,1,['avoid'],['avoid']
Safety,"Thank you! That's great you also addressed the comment with the redundant verbosity flag. Let's test this once with multiprocess off, and then afterwards once with multiprocess on.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11577#issuecomment-1282338633:64,redund,redundant,64,https://root.cern,https://github.com/root-project/root/pull/11577#issuecomment-1282338633,1,['redund'],['redundant']
Safety,"Thank you. So if I understand correctly : ; for n_s times RooHistPdf, it behaves as for the case RooHistPdf for the method : getVal() ; -> OK : it gives a result ""normalized to 1"". But if we decide *not to normalize* the RooDataHist used to create the RooHistPdf,; the RooHistPdf -> getVal() will return a value normalized to the number of events of the RooDataHist : so in this case it gives a *non-normalized result*. This is strange since it is stated : ""The histogram distribution is explicitly normalized by RooHistPdf and can have an arbitrary number of real or discrete dimensions. "". Indeed, with my minimum example where you may put the option option_normalize_hist=0 (with the fix that you kindly found of <=55 bins); we get :; value_pdf total=39.9713; which represents : pdf->getVal()*bin_width. so in this case, we don't need to multiply by the number of events to obtain a prediction !!; The value of the pdf is not inside [0, 1]. So, depending whether the RooDataHist that was used in order to construct the RooHistPdf, was normalized or not normalized, the RooHistPdf->getVal() returns a normalized or a not normalised result,; in contradiction with the sentence that roofit is expected to do it : the sentence : ""The histogram distribution is explicitly normalized by RooHistPdf and can have an arbitrary number of real or discrete dimensions. "" of https://root.cern.ch/doc/master/classRooHistPdf.html",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7991#issuecomment-826921480:886,predict,prediction,886,https://root.cern,https://github.com/root-project/root/issues/7991#issuecomment-826921480,1,['predict'],['prediction']
Safety,"Thanks @Ask149 for your contribution, that's a good change! Out of curiosity, how did you detect this?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4275#issuecomment-529365130:90,detect,detect,90,https://root.cern,https://github.com/root-project/root/pull/4275#issuecomment-529365130,1,['detect'],['detect']
Safety,"Thanks @Axel-Naumann. I'm afraid I still see the issue even if I ask for an existing type, e.g. `std::vector<int>::value_type`. I just tested the following snippet:. ```; import ROOT. while True:; ROOT.TClass.GetClass(""std::vector<int>::value_type""); ```. on:. ```; $ root --version; ROOT Version: 6.24/06; Built for linuxx8664gcc on Sep 02 2021, 14:20:23; From tags/v6-24-06@v6-24-06; ```. Admittedly, we were also making some non-optimal calls to `TClass::GetClass()` and the most reliable way to avoid the issue is to avoid these calls altogether. However, finding the offending calls is a bit of a challenge at the moment. Is there a more targeted way to warn about auto-parsing apart from setting `ROOTDEBUG=1`, which of course prints a lot more.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9029#issuecomment-1110614505:499,avoid,avoid,499,https://root.cern,https://github.com/root-project/root/issues/9029#issuecomment-1110614505,2,['avoid'],['avoid']
Safety,"Thanks @ellert, this helped a lot to get me started into the right direction!. As far as I can tell, the problem is slightly different from https://bugzilla.redhat.com/show_bug.cgi?id=1830472; that one failed during the build of ROOT while we now have a problem during JIT compilation, after ROOT has already been built successfully. But we are very likely on the right track here with `-moutline-atomics` because Clang now defaults to enabling that if it detects a `libgcc` newer than 9.3.1 - this explains why it still works with GCC 8. Before the upgrade to LLVM 13, it was working fine everywhere because LLVM 9 didn't know about the `__aarch64_ldadd*` functions, I believe it used a different lowering strategy for atomics...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12294#issuecomment-1436502493:456,detect,detects,456,https://root.cern,https://github.com/root-project/root/issues/12294#issuecomment-1436502493,1,['detect'],['detects']
Safety,Thanks @oshadura! I will merge once Jenkins is done to avoid having this marked red.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1063#issuecomment-332524577:55,avoid,avoid,55,https://root.cern,https://github.com/root-project/root/pull/1063#issuecomment-332524577,1,['avoid'],['avoid']
Safety,"Thanks @wlav, @guitargeek. We have a piece of code, [PyROOTInspector](https://gitlab.cern.ch/atlas/athena/-/blob/main/Control/RootUtils/src/pyroot/PyROOTInspector.cxx), that we use to pythonize our data to do some generic operations, such as file comparisons etc. That relies on the Python/C API, hence the issue. Actually, I recently put in a patch that seems to do the trick, at least from a practical point of view:. https://gitlab.cern.ch/atlas/athena/-/merge_requests/70435/diffs. With this we can recover the same functionality as in the previous `cppyy` versions but I'm in general open to suggestions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15161#issuecomment-2057704255:503,recover,recover,503,https://root.cern,https://github.com/root-project/root/issues/15161#issuecomment-2057704255,1,['recover'],['recover']
Safety,"Thanks a lot for the review and the questions!. > * Are we sure it's not possible to avoid the extra call to the interpreter? That is not done in the current status (there is the `eval` but I don't think it calls directly into cling every time). That's true, but probably `eval` is even worse. It's the `gInterpreter` of Python, which is ""many orders of magnitude slower for smaller expressions/objects than plain ol’ Python"": https://pandas.pydata.org/pandas-docs/version/0.20/enhancingperf.html#expression-evaluation-via-eval-experimental. Also, it's more flexible. Since in Python, you have to do `ROOT.kRed`, while gInterpreter can just take `kRed`, there was this hack of adding ""ROOT."" to the string passed to eval, which reduced flexibility and would result in unexpected errors for example when the user does `""1+kRed""` instead of `""kRed+1""`. > * What happens after this change to keyword arguments? Is this tested somewhere? For instance, can I call the same Python function with a random order of the keyword arguments even after these changes?. It is tested in all RooFit tutorials that do plots, and it works just fine. And yes, the keyword argument pythonization still works.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16707#issuecomment-2443867878:85,avoid,avoid,85,https://root.cern,https://github.com/root-project/root/pull/16707#issuecomment-2443867878,1,['avoid'],['avoid']
Safety,Thanks a lot! Can you still take a look at the logging please? I made a suggestion on how to avoid adding the inheritance from TObject: https://github.com/root-project/root/pull/9482#pullrequestreview-858288936,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9482#issuecomment-1017621798:93,avoid,avoid,93,https://root.cern,https://github.com/root-project/root/pull/9482#issuecomment-1017621798,1,['avoid'],['avoid']
Safety,"Thanks a lot, @andriish !. > so the people who will use that event display will avoid building ROOT and related issues. One last question (likely!) to understand the context: do you run the GUI with fp exceptions on in production, or is this for testing / development only?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6677#issuecomment-713661081:80,avoid,avoid,80,https://root.cern,https://github.com/root-project/root/issues/6677#issuecomment-713661081,1,['avoid'],['avoid']
Safety,"Thanks again Stephan for your explanations! I will close this PR for the time being since I have no time to work on time safety at the moment, but I hope I'll have time to come back to this and reopen the PR in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7325#issuecomment-808570430:121,safe,safety,121,https://root.cern,https://github.com/root-project/root/pull/7325#issuecomment-808570430,1,['safe'],['safety']
Safety,"Thanks for adding this first commit where you mode the header files from `res` to `src`!. Since the PR touched many files only because of that commit, we risk getting into conflicts again just because of this change. Can you please open a separate PR just with the first commit? Then I can merge it ASAP, and this PR will only contain the remaining commits after the first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11773#issuecomment-1343448442:154,risk,risk,154,https://root.cern,https://github.com/root-project/root/pull/11773#issuecomment-1343448442,1,['risk'],['risk']
Safety,Thanks for all the feedback. A more comprehensive solution to avoid spurious lookups triggered by TClass::GetClass will be proposed.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13341#issuecomment-1862225290:62,avoid,avoid,62,https://root.cern,https://github.com/root-project/root/pull/13341#issuecomment-1862225290,2,['avoid'],['avoid']
Safety,Thanks for having a look! I'll merge the PR first thing tomorrow not to risk to affect the nightlies.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13633#issuecomment-1714461480:72,risk,risk,72,https://root.cern,https://github.com/root-project/root/pull/13633#issuecomment-1714461480,1,['risk'],['risk']
Safety,Thanks for integrating the comments. Perhaps the merge commit can be avoided?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2756#issuecomment-428693967:69,avoid,avoided,69,https://root.cern,https://github.com/root-project/root/pull/2756#issuecomment-428693967,1,['avoid'],['avoided']
Safety,"Thanks for the catch!. Maybe, as a reminder, we could add a comment on Bswapcpy.h, before the functions, saying that these functions are not safe to call with n==0.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15780#issuecomment-2154237134:141,safe,safe,141,https://root.cern,https://github.com/root-project/root/pull/15780#issuecomment-2154237134,1,['safe'],['safe']
Safety,"Thanks for the comment! I agree that it's not clear how meaningful `weightError` is for RooDataSet, but still the only two classes that derive from RooAbsData are RooDataHist and RooDataSet. Both of them reimplement `weightError` in a non-trivial way. Or are you thinking about some user classes that might inherit from `RooAbsData`? In that case they would not compile because not all purely virtual functions are implemented. But I'd argue that this a good thing, because then the user is made aware that `weightError` should be implemented with a dummy value. Actually, it can even be dangerous that we choose this dummy value ourselves (why zero and not `nan` for example?). I think purely virtual functions are safer than ""dummy functions"", and they are also more self-documenting because we know that every inheriting class will be overloading this function.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8137#issuecomment-838795380:716,safe,safer,716,https://root.cern,https://github.com/root-project/root/pull/8137#issuecomment-838795380,2,['safe'],['safer']
Safety,"Thanks for the comments! I will change things a little bit to address these concerns. What made me weary now is that the compiler doesn't suggest any `override` keywords for the RDF-related member functions in the RooAbsDataHelper. So what I think is that it's probably not even necessary to inherit from `RActionImpl`! Maybe that was just done by the original author for convenience. I think this dependency can actually be avoided without changing and RDF code. ...or maybe not, but I'll check",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16606#issuecomment-2394997637:425,avoid,avoided,425,https://root.cern,https://github.com/root-project/root/pull/16606#issuecomment-2394997637,1,['avoid'],['avoided']
Safety,"Thanks for the quick action on this one. Actually looking into #14425, I think this might be considered a duplicate of that. Sorry, I didn't see that before I opened this one. Regarding the proposed changes in #15125, I am OK with that obviously, since it doesn't require work on our end ;) I am not sure how cppyy handles the lifetimes of objects that are referred to via a regular pointer, but an implicit conversion to a smart pointer seems like a good source of all kinds of issues there. So also from that point of view, I think it is safe to not have that conversion. I will report the overload resolution issue upstream.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15117#issuecomment-2036308518:540,safe,safe,540,https://root.cern,https://github.com/root-project/root/issues/15117#issuecomment-2036308518,1,['safe'],['safe']
Safety,"Thanks for the reply. Yes, it is still an issue because the problem is in TList itself not being (completely) thread-safe even if UseRWLock is called. In particular, there is a suspicious `std::make_shared< link >` that might be giving problems when 'sharing it'. Find attached the complete log.; [helgrindlog.txt](https://github.com/root-project/root/files/6773132/helgrindlog.txt). The issue is that when a timer is added, it calls FindObject:; https://github.com/root-project/root/blob/master/core/cont/src/TList.cxx#L617. but at the same time, a new object might have been added in the meanwhile by the other thread:; https://github.com/root-project/root/blob/master/core/cont/src/TList.cxx#L738. Maybe a mutex should be added inside the TList class to handle this?. Here the XML version (lower part of it):; ![image](https://user-images.githubusercontent.com/10653970/124675469-04769e80-debd-11eb-95d0-595f613c4689.png)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365#issuecomment-875132812:117,safe,safe,117,https://root.cern,https://github.com/root-project/root/issues/8365#issuecomment-875132812,1,['safe'],['safe']
Safety,"Thanks for the response. The reason I've noticed this PR is because in my instance it appears that it aborted CMake due lack of Java in the build environment. I don't believe the `fail-on-missing` option is turned on (although my CMake knowledge isn't excellent, so perhaps I'm being naive here), so at least in the current HEAD it appears to me to be a mandatory component. If you'd like, you can take a look at the build log here, ; https://github.com/MrCarroll/root-snap/runs/2059798478?check_suite_focus=true#step:3:3399. I've no technical reason against including Java in the snap to enable this functionality, but I don't believe it's functionality the users of the snap would likely expect it to have, it's primarily targetted to users who aren't likely to have access to a cluster to use. You can treat the snap as effectively being an instance of Ubuntu 20.04; if you'd like I can try see if I have the same problem in the normal Ubuntu environment to see if it reproduces there. Otherwise I'll likely pass the explicit flag to turn this off in my instance if it does appear to be a problem specific to the snap build. Thanks again!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7406#issuecomment-793527779:102,abort,aborted,102,https://root.cern,https://github.com/root-project/root/pull/7406#issuecomment-793527779,1,['abort'],['aborted']
Safety,"Thanks for the review!. > Let's also make the `RNTupleModelChangeset` a sub class of `RNTupleModel`. This was actually intentional, as the class is forward-declared in `RPageStorage.hxx`. C++ does not allow forward-declaring a nested class.; Thus, in order to avoid `#include`ing `RNTupleModel.hxx`, I left `RNTupleModelChangeset` in the `ROOT::Experimental::Detail` namespace instead. That was my preference, although we can take the other way, i.e. nest the class and `#include` the header; should we?. The rest of the comments, I'll address this week.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12376#issuecomment-1476305514:260,avoid,avoid,260,https://root.cern,https://github.com/root-project/root/pull/12376#issuecomment-1476305514,1,['avoid'],['avoid']
Safety,"Thanks for the reviews, @hageboeck and @lmoneta!. I'll merge it after https://github.com/root-project/root/pull/8167 so I can use the improved RooArgSet constructor from iterators that Stephan introduced in that PR. I also will update the changes to the RooFit collection classes in this PR to avoid using the `std::span` ROOT backport in the interface, as advised by @hageboeck (see https://github.com/root-project/root/pull/8167#discussion_r646480340).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7907#issuecomment-856230037:294,avoid,avoid,294,https://root.cern,https://github.com/root-project/root/pull/7907#issuecomment-856230037,1,['avoid'],['avoid']
Safety,"Thanks for this attempt. There are a few issues remaining and those of course will have to be understood. On top of those, I would like to ask, if possible, to check that there is no lookup triggered by the new name discovering routine: we want to avoid slowdowns+memory allocations due to unwanted accesses to the interpreter.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14676#issuecomment-1943375264:248,avoid,avoid,248,https://root.cern,https://github.com/root-project/root/pull/14676#issuecomment-1943375264,1,['avoid'],['avoid']
Safety,Thanks for this nice PR! We try to avoid merge commits: could you please remove it? After that we can start the tests.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15811#issuecomment-2158975448:35,avoid,avoid,35,https://root.cern,https://github.com/root-project/root/pull/15811#issuecomment-2158975448,1,['avoid'],['avoid']
Safety,"Thanks for your input. In principle, the TPaleetteAxis is never stored alone. Always with a histogram. That's why I implemented this way as there was no real risk. But you are right I will check more closely.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11503#issuecomment-1270212138:158,risk,risk,158,https://root.cern,https://github.com/root-project/root/pull/11503#issuecomment-1270212138,1,['risk'],['risk']
Safety,"Thanks for your proposal! We won't need `std::shared_ptr<std::vector<Double_t>>` as datatype; `std::vector<Double_t>` would be enough as this allows cheap move operations. Then again, so does `Double_t *`. Did you consider simply implementing a move operator for `TGraph`?. We must avoid all backward incompatible interface changes. I didn't look in detail but the amount of code changes here suggests that this isn't the case for this draft?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9610#issuecomment-1056797487:282,avoid,avoid,282,https://root.cern,https://github.com/root-project/root/pull/9610#issuecomment-1056797487,2,['avoid'],['avoid']
Safety,"Thanks to Axel digging into clang's code generation, we understood that what clang doesn't deal with very well is a large amount of variable instantiations of types with non-trivial destructors in the same function body. In this scenario the list of exception-handling ""landing pads"" grows to sizes that make compilation times blow up when generating code that deals with calling the destructors of these variables in case an exception is thrown in the function body. Presumably gcc suffers from a similar issue. * on our side, a workaround seems possible: we can avoid allocating many temporary `std::string`s and `std::vector<std::string>`s by generating code of the form `Jit{Filter,Define}Helper(..., const char*[]{""col1"", ""col2""}, ...)` rather than `Jit{Filter,Define}Helper(..., std::vector<std::string>{""col1"", ""col2""}, ...)`. I'm working on a patch so Stefan can try this out on the original usecase.; * now that the mechanism behind the long compile times is understood, Axel will work on a standalone reproducer to try to push for a fix in upstream clang (and possibly gcc if we see the patch reduces gcc compile times too)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7604#issuecomment-804843292:564,avoid,avoid,564,https://root.cern,https://github.com/root-project/root/issues/7604#issuecomment-804843292,1,['avoid'],['avoid']
Safety,Thanks to Tomas Dado for noticing that this was broken. We should ensure that ROOT always builds with this flag. See also:; * https://root.cern/doc/v632/release-notes.html#compile-your-code-with-memory-safe-interfaces; * https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooFit/Config.h#L16,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15946:202,safe,safe-interfaces,202,https://root.cern,https://github.com/root-project/root/pull/15946,1,['safe'],['safe-interfaces']
Safety,"Thanks! I'll take care of backporting this, since it should be fixed for the release. Then packagers don't have to do hacks to avoid the flood of warnings.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15527#issuecomment-2115367330:127,avoid,avoid,127,https://root.cern,https://github.com/root-project/root/pull/15527#issuecomment-2115367330,1,['avoid'],['avoid']
Safety,"Thanks! I'm not calling `cycle` in the constructor, I'm explicitly initializing it. This should not be necessary because I already do it in the declaration:; https://github.com/root-project/root/blob/79a033698cfada8dda1254224f4f251afa2d5c3b/roofit/roofitcore/src/MemPoolForRooSets.h#L173. But some compilers we use in the CI don't seem to like it and gave this warning, which I avoid by calling the constructor of the `cycle` array in the Arena constructor.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7995#issuecomment-829283395:378,avoid,avoid,378,https://root.cern,https://github.com/root-project/root/pull/7995#issuecomment-829283395,1,['avoid'],['avoid']
Safety,"Thanks! You're right, it's not that necessary, but having this interface more general would have avoided the question on the forum to begin with. And I think every change that would have prevented a question is a good change, to avoid more duplicate questions in the future.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13266#issuecomment-1659938360:97,avoid,avoided,97,https://root.cern,https://github.com/root-project/root/pull/13266#issuecomment-1659938360,2,['avoid'],"['avoid', 'avoided']"
Safety,"Thanks, @vgvassilev. > it is not exception safe. Instead of re-implementing a vector with small buffer optimization (along the lines you describe) we believe that adjusting this adapted small vector is a more viable / cheap solution. We also don't expect the lack of exception safety to be a major concern given the use cases of `RVec`. And if I am proven wrong and it becomes a concern then we're in a position to address that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-821054757:43,safe,safe,43,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-821054757,2,['safe'],"['safe', 'safety']"
Safety,"Thanks, I propose to add the relevant information to the release notes in a separate PR (mainly to avoid an otherwise unnecessary rebase before merging)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7260#issuecomment-805879567:99,avoid,avoid,99,https://root.cern,https://github.com/root-project/root/pull/7260#issuecomment-805879567,1,['avoid'],['avoid']
Safety,"Thanks, I see it now.; @bellenot any idea where this error might be coming from in Windows?. `[2022-10-18T15:48:41.690Z] hudson.AbortException: script returned exit code -1`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11588#issuecomment-1305694455:128,Abort,AbortException,128,https://root.cern,https://github.com/root-project/root/pull/11588#issuecomment-1305694455,1,['Abort'],['AbortException']
Safety,"That about this PR? . It is necessary to correctly detect situation when `json_fwd.hpp` is really required.; Main problem if system-wide installation of newer 3.11.x version of `nlohmann/json.hpp` does not includes `json_fwd.hpp`.; That's why this PR. Older (lower than 3.9 are) rare now, but can work without problems - if provides `json_fwd.hpp`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11268#issuecomment-1245001783:51,detect,detect,51,https://root.cern,https://github.com/root-project/root/pull/11268#issuecomment-1245001783,1,['detect'],['detect']
Safety,"That callstack would not show the Finalize call anyway, as `abort` is called from `VariationsFor`. The event loop has not even started there. So the question remains: is `Finalize` called if an exception is thrown during the event loop? I will have to check.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10484#issuecomment-1460383833:60,abort,abort,60,https://root.cern,https://github.com/root-project/root/issues/10484#issuecomment-1460383833,1,['abort'],['abort']
Safety,"That is safe: the TChain is declared at global scope, so it will be destroyed only at program exit. Declaring it as a Python global variable (i.e. at module scope) should have the same effect.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10965#issuecomment-1427915793:8,safe,safe,8,https://root.cern,https://github.com/root-project/root/issues/10965#issuecomment-1427915793,1,['safe'],['safe']
Safety,That was already discussed many time in the past. The problem is that doing that de pdf and ps files generated will be super huge and people will not realize it if they are running in batch. Some people had disk saturated. Col2 was explicitly created for that. So if we do what we suggest we do exactly what we wanted to avoid. All that is explained in de reference guide,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6822#issuecomment-728877631:321,avoid,avoid,321,https://root.cern,https://github.com/root-project/root/issues/6822#issuecomment-728877631,2,['avoid'],['avoid']
Safety,"That was foreseen for the next release, but to avoid further confusion we will create it now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8188#issuecomment-843812408:47,avoid,avoid,47,https://root.cern,https://github.com/root-project/root/issues/8188#issuecomment-843812408,1,['avoid'],['avoid']
Safety,"That would be a good interface. There would always be a practical limit on the number of items that one could view, but suppose we just don't want to specify it (and risk running out of memory in extreme cases). Can `nItems = -1` or `nItems < 0` mean ""send me everything""? The function would still change `nItems` in place to tell the caller how many items are actually in the `const T*` that it returns. Also, who owns the `const T*` memory? Would deleting the `RNTupleView` free that `const T*`?. Might the `const T*` a concatenation of multiple pages, or is this still granular at the page level? If it can be a concatenation of multiple pages, then it would be a different buffer from the one the `RNTupleView` manages internally. If it could be _either a view or a copy_, then the `RNTupleView` must own it because this object would have the most information to keep track of whether its internal buffer-freeing frees the `const T*`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7112#issuecomment-825682200:166,risk,risk,166,https://root.cern,https://github.com/root-project/root/pull/7112#issuecomment-825682200,1,['risk'],['risk']
Safety,"The ""Math/Error.h"" header is not shipped with standalone Minuit2. It is not a perfect solution to just ship it with Minuit2, because the Error.h header behaves differently depending on the `MATHCORE_STANDALONE` macro being defined or not. The code would only work correctly if the user defines the `MATHCORE_STANDALONE` herself in the user code that uses standalone Minuit2, which would be annoying. Instead, this commit proposes another solution to the problem: for all headers also used in Minuit2 standalone, MathCore; moves the definitions of all functions that use `Math/Error.h` out of the header files in the cxx files. Like this, the `Math/Error.h` is only a build dependency of standalone Minuit2, and the user doesn't need to define the `MATHCORE_STANDALONE` macro for it to work. Including the ""Math/Util.h"" header needs to be avoided for similar reasons (it's about another preprocessor macro related to `veccore`).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13646:838,avoid,avoided,838,https://root.cern,https://github.com/root-project/root/pull/13646,1,['avoid'],['avoided']
Safety,The 5 second timeout was not enough when trying to build ROOT in docker.; Possibly the issue was due to lag on the server as well. Patch by Alexander Penev (@alexander-penev).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9405:13,timeout,timeout,13,https://root.cern,https://github.com/root-project/root/pull/9405,1,['timeout'],['timeout']
Safety,"The CI build error detection logic is not very clever.; I quoted the error the PR is fixing in the git commit message.; The CI build puts the commit message from the PR in the CI build log.; Then scans the log for errors and tags the quoted error in the commit message as a failure...; The log actually says: 100% tests passed, 0 tests failed out of 1120",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8366#issuecomment-856589322:19,detect,detection,19,https://root.cern,https://github.com/root-project/root/pull/8366#issuecomment-856589322,1,['detect'],['detection']
Safety,"The CMake build is now much more heavily integrated with the folder structure. This has the positive side that less copying is going on, and the downside that it has to fill in the source directory with the items it needs from ROOT (they are ignored and easy to clean with `make purge`, though). Like before, you can build in place or make a redistributable source package. Only added one `.gitignore`. Haven't really touched the ROOT Minuit2 build system, though some fixes would be good there too, but that's a later PR. (Instructions have not been updated to new version yet, and not as well tested yet). I can revert to the old system if that's better. The original reason for using CMake to do the copy also was because that avoided having to write a `.sh` file, and was more portable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680#issuecomment-369603935:730,avoid,avoided,730,https://root.cern,https://github.com/root-project/root/pull/1680#issuecomment-369603935,1,['avoid'],['avoided']
Safety,The EnableAutoLoading interface needs to know about the internal TCling implementation to safely enable the autoloading facility in ROOT. Calling this interface cannot be user responsibility as he/she should not know the initialization details of TCling. Make this interface a nop and add a deprecation warning. This should resolve ROOT-10514 and ROOT-10528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4868:90,safe,safely,90,https://root.cern,https://github.com/root-project/root/pull/4868,1,['safe'],['safely']
Safety,"The Failure is visible on the GCC 12 / Fedora 36 build: https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/3285/LABEL=ROOT-fedora36,SPEC=default,V=master/testReport/junit/projectroot.roottest.root.tree/branches/roottest_root_tree_branches_make/; for example:; ```; +Error in <TTree::Branch>: The class requested (vector<int>) for the branch ""vec"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (vector<int>) to avoid to write corrupted data.; ```; This indicates that the generation of the dictionary for `std::vector<int>` failed even-though it is explicitly requested as part of the G__Core.cxx dictionary. . And indeed when inspecting the build log we see for `G__Core.cxx`:; ```; Warning: Unused class rule: vector<Int_t> ; ```. I narrowed down the problem to the presence of:; ```; -cxxmodule -s /home/sftnight/build/manual/build/lib/libCore.so -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes ; ```; on the command line. And it can easily be reproduce with the files:; ```; // a.h; #include <vector>; ```; and; ```; // aLinkDef.h ; #pragma link C++ class vector<Int_t>+;; ```; and with; ```; /home/sftnight/build/manual/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx a.h aLinkDef.h; ```; we get a proper dictionary for the vector. While with; ```; /home/sftnight/build/manual/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/sftnight/build/manual/build/lib/libCore.so -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes a.h aLinkDef.h ; ```; we get an empty dictionary and the warning:. ```; Warning: Unused class rule: vector<Int_t> ; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11329:515,avoid,avoid,515,https://root.cern,https://github.com/root-project/root/issues/11329,1,['avoid'],['avoid']
Safety,"The IO of RooFit proxies can be quite fragile sometimes, and it can happen when reading a RooProduct that the `_proxyList` is not synced with the proxy members. In dbc96810, I decided to throw an exception is this case, but I realized this was too strong: too many old workspace are affected. In all cases that I know of, one can simply recover by correctly resetting the `_proxyList`. This is now what is done, and only a warning is printed. The warning includes information on all the proxies, so the user can figure out themselves if what RooFit is doing here is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12046:337,recover,recover,337,https://root.cern,https://github.com/root-project/root/pull/12046,1,['recover'],['recover']
Safety,"The PR looks good to me. ; I think is good to avoid including RooMath in headers of RooFitCore. Now RooMath is included in the BatchComputeLibrary that is not build as a standard ROOT Module, therefore RooMath definitions will not be in any module.; A long term solution would be eventually to include RooMath functions in the math/mathcore library.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9214#issuecomment-958837648:46,avoid,avoid,46,https://root.cern,https://github.com/root-project/root/pull/9214#issuecomment-958837648,1,['avoid'],['avoid']
Safety,"The PR speeds up by factors (5x-7x) the simple reproducer of the issue we now have thanks to @sawenzel : ; ```.cpp; // Inspired by Alice production code, extracted from the surrounding context; #include ""TF1.h"". void Foo(int N) {; double am = 90;; double awidth = 1;; for (int i = 0; i < N; ++i) {; static TF1 rbw(""rbw"", ""pow([1],2)*pow([0],2)/(pow(x*x-[0]*[0],2)+pow(x*x*[1]/[0],2))"", -10, 10);; rbw.SetRange(am - 5 * awidth, am + 5 * awidth);; rbw.SetParameter(0, am);; rbw.SetParameter(1, awidth);; am = rbw.GetRandom();; if (am <-100000000) std::cout << am << std::endl; // to avoid compiler optimisations; }; }. int main(); {; Foo(1000);; return 0;; }; ```; The code is faster because the fast code path is taken in the PluginHandler because the right type is used in the GSLIntegratorPlugin (unsigned long, via the size_t typedef), and not just a compatible one (unsigned int).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15579#issuecomment-2161409421:581,avoid,avoid,581,https://root.cern,https://github.com/root-project/root/issues/15579#issuecomment-2161409421,4,['avoid'],['avoid']
Safety,"The RAII object in RDaos.cxx was constructed statically, which causes a DAOS-enabled RNTuple build to call `daos_init()` (or `daos_fini()` at exit) even if the only the file backend was used by user code. This commit turns the RAII object into a static variable in `RDaosPool::RDaosPool()` which is initialized during the first call to the; constructor. Note that static variable initialization is guaranteed to be thread-safe by ISO C++.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8093:422,safe,safe,422,https://root.cern,https://github.com/root-project/root/pull/8093,1,['safe'],['safe']
Safety,"The RNTuple binary format v1 states that feature flags bitmap is encoded as a sequence of 64-bit integers in which the MSb indicates that another 64-bit block follows. If more than one 64-bit integer is serialized, the MSb of all but the last integer should be `1` and the rest of the bits should preserve their original meaning.; Therefore, this PR avoids the use of two's complement in this case in favour of manually setting the MSb. According to my interpretation of the [RNTuple binary format v1](https://github.com/root-project/root/blob/master/tree/ntuple/v7/doc/specifications.md) specification, this is the only case in which this happens. All the other uses of two's complement are correct, e.g. in frames or locators we specify that negative sizes have a different/specific meaning. ## Changes or fixes:; - Fix feature flags bitmap serialization. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9418:350,avoid,avoids,350,https://root.cern,https://github.com/root-project/root/pull/9418,1,['avoid'],['avoids']
Safety,The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10871:186,avoid,avoid,186,https://root.cern,https://github.com/root-project/root/issues/10871,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"The RResult class overwrites the `new` operator to prevent (make it harder for) heap creation of RResult objects. This does not work with PyROOT. E.g., PyROOT can't call `RFieldBase::Create()`. This patch removes the new operator overwrites. This should be a small safety compromise for PyROOT usability. Also: fixes namespace layering and moves RResultBase out of the Internal namespace.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14463:265,safe,safety,265,https://root.cern,https://github.com/root-project/root/pull/14463,1,['safe'],['safety']
Safety,"The RooAbsPdf version number is incremented, going with the removal of; some unused data members:. * `_rawValue`; * `_traceCount`; * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it; is only related to logging, counting the logged errors to avoid printing; errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11093:277,avoid,avoid,277,https://root.cern,https://github.com/root-project/root/pull/11093,1,['avoid'],['avoid']
Safety,"The RooFit test statistic classes give wrong results if they are; constructed from multiple comma-separated ranges. This can cause errors,; such as the one reported in Jira issue [ROOT-10038](https://sft.its.cern.ch/jira/browse/ROOT-10038). This commit suggests to throw an exception if multiple comma-separated; ranges are detected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7827:324,detect,detected,324,https://root.cern,https://github.com/root-project/root/pull/7827,1,['detect'],['detected']
Safety,"The RooPoisson is implemented with TMath::Poisson, which is normalized; if x covers the full definition range of the Poisson distribution, which; is zero to infinity. By correctly reporting this self-normalization in; that case, the creation of a dummy integral object that returns one is; avoided. The reduced overhead results in a significant speedup of; HistFactory fits with gamma constraints between 10 and 15 % in the hf001; tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:; ```; ----------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ----------------------------------------------------------------------------------------------; hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391; hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762; hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156; hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423; ```. and after this PR:; ```; ----------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ----------------------------------------------------------------------------------------------; hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744; hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786; hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835; hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10836:290,avoid,avoided,290,https://root.cern,https://github.com/root-project/root/pull/10836,1,['avoid'],['avoided']
Safety,The Sema::LookupConstructor is not iteration safe.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7298:45,safe,safe,45,https://root.cern,https://github.com/root-project/root/pull/7298,1,['safe'],['safe']
Safety,"The TIsAProxy does late initialization and caching, both of which; need to be done in a thread-safe manner.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/49:95,safe,safe,95,https://root.cern,https://github.com/root-project/root/pull/49,1,['safe'],['safe']
Safety,"The TPython library has one big caveat: it requires linking against `libpython`, which is not allowed in some context like the Python package manager. To avoid this problem that is blocking `pip install root`, this commit suggests to make TPython optional at build time. This makes also sense considering how TPython and PyROOT are used: if you intend to use ROOT via PyROOT from pip install ROOT, you probably won't need the functionality to run Python code from C++ that TPython provides. Possibly supersedes #15891, @vepadulano.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16337:154,avoid,avoid,154,https://root.cern,https://github.com/root-project/root/pull/16337,1,['avoid'],['avoid']
Safety,"The TTree::kEntriesReshuffled bit signals that a TTree is the output; of the processing of another TTree, and its entries are reshuffled; w.r.t. to the original TTree. As a safety measure, a TTree with this; bit set cannot add friends nor can be added as a friend. MT Snapshot, in RDataFrame, sets kEntriesReshuffled for the output tree to true. This fixes ROOT-9556.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5182:173,safe,safety,173,https://root.cern,https://github.com/root-project/root/pull/5182,1,['safe'],['safety']
Safety,"The Windows ""failure"" seems spurious:; ```; 18:21:16 Build failed because:; [Pipeline] echo; 18:21:16 hudson.AbortException: script returned exit code -1; ```; even though all tests have passed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12045#issuecomment-1396537983:109,Abort,AbortException,109,https://root.cern,https://github.com/root-project/root/pull/12045#issuecomment-1396537983,1,['Abort'],['AbortException']
Safety,"The [mac13 llvm assert](https://github.com/root-project/root/actions/runs/4628401453/jobs/8187431201?pr=12629#step:3:8563) (module source Loc overflow?) is a real issue that we probably need to address before merging. ```; Assertion failed: ((Val & ~(~0U >> (32-NumBits))) == 0 && ""High bits set!""), function Emit, file BitstreamWriter.h, line 205.; Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):; 0 rootcling_stage1 0x00000001052ba9c4 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56; 1 rootcling_stage1 0x00000001052b96f0 llvm::sys::RunSignalHandlers() + 64; 2 rootcling_stage1 0x00000001052bb094 SignalHandler(int) + 344; 3 libsystem_platform.dylib 0x000000018a46ea84 _sigtramp + 56; 4 libsystem_pthread.dylib 0x000000018a43fc28 pthread_kill + 288; 5 libsystem_c.dylib 0x000000018a34dae8 abort + 180; 6 libsystem_c.dylib 0x000000018a34ce44 err + 0; 7 rootcling_stage1 0x00000001054ee31c clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, clang::Module*) (.cold.1) + 0; 8 rootcling_stage1 0x0000000102bdbcd4 llvm::BitstreamWriter::Emit(unsigned int, unsigned int) + 228; 9 rootcling_stage1 0x0000000102bf3ee4 void llvm::BitstreamWriter::EmitRecordWithAbbrevImpl<unsigned long long>(unsigned int, llvm::ArrayRef<unsigned long long>, llvm::StringRef, llvm::Optional<unsigned int>) + 676; 10 rootcling_stage1 0x0000000102bd0fb4 clang::ASTRecordWriter::Emit(unsigned int, unsigned int) + 228; 11 rootcling_stage1 0x0000000102c1be0c clang::ASTWriter::WriteDecl(clang::ASTContext&, clang::Decl*) + 416; 12 rootcling_stage1 0x0000000102bdeb38 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, clang::Module*) + 11872; 13 rootcling_stage1 0x0000000102bdbb3c clang::ASTWriter::WriteAST(clang",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12629#issuecomment-1499102403:897,abort,abort,897,https://root.cern,https://github.com/root-project/root/pull/12629#issuecomment-1499102403,1,['abort'],['abort']
Safety,"The `IOTests` test has run on my machine for 10000 times without crashing, so this may be safe to remove now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1426:90,safe,safe,90,https://root.cern,https://github.com/root-project/root/pull/1426,1,['safe'],['safe']
Safety,"The `Py_GetProgramName` function in the Python C API was deprecated in Python 3.13 and will be removed in Python 3.15. However, it seems behavior is unchanged by just passing an empty string instead. This avoids a warning when building CPyCppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16785:205,avoid,avoids,205,https://root.cern,https://github.com/root-project/root/pull/16785,1,['avoid'],['avoids']
Safety,"The `RooAbsData::createHistogram` has two overloads, one taking RooFit; command arguments and one taking integers for bin numbers (the version; with command arguments is much more common in RooFit code). They behave inconsistently when using default parameters, e.g. these two; calls result in different binnings:; ```C++; // 1. overload with int bin numbers:; data->createHistogram(obs->GetName());. // 2. overload with command arguments:; data->createHistogram(data->GetName(), dataObs);; ```. The function with integer bin numbers defaults to computing a binning; automatically from the distribution in the dataset. The function with; command arguments defaults to the binning stored in the variable, which; is much more suitable for RooFit. To avoid confusion in the future, this commit marks the overload with; the `int` parameters as deprecated so it is removed in ROOT 6.30. Closes https://github.com/root-project/root/issues/10401.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10411:748,avoid,avoid,748,https://root.cern,https://github.com/root-project/root/pull/10411,1,['avoid'],['avoid']
Safety,"The `RooAbsMinimizerFcn` and `RooMinimizerFcn` classes are; implementation details of the `RooMinimizer`. In one of the recent RooFit meetings, it was decided together with users; that this should be no problem, and doing so will greatly increase the; developers flexibility in updating the RooMinimizer implementation. This removal is mentioned in the v628 release notes. Furthermore, this PR suggests to make `RooMinimizer::applyCovarianceMatrix` a public function, and extends `RooAbsMinimizerFcn` by a `fit` function to avoid downcasting in the RooMinimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9874:524,avoid,avoid,524,https://root.cern,https://github.com/root-project/root/pull/9874,1,['avoid'],['avoid']
Safety,"The `RooAbsPdf::_normSet` member should be not used, because it can; happen in many situations that the RooArgSet it points to gets out of; scope and then you get a crash. There were several cases reported on the; forum where this happened with a RooAddPdf recently, becaues with ROOT; 6.26 some logic of the RooAddPdf got changed to better deal with empty; normalization sets. This commit avoids using `_normSet` by overriding `getValV` in RooAddPdf; directly, instead of `evaluate()`. This way, it has access to the actual; normalization set that is passed to the call to `getVal()`. For the batch mode, we now pass `nullptr` to; `RooAddPdf::getNormAndCache()` instead of `_normSet`. In this case it; falls back to using `_copyOfLastNormSet`, which is guaranteed to still; be valid because it's a unique_ptr owned by the RooAddPdf itself. Needs to be backported to ROOT 6.26.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10550:390,avoid,avoids,390,https://root.cern,https://github.com/root-project/root/pull/10550,1,['avoid'],['avoids']
Safety,"The `RooAbsReal::getValues` has already been established as the entry; point for evaluating RooFit objects with the batch mode and it should; not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar; mode all the time, because the `evaluateSpan` funtions it used got; replaced by `computeBatch`. In this commit, the desired behavior of; using the BatchMode is restored by using the RooFitDriver. To that end, a; new constructor has been added to the RooFitDriver that takes a; `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because; it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9986:859,avoid,avoid,859,https://root.cern,https://github.com/root-project/root/pull/9986,1,['avoid'],['avoid']
Safety,The `RooCFunction*Binding` classes and the associated `RooFit::bindFunction()` and `RooFit::bindPdf()` functions are deprecated and will be removed in ROOT 6.32. Their functionality is redundant with the `RooFormulaVar` and `RooGenericPdf` that should be used instead. This is another deprecation done in the spirit of avoiding duplicate interfaces and user confusion.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11983:185,redund,redundant,185,https://root.cern,https://github.com/root-project/root/pull/11983,2,"['avoid', 'redund']","['avoiding', 'redundant']"
Safety,"The `RooFitResult::isIdentical` method so far only compared parameter; values and covariance matrix values. Even though comparing the final; parameter errors would be redundant with the covariance matrix checks,; it's still important to check parameter errors for two reasons:. 1. Initial parameter errors need to be compared, because the the; initial error determins the initial step size which influences the; minimization path. If initial errors are different, the final; parameter values are almost never identical. Catching differences in initial parameter errors informs the user; that differences in fit result are because of the starting; conditions. 2. In the case of `RooFitResult::isIdenticalNoCov`, we need to check; the error of final parameters because there is no comparison of; covariance matrix values. The signature of the public function `isIdenticalNoCov` is extended by a; tolerance parameter for the error comparison. This is expected to not; break user code, because the function was only introduced in 6.26 and is; so far only used in a single unit test (`testSumW2Error`). The `testRooAbsPdf` unit test didn't reset the initial parameter errors; correctly, which is now fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10465:167,redund,redundant,167,https://root.cern,https://github.com/root-project/root/pull/10465,1,['redund'],['redundant']
Safety,"The `RooMomentMorphND` and `RooMomentMorphFuncND` classes duplicated some copy-pasted code from stackoverflow. This is not factored out into a new private header file to avoid code duplication. Also, a semicolon is added after `TRACE_CREATE` and `TRACE_DESTROY` in order to not confuse clang-format.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11962:170,avoid,avoid,170,https://root.cern,https://github.com/root-project/root/pull/11962,1,['avoid'],['avoid']
Safety,"The `RooVectorDataStore` had two different buffers to store the row data in: the so-called ""attached buffers"" and the ""native buffers"". The problem is that when external buffers are attached, the call to `RooVectorDataStore::get()` is not loading the native buffers anymore, which is breaking some code that assumes this, like `RooVectorDataStore::loadValues`, which is used in `RooDataSet::reduce`. This breaks the reduction of datasets with externally attached buffers, which breaks the copy constructor of the `RooNLLVar`. This commit suggests to always load both the native and attached buffers if `RooVectorDataStore::get()` is called. This has almost no performance overhead and is much safeter. Since this change fixes the copy constructor of the `RooNLLVar`, which is used when plotting the NLL, this commit fixes this JIRA ticket: https://sft.its.cern.ch/jira/browse/ROOT-9752. A unit test that covers the problem reported in the JIRA ticket is also added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11477:693,safe,safeter,693,https://root.cern,https://github.com/root-project/root/pull/11477,1,['safe'],['safeter']
Safety,"The `bool` columns in RDF are special, because the Take action returns a `std::vector<bool>`, which has an implementation-depended memory layout for space optimization. Therefore, I suggest supporting taking `bool` columns as `unsigned char` with `Take()`, such that in `RDataFrameAsNumpy` the values can be directly taken as bytes. This avoids superfluous copying in the code, and keeps the special logic in the pythonization side minimal. Closes #8639.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15180:338,avoid,avoids,338,https://root.cern,https://github.com/root-project/root/pull/15180,1,['avoid'],['avoids']
Safety,"The `gMainDict` should be borrowed, i.e. we are not calling Py_INCREF(gMainDict). Like this, we avoid unexpectedly affecting how long `__main__` is kept alive. The `gMainDict` is only used in `Exec()`, `ExecScript()`, and `Eval()`, which should not be called after `__main__` is garbage collected anyway. Closes #16402. Needs to be backported to 6.32. Equivalent CPyCppyy PR:; https://github.com/wlav/CPyCppyy/pull/37",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16403:96,avoid,avoid,96,https://root.cern,https://github.com/root-project/root/pull/16403,1,['avoid'],['avoid']
Safety,"The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13518:368,avoid,avoids,368,https://root.cern,https://github.com/root-project/root/pull/13518,1,['avoid'],['avoids']
Safety,"The `if(roofit_multiprocess AND NOT minuit2)` check should be done after `ROOT_APPLY_OPTIONS()`, because otherwise the variables will not be defined as the defaults if the user didn't define them explicitly. This avoids warnings when not defining the `minuit2` option when setting `roofit_multiprocess=ON`. Follows up directly on 3acc0e601bd. To be backported to the 6.30 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13879:213,avoid,avoids,213,https://root.cern,https://github.com/root-project/root/pull/13879,1,['avoid'],['avoids']
Safety,"The `max template recursion depth reached` error is due to the; implementation of std::tuple's move constructor in some STL; implementations (notably, gcc). The logic has been modified to avoid copying large tuples:; - the number of slots is now fixed for each node at construction time; - all the logic that was implemented by the `CreateSlot` methods has; been moved to the corresponding nodes' constructors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/740:188,avoid,avoid,188,https://root.cern,https://github.com/root-project/root/pull/740,1,['avoid'],['avoid']
Safety,"The `max template recursion depth reached` error is due to the; implementation of std::tuple's move constructor in some STL; implementations (notably, gcc). The logic has been modified to avoid copying large tuples:; - the number of slots is now fixed for each node at construction time; - all the logic that was implemented by the `CreateSlot` methods has; been moved to the corresponding nodes' constructors. Cherry-pick conflicts:; 	tree/treeplayer/inc/ROOT/TDFNodes.hxx; 	tree/treeplayer/src/TDFNodes.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/743:188,avoid,avoid,188,https://root.cern,https://github.com/root-project/root/pull/743,1,['avoid'],['avoid']
Safety,"The `n_in_range` reference value in the unit test; `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13612:241,avoid,avoiding,241,https://root.cern,https://github.com/root-project/root/pull/13612,1,['avoid'],['avoiding']
Safety,"The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list; ```; Fatal: rule->GetTarget() != nullptr violated at line 1006 of; `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'; aborting; ```; Therefore, in principle we should also allow these rules for now. ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12049:488,abort,aborting,488,https://root.cern,https://github.com/root-project/root/pull/12049,1,['abort'],['aborting']
Safety,"The analytical integral code of the `RooTruthModel` was making the wrong assumption that if one uses the single-sided bases, the minimum x value is always at zero (or the maximum value at zero, for the case of the flipped bases). This resulted in wrong integral values when integrating over a subrange, as reported here on the forum:. https://root-forum.cern.ch/t/possible-bug-in-integration-of-roobdecay-and-rooabsanaconvpdf/56968. This commit rewrites the RooTruthModel analytical integral code to also consider these cases. To avoid that with the additional code branches the code becomes too verbose, the code was refactored to use a helper function for evaluating indefinite integrals of symmetric or asymmetric basis functions. The refactored code is tested by the integration tests in `stressRooFit`, and the problem that was reported on the forum is covered by a new unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14021:530,avoid,avoid,530,https://root.cern,https://github.com/root-project/root/pull/14021,1,['avoid'],['avoid']
Safety,"The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework.; Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:; ```; OVERVIEW: rootcling; USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>; ; OPTIONS:; ; Generic Options:; ; -help - Display available options (-help-hidden for more); -help-list - Display list of available options (-help-list-hidden for more); -version - Display the version of this program; ; rootcling common options:; ; -D=<string> - Specify defined macros.; -I=<string> - Specify an include path.; -W=<string> - Specify compiler diagnostics options.; -c - Deprecated, legacy flag which is ignored.; -cxxmodule - Generate a C++ module.; -excludePath=<string> - Do not store the <path> in the dictionary.; -f - Overwrite <file>s.; -failOnWarnings - Fail if there are warnings.; -inlineInputHeader - Does not generate #include <header> but expands the header content.; -interpreteronly - Generate minimal dictionary for interactivity (without IO information).; -m=<string> - The list of dependent modules of the dictionary.; -multiDict - If this library has multiple separate LinkDef files.; -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH.; -p - Deprecated, legacy flag which is ignored.; -rmf=<string> - Generate a rootmap file with the specified name.; -rml=<string> - Generate rootmap file.; -s=<string> - The path to the library of the built dictionary.; -selSyntaxOnly - Check the selection syntax only.; -split - Sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4171:408,safe,safety,408,https://root.cern,https://github.com/root-project/root/pull/4171,1,['safe'],['safety']
Safety,"The automatic conversion of ordinary obejcts to smart pointers is disabled for PyROOT because it can cause trouble with overload resolution. If a function has overloads for both ordinary objects and smart pointers, then the implicit conversion to smart pointers can result in the smart pointer overload being hit, even though there would be an overload for the regular object. Since PyROOT didn't have this feature before 6.32 anyway, disabling it was the safest option. Closes #15117. A regression test with the reproducer from the GitHub issue was added to roottest:; https://github.com/root-project/roottest/pull/1102",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15125:456,safe,safest,456,https://root.cern,https://github.com/root-project/root/pull/15125,1,['safe'],['safest']
Safety,"The automatic conversion of ordinary obejcts to smart pointers is disabled for PyROOT because it can cause trouble with overload resolution. If a function has overloads for both ordinary objects and smart pointers, then the implicit conversion to smart pointers can result in the smart pointer overload being hit, even though there would be an overload for the regular object. Since PyROOT didn't have this feature before 6.32 anyway, disabling it was the safest option. Closes #15117. Backport of https://github.com/root-project/root/pull/15125.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15311:456,safe,safest,456,https://root.cern,https://github.com/root-project/root/pull/15311,1,['safe'],['safest']
Safety,"The bt from gdb when loading this dictionary in other application (ThePEG); ```; (gdb) bt; #0 __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:49; #1 0x00007ffff73588a4 in __GI_abort () at abort.c:79; #2 0x00007ffff73b2177 in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7ffff74c43a7 ""%s\n"") at ../sysdeps/posix/libc_fatal.c:155; #3 0x00007ffff73b9e6c in malloc_printerr (str=str@entry=0x7ffff74c2654 ""malloc(): corrupted top size"") at malloc.c:5389; #4 0x00007ffff73bd884 in _int_malloc (av=av@entry=0x7ffff74f6a00 <main_arena>, bytes=bytes@entry=48) at malloc.c:4135; #5 0x00007ffff73be8f4 in __GI___libc_malloc (bytes=48) at malloc.c:3078; #6 0x00007ffff7708959 in operator new (sz=sz@entry=48) at ../../../../libstdc++-v3/libsupc++/new_op.cc:50; #7 0x00007ffff368ded2 in TClassTable::FindElementImpl (cname=cname@entry=0x7ffff3e851be ""HepMC3::GenParticleData"", insert=insert@entry=true) at /usr/src/debug/root-6.22.08-1.fc33.x86_64/core/cont/src/TClassTable.cxx:525; #8 0x00007ffff368e591 in TClassTable::Add (cname=0x7ffff3e851be ""HepMC3::GenParticleData"", id=<optimized out>, info=..., dict=0x7ffff3e81a40 <ROOT::HepMC3cLcLGenParticleData_Dictionary()>, pragmabits=4); at /usr/src/debug/root-6.22.08-1.fc33.x86_64/core/cont/src/TClassTable.cxx:352; #9 0x00007ffff36fd338 in ROOT::TGenericClassInfo::TGenericClassInfo (this=this@entry=0x7ffff3e8c340 <ROOT::GenerateInitInstanceLocal(HepMC3::GenParticleData const*)::instance>, fullClassname=fullClassname@entry=0x7ffff3e851be ""HepMC3::GenParticleData"", ; declFileName=declFileName@entry=0x7ffff3e851a0 ""HepMC3/Data/GenParticleData.h"", declFileLine=declFileLine@entry=24, info=..., action=<optimized out>, dictionary=0x7ffff3e81a40 <ROOT::HepMC3cLcLGenParticleData_Dictionary()>, isa=0xe09a50, pragmabits=4, ; sizof=56) at /usr/src/debug/root-6.22.08-1.fc33.x86_64/core/meta/src/TGenericClassInfo.cxx:102; #10 0x00007ffff3e819a9 in ROOT::GenerateInitInstanceLocal () at /usr/src/debug/HepMC3-3.2.3-1.fc33.x86_64/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7781#issuecomment-812846680:207,abort,abort,207,https://root.cern,https://github.com/root-project/root/issues/7781#issuecomment-812846680,1,['abort'],['abort']
Safety,"The change is not a debug printout, it inserts a new line in the SVG file before the `<\text>` tag. This avoids the syntax error the user sees when inserting a very long text.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14590#issuecomment-1928978464:105,avoid,avoids,105,https://root.cern,https://github.com/root-project/root/pull/14590#issuecomment-1928978464,1,['avoid'],['avoids']
Safety,The change is on the cmake hotspot used by virtually everybody. The risk to make an error here is high due to the complexity of the routine. Taking such risk weeks before the release should be very well weighted with the actual gain. It seems to me that the gain is not big enough to justify taking this direction for the release branch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4763#issuecomment-574165892:68,risk,risk,68,https://root.cern,https://github.com/root-project/root/pull/4763#issuecomment-574165892,2,['risk'],['risk']
Safety,"The changes in this PR address this forum post...; https://root-forum.cern.ch/t/chi2fito-with-yvar-does-not-support-range-option/56369; ...and follows up on the discussion here:; https://github.com/root-project/root/pull/13638. Short summaries of the commits, more detail in the commit descriptions:; 1. Following up on #1455, the multi-range chi2 creation logic is removed from `createChi2()`, because for a few months already this can be dealt with in the test statistics base classes; 2. Avoid separate RooXYChi2Var constructors for pdfs and functions: instead of having separate constructors for RooAbsPdf and RooAbsReal, it's better and less code duplication to have one RooAbsReal constructor and dynamically check if it got a RooAbsPdf; 3. Support `NumCPU()` and `Range()` in createChi2() for RooDataSets; 4. Bugfix in `RooDataSet::reduce()` by also copying the stored errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13651:491,Avoid,Avoid,491,https://root.cern,https://github.com/root-project/root/pull/13651,1,['Avoid'],['Avoid']
Safety,"The code in TTree is known to not be ""exception safe"" (it was written before exceptions were usable in practice), so it should never throw any exception . But also it should not interfere and should not change the return value of GetEntry. If I understood correctly and just catching the exception is changing the return value, could you confirm that it does so ""also"" in C++?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9154#issuecomment-951163261:48,safe,safe,48,https://root.cern,https://github.com/root-project/root/issues/9154#issuecomment-951163261,2,['safe'],['safe']
Safety,"The command executed by root is:; ```; gs -quiet -dSAFER -dNOPLATFONTS -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -dUseCIEColor -dCompatibilityLevel=1.4 -dPDFSETTINGS=/printer -dCompatibilityLevel=1.4 -dMaxSubsetPct=100 -dSubsetFonts=true -dEmbedAllFonts=true -sOutputFile=pdf_temp.pdf -f Test.pdf; ```; I tried on an other Mac with a more recent version of `gs` and I see also the error message. I am investigating. ```; root [5] c1->Print(""Test.pdf"",""EmbedFonts"");; Info in <TCanvas::Print>: EmbedFonts file Test.pdf has been created; GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected!; Since the release of version 9.11 of Ghostscript we recommend you do not set; -dUseCIEColor with the pdfwrite/ps2write device family. **** Error: Encountered 'obj' while expecting 'endobj'.; Treating this as a missing 'endobj', output may be incorrect.; **** Error: Encountered 'obj' while expecting 'endobj'.; Treating this as a missing 'endobj', output may be incorrect.; GPL Ghostscript 9.55.0: . Use of -dUseCIEColor detected!; Since the release of version 9.11 of Ghostscript we recommend you do not set; -dUseCIEColor with the pdfwrite/ps2write device family. root [6] . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13560#issuecomment-1697296935:577,detect,detected,577,https://root.cern,https://github.com/root-project/root/issues/13560#issuecomment-1697296935,2,['detect'],['detected']
Safety,"The commit 4c9c5d6b49 fixed the memory leaking of the `RooMomentMorph(Func)ND::Grid2::_grid` member by deleting it in the constructor, but it didn't consider that the copy constructor didn't make a clone of the `_grid`, ending up with double ownership. Now, the copy constructor is also cloning the binnings, just like the regular constructor, and the double ownership is avoided. Closes #12155.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12160:372,avoid,avoided,372,https://root.cern,https://github.com/root-project/root/pull/12160,1,['avoid'],['avoided']
Safety,The commit implements a few new unit tests and also fixes one bug related to the normalization of a RooAddPdf when the custom normalization set of its components is reset. There is also some code improvement by removing a redundant data member of the `RooAddPdf` and `RooAddModel` classes. More details in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11485:222,redund,redundant,222,https://root.cern,https://github.com/root-project/root/pull/11485,1,['redund'],['redundant']
Safety,"The current API forces the user to copy the entire fColumnRanges map and do a map lookup if they want to iterate the column ranges. With this change, one can simply access the underlying map directly, avoiding extra work in most cases. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16022:201,avoid,avoiding,201,https://root.cern,https://github.com/root-project/root/pull/16022,1,['avoid'],['avoiding']
Safety,"The current code goes through different codepaths depending on the platform. One of the codepaths relies on a non-standard extension (variable-length arrays) and the other manually allocates and frees a char array.; Using a std::string, while losing a bit of performance on Linux/Mac, simplifies and unifies the codepaths and avoids using non-standard C++ (which in turns enable building with -Werror).; The perf hit is most likely negligible, especially given the use of dynamic_cast in the same block.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16476:326,avoid,avoids,326,https://root.cern,https://github.com/root-project/root/pull/16476,1,['avoid'],['avoids']
Safety,"The current valgrind report hints at the jit relocation:; ```; bash-4.2$ ROOT_INCLUDE_PATH=/scratch/cmsbuild/vvasilev/rootobj/include/ valgrind root.exe -l -b -q tutorials/hsimple.C ; ==92602== Memcheck, a memory error detector; ==92602== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==92602== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; ==92602== Command: root.exe -l -b -q tutorials/hsimple.C; ==92602== ; Disabling gnu++: clang has no __float128 support on this target!; ==92602== Source and destination overlap in memcpy(0x1fff0021f8, 0x1fff0021f8, 12); ==92602== at 0x408BCF4: memcpy (in /cvmfs/cms.cern.ch/slc7_ppc64le_gcc820/external/valgrind/3.15.0/lib/valgrind/vgpreload_memcheck-ppc64le-linux.so); ==92602== by 0x1129C867: void llvm::SmallVectorTemplateBase<char, true>::uninitialized_copy<char const, char>(char const*, char const*, char*, std::enable_if<std::is_same<std::remove_const<char const>::type, char>::value, void>::type*) (SmallVector.h:294); ==92602== by 0x1128FF7B: void llvm::SmallVectorImpl<char>::append<char const*, void>(char const*, char const*) (SmallVector.h:392); ==92602== by 0x115F49F3: void llvm::SmallString<256u>::append<char const*>(char const*, char const*) (SmallString.h:75); ==92602== by 0x115F21BB: llvm::SmallString<256u>::operator+=(llvm::StringRef) (SmallString.h:285); ==92602== by 0x1168DAFF: llvm::SmallString<256u>::operator=(llvm::StringRef) (SmallString.h:281); ==92602== by 0x1773BE63: llvm::vfs::RedirectingFileSystemParser::parseEntry(llvm::yaml::Node*, llvm::vfs::RedirectingFileSystem*, bool) (VirtualFileSystem.cpp:1311); ==92602== by 0x1773D81B: llvm::vfs::RedirectingFileSystemParser::parse(llvm::yaml::Node*, llvm::vfs::RedirectingFileSystem*) (VirtualFileSystem.cpp:1501); ==92602== by 0x1772AF77: llvm::vfs::RedirectingFileSystem::create(std::unique_ptr<llvm::MemoryBuffer, std::default_delete<llvm::MemoryBuffer> >, void (*)(llvm::SMDiagnostic const&, void*), llvm::StringRef, void*, llvm::In",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9297#issuecomment-979895686:219,detect,detector,219,https://root.cern,https://github.com/root-project/root/issues/9297#issuecomment-979895686,1,['detect'],['detector']
Safety,"The custom memory manager is only needed to avoid freeing the memory segments; the default `InProcessMemoryManager` (which is mostly copied) already does slab allocation to keep all segments together which is; needed for exception handling support. A limitation of this rudimentary support is that `CLING_DEBUG` and `CLING_PROFILE` do not work, they need to be registered as plugins.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11997:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/11997,1,['avoid'],['avoid']
Safety,The difference is only that the return type is casted to the actual; `RooArgSet` type. We avoid a few static casts all over the place like; this. A second commit in this PR applies some general improvements in memory management.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16100:90,avoid,avoid,90,https://root.cern,https://github.com/root-project/root/pull/16100,1,['avoid'],['avoid']
Safety,"The different overloads of `RooAbsRealLValue::inRange()` implemented; different tolerances when checking if a value `x` falls inside a; specific range. Some overloads checked if the interval; `[x - 1e-6, x + 1e6]` is overlapping with the range, an other overload; checked if the interval `[x - 1e-8*x, x + 1e8*x]` is overlapping. It's better is this is done consistently and predictably so this commit; suggests to leave out these epsilon margins that were never documented.; For backwards compatibility, one can set a custom relative or absolute; epsilon via the `RooNumber` interface. Also, the checks if the range limits are `RooNumber::isInfinite()` were; removed. They were mathematically redundant, since in RooFit, +/-; infinity is simply defined as +/-1e30. This PR fixes some corner cases in which you get paradox results from rage checks, like in this example:; ```C++; RooRealVar x{""x"", ""x"", 1e-6, 2e-6};; RooRealVar y{""y"", ""y"", 1e30, 1e30};. std::cout << x.inRange(0.0, nullptr) << std::endl;; std::cout << y.inRange(0.0, nullptr) << std::endl;; // both checks will return true without this PR!; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11999:375,predict,predictably,375,https://root.cern,https://github.com/root-project/root/pull/11999,2,"['predict', 'redund']","['predictably', 'redundant']"
Safety,The errors are unrelated.; ROOT-fedora31/noimt: ` error: failed to write new configuration file /build/workspace/root-pullrequests-build/root/.git/config.lock`. ROOT-performance-centos8-multicore/default:; df105_WBosonAnalysis_py: timeout; roottest_root_multicore_tExecutor: odd crash. ROOT-ubuntu16/nortcxxmod: IncrementalExecutor::executeFunction: symbol '_ZNK4ROOT15TThreadExecutor11GetPoolSizeEv' unresolved while linking symbol 'atexit'!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7018#issuecomment-759120884:231,timeout,timeout,231,https://root.cern,https://github.com/root-project/root/pull/7018#issuecomment-759120884,1,['timeout'],['timeout']
Safety,"The example for range-based iteration in `TList.cxx` uses a pattern that; can yield compiler warnings for some GCC versions:. ```; warning: loop variable 'obj' is always a copy because the range of type 'TList' does not return a reference [-Wrange-loop-analysis]; ```. To avoid spreading this pattern, this commit suggests to change the; example to explicitly use the `TObject *` type, which also makes the; example clearer. One of the occurrences of this pattern in RooFit is also changed to `TObject *` to avoid a warning in the Ubuntu 18 nightlies:; https://lcgapp-services.cern.ch/root-jenkins/job/root-incremental-master/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/11389/parsed_console/log_content.html#WARNING1. A memory leak in the `HeatmapAnalyzer.cxx` is also fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12442:272,avoid,avoid,272,https://root.cern,https://github.com/root-project/root/pull/12442,2,['avoid'],['avoid']
Safety,The external llvm should be built exactly in the same way as internal llvm to avoid troubles and waste time of the experts who do not really care. I'd prefer to conservatively require it and relax the requirement when there is a valid use case for having ROOT working with llvm with exported symbols... This diagnostic is a practical request by 2 expert users of external_llvm (which probably makes it around 99% of the users of that feature) :),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4736#issuecomment-572065154:78,avoid,avoid,78,https://root.cern,https://github.com/root-project/root/pull/4736#issuecomment-572065154,1,['avoid'],['avoid']
Safety,"The failing test seems to trigger some llvm bug:; ```; valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C; ==22765== Memcheck, a memory error detector; ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C; ==22765== . Processing assertSparseSelection.C...; ==22765== Conditional jump or move depends on unin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11252#issuecomment-1250106081:954,detect,detector,954,https://root.cern,https://github.com/root-project/root/pull/11252#issuecomment-1250106081,1,['detect'],['detector']
Safety,"The failure is some timeout issue, unrelated to this PR.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7628#issuecomment-804055888:20,timeout,timeout,20,https://root.cern,https://github.com/root-project/root/pull/7628#issuecomment-804055888,1,['timeout'],['timeout']
Safety,The failures on Ubuntu 24 are very similar to those that led to https://github.com/root-project/root/pull/15415 . My first instinct is that the new global `gConvFactories` is not thread-safe and we are hitting this problem in distrdf as usual,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15788#issuecomment-2158533120:186,safe,safe,186,https://root.cern,https://github.com/root-project/root/pull/15788#issuecomment-2158533120,1,['safe'],['safe']
Safety,The fit tutorials errors is; ```; Processing /build/jenkins/workspace/root-pullrequests-build/root/tutorials/fitsio/FITS_tutorial8.C...; Warning in <TFITSHDU::LoadHDU>: error opening FITS file. Details: could not open the named file; libc++abi.dylib: terminating with uncaught exception of type int; CMake Error at /build/jenkins/workspace/root-pullrequests-build/build/RootTestDriver.cmake:238 (message):; error code: Child aborted; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5099#issuecomment-597148699:425,abort,aborted,425,https://root.cern,https://github.com/root-project/root/pull/5099#issuecomment-597148699,1,['abort'],['aborted']
Safety,"The fix works in my standalone ROOT test. To test the integration with DD4hep and the LHCb detector, the simplest is to add it to the SFT nightlies.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11272#issuecomment-1232170822:91,detect,detector,91,https://root.cern,https://github.com/root-project/root/issues/11272#issuecomment-1232170822,2,['detect'],['detector']
Safety,"The function `RooAbsPdf::expectedEvents(const RooArgSet &)` doesn't have; to be reimplemented in the RooAbsPdf child classes, because it should; always redirect to `RooAbsPdf::expectedEvents(const RooArgSet *)`. In this way, we are also avoiding a virtual function call. The second PR is this commit does some modernization of `RooAddPdf::expectedEvents`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8151:237,avoid,avoiding,237,https://root.cern,https://github.com/root-project/root/pull/8151,1,['avoid'],['avoiding']
Safety,"The git log might be a little confusing (why fix a rule that is unused anyway?) -- Maybe you meant ""Fix class name spelling in class rule [that was detected by a message indicating that the misspelt version was unused]""?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5871#issuecomment-644148818:148,detect,detected,148,https://root.cern,https://github.com/root-project/root/pull/5871#issuecomment-644148818,1,['detect'],['detected']
Safety,The gtest can safely go on in case this test case fails.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2230:14,safe,safely,14,https://root.cern,https://github.com/root-project/root/pull/2230,1,['safe'],['safely']
Safety,"The idea is to catch branch names, which will lead to problems when using the tree with `Draw` or `MakeClass`.; This can either be the member variables (branch names and `b_`branch names) which have to keep the generated code compilable (and ensure it does what it is expected to do). And the variable names should not lead to confusion with formula evaluation in Draw (e.g. branch names which are pure numbers). The tests suggested here are:; - test if branch name is a valid c++ variable name (w/o testing keywords).; - test if branch name begins with ""b_"" (potential problem with MakeClass). on top of that, I also have a [black list](https://github.com/pseyfert/tmva-branch-adder/blob/master/src/blacklist.cpp) of unfortunate branch names: methods of TTrees, which would clash in MakeClass, c++ keywords, variable types, and things TTree::Draw can parse (though I don't see how `TTree::Draw(""cos(x)"")` would clash with `TTree::Draw(""cos"")` if there is a variable named `cos`. Because the function `cos` wouldn't work without argument, and the variable `cos` wouldn't work with argument). I only warn here and don't abort the branch initialisation, not to break third party code (variables with `.` are probably common [e.g. dynamically generated from float](http://lhcb-release-area.web.cern.ch/LHCb-release-area/DOC/davinci/latest_doxygen/d9/d80/_tuple_tool_cone_isolation_8cpp_source.html#l00204) ). Feedback request:; I'm unsure if putting the blacklist into TBranch.cxx is really the best solution to apply here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/185:1119,abort,abort,1119,https://root.cern,https://github.com/root-project/root/pull/185,1,['abort'],['abort']
Safety,"The idea of the RooGenProdProj is that we divide two integral objects; each created with this makeIntgral() function to get the normalized; integral of a product. Therefore, we don't need to normalize the; numerater and denominator integrals themselves. Doing the normalization; would be expensive and it would cancel out anyway. However, if we don't; specify an explicit normalization integral in createIntegral(), the; last-used normalization set might be used to normalize the pdf,; resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed; to an empty set in this case. Note that in RooFit, a nullptr; normalization set and an empty normalization set is not equivalent. The; former implies taking the last-used normalization set, and the latter; means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit; test is implemented to make sure no new numeric integrals pop up in the; reproducer code to that issue. Unfortunately, this change means that there will be again warnings about; missing `RooAddPdf` normalization sets, but this is not a regression; because these warnings only got fixed in the 6.28 development cycle in; https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12010:499,redund,redundant,499,https://root.cern,https://github.com/root-project/root/pull/12010,1,['redund'],['redundant']
Safety,"The implementation of `TPython::Eval()` is fragile, and the funcitonality it provides is redundant. One can always communicate between Python and C++ using variables known to the ROOT interpreter. To make the output-variable-pattern easy to use in `TPython::Exec()`, a new output parameter of type `std::any` is introduced. Closes #12182.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16175:89,redund,redundant,89,https://root.cern,https://github.com/root-project/root/pull/16175,1,['redund'],['redundant']
Safety,The intent of this code seemed to be avoiding a CINT issue. Now cling can handle such constructs. This fixes an issue with runtime_cxxmodules on OSX sdk where even when NDEBUG is defined the assert still checks the identifier.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5336:37,avoid,avoiding,37,https://root.cern,https://github.com/root-project/root/pull/5336,1,['avoid'],['avoiding']
Safety,"The intent was to prevent the creation of sub branch with 2 consecutives dots; and to avoid a dot between the branch name of the collection and the underscore; for name of the index leaf. The major problem of the first try is that the name of the top level branch; was changed from ""t."" to ""t"" making existing code search for the branch by; fullname failing. Fix #7281. This effectively ammends/corrects d225f942b59b5b022cf635a16e90f84cad59819d. Before v6.23; ```; ******************************************************************************; *Tree :tree : treelibrated tree *; *Entries : 10000 : Total = 485042 bytes File Size = 177202 *; * : : Tree compression factor = 2.74 *; ******************************************************************************; *Br 0 :t. : Int_t t._ *; *Entries : 10000 : Total Size= 83464 bytes File Size = 12844 *; *Baskets : 4 : Basket Size= 32000 bytes Compression= 6.25 *; *............................................................................*; *Br 1 :t..fUniqueID : UInt_t fUniqueID[t._] *; *Entries : 10000 : Total Size= 80935 bytes File Size = 12857 *; *Baskets : 4 : Basket Size= 32000 bytes Compression= 6.25 *; *............................................................................*; *Br 2 :t..fBits : UInt_t fBits[t._] *; *Entries : 10000 : Total Size= 80903 bytes File Size = 12879 *; *Baskets : 4 : Basket Size= 32000 bytes Compression= 6.24 *; *............................................................................*; *Br 3 :t..e : Double_t e[t._] *; *Entries : 10000 : Total Size= 121029 bytes File Size = 65937 *; *Baskets : 6 : Basket Size= 32000 bytes Compression= 1.83 *; *............................................................................*; *Br 4 :t..t : Double_t t[t._] *; *Entries : 10000 : Total Size= 121029 bytes File Size = 71633 *; *Baskets : 6 : Basket Size= 32000 bytes Compression= 1.68 *; *............................................................................*; ```; After the first try:; ```; ***",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7843:86,avoid,avoid,86,https://root.cern,https://github.com/root-project/root/pull/7843,1,['avoid'],['avoid']
Safety,"The issue needs to be looked at from the C++ and PyROOT perspective with a programming model in mind. But let me start from the technical answers, which are easier:; 1) The memory taken by the ""entry number custom column"" is one 64 bit integer per slot, so negligible; 2) Correct: Both slot and entry number are available at the TDF level, the difficulty is to percolate them in the actual function in the define/filter. Focussing only on C++, one could think about a ""TDF::EntryNumber"" type. We could detect it if used as first argument of the function passed and pass the entry. Such type will be transparently convertible to a 64-bits integer. As a side note, also the slot could be treated similarly. The issue will be in PyROOT, with filters and defines expressed as strings which are then jitted: these types make sense only if present in the signature of the function. If we go for the custom column solution, we know exactly what to do, we tested heavily all the components involved but we have to choose a name: ""__TDF_iEntry"", ""__Entry"", ""__iEntry"" .; Certainly starting with a ""__slot"" and ""__entry"" could be very attractive since it will provide ; a. The slot and the entry if needed; b. The steps needed for the implementation are already well understood; c. There is very little overhead - custom columns' lambdas are invoked only if the column is actually used; d. Would seamlessly work in PyROOT",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1133#issuecomment-334451301:502,detect,detect,502,https://root.cern,https://github.com/root-project/root/pull/1133#issuecomment-334451301,1,['detect'],['detect']
Safety,"The last commit that touched `roofit/histfactory/test/CMakeLists.txt` was accidentally removing the dependency on RooFitCommon, which needs to be there to avoid linker errors on Windows. Fixes these Windows build errors in the nightlies:; https://lcgapp-services.cern.ch/root-jenkins/job/root-incremental-master/LABEL=windows10,SPEC=default/10959/parsed_console/log_content.html#ERROR1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11394:155,avoid,avoid,155,https://root.cern,https://github.com/root-project/root/pull/11394,1,['avoid'],['avoid']
Safety,"The latest commit reintroduces the `Option_t*` parameter in `TChain::SetEntryList` and adds another possible value for it `""sync""`. With this new option, we can support the usecase described in this PR while still relying on the preexisting default behaviour. The option assumes that there is a 1:1 mapping between the trees in the chain and the sub lists in the entry list. This assumption is verified in two ways:; 1. The number of sub lists is equal to the number of trees in the chain. If not, the following error is thrown; ```; terminate called after throwing an instance of 'std::runtime_error'; what(): In 'TChain::SetEntryList': the number of sub entry lists in the input TEntryList (1) is not equal to the number of files in the chain (2); Aborted (core dumped); ```; 2. That each sub list corresponds to the correct treename, filename at the same index in the chain. If not, the following error is thrown:; ```; terminate called after throwing an instance of 'std::runtime_error'; what(): In 'TChain::SetEntryList': the sub entry list at index 1 doesn't correspond to treename 'entries' and filename 'file_20entries_1.root': it has treename 'entries' and filename 'file_20entries_2.root'; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8660#issuecomment-879923488:750,Abort,Aborted,750,https://root.cern,https://github.com/root-project/root/pull/8660#issuecomment-879923488,2,['Abort'],['Aborted']
Safety,The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11681:73,detect,detection,73,https://root.cern,https://github.com/root-project/root/pull/11681,2,['detect'],['detection']
Safety,"The line. https://root.cern.ch/root/html606/TH1_8cxx_source.html#l00728. is thread ""safe"" because the container used is itself looking the access see:. https://github.com/root-project/root/blob/e0e721efc69b9b106a7b251caa94555ad195d945/core/base/src/TDirectory.cxx#L241. and because gDirectory is thread local. Of course, since TH1::AddDirectoryStatus() is global state, by definition the behavior can be affected by other threads. Humm actually, there *is* a problem. In order that code to really be thread safe `TH1::fgAddDirectory` needs to be an `std::atomic`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6493#issuecomment-700736790:84,safe,safe,84,https://root.cern,https://github.com/root-project/root/pull/6493#issuecomment-700736790,2,['safe'],['safe']
Safety,The link has the solution/work around doing:; ```; CTest starts the test processes via timeout -sSIGSEGV 55s {TEST_COMMAND}); ```; which may also actually work.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15144#issuecomment-2040360135:87,timeout,timeout,87,https://root.cern,https://github.com/root-project/root/issues/15144#issuecomment-2040360135,1,['timeout'],['timeout']
Safety,"The list of cleanups should be thread-safe now (and if it's not, we want to know!). I executed the test and the tutorial in a loop for a while (on a machine with 8 logical cores) and could not see any crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6885:38,safe,safe,38,https://root.cern,https://github.com/root-project/root/pull/6885,1,['safe'],['safe']
Safety,"The logic from RooAbsArg is copied into RooAbsData. This allows to use the hash-map functionality of RooLinkedList; for RooAbsData objects, as the namePtr mechanism allows to track; renaming and therefore avoids false negatives that result in; linear scans of the collection. In turn, this improves significantly the run-time of large workspace; imports (x2 to x4), which were dominated by embeddedData() calls.; This patch is based on the JSON tool use-case, but presumably will; significantly also improve other heavy uses of workspace import, such; as Higgs combination workspaces manipulation workflows. The cost of one additional pointer per RooAbsData object seems a low; price to pay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9684:205,avoid,avoids,205,https://root.cern,https://github.com/root-project/root/pull/9684,1,['avoid'],['avoids']
Safety,"The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class; is removed, including the functions that use it. The information that it; was meant to store is managed by the; `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time; already, setting the `Const` attribute to the `<NormFactor>` tag is; deprecated and it will be ignored. Instead, add; `<ParamSetting Const=""True""> myparam </ParamSetting>`; to your top-level XML's `<Measurement>` entry.; ; This deprecation implied that the constant parameter flag in the; `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid; ambiguity in the future, the possibility to set and retrieve this flag with; `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the; aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have; something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10766:674,avoid,avoid,674,https://root.cern,https://github.com/root-project/root/pull/10766,1,['avoid'],['avoid']
Safety,"The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via; `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/677:95,redund,redundant,95,https://root.cern,https://github.com/root-project/root/pull/677,1,['redund'],['redundant']
Safety,"The model keeps track of field names to avoid creating the same top-level field multiple times. Fix this mechanism under exceptions, so that the used field name is not registered as taken.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14911:40,avoid,avoid,40,https://root.cern,https://github.com/root-project/root/pull/14911,1,['avoid'],['avoid']
Safety,"The new BatchMode was so far very hacky in the way it dealt with constraint terms, there were two places where it tried to consider them but they both failed in different scenarios:. * hack in `RooProdPdf::computeBatch()`, where PDFs with a span of size one in the datamap were ignored (failed if there was only one bin in the dataset because all PDFs were ignored then); * hack in `NormalizationHelpers`, where constrained RooProdPdfs were assumed to have only one factor that is a constraint. This was only the case in HistFactory and failed in other cases, like in `stressRooStats` and the `ATALS` Higgs combination fit. The new implementation in this PR follows a safer approach: when the constraints are obtained from the RooProdPdf via `getConstraints`, a new option is added to remove the obtained constraints from the RooProdPdf. This way, no other code is required downstream to deal with constraints. This means, to avoid mutating the computation graph, the constraint sum also needs to be extracted **after** the PDF is cloned. All changes in this PR follow from that line of thought and are explained more in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11606:668,safe,safer,668,https://root.cern,https://github.com/root-project/root/pull/11606,2,"['avoid', 'safe']","['avoid', 'safer']"
Safety,"The old PyROOT (pre 2019) had a slightly different `atexit` handler than the new one. The hard shutdown mode is different: `ClearProxiedObjects()` is called before the final `gROOT->EndOfProcessCleanups()`. I had the impresstion that this is redundant, and indeed the old PyROOT didn't do it. This commit suggests to only call `ClearProxiedObjects()` in soft shutdown mode, in an attempt to avoid the frequent crashes seen at the end of PyROOT tutorials, especially on Ubuntu 24.10. See also the original PRs where this functionality was introduced:. * https://github.com/root-project/root/pull/4687; * https://github.com/root-project/root/pull/4753",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16671:242,redund,redundant,242,https://root.cern,https://github.com/root-project/root/pull/16671,2,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"The old test statistic classes also supported enabling the offset; feature after their construction via the `RooAbsReal::enableOffsetting`; hook. This function is now also correctly overloaded in the; `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is; now moved to the base class `RooAbsReal`. This implementation was only; recursively calling `enableOffsetting` for the servers, which did the; job for the old test statistics, which were only combined with; `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,; but on top of them sits another wrapper class, the; `RooFitDriverWrapper`. It should also forward the `enableOffsetting`; calls correctly. The most general solution to this problem is probably; to forward the `enableOffsetting` call for all `RooAbsReal`-derived; classed, up to the point where the recursion ends either at an old or a; new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11668:998,avoid,avoiding,998,https://root.cern,https://github.com/root-project/root/pull/11668,1,['avoid'],['avoiding']
Safety,The only failure is infrastructure related (github timeout). Merging.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2281#issuecomment-402768878:51,timeout,timeout,51,https://root.cern,https://github.com/root-project/root/pull/2281#issuecomment-402768878,1,['timeout'],['timeout']
Safety,"The options `minuit2_omp` and `minuit2_mpi` are dangerous because it means you can only minimize thread-safe functions with Minuit2. If you want Minuit2 with OpenMP or MPI support, it is better to build Minuit2 standalone. Related to #12940.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12970:104,safe,safe,104,https://root.cern,https://github.com/root-project/root/pull/12970,1,['safe'],['safe']
Safety,"The original `HistoToWorkspaceFactory` produced models that consisted of; a Poisson term for each bin. In this ""number counting form"" the; dataset has one row and the collumns corresponded to the number of; events for each bin. This led to severe performance problems in; statistical tools that generated pseudo-experiments and evaluated; likelihood ratio test statistics. Nowadays, everyone uses the faster `HistoToWorkspaceFactoryFast`; implementation that produces a model in the ""standard form"" where the; dataset has one row for each event, and the column corresponds to the; value of the observable in the histogram. Therefore, the original `HistoToWorkspaceFactory` is now removed to; avoid confusion and maintainance burden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10220:692,avoid,avoid,692,https://root.cern,https://github.com/root-project/root/pull/10220,1,['avoid'],['avoid']
Safety,"The patch which I suggested on https://sft.its.cern.ch/jira/browse/ROOT-8056.; If the user uses GREP_OPTIONS which add characters to the output of grep (colors, but also filenames or line numbers), root cannot be started anymore. Ideally users would prefer an alias for `grep` over `GREP_OPTIONS` but the crash can also be avoided on the root side.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/144:323,avoid,avoided,323,https://root.cern,https://github.com/root-project/root/pull/144,1,['avoid'],['avoided']
Safety,"The plugin system is refactored such that one integrator plugin does not necessarily need to be implemented by separate classes. Like this, we can use in the future more general implementations of the integrators for different plugins, e.g., we don't need to implement separate RooIntegrator1D and RooIntegrator2D classes. The `RooIntegratorBinding` is only supposed to be an implementation; detail of the `RooIntegrator2D` and the `RooSegmentedIntegrator2D` to; wrap the integrator for the second dimension. It's better to remove it from the public user interface. It is also; changed such that it takes ownership of the integrator, avoiding the; need for ownership management in the 2D integrator classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13350:634,avoid,avoiding,634,https://root.cern,https://github.com/root-project/root/pull/13350,1,['avoid'],['avoiding']
Safety,"The preprocessor defines enabled by the `march=native` flag are made part of the string of options to be hashed to create the artifact tarball names, therewith avoiding incompatible binaries. Moreover, the special builds preserve their overrides also for nightly builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15839:160,avoid,avoiding,160,https://root.cern,https://github.com/root-project/root/pull/15839,1,['avoid'],['avoiding']
Safety,The problem is actually due to an instability of the detection of the `kIsOnHeap` bit where sometimes the stack has the bit pattern that is used to detect that the memory was allocated by `TObject::operator new`.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12438#issuecomment-1457083430:53,detect,detection,53,https://root.cern,https://github.com/root-project/root/issues/12438#issuecomment-1457083430,2,['detect'],"['detect', 'detection']"
Safety,"The problem is that RDF tries to open the file to check that it's valid. The logic for the file opening is at https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/dataframe/src/RLoopManager.cxx#L1133 . In particular, because of the presence of the `?` token, the string is parsed as a glob. Now in many cases that would be harmless albeit a tiny overhead (it would just return the same file name to open), but in this particular case it triggers a faulty behaviour. The glob parsing attempts at traversing the remote xrootd directory (see [here](https://github.com/root-project/root/blob/962009b8c2057199c2229c3ef9938ac4d315d10a/tree/tree/src/InternalTreeUtils.cxx#L471)), but since the permission is just for the single file with the token and not for the entire directory, it leads to the `user access restricted` error you post above. Now, I believe the most sane course of action would be to refine the logic that checks whether the input file name is a glob. I could simply add a check for the `xrd.wantprot` token, but probably we want to have a more authoritative list of all the tokens that should make the file name not be parsed as a glob. This probably includes not only xrootd tokens but also anything https-related. Or we could adopt a different strategy for glob detection altogether. Thoughts @dpiparo @pcanal ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16475#issuecomment-2365248206:1312,detect,detection,1312,https://root.cern,https://github.com/root-project/root/issues/16475#issuecomment-2365248206,2,['detect'],['detection']
Safety,"The problem is that both shapes are composite, and TGeoCompositeShape does not currently support generating mesh points on segments. If you were to replace the pvPipeBottom with a simple tube the overlap would probably be detected, but of course you cannot do that. So you are hitting the boolean-boolean combination which is worst supported unfortunately by the geometry checker and can miss overlaps.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6556#issuecomment-705445777:222,detect,detected,222,https://root.cern,https://github.com/root-project/root/issues/6556#issuecomment-705445777,2,['detect'],['detected']
Safety,"The pythonizations suggested in this issue have been implemented, so it can be closed. For any further specific RooFit pythonization ideas, please open a new issue or a PR directly. The Pythonization of RooArgLists that I suggested before is not so useful after all, because now that RooArgLists can be replaced by Python lists to begin with it would be redundant to reimplement the list behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7217#issuecomment-1155603383:354,redund,redundant,354,https://root.cern,https://github.com/root-project/root/issues/7217#issuecomment-1155603383,1,['redund'],['redundant']
Safety,"The real case is a bit more convoluted than the example so, if this is a temporary workaround, we'd prefer to wait a little bit more to avoid heavily refactoring the code. ; Unless this is a ""won't fix"" :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7470#issuecomment-849410125:136,avoid,avoid,136,https://root.cern,https://github.com/root-project/root/issues/7470#issuecomment-849410125,1,['avoid'],['avoid']
Safety,"The reason for this split is that Development is not required, hence we; can't rely on it being found to set variables which are usually set even; if only Interpreter (and NOT Development) is found. The if(PythonX_Development_FOUND) condition is kept for what concern the; variables set and used only for the secondary Python version used to; biuld PyROOT, since Development is required for PyROOT. In the info messages related to PyROOT, the condition to be printed now; requires both PythonX_Interpreter_FOUND and PythonX_Development_FOUND,; in order to avoid them to be printed in case Development is found but not Interpreter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5600:556,avoid,avoid,556,https://root.cern,https://github.com/root-project/root/pull/5600,1,['avoid'],['avoid']
Safety,"The remaining problem is that one has to link with `-lgcc` for gcc < 7 or 8. Is this ok, or should the cpu flag detection go into its own microlibrary?. ### Edit:; Looks like a toolchain bug for gcc 5. Easy workaround is to add `-lgcc_s -lgcc` to the link instructions, because the gcc folks didn't get the dependencies right. (It's automatically linking against those, anyway, but the `-lgcc` has to come last.)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6321#issuecomment-688884250:112,detect,detection,112,https://root.cern,https://github.com/root-project/root/pull/6321#issuecomment-688884250,1,['detect'],['detection']
Safety,"The rf503_wspaceread tutorial mus be run after the rf502_wspacewrite; tutorial in the unit tests. This dependency was already defined for the; C++ tutorial tests. The lines added to `tutorials/CMakeLists.txt` in; this commit make the same definitions for the Python tutorials, and also; indicate that the Python tests rf502 and rf503 should be run after the; C++ tests to avoid a race condition on the output file. Failures caused by the dependencies not handled correctly were observed in the ROOT nightlies, and this commit should avoid them in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8491:372,avoid,avoid,372,https://root.cern,https://github.com/root-project/root/pull/8491,2,['avoid'],['avoid']
Safety,"The roottest-python-cmdLineUtils test sometimes fails with error along the line of:; ```; 16/22 Test #1217: roottest-python-cmdLineUtils-SimpleRootrm1CheckOutput .......***Failed 0.86 sec; -- TEST COMMAND --; cd /home/pcanal/root_working/build/master-debug/roottest/python/cmdLineUtils; /usr/bin/timeout -s USR2 270s /home/pcanal/root_working/build/master-debug/bin/rootls -1 victim1.root; -- BEGIN TEST OUTPUT --; dir; hprof; hprof; hpxpy; hpxpy; tof. -- END TEST OUTPUT --; -- BEGIN OUTDIFF OUTPUT --; --- /home/pcanal/root_working/code/root/roottest/python/cmdLineUtils/SimpleRootrm.ref Thu Dec 3 17:25:54 2020; +++ /home/pcanal/root_working/build/master-debug/roottest/python/cmdLineUtils/SimpleRootrm1CheckOutput.log Fri Jan 15 15:57:03 2021; @@ -1,4 +1,6 @@; dir; hprof; +hprof; +hpxpy; hpxpy; tof. -- END OUTDIFF OUTPUT --. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7054:296,timeout,timeout,296,https://root.cern,https://github.com/root-project/root/issues/7054,1,['timeout'],['timeout']
Safety,"The same is done already in `stressRooStats`. Instead of manually propagating the BatchMode flag to all calls of `createNLL()` and `fitTo()`, it is easier and safer to just override the default, because then it can't be forgotten to add it in one of the calls. In particular, this is done now because it will make it much easier the extend the possible `stressRooFit` options to also use the codegen plus AD backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12719:159,safe,safer,159,https://root.cern,https://github.com/root-project/root/pull/12719,1,['safe'],['safer']
Safety,The static vectors look like a thread safety issue in our tests.; std::array avoid memory allocation on every execution in the same way; the static vector does. NB: `#include <array>` is already present in the codegen from `MethodBase.cxx`. WIP: local building and testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3254:38,safe,safety,38,https://root.cern,https://github.com/root-project/root/pull/3254,2,"['avoid', 'safe']","['avoid', 'safety']"
Safety,"The target dependencies only ensure the ordering, which is fine for builds from scratch, but doesn't always cause the PCH to be regenerated in incremental builds. Depending only on the source; or the object file, as in commit 07d25b24, unfortunately creates race conditions on the custom command that generates the source with rootcling. Using both and adding the dictionary files as; dependency in the DEPENDS argument of the custom command that creates the PCH creates dependencies both at the target level to ensure the ordering, but also at the file level to ensure that; the PCH is regenerated when necessary. Hopefully this will avoid the race conditions...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4355:635,avoid,avoid,635,https://root.cern,https://github.com/root-project/root/pull/4355,1,['avoid'],['avoid']
Safety,"The test failure is resolved by avoiding the `oss.str()` check https://github.com/root-project/root/pull/7879#discussion_r653468750, we will apply the same changes here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7749#issuecomment-866125500:32,avoid,avoiding,32,https://root.cern,https://github.com/root-project/root/pull/7749#issuecomment-866125500,1,['avoid'],['avoiding']
Safety,The test hit a timeout (***Timeout 3600.04 sec)... I hope it's not related to this patch.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1352#issuecomment-346394726:15,timeout,timeout,15,https://root.cern,https://github.com/root-project/root/pull/1352#issuecomment-346394726,2,"['Timeout', 'timeout']","['Timeout', 'timeout']"
Safety,"The test should be just removed since the initial reason for having that test is now void. The reason was to have *some way* to check that the packages we thought we had on our CI machines were actually there, since the Jenkins node didn't have any environment management. Now with the github actions CI our environment is more properly managed, at least for Linux. MacOS should get the same treatment at some point, but we can now more safely say ""we know which packages are installed on the CI"" than before.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15286:437,safe,safely,437,https://root.cern,https://github.com/root-project/root/pull/15286,1,['safe'],['safely']
Safety,"The tests that are added in this PR work with Cl, but there are still failures because of this:; * https://github.com/vgvassilev/clad/issues/890. It seems the numeric-diff fallback mode doesn't get that much test coverage in Clad, because many of the issues I opened there are related to it. Is it still supported? Should I try to absolutely avoid num diff fallback in the models?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15491#issuecomment-2107150086:342,avoid,avoid,342,https://root.cern,https://github.com/root-project/root/pull/15491#issuecomment-2107150086,1,['avoid'],['avoid']
Safety,"The tests that failed are all timed out as far as I can tell.; I think it's safe to merge (and if worse comes to worst, it's trivial to revert).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1654#issuecomment-367116753:76,safe,safe,76,https://root.cern,https://github.com/root-project/root/pull/1654#issuecomment-367116753,1,['safe'],['safe']
Safety,"The title mentions Spark, but I think it's more likely that the issue is independent of the backend, right? Can you point me to the code reponsible for detecting friendships and re-creating them in the workers? Maybe I can help",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7584#issuecomment-801976611:152,detect,detecting,152,https://root.cern,https://github.com/root-project/root/issues/7584#issuecomment-801976611,1,['detect'],['detecting']
Safety,"The tutorial is actually using the SPlots class wrong. It is calculating; sWeights for the isolation based on the invariant mass and the isolation; itself. That’s wrong. For sPlots, the control variable should not be in; the set of discriminating variables for the likelihood fit! See; https://arxiv.org/pdf/physics/0402083.pdf. That means when using the SPlot class, you should exclude the isolation; variable from the dataset that you pass. Big thanks to Dongliang for reporting this on the ROOT Forum!. https://root-forum.cern.ch/t/strange-results-in-rs301-splot-c. A second commit applies some other improvements to the tutorial:. * Code modernization. * Don't define number of events in toy data redundantly. * Add also plots of isolation models",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11475:701,redund,redundantly,701,https://root.cern,https://github.com/root-project/root/pull/11475,1,['redund'],['redundantly']
Safety,"The two classes inheriting from RooAbsCollection, namely RooArgList and; RooArgSet are by default non-owning collections. This means they should; not be initialized with temporary objects, otherwise they contain; invalid pointers right after construction. To avoid that this can ever happen, the universal reference mechanism is; used to statically check for temporaries, such that your code doesn't; even compile if you try to construct a RooArgList or RooArgSet from; temporaries. This fixes https://github.com/root-project/root/issues/8052. Some C++ code to validate that the `static_assert` works:; ```C++; #include ""RooRealVar.h""; #include ""RooArgList.h""; #include ""RooArgSet.h""; #include ""RooUniform.h"". void test() {. RooRealVar x(""x"", ""x"", 0, 0, 10);; RooRealVar y(""y"", ""y"", 0, 0, 10);. RooUniform u1(""u1"", ""u1"", x);; RooUniform u2(""u2"", ""u2"", y);. // this should work; RooArgSet (u1, u2);; RooArgList(u1, u2);. // all of these combinations should cause compiler errors; ///RooArgSet (RooUniform(""u1"", ""u1"", x), u2 );; //RooArgSet (u1, RooUniform(""u2"", ""u2"", y));; //RooArgSet (RooUniform(""u1"", ""u1"", x), RooUniform(""u2"", ""u2"", y));; //RooArgList(RooUniform(""u1"", ""u1"", x), u2 );; //RooArgList(u1, RooUniform(""u2"", ""u2"", y));; //RooArgList(RooUniform(""u1"", ""u1"", x), RooUniform(""u2"", ""u2"", y));. }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8065:259,avoid,avoid,259,https://root.cern,https://github.com/root-project/root/pull/8065,1,['avoid'],['avoid']
Safety,"The unused parameter warnings would be fixed with this PR: https://github.com/zeromq/libzmq/pull/4211. The dtor-name warnings are fixed in a later ZeroMQ version. I first want to include the RooFitZMQ and MultiProcess things before I start changing the ZeroMQ version, to avoid introducing potential errors already (didn't try it yet). If a newer version doesn't work, I will suppress the warnings for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385#issuecomment-858556647:272,avoid,avoid,272,https://root.cern,https://github.com/root-project/root/pull/8385#issuecomment-858556647,1,['avoid'],['avoid']
Safety,"The use case is that in ATLAS experiment we use JSROOT for display of detector monitoring plots, which include things like efficiency plots that exist as TProfile or TProfile2D. It would be nice to have a way in JSROOT to view the denominator distribution for such a plot, which is obtained from the ProjectionX or ProjectionXY method with the ""B"" option. . I think this is about visualization in JSROOT. If we had a C++ or python prompt we know what we need to do to view the projection. I just want to have a way to do that just with a JSROOT draw option",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15851#issuecomment-2173165268:70,detect,detector,70,https://root.cern,https://github.com/root-project/root/issues/15851#issuecomment-2173165268,1,['detect'],['detector']
Safety,"The user could modify the content of the original TFile, which holds a portion of the data in the TTree, i.e. https://gist.github.com/vepadulano/ed0644351771d97ff2624f0ddf015b83. I get the output; ```; Fill: Switching to new file: tree_setmaxsize_seq_1.root; Fill: Switching to new file: tree_setmaxsize_seq_2.root; Entries in tree: Error in <TFile::ReadBuffer>: error reading all requested bytes from file tree_setmaxsize_seq_2.root, got 270 of 300; Error in <TFile::Init>: tree_setmaxsize_seq_2.root failed to read the file type data.; 15966; ```. Maybe it's just something that we leave to the thoughtful user to avoid?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6528#issuecomment-702258885:616,avoid,avoid,616,https://root.cern,https://github.com/root-project/root/pull/6528#issuecomment-702258885,1,['avoid'],['avoid']
Safety,"The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:; ```; $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'; $: grep openat log.txt | wc -l; $: 16279; ```. After:; ```; $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'; $: grep openat log.txt | wc -l; $: 417 ; ```. FYI @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14276:576,avoid,avoided,576,https://root.cern,https://github.com/root-project/root/pull/14276,1,['avoid'],['avoided']
Safety,"The version if the tree is saved to a file works as expected.; ```C++; #include ""TTree.h""; #include ""TRandom.h"". TFile *f = nullptr;; TTree *t = nullptr;. void tree(const char *fname = ""file.root""); {; const Int_t kMax = 10;; Int_t n;; Float_t a[kMax];. SafeDelete(t); SafeDelete(f);; if (fname) f = new TFile(fname, ""recreate"");; // else in memory; t = new TTree(""t"", ""tree"");; t->Branch(""n"", &n, ""n/I"");; t->Branch(""a"", a, ""a[n]/F"");. for (Int_t i = 0; i < 5; i++) {; n = gRandom->Rndm()*(kMax-1);; for (Int_t j = 0; j < n; j++); a[j] = gRandom->Gaus(0, 1);; t->Fill();; }; if (f) {; t->Write();; SafeDelete(t); SafeDelete(f);; f = new TFile(fname);; t = (TTree*)f->Get(""t"");; }; // t->Draw(""a[0]"");; }; ```; ```; $ root; root [0] .L tree.C; root [1] tree(); t->Draw(""a[0]"");; Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; root [2] tree(); t->Draw(""a[0]"");; root [3] tree(); t->Draw(""a[0]"");; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16730#issuecomment-2432808458:254,Safe,SafeDelete,254,https://root.cern,https://github.com/root-project/root/issues/16730#issuecomment-2432808458,4,['Safe'],['SafeDelete']
Safety,"The warnings were raised by TThreadExecutor trying to be smart when chunking, overriding user specified number of chunks to avoid accessing uninitialized positions of the results vector. This is annoying f.e. when Fitting, with several calls to Map() with the same ""conflictive when chunking"" data.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1028:124,avoid,avoid,124,https://root.cern,https://github.com/root-project/root/pull/1028,1,['avoid'],['avoid']
Safety,Then the executable does not work:; ```; % outputs/bin/zevis.exe ; dyld: Library not loaded: @rpath/libZevLib.dylib; Referenced from: /Users/couet/git/zevis-build/outputs/bin/zevis.exe; Reason: image not found; zsh: abort outputs/bin/zevis.exe; ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6344#issuecomment-693379514:216,abort,abort,216,https://root.cern,https://github.com/root-project/root/issues/6344#issuecomment-693379514,1,['abort'],['abort']
Safety,"Theoretically, cppyy could detect if one of those macros is defined and complain it should be included first. This would be a better way we can ensure consistency. Sorry I came up with this on a second iteration...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5037#issuecomment-588347924:27,detect,detect,27,https://root.cern,https://github.com/root-project/root/pull/5037#issuecomment-588347924,1,['detect'],['detect']
Safety,"There are circular dependencies, which are detected on some build platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3470:43,detect,detected,43,https://root.cern,https://github.com/root-project/root/pull/3470,1,['detect'],['detected']
Safety,"There are several methods in TSystem, which returns `char *` as return value, which has to be deleted. These are:; * `ExapndPathName()`; * `DirName()` (Windows only, actually a bug); * `Which()`; * `ConcatFileName()`. There are many places in ROOT which does not do it correctly, making memory leaks.; I tried to fixed all these bugs - still open PRs are #4853, #4854, #4861, #4862, #4863 . Idea to modernize TSystem interface, providing thread-safe alternatives to all mentioned methods.; Means return TString instead of `char *` or `const char *`.; Keep old methods for a while, but replace in ROOT code to new one.; Later old methods should be declared as deprecated. This PR introduces `TString TSystem::GetDirName(const char *)` as replacement of `const char * TSystem::DirName(const char *)`. Solving Windows issue, which has memory leak. Replaces all places where DirName used by GetDirName - in most cases TString used anyway as storage for return value. . Also using more C++11 in declaration of TSystem classes. If we agreed on this approach, next methods can be refactored in same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4874:445,safe,safe,445,https://root.cern,https://github.com/root-project/root/pull/4874,1,['safe'],['safe']
Safety,There is 3 tasks still needed to complete this work:. * Migrate flushing from TObject::Write to *::Merger; * Investigate cost of false sharing of atomic in TIsAProxy.; * Resolve thread-unsafe updating of fMother (pre-existing).; * Document or change the atomic vs lock of TBufferMerge::GetBuffered. They will be address in subsequent PRs.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286#issuecomment-789324747:185,unsafe,unsafe,185,https://root.cern,https://github.com/root-project/root/pull/7286#issuecomment-789324747,1,['unsafe'],['unsafe']
Safety,"There is a dependency problem between the RooFit packages that will; start to annoy us soon. Right now, RooFitHS3 depends on both RooFitCore,; RooFit, and RooStats. But to really have nice interfaces for the JSON IO that can be used from; the workspace directly (like `ws.writeToFile(""ws.json"")`), RooFitHS3; needs to be merged with RooFitCore at some point. As of now, this would not work, because then there would be a circular; dependency between RooStats and RooFitCore. This can be avoided by moving the `RooStats::ModelConfig` class from; RooStats to RooFitCore, avoiding the dependency of RooFitHS3 on; RooStats. Some arguments to make for this case:. * The ModelConfig is strongly connected to the RooWorkspace, because; people often use it to save model ""metadata"" in the workspace. * RooFit is often said to be for ""model building"" and RooStats for; statisitcal procedures. Specifying model details in the; configuration object is part of model building. * Also HistFactory depends on RooStats, but only for the ModelConfig; and the Asimov dataset generation. By moving the ModelConfig to; RooFit, we are also half way done avoiding the dependency of; HistFactory on RooStats. * The only thing that people use from RooStats is often only the; ModelConfig anyway, because it lets them specify analysis details in; the workspace, and then the analysis is done with other frameworks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12578:487,avoid,avoided,487,https://root.cern,https://github.com/root-project/root/pull/12578,3,['avoid'],"['avoided', 'avoiding']"
Safety,"There is an infinite loop in; `PyROOT::TMemoryRegulator::ClearProxiedObjects()`:. ```C++; while (!fObjectMap.empty()) {; auto elem = fObjectMap.begin();; auto cppobj = elem->first;; auto klassid = elem->second;; auto pyclass = CreateScopeProxy(klassid);; auto pyobj = (CPPInstance *)MemoryRegulator::RetrievePyObject(cppobj, pyclass);. if (pyobj && (pyobj->fFlags & CPPInstance::kIsOwner)) {; ...; } else {; // Non-owning proxy, just unregister to clean tables.; // The proxy deletion by Python will have no effect on C++, so all good; MemoryRegulator::UnregisterPyObject(pyobj, pyclass);; }; }; ```. In the second code branch, the object is not removed from the `fObjMap`,; if `UnregisterPyObject` doesn't call the unregister hook because it; quits early. This can happen if there is not C++ object corresponding to; the regulated python object, causing an infinite loop because; `fObjectMap` never gets empty. Although this seems like an obvious logic error, this was only noticed; after the cppyy upgrade. Probably the code path was not hit before. Addresses; https://github.com/root-project/root/issues/15085#issuecomment-2031363812. This PR also includes a second refactoring commit to reduce the amount of C++ code in PyROOT. **This could maybe also fix the problem with the distributed RDataFrame test timeouts!**",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15106:1309,timeout,timeouts,1309,https://root.cern,https://github.com/root-project/root/pull/15106,1,['timeout'],['timeouts']
Safety,There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6607#issuecomment-1155497705:28,detect,detect,28,https://root.cern,https://github.com/root-project/root/issues/6607#issuecomment-1155497705,1,['detect'],['detect']
Safety,"There is no issue of exception safety here, it's only a `new` that can work or not. > And move assignment and move construction of unique pointers should be equally cheap, right?. With compiler optimizations yes, but why create unnecessary work?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10263#issuecomment-1081665773:31,safe,safety,31,https://root.cern,https://github.com/root-project/root/pull/10263#issuecomment-1081665773,1,['safe'],['safety']
Safety,"There used to be just one way of resolving an unknown name (eg. MyClass) -- by using the TCling::AutoLoad interface. However, there are two ingredients to resolve a name -- make the name known to the cling and make its library known to the JIT. Historically, these were one function. Later, we implemented performance optimization on top which divides the two steps in order to avoid excessive library loading. Now we have an auto parse step which is designed to avoid the heavy TCling::Autoload. The particular callback calls tryAutoParseInternal which is controlled by fIsAutoParsingSuspended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5756:378,avoid,avoid,378,https://root.cern,https://github.com/root-project/root/pull/5756,2,['avoid'],['avoid']
Safety,"There was a problem in the `IntegralEvaluator` class in the FitUtils.h; in case veccore and vc is used. To evaluate the integral, some input; doubles `x` need to be transferred each of them into a different; `ROOT::Double_v` to call the underlying function. However, the `ROOT::Double_v` can't load just a single double. Calling; the `Load()` function should be done with a pointer to a `double *`; arrary that is large enough to hold as many doubles as the; `ROOT::Double_v` for SIMD instructions. If you use pointers to single doubles anyway, then you get rightly and; out-of-bounds warning. This commits suggests to get gid of this problem by first transferring; the doubles to the beginning of temporary buffers of the right size, and; then passing these buffers to `vecCore::Load()`. Furthermore, I suggest to merge the two code paths of 1D and ND; functions into one. The difference was that the ND path allocated the; `Double_v`s on the heap in a STD vector, and the 1D path used just an; single `Double_v` on the stack, probably for performance reasons. This commit suggests to use the stack also for the ND code path using; stack arrays, so the 1D path would not be a special case anymore. Also, the `<Math/Util.h>` header can not be compiled with CUDA if `vc` is enabled, so there is a second commit in this PR to avoid that.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13772:1324,avoid,avoid,1324,https://root.cern,https://github.com/root-project/root/pull/13772,1,['avoid'],['avoid']
Safety,"There was a segmentation fault in the RooFit batch mode with; multithreading that happened when there were too many threads for the; number of events to be calculated. This caused a `std::size_t` underflow in this line:; ```C++; // roofit/batchcompute/src/RooBatchCompute.cxx; batches.setNEvents(nEvents - idx * batches.getNEvents());; ```; And then the computation tried to access entries that were out of; bounds. This commit adds one more line to reset the number of threads to how; many are needed. Like this we avoid the underflow and also spawing; unnecessary threads. This PR also changes which stressRooFit tests are declared as longtest,; such that the BatchMode tests are also run in the CI and we can avoid; problems like this in the future. Before, the interpreted tests were not declared as longtests, and the; compiled versions were not. This is now flipped, such that the compiled; BatchMode CPU and CUDA tests are also run without `longtest`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10754:516,avoid,avoid,516,https://root.cern,https://github.com/root-project/root/pull/10754,2,['avoid'],['avoid']
Safety,"There was an evil hack in `RooAbsOptTestStatistic`:. ```c++; _dataClone->cacheArgs(this,_cachedNodes,_normSet,!_funcClone->getAttribute(""BinnedLikelihood"")) ;; ```. The final parameter determins if zero weights should be skipped when recalculating the caches. Indeed, for the NLL case, this corresponds to the BinnedLikelihood attrribute being present or not, but it broke the other test statistics for which zero weights should not be skipped at all. This commit suggests a safer way to manage this with a new `RooAbOptTestStatistic::_skipZeroWeights` flag. In particular, this change fixed a bug that got uncovered during a forum discussion:. https://root-forum.cern.ch/t/failing-chi2-fit/56309/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13639:475,safe,safer,475,https://root.cern,https://github.com/root-project/root/pull/13639,1,['safe'],['safer']
Safety,These PR fixes several issues in pymva: . - the scikit-learn methods require some update for new version of scikit-learn; - the disabling of eager execution for model prediction causes an issue on MacOS with the multi-processing. The tests are automatically restarted by the multi-processing. This is now avoided by not disabling eager-execution on MacOS platform. ; - Using .keras file is problematic for MacOS arm. (load_models does not work). Go back using .h5 files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13634:167,predict,prediction,167,https://root.cern,https://github.com/root-project/root/pull/13634,2,"['avoid', 'predict']","['avoided', 'prediction']"
Safety,"These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device; 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:; https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13556:148,Avoid,Avoid,148,https://root.cern,https://github.com/root-project/root/pull/13556,1,['Avoid'],['Avoid']
Safety,These tutorials don't need to create an output root file of the traiining. This avoids potential problem of running the tutorials in parallel and writing on the same file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14125:80,avoid,avoids,80,https://root.cern,https://github.com/root-project/root/pull/14125,1,['avoid'],['avoids']
Safety,"These two libraries do not need to be linked, they can be loaded at runtime when necessary. `ROOTVecOps` in particular forces `libPyROOT.so` to link against Vdt when that is enabled, which we would like to avoid. *Note:* `RVec` pythonization has been recently made lazy in 3017be2d80c160d8726c887fad2ede81c295c27a.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3225:206,avoid,avoid,206,https://root.cern,https://github.com/root-project/root/pull/3225,1,['avoid'],['avoid']
Safety,"These useful tests are relatively short (runtime 28 seconds in total) and test lower-level RooFit functionality. Moving them from roottest to roofit has the following benefits:. * Faster RooFit development experience: it's not necessary anymore to also add and compile all of `roottest`, if you want to make sure locally that the vectorized pdf tests always compile and pass. * The vectorized pdf tests will be able to consider the RooFit-internal preprocessor macros at build time, like `ROOFIT_CUDA` and `ROOFIT_LEGACY_EVAL_BACKEND`. Like this we can ensure that the tests will pass no matter how RooFit was configured at compile time. This is for me personally the strongest reason and was the motivator for this commit. * Avoid code repetition in `root` and `roottest`, because now the vectorized PDF tests will be able to re-use private code from RooFit. * If you want to build standalone RooFit with all tests, you won't have to stitch together the two repositories. Sister PR: https://github.com/root-project/roottest/pull/1199",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16661:726,Avoid,Avoid,726,https://root.cern,https://github.com/root-project/root/pull/16661,1,['Avoid'],['Avoid']
Safety,"They currently trigger segfaults in TClass*/cling of the like:. ```; RAssertion failed: ((*I)->isCompleted() && ""Nested transaction not completed!?""), function endTransaction, file IncrementalParser.cpp, line 511.; *** Break *** abort; Error in <TClingCallFunc::make_dtor_wrapper>: Failed to compile; ==== SOURCE BEGIN ====; __attribute__((used)) extern ""C"" void __dtor_32(void* obj, unsigned long nary, int withFree); {; if (withFree) {; if (!nary) {; delete (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;; }; else {; delete[] (TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &>*) obj;; }; }; else {; typedef TMVA::Experimental::Internal::RBatchGenerator<float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &, float &> Nm;; if (!nary) {; ((Nm*)obj)->~Nm();; }; else {; do {; (((Nm*)obj)+(--nary))->~Nm();; } while (nary);; }; }; ```. ```; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] KeepNParams(clang::QualType&, clang::QualType const&, cling::Interpreter const&, ROOT::TMetaUtils::TNormalizedCtxt const&) /Users/sftnight/build/workspace/root-pullrequests-build/root/core/clingutils/src/TClingUtils.cxx:3926; [/Users/sftnight/build/workspace/root-pullrequests-build/build/lib/libCling.6.29.01.so] RecurseKeepNParams(clang::TemplateArgu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13290:229,abort,abort,229,https://root.cern,https://github.com/root-project/root/pull/13290,1,['abort'],['abort']
Safety,"They do, but they are not at odd. libImt is presently the tool used via TROOT to get the status of the activation of ImplicitMT. That requires the load of libImt and the invocation of a function. This PR made of 1 commit simplifies the mechanism, avoiding to load libImt (and initialise the entire TROOT) in case only the activation status of ImplicitMT is required.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1127#issuecomment-334141079:247,avoid,avoiding,247,https://root.cern,https://github.com/root-project/root/pull/1127#issuecomment-334141079,2,['avoid'],['avoiding']
Safety,"This PR adds a dependency of the Keras tutorial on the PyTorch ones, to avoid a conflict in the same used input file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12367:72,avoid,avoid,72,https://root.cern,https://github.com/root-project/root/pull/12367,1,['avoid'],['avoid']
Safety,"This PR adds a new data source for `RDataFrame` that is able to provide data from SQlite `SELECT` queries. It will be useful for cvmfs, where we have file catalogs and monitoring information in sqlite files. For instance, one can do. auto rdf = ROOT::RDF::MakeSqliteDataFrame(""catalog.sqlite"", ""select * from catalog"");; auto h = rdf.Define(""lname"", ""name.length()"").Histo1D(""lname"");. to show the distribution of file name sizes. There are probably more use cases, for instance sqlite export of conditions data. This is work in progress, I'm posting it for early comments and feedback. My open points are. - Unit and integration tests are yet to be done; - The data source work single-threaded only at the moment. I initially thought it might be enough to return only a single row in `GetEntryRanges()` to make it thread-safe but that's apparently not enough. So I'm now thinking to wrap `SetEntry()` and `GetEntryRanges()` in a mutex.; - The code is not reusing `TSQLiteServer`. It felt like it requires stretching the `TSQLServer` interface in perhaps unwanted ways, for saving only a handful of direct sqlite API calls. On the other hand, with (probably quite a bit) more work it might be possible to have a more general data source that works on any SQL result set.; - Determining column types in SQlite is tricky as it is dynamically typed and in principle each row can have different column types. If a table column is queried as is, I can use the default/declared column type. For expressions, I'll use the type of the first row of the result set. Still it can result in a column to be of type `NULL` where subsequent rows actually have meaningful values. My guess is that the current heuristic is practical enough, and of course the user can formulate the `SELECT` query to avoid ambiguity.; - It would not be impossible to add support for remote reading of sqlite files. To do so, one can add a custom implementation of an sqlite virtual file system to have data pouring in directly from HTT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322:822,safe,safe,822,https://root.cern,https://github.com/root-project/root/pull/2322,1,['safe'],['safe']
Safety,"This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min; - TMath::Gaus; - TMath::BreitWigner; - TMath::CauchyDist; - TMath::LaplaceDist; - TMath::LaplaceDistI. TODO:; - [ ] Refactor the tests to avoid repeated code.; - [ ] Implement remaining functions.; - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/655:344,avoid,avoid,344,https://root.cern,https://github.com/root-project/root/pull/655,1,['avoid'],['avoid']
Safety,"This PR applies several improvements to the RooAddPdf class:. 1. Avoid code duplication of `updateCoefficients()` with RooAddModel; 2. Reduce footprint of cache object by using `std::vector` and avoid creating dummy RooRealVars; 3. Avoid redundant computation of raw coefficient values in BatchMode, which fixes performance problems in important fits like the ATLAS Higgs combination. More details can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11161:65,Avoid,Avoid,65,https://root.cern,https://github.com/root-project/root/pull/11161,4,"['Avoid', 'avoid', 'redund']","['Avoid', 'avoid', 'redundant']"
Safety,This PR avoids all calls to `delete` in HistFactory.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11345:8,avoid,avoids,8,https://root.cern,https://github.com/root-project/root/pull/11345,1,['avoid'],['avoids']
Safety,This PR contains some follow-up changes to https://github.com/root-project/root/pull/8700 and https://github.com/root-project/root/pull/9078:. * avoid using `std::shared_ptr` for return values; * change copyright of roofitcore/TestStatistics to `(c) CERN` (requested by @Axel-Naumann in https://github.com/root-project/root/pull/8700#discussion_r738407080); * I used now the same copyright headers from https://github.com/root-project/root/pull/9078 also for the TestStatistics; * fix a build warning in non-debug mode; * don't install zmq.hpp header from builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9345:145,avoid,avoid,145,https://root.cern,https://github.com/root-project/root/pull/9345,1,['avoid'],['avoid']
Safety,"This PR extends the type templation that was already present in some classes in the GenVector library to improve support for using vectorised (Vc) types. Specifically it :-. 1. Extends the templation to the Plane3D, Transformation3D and Translation3D types.; 2. Where necessary provides specialised methods for the vector types, when the original code was not generic enough to work in both scalar and vector scenarios. Typically this happens in the case of conditionals, where the differences required (booleans versus masks) are difficult to avoid. This PR is not complete, in that there are still some classes in GenVector that still do not support Vc types, as they are still not templated, such as the Rotation like transformations. It would be nice to add this at some point, but the code associated to these is more extensive (3DConversions.cxx for instance) and that will require some work. My changes pass the built in ROOT tests. In addition I have prepared a simple test case for the Vc types (attached) that I have used to check the scalar and vector types give equivalent results. Tested on OS X with the compilation command. clang++ -O3 -mavx2 -mfma `root-config --cflags` -I/Users/chris/Projects/Vc/install/include main.cpp `root-config --libs` -lGenVector /Users/chris/Projects/Vc/install/lib/libVc.a. [main-cpp.txt](https://github.com/root-project/root/files/820450/main-cpp.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/394:544,avoid,avoid,544,https://root.cern,https://github.com/root-project/root/pull/394,1,['avoid'],['avoid']
Safety,This PR fixes a problem found when building and using the R bindings on MacOS. - First we make sure that ROOT is not using the old RConfig.h but ROOT/RConfig.hxx; This avoids a conflict with the R file Rconfig.h; The first commit remove the usage of the old Rconfig.h when generating the dictionary for libCore . - The second commit fixes a conflicting definition of a macro between system macOS and R headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9836:168,avoid,avoids,168,https://root.cern,https://github.com/root-project/root/pull/9836,1,['avoid'],['avoids']
Safety,This PR fixes backports the fix to keep eager execution on macOS to avoid multi-processing issue that gives timeout of tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13807:68,avoid,avoid,68,https://root.cern,https://github.com/root-project/root/pull/13807,2,"['avoid', 'timeout']","['avoid', 'timeout']"
Safety,This PR fixes compiling the code for parsing Keras model when the C-API of Python 2 is used. In this case some functions are not available in Python.h. Those functions are used to parse the convolutional layers from Keras. ; This PR excludes the parsing of this layer and avoid calling those functions available only in Python3. ; Also the tests using the cone layer parsing are disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11950:272,avoid,avoid,272,https://root.cern,https://github.com/root-project/root/pull/11950,1,['avoid'],['avoid']
Safety,"This PR fixes tons of memory leaks in RooFitHS3 by never using manual memory allocation in RooFitHS3. To facilitate this, an overload of `RooAbsArg::addOwnedComponents` was added that takes transfers the ownership via smart pointers (otherwise one would have to use raw owning pointers or `std::unique_ptr<T>::release()` which I want to avoid). If the CI passes, I'll squash the second and third commit and add commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9690:337,avoid,avoid,337,https://root.cern,https://github.com/root-project/root/pull/9690,1,['avoid'],['avoid']
Safety,This PR fixes: ; - stressHistoFit - so not use colour (even black) to keep a nice output log; - TMVA Keras tutorial: use different output file to avoid sporadic failures; - mathmore (GSL) : add a check for correct GSL version (2.3) introducing the new function `gsl_linalg_cholesky_decomp1`. Use the older `gsl_linalg_cholesky_decomp` for the old versions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13047:146,avoid,avoid,146,https://root.cern,https://github.com/root-project/root/pull/13047,1,['avoid'],['avoid']
Safety,"This PR includes the commits of; * PR #833 ; * a fix (dependent on #833) for task-unsafety in TDataFrame's TColumnValue; * PR #828 ; * a patch for task-unsafety in TDataFrame's thread-slot distribution by @dpiparo (commit 2787af2). If we want to push these commits little by little, PR #833 and PR #828 should be merged first, then I can open a third PR with the second (and fourth?) fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/835:82,unsafe,unsafety,82,https://root.cern,https://github.com/root-project/root/pull/835,2,['unsafe'],['unsafety']
Safety,"This PR introduces a great behaviour. We need to think about our tutorials and examples now, e.g. whether somewhere we assumed that by default no MT was enabled :); One big consequence is that users are forced to a paradigm shift: code written for example in Defines/Filters of RDF should be thread safe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2703#issuecomment-425070925:299,safe,safe,299,https://root.cern,https://github.com/root-project/root/pull/2703#issuecomment-425070925,1,['safe'],['safe']
Safety,"This PR introduces the logic necessary in TTreeReader to detect when an entry being read is ""incomplete"" for the following situations:; * When switching to a new tree in the chain, if a branch that was expected to be found is not available; * When doing event matching with TTreeIndex, in case one or more of the friend trees did not match the index value for the current entry. It also introduces new functionality in RDataFrame to allow users to act upon the situations described above:; * `DefaultValueFor(colname, defaultval)`: lets the user provide one default value for the current entry of the input column, in case the value is missing.; * `FilterAvailable(colname)`: works in the same way as the traditional `Filter` operation, where the ""expression"" is ""is the value available?"". If so, the entry is kept, if not, it is discarded.; * `FilterMissing(colname)`: works in the same way as the traditional `Filter` operation, where the ""expression"" is ""is the value missing?"". If so, the entry is kept, if not, it is discarded. The tutorials `df036_missingBranches` and `df037_TTreeEventMatching` show example usage of the new functionalities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641:57,detect,detect,57,https://root.cern,https://github.com/root-project/root/pull/15641,1,['detect'],['detect']
Safety,"This PR is a backport of #9965 (see #9954) for 6.26. Optional, but it would be nice to avoid patching conda-forge root https://github.com/conda-forge/root-feedstock/issues/160.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9999:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/9999,1,['avoid'],['avoid']
Safety,"This PR is the second part of a split and clean-up of #8294, as suggested by @guitargeek. In this PR, we introduce ~three~ two packages: ~RooFit::MultiProcess,~ RooFitZMQ and a ZeroMQ builtin to ease dependency management. ~RooFit::MultiProcess is a task-based parallelization framework.~. ~It uses forked processes for parallelization, as opposed to threads. We chose this approach because A) the existing RooRealMPFE parallelization framework already made use of forks as well, so we had something to build on and B) it was at the time deemed infeasible to check the entire RooFit code for thread-safety. Moreover, we use MultiProcess to parallelize gradients -- i.e. the tasks to be executed in parallel are _partial derivatives_ -- and these are sufficiently large tasks that communication in between tasks is not a big concern in the big fits that we aimed to parallelize.~. Edit: We decided to keep this PR for ZeroMQ only, MultiProcess will come in a next PR. The communication between processes is done using ZeroMQ. The ZeroMQ dependency is wrapped in convenience classes contributed by @roelaaij which here are packaged as RooFitZMQ. ~Note: still working on ""cherry picking"" all changes and organizing them into functionally sensible commits. Will un-draft the PR once this is done.~ Ready for review.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8385:599,safe,safety,599,https://root.cern,https://github.com/root-project/root/pull/8385,1,['safe'],['safety']
Safety,"This PR is the third part of a split and clean-up of #8294, as suggested by @guitargeek. In this PR, we introduce the RooFit::MultiProcess package. RooFit::MultiProcess is a task-based parallelization framework that will be used to parallelize gradients in RooFit/Minuit2 fits. It uses forked processes for parallelization, as opposed to threads. We chose this approach because A) the existing RooRealMPFE parallelization framework already made use of forks as well, so we had something to build on and B) it was at the time deemed infeasible to check the entire RooFit code for thread-safety. Moreover, we use MultiProcess to parallelize gradients -- i.e. the tasks to be executed in parallel are partial derivatives -- and these are sufficiently large tasks that communication in between tasks is not a big concern in the big fits that we aimed to parallelize. The communication between processes is done using ZeroMQ, accessed through convenience functions in RooFitZMQ introduced in #8385. Notes:; - This PR branch is forked off of the branch in #8385, so until that is merged first, I may do some rebasing in this branch, so please be aware of that if you want to check this branch out locally.; - test_Job still fails, it has to be updated to the latest communication framework. With that in mind, this PR is ready for review.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8412:586,safe,safety,586,https://root.cern,https://github.com/root-project/root/pull/8412,1,['safe'],['safety']
Safety,"This PR moves the dictionaries for STL containers required for testing to a separate LinkDef. The rationale behind this is that these dictionaries are not directly related to the `CustomStruct` and once #13904 and #14069 are merged even more (unrelated) dictionary entries would be added, so it would be good to avoid clutter and separate these.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14072:312,avoid,avoid,312,https://root.cern,https://github.com/root-project/root/pull/14072,1,['avoid'],['avoid']
Safety,This PR provides some optimisation for Cuda. In particular: . - optimise update weights/gradient of SGD and ADAM/ ; - We avoid now creating temporary matrices in SGD ; - For ADAM it is more efficient defining three new updates functions which will blenched on the GPU. This also avoid creating temporaries . These changes speed-up by almost a factor of 2 the code in GPU for dense layer when using ADAM and restore the previous performances for SGD. - optimise also computation of convolutional weight gradients. ; In this case we can just simply use the ScaleAdd function. A speed up of ~ 20% is obtained . This PR also adds a commit that remove the computation of correlation matrix in case of large number of variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2502:121,avoid,avoid,121,https://root.cern,https://github.com/root-project/root/pull/2502,2,['avoid'],['avoid']
Safety,"This PR provides the support to add input features as vector data (arrays). This is useful in case of image data (.e.g for Convolutional networks). ; The PR avoid then the creation of input TTreeFormula objects for each single array element which can be very time consume in case of large input data (e,g, > 1000). ; A new function DataLoader::AddVariableArrays has been added to provide the input array name that corresponds to the TTree branch name. Note that TMVA was providing and it continues to provide support for input array data but assuming that each single array element is a different TMVA event. The array is split and for each TTree entry, n (the size of the array) events are created in TMVA. In this particular case one needs to provides all inputs (input features, labels and weights) as array of the same size. This PR mantains this use case, but adds now the possibility to represent the array elements as different columns in the event vector.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4407:157,avoid,avoid,157,https://root.cern,https://github.com/root-project/root/pull/4407,1,['avoid'],['avoid']
Safety,"This PR refactors (or rather, rewrites) `hadd`'s argument parsing code to achieve the following improvements:; - code is simpler to follow, more consistent among different flags and extracted from main; - adding new flags is easier; - allows the familiar syntax of `-j2` in addition to `-j 2`. As a bonus, and for consistency with `-cachesize=`, all flags can now also be passed as `-j=2` (except for `-f` which has a special logic).; - allows passing flags after the positional arguments; - hadd will abort when encountering invalid flag arguments, instead of just printing a message. In the name of code simplification, this PR doesn't attempt to replicate the same exact error-reporting behavior string-by-string as the current version, but the results should ideally be the same. I ran the roottest suite and all tests pass but we might want to add more tests to be sure. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090:502,abort,abort,502,https://root.cern,https://github.com/root-project/root/pull/16090,1,['abort'],['abort']
Safety,"This PR shows the ingredients needed to provide a fix (or more like a workaround) to https://github.com/root-project/root/issues/8505. * A new function `TEntryList::AddSubList` which purpose is specifically of adding a sub list to the main TEntryList. With this we can avoid the logic of `TEntryList::Add` that merges multiple TEntryList referring to the same tree into a global list.; * A slight modification in `TChain::SetEntryList` to grab the sub-TEntryList with the same index as the current sub-tree in the chain. Currently, this is done instead with `GetEntryList(treename, filename, opt)` that will always report the same sub-TEntryList referring to the ""first"" file (because all files of the sublists of the global TEntryList have the same name). The changes are not definitive at all. I wanted to ask your opinion if it's a valid way forward. If so, I will polish the code and prepare it for a real PR. With this commit, the following snippet; ```cpp; int main(){; auto start_1{0};; auto start_2{0};; auto end_1{20};; auto end_2{10};. TEntryList elists;; TEntryList elist1{""e"",""e"",""entries"",""file_20entries_1.root""};; TEntryList elist2{""e"",""e"",""entries"",""file_20entries_1.root""};. for(auto entry = start_1; entry < end_1; entry++){; elist1.Enter(entry);; }. for(auto entry = start_2; entry < end_2; entry++){; elist2.Enter(entry);; }. elists.AddSubList(&elist1);; elists.AddSubList(&elist2);. TChain chain{""entries""};; chain.Add(""file_20entries_1.root"");; chain.Add(""file_20entries_1.root"");. chain.SetEntryList(&elists, ""sync"");. ROOT::RDataFrame df{chain};. std::cout << df.Count().GetValue() << ""\n"";; }; ```; Outputs the correct result:; ```; $: ./tentrylist_emptysource_addsublist ; 30; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8660:269,avoid,avoid,269,https://root.cern,https://github.com/root-project/root/pull/8660,1,['avoid'],['avoid']
Safety,"This PR solves ROOT-8873 ""Reinforce the mechanism to detect non existing branches"". All transformations and actions now throw an exception right when called if at least one of the columns they will work on is not present in the data nor is a custom column (created via `Define`). `test_missingBranches` is expected to start failing -- a PR in roottest will update the reference file.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/775:53,detect,detect,53,https://root.cern,https://github.com/root-project/root/pull/775,1,['detect'],['detect']
Safety,This PR uses clad to calculate the AD-based derivatives for the C/C++ functions wrapped by the RooFuncWrapper class and introduces the 'getGradient' interface to get these derivatives from the generated gradient function. It also replaces a `std::span` templated type with `std::size` to avoid conflicts with system headers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12219:288,avoid,avoid,288,https://root.cern,https://github.com/root-project/root/pull/12219,1,['avoid'],['avoid']
Safety,This Pull request fixes a memory leak reported in https://root-forum.cern.ch/t/gslmultifit-memory-leak-with-root-fitter/49566 when using GSLMultiFit. . In addition for fixing for the leak the handling of the internal transformation function is improved and an extra un-needed clone of the objective function in the Fitter class is avoided.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10439:331,avoid,avoided,331,https://root.cern,https://github.com/root-project/root/pull/10439,1,['avoid'],['avoided']
Safety,This Pull request fixes the correct dependency of some TMVA tutorial and PyMVA tests to avoid that the input data files are written at the same time. The PR contains also a fix for th TMVA_SOFIE_RSofieReader tutorial to handle correctly the model output vector,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12211:88,avoid,avoid,88,https://root.cern,https://github.com/root-project/root/pull/12211,1,['avoid'],['avoid']
Safety,"This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. ; Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. ; The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:; - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling.; - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called.; - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking.; - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10795:852,avoid,avoiding,852,https://root.cern,https://github.com/root-project/root/pull/10795,1,['avoid'],['avoiding']
Safety,This Pull request should fix the tutorial timeout observed in CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12038:42,timeout,timeout,42,https://root.cern,https://github.com/root-project/root/pull/12038,1,['timeout'],['timeout']
Safety,"This adds gdb pretty printers for a few objects such as TString and TNamed, as well; as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`; is set to ROOT's lib directory.; The printers should only be installed during debug builds. A couple of things are still unclear:; - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make.; - Is it correct to use `install(FILES ...)` to install?; - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail; o With old gdbs; o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3633:166,safe,safe-path,166,https://root.cern,https://github.com/root-project/root/pull/3633,1,['safe'],['safe-path']
Safety,This allows to avoid awkward errors due to the absence of moves.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2490:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/2490,1,['avoid'],['avoid']
Safety,"This almost broke me... I've been trying to find for days why ROOT would not build correctly in one particular (fairly complicated) setup for me. I just couldn't figure out why I wouldn't get the files meant for the `etc/` directory in my installation. Turns out that it was because in this weird setup I put the ROOT source code into a directory inside of another CMake project, into a directory that had `/CMakeFiles/` as part of its path. And would you know, macOS still comes with a case insensitive file system, so this exclusion rule was triggering for the full contents of the `etc/` directory in this setup. After realising this, I modified my project's setup to put the ROOT source code into a safer location. But this update should still help people avoid a similar situation later on... P.S. I checked in a simple standalone example that this formalism should do the right thing. (Took me some tries to find ""just the right"" incantation.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1625:703,safe,safer,703,https://root.cern,https://github.com/root-project/root/pull/1625,2,"['avoid', 'safe']","['avoid', 'safer']"
Safety,This avoid compiler warnings with GCC version 12 and later. See also the reasoning in upstream commit: https://github.com/nigels-com/glew/commit/37e614480216ff1485366d97794cd1354ac07337,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15528:5,avoid,avoid,5,https://root.cern,https://github.com/root-project/root/pull/15528,1,['avoid'],['avoid']
Safety,"This avoid loading the library containing the dictionary and avoids leaving the TClass::GetClass(""HepMC::GenVertex"") meta information in an odd state. This should bring the v6.18 behavior unintentionally broken in the refactoring commit c8cce31. This should fix ROOT-10514 completely.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4837:5,avoid,avoid,5,https://root.cern,https://github.com/root-project/root/pull/4837,2,['avoid'],"['avoid', 'avoids']"
Safety,"This avoids an error in the nightlies:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-debian10-i386,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_v7_ntuple_ntpl008_import/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13447:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/13447,1,['avoid'],['avoids']
Safety,This avoids bloating the history with blank space commits.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3790:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/3790,1,['avoid'],['avoids']
Safety,"This avoids compiler warnings on 32bit platforms such as. ```; warning: format ‘%lu’ expects argument of type ‘long unsigned int’, but; argument 2 has type ‘std::vector<std::tuple<int, double, double> >::size_type’; {aka ‘unsigned int’} [-Wformat=]; ```. As seen in PR https://github.com/root-project/root/pull/13243",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13259:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/13259,1,['avoid'],['avoids']
Safety,This avoids problems during ctest like:; ```; 512/838 Test #516: tutorial-multicore-mp001_fillHistos .................................***Failed Error regular expression found in output. Regex=[Error in <] 2.61 sec; Processing /builddir/build/BUILD/root-6.14.06/tutorials/multicore/mp001_fillHistos.C...; SysError in <TFile::TFile>: could not delete myFile_3.root (errno: 2) (No such file or directory); Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (myHisto_3) has not been written.; (int) 0; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3029:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/3029,1,['avoid'],['avoids']
Safety,"This avoids that the first time the NLL is computed, a real calculation is performed and not a cached value is used. The cached value could be computed without subtracting the offset and this could be problematic in case the fcn is offsetting. This fixes #7659. Note that the real changes are only at around line 200, the rest are only extra whitespaces removed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7671:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/7671,1,['avoid'],['avoids']
Safety,"This avoids the following type of warning (obtained when compiling ROOT with -fsanitize=thread). ```; inlined from ‘virtual std::vector<ROOT::Experimental::RNTupleLocator> ROOT::Experimental::Internal::RPageSinkDaos::CommitSealedPageVImpl(std::__ROOT::span<ROOT::Experimental::Internal::RPageStorage::RSealedPageGroup>)’ at /rootproject/rootsrc/tree/ntuple/v7/src/RPageStorageDaos.cxx:417:28:; /usr/include/c++/13/bits/basic_string.h:1079:16: warning: ‘*(const std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)((char*)&locator + offsetof(ROOT::Experimental::RNTupleLocator, ROOT::Experimental::RNTupleLocator::fPosition.std::variant<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_base<long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_assign_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Move_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Copy_ctor_base<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experimental::RNTupleLocatorObject64>::<unnamed>.std::__detail::__variant::_Variant_storage<false, long unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, ROOT::Experiment",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15526:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/15526,1,['avoid'],['avoids']
Safety,"This avoids the following warning when building `rootbench` (gcc 13.2.1):. ```txt; In file included from /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RInterface.hxx:15,; from /home/rembserj/spaces/master/root/src/build/include/ROOT/RDataFrame.hxx:21,; from /home/rembserj/spaces/master/root/src/root/rootbench/root/tree/dataframe/RDataFrameBenchmarks.cxx:1:; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/ActionHelpers.hxx: In instantiation of ‘void ROOT::Internal::RDF::SnapshotHelperMT<ColTypes>::UpdateCArraysPtrs(unsigned int, ColTypes& ..., std::index_sequence<S ...>) [with long unsigned int ...S = {}; ColTypes = {}; std::index_sequence<S ...> = std::integer_sequence<long unsigned int>]’:; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/ActionHelpers.hxx:1747:27: required from ‘void ROOT::Internal::RDF::SnapshotHelperMT<ColTypes>::Exec(unsigned int, ColTypes& ...) [with ColTypes = {}]’; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RAction.hxx:104:19: required from ‘void ROOT::Internal::RDF::RAction<Helper, PrevNode, ColumnTypes_t>::CallExec(unsigned int, Long64_t, ROOT::TypeTraits::TypeList<ColTypes ...>, std::index_sequence<_Ind ...>) [with ColTypes = {}; long unsigned int ...S = {}; Helper = ROOT::Internal::RDF::SnapshotHelperMT<>; PrevNode = ROOT::Detail::RDF::RLoopManager; ColumnTypes_t = ROOT::TypeTraits::TypeList<>; Long64_t = long long int; std::index_sequence<_Ind ...> = std::integer_sequence<long unsigned int>]’; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RAction.hxx:112:18: required from ‘void ROOT::Internal::RDF::RAction<Helper, PrevNode, ColumnTypes_t>::Run(unsigned int, Long64_t) [with Helper = ROOT::Internal::RDF::SnapshotHelperMT<>; PrevNode = ROOT::Detail::RDF::RLoopManager; ColumnTypes_t = ROOT::TypeTraits::TypeList<>; Long64_t = long long int]’; /home/rembserj/spaces/master/root/src/build/include/ROOT/RDF/RAction.hxx:108:9: required from here; /home/rembserj/spaces/master/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14044:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/14044,1,['avoid'],['avoids']
Safety,"This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/15508,1,['avoid'],['avoids']
Safety,"This avoids the remaining uses of the global write lock in typical RDataFrame event loops. There are two parts to this. 1) A bug fix in the hashing of streamer info when opening files. (The hash was including the TKey timestamp and therefore ended up being unique even for files with identical streamer info). 2) Since TTreeProcessorMT can carefully manage its TChains and corresponding TFile and TTree objects, global lists/cleanup and thread safety features can be bypassed or disabled. Together these changes are enough to almost completely eliminate the use of the global write lock in typical event loops. The only remaining using is the calls from ```TFile``` to ```TProcessUUID::AddUUID``` and ```TProcessUUID::RemoveUUID``` There are still several remaining places where the global read lock is taken, and these still have some cost in light of the remaining global write lock usage. These changes have the biggest impact when analyzing a large number of files. A test case is below. Produce the test dataset:; ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();. // make sure that each key has a distinct timestamp to maximally; // provoke different hashes for streamer info in each file; std::this_thread::sleep_for(1100ms);; }. }; ```. Test event loop:; ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9486:5,avoid,avoids,5,https://root.cern,https://github.com/root-project/root/pull/9486,2,"['avoid', 'safe']","['avoids', 'safety']"
Safety,"This behavior is intentional and documented at https://root.cern.ch/doc/master/classTEfficiency.html, see example 1 and 2 for example:; > As the histograms already exist, the new TEfficiency is by default not attached to the current directory to avoid duplication of data.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9189#issuecomment-963387203:246,avoid,avoid,246,https://root.cern,https://github.com/root-project/root/issues/9189#issuecomment-963387203,1,['avoid'],['avoid']
Safety,This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:; * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily; * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available; * Reduce scope of interpreter locks in several places where the lock is taken before necessary; * Add locks where unprotected use of `gInterpreter` is made; * Improve code clarity and performance of `TTree::Fill()`; * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/709:223,avoid,avoid,223,https://root.cern,https://github.com/root-project/root/pull/709,2,"['Avoid', 'avoid']","['Avoid', 'avoid']"
Safety,This change could be quite interesting; a proper solution that avoids the link everywhere could be quite powerful if combined with runtime checks. The biggest issue is probably that ROOT will need to load (and potentially pick?) a pythonlib before loading PyROOT and PyMVA.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396#issuecomment-462739690:63,avoid,avoids,63,https://root.cern,https://github.com/root-project/root/pull/3396#issuecomment-462739690,1,['avoid'],['avoids']
Safety,"This change is done in order to avoid that the pythonizations modules; depend on methods defined in TPython. This commit can be descarded when we will update to CPyCppyy-1.9.7,; since TPython::CPPInstance_FromVoidPtr will become; CPyCppyy::CPPInstance_FromVoidPtr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4643:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/4643,1,['avoid'],['avoid']
Safety,This change is done to avoid using the memory pool for `RooArgSets` in; toy dataset generation workflows.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9257:23,avoid,avoid,23,https://root.cern,https://github.com/root-project/root/pull/9257,1,['avoid'],['avoid']
Safety,This change is to avoid warnings from CMake 3.9.3 and newer on macOS.; See `cmake --help-policy CMP0068` for more information. Fixes [ROOT-9031](https://sft.its.cern.ch/jira/browse/ROOT-9031).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1285:18,avoid,avoid,18,https://root.cern,https://github.com/root-project/root/pull/1285,1,['avoid'],['avoid']
Safety,"This clearly signals ownership transfer and avoids circumventing smart pointer semantics. For more details on passing the vector by value, see also commit c7dac7370d.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16779:44,avoid,avoids,44,https://root.cern,https://github.com/root-project/root/pull/16779,1,['avoid'],['avoids']
Safety,"This commit enables serialization of the Python proxy defined within cppyy to the C++ std::runtime_error class. By doing so, we avoid errors that happen in certain configurations of Dask tasks where a std::runtime_error may be thrown within the event loop itself. Recent CI failures report the following:. ```; RDataFrame::Run: event loop was interrupted; Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it.; Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved; Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved; Error in <TClass::New>: cannot create object of class runtime_error; Error in <TBufferFile::ReadObject>: could not create object of class runtime_error; *** Break *** segmentation violation; ```. This is due to the fact that for some reason the std::runtime_error object is serialized at the end of the function scope within the Dask task. It is important to note that this has only appeared very recently (after October 20th 2023), somehow concurrently on multiple platforms/configurations:. * Alma9 (GCC 11, C++17, Python 3.9, Dask 2023.10) - also tested with Dask 2022.8.1 - 2023.9.3; * Ubuntu22 (GCC11, C++17, Python 3.10, Dask 2023.10); * Ubuntu23.10 (GCC13, C++20, Python 3.11, Dask 2023.10). ~~The reason why have appeared on these platforms and not on others (notably they do not appear in any Jenkins CI run) is unclear.~~Found culprit, see comment below",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13926:128,avoid,avoid,128,https://root.cern,https://github.com/root-project/root/pull/13926,1,['avoid'],['avoid']
Safety,"This commit provides a rewrite of key functions of TGeoParallelWorld, achieving: . (a) faster initialization; (b) faster execution of the Safety function (from ~O(N) to ~O(1)) ; (c) faster or equal execution of FindNode/FindBoundary functions (~log(N)) ; (d) less memory consumption (better memory scalability). The development for this commit was motivated from a use case in ALICE, in which the parallel world ""scene"" can be very large (~100K volumes). In this case, TGeoVoxelFinder takes very long; to construct and consumes a very large amount of memory (GBs). In addition, the evaluation of the Safety function dominates the Geant simulation time. The improvements in this commit are mainly achieved through:. * The use of a boundary volume hierarchy (BVH) as the base acceleration entity, replacing TGeoVoxelFinder.; BVH are the standard in industry/computer-graphics, for what concerns ray-object intersection tasks. The BVH is constructed from axis-aligned bounding boxes and employed in the FindBoundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:138,Safe,Safety,138,https://root.cern,https://github.com/root-project/root/pull/16442,2,['Safe'],['Safety']
Safety,"This commit provides an (optional) optimization to reduce the cost of safety evaluations associated with TGeoParallelWorld. The approach consists in the introduction of additional cache-state in TGeoNavigator. This state remembers the last location for which TGeoParallelWorld::Safety was evaluated, together with the corresponding value returned. Since TGeoNavigator follows the evolution of tracks step-by-step, we have some sort of history-locality. This means that the cache-state has a high-probability of being relevant for multiple track locations in a row. The optimization proposed here is orthogonal to other improvements. It adds on top of algorithmic improvements within TGeoParallelWorld (bounding volume hierarchies, see separate PR), gaining a few extra percent in speed. By default, the new feature is not enabled by default for backward compatibility. Once fully verified, we can make it the default mode. That said, in ALICE simulations, the caching did not modify stepping behaviour and yielded identical results compared to not doing the caching. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16470:70,safe,safety,70,https://root.cern,https://github.com/root-project/root/pull/16470,2,"['Safe', 'safe']","['Safety', 'safety']"
Safety,"This commit removes some functions from the RooFit data classes:. * `RooAbsData::valid()` (virtual method that was overridden in; RooDataHist but not RooDataSet). * `RooDataHist::valid(std::size_t i)` and `RooDataHist::valid()`. * `RooDataHist::cacheValidEntries()`. The `cacheValidEntries` method was originally intended to be used in; `RooAbsOptTestStatistic` to mask histogram entries out of the variable; range in case of a subrange fit. The reasons why `cacheValidEntries` and; the related `valid()` methods should be removed are:. 1. It is redundant. In a subrange fit, the `RooAbsOptTestStatistic` is; creating a clone of the dataset with the subrange only using; `RooAbsData::reduce()`. So all entries are valid by definition. 2. RooDataHist and RooDataSet have inconistent implementations. For; the RooDataHist, `valid()` tells you ""if bin `i` is considered; valid within the current range definitions of all observables""; (according to the documentation). For the RooDataSet, it always; returns `true`. This inconsistency leaves plenty of room for error. 3. The masking of out-of-range entries unnessecarily increases the; `mutable` state of the RooDataHist, which can cause trouble if one; updates the observable range but then forgets to call; `cacheValidEntries()`. 4. Even the documentation said that `RooDataHist::cacheValidEntries()`; was a ""shortcut function only for RooAbsOptTestStatistic"". Why keep; it if `RooAbsOptTestStatistic` doesn't even use it in a meaningful; way anymore?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9168:546,redund,redundant,546,https://root.cern,https://github.com/root-project/root/pull/9168,1,['redund'],['redundant']
Safety,This does smell like a feature backport (something we generally avoid) - but I understand it's needed to unblock another PR.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10123#issuecomment-1068039432:64,avoid,avoid,64,https://root.cern,https://github.com/root-project/root/pull/10123#issuecomment-1068039432,1,['avoid'],['avoid']
Safety,This extends the previous work on enum thread-safety to encompass; all the ways the enums can be scoped.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/56:46,safe,safety,46,https://root.cern,https://github.com/root-project/root/pull/56,1,['safe'],['safety']
Safety,This fix avoids a crash when an invalid formula expression is given as input.; This ties ROOT-9990,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3472:9,avoid,avoids,9,https://root.cern,https://github.com/root-project/root/pull/3472,1,['avoid'],['avoids']
Safety,"This fixes #11747. As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:; ```; if (fPrimitives); fPrimitives->Clear();; if (fView) {; if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;; fView = nullptr;; }; if (fFrame) {; if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;; fFrame = nullptr;; }; ```; is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the view and the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11763:703,avoid,avoiding,703,https://root.cern,https://github.com/root-project/root/pull/11763,1,['avoid'],['avoiding']
Safety,"This fixes #11747. As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:; ```; if (fPrimitives); fPrimitives->Clear();; if (fView) {; if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;; fView = nullptr;; }; if (fFrame) {; if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;; fFrame = nullptr;; }; ```; is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the view and the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash. Backport of https://github.com/root-project/root/pull/11763",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11849:703,avoid,avoiding,703,https://root.cern,https://github.com/root-project/root/pull/11849,1,['avoid'],['avoiding']
Safety,This fixes ROOT-9147. Also avoid future cases of nullptr dereference,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1572:27,avoid,avoid,27,https://root.cern,https://github.com/root-project/root/pull/1572,1,['avoid'],['avoid']
Safety,"This fixes [ROOT-9322](https://sft.its.cern.ch/jira/browse/ROOT-9322). If a `TTreeReaderValue` is used to read fixed or variable size array, TTreeReader now complains and does not finish construction successfully (rather than successfully construct and read only the first element of the array). When such a (wrongly constructed) `TTreeReaderValue `is used, the following error messages are printed on screen:. ```; Error in <TTreeReaderValueBase::GetBranchDataType()>: Must use TTreeReaderArray to read branch arr: it contains an array or a collection.; Error in <TTreeReaderValueBase::CreateProxy()>: The branch arr contains data of type {UNDETERMINED TYPE}, which does not have a dictionary.; Error in <TTreeReaderValue::Get()>: Value reader not properly initialized, did you remember to call TTreeReader.Set(Next)Entry()?; ```. I could not find a way to avoid the last two `Error`s and still have `TTreeReaderValue::IsValid` return `false`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1842:858,avoid,avoid,858,https://root.cern,https://github.com/root-project/root/pull/1842,1,['avoid'],['avoid']
Safety,"This fixes a thread safety issue in the matrix package [ROOT-9547], but also implements consistently operators +, +=, ==. = for matrix classes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2364:20,safe,safety,20,https://root.cern,https://github.com/root-project/root/pull/2364,1,['safe'],['safety']
Safety,"This fixes and cleans up the Travis runner; most notably, things like modern CMake and clang 5.0 now come by default (since last December). In theory, this should build much faster since several minutes per job was being spent waiting for apt-get to work. This moves the scripts in `.travis` to `.ci/*`. * CMake 3.9 is now installed by default on Travis: https://docs.travis-ci.com/user/build-environment-updates/2017-12-12/; * Clang 5.0 (and clang-format, clang-tidy) are now installed on Travis; * Move extensive setup to .ci/*; * Fix usage of yaml keys; * Avoid if statements by using build matrix entries; * Note clearly that one block of code will not run; * Remove comments about interleaved macOS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1775:559,Avoid,Avoid,559,https://root.cern,https://github.com/root-project/root/pull/1775,1,['Avoid'],['Avoid']
Safety,"This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date.; the file 'C:/Users/sftnight/git/master/CMakeLists.txt'; is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'; result='-1'; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299.; -- Looking for python; -- Preferring Python version 3; -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development; CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args); cmake/modules/SearchRootCoreDeps.cmake:72 (find_package); CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred!; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"".; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"".; CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:; find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows.; Apparently the keyword REQUIRED is not enough to avoid stopping the; compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5002:1374,avoid,avoid,1374,https://root.cern,https://github.com/root-project/root/pull/5002,1,['avoid'],['avoid']
Safety,This fixes the problem described in http://root-forum.cern.ch/t/ttreecache-fillbuffer-error-with-root-6-14-04/30914/1 (And avoid the same error message in another circumstance).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2786:123,avoid,avoid,123,https://root.cern,https://github.com/root-project/root/pull/2786,2,['avoid'],['avoid']
Safety,"This fixes the warning messages observed in RootBench when evaluating a not normalised RooAddPdf; where fixCoefNormalizationSet has been called. This PR should be back ported to 6.24. Now `RooAddPdf::getValV` does not print anymore the warning but avoids that `RooAbsPdf::getValV` set the stored `_normSet` to a null pointer when the passed `nset` is a null pointer. In this case `RooAddPdf` uses the default normalization set for defining the coefficients and evaluating when a normalization set is not passed explicitly , i.e. when calling `RooAddPdf::getVal(nulptr)`. ; This might have the side effect to not use the reference normalization that could have been defined previously using `fixCoefNormalization`. It is not clear if this is a wanted feature, since I don't see cases where one would need to evaluate an unnormalized `RooAddPdf`. Eventually another PR could remove `RooAddPdf::getValV`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8030:248,avoid,avoids,248,https://root.cern,https://github.com/root-project/root/pull/8030,1,['avoid'],['avoids']
Safety,This function is needed for newly introduced sensitive detectors framework; to provide a hook for a central call to fill ROOT trees before resetting data; in sensitive detector's end of event.; It would be nice if it could be still included in 6.18,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3954:55,detect,detectors,55,https://root.cern,https://github.com/root-project/root/pull/3954,2,['detect'],"['detector', 'detectors']"
Safety,"This improves thread safety in RooFit, as inspired by a recent forum; post where someone wanted to do multiple fits in parallel. It was checked that this has no visible impact on performance. Also, a small bugfix and general code improvements in separate commits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16385:21,safe,safety,21,https://root.cern,https://github.com/root-project/root/pull/16385,1,['safe'],['safety']
Safety,"This initialization should be unnecessary, but avoids a warning on some compiler platforms about potentially uninitialized use of the variable. Most other compiler platforms should optimize away the assignment. Fixes an issue reported by @pcanal.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1202:47,avoid,avoids,47,https://root.cern,https://github.com/root-project/root/pull/1202,1,['avoid'],['avoids']
Safety,"This introduces a `SetAutoSave()` function to `TBufferMerger` that lets users choose how often data is merged into the output file. This avoid excessive writing of TTree headers, which are compressed and causes the output thread to do too much work if merges happen at every buffer read from the queue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1052:137,avoid,avoid,137,https://root.cern,https://github.com/root-project/root/pull/1052,1,['avoid'],['avoid']
Safety,"This is a again the same problem which appeared before, see https://github.com/root-project/root/pull/14716; The conflict between std::regexp and pytorch jit. ; Either we can avoid using in pytorch or we somehow try to live with this issue hoping at some point it will be fixed in pytorch.; We don't see in the new CI because pytorch is not installed in the ubuntu nodes. I will add it before retiring the old CI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15211#issuecomment-2051252566:175,avoid,avoid,175,https://root.cern,https://github.com/root-project/root/issues/15211#issuecomment-2051252566,1,['avoid'],['avoid']
Safety,"This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. Related to https://github.com/root-project/root/issues/12319. Link to the previous backport PR:; https://github.com/root-project/root/pull/13044. After merging this PR, the following RooFit commits in ROOT `master` (as of 6276954184) are the ones that are not in `v6-28-00-patches` (as of `8c19761`). ```txt; 9b93dbb7d2 [RF] Apply clang-tidy `performance-faster-string-find`; 04fbc4efb3 [RF] Don't have RooFitCuda as dependency for RooFitCore; cf653869f7 [RF] Don't bar xroofit behind `root7` anymore; e5a67bc647 [RF] More type safety and better memory management with CUDA interface; bbeb520a1a [RF] Implement `RooPower` and `RooExpPoly` in RooBatchCompute; 529ba82432 [RF] RAII management of CUDA events and streams; cc3ee9200a [RF] Only allow automatic memory management for CUDA device arrays; 77299a2c34 [RF] Reduce public headers of `roobatchcompute`; 8b0a768f0c [RF] Refactor CUDA code in RooFit; 853e93a23a [RF] Add new `RooSpline` class contributed by Ruggero Turra; a5ebdc7291 [RF] Add documentation to `RooB*Decay` constructors; e5b7ba0d35 [RF] Make plotting of histograms work for all orders of magnitude; 95816f07c5 [RF] Modernize RooStepFunction and RooParametricStepFunction; 49b7c88181 [RF] Apply clang-tidy `readability-redundant-string-cstr`; bb1b313d7a [RF] Apply clang-tidy `modernize-use-bool-literals`; 52f67f84ec [RF] Apply clang-tidy `modernize-deprecated-headers`; 0fdb1e98ea [RF] Apply clang-tidy `readability-container-size-empty`; e7dfbfb1df [RF] Apply clang-format to RooGlobalFunc.cxx; 8462bb48e9 [RF] Apply clang-tidy modernize-use-nullptr; 4999c486de [RF] Use `RooFit::OwningPtr<T>` for RooAbsData member functions; 742d4018ad [RF] Don't store reference to `RooDataSet` in RooNDKeysPdf; 9b98ed181c [RF] Replace ReooRealAnalytic with `createIntegral` plus RooRealBinding; b3acd81280 [RF] Remove `RooIntegratorBinding` from public interface; e11a5e4d8c [RF] Improve `RooNumInt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13295:623,safe,safety,623,https://root.cern,https://github.com/root-project/root/pull/13295,2,"['redund', 'safe']","['redundant-string-cstr', 'safety']"
Safety,"This is a backward incompatible change that [breaks DD4Hep](http://cdash.cern.ch/upload/2c049c68eb2e49d8ad4eeda23b283bae0d5ffd75/DD4hep-01-10-build.log). Please revert or provide a fix. Relevant part of the log is pasted below:; ```; [ 40%] Building CXX object DDCore/CMakeFiles/DDCorePlugins.dir/src/plugins/DetectorHelperTest.cpp.o; /mnt/build/jenkins/workspace/build/projects/DD4hep-01-10/src/DD4hep/01-10/DDCore/src/gdml/GdmlPlugins.cpp: In function ‘long int gdml_extract(dd4hep::Detector&, int, char**)’:; /mnt/build/jenkins/workspace/build/projects/DD4hep-01-10/src/DD4hep/01-10/DDCore/src/gdml/GdmlPlugins.cpp:178:87: error: no matching function for call to ‘TGDMLWrite::WriteGDMLfile(TGeoManager*, TGeoVolume*, const TString)’; extract.WriteGDMLfile(&description.manager(), vol.ptr(), uri.GetRelativePart()); ^; In file included from /mnt/build/jenkins/workspace/build/projects/DD4hep-01-10/src/DD4hep/01-10/DDCore/src/gdml/GdmlPlugins.cpp:27:; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:75:9: note: candidate: ‘void TGDMLWrite::WriteGDMLfile(TGeoManager*, const char*, TString)’; void WriteGDMLfile(TGeoManager * geomanager, const char* filename = ""test.gdml"", TString option = """"); ^~~~~~~~~~~~~; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:75:9: note: no known conversion for argument 2 from ‘TGeoVolume*’ to ‘const char*’; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:77:9: note: candidate: ‘void TGDMLWrite::WriteGDMLfile(TGeoManager*, TGeoNode*, const char*, TString)’; void WriteGDMLfile(TGeoManager * geomanager, TGeoNode* top_node, const char* filename = ""test.gdml"", TString option = """"); ^~~~~~~~~~~~~; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:77:9: note: no known conversion for argument 2 from ‘TGeoVolume*’ to ‘TGeoNode*’; /build/jenkins/workspace/install/ROOT/HEAD/x86_64-slc6-gcc8-dbg/include/TGDMLWrite.h:156",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4160#issuecomment-519477877:309,Detect,DetectorHelperTest,309,https://root.cern,https://github.com/root-project/root/pull/4160#issuecomment-519477877,2,['Detect'],"['Detector', 'DetectorHelperTest']"
Safety,"This is a follow up of what was investigated for https://github.com/root-project/root/issues/11581. In that ticket, it was detected that for certain types, for example `const char*`, the attribute `value_type` was not set for std::vector classes. This PR aligns with upstream cppyy in terms of setting the `value_type` and `value_size` attributes of a std::vector class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11623:123,detect,detected,123,https://root.cern,https://github.com/root-project/root/pull/11623,1,['detect'],['detected']
Safety,"This is a follow-up on c97ec173ee589ab2. In particular, this will avoid a flood of warnings on Jenkins, i.e. for roottest, where proof is still enabled, like here:; https://github.com/root-project/roottest/pull/1125. To be backported to 6.32, where this `TList` constructor is already deprecated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15489:66,avoid,avoid,66,https://root.cern,https://github.com/root-project/root/pull/15489,1,['avoid'],['avoid']
Safety,"This is a follow-up to https://github.com/root-project/root/pull/12040. The `RooAbsArg::redirectServer()` method is dangerous and should not be used directly. It was for example used wrongly in HistFactory. In the RooAbsAnaConvPdf is was actually used correctly, but it's still better to use `redirectServers()` consistently, which avoids the new warnings you get when using `redirectServer()`. More detail in the commit description. Also includes a commit that irons over RooFit with `clang-tidy`, adding some missing overrides.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12129:332,avoid,avoids,332,https://root.cern,https://github.com/root-project/root/pull/12129,1,['avoid'],['avoids']
Safety,"This is a followup to 5e424e4, where the Python finding was moved into `SearchInstalledSoftware.cmake`. However, what I missed is that there was a check in `RootBuildOptions` that disabled PyROOT by default if Python is not found, which is now not the case at that point! Therefore, ROOT builds won't have PyROOT by default anymore, which is a bad mistake. Fortunately, the check is entirely redundant and this commit suggests to remove it. There is already a check in `SearchInstalledSoftware` where PyROOT (and `tmva-pymva`) are disabled when the Python development headers where not found. Also, this kind of logic to conditionally change the defaults it bad because it doesn't go well with the ""fail on missing"" paradigm (if `fail-on-missing` is enabled).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15471:392,redund,redundant,392,https://root.cern,https://github.com/root-project/root/pull/15471,1,['redund'],['redundant']
Safety,"This is a followup to commit 8679898a. In that commit, the RooPlot was changed to not create an internal clone of the plot variables anymore. However, in rare cases like for the RooUnitTest, it is necessary that the RooPlot owns the plot plot variables to avoid dangling pointers when the RooPlot lives longer than the original plot variables. To support these cases, a new member function; `RooPlot::createInternalPlotVarClone()` is introduced. It can be used to convert the RooPlot to a plot that owns a clone of the plot variable at any point in time of the RooPlot lifetime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11841:256,avoid,avoid,256,https://root.cern,https://github.com/root-project/root/pull/11841,1,['avoid'],['avoid']
Safety,"This is a nice way to avoid having the concept of ""current pad"".",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15822#issuecomment-2162846266:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/15822#issuecomment-2162846266,1,['avoid'],['avoid']
Safety,"This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header; - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch; - [x] Implement the basic outline of the MethodPyTorch Class.; - [x] Implement the DeclareOptions methods.; - [x] Implement ProcessOptions methods.; - [x] Implement SetupTorchModel method.; - [x] Implement train methods. (Done); - [x] Implement simple basic structure for training; - [x] Add ability to load code from users; - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders; - [x] Use default (optional optimizer SGD); - [x] Add savebest model; - [x] Add scheduler; - [x] Implement Validation; - [x] Add model prediction function loading ability; - [x] Implement user code ability; - [x] Implement helper function. ## Tests; - [x] Add testPyTorchClassification.C; - [x] Add generatePyTorchModelClassification.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchMulticlass.C; - [x] Add generatePyTorchModelMulticlass.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchRegression.C; - [x] Add generatePyTorchModelRegression.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added. ## GPU; - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials; These are implemented in #6273. ## Documentation; - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5757:915,predict,prediction,915,https://root.cern,https://github.com/root-project/root/pull/5757,4,['predict'],['prediction']
Safety,"This is a reproducer (segfaults frequently but not always):. ```cpp; #include <ROOT/TTreeProcessorMT.hxx>; #include <TROOT.h>; #include <TTreeReader.h>; #include <TTreeReaderArray.h>. void workload(TTreeReader &r) {; TTreeReaderArray<double> ra(r, ""truthCaloPt"");; while (r.Next()); ra.GetSize();; }. int main() {; ROOT::EnableImplicitMT(2);; ROOT::TTreeProcessorMT mt({""f1.root"", ""f2.root"", ""f3.root"", ""f4.root"", ""f5.root""}, ""t"");; mt.Process(workload);; }; ```. With these files: [files.zip](https://github.com/root-project/root/files/8451196/files.zip). The problem seems to be at the level of TGenCollectionProxy: multiple threads end up sharing the same TGenCollectionProxy objects, which is not thread safe (e.g. because of https://github.com/root-project/root/blob/bce5777b8f479212babb7a8af5485d9a6bbd251e/io/io/src/TEmulatedCollectionProxy.cxx#L84-L85). In principle, however, as we use different TChains/TTreeReaders in each thread, they should also access different TGenCollectionProxy instances. Example backtraces at the point of crash (this is one of several failure modes, but it's the one where the problem is clear -- both threads, at frame 0, are accessing the same TGenCollectionProxy instance):. ```; >>> thread apply all bt 10. Thread 2 (Thread 0x7fffdc0e2640 (LWP 312745) ""repro_ttreeproc""):; #0 0x00007ffff767d973 in TGenCollectionProxy::PopProxy (this=0x7fffd4016090) at ../io/io/src/TGenCollectionProxy.cxx:1333; #1 0x00007ffff7d57a15 in TVirtualCollectionProxy::TPushPop::~TPushPop (this=0x7fffdc0dad20, __in_chrg=<optimized out>) at ../core/cont/inc/TVirtualCollectionProxy.h:65; #2 0x00007ffff76274b1 in TEmulatedCollectionProxy::Destructor (this=0x7fffd4016090, p=0x7fffd40156e0, dtorOnly=false) at ../io/io/src/TEmulatedCollectionProxy.cxx:87; #3 0x00007ffff7d4f8c2 in TClass::Destructor (this=0x7fffd40152c0, obj=0x7fffd40156e0, dtorOnly=false) at ../core/meta/src/TClass.cxx:5417; #4 0x00007ffff676afdb in TBranchElement::ReleaseObject (this=0x7fffd4017590) at ../tree/t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10357:708,safe,safe,708,https://root.cern,https://github.com/root-project/root/issues/10357,1,['safe'],['safe']
Safety,"This is a specialization of iterator::next for vector<bool> that always returns a nullptr and should never be used.; IIUC, this code only exists to avoid compilation errors when compiling I/O code for `vector<bool>`. With this patch we error out rather than silently returning a nullptr.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6891:148,avoid,avoid,148,https://root.cern,https://github.com/root-project/root/pull/6891,1,['avoid'],['avoid']
Safety,"This is actually still buggy and we now have a use case where not having it brings down the storage of some site, due to the excessive number of IOPS per server (50 IOPS, 720 concurrent accesses to 3 storage servers for a total of 0.2PB of data being read). Enabling this would allow us to reduce the IOPS by a factor ~5. The actual error that we get by enabling it is:. ```; [1923904:internal-dpl-aod-reader]: Fatal: fExtraBasket == nullptr && ""fExtraBasket should have been set to nullptr by GetFreshBasket"" violated at line 1679 of `/local/workspace/DailyBuilds/DailyO2Physics-slc9/daily-tags.nRQdop69vk/SOURCES/ROOT/v6-32-06-alice1/v6-32-06-alice1/tree/tree/src/TBranch.cxx'; [1923904:internal-dpl-aod-reader]: aborting; ```. I can provide some file which has the issue, if needed. This becomes rather urgent for us now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8962#issuecomment-2393067291:715,abort,aborting,715,https://root.cern,https://github.com/root-project/root/issues/8962#issuecomment-2393067291,1,['abort'],['aborting']
Safety,"This is already done the same way for many other external projects, like; Clad, etc. Closes https://github.com/root-project/root/issues/8815. Also, refactor some CMake code to avoid code duplication.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16275:176,avoid,avoid,176,https://root.cern,https://github.com/root-project/root/pull/16275,1,['avoid'],['avoid']
Safety,"This is an alternative fix vs. #3360 mentioned on Mattermost; this renames `root/ROOT/RConfig.h` to `root/ROOT/RConfig.hxx` so that on case insensitive filesystems `root/RConfig.h` doesn't end up including itself if a user has the base directory ROOT is installed in before the `root` include in the include path. A file `root/ROOT/RConfig.h` is provided that also points at `root/ROOT/RConfig.hxx` for backward compatibility, and it prints a removal message. Since including `ROOT/RConfig.h` is probably quite rare, this could be dropped. Or it could avoid printing a message because it does no harm. (Even `RConfig.h` probably tends to be included mostly by ROOT). If most/all other includes are `.h`, this might be better for consistency.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3361:552,avoid,avoid,552,https://root.cern,https://github.com/root-project/root/pull/3361,1,['avoid'],['avoid']
Safety,"This is an old branch I had from when I was working on ROOT, but at the time I could not merge it because it required at least CMake 3.12 to work, and we were still requiring only 3.9 at the time. I took the time to rework the commits against the current master yesterday and today, as rebasing was too hard. The original pull request that contained these changes was https://github.com/root-project/root/pull/4299, but the refactoring of core/ was removed. I hope now this would be ok to merge to simplify a bit how libCore is built and avoid having to add include directories by hand to targets that link against libCore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10690:538,avoid,avoid,538,https://root.cern,https://github.com/root-project/root/pull/10690,1,['avoid'],['avoid']
Safety,"This is done make the life of the developer easier when passing `nullptr` to the RooFit message logger. After all, just `nullptr` is much less verbose than the modern C++ code that had to be used so far (`static_cast<TObject*>(nullptr)`). It also often confused new contributors why `nullptr` could not be passed directly. All existing code was updated to not do the explicit casting to `TObject*` anymore. With this, we also avoid a lot of C-style casts in RooFit code. More info in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10546:426,avoid,avoid,426,https://root.cern,https://github.com/root-project/root/pull/10546,1,['avoid'],['avoid']
Safety,"This is done to avoid a compiler warning (or an error for me, as I treated compiler warnings as errors).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8159:16,avoid,avoid,16,https://root.cern,https://github.com/root-project/root/pull/8159,1,['avoid'],['avoid']
Safety,"This is done to avoid this compiler warning that I get when compiling; ROOT with gcc:. ```; core/base/inc/TStorage.h:131:37: warning: declaration of ‘static void TStorage::UpdateIsOnHeap(const volatile UInt_t&, volatile UInt_t&)’ with attribute ‘noinline’ follows inline declaration [-Wattributes]; 131 | R__NEVER_INLINE void TStorage::UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits) {; | ^~~~~~~~; core/base/inc/TStorage.h:91:20: note: previous declaration of ‘static void TStorage::UpdateIsOnHeap(const volatile UInt_t&, volatile UInt_t&)’ here; 91 | static void UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10500:16,avoid,avoid,16,https://root.cern,https://github.com/root-project/root/pull/10500,1,['avoid'],['avoid']
Safety,"This is done to better separate CUDA-specific code from the generic code; in RooBatchCompute. Two problems are addressed in this commit:. 1. The RooBatchCompute library had too many CUDA specific functions. The virtual RooBatchCompute interface should be backend agnostic, but; it had CUDA specific functions like `cudaMalloc()` and `cudaFree()`,; which where only implemented in the CUDA case. So an abstraction; didn't make much sense there. It's better to move the CUDA specifics; to a new `roofitcuda` library. Then, the functions from this library; are used in `batchcompute` and `roofitcore` behind preprocessor; macros when using CUDA. 2. Passing around `cudaStream_t` and `cudaEvent_t`. These types are only; available to `nvcc`, and in case gcc is used, these were forward; declared as stucts. This is a hack that should be avoided. In; particular, it can cause linker errors because the types are not the; same in the CUDA and C++ translation units. The proposed solution is to wrap the `cudaStream_t` and `cudaEvent_t`; pointers into C++ structs that are in the new CUDA support library,; and only when using `nvcc` it is allowed to unwrap these types. 3. Too specific signature of `RooAbsReal::computeBatch()`. This function; should not be too backend specific, but it took the `cudaStream_t`; directly. This parameter is removed. Now, the CUDA stream is stored; in a `RooBatchCompute::Config` struct that is passed around in the; `DataMap`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13409:833,avoid,avoided,833,https://root.cern,https://github.com/root-project/root/pull/13409,1,['avoid'],['avoided']
Safety,"This is great! The detection of names of used branches with regexps has always been a dark corner of RDF. Some time ago @axelnaumann suggested to use cling directly for this purpose, hook into the jitting of the expression itself and react upon ""undeclared variable"" errors, but this seems cleaner. @pcanal TString::Tokenize does not understand c++, here we need to get tokens in the programming language parser sense of the term. I.o.w. the regexp that one would need to pass to Tokenize to properly separate c++ token is way too complex, if it even exists",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3324#issuecomment-457922148:19,detect,detection,19,https://root.cern,https://github.com/root-project/root/pull/3324#issuecomment-457922148,1,['detect'],['detection']
Safety,This is just a quickfix PR to add the header to the library generation (before it worked due to transitive inclusion in `RInterface.hxx`). In a followup PR I will propose a way to automatise this and avoid further cases,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13781:200,avoid,avoid,200,https://root.cern,https://github.com/root-project/root/pull/13781,1,['avoid'],['avoid']
Safety,"This is necessary to avoid ROOT's installed cmake modules to point to the build directory when using builtin GSL, since `$GSL_LIBRARIES` is the full path to `<BINARY_DIR>/lib/libgsl.so` when using builtin GSL.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4050:21,avoid,avoid,21,https://root.cern,https://github.com/root-project/root/pull/4050,1,['avoid'],['avoid']
Safety,"This is needed to fix MacPorts, https://trac.macports.org/ticket/57007, HomeBrew https://github.com/Homebrew/homebrew-core/pull/36585, and any similar system with case insensitivity. `RConfig.h` includes itself instead of `ROOT/RConfig.h`. This prioritizes relative imports for RConfig on most compilers. *Any similar changes should use double-quote imports too* to avoid this ambiguity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3360:366,avoid,avoid,366,https://root.cern,https://github.com/root-project/root/pull/3360,1,['avoid'],['avoid']
Safety,This is needed to fix the distrdf timeouts in our CI also for 6.26 . See the sibling roottest PR,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10251:34,timeout,timeouts,34,https://root.cern,https://github.com/root-project/root/pull/10251,1,['timeout'],['timeouts']
Safety,"This is not much better than using the internals via including private headers, which already got avoided in a previous PR. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14498:98,avoid,avoided,98,https://root.cern,https://github.com/root-project/root/pull/14498,1,['avoid'],['avoided']
Safety,"This is now fixed in ROOT master. Thanks a lot!. ```; ==100870== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==100870== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info; ==100870== Command: root.exe -n -l -b -q; ==100870== Parent PID: 25804; ==100870== ; ==100870== ; ==100870== HEAP SUMMARY:; ==100870== in use at exit: 49,467,260 bytes in 12,108 blocks; ==100870== total heap usage: 106,943 allocs, 94,835 frees, 148,855,407 bytes allocated; ==100870== ; ==100870== LEAK SUMMARY:; ==100870== definitely lost: 0 bytes in 0 blocks; ==100870== indirectly lost: 0 bytes in 0 blocks; ==100870== possibly lost: 0 bytes in 0 blocks; ==100870== still reachable: 49,437,618 bytes in 11,658 blocks; ==100870== of which reachable via heuristic:; ==100870== multipleinheritance: 3,552 bytes in 6 blocks; ==100870== suppressed: 29,642 bytes in 450 blocks; ==100870== Reachable blocks (those to which a pointer was found) are not shown.; ==100870== To see them, rerun with: --leak-check=full --show-leak-kinds=all; ==100870== ; ==100870== For lists of detected and suppressed errors, rerun with: -s; ==100870== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 143 from 72); ```. Should we add a test in roottest for it now that it's clean?. Such as:; https://honeytreelabs.com/posts/memory-checking-unit-tests/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7207#issuecomment-1827477107:1079,detect,detected,1079,https://root.cern,https://github.com/root-project/root/issues/7207#issuecomment-1827477107,1,['detect'],['detected']
Safety,"This is obviously not expected:; 1. If it is incompatible, it should detect this when CMake runs; 2. If if is known to be incompatible, it should be mentioned in the documenation. Compare https://root.cern/install/build_from_source/#all-build-options; > builtin_cling | Build bundled copy of Cling. Only build with an external cling if you know what you are doing: associating ROOT commits with cling commits is tricky. > builtin_clang | Build bundled copy of Clang",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11146#issuecomment-1208043364:69,detect,detect,69,https://root.cern,https://github.com/root-project/root/issues/11146#issuecomment-1208043364,1,['detect'],['detect']
Safety,This is part of the effort of making memory management in RooFit more; automatic and safer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11114:85,safe,safer,85,https://root.cern,https://github.com/root-project/root/pull/11114,1,['safe'],['safer']
Safety,"This is presumbaly a bit controversial. safeDeleteList remove elements in order in a RooAbsCollection,; starting with the ones that only have clients and no servers. This is a slow process, and takes 25% of CPU time on large workspace; manipulation workflows, as it takes place at each workspace::import; call. It can also lead to slow ~RooWorkspace. The point is, I don't think this logic is needed at all.; ~RooAbsArg takes care of properly breaking all the client-server links,; both uplinks and downlinks, for every object. I couldn't find a logical; case where a crash would occur if the safeDeleteList logic were to be; removed. All RooFit tests pass after this patch. No problem for my heavy; workspace manipulation worflows either.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9685:40,safe,safeDeleteList,40,https://root.cern,https://github.com/root-project/root/pull/9685,2,['safe'],['safeDeleteList']
Safety,"This is quite a common C++ idiom, and IMO this warning is too aggressive. However, I fixed the code in [5168f56](https://github.com/artem-ogre/CDT/commit/5168f567422461b39f6ed6a8ba53c17b3c6f3627). Also FYI you might consider using something like `isystem` flag to avoid fighting with warnings in third-party libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14036#issuecomment-1808268923:264,avoid,avoid,264,https://root.cern,https://github.com/root-project/root/pull/14036#issuecomment-1808268923,1,['avoid'],['avoid']
Safety,This is related-to/necessary-for https://github.com/root-project/root/issues/13511 and https://github.com/root-project/root/issues/11353 . See also https://root-forum.cern.ch/t/aborting-with-std-align-val-t-is-not-implemented-yet-rhel-9-2/55989/1; and https://github.com/root-project/root/issues/14767. See also https://its.cern.ch/jira/browse/ROOT-9448,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14792:177,abort,aborting-with-std-align-val-t-is-not-implemented-yet-rhel-,177,https://root.cern,https://github.com/root-project/root/pull/14792,1,['abort'],['aborting-with-std-align-val-t-is-not-implemented-yet-rhel-']
Safety,"This is to avoid any num-diff fallback in RooFit, which results in annoying warnings for the user. A new function `ROOT::Math::digamma` is added to the public interface, which wraps `gsl_sf_psi`. The digamma function is the derivative of `lgamma`, so it is used in `CladDerivator.h` to define the derivatives of `TMath::LnGamma` and the related gamma functions that are used to define Poisson cdfs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16747:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/16747,1,['avoid'],['avoid']
Safety,"This is to avoid compilier warnings, as usual. Commit will also be ported to `wlav/CPyCppyy`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16780:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/16780,1,['avoid'],['avoid']
Safety,"This is to avoid crashes on 32-bit platforms. It's not necessary to use; 64-bit integers anyway, because the return types of the caching codes; were `Int_t` anyway (now just int). And since caches are never part of; IO anyway, it's not important to be platform independent. For the UniqueId, using `unsigned long` is fine too, because the unique; ID is transient and therefore doesn't need to be platform independent.; Any fixed-size choice here caused either problems on either 32- or; 64-bit platforms. This fixes crashes in the nightly builds on Debian 10 32-bit, which was verified on the Debian 10 build node.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10349:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/10349,1,['avoid'],['avoid']
Safety,"This is to avoid having to call `new` and `delete` in the context of; caching in RooFit, as it has lead to memory leaks in the past.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7643:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/7643,1,['avoid'],['avoid']
Safety,This is to avoid having to do hacks with the `RooStringVar`. Closes #9845.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11899:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/11899,1,['avoid'],['avoid']
Safety,"This is to avoid output that doesn't indicate any problem and only makes; the test output harder to interpret. That's how the output of test 27 was before this commit:; ```; [#1] INFO:NumericIntegration -- RooRealIntegral::init(pxyz_Int[z|R]_Norm[x,y,z]_Int[y|R]) using numeric integrator RooIntegrator1D to calculate Int(y); Test 27 : Integration over non-rectangular regions...............OK; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8611:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/8611,1,['avoid'],['avoid']
Safety,"This is to avoid the following warning at configuration time when building ROOT with `cuda` enabled:. ```; CMake Warning (dev) at cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package):; Policy CMP0146 is not set: The FindCUDA module is removed. Run ""cmake; --help-policy CMP0146"" for policy details. Use the cmake_policy command to; set the policy and suppress this warning. Call Stack (most recent call first):; cmake/modules/SearchInstalledSoftware.cmake:1705 (find_package); CMakeLists.txt:347 (include); This warning is for project developers. Use -Wno-dev to suppress it.; ```. Indeed, FindCUDA is deprecated since CMake 3.10:; https://cmake.org/cmake/help/latest/module/FindCUDA.html. The minimum required CMake version by ROOT is 3.16, so it should be no problem to use the suggested new alternative: call the enable_language() command with CUDA. Similar to `enable_language(Fortran)`, this is now done in `CheckCompiler.cmake`. Also, some logic of managing the configuration flags was moved from `SearchInstalledSoftware.cmake` to `RootBuildOptions.cmake` where it belongs. What remains in `SearchInstalledSoftware.cmake` is only the code to find the CuDNN library. Also, since CUDA is now registered as a language in CMake, we can use the official `CMAKE_CUDA_COMPILER` variable in `RootConfiguration.cmake` when invoking nvcc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13437:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/13437,1,['avoid'],['avoid']
Safety,"This is tricky to do because isotopes cannot be added to normal elements (see: TGeoElement::AddIsotope) because one may want to use both standard elements and elements having isotopes in the same geometry. Since the reusing mechanism relies on the element name, the easiest is to rename the elements having isotopes to something non-standard (e.g. HydrogenNat). ; Of course, the definition of such elements as having isotopes can be detected in the parser, forcing the creation of a new element, but then using this element by name would not work (being identical to the standard one). I'm open to suggestions...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9421#issuecomment-1006518038:433,detect,detected,433,https://root.cern,https://github.com/root-project/root/issues/9421#issuecomment-1006518038,1,['detect'],['detected']
Safety,This is workaround to avoid circular dependency between v7primitives; and v7gpad. Detected by cmake on some platforms,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3468:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/3468,2,"['Detect', 'avoid']","['Detected', 'avoid']"
Safety,"This last failure is related to Bulk I/O, not my changes:; ```; -- TEST COMMAND -- ; cd /build/jenkins/workspace/root-pullrequests-build/roottest/scripts; /usr/bin/make utils; -- BEGIN TEST OUTPUT --. -- END TEST OUTPUT --; -- BEGIN TEST ERROR --; --- Using ROOT from /build/jenkins/workspace/root-pullrequests-build/build; make: *** No rule to make target `/build/jenkins/workspace/root-pullrequests-build/build/include/ROOT/TBulkBranchRead.hxx', needed by `/build/jenkins/workspace/root-pullrequests-build/roottest/scripts/recordtiming_cc.so'. Stop. -- END TEST ERROR --; CMake Error at /build/jenkins/workspace/root-pullrequests-build/root/cmake/modules/RootTestDriver.cmake:186 (message):; got exit code 2 but expected 0; ```; I think we can safely merge this now. I guess bulk I/O is not there for 6.16. The PR build probably used the master of roottest from my fork, which is outdated, or something similar to that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3763#issuecomment-489659558:746,safe,safely,746,https://root.cern,https://github.com/root-project/root/pull/3763#issuecomment-489659558,1,['safe'],['safely']
Safety,This makes the code much simpler and avoids using virtual implemetation classes with dubious inheritance chains.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12355:37,avoid,avoids,37,https://root.cern,https://github.com/root-project/root/pull/12355,1,['avoid'],['avoids']
Safety,"This method called from `CPyCppyy::CPPMethod` destructor, but also from assign operator.; Means it is strongly advisable to clear pointers to avoid potential use of destroyed objects.; Also `fConverters` must be cleaned. Indirectly discovered via DeepCode analyzers:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7692:142,avoid,avoid,142,https://root.cern,https://github.com/root-project/root/issues/7692,1,['avoid'],['avoid']
Safety,This mitigates ROOT-10269 by avoiding nested task execution due; to a parallel Snapshot.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4220:29,avoid,avoiding,29,https://root.cern,https://github.com/root-project/root/pull/4220,2,['avoid'],['avoiding']
Safety,This optimizes the ROOT startup for C++ Modules by avoiding deserialization of redundant declarations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2998:51,avoid,avoiding,51,https://root.cern,https://github.com/root-project/root/pull/2998,2,"['avoid', 'redund']","['avoiding', 'redundant']"
Safety,This patch actually loads the modulemap as previously it wrongly detected; it was already loaded.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3695:65,detect,detected,65,https://root.cern,https://github.com/root-project/root/pull/3695,1,['detect'],['detected']
Safety,This patch affords trimming of redundant Jupyter notebook information contained within TCanvas .JSON objects. Specifically this includes the removing the list of TColors which reduces the size of a benchmark notebook (a compiled test notebook of Root Primer graphics) by up to 80% upon preliminary tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/760:31,redund,redundant,31,https://root.cern,https://github.com/root-project/root/pull/760,1,['redund'],['redundant']
Safety,This patch allows TFileMerger to work with externally created TFile-s. Being; able to control the creation of the TFile objects give us a chance to use; in-memory files. This is very helpful in benchmarking when we want to simulate; fast disks or we just want to avoid disk wearout.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073:263,avoid,avoid,263,https://root.cern,https://github.com/root-project/root/pull/1073,1,['avoid'],['avoid']
Safety,"This patch installs python modules to python site-dir standard location (see some doc here:https://docs.python.org/2/library/site.html), see https://sft.its.cern.ch/jira/browse/ROOT-3316. It avoids to have to set PYTHONPATH when installing to a system folder /usr or /usr/local, and even the user site-dir ~/.local. Packaging may have to be reworked though (https://www.debian.org/doc/packaging-manuals/python-policy/ch-python.html#s-paths)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/73:191,avoid,avoids,191,https://root.cern,https://github.com/root-project/root/pull/73,1,['avoid'],['avoids']
Safety,"This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml; input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden; ^; rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and; on the distribution machine. We should probably rely on an environment variable; to turn off this diagnostic selectively and more the reponsibility if something goes; wrong to the distribution team. They should have better knowledge what is safe to; be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4495:1199,safe,safe,1199,https://root.cern,https://github.com/root-project/root/pull/4495,1,['safe'],['safe']
Safety,"This patch is a tentative fix to JIRA bug [ROOT-9907](https://sft.its.cern.ch/jira/browse/ROOT-9907) (TGeoNavigator::FindNextBoundaryAndStep yields nonsensical answers with overlapping volumes). The bug seems to be due to the fact that `/CUVE_1/FAIS_1/PLAQUE_2` fails the `Contains()` check on line 1416, despite the fact that (or because?) the point is exactly on the volume boundary. Therefore, `PLAQUE_2` is not considered **at all** for limiting the current step length, which is unsound. By suppressing the `Contains()` check, we allow `snext` to be set to 0.0, which is a sensible response in this situation. I am not sure whether suppressing this check is entirely reasonable. I perused the source code for a few `TGeoShape`s and I have the impression that `DistFromOutside()` returne `TGeoShape::Big()` if the point happens to be inside the shape, but I could not find any documentation where this post-condition is clearly spelt out. If this is true for any shape, then I would argue that it is safe to omit the `Contains()` check (at worst we will end up with `snext=TGeoShape::Big()`, which is exactly what we had with the check anyway). @agheata, I hope you can take a look at this patch. Perhaps you are also aware of other places in `TGeoNavigator` where it may be wise to apply a similar correction...? Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3291:1004,safe,safe,1004,https://root.cern,https://github.com/root-project/root/pull/3291,1,['safe'],['safe']
Safety,This patch makes it more difficult for people to avoid the 'automatic' memory; ownership done by TMemFile. It forces people to explicitly construct the; data structure describing memory blob and makes it easier to grep for.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3977:49,avoid,avoid,49,https://root.cern,https://github.com/root-project/root/pull/3977,1,['avoid'],['avoid']
Safety,This patch makes the implementation reusable and ready to configure it such; that we can remove the redundant information for modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3687:100,redund,redundant,100,https://root.cern,https://github.com/root-project/root/pull/3687,1,['redund'],['redundant']
Safety,"This patch provides the method TGDMLWrite::WriteGDMLfile allowing to write the gdml corresponding to a volume hierarchy (like a detector). A geometry can be therefore exported in pieces, and the gdml parser was modified to avoid duplication of materials and other components upon reading.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1445:128,detect,detector,128,https://root.cern,https://github.com/root-project/root/pull/1445,2,"['avoid', 'detect']","['avoid', 'detector']"
Safety,"This patch reimplemented signal handling in CMSSW. It avoids async-unsafe functions in signal handler. For reference, see the link https://github.com/bbockelm/cmssw/blob/stacktrace_handler_revisit/FWCore/Services/src/InitRootHandlers.cc. I tried this patch with some simple multi-thread test cases and it worked fine. Is there any complicated test cases I can run? I think this patch is not very ready to merge, but it achieved basic functions. Any criticisms are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/96:54,avoid,avoids,54,https://root.cern,https://github.com/root-project/root/pull/96,2,"['avoid', 'unsafe']","['avoids', 'unsafe']"
Safety,"This patch removes an unnecessary assert, which is probably a left-over from early debugging. Asserts are a way to document certain runtime assumptions that the code makes. They should be only used if the code cannot run correctly if the condition is not fulfilled. This assert here does not serve that purpose. Starting the minimization iteration with an invalid initial state is fine as far as the algorithm is concerned, because it does not make use of that property. Edit: This is not a cosmetic change, because this assert triggers an abort in one of the iminuit tests if the code is compiled in debug mode, while the test runs fine in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6762:540,abort,abort,540,https://root.cern,https://github.com/root-project/root/pull/6762,1,['abort'],['abort']
Safety,"This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/522:464,avoid,avoid,464,https://root.cern,https://github.com/root-project/root/pull/522,1,['avoid'],['avoid']
Safety,This patch teaches cling to detect if the essential libraries have modulemaps and if necessary it adds an overlay around libc and std. This tightens the implementation and makes cling standalone easier to run in -fmodules mode.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4563:28,detect,detect,28,https://root.cern,https://github.com/root-project/root/pull/4563,1,['detect'],['detect']
Safety,"This pattern was/is intentional (see text from ab4359707d324a19a21a1fea7e59a8e07eaf9673).; The idea is to avoid **all** user to pay the price of the lock taking when only the IMT/TTree code is supposed to leverage it. For all other use cases, we support 'only' the case one thread per TFile. To properly support (in a fair way to those not using it) the general case, we would actually need to be much more generic (i.e. a TLockedFile or a switch/parameter to TFile ... in this later view, switching the global test for a more local one may be helpful).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5288#issuecomment-608542244:106,avoid,avoid,106,https://root.cern,https://github.com/root-project/root/pull/5288#issuecomment-608542244,1,['avoid'],['avoid']
Safety,"This problem appears ""only"" in newer OS/compiler (as seen in the original reports leading to #12715) the dependent library are now dlclose'd when the 'main' library is dlclose'd. In the example a cmake generated library is linked against `libHist` and `libHist` is then loaded and unloaded when the example's library is (intentionally) loaded and unloaded. `libHist` happens to share a STL collection's dictionary (`std::vector<TString>`) with `libCore` (and this collection is used for the reading of rootpcm files and thus during the loading of the example's library). . Details:. Unload only the TClass actually generated by the unloaded library. The TGenericClassInfo's destructor now passes the TClass that they actually generated in; addition to the name so that only that TClass is destroyed. This avoid the problem (seen in #12715) where 2 librares (`A` and `B`) have a dictionary for the same; STL collection (this is supported) and we have the following sequence of operation:. 1. load library A; 2. load library B (dictionary registration is ignored as intended); 3. request TClass for STL collection.; 4. unload (dclose) library B; 5. use TClass for STL collection. With the previous code, step 4. would lead to the TClass for STL; collection to be marked as ""unloaded"" even though it library (A); was still actually loaded. Fix reloading of library with a module. Prior to this fix, the in-memory rootpcm loaded as part of the module was removed; from memory on first use and thus if the library was closed and re-opened/loaded; we no longer had the information needed to restore the TClass object corresponding; to that library. This 2 changes fix #12715. The commit [TClassTable: Remove alternate names upon library unloading.](https://github.com/root-project/root/pull/12863/commits/17e8833ec3deb32ca509bf08d31b56f93058d414) fix #12868",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12863:805,avoid,avoid,805,https://root.cern,https://github.com/root-project/root/pull/12863,1,['avoid'],['avoid']
Safety,"This problem was solved by putting the Debian 10 machine to a colder place. The timeouts where caused by CPU throttling because the machine ran to hot. While investigating this issue, I figured out that we could also speed the tests up by using the `-O3` optimization flag (as in `Release` mode). The `RelWithDebInfo` build type that is used in the nightlies implies `-O2`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14306#issuecomment-1886686200:80,timeout,timeouts,80,https://root.cern,https://github.com/root-project/root/issues/14306#issuecomment-1886686200,1,['timeout'],['timeouts']
Safety,"This pull request adds [VecCore](https://gitlab.cern.ch/VecGeom/VecCore) external project and build options to ROOT. Some comments:. Vc is used by VecCore, and since it is not relocatable, it must be built by the VecCore build system in order to avoid the situation in which VecCore finds a broken temporary installed version of Vc in ROOT's `${CMAKE_BINARY_DIR}`. It is perfectly fine to use a builtin VecCore with an externally installed Vc, however. Ideally, though, both should be externally installed. When both are enabled as builtins, they will get installed at the end along with ROOT into the final prefix, with correct configurations. I can not test the build on ARM, please let me know if Jenkins shows any failures. @xvallspl Since you have been using VecCore within ROOT, could you please try this branch out? I did not find any code currently in ROOT that uses VecCore. I've marked this as work in progress to be able to make sure everything is ok prior to merging.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/393:246,avoid,avoid,246,https://root.cern,https://github.com/root-project/root/pull/393,1,['avoid'],['avoid']
Safety,"This pull request adds support for the concatenation of RNTuple pages into 'cages' that are then written to, and read from, DAOS containers as a single value of the key-value object store under the same attribute key, thus the smallest addressable unit. Pages from the same page-group are concatenated in the order they are handled on the DAOS side through vector I/O from the sealed pages' buffers. The name 'cage' is a portmanteau of ""concatenated pages"" and suggests the fact that pages caged together must be read together in DAOS. This change emancipates the DAOS backend from the original, on-disk ntuple page size. The option to concatenate sealed and buffered pages avoids unnecessary throughput constraints caused by the original page size (e.g., the on-disk default, 64KiB, generally leads to lower performance than pages an order of magnitude larger, e.g. 1MiB), particularly if the pattern of data analysis is based on reading back entire page-group ranges at once. On the other hand, this change ties the reader to the new, concatenated sizes; in DAOS key-value stores, it is impossible to read only a part of the value. It is important that the cage size limit be set adequately for the use-case during writing to DAOS. ## Changes or fixes:. - `RNTupleWriteOptions` provides a way to `SetMaxCageSize()` (default: caging enabled with 1 MiB cages), the maximum size a concatenation of pages from the same page-group can achieve.; - `RPageSinkDaos::CommitSealedPageVImpl()` maps pages from the same page-group to the same attribute key, thus concatenating them on the DAOS-side (i.e. relies on scatter-gathered I/O) until the cage limit is reached. The cage sizes can vary due to page compression and the length of page-groups, thus it is calculated and stored to be referenced when reading back.; - `RWOperation` is generalized to allow many IOVs associated with one attribute key in a request, enabling the non-contiguous buffers of sealed pages to be aggregated into a cage under the sam",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11466:674,avoid,avoids,674,https://root.cern,https://github.com/root-project/root/pull/11466,1,['avoid'],['avoids']
Safety,"This pull request improves the support for storage of collections that use `TVirtualCollectionProxy`, which was initially landed in #11525. However, `TVirtualCollectionProxy` allows for traversing a collection using iterators, which should be faster than using `TVirtualCollectionProxy::At()`. Also, this interface avoids (where possible) an additional copy during element insertion. ## Changes or fixes:; - Switches from using `TVirtualCollectionProxy::{Size,At}()` to the use of iterators. After merging this PR, an implementation for the following functions is required instead: `TVirtualCollectionProxy::GetFunctionCreateIterators()`, `GetFunctionNext()`, and `GetFunctionDeleteTwoIterators`. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #11671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12380:315,avoid,avoids,315,https://root.cern,https://github.com/root-project/root/pull/12380,1,['avoid'],['avoids']
Safety,"This pull request is a follow-up of #13197, improving the implementation of the internal class `RCollectionClassField::RCollectionIterableOnce`. ## Changes or fixes:; - Allow for faster iteration of elements in a collection whose elements are guaranteed to be contiguous in memory (e.g. a vector), i.e. the address of each element is known given the base pointer. For such cases, a non-zero value for the `stride` argument can be provided, thus avoiding an indirect call on each `operator++` call.; - Fix and clarify the use of read/write iterators on a proxied collection. The meaning of the `read` argument in many; TVirtualCollectionProxy functions is ""read from disk"", i.e. write in memory. This should improve the situation for the PR introducing support for `std::set<T>` fields (#12948). ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13235:445,avoid,avoiding,445,https://root.cern,https://github.com/root-project/root/pull/13235,1,['avoid'],['avoiding']
Safety,This pull request provides a bug fix:. - fixing wrong safety in TGeoParallelWorld due to double application of coordinate transformation) ; - fix a crash in VoxelFinder when we have only 1 primitive. as well as some optimizations for TGeoPallelWorld usage:. - call TGeoParallelWorld::Safety with existing limit from normal safety to speedup search; - make TGeoPhysicalNode::IsMatchingState faster,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16425:54,safe,safety,54,https://root.cern,https://github.com/root-project/root/pull/16425,3,"['Safe', 'safe']","['Safety', 'safety']"
Safety,"This pull request provides a page allocator that caches previous allocations up to a certain limit. The cache is thread-local and defaults to 16 pages per thread (~1MiB per thread for default-sized pages). This PR is largely based on the concepts in #8634. Reuse of memory allocations in `RPageAllocatorCache` not only reduces calls to the global allocator but also heap fragmentation. The global allocator is thread-safe albeit locked; thus, to also reduce contention, the cache in `RPageAllocatorCache` is thread-local.; Given the small size of the (per-thread) cache, the internal structure is a simple `std::deque`. Anything more complex is not justified at the moment of this writing. . **NOTE:** Performance evaluation (specially for the multi-threaded case) should be inserted here tomorrow. ## Changes or fixes:; - Add `RPageAllocatorCache`: this templated allocator returns pages that have at least the required capacity. `DeletePage()` does not immediately deallocate memory; instead, pages are returned to a thread-local cache, dropping the smallest allocated buffer if the cache is full. If a previous page cannot be recycled, the underlying allocator `AllocT` (`RPageAllocatorHeap` by default) is used to allocate memory.; - Change the signature of `RPageSource::UnsealPage()`: `SealPage()`, the counterpart of `UnsealPage()` takes an RPage and returns an RSealedPage. Make the interface of `UnsealPage()` symmetric and return an RPage.; - Make `UnsealPage()` use `RPageAllocatorCache` by default.; - Remove stray `RPageAllocator{File,Daos}` classes. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR supersedes #8634.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12279:417,safe,safe,417,https://root.cern,https://github.com/root-project/root/pull/12279,1,['safe'],['safe']
Safety,This pull request replaces a variable's type from `size_t` to `uint64_t` to avoid warnings on 32-bit platforms. The variable is the output of a hashing function and undergoes shifting by 32 bits as the seeding step of a hash combination between the two-halves of a 64-bit value. The change has no functional impact. It prevents the following compilation warning in 32-bit systems:. ```; In file included from /path/to/src/RPageStorageDaos.cxx:29:; /path/to/src/tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx: In static member function ‘static ROOT::Experimental::Detail::ntuple_index_t ROOT::Experimental::Detail::RDaosContainerNTupleLocator::Hash(const string&)’:; /path/to/src/tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx:120:43: warning: right shift count >= width of type [-Wshift-count-overflow]; 120 | auto seed = static_cast<uint32_t>(h >> 32);; ```. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12473:76,avoid,avoid,76,https://root.cern,https://github.com/root-project/root/pull/12473,1,['avoid'],['avoid']
Safety,"This pull request:. 1. Closes #12453, where is was reported that weight errors are lost when splitting weighted datasets.; 2. Avoids the associated errors printed when doing the JSON IO of combined RooDataSets (run the unit test `gtest-roofit-hs3-test-testHS3SimultaneousFit` with ROOT master to see them); 3. Avoids the creation of dummy weight variables when constructing RooDataSets in all of RooFit. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12459:126,Avoid,Avoids,126,https://root.cern,https://github.com/root-project/root/pull/12459,2,['Avoid'],['Avoids']
Safety,This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:; - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function.; - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:; - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9158:246,redund,redundant,246,https://root.cern,https://github.com/root-project/root/pull/9158,1,['redund'],['redundant']
Safety,"This pull-request disables the warning `redundant parentheses surrounding declarator [-Wredundant-parens]` for everything except input parsed via `Interpreter::process()` (e.g., for prompt input). ## Changes or fixes:; - `CompilationOptions::IgnorePromptDiags` extended to >1 bit and renamed to `CompilationOptions::IgnoreDiagsMask`. Several values from the `IgnoreDiags` enumeration can be bitwise-OR'd together. The original purpose of `IgnorePromptDiags` now corresponds to the `IgnoreDiags::kPromptBasic` flag.; - `FilteringDiagConsumer` has been extended to handle groups of diagnostics that can be masked via `CompilationOptions::IgnoreDiagsMask`.; - Default ignore diagnostics mask can be (optionally) specified as an argument to `Interpreter::makeDefaultCompilationOpts()`. All interface functions use `IgnoreDiags::kPromptExtended` except `Interpreter::process()`. ## Checklist:; - [X] tested changes locally. This PR fixes [SPI-2064](https://sft.its.cern.ch/jira/browse/SPI-2064).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9695:40,redund,redundant,40,https://root.cern,https://github.com/root-project/root/pull/9695,1,['redund'],['redundant']
Safety,"This requires some changes to the read path of `RColumn`, first to deduplicate the code and then avoid recursive `RColumn::ReadV` which makes the difference on my system between being able to limit test a single `std::vector` element of size 200k.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14390:97,avoid,avoid,97,https://root.cern,https://github.com/root-project/root/pull/14390,1,['avoid'],['avoid']
Safety,"This results in more modular code that is also safer: the `ROOT::Fit::Fitter` has no access to the RooAbsMinimizerFcn anymore, only to the member that is a lightweight adapter. This means the `RooAbsMinimizerFcn` also doesn't get cloned unexpectedly, so we don't need extra checks in the RooMinimizer to account for that!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12348:47,safe,safer,47,https://root.cern,https://github.com/root-project/root/pull/12348,1,['safe'],['safer']
Safety,"This set of improvements to TBufferMerger (and more) was inspired by the terrible performance of the parallel merging (and fast merging in general) in the case where the TTree has a very large number of branches (1000+). Where in the original version a TBufferMerger with a file with 1000+ branches and only 50s and ran with any number of threads would take more than 3m (did not wait until the end) the new version takes 11s with 1 thread, 8s with 6 threads and 22s with 6 thread when increased to 500 events. (using the CMS file ../data//250202_181_RECO.root). This PR includes:. * skipping the boxing/compressing/uncompressing/unboxing cycle if the TBufferMerger is available (not already merging) when the thread is writing its TMemFile. * skipping SetBranchAddress and SetMakeClass in when doing fast cloning (where that information is not used anyway). * Replacing calling to the slow TObjArray::GetEntries (which *counts* the slot used) by calling GetEntriesFast. * Speeding up the GetMother implementation (caching parent's address sooner when reading, use that information in GetMother). * In fast cloning, delay writing the output until the last input is processed (instead of writing the output after each input),. * Optimization of fast cloning handing of empty write basket. It also contains a couple of bug fixes (RNtuple merging forgetting to merge the result of the objects in the file, iofeatures incorrectly cloned). Also made TBufferMerger::GetQueueSize actually thread safe (it is necessary to use it to stop the producer from adding more data if the queue is too full). Also improved TClass::GetBaseClassOffset parallelism (benefit parallel boxing/unboxing) and reduced/removed contention see in the mechanism use to determine the actual object type at run-time (TIsAProxy).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7286:1489,safe,safe,1489,https://root.cern,https://github.com/root-project/root/pull/7286,1,['safe'],['safe']
Safety,"This should be the last crop of fixes needed by ROOT-10216. In brief, the changes are to replace lookup by simpler search to avoid nested; initialization of TClasses (leading to the outer nested initialization; to end using deleted memory). Some explanation of the reasons for and details of the actual changes. With. ```; namespace User {; class TrackerVtxBase; class BeamFlux : public User::TrackerVtxBase; class NTrackerVtx : public User::BeamFlux; }; ```. We had a crash during BuildOld for User::BeamFlux. ```; User::TBaseObject triggers replacement routines.; reaches NTrackerVtx; calls (unnecessary) TStreamerBase::InitStreaming() and BuildOld for BeamFlux; in BuildOld look at base User::TrackerVtxBase (and record pointer value in baseclass); calls Init on the TStreamerElement base; this triggers the creation of the TClass for User::TrackerVtxBase; but BuildOld kept a stale pointer to the old TClass (was baseclass variable).; ```. Solution: replace raw pointer by a TClassRef. TCompInfo::Update did a TClass::GetClass for all type that were not classes :(; Usually it is just a waste of time.; In this case, one such type is User::TContext::Time (an enum) use as part; of User::TContext .. Consequently, before the dictionary TClass for User::TContext was constructed,; another class requested the update of the emulated StreamerInfo for the (still); emulated User::TContext, this in turn provoked the (unnecessary) call to; TClass::GetClass on ‘User::TContext::Time’ which provoked the creation of; the TClass for User::TContext … one of the steps is to absorb the existing; StreamerInfo (including the one being updated) and clear them (i.e. delete; the TCompInfo array) … upon return the result of the TClass::GetClass (a nullptr); is stored in deleted memory. Solution: Don’t call TClass::GetClass on non-type. ```; User::TDatum is loaded; provokes update of a StreamerInfo with a TTrueParticle; *spurrious* InitStreaming provoke need for TTrueParticle TClass; start consuming the TTr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4389:125,avoid,avoid,125,https://root.cern,https://github.com/root-project/root/pull/4389,2,['avoid'],['avoid']
Safety,"This should fix issue #10353. Use a spin lock to protect gInlined. Also, use in-place lamba calls instead of checking at each call if the static was initialized.; In addition to the (slight) performance gain, this make those intialization thread safe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10369:246,safe,safe,246,https://root.cern,https://github.com/root-project/root/pull/10369,1,['safe'],['safe']
Safety,This should reduce the amount of modules we load for namespace lookups at the cost of being more fragile. Improves the memory of hsimple.c from 145864 to 118696 and skips loading of 15 redundant modules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6190:185,redund,redundant,185,https://root.cern,https://github.com/root-project/root/pull/6190,1,['redund'],['redundant']
Safety,"This snippet:; ; ```; #include ""TFile.h""; #include ""TTree.h"". void nested(); {; auto f = new TFile(""nestedclones.root"");; TTree* TopTree = (TTree*)f->Get(""TopTree"");; TopTree->Draw(""Objects.SecondaryVertexArray.TrackIndices.index"");; }; ```. fails with. ```; Warning in <TTreeFormula::DefinedVariable>: TClonesArray object was not retrievable for Objects.SecondaryVertexArray.TrackIndices.index!; Error in <TTreeFormula::Compile>: Bad numerical expression : ""Objects.SecondaryVertexArray.TrackIndices.index""; Info in <TSelectorDraw::AbortProcess>: Variable compilation failed: {Objects.SecondaryVertexArray.TrackIndices.index,}; ```. If I open a TBrowser and then double click on the relevant leaf, it draws ""Empty"" and says:; `Warning in <TSelectorDraw::ProcessFillObject>: Not implemented for TClonesArray`. Funnily, if I then call again from the prompt:; `TopTree->Draw(""Objects.SecondaryVertexArray.TrackIndices.index"");`. then it is drawn correctly and no warning is raised. ![image](https://github.com/root-project/root/assets/10653970/fbfe2dda-8e5f-42eb-94ca-8a51d9ce1de6). So I guess that Axel was suggesting that, once this bug is fixed, this snippet should go back into roottest to prevent future regressions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8744#issuecomment-2068055777:533,Abort,AbortProcess,533,https://root.cern,https://github.com/root-project/root/issues/8744#issuecomment-2068055777,1,['Abort'],['AbortProcess']
Safety,"This tell you how you can select an ID which is inside a fragment, as it is not as doing something is the main page; But this does not help you to duplicate ID, or select sub element in a fragment; This also tell you that you can use prefix for fragment, but it is not recommended to uses that; And almost everything in the post is depreciated; it is also saied : ; - Avoid concatenating ID parts or relying on the syntax of the global ID, as mentioned in the comment as well as in the documentation . . Which is in favor of my solution, not relying on UI5 gobalID but on custom generated ones that will never change in any update",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4613#issuecomment-549335808:368,Avoid,Avoid,368,https://root.cern,https://github.com/root-project/root/pull/4613#issuecomment-549335808,1,['Avoid'],['Avoid']
Safety,"This tutorial crashed with the following stacktrace when run; interactively. Avoiding to register a canvas with the same name; multiple times fixes the crash:. ```; #8 0x00007f5b7876967d in TCanvas::Resize(char const*) (this=0x55e768e126c0) at ../graf2d/gpad/src/TCanvas.cxx:1740; #9 0x00007f5b3e90d668 in TRootCanvas::HandleContainerConfigure(Event_t*) (this=0x55e76852b460) at ../gui/gui/src/TRootCanvas.cxx:1789; #10 0x00007f5b3e8464fd in TGFrame::HandleEvent(Event_t*) (this=0x55e767938e70, event=0x7f5b79adff40) at ../gui/gui/src/TGFrame.cxx:476; #11 0x00007f5b3e7f4c9a in TGClient::HandleEvent(Event_t*) (this=0x55e768de2290, event=0x7f5b79adff40) at ../gui/gui/src/TGClient.cxx:846; #12 0x00007f5b3e7f531d in TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:656; #13 TGClient::ProcessOneEvent() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:648; #14 0x00007f5b3e7f536b in TGClient::HandleInput() (this=0x55e768de2290) at ../gui/gui/src/TGClient.cxx:703; #15 0x00007f5b8dcb0ff8 in TUnixSystem::DispatchOneEvent(bool) (this=0x55e75ccfd080, pendingOnly=<optimized out>) at ../core/unix/src/TUnixSystem.cxx:1067; #16 0x00007f5b8dbd0dca in TSystem::ProcessEvents() (this=0x55e75ccfd080) at ../core/base/src/TSystem.cxx:424; #17 0x00007f5b8130600d in (); #18 0x00007f5b79ae0450 in (); #19 0x00007f5b8de5215f in WrapperCall(Cppyy::TCppMethod_t, size_t, void*, void*, void*) (method=94452242807424, nargs=0, args_=0x7f5b79ae01d7, self=0x55e75ccfd080, result=0x7f5b79ae01d7) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778; #20 0x00007f5b8de527cf in CallT<unsigned char> (args=<optimized out>, nargs=<optimized out>, self=<optimized out>, method=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816; #21 Cppyy::CallB(long, void*, unsigned long, void*) (method=<optimized out>, self=<optimized out>, nargs=<optimized out>, args=<optimized out>) at ../bindings/pyroot/cppyy/cppyy-backend/cl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9139:77,Avoid,Avoiding,77,https://root.cern,https://github.com/root-project/root/pull/9139,1,['Avoid'],['Avoiding']
Safety,"This version of the PR is the result of some thinking and two test implementations, one with locks and one relying on TThreadedObject. Both solutions seem heavy and have impacts on runtime. The proposed changes, on the other hand, preserve the existing behaviour and allow thread safe access to the db, documenting well the properties of the TDatabasePDG component.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13541#issuecomment-1698804361:280,safe,safe,280,https://root.cern,https://github.com/root-project/root/pull/13541#issuecomment-1698804361,1,['safe'],['safe']
Safety,This was detected by redundant loading on libRooStats when we are trying; to resolve _ZN5TTreeC1Ev. libRooStats contains it as an unresolved symbol; but the wrong flag checks did not filter it out. This patch should fix a few subtle test failures which fluctuate depending; on the linker optimizations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2764:9,detect,detected,9,https://root.cern,https://github.com/root-project/root/pull/2764,2,"['detect', 'redund']","['detected', 'redundant']"
Safety,"This was discussed again in the [PPP](https://indico.cern.ch/event/1213092/).; It's important that misaligned friends can be detected. As a minimum, I would propose:; - Raise an error if the main tree/chain arrives at a certain index number, but the friend collection is smaller.; - If the main tree/chain is at the end, but the friend still has values, emit an informative warning. Ping @pcanal @eguiraud",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9137#issuecomment-1285630136:125,detect,detected,125,https://root.cern,https://github.com/root-project/root/issues/9137#issuecomment-1285630136,1,['detect'],['detected']
Safety,This will allow us to uniformly load all modules tagged as `[system]`. This way we avoid explicitly mentioning the module names (helpful for OSX).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1344:83,avoid,avoid,83,https://root.cern,https://github.com/root-project/root/pull/1344,1,['avoid'],['avoid']
Safety,This will avoid compiler warnings when compiling with option -Wsign-compare,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1883:10,avoid,avoid,10,https://root.cern,https://github.com/root-project/root/pull/1883,1,['avoid'],['avoid']
Safety,"This will avoid the crashing due to an uninitialized pool, but might cause problems as we are not enabling thread safety (as we shouldn't inside TTreeProcessorMT). In any case, maybe we should add an explanation comment? A big warning about thread safety?. On the other hand, I don't know if that's what we want until we decide to make TTreeProcessorMT open for explicit multithreading. Another way to avoid the crashing on the test would be to enable implicit MT before running it, as it is done in the other tests. This would follow the current way of working with TTProcessorMT.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4953#issuecomment-583375645:10,avoid,avoid,10,https://root.cern,https://github.com/root-project/root/pull/4953#issuecomment-583375645,4,"['avoid', 'safe']","['avoid', 'safety']"
Safety,"This works now fine on 6.28/04, it no longer crashes. ```; root -l; root [0] int x; (int) 0; root [1] .undo; root [2] x; (int) 0; root [3] .undo; root [4] .undo; root [5] x; input_line_12:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x); Execution of your code was aborted.; root [6] x; input_line_14:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x); Execution of your code was aborted.; root [7] int x; (int) 0; root [8] int x; (int) 0; root [9] x; (int) 0; root [10] x; (int) 0; root [11] x; (int) 0; root [12] x; (int) 0; root [13] .undo; root [14] x; (int) 0; root [15] .undo 5; root [16] x; input_line_23:2:3: error: use of undeclared identifier 'x'; (x); ^; Error in <HandleInterpreterException>: Error evaluating expression (x); Execution of your code was aborted.; root [17] .q; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10178#issuecomment-1812233608:341,abort,aborted,341,https://root.cern,https://github.com/root-project/root/issues/10178#issuecomment-1812233608,6,['abort'],['aborted']
Safety,Those `VecCore not found` bugs should be fixed by clearing the build directory. They are related to my own changes to avoid copying headers to the build directory.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/855#issuecomment-321843681:118,avoid,avoid,118,https://root.cern,https://github.com/root-project/root/pull/855#issuecomment-321843681,2,['avoid'],['avoid']
Safety,"Thre is a timeout of `tutorial-rcanvas-df104-py` on mac14, let's rerun the CI and make sure it's not related to this PR; https://github.com/root-project/root/actions/runs/10145425561/job/28051063889?pr=16133",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16133#issuecomment-2257728926:10,timeout,timeout,10,https://root.cern,https://github.com/root-project/root/pull/16133#issuecomment-2257728926,1,['timeout'],['timeout']
Safety,Thread safe TListOfFunctions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/46:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/46,1,['safe'],['safe']
Safety,Thread safety in TPad,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6510:7,safe,safety,7,https://root.cern,https://github.com/root-project/root/issues/6510,1,['safe'],['safety']
Safety,Thread safety issues with TListOfFunctions was found using the CMS threaded framework. These changes were done in consultation with Philippe Canal.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/46:7,safe,safety,7,https://root.cern,https://github.com/root-project/root/pull/46,1,['safe'],['safety']
Safety,Thread-safe TClass enums and TCling return values,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/55:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/55,1,['safe'],['safe']
Safety,Thread-safe changes specifically affecting reading/writing different ROOT files from different threads. These changes require the use of C++11.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/12,1,['safe'],['safe']
Safety,Thread-safe determination of TObject::IsOnHeap,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/8,1,['safe'],['safe']
Safety,Thread-safe interaction with all enum lists,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/56:7,safe,safe,7,https://root.cern,https://github.com/root-project/root/pull/56,1,['safe'],['safe']
Safety,Thread-safety issue in TClassEdit (StdLen)? [6.24.06],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10353:7,safe,safety,7,https://root.cern,https://github.com/root-project/root/issues/10353,1,['safe'],['safety']
Safety,"Three questions from my side (may be naive because I didn't spend a lot of time to fully digest the CI setup):; 1. Having the secrets stored as a file on the runners means we commit to self-hosted machines? GitHub hosted runners won't have the necessary setup.; 2. The workflow run ""would still have to be approved by a maintainer."" - how does this work? https://securitylab.github.com/research/github-actions-preventing-pwn-requests/ discusses a label; as far as I understand approval on GitHub itself is limited to first-time contributions. So everybody ""external"" who got one benign PR accepted, can afterwards run potentially malicious code without approval, no?; 3. ""A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated."" What is the currently intended use case for this? I would have assumed that we don't want to use PR builds to feed back into incremental builds anyhow, we always want to start from a ""known good"" state, ie `master`, no?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201#issuecomment-1413319178:674,safe,safer,674,https://root.cern,https://github.com/root-project/root/pull/12201#issuecomment-1413319178,1,['safe'],['safer']
Safety,Timeout - too late for 6.30.00,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8709#issuecomment-1761508240:0,Timeout,Timeout,0,https://root.cern,https://github.com/root-project/root/pull/8709#issuecomment-1761508240,1,['Timeout'],['Timeout']
Safety,Timeout of 600s added to ExternalProjects,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7136:0,Timeout,Timeout,0,https://root.cern,https://github.com/root-project/root/pull/7136,1,['Timeout'],['Timeout']
Safety,Timeout parameter added to ExternalProject,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7141:0,Timeout,Timeout,0,https://root.cern,https://github.com/root-project/root/pull/7141,1,['Timeout'],['Timeout']
Safety,Timeout. @lmoneta please move the implementation as you see fit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2065#issuecomment-398737720:0,Timeout,Timeout,0,https://root.cern,https://github.com/root-project/root/pull/2065#issuecomment-398737720,1,['Timeout'],['Timeout']
Safety,To avoid compiler warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15325:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15325,1,['avoid'],['avoid']
Safety,"To avoid fallback to numeric differentiation because the function is not; inlined. The pullbacks were automatically generated with Clad master, and then; manually simplified. It was carefully checked that the updated unit; tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15501:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15501,1,['avoid'],['avoid']
Safety,"To avoid having to use regex to parse trailing curly brackets with/without trailing whitespaces, the code command string is cleaned with the following strategy:; - Trim whitespaces at the borders; - Get the inner command (i.e. the part between quotes); - Trim whitespaces again; - Stitch back together. This should fix the unforeseen PyTorch failures brought by PyTorch's snafu (as described and https://github.com/pytorch/pytorch/issues/49460#issuecomment-911365091) and triggered by the use of std::regex introduced in https://github.com/root-project/root/pull/14716 . This replaces https://github.com/root-project/root/pull/14716 to fix https://github.com/root-project/root/issues/14462",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14773:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/14773,1,['avoid'],['avoid']
Safety,To avoid the largest merge conflicts this PR also backports some refactoring of RFriendInfo and TTreeProcessorMT. Fixes #12260 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12342:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/12342,1,['avoid'],['avoid']
Safety,"To avoid this error, change the type of the variable passed to SetBranchAddress from `signed char` to `char`. If that is not possible, cast the parameter to `void*` : `SetBranchAddress( ..... , (void*)&mysignedchar);`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7565#issuecomment-825086836:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/issues/7565#issuecomment-825086836,1,['avoid'],['avoid']
Safety,To avoid warnings such as `_rvec.py:95: SyntaxWarning: invalid escape sequence '\p'`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15137:3,avoid,avoid,3,https://root.cern,https://github.com/root-project/root/pull/15137,1,['avoid'],['avoid']
Safety,"To be able compile with `-Dcxxmodules=ON`, one has to avoid `${CMAKE_BINARY_DIR}/include` in all include paths. Otherwise compiler can find same include (like `TString.h`) in ROOT source directories and in `${CMAKE_BINARY_DIR}/include`. But many builtins using `${CMAKE_BINARY_DIR}/include` to install their headers and therefore library appends that path to public include paths. . This PR tries to copy `VDT` and `TBB` includes into `ginclude` directory and use this directory for the compilation. . Solves compilation problem on Linux platform with `cxxmodules` enabled. Probably same adjustment could be done for other builtins",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5445:54,avoid,avoid,54,https://root.cern,https://github.com/root-project/root/pull/5445,1,['avoid'],['avoid']
Safety,To be merged after #2313 to avoid conflicts for @imaxoi,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2392:28,avoid,avoid,28,https://root.cern,https://github.com/root-project/root/pull/2392,1,['avoid'],['avoid']
Safety,"To fix the timeouts seen in our CI runs of the distributed RDataFrame with Dask suite. In particular, the Dask version used was 2021.10.0. Version 2021.11.2 fixes a couple of deadlock bugs which were most probably responsible for the timeouts (see https://distributed.dask.org/en/stable/changelog.html#v2021-11-2). We bump the minimum Dask version to 2022.02.0 (; https://distributed.dask.org/en/stable/changelog.html#v2022-02-0) because it is the last version with support for Python 3.7 (the current minimum Python version for distributed RDataFrame). The test suite was run with Dask 2021.10.0 on both Ubuntu and Fedora, showing the timeout. Version 2021.11.2 doesn't timeout.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11371:11,timeout,timeouts,11,https://root.cern,https://github.com/root-project/root/pull/11371,4,['timeout'],"['timeout', 'timeouts']"
Safety,"To give some context, why I am touching these classes. An iminuit user noticed that Migrad does not stop when the call limit is reached in certain corner cases. While tracing that issue, I found the core issue in MnHesse, which does not report back if the call limit is reached while it runs. The fit is correctly aborted then, but the fit state is not ""call limit reached"", instead the minimum is reported as valid. So while this only happens in certain corner cases, it is nevertheless a bad bug, since Migrad says the minimum is fine although that is not the case.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7882#issuecomment-830202601:314,abort,aborted,314,https://root.cern,https://github.com/root-project/root/pull/7882#issuecomment-830202601,1,['abort'],['aborted']
Safety,To help debug the timeouts seen on MacOS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6264:18,timeout,timeouts,18,https://root.cern,https://github.com/root-project/root/pull/6264,2,['timeout'],['timeouts']
Safety,To make the RReader usable in multi-thread we ned to move the loch to all the COmpute funcitions in order to protect the setting of the input variables. This fixes #16600 as suggested in https://root-forum.cern.ch/t/tmva-rreader-not-multithread-safe/59662,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16616:245,safe,safe,245,https://root.cern,https://github.com/root-project/root/pull/16616,1,['safe'],['safe']
Safety,"To summarize the current intent of the PR and my understanding of the comments here. The PR targets at limiting cling to find modulemap files all over the place. We have advanced the infrastructure so that this is feasible. If we pick up all possible modulemaps on the include paths we have less control and rootcling goes in the opposite direction -- to be able to control much better the environment in which it works (in a previous PRs we have limited the set of flags it can take). As a side effect of this it will fix the module redefinition errors seen in the LCG builds and when ROOT is installed. IIUC the comments are reasonable and suggesting to move away from the ROOT static configuration for the essential directories such as the etcdir, libdir, incdir and so on. IMO, this not part of the PR even though it touches these functions. I support fixing these issues, however, if we want to fix them we will have to write quite a bit of utility functions which already exist in libLLVMSupport. A potential way forward (outside of this PR) is to make libLLVMSupport available to FoundationUtils and then we can use getMainExecutable and so on to make ROOT detect its essential folders at runtime.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4553#issuecomment-543193289:1164,detect,detect,1164,https://root.cern,https://github.com/root-project/root/pull/4553#issuecomment-543193289,1,['detect'],['detect']
Safety,"To summarize what was decided today in the ROOT team meeting: it is very unfortunate that this bug was discovered a week after branching, please avoid this in the future. Nevertheless, since this is fixing a feature that we advertise and the feature is very specific, this should be merged and backported to 6.32 if the CI can be made green (even disabling the failing test would be acceptable, since n - 1 tested platforms are better than zero).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15173#issuecomment-2057399920:145,avoid,avoid,145,https://root.cern,https://github.com/root-project/root/pull/15173#issuecomment-2057399920,1,['avoid'],['avoid']
Safety,"Today I read User's Guide and spotted many mistakes I noticed when reading it for the first time 15 years ago. I thought that now is the time for me to act and to finally fix them.; I'm not a native speaker, so I don't insist on all of them (I still doubt the usage of articles when I write this small report). If it's really easier for you, the next time I can try to make a push release with the corrections. The good thing that I noted is that there are some fixes in the recent html pages compared to the pdf User's Guide of 2018, so I refer to this page when I cite the mistakes:; https://root.cern/root/htmldoc/guides/users-guide/Trees.html. 14.3; is the use the TTree::Show method; \- to use; 14.4; the branches and the leaves, is TTree::Print.; \- no need for a comma; 14.6; boxes"".; \- no need for the quote.; witch is marked; \- which is marked; exposed expression; \- I think that would sound better as ""set expression"" or another adjective.; Below them there are two text widgets; \- possible, but I think 'there' is redundant here.; for specifying; \- to specify; \-\- I think this text should be checked by a native speaker for articles and other issues.; When the “Rec” box is checked, the Draw and Scan commands; \- no need for quotes around Rec (or add them around Draw and Scan); 14.7; This picture shows the TTree class:; \- should be rewritten with a reference to the picture. On the pdf manual the picture is on a separate page, away from this line!; 14.7.3; save all branch buffers every n byte.; \- bytes.; 14.7.4; When a TTree is memory resident, you set it up so that it retains retain only the last few entries.; \- retains; For example, this can be very useful for monitoring purpose.; \- just for monitoring, remove 'purpose'. Maybe rewrite this phrase.; 14.7.6; The function TTree::GetUserInfo() allows adding any object defined by a user to the tree that is not depending on the entry number.; \- allows to add to the tree any user\-defined object that doesn't depend on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7284:1029,redund,redundant,1029,https://root.cern,https://github.com/root-project/root/issues/7284,1,['redund'],['redundant']
Safety,Too late (aka too risky) at this point for v6.28/00.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11442#issuecomment-1400680843:18,risk,risky,18,https://root.cern,https://github.com/root-project/root/issues/11442#issuecomment-1400680843,1,['risk'],['risky']
Safety,Torus.cxx:576; /opt/root_src/geom/geom/src/TGeoTorus.cxx:577:21: warning: Value stored to 'nbPnts' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'nbPnts' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:577; /opt/root_src/geom/geom/src/TGeoTorus.cxx:646:10: warning: Value stored to 'indx' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'indx' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:646; /opt/root_src/geom/geom/src/TGeoTorus.cxx:661:10: warning: Value stored to 'indx' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'indx' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:661; /opt/root_src/geom/geom/src/TGeoTorus.cxx:697:7: warning: Value stored to 'i' is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'i' is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:697; /opt/root_src/geom/geom/src/TGeoTorus.cxx:741:13: warning: Value stored to 'safe' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'safe' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:741; /opt/root_src/geom/geom/src/TGeoTorus.cxx:1065:13: warning: Value stored to 's' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 's' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTorus.cxx:1065; /opt/root_src/geom/geom/src/TGeoTrd1.cxx:199:13: warning: Value stored to 'snxt' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTrd1.cxx:199; /opt/root_src/geom/geom/src/TGeoTrd1.cxx:317:13: warning: Value stored to 'snxt' during its initialization is never read [clang-analyzer-deadcode.DeadStores]; 1: Value stored to 'snxt' during its initialization is never read in /opt/root_src/geom/geom/src/TGeoTrd1.cxx:31,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7428:66209,safe,safe,66209,https://root.cern,https://github.com/root-project/root/issues/7428,1,['safe'],['safe']
Safety,Tree:Fix ROOT-10829. Avoid using deleted object.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5924:21,Avoid,Avoid,21,https://root.cern,https://github.com/root-project/root/pull/5924,1,['Avoid'],['Avoid']
Safety,TreePlayer-test: avoid use after delete of TEntryList by TTree,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10031:17,avoid,avoid,17,https://root.cern,https://github.com/root-project/root/pull/10031,1,['avoid'],['avoid']
Safety,Try `git clang-format master` on your branch. That should only change what you already modified. The reason clang-format is not run in all the code at once is to avoid having lots of whitespace changes that will make backporting fixes more painful later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6007#issuecomment-655989367:162,avoid,avoid,162,https://root.cern,https://github.com/root-project/root/pull/6007#issuecomment-655989367,1,['avoid'],['avoid']
Safety,Try to debug Windows Debug failures / timeouts (?),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16089:38,timeout,timeouts,38,https://root.cern,https://github.com/root-project/root/pull/16089,1,['timeout'],['timeouts']
Safety,"Type-erased reading should work via the default entry (or new entries) of the reader's generated model. Like this. ```cpp; auto r = RNTupleReader::Open(""r"", fileGuard.GetPath());; auto v = r->GetModel()->Get<ROOT::RVec<int>>(""v"");; r->LoadEntry(0);; // v now points to an RVec with the data of field v in event 0; ```. Edit: I guess I see the issue, you'd like to avoid `Get<ROOT::RVec<int>>` but instead pass the type name somewhere as a string. Let me think about that for a moment. Can you send me the complete snippet how you read the data before the API change in RNTuple?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10408#issuecomment-1117135780:364,avoid,avoid,364,https://root.cern,https://github.com/root-project/root/issues/10408#issuecomment-1117135780,1,['avoid'],['avoid']
Safety,"UNIX terminals, e.g. vt100, send escape sequences for many special key combinations. Entering the history search mode assigned a specific meaning to the `ESC` character and disabled the processing of escape sequences, thus accidentally printing some characters that are part of a CSI. As a workaround, avoid changing the meaning of `ESC`; users can still use the well-known `ESC ESC` sequence (or any other editor command, e.g. move left/right) to exit the history search mode. This change only affects UNIX terminals. Closes issue #10209. ## Checklist:; - [X] tested changes locally. This PR fixes #10209.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10281:302,avoid,avoid,302,https://root.cern,https://github.com/root-project/root/pull/10281,1,['avoid'],['avoid']
Safety,"Uhm but it looks like it failed to fetch after my latest force-push? So I'm not 100% sure what it's building. EDIT: ah no, the rebase errors come from a `git rebase --abort` that ""correctly fails"", as there is no failed rebase operation to abort.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7502#issuecomment-879713420:167,abort,abort,167,https://root.cern,https://github.com/root-project/root/pull/7502#issuecomment-879713420,2,['abort'],['abort']
Safety,Undefine HZ macro to avoid name clash with variable name,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/309:21,avoid,avoid,21,https://root.cern,https://github.com/root-project/root/pull/309,1,['avoid'],['avoid']
Safety,Unfortunately I can't install Win64 version of Root 6.26 becasue of virus detection. See error during unzip and Btdefender report. ![error1](https://user-images.githubusercontent.com/75624059/193414303-f5b7d9c8-4837-431d-b7e2-e7f04c94e34b.JPG); ![error2](https://user-images.githubusercontent.com/75624059/193414309-ece88fe7-b75c-47ce-ac39-620b567ba7b3.JPG),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11473:74,detect,detection,74,https://root.cern,https://github.com/root-project/root/issues/11473,1,['detect'],['detection']
Safety,"Unfortunately, when trying to create a TCanvas, a break occurs every time. Both master and 6-28-00-patches have this problem. @Axel-Naumann . root.exe(5184,0x1effe9b40) malloc: Heap corruption detected, free list is damaged at 0x600001c18da0; *** Incorrect guard value: 0; root.exe(5184,0x1effe9b40) malloc: *** set a breakpoint in malloc_error_break to debug",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1527005980:193,detect,detected,193,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1527005980,1,['detect'],['detected']
Safety,"Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code using a templated class. The functionality is completely unchanged, this is only to avoid code repetition.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12735:140,avoid,avoid,140,https://root.cern,https://github.com/root-project/root/pull/12735,1,['avoid'],['avoid']
Safety,Unset GLEW_FOUND in case of Mac OS X builds with CMake 3.17 (to avoid…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5357:64,avoid,avoid,64,https://root.cern,https://github.com/root-project/root/pull/5357,1,['avoid'],['avoid']
Safety,"Updates on the failing tests:; * Centos8/multicore: Failure because the same wrong mechanism of changing files happens in `FinalizeSlot` instead of `Finalize` in `SnapshotHelperMT`. Weirdly this didn't happen on my machine with 8 threads but it does on this node with 16 threads, still not sure what's the real difference there.; * MacOS: Both failures happen in the dataframe test, but in the **single threaded** Snapshot, that is in the `Finalize` method of the `SnapshotHelper` class. At first this PR wasn't even considering the single threaded case, that's also why `SnapshotHelper` wasn't modified. So there was this difference between the single threaded Snapshot that still used the weird ChangeFile behaviour (although it shouldn't have triggered a segfault anyway since it's using a plain TFile), and the multithreaded Snapshot that got its behaviour changed to avoid the issue. Considering both types of failures, and the fact that a coherent behaviour across the two Snapshot modes is desirable, I would refactor the usage of `TTree::SetMaxTreeSize` inside of RDF Snapshot in a single common point that both single-thread and multi-thread operations have to go through, if that exists. Or in alternative, the workaround should be done at construction time of both helpers and then removed at destruction time (or in `Initialize` and `Finalize` methods).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6570#issuecomment-720955137:872,avoid,avoid,872,https://root.cern,https://github.com/root-project/root/pull/6570#issuecomment-720955137,1,['avoid'],['avoid']
Safety,"Updates:; * Changed the logic of the `GetMergeableValue` method of the action helpers: now all the information needed to create the `RMergeableValue` should be created inside the function itself, e.g. the `std::function` that merges to values of the same type held by the helper; * Added the logic for merging results of `Histo1D` action. ; * Define `GetMergeableValue` in the `FillHelper` action helper; * Define `RMergeableHisto1D` subclass of `RMergeableValue` to avoid a copy operation; * Add a test for merging two 1D histograms. TODO:; - [x] The test for histograms only works when calling the `Histo1D` action without a `TH1DModel`. In that case `ROOT::Detail::RDF::GetMergeableValue()` returns a `nullptr`. It may be that it's not using the correct helper.; - [x] Add other mergeable values.; - [x] Add docs.; - [x] Apply coding conventions.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5552#issuecomment-625840667:467,avoid,avoid,467,https://root.cern,https://github.com/root-project/root/pull/5552#issuecomment-625840667,1,['avoid'],['avoid']
Safety,Updating comment about bug in ccache 3.1.x used together with clang (https://bugzilla.samba.org/show_bug.cgi?id=8118).; In commit was added the detection of version of ccache and extra check to apply flag -Qunused-argument for ccache version less then 3.2.0.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2643:144,detect,detection,144,https://root.cern,https://github.com/root-project/root/pull/2643,1,['detect'],['detection']
Safety,Use Cling Interpreter to get at run time Python executable and avoid a compilation error when running the tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10253:63,avoid,avoid,63,https://root.cern,https://github.com/root-project/root/pull/10253,1,['avoid'],['avoid']
Safety,Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the ; model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5.; .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13533:54,avoid,avoids,54,https://root.cern,https://github.com/root-project/root/pull/13533,3,['avoid'],"['avoid', 'avoids']"
Safety,Use SafeDelete in several gui classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7696:4,Safe,SafeDelete,4,https://root.cern,https://github.com/root-project/root/pull/7696,1,['Safe'],['SafeDelete']
Safety,"Use `std::span` instead of `std::vector const&` for function parameters in Minuit2. The motivation is that `std::span` is more general. If the function takes a `std::vector const&`, the inputs are forced to be allocated on the heap. So if one wants to call functions with constant size or even scalar input, that would cause a large overhead. This overhead can be avoided when generalizing with `std::span`. The standalone Minuit2 build files were also changed to consider the; `std::span` backport to C++17 that is already in ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15037:364,avoid,avoided,364,https://root.cern,https://github.com/root-project/root/pull/15037,1,['avoid'],['avoided']
Safety,"Use a single executable to parse all ONNX input files and generate the appropriate headers. This speed up the parsing especially in the case of using ROOT files, since we avoid the initialization/loading of libraries for every file. The CMakeFile is modified to generate automatically the C++ code to parse all input files",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12070:171,avoid,avoid,171,https://root.cern,https://github.com/root-project/root/pull/12070,1,['avoid'],['avoid']
Safety,Use consistent wording of the comments in the different TMVA classification tests to avoid confusion,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12375:85,avoid,avoid,85,https://root.cern,https://github.com/root-project/root/pull/12375,1,['avoid'],['avoid']
Safety,Use different filename in loopdir.C and loopdir11.C to avoid race condition,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11725:55,avoid,avoid,55,https://root.cern,https://github.com/root-project/root/pull/11725,1,['avoid'],['avoid']
Safety,Use direct cast to double to avoid warnings in StringConv.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4321:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/4321,1,['avoid'],['avoid']
Safety,Used in Qt5WebEngine chrome does not support `await import` statement; in main module body. But this is the only way for now to work with; node.js. To avoid problems just exclude peace of code marked; correspondently. Just a workaround. Backport of #10196,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10197:151,avoid,avoid,151,https://root.cern,https://github.com/root-project/root/pull/10197,1,['avoid'],['avoid']
Safety,Used in Qt5WebEngine chrome does not support `await import` statement; in main module body. But this is the only way for now to work with; node.js. To avoid problems just exclude peace of code marked; correspondingly. Just a workaround. Enables usage of future JSROOT fully based on es6 modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10196:151,avoid,avoid,151,https://root.cern,https://github.com/root-project/root/pull/10196,1,['avoid'],['avoid']
Safety,Used in `RCanvas::SaveAs()` method to avoid failure message when image production in ; tutorials macros is not possible. Should fix newly introduced errors in Jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13115:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/13115,1,['avoid'],['avoid']
Safety,"Using `nlohmann_json` as a public dependency of ROOT can result in different troubles, like #14188. That's why it's better to avoid this dependency if we can, also to minimize the dependency of RooFit on the interface level. In the case of RooFit, the only reason for this dependency was the `HeatmapAnalyzer::getMetadata()` function. However, it just returned a json with a vector of string lables. We can also return a `std::vector<std::string>` here. I already talked with @Zeff020 about this change, and he is completely fine with it. The class was also only used by the RooFit Multiprocess developers so far, so changing the interface is fine. With this interface change, only some refactoring was necessary to avoid including `nlohmann_json` in the RooFit headers. This commit is similar to 9d7aa4a96e.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14266:126,avoid,avoid,126,https://root.cern,https://github.com/root-project/root/pull/14266,2,['avoid'],['avoid']
Safety,"Using template functions in the generated code can cause linker errors, which is avoided with this suggested commit. Backport of https://github.com/root-project/root/pull/15502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15587:81,avoid,avoided,81,https://root.cern,https://github.com/root-project/root/pull/15587,1,['avoid'],['avoided']
Safety,"Using template functions in the generated code can cause linker errors,; which is avoided with this suggested commit. To be backported to the 6.32 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15502:82,avoid,avoided,82,https://root.cern,https://github.com/root-project/root/pull/15502,1,['avoid'],['avoided']
Safety,"Using the `minuit2_omp` option restricts you to minimizing thread-safe functions, and RooFit models are not thread safe. Also the regular ROOT fitter interface is not thread-safe either, so this option basically breaks your build. It is intended for MInuit2 standalone builds for the specific case where you have an expensive thread-safe function where you want to parallelize the gradient calculation. Adding a warning in the configuration step with CMake hopefully keeps people and package maintainers from using it in the future:; https://github.com/root-project/root/pull/12970",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12940#issuecomment-1581533040:66,safe,safe,66,https://root.cern,https://github.com/root-project/root/issues/12940#issuecomment-1581533040,4,['safe'],['safe']
Safety,"Using valgrind:; ```; cd /builddir/build/BUILD/root-6.24.00/ppc64le-redhat-linux-gnu/tutorials && LD_LIBRARY_PATH=/builddir/build/BUILD/root-6.24.00/ppc64le-redhat-linux-gnu/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 valgrind --suppressions=/builddir/build/BUILD/root-6.24.00/etc/valgrind-root.supp --track-origins=yes /builddir/build/BUILD/root-6.24.00/ppc64le-redhat-linux-gnu/bin/root.exe -l -q -b -n -x hsimple.C -e return; ==3856979== Memcheck, a memory error detector; ==3856979== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==3856979== Using Valgrind-3.16.1 and LibVEX; rerun with -h for copyright info; ==3856979== Command: /builddir/build/BUILD/root-6.24.00/ppc64le-redhat-linux-gnu/bin/root.exe -l -q -b -n -x hsimple.C -e return; ```; [ skipping some lines that seem irrelevant... ]; ```; ==3856979== Conditional jump or move depends on uninitialised value(s); ==3856979== at 0x4AD8468: TROOT::FindObject(char const*) const (TROOT.cxx:1267); ==3856979== by 0x186D05AF: ???; ==3856979== by 0x186D004F: ???; ==3856979== by 0x6A5C80F: cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (IncrementalExecutor.cpp:376); ==3856979== by 0x6995A4F: cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (Interpreter.cpp:1141); ==3856979== by 0x699F2B3: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (Interpreter.cpp:1391); ==3856979== by 0x699FD73: cling::Interpreter::echo(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::Value*) (Interpreter.cpp:1043); ==3856979== by 0x6AF224B: cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (MetaSema.cpp:145); ==3856979== by 0x6B02C0F: cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (MetaParser.cpp:319); ==3856979== by 0x6B050AF",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8072#issuecomment-845027817:458,detect,detector,458,https://root.cern,https://github.com/root-project/root/issues/8072#issuecomment-845027817,1,['detect'],['detector']
Safety,"V=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 882: Environment variables:; 882: ROOT_HIST=0; 882: Test timeout computed to be: 1500; 882: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 882: error code: -529697949; 882:; 882:; 5/16 Test #882: tutorial-dataframe-df006_ranges-py .......................***Failed 4.42 sec; test 883; Start 883: tutorial-dataframe-df007_snapshot-py. 883: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df007_snapshot.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 883: Environment variables:; 883: ROOT_HIST=0; 883: Test timeout computed to be: 1500; 883: CMake Error at C:/Users/sftnight/build/release/RootTestDriver.cmake:237 (message):; 883: error code: -529697949; 883:; 883:; 6/16 Test #883: tutorial-dataframe-df007_snapshot-py .....................***Failed 4.47 sec; test 884; Start 884: tutorial-dataframe-df008_createDataSetFromScratch-py. 884: Test command: ""C:\Program Files\CMake\bin\cmake.exe"" ""-DCMD=C:/Python38-32/python.exe^C:/Users/sftnight/git/master/tutorials/launcher.py^C:/Users/sftnight/git/master/tutorials/dataframe/df008_createDataSetFromScratch.py"" ""-DSYS=C:/Users/sftnight/build/release"" ""-DENV=ROOTSYS=C:/Users/sftnight/build/release#PYTHONPATH=C:/Users/sftnight/build/release/bin"" ""-P"" ""C:/Users/sftnight/build/release/RootTestDriver.cmake""; 884: Environment variables:; 884: ROOT_HIST=0; 884: Test timeout computed to be: 1500; 884: input_line_40:2:211: warning: missing terminating '""' character [-Winvalid-pp-token]; 884: *reinterpret_cast<ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6083#issuecomment-665456331:4669,timeout,timeout,4669,https://root.cern,https://github.com/root-project/root/pull/6083#issuecomment-665456331,1,['timeout'],['timeout']
Safety,VMC update: Added support for user defined sensitive detectors; plus few more features,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1892:53,detect,detectors,53,https://root.cern,https://github.com/root-project/root/pull/1892,1,['detect'],['detectors']
Safety,Variables are detected as used initialized if initialization is done via; a call to the interpreter.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3722:14,detect,detected,14,https://root.cern,https://github.com/root-project/root/pull/3722,1,['detect'],['detected']
Safety,"Very interesting. Only one test failing, which is; ```; 2511/2561 Test #2554: roottest-root-treeformula-retobj-make .............................................................***Failed 22.15 sec; -- TEST COMMAND -- ; cd roottest/root/treeformula/retobj; /usr/bin/timeout -s USR2 270s /usr/bin/gmake cleantest; -- BEGIN TEST OUTPUT --; /usr/bin/gmake -f Makefile test; gmake[1]: Entering directory 'roottest/root/treeformula/retobj'; --- root/treeformula/retobj/retobjTest.ref	2024-06-24 18:56:47.431632484 +0000; +++ root/treeformula/retobj/retobjTest.log	2024-06-24 19:56:39.498105605 +0000; @@ -28,12 +28,10 @@; Warning in <TClass::Init>: no dictionary for class edm::HepMCProduct is available; Warning in <TClass::Init>: no dictionary for class edm::EventProvenance is available; Warning in <TClass::Init>: no dictionary for class edm::BranchEntryDescription is available; -Warning in <TClass::TClass>: no dictionary for class HepMC::GenEvent is available; -Warning in <TClass::TClass>: no dictionary for class HepMC::GenVertex is available; Warning in <TClass::Init>: no dictionary for class HepMC::WeightContainer is available; Warning in <TClass::Init>: no dictionary for class CLHEP::HepLorentzVector is available; Warning in <TClass::Init>: no dictionary for class CLHEP::Hep3Vector is available; -Warning in <TClass::TClass>: no dictionary for class HepMC::GenParticle is available; -Warning in <TClass::TClass>: no dictionary for class HepMC::Flow is available; Warning in <TClass::Init>: no dictionary for class HepMC::Polarization is available; -Info in <TCanvas::MakeDefCanvas>: created default TCanvas with name c1; +Error in <TTreeFormula::DefinedVariable>: m_signal_process_vertex is not a datamember of HepMC::GenEvent; +Error in <TTreeFormula::Compile>: Bad numerical expression : ""HepMCProduct_PythiaInput__HepMC.obj.evt_.m_signal_process_vertex.@m_particles_out.size()""; +Info in <TSelectorDraw::AbortProcess>: Variable compilation failed: {HepMCProduct_PythiaInput__HepMC.obj.ev",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14930#issuecomment-2289396844:265,timeout,timeout,265,https://root.cern,https://github.com/root-project/root/pull/14930#issuecomment-2289396844,1,['timeout'],['timeout']
Safety,"Via special command from client move object in list of primitives to the; end. Reflect changes which are done with ""Bring to front"" menu command; on client side. Supported for objects like `TLine`, `TBox`, `TMarker`, `TPave` and few; others. It is more safer version of `TObject::Pop()` method - do not relies on `gPad`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13089:253,safe,safer,253,https://root.cern,https://github.com/root-project/root/pull/13089,1,['safe'],['safer']
Safety,Viewer3D.h TVirtualX.h ROOT/RDirectoryEntry.hxx ROOT/RIndexIter.hxx strlcpy.h snprintf.h strtok.h root_std_complex.h ROOT/TSeq.hxx TArrayC.h TArrayD.h TArrayF.h TArray.h TArrayI.h TArrayL64.h TArrayL.h TArrayS.h TBits.h TBtree.h TClassTable.h TClonesArray.h TCollection.h TCollectionProxyInfo.h TExMap.h THashList.h THashTable.h TIterator.h TList.h TMap.h TObjArray.h TObjectTable.h TOrdCollection.h TRefArray.h TRefTable.h TSeqCollection.h TSortedList.h TVirtualCollectionProxy.h ESTLType.h RStringView.h TClassEdit.h TError.h ThreadLocalStorage.h ROOT/RLogger.hxx ROOT/RNotFn.hxx ROOT/RRangeCast.hxx ROOT/RSpan.hxx ROOT/RStringView.hxx ROOT/StringUtils.hxx ROOT/span.hxx ROOT/TypeTraits.hxx ROOT/RError.hxx GuiTypes.h TApplicationImp.h TBrowser.h TBrowserImp.h TCanvasImp.h TClassMenuItem.h TContextMenu.h TContextMenuImp.h TControlBarImp.h TGuiFactory.h TInspectorImp.h TObjectSpy.h TToggleGroup.h TToggle.h TBaseClass.h TClassGenerator.h TClass.h TClassRef.h TClassStreamer.h TDataMember.h TDataType.h TDictAttributeMap.h TDictionary.h TEnumConstant.h TEnum.h TFileMergeInfo.h TFunction.h TFunctionTemplate.h TGenericClassInfo.h TGlobal.h TInterpreter.h TInterpreterValue.h TIsAProxy.h TListOfDataMembers.h TListOfEnums.h TListOfEnumsWithLock.h TListOfFunctions.h TListOfFunctionTemplates.h TMemberStreamer.h TMethodArg.h TMethodCall.h TMethod.h TProtoClass.h TRealData.h TSchemaHelper.h TSchemaRule.h TSchemaRuleSet.h TStatusBitsChecker.h TStreamerElement.h TStreamer.h TVirtualIsAProxy.h TVirtualRefProxy.h TVirtualStreamerInfo.h TVirtualArray.h TVirtualObject.h Getline.h TMacOSXSystem.h TUnixSystem.h /tmp/workspace/src/core/base/inc/LinkDef.h; 1.	<eof> parser at end of file; 2.	/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/usr/include/c++/v1/__algorithm/ranges_unique_copy.h:51:25: serializing 'std::ranges::__unique_copy::__fn::__get_algo_tag'; Subprocess aborted; make[2]: *** [core/G__Core.cxx] Error 1; make[1]: *** [core/CMakeFiles/G__Core.dir/all] Error 2; ```; @vgvassilev FYI,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12629#issuecomment-1499102403:11338,abort,aborted,11338,https://root.cern,https://github.com/root-project/root/pull/12629#issuecomment-1499102403,1,['abort'],['aborted']
Safety,WIP: Avoid link on Python on macOS clang,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3396:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/3396,1,['Avoid'],['Avoid']
Safety,"Wait, cpp reference says this about `vector<bool>`. > Does not guarantee that different elements in the same container can be modified concurrently by different threads. Is `vector<bool>` not thread safe?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3135#issuecomment-446356834:199,safe,safe,199,https://root.cern,https://github.com/root-project/root/pull/3135#issuecomment-446356834,1,['safe'],['safe']
Safety,"Warning appears when building on Windows:. ```; Diagnostics.cpp; C:\git\root\interpreter\cling\lib\Utils\Diagnostics.cpp(37,27): warning; C4805: '|': unsafe mix of type 'bool' and type; 'int' in operation; [C:\Soft\root_64\interpreter\cling\lib\Utils\obj.clingUtils.vcxproj]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13444:150,unsafe,unsafe,150,https://root.cern,https://github.com/root-project/root/pull/13444,1,['unsafe'],['unsafe']
Safety,"Warning like:; ```; geom/geom/src/TGeoManager.cxx:521:4: warning: this ‘if’ clause does not guard... [-Wmisleading-indentation]; 521 | if (fHashVolumes) fHashVolumes->Clear(""nodelete""); SafeDelete(fHashVolumes);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8316:186,Safe,SafeDelete,186,https://root.cern,https://github.com/root-project/root/pull/8316,1,['Safe'],['SafeDelete']
Safety,"Warnings appear due to PEP 590 adding the tp_vectorcall field to some; structs which remain uninitialized in CPyCppyy. Following the conventions upstream, because the standard ensures a; zero-initialization, it's safe the leave them uninitialized such as also; done in the Python codebase itself. See discussion here:; https://bitbucket.org/wlav/cppyy/issues/186/warnings-with-python-38-due-to-vectorcall",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4737:213,safe,safe,213,https://root.cern,https://github.com/root-project/root/pull/4737,1,['safe'],['safe']
Safety,"We are currently discussing what the next ROOT release version number will be, and if we want to remove the deprecated methods now. To avoid the annoying warnings, change the check to 6.33.02; *if* we release a development release later this year, it would likely be called 6.33.01 or 6.33.02. Afterwards master would be bumped to 6.33.03 and we would again be reminded to remove the methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15148:135,avoid,avoid,135,https://root.cern,https://github.com/root-project/root/pull/15148,1,['avoid'],['avoid']
Safety,"We are working on LCFIPlus, a flavor tagging software used for linear collider (ILC/CLIC) studies.; We use multi-class BDT with output of b-tag, c-tag, and uds-tag (3 outputs).; We also separate events into four categories according to number of reconstructed vertices; (0-vtx, 1-vtx, 1-vtx+1-partial-vtx, and 2-vtx) which are trained and evaluated independently.; In the previous release with TMVA 4.1.0 we can use the output of BDTs as variables common to ; all categories, because the average value of eg. b-tag output from each BDT; over full training samples reflects the fraction of b events in the training samples.; (eg. if we have 80% of b and 20% of c + uds, we have the avarage value of .8 for b-tag output.); We found this feature is not preserved in the latest releases (after TMVA 4.1.2); due to the normalization procedure introduced in that version.; In result this causes significant degradation of our flavor tagging performance,; which was reported from a user using latest ROOT/TMVA.; We also found that just switching off the normalization procedure in the ROOT 6.06/TMVA 4.2.1; gives very similar performance to the ROOT 5.28/TMVA 4.1.0.; Therefore, we need to switch off the normalization to keep the performance,; which is realized in an option implemented in this pull request.; We hope this will be accepted, to avoid us from patching this to every release of ROOT; we use for studies using LCFIPlus flavor tagging feature.; We set this option to non-default, so current users should not be affected by this change.; ![btag-100k-root-6 06 02-skipnorm](https://cloud.githubusercontent.com/assets/7939934/18453216/0f501eb0-78f3-11e6-892c-912f9b68553d.png); B-tag performance with the SkipNormalization option; ![btag-100k-root-6 06 02-noskipnorm](https://cloud.githubusercontent.com/assets/7939934/18453215/0f4e6b60-78f3-11e6-94bd-b4be9631937d.png); B-tag performance without the SkipNormalization option",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/244:1338,avoid,avoid,1338,https://root.cern,https://github.com/root-project/root/pull/244,1,['avoid'],['avoid']
Safety,We can avoid quite some code repetition by employing a single `using` statement to ensure that the base class methods are not hidden.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11915:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/11915,1,['avoid'],['avoid']
Safety,We can change the code in the ROOT facade such that `gROOT` is always; retrieved via cppyy. This was done for `gInterpreter` and `gSystem`; already anyway. This is part of the general campaign of avoiding pythonization code in C++.; The experience of the last weeks has clearly shown that this is less robust than having the code on the Python side (see for example the discussion in #15788).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15833:196,avoid,avoiding,196,https://root.cern,https://github.com/root-project/root/pull/15833,1,['avoid'],['avoiding']
Safety,"We can not access the original ticket. What is the actual hardware that was being accessed? What is mounted as a local -appearing file system or was it being accessed via a remote protocols (i.e the file name were prefixed with root://...). In first approximation, I don't how we could detect your use case? If you were able to set `ulimit` locally to whatever limit fit your need, hadd would automatically adjust.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11276#issuecomment-1239603727:286,detect,detect,286,https://root.cern,https://github.com/root-project/root/issues/11276#issuecomment-1239603727,1,['detect'],['detect']
Safety,"We can't use the interpreter when generating a PCM as this would; generate AST nodes which then would end up in the module, which; is causing a long chain of modules (such as redefinitons as we; suddenly have the same cling warpper function multiple times). In this code path we seem to always have a number that we want; to convert to a string. So let's just use atol instead here if; the argument is just a number, which should avoid the issue with; the generated code. As we also now check if the input is a number, I added an assert; that verifies we only call atol when the string is actually a; number.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/807:430,avoid,avoid,430,https://root.cern,https://github.com/root-project/root/pull/807,1,['avoid'],['avoid']
Safety,"We didn't want to go for `StreamedField` because it may sound to close to streaming in the sense of XRootD streaming. I think once we are deep in the serialization context, ""streamed"" has not that ambiguity anymore. If we want to avoid ""streamed"", we have to go for a longer name, e.g. `rntplStreamerMode(true)` as a dictionary option.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16776#issuecomment-2443887708:230,avoid,avoid,230,https://root.cern,https://github.com/root-project/root/pull/16776#issuecomment-2443887708,1,['avoid'],['avoid']
Safety,We disabled that test in https://github.com/root-project/root/pull/14281. Relevant test failure output:; ```; ROOT::TestSupport::ForbidDiagnostics::handler(): Diagnostic in 'TUnixSystem::ACLiC':; creating shared library /github/home/ROOT-CI/build/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14121:522,abort,aborted,522,https://root.cern,https://github.com/root-project/root/issues/14121,1,['abort'],['aborted']
Safety,"We get these symbols even for a simple hello world message. While it is not clear if we can skip all weak undefined symbols, we can certainly skip those which get resolved to libgcj.so and libitm.so. Oddly enough gcc emits a weak undefined symbol to _Jv_RegisterClasses (resolved in libgcj.so) which is some gcc/java library. _ITM_deregisterTMCloneTable and _ITM_registerTMCloneTable are emitted because (resolved in libitm.so) of pointer arithmetics for transactional memory support. The current understanding is that we can safely omit these when harvesting library dependencies. This should fix the rootbench builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4254:526,safe,safely,526,https://root.cern,https://github.com/root-project/root/pull/4254,1,['safe'],['safely']
Safety,"We have to avoid using the CPyCppyy internals in the ROOT pythonization; libray. Otherwise, the ROOT pythonizations will break when updating to the; new CPyCppyy, where the internals have changed a lot. This commit makes sure the internals are not used where it can easily; avoided by using the public CPyCppyy API, or using the C Python API; directly instead of some private compatibility macros defined in; CPyCppyy (that were necessary in the past to support both Python 2 and; 3). Furthermore, the private sources of `CPyCppyy` are now not publically; exposed anymore at the CMake level. This means that we are now forced to; include them via relative paths in the ROOT repository. This makes is; much easier to spot remaining usage of the internal headers (it is quite; hard to tell otherwise that `Utility.h` is a private header from; CPyCppyy). Better exposing this should help in the discussion about how; the get rid of the remaining usage of private headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14414:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/14414,2,['avoid'],"['avoid', 'avoided']"
Safety,We implement a workaround for ctest. ROOT_ADD_TEST cmake macro adds a test executable by invoking CMAKE_COMMAND -DCMD=... This breaks our FindLibraryName function which depends on dladdr and the cmake executable confuses it. This branch is not taken outside of ctest where the code just works. This was broken before but worked because we scanned all possible dynamic paths for rdict files which is redundant.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3747:399,redund,redundant,399,https://root.cern,https://github.com/root-project/root/pull/3747,1,['redund'],['redundant']
Safety,"We might be in a situation where we linked the library into an executable and; our trigger function is inside it. There is no point in trying to load rdict; and pcm files as it will fail. In that case we exit early avoiding the; invalid state pointed by an assert. This patch is another try to fix the assert in the incrementals. @Axel-Naumann, I have tested and this patch fixes the assert. However it does not fix the test failure. I checked with a local alternative patch which did not have the early exit but just avoided the LoadPCM section and the test fails in the same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3896:215,avoid,avoiding,215,https://root.cern,https://github.com/root-project/root/pull/3896,2,['avoid'],"['avoided', 'avoiding']"
Safety,"We need a type that means ""this is a c-style-array stored in a TTree branch"", because that case is special: we need to use `TTreeReaderArray` for reading and we need to take special care to specify the branch title correctly when writing. `std::vector` is a no go because it is a type of its own that is perfectly good to read and write.; Template functions like `func` cannot be passed to `Filter` or `Define` because the nodes would not be able to detect the type of the inputs and outputs from the function signature. It would be nice to be able to write; ```; tdf.Define(""front"", [](int arr[]) { return arr[0]; }, {""arr""});; ```; but that's not valid syntax. I think it's reasonable to have a specific type that has the meaning specified above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1173#issuecomment-336085160:450,detect,detect,450,https://root.cern,https://github.com/root-project/root/pull/1173#issuecomment-336085160,1,['detect'],['detect']
Safety,We need this to avoid build errors in `yoda` and test root master in CMSSW CXXModules integration builds,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4467#issuecomment-538276379:16,avoid,avoid,16,https://root.cern,https://github.com/root-project/root/pull/4467#issuecomment-538276379,1,['avoid'],['avoid']
Safety,We need to have class.rules during configuration time to avoid silent error during generation of dictionary: Error in <TClass::ReadRules()>: Cannot find rules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4876:57,avoid,avoid,57,https://root.cern,https://github.com/root-project/root/pull/4876,1,['avoid'],['avoid']
Safety,We needed to this change for avoiding infinite loop when building with cling modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2685:29,avoid,avoiding,29,https://root.cern,https://github.com/root-project/root/pull/2685,2,['avoid'],['avoiding']
Safety,We really need these symbols to be hidden. Solves; https://github.com/root-project/root/issues/12170. ```; Unable to find target for this triple (no targets are registered) *** Break *** abort; ```; where the llvm of PyTorch ends up using the RegisterTarget function of the llvm of cling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12179:187,abort,abort,187,https://root.cern,https://github.com/root-project/root/pull/12179,1,['abort'],['abort']
Safety,We see several timeouts when running in coverage mode; this might help. We also really do not care about coverage of interpreter/: there are dedicated test suites that are not run as part of testing ROOT. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13490:15,timeout,timeouts,15,https://root.cern,https://github.com/root-project/root/pull/13490,1,['timeout'],['timeouts']
Safety,"We should also apply this patch to DistRDF. I'll let you choose if you want to put it in this PR or I will open another one later. ```diff; diff --git a/bindings/experimental/distrdf/python/DistRDF/__init__.py b/bindings/experimental/distrdf/python/DistRDF/__init__.py; index cf0d095e7a..765aea1c56 100644; --- a/bindings/experimental/distrdf/python/DistRDF/__init__.py; +++ b/bindings/experimental/distrdf/python/DistRDF/__init__.py; @@ -17,7 +17,7 @@ import types; ; import concurrent.futures; ; -from typing import TYPE_CHECKING; +from typing import Iterable, TYPE_CHECKING; ; from DistRDF.Backends import build_backends_submodules; ; @@ -71,7 +71,7 @@ def create_logger(level=""WARNING"", log_path=""./DistRDF.log""):; return logger; ; ; -def RunGraphs(proxies):; +def RunGraphs(proxies: Iterable) -> int:; """"""; Trigger the execution of multiple RDataFrame computation graphs on a certain; distributed backend. If the backend doesn't support multiple job; @@ -83,6 +83,9 @@ def RunGraphs(proxies):; actions belonging to different RDataFrame graphs will be; triggered to avoid useless calls.; ; + Return:; + (int): The number of unique computation graphs executed by this call.; +; Example:; ; @code{.py}; @@ -99,7 +102,7 @@ def RunGraphs(proxies):; ]; ; # Execute the 3 computation graphs; - RunGraphs(histoproxies); + n_graphs_run = RunGraphs(histoproxies); # Retrieve all the histograms in one go; histos = [histoproxy.GetValue() for histoproxy in histoproxies]; @endcode; @@ -121,6 +124,8 @@ def RunGraphs(proxies):; futures = [executor.submit(execute_graph, proxy.proxied_node) for proxy in uniqueproxies]; concurrent.futures.wait(futures); ; + return len(uniqueproxies); +; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13167#issuecomment-1619699859:1070,avoid,avoid,1070,https://root.cern,https://github.com/root-project/root/pull/13167#issuecomment-1619699859,1,['avoid'],['avoid']
Safety,"We should not print a warning in this case, but it can safely be ignored.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6848#issuecomment-731195832:55,safe,safely,55,https://root.cern,https://github.com/root-project/root/issues/6848#issuecomment-731195832,1,['safe'],['safely']
Safety,"We should put the Python version check at the right place. Right now, the configuration logs tell you that ROOT requires Python; 3.0, because there is no minimum version yet, which can be misleading. Also, remove some redundant comments about the minimum C++ standard for `root7` and `webgui`. This PR should maybe be backported in one of the bulk backports, so the divergence between 6.32 and `master` doesn't increase too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15168:218,redund,redundant,218,https://root.cern,https://github.com/root-project/root/pull/15168,1,['redund'],['redundant']
Safety,"We still have to avoid extra iteration happening:; ```; [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] clang::ASTReader::PassInterestingDeclsToConsumer() (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] clang::ASTReader::FinishedDeserializing() (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] clang::MultiplexExternalSemaSource::FinishedDeserializing() (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] clang::DeclContext::LoadLexicalDeclsFromExternalStorage() const (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] clang::DeclContext::decls_begin() const (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] TClingClassInfo::TClingClassInfo(cling::Interpreter*, bool) (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] TClingDataMemberInfo::TClingDataMemberInfo(cling::Interpreter*, clang::ValueDecl const*, TClingClassInfo*) (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] TCling::DataMemberInfo_Factory(void const*, ClassInfo_t*) const (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCore.so] TListOfDataMembers::Get(void const*) (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCore.so] TListOfDataMembers::FindObject(char const*) const (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] TCling::HandleNewDecl(void const*, bool, std::__1::set<TClass*, std::__1::less<TClass*>, std::__1::allocator<TClass*> >&) (no debug info); [/Volumes/HD2/build/jenkins/workspace/root-pullrequests-build/build/lib/libCling.so] TCling::UpdateListsOnCommitted(cling::Trans",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1547#issuecomment-366080627:17,avoid,avoid,17,https://root.cern,https://github.com/root-project/root/pull/1547#issuecomment-366080627,1,['avoid'],['avoid']
Safety,We thought that when you wrote `Those were not intended to be stored in the pcm at all. Duplication is avoid because to define them we parse which obviously does not work with pcm merging.` to Oksana it meant that you thought TEmulatedTuple is not needed to pcm?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2615#issuecomment-420974896:103,avoid,avoid,103,https://root.cern,https://github.com/root-project/root/pull/2615#issuecomment-420974896,1,['avoid'],['avoid']
Safety,"We try to avoid merge commits inside PRs, please use rebase instead. Thanks.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2117#issuecomment-399421600:10,avoid,avoid,10,https://root.cern,https://github.com/root-project/root/pull/2117#issuecomment-399421600,1,['avoid'],['avoid']
Safety,"We want to avoid rebasing branches from forks altogether, and just use patches only. So once my PR to CPyCppyy is merged, these lines can be removed from the sync script. It's my fault that it didn't get merged yet. I still have to implement a unit test :)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15151#issuecomment-2278395982:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/15151#issuecomment-2278395982,1,['avoid'],['avoid']
Safety,"We will probably see an increasing amount of these failures with; C++ modules as we now deserialize all declarations instead of just; the PCH ones. To safe us a lot of debugging time on where to push; the needed transaction, let's directly print the stack trace here; in the rare case that we crash here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/921:151,safe,safe,151,https://root.cern,https://github.com/root-project/root/pull/921,1,['safe'],['safe']
Safety,"WebGui6 canvas: avoid TVirtualX, mark web canvas as batch",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2805:16,avoid,avoid,16,https://root.cern,https://github.com/root-project/root/pull/2805,1,['avoid'],['avoid']
Safety,"Weird timeout in `dataframe_snapshot`, but unrelated. Merging.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10001#issuecomment-1059089575:6,timeout,timeout,6,https://root.cern,https://github.com/root-project/root/pull/10001#issuecomment-1059089575,1,['timeout'],['timeout']
Safety,"Well I did with 'rebase -i', I hope this solve the merge removing, it look like it did. Juanfe. 2017-11-27 10:09 GMT-05:00 Danilo Piparo <notifications@github.com>:. > Hi @juanfe <https://github.com/juanfe> , thanks for addressing the; > comments. Would you remove the merge commits from the PR? We try to avoid; > those in our code base.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/root-project/root/pull/1364#issuecomment-347210847>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AA_xwE2Lf0pcds4dFX5GUu5bfrJo1NTbks5s6tC3gaJpZM4QqKGu>; > .; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1364#issuecomment-347267424:306,avoid,avoid,306,https://root.cern,https://github.com/root-project/root/pull/1364#issuecomment-347267424,1,['avoid'],['avoid']
Safety,Well also depending on what the user code is going to DO with the TFile object there can be other thread safety issues. (ie multiple threads might end up with pointers to the same TFile object which was being managed by TTreeProcessorMT from a different thread),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10318#issuecomment-1091419639:105,safe,safety,105,https://root.cern,https://github.com/root-project/root/pull/10318#issuecomment-1091419639,1,['safe'],['safety']
Safety,"Well it passes a few headers by default (the one needed for compilation the dictionary code infrastructure .. which include <vector>). > leads to an infinite loop. Interestingly, it is not GenerateDictionary that is going into an infinite loop but rootcling that is failing on processing the 'incomplete' header. i.e. ```gInterpreter->GenerateDictionary(""std::vector<std::array<int, 5>>"", ""TNamed.h"")``` avoid the proposed test **and still** get rootcling into a infinite loop. You see this yourself, suspending the root.exe process and attaching (or re-running) the rootcling process running the time. (The linkdef parser seems to have problem with the 'unknown' type vector<array....>). Cheers,; Philippe.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1724#issuecomment-371922098:404,avoid,avoid,404,https://root.cern,https://github.com/root-project/root/pull/1724#issuecomment-371922098,1,['avoid'],['avoid']
Safety,"Well that's a whole different project I guess :sweat_smile: the point of this PR is showcasing generality of reading data in TDF -- parallelism and (runtime) type safety included. > How did you prevent something 'similar' with the new parser?. TDataSource allows parallel reading by design. It provides to TDF a cursor per processing slot, and each processing slot updates the entry that the cursor points to independently.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1160#issuecomment-335499653:163,safe,safety,163,https://root.cern,https://github.com/root-project/root/pull/1160#issuecomment-335499653,1,['safe'],['safety']
Safety,"Well the other question is whether we could make this behaviour the default for TTreeProcessorMT or at least for RDataFrame. Depending on the use case, I'm not sure things will work correctly anyways when using a TRef pointing to a TFile which is being read by TTreeProcessorMT. In particular because different clusters from a single file may be processed simultaneously by different threads, it won't be deterministic which particular TFile object is registered in the global TProcessUUID for a given UUID, and any attempt to make use of this is not likely to be thread safe...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10318#issuecomment-1088455084:571,safe,safe,571,https://root.cern,https://github.com/root-project/root/pull/10318#issuecomment-1088455084,1,['safe'],['safe']
Safety,"Well, I doubt there are some out-of-band data being sent/received. @rodwalker, @rdschaffer would it be possible to reproduce the problem with xrootd client logs switched on (`XRD_LOGLEVEL=Dump`)?. Regarding ABI compatibility, we ensure ABI forward compatibility, meaning that it is safe to link an application built with an older version of xrootd, with a newer version of the library (e.g. one can build his application with say `4.11.0` and then link with `4.12.0`). The opposite is not possible. Of course this applies to all releases from `4.x.x` series, the ABI has been broken when we moved to XRootD5.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6948#issuecomment-745569137:282,safe,safe,282,https://root.cern,https://github.com/root-project/root/issues/6948#issuecomment-745569137,1,['safe'],['safe']
Safety,"Well, it was never needed as such ... it was just to make includes simpler and avoid ifdefs in every TGL file :) I'm just saying you had to change every file that used it and this is really not necessary.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-535595924:79,avoid,avoid,79,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-535595924,2,['avoid'],['avoid']
Safety,"What I can try is to remove ; ```; #ifdef WIN32; #include ""Windows4Root.h""; #endif; ```; Maybe this code is redundant?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4095#issuecomment-585678811:108,redund,redundant,108,https://root.cern,https://github.com/root-project/root/pull/4095#issuecomment-585678811,1,['redund'],['redundant']
Safety,"What is fixed now? @Josiah1 's homebrew build issue? That's what this ticket is about - the GUI part is unrelated, please don't mix topics to avoid confusion.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12648#issuecomment-1528815163:142,avoid,avoid,142,https://root.cern,https://github.com/root-project/root/issues/12648#issuecomment-1528815163,1,['avoid'],['avoid']
Safety,"When CUDA is installed on macOS, `clang -v` prints also the version of CUDA that is found, which breaks version detection. As a workaround, `clang --version` prints the same information, but without printing the CUDA version. Fixes: [ROOT-9678](https://sft.its.cern.ch/jira/browse/ROOT-9678).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3926:112,detect,detection,112,https://root.cern,https://github.com/root-project/root/pull/3926,1,['detect'],['detection']
Safety,"When PR #4279 was initially sent on Aug 25th, the search for Python was; moved to RootBuildMacros in order to avoid a build failure due ot the; search for another package and the declaration of one of the new CMake; variables.; This seem not to be a problem anymore (something changed in the; meantime?), so the search for Python can be put back to the original; place.; This could also fix the tests failing with cxx17 due to a mismatch; between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4686:110,avoid,avoid,110,https://root.cern,https://github.com/root-project/root/pull/4686,1,['avoid'],['avoid']
Safety,"When RooFit's proxies were made more type safe, a typedef was introduced; to make the most type-general proxy equivalent to RooFit's previous; ""RooRealProxy"". This ensures backward compatibility.; However, the typedef and not the actual template instantiation has to be; mentioned in LinkDef.h. Otherwise, users will get a warning when reading; files. This fixes the warning that e.g. appears in #5530.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5536:42,safe,safe,42,https://root.cern,https://github.com/root-project/root/pull/5536,1,['safe'],['safe']
Safety,"When a continuous PDF is fit to binned data, bins need to be sampled more fine grained to avoid biases. This fixes; ROOT-3874; ROOT-3635. Note that the first commits before `AddRooBinSamplingPdf` are in #6693, so no need to review those.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6694:90,avoid,avoid,90,https://root.cern,https://github.com/root-project/root/pull/6694,1,['avoid'],['avoid']
Safety,"When building ROOT on slc6, it will detect and use xz (version 4.999.9) provided by OS, which is reported to have compatibility issues (`R__unzipLZMA: error 8 in lzma_code`). The proposed change fixes that by using CMake's own module (present since CMake 3.0.2) for detecting xz *and* checking it's version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3838:36,detect,detect,36,https://root.cern,https://github.com/root-project/root/pull/3838,2,['detect'],"['detect', 'detecting']"
Safety,"When calling `TObject::kOverwrite`, the data itself is not actually replaced--the metadata is changed to avoid multiple cycles, but the data persists invisibly. Similar for `Purge`. This documents that behavior.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5097:105,avoid,avoid,105,https://root.cern,https://github.com/root-project/root/pull/5097,1,['avoid'],['avoid']
Safety,"When cling is compiled standalone against an external instance of LLVM and clang, cling cannot be reliably used. This is because ```createCI()``` throws an error about a non-existing clang resource directory inside the cling directories and a crash occurs shortly afterwards, when a code to be interpreted is entered. The reason of the above seems to be the inability of cling and its build system to flag properly that there is no built-in LLVM/clang and therefore cling should use the external one instead. This PR fixes it by introducing the ```LLVM_PATH``` pre-processor definition which is populated automatically by CMake with the detected LLVM directory as soon as both ```builtin_llvm``` and ```builtin_clang``` are off. If I should have done this in a different way, there are pieces of code where ```LLVM_PATH``` should be also used but it isn't (or vice versa), or you have any other comments, I'm happy to hear your suggestions :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13175:637,detect,detected,637,https://root.cern,https://github.com/root-project/root/pull/13175,1,['detect'],['detected']
Safety,"When cmake runs, detect and write chrome version into the rootrc file. When headless browser is required - switch `--headless=new` only for detected new version of chrome",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14800:17,detect,detect,17,https://root.cern,https://github.com/root-project/root/pull/14800,2,['detect'],"['detect', 'detected']"
Safety,"When composing the expressions to jit autoparsing is redundant as we; know what and when to synthesize. This patch has two effects, first it limits the recursive behavior of; autoparse and autoload (useful for modules); and secondly avoids deep call; chains of virtual function calls. EDIT: Rationale -- I was working on a new, cxxmodules-based implementation of TCling::GetClassSharedLibs which does not rely on rootmap files. I had to debug a few failures in RDF and I noticed the recursive calls to autoparse and autoload always without success. I thought it might be a simplification (and performance optimization) if we disabled that part.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3765:53,redund,redundant,53,https://root.cern,https://github.com/root-project/root/pull/3765,2,"['avoid', 'redund']","['avoids', 'redundant']"
Safety,"When creating histograms without adding them to gDirectory, do not use; global TH1::fgDirectoryStatus flag, since it is not thread safe and use instead,; as suggested by Philippe, TDirectory::TContext.; By creating a TDirectory::TContext witha null directory, gDirectory is set in the current context to; a nullptr and the corresponding histograms will not be added to gDirectory. Fix this for TGraph, TGraph2D and TEfficiency. This should finally fix ROOT-8095",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6514:131,safe,safe,131,https://root.cern,https://github.com/root-project/root/pull/6514,1,['safe'],['safe']
Safety,"When creating the test data sets for the CNN and RNN tutorials, it is better to create the TTree attached to the output file so we can avoid a potential issue when deleting the file and the TTree's",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14368:135,avoid,avoid,135,https://root.cern,https://github.com/root-project/root/pull/14368,1,['avoid'],['avoid']
Safety,"When deleting a TTree, we delete the list of friends and aliases. Their deletion is broadcasted; through RecursiveRemove which eventually reached back to the original TTree.; And if TTree::RecursiveRemove then tries to call RecursiveRemove on those deleted list ... then; disaster follows ... in the form of:. ```; pure virtual method called; terminate called without an active exception; Aborted (core dumped); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5924:389,Abort,Aborted,389,https://root.cern,https://github.com/root-project/root/pull/5924,1,['Abort'],['Aborted']
Safety,When getting the HIstogram associated to a TGraph avoid to add it by default first in gDirectory by using TH1::AddDirectory(false).; This fixes ROOT-8095. This is already the case in TGraph2D::GetHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6493:50,avoid,avoid,50,https://root.cern,https://github.com/root-project/root/pull/6493,1,['avoid'],['avoid']
Safety,"When importing data from a TTree in a RooDataSet, if some of the branches are not existing in the Tree ; do not import any data and make an empty dataset. ; This avoid importing the variables using the current values, which will be identical for every event.; This fixes ROOT-5112. After https://github.com/root-project/root/commit/b5c2fb7909fbd1e483a3e17b21d24093409d67c1 an error message was printed, but this can pass easly unnoticed. . If one needs to add ad-hoc some column to the dataset, it is also very easy to add branches to a TTree, using RDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7347:162,avoid,avoid,162,https://root.cern,https://github.com/root-project/root/pull/7347,1,['avoid'],['avoid']
Safety,"When performing multi-thread reads of ROOT files, we need to pick the number; of TBB tasks among which we will divide the dataset. Our heuristic is ""try to produce around `T = N/ntrees` tasks per tree per; worker thread"": we don't know the number of clusters in each tree before; we open the files, so we don't know the total number of clusters upfront.; Instead we set a ""desired value"" of T tasks per tree and per thread, and; then when each thread opens a file it tries to make T tasks out of it (if; the file turns out to be too small, it might end up producing _less_ tasks than; desired. If we are processing `M > N` small files, we might end up producing; _more_ tasks per worker than N). N is a free parameter, and it represents the desired total number of; tasks per worker. If N is too low, parallelism will be too coarse-grained; and we might get imbalance/tails with bad parallelization.; The higher N is, the more CPU time we spend in task setup/teardown. Empirically, I believe we have set N too high (before this patch we set; it to 24). We often see runtime improvements in benchmarks by setting it; to a lower value, e.g. 10.; Again from experience, N == 10 should be a high-enough value to avoid; load imbalance between threads while it significantly reduces the amount; of tasks spawned (and the overhead that comes with it).; Therefore this patch sets N to 10. More discussion:; - https://mattermost.web.cern.ch/root/pl/8ay6my4pwbru7kzqs97f8xcdre; - https://docs.oneapi.com/versions/latest/onetbb/tbb_userguide/Task-Based_Programming.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8565:1208,avoid,avoid,1208,https://root.cern,https://github.com/root-project/root/pull/8565,1,['avoid'],['avoid']
Safety,When run C++17 kernel in Jupyter notebook cause some errors; due to currently clang-5.0 in https://root.cern.ch/download/cling/ is not; support c++17.; So add support to C++1z for Jupyter kernel and we can try some new; features in Jupyter notebook. for avoiding following error:. [I 05:46:38.253 NotebookApp] Kernel restarted:; d3413fa0-7046-4b63-912b-a286610eacc1; error: invalid value 'c++17' in '-std=c++17'; note: use 'c++98' or 'c++03' for 'ISO C++ 1998 with amendments' standard; note: use 'gnu++98' or 'gnu++03' for 'ISO C++ 1998 with amendments and; GNU extensions' standard; note: use 'c++11' for 'ISO C++ 2011 with amendments' standard; note: use 'gnu++11' for 'ISO C++ 2011 with amendments and GNU; extensions' standard; note: use 'c++14' for 'ISO C++ 2014 with amendments' standard; note: use 'gnu++14' for 'ISO C++ 2014 with amendments and GNU; extensions' standard; note: use 'c++1z' for 'Working draft for ISO C++ 2017' standard; note: use 'gnu++1z' for 'Working draft for ISO C++ 2017 with GNU; extensions' standard,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/952:254,avoid,avoiding,254,https://root.cern,https://github.com/root-project/root/pull/952,1,['avoid'],['avoiding']
Safety,"When the EDM value in Migrad is NaN, it nevertheless reports convergence, because failure to converge is detected with the condition (edm > edmval) which fails (wrongly) if edm is NaN. The added code aborts the minimization at the earliest point if edm is NaN.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6415:105,detect,detected,105,https://root.cern,https://github.com/root-project/root/pull/6415,2,"['abort', 'detect']","['aborts', 'detected']"
Safety,"When the Min or Max actions are jitted, their result type is always; double, independently of the column type. If the column type happens; to be of a different type, std::min won't compile because template; parameter type deduction is ambiguous.; We now always explicitly cast the arguments of std::min to the desired; result type to avoid the ambiguity.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6436:334,avoid,avoid,334,https://root.cern,https://github.com/root-project/root/pull/6436,1,['avoid'],['avoid']
Safety,"When the Min or Max actions are jitted, their result type is always; double, independently of the column type. If the column type happens; to be of a different type, std::min won't compile because template; parameter type deduction is ambiguous.; We now always explicitly cast the arguments of std::min to the desired; result type to avoid the ambiguity. This fixes #6435.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6437:334,avoid,avoid,334,https://root.cern,https://github.com/root-project/root/pull/6437,1,['avoid'],['avoid']
Safety,"When the column name contains a dot, we replace it with an underscore; and use the modified name as corresponding variable name for jitted; Defines/Filters.; To avoid potential name clashes with pre-existing columns, the; modified name is now prefixed with ""__tdf_arg_"", as it was already; the case before the latest refactoring of jitting. I'd like to introduce a test for this case, but I can't because of a different issue:; given a branch defined as `t.Branch(""v"", &v, ""a/I:b/I"")`, `Define(""a"", ""v.a"")` does not work: `""v""` comes before than `""v.a""` in the list of branches that we create, so it matches first, and later TDF complains that `""v""` is not a branch. @etejedor this is in the new `GetBranchNames`, do you think it might be an easy fix?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1857:161,avoid,avoid,161,https://root.cern,https://github.com/root-project/root/pull/1857,1,['avoid'],['avoid']
Safety,"When training a PyTorch model within TMVA (during `Factory::BookMethod`), this crash happens:; ```; : Preparing the Decorrelation transformation...; : Preparing the Gaussian transformation...; TFHandler_PyTorch : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]; : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]; : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]; : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]; : -----------------------------------------------------------; TFHandler_PyTorch : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.0089276 1.0040 [ -3.1195 5.7307 ]; : var2: 0.0079596 0.99992 [ -3.1195 5.7307 ]; : var3: 0.0079663 1.0001 [ -3.1195 5.7307 ]; : var4: 0.0074148 0.99773 [ -3.1195 5.7307 ]; : -----------------------------------------------------------; : Split TMVA training data in 6400 training events and 1600 validation events; : Print Training Model Architecture; : Option SaveBestOnly: Only model weights with smallest validation loss will be stored; Program aborted due to an unhandled Error:; Unable to find target for this triple (no targets are registered) *** Break *** abort; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12170:1123,abort,aborted,1123,https://root.cern,https://github.com/root-project/root/issues/12170,2,['abort'],"['abort', 'aborted']"
Safety,"When using C++11, the cache used by G__FastAllocString utilizes; a non-locking thread safe circular buffer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/34:86,safe,safe,86,https://root.cern,https://github.com/root-project/root/pull/34,1,['safe'],['safe']
Safety,"When using `TLegend::AddEntry()`, it is not necessary to get a pointer to the plotted object via `RooPlot::findObject()`. One can just use the `AddEntry` overload that takes the name as a string, and then looks up the object in the plot itself. This should be updated to avoid that users copy-paste overly verbose code from the tutorials. I noticed this when copy pasting code myself for a RooFit tutorial. Also fixes a typo in `rf711_lagrangianmorph.py`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11555:271,avoid,avoid,271,https://root.cern,https://github.com/root-project/root/pull/11555,1,['avoid'],['avoid']
Safety,"When using `builtin_openssl=ON`, CMake erroneously exports the builtin static libraries in `ROOTConfig-targets.cmake`, which causes problems with dependent projects. In order to avoid this, we need `Net` and `RHTTP` to use SSL as a private dependency. Since CMake requires `target_link_libraries()`; to either be all-plain (as before) or all-keyword (required to allow `PRIVATE` linking), we need to move the build system to use all-keyword linking only. Fixes: [ROOT-9532](https://sft.its.cern.ch/jira/browse/ROOT-9532).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2323:178,avoid,avoid,178,https://root.cern,https://github.com/root-project/root/pull/2323,1,['avoid'],['avoid']
Safety,"When using option ""x"" for TPrincipal::MakeHistograms(), the histogram is made with the number of bins as calculated by:; `Int_t xbins = fNumberOfDataPoints/100;`; If the number of data points is less than 100, this will try to make a histogram with 0 bins. The code still functions, as TH1 itself compensates by setting the number of bins to 1, and issuing a warning. But clearly TPrincipal could be smarter to avoid the unnecessary / unhelpful warning. The same happens for the calculation of `dbins` with the ""d"" option. Sidenote: this was a non-urgent issue I raised 7 years ago, but if no one else has been complaining, it's clearly a low priority ;-). https://sft.its.cern.ch/jira/browse/ROOT-8238. -Gene",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12926:411,avoid,avoid,411,https://root.cern,https://github.com/root-project/root/pull/12926,1,['avoid'],['avoid']
Safety,"When we run into an unkown identifier that is a namespace, we don't; really need to load its corresponding modules. Instead, we create a new; module that forward declared all namespaces and always load it first. By; doing so, we can avoid loading a lot of unnecessary modules. Signed-off-by: Jun Zhang <jun@junz.org>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910:233,avoid,avoid,233,https://root.cern,https://github.com/root-project/root/pull/10910,1,['avoid'],['avoid']
Safety,"When wrong-formatted TMessage is received, length of buffer may be 0.; As result, buffer may not be allocated at all.; One should avoid that in such case memory is accessed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4551:130,avoid,avoid,130,https://root.cern,https://github.com/root-project/root/pull/4551,1,['avoid'],['avoid']
Safety,"When you are using large precision number, you blow up output XML files.; One can use compression method from TBufferText.; I use it to control size of output JSON/XML files and avoids output like `17.000000000000000`. Instead `17` will be produced. I can provide code for that.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1901#issuecomment-383592870:178,avoid,avoids,178,https://root.cern,https://github.com/root-project/root/pull/1901#issuecomment-383592870,1,['avoid'],['avoids']
Safety,"While TCanvas, shown in web-browser, marked as batch canvas, all customs object painting performed via gVirtualPS classes. Therefore one need to catch all these calls and record for SVG creation in the client. TWebPadPainter is remained as fall-back solution if some objects painter does not follow strictly the ROOT painting logic. ; Highly optimize data which are transferred to clients - avoid large TObject overhead for simple fill/line/marker attributes. ; Try to merge painting if there are too many objects on the TCanvas - like in tutorials/graphics/greyscale.C macro. In such case simple SVG fails - one should try to combine primitives drawn with same attributes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2862:391,avoid,avoid,391,https://root.cern,https://github.com/root-project/root/pull/2862,1,['avoid'],['avoid']
Safety,"While debugging the failure triggered by a recent PR updating the behavior of `gDirectory`: https://github.com/root-project/root/pull/11908#issuecomment-1361086304 (The reported error is that a name/symbol that should have been detected and loaded by Cling was not found ... the direct cause was that `gDirectory` was unexpectedly `nullptr`), I discovered that notebooks (or a least the way they are run in the test `JupyROOT-ROOT_kernel_notebook`), runs several threads to actually execute the cells. It is also clear from my investigation that it does not enable thread safety. Whether we need to change depends on whether `Jupyter` (or the way it is use here) guaranteed that only one of the thread would ever be run concurrently (if not then we must enable thread safety). However, one more thing to consider is that when thread safety is enabled, each thread get its own thread local gDirectory pointers. If each cell is run in a separate thread, then change to `gDirectory` in one cell will not be reflected in the next cell. (this would be true also for any user level thread local variable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11955:228,detect,detected,228,https://root.cern,https://github.com/root-project/root/issues/11955,4,"['detect', 'safe']","['detected', 'safety']"
Safety,"While virtual `Copy(TObject &obj)` method is used in copy constructors, wrong cast may happen.; Simplest reproducer:; ```; TProfile p;; TH1D h(p);; ```; Causes fatal crash:; ```; Fatal in <TProfile::Copy>: Cannot copy a TProfile in a TH1D; aborting; #0 0x00007f2293b0a83a in wait4 () from /lib64/libc.so.6; #1 0x00007f2293a7403b in do_system () from /lib64/libc.so.6; #2 0x00007f22942c5a3d in TUnixSystem::StackTrace() () from /home/linev/build/webgui/lib/libCore.so; #3 0x00007f229418294c in DefaultErrorHandler(int, bool, char const*, char const*) () from /home/linev/build/webgui/lib/libCore.so; #4 0x00007f22942497bd in ErrorHandler () from /home/linev/build/webgui/lib/libCore.so; #5 0x00007f22941988f4 in TObject::Fatal(char const*, char const*, ...) const () from /home/linev/build/webgui/lib/libCore.so; #6 0x00007f227d6fbde8 in TProfile::Copy(TObject&) const [clone .cold] () from /home/linev/build/webgui/lib/libHist.so; #7 0x00007f227d80aba7 in TH1D::TH1D(TH1D const&) () from /home/linev/build/webgui/lib/libHist.so; #8 0x00007f228c9dc028 in ?? (); #9 0x00007f2293f83460 in ?? (); #10 0x00007f228f062cfe in cling::IncrementalExecutor::runStaticInitializersOnce(cling::Transaction&) () from /home/linev/build/webgui/lib/libCling.so; #11 0x00007f228efd6ea4 in cling::Interpreter::executeTransaction(cling::Transaction&) () from /home/linev/build/webgui/lib/libCling.so; #12 0x00007f228f07511c in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /home/linev/build/webgui/lib/libCling.so; #13 0x00007f228f076c68 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /home/linev/build/webgui/lib/libCling.so; #14 0x00007f228efd4bb8 in cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<cha",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10919:240,abort,aborting,240,https://root.cern,https://github.com/root-project/root/issues/10919,1,['abort'],['aborting']
Safety,"While we are at it, should we call it `ROOT::RDF::Experimental::FromRNTuple` to avoid confusion with `TNtuple`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11125#issuecomment-1214934442:80,avoid,avoid,80,https://root.cern,https://github.com/root-project/root/pull/11125#issuecomment-1214934442,1,['avoid'],['avoid']
Safety,"Whoops, sorry about that! Went too quick. The other fix is nicer and avoids the short-lived allocation altogether.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7447#issuecomment-795801639:69,avoid,avoids,69,https://root.cern,https://github.com/root-project/root/pull/7447#issuecomment-795801639,1,['avoid'],['avoids']
Safety,Why did the hash of the file in lcgpackage change even-though the xrootd version did not change? (i.e. Didn't we migrate away from downloading from github to avoid exactly this kind of problem?),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11106#issuecomment-1204549271:158,avoid,avoid,158,https://root.cern,https://github.com/root-project/root/pull/11106#issuecomment-1204549271,1,['avoid'],['avoid']
Safety,Willing to take that risk. Things should be less broken than before anyway.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6056#issuecomment-661736178:21,risk,risk,21,https://root.cern,https://github.com/root-project/root/pull/6056#issuecomment-661736178,1,['risk'],['risk']
Safety,"Wim says: adding 'shell=True' makes the command run on; /bin/sh and allows you to use shell features (such as expansion and; replacement of variables). But nothing in the command seems to need that; feature, and anyway it's a risky thing to rely on, or what am I missing?. Spawning an intermediate shell makes a mess of the environment when running; under conda on Mac in the non-build environment. Running the normal way as; per the patched line above, and all seems good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4406:226,risk,risky,226,https://root.cern,https://github.com/root-project/root/pull/4406,1,['risk'],['risky']
Safety,"Windows failure was a git fetching error, not related to my changes:; ```; 13:51:59 > git config remote.origin.url http://root.cern/git/root.git # timeout=10; 13:52:30 Cleaning workspace; 13:52:30 > git rev-parse --verify HEAD # timeout=10; 13:53:05 Resetting working tree; 13:53:05 > git reset --hard # timeout=10; 14:03:09 ERROR: Timeout after 10 minutes; 14:03:22 ERROR: Error fetching remote repo 'origin'; 14:03:22 hudson.plugins.git.GitException: Failed to fetch from http://root.cern/git/root.git; 14:03:22 	at hudson.plugins.git.GitSCM.fetchFrom(GitSCM.java:1000); 14:03:22 	at hudson.plugins.git.GitSCM.retrieveChanges(GitSCM.java:1241); 14:03:22 	at hudson.plugins.git.GitSCM.checkout(GitSCM.java:1301); 14:03:22 	at org.jenkinsci.plugins.workflow.steps.scm.SCMStep.checkout(SCMStep.java:125); 14:03:22 	at org.jenkinsci.plugins.workflow.steps.scm.SCMStep$StepExecutionImpl.run(SCMStep.java:93); 14:03:22 	at org.jenkinsci.plugins.workflow.steps.scm.SCMStep$StepExecutionImpl.run(SCMStep.java:80); 14:03:22 	at org.jenkinsci.plugins.workflow.steps.SynchronousNonBlockingStepExecution.lambda$start$0(SynchronousNonBlockingStepExecution.java:47); 14:03:22 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511); 14:03:22 	at java.util.concurrent.FutureTask.run(FutureTask.java:266); 14:03:22 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149); 14:03:22 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624); 14:03:22 	at java.lang.Thread.run(Thread.java:748); 14:03:22 Caused by: hudson.plugins.git.GitException: Command ""git reset --hard"" returned status code -1:; ```; Why is Jenkins trying to fetch from http://root.cern/git/root.git rather than from GitHub?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8197#issuecomment-843116543:147,timeout,timeout,147,https://root.cern,https://github.com/root-project/root/pull/8197#issuecomment-843116543,4,"['Timeout', 'timeout']","['Timeout', 'timeout']"
Safety,"With @etejedor 's help we could reduce the problem that causes the test failures to:. ```cpp; #include ""TClassRef.h"". int main() {; TClassRef cr(""ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>"");; cr->GetListOfMethods(true);; return 0;; }; ```. which breaks with the following stacktrace:. ```; #0 0x00007ffff53f9ef5 in raise () from /usr/lib/libc.so.6; #1 0x00007ffff53e3862 in abort () from /usr/lib/libc.so.6; #2 0x00007ffff53e3747 in __assert_fail_base.cold () from /usr/lib/libc.so.6; #3 0x00007ffff53f2646 in __assert_fail () from /usr/lib/libc.so.6; #4 0x00007fffec0bcec0 in TClingCXXRecMethIter::InstantiateTemplateWithDefaults (this=0x555556ead490, TD=0x555556be3a30) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:182; #5 0x00007fffec0ba7d8 in TClingMemberIter::Advance (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.cxx:140; #6 0x00007fffec0b8b0f in TClingMemberIter::Next (this=0x555556ead490) at ../../../../bendavidbook/core/metacling/src/TClingMemberIter.h:159; #7 0x00007fffec0be2cd in TClingMethodInfo::Next (this=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TClingMethodInfo.cxx:438; #8 0x00007fffebf51dba in TCling::MethodInfo_Next (this=0x5555556433a0, minfo=0x555556ead450) at ../../../../bendavidbook/core/metacling/src/TCling.cxx:9017; #9 0x00007ffff7d8192f in TListOfFunctions::Load (this=0x555556dbb2b0) at ../../../bendavidbook/core/meta/src/TListOfFunctions.cxx:391; #10 0x00007ffff7d51b82 in TClass::GetListOfMethods (this=0x5555561abdb0, load=true) at ../../../bendavidbook/core/meta/src/TClass.cxx:3803; #11 0x00005555555551dd in main () at repro.cpp:5; ```. Work in progress.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7630#issuecomment-819501708:392,abort,abort,392,https://root.cern,https://github.com/root-project/root/pull/7630#issuecomment-819501708,1,['abort'],['abort']
Safety,"With Davix not present on the machine, the tutorials tutorials/v7/ntuple/ntpl004_dimuon.C is ran and fails:; ```; ""tutorial-v7-ntuple-ntpl004_dimuon"" start time: Dec 04 11:53 CST; Output:; ----------------------------------------------------------. Processing /home/pcanal/root_working/code/root/tutorials/v7/ntuple/ntpl004_dimuon.C...; terminate called after throwing an instance of 'std::runtime_error'; what(): Cannot find plugin handler for RRawFileDavix; CMake Error at /home/pcanal/root_working/build/master-opt/RootTestDriver.cmake:237 (message):; error code: Child aborted. <end of output>; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6916:573,abort,aborted,573,https://root.cern,https://github.com/root-project/root/issues/6916,1,['abort'],['aborted']
Safety,"With `RNTupleWriter::Append` / `RNTupleParallelWriter::Append`, the application must organize synchronization to the underlying `TFile`. To avoid locking for every `Fill`, https://github.com/root-project/root/pull/15239 introduced `FillNoCommit` and gives some guarantees so that locking is only necessary when calling `CommitCluster`. However that's still not ideal because `CommitCluster` will first call `CommitCluster` on every field, which will flush the column write buffers and trigger compression. This can be substantial for many fields or very large page sizes (compared to the cluster size). Ideally a `RNTupleFillContext` had a method to perform this work outside of the critical section, like `PrepareCommitCluster` or `FlushPageBuffers`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16241:140,avoid,avoid,140,https://root.cern,https://github.com/root-project/root/issues/16241,1,['avoid'],['avoid']
Safety,"With `builtin_llvm=ON`, all of our build system magic in `interpreter/CMakeLists.txt` applies, in particular; https://github.com/root-project/root/blob/779ecb965abcb0658fc7a3524e2d1448a2504bff/interpreter/CMakeLists.txt#L134-L148; We do this because ROOT requires an exact version of LLVM and we want to avoid at all costs that its symbols interfere with another LLVM library that lives in the same process, with potentially a different version...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14778#issuecomment-1956064734:304,avoid,avoid,304,https://root.cern,https://github.com/root-project/root/issues/14778#issuecomment-1956064734,1,['avoid'],['avoid']
Safety,"With a task scheduler, `RPageSinkBuf::CommitPage` copies the uncompressed page; https://github.com/root-project/root/blob/226e4c00e5dc4b7aaf881bad810a0c78c8a14185/tree/ntuple/v7/src/RPageSinkBuf.cxx#L167-L170; for asynchronous compression. However, the uncompressed page is only released in `FlushClusterImpl` which leads to significant memory overhead for high compression factors (such as CMS miniAOD). In principle, the uncompressed buffer can be released directly after compression, which is only a bit tricky because it requires the allocator to be thread-safe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16753:561,safe,safe,561,https://root.cern,https://github.com/root-project/root/issues/16753,1,['safe'],['safe']
Safety,"With current master, I did:; ```cpp; #include <ROOT/RDataFrame.hxx>; #include <ROOT/RVec.hxx>; #include <ROOT/RDFHelpers.hxx>. int main() {; auto h = ROOT::RDataFrame(10); .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}); .Vary(; ""x"",; [](int x) {; return ROOT::RVecI{x - 1, x + 1};; },; {""x""}, 2); .GraphAsymmErrors<int, int, int, int, int, int>(""x"", ""x"", ""x"", ""x"", ""x"", ""x"");; auto hs = ROOT::RDF::Experimental::VariationsFor(h);; }; ```. From gdb, right after `auto hs = ...`, the stack trace is:; ```; [0] from 0x00007ffff52e454c in __pthread_kill_implementation; [1] from 0x00007ffff5297cf6 in raise; [2] from 0x00007ffff526a813 in abort; [3] from 0x00007ffff55e0a06 in __gnu_cxx::__verbose_terminate_handler() [clone .cold]; [4] from 0x00007ffff55ec0bc in __cxxabiv1::__terminate(void (*)()); [5] from 0x00007ffff55ec127 in std::terminate(); [6] from 0x00007ffff55ec3c9 in __cxa_throw; [7] from 0x000000000048a042 in ROOT::Detail::RDF::RActionImpl<ROOT::Internal::RDF::FillTGraphAsymmErrorsHelper>::CallMakeNew<>(void*)+180 at [...]/rb/include/ROOT/RDF/RActionImpl.hxx:61; [8] from 0x0000000000488d23 in ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillTGraphAsymmErrorsHelper, ROOT::Detail::RDF::RLoopManager, ROOT::TypeTraits::TypeList<int, int, int, int, int, int> >::MakeVariedAction(std::vector<void*, std::allocator<void*> >&&)+293 at [...]/rb/include/ROOT/RDF/RAction.hxx:164; [9] from 0x00000000004775f3 in ROOT::RDF::Experimental::VariationsFor<TGraphAsymmErrors>(ROOT::RDF::RResultPtr<TGraphAsymmErrors>)+744 at [...]/rb/include/ROOT/RDFHelpers.hxx:249; ```; No deallocation :(",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10484#issuecomment-1113328430:652,abort,abort,652,https://root.cern,https://github.com/root-project/root/issues/10484#issuecomment-1113328430,1,['abort'],['abort']
Safety,With the latest version of the `centos` C++ compiler a new warning appeared in 20 years old code.; The way to fix/deactivate it is to compile the files producing this warning with the option `-Wbidirectional=none` (found by @couet) . @bellenot found the way to set this option in the `CMakeLists.txt` files for the compilers having this option.; Fix warning:; ```; warning: unpaired UTF-8 bidirectional character detected [-Wbidirectional=]; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9348:413,detect,detected,413,https://root.cern,https://github.com/root-project/root/pull/9348,1,['detect'],['detected']
Safety,"With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):; ```; Error in <readfile>: For entries 0 we have result=19200; ```; This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:; ```; if (!foundRelatedSplit) {; continue;; }; ```; which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```; diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx; index 58b50a93..e0aef7e1 100644; --- a/root/io/issue-9899/read_cmssw_class_v3.cxx; +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx; @@ -129,10 +129,8 @@ struct PersHighData {; }; int check(int slide = 1) {; int res = 0;; -#ifdef FIXED_ISSUE_99xx; for(auto &d : fPersLowData); res += d.check(slide, 0);; -#endif; for(auto &d : fLowData); res += d.check(slide * BIT(6), 10);; return res;; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9924:554,avoid,avoid,554,https://root.cern,https://github.com/root-project/root/issues/9924,1,['avoid'],['avoid']
Safety,"With this PR, a proper exception is thrown when a user tries to load an out-of-bounds RNTuple entry (instead of aborting due to a failed assert statement).; To prevent the `RColumn` destructor from attempting to again clean up the page for the entry that was (potentially) loaded prior to attempting to read the out-bounds entry, `fReadPage` in `RColumn` is reset to a null page before attempting to populate it. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14129:112,abort,aborting,112,https://root.cern,https://github.com/root-project/root/pull/14129,1,['abort'],['aborting']
Safety,"With very few entries passing a given RDataFrame cutflow, it can happen; that a TBB task ends up processing zero ""good"" entries.; In that scenario, it could happen that the first TTree header flushed to; the output file from a Snapshot action was for a tree with no entries and; no branches. This effectively set the number of branches to; zero for all the content written to file, even if following buffers; contained well-formed TTrees. With this commit, if the output tree contains zero entries, we avoid; flushing it to file. And since the next task will remove this TTree from; the output directory, we can be sure that the buffer with the malformed; TTree will never be written out. This fixes ROOT-9471. <hr>. The fix requires that output trees are deregistered from output directories at the end of a task, so that the output directory does not ever try to flush them. This is done by giving `SnapshotHelperMT` ownership of its output trees (see explanation in the relevant commit message).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2197:502,avoid,avoid,502,https://root.cern,https://github.com/root-project/root/pull/2197,1,['avoid'],['avoid']
Safety,"Without a task scheduler, seal in `CommitPage`. This avoids a page allocation and, in most cases, a copy of the uncompressed buffer (unless the element type is mappable and compression is disabled, in which case the sealed page would otherwise alias the page buffer). It also ensures that `CommitCluster` can vector-commit all sealed pages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14193:53,avoid,avoids,53,https://root.cern,https://github.com/root-project/root/pull/14193,1,['avoid'],['avoids']
Safety,"Writer::EmitStmt(unsigned int, unsigned int) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x1121b5a6); #24 0x68c8b594 in clang::ASTStmtWriter::Emit(void) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x1121b594); #25 0x68ca4c29 in clang::ASTWriter::WriteSubStmt(class clang::Stmt *) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x11234c29); #26 0x68c8b96c in clang::ASTRecordWriter::FlushStmts(void) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x1121b96c); #27 0x68b342ca in clang::ASTRecordWriter::Emit(unsigned int, unsigned int) (F:\gitP\root-project\root\build_x86_asan2\bin\libCling.dll+0x110c42ca); ; ==6948==HINT: if you don't care about these errors you may set allocator_may_return_null=1; SUMMARY: AddressSanitizer: out-of-memory (C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\HostX64\x86\clang_rt.asan_dynamic-i386.dll+0x1003e141) ; ==6948==ABORTING; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(241,5): error MSB8066: Custom build for 'F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\1b80de060c1a00976f83382f69cf2b7f\allDict.cxx.pch.rule;F:\gitP\root-project\root\build_x86_asan2\CMakeFiles\ecd3d997f4f89e0243288555110c5833\onepcm.rule;F:\gitP\root-project\root\CMakeLists.txt' exited with code 1. ; ```; ### To Reproduce; 1. Open a x86 Native Tools Command Prompt for VS 2019; 2. `git clone https://github.com/root-project/root.git root_src`; 3. `mkdir root_build && cd root_build`; 4. `cmake -G""Visual Studio 16 2019"" -A Win32 -Dtesting=ON -Droottest=ON ../root_src`; 5. `set _CL_= /fsanitize=address /GS- /wd5072 & set _LINK_= /InferASanLibs /incremental:no /debug` (please make sure use _ _ to inclose CL and LINK, since _ _ will style text Italic here ); 6. `set ASAN_OPTIONS=detect_odr_violation=0`; 7. `cmake --build . --config Release` . ### Setup; <!--; 1. Operating system: Windows 10; 2. How yo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9445:6097,ABORT,ABORTING,6097,https://root.cern,https://github.com/root-project/root/issues/9445,1,['ABORT'],['ABORTING']
Safety,Wrong delete operator was used (it is @a5db401 commit); To avoid any confusion in the future - just use TString instead,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4881:59,avoid,avoid,59,https://root.cern,https://github.com/root-project/root/pull/4881,1,['avoid'],['avoid']
Safety,"YMBOLIZER_PATH` to point to it):; 0 lli 0x000000010104824c llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 56; 1 lli 0x00000001010471b4 llvm::sys::RunSignalHandlers() + 128; 2 lli 0x00000001010488c4 SignalHandler(int) + 304; 3 libsystem_platform.dylib 0x00000001826b1c44 _sigtramp + 56; 4 libsystem_pthread.dylib 0x0000000182669c24 pthread_kill + 292; 5 libsystem_c.dylib 0x00000001825b1864 abort + 104; 6 libc++abi.dylib 0x0000000182629cf8 __cxxabiv1::__aligned_malloc_with_fallback(unsigned long) + 0; 7 libc++abi.dylib 0x000000018261ae4c demangling_unexpected_handler() + 0; 8 libobjc.A.dylib 0x00000001825136d8 _objc_terminate() + 160; 9 libc++abi.dylib 0x00000001826290e0 std::__terminate(void (*)()) + 20; 10 libc++abi.dylib 0x000000018262beb0 __cxa_get_exception_ptr + 0; 11 libc++abi.dylib 0x000000018262be5c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 0; 12 libc++abi.dylib 0x000000010224003c __cxxabiv1::exception_cleanup_func(_Unwind_Reason_Code, _Unwind_Exception*) + 18446744071557956064; 13 lli 0x0000000100c8f680 llvm::MCJIT::runFunction(llvm::Function*, llvm::ArrayRef<llvm::GenericValue>) + 768; 14 lli 0x0000000100bd574c llvm::ExecutionEngine::runFunctionAsMain(llvm::Function*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, char const* const*) + 1464; 15 lli 0x000000010070e4d8 main + 8576; 16 libdyld.dylib 0x0000000182685f34 start + 4; zsh: abort ./bin/lli throw.ll; ```. It could be that Apple changed *something* about their exception handling ABI for `arm64` because it's not even possible to build my own `libunwind` to debug the unwinding as I did for ROOT-10703 - it complains about invalid entries. However `clang++` emits the right object files, at least when compiling to an executable directly. So maybe it's at runtime? I'll need to think about this...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7541#issuecomment-801803930:2202,abort,abort,2202,https://root.cern,https://github.com/root-project/root/issues/7541#issuecomment-801803930,1,['abort'],['abort']
Safety,"Yeah, sorry, I overlooked at the timeout parameter (100 seconds instead of 100 milliseconds). I'll commit the necessary changes (5 seconds) in a few minutes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8292#issuecomment-867621725:33,timeout,timeout,33,https://root.cern,https://github.com/root-project/root/issues/8292#issuecomment-867621725,1,['timeout'],['timeout']
Safety,"Yes I would like some feedback on the use of std::vector so I can take care of that appropriately together with rebasing. If this strategy is agreed I can also clean up a bit more to avoid the redundant size counters, etc.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7499#issuecomment-828637952:183,avoid,avoid,183,https://root.cern,https://github.com/root-project/root/pull/7499#issuecomment-828637952,4,"['avoid', 'redund']","['avoid', 'redundant']"
Safety,"Yes `docbuild` was empty and I removed `docoutput`. I just redid it. I get the same. Elsewhere:; ```; Generating docs for compound TestTH3DRange...; Generating docs for compound TExceptionHandler...; doxygen(79550,0x70000e706000) malloc: *** error for object 0x7f822b76c000: pointer being freed was not allocated; doxygen(79550,0x70000e706000) malloc: *** set a breakpoint in malloc_error_break to debug; /bin/sh: line 1: 79550 Abort trap: 6 /Users/couet/bin/doxygen /tmp/docbuild/Doxyfile.dox; make[2]: *** [CMakeFiles/dox] Error 134; make[1]: *** [CMakeFiles/dox.dir/all] Error 2; make: *** [all] Error 2; couet@Oliviers-MBP docbuild % . ```; I typed ; ```; make -j8; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9966#issuecomment-1077428404:428,Abort,Abort,428,https://root.cern,https://github.com/root-project/root/pull/9966#issuecomment-1077428404,1,['Abort'],['Abort']
Safety,Yes because `CMakeLists.txt` will appear as modified instead of `makeinput.sh`. Anyway there is some clean up to be done in order to avoid the sources polluting. I am looking at it..,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8950#issuecomment-934507336:133,avoid,avoid,133,https://root.cern,https://github.com/root-project/root/issues/8950#issuecomment-934507336,1,['avoid'],['avoid']
Safety,"Yes but TTreeProcessorMT is implemented in terms of TThreadExecutor for everything related to tasks. If that ever changes, and a call to EnableThreadSafety is not otherwise added, several TTreeProcessorMT tests will crash. Do you want the (redundant) EnableThreadSafety call in TTreeProcessorMT's ctor as well?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5304#issuecomment-609784958:240,redund,redundant,240,https://root.cern,https://github.com/root-project/root/pull/5304#issuecomment-609784958,1,['redund'],['redundant']
Safety,"Yes, I was aware of this redundancy, but I would prefer it because:; - It makes it symmetric with `TThreadExecutor`.; - The fact of TTreeProcessorMT::Process being implemented in terms of `TThreadExecutor` could change (as it has changed in the past, at the beginning we just did plain TBB there).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5304#issuecomment-609790225:25,redund,redundancy,25,https://root.cern,https://github.com/root-project/root/pull/5304#issuecomment-609790225,1,['redund'],['redundancy']
Safety,"Yes, better than the ""That should fix a recent nightly failure with gcc11"" that Philippe commented on, thanks for improving it!. Compared to just including the actual diagnostic (something Philippe and I generally try to do these days, something that has proven super helpful several times), your current log:; ```; That should fix a recent nightly failure with gcc11 avoiding to require; module ""bits/ranges_base.h"" in C++20 context.; ```. does not call out; - that it's during dictionary generation; - that the modulemap requires the module feature 'cplusplus20' (your log seems to suggest that the error surfaces when compiled in C++20 mode, while this error shows up when compiling in C++14 or 17); - that the issue is also with GCC12 headers (your message seems to suggest that it's only with GCC11 headers); - the ""stack trace"", i.e. `/usr/include/c++/12/experimental/string_view:43:10: note: submodule of top-level module 'std' implicitly imported here` and then `/home/sftnight/build/night/LABEL/ROOT-fedora36/SPEC/default/V/master/build/include/Rtypes.h:195:10: fatal error: could not build module 'ROOT_Foundation_Stage1_NoRTTI'` and then `#include ""TIsAProxy.h""`. In general we tell our users (+/- always) ""can we please see the actual diagnostic"", and for the same reasons it's super helpful to include them here. The time we discussed this is waaay larger than the time it would have taken you to update the log to what Philippe proposes, rather than updating it to something that tries to address the issues (but seemingly fails?). But it's Philippe's review, I let him comment / deal with this if you still prefer to keep your current commit log. I simply wanted to add an explanation why Philippe suggests the inclusion of the actual diagnostic (and why I found it convincing and do it ever since he propose it to me).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12276#issuecomment-1429251757:368,avoid,avoiding,368,https://root.cern,https://github.com/root-project/root/pull/12276#issuecomment-1429251757,2,['avoid'],['avoiding']
Safety,"Yes, it might work as long that we guarantee that the `thread local static fCounts` is not used during the loading of libThread itself (If this happens we are no guarantee of order of initialization and thus it might not be intialized when used). I think it is safe to rely on this since its usage (somewhat) require TThread::Init to be called first.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6919#issuecomment-800625628:261,safe,safe,261,https://root.cern,https://github.com/root-project/root/pull/6919#issuecomment-800625628,1,['safe'],['safe']
Safety,"Yes, it's weird indeed. Well, I call ROOT::EnableThreadSafety before any thread starts, so that should be fine. the list is immediately made thread-safe in the function TSystem::Init,; ```; fTimers = new TList;; fTimers->UseRWLock();; ```. I can try to rewrite it using an intermediary variable to lock it before assigning it to fTimers, to see if it changes something.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365#issuecomment-875963104:148,safe,safe,148,https://root.cern,https://github.com/root-project/root/issues/8365#issuecomment-875963104,1,['safe'],['safe']
Safety,"Yes, of course. There is code to explicitly detect and remove the allocator. Most likely `TClassEdit::IsDefAlloc` needs to be updated to take into account that the word `class` might be prefixed. Albeit it is odd/unexpected that Clang would put the class keyword there (it is supposed be configured not to).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10749#issuecomment-1155497614:44,detect,detect,44,https://root.cern,https://github.com/root-project/root/issues/10749#issuecomment-1155497614,1,['detect'],['detect']
Safety,"Yes, perhaps having something in Jira for this is useful. I didn't find anything on a quick search. I know that the opinions on the topic diverge, so indeed it's best to discuss this in the appropriate channels. That said, can we merge this? It passed the checks, and is safe to merge for the release.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3843#issuecomment-495188282:271,safe,safe,271,https://root.cern,https://github.com/root-project/root/pull/3843#issuecomment-495188282,1,['safe'],['safe']
Safety,"Yes, that's true. I hope we can avoid the problem with @phsft-bot build with flags -Dvc=ON -Dveccore=ON ; The problem appears only for `veccore=ON` + `vc=OFF`, which was missed before since we always enabled them together.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/799#issuecomment-319100796:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/799#issuecomment-319100796,1,['avoid'],['avoid']
Safety,"Yes. The ""Serialized"" part in the function name indicates that the return buffer is ""only"" decompressed but is other-wise ""as-on-file"". The idea is that doing the swapping at the usage site will avoid one scan through the buffer and ""may"" results in better performance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9331#issuecomment-977999652:195,avoid,avoid,195,https://root.cern,https://github.com/root-project/root/issues/9331#issuecomment-977999652,1,['avoid'],['avoid']
Safety,"You are adding it to the target, the dependency is explicit in the fact that you need to have a target to pass as argument. You don't need to add the include that the dictionary needs to the executable, you could just add it to the directory includes, but adding to the target is better as it avoids leaking it to subdirectories. You only have to do it before because of Axel's changes that force a manual header search for the dictionary header, so the search paths need to be ready for you to actually find it. In earlier versions of ROOT, not finding this header would not cause a failure, but may have picked up the wrong header and injected a bunch of absolute paths to the dictionary which in turn would end up breaking things. For example, if you know the dictionary header will always just be in the current source directory, you could just set `CMAKE_INCLUDE_CURRENT_DIR` to `True` instead, and not add the current directory to the target includes.; ```; $ cmake --help-variable CMAKE_INCLUDE_CURRENT_DIR; CMAKE_INCLUDE_CURRENT_DIR; -------------------------. Automatically add the current source and build directories to the include path. If this variable is enabled, CMake automatically adds; ``CMAKE_CURRENT_SOURCE_DIR`` and ``CMAKE_CURRENT_BINARY_DIR``; to the include path for each directory. These additional include; directories do not propagate down to subdirectories. This is useful; mainly for out-of-source builds, where files generated into the build; tree are included by files located in the source tree. By default ``CMAKE_INCLUDE_CURRENT_DIR`` is ``OFF``.; ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8308#issuecomment-856752467:293,avoid,avoids,293,https://root.cern,https://github.com/root-project/root/issues/8308#issuecomment-856752467,1,['avoid'],['avoids']
Safety,"You say the abort signal is triggered again after printing the stack trace, could you point to the code that triggers the signal again? At least in Linux I cannot reproduce this infinite recursion :disappointed:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5034#issuecomment-588168289:12,abort,abort,12,https://root.cern,https://github.com/root-project/root/pull/5034#issuecomment-588168289,1,['abort'],['abort']
Safety,"Zsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=zggbyYqBAFAg%2FMlgDfFg3zamaawZqBMBbmbK7glOxj4%3D&reserved=0> ; >>>>>>>> - if not then it's different :-) But I don't know how to tell ; >>>>>>>> whether it's a redirect. Do you?; >>>>>>>>; >>>>>>>> If not let's get #8155 ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8155&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909277340%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=zggbyYqBAFAg%2FMlgDfFg3zamaawZqBMBbmbK7glOxj4%3D&reserved=0> ; >>>>>>>> fixed and then we re-visit this one: either it's fixed, too, or ; >>>>>>>> we need to call in help from the Davix (?) folks.; >>>>>>>>; >>>>>>>> —; >>>>>>>> You are receiving this because you authored the thread.; >>>>>>>> Reply to this email directly, view it on GitHub ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Froot-project%2Froot%2Fissues%2F8092%23issuecomment-839953723&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909287326%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=sEld0g53uPzkJwe1XZXsOX%2FpGWgGWZhXZxGcLLk7oio%3D&reserved=0>, ; >>>>>>>> or unsubscribe ; >>>>>>>> <https://can01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAK3WHVSCH3RYO2YJNPNMVNTTNKZ6VANCNFSM44DEPE6Q&data=04%7C01%7Csimonliu%40triumf.ca%7Ca59fceaddf634d196e5608d91576f34a%7Cc20535109cb34679a2d38f442e03b587%7C1%7C0%7C637564422909287326%7CUnknown%7CTWFpbGZsb3d8eyJWIjoiMC4wLjAwMDAiLCJQIjoiV2luMzIiLCJBTiI6Ik1haWwiLCJXVCI6Mn0%3D%7C1000&sdata=r%2BRr4gXGLu2JHjuN2nOE1hL1JFlJl6f2rkD1HCtY1TA%3D&reserved=0>.; >>>>>>>>; >>>>>>>; >>>>>; >>>; >",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8092#issuecomment-840043080:11682,safe,safelinks,11682,https://root.cern,https://github.com/root-project/root/issues/8092#issuecomment-840043080,2,['safe'],['safelinks']
Safety,[6.28] Avoid deprecated numpy.object,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12198:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/12198,1,['Avoid'],['Avoid']
Safety,[CI] Disable `tmva-cpu` on `alma9` to avoid openblas clashes with NumPy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15302:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/15302,1,['avoid'],['avoid']
Safety,[CI] Update runner labels to avoid running on GPUs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16581:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/16581,1,['avoid'],['avoid']
Safety,[CMake] Add quotes to avoid failure on Windows node (?),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5271:22,avoid,avoid,22,https://root.cern,https://github.com/root-project/root/pull/5271,1,['avoid'],['avoid']
Safety,[CMake] Avoid duplicate linking against gtest,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16255:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/16255,1,['Avoid'],['Avoid']
Safety,[CMake] Avoid using deprecated `FindCUDA`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13437:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/13437,1,['Avoid'],['Avoid']
Safety,[CMake] Correctly return real (safe) install paths at runtime,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5084:31,safe,safe,31,https://root.cern,https://github.com/root-project/root/pull/5084,1,['safe'],['safe']
Safety,[CMake] Detect version of oneTBB,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14670:8,Detect,Detect,8,https://root.cern,https://github.com/root-project/root/pull/14670,1,['Detect'],['Detect']
Safety,[CMake] Fix version detection in `FindCUDNN.cmake`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15602:20,detect,detection,20,https://root.cern,https://github.com/root-project/root/pull/15602,1,['detect'],['detection']
Safety,[CPyCppyy] Avoid holding reference to `__main__` in the CPyCppyy API,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16403:11,Avoid,Avoid,11,https://root.cern,https://github.com/root-project/root/pull/16403,1,['Avoid'],['Avoid']
Safety,[DF] Add a sanity check to GetMergeableValue,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8978:11,sanity check,sanity check,11,https://root.cern,https://github.com/root-project/root/pull/8978,1,['sanity check'],['sanity check']
Safety,[DF] Avoid ROOT attribute lookup at module level,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10069:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10069,1,['Avoid'],['Avoid']
Safety,[DF] Avoid RVec construction+swap when possible,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11232:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11232,1,['Avoid'],['Avoid']
Safety,[DF] Avoid TChain::AddClone in Snapshot when unnecessary,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2234:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/2234,2,['Avoid'],['Avoid']
Safety,[DF] Avoid calling InitSlot/FinaliseSlot multiple times on RDefines,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9199:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9199,1,['Avoid'],['Avoid']
Safety,[DF] Avoid crash in tutorial due to reused canvas name,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9139:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9139,1,['Avoid'],['Avoid']
Safety,[DF] Avoid duplicates in list of columns returned by GetColumnNames,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9699:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9699,1,['Avoid'],['Avoid']
Safety,[DF] Avoid duplicates in list of columns returned by GetColumnNames (v6.26 backport),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9762:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9762,1,['Avoid'],['Avoid']
Safety,[DF] Avoid exact comparisons on floating points,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11513:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11513,1,['Avoid'],['Avoid']
Safety,[DF] Avoid expensive stringstream construction in RCsvDS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10458:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10458,1,['Avoid'],['Avoid']
Safety,[DF] Avoid forward declarations of Define'd types,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3539:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/3539,3,['Avoid'],['Avoid']
Safety,[DF] Avoid heap allocation for column names,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9329:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9329,1,['Avoid'],['Avoid']
Safety,"[DF] Avoid jitting a very large function body, which is slow",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9328:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9328,1,['Avoid'],['Avoid']
Safety,[DF] Avoid memory-heavy histogram entry buffering in single-thread,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11552:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11552,1,['Avoid'],['Avoid']
Safety,[DF] Avoid potential nullptr dereference,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8286:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8286,1,['Avoid'],['Avoid']
Safety,[DF] Avoid public dependency of RDataFrame on `nlohmann::json`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14043:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14043,1,['Avoid'],['Avoid']
Safety,[DF] Avoid registration of inner TChain with global lists,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11322:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11322,1,['Avoid'],['Avoid']
Safety,[DF] Avoid relying on RVec class layout in Snapshot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2757:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/2757,1,['Avoid'],['Avoid']
Safety,[DF] Avoid unused parameter warning in RDF ActionHelpers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14044:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14044,1,['Avoid'],['Avoid']
Safety,[DF] Avoid usage of Mathmore/gsl in df106 tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13989:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/13989,1,['Avoid'],['Avoid']
Safety,[DF] Avoid useless calls to TTree::GetBranch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11538:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11538,1,['Avoid'],['Avoid']
Safety,[DF] Avoid useless computation when we don't need its result.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9274:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9274,1,['Avoid'],['Avoid']
Safety,[DF] Avoid using deprecated `std::iterator` in `TTreeReaderFast`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10491:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10491,1,['Avoid'],['Avoid']
Safety,[DF] Avoid using the same variable for 2 branches in in-memory tree,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11522:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11522,1,['Avoid'],['Avoid']
Safety,[DF] Change test to avoid double free on Fedora39,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14803:20,avoid,avoid,20,https://root.cern,https://github.com/root-project/root/pull/14803,1,['avoid'],['avoid']
Safety,[DF] Move type-safety checks out of column readers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11307:15,safe,safety,15,https://root.cern,https://github.com/root-project/root/pull/11307,1,['safe'],['safety']
Safety,[DF] Remove redundant call to TTreeReaderArray::GetSize,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8592:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/8592,1,['redund'],['redundant']
Safety,[DF] Remove redundant calls to RDefine::InitSlot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10812:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/10812,1,['redund'],['redundant']
Safety,"[DF] Remove useless data member from RFilter, avoid (rare) reallocations",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9170:46,avoid,avoid,46,https://root.cern,https://github.com/root-project/root/pull/9170,1,['avoid'],['avoid']
Safety,[DF] Store RJittedAction on the heap to avoid use after delete,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2450:40,avoid,avoid,40,https://root.cern,https://github.com/root-project/root/pull/2450,1,['avoid'],['avoid']
Safety,[DF] Support rdfslot_ and rdfentry_ as well as avoid duplication of routines to check implicit columns,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2658:47,avoid,avoid,47,https://root.cern,https://github.com/root-project/root/pull/2658,1,['avoid'],['avoid']
Safety,[DF][PyROOT] Avoid deprecated numpy.object,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12159:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/12159,1,['Avoid'],['Avoid']
Safety,[DF][ROOT-9463] Avoid redundant results in GetColumnNames,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2443:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/2443,2,"['Avoid', 'redund']","['Avoid', 'redundant']"
Safety,[DOC][NFC] Mention that EnableThreadSafety does not make graphics thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3412:73,safe,safe,73,https://root.cern,https://github.com/root-project/root/pull/3412,1,['safe'],['safe']
Safety,[Exp PyROOT] Pythonisations to avoid double delete of drawables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3787:31,avoid,avoid,31,https://root.cern,https://github.com/root-project/root/pull/3787,1,['avoid'],['avoid']
Safety,[GeoCad] Reformat function to avoid misleading indentation warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3049:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/3049,1,['avoid'],['avoid']
Safety,[Geo][ROOT-9837] Avoid name clashes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3057:17,Avoid,Avoid,17,https://root.cern,https://github.com/root-project/root/pull/3057,1,['Avoid'],['Avoid']
Safety,[Graphics] avoid double delete in TRatioPlot dtor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5312:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/5312,1,['avoid'],['avoid']
Safety,[IMT] Remove redundant call to EnableImplicitMT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5305:13,redund,redundant,13,https://root.cern,https://github.com/root-project/root/pull/5305,1,['redund'],['redundant']
Safety,[IMT] Test thread safety of task arena and TThreadExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6189:18,safe,safety,18,https://root.cern,https://github.com/root-project/root/pull/6189,1,['safe'],['safety']
Safety,[IO] Avoid nullptr dereference in I/O of std::pair,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11227:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11227,1,['Avoid'],['Avoid']
Safety,[Math] Avoid cloning before fitting the user provided FCN,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10650:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/10650,1,['Avoid'],['Avoid']
Safety,[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/677:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/677,1,['Avoid'],['Avoid']
Safety,[Math] Avoid std::string in signature of template class method,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1936:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/1936,1,['Avoid'],['Avoid']
Safety,[Minuit2] Reduce boilerplate code by removing redundant overloads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16443:46,redund,redundant,46,https://root.cern,https://github.com/root-project/root/pull/16443,1,['redund'],['redundant']
Safety,[Montecarlo][11580] Make TDatabasePDG::GetParticle methods thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13541:66,safe,safe,66,https://root.cern,https://github.com/root-project/root/pull/13541,1,['safe'],['safe']
Safety,[NFC] Try to prevent anti-virus false positive detection on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7005:47,detect,detection,47,https://root.cern,https://github.com/root-project/root/pull/7005,1,['detect'],['detection']
Safety,[NFC] v6-20: Try to prevent anti-virus false positive detection on Wi…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7007:54,detect,detection,54,https://root.cern,https://github.com/root-project/root/pull/7007,1,['detect'],['detection']
Safety,[NFC] v6-22: Try to prevent anti-virus false positive detection on Wi…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7006:54,detect,detection,54,https://root.cern,https://github.com/root-project/root/pull/7006,1,['detect'],['detection']
Safety,[PyROOT] Avoid SyntaxWarning about invalid escape sequence,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13905:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/13905,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid bare except,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13026:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/13026,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid linking TPython against libPython,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15891:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/15891,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid need for exporting ROOT objects directly in PyROOTWrapper,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15833:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/15833,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid using CPyCppyy internals in TPython via forward declarations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14498:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/14498,1,['Avoid'],['Avoid']
Safety,[PyROOT] Avoid using deprecated `numpy._float`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16200:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/16200,1,['Avoid'],['Avoid']
Safety,[PyROOT] avoid using wildcard import in pyroot tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7668:9,avoid,avoid,9,https://root.cern,https://github.com/root-project/root/pull/7668,1,['avoid'],['avoid']
Safety,[RDF] Avoid unused variable warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4075:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/4075,1,['Avoid'],['Avoid']
Safety,[RDF] Enable thread safety,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6266:20,safe,safety,20,https://root.cern,https://github.com/root-project/root/pull/6266,1,['safe'],['safety']
Safety,[RF] Add overloads for memory-safe `RooAbsCollection::addOwned` and `RooAbsArg::addOwnedComponents`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9720:30,safe,safe,30,https://root.cern,https://github.com/root-project/root/pull/9720,1,['safe'],['safe']
Safety,[RF] Add recovery from invalid parameters for BatchMode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7266:9,recover,recovery,9,https://root.cern,https://github.com/root-project/root/pull/7266,1,['recover'],['recovery']
Safety,[RF] Avoid RooBinWidthFunction in final likelihood computation graphs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13024:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/13024,1,['Avoid'],['Avoid']
Safety,[RF] Avoid RooFit depenency in some RooFitCore unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8792:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8792,1,['Avoid'],['Avoid']
Safety,[RF] Avoid `nlohmann_json` as a public dependency of RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14266:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14266,1,['Avoid'],['Avoid']
Safety,[RF] Avoid any dependencies of RooFitHS3 for dictionary generation and update HistFactory::JSONTool interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10082:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10082,1,['Avoid'],['Avoid']
Safety,[RF] Avoid clearing full RunContext after each NLL evaluation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7344:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/7344,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication and move the evaluate function in a common place,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14440:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14440,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication in RooAddModel cache generation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11139:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11139,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication in RooFit addition classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10851:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10851,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication in RooRealSumFunc/RooRealSumPdf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10825:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10825,1,['Avoid'],['Avoid']
Safety,[RF] Avoid code duplication with new private `Algorithms.h` file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11962:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11962,1,['Avoid'],['Avoid']
Safety,[RF] Avoid compile time dependency of RooFit on RDataFrame,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16606:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16606,1,['Avoid'],['Avoid']
Safety,[RF] Avoid deprecated `createIterator()` function in RooStats tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15024:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/15024,1,['Avoid'],['Avoid']
Safety,[RF] Avoid double counting norm integrals in RooAddPdf with BatchMode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13538:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/13538,1,['Avoid'],['Avoid']
Safety,[RF] Avoid dummy integral object for already self-normalized RooPoisson,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10836:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10836,1,['Avoid'],['Avoid']
Safety,[RF] Avoid duplicating minimizer steering code in `RooAbsPdf::fitTo()` and `RooAbsReal::chi2FitTo()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13662:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/13662,1,['Avoid'],['Avoid']
Safety,[RF] Avoid heap allocation of `RooArgSet` in `Roo(Abs)GenContext`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9257:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9257,1,['Avoid'],['Avoid']
Safety,[RF] Avoid including `RooMath.h` in RooFit headers and stress tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9214:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9214,1,['Avoid'],['Avoid']
Safety,[RF] Avoid instantiating RooNLLVar directly in testRooAbsL.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16468:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16468,1,['Avoid'],['Avoid']
Safety,[RF] Avoid manual memory allocation in RooConvGenContext,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10950:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10950,1,['Avoid'],['Avoid']
Safety,[RF] Avoid manual memory management in the rs101 tutorial,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11834:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/11834,1,['Avoid'],['Avoid']
Safety,[RF] Avoid overhead of tracking evaluation error messages when not needed,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12328:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/12328,1,['Avoid'],['Avoid']
Safety,[RF] Avoid printing false warning when passing both `FillColor/FillStyle` and `VisualizeError` to RooAbsReal::plotOn(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9859:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/issues/9859,1,['Avoid'],['Avoid']
Safety,[RF] Avoid redundant copying of model in RooAbsL constructor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12880:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/12880,2,"['Avoid', 'redund']","['Avoid', 'redundant']"
Safety,[RF] Avoid too verbose printout when doing unbinned toy studies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14309:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/14309,1,['Avoid'],['Avoid']
Safety,[RF] Avoid uninitialized RooListProxies in RooLagrangianMorphFunc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9840:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/9840,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using HistFactory class in RooFitCore tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16596:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16596,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using RooCmdArg::_nextSharedData directly in header file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8437:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8437,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using RooStringVar in RooCmdConfig,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10106:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10106,1,['Avoid'],['Avoid']
Safety,"[RF] Avoid using RooTObjWrap, RooDouble, and RooInt in RooCmdConfig",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10115:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10115,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using `RooAbsArg::redirectServer()` in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12129:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/12129,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using `_normSet` member in RooAddPdf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10550:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10550,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using `std::map` in RooFit pythonizations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16156:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16156,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using forward-declared class as default template arguments,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8997:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8997,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using test statistics constructors directly in user code,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10610:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/10610,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using transient `std::unique_ptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15733:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/15733,1,['Avoid'],['Avoid']
Safety,[RF] Avoid using variable-length arrays in RooFit multiprocessing tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16777:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16777,1,['Avoid'],['Avoid']
Safety,[RF] Do not stream RooAbsArg eocache to avoid memory leak when reading back workspaces,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12024:40,avoid,avoid,40,https://root.cern,https://github.com/root-project/root/pull/12024,1,['avoid'],['avoid']
Safety,[RF] Don't use redundant `RooPlot::findObject()` in RooFit tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11555:15,redund,redundant,15,https://root.cern,https://github.com/root-project/root/pull/11555,1,['redund'],['redundant']
Safety,[RF] Fix memory leaks in RooFitHS3 by completely avoiding manual memory management,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9690:49,avoid,avoiding,49,https://root.cern,https://github.com/root-project/root/pull/9690,1,['avoid'],['avoiding']
Safety,[RF] Fix splitting of RooDataSets with weight errors and avoid creating dummy weight variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12459:57,avoid,avoid,57,https://root.cern,https://github.com/root-project/root/pull/12459,1,['avoid'],['avoid']
Safety,[RF] Guard debugging code to avoid warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9981:29,avoid,avoid,29,https://root.cern,https://github.com/root-project/root/pull/9981,1,['avoid'],['avoid']
Safety,[RF] Improve recovery from invalid function values,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6401:13,recover,recovery,13,https://root.cern,https://github.com/root-project/root/pull/6401,1,['recover'],['recovery']
Safety,[RF] Improve recovery from invalid function values in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6383:13,recover,recovery,13,https://root.cern,https://github.com/root-project/root/pull/6383,1,['recover'],['recovery']
Safety,[RF] Make RooBatchCompute thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14877:33,safe,safe,33,https://root.cern,https://github.com/root-project/root/pull/14877,1,['safe'],['safe']
Safety,[RF] Make `RooAbsArg::recursiveRedirectServers` thread safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11970:55,safe,safe,55,https://root.cern,https://github.com/root-project/root/pull/11970,1,['safe'],['safe']
Safety,[RF] Make `roobatchcompute` header files safer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9446:41,safe,safer,41,https://root.cern,https://github.com/root-project/root/pull/9446,1,['safe'],['safer']
Safety,[RF] New mechanism to detect if `_normSet` in RooAbsPdf is invalid,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11176:22,detect,detect,22,https://root.cern,https://github.com/root-project/root/pull/11176,1,['detect'],['detect']
Safety,[RF] Remove deprecated RooList and avoid remaining usage of it in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9851:35,avoid,avoid,35,https://root.cern,https://github.com/root-project/root/pull/9851,1,['avoid'],['avoid']
Safety,[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11695:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/11695,1,['redund'],['redundant']
Safety,[RF] Remove redundant sanity check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8432:12,redund,redundant,12,https://root.cern,https://github.com/root-project/root/pull/8432,2,"['redund', 'sanity check']","['redundant', 'sanity check']"
Safety,[RF] Remove safeDeleteList functionality of RooAbsCollection,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9685:12,safe,safeDeleteList,12,https://root.cern,https://github.com/root-project/root/pull/9685,1,['safe'],['safeDeleteList']
Safety,[RF] Rename RooPower and RooExpPoly to avoid clash with classes fom CMS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15558:39,avoid,avoid,39,https://root.cern,https://github.com/root-project/root/pull/15558,1,['avoid'],['avoid']
Safety,[RF] RooAddPdf: Avoid UB in checkObservables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9557:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/9557,1,['Avoid'],['Avoid']
Safety,[RF] RooBarlowBeestonLL: Avoid removing elements of RooArgSet while looping over them,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10921:25,Avoid,Avoid,25,https://root.cern,https://github.com/root-project/root/pull/10921,1,['Avoid'],['Avoid']
Safety,[RF] Speed up RooFit BatchMode by avoiding to set oper mode to `Auto` in RooAbsReal::computeBatch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10612:34,avoid,avoiding,34,https://root.cern,https://github.com/root-project/root/pull/10612,1,['avoid'],['avoiding']
Safety,[RF] Speed up RooProdPdf::factorizeProduct by avoiding manual memory allocation,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7907:46,avoid,avoiding,46,https://root.cern,https://github.com/root-project/root/pull/7907,1,['avoid'],['avoiding']
Safety,"[RF] `plotSamplingHint` can cause evaluation outside the ""safe"" range of an observable",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11482:58,safe,safe,58,https://root.cern,https://github.com/root-project/root/issues/11482,1,['safe'],['safe']
Safety,[RF] investigate and fix MultiProcess::Queue test timeout,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15494:50,timeout,timeout,50,https://root.cern,https://github.com/root-project/root/issues/15494,1,['timeout'],['timeout']
Safety,[RF] xRooFit: avoid having headers depending on preprocessor defines and other fixups,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11932:14,avoid,avoid,14,https://root.cern,https://github.com/root-project/root/pull/11932,1,['avoid'],['avoid']
Safety,[RF][ Remove unsafe casts in RooResolutionModel,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4975:13,unsafe,unsafe,13,https://root.cern,https://github.com/root-project/root/pull/4975,1,['unsafe'],['unsafe']
Safety,[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13612:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/13612,1,['Avoid'],['Avoid']
Safety,[RF][PyROOT] Pythonize RooFit::DataError to avoid Python 3 syntax errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9721:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/9721,1,['avoid'],['avoid']
Safety,[RF][PyROOT] Use raw strings for docstrings in RooFit pythonization mirror classes and avoid mutating the docstring of an instancemethod in Python 2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8926:87,avoid,avoid,87,https://root.cern,https://github.com/root-project/root/pull/8926,1,['avoid'],['avoid']
Safety,[RF][Tutorials] Avoid race condition in RooFit python tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8491:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/8491,1,['Avoid'],['Avoid']
Safety,"[ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested.; Here; - Four leaks are fixed; - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.); - A container overflow detected by address sanitizer is fixed.; - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5466:418,detect,detected,418,https://root.cern,https://github.com/root-project/root/pull/5466,1,['detect'],['detected']
Safety,"[SaveGraph](https://root.cern/doc/master/namespaceROOT_1_1RDF.html#ac06a36e745255fb8744b1e0a563074c9) would benefit from the following improvements:. - [x] usage of static variables should be removed, in order to make `SaveGraph` safe to be called concurrently from multiple threads; - [x] a tutorial should be added, and an example usage should be included in the docs in the reference guide. ### Additional context; <!--; Add any other context about the problem here.; -->. Related old jira tickets:; - https://sft.its.cern.ch/jira/browse/ROOT-11023 (this is the original issue regarding the usage of statics in the implementation of SaveGraph); - https://sft.its.cern.ch/jira/browse/ROOT-9721 (this contains a draft tutorial and an old SaveGraph bug report)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9145:230,safe,safe,230,https://root.cern,https://github.com/root-project/root/issues/9145,1,['safe'],['safe']
Safety,[TDF+CLING] Avoid instrumenting jitted code when possible,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/985:12,Avoid,Avoid,12,https://root.cern,https://github.com/root-project/root/pull/985,1,['Avoid'],['Avoid']
Safety,[TDF] Avoid accessing zero-length TTreeReaderArray,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1938:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/1938,1,['Avoid'],['Avoid']
Safety,[TDF] Avoid virtual calls in non-jitted transformations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/869:6,Avoid,Avoid,6,https://root.cern,https://github.com/root-project/root/pull/869,1,['Avoid'],['Avoid']
Safety,[TMVA] Avoid torch-cppyy symbol clashing problem in tmva tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15290:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/15290,1,['Avoid'],['Avoid']
Safety,[TMVA] DNN - Tune minimization test to avoid false positives,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958:39,avoid,avoid,39,https://root.cern,https://github.com/root-project/root/pull/1958,1,['avoid'],['avoid']
Safety,[TMVA] Make GetObjectSafe type-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9783:31,safe,safe,31,https://root.cern,https://github.com/root-project/root/pull/9783,1,['safe'],['safe']
Safety,[TMVA] ROOT-9194 -- Sporadic timeouts for TMVARegression,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1973:29,timeout,timeouts,29,https://root.cern,https://github.com/root-project/root/pull/1973,1,['timeout'],['timeouts']
Safety,[TPython] Make TPython thread-safe,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16427:30,safe,safe,30,https://root.cern,https://github.com/root-project/root/pull/16427,1,['safe'],['safe']
Safety,[TREEPROCMT] Avoid useless construction of thread-local chains,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2169:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/2169,1,['Avoid'],['Avoid']
Safety,[TSpectrum] avoid recurrent questions on forum concerning legacy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11315:12,avoid,avoid,12,https://root.cern,https://github.com/root-project/root/pull/11315,1,['avoid'],['avoid']
Safety,[TTree] Avoid deletion of TFile on the stack,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6528:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/6528,1,['Avoid'],['Avoid']
Safety,[TTree] Avoid getting the number of branches twice,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3601:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/3601,1,['Avoid'],['Avoid']
Safety,[TTree] Avoid time-consuming part of FindLeaf if leaf name has no '.',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2437:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/2437,1,['Avoid'],['Avoid']
Safety,[TWebFile] avoid if/else statement with same result ROOT-10373,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4574:11,avoid,avoid,11,https://root.cern,https://github.com/root-project/root/pull/4574,1,['avoid'],['avoid']
Safety,[VecOps] Avoid -ffast-math,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12214:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/12214,1,['Avoid'],['Avoid']
Safety,[VecOps] Avoid allocating temporaries on heap in InvariantMass[es],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4153:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/4153,1,['Avoid'],['Avoid']
Safety,[WIP] Load libCling with RTLD_DEEPBIND to avoid collissions of LLVM symbols,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4668:42,avoid,avoid,42,https://root.cern,https://github.com/root-project/root/pull/4668,1,['avoid'],['avoid']
Safety,[backport-v626] Avoid using deprecated std::iterator in several classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11270:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/11270,1,['Avoid'],['Avoid']
Safety,[cling] Avoid assert firing on ODRHash collisions:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9248:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/9248,1,['Avoid'],['Avoid']
Safety,[cling] DynamicLookup: avoid printing internal expression representation for non-debug builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6938:23,avoid,avoid,23,https://root.cern,https://github.com/root-project/root/pull/6938,1,['avoid'],['avoid']
Safety,[cling] Try to avoid crashes in llvm::identify_magic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11174:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/11174,1,['avoid'],['avoid']
Safety,[cling] Try to avoid crashes in llvm::identify_magic [v6.26],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11187:15,avoid,avoid,15,https://root.cern,https://github.com/root-project/root/pull/11187,1,['avoid'],['avoid']
Safety,[cling] Warn on redundant parentheses in declarators whose parsing might not match the user intent,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8555:16,redund,redundant,16,https://root.cern,https://github.com/root-project/root/pull/8555,1,['redund'],['redundant']
Safety,[cling] fix unsafe mix of type warning in Diagnostic.cpp,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13444:12,unsafe,unsafe,12,https://root.cern,https://github.com/root-project/root/pull/13444,1,['unsafe'],['unsafe']
Safety,[clingutils] Modernize C++ casting in generated dictionaries to avoid potential warnings in derived applications,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9761:64,avoid,avoid,64,https://root.cern,https://github.com/root-project/root/pull/9761,1,['avoid'],['avoid']
Safety,"[cmake] Avoid ""warning: redirecting to https://""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1963:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/1963,1,['Avoid'],['Avoid']
Safety,[cmake] Avoid warning when building from tar file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16226:8,Avoid,Avoid,8,https://root.cern,https://github.com/root-project/root/pull/16226,1,['Avoid'],['Avoid']
Safety,"[cmake] Fix Davix uuid detection, gfal defaults to off",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13059:23,detect,detection,23,https://root.cern,https://github.com/root-project/root/pull/13059,1,['detect'],['detection']
Safety,[cmake] Fix version detection for old TBB,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14942:20,detect,detection,20,https://root.cern,https://github.com/root-project/root/pull/14942,1,['detect'],['detection']
Safety,[cmake] Increase the internet connection test timeout.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9405:46,timeout,timeout,46,https://root.cern,https://github.com/root-project/root/pull/9405,1,['timeout'],['timeout']
Safety,[cmake] Reduce the redundant dependencies to onepcm.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1188:19,redund,redundant,19,https://root.cern,https://github.com/root-project/root/pull/1188,1,['redund'],['redundant']
Safety,[cmake] Some improvements related to feature detection,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14834:45,detect,detection,45,https://root.cern,https://github.com/root-project/root/pull/14834,1,['detect'],['detection']
Safety,[cmake][webgui] Decrease webgui-ping timeout,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16710:37,timeout,timeout,37,https://root.cern,https://github.com/root-project/root/pull/16710,1,['timeout'],['timeout']
Safety,"[core,v6-26] TViewPubDataMembersIter: avoid using deprecated `std::iterator`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10468:38,avoid,avoid,38,https://root.cern,https://github.com/root-project/root/pull/10468,1,['avoid'],['avoid']
Safety,[core/base] Null ptr access safety,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11443:28,safe,safety,28,https://root.cern,https://github.com/root-project/root/pull/11443,1,['safe'],['safety']
Safety,[core] Avoid deprecated `std::iterator`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10571:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/10571,1,['Avoid'],['Avoid']
Safety,[core] Remove redundant forward decl of std.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5300:14,redund,redundant,14,https://root.cern,https://github.com/root-project/root/pull/5300,1,['redund'],['redundant']
Safety,[core] Rework the field lookups in base classes to avoid iteration.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10245:51,avoid,avoid,51,https://root.cern,https://github.com/root-project/root/pull/10245,1,['avoid'],['avoid']
Safety,[core] TViewPubDataMembersIter: avoid using deprecated `std::iterator`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10457:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/10457,1,['avoid'],['avoid']
Safety,[core] avoid using VLA in TListOfTypes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16476:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/16476,1,['avoid'],['avoid']
Safety,[cxxmodules] Add pthread_setname_np forward decl to avoid warning in,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2629:52,avoid,avoid,52,https://root.cern,https://github.com/root-project/root/pull/2629,1,['avoid'],['avoid']
Safety,[cxxmodules] Avoid loading more modules while instantiating templates,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13046:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/13046,1,['Avoid'],['Avoid']
Safety,[cxxmodules] Avoid loading more modules while instantiating templates [v6.28],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13050:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/13050,1,['Avoid'],['Avoid']
Safety,[cxxmodules] Avoid lookup from system headers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11514:13,Avoid,Avoid,13,https://root.cern,https://github.com/root-project/root/pull/11514,1,['Avoid'],['Avoid']
Safety,"[cxxmodules] Do not push a transaction per LoadModule. Prior to this patch, we push/pop transaction for each LoadModule call. This is reasonable if we assume modules are perfectly layered. That is, no eager module deserialization require definitions from another module. This is hard to achieve for dependent on ROOT codebases during their incremental migration process.; ; The current patch push/pops once per loading of all modules. This should perform slightly better and allow entangled modules to still load. This patch should address the CMSSW Modules IB:; Assertion `OldBuilder->DeferredDeclsToEmit.empty() && ""Should have emitted all decls deferred to emit.""' failed.; ```; 0 0x00007ffff6f113d7 in raise () from /lib64/libc.so.6; 1 0x00007ffff6f12ac8 in abort () from /lib64/libc.so.6; 2 0x00007ffff6f0a1a6 in __assert_fail_base () from /lib64/libc.so.6; 3 0x00007ffff6f0a252 in __assert_fail () from /lib64/libc.so.6; 4 0x00007fffed24ed82 in clang::CodeGeneratorImpl::StartModule; 5 0x00007fffed24d33e in clang::CodeGenerator::StartModule; 6 0x00007fffed0664f1 in cling::IncrementalParser::StartModule; 7 0x00007fffed066f84 in cling::IncrementalParser::codeGenTransaction; 8 0x00007fffed066aec in cling::IncrementalParser::commitTransaction; 9 0x00007fffecf1af2c in cling::Interpreter::PushTransactionRAII::pop; 10 0x00007fffecf1ae72 in cling::Interpreter::PushTransactionRAII::~PushTransactionRAII; 11 0x00007fffece78534 in ClingMemberIterInternal::DCIter::DCIter; 12 0x00007fffece7712c in TClingMemberIter::TClingMemberIter; 13 0x00007fffece7724c in TClingDataMemberIter::TClingDataMemberIter; 14 0x00007fffece750b6 in TClingDataMemberInfo::TClingDataMemberInfo; 15 0x00007fffecd25918 in TCling::DataMemberInfo_Factory; 16 0x00007ffff6b0e33e in TListOfDataMembers::Load; 17 0x00007ffff6ae539d in TClass::CreateListOfDataMembers; 18 0x00007ffff6ae54d4 in TClass::GetListOfDataMembers; 19 0x00007ffff6ae3dd1 in TClass::GetDataMember; 20 0x00007ffff6b259a0 in ROOT::Detail::TSchemaRuleSet::Add",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7398:762,abort,abort,762,https://root.cern,https://github.com/root-project/root/pull/7398,1,['abort'],['abort']
Safety,[cxxmodules] Do not trigger redundant deserializations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4409:28,redund,redundant,28,https://root.cern,https://github.com/root-project/root/pull/4409,1,['redund'],['redundant']
Safety,[cxxmodules] Mark string_view as textual to avoid bugs in clang-5.0,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4451:44,avoid,avoid,44,https://root.cern,https://github.com/root-project/root/pull/4451,1,['avoid'],['avoid']
Safety,[cxxmodules] Order includes avoiding infinite loop in rootcling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4129:28,avoid,avoiding,28,https://root.cern,https://github.com/root-project/root/pull/4129,1,['avoid'],['avoiding']
Safety,[cxxmodules] Print stacktrace before aborting on a missing exception.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/921:37,abort,aborting,37,https://root.cern,https://github.com/root-project/root/pull/921,1,['abort'],['aborting']
Safety,[cxxmodules][cling] Avoid loading some unnecessary modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10910:20,Avoid,Avoid,20,https://root.cern,https://github.com/root-project/root/pull/10910,1,['Avoid'],['Avoid']
Safety,[davix] avoid using VLA,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16519:8,avoid,avoid,8,https://root.cern,https://github.com/root-project/root/pull/16519,1,['avoid'],['avoid']
Safety,[df] Avoid lock to check simple typeids,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16528:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/16528,1,['Avoid'],['Avoid']
Safety,[df] Avoid memory leak in JIT when the execution is not triggered,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15400:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/15400,1,['Avoid'],['Avoid']
Safety,"[dictgen] On macOS, use argv[0] to detect genreflex:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9501:35,detect,detect,35,https://root.cern,https://github.com/root-project/root/pull/9501,1,['detect'],['detect']
Safety,[geom] Add cache layer for TGeoParallelWorld safeties in TGeoNavigator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16470:45,safe,safeties,45,https://root.cern,https://github.com/root-project/root/pull/16470,1,['safe'],['safeties']
Safety,"[gui] fix leak in TGFSComboBox, avoid usage of static variable",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7337:32,avoid,avoid,32,https://root.cern,https://github.com/root-project/root/pull/7337,1,['avoid'],['avoid']
Safety,[hadd] avoid large RAM usage in hadd with multiple subdirs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15059:7,avoid,avoid,7,https://root.cern,https://github.com/root-project/root/pull/15059,1,['avoid'],['avoid']
Safety,[hist] Avoid `try-catch` in TH1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13748:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/13748,1,['Avoid'],['Avoid']
Safety,"[http] Improve syntax, avoid interpreter calls",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15019:23,avoid,avoid,23,https://root.cern,https://github.com/root-project/root/pull/15019,1,['avoid'],['avoid']
Safety,[inc] avoid doxygen warnings,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9943:6,avoid,avoid,6,https://root.cern,https://github.com/root-project/root/pull/9943,1,['avoid'],['avoid']
Safety,[io] Avoid nullptr deref when printing warning in TStreamerInfo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8351:5,Avoid,Avoid,5,https://root.cern,https://github.com/root-project/root/pull/8351,1,['Avoid'],['Avoid']
Safety,[math] Avoid out-of-bounds array access with `vc` in FitUtil.h,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13772:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/13772,1,['Avoid'],['Avoid']
Safety,[math] Avoid warnings about deleting unallocated objects in `TDecompLU`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10582:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/10582,1,['Avoid'],['Avoid']
Safety,[math] Avoid warnings from Vc.h from deprecated enum comparisons,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13360:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/13360,1,['Avoid'],['Avoid']
Safety,[math] Avoid warnings from Vc.h in Fedora nightlies and add some missing `override`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12987:7,Avoid,Avoid,7,https://root.cern,https://github.com/root-project/root/pull/12987,1,['Avoid'],['Avoid']
Safety,[math][minuit2] Avoid hiding member functions with `using`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11915:16,Avoid,Avoid,16,https://root.cern,https://github.com/root-project/root/pull/11915,1,['Avoid'],['Avoid']
Safety,"[net/monalisa/src/TMonaLisaWriter.cxx:956] -> [net/monalisa/src/TMonaLisaWriter.cxx:957]: (error) Iterator 'iter' used after element has been erased.; [proof/proofd/src/XrdProofdProofServMgr.cxx:4648] -> [proof/proofd/src/XrdProofdProofServMgr.cxx:4646]: (error) Iterator 'iter' used after element has been erased. [math/minuit2/src/Minuit2Minimizer.cxx:669] -> [math/minuit2/src/Minuit2Minimizer.cxx:669]: (style) Same expression on both sides of '||'.; [math/minuit2/src/Minuit2Minimizer.cxx:736] -> [math/minuit2/src/Minuit2Minimizer.cxx:736]: (style) Same expression on both sides of '||'.; [math/minuit2/src/Minuit2Minimizer.cxx:753] -> [math/minuit2/src/Minuit2Minimizer.cxx:753]: (style) Same expression on both sides of '||'. [tree/tree/src/TBasket.cxx:852]: (style) Redundant condition: If 'flag >= 80', the comparison 'flag' is always true.; [misc/table/src/TFileIter.cxx:467] -> [misc/table/src/TFileIter.cxx:468]: (warning) Identical condition 'thisRunNumber<runNumber', second condition is always false. [math/mathcore/src/TMath.cxx:826]: (style) Array index 'ia' is used before limits check.; [math/mathcore/src/TMath.cxx:830]: (style) Array index 'ib' is used before limits check.; [math/mathcore/src/triangle.c:15434]: (style) Array index 'aspectindex' is used before limits check.; [roofit/roofit/src/RooIntegralMorph.cxx:375]: (style) Array index 'igapHigh' is used before limits check. [core/winnt/src/TWinNTSystem.cxx:5035]: (style) Statements following return, break, continue, goto or throw will never be executed.; [tree/treeplayer/src/TSelectorDraw.cxx:380]: (style) Statements following return, break, continue, goto or throw will never be executed. [net/auth/src/TAuthenticate.cxx:4205]: (error) Resource leak: fd; [roofit/roofitcore/src/BidirMMapPipe.cxx:1880]: (error) Memory leak: s; [tree/tree/src/TLeaf.cxx:222]: (error) Memory leak: countname; [tree/tree/src/TLeaf.cxx:226]: (error) Memory leak: countname; [tmva/tmva/src/MethodBase.cxx:2783]: (error) Memory leak: pdfS",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1343:775,Redund,Redundant,775,https://root.cern,https://github.com/root-project/root/pull/1343,1,['Redund'],['Redundant']
Safety,[netxng] Avoid XRootD warnings in generated source,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9582:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/9582,1,['Avoid'],['Avoid']
Safety,[netxng] Avoid XRootD warnings in generated source [v6.26],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9701:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/9701,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid double delete in RField<RVec<T>>::DestroyValue,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9097:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/9097,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid gtest warnings about deprecated `TYPED_TEST_CASE`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12489:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/12489,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid lambda capture of structured binding,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12009:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/12009,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid the use of `TClassEdit::ResolveTypedef()` in the creation of class members' fields,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13255:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/13255,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid unnecessary meta-data memory copies,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4347:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/4347,1,['Avoid'],['Avoid']
Safety,[ntuple] Avoid warning about possibly uninitialized variable,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12440:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/12440,2,['Avoid'],['Avoid']
Safety,[ntuple] Fix ASAN detected buffer overflow,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10071:18,detect,detected,18,https://root.cern,https://github.com/root-project/root/pull/10071,1,['detect'],['detected']
Safety,[ntuple] Minor safety improvements to the RField API,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13507:15,safe,safety,15,https://root.cern,https://github.com/root-project/root/pull/13507,1,['safe'],['safety']
Safety,[ntuple] avoid inheriting from std::iterator for all homebrew iterators (NFC),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5890:9,avoid,avoid,9,https://root.cern,https://github.com/root-project/root/pull/5890,1,['avoid'],['avoid']
Safety,[ntuple] avoid page source/sink in public reader/writer interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14521:9,avoid,avoid,9,https://root.cern,https://github.com/root-project/root/pull/14521,1,['avoid'],['avoid']
Safety,[ntuple] avoid some memory allocations in RPageStorageFile,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15879:9,avoid,avoid,9,https://root.cern,https://github.com/root-project/root/pull/15879,1,['avoid'],['avoid']
Safety,[ntuple] fix cycle detection for collection proxy classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14907:19,detect,detection,19,https://root.cern,https://github.com/root-project/root/pull/14907,1,['detect'],['detection']
Safety,[ntuple] rearrange code to avoid a compiler warning,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16709:27,avoid,avoid,27,https://root.cern,https://github.com/root-project/root/pull/16709,1,['avoid'],['avoid']
Safety,[qt5web] Avoid clang warnings,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13379:9,Avoid,Avoid,9,https://root.cern,https://github.com/root-project/root/pull/13379,1,['Avoid'],['Avoid']
Safety,[rawfile] clarify thread safetiness in class comment (NFC),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6474:25,safe,safetiness,25,https://root.cern,https://github.com/root-project/root/pull/6474,1,['safe'],['safetiness']
Safety,[reve] rename some members to avoid duplication,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8195:30,avoid,avoid,30,https://root.cern,https://github.com/root-project/root/pull/8195,1,['avoid'],['avoid']
