quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"	CorrectedReads	MappedReads	DeduplicatedReads	MappingRate	DedupRate	MeanByMax	NumGenesExpressed	NumGenesOverMean	mRnaFraction	rRnaFraction	ArborescenceCount; ```; Unfortunately it seems the expected value from the last (12th) `ArborescenceCount` is getting dumped at 10th position in that case the header should be (but not currently is):; ```; CB	CorrectedReads	MappedReads	DeduplicatedReads	MappingRate	DedupRate	MeanByMax	NumGenesExpressed	NumGenesOverMean	ArborescenceCount	mRnaFraction	rRnaFraction; ```. 2.) if `--dumpUmiGraph` is provided (I am assuming you are) then instead we were experimenting with another feature which follows the convention `<Number of Reads in an Arborescence>:<Frequency of these Arborescences>` i.e. if in a cell X we observe 3 Arborescence each with 2,3,4 number of reads respectively in them then the entry of `ArborescenceCount` should look like `2:1	3:1	4:1`. Since just like the problem with 1) above there seems to be switch of the column 12 to 10 and you are observing weird looking file. . In short: Everything is fine till column 9th but there is a bug which makes column 12 to 10, 10 to 11 and 11 to 12. If you provide `--dumpUmiGraph` then last two columns represents `mRnaFraction	rRnaFraction` while everything in between column 9th and before last two represents `ArborescenceCount` with special frequency dump as defined above. My apologies for the trouble I just pushed a fix into the develop branch. However, we have significant other changes in develop branch too so recompilation might make your current index incompatible to `0.14.1` so if you don't wan't to reindex the reference then I'd not recompile from develop and the bugfix will available from the next version. Solution: The easiest solution is to remove `--dumpUMIgraph` if you don't need the flag and rerun then the only thing to handle is just change the header names. If rerunning alevin is too much work then I can forward you a python parser which can temporary handle the parsing.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/413#issuecomment-518443482:1946,avail,available,1946,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/413#issuecomment-518443482,1,['avail'],['available']
Availability," . WARNING: Detected suspicious pair --- ; The names are different:; read1 : SRR3212847.33911054; read2 : SRR3212847.30781941. Segmentation fault (core dumped); ```. ### 3. Sorting with `samtools sort -n`; ```; samtools sort \; -@ 40 \; -n \; -o SRR3212847.Aligned.SortedByName.bam \; SRR3212847.Aligned.SortedByCoord.bam. salmon quant \; -t mRNA.fasta \; -p 20 \; -l A \; -a SRR3212847.Aligned.SortedByName.bam \; -o SRR3212847.Aligned.SortedByName; ```. ```; Version Info: This is the most recent version of salmon.; # salmon (alignment-based) v1.4.0; # [ program ] => salmon ; # [ command ] => quant ; # [ targets ] => { mRNA.fasta }; # [ threads ] => { 20 }; # [ libType ] => { A }; # [ alignments ] => { SRR3212847.Aligned.SortedByName.bam }; # [ output ] => { SRR3212847.Aligned.SortedByName }; Logs will be written to SRR3212847.Aligned.SortedByName/logs; [2021-01-08 13:02:04.845] [jointLog] [info] setting maxHashResizeThreads to 20; [2021-01-08 13:02:04.845] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; Library format { type:paired end, relative orientation:inward, strandedness:unstranded }; [2021-01-08 13:02:04.878] [jointLog] [info] numQuantThreads = 14; parseThreads = 6; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""SRR3212847.Aligned.SortedByName.bam"", fasta = ""mRNA.fasta"" . . .done. processed 0 reads in current roundSegmentation fault (core dumped); ```; (Which is the same as the 1st error. Actually, each time I re-run those two errors switched.). I tried running Salmon on the sorted-by-coordinates bam, and it didn't fail:; ```; nohup salmon quant \; -t mRNA.fasta \; -p 20 \; -l A \; -a SRR3212847.Aligned.SortedByCoord.bam \; -o SRR3212847.Aligned.SortedByCoord \; > SRR3212847.Aligned.SortedByCoord.out &; ```; Even so, `SRR3212847.Aligned.SortedByCoord.out` contained ~3.5GB worth of the warnings above. Any help would be much appreciated.; Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-756727212:4192,fault,fault,4192,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-756727212,3,"['error', 'fault']","['error', 'errors', 'fault']"
Availability," 2147483647) = 0; write(2, ""terminate called without an acti""..., 45terminate called without an active exception; ) = 45; rt_sigprocmask(SIG_UNBLOCK, [ABRT], NULL, 8) = 0; write(3, ""[2017-04-05 16:24:38.504] [joint""..., 136) = 136; tgkill(10693, 10693, SIGABRT) = 0; --- SIGABRT (Aborted) @ 0 (0) ---; +++ killed by SIGABRT (core dumped) +++; ```. (371 lines for task 1, 368 for task 2). Basically, both fail at a point where `mmap()` cannot allocate memory. So it definitely looks like a memory issue and I don't know if these information gives you any hints. . ## Bumping memory. Bumping the memory request to 28/30GB. This is a scenario where task 2 seems to work ok but tasks 1 and 3 fail. ```bash; #!/bin/bash; #$ -cwd; #$ -pe local 2; #$ -l mem_free=14G,h_vmem=15G,h_fsize=100G; #$ -N step6-salmon_test12.gsk_phaseII; #$ -o ./logs/salmon_test12.$TASK_ID.txt; #$ -e ./logs/salmon_test12.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/${ID}. strace /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/s",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:78007,echo,echo,78007,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['echo'],['echo']
Availability," I did perform a random subsampling, ie. taking a read with a p probability while reading the fastq files, p being the subsampling coefficient I did mention (pE[0;1]). An implementation of this approach as an option during the transcript quantification would be great. I can provide you with the simple python script I use for the subsampling, but I am not sure if it is the proper way to subsample during alevin quantification. >when you say cellranger subsampling, do you mean the cellranger aggregate pipeline?. Yes, sorry for not clearly stating it. I did use the cellranger aggregate function indeed, which by default subsample the expression matrices with high sequencing depth depending on amount of mapped reads, if I understand well. >Use Alevin w/o any modification to the fastq on both of your sample to generate the gene count matrices. I already did that, in downstream analyses I have a batch effect issue related to the sequencing depth. >that's why we recommend using the Seurat package downstream of the Alevin quantified matrices. I have some experience with downstream analyses with Seurat, Pagoda, Scater, scanpy and a few other tools, and I am aware of batch correction methods like CCA or MNN. But that is not what I am looking for here. I did both CCA and MNN but I loose some important information in the resulting eigenspaces or corrected matrix. I believe the proper way to correct my batch effect is to simply fix the difference between my two libraries, ie. the sequencing depth in this case. As I explained in my first message, cellranger aggregate (subsampling based on the amount of mapped reads) works very well in my case, correct the effect without any loss or modification of important genes in our scientific question. Not CCA or MNN. I would like to be able to do the same from the alevin quantifications. So I am looking for a proper way to apply a correction before/during/after the alevin quantification, in a way similar to what cellranger do with STAR. Alter",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433319913:1184,down,downstream,1184,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433319913,2,['down'],['downstream']
Availability," I’ve done some sleuthing and have (seemingly) figured out what’s going on. I compared tons of overlapping transcript scenarios and played with the salmon options and concluded the following:. 1. **Success scenarios:** Generally, with default options, Salmon does an excellent job at assigning reads to overlapping transcripts the same way that a human would. Whether or not the transcripts overlap slightly or one is entirely contained within another is irrelevant. 2. **Failure scenarios:** In some scenarios with overlapping transcripts, read assignment can be very strange and unintuitive, especially when one of the transcript isoforms is much more abundant than the other (the abundant transcript tends to “steal” reads from the less abundant one). 3. Both the success and failure scenarios are **due to the length bias model** used when estimating the abundance of transcripts. **Totally disabling this with the —noLengthCorrection flag** (NOT the —no**Effective**LengthCorrection flag) **actually *creates* the transcript within a transcript failure scenario that I mistakenly thought was the original issue.** That is, when length bias modeling is turned off, then longer transcripts will always get assigned *all* of the reads that multimap to shorter transcripts.; -Therefore... if you *did* want to tackle the transcript within a transcript scenario to build a coverage bias model, you probably want to disable the length bias modeling or at least consider how it would interact with coverage modeling. With that said, I'm sharing an example that illustrates each of the above points and a link to a toy dataset that you can use to recreate the examples or explore this further. If you'd like to dig deeper into this, free free to e-mail me at jason@calicolabs.com, I have tons more notes and data that I'm willing to share. Dataset is in google drive (you'll have to click the link and request access to view it) https://drive.google.com/drive/folders/1LcJNa4PHNoYqGsnkRx0YxvNXnNJCVyq9?u",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-653747847:1095,failure,failure,1095,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-653747847,2,['failure'],['failure']
Availability," ReqS:C:T=*:*:*; MinCPUsNode=1 MinMemoryNode=25000M MinTmpDiskNode=0; Features=(null) Gres=(null) Reservation=(null); Shared=OK Contiguous=0 Licenses=(null) Network=(null); Command=(null); WorkDir=/mnt/galaxy/tmp/job_working_directory/000/990; ```. - `Galaxy stderr`; ```; Fatal error: Exit code 139 (); ...; /mnt/galaxy/tmp/job_working_directory/000/990/tool_script.sh: line 50: 5713 Segmentation fault (core dumped) salmon quant --index ./index --libType U --unmatedReads ./single.fastq --output ./output --allowOrphans --ma 2 --mp 4 --go 5 --ge 3 --minScoreFraction 0.65 --threads ""${GALAXY_SLOTS:-4}"" --incompatPrior 1e-20 --biasSpeedSamp 1 --fldMax 1000 --fldMean 200 --fldSD 80 --forgettingFactor 0.65 --maxReadOcc 100 --numBiasSamples 2000000 --numAuxModelSamples 5000000 --numPreAuxModelSamples 1000000 --numGibbsSamples 0 --numBootstraps 0 --consensusSlack 0 --vbPrior 0.001 --sigDigits 3; ```. - `syslog`; ```; ip-172-31-30-93 kernel: [ 681.083866] salmon[4167]: segfault at 2641a ip 00007fe2fcdc2dca sp 00007fff27128b90 error 4 in libtbb.so.2[7fe2fcda0000+37000]; ```. **`salmon 0.11.2 run with: NativeSpecification --ntasks=1 --nodes=1 --mem=100000`**; - `scontrol show job 98`; ```; JobId=98 Name=g994_salmon_refinery_stemcellcommons_org; UserId=galaxy(1001) GroupId=users(100); Priority=4294901663 Account=(null) QOS=(null); JobState=RUNNING Reason=None Dependency=(null); Requeue=1 Restarts=0 BatchFlag=1 ExitCode=0:0; RunTime=00:08:19 TimeLimit=UNLIMITED TimeMin=N/A; SubmitTime=2018-08-27T20:06:23 EligibleTime=2018-08-27T20:06:23; StartTime=2018-08-27T20:06:23 EndTime=Unknown; PreemptTime=None SuspendTime=None SecsPreSuspend=0; Partition=main AllocNode:Sid=ip-172-31-24-127:2236; ReqNodeList=(null) ExcNodeList=(null); NodeList=w21; BatchHost=w21; NumNodes=1 NumCPUs=1 CPUs/Task=1 ReqS:C:T=*:*:*; MinCPUsNode=1 MinMemoryCPU=100000M MinTmpDiskNode=0; Features=(null) Gres=(null) Reservation=(null); Shared=OK Contiguous=0 Licenses=(null) Network=(null); Command=(null); WorkDir=/mn",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238:2040,error,error,2040,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238,1,['error'],['error']
Availability," [alevinLog] [info] Total 138 barcodes found; [2019-01-29 09:55:59.107] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2019-01-29 09:55:59.107] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2019-01-29 09:55:59.107] [alevinLog] [info] Starting to make feature Matrix; [2019-01-29 09:55:59.115] [alevinLog] [info] Done making regular featues; [2019-01-29 09:55:59.115] [alevinLog] [info] Done making feature Matrix; [2019-01-29 09:55:59.123] [alevinLog] [info] Finished white listing; [2019-01-29 09:55:59.126] [alevinLog] [info] Finished optimizer; ``` . Concat fastq:; ```; salmon alevin -l ISR -1 big.fastq.1.gz -2 big.fastq.2.gz --chromium -i geneset.dir/geneset_coding_exons.salmon.index/ -o salmon.dir/ --tgMap transcript2geneMap.tsv --dumpCsvCounts; Version Info: ### PLEASE UPGRADE SALMON ###; ### A newer version of Salmon with important bug fixes and improvements is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; Logs will be written to salmon.dir/logs; ### alevin (dscRNA-seq quantification) v0.11.3; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ libType ] => { ISR }; ### [ mates1 ] => { big.fastq.1.gz }; ### [ mates2 ] => { big.fastq.2.gz }; ### [ chromium ] => { }; ### [ index ] => { geneset.dir/geneset_coding_exons.salmon.index/ }; ### [ output ] => { salmon.dir/ }; ### [ tgMap ] => { transcript2geneMap.tsv }; ### [ dumpCsvCounts ] => { }. [2019-01-29 09:56:37.731] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-01-29 09:56:37.749] [alevinLog] [info] Processing barcodes files (if Present) . ; processed 2 Million barcodes. [2019-01-29 09:56:43.029] [alevinLog] [info] Done barcode density calculation.; [2019-01-29 09:56:43.029] [alevinLog] [info] # Ba",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:6186,avail,available,6186,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['avail'],['available']
Availability," ] => { SRR1818187_2.fastq.gz }; ### [ mates2 ] => { SRR1818187_1.fastq.gz }; ### [ validateMappings ] => { }; ### [ output ] => { Salmontranscripts_quant }; Logs will be written to Salmontranscripts_quant/logs; [2019-08-25 11:40:44.518] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-08-25 11:40:44.518] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-08-25 11:40:44.518] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-08-25 11:40:44.518] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-08-25 11:40:44.518] [jointLog] [info] parsing read library format; [2019-08-25 11:40:44.518] [jointLog] [info] There is 1 library.; Exception : [Error: The index version file salmonIndexDecoyMouse/versionInfo.json doesn't seem to exist. Please try re-building the salmon index.]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting.; (salmon) wayne@Ubuntu19:~/rnaseq$ ls -R *.json; ls: cannot access '*.json': No such file or directory. Try 2.; Instead of referring to my directory decoys/ , I moved to the directory decoys/ ; and ran salmon index again, using your command exactly:; salmon index -t gentrome.fa -d decoys.txt -i combined_index. This time a few .json files were produced in the directory combined_index/ [your name this time]; [contents of decoys= combined_index gentrome.fa mus_musculus.tar.gz Salmontranscripts_quant; decoys.txt links.txt salmonQuantDecoy22.sh]. then [sh salmonQuantDecoy22.sh]; salmon quant -p 3 -i combined_index -l A -1 ../SRR1818187_2.fastq.gz -2 ../SRR1818187_1.fastq.gz --validateMappings -o Salmontranscripts_quant. Now no Segmentation Fault crash. ; The program finishes with; [2019-08",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-524651435:1956,Error,Error,1956,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-524651435,1,['Error'],['Error']
Availability," ```; ERROR: Transcript ENST00000630276 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000429962 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000415237 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000450652 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000384843 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000602568 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000384229 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000420508 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000608317 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000424410 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000417463 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000623071 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000447720 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000436681 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000416615 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000431488 appeared in the BAM in",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737:430,ERROR,ERROR,430,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737,10,['ERROR'],['ERROR']
Availability, ```; minEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQCla,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266888582:558,error,errorminEQClassWeight,558,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266888582,44,['error'],['errorminEQClassWeight']
Availability," echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/${ID}. strace /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/${ID} 2> logs/strace_test12_${SGE_TASK_ID}.txt. echo ""**** Job ends ****""; date; ```. Again, here is the `strace` output for task 1 (411 lines):. ```; execve(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", [""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""quant"", ""-i"", ""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""-p"", ""1"", ""-l"", ""ISR"", ""-1"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-2"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-o"", ""/dcl01/lieber/ajaffe/lab/libd_al""...], [/* 107 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", 4096) = 88; access(""/etc/ld.so.preload"", R_OK) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipelin",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:79074,echo,echo,79074,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['echo'],['echo']
Availability," first column will be the per CB level mapping rate i.e. `#mapped reads/#raw reads`. If you wan't absolute values for per-CB reads and mapped reads, it should be in the file `filtered_cb_frequency.txt` and `mappedUMI.txt` respectively.; * `re: cellranger subsampling:` Correct me if I am wrong, when you say cellranger subsampling, do you mean the `cellranger aggregate` pipeline? It's possible you are talking about some other step which I am not aware of but if it's `aggregate` then I think it happens downstream of all the quantification. Indeed coverage bias correction is an important part of the aggregation step but in general it's not the only one and that's why we recommend using the `Seurat` package downstream of the Alevin quantified matrices. We will be more than happy to write a tutorial on, ""how to perform batch correction downstream of Alevin"" but in summary the following steps would be the gist of the process.; - Use Alevin w/o any modification to the `fastq` on both of your sample to generate the gene count matrices. (We have made a major upgrade to the Alevin. We'd recommend using [v0.12.0-alpha](https://github.com/COMBINE-lab/salmon/tree/v0.12.0-alpha) for now, we are planning to make an official release before the end of this week, currently you can use pre-release. Unfortunately, not available on conda yet).; - Import Alevin count matrices into R using [this](https://combine-lab.github.io/alevin-tutorial/2018/alevin-seurat/) tutorial .; - Use [this](https://satijalab.org/seurat/immune_alignment.html) to perform the batch correction. ; We do realize it's currently complicated to use things downstream of Alevin and are working constantly on improving the overall pipeline to make the analyses as smooth as possible. If you happen to write a tutorial of your own on doing the analyses, we'd be happy to include that in Alevin tutorial page. However, if you get stuck with any of the above steps do let us know, we'd be more than happy to help in that front too.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433169468:2449,avail,available,2449,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433169468,4,"['avail', 'down']","['available', 'downstream']"
Availability," have some answers just to let you know what happened.; All the best,; Grant. Grant R. Cramer; Professor; Department of Biochemistry and Molecular Biology, Howard Building Room 205, Mail Stop 330; University of Nevada, Reno; Reno, NV 89557; (775) 784-4204; cramer@unr.edu<mailto:cramer@unr.edu>; http://www.ag.unr.edu/cramer/. On Mar 22, 2018, at 6:21 PM, Rob Patro <notifications@github.com<mailto:notifications@github.com>> wrote:. Hi @grantcramer<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fgrantcramer&data=01%7C01%7Ccramer%40unr.edu%7C54d34feceb114e30a61b08d5905c7a7b%7C523b4bfc0ebd4c03b2b96f6a17fd31d8%7C1&sdata=w1ED%2B5ZBUY6Z8fTiIs62IZJizv0HcvVzw8CtfEdK32E%3D&reserved=0>,. I was able to successfully index and map against the fasta file you link above (on linux). I was also able to index and map against the index on OSX, using the salmon from bioconda (v 0.9.1). So, I'm not yet able to reproduce this. It seems the file you uploaded for your pre-built index is no longer available, so I couldn't try that out. I'd be happy to give it a try if you can put it up on dropbox or some such. Otherwise, I wonder if there could be some sort of binary compatibility issue. Did you build the index on the same machine you're quantifying on? The OSX I tested on is 10.13.1. Best,; Rob. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FCOMBINE-lab%2Fsalmon%2Fissues%2F209%23issuecomment-375509050&data=01%7C01%7Ccramer%40unr.edu%7C54d34feceb114e30a61b08d5905c7a7b%7C523b4bfc0ebd4c03b2b96f6a17fd31d8%7C1&sdata=5XDT2ix1q1Uz%2B3kTchI%2B5K9Hzu7UuGkyQAz8KB9ko4o%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAj0RizznzcCphH-HJ9Q8uXvndQ4Lsg9Oks5thE43gaJpZM4Sw28q&data=01%7C01%7Ccramer%40unr.edu%7C54d34feceb114e30a61b08d5905c7a7b%7C523b4bf",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/209#issuecomment-375513800:1303,avail,available,1303,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/209#issuecomment-375513800,1,['avail'],['available']
Availability," here with alevin, so it would mis-detect cells like the shifted ones you pasted above. For SPLiT-seq, we do know exactly which barcodes go into the wells, however, so it is technically possible to restrict based on all possible known combinations of barcodes instead and be more positionally flexible. But deciding how many indel bases are allowable, and presumably doing multiple passes through the data to establish an include-list could be time-consuming. Further, the zUMIs developer rightly mentions [in this thread](https://github.com/sdparekh/zUMIs/issues/63) that there are likely going to be _many_ unused barcode combinations this way, so lots of time could be spent looking for ""cells"" that don't actually exist in the data. The authors of the paper from which our test dataset was derived describe in their methods using a Drop-seq computational framework, so I'm not sure which approach theirs is more similar to. . The simplest approach here is certainly the automatic detection, but it will come at the cost of losing meaningful reads to frameshift errors. . My guess is this falls well out of the scope of alevin, but if you're interested in improving on that, there may be a middle ground between the two approaches above, one that I'm not sure if your group or others have attempted for other methods: we could essentially do a 2-pass barcode detection. The first pass would restrict based on positions like we're already doing, and establish an include-list of possible barcodes seen in the data. Then we could pass through the barcode sequences a second time, looking only for those sequence combinations, but allowing 1-2bp flexibility in the positions they occur, potentially rescuing some of the ones missed during the first pass. This would get around the issue of searching for thousands (or more) barcodes that never exist. . However, for your above sequences in red, we would still need to somehow collapse the barcodes `GATAGACA`, `ATAGACAT`, and `ATAGACAG`, but perhaps t",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-985554883:1307,error,errors,1307,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-985554883,2,['error'],['errors']
Availability," only 12; > libraries for each in the directory, which is why I got confused when it; > said 13. I will try putting in all of the file names and let you know how; > it goes. Thank you for all of your help.; >; > Sara; >; > [2019-07-29 15:58:39.034] [jointLog] [info] Fragment incompatibility prior; > below threshold. Incompatible fragments will be ignored.; > [2019-07-29 15:58:39.034] [jointLog] [info] Usage of --validateMappings; > implies use of minScoreFraction. Since not explicitly specified, it is; > being set to 0.65; > [2019-07-29 15:58:39.034] [jointLog] [info] Usage of --validateMappings,; > without --hardFilter implies use of range factorization.; > rangeFactorizationBins is being set to 4; > [2019-07-29 15:58:39.034] [jointLog] [info] Usage of --validateMappings; > implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; > [2019-07-29 15:58:39.034] [jointLog] [info] parsing read library format; > [2019-07-29 15:58:39.034] [jointLog] [error] Failed to successfully parse; > any complete read libraries. Please make sure you provided arguments; > properly to -1, -2 (for paired-end libraries) or -r (for single-end; > libraries), and that the library format option (-l) *comes before* the read; > libraries.; >; > On Mon, Jul 29, 2019 at 4:06 PM Avi Srivastava <notifications@github.com>; > wrote:; >; >> Oh Sorry about that what I meant was the salmon.log file or the the; >> meta-info.json file created by salmon in the output directory. You can; >> check what files salmon is detecting it seems there are 12 files in the; >> mate1 and 13 files in the mate2. Can you confirm there are 13 pairs of file; >> in that directory and their regex is same as you are using ? Can you also; >> try putting the names of the file instead * as regex ?; >>; >> —; >> You are receiving this because you were mentioned.; >> Reply to this email directly, view it on GitHub; >> <https://github.com/COMBINE-lab/salmon/issues/408?email_source=notifications&email_token=AEHDXAA5DH",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516521791:2976,error,error,2976,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516521791,1,['error'],['error']
Availability," protocols, it is usually the case that we get 1 read -> 1 transcript, even if we don't read the whole thing. We have tested the effect of this in ONT data with spike ins, and have verified that using `--noLengthCorrection` does generally lead to improved accuracy with respect to quantification estimates. We have informed ONT of this, and I would guess they may optimize the flags that are used soon (we have also developed an error model that works correctly for these long reads, and that should make it into the next release of salmon). Regarding the effect this has on the `NumReads` values reported by salmon, it's not as simple as with the `TPM` estimates. The length affects the assigned reads through the probabilistic model on which inference is done. With the length effect we have that P(f | t_i) ∝ P( position | f, t_i ) * P( alignment | f, t_i) --- forgetting the alignment term for the time being, we have that with length correction P( position | f, t_i ) ∝ 1 / l_i and without length correction the l_i term goes away. In other words, the probability of allocating reads has a term that depends on the effective length when the `--noLengthCorrection` flag is not passed, but that term goes away when it is passed. This is not quite as drastic as with TPM where the normalization includes the length directly in the normalization (note, however, that when the `--noLengthCorrection` flag is passed, this adjusts the TPM as well). Further, the `NumReads` is still better than TPM in this regard because it still encodes the effect size (i.e. `NumReads` will sum to the total number of aligned reads). Anyway TLDR: Passing the `--noLengthCorrection` flag *is* better for ONT data, though results without this flag are sub-optimal, they are not unusable. We have let ONT know about this, and I would suspect they will address it (perhaps they'll even accept a PR?). Finally, a long read error model has been created and will _hopefully_ make it to the next version of salmon. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/651#issuecomment-821995147:2240,error,error,2240,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/651#issuecomment-821995147,2,['error'],['error']
Availability," run -it debian:testing; $ echo ""deb-src http://deb.debian.org/debian unstable main"" > /etc/apt/sources.list.d/10-debsrc.list; $ apt update; $ apt upgrade; $ apt build-dep salmon; $ wget https://github.com/COMBINE-lab/salmon/archive/refs/tags/v1.10.0.tar.gz; $ tar xaf v1.10.0.tar.gz; $ cd salmon-1.10.0; $ cmake -DCMAKE_BUILD_TYPE=Release -DUSE_SHARED_LIBS=TRUE -DBZIP2_LIBRARIES=-lbz2 -DBZIP2_INCLUDE_DIR=/usr/include -DLIBLZMA_INCLUDE_DIR=/usr/include/ -DLIBLZMA_LIBRARY=lzma -DCMAKE_MODULE_PATH=/usr/share/cmake/Modules -DTBB_WILL_RECONFIGURE=FALSE -DBOOST_WILL_RECONFIGURE=FALSE; $ make; $ tar xaf sample_data.tgz; # src/salmon index -t sample_data/transcripts.fasta -i sample_salmon_quasi_index; Version Info: This is the most recent version of salmon.; index [""sample_salmon_quasi_index""] did not previously exist . . . creating it; [2023-03-10 11:56:01.434] [jLog] [warning] The salmon index is being built without any decoy sequences. It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be rovided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.; [2023-03-10 11:56:01.435] [jLog] [info] building index; out : sample_salmon_quasi_index; [2023-03-10 11:56:01.435] [puff::index::jointLog] [info] Running fixFasta. [Step 1 of 4] : counting k-mers. [2023-03-10 11:56:01.441] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides; [2023-03-10 11:56:01.441] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts; wrote 15 cleaned references; Segmentation fault (core dumped). Please note that `-DNO_IPO=TRUE` is not part of the above cmake call. I've added this to the packaging, but there is no difference. Please also note that I did *not* cloned the Git repository but have downloaded the release tarball since this is what we are packaging. Hope this helps tracking down the issue. Kind regards, Andreas.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463708855:4789,fault,fault,4789,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463708855,3,"['down', 'fault']","['down', 'downloaded', 'fault']"
Availability," subsampling the Fastq, did you sample randomly across the full Fastq or chose the top X reads. Yes, I did perform a random subsampling, ie. taking a read with a p probability while reading the fastq files, p being the subsampling coefficient I did mention (pE[0;1]). An implementation of this approach as an option during the transcript quantification would be great. I can provide you with the simple python script I use for the subsampling, but I am not sure if it is the proper way to subsample during alevin quantification. >when you say cellranger subsampling, do you mean the cellranger aggregate pipeline?. Yes, sorry for not clearly stating it. I did use the cellranger aggregate function indeed, which by default subsample the expression matrices with high sequencing depth depending on amount of mapped reads, if I understand well. >Use Alevin w/o any modification to the fastq on both of your sample to generate the gene count matrices. I already did that, in downstream analyses I have a batch effect issue related to the sequencing depth. >that's why we recommend using the Seurat package downstream of the Alevin quantified matrices. I have some experience with downstream analyses with Seurat, Pagoda, Scater, scanpy and a few other tools, and I am aware of batch correction methods like CCA or MNN. But that is not what I am looking for here. I did both CCA and MNN but I loose some important information in the resulting eigenspaces or corrected matrix. I believe the proper way to correct my batch effect is to simply fix the difference between my two libraries, ie. the sequencing depth in this case. As I explained in my first message, cellranger aggregate (subsampling based on the amount of mapped reads) works very well in my case, correct the effect without any loss or modification of important genes in our scientific question. Not CCA or MNN. I would like to be able to do the same from the alevin quantifications. So I am looking for a proper way to apply a correction be",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433319913:1053,down,downstream,1053,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433319913,2,['down'],['downstream']
Availability," the right end of the transcript which is inconsistent with the coverage profile and, as hoped, salmon did not assign any reads to that variant. So, in these two scenarios the default options produce nice results in line with our human intuition. 2. **Failure scenario with default options:** ; ![PDI1_example](https://user-images.githubusercontent.com/10292386/86509895-3df36600-bda0-11ea-8f0b-df0de4fefa31.png); <img width=""383"" alt=""PDI1_table"" src=""https://user-images.githubusercontent.com/10292386/86509897-40ee5680-bda0-11ea-9566-9f2bdab464f0.png"">. In this example there are four genes (oriented in the same direction) with wildly different expression levels. I added a ""PDI1_SuperTranscript"" which stretches from the 5' end of PDI1 to the 3' end of POF1 (so, all reads from all 4 genes would multimap to the super transcript). This is a contrived example to illustrate the technical details, but you could imagine similar biological scenarios, especially regarding splicing isoforms. With the default options, you get the counterintuitive result that all of the reads from just MGR1 and POF1 (the two lowest abundance transcripts) are assigned to the super transcript. EMC1 loses ~50% of its reads to the super transcript, and PDI1 only loses ~10%. I'm not showing it, but if you remove the default PDI1 transcript from the index (so it's just the super transcript + the 3 genes MGR1/EMC1/POF1), all three of them lose all of their reads to the super transcript... meaning that whether or not EMC1 gets assigned any reads depends entirely on the presence of a non-overlapping gene, PDI1, in the salmon index. This is definitely at odds with our intuition from looking at the coverage plots, but makes sense when you break all the transcripts down to a simple reads per kb equation. As before, if you turn off length modeling then all of the reads get assigned to the super transcript. I hope this was insightful and cleared up the issue a bit. Feel free to e-mail or reply here. Best,; Jason",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-653747847:6637,down,down,6637,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-653747847,2,['down'],['down']
Availability,![segmentation fault](https://user-images.githubusercontent.com/32517940/45555058-bd97f580-b805-11e8-8432-5d13c989bb3f.png),MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421369284:15,fault,fault,15,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421369284,1,['fault'],['fault']
Availability,"$ sudo make install; [ 7%] Built target libcereal; [ 14%] Built target libdivsufsort; [ 21%] Built target libstadenio; [ 28%] Built target libbwa; [ 36%] Built target libgff; [ 42%] Built target libspdlog; [ 47%] Built target ksw2pp_basic; [ 49%] Built target ksw2pp_sse4; [ 52%] Built target ksw2pp_sse2; [ 53%] Built target ksw2pp; [ 55%] Built target alevin_core; [ 69%] Built target salmon_core; [ 74%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /usr/local/lib; -- Up-to-date: /usr/local/lib/libtbbmalloc.so; -- Up-to-date: /usr/local/lib/pkgconfig; -- Up-to-date: /usr/local/lib/libtbb.so; -- Up-to-date: /usr/local/lib/libtbb.so.2; -- Up-to-date: /usr/local/lib/libtbbmalloc_proxy.so.2; -- Up-to-date: /usr/local/lib/libtbbmalloc_proxy.so; -- Up-to-date: /usr/local/lib/libtbbmalloc.so.2; -- Up-to-date: /usr/local/bin/salmon; -- Up-to-date: /usr/local/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly. Please add /usr/local/bin to your PATH; Please add /usr/local/lib to your LD_LIBRARY_PATH. $ make test; Running tests...; Test project salmon/build; Start 1: unit_tests; 1/3 Test #1: unit_tests .......................***Failed 0.02 sec; Start 2: salmon_read_test_fmd; 2/3 Test #2: salmon_read_test_fmd ............. Passed 1.67 sec; Start 3: salmon_read_test_quasi; 3/3 Test #3: salmon_read_test_quasi ........... Passed 1.62 sec. 67% tests passed, 1 tests failed out of 3. Total Test time (real) = 3.32 sec. The following tests FAILED:; 	 1 - unit_tests (Failed); Errors while running CTest; Makefile:151: recipe for target 'test' failed; make: *** [test] Error 8",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393691425:1606,Error,Errors,1606,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393691425,2,['Error'],"['Error', 'Errors']"
Availability,"**Hi all,; Just an update:; I also got same warning message (as @rbenel talk about it here) when creating index along with decoy sequences I took @kvittingseerup's advice and made a transcripts.fa file by gffread command. Here is my input files and commend:; All gtf and genome references were downloaded from GENCODE: GRCh38.primary_assembly.genome.fa.gz, gencode.v36.annotation.gtf (CHR) and gencode.v36.transcripts.fa.gz.; commends:; grep ""^>"" <(gunzip -c GRCh38.primary_assembly.genome.fa.gz) | cut -d "" "" -f 1 > decoys.txt; sed -i.bak -e 's/>//g' decoys.txt; cat salmon_transcripts.fa.gz GRCh38.primary_assembly.genome.fa.gz > gentrome.fa.gz; salmon index -t gentrome.fa.gz -d decoys.txt -p 12 -i salmon-decoy-sa-index --gencode; warnings:**. [Step 1 of 4] : counting k-mers; [2020-12-26 10:47:50.823] [puff::index::jointLog] [warning] Entry with header [ENST00000473810.1|ENSG00000239255.1|OTTHUMG00000157482|OTTHUMT00000348942.1|AC007620.1-201|AC007620.1|25|processed_pseudogene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:50.973] [puff::index::jointLog] [warning] Entry with header [ENST00000603775.1|ENSG00000271544.1|OTTHUMG00000184300|OTTHUMT00000468575.1|AC006499.8-201|AC006499.8|23|processed_pseudogene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:52.758] [puff::index::jointLog] [warning] Entry with header [ENST00000632684.1|ENSG00000282431.1|OTTHUMG00000190602|OTTHUMT00000485301.1|TRBD1-201|TRBD1|12|TR_D_gene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:54.950] [puff::index::jointLog] [warning] Entry with header [ENST00000543745.1|ENSG00000255972.1|OTTHUMG00000168883|OTTHUMT00000401485.1|AC026333.1-201|AC026333.1|28|processed_pseudogene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:55.202] [puff::index::jointLog] [warning] Entry",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751354991:294,down,downloaded,294,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751354991,1,['down'],['downloaded']
Availability,"**Hi all,; Just an update:; I also got same warning message (as @rbenel talk about it here) when creating index along with decoy sequences I took @kvittingseerup's suggestion and made a transcripts.fa file by gffread command. Here is my input files and commend:; All gtf and genome references were downloaded from GENCODE: GRCh38.primary_assembly.genome.fa.gz, gencode.v36.annotation.gtf (CHR), gencode.v36.transcripts.fa.gz.; commends:; grep ""^>"" <(gunzip -c GRCh38.primary_assembly.genome.fa.gz) | cut -d "" "" -f 1 > decoys.txt; sed -i.bak -e 's/>//g' decoys.txt; cat salmon_transcripts.fa.gz GRCh38.primary_assembly.genome.fa.gz > gentrome.fa.gz; salmon index -t gentrome.fa.gz -d decoys.txt -p 12 -i salmon-decoy-sa-index --gencode; warnings:**; [Step 1 of 4] : counting k-mers; [2020-12-26 10:47:50.823] [puff::index::jointLog] [warning] Entry with header [ENST00000473810.1|ENSG00000239255.1|OTTHUMG00000157482|OTTHUMT00000348942.1|AC007620.1-201|AC007620.1|25|processed_pseudogene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:50.973] [puff::index::jointLog] [warning] Entry with header [ENST00000603775.1|ENSG00000271544.1|OTTHUMG00000184300|OTTHUMT00000468575.1|AC006499.8-201|AC006499.8|23|processed_pseudogene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:52.758] [puff::index::jointLog] [warning] Entry with header [ENST00000632684.1|ENSG00000282431.1|OTTHUMG00000190602|OTTHUMT00000485301.1|TRBD1-201|TRBD1|12|TR_D_gene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:54.950] [puff::index::jointLog] [warning] Entry with header [ENST00000543745.1|ENSG00000255972.1|OTTHUMG00000168883|OTTHUMT00000401485.1|AC026333.1-201|AC026333.1|28|processed_pseudogene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:55.202] [puff::index::jointLog] [warning] Entr",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751354493:298,down,downloaded,298,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751354493,1,['down'],['downloaded']
Availability,*shrug* conda isn't mentioned in the salmon docs so I'll just leave this here for people who are trying to use bioconda and run into this error. peace out!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/480#issuecomment-580259997:138,error,error,138,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/480#issuecomment-580259997,1,['error'],['error']
Availability,"------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.4236 s; -----------------------------------------; size = 1057188904; Number of ones: 16145664; Number of ones per inventory item: 512; Inventory entries filled: 31535; -----------------------------------------; | Loading contig boundaries | Time = 4.031 s; -----------------------------------------; size = 1057188904; -----------------------------------------; | Loading sequence | Time = 1.983 s; -----------------------------------------; size = 572818984; -----------------------------------------; | Loading positions | Time = 14.658 s; -----------------------------------------; size = 942318702; -----------------------------------------; | Loading reference sequence | Time = 1.4932 s; -----------------------------------------; -----------------------------------------; | Loading reference accumulative lengths | Time = 10.959 ms; -----------------------------------------; Error: invalid feature coordinates (end<start!) at line:; NC_029855.1	RefSeq	gene	406748	107842	.	+	.	gene_id ""A5N79_gp28""; db_xref ""GeneID:27215502""; exception ""trans-splicing""; gbkey ""Gene""; gene ""nad2""; gene_biotype ""protein_coding""; locus_tag ""A5N79_gp28""; ; --- . After I remove the erroneous entry, there is no more complaint:. ---; Version Info: This is the most recent version of salmon.; -----------------------------------------; | Loading contig table | Time = 14.648 s; -----------------------------------------; size = 16145665; -----------------------------------------; | Loading contig offsets | Time = 336.77 ms; -----------------------------------------; -----------------------------------------; | Loading reference lengths | Time = 10.195 ms; -----------------------------------------; -----------------------------------------; | Loading mphf table | Time = 2.3113 s; -----------------------------------------; size = 1057188904; Number of ones: 16145664; Number of ones per inventory it",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746:1514,Error,Error,1514,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709699746,1,['Error'],['Error']
Availability,"--unmatedReads ] arg List of files containing unmated reads ; of (e.g. single-end reads); -1 [ --mates1 ] arg File containing the #1 mates; -2 [ --mates2 ] arg File containing the #2 mates. alevin-specific Options:; --noDedup Stops the pipeline after CB sequence ; correction and quasi-mapping reads.; --dropseq Use DropSeq Single Cell protocol for ; the library; --chromium Use 10x chromium v2 Single Cell ; protocol for the library.; --gemcode Use 10x gemcode v1 Single Cell protocol; for the library.; --whitelist arg File containing white-list barcodes; --noQuant Don't run downstream barcode-salmon ; model.; --naive Run Gene level naive deduplication; --noSoftMap Don't use soft-assignment for quant ; instead do hard-assignment.; --mrna arg path to a file containing mito-RNA ; gene, one per line; --rrna arg path to a file containing ribosomal ; RNA, one per line; --useCorrelation Use pair-wise pearson correlation with ; True barcodes as a feature for ; white-list creation.; --dumpfq Dump barcode modified fastq file for ; downstream analysis by using coin toss ; for multi-mapping.; --debug Enabling this mode mode will try to ; ignore segfaults based on no whitelist ; mapping or no whitelist deduplicated ; count; --dumpBfh dump the big hash with all the barcodes; and the UMI sequence.; --dumpFeatures Dump features for whitelist and ; downstream analysis.; --dumpCsvCounts Dump cell v transcripts count matrix in; csv format.; --lowRegionMinNumBarcodes arg (=200) Minimum Number of CB to use for ; learning Low confidence region ; (Default: 200).; --maxNumBarcodes arg (=100000) Maximum allowable limit to process the ; cell barcodes. (Default: 100000); --tgMap arg transcript to gene map tsv file; ```; 2) `salmon alevin -lISR -1 cells_CTTGTA_L001_R1_001.fastq.gz -2 cells_CTTGTA_L001_R2_001.fastq.gz --celseq2 -i AlevinIndex_develop/ -p 8 -o alevin_output --tgMap gencode.primary_assembly.tsv`. **The tsv I created myself (with tximport), but I don't think that is the issue here...",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/325#issuecomment-443517536:1385,down,downstream,1385,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/325#issuecomment-443517536,4,['down'],['downstream']
Availability,"-0.7.12.3/bwamem.c; bwa-0.7.12.3/bwamem.h; bwa-0.7.12.3/bwamem_extra.c; bwa-0.7.12.3/bwamem_pair.c; bwa-0.7.12.3/bwape.c; bwa-0.7.12.3/bwase.c; bwa-0.7.12.3/bwase.h; bwa-0.7.12.3/bwaseqio.c; bwa-0.7.12.3/bwashm.c; bwa-0.7.12.3/bwt.c; bwa-0.7.12.3/bwt.h; bwa-0.7.12.3/bwt_gen.c; bwa-0.7.12.3/bwt_lite.c; bwa-0.7.12.3/bwt_lite.h; bwa-0.7.12.3/bwtaln.c; bwa-0.7.12.3/bwtaln.h; bwa-0.7.12.3/bwtgap.c; bwa-0.7.12.3/bwtgap.h; bwa-0.7.12.3/bwtindex.c; bwa-0.7.12.3/bwtsw2.h; bwa-0.7.12.3/bwtsw2_aux.c; bwa-0.7.12.3/bwtsw2_chain.c; bwa-0.7.12.3/bwtsw2_core.c; bwa-0.7.12.3/bwtsw2_main.c; bwa-0.7.12.3/bwtsw2_pair.c; bwa-0.7.12.3/example.c; bwa-0.7.12.3/fastmap.c; bwa-0.7.12.3/is.c; bwa-0.7.12.3/kbtree.h; bwa-0.7.12.3/khash.h; bwa-0.7.12.3/kopen.c; bwa-0.7.12.3/kseq.h; bwa-0.7.12.3/ksort.h; bwa-0.7.12.3/kstring.c; bwa-0.7.12.3/kstring.h; bwa-0.7.12.3/ksw.c; bwa-0.7.12.3/ksw.h; bwa-0.7.12.3/kthread.c; bwa-0.7.12.3/kvec.h; bwa-0.7.12.3/main.c; bwa-0.7.12.3/malloc_wrap.c; bwa-0.7.12.3/malloc_wrap.h; bwa-0.7.12.3/maxk.c; bwa-0.7.12.3/pemerge.c; bwa-0.7.12.3/qualfa2fq.pl; bwa-0.7.12.3/utils.c; bwa-0.7.12.3/utils.h; bwa-0.7.12.3/xa2multi.pl; [ 50%] No patch step for 'libbwa'; [ 50%] No update step for 'libbwa'; [ 51%] No configure step for 'libbwa'; [ 51%] Performing build step for 'libbwa'; /bin/ld: cannot find -lz; collect2: error: ld returned 1 exit status; make[3]: *** [bwa] Error 1; make[2]: *** [libbwa-prefix/src/libbwa-stamp/libbwa-build] Error 2; make[1]: *** [CMakeFiles/libbwa.dir/all] Error 2; make: *** [all] Error 2. So as you said I'd say its having issued finding the zlibs library. Similar to how I used 'DZLIB_LIBRARY=/users/work/jake/bin/zlib-1.2.11/zlib.h' to specify the zlib library for 'cmake', is there a way to do it for the 'make' command? I've tried using the following but haven't had success:; make -I /users/work/jake/bin/zlib-1.2.11/zlib.h; make --include-dir=/users/work/jake/bin/zlib-1.2.11/zlib.h. Sorry for the very basic questions.... I'm kind of learning as I go.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873:3481,error,error,3481,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873,6,"['Error', 'error']","['Error', 'error']"
Availability,"./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7fff7e0f4700 (LWP 14274) exited]; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; [New Thread 0x7fff7d273700 (LWP 14275)]; Logs will be written to pbmc4k/alevin/logs; [New Thread 0x7ffefc3f1700 (LWP 14276)]; [New Thread 0x7ffe7b56f700 (LWP 14277)]; [New Thread 0x7ffdfa6ed700 (LWP 14278)]; ### salmon (single-cell-based) v0.10.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 8 }; ### [ output ] => { pbmc4k/alevin }; ### [ mates1 ] => { /dev/fd/63 }; ### [ mates2 ] => { /dev/fd/62 }; ### [ index ] => { /u/user/ref/cellranger/salmon/transcripts_index }; ### [ tgMap ] => { tx2gene.txt }. [2018-06-08 13:37:41.409] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [New Thread 0x7ffd795e7700 (LWP 14279)]; [New Thread 0x7ffcf95e6700 (LWP 14280)]; [New T",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:2892,avail,available,2892,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['avail'],['available']
Availability,".1 boost/1.70.0-gcc libiconv/1.16; export CC=`which gcc`; export CXX=`which c++`. cd $MODULE_HOME; mkdir -p source/$PACKAGE_NAME/$VERSION; INSTALL_DIR=$MODULE_HOME/modules/$PACKAGE_NAME/$VERSION; mkdir -p $INSTALL_DIR; mkdir -p modfiles/$PACKAGE_NAME. cd source/$PACKAGE_NAME/$VERSION; wget $LATEST_RELEASE -O - | tar -xz --strip-components 1; cmake -DBOOST_ROOT=/global/software/sl-7.x86_64/modules/gcc/7.4.0/boost/1.70.0-gcc -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR; make; ```; And the tail of the output from make:. ```; creating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/; inflating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/int128_numeric_limits.cpp ; -- fetch PUFFERFISH exit code 0; -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11"") ; -- Performing Test Iconv_IS_BUILT_IN; -- Performing Test Iconv_IS_BUILT_IN - Failed; CMake Error at /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find Iconv (missing: Iconv_LIBRARY); Call Stack (most recent call first):; /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindIconv.cmake:120 (find_package_handle_standard_args); CMakeLists.txt:362 (find_package). -- Configuring incomplete, errors occurred!; See also ""/clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/CMakeFiles/CMakeOutput.log"".; See also ""/clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/CMakeFiles/CMakeError.log"".; ```; I'm also attaching the full CMake logs. This is right at the edge of my knowledge, so I'm not 100% sure I got libiconv installed corre",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315:1856,Error,Error,1856,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315,1,['Error'],['Error']
Availability,".1',; 'ENST00000493496.5',; 'ENST00000460361.1',; 'ENST00000441953.6',; 'ENST00000431735.6',; 'ENST00000462670.1',; 'ENST00000491795.5',; 'ENST00000468378.1',; 'ENST00000383214.8',; 'ENST00000383213.8',; 'ENST00000486373.5',; 'ENST00000491702.1',; 'ENST00000478834.1',; 'ENST00000444757.5',; 'ENST00000429042.5',; 'ENST00000454420.5',; 'ENST00000425069.5',; 'ENST00000414757.5',; 'ENST00000414916.5']; ```; and, the other transcript is connected to ; ```; ['ENST00000376621.7',; 'ENST00000487166.1',; 'ENST00000383450.3',; 'ENST00000497332.1',; 'ENST00000441604.5',; 'ENST00000481420.1',; 'ENST00000487687.1',; 'ENST00000454829.5',; 'ENST00000490227.1',; 'ENST00000437917.5',; 'ENST00000481380.1',; 'ENST00000383596.6',; 'ENST00000488456.1',; 'ENST00000417834.5',; 'ENST00000486264.1',; 'ENST00000462708.1',; 'ENST00000478748.1',; 'ENST00000465483.1',; 'ENST00000478986.1',; 'ENST00000480572.1',; 'ENST00000497917.1',; 'ENST00000469494.1',; 'ENST00000489631.1',; 'ENST00000433809.1',; 'ENST00000456550.1',; 'ENST00000450423.1',; 'ENST00000435788.1',; 'ENST00000416639.1',; 'ENST00000443235.1',; 'ENST00000458592.1',; 'ENST00000430236.1',; 'ENST00000464231.1',; 'ENST00000496960.1',; 'ENST00000492408.1',; 'ENST00000479883.1',; 'ENST00000467241.1',; 'ENST00000483987.1',; 'ENST00000495838.1',; 'ENST00000467550.1']; ```; Clearly, in the alignment-based is connected to a lot of other transcripts connected, so their different behaviors is expected. ; I think this makes the solution so unstable that EM assigns all the reads to one rather than distributing them to other members. We need to look at the actual bootstrap/gibbs to have more insight. . I would also like to add, as @rob-p suggested previously, this is a classic example where EM algorithm is not that reliable, b/c of uncertainty and `terminus` might be the best answer. . Here is the [script](https://gist.github.com/hiraksarkar/30d8ce2d52035181e00be1479be50a57) for constructing the graph from the equivalence class file. . Best; Hirak",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-757504634:2773,reliab,reliable,2773,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-757504634,1,['reliab'],['reliable']
Availability,"0.11.2 run with: NativeSpecification --ntasks=1 --nodes=1 --mem=25000`**; - `scontrol show job 94`; ```; JobId=94 Name=g990_salmon_refinery_stemcellcommons_org; UserId=galaxy(1001) GroupId=users(100); Priority=4294901667 Account=(null) QOS=(null); JobState=COMPLETED Reason=None Dependency=(null); Requeue=1 Restarts=0 BatchFlag=1 ExitCode=0:0; RunTime=00:07:32 TimeLimit=UNLIMITED TimeMin=N/A; SubmitTime=2018-08-27T15:36:41 EligibleTime=2018-08-27T15:36:41; StartTime=2018-08-27T15:36:41 EndTime=2018-08-27T15:44:13; PreemptTime=None SuspendTime=None SecsPreSuspend=0; Partition=main AllocNode:Sid=ip-172-31-24-127:21595; ReqNodeList=(null) ExcNodeList=(null); NodeList=w19; BatchHost=w19; NumNodes=1 NumCPUs=1 CPUs/Task=1 ReqS:C:T=*:*:*; MinCPUsNode=1 MinMemoryNode=25000M MinTmpDiskNode=0; Features=(null) Gres=(null) Reservation=(null); Shared=OK Contiguous=0 Licenses=(null) Network=(null); Command=(null); WorkDir=/mnt/galaxy/tmp/job_working_directory/000/990; ```. - `Galaxy stderr`; ```; Fatal error: Exit code 139 (); ...; /mnt/galaxy/tmp/job_working_directory/000/990/tool_script.sh: line 50: 5713 Segmentation fault (core dumped) salmon quant --index ./index --libType U --unmatedReads ./single.fastq --output ./output --allowOrphans --ma 2 --mp 4 --go 5 --ge 3 --minScoreFraction 0.65 --threads ""${GALAXY_SLOTS:-4}"" --incompatPrior 1e-20 --biasSpeedSamp 1 --fldMax 1000 --fldMean 200 --fldSD 80 --forgettingFactor 0.65 --maxReadOcc 100 --numBiasSamples 2000000 --numAuxModelSamples 5000000 --numPreAuxModelSamples 1000000 --numGibbsSamples 0 --numBootstraps 0 --consensusSlack 0 --vbPrior 0.001 --sigDigits 3; ```. - `syslog`; ```; ip-172-31-30-93 kernel: [ 681.083866] salmon[4167]: segfault at 2641a ip 00007fe2fcdc2dca sp 00007fff27128b90 error 4 in libtbb.so.2[7fe2fcda0000+37000]; ```. **`salmon 0.11.2 run with: NativeSpecification --ntasks=1 --nodes=1 --mem=100000`**; - `scontrol show job 98`; ```; JobId=98 Name=g994_salmon_refinery_stemcellcommons_org; UserId=galaxy(1001) Group",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238:1288,error,error,1288,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238,1,['error'],['error']
Availability,"0000384843 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000602568 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000384229 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000420508 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000608317 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000424410 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000417463 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000623071 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000447720 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000436681 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000416615 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000431488 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000411581 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000624642 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000564901 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000617743 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000516211 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000612964 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000448260 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000516334 appeared in the BAM index, but was not in the provided FASTA file; ```.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737:1945,ERROR,ERROR,1945,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737,9,['ERROR'],['ERROR']
Availability,"1 -Wreturn-type -Werror=return-type -Wno-unused-function -Wno-unused-local-typedef -static-libstdc++ -Wno-unused-local-typedefs -pthread -ftree-vectorize -funroll-loops -fPIC -fomit-frame-pointer -O3 -DRAPMAP_SALMON_SUPPORT -DHAVE_ANSI_TERM -DHAVE_SSTREAM -Wall -Wno-unknown-pragmas -Wno-reorder -Wno-unused-variable -std=c++11 -Wreturn-type -Werror=return-type -Wno-unused-function -Wno-unused-local-typedef -static-libstdc++ -Wno-unused-local-typedefs -rdynamic CMakeFiles/unitTests.dir/__/tests/UnitTests.cpp.o CMakeFiles/unitTests.dir/FragmentLengthDistribution.cpp.o CMakeFiles/unitTests.dir/__/external/install/src/rapmap/rank9b.cpp.o CMakeFiles/unitTests.dir/__/external/install/src/rapmap/bit_array.c.o -o unitTests -L/home/mathog/src/salmon/lib -L/home/mathog/src/salmon/external/install/lib -Wl,-rpath,""\$ORIGIN/../lib:\$ORIGIN/../../lib:\$ORIGIN/:\$ORIGIN/../../external/install/lib"" libsalmon_core.a libalevin_core.a -lgff -lpthread ../external/install/lib/libstaden-read.a -lz ../external/install/lib/libdivsufsort.a ../external/install/lib/libdivsufsort64.a ../external/install/lib/libbwa.a -lm -llzma -lbz2 -ltbb -lgomp -lrt ../external/install/lib/libjemalloc.a -lrt -ldl ../external/install/lib/libjemalloc.a -ldl`. Oh, I also had to update automake and autoconf because the 2 year old versions on this system were not new enough. Is there a static binary version of salmon available for download, Linux 64 bit? It looks like the default links are that way anyway, and that would save me what looks like at least another day of fighting with Cmake to force it to actually build a working make file. . You are developing on something like a recent Fedora or Ubuntu? In my experience packages which use boost and cmake inevitably cause a great great deal of pain when they are built on platforms like Centos or RHEL where long term support is one of the goals. They work fine on platforms which are cutting edge, but backwards compatibility extends back maybe 6 months or a year, tops.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397025719:3572,avail,available,3572,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397025719,2,"['avail', 'down']","['available', 'download']"
Availability,"1) So `--celseq2` isn't there, I had initially checked here, to make sure that there wasn't something wrong with my command.. ; ```; alevin; ==========; salmon-based processing of single-cell RNA-seq data. alevin options:. mapping input options:; -l [ --libType ] arg Format string describing the library ; type; -i [ --index ] arg salmon index; -r [ --unmatedReads ] arg List of files containing unmated reads ; of (e.g. single-end reads); -1 [ --mates1 ] arg File containing the #1 mates; -2 [ --mates2 ] arg File containing the #2 mates. alevin-specific Options:; --noDedup Stops the pipeline after CB sequence ; correction and quasi-mapping reads.; --dropseq Use DropSeq Single Cell protocol for ; the library; --chromium Use 10x chromium v2 Single Cell ; protocol for the library.; --gemcode Use 10x gemcode v1 Single Cell protocol; for the library.; --whitelist arg File containing white-list barcodes; --noQuant Don't run downstream barcode-salmon ; model.; --naive Run Gene level naive deduplication; --noSoftMap Don't use soft-assignment for quant ; instead do hard-assignment.; --mrna arg path to a file containing mito-RNA ; gene, one per line; --rrna arg path to a file containing ribosomal ; RNA, one per line; --useCorrelation Use pair-wise pearson correlation with ; True barcodes as a feature for ; white-list creation.; --dumpfq Dump barcode modified fastq file for ; downstream analysis by using coin toss ; for multi-mapping.; --debug Enabling this mode mode will try to ; ignore segfaults based on no whitelist ; mapping or no whitelist deduplicated ; count; --dumpBfh dump the big hash with all the barcodes; and the UMI sequence.; --dumpFeatures Dump features for whitelist and ; downstream analysis.; --dumpCsvCounts Dump cell v transcripts count matrix in; csv format.; --lowRegionMinNumBarcodes arg (=200) Minimum Number of CB to use for ; learning Low confidence region ; (Default: 200).; --maxNumBarcodes arg (=100000) Maximum allowable limit to process the ; cell barcodes.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/325#issuecomment-443517536:929,down,downstream,929,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/325#issuecomment-443517536,2,['down'],['downstream']
Availability,"10x Genomics Chromium genomic DNA sequencing selects roughly one million barcodes at random with replacement from a possible pool of four million barcodes. Most errors likely result from DNA oligo synthesis rather than sequencing errors (intuition but unconfirmed). There's on other open source tool that does this task `ema preproc`: https://github.com/arshajii/ema#usage. The authors of `ema` have reported that correcting off-by-one errors is sufficient. Their tool corrects off-by-one errors by default, and can optionally correct off-by-two errors. Long Ranger Basic corrects off-by-two errors. The uncorrected barcode may be stored in the `RX:Z` tag. The corrected barcode is stored in the `BX:Z` tag. Thanks for considering this feature request!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395182521:161,error,errors,161,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395182521,12,['error'],['errors']
Availability,"14:31:01; Start : 2019-07-29T14:31:02; End : 2019-07-29T14:31:13; Reserved walltime : 6-06:00:00; Used walltime : 00:00:11; Used CPU time : 00:00:09; % User (Computation): 54.66%; % System (I/O) : 45.33%; Mem reserved : 2000M/core; Max Mem used : 0.00 (c11-71); Max Disk Write : 0.00 (c11-71); Max Disk Read : 0.00 (c11-71)```. I have gone back and checked the directory containing the PE reads, and; they are all accounted for, so I am a little stumped at the moment. I; appreciate any advice you may have. Happy Monday,. Sara. On Wed, Jul 24, 2019 at 3:04 PM Rob Patro <notifications@github.com> wrote:. > Hi @seboles <https://github.com/seboles> ,; >; > My guess is that the issue is related to this (non-salmon) error appearing; > before each salmon output:; >; > basename: extra operand ‘lightreceptor-1_S114_L005_R1_001.qc.fq.gz’; >; > Try 'basename --help' for more information.; >; >; > it looks like there is an error in the way the paths to the files are; > being provided for the jobs, which is resulting in an incorrect command; > line being provided to salmon (and the index not being properly located).; > It's also of note that this is on the command line:; >; > -1 *R1_001.qc.fq.gz -2 R2_001.qc.fq.gz; >; >; > which is trying to expand a wildcard before read 1 but not read 2; is that; > intended?; >; > Any idea what the output is if you run:; >; > #!/bin/bash -l; >; > #SBATCH -J male_salmon_map; >; > #SBATCH -t 700:00:00; >; > #SBATCH -p high; >; > #SBATCH --cpus-per-task=24; >; > source ~/.bashrc; >; > source activate salmon; >; > cd /home/seboles/abaloneraw/salmon_quantification/salmon_male/abalone_orfs/; >; > ls -la salmon_index; >; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/408?email_source=notifications&email_token=AEHDXACFB45AVOUW4O3P5ODQBDGVZA5CNFSM4IGU4ZTKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD2XXV6I#issuecomment-514816761>,;",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516173395:1961,error,error,1961,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516173395,1,['error'],['error']
Availability,"2_index_gencode.v25.transcripts -p 16 -l ISR -1 ${FILE1} -2 ${FILE2} -o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/${ID}; **** Job ends ****; Wed Mar 29 14:58:05 EDT 2017. ```. ### SGE email example info. ```; Job-array task 110316.1 (step6-salmon_test4.gsk_phaseII) Complete; User = lcollado; Queue = shared.q@compute-067.cm.cluster; Host = compute-067.cm.cluster; Start Time = 03/29/2017 14:53:42; End Time = 03/29/2017 14:58:05; User Time = 00:00:00; System Time = 00:05:39; Wallclock Time = 00:04:23; CPU = 00:05:39; Max vmem = 24.202G; Exit Status = 0; ```. Note that in this case, it didn't read the maximum memory requested (16 * 3 = 48 GB). ## Large memory, p 1. ### Bash. ```bash; #!/bin/bash; #$ -cwd; #$ -l mem_free=80G,h_vmem=90G,h_fsize=100G; #$ -N step6-salmon_test5.gsk_phaseII; #$ -pe local 1; #$ -o ./logs/salmon_test5.$TASK_ID.txt; #$ -e ./logs/salmon_test5.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_te",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:7616,echo,echo,7616,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['echo'],['echo']
Availability,"3 ip-172-31-16-139 kernel: [ 2134.447133] traps: salmon[7495] general protection ip:7ff9ce320dca sp:7ffd6e497020 error:0 in libtbb.so.2[7ff9ce2fe000+37000]; ```. **`salmon 0.11.2 run with: NativeSpecification --ntasks=1 --nodes=1 --mem-per-cpu=100000`**; - `scontrol show job 99`; ```; JobId=99 Name=g995_salmon_refinery_stemcellcommons_org; UserId=galaxy(1001) GroupId=users(100); Priority=4294901662 Account=(null) QOS=(null); JobState=COMPLETED Reason=None Dependency=(null); Requeue=1 Restarts=0 BatchFlag=1 ExitCode=0:0; RunTime=00:07:36 TimeLimit=UNLIMITED TimeMin=N/A; SubmitTime=2018-08-27T20:20:26 EligibleTime=2018-08-27T20:20:26; StartTime=2018-08-27T20:20:26 EndTime=2018-08-27T20:28:02; PreemptTime=None SuspendTime=None SecsPreSuspend=0; Partition=main AllocNode:Sid=ip-172-31-24-127:7975; ReqNodeList=(null) ExcNodeList=(null); NodeList=w21; BatchHost=w21; NumNodes=1 NumCPUs=1 CPUs/Task=1 ReqS:C:T=*:*:*; MinCPUsNode=1 MinMemoryNode=100000M MinTmpDiskNode=0; Features=(null) Gres=(null) Reservation=(null); Shared=OK Contiguous=0 Licenses=(null) Network=(null); Command=(null); WorkDir=/mnt/galaxy/tmp/job_working_directory/000/995; ```. - `Galaxy stderr`; ```; Fatal error: Exit code 139 (); ...; /mnt/galaxy/tmp/job_working_directory/000/995/tool_script.sh: line 50: 9700 Segmentation fault (core dumped) salmon quant --index ./index --libType U --unmatedReads ./single.fastq --output ./output --allowOrphans --ma 2 --mp 4 --go 5 --ge 3 --minScoreFraction 0.65 --threads ""${GALAXY_SLOTS:-4}"" --incompatPrior 1e-20 --biasSpeedSamp 1 --fldMax 1000 --fldMean 200 --fldSD 80 --forgettingFactor 0.65 --maxReadOcc 100 --numBiasSamples 2000000 --numAuxModelSamples 5000000 --numPreAuxModelSamples 1000000 --numGibbsSamples 0 --numBootstraps 0 --consensusSlack 0 --vbPrior 0.001 --sigDigits 3; ```. - `syslog`; ```; Aug 27 20:27:57 ip-172-31-16-139 kernel: [ 2949.318784] traps: salmon[9700] general protection ip:7fb66057cdca sp:7ffe1bf3a900 error:0 in libtbb.so.2[7fb66055a000+37000]; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238:4928,error,error,4928,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238,3,"['error', 'fault']","['error', 'fault']"
Availability,"5"" alt=""KCC4_table"" src=""https://user-images.githubusercontent.com/10292386/86509801-6d55a300-bd9f-11ea-9c69-8e269fc3ab1c.png"">. In this example, there are two regions in KCC4 with obviously different coverage. Ideally we would be able to have a default KCC4 transcript and a truncated isoform in the salmon index, and it would assign the reads appropriately, even though all of the reads that map to the truncated form would also multimap to the long form. Again, you can see in the table that salmon assigns reads parsimoniously to both transcripts with the default options, but with the length bias modeling turned off ALL of the reads are assigned to the long transcript. I also added a third transcript to the right end of the transcript which is inconsistent with the coverage profile and, as hoped, salmon did not assign any reads to that variant. So, in these two scenarios the default options produce nice results in line with our human intuition. 2. **Failure scenario with default options:** ; ![PDI1_example](https://user-images.githubusercontent.com/10292386/86509895-3df36600-bda0-11ea-8f0b-df0de4fefa31.png); <img width=""383"" alt=""PDI1_table"" src=""https://user-images.githubusercontent.com/10292386/86509897-40ee5680-bda0-11ea-9566-9f2bdab464f0.png"">. In this example there are four genes (oriented in the same direction) with wildly different expression levels. I added a ""PDI1_SuperTranscript"" which stretches from the 5' end of PDI1 to the 3' end of POF1 (so, all reads from all 4 genes would multimap to the super transcript). This is a contrived example to illustrate the technical details, but you could imagine similar biological scenarios, especially regarding splicing isoforms. With the default options, you get the counterintuitive result that all of the reads from just MGR1 and POF1 (the two lowest abundance transcripts) are assigned to the super transcript. EMC1 loses ~50% of its reads to the super transcript, and PDI1 only loses ~10%. I'm not showing it, but if you r",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-653747847:5138,Failure,Failure,5138,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-653747847,1,['Failure'],['Failure']
Availability,"8 Name=g994_salmon_refinery_stemcellcommons_org; UserId=galaxy(1001) GroupId=users(100); Priority=4294901663 Account=(null) QOS=(null); JobState=RUNNING Reason=None Dependency=(null); Requeue=1 Restarts=0 BatchFlag=1 ExitCode=0:0; RunTime=00:08:19 TimeLimit=UNLIMITED TimeMin=N/A; SubmitTime=2018-08-27T20:06:23 EligibleTime=2018-08-27T20:06:23; StartTime=2018-08-27T20:06:23 EndTime=Unknown; PreemptTime=None SuspendTime=None SecsPreSuspend=0; Partition=main AllocNode:Sid=ip-172-31-24-127:2236; ReqNodeList=(null) ExcNodeList=(null); NodeList=w21; BatchHost=w21; NumNodes=1 NumCPUs=1 CPUs/Task=1 ReqS:C:T=*:*:*; MinCPUsNode=1 MinMemoryCPU=100000M MinTmpDiskNode=0; Features=(null) Gres=(null) Reservation=(null); Shared=OK Contiguous=0 Licenses=(null) Network=(null); Command=(null); WorkDir=/mnt/galaxy/tmp/job_working_directory/000/994; ```. - `Galaxy stderr`; ```; Fatal error: Exit code 139 (); ...; /mnt/galaxy/tmp/job_working_directory/000/994/tool_script.sh: line 50: 7495 Segmentation fault (core dumped) salmon quant --index ./index --libType U --unmatedReads ./single.fastq --output ./output --allowOrphans --ma 2 --mp 4 --go 5 --ge 3 --minScoreFraction 0.65 --threads ""${GALAXY_SLOTS:-4}"" --incompatPrior 1e-20 --biasSpeedSamp 1 --fldMax 1000 --fldMean 200 --fldSD 80 --forgettingFactor 0.65 --maxReadOcc 100 --numBiasSamples 2000000 --numAuxModelSamples 5000000 --numPreAuxModelSamples 1000000 --numGibbsSamples 0 --numBootstraps 0 --consensusSlack 0 --vbPrior 0.001 --sigDigits 3; ```. - `syslog`; ```; Aug 27 20:14:23 ip-172-31-16-139 kernel: [ 2134.447133] traps: salmon[7495] general protection ip:7ff9ce320dca sp:7ffd6e497020 error:0 in libtbb.so.2[7ff9ce2fe000+37000]; ```. **`salmon 0.11.2 run with: NativeSpecification --ntasks=1 --nodes=1 --mem-per-cpu=100000`**; - `scontrol show job 99`; ```; JobId=99 Name=g995_salmon_refinery_stemcellcommons_org; UserId=galaxy(1001) GroupId=users(100); Priority=4294901662 Account=(null) QOS=(null); JobState=COMPLETED Reason=None Dependenc",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238:3207,fault,fault,3207,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238,1,['fault'],['fault']
Availability,": Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; warning: Loadable section "".note.gnu.property"" outside of ELF segments; [New Thread 0x7ffff0987700 (LWP 17537)]. Thread 2 ""salmon"" received signal SIGSEGV, Segmentation fault.; [Switching to Thread 0x7ffff0987700 (LWP 17537)]; 0x00007ffff68202ab in je_tcache_bin_flush_small () from /lib64/libjemalloc.so.2; Missing separate debuginfos, use: yum debuginfo-install boost169-filesystem-1.69.0-4.el8.x86_64 boost169-iostreams-1.69.0-4.el8.x86_64 boost169-program-options-1.69.0-4.el8.x86_64 boost169-system-1.69.0-4.el8.x86_64 brotli-1.0.6-1.el8.x86_64 bzip2-libs-1.0.6-26.el8.x86_64 cyrus-sasl-lib-2.1.27-1.el8.x86_64 jemalloc-5.2.1-2.el8.x86_64 keyutils-libs-1.5.10-6.el8.x86_64 krb5-libs-1.17-9.el8.x86_64 libcom_err-1.44.6-3.el8.x86_64 libcurl-7.61.1-11.el8.x86_64 libgcc-8.3.1-4.5.el8.x86_64 libgomp-8.3.1-4.5.el8.x86_64 libidn2-2.2.0-1.el8.x86_64 libnghttp2-1.33.0-1.el8_0.1.x86_64 libpsl-0.20.2-5.el8.x86_64 libselinux-2.9-2.1.el8.x86_64 libssh-0.9.0-4.el8.x86_64 libstdc++-8.3.1-4.5.el8.x86_64 libunistring-0.9.9-3.el8.x86_64 libxcrypt-4.1.1-4.el8.x86_64 openldap-2.4.46-11.el8_1.x86_64 pcre2-10.32-1.el8.x86_64 tbb-devel-2018.2-9.el8.x86_",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:4950,fault,fault,4950,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['fault'],['fault']
Availability,"; lightreceptor-1_S114_L005_R1_001.qc.fq.gz; mgonad-2_S121_L004_R1_001.qc.fq.gz mgonad-1_S120_L004_R1_001.qc.fq.gz; lightreceptor-2_S115_L004_R1_001.qc.fq.gz; lightreceptor-1_S114_L004_R1_001.qc.fq.gz -2; mgonad-2_S121_L006_R2_001.qc.fq.gz; lightreceptor-1_S114_L006_R2_001.qc.fq.gz; mgonad-1_S120_L006_R2_001.qc.fq.gz; lightreceptor-2_S115_L006_R2_001.qc.fq.gz; mgonad-2_S121_L005_R2_001.qc.fq.gz mgonad-1_S120_L005_R2_001.qc.fq.gz; lightreceptor-2_S115_L005_R2_001.qc.fq.gz; lightreceptor-1_S114_L005_R2_001.qc.fq.gz; mgonad-2_S121_L004_R2_001.qc.fq.gz mgonad-1_S120_L004_R2_001.qc.fq.gz; lightreceptor-2_S115_L004_R2_001.qc.fq.gz; lightreceptor-1_S114_L004_R2_001.qc.fq.gz ${i} -o ${i}_quant --seqBias; --gcBias --validateMappings; done```. And here is my output from salmon.log. [2019-07-30 10:40:14.624] [jointLog] [info] Fragment incompatibility prior; below threshold. Incompatible fragments will be ignored.; [2019-07-30 10:40:14.624] [jointLog] [error] You passed paired-end files to; salmon, but you passed 12 files to --mates1 and 13 files to --mates2. You; must pass the same number of files to both flags. Thank you in advance for any tips you may have for me. Sara. On Tue, Jul 30, 2019 at 10:30 AM Sara Boles <seboles@ucdavis.edu> wrote:. > Hi Avi,; >; > Here is the salmon log from one of my PE libraries. There are only 12; > libraries for each in the directory, which is why I got confused when it; > said 13. I will try putting in all of the file names and let you know how; > it goes. Thank you for all of your help.; >; > Sara; >; > [2019-07-29 15:58:39.034] [jointLog] [info] Fragment incompatibility prior; > below threshold. Incompatible fragments will be ignored.; > [2019-07-29 15:58:39.034] [jointLog] [info] Usage of --validateMappings; > implies use of minScoreFraction. Since not explicitly specified, it is; > being set to 0.65; > [2019-07-29 15:58:39.034] [jointLog] [info] Usage of --validateMappings,; > without --hardFilter implies use of range factorization.; > ran",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516521791:1625,error,error,1625,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516521791,1,['error'],['error']
Availability,"=ON \; -DBOOST_LIBRARYDIR=/usr/lib64/boost169 \; -DBOOST_INCLUDEDIR=/usr/include/boost169 \; -DBoost_NO_SYSTEM_PATHS=ON \; .. 2>&1 | tee cmake_2020_06_08.log; ```; Inkscape was built using cmake a couple of weeks ago on the same system and the -D flags for Boost in the cmake invocation were sufficient, there was no need to modify its CMakeLists.txt. Perhaps you might to compare that CMakeLIsts.txt with salmon's to see why theirs works and salmon's does not. I reiterate my plea for salmon's cmake file to accept some form of ROOT_LIBGFF, ROOT_LIBSTADEN, and ROOT_LIBTBB. Those modules ; were all defined but cmake could only figure out TBB this time, and for all I know it won't next time around (since it failed to do so for no apparent reason on CentOS 7). Salmon is a useful program but it has so far failed to build using existing libraries on this OS (unless extraordinary measures were applied) for CO 6, 7, and now 8! This is the information it had to work with:. ```; echo $PATH; /usr/common/modules/el8/x86_64/software/libgff/1.2-CentOS-vanilla/bin:/usr/common/modules/el8/x86_64/software/io_lib/1.14.9-CentOS-vanilla/bin:/usr/common/modules/el8/x86_64/software/cmake/3.17.1-CentOS-vanilla/bin:/usr/lib64/ccache:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/usr/common/bin:/usr/common/modules/.local/bin:/usr/common/modules/bin; echo $LD_LIBRARY_PATH; /usr/common/modules/el8/x86_64/software/libtbb/2020.5-CentOS-vanilla/lib64:/usr/common/modules/el8/x86_64/software/libtbb/2020.5-CentOS-vanilla/lib:/usr/common/modules/el8/x86_64/software/libgff/1.2-CentOS-vanilla/lib64:/usr/common/modules/el8/x86_64/software/libgff/1.2-CentOS-vanilla/lib:/usr/common/modules/el8/x86_64/software/io_lib/1.14.9-CentOS-vanilla/lib; ls /usr/common/modules/el8/x86_64/software/io_lib/1.14.9-CentOS-vanilla/lib; libstaden-read.a libstaden-read.la libstaden-read.so libstaden-read.so.11 libstaden-read.so.11.1.0; ls /usr/common/modules/el8/x86_64/software/libgff/1.2-CentOS-vanilla/lib64; libgff.a. ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-640962684:1871,echo,echo,1871,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-640962684,2,['echo'],['echo']
Availability,"> > Hmm strange! But `conda install salmon` still gives the same error for me.; > ; > Hi @charlotte-west,; > ; > Can you please try the following?; > ; > ```; > CONDA_SUBDIR=osx-64 conda create -n rosetta # create a new environment; > conda activate rosetta; > conda env config vars set CONDA_SUBDIR=osx-64 # subsequent commands use intel packages; > conda install salmon; > ```; > ; > These instructions came from (here)[https://github.com/Haydnspass/miniforge#rosetta-on-mac-with-apple-silicon-hardware] and have worked for me on my M1 laptop. My understanding is that conda / bioconda are still working on having worker nodes that can pre-compile native M1 executables. So, until that work is complete, it may be necessary to run certain native packages in a Rosetta environment. Let me know if this works for you.; > ; > Best, Rob. it worked for me but i had to remove the comments starting with the `#`",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1384299365:65,error,error,65,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1384299365,1,['error'],['error']
Availability,"> And for us, who have blocked download on a computational cluster `cmake` silently continues even when `scripts/fetchRapMap.sh` failed (see error code `403` below). Dists downloading their own dependencies is also forbidden in package managers such as FreeBSD ports and pkgsrc (which is cross-platform and I personally use on Mac, NetBSD, and RHEL). Trusting upstream scripts to pull stuff off the Internet is a security risk, so the package managers perform and validate (via checksum) all downloads in a separate stage. It would be nice not to have to hack out the download code from a build system in order to create and maintain a package.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-989326040:31,down,download,31,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-989326040,5,"['down', 'error']","['download', 'downloading', 'downloads', 'error']"
Availability,"> Can you try doing:; > ; > ```; > export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/Users/maysonlin/Downloads/salmon-1.2.1-h2072146_0 2/lib; > ```; > ; > before running salmon? The problem is that the executable is looking for `libtbb` and `libtbb_proxy`, but they are not in the library path. Hi, Rob, thank you for replying, do you mean type those code in ""Terminal""? ; I tried it, and I got this message:. -bash: export: `2/lib': not a valid identifier",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623073440:96,Down,Downloads,96,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623073440,1,['Down'],['Downloads']
Availability,"> Could you share the quant directory for one of the samples that has NANs in the bootstraps?. Hi Rob,. Thanks for your quick reply. Sleuth didn't show which sample caused the issue therefore I have to upload all samples used in this analysis. Here is a link to download it. https://send.firefox.com/download/ddf555a8eec9b6c7/#AUxMdiugHH6PSXJ7sayUlA. Thanks.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-637975180:262,down,download,262,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-637975180,2,['down'],['download']
Availability,"> Hey, I'm having the same kind of problem.; > ; > I aligned my PE reads against the transcriptome using BWA-mem and then sorted them by coordinates (as a regular procedure). I know Salmon assumes the alignments are not sorted, so I shuffled these bam files, and then run `salmon quant`. Here are the errors I got in a number of trials:; > ; > ### Fresh installation of Salmon; > ```; > conda create --name salmon -c bioconda salmon; > conda activate salmon; > ```; > ; > ### 1. Shuffling a bam file with `samtools collate`; > ```; > samtools collate \; > -@ 40 \; > -o SRR3212847.Aligned.Shuffled.bam \; > SRR3212847.Aligned.SortedByCoord.bam; > ; > salmon quant \; > -t mRNA.fasta \; > -p 20 \; > -l A \; > -a SRR3212847.Aligned.Shuffled.bam \; > -o SRR3212847.Aligned.Shuffled ; > ```; > ; > ```; > Version Info: This is the most recent version of salmon.; > # salmon (alignment-based) v1.4.0; > # [ program ] => salmon ; > # [ command ] => quant ; > # [ targets ] => { mRNA.fasta }; > # [ threads ] => { 20 }; > # [ libType ] => { A }; > # [ alignments ] => { SRR3212847.Aligned.Shuffled.bam }; > # [ output ] => { SRR3212847.Aligned.Shuffled }; > Logs will be written to SRR3212847.Aligned.Shuffled/logs; > [2021-01-08 12:43:44.680] [jointLog] [info] setting maxHashResizeThreads to 20; > [2021-01-08 12:43:44.680] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; > Library format { type:paired end, relative orientation:inward, strandedness:unstranded }; > [2021-01-08 12:43:44.711] [jointLog] [info] numQuantThreads = 14; > parseThreads = 6; > Checking that provided alignment files have consistent headers . . . done; > Populating targets from aln = ""SRR3212847.Aligned.Shuffled.bam"", fasta = ""mRNA.fasta"" . . .done; > ; > processed 0 reads in current roundSegmentation fault (core dumped); > ```; > ; > ### 2. Shuffling a headless bam file with `samtools collate`; > (I think I saw something about the bam's header in another thread d",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1343749456:301,error,errors,301,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1343749456,1,['error'],['errors']
Availability,"> Hi @austin-abbvie,; > ; > Thanks for the report. Would you be able to share the offending BAM file and reference? I'm also tagging @gmarcais for input / ideas.; > ; > Thanks,; > Rob. I'll have to check with my manager to see if this is something I'm allowed to do. I also just attempted to use the --noErrorModel instead of --ont, but now I'm getting a `segmentation fault (core dumped)` after about 2M reads. These BAMs have been through a lot so I'm going to check to make sure they haven't been corrupted in some way. Here's an output from Picard's ValidateSamFile; ```; WARNING 2021-07-01 08:12:30 ValidateSamFile NM validation cannot be performed without the reference. All other validations will still occur.; INFO 2021-07-01 08:12:48 SamFileValidator Seen many non-increasing record positions. Printing Read-names as well. ## HISTOGRAM java.lang.String; Error Type Count; ERROR:MISSING_READ_GROUP 1; WARNING:RECORD_MISSING_READ_GROUP 1085776; ```. After adding a dummy read group to one of my bam files using Picard's AddOrReplaceReadGroups, I was able to successfully quantify my file using the --ont error model. I'll repeat this for the lot to see if this solves the problem!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-872314305:369,fault,fault,369,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-872314305,4,"['ERROR', 'Error', 'error', 'fault']","['ERROR', 'Error', 'error', 'fault']"
Availability,"> Hi @jashapiro,; > ; > I've just pushed a commit that should address this, adding both a ""full"" `cmd_info.json` and a reasonable `meta_info.json`. If this is something you need on short notice we can try an push out a 1.5.2 soon, otherwise, this will be in the next release.; > ; > Best,; > Rob. Hi Rob- . I was happy to wait, but since [you were so quick to push out `alevin-fry` 0.4.1](https://github.com/COMBINE-lab/alevin-fry/issues/22#issuecomment-885195051) , it might be nice to have the version bump here too, so we can use all of the available info in our pipeline!. Thanks for your quick responses!; -Josh",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-885209656:544,avail,available,544,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-885209656,1,['avail'],['available']
Availability,"> Hi Brian,; > ; > In general, I would argue that one should be cautious with removing PCR duplicates in RNA-seq data (unless you are dealing with reads with UMI tags). This is because reads that align to the same reference position can easily have come from alternative transcripts sharing the same underlying sequence. Hence, the normal tests used to infer PCR duplicates with e.g. DNA-seq reads can yield false-positives in RNA-seq. This is particularly true for highly abundant transcripts (or transcripts from highly-abundant genes).; > ; > We are currently working on the code that will do duplicate removal when UMI tags are present. That methodology can be extended to remove duplicates even without UMI tags --- though I'd generally caution against that for the reasons mentioned above. However, for the time being, if you have a strong need or desire to filter PCR duplicates, you could use alignment-based Salmon with a BAM file that has duplicates removed.; > ; > Finally, regarding the error you are getting during SAM validation; this sounds like a different issue. Would you mind providing a piece of that SAM file for me to take a look at? Specifically, I don't believe the quasi-mapping output file should even contain unmapped reads (unless you consider unmapped mates of orphaned reads).; > ; > --Rob. It is in the latest Salmon release?. Thanks",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-446191570:999,error,error,999,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-446191570,1,['error'],['error']
Availability,"> Hmm strange! But `conda install salmon` still gives the same error for me. Hi @charlotte-west,. Can you please try the following?. ```; CONDA_SUBDIR=osx-64 conda create -n rosetta # create a new environment; conda activate rosetta; conda env config vars set CONDA_SUBDIR=osx-64 # subsequent commands use intel packages; conda install salmon; ```. These instructions came from (here)[https://github.com/Haydnspass/miniforge#rosetta-on-mac-with-apple-silicon-hardware] and have worked for me on my M1 laptop. My understanding is that conda / bioconda are still working on having worker nodes that can pre-compile native M1 executables. So, until that work is complete, it may be necessary to run certain native packages in a Rosetta environment. Let me know if this works for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137183671:63,error,error,63,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137183671,1,['error'],['error']
Availability,> I have the exact same issue. Any solutions?. I think I ended up going down to version 1.4.0 and it worked.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/667#issuecomment-1016917355:72,down,down,72,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/667#issuecomment-1016917355,1,['down'],['down']
Availability,> I have the same issue. None of the conda version works on my Linux Centos.; > Is there any library to add in the conda recipe to fix the issue ?. Similar issue here too with salmon 1.4.0 installed via conda in a clean environment; `salmon: error while loading shared libraries: libtbb.so.2: cannot open shared object file: No such file or directory`. Edit: apparently solved by downgrading `tbb` as suggested in https://www.biostars.org/p/494922/,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-802737580:242,error,error,242,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-802737580,2,"['down', 'error']","['downgrading', 'error']"
Availability,"> Is this read set & reference txome available to try and reproduce this?. Unfortunately no, it's a generated fasta file (it used to work with 0.9.1 without ""validateMappings"" though). [info] Building 32-bit suffix array (length of generalized text is 462349554); processed 462000000 positions; khash had 208056876 keys. > Also, would it be possible to check if this occurs using the bioconda-packaged release?. Still a seg fault but I now have the following message:; WARNING: Could not associate known library type with read!; WARNING: PE compatibility function called with SE read!; expected: Library format { type:paired end, relative orientation:inward, strandedness:unstranded }, observed: Library format { type:, relative orientation:, strandedness: }; Segmentation fault: 11",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393236903:37,avail,available,37,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393236903,3,"['avail', 'fault']","['available', 'fault']"
Availability,"> It looks like it's having trouble parsing this folder name ""salmon-1.2.1-h2072146_0 2/"", what if you put it in quotes?; > ; > ```; > export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:""/Users/maysonlin/Downloads/salmon-1.2.1-h2072146_0 2/lib""; > ```. Hi, Rob, I tried that, nothing happened",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623133092:197,Down,Downloads,197,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623133092,1,['Down'],['Downloads']
Availability,"> Ok, when I attempt the build the way you say above, I get the following error during CMake:; > ; > ```; > -- fetch PUFFERFISH exit code 127; > CMake Error at CMakeLists.txt:317 (message):; > Could not fetch pufferfish source [fetchPufferfish.sh returned exit code; > 127]. Did you do the. ```; apt build-dep salmon; ```. step? I can't imagine that you get this problem if you follow my log step by step. Debian is usually using dynamic linking. By having all Build-Dependencies (which is ensured in the step above) the existence of the libraries is granted and the options for cmake I specified are ensuring that the libs are found. Kind regards, Andreas.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464176548:74,error,error,74,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464176548,2,"['Error', 'error']","['Error', 'error']"
Availability,"> On Dec 23, 2016, at 3:35 PM, Valentine Svensson <notifications@github.com> wrote:; > ; > I don't think sequencing errors of the UMI's is a big issue. I was thinking more of the reads.; > ; > I've been thinking in terms of (read, UMI) pairs and (transcript, UMI) pairs, and what the relation between them is.; > ; > Now, during mapping, an equivalence class get a count every time a read is mapped to it right? How feasible would it be to keep track of all UMI's which have been assigned to an equivalence task?; > ; It would be almost trivial.; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-269054923:116,error,errors,116,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-269054923,1,['error'],['errors']
Availability,"> Yes that's one aspect. But also, Salmon uses CIGAR to evaluate alignment probability in alignment quantification mode no?. Indeed. > And with just RapMap output you would lose other information that Salmon uses to determine likely fragment assignment?. You would lose information (in the format of a CIGAR string) that Salmon uses in alignment mode, but not any information, I think, that Salmon uses in quasi-mapping-based mode (though one would incur a non-trivial performance hit for filtering the quasi-mappings through file / disk rather than dealing with them directly in memory as Salmon normally does). > With UMI's you can deduplicate fragments before inferring where they were likely to come from. Ideally you would deduplicate the reads directly based on UMI, then you wouldn't have to think about PCR duplication in the quantification. But of course keeping a hash of all reads in a FASTQ and accounting for dequencing errors wouldn't be really tractable.. I guess this is the real question I have. Specifically, what is the true computational burden to detect and eliminate duplicates using UMIs? In theory, the reads must (1) map to the same location and (2) have the same UMI tag. How often would one expect the UMI tag to be modified / corrupted / etc.? Would you have to search all 1 or 2 hamming distance neighbors to detect duplicates reliably? Is an equivalence class a sufficient proxy for ""mapping to the same location"", or do we also care that e.g. the position of the fragment within each transcript is a duplicate as well? These are the main questions that are preventing me from implementing the ""obvious solution"".",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-269001682:933,error,errors,933,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-269001682,2,"['error', 'reliab']","['errors', 'reliably']"
Availability,"> You mean like cloud services to perform the DE analysis? It’s always possible to round the non-integer counts to the nearest integer. However, reliable abundance estimation tools (e.g. RSEM) have been around long enough now that it’s worth pushing any cloud service you might be using to properly deal with these types of inputs. We do differential analysis quite commonly with DESeq2, and salmon -> tximport -> DESeq2 is a quite low-friction solution. I noticed that now salmon can export the quant.gene.sf file if I add the parameters""-g xx.gtf"". What's difference between this file and the result of tximport? Can I use the result to replace tximport?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-1535046180:145,reliab,reliable,145,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-1535046180,1,['reliab'],['reliable']
Availability,"> hi @callumparr, I'm running into something similar, just wondering if you have a better idea now on your last comment (as in what qualifies as many errors)? thanks. Hi sorry, I did not get this resolved. In the end, I kind of just ignored the warnings. But in any case for those particular datasets, we also tried quantification through IsoQuant and Bambu. You may try those to compare to Salmon. . I am also intending to try oarfish, https://combine-lab.github.io/oarfish/ which was designed for long-read RNA seq datasets. From the looks of it you follow a similar strategy, first align to the transcriptome and then feed the BAM to oarfish to sort out multimapping reads.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1981452288:150,error,errors,150,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1981452288,1,['error'],['errors']
Availability,"> thank you so much for your help today!. Sure, after all it is quite selfish ;-). I have been trying to generate smaller transcript db and fastq files but to no avail (can't make it fail again). However it looks like your test `if (denom <= ::minEQClassWeight)` could be not stringent enough:; invDenom:inf count:1 denom:2.77171e-321 minEQClassWeight:4.94066e-324; invDenom:inf count:1 denom:4.69042e-316 minEQClassWeight:4.94066e-324. These two lines result from:; groupSize: 2; i:0 tid:83966 aux:0.756044 expTheta[tid]:0; i:1 tid:83967 aux:0.243956 expTheta[tid]:7.23806e-321. groupSize: 2; i:0 tid:190925 aux:0.542131 expTheta[tid]:0; i:1 tid:272773 aux:0.457869 expTheta[tid]:6.2423e-316",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393842202:162,avail,avail,162,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393842202,1,['avail'],['avail']
Availability,"@ECuris --- For single-end reads the prior *is* the posterior. It is only possible to reliably estimate fragment lengths when one has paired-end reads, since with single-end reads one only has a single mapping fragment end, and hence cannot estimate the implied fragment size. So, with paired-end reads, the prior values are largely unimportant (the data overwhelm them quickly), but with single-end reads, having a reasonable estimate of the fragment length mean and standard deviation is important, because the effective lengths of the transcripts will be derived from these values.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-285693301:86,reliab,reliably,86,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-285693301,1,['reliab'],['reliably']
Availability,"@Gaura that definitely seems promising! A few questions:. -Is quantification via alevin-fry (rather than alevin itself) mandatory here? I ask since your run seems successful whereas my full alevin run had a very poor BC detection and mapping rate. -I see you specified `-l A` - can you comment on what the detected/correct library type was here?. -I assume all of this will also work in conjunction with `--expectCells` or `--keepCBFraction` if those parameters were needed? Your ~7k cells detected is very close to the published number _post-filtering_, but no similar filtering has been done here yet. My guess is that the proportion of cells that pass these filters will be higher for alevin, but we may still be under-estimating the number of real cells by a little bit here. . -Is there any prospect of dealing with frameshift errors in the barcode detection step? Or is that out of scope?. Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-987910445:832,error,errors,832,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-987910445,1,['error'],['errors']
Availability,"@Miserlou : it's also worth noting that the error message preceding the segfault in #323 is coming from the library (libstaden) that we use to parse SAM/BAM files. So, it's something where I think we will need a BAM that exhibits whatever triggers that behavior.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/320#issuecomment-444994980:44,error,error,44,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/320#issuecomment-444994980,1,['error'],['error']
Availability,"@brejnev . ```; 280 if not isinstance(X, AnnData):; 281 raise ValueError(""X has to be an AnnData object.""); --> 282 self._init_as_view(X, oidx, vidx); 283 else:; 284 self._init_as_actual(; ```. This could be an informative error, is your adata objec an `AnnData` object ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/526#issuecomment-635472672:223,error,error,223,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/526#issuecomment-635472672,1,['error'],['error']
Availability,"@cliftonlewis: could you tell us version of alevin-fry are you using? ; @rob-p: The cellbarcode length should be 21. It is variable b/w 19 or 20 so AC or A is added to make it 21. It could be the odd-even error we saw on previous version of alevin-fry. Wrt the run without `--justAlign`, I would need to take a closer look.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/813#issuecomment-1332726376:205,error,error,205,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/813#issuecomment-1332726376,1,['error'],['error']
Availability,"@ctb — One thing that would be required for this (apart from some engineering of the command-line parsing / validation code) is a trustworthy, efficient, _multithreaded_ `FAST(A/Q)` parser for interleaved format reads. Right now, Salmon (& Sailfish, &RapMap, & most of the other HTS-centric methods we're developing) use the Jellyfish 2 read parser. I've made this choice since it's fairly simple to use, yet provides nice parallel performance and, most importantly, is fairly well-tested and trust-worthy. Can you suggest a reliable, well-tested, concurrency-enabled library for parsing reads in interleaved format?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152827801:525,reliab,reliable,525,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152827801,2,['reliab'],['reliable']
Availability,@curtisd0886 -- I think this may be my fault. I think the pre-compiled binary I uploaded may be cut from the wrong tag. Let me fix it and report back here.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/670#issuecomment-860935816:39,fault,fault,39,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/670#issuecomment-860935816,1,['fault'],['fault']
Availability,"@deevdevil88,. As an update to this, you can now use the alevin -> [alevin-fry](https://alevin-fry.readthedocs.io/en/latest/) pipeline to quantify with different strategies for filtering. If you're using a technology with an external permit list (like 10x chromium), you can recover and quantify unfiltered cells as well as of version 0.2.0 using the `--unfiltered-pl` flag. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/538#issuecomment-825059035:275,recover,recover,275,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/538#issuecomment-825059035,1,['recover'],['recover']
Availability,"@demis001 Salmon's `--geneMap | -g` option does take a GTF file (although you're correct that it can also take a two-column text file, and I think accepting both types of files in the same option is a bit confusing). See some context in this [old issue](https://github.com/COMBINE-lab/salmon/issues/114). I believe the issue you're seeing is that Ensembl will update transcript (and gene I think) versions like so:. ```; !! this is not real data, just a toy example. ensembl v24; -------------; ENST0000001.1; ENST0000002.1. ensembl v25; -------------; ENST0000001.2; ENST0000002.2; ```; and the GTF file you used to build the salmon index is ""ensembl v24"", but now you only have ""ensembl v25"" available during the `salmon quant` run. . **The most correct thing** to do at this point would be to either rebuild the salmon index using ""ensembl v25"" and rerun `salmon quant -g ensembl_v25.gtf`, or get the ""ensembl v24"" GTF file (re-download from Ensembl website) and pass this to `salmon quant -g ensembl_v24.gtf`. . **The thing would probably be okay** is to allow passing GTF files that do not exactly match the transcript accessions, where ""ENST0000001"" is the ""accession"" and "".1"" is the ""version"" - hence ""accession.version"". This way you can just ignore the version part of the transcript/gene names in the GTF file for the purposes of constructing a tx<>gene map.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/122#issuecomment-282342092:694,avail,available,694,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/122#issuecomment-282342092,2,"['avail', 'down']","['available', 'download']"
Availability,"@demis001, @mdshw5 -- this seems reasonable and easy enough to do. I just don't want to go too deep into the rabbit hole since tximport is my goto recommendation for this problem in the general case. Also, Mike and I have recently added some nice features there (the ability to import gibbs / bootstrap results) that will make it an even more useful way to interact with and process salmon data downstream. My question for implementing this feature is what version ""split string"" should I consider. Is it always '.'? Do some schemes use '_'? Does this string itself have to be a parameter?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/122#issuecomment-282063258:395,down,downstream,395,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/122#issuecomment-282063258,1,['down'],['downstream']
Availability,"@diegoalzatec86 I think you are referring to this page - https://combine-lab.github.io/salmon/getting_started/. I myself have used that I did not encounter any errors or anything related to sailfish when I used the very same shell script you are alluding to.. I don't know which tutorial has the sailfish code that you state - https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614279802. @rob-p Check this https://raw.githubusercontent.com/COMBINE-lab/salmon/gh-pages/assets/quant_tut_samples.sh . Probably you landed on a wrong or outdated tutorial page . As previously mentioned many times in this GH issue, most of sailfish code is within salmon . Either way, I think you should use bioconda to upgrade to 1.2.0 and start using salmon as the quantification tool",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614298125:160,error,errors,160,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614298125,1,['error'],['errors']
Availability,@diegoalzatec86 Probably you can try with salmon 1.2.0 and post back here . Try downloading via the bioconda channel - https://bioconda.github.io/recipes/salmon/README.html,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614225512:80,down,downloading,80,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614225512,1,['down'],['downloading']
Availability,"@diegoalzatec86,. Sailfish is *not* required to run salmon. Salmon is a completely different tool, and it has subsumed and largely obviated sailfish. I would recommend using salmon rather than sailfish to do any RNA-seq quantification. Can you show what command you were running when you got the error:. ```; bash: sailfish: command not found_; ```. ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614227322:296,error,error,296,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614227322,1,['error'],['error']
Availability,"@hiraksarkar: it says 'CMake Error: The source directory ""<>/salmon-0.12.0_linux_x86_64"" does not appear to contain CMakeLists.txt. Specify --help for usage, or press the help button on the CMake GUI.'",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449688983:29,Error,Error,29,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449688983,1,['Error'],['Error']
Availability,"@k3yavi - is it possible to skip the thresholding entirely, so as to use downstream tools to remove empty barcodes instead?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490795334:73,down,downstream,73,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490795334,1,['down'],['downstream']
Availability,"@k3yavi @rob-p ; Thank you for the prompt responses! I executed the following but seems to get no ""quant.sf"" as output (in fact no other output except for the log file). I don't find ""AlignmentLibrary"" object even though the log states that it did. Do you know what went wrong? Thank you!. Command:; ```bash; salmon quant -e ./aux_info/eq_classes.txt.gz --libType IU -o ./; ```. Output log:; [2020-09-18 20:01:55.879] [jointLog] [info] setting maxHashResizeThreads to 8; [2020-09-18 20:01:55.879] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-09-18 20:01:55.879] [jointLog] [info] numQuantThreads = 4; [2020-09-18 20:02:50.408] [jointLog] [warning] Missing effective lens for 47121 transcripts; setting to 100.0.; [2020-09-18 20:02:50.408] [jointLog] [warning] NOTE: Since effective lengths are not provided, please do not rely on the TPM field ; in the ouput quantifications. Only the NumReads field will be reliable.; [2020-09-18 20:02:50.410] [jointLog] [info] Found total 187671 eqclasses and 47121 transcripts; [2020-09-18 20:02:50.682] [jointLog] [info] Created AlignmentLibrary object. My Salmon version is v1.3.0.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/567#issuecomment-695157454:976,reliab,reliable,976,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/567#issuecomment-695157454,1,['reliab'],['reliable']
Availability,"@k3yavi beat me to it! It is, unfortunately, a recurring problem. The SRA file itself only contains one of the reads and is therefore essentially useless in analyzing the single-cell data. This is an ongoing problem that I've mentioned several times, but I don't know if the SRA has a plan in place to address it. The proper solution at this point is exactly as Avi suggests; download the bam file (what the SRA calls the original TenX format data), and run it through 10x's bamtofastq to get back the original fastq files (this time paired-end) that you can process. Let us know if you have success with this. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/769#issuecomment-1107843588:376,down,download,376,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/769#issuecomment-1107843588,1,['down'],['download']
Availability,"@k3yavi let me share my status. > salmon-latest_linux_x86_64.tar.gz; > Mac-Osx v 10.13.2. I downloaded the binary file. And it works! :) Thanks. In other words, I downloaded below binary file on release page.; https://github.com/COMBINE-lab/salmon/releases/download/v0.11.2/salmon-0.11.2-linux_x86_64.tar.gz. But it did not work like this. ```; $ wget https://github.com/COMBINE-lab/salmon/releases/download/v0.11.2/salmon-0.11.2-linux_x86_64.tar.gz; $ tar xzvf salmon-0.11.2-linux_x86_64.tar.gz; $ cd salmon-0.11.2-linux_x86_64/; $ ./salmon --help; -bash: ./salmon: cannot execute binary file; ```. I have not tried to install by bioconda yet.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-412661401:92,down,downloaded,92,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-412661401,4,['down'],"['download', 'downloaded']"
Availability,"@kalanir,. Can you please direct me to the files you used to build the index? Is the docker image above the one from docker hub? I would be hopeful, if this happens in docker, we could track down what's going on. When you say it works with an older version, can you tell me whst version works for you with this index?. Thanks, ; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/559#issuecomment-674827706:191,down,down,191,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/559#issuecomment-674827706,1,['down'],['down']
Availability,@lizhaozhi Do you have R 4.0.3 in your conda enviornment? 0.14 is the version of Salmon that conda tries to downgrade me to when I try to update from R 4.0.2 to R 4.0.3 see: https://github.com/COMBINE-lab/salmon/issues/594,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/592#issuecomment-736855646:108,down,downgrade,108,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/592#issuecomment-736855646,1,['down'],['downgrade']
Availability,"@mdshw5 --- Salmon has definitely become less ""complain-y"" in the newer versions. That is, it will no longer spew out error messages for all of the fragments that show up in an unexpected orientation. However, the summary statistics are currently very ""summary"". There is a file in the quantification directory called `libFormatCounts.txt` that summarizes the number of alignments seen in the different orientations etc. However, I _really_ like your idea of recording the ""violating"" transcripts. That is, we could maintain some ""threshold"" beyond which if there are these many ""incorrectly"" mapping fragments for a transcript, the transcript is recorded and reported to the user as potentially being in the wrong orientation in the index.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/16#issuecomment-144479133:118,error,error,118,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/16#issuecomment-144479133,1,['error'],['error']
Availability,"@mdshw5 I checked the md5sum of the file that I was using before and it had a different value, so I downloaded again, this time the md5sum matched.; ```; $ md5sum Caenorhabditis_elegans.WBcel235.cdna.all.fa.gz; 3979cd3a2d5fe408b6261ae5b1d0c4de Caenorhabditis_elegans.WBcel235.cdna.all.fa.gz; ```; I rerun the indexing and quantification, but still get exactly the same error. . Next I am running it locally (not the cluster) to check wether this solves the issue.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-377157736:100,down,downloaded,100,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-377157736,2,"['down', 'error']","['downloaded', 'error']"
Availability,"@moschmi,. @roryk's parsing of the error is exactly what is intended. Specifically, alevin is looking to map the transcript `PB.40054.21` to a gene, but it is not finding that transcript in the file `PacBio/single_cell_pipeline/sqanti3_output/Alin_neg_txp2gene.tsv`. The question is a bit trickier when you have your own long-read derived transcriptome, since I don't know the process by which you are grouping transcripts into genes. It is always possible to have a transcript be its own gene (by having it appear in both the first and second columns in the same line of this file) — however, then you will lose information about how this transcript and other transcripts belonging to the same gene are related, which plays into how alevin quantifies gene-level abundance.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/540#issuecomment-648204069:35,error,error,35,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/540#issuecomment-648204069,1,['error'],['error']
Availability,"@rob-p . I did notice that the header was missing so I am looking into getting the original. I downloaded/unzipped the files you sent and seem to still have the same issue, though. ; ```; $ conda activate salmon; $ cd ~/opt/anaconda2/envs/salmon; $ ./bin/salmon quant -l IU -t transcripts.fa -a sample_alignments.sam -o quant_directory; Version Info: This is the most recent version of salmon.; # salmon (alignment-based) v1.2.0; # [ program ] => salmon ; # [ command ] => quant ; # [ libType ] => { IU }; # [ targets ] => { transcripts.fa }; # [ alignments ] => { sample_alignments.sam }; # [ output ] => { quant_directory }; Logs will be written to quant_directory/logs; [2020-04-21 11:46:41.365] [jointLog] [critical] Note: Alignment-free mapping (i.e. mapping without subsequent selective-alignment) has not yet been throughly tested under the pufferfish-based index and using the pufferfish-based mapping strategies. Thus, disabling of selective-alignment is not currently allowed. We may, potentially explore re-enabling this option in future versions of salmon. ```. To set up Salmon, I entered the following per the Getting Started Guide:; `$ conda config --add channels conda-forge`; `$ conda config --add channels bioconda`; `$ conda create -n salmon salmon`. Then, set the wd to `~opt/anaconda2/envs/salmon`. To run, I dropped the `transcripts.fa` and `seq.bam`/`seq.sam` file into the ~opt/anaconda2/envs/salmon and ran it. I noticed that if I moved the files to an entirely separate directory or deleted them all together and ran `./bin/salmon quant -l IU -t transcripts.fa -a sample_alignments.sam -o quant_directory`, the same error came up. Is it possible that there is an issue with Salmon reading the files?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/511#issuecomment-617263834:95,down,downloaded,95,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/511#issuecomment-617263834,2,"['down', 'error']","['downloaded', 'error']"
Availability,"@rob-p . That's odd! Well, what you sent above works perfect the sample files you provided earlier. I am still not able to process my own - perhaps because of the header issue?. ```; $ ./bin/salmon --no-version-check quant -l OSR -t sequence.fasta -a myseq.sam -o quant; # salmon (alignment-based) v1.2.0; # [ program ] => salmon ; # [ command ] => quant ; # [ libType ] => { OSR }; # [ targets ] => { sequence.fasta }; # [ alignments ] => { myseq.sam }; # [ output ] => { quant }. Logs will be written to auts2_quant/logs; [2020-04-21 18:36:46.762] [jointLog] [info] setting maxHashResizeThreads to 8; [2020-04-21 18:36:46.762] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; Library format { type:paired end, relative orientation:outward, strandedness:(antisense, sense) }; [2020-04-21 18:36:46.764] [jointLog] [info] numQuantThreads = 4; parseThreads = 4; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""myseq.sam"", fasta = ""sequence.fasta"" . . .done; Reference seq chr7 unknown; processed 0 reads in current roundSegmentation fault: 11; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/511#issuecomment-617454680:1147,fault,fault,1147,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/511#issuecomment-617454680,1,['fault'],['fault']
Availability,@rob-p . Yes - you are correct. Would you be making available pre-computed SAF gentrome indices as tarball on github or dropbox.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/444#issuecomment-550389858:52,avail,available,52,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/444#issuecomment-550389858,1,['avail'],['available']
Availability,@rob-p Ping on enhancing the `CMakeLists.txt` as proposed to allow building Salmon with Intel compilers?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/9#issuecomment-490874687:7,Ping,Ping,7,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/9#issuecomment-490874687,1,['Ping'],['Ping']
Availability,"@rob-p That's a good point. I have been relying on Picard for validating the files and this was flagged as an error. Incorrectly so as you point out. Is there any validation for the CIGAR strings that are generated? In some cases with some of the shorter transcripts, the operator falls of the end of the reference. ENST00000424567 is 135 bp long. . ```; NB501336:15:H3KVTBGXY:1:13202:16266:9834 99 ENST00000424567 1 1 1S150M = 1 -135 GTAGTCGAAACTGAAGAAGACAGAGACGCAAGAGAAATTCGATAAGTCGAAACTGAAGAAGACAGAGACGCAAGAGAAAAATCCACTGCCCGAGATCGGAAGAGCACACGTCAGAACTCCAGTCACCGTAGAAGCTCGTATGCCGTCTTCG * NH:i:7; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/94#issuecomment-250561171:110,error,error,110,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/94#issuecomment-250561171,1,['error'],['error']
Availability,"@rob-p This is not running twice on same sample. I can see that this run generates a exit code of 1 for that run - however all files are there as needed. Other samples have a exit code 0. I looked up sample runs before and after - they seem to have correct exit codes and ran fine. Even this runs fine, but what triggers that error message - I am not sure. ```; failed to read 8 bytes; salmon quant invoked improperly; ```. I also reran my whole pipeline (qc_trimming etc and finally salmon) - this time with 5 samples only (and included the above sample) - the pipeline runs successfully. Not sure where to investigate",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/512#issuecomment-618044865:326,error,error,326,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/512#issuecomment-618044865,1,['error'],['error']
Availability,@rob-p We have our own Jenkins install at Gent University that we use to make sure [EasyBuild](http://easybuild.readthedocs.org/en/latest/) scripts build a wide range of scientific software. I don't think we're to open it up for free use. I see there is AppVeyor but they only support Visual Studio. I'll take a look at what's available.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/9#issuecomment-126522041:327,avail,available,327,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/9#issuecomment-126522041,1,['avail'],['available']
Availability,"@rob-p thanks for tagging me. I missed the primary discussion and went over it. ; @reganhayward , thanks for posting this interesting phenomenon. Checking for ambiguity is data driven, there are many sources of ambiguity, ; 1. Exon sharing (when both the transcripts share a splicing even and thereby share an exon.) ; 2. They originate from genes that ae paralogs of each other. ; 3. They share sequence of read length without an obvious clue (might stem some evolutionary event in the past.). Looking into the ensemble database `ENST00000374675.7` originates from [ENSG00000112473](https://grch37.ensembl.org/Homo_sapiens/Gene/Summary?g=ENSG00000112473;r=6:33168222-33172216) and `ENST00000428189.5` belongs to [ENSG00000229470.5](https://grch37.ensembl.org/Homo_sapiens/Location/View?db=core;g=ENSG00000229470;r=HSCHR6_MHC_DBB:30499388-30515186). The second one comes from an alternate assembly according to ensemble from the same chromosome 6. There is a possibility that there is exon sharing. But I can not be sure before doing a blast etc. . There is a way from salmon to track this down. If you use `-d` option for dumping equivalence classes then, we can check for equivalence classes where these transcripts occur. If they co-occure in an equivalence class then we could be sure that it is due to read sharing. If you can provide me the equivalence class file (should be a smaller one), I can look into it. The gibbs/bootstraps would come handy once we know the equivalence classes, since it will reveal how the uncertain the estimates are for these two transcripts when compared to their equivalence class members. . Best; Hirak",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-757473486:1090,down,down,1090,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-757473486,1,['down'],['down']
Availability,"@sudeep71 Hi there, I run into the same error when I use salmon. Would please tell me what you did to set a correct PATH ? Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/135#issuecomment-303068916:40,error,error,40,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/135#issuecomment-303068916,1,['error'],['error']
Availability,"@tamuanand,. Right now, I added the code to dump the _salmon_ version into versionInfo.json. Which is a standard json file that goes in the index directory. Actually, that file already contains an index version key, which is simply a number that is incremented every time there is a change made that alters the binary representation of the index on disk. That is particularly useful because not every salmon version requires re-building the index. Regarding the feature I've added. It's fairly standard practice for us to put information that is meant to be read by both humans and machines (scripts, R packages downstream, etc.) into a JSON file. This makes it easy to access it simply from many languages, and to have _some_ (but not too much) structure to this data. There are even slick command line tools for pulling info out of JSON files (like [jq](https://stedolan.github.io/jq/)). If there is a strong reason that you need the _salmon_ version in its own text file, I'm willing to oblige and duplicate the information there. Just let me know.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/498#issuecomment-605694474:612,down,downstream,612,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/498#issuecomment-605694474,2,['down'],['downstream']
Availability,"@xflicsu Did you include ""unspliced"" transcript sequences in your reference? I could imagine your mapping rate goes down if you are not putting the intronic regions in the reference (so that intronic reads don't map)... You can get those unspliced transcript sequences e.g. from Ensembl BioMart.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/32#issuecomment-208324913:116,down,down,116,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/32#issuecomment-208324913,1,['down'],['down']
Availability,"A bit delayed, but this relates to the questions I've been asking on the salmon gitter. . First, it's worth pointing out that the new 10x (v2) sequencing is a lot more like other bead methods, where (i) index reads (i7/i5) are for labelling biological samples (ii) read1 contains the combined cell and molecular/UMI barcodes (ii) read2 is the transcript 3' read. So it seems there is now some data format convergence. Either way, I'd guess that ongoing iterations of the high throughput platforms will keep one read for the transcript 3', reserving the other 2 or 3 reads for some combination of the sample, cell and molecular barcodes. . Before thinking about how to best collapse UMIs, there's also the issue of how best to QC the barcodes and beads. Jim Namesh has [some functions](http://mccarrolllab.com/wp-content/uploads/2016/03/Drop-seqAlignmentCookbookv1.2Jan2016.pdf); as does [Vasilis Ntranos](https://github.com/pachterlab/scRNA-Seq-TCC-prep/blob/master/README.md). Arguably this has nothing to do with salmon/kallisto though I think the kallisto guys were smart to include it. It's a good filter even if only for speeding things up. Then it's really what might be the most appropriate demultiplexing of fastqs to allow compatibility between tecnhiques, I guess. I quite like how the kallisto workflow ends up with a fastq per cell together with a matching UMI file. Then at the very least one can ignore the UMIs (perhaps going with what @vals suggests). Not sure if that's helpful. But thought to chime in as somebody we would love to see salmon working on the high throughput single-cell platforms that have sample, cell and molecular barcodes. Even if only to test how worthwhile UMIs genuinely are for most applications. This may be a controversial comment, but I suspect for me UMIs will largely end up the same way as spike-ins: useful for quantifying endogenous RNA recovered per cell but perhaps not all that useful beyond that for low read depth single-cell signature profiling.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/93#issuecomment-265619589:1912,recover,recovered,1912,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/93#issuecomment-265619589,1,['recover'],['recovered']
Availability,"A series of commit till 409e7508194176f596e394e18a4dd59c88d46def, adds a new mode activated with `--debug` command line flag. Will be available for use with the next planned release of Salmon v0.11.3 later this month.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/266#issuecomment-412352265:134,avail,available,134,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/266#issuecomment-412352265,1,['avail'],['available']
Availability,"Above list format @Yago-91 showed is also available for `salmon quant` to input multiple sequence files.; e.g. `salmon quant -l A -i reference -o result -1 {sample1_1.fastq.gz,sample2_1.fastq.gz} -2 {sample1_2.fastq.gz,sample2_2.fastq.gz}`",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/179#issuecomment-724756145:42,avail,available,42,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/179#issuecomment-724756145,1,['avail'],['available']
Availability,"Absolutely! And thank you for your quick responses! Just trying to make an index from Homo_sapiens.GRCh38.cdna.all.fa.gz (ftp://ftp.ensembl.org/pub/release-95/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz) to use for a ENCODE fastq file (test file is https://www.encodeproject.org/files/ENCFF163DLM/@@download/ENCFF163DLM.fastq.gz). I'm working from a cluster computer in a salmon environment with biopython as the only other thing installed ; <img width=""750"" alt=""screen shot 2019-02-25 at 2 50 38 pm"" src=""https://user-images.githubusercontent.com/18176863/53374317-d1936780-390c-11e9-8370-51504ffb0996.png"">. Index is here: https://drive.google.com/file/d/1iKD-qfJKIViePE7Uu_1Wsp8z71oGipjN/view?usp=sharing",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/197#issuecomment-467217789:314,down,download,314,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/197#issuecomment-467217789,1,['down'],['download']
Availability,"Actually, I was only checking the package for building it on Debian, I don't use it personally. ; From that point of view of packaging the software for Debian it would be desirable to be able to build the software without any downloads during the build process. The reason for this is that building packages on the Debian build servers does not allow downloads for the very simple reason that this would bypass the QA checks for proper licensing of all files required to build some software (The same is true for Ubuntu and Linux distributions based on Debian). . Best, ; Gert",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-357167540:226,down,downloads,226,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-357167540,4,['down'],['downloads']
Availability,"Actually, homo sap long is causing this error, homo sap short is causing the related JSON error (`rapidjson internal assertion failure: IsObject()`)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442612022:40,error,error,40,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442612022,3,"['error', 'failure']","['error', 'failure']"
Availability,"After discovering the alternative geometry format, I see that unmodified Rhapsody reads should have the following settings:. --umi-geometry '1[53-60]' --bc-geometry '1[1-9,22-30,44-52]' --read-geometry '2[1-end]'. There's a bit of a challenge regarding error correction for the cell barcodes, in that they should be corrected in batches of 9 nucleotides (into 96 clusters of the most commonly-seen sequences).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/628#issuecomment-777893046:253,error,error,253,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/628#issuecomment-777893046,1,['error'],['error']
Availability,Ah so what's happening is alevin is keeping around 500 low confidence CB for performing downstream whitelisting.; `[2021-12-10 15:28:09.434] [alevinLog] [info] Total 1501(has 500 low confidence) barcodes`,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/739#issuecomment-1022395566:88,down,downstream,88,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/739#issuecomment-1022395566,1,['down'],['downstream']
Availability,"Ah that makes sense, thank you for the explanation! Having a specific code/category to the set of unmapped codes used in the unmapped.txt file would be absolutely wonderful, and would give me all of the information I need to pursue my downstream use cases.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/748#issuecomment-1098429513:235,down,downstream,235,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/748#issuecomment-1098429513,1,['down'],['downstream']
Availability,"Ah yes, you are right - I did not have the `--gencode` flag for salmon indexing. Thank you @k3yavi! It is working perfectly now. . Perhaps some sort of quick grep of the index file name for `'gencode'` or within the file for multiple `'|'`s should be done to check if it's gencode followed by a warning/error if the `--gencode` flag is missing? When running `salmon alevin`, it also might be nice to fail sooner if possible (instead of after processing barcodes/fragments - can take a long time). If you agree/think this is easy enough I can open separate issues. The ensembl files do seem to be inconsistent about subversion. Here is the cdna file for the index and the GTF:; ```bash; zcat Homo_sapiens.GRCh38.cdna.all.fa.gz | awk 'NR % 2 {print $1 ""\t"" $4}' | head -n 5; >ENST00000632684.1 gene:ENSG00000282431.1; >ENST00000434970.2 gene:ENSG00000237235.2; >ENST00000448914.1 gene:ENSG00000228985.1; >ENST00000415118.1 gene:ENSG00000223997.1; >ENST00000631435.1 gene:ENSG00000282253.1. # for Homo_sapiens.GRCh38.94.gtf.gz; bioawk -c gff '$feature==""transcript"" {print $attribute}' <(gunzip -c Homo_sapiens.GRCh38.94.gtf.gz) | awk -F ' ' '{print substr($6,2,length($6)-3) ""\t"" substr($2,2,length($2)-3)}' | head -n 5; ENST00000456328 ENSG00000223972; ENST00000450305 ENSG00000223972; ENST00000488147 ENSG00000227232; ENST00000619216 ENSG00000278267; ENST00000473358 ENSG00000243485. # for Homo_sapiens.GRCh38.94.chr_patch_hapl_scaff.gtf.gz; bioawk -c gff '$feature==""transcript"" {print $attribute}' <(gunzip -c Homo_sapiens.GRCh38.94.chr_patch_hapl_scaff.gtf.gz) | awk -F ' ' '{print substr($6,2,length($6)-3) ""\t"" substr($2,2,length($2)-3)}' | head -n 5; ENST00000456328 ENSG00000223972; ENST00000450305 ENSG00000223972; ENST00000488147 ENSG00000227232; ENST00000619216 ENSG00000278267; ENST00000473358 ENSG00000243485; ```. For the gencode index and GTF. ```bash; bioawk -c gff '$feature==""transcript"" {print $attribute}' <(gunzip -c gencode.v29.annotation.gtf.gz) | awk -F ' ' '{print substr($4,2,",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-496266217:303,error,error,303,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-496266217,1,['error'],['error']
Availability,Aligned.SortedByCoord.NoHeader.bam \; > SRR3212847.Aligned.SortedByCoord.bam; > ; > samtools collate \; > -@ 40 \; > -o SRR3212847.Aligned.Shuffled.NoHeader.bam \; > SRR3212847.Aligned.SortedByCoord.NoHeader.bam; > ; > salmon quant \; > -t mRNA.fasta \; > -p 20 \; > -l A \; > -a SRR3212847.Aligned.Shuffled.NoHeader.bam \; > -o SRR3212847.Aligned.Shuffled.NoHeader; > ```; > ; > ```; > ; > ....; > ; > ; > [2021-01-08 12:42:10.700] [jointLog] [warning] ; > ; > WARNING: Detected suspicious pair --- ; > The names are different:; > read1 : SRR3212847.24133171; > read2 : SRR3212847.33911054; > The proper-pair statuses are inconsistent:; > read1 [SRR3212847.24133171] : no proper-pair; not mapped; matenot mapped; > ; > read2 : [SRR3212847.24133171] : proper-pair; mapped; matemapped; > ; > [2021-01-08 12:42:10.700] [jointLog] [warning] ; > ; > WARNING: Detected suspicious pair --- ; > The names are different:; > read1 : SRR3212847.33911054; > read2 : SRR3212847.30781941; > ; > Segmentation fault (core dumped); > ```; > ; > ### 3. Sorting with `samtools sort -n`; > ```; > samtools sort \; > -@ 40 \; > -n \; > -o SRR3212847.Aligned.SortedByName.bam \; > SRR3212847.Aligned.SortedByCoord.bam; > ; > salmon quant \; > -t mRNA.fasta \; > -p 20 \; > -l A \; > -a SRR3212847.Aligned.SortedByName.bam \; > -o SRR3212847.Aligned.SortedByName; > ```; > ; > ```; > Version Info: This is the most recent version of salmon.; > # salmon (alignment-based) v1.4.0; > # [ program ] => salmon ; > # [ command ] => quant ; > # [ targets ] => { mRNA.fasta }; > # [ threads ] => { 20 }; > # [ libType ] => { A }; > # [ alignments ] => { SRR3212847.Aligned.SortedByName.bam }; > # [ output ] => { SRR3212847.Aligned.SortedByName }; > Logs will be written to SRR3212847.Aligned.SortedByName/logs; > [2021-01-08 13:02:04.845] [jointLog] [info] setting maxHashResizeThreads to 20; > [2021-01-08 13:02:04.845] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; > ,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1343749456:3086,fault,fault,3086,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1343749456,1,['fault'],['fault']
Availability,"Also getting segmentation fault. Any progress on this? This is salmon v1.3.0, installed with conda or using the binary, running in slurm. I do not get a segmentation fault if I pass only a single file, but I do if I pass two files. ```; $ ./src/salmon-latest_linux_x86_64/bin/salmon quant --threads $(nproc) --libType U -t GRCh38_latest_rna.fa -a data/processed/bwa-mem/SRR10571655.sam data/processed/bwa-mem/SRR10571656.sam -o _tmp/ ; Version Info Exception: server did not respond before timeout; # salmon (alignment-based) v1.3.0; # [ program ] => salmon ; # [ command ] => quant ; # [ threads ] => { 32 }; # [ libType ] => { U }; # [ targets ] => { GRCh38_latest_rna.fa }; # [ alignments ] => { data/processed/bwa-mem/SRR10571655.sam data/processed/bwa-mem/SRR10571656.sam }; # [ output ] => { _tmp/ }; Logs will be written to _tmp/logs; [2020-10-12 16:13:21.969] [jointLog] [info] setting maxHashResizeThreads to 32; [2020-10-12 16:13:21.969] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; Library format { type:single end, relative orientation:none, strandedness:unstranded }; [2020-10-12 16:13:21.969] [jointLog] [info] numQuantThreads = 26; parseThreads = 6; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""data/processed/bwa-mem/SRR10571655.sam"", fasta = ""GRCh38_latest_rna.fa"" . . .done; [2020-10-12 16:13:26.979] [jointLog] [info] replaced 5 non-ACGT nucleotides with random nucleotides. processed 103000000 reads in current round[1] 1994 segmentation fault (core dumped) ./src/salmon-latest_linux_x86_64/bin/salmon quant --threads $(nproc) --libTyp; ```. Always at 103000000 reads.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-707334655:26,fault,fault,26,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-707334655,3,['fault'],['fault']
Availability,"Also, I assumed (according to the documentation) that these underflow and overflow errors inherit from `std::runtime_error`, but I've updated the try/catch with a more generic exception class just in case they are not.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393631624:83,error,errors,83,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393631624,1,['error'],['errors']
Availability,"Also, it is worth noting that, with the `-z` option, salmon will not write down a CIGAR string for the alignments, but it _will_ write down the computed alignment score. As it is _highly recommended_ (and the default behavior) to use the error model when quantifying in alignment based mode, we should ensure that, if the input alignments are coming from salmon itself, the `AS` tag is used as a proxy for the missing CIGAR string to assign conditional fragment probabilities.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/465#issuecomment-567974966:75,down,down,75,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/465#issuecomment-567974966,3,"['down', 'error']","['down', 'error']"
Availability,"And for us, who have blocked download on a computational cluster `cmake` silently continues even when `scripts/fetchRapMap.sh` failed (see error code `403` below). That is bad. Please propagate the error back to `cmake` so it dies immediately. Actually, remove the download altogether. Improve Requirements documentation and put a link to it there instead. ```; $blah/salmon-0.10.2 $ cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBoost_NO_BOOST_CMAKE=BOOL:ON -DFETCH_BOOST=TRUE CMakeLists.txt; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /apps/gentoo/usr/bin/cc; -- Check for working C compiler: /apps/gentoo/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /apps/gentoo/usr/bin/c++; -- Check for working CXX compiler: /apps/gentoo/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; Making Release build; running $blah/salmon-0.10.2/scripts/fetchRapMap.sh 2>&1; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; curl: (56) Received HTTP code 403 from proxy after CONNECT; -- Found ZLIB: /apps/gentoo/usr/lib/libz.a (found version ""1.2.11""); -- Looking for lzma_auto_decoder in /apps/gentoo/usr/lib/liblzma.a; -- Looking for lzma_auto_decoder in /apps/gentoo/usr/lib/liblzma.a - found; -- Looking for lzma_easy_encoder in /apps/gentoo/usr/lib/liblzma.a; -- Looking for lzma_easy_encoder in /apps/gentoo/usr/lib/liblzma.a - found; -- Looking for lzma_lzma_preset in /apps/gentoo/usr/lib/liblzma.a; -- Looking for lzma_lzma_preset in /apps/gentoo/usr/lib/liblzma.a - found; -- Found LibLZMA: /apps/gentoo/usr/include (found version ""5.2.3""); Fo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387:29,down,download,29,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387,4,"['down', 'error']","['download', 'error']"
Availability,Another error:; There is a whitespace after the last slash. ```; wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_28/ gencode.v28.pc_transcripts.fa.gz. ```. Corrected; ```; wget ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_28/gencode.v28.pc_transcripts.fa.gz. ```,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/244#issuecomment-401345280:8,error,error,8,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/244#issuecomment-401345280,1,['error'],['error']
Availability,Any update on this? I am having the same error,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1979988398:41,error,error,41,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1979988398,1,['error'],['error']
Availability,"Any updates? I am having a related issue with 0 reads being found by Salmon:; TBX21 transcripts ENST00000177694 and ENST00000581328 both report 0 read counts, but I am confident there are plenty of reads from these transcripts. (1) download sra and fastq-dump, (2) trim_galore (3) fastQC (4) STAR to generate aligned bams (for other analyses) and Salmon in mapping-based mode to get transcript counts. I am using the same transcript annotation for STAR and Salmon. . When I samtools view the aligned bam over the TBX21 region, I get back >4000 paired reads. The majority of the TBX21 reads have flags 99 or 147:; (# of reads) | (flag); 4431 | 147; 12 | 355; 14 | 403; 2 | 419; 4432 | 99. I also confirmed that many of these reads are indeed from the TBX21 spliced transcripts (cross splice junctions). I am running Salmon in mapping-based mode on the unaligned fastqs, and it is picking up exactly 0 reads in these transcripts. salmon index -t hg38_salmon_transcriptome.fa -i salmon_hg38_index --type quasi -k 31; salmon quant -i salmon_hg38_index -l ISR -p 8 -1 SRR1615172_1_val_1.fq.gz -2 SRR1615172_2_val_2.fq.gz -o salmon_quant_SRR1615172. The genome-wide distribution of insert size ranges for this sample are unusual (bi-modal), and this is partly why STAR only mapped 65% of the reads. The other issue with the sample is STAR reports 19% multi-mapped reads, but even so, there are still at least 4000 reads uniquely mapping to TBX21. Attached are:; ### Output from Salmon; [salmon_quant.log](https://github.com/COMBINE-lab/salmon/files/3199053/salmon_quant.log); [lib_format_counts.json.zip](https://github.com/COMBINE-lab/salmon/files/3199074/lib_format_counts.json.zip); ### Output from STAR; [SRR1615173.Log.final.out.STAR.txt](https://github.com/COMBINE-lab/salmon/files/3199078/SRR1615173.Log.final.out.STAR.txt); ### Output from samtools view over the TBX21 gene start and end (hg38 17:47733244-47746119); [TBX21_reads.txt](https://github.com/COMBINE-lab/salmon/files/3199054/TBX21_reads.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-494079306:232,down,download,232,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-494079306,1,['down'],['download']
Availability,"Are the names consistent between the BAM file and the reference you are providing? What do you get from `samtools view -H ../Data/DRR029379_after_bowtie.bam` versus looking at the reference transcript FASTA file? Also, this error:. ```; Exception : [ERROR: Failed to open file ../Data/DRR029379_after_bowtie.bam, exiting!]; ```. suggests that the BAM file itself could not be opened. Are you certain the relative path to the file is correct from the current working directory?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-270008037:224,error,error,224,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-270008037,2,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"BTW I don't know if it could be related but `make test` gives me:; Running tests...; Test project salmon/build; Start 1: unit_tests; 1/3 Test #1: unit_tests .......................***Failed 0.02 sec; Start 2: salmon_read_test_fmd; 2/3 Test #2: salmon_read_test_fmd ............. Passed 1.74 sec; Start 3: salmon_read_test_quasi; 3/3 Test #3: salmon_read_test_quasi ........... Passed 1.62 sec. 67% tests passed, 1 tests failed out of 3. Total Test time (real) = 3.37 sec. The following tests FAILED:; 	 1 - unit_tests (Failed); Errors while running CTest; Makefile:151: recipe for target 'test' failed; make: *** [test] Error 8",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393672412:528,Error,Errors,528,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393672412,2,['Error'],"['Error', 'Errors']"
Availability,"Both the originally-reported issue (form @kurtwheeler) and the request by @Miserlou are now implemented in develop, and so will be available in the next release, so I'm going to close this issue for now.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/279#issuecomment-416381103:131,avail,available,131,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/279#issuecomment-416381103,1,['avail'],['available']
Availability,"Btw the same thing happens when using gencode transcriptome. ```bash; wget https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_mouse/release_M25/gencode.vM25.transcripts.fa.gz; # better name; mv gencode.vM25.transcripts.fa.gz Mus_musculus_GENCODE_v25_GRCm38.fa.gz ; ````. ```; ./generateDecoyTranscriptome.sh \; -a /no_backup/genome_annots/Mus_musculus_ENSEMBL_v_102_GRCm38.gtf \; -g /no_backup/genome_seqs/Mmu10_gDNA.fasta \; -t /no_backup/transcriptome_seqs/Mus_musculus_GENCODE_v25_GRCm38.fa.gz \; -o /no_backup/indexes/salmon/gencode_mm10; ```. Which generates 2 files:; ```; ls -1 /no_backup/indexes/salmon/gencode_mm10; decoys.txt; gentrome.fa; ```. And then if I try to build an index with:. ```; salmon index \; -t /no_backup/indexes/salmon/gencode_mm10/gentrome.fa \; -i /no_backup/indexes/salmon/gencode_mm10 \; -d /no_backup/indexes/salmon/gencode_mm10/decoys.txt \; -k 28 --threads 8; ```. the job starts running but dies immediately for the same error:. ```; tail -n 4 /no_backup/indexes/salmon/gencode_mm10/ref_indexing.log . [warning] Removed 1612 transcripts that were sequence duplicates of indexed transcripts.; [puff::index::jointLog] [warning] If you wish to retain duplicate transcripts, please use the `--keepDuplicates` flag; [puff::index::jointLog] [critical] The decoy file contained the names of 55 decoy sequences, but 0 were matched by sequences in the reference file provided. To prevent unintentional errors downstream, please ensure that the decoy file exactly matches with the fasta file that is being indexed.; [puff::index::jointLog] [error] The fixFasta phase failed with exit code 1; ````. I do believe that the names in `decoys.txt` match some fasta headers in `gentrome.fa` as show here:. ```; head -n 1 decoys.txt; GL456210.1. zgrep ""GL456210.1"" gentrome.fa ; >GL456210.1; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1001151467:959,error,error,959,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1001151467,4,"['down', 'error']","['downstream', 'error', 'errors']"
Availability,Building my own TBB hasn't helped. I installed it and set its path on the command line using -DTBB_INSTALL_DIR=/usr/local/packages/intel-tbb.4.4.3.181 and still CMAKE returns this in its output:. ```; ERROR: Intel TBB NOT found!; -- Looked for Threading Building Blocks in /usr/local/packages/intel-tbb.4.4.3.181/compilers_and_libraries_2016; Build system will fetch and build Intel Threading Building Blocks; ```. I've tried numerous subdirectories as well but can't seem to find what it's looking for to determine the TPP directory. Setting TBB_INSTALL_DIR also changed nothing. Currently stuck on my salmon build.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201157274:201,ERROR,ERROR,201,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201157274,1,['ERROR'],['ERROR']
Availability,"Can you try doing:. ```; export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/Users/maysonlin/Downloads/salmon-1.2.1-h2072146_0 2/lib; ```. before running salmon? The problem is that the executable is looking for `libtbb` and `libtbb_proxy`, but they are not in the library path.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623050187:86,Down,Downloads,86,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623050187,1,['Down'],['Downloads']
Availability,"Cool, glad to hear that the above binary works for you. The binary on the release page was for linux that's why you were getting that error. As we progress, I'll keep updating the version for Macosx here, until the conda build is fixed for Osx. Also I've update the name of the file above just to avoid the confusion, thanks for the tip .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-412663036:134,error,error,134,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-412663036,1,['error'],['error']
Availability,"Could the amount of RAM available cause this problem? (Although they should have quite a lot available, much more than the size of this index file.)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442570917:24,avail,available,24,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442570917,2,['avail'],['available']
Availability,Could you let me know if a minor release is on the cards (or not) @k3yavi ? Would be nice if at least one Bioconda-available release had the fix.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-538345350:115,avail,available,115,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-538345350,1,['avail'],['available']
Availability,"Could you please increase the maximum barcode length, as per this issue [i.e. [here](https://github.com/COMBINE-lab/salmon/blob/0813a0a287c2bd80071511830befe5d786a59ad1/src/AlevinUtils.cpp#L926)]? Salmon is still complaining when I use a converted file with the linker sequences spliced out, having a concatenated cell barcode length of 27, and there doesn't seem to be any user-definable option to modify or ignore the limit:. ```; gringer@elegans:/mnt/ufds/jmayer$ salmon alevin -l ISR -1 normalised_H2GYLDRXY_1_210203_FD09251586_Other_CGAGGCTG_R_210203_DAVGAL_INDEXLIBNOVASEQ_M001_R1.fastq.gz normalised_H2GYLDRXY_2_210203_FD09251586_Other_CGAGGCTG_R_210203_DAVGAL_INDEXLIBNOVASEQ_M001_R1.fastq.gz -2 H2GYLDRXY_1_210203_FD09251586_Other_CGAGGCTG_R_210203_DAVGAL_INDEXLIBNOVASEQ_M001_R2.fastq.gz -2 H2GYLDRXY_2_210203_FD09251586_Other_CGAGGCTG_R_210203_DAVGAL_INDEXLIBNOVASEQ_M001_R2.fastq.gz -i /mnt/ufds/salmon/gencode_M23/salmon_1.4.0_decoy_M23 -p 10 -o salmon_1.4_5_27_8_JM_2021-02-12 --tgMap txp2gene.txt --end 5 --barcodeLength 27 --umiLength 8; [2021-02-12 11:01:37.654] [alevinLog] [warning] Note: the use of --end, --barcodeLength and --umiLength to describe the barcode and umi geometry is deprecated. Please start using the `--barcode-geometry` and `--umi-geometry` options instead.; [2021-02-12 11:01:37.655] [alevinLog] [error] Barcode length (27) was not in the required length range [1, 20].; Exiting now.; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/445#issuecomment-777836526:1336,error,error,1336,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/445#issuecomment-777836526,1,['error'],['error']
Availability,"Could you please share one of the output directories? It's not immediately obvious what the problem might be, since the log ends with . ```; [2020-06-03 23:47:15.955] [jointLog] [info] Computing gene-level abundance estimates; ```. which suggests the function to aggregate abundances to the gene level should be activated. On a related note, though we are definitely interesting in figuring out what might being going awry here, the recommended way to aggregate transcript-level abundances from salmon to the gene level is to use [tximport](https://bioconductor.org/packages/release/bioc/html/tximport.html), as it accounts for across-sample variability in expressed gene length, and makes it trivial to get your corresponding gene counts into a downstream DE tool like DESeq2, EdgeR, etc.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/530#issuecomment-638453196:746,down,downstream,746,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/530#issuecomment-638453196,1,['down'],['downstream']
Availability,"Counting (transcript, UMIs) is what ""kallisto pseudo"" with the --umi option; does, right?. Yes, there are a few errors in the UMIs. The Kallisto wrapper tries to; correct them. But this is really very rare. Not sure if it's worth the; time. Like ~100 out of 200.000 reads? I would have to check again.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-269043952:112,error,errors,112,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-269043952,1,['error'],['errors']
Availability,"Damn; I get the same behavior on ~~16.10~~ (actually, my box is 16.04, but I'm skeptical that this specific version issue is the cause of the behavior) as I get on 14.10 (using the executable you provided). It runs to completion and modulo our less-than-ideal handling of the `--libType` flag coming after the `--unmatedReads` flag, it completes without the Gibbs warning. When I run with `--seqBias` and `--gcBias`, I get the same behavior (it runs and finishes w/o hanging or outputting the error messages). I'm going to take a look at the relevant code path to see if anything stands out to me.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266938104:493,error,error,493,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266938104,1,['error'],['error']
Availability,"Dear @callumparr,. Thank you for bringing this up. So you are correct that the `--noLengthCorrection` flag should be passed to salmon when quantifying data that does not have a ""fragmentation effect"", that is, where the number of fragments we expect to draw from a transcript is not dependent upon the length of that transcript. In the ONT protocols, it is usually the case that we get 1 read -> 1 transcript, even if we don't read the whole thing. We have tested the effect of this in ONT data with spike ins, and have verified that using `--noLengthCorrection` does generally lead to improved accuracy with respect to quantification estimates. We have informed ONT of this, and I would guess they may optimize the flags that are used soon (we have also developed an error model that works correctly for these long reads, and that should make it into the next release of salmon). Regarding the effect this has on the `NumReads` values reported by salmon, it's not as simple as with the `TPM` estimates. The length affects the assigned reads through the probabilistic model on which inference is done. With the length effect we have that P(f | t_i) ∝ P( position | f, t_i ) * P( alignment | f, t_i) --- forgetting the alignment term for the time being, we have that with length correction P( position | f, t_i ) ∝ 1 / l_i and without length correction the l_i term goes away. In other words, the probability of allocating reads has a term that depends on the effective length when the `--noLengthCorrection` flag is not passed, but that term goes away when it is passed. This is not quite as drastic as with TPM where the normalization includes the length directly in the normalization (note, however, that when the `--noLengthCorrection` flag is passed, this adjusts the TPM as well). Further, the `NumReads` is still better than TPM in this regard because it still encodes the effect size (i.e. `NumReads` will sum to the total number of aligned reads). Anyway TLDR: Passing the `--noLengthCorrectio",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/651#issuecomment-821995147:768,error,error,768,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/651#issuecomment-821995147,2,['error'],['error']
Availability,"Dear Rob, thank you for the fast replay. a) I tried to compile but it is not working for me either; ....; _[100%] Linking CXX executable salmon; /usr/bin/ld: ../../external/install/lib/libstaden-read.a(libstaden_read_la-open_trace_file.o): in function `find_file_url':; open_trace_file.c:(.text+0xf74): warning: the use of `tempnam' is dangerous, better use `mkstemp'; during IPA pass: icf; lto1: internal compiler error: Segmentation fault; 0xd12487 internal_error(char const*, ...); 	???:0; 0xe4f0b6 varpool_node::get_constructor(); 	???:0; 0xea01ff ipa_icf::sem_item_optimizer::subdivide_classes_by_equality(bool); 	???:0; 0x12ab4cb ipa_icf::sem_item_optimizer::execute(); 	???:0; Please submit a full bug report,; with preprocessed source if appropriate.; Please include the complete backtrace with any bug report.; See <file:///usr/share/doc/gcc-11/README.Bugs> for instructions.; lto-wrapper: fatal error: /usr/bin/c++ returned 1 exit status; compilation terminated.; /usr/bin/ld: error: lto-wrapper failed; collect2: error: ld returned 1 exit status; make[2]: *** [src/CMakeFiles/salmon.dir/build.make:486: src/salmon] Error 1; make[1]: *** [CMakeFiles/Makefile2:665: src/CMakeFiles/salmon.dir/all] Error 2; make: *** [Makefile:166: all] Error 2_. 2) bioconda on a server is a mess. it will be my last resort. 3) I am trying the Docker version and it seems to work!!!; ; PS It seems to me a be a little strange though that the binary version is not working. I tried on three different systems (all with ubuntu 22.04) with Xeon gold and intel i7 . thank you again",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1144000013:415,error,error,415,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1144000013,8,"['Error', 'error', 'fault']","['Error', 'error', 'fault']"
Availability,"Dear Rob,; a brief update:; 1) with the flag -DNO_IPO=TRUE the compilation worked perfectly. thank you . 2)following a guide found at stackoverlow ([Find which assembly instruction caused an Illegal Instruction error without debugging], I discover that the illegal instruction is **vfmsubsd**. ; I am not an expert at all in the field, but googling it seems to be a standard SSE instruction.; I am surprised indeed.; cpus tested: ; Intel Xeon Gold 5220 (72) ; Intel Xeon Gold 5317 (48); Intel i7-10750H (12). Best and thanks again; Silvano. Program terminated with signal SIGILL, Illegal instruction.; #0 0x00007fa222c47396 in __ieee754_pow_fma4 () from /dataraw/mouse/salmon-1.8.0_linux_x86_64/bin/../lib/libm.so.6. 0x7fa222c47396 <__ieee754_pow_fma4+182> vfmsubsd %xmm3,%xmm6,%xmm3,%xmm7",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1145687835:211,error,error,211,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1145687835,2,['error'],['error']
Availability,"Dear all. Thank you for your prompt reply. ; @mikelove yes, the CPM is only cross-sample normalisation, but not cross genes. TPM is both cross-sample and cross-gene normalisation. Thus, in my mind, TPM is more suitable for downstream RNA-seq analysis, including clustering analysis, differential expression testing using Wilcoxon rank-sum test. Also, for accurately detecting differentially expressed genes, is it reasonable to overlap the results from different methods, such as edgeR+Wilcoxon rank-sum test?. Best regards,; Zheng zhuqing",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/812#issuecomment-1324468833:223,down,downstream,223,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/812#issuecomment-1324468833,1,['down'],['downstream']
Availability,"Did this ever get tracked down? we are having a situation where salmon seems to segfault whenever using slurm (this time it's `salmon index` that segfaults, though). wondering if you figured out a solution.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-562764577:26,down,down,26,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-562764577,1,['down'],['down']
Availability,Does `PB.40054.21` appear in your `PacBio/single_cell_pipeline/sqanti3_output/Alin_neg_txp2gene.tsv` file? The error is saying it is missing-- is it?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/540#issuecomment-647894779:111,error,error,111,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/540#issuecomment-647894779,1,['error'],['error']
Availability,"Does anyone have an answer to this, are those error models 'safe' to ignore?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1419784692:46,error,error,46,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1419784692,1,['error'],['error']
Availability,"Does it always error out on the _same_ samples? Is there anything different about the how the commands are run (e.g. are they running on different machines etc.)?. The error suggests that the process is not able to properly read the index. When salmon cannot read the index, it propagates an exception, which is what you are seeing here. The question is why this would happen for some samples and not others, so I'd look to find differences between the invocations, or the machines where samples are running / not running properly.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/512#issuecomment-618021381:15,error,error,15,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/512#issuecomment-618021381,2,['error'],['error']
Availability,Done the required work. Sorry for bothering everyone. Downloaded the refGene.gtf file from UCSC for mm9 having transcript information and then used `gffread` to build the transcript.fa for the mm9. Finally ran salmon indexes and to my surprise it finished in matter of few minutes < 3'. Thanks for all the suggestions. This is something which I always like getting to learn something new every day. Closing the issue.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/49#issuecomment-197975002:54,Down,Downloaded,54,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/49#issuecomment-197975002,1,['Down'],['Downloaded']
Availability,"Done!, I had few problems removing old versions and salmon command was still associated with the old version. I remove any salmon piece using `whereis` command to find them. After that the path in $PATH was right;; salmon -v; salmon 1.2.1. Now, I am using the as index I downloaded from refgenie and it says this;; [2020-05-05 09:21:31.276] [jointLog] [warning] The index did not record if the `--keepDuplicates` flag was used. Please consider re-indexing with a newer version of salmon that will propagate this information. I guess the index was made with some previous version which doesn't include this option (or they didn't use it). . Let's see how it works :) and how long it takes (the normal index spend like 3h to finish 15 quantifications of paired fastq files i7 (6threads) and 16GB ram :))). Thank you!!!!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623897373:271,down,downloaded,271,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/518#issuecomment-623897373,1,['down'],['downloaded']
Availability,"EQVecT means we are in the function with `template <typename EQVecT>`; i is the index of the loop that generates alphaSum; If I printf ""Round"" line 257, I get:; [2018-05-31 22:27:34.996] [jointLog] [info] Starting optimizer; Round; [2018-05-31 22:27:35.226] [jointLog] [info] Marked 1 weighted equivalence classes as degenerate; Round; [2018-05-31 22:27:35.257] [jointLog] [info] iteration = 0 | max rel diff. = 127.379; Exception : [Error in function boost::math::digamma<double>(double): numeric overflow]",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393669382:434,Error,Error,434,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393669382,1,['Error'],['Error']
Availability,Encountered the same error,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/425#issuecomment-612356265:21,error,error,21,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/425#issuecomment-612356265,1,['error'],['error']
Availability,"Error confirmed. OS RHEL7, GCC 6.4.0, CMake 3.13.x",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/455#issuecomment-558565387:0,Error,Error,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/455#issuecomment-558565387,1,['Error'],['Error']
Availability,"Especially since the files in both cases actually are in the same location... I could imagine it being an issue with something going write with the communication over the NFS. But in the working case it's just links to the same NFS location. Here is the tail of the gdb output:. ```; Computing gene-level abundance estimates; [2016-01-02 21:56:43.793] [jointLog] [warning] NOTE: Read Lib [( /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq, /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: SRP057125_SRS936134_salmon_out/libFormatCounts.txt for details. There were 104534 transcripts mapping to 44034 genes; Parsed 104000 expression lines; done; Aggregating expressions to gene level . . . done. Program received signal SIGSEGV, Segmentation fault.; 0x000000320dc093a0 in pthread_mutex_lock () from /lib64/libpthread.so.0; Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.149.el6_6.5.x86_64; (gdb) bt; #0 0x000000320dc093a0 in pthread_mutex_lock () from /lib64/libpthread.so.0; #1 0x0000000000806370 in je_tcache_bin_flush_small () at include/jemalloc/internal/mutex.h:85; #2 0x0000000000806c60 in je_tcache_event_hard () at src/tcache.c:44; #3 0x00000000005915fc in std::vector<Transcript, std::allocator<Transcript> >::~vector() (); #4 0x00000000005941c6 in ReadExperiment::~ReadExperiment() (); #5 0x00000000005872ce in salmonQuantify(int, char**) (); #6 0x0000000000514472 in main (); (gdb); ```. It does indeed seem to be inside JeMalloc.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168431900:997,fault,fault,997,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168431900,1,['fault'],['fault']
Availability,"Excellent, I was hoping streaming input would 'just work'. Thanks, Rob!. On Wed., 7 Sep. 2016, 4:45 pm Rob Patro, notifications@github.com wrote:. > Hi Pete,; > ; > Yup, this would be my recommended way to handle it. Since salmon accepts; > streaming input, you could do something like:; > ; > salmon quant -i index -l A -1 <(gzcat rep1_muliplex1_1.fq.gz rep1_mutliplex2_1.fq.gz) -2 <(gzcat rep1_multiplex1_2.fq.gz rep1_multiplex2_2.fq.gz) [other options etc.]; > ; > to avoid creating the intermediate concatenated files on disk. This will; > treat all the multiplexed samples from the same replicate as one giant; > input read stream (conceptually representing a single replicate). As far as; > merging / combining Salmon output, if you're doing the downstream analysis; > in R, the tximport package is nice. Otherwise, @vals; > https://github.com/vals has a python tool readquant; > https://github.com/Teichlab/readquant that can also do some merging.; > ; > Best,; > Rob; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > https://github.com/COMBINE-lab/salmon/issues/88#issuecomment-245412770,; > or mute the thread; > https://github.com/notifications/unsubscribe-auth/ABAEjUsIBA5yK5R7MPW38jiuH0xx_IRCks5qnyJJgaJpZM4J3L2E; > .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/88#issuecomment-245413908:752,down,downstream,752,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/88#issuecomment-245413908,1,['down'],['downstream']
Availability,"FYI, I'm taking another crack at an official FreeBSD port, but still hitting some gnarly issues with 1.5.2, so it might be a while. https://github.com/outpaddling/freebsd-ports-wip/tree/master/salmon; https://github.com/outpaddling/freebsd-ports-wip/tree/master/pufferfish; https://github.com/COMBINE-lab/salmon/issues/502. 1. The cmake system still forces downloading pufferfish during configure, which is forbidden in the ports system (like many other package managers). All downloads must occur during fetch phase and be verified using locally stored checksums. This would be easy to work around using GH_TUPLE, which downloads additional distfiles during fetch phase, except that fetchPufferfish.sh doesn't just extract the pufferfish dist, but has a long list of ""cp"" commands to copy pieces of it to ${INSTALL_DIR}. That's not something I'm inclined to tamper with since it will likely change with new versions and hence be a headache to maintain over time. It would be ideal if salmon could work with a separately installed pufferfish as it does with many other dependencies. This would make the port much cleaner.; 2. The code is not compatible with onetbb 2021.3, which is the current FreeBSD ports version.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-917642392:357,down,downloading,357,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-917642392,3,['down'],"['downloading', 'downloads']"
Availability,"Fantastic, I'll give it a try! Moreover, I have another question regarding salmon quantification and ffpe degradation. I was wandering if salmon is reliable in quantifying highly degraded RNASeq samples. I was not able to find any information about it. Should I open another issue, or we can discuss in this one ? Thanks again",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/799#issuecomment-1246245810:148,reliab,reliable,148,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/799#issuecomment-1246245810,2,"['degraded', 'reliab']","['degraded', 'reliable']"
Availability,"Feel free to PM me. If it's a publicly available dataset (and standard transcript set), then I can also try and reproduce the issue from there.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/50#issuecomment-197981581:39,avail,available,39,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/50#issuecomment-197981581,1,['avail'],['available']
Availability,"Feel free to close out this thread. I was able to set my user up with the salmon binary running 0.11 instead! . I wasn't able to address where GCC was being set exactly between the CMakelist and Makefile. I did manage to install it from source using ""source /opt/rh/devtools-3"" to invoke gcc-4.9.2, but that installation binary did not run and raised additional GCC library mismatch errors due to the system running 4.8.5, even though 4.9.2 was used to compile it. Sorry for the lengthy posts in any case!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-423646567:383,error,errors,383,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-423646567,1,['error'],['errors']
Availability,"Finalky i found that my transcript file was crashed during uploading to my; server; I repeated the process. It works now; Thank you so much. في الاثنين، ٢٢ أغسطس ٢٠٢٢ ٣:٢١ م Rob Patro ***@***.***> كتب:. > Hi @esraagithub <https://github.com/esraagithub>,; >; > Thanks for the bug report. Can you tell me how the specific version of; > salmon you are using was installed (e.g. via source, downloaded from the; > ""releases page"", or installed via bioconda)? Would it be possible to share; > the contigs that cause this error?; >; > Thanks,; > Rob; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/795#issuecomment-1222353941>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AMY4XZX6ZGAO5DOU5YOWTG3V2N5DZANCNFSM57HUQWJQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/795#issuecomment-1223885767:388,down,downloaded,388,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/795#issuecomment-1223885767,2,"['down', 'error']","['downloaded', 'error']"
Availability,"For clarification: From memory, using the same cluster, I had the same error at the same stage but only with particular data sets and confirmed this was not an issue of available memory. @k3yavi may remember some more of the details but we never got to the bottom of it. . @Acribbs Testing on another cluster would be a good idea in case this is a very specific cluster configuration issue",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458160685:71,error,error,71,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458160685,2,"['avail', 'error']","['available', 'error']"
Availability,"Fraction. Since not explicitly specified, it is being set to 0.65; [2019-08-25 11:40:44.518] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-08-25 11:40:44.518] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-08-25 11:40:44.518] [jointLog] [info] parsing read library format; [2019-08-25 11:40:44.518] [jointLog] [info] There is 1 library.; Exception : [Error: The index version file salmonIndexDecoyMouse/versionInfo.json doesn't seem to exist. Please try re-building the salmon index.]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting.; (salmon) wayne@Ubuntu19:~/rnaseq$ ls -R *.json; ls: cannot access '*.json': No such file or directory. Try 2.; Instead of referring to my directory decoys/ , I moved to the directory decoys/ ; and ran salmon index again, using your command exactly:; salmon index -t gentrome.fa -d decoys.txt -i combined_index. This time a few .json files were produced in the directory combined_index/ [your name this time]; [contents of decoys= combined_index gentrome.fa mus_musculus.tar.gz Salmontranscripts_quant; decoys.txt links.txt salmonQuantDecoy22.sh]. then [sh salmonQuantDecoy22.sh]; salmon quant -p 3 -i combined_index -l A -1 ../SRR1818187_2.fastq.gz -2 ../SRR1818187_1.fastq.gz --validateMappings -o Salmontranscripts_quant. Now no Segmentation Fault crash. ; The program finishes with; [2019-08-25 12:37:39.056] [jointLog] [info] Finished optimizer; [2019-08-25 12:37:39.056] [jointLog] [info] writing output . Now I am going to look for the mRNA counts. I think a major secret is to have mus_musculus.tar.gz in the same directory.; If my description is accurate [I did not repeat everything] you should have -mRNA [path to transcriptome.gz] on your command line, or instruct users to have the transcriptome.gz in the same directory.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-524651435:2931,Fault,Fault,2931,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-524651435,1,['Fault'],['Fault']
Availability,"FreeBSD port of 1.6.0 is building now:; [https://github.com/outpaddling/freebsd-ports-wip/tree/master/salmon](https://github.com/outpaddling/freebsd-ports-wip/tree/master/salmon); I'm getting a seg fault trying to run it, though. ; https://github.com/COMBINE-lab/salmon/issues/725",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-989319618:198,fault,fault,198,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-989319618,1,['fault'],['fault']
Availability,"From my somewhat superficial understanding, I have feeling that it is the only the soft clipping (deletion at either end) that causes the problem (and not INDELs in general). I think it might be better if the CIGAR string contained the soft clipping operations (the POS would still need to be shifted) of course. Right now when one visualizes the BAM file various distracting artifacts manifest themselves with both salmon and kallisto even when the POS field is correct. See the image below:. ![Alignments](https://www.ialbert.me/static/down/pseudo_alignments/pseudo_aln.png). (Top Kallisto, second Salmon, bottom Hisat. ). The soft clipped sequences are not marked as such, therefore lead to ugly misalignment at the ends, that in turn dominate the visualization. . Ideally, the pseudo-bam should look a little more like Hisat, I don't know how feasible that is though, perhaps knowing that only the ends need to be fixed makes for a simpler solution.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/475#issuecomment-574738566:538,down,down,538,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/475#issuecomment-574738566,2,['down'],['down']
Availability,"GENCODE provide 1 FASTA File called ""Transcript sequences"" which ""only"" contains the ""CHR"" (chromosomal) regions. GENCODE provide many GTF files (specifically 9). The GTF file corresponding to the FASTA file mentioned above is the ""Comprehensive gene annotation"" from the ""CHR"" regions (aka chromosomal regions) (which is the first on their list). You have downloaded the ""Pri"" (third entry) which is the normal chromosomes (Chr) as well as as well as scaffolds. which explain the 68 extra transcripts. Specifically the scaffolds included in ""Pri"" but not in ""Chr"" are:. ```; ""GL000009.2"" ""GL000194.1"" ""GL000195.1"" ""GL000205.2"" ""GL000213.1""; ""GL000216.2"" ""GL000218.1"" ""GL000219.1"" ""GL000220.1"" ""GL000225.1""; ""KI270442.1"" ""KI270711.1"" ""KI270713.1"" ""KI270721.1"" ""KI270726.1""; ""KI270727.1"" ""KI270728.1"" ""KI270731.1"" ""KI270733.1"" ""KI270734.1""; ""KI270744.1"" ""KI270750.1""; ```. So the solution is as @rob-p suggested:; 1) Use gffread to make your own fasta file; 2) Remove those extra transcripts (or the ""Chr"" GTF file). Cheers; Kristoffer",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-410992441:357,down,downloaded,357,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-410992441,1,['down'],['downloaded']
Availability,"Glad to hear that. Yes, I agree we can put some sort of filter while indexing to make the pipeline less painful in case of a failure. Regarding the transcript to gene map file parsing before the CB correction, we plan to make that into the next release which we plan to merge soon. I'll update you once we have the new version ready.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-496280290:125,failure,failure,125,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-496280290,1,['failure'],['failure']
Availability,"Got it working. The ""short"" form for how to do so in Centos 6.9 is:. ```; 1. install current versions of autoconf, automake, and cmake; 2. install the boost 1.57 set of RPMS if they are not already present; 3. install devtoolset-4 (or higher); 4. download and unpack salmon; 5. modify CMakeLists.txt; #around line 220, remove condition testing, set it to just; set (Boost_USE_STATIC_LIBS OFF); #around line 310; set(Boost_ADDITIONAL_VERSIONS ""1.57.0"" ""1.59.0"" ""1.60.0"" ""1.61.0"" ""1.62"" ""1.63"" ""1.64"" ""1.65"" ""1.66""); find_package(Boost 1.57.0 COMPONENTS iostreams filesystem system thread timer chrono program_options); 6. in top level of salmon do; mkdir build; cd build; nice scl enable devtoolset-4 '~/bin/cmake -DBoost_DEBUG=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBoost_NO_BOOST_CMAKE=BOOL:ON -DBOOST_LIBRARYDIR=/usr/lib64/boost157 -DBOOST_INCLUDEDIR=/usr/include/boost157 ../CMakeLists.txt' >try_cmake2.log 2>&1 &; 7. in top level of salmon do; nice scl enable devtoolset-4 'make' >build_2018_06_13a.log 2>&1 &; There will be lots of warnings but it should run to completion; 8. make install; cp bin/salmon $WHEREVER/bin/salmon; rmdir lib/pkgconfig; cp lib/* $WHEREVER/lib; rm -rf bin; rm -rf lib; export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$WHEREVER/lib; make test; ```. Is it OK to delete the (large) salmon directory at this point, or is the binary hardwired to find things in it?; I know that this does not work:. ```; cd ..; mv salmon not_salmon; cd not_salmon; make test; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397050436:247,down,download,247,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397050436,1,['down'],['download']
Availability,"Got it! The docker image is gold; thanks for that. Here is the source of the problem:. ```; /tmp/salmon-20180222-6167-19otg9q/salmon-0.9.1/scripts/fetchRapMap.sh: line 51: unzip: command not found; ```. we grab a zip of the (version-tagged) rapmap that we need. However, it seems that unzip is not available.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367800400:298,avail,available,298,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367800400,1,['avail'],['available']
Availability,"Got it, thanks for the heads up. I'd probably reach out to the refgenie people about the hg38 specific versions. It makes sense to have the feature of having the gtf at the time of indexing. The only concern I have is that mandating to have the gtf might restrict the overall workflow by a bit. Specifically because a user might not always have the full GTF available for every use case, although we can always make having GTF as an optional requirement for indexing. Adding the support should not be too difficult but it will certainly add a new logic path which would need thorough testing. . We'll certainly keep you updated with the feature as we progress although it can take some time to get back. In terms of your pipeline one option would be to actually save the GTF explicitly in the salmon index folder post indexing. Although it's definitely not a very computer science friendly solution but it will help maintain the consistency while we work on the feature.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/595#issuecomment-738200842:358,avail,available,358,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/595#issuecomment-738200842,1,['avail'],['available']
Availability,"Great! Assuming that the hang resulting from feeding nan to `gamma_distribution` was the cause of all of the hanging you were seeing, I'm going to close this issue now. Thanks so much for all of your help in tracking this down and isolating the cause.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-268064091:222,down,down,222,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-268064091,1,['down'],['down']
Availability,"Great- thanks @roryk , I'll give your code a try, and yes, we are applying some filtering downstream. Unfortunately we don't always have control of the metadata associated with the experiments we're handling. . @k3yavi - thank you, next release will be fine :-)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490163389:90,down,downstream,90,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490163389,1,['down'],['downstream']
Availability,"Great; hopefully I'll be able to repro the issue with the other sample. No rush, as I'll be finishing putting together the final for my class tomorrow morning (and so will be testing the sample between writing exam questions ;P). I just hope this doesn't turn out to be an environment / machine-specific behavior (those are *the worst* bugs to track down and fix).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266948036:350,down,down,350,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266948036,1,['down'],['down']
Availability,"Great; thanks for reporting this and helping us track it down. Please let us know if you run into anything else, or if you have other general feedback / suggestions regarding alevin!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396325784:57,down,down,57,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396325784,2,['down'],['down']
Availability,"Greetings,; I recently ran across this problem. In my invocation, I noticed that the boost build process was running with a b2 command which looked like:. cd /cbcb/sw/RedHat-7-x86_64/common/local/salmon/0.12.0/src/salmon-0.12.0/external/boost_1_66_0 && CC=/opt/local/stow/gcc-8.1.0/bin/gcc CXX=/opt/local/stow/gcc-8.1.0/bin/g++ /cbcb/sw/RedHat-7-x86_64/common/local/salmon/0.12.0/src/salmon-0.12.0/external/boost_1_66_0/b2 -d0 -j2 --with-iostreams --with-atomic --with-chrono --with-container --with-date_time --with-exception --with-filesystem --with-graph --with-graph_parallel --with-math --with-program_options --with-system --with-locale --with-timer toolset=/opt/local/stow/gcc-8.1.0/bin/gcc toolset=/opt/local/stow/gcc-8.1.0/bin/gcc cxxflags=-std=c++14 ""cxxflags= -std=c++14 -I/cbcb/sw/RedHat-7-x86_64/common/local/salmon/0.12.0/src/salmon-0.12.0/external/install/include -L/cbcb/sw/RedHat-7-x86_64/common/local/salmon/0.12.0/src/salmon-0.12.0/external/install/lib"" link=static install. and was generated in the file:; CMakeFiles/libboost.dir/build.make. which I then edited to ensure that all the toolset entries were set to 'toolset=gcc'.; Rerunning the make then passed without error.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-466558449:1188,error,error,1188,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-466558449,1,['error'],['error']
Availability,"HI @dbrg77 ,. Thanks for the tips on sci-seq and sci-car seq. We have put both in our todo list and would let you know once we have a stable version. re error: I am not sure why would there be an extra count under `awk`, although based on the editor/environment I think they sometimes use `\r\n` as the newline operator but don't trust me on this one it's just a hunch. I am closing this issue for now, feel free to open it if you have any other question.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/291#issuecomment-420812116:153,error,error,153,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/291#issuecomment-420812116,1,['error'],['error']
Availability,"HI @gianfilippo ,; I think #245 might help understanding the problem better.; Specifically to answer your questions, I am guessing `737K-august-2016.txt` is all the set of Cellular Barcodes(CB) being whitelisted by 10xGenomics protocol while in Alevin when you are giving external whitelist it assumes that the user is pretty confident about the presence of *all* the given CBs in their experiment. for example if you want to compare Alevin and cellranger apple to apple then you might have to give the `barcodes.tsv`(usually is present along with the `mtx` file) generated by the cellranger. (after removing `-1` from the CB names). ; `[alevinLog] [error] Barcode not found in frequency table`: This error means some of the CB given externally through the whitelist command seems to have no reads at all which violates the above assumption, you can potentially skip this error by using `--debug` flag with alevin (only if have version v0.11.3) but this mode has is yet to be extensively tested.; In case where you don't externally give whitelist CB, Alevin uses knee and KDE based method to identify the cutoff on the knee (and later correct for it) of the CB distribution. Based on your specific dataset it is possible that the method might be overshooting and aggressively identifying less number of clusters. If you can share the log and some part of your data then we can take a look what's going on. Hope this helps.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/284#issuecomment-417964393:650,error,error,650,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/284#issuecomment-417964393,3,['error'],['error']
Availability,"Happy to compare notes! For benchmarking accuracy I'm mostly using data from SEQC. There are four reference samples, each sequenced quite deeply at several different labs. I took 20 lanes from BGI, which is about 100 million reads, which I compare it to TaqMan (~800 genes), PrimePCR on (~18000 genes), and ERCC spike-ins. . On top of that, to get more directly at isoform-level accuracy, I'm simulating data using rlsim, which I've found to be the least awful RNA-Seq simulator. Unlike most simulators, it models some technical effects/bias. I think it underestimates these, but still a lot better than most that assume perfect uniform random sampling, etc. I also have a set of benchmarks designed to get at the question of consistency or stability of estimates, which is one of the main thrusts of the paper I'm working on. The other aspect I've been fretting about a lot the last month has been just what metric to use. You should check out this paper if you haven't seen it, which is pretty eye-opening as to the problems with using correlation on compositional gene expression data. > Lovell, D., Pawlowsky-Glahn, V., Egozcue, J. J., Marguerat, S., & Bähler, J. (2015). Proportionality: a valid alternative to correlation for relative data. PLoS Computational Biology, 11(3), e1004075. http://doi.org/10.1371/journal.pcbi.1004075. Those problems aren't unique to correlation. E.g. the ""median relative difference"" approach taken by the Kallisto paper is very much affected by this, I think even more so than correlation. The method I've adopted is to use the ""proportionality correlation"" they propose on page 9, and add 0.1 TPM to expression values to account for zeros and tiny values. It's not terribly sensitive to the additive constant and gives pretty reliable results in my experience. I have a somewhat horrifying labyrinth of makefiles and julia code that runs all this which I'll probably make public on github in the next few weeks, which may or may not be helpful.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-112291922:1764,reliab,reliable,1764,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-112291922,1,['reliab'],['reliable']
Availability,Has Sierra issue been fixed? Binary release Salmon-0.8.2_macOS_10.12.tar.gz; still gives malloc error under OSX 10.12.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294840673:96,error,error,96,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294840673,1,['error'],['error']
Availability,"Hello @rob-p ,; 1. For pre-compiled binary, ""salmon index"" complete successfully, but ""salmon quant"" failed to find the read file. (""ls"" command confirms the existence of the read file SRR6269049_2.fastq); ![image](https://user-images.githubusercontent.com/24876498/103170603-66a47600-4880-11eb-9da1-336f96880e4f.png). 2. ; > cmake -DFETCH_BOOST=TRUE -DTBB_INSTALL_DIR=/usr/include -DCMAKE_BUILD_TYPE=Release -DNO_IPO=TRUE -DCMAKE_INSTALL_PREFIX=../stage ..; I add the additional ""-DNO_IPO"" flag, but ""salmon index -t gentrome.fa.gz -d decoys.txt -p 12 -i salmon_index --gencode""(same as **To Reproduce** point 5) still crashed at fixFasta(), fixFastaMain() with segmentation fault. 3.; I had another issue posted yesterday reporting that the Debug mode is unabled to be compiled successfully, and I'm wondering if there's a resolution for the problem. Thank you:)); title: [salmon v1.4.0 -DCMAKE_BUILD_TYPE=Debug produce compile error: -pg and -fomit-frame-pointer are incompatible #608]",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751460320:676,fault,fault,676,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751460320,2,"['error', 'fault']","['error', 'fault']"
Availability,"Hello @rob-p . I tried running your script for converting binary bootstrap samples into a text format. I gave back following error:. Traceback (most recent call last):; File ""./ConvertBootstrapsToTSV.py"", line 98, in <module>; main(args); File ""./ConvertBootstrapsToTSV.py"", line 45, in main; txpNames = nf.read().strip().split('\t'); TypeError: a bytes-like object is required, not 'str'. I processed the samples with salmon version 0.8.2. Do you have any suggestion how I can fix this error? . Thank you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-336746989:125,error,error,125,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-336746989,2,['error'],['error']
Availability,Hello @rob-p . I want to ping your question above.; I'm sitting on a heap of new QuantSeq data and wanted to know about the commands recommended for such data - was this ever resolved?. Cheers!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-545639470:25,ping,ping,25,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-545639470,1,['ping'],['ping']
Availability,"Hello @rob-p . I was using python 3. . Your new script works without producing an error. When I run it, I get a text where the first row are the transcripts and the otherline are bootstrapvalues. Thank you very much for the help!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-336993026:82,error,error,82,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-336993026,1,['error'],['error']
Availability,"Hello Again,. I just ran the command and got the same error message as before. Here is my; command:. ```#!/bin/bash -l; #SBATCH -J male_salmon_map; #SBATCH -t 150:00:00; #SBATCH -p high; #SBATCH --cpus-per-task=24; source ~/.bashrc; source activate salmon; cd /home/seboles/abaloneraw/salmon_quantification/SALMON_MALE/; for i in *.qc.fq.gz; do; salmon quant -i maleredabalone_index --libType IU -1; mgonad-2_S121_L006_R1_001.qc.fq.gz; lightreceptor-1_S114_L006_R1_001.qc.fq.gz; mgonad-1_S120_L006_R1_001.qc.fq.gz; lightreceptor-2_S115_L006_R1_001.qc.fq.gz; mgonad-2_S121_L005_R1_001.qc.fq.gz mgonad-1_S120_L005_R1_001.qc.fq.gz; lightreceptor-2_S115_L005_R1_001.qc.fq.gz; lightreceptor-1_S114_L005_R1_001.qc.fq.gz; mgonad-2_S121_L004_R1_001.qc.fq.gz mgonad-1_S120_L004_R1_001.qc.fq.gz; lightreceptor-2_S115_L004_R1_001.qc.fq.gz; lightreceptor-1_S114_L004_R1_001.qc.fq.gz -2; mgonad-2_S121_L006_R2_001.qc.fq.gz; lightreceptor-1_S114_L006_R2_001.qc.fq.gz; mgonad-1_S120_L006_R2_001.qc.fq.gz; lightreceptor-2_S115_L006_R2_001.qc.fq.gz; mgonad-2_S121_L005_R2_001.qc.fq.gz mgonad-1_S120_L005_R2_001.qc.fq.gz; lightreceptor-2_S115_L005_R2_001.qc.fq.gz; lightreceptor-1_S114_L005_R2_001.qc.fq.gz; mgonad-2_S121_L004_R2_001.qc.fq.gz mgonad-1_S120_L004_R2_001.qc.fq.gz; lightreceptor-2_S115_L004_R2_001.qc.fq.gz; lightreceptor-1_S114_L004_R2_001.qc.fq.gz ${i} -o ${i}_quant --seqBias; --gcBias --validateMappings; done```. And here is my output from salmon.log. [2019-07-30 10:40:14.624] [jointLog] [info] Fragment incompatibility prior; below threshold. Incompatible fragments will be ignored.; [2019-07-30 10:40:14.624] [jointLog] [error] You passed paired-end files to; salmon, but you passed 12 files to --mates1 and 13 files to --mates2. You; must pass the same number of files to both flags. Thank you in advance for any tips you may have for me. Sara. On Tue, Jul 30, 2019 at 10:30 AM Sara Boles <seboles@ucdavis.edu> wrote:. > Hi Avi,; >; > Here is the salmon log from one of my PE libraries. There are",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516521791:54,error,error,54,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516521791,1,['error'],['error']
Availability,"Hello Avi,. Here is my out put log. Thank you in advance for an help you can provide. [2019-07-29 15:58:39.034] [jointLog] [info] Fragment incompatibility prior; below threshold. Incompatible fragments will be ignored.; [2019-07-29 15:58:39.034] [jointLog] [info] Usage of --validateMappings; implies use of minScoreFraction. Since not explicitly specified, it is; being set to 0.65; [2019-07-29 15:58:39.034] [jointLog] [info] Usage of --validateMappings,; without --hardFilter implies use of range factorization.; rangeFactorizationBins is being set to 4; [2019-07-29 15:58:39.034] [jointLog] [info] Usage of --validateMappings; implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-07-29 15:58:39.034] [jointLog] [info] parsing read library format; [2019-07-29 15:58:39.034] [jointLog] [error] Failed to successfully parse; any complete read libraries. Please make sure you provided arguments; properly to -1, -2 (for paired-end libraries) or -r (for single-end; libraries), and that the library format option (-l) *comes before* the read; libraries. Best,. Sara. On Mon, Jul 29, 2019 at 3:25 PM Avi Srivastava <notifications@github.com>; wrote:. > You passed paired-end files; > to salmon, but you passed 12 files to --mates1 and 13 files to --mates2.; > You must pass the same number of files to both flags; >; > Is this true ? Can you share the log ?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/408?email_source=notifications&email_token=AEHDXAH7HQIR4ZVWMTE2KXLQB5U5LA5CNFSM4IGU4ZTKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD3CF3JY#issuecomment-516185511>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AEHDXAG7WI3B7QBMJOSXTATQB5U5LANCNFSM4IGU4ZTA>; > .; >. -- ; Sara E. Boles, MS; PhD Candidate | Whitehead Lab; Pharmacology and Toxicology Graduate Group; Department of Environmental Toxicology; Univer",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516194201:816,error,error,816,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516194201,1,['error'],['error']
Availability,"Hello again @rob-p . I was calling using the wrong code for quantification and calling sailfish .; The code that I just sent you is included in the tutorial and is saved as shell script . `quant_tut_samples.sh`. However this doesn't match with the code described immediately below in the tutorial. ; >#!/bin/bash; >for fn in data/DRR0161{25..40};; > do; > samp=`basename ${fn}`; > echo ""Processing sample ${samp}""; > salmon quant -i athal_index -l A \; > -1 ${fn}/${samp}_1.fastq.gz \; > -2 ${fn}/${samp}_2.fastq.gz \; > -p 8 --validateMappings -o quants/${samp}_quant; >done. This is something that should be corrected in the tutorial. Thank you so much. I apologize.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614289282:381,echo,echo,381,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614289282,1,['echo'],['echo']
Availability,"Hello! I did some work with the oxford nanopore error model last summer. There's a blog post about the ONT long read quantification here: https://combine-lab.github.io/salmon-tutorials/2021/ont-long-read-quantification/ . In terms of length correction, the --ont flag basically turns off length correction (since it doesn't really apply to long reads). The error model that the current version of salmon uses for the --ont flag (found in src/ONTAlignmentModel.cpp) basically bins reads by length (into 4 bins by default, I believe). Then for each bin it learns a binomial/geometric distribution for the number of errors (mismatches or indels) in the alignment of the reads in the bin, as well as distributions for the number of bases softclipped at the beginning and end of the read. It then uses these models to penalize reads that have an amount of errors/softclips that is very different from the center of the learned distribution, only if the number of errors/softclips is larger than what we expect for that bin (since a smaller than expected number of errors in the alignment is generally a good, not a bad sign for how likely the read is to map to this transcript). I'm not the original author/creator of this model, so I don't have all the details on specifics of how it works/the design decisions that went into it, but let me know if you have any other questions I can answer!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/924#issuecomment-2148242254:48,error,error,48,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/924#issuecomment-2148242254,12,['error'],"['error', 'errors']"
Availability,"Hello,. I've actually been thinking of a different method that would require very stringent mapping. By providing transcripts of only exon 1 & 2, exon 2 & 3, and exon 1 & 3 I could get a better idea of the number of reads that skip exon 2 all together. Also, by averaging the read counts that map to the junctions of exon 1 & 2 and exon 2 & 3, I can help eliminate polyA tail bias that is heavily positioned towards exon 1 and would also allow me to get a more accurate prediction of the two gene versions since 1 read mapped to exon 1 & 2 and 1 read mapped to exon 2 & 3 would essentially tell me twice that the gene is there while a read mapped to exon 1 & 3 would only tell me once that the gene is there. However, doing so would force me to bring ```AuxSampleNumber``` down to very low numbers such as 10 - 100 as using stringent coverage parameters drastically reduces my reads mapped. . I do wonder though how these low AUX numbers might affect your model development and algorithm. Any input into the aspect of low AUX numbers?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/401#issuecomment-512905804:773,down,down,773,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/401#issuecomment-512905804,1,['down'],['down']
Availability,"Hello,; I found there may be an error in the example code that posted by @uros-sipetic. I believe from my calculation, the correct equation for converting between FPKM and TPM should be: ; `FPKMi = 10^3 * TPMi / (sum_to_i(TPMi * effective_lengthi))`. Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/566#issuecomment-865076744:32,error,error,32,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/566#issuecomment-865076744,1,['error'],['error']
Availability,"Hello,; Thank you for your guidance on this question. However, I encountered the same error despite using the latest versions of Trinityrnaseq and salmon. I ran Trinity version 2.15.1 to generate Fasta files. I attempted to use Salmon version 1.10.1 for indexing, but I encountered this exception. Upon checking the Docker link provided in the comment, I found that the salmon version listed is 1.5.0. So, I tried using Salmon 1.5.0 and encountered the same error. Could you please advise me on how to resolve this issue? Thank you. ```; $./trinityrnaseq-v2.15.1/Trinity --seqType fq --max_memory 6 --samples_file sample.txt --min_kmer_cov 2 --no_parallel_norm_stats --output trinity_test_0210_1019 --CPU 6. ... $ ~/tools/salmon-latest_linux_x86_64/bin/salmon index --index quasi --type quasi --transcripts ~/first_try_Gall/trinity_test_0210_1019.Trinity.fasta ; Version Info: This is the most recent version of salmon.; Exception : [Error: RapMap-based indexing is not supported in this version of salmon.]; /home/ubuntu/tools/salmon-latest_linux_x86_64/bin/salmon index was invoked improperly.; For usage information, try /home/ubuntu/tools/salmon-latest_linux_x86_64/bin/salmon index --help; Exiting.; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/832#issuecomment-1990328443:86,error,error,86,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/832#issuecomment-1990328443,5,"['Error', 'error']","['Error', 'error']"
Availability,"Here is the part of the log I've left out previously; <img width=""978"" alt=""Screen Shot 2019-11-03 at 8 41 57 PM"" src=""https://user-images.githubusercontent.com/17168657/68090974-860d6200-fe7a-11e9-972f-d529453bbea8.png"">. I've downloaded Linux executables on 11/02/ from the following link: https://github.com/COMBINE-lab/salmon/releases/download/v1.0.0/salmon-1.0.0_linux_x86_64.tar.gz. Decoys and gentrome files seem to be ok since they are working properly with bioconda version of salmon. I am sharing a Dockerfile in case you would like to reproduce the entire environment I was using. [Dockerfile](https://github.com/COMBINE-lab/salmon/files/3802055/Dockerfile)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-549171596:228,down,downloaded,228,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-549171596,2,['down'],"['download', 'downloaded']"
Availability,"Here's what I got; For a single sample, analyzed both with RSEM (with STAR aligner) and with Salmon in SA mode with collapsed duplicates, on GRCh38 FASTA and ensembl91 GTF, here are the TPM values for some ~30 transcripts that Salmon collapsed: ; <img width=""642"" alt=""Screen Shot 2020-05-14 at 11 01 51 PM"" src=""https://user-images.githubusercontent.com/16819349/81985764-f4578c00-9636-11ea-9ba9-72360d78418d.png"">. Note: RSEM reported the same TPM values for all duplicate transcripts that Salmon collapsed. ; So in the table above, there's Salmons TPM and RSEM TPMs for that single transcript, and the total TPM when adding all collapsed transcripts. Now, I know that different approaches are used here (alignment with STAR + EM in RSEM, versus Selective Alignment in Salmon), and that some TPM values will be different.; But from based on some of the 'similar' values from this table, I could gather that the situation is just as you described @rob-p, i.e. where the Salmon_TPM and the RSEM_TPM_total columns are in similar values, I assume that these are the transcripts for which both RSEM and Salmon reported similar expressions. EDIT: Added the error column to the attached image",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/255#issuecomment-628881630:1153,error,error,1153,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/255#issuecomment-628881630,1,['error'],['error']
Availability,"Hey @BisonKok , just as a sanity can you check if you get any error/warning when you `samtools view ` the bam file ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/387#issuecomment-505965479:62,error,error,62,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/387#issuecomment-505965479,1,['error'],['error']
Availability,"Hey @Gaura and @rob-p - just as a point of comparison, I ran zUMIs on the same exact files. With nominal filtering I get 12,942 cells recovered, of which 10,386 (80%) were also contained in the published matrix (exact sequence matches). . Happy to provide any of those files if that's useful. But it does seem to argue something is funky when it comes to alevin's detection of these barcodes, right?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-987136859:134,recover,recovered,134,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-987136859,1,['recover'],['recovered']
Availability,"Hey @Ni-Ar ,; I can confirm that I can replicate the issue on my end. While we are working on this there are a couple of workarounds.; (1) if RAM is not a limitation you can basically index the full genome as decoy i.e. with running the script.; (2) if you are using standard model organism, the decoy salmon index can also be downloaded from refgenie website.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1003091513:327,down,downloaded,327,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1003091513,1,['down'],['downloaded']
Availability,"Hey @antonkulaga ,; Sorry for the late reply. Somehow, this one got lost somewhere in the mids of all the other issues.; Thanks for the heads-up and a very nice suggestion. ; I think they have included Alevin in the form of salmon [here](https://www.scrna-tools.org/tools.html#salmon). But we do see your point it could be confusing because of the names, we'll see what can be done in terms of including Alevin too. I am closing this issue for now and would update here if any changes happen down the line.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/283#issuecomment-433157082:492,down,down,492,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/283#issuecomment-433157082,1,['down'],['down']
Availability,"Hey @jeremymsimon! I checked the protocol and the [pipeline code](https://github.com/yjzhang/split-seq-pipeline/blob/master/split_seq/tools.py). The protocol you described is v1 and the Parsebio is v2. I have implemented v2 in salmon and would be testing it this week. v1 can be similarly implemented. I read the paper and other available resources but I am not clear about the random hexamer usage and it's effects on the barcode. Can you please explain what you meant by BC1s being paired and what's the use of random hexamer, please? Thanks.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-936331597:329,avail,available,329,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-936331597,2,['avail'],['available']
Availability,"Hey @k3yavi . The data is from a public dataset hosted on the 10x genomics website:. [200 Sorted Cells from Human Glioblastoma Multiforme, 3’ LT v3.1](https://support.10xgenomics.com/single-cell-gene-expression/datasets/6.0.0/Brain_Tumor_3p_LT). I downloaded the data and subsampled the FASTQ files to 1,000 reads. It was an arbitary choice, I just needed a small dataset to test a pipeline I was building.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647#issuecomment-821522673:248,down,downloaded,248,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647#issuecomment-821522673,1,['down'],['downloaded']
Availability,"Hey @k3yavi,. Most of the samples ran fine with --expectCells 3000, one did not, it gave an error:; [2021-02-10 18:43:12.296] [alevinLog] [info] Done barcode density calculation.; [2021-02-10 18:43:12.296] [alevinLog] [info] # Barcodes Used: [32m135909784[0m / [31m135909784[0m.; [2021-02-10 18:43:13.337] [alevinLog] [error] Can't find right Boundary.; Please Report this issue on github. Rerunning it with --forceCells 3000 ""worked"" (output was generated). I'm attaching the alevinQC report (renamed to .txt); [MB15_alevinReport.html.txt](https://github.com/COMBINE-lab/salmon/files/5961312/MB15_alevinReport.html.txt); To see if you have any thoughts on what may be going on with this sample.; ; EDIT: Nevermind! Turns out that sample had way more cells than the others in the original study, weird.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/625#issuecomment-777002541:92,error,error,92,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/625#issuecomment-777002541,2,['error'],['error']
Availability,"Hey @rob-p and @Gaura - thanks for this! My understanding is that your `splitp` will replace my slow perl script, which is great, and then alevin-fry should work pretty much like any other run, yes? If so, can you comment on the low alignment rate and other oddities I encountered running regular alevin following editing of my R2 FASTQ in this way (documented above), and whether there's something inherently different about alevin-fry that should address those issues? Because I currently detect only a tiny fraction of the cells expected. . I'm more than happy/eager to give splitp+alevin-fry a try, but I suspect there's some secondary issue at hand that we'll need to address downstream",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-978168267:681,down,downstream,681,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-978168267,1,['down'],['downstream']
Availability,"Hey @rob-p,. OK, I think the changes should pass CI now in theory. Basically I patched the `CMakeLists.txt` file to only download and build those libraries which are not found on the system. If they aren't found, then you have the same behaviour as before. Also, you can now activate the use of shared libraries by setting `USE_SHARED_LIBS=1` on cmake. This should work quite nicely for a Homebrew formula.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472593229:121,down,download,121,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472593229,1,['down'],['download']
Availability,"Hey Avi,. I have ran alevin with addition of `--expectCells 8000` flag, the new output of cells detected: ; `3655, 5604, 4374` w/ `13%, 30%, 15.7%` reads thrown away. It is better than the first trial `1192, 4947, 3414` but nevertheless fewer than the cell ranger output `5150, 7618, 6404`. . Wonder ; 1. if I should set higher `--expectCells`, but which would result in more unconfident calls?; 2. From 1, if I just try to get more cells subjectively, will the expression matrix (and further analysis) be inaccurate/affected? (given downstream filtering of cells of low quality based on # of feature detected etc. would be performed anyway. ) ; 3. what could be the reason that these two algorithms output such different total cell numbers (precision in calling?) . Thanks!; Chelsea",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510603746:534,down,downstream,534,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510603746,1,['down'],['downstream']
Availability,"Hey Matt,. First, thanks for the detailed analysis! Second, phewww --- I looked for a while in the indexer and didn't see anything that could have caused lost transcripts, so I'm glad that's not the case. It sounds like you had to go down a bit of a rabbit hole to figure this out. Anyway, I'll take a look at where Salmon might be producing an EOF marker on stderr anyway (I'd like to avoid that behavior if I'm indeed doing that). Thanks again for reporting back on this! I'll close the issue for now since it seems resolved.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/132#issuecomment-303739707:234,down,down,234,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/132#issuecomment-303739707,1,['down'],['down']
Availability,"Hey Rob,. I did manage to test v1.3 this evening. Ran much faster. The same sample that took about 6 hours ran in 45mins. Still not great, but I think it might be intrinsic to some of these samples, also I was running it off my laptop and was running Linux off a; flash drive so not an ideal setup. Either way much more reasonable. Do you want me to attach any logs or anything?. Best,. Ryan . Sent from my iPhone. On Jun 16, 2020, at 10:20 AM, Rob Patro <notifications@github.com> wrote:. ﻿. Hi ; @shalercr,; I agree that if each sample runs as quickly as you see here, it's not a big deal to just re-run them all. Note that, while my avoids ~116 times more (eventually-discarded) alignments than did yours, the difference in the number of discarded; fragments (i.e. fragments that had no mapping) is very small — ~7,000, or 0.023% of the fragments. Thus, despite the huge speed-up, I wouldn't expect many differences in the quantifications. However, I couldn't argue against re-quantifying everything; with the new version just for good measure :). When you have a chance, please do let me know if you see this same performance difference using the pre-compiled (linux) binary. here. Of course, once we finalize this release (soon), we will push to bioconda so we will also have OSX binaries available. However, I just want to make sure this fixes things on your end as well before the release.; —; You are receiving this because you were mentioned.; Reply to this email directly, ; view it on GitHub, or ; unsubscribe.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-645119801:1294,avail,available,1294,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-645119801,1,['avail'],['available']
Availability,"Hey Rob, . Sorry for the delay, here is a link to the quants folder if you guys are still interested. Everything worked well, especially with the additional flag. Any idea on the timeline for the bioconda release?. Best, . Ryan . https://www.dropbox.com/sh/rmy4f6brxx5iczo/AACxbyZFxN0XGcP3YRGjGO-pa?dl=0 . On Jun 18, 2020, at 12:21 AM, Ryan, Shaler <shalercr@mcmaster.ca> wrote:. Thanks for the heads up. I gave it a test this evening and wow, it is wicked fast. I’ll send you those quant files tomorrow when I get a chance, but adding that flag and the new version fixed the problem. . Thank you for all your help. . Best,. Ryan . Sent from my iPhone. On Jun 16, 2020, at 11:36 PM, Rob Patro <notifications@github.com> wrote:. ﻿. P.S. ; @shalercr,; I also note that layering --hitFilterPolicy BOTH on top of the new version cuts down the time by another factor of 2 for me; 2163.65user 12.72system 4:21.57elapsed 832%CPU (0avgtext+0avgdata 1221856maxresident)k. and the number of mappings discarded alignments due to score comes down by another factor of ~6X. It might be worth seeing what you get with that option as well.; —; You are receiving this because you were mentioned.; Reply to this email directly, ; view it on GitHub, or ; unsubscribe.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-647273636:830,down,down,830,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-647273636,2,['down'],['down']
Availability,"Hey Rob. It looks like this was an error in the way I was calling `salmon index`. I've wrapped salmon in a python based pipeline where I manage creation of index files using configuration files. To call `salmon index` I was previously iterating on standard error, capturing your err and logging it after reformatting a bit. It looks like what was happening is:. 1. I opened a subprocess and executed salmon; 2. Salmon worked properly; 3. Salmon stopped producing output on stderr (and sent an EOF marker?) and so my script exited; - killing salmon prematurely; - truncating the salmon index (In a way that salmon found perfectly acceptable during `salmon quant`; - frustrating me quite a bit. I fixed this by doing the right thing and blocking for the process to return an exit code:. ```diff; p = Popen(cmd, stderr=PIPE); - for line in p.stderr:; - line = line.decode(); - if line.endswith('\n'):; - logging.info(line.rstrip()); - else:; - logging.info(line); + _, err = p.communicate(); + logging.info(err); ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/132#issuecomment-303738589:35,error,error,35,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/132#issuecomment-303738589,2,['error'],['error']
Availability,"Hey, I'm having the same kind of problem. I aligned my PE reads against the transcriptome using BWA-mem and then sorted them by coordinates (as a regular procedure). I know Salmon assumes the alignments are not sorted, so I shuffled these bam files, and then run `salmon quant`.; Here are the errors I got in a number of trials:. ### Fresh installation of Salmon; ```; conda create --name salmon -c bioconda salmon; conda activate salmon; ```. ### 1. Shuffling a bam file with `samtools collate`; ```; samtools collate \; -@ 40 \; -o SRR3212847.Aligned.Shuffled.bam \; SRR3212847.Aligned.SortedByCoord.bam. salmon quant \; -t mRNA.fasta \; -p 20 \; -l A \; -a SRR3212847.Aligned.Shuffled.bam \; -o SRR3212847.Aligned.Shuffled ; ```. ```; Version Info: This is the most recent version of salmon.; # salmon (alignment-based) v1.4.0; # [ program ] => salmon ; # [ command ] => quant ; # [ targets ] => { mRNA.fasta }; # [ threads ] => { 20 }; # [ libType ] => { A }; # [ alignments ] => { SRR3212847.Aligned.Shuffled.bam }; # [ output ] => { SRR3212847.Aligned.Shuffled }; Logs will be written to SRR3212847.Aligned.Shuffled/logs; [2021-01-08 12:43:44.680] [jointLog] [info] setting maxHashResizeThreads to 20; [2021-01-08 12:43:44.680] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; Library format { type:paired end, relative orientation:inward, strandedness:unstranded }; [2021-01-08 12:43:44.711] [jointLog] [info] numQuantThreads = 14; parseThreads = 6; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""SRR3212847.Aligned.Shuffled.bam"", fasta = ""mRNA.fasta"" . . .done. processed 0 reads in current roundSegmentation fault (core dumped); ```. ### 2. Shuffling a headless bam file with `samtools collate`; (I think I saw something about the bam's header in another thread dealing with this issue); ```; samtools view \; -b \; -@ 40 \; -o SRR3212847.Aligned.SortedByCoord.NoHeader.bam \",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-756727212:293,error,errors,293,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-756727212,1,['error'],['errors']
Availability,"Hey,. So I solved the issue over the weekend. My error was caused by my decoy file having my chromosome names with > in front of them meaning it couldn't find them when creating the index.; `; Instead of for example . > grep ""^>"" <(zcat GRCm38.primary_assembly.genome.fa.gz) | cut -d "" "" -f 1 > decoys.txt. > sed -i -e 's/>//g' decoys.txt'. `; I used the following instead. ; `. > grep ""^>"" <(gunzip -c GRCm38.primary_assembly.genome.fa.gz) | cut -d "" "" -f 1 > decoys.txt. > sed -i.bak -e 's/>//g' decoys.txt. `; I'm guessing this isn't your issue but just in case it helps! I would check your ""gentrome"" file and look if the decoy and names within your gentrome file match up properly. That's how I realized the > was disrupting my analysis!. Hope this helps. . Best Regards,; Adrian",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/644#issuecomment-815273216:49,error,error,49,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/644#issuecomment-815273216,1,['error'],['error']
Availability,"Heya, there are precompiled binaries available which might be easier to install. https://github.com/COMBINE-lab/salmon/releases/download/v0.9.1/Salmon-0.9.1_linux_x86_64.tar.gz is a link to them. Another option would be to use bioconda:. https://bioconda.github.io/. which is awesome if you are just starting out doing RNA-seq, since you won't have to spend time trying to get all of the tools to compile.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/216#issuecomment-383913243:37,avail,available,37,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/216#issuecomment-383913243,2,"['avail', 'down']","['available', 'download']"
Availability,"Hi :). `wget` war already installed (to download the sources in the first place, so this one works). ; After `wget`ing the source files again re-`cmake`-ing them again `make install` did work, not sure what happened there in the first place. Also the tests are passing now. I will try to figure out what is different between the clean docker version and my system setup and will report back as soon as I know more.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404536671:40,down,download,40,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404536671,1,['down'],['download']
Availability,"Hi @Alecrim24,. It looks like the list of r1 files are being interpreted as a single, long, filename. Same with the list of r2 files. Any idea why that's the case? They should be a space-separated list (of course, there *are* a ton of them here, but the error clearly suggests they are being interpreted as a single, long, filename). --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/870#issuecomment-1694754832:254,error,error,254,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/870#issuecomment-1694754832,2,['error'],['error']
Availability,"Hi @BW15061999 , ; Yes, this is a known problem for single-cell data uploaded on NCBI. The idea is to download the BAM files of the data (yours should be [here](https://trace.ncbi.nlm.nih.gov/Traces/sra/?run=SRR8453531) under data access section) and then use tools like [these](https://github.com/10XGenomics/bamtofastq) to generate paired-end FASTQ files from the BAM file before running alevin. The one downloaded directly from NCBI/EBI doesn't has the CB/UMI components of the paired-reads. Hope it helps !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/769#issuecomment-1107843131:102,down,download,102,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/769#issuecomment-1107843131,2,['down'],"['download', 'downloaded']"
Availability,"Hi @Beatzekatze,. Thanks for reporting this, and I'm glad you figured this out. I can take care of closing the issue, and I will add this tbb-related issue to the list of things I've seen people encounter for future reference. Thanks for your persistence in helping track this down!. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404547107:277,down,down,277,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404547107,1,['down'],['down']
Availability,"Hi @Beatzekatze,. The issue with test 1 seems to be from CMake being unable to find the unit test to execute under certain configurations. I'll consider this a bug in the CMake file, and look into fixing it. The failure of tests 2 and 3 is more interesting, as one would definitely not expect this given that the program compiled without error. Does indexing fail only with `--type fmd`, or also with `--type quasi` (or no `--type` as that is the default)? Would it be possible to run the command under gdb and report the stack trace? That would be something like:. ```; $ gdb --args salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; ```. and then, when you encounter the segfault issuing the back-trace `bt` command. This would give insight into where, exactly this is showing up. One issue I've seen before is when the resident installation of Boost is _not_ compiled with `--std=c++11` (or 14 or 17), since this leads to an incompatible ABI between salmon and the Boost library. If that's what's going on, it should be evident from the backtrace. Finally, while I'd want to figure out what's going on with this build from source, it would also be useful to know if you encounter the same behavior when installing via bioconda. Thanks for the detailed report!. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404223014:212,failure,failure,212,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404223014,2,"['error', 'failure']","['error', 'failure']"
Availability,"Hi @BenSamy2020,. Judging from the options available to the indexing command, it seems you're running quite an old version of salmon (before the `-d` flag was even introduced). Specifically, it seems to be a version prior to 1.0 (when the new index was introduced). I'd recommend updating to the latest version of salmon, then you should be able to properly provide the decoys file. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/714#issuecomment-948175672:43,avail,available,43,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/714#issuecomment-948175672,1,['avail'],['available']
Availability,"Hi @Cold7,. Thanks for the report. So, could you provide the full output that you get on the terminal when you run this? Your command line looks fine to me. Since version 1.0.0, `--validateMappings` has become the default behavior and so this flag technically has no effect (it is marked as ""deprecated""). However, the argument parser should _absolutely_ accept it, and it's not clear to me why it might be giving you this error. The full output from the terminal may help to diagnose this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/563#issuecomment-680250718:423,error,error,423,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/563#issuecomment-680250718,2,['error'],['error']
Availability,"Hi @DarwinAwardWinner,. Great error report! Thanks for the details. The `minEQClassWeight` error is actually very interesting (i.e. the fact that it's hitting that code path during the Gibbs sampling). Would you be able to share the data set (or a part of the data set) that reproduces the issue? I'd be happy to take a look and see if I can figure out what's going on.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266893086:30,error,error,30,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266893086,2,['error'],['error']
Availability,"Hi @Davidwei7,. Thank you for the very detailed bug report! So, I have two initial responses / thoughts about your issue. First, you asked if the issue may be related to a memory allocation error wherein the index didn't build successfully. This is quite possible (and the error you see during quantification is consistent with that). The *full* decoy index is substantially larger than the index on just the transcriptome (after all, it is indexing the entire human genome in addition to the transcriptome). One thing you might try to test this hypothesis, other than requesting to build on a node with more RAM, is to compute a hash (e.g. md5 or sha256 sum) on all of the files in the index, and also record their sizes. Then we can build the index on the same version of the files on our end and compare. Second — and perhaps more importantly for your end goal — the main purpose of the decoy-aware index is to improve specificity rather than sensitivity. That is, the decoys are designed to help avoid _spurious_ mapping of reads to an annotated transcript when a better explanation for the read exists elsewhere in the genome. However, the reads that are mapped to decoys are not otherwise used for quantification. Thus, using the decoy aware transcriptome index is unlikely to improve your mapping rate. I agree that your mapping rate does seem rather low. There are a few potential culprits here, and some diagnostics we can look at to see what might be going wrong. First, you can take a look at the file `aux_info/meta_info.json` in the salmon quantification directories to get a few more details about why reads were not mapped. If you share one of those files here I can describe the relevant fields. Also, I have two more rather common things to consider that might affect the mapping rate. One is to add the sequence for the ribosomal RNAs to your transcriptome before indexing and then quantifying. If your mapping rate increases considerably, this is evidence of rather inefficient depl",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/603#issuecomment-744162850:190,error,error,190,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/603#issuecomment-744162850,2,['error'],['error']
Availability,"Hi @DobbyLikesPenguins,. You can download a pre-compiled executable for 1.4.0 [here](https://github.com/COMBINE-lab/salmon/releases/download/v1.4.0/salmon-1.4.0_linux_x86_64.tar.gz). You should be able to just decompress it and run the binary in that folder. Let me know if that works.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/483#issuecomment-774550817:33,down,download,33,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/483#issuecomment-774550817,2,['down'],['download']
Availability,"Hi @EPunzi ,. There are a couple of options. First, I see you're using an older release of Salmon. I strongly suggest grabbing [the latest release](https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2). What you posted here is actually a warning, not an error. What is preventing compilation looks to be a linking error (i.e. your compiler cannot find -lstdc++). If the newest salmon doesn't compile cleanly for the easiest thing to do is to install [through bioconda](https://anaconda.org/bioconda/salmon). Please let me know if either of these are successful, or, if not, what issues you run into. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-396624060:260,error,error,260,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-396624060,2,['error'],['error']
Availability,"Hi @EPunzi,. The trinity-based installation error looks quite cryptic. It suggests what to do to fix it, but it seems like something that shouldn't be happening in the first place. I would be happy to see if I could figure out what's going on with the ""manual"" installation. Could you provide more of the compiler output? What you have included above shows a warning, but I can't see what's causing the actual compiler *error* (what compiler & OS version are you using?). Finally, could you let me know if [this](https://github.com/COMBINE-lab/salmon/files/2099291/salmon-latest_linux_x86_64.tar.gz) pre-compiled linux-x86-64 binary works for you?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398104378:44,error,error,44,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398104378,2,['error'],['error']
Availability,"Hi @FlorianRNA ! As stated in the [usage docs](https://nf-co.re/rnaseq/3.8.1/usage#quantification-options) for the nf-core/rnaseq pipeline:. ""Since v3.0 of the pipeline, featureCounts is no longer used to perform gene/transcript quantification, however it is still used to generate QC metrics based on [biotype](http://www.ensembl.org/info/genome/genebuild/biotypes.html) information available within GFF/GTF genome annotation files. This decision was made primarily because of the limitations of featureCounts to appropriately quantify gene expression data. Please see [Zhao et al., 2015](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0141910#pone-0141910-t001) and [Soneson et al., 2015](https://f1000research.com/articles/4-1521/v1)."". This is a common cause of confusion and I have tried to be as explicit about this in the docs. featureCounts is used to quantify features in the annotation by `gene_biotype` and not the actual gene / transcript features themselves. This may explain why you are seeing these discrepancies. However, I am still a little puzzled how you are able to directly compare the counts generated by featureCounts and Salmon (in either mode) because the core features that are being quantified should be different. Where did you get the plant reference genome from? If it's not from Ensembl then it probably isn't worth running the biotype quantification with featureCounts anyway because the GTF annotation files may not contain that information. There are some docs for this [here](https://nf-co.re/rnaseq/3.8.1/usage#prokaryotic-genome-annotations). Hope that helps and if you think we can improve the pipeline in any way please feel free to create an issue on the nf-core/rnaseq repo.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1237865190:384,avail,available,384,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1237865190,1,['avail'],['available']
Availability,"Hi @GWW , thanks for showing interest in alevin.; Is it possible to share one of the `fastq` file where you are observing this behavior, just to replicate and debug the source of error ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395813028:179,error,error,179,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395813028,1,['error'],['error']
Availability,"Hi @GWW ,. Ok, we figured out where the threads are coming from. Deep inside the concurrent hash map we are using, there is a [function that grows the hash map](https://github.com/COMBINE-lab/salmon/blob/master/include/cuckoohash_map.hh#L1558). This function uses a function called [`parallel_exec`](https://github.com/COMBINE-lab/salmon/blob/master/include/cuckoohash_map.hh#L1751) to move the items from the old table to the new one. Here, they greedily use as many threads as available for that process. We can't see this behavior on our end by monitoring top/htop, because the hash table doubling happens so fast it's below the monitoring resolution. There are a couple ways to address this, one of which is hacking inside the hashmap library to modify this behavior. However, it would be nice if there was a way to do this without modifying the code (e.g. by limiting the number of threads the process was allowed to spawn concurrently from outside of the process itself). We are looking to see if this is doable using e.g. cgroups or some such.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395890018:479,avail,available,479,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395890018,1,['avail'],['available']
Availability,"Hi @Hoohm , ; Thanks for the quick reply and the explanation . I personally am not very well versed in the working of `SCRBseq`. But, as you explained, knowing a set of whitelist CB beforehand is always a plus for the downstream working of the pipeline. Currently, Alevin merge all the observed CB which are 1-edit distance from a known whitelist CB towards the whitelist. The underlying assumption being that the sequencing error (although with low probability) can change CB sequence and we can correct for that. I wonder, is this right to do for your experiment ?. re: >Is there an option for max distance allowed between BC or UMI?; Sorry, but I don't completely understand this question. When you say distance allowed between CB and UMI, do you mean there is a sequence between CB and UMI ( like in in-drop seq)? If that's the case then we might have to tweak a bit in alevin command line flags again. But I suspect what you meant by above statement is -- max distance allowed between CB among themselves. If that's the question then unfortunately we currently allow correcting for only 1-edit distance for both CB and UMI. But if you think more correction is needed by your protocol then we can put this on the feature request list and discuss about working on this on the next release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/247#issuecomment-402543751:218,down,downstream,218,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/247#issuecomment-402543751,2,"['down', 'error']","['downstream', 'error']"
Availability,"Hi @Jensen416,. Thank you for reporting this. Certain versions of the GCC compiler are not capable of performing full program link time optimization (`lto`) for this codebase. This is a known issue — and there are other programs that exhibit this same behavior. This is something that GCC must fix upstream — an internal compiler error is something that really shouldn't happen. Luckily, the solution is simple; just don't use whole program inter procedural optimization. Try using this `cmake` invocation (after clearing out your build directory):. ```; cmake -DNO_IPO=TRUE -DFETCH_BOOST=TRUE -DTBB_INSTALL_DIR= ~/anaconda3/pkgs/tbb-2021.5.0-hd09550d_0/ -DCMAKE_INSTALL_PREFIX= ~/salmon/; ```. The `-DNO_IPO` tells `cmake` to invoke the compiler without inter procedural optimization (i.e. `lto`). Let me know if this works for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/778#issuecomment-1134776478:330,error,error,330,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/778#issuecomment-1134776478,2,['error'],['error']
Availability,"Hi @Kisekya,. So BWA-MEM and BWA-MEM2 are somewhat of a problem to begin with because they perform local alignment, which isn't really ideal for aligning RNA-seq reads to the transcriptome. If you really wish to use an aligner, we've had good experiences with Bowtie2 (when used in the appropriate end-to-end alignment mode) and with STAR (using the alignments projected to the transcriptome with `--quantMode TranscriptomeSAM` flag to output the alignments in transcriptomic coordinates as required by salmon). Apart from the local alignment issue, sorting the BAM file is _absolutely_ a problem for salmon, and is likely why you get the strange library type. When run in alignment mode, just like RSEM, salmon requires the alignments for the the mates of a read pair to appear subsequently in the file, and for all alignments for a given read to appear contiguously in the file. This allows parsing the reads without having to require potentially unbounded memory (holding the record for one end of a fragment in memory while waiting for the record for the other end). In fact, given that you've sorted the alignments here, I'm surprised you're not getting the ""suspicious pair"" warnings in your logs. The ISR library with 40% mapping is likely a more reliable number. The obvious question here is why might the mapping rate be this low? There are a few reasons you might see something like this. One, for example, is poor ribosomal depletion, paired with not having all of the rRNA sequences in your index. In this case, you have many fewer reads coming from the rest of the transcriptome and you get depleted mapping rates like this. . Could you say a bit more about the experimental setup? Is this in a well-annotated organism like human / mouse etc.? Is this a polyA selection or ribosomal depletion prep? Anything else that might be relevant to sample quality?. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/676#issuecomment-873519594:1254,reliab,reliable,1254,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/676#issuecomment-873519594,1,['reliab'],['reliable']
Availability,"Hi @Klud112,. The command itself looks OK. However, given the formatting, I wonder if the line breaks are intentional. The error you get is what I might imagine if the command is actually spread over multiple lines and therefore not properly parsed. When there is a new line in your command above, is that just for formatting, or actually present in the command you issue on the command line? If the latter, you need to escape it with `\` i.e. ```. salmon quant -t References/Ensembl/Homo_sapiens.GRCh37.cdna.all.fa \; -l A \; -a bam_files/RNA_007_7669.Aligned.out.sort.com.bam \; -o salmon_quant_trial; ```. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/764#issuecomment-1073155343:123,error,error,123,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/764#issuecomment-1073155343,1,['error'],['error']
Availability,"Hi @Liripo,. Thanks for reporting this issue. I'm also pinging @Gaura and @jeremymsimon here as our resident split-seq experts. One other note though, is that we'd generally recommend using `alevin-fry`. Here, it seems you're utilizing a _splici_ index but then using `alevin` rather than `alevin-fry` for quantification (given there is no `--sketch` or `--rad` flag in your command line invocation). Dealing with the structure of the _splici_ index is an alevin-fry specific capability. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/774#issuecomment-1126077334:55,ping,pinging,55,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/774#issuecomment-1126077334,1,['ping'],['pinging']
Availability,"Hi @Munfred ,. Apologies for the delayed response.; Thanks for your very important question. We are aware of the problem and are extensively working on improving the downstream processing of the alevin output. Unfortunately, in current form there is no other direct way of loading alevin output matrix. We are thinking of alternative options like using `loompy` but it's a work in progress. We will definitely inform here once we have a simpler working version.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/354#issuecomment-490091075:166,down,downstream,166,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/354#issuecomment-490091075,2,['down'],['downstream']
Availability,"Hi @Munfred ,; Is it 10x single-cell data ? Also in 10x is it using v2 Chemistry?; The way you are running alevin is specifically for 10x v2 data. If it's v1 you can find how to use alevin in v1 mode [here](https://combine-lab.github.io/alevin-tutorial/2018/running-alevin/). ; If it's V2 and you still get this error, then it means either the `Fastq` were not made properly or the reads / CB+UMI pair has to be filtered out. Currently `Alevin` fails if it observe a `Fastq` sequence of length less than 26 (16 CB + 10 UMI), if you think your dataset is from a real sample and follows the 10x `mkfastq` procedure, then we can work on handling these cases internally in Alevin, or another workaround would be to just filter out these set of reads from the Fastq using some external script.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/237#issuecomment-397824948:312,error,error,312,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/237#issuecomment-397824948,1,['error'],['error']
Availability,"Hi @Ni-Ar ,. Thanks for reporting this. I checked the salmon index from the files [here](http://refgenomes.databio.org/v3/assets/archive/0f10d83b1050c08dd53189986f60970b92a315aa7a16a6f1/salmon_partial_sa_index?tag=default) build on gencode reference but with k 28 salmon complaints with the following error:. > [2021-12-29 17:04:14.809] [puff::index::jointLog] [info] ntHll estimated 144189454 distinct k-mers, setting filter size to 2^32; > PARSE ERROR: Argument: -k (--kvalue); > Value '28' does not meet constraint: value of K must be odd. Is it possible to double check the salmon version and the files which you are using are with the right path ? Because salmon should definitely not be able to go through the process of indexing with k 28. If the error persists can you please share the files so that we can double check them on our end ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1002804831:301,error,error,301,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1002804831,3,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"Hi @Ni-Ar,. We're happy to look into this. I'm pinging @k3yavi here to take a look as well. In the meantime, I'm actually surprised indexing worked when you passed `-k 28`. In general, the code should stop and refuse if k is not odd, since we need a k-mer to be odd to be able to distinguish between a k-mer and its reverse complement.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1002286946:47,ping,pinging,47,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1002286946,1,['ping'],['pinging']
Availability,"Hi @OnlyHigh,. Indeed, the _default_ behavior of salmon is to de-duplicate transcripts (to avoid that behavior and allow salmon to index duplicate transcripts, you need to pass the `--keepDuplicates` flag to the indexer). When it does this, it will log the duplicate transcripts in the index. If you look in the directory containing the salmon index, you will find a file called `duplicate_clusters.tsv`. This is a 2 column TSV file with a row for each transcript that was collapsed during indexing. The first column says which retained transcript was identical to the collapsed transcript. We do not write down the specific sequence of these transcripts, but with the original fasta file on which the index was built, you can easily extract this. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/299#issuecomment-428612513:607,down,down,607,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/299#issuecomment-428612513,1,['down'],['down']
Availability,"Hi @PeteHaitch ,; Thanks for your interest in *Alevin*.; Although in current Alevin we have concentrated mainly on learning more about Droplet based 3'-tagged single cell protocols, especially 10x; we are very much interested in extending it towards other protocols like CEL-seq.; However, there are couple of challenges/difference which should be considered before incorporating it into the Alevin pipeline. Currently Alevin relies on the fact that the droplet based protocols use PCR amplification of the library and the UMI deduplication phase of Alevin assumes an exponential model, I am not sure how true is this with CEL-seq? Another issue is that CEL-seq is a Fluidigm based system while the current application for Alevin is for microfluidics based. In general we have observed that the 10x cell isolation step is pretty robust in reporting the Cellular Barcodes(CB) and although we have a probabilisitic model to handle the CB based uncertainty but the ambiguous case like that are very less frequent, (although not true for Drop-Seq). Having said that, we might have to do some analysis to actually figure out the right model for Barcode correction in Fluidigm based system. Also, please do let us know of your experience in using the solution proposed in #247 . Looking forward to hearing back from you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-414162302:829,robust,robust,829,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-414162302,2,['robust'],['robust']
Availability,"Hi @RK489,. It seems it cannot find the library it wants. The easiest solution is to install salmon on OS X [using bioconda](https://anaconda.org/bioconda/salmon). Otherwise, you can also try to explicitly make sure that path is being searched via e.g.:. `DYLD_FALLBACK_LIBRARY_PATH=/Users/rishika/Downloads/Salmon-0.8.2_macOX_10.12/lib ~/Downloads/Salmon-0.8.2_macOX_10.12/bin/salmon -h`. Please let me know if either of these solutions works for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/172#issuecomment-343558684:298,Down,Downloads,298,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/172#issuecomment-343558684,2,['Down'],['Downloads']
Availability,"Hi @Rhinogradentia,. This error occurs when there is a binary mismatch between the library used to compile salmon versus that used to run it. Specifically, this occurs when the boost library is _not_ compiled with a modern ABI (Application Binary Interface) — when boost was not compiled in a way compatible with C++11/14/17/20. Are you using the version installed via bioconda, or the pre-compiled binary from github, or have you compiled this yourself? You can [use the `LD_LIBRARY_PATH`](https://stackoverflow.com/questions/13428910/how-to-set-the-environmental-variable-ld-library-path-in-linux) to set things so that the appropriate version of the library is discovered first. You want the version of boost that is found first (the one appearing earliest in the `LD_LIBRARY_PATH`) to be matched to the one with which salmon was compiled.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-696812977:26,error,error,26,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-696812977,1,['error'],['error']
Availability,"Hi @RoebideBruijn , ; if the build directory is empty and inside the salmon folder, can you check if the run ; `cmake -DFETCH_BOOST=TRUE ..` gives you error or not. . NB: make sure `..` is at the end",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449067149:151,error,error,151,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449067149,1,['error'],['error']
Availability,"Hi @RoebideBruijn,. It looks as though you downloaded the file that contains the pre-compiled release (https://github.com/COMBINE-lab/salmon/releases/download/v0.12.0/salmon-0.12.0_linux_x86_64.tar.gz), rather than the source code (https://github.com/COMBINE-lab/salmon/archive/v0.12.0.tar.gz). In that case, you need not (and can't) compile the already compiled binary. There is an executable named `salmon` in the `bin` subdirectory that you should be able to run directly (assuming you are in Linux).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449718276:43,down,downloaded,43,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449718276,4,['down'],"['download', 'downloaded']"
Availability,"Hi @SSaleem94,. As the message suggests, your command is missing the required `--output` argument. Of course, it seems your command includes `-o`. The rest of the errors suggest that the command line is not being properly parsed. It looks like the part after the first line break is not being interpreted as a continuation of the same line. I think this is because the line extension character in the shell is not `/`, but is `\`. Maybe try the following:; ; ```; F=$(cat file_names.txt); for i in ${F}; do; F1=../processed_fastq/${i}_R1_001_val_1.fastq.gz; F2=../processed_fastq/${i}_R2_001_val_2.fastq.gz; echo ""performing salmon quant on ${i}""; salmon quant -i gencode_v43_index -l A -1 ${F1} -2 ${F2} -p 64 \; --validateMappings --writeUnmappedNames -o ${i}; echo ""finish quantifying ${i}""; done; ```. **Also**, as is suggested by the `salmon` message itself, you may want to consider upgrading to the latest version of `salmon`. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/854#issuecomment-1599169394:163,error,errors,163,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/854#issuecomment-1599169394,3,"['echo', 'error']","['echo', 'errors']"
Availability,"Hi @SeBaBInf,. Thanks for reporting this. I'm pinging @k3yavi for his thoughts here. Two quick thoughts though -- the first is that the abstract for this paper mentions 5' tagged end sequencing, thus it might be necessary to swap the reads so that the biological and technical reads are in the expected order. Second, it's likely also worth seeing if and how the data look different if you process with alevin-fry rather than alevin. I'll let @k3yavi provide more detailed guidance here. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/763#issuecomment-1073004001:46,ping,pinging,46,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/763#issuecomment-1073004001,2,['ping'],['pinging']
Availability,"Hi @ShenTTT,. First, thank you for the detailed analysis (and for doing the work of looking up this issue in past posts). If the (trimmed) reads are of high quality and there aren't signs of contamination, my initial hunch would be that there are a considerable number of reads coming from outside of the annotated transcriptome (that is, I would suspect `2` to be the most likely culprit here). I don't think this is because of DNA `contamination` necessarily, but rather because of novel transcripts that don't appear in your annotation. Obviously, salmon can only quantify what it knows about in terms of annotated transcripts. If you are concerned about these mapping rates, one thing you might try is to do transcript assembly in these samples (using e.g. scallop or StringTie2) and then re-quantify using salmon under the expanded annotation. Also, while you are losing ~5M reads to low mapping scores (suggesting they are not a good match for the underlying annotated transcripts), this doesn't seem to be what is driving your overall mapping rate (i.e. this is only ~15% of fragments, so the rest of the difference between 85% and 56% comes from reads that don't fall into this category). Finally, while you may be able to ""recover"" more reads by lowering the mapping threshold `--minScoreFraction` from its default value of 0.65, that default is actually pretty liberal (especially for trimmed reads). So this would be letting in quite low-quality alignments. Note that, if you have unannotated isoforms that share sequence (exons) with annotated isoforms, this could partly describe what you are seeing with some of these reads, where part of the read aligns but part does not (because it comes from an unannotated splice form).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/533#issuecomment-638929976:1232,recover,recover,1232,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/533#issuecomment-638929976,1,['recover'],['recover']
Availability,"Hi @Tima-Ze,. This should not cause any trouble with downstream analysis. The indexing procedure is simply informing you that these transcripts (about which you are being warned) are shorter than the seed length used for alignment. This means that it simply won't be possible for fragments to align to these transcripts, and so they will always have a 0 abundance in the resulting `quant.sf` files. This isn't a problem, as these transcripts are too short to be measured via RNA-seq anyway. The indexing messages just let you know this in advance. You can safely ignore these warnings for your downstream analysis.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751366278:53,down,downstream,53,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751366278,4,['down'],['downstream']
Availability,"Hi @Tima-Ze,. Yes, salmon can be used to quantify these reads, but the results will depend (somewhat) on the `--fldMean` and `--fldSD` flags that are used. It's important to note that this is not a unique characteristic of salmon, and any transcript-level quantification tool using a probabilistic model (e.g. RSEM, eXpress, BitSeq, etc.) have the same requirement. That is, the fragment length distribution should be known so that _effective_ transcript lengths can be estimated, which have an effect on fragment assignment probabilities. If the wrong fragment length distribution is specified, then the _effective_ transcript lengths will be off and this can affect the assignment of some fragments. This is only a requirement with single-end reads, since with paired-end reads the fragment length distribution is learned from the data. Further, the inference procedure is somewhat robust to these choices (small changes in fld mean and sd don't generally lead to drastically different results). If you have access to the BioAnalyzer results for the sequencing run, those can give information about the fragment length distribution (even in a single end experiment). If not, you can proceed with the default values. Even if they don't exactly match the true distribution in the single-end sample, at least the same values will be applied in all samples and so, ideally, most results of misspecification will wash out in subsequent differential analysis. . Finally, it's worth noting that the same restriction holds in both alignment-based and mapping-based modes. This is because in neither mode do single-end fragments provide sufficient information to estimate the fragment length distribution from the data. We only know where one end of a fragment mapped and cannot infer where the other end would be. This is not an alignment versus mapping (versus selective-alignment) issue, but rather is fundamental to having only observed one side of the entire fragment generated during fragmentation and ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-750920243:884,robust,robust,884,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-750920243,2,['robust'],['robust']
Availability,"Hi @alexg9010,. This is absolutely a cryptic error message. I'm *guessing* it may have something to do with the de-serialization of the index. Would you be able to provide the file on which you build the index? I can see if I can reproduce this error locally. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-376005422:45,error,error,45,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-376005422,2,['error'],['error']
Availability,"Hi @alexg9010,. This is great; thanks for providing all of the output details. I just did quantification on your specific reads (and I tried it using the latest Salmon from bioconda on my Mac, so it was different from the environment I used before). Again, I was able to quantify successfully. However, I see that your files contain a core dump which should let me at least find out where the error is popping up in your run. Could you provide system details so I know how I should be analyzing the core file (specifically, is this run on OSX or Linux? Was this a pre-compiled binary or did you compile it? Was it compiled with gcc or clang (and which version)?). Thanks again for your help in trying to reproduce this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-377266261:393,error,error,393,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-377266261,1,['error'],['error']
Availability,"Hi @alexmascension ,. Thanks for raising this.; Quick question thought, the issue header say : ; > Out of Range error for txp to gene Map. But I don't see that error in the log, did you skip copying that ?; Also, I should have raised this in the previous issue too but it should not matter at least in this error case, however, you should use `-lISR` instead of `-lU` with alevin as the reads are expected to come from the reverse strand. It seems a lot of reads `91.1983%` are supposedly getting thrown away, weren't you using the whitelisted CB instead of ""knee"" thresholding ?; If possible, can you share a small set of reads, like these `even some of them fail just when starting the analysis of the cells`, on which I can replicate the issue? it'd help resolve the issue much faster.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386#issuecomment-504952404:112,error,error,112,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386#issuecomment-504952404,3,['error'],['error']
Availability,"Hi @alexvpickering ,. With the latest release we have moved the pipeline failure with `txp2gene` file before parsing the CB .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-498040517:73,failure,failure,73,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-498040517,1,['failure'],['failure']
Availability,"Hi @amaer,. The warning suggests that the gff parser cannot even find a transcript with the given name (in the example you provided `ENST00000619185.1`). Does such a transcript exist? Can you grep for it. The string must match exactly (version number and all). The gff-based parser to do the transcript to gene mapping is quite picky, as gff & gtf files are often quite ill-formed. My top suggestion would be to do transcript -> gene abundance aggregation using [tximport](https://bioconductor.org/packages/release/bioc/html/tximport.html). The other option is to provide Salmon with a TSV mapping the transcripts to genes, as this eliminates all of the parsing problems (at the cost of pawning them off on the user, who must parse the questionable gtf file). However, tximport is the recommended strategy, since it can perform average gene length normalization across multiple samples (rather than just per-sample), which is useful for downstream DE.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/198#issuecomment-365950366:937,down,downstream,937,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/198#issuecomment-365950366,1,['down'],['downstream']
Availability,"Hi @annajbott ,. Thanks for your question.; It's an expected behavior. The idea is to dump some low confidence CB as well for certain kind of downstream processing. You'd see a file `whitelist.txt` as well in the output alevin folder which should contain whitelisted CB names (4340 in your case). You might have to filter those matrix out after loading the full matrix to get cells only passes the whitelisting filter. Please checkout [tximport](https://github.com/mikelove/tximport) to import the matrix in R, it's very efficient to load. In case you need some stats regarding the resource usage check [EDS](https://github.com/COMBINE-lab/EDS).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/428#issuecomment-530430735:142,down,downstream,142,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/428#issuecomment-530430735,1,['down'],['downstream']
Availability,"Hi @antonkulaga,. This is not a particularly useful error message (_sorry for that_), but this is a result of passing both un-paired (`-r`) and paired-end (`-1,-2`) reads to salmon together. This is actually not supported, as the single-end and paired-end models are actually a bit different. I will fix the error checking so that a useful message is printed out if these options are passed in together. Can you let me know if the program runs correctly if you use just the paired-end reads?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/175#issuecomment-346899958:52,error,error,52,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/175#issuecomment-346899958,2,['error'],['error']
Availability,"Hi @astrdhr,. Ok, so the difference between the version you get on the command line, versus the version you get when you actually attempt to run your script to process your data, is certainly a point of concern. In general, the behavior you are seeing during runtime seems like it may be an artifact of not having a compatible index. Is it possible for you to do a ""test run"" outside of the Nextflow script? Since you are getting v1.10.2 locally, and this version should work without segmentation fault, that would at least let us narrow the issue down to different versions of salmon being invoked at different stages of the pipeline. At that point, it may be a Nextflow / nf-core issue, but those folks are *great* and will be able to help in a jiffy!. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1766508995:497,fault,fault,497,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1766508995,2,"['down', 'fault']","['down', 'fault']"
Availability,"Hi @astrdhr,. Thank you for the bug report. I was wondering if you can run . ```; salmon --version; ```. under the invocation that is failing. I bring this up because your output starts with:. ```; Version Info: ### PLEASE UPGRADE SALMON ###; ```. and this should not happen if you are using the most recent version (there was a segfault related bugfix directly related to what you are seeing in v1.10). It's possible that if you are running salmon using some sort of script or job submission system, that the version of salmon that is available in your `PATH` isn't the same as the most recent one you have installed. P.S. I'll also note that v0.14 and v1.10 don't have compatible indices, which can also cause a segfault. You should make sure that the index was generated with the version of salmon with which you are attempting to quantify. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1758110567:536,avail,available,536,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1758110567,1,['avail'],['available']
Availability,"Hi @bioinfo17 ,; If I understand it right you did the following, correct me I am wrong:; (1) Made one reference file. concat(`Genome.fa`,`txptome.fa`); (2) You map reads set say `R` to the above reference and extracted a subset of reads `R1`(both-pair mapped) and `R2` (single-end mapped).; (3)You mapped again `R1`,`R2` to txptome.fa using HISAT and generated bam to filter-out mapping of the reads only mapped to transcriptome? (I am not sure about this part). Either way the error seems to be arising from non-matching flags of the read-pair entries in the `bam` file. Can you try **not** including your `singleton` set in the last-step of filtering, just to confirm if the set `R2` is really the problem?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/140#issuecomment-313545771:478,error,error,478,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/140#issuecomment-313545771,1,['error'],['error']
Availability,"Hi @bioinfo17, can you please elaborate? I am seeing the same error using STAR-aligned BAMs (to transcriptome) sorted with samtools 1.9 (default arguments, which the docs say means they are sorted as follows: 'Sort alignments by leftmost coordinates'). I am going to try sorting the bams by name (samtools argument -n) and re-trying salmon",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/140#issuecomment-452081412:62,error,error,62,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/140#issuecomment-452081412,1,['error'],['error']
Availability,"Hi @bounlu,. Thank you for the detailed report. The mapping rate certainly does seem very low. To answer your specific questions first:; 1) I'm not sure --- let's try tor find out; 2) I don't think so (if they are part of your index, they should be aligned against); 3) If there are many transcripts / targets you expect to be sequenced but which aren't present in this set, that can affect the mapping rate, but not likely to take it down to 6%. Here are the things I'd investigate --- roughly in order: . 1) In addition to the fraction of reads STAR mapped (which you report above), what fraction of the reads are assigned to features by featureCounts? In some cases, when there is a failure of rRNA depletion of polyA selection, you can end up with an experiment where most of the sequenced RNA comes from rRNA not present in the reference transcriptome. In this case, STAR will be able to align the reads to the genome, but you won't see these reads mapping to annotated features (and you also won't see them showing up in your transcript level quantifications). So, it may be worth to take a look at the count of reads assigned to the feature set of genes by featureCounts. 2) Above, it looks like a considerable number of fragments were discarded due to no alignment reaching the required alignment score (`11,448,458` fragments discarded because of this). Have you tried to adapter / quality trim the data? Does this have any effect on the mapping rate?. 3) If the above don't reveal any clues, I'd be happy to try to take a look at the data if you can share it. I'd be quite surprised if STAR is aligning a lot of reads *to transcriptome features* that are being missed by salmon. Nonetheless, if you pass the proper flags to STAR (including `--quantMode TranscriptomeSAM`), then you can use the SAM/BAM file generated by STAR to perform quantification with salmon (i.e. use STAR's alignments to do _transcript-level_ quantification). I'd be happy to help dig further on any of these, so pleas",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/661#issuecomment-846251054:435,down,down,435,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/661#issuecomment-846251054,2,"['down', 'failure']","['down', 'failure']"
Availability,"Hi @bsipos,. This is caused primarily by salmon's desire to apply an error model (by default) to the CIGAR strings. For secondary alignments, as you note, minmap2 doesn't write the read string, and so when salmon is trying to score the alignments under the error model, it can't find the relevant characters in the read. In general, it's not clear to me if one would actually want to apply the error model (designed primarily for short reads) when quantifying long reads (this is something we are currently testing in the lab). For the time being, I'd probably recommend disabling the error model when quantifying alignments from long reads (`--noErrorModel`). In that case, the errors should hopefully go away. Please let me know, and we'll be sure to keep you updated on best practices for long reads as we figure things out.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-420295665:69,error,error,69,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-420295665,10,['error'],"['error', 'errors']"
Availability,"Hi @callumparr,. Thank you for the detailed report. I think this is primarily an error in documentation. The `gencode` flag is intended to be used only with ""mapping-based"" mode and when creating the index. It ensures that the index (and hence the resulting quantifications) contain the shortened names for gencode transcripts. In alignment-based mode, the behavior of the flag would have to be slightly different. It would have to re-normalize not only the names of the reference sequences in the fasta file, but it would also have to re-normalize the names in the BAM header so that they match. Specifically, the requirement is that the names of the sequences in the input fasta file are a 1-1 match with the names in the BAM header so that transcripts can be matched up properly with their sequences for training and applying the error model. However, if your BAM file already contains the stripped transcript names (i.e. if the BAM file header has the names without everything past the initial `|`), then I believe you can use the following command to have salmon do the same to the fasta file on the fly, so that the names match. ```{bash}; salmon-1.5.1_linux_x86_64/bin/salmon quant --ont -p 4 -t <(awk '{ if ($0 ~ ""^>"") { split($0,a,""|""); print a[1] } else { print $0 } }' Genome_files/gencode.vM24.transcripts.fa) -l U -a Documents/Day2_03_DRS_pass.bam -o Documents/counts/Day2_03_DRS_pass; ```. If the BAM file contains the ""full"" transcript name however, I think the current options are either to let salmon use the full transcript name from the fasta file, or to modify the GTF when running with minimap2, so that the BAM file itself contains the shortened names. Finally, I'd like to mention that the way you _intended_ to use the `--gencode` flag in alignment mode actually makes _a lot_ of sense, and I think it would be a very nice feature. Basically, the idea would be to apply stripping everything after the first `|` from *both* the fasta header and the BAM header, and using the red",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/671#issuecomment-860792782:81,error,error,81,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/671#issuecomment-860792782,2,['error'],['error']
Availability,"Hi @cihanerkut,. First, thanks for reporting this, and going through the trouble to give the `strace` information. Second, salmon won't auto-update anyway. That would be quite slick, but there's not a good and reliable way to do that with natively-compiled programs that I know of. However, the most surprising thing is that you are finding the call to the version check ip to be hanging for any significant amount of time. The timeout should be pretty quick. How long does it hang when you do `salmon index --help`? I'll look into it on our end as well.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-592203836:210,reliab,reliable,210,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-592203836,1,['reliab'],['reliable']
Availability,"Hi @cwarden45 ,. So `--whitelist` flag is not intended to consume the 737k list of CB you are providing, that's why the error. Thanks for the issue in the doc, I updated it. Idea behind the flag is to externally provide a list of high confidence barcodes potentially identified by different tools like Cellranger, and quantify *only* those barcodes. One use case would be to take the output file `barcodes.tsv` of the cellranger and provide it to flag and quantify only those barcodes. Briefly, alevin doesn't use the 737k list of barcodes at all, it identifies barcodes empirically. If you'd like to quantify using the 737k list of barcodes, checkout the next generation of alevin tool, called [alevin-fry](https://github.com/COMBINE-lab/alevin-fry).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-877325227:120,error,error,120,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-877325227,1,['error'],['error']
Availability,"Hi @danphillips28,. Oh ok! Now I see what's going on. We really should be more stringent about catching the issue here. . The problem is that using k > 32 is not permitted in the current implementation. This is because we use a 64-bit machine word to encode k-mers, and you can only fit up to 32 nucleotides in a word. In reality, anything > 31 is not allowed, since the k-mer should be odd so that the orientation can be inferred from the canonical (lexicographically smaller) version. There is nothing fundamentally problematic about using a larger k, it's just that it would require some modifications throughout the codebase we've not yet made. Further, we've not really found cases where having such large k really help. Specifically, the larger k, the fewer errors you need to render a read unmappable (if there is an error in every k-mer, you can't map the read). On the other hand, selective alignment will do a good job of filtering out poor matches where there is insufficient similarity between the read and reference. Thus, we set a default value of k=31. You can go lower (with any odd value), but it's not currently possible to go higher. I hope this clears things up, and thanks for bringing this to our attention. I think the indexer should bail with an error in this case, until (and unless) this feature is supported. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/632#issuecomment-779418628:764,error,errors,764,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/632#issuecomment-779418628,6,['error'],"['error', 'errors']"
Availability,"Hi @davidaknowles,. Assuming that the total size of all cell barcodes doesn't exceed 32 nucleotides, then it should be possible to simply specify them using a custom geometry string. Of course for that to work, we need to know where the 4th barcode is located, so that we can generate the correct custom geometry string to extract it. I'll ping @DongzeHE and @k3yavi here to see if either of them are familiar with this chemistry already. As always, I'd also suggest running this through `alevin-fry` (or using the `simpleaf` wrapper). While we continue to support `alevin`, `alevin-fry` (largely interfaced by `simpleaf`) is where most of our development effort is currently going, and hopefully we can make the user experience there as smooth and easy as possible!. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/874#issuecomment-1732428996:340,ping,ping,340,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/874#issuecomment-1732428996,2,['ping'],['ping']
Availability,"Hi @dbrg77 ,; Thanks for raising the issue and the very interesting future direction.; A quick question regarding the error, can you please check if the length of _all_ the externally given whitelisted CB are of length 16 ?. Extracting the CB/UMI from bcl or generalizing the input format for PE is indeed in our todo list. Specially with the introduction of combinatorial barcoding of single cells, as you said, the information might be in multiple files and has to be extracted right. It's definitely in our priority list and one would hope to support this in future. However, if your use case is different from above then we should definitely chat about that in little more details.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/291#issuecomment-420619144:118,error,error,118,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/291#issuecomment-420619144,1,['error'],['error']
Availability,Hi @dougbarrows --- just wanted to inform you that v0.12.0 has been released and is now also available via bioconda for both linux and osx. The osx segfault issue has been resolved.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/303#issuecomment-444971786:93,avail,available,93,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/303#issuecomment-444971786,1,['avail'],['available']
Availability,"Hi @dritoshi ,. As per your request I've added the support for Quartz-seq2 data in the alevin framework with https://github.com/COMBINE-lab/salmon/commit/f6905b1d1dc6cf6bc4597927ad3be637ba615c9a and should be available with next salmon release. Currently the develop branch has to be compile from source to use the following command line argument.; ![image](https://user-images.githubusercontent.com/8772521/63282768-8df73600-c27d-11e9-832d-f4a1232f17f6.png). Currently I just have on flag i.e. quartzseq2 which assumes 15 length CB and 8 length UMI. Unfortunately adding multiple versioned is gonna be little complicated as I might have to discuss with the alevin team and that might take some time. As you can check through the new code through the commit (linked above) adding just the Rule of new protocol is not enough and we might have to add some helper code with each new protocol which increases the redundancy in the code. Currently we are in the process of figuring out a better way to handle new protocols.; Having said that it should not stop users from using alevin with previous version of quartzseq2, you can use the following command line triplet as `--end 5 --barcodeLength 14 --umiLength 8` along with you other alevin flag and it's gonna behave just like `QuartzSeq2v31` you specified above. If possible, It'd be great if you can share some of the results you get while comparing Quartz-seq2 pipeline with alevin. Hope this helps !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/416#issuecomment-522658541:209,avail,available,209,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/416#issuecomment-522658541,1,['avail'],['available']
Availability,"Hi @ebecht ,; Can you please try running Alevin again with the latest release? We just released [v0.12.0](https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0).; It should be available on bioconda too.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-444755421:181,avail,available,181,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-444755421,1,['avail'],['available']
Availability,Hi @egreen2 --- just wanted to inform you that v0.12.0 has been released and is now also available via bioconda for both linux and osx. The osx segfault issue has been resolved.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-444970458:89,avail,available,89,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-444970458,1,['avail'],['available']
Availability,"Hi @esraagithub,. Thanks for the bug report. Can you tell me how the specific version of salmon you are using was installed (e.g. via source, downloaded from the ""releases page"", or installed via bioconda)? Would it be possible to share the contigs that cause this error?. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/795#issuecomment-1222353941:142,down,downloaded,142,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/795#issuecomment-1222353941,2,"['down', 'error']","['downloaded', 'error']"
Availability,"Hi @evofish,. Unless you have a particular reason to build from source, it is much easier to install salmon via bioconda, or to simply download our pre-compiled executable from the releases page. Nonetheless, your error stems from not having the `curl` program installed, which is used by the build system to automatically fetch all dependencies.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/331#issuecomment-447689917:135,down,download,135,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/331#issuecomment-447689917,4,"['down', 'error']","['download', 'error']"
Availability,"Hi @francicco ,. I've dug further, and in addition to these problems with the input file, there was also a specific bug in salmon's processing of the alignments for the error model. Specifically, it was triggered when an alignment ended with a soft-clip of the reference. I have now fixed this issue in the develop branch, and, after some more testing, will push it to a new release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394859031:169,error,error,169,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394859031,1,['error'],['error']
Availability,"Hi @francicco ,. Thanks for sharing the data. I'm able to re-create the problem and am trying to debug it now. The reason you see this behavior in 0.10.1 but not in 0.8.1 is because in 0.10.1 the error model is enabled by default, while it is not in 0.8.1. If you run the newest salmon with `--noErrorModel` (the default in 0.8.1), your sample runs to completion. However, using the error model helps (which is why I made it the default), so I'm trying to debug what's happening there. I'll keep you posted. One more point worth mentioning. I noticed you are passing a coordinate sorted BAM file. For quantification with salmon, you really should not be passing a coordinate sorted BAM. This is because Salmon expects the alignments to appear in a random order, which is important for how the streaming stochastic variational algorithm learns the auxiliary parameters. Sorting by coordinates biases the models towards the isoforms that appear earliest in the BAM file.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394764686:196,error,error,196,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394764686,4,['error'],['error']
Availability,"Hi @gambardella,. Thank you for the detailed bug report. I agree that, though the issue seems to be arising from the input, a seg fault should not happen in any case. Judging from the place in the log from which this is arising, it seems to be happening during the TwoPaCo construction of the compacted de Bruijn graph. We'll dig into this and see if we can figure out how to handle this in a better way.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/521#issuecomment-627508722:130,fault,fault,130,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/521#issuecomment-627508722,1,['fault'],['fault']
Availability,"Hi @gambardella,. Thank you for the detailed issue report. The warnings are noisy, but not themselves problematic (there's a reasonable discussion to be had if we should make the process less noisy by default, and have the user ask for verbosity to get all of the warnings etc.). However, the last line is an error, and this is the cause of the problem. It seems to suggest that `chr20`, which appeared in the `gentrome.fa.gz` file did not have its name appear in `decoys.txt`, and that it occurred after some records that _were_ marked as decoys. I'm assuming that `chr20` _should_ appear as a decoy here. Can you `grep` for `chr20` in the `decoys.txt` file and see if it shows up? If not, the question would be why it's not placed there by your first command. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/572#issuecomment-708550538:309,error,error,309,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/572#issuecomment-708550538,1,['error'],['error']
Availability,"Hi @gambardella,. Thanks for the effort in tracking this down further. So, I tried running locally with more threads than we have physically, but the bug wasn't immediately triggered, so I'm guessing there is some stochasticity there. One thing that would be really helpful (given our lack of success in reproducing locally yet) is to find out if the issue is being caused by the compacted De Bruijn graph construction library, or prior to that. One way to do that is to ask the indexer to keep around the ""fixed fasta"", and then to see if that differs from we're producing locally on our machine. If you run the following command:. ```; salmon index -t gentrome.fa.gz -d decoys.txt -p 12 -i salmon_index --gencode --keepFixedFasta; ```. then there should be a file `salmon_index/ref_k31_fixed.fa` that is generated in the index directory. This is a fixed fasta file (removing ambiguous nucleotides, trimming polyA tails, removing sequences that are too short (<= k), etc.). In my runs, I get the same md5sum for this file, regardless of the number of threads:. ```; $ md5sum salmon_index/ref_k31_fixed.fa; ceaf3a96bfc2a65e70b6f3094d02491c salmon_index/ref_k31_fixed.fa; ```. could you see if you get something different (on a passing run, on a failing run, or on both)? If so, I might be able to replicate the bug by starting from your fixed fasta file, rather than from the original fasta files. Regarding your other question :. > Would you now advise to drop the ""-k 31""?. This should make no difference to the indexing procedure. While `-k` is an important parameter, 31 is the default value. Therefore, if you run the command without providing `-k` explicitly, it will use k=31. However, some folks like to keep it in the command line anyway, as a form of self documentation (though it is also recorded in the index), and that seems fine to me.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/521#issuecomment-628067346:57,down,down,57,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/521#issuecomment-628067346,1,['down'],['down']
Availability,"Hi @gianfilippo ,; Thanks for forwarding the logs.; It does look like Alevin knee selection is over-shooting and allowing only ~250 cells as a whitelist.; Although not very frequent but we do have observed this behavior with Alevin knee selection in couple of other experiments and are working on more robust thresholding. I am closing this issue regarding the barcode frequency but will open a new one regarding the aggressive thresholding and would tag you in too, in case you wan't to track.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/284#issuecomment-418813606:302,robust,robust,302,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/284#issuecomment-418813606,1,['robust'],['robust']
Availability,"Hi @gnaisha,. Thank you for the detailed error report. Would it be possible to provide the BAM file that generated this behavior, or the commands used to generate this BAM file? That way we can try to reproduce and diagnose the issue.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/605#issuecomment-749596440:41,error,error,41,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/605#issuecomment-749596440,1,['error'],['error']
Availability,"Hi @grantcramer,. I was able to successfully index and map against the fasta file you link above (on linux). I was also able to index and map against the index on OSX, using the salmon from bioconda (v 0.9.1). So, I'm not _yet_ able to reproduce this. It seems the file you uploaded for your pre-built index is no longer available, so I couldn't try that out. I'd be happy to give it a try if you can put it up on dropbox or some such. Otherwise, I wonder if there could be some sort of binary compatibility issue. Did you build the index on the same machine you're quantifying on? The OSX I tested on is 10.13.1. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/209#issuecomment-375509050:321,avail,available,321,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/209#issuecomment-375509050,1,['avail'],['available']
Availability,"Hi @grantcramer,. Is this the same index you used before? Were there any issues with indexing? Could you provide a link to the transcriptome you are mapping against? We could see if we can reproduce the error on our end. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/209#issuecomment-374368312:203,error,error,203,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/209#issuecomment-374368312,1,['error'],['error']
Availability,"Hi @gresteban,. Thanks for reporting this. Did this happen when running with the automatic library type detection or with `-l SF`? It is _not_ intended, but knowing what code path was executed will help me narrow down the source of the bug.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/82#issuecomment-243602381:213,down,down,213,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/82#issuecomment-243602381,1,['down'],['down']
Availability,"Hi @gringer,. Yes, we can add a section for this in the docs. It will replace the old way for specifying geometry soon, as its just easier and more flexible. We talk about it in the 1.4.0 release notes. I copy the relevant info below (@k3yavi pulled for the 1-based indexing and won out ... this time):. generic barcode / umi / read geometry syntax : Alevin learned to support a generic syntax to specify the read sequence that should be used for barcodes, UMIs and the read sequence. The syntax allows one to specify how the pattern corresponding to the barcode, UMI, and read sequence should be pieced together, and the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:. --read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read 2, and it spans from the first index 1 (this syntax used 1-based indexing) until the end of the read. Likewise, the barcode derives from read 1 and occupies positions 1-16, and the UMI comes from read 1 and occupies positions 17-26. The syntax can specify multiple ranges, and they will simply be concatenated together to produce the string. For example, one could specify --bc-geometry 1[1-8,16-23] to designate that the barcode should be taken from the substring in positions 1-8 of read 1 followed by the substring in positions 16-23 of read 1. It is even possible to have the string pieced together across both reads, but that functionality is only available if you are running with --rad or --sketch and preparing a RAD file for alevin-fry. If you are running classic alevin, the barcode must reside on a single read. The robust parsing of the flexible geometry syntax is made possible by the cpp-peglib project.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/445#issuecomment-777884823:1587,avail,available,1587,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/445#issuecomment-777884823,4,"['avail', 'robust']","['available', 'robust']"
Availability,"Hi @guidohooiveld, . Regarding your questions:. (1) The motivation behind asking users to use Bioconda to install the binary is to limit the number of variables we may encounter when someone is reporting a bug --- i.e. if there are fewer distribution channels there is less maintenance overhead. Nonetheless, as you can see, I've had to make the binary available anyway, because it was the only way some people could easily get the program. Therefore, I think I'll start attaching binaries to releases again. (2) Yes, though this functionality is not part of Salmon itself. I *highly* recommend the [MultiQC](http://multiqc.info/) tool. MultiQC has a salmon module, which will parse all of the salmon log files in an experiment directory and produce a report. This report will contain the mapping percentages for all of the samples extracted from the salmon logs (and will color them nicely). It will also produce other QC information from the salmon runs. We are currently working on an improved multi-QC module, which will also provide summaries for things like GC / seq bias by analyzing the models that salmon learns, but this module isn't yet complete. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/252#issuecomment-405442271:274,mainten,maintenance,274,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/252#issuecomment-405442271,4,"['avail', 'mainten']","['available', 'maintenance']"
Availability,"Hi @habilzare ,; Thanks a lot for using alevin and sharing a subset of the dataset which can reproduce the error effortlessly, it really saves us a lot of time !. If I may ask a quick question, how did we get the file `cell_barcode_seq.txt` for whitelist ?; It looks like the file contains ~50k whitelisted CB, and only a very tiny fraction of them were actually found in the read/seq `Fastq` file. I agree that we can work on putting a more informative error so that user can resolve it by themselves.; The current assumption for alevin for whitelist CB is -- if provided with external whitelist then user is sure of the presence of the CB w/ _good enough_ frequency.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406460153:107,error,error,107,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406460153,2,['error'],['error']
Availability,"Hi @habilzare ,; re: importing binary format: [this](https://combine-lab.github.io/alevin-tutorial/2018/output-format/) tutorial might help more of how to read the binary output. Specifically, if you are familiar with python then [this](https://github.com/k3yavi/vpolo/blob/master/vpolo/alevin/parser.py#L8) function can be used for importing the binary. However, I reckon that alevin hasn't successfully completed. It looks like one of the whitelisted CB ended up having no read at all after deduplicating. We usually assume it should not happen since a whitelisted CB should have at least some count after deduplicating UMIs, which in your case can happen since the mapping rate looks like is surprisingly low `0.469385%` (is this expected ?). . `Skipped Barcodes are from High Confidence Region` is actually an error, again we need more informative and elegant exit from the pipeline once Alevin fails.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406648841:814,error,error,814,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406648841,1,['error'],['error']
Availability,"Hi @hsi88,. It looks like there was an allocation error while reading the input. This exception terminated the program (which resulted in the FastxParser destructor error happening simultaneously in a different thread of execution). Can you see if you can run this command successfully without including the decoy sequence and, if so, attempt index construction on a machine with more RAM?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/689#issuecomment-883541895:50,error,error,50,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/689#issuecomment-883541895,2,['error'],['error']
Availability,"Hi @izaakm,. This segfault is unlikely related to the issue here, since that happened in ""mapping mode"" (salmon performing mapping itself), and yours is happening in alignment-based mode (you're feeding SAM files to salmon). Does it fail to occur when you provide _either_ of the SAM files to salmon? That is, does it run to completion with both `data/processed/bwa-mem/SRR10571655.sam` and `data/processed/bwa-mem/SRR10571656.sam` individually? Also, what if you combine them via a pipe (i.e. something like):. ```; ./src/salmon-latest_linux_x86_64/bin/salmon quant --threads $(nproc) --libType U -t GRCh38_latest_rna.fa -a <(cat data/processed/bwa-mem/SRR10571655.sam <(samtools view data/processed/bwa-mem/SRR10571656.sam)) -o _tmp/ ; ```. the double redirect is just to make sure the header isn't included in the second sam file. Also, is the reference that you are passing to the `-t` option identical to the one with which bwa-mem was run? If the problem persists, we might need the sam/bam files to track it down further, since I imagine it may be data-dependent. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-707338358:1015,down,down,1015,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-707338358,1,['down'],['down']
Availability,"Hi @jamesrhowe ,; We are still working on the release, but there seems to be a bioconda wide PR outage and not sure how much time it's gonna take for them to resolve it.; In the meantime you can use [this](https://drive.google.com/file/d/143RwsFpVYghr_DFv_4vuvbGmSlt3zlcW/view?usp=sharing) binary which should resolve your problem. We'd let you know once salmon is ready to be installed from bioconda.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/324#issuecomment-443554193:96,outage,outage,96,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/324#issuecomment-443554193,1,['outage'],['outage']
Availability,"Hi @jashapiro,. So there are definitely a few things going on here. The first is that you correctly diagnosed the missing cmd_info.json information when `alevin` is run in RAD mode. That was simply an oversight, and there is no reason that file shouldn't have been written. Second, there is also useful information that belongs in `meta_info.json` in the `aux_info` directory (like the SHA hash of the reference sequences); that was also missing but has now been added.; ; In addition to salmon's `alevin` command, each step of `alevin-fry` also writes some useful metadata when it executes. For example, there is a json file written by the `generate-permit-list` step, one written by the `collate` step, and one written by the `quant` step. We've never run into the problem of the output of `alevin-fry` overwriting the output of `alevin` because we use a directory structure where the output quantifications reside in a separate directory from the input RAD file. However, I can now see that if you're writing the quants in the same place as the input, then there will be a conflict in the file names, and the existing files will be overwritten with the new ones. I agree that both tools output useful information. I'm a *bit* ambivalent about assuming the salmon-generated files exist, and merging them into one output file, as I think there might be cases where those files aren't present and `alevin-fry` should still run properly since it doesn't require them to perform it's processing. One option would be to rename the `alevin-fry` output files to prefix/postfix them so they don't collide with the salmon files even if they live in the same directory. Then, one could (now or later) write a small command to merge the relevant json files into a unified output if that would be more convenient downstream. Let me know your thoughts. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-883497669:1803,down,downstream,1803,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-883497669,2,['down'],['downstream']
Availability,"Hi @jashapiro,. Thanks for the report! I am curious if this is one issue or two. Specifically, are you saying that with 1.5.1 you get *no* `cmd_info.json`, while with 1.4.0 you got the stripped-down one, or that you get the stripped down version in both but you expect a full `json` file. I agree that, in any case, having some more info in the `cmd_info.json` output in RAD mode would be useful. It follows a separate code path, so this is likely a matter of making sure the function to write the json file is invoked at the right point. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-882817058:194,down,down,194,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-882817058,2,['down'],['down']
Availability,"Hi @jasonvrogers,. First of all thank you so much for sharing this thorough analysis with us, it was very clear and helpful for understanding the details of the problem you are referring to. Secondly, I apologize for the long time it took me to get back at you. I would like you to know that we have been and are still working on possible solutions for addressing this problem, and here I would like to share some updates with you. . About the success cases, it was nice to know that the current model of Salmon with length correction works pretty well in recovering the right estimates for those ""easier"" cases where one transcript is fully contained in another one. Turning off the length correction, tells the Salmon model not to consider the effective length of each transcript for computing the conditional probabilities of originating a fragment from a transcript. So, for the RNA-seq data there is no reason to turn off this term of the model, and we highly recommend not to use that flag for the bulk RNA-seq abundance estimation with Salmon. Looking more carefully at the 2nd case you have posted as the failure case, it is interesting to see that there is a very nice visual evidence on the super transcript that the long transcript might not be expressed at all. I am referring to the zero coverage regions on the Super Transcript between the regions corresponding to the smaller transcripts, e. g., between POF1 and EMC1. So, we tried a solution that inspects the coverage profile of all transcripts and calculates the probability of observing a zero coverage region on each transcript. If this probability is too low, this would be counted as an evidence for a transcript not being expressed at all. This approach seems to be working fine on this example that you have shared here. however, one problem was that there were considerable number of reads in the sample that were uniquely mapping only to the Super Transcript and turning of the expression of that transcript would result in t",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-666512703:556,recover,recovering,556,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-666512703,2,['recover'],['recovering']
Availability,"Hi @jblachly,. Thanks for pointing this out. The underlying parser we use should also support gff (&gff3), so I should probably just expand the extension set. I'll ping back here once the relevant changes have been made on the develop branch. I'll also note that, generally, we now recommend [tximport](https://bioconductor.org/packages/release/bioc/html/tximport.html) as the way to aggregate transcript-level abundance estimates to the gene level, since it provides some nice multi-sample functionality and also allows the user to choose from a few different ways in which the aggregation can be performed. If you're doing any of your downstream analysis in R, it's worth a look. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/114#issuecomment-272709627:164,ping,ping,164,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/114#issuecomment-272709627,2,"['down', 'ping']","['downstream', 'ping']"
Availability,"Hi @jeremymsimon — @Gaura is going to take a look at unfiltered permit listing and will share those results here later. Regarding frameshift errors, I think that's certainly out of scope for the alevin -> fry phase, but that type of thing *could* be in scope for `splitp`. Basically, my logic / reasoning is this: I'd like to avoid further complicating the already immense salmon/alevin codebase with special implementations handling problems outside of their core function (e.g. mapping reads to the reference efficiently and quantifying UMIs/barcode). Since most protocols (and the most common) have quite simple barcode geometry, it makes sense for this code to live there. I'm fully supportive of enabling support for more complex barcode geometries and preprocessing requirements if there are folks whom it would help, but it feels like that essential complexity belongs upstream of alevin / fry, so that by the time the reads get to alevin, it can assume a straightforward geometry. So TLDR : I think we'd be willing to investigate what is required to address potential frameshift errors, and how much of a difference that makes, but I think that analysis and eventual implementation (if we decide it's worth it), belongs in `splitp`.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988030837:141,error,errors,141,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988030837,4,['error'],['errors']
Availability,"Hi @jeremymsimon, . Somehow, the notification for this in my e-mail got classified as SPAM. Anyway, thank you for the detailed description! I'm going to ping @Gaura here. @Gaura — this is the alternative protocol I was discussing with you yesterday. As you can see, the main issue here is the ""noisy"" barcodes. Let me know what you think would be necessary to add support for this, and I'm happy to schedule a technical discussion if you want to discuss some options.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-921879305:153,ping,ping,153,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-921879305,1,['ping'],['ping']
Availability,"Hi @jeremymsimon,. A few quick thoughts on this.; ; > -Is quantification via alevin-fry (rather than alevin itself) mandatory here? I ask since your run seems successful whereas my full alevin run had a very poor BC detection and mapping rate.; ; I don't think we've been able to successfully obtain the same concordance with alevin yet (as opposed to alevin-fry). There is more sophisticated _internal_ barcode logic going on there, and we may need to pull @k3yavi in to see what is happening outside of the RAD -> fry pipeline.; ; > -I see you specified -l A - can you comment on what the detected/correct library type was here?; ; Unlike `alevin`, when you run with in `--rad` or `--sketch` mode, the library type isn't really relevant. All mappings are passed through to the rad file. Subsequently, in `alevin-fry` there is a `-d` (direction) flag that is used to filter mappings that don't concord with the expected orientation. I'm not sure what @Gaura used in the run above — the default is to keep reads from either orientation.; ; > -I assume all of this will also work in conjunction with --expectCells or --keepCBFraction if those parameters were needed? Your ~7k cells detected is very close to the published number post-filtering, but no similar filtering has been done here yet. My guess is that the proportion of cells that pass these filters will be higher for alevin, but we may still be under-estimating the number of real cells by a little bit here.; ; According to the commands listed, @Gaura used `alevin-fry`'s built-in knee-like filtering. This tries to use a knee on the cumulative read count histogram to determine a good cutoff for ""reliable"" cells versus poor quality cells. Alternatively, one can provide an external permit list with `-u` (unfiltered permit list) to quantify all cells that match any known barcode. This will generally result in *many* more quantified cells, which you will then want to filter post-quantification.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988011633:1659,reliab,reliable,1659,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988011633,1,['reliab'],['reliable']
Availability,"Hi @jeremymsimon,. I've discussed the support for SPLiT-seq/ParseBio with @Gaura in some depth. Honestly, I think the cleanest solution right now is just to have a more streamlined (and streaming) way to match / replace the random hexamers upstream of alevin-fry. By my understanding, if we can simply replace barcode 1 appropriately (as your Perl script currently does), everything should work downstream in alevin/alevin-fry.; ; To that end, I've thrown together a small rust program based on your Perl script. Currently that lives [here](https://github.com/COMBINE-lab/splitp). It reads the same basic parameters as the Perl script, and writes its output to stdout so that it can be used with named pipes. For example, something like:; ; ```; <normal salmon command> -1 read_file_1.fq -2 <(splitp --read-file read_file_2.fq --bc-map bcSharing_example.txt --start 79 --end 86 --one-hamming); ```. which will transform the second fastq file and stream the transformed reads out which can then be read by alevin-fry. One important thing to note is that while *alevin* requires the input reads to be a real file (i.e. you can't stream reads in because it does 2 passes), if you are mapping these reads for processing with *alevin-fry* you can use the process substitution trick above. As you hinted, this program works considerably faster than the Perl script. For example, for the first 10,000,000 reads in `SRR6750042`, the Perl script took 2m 48s to transform the reads and `splitp` took ~6s (if the output wasn't being written to a file on disk it took <4s). This should generally be fast enough to not be a speed bottleneck. So, perhaps the next step is to try to help you walk through this approach with a test dataset (and ideally using alevin-fry) to see if things are turning out as expected?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-961598108:395,down,downstream,395,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-961598108,2,['down'],['downstream']
Availability,"Hi @jeremymsimon,. So I'm trying to think about what issues _could_ be reasonably dealt with here. . 1) If the length of the sequence in the BAM header and the sequence provided in the FASTA file are different, this seems like a very difficult error to recover from since records can then contain alignments to bases about which we don't know. 2) If the same transcript appears multiple times in the input BAM header, but with different lengths, this also seems a difficult situation to allow. Exact duplicates are one thing, but I'm not sure if sequences ever appear with the same name but different lengths. If so, I'm thinking this would be a hard error. So, I think at least one situation we could reasonably deal with is that the input FASTA file contains multiple entries with the same name (and same length / sequence). In this case, we could retain only one of them, and document / log the fact that multiple identical entries were present in the input. Of course, there would still be an issue if we had a mismatch as with your example STAR input, where STAR concatenated all 3 occurences of an identical transcript. Are there other cases you can think of where it would make sense to somehow deal with the issue in salmon and continue with processing (perhaps with some extra warnings / log info)?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/282#issuecomment-418412904:244,error,error,244,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/282#issuecomment-418412904,3,"['error', 'recover']","['error', 'recover']"
Availability,"Hi @jjv5,. This error should be fixed. The binary works for me without error (or that strange jemalloc warning) on OS X 10.12.4. The relevant library should be statically linked in, so I doubt it's a path problem. You could also try the [conda build](https://anaconda.org/bioconda/salmon) to see if that works for you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294845429:16,error,error,16,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294845429,2,['error'],['error']
Availability,"Hi @jmaggiore,. The problem is that an outdated index is being mapped against. Specifically, that is the nature of this exception:. ```; Exception : [Error: This version of salmon does not support indexing using the RapMap index.]; ```. To fix this, you should re-index your reference using a recent version of salmon (ideally, v1.5.1 which you are using to quantify). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/685#issuecomment-881557370:150,Error,Error,150,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/685#issuecomment-881557370,1,['Error'],['Error']
Availability,"Hi @jorvis,. @sjackman ran into a [similar (but different) issue](https://github.com/COMBINE-lab/salmon/issues/46#issuecomment-193963209), and the root cause seems to be GCC5.3. My best guess is that there is some symbol munging that is incompatible between things compiled with GCC 4.x and GCC 5.x. The newest version of GCC seems to break quite a bit of software. I haven't installed it and tried to build with it yet, but I'll add it to my list of things to investigate. For the time being, would it be possible to build with GCC 4.X (where X > = 8.2), or to use the [pre-compiled binary](https://github.com/COMBINE-lab/salmon/releases/download/v0.6.0/SalmonBeta-0.6.0_DebianSqueeze.tar.gz)?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201302732:639,down,download,639,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201302732,1,['down'],['download']
Availability,"Hi @joshstolz,. Is there a reason you want to restrict the possible mapping to this set of 1800 transcripts? In general, mapping to a small subset of the reference is not ideal, because alignment works based on asking if the ""best hit"" for a read is good enough, so its easy to come up with scenarios where the is a read that matches some transcript very well, and another transcript ""alright"" --- if the transcript it matches very well is in the reference, then it will map there, otherwise it will likely map to the transcript where the match is just ""alright"". TLDR; the set of references included can affect the mappings. That being said, if there is a good technical reason you have for only including a subset of transcripts, that's easy to do. You just build your index on only those transcripts. Salmon treats the reference sequences you feed to it as the ""transcriptome"" and will map to that. Also, you could map to the full transcriptome and just extract the rows for these targets from the `quant.sf` files at the end. Of course, depending on what you want to do downstream, you'll have to be aware of how these 1800 transcripts fit into the bigger picture and how the reads that mapped to the other transcripts affect your belief about things like the effective library size etc.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/681#issuecomment-873025258:1074,down,downstream,1074,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/681#issuecomment-873025258,1,['down'],['downstream']
Availability,"Hi @junaruga , Although the above attached binary has been mistakenly named as for linux it should work with MacOsx Sierra. The current recommended way of installing salmon is through bioconda or docker, but unfortunately currently bioconda system is down for MacOsx releases. You can try using docker if the above binary doesn't works for you. Let us know how it goes.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-410478640:251,down,down,251,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-410478640,1,['down'],['down']
Availability,"Hi @juugii , it looks like you are using 10x data and you might need `--chromium` flag to tell alevin the type of datasets. Although it should have given error message much before starting reading the CB. I'll look into this but can you please confirm if you have given the flag to alevin or not?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410321746:154,error,error,154,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410321746,1,['error'],['error']
Availability,"Hi @k3yavi , ; You are absolutely correct, that the tsv file only had one column, I fixed it above. . But the txdf was my backup... I tried your bioawk script, but I keep getting this error; `bioawk: illegal field $(), name ""group""` . [alevin.log](https://github.com/COMBINE-lab/salmon/files/2639709/alevin.log); [salmon_quant.log](https://github.com/COMBINE-lab/salmon/files/2639710/salmon_quant.log)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/326#issuecomment-443718326:184,error,error,184,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/326#issuecomment-443718326,1,['error'],['error']
Availability,"Hi @k3yavi , thank you for the reply. Yes, you are right, it seems the problem is indeed in the whitelist `known_cb.txt`. However, I cannot seem to find out what exactly is going on with the file. When I wrote a python script to check the length of each cell barcode in `known_cb.txt`, _all_ of them are 16 bp long. This is the python script:. ```; $ cat print_length.py; with open('known_cb.txt') as fh:; for i in fh:; print(len(i)); ```. since each line has 16 bp barcode and a `\n` character, it outputs 17, which is expected. However, when I used `awk` to check the length, I expected `awk` to output 16, but it actually output 17:. ```; $ awk '{print length($0);}' known_cb.txt | head -2; 17; 17; ```. There might be some hidden characters that I missed. Any idea what's going?. Now, I have cleaned the `known_cb.txt`, and `alevin` runs without problem. For combinatorial indexing, good to known that it will be supported in future. I guess depending on assays, it needs to be a bit more flexible than the current options. The current options have only `--chromium` and `--dropseq` available. However, there are a few different combinatorial indexing assays. For `sci-RNA-seq`, the cell barcodes are within `I1.fastq`, `I2.fastq` and `R1.fastq`. Only `R2.fastq` is useful for gene quantification. For `sci-ATAC-seq`, the cell barcodes (this is just my educational guess) are within `I1.fastq` and `I2.fastq`, and both `R1.fastq` and `R2.fastq` contain useful information from the genome. For other plate-based method, there will be well barcodes and plate barcodes, which could be located in any of those 4 fastq files depends on the design. The cell barcodes will be a combination of well barcodes and plate barcodes. Thank you very much for the help. Regards,; Xi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/291#issuecomment-420807198:1087,avail,available,1087,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/291#issuecomment-420807198,1,['avail'],['available']
Availability,"Hi @k3yavi ,. I've corrected the CB+UMI FASTQ and the error persists. . ```; [2019-06-06 19:23:29.734] [alevinLog] [info] Found all transcripts to gene mappings; [2019-06-06 19:23:29.749] [alevinLog] [info] Processing barcodes files (if Present) . ; processed 31 Million barcodes. [2019-06-06 19:24:55.681] [alevinLog] [info] Done barcode density calculation.; [2019-06-06 19:24:55.681] [alevinLog] [info] # Barcodes Used: 31478936 / 31478936.; [2019-06-06 19:24:55.688] [alevinLog] [info] Total 247(has 200 low confidence) barcodes; [2019-06-06 19:24:55.688] [alevinLog] [info] Done True Barcode Sampling; [2019-06-06 19:24:55.690] [alevinLog] [info] Total 0% reads will be thrown away because of noisy Cellular barcodes.; [2019-06-06 19:24:55.692] [alevinLog] [info] Done populating Z matrix; [2019-06-06 19:24:55.692] [alevinLog] [info] Done indexing Barcodes; [2019-06-06 19:24:55.692] [alevinLog] [info] Total Unique barcodes found: 50; [2019-06-06 19:24:55.692] [alevinLog] [info] Used Barcodes except Whitelist: 0; [2019-06-06 19:24:55.716] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify. [2019-06-06 19:24:55.716] [alevinLog] [info] parsing read library format; [2019-06-06 19:24:55.716] [jointLog] [info] There is 1 library.; [2019-06-06 19:24:55.889] [jointLog] [info] Loading Quasi index; [2019-06-06 19:24:55.889] [jointLog] [info] Loading 32-bit quasi index; [2019-06-06 19:24:55.890] [stderrLog] [info] Loading Suffix Array ; [2019-06-06 19:24:56.791] [stderrLog] [info] Loading Transcript Info ; [2019-06-06 19:24:57.025] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-06 19:24:57.061] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-06 19:24:57.084] [stderrLog] [info] Computing transcript lengths; [2019-06-06 19:24:57.084] [stderrLog] [info] Waiting to finish loading hash; [2019-06-06 19:25:06.552] [jointLog] [info] done; [2019-06-06 19:25:06.552] [jointLog] [info] Index contained 136,011 targets; [2019-06-06 19:25:06.55",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790:54,error,error,54,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790,1,['error'],['error']
Availability,"Hi @k3yavi ,; At first glance, the idea seems good. What does the `--end` parameter do?. I tried your idea but it gives me another error. `salmon alevin -l U -1 c1a.fastq c2a.fastq ... -2 c1b.fastq c2b.fastq ... -i salmon_index -p 10 -o levin_results --end 5 --barcodeLength 16 --umiLength 6 --chromium --tgMap dict_transcript_gene.tsv --expectCells 50`. ```; Exception : [Error reading from the FASTA/Q stream. Minimum return code for left and right read was (-2). Make sure the file is valid.]; salmon alevin was invoked improperly.; For usage information, try salmon alevin --help; Exiting.; [2019-06-05 08:20:37.952] [alevinLog] [info] Processing barcodes files (if Present) ; ```. The FASTQ file of the reads is not paired-end, maybe there's the error? Here is a sample of the CB+UMI FASTQ, and of the reads FASTQ. CB+UMI FASTQ; ```; @ERS2271611.246_AGCCTC 246 length=51; GGTGAACGAGGCGAAGAGCCTC; +ERS2271611.246_AGCCTC 246 length=51; AAAAAAAAAAAAAAAAAAAAAAAAAA; @ERS2271611.247_GTGCTA 247 length=51; GGTGAACGAGGCGAAGGTGCTA; +ERS2271611.247_GTGCTA 247 length=51; AAAAAAAAAAAAAAAAAAAAAAAAAA; @ERS2271611.248_AATAAA 248 length=51; GGTGAACGAGGCGAAGAATAAA; ```. Reads FASTQ; ```; @ERS2271611.246_AGCCTC 246 length=51; CAAATTCACATTATATGGACAGAATATAGAAAAGTCCTTTCC; +; FFFFIIIIIIIIIIIFIFFIIIIIIIIIIIFIBFFFBFFIII; @ERS2271611.247_GTGCTA 247 length=51; TTTGAATGCCTGGAAGGTTACTTACCCTCTTTAGTTACTCCT; +; FFFFIIIIIIIIIFFIIFFIIIIIIIIIIIIIIIIIIIIIII; @ERS2271611.248_AATAAA 248 length=51; GTTGAATCATACCTTTCGATTACATCTTTTAAGCAAACCCTT; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-498955579:131,error,error,131,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-498955579,3,"['Error', 'error']","['Error', 'error']"
Availability,"Hi @k3yavi ,; Using the 5238 barcodes that are specific to this experiment, and also removing the quotes from the transcript to gene map file [bcNotFound-2018-07-19b.tar.gz](https://github.com/COMBINE-lab/salmon/files/2214018/bcNotFound-2018-07-19b.tar.gz), this time Alevin finished with no error. However, I did not get a count matrix in csv format. Also, the quants_mat_cols.txt file is missing, and I do not know how to read the binary quants.mat file. `salmon alevin -l ISR -1 SRR6327122_1.fastq.gz -2 SRR6327122_2.fastq.gz --chromium -i index -p 2 -o alevin_output --tgMap transposon_sequence_set.fa.tsv --whitelist barcode_seq_5K.txt --dumpCsvCounts`; Version Info: ### A newer version of Salmon is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; Logs will be written to alevin_output/logs; [2018-07-19 22:53:27.709] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; ### salmon (single-cell-based) v0.10.2; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ libType ] => { ISR }; ### [ mates1 ] => { SRR6327122_1.fastq.gz }; ### [ mates2 ] => { SRR6327122_2.fastq.gz }; ### [ chromium ] => { }; ### [ index ] => { index }; ### [ threads ] => { 2 }; ### [ output ] => { alevin_output }; ### [ tgMap ] => { transposon_sequence_set.fa.tsv }; ### [ whitelist ] => { barcode_seq_5K.txt }; ### [ dumpCsvCounts ] => { }. [2018-07-19 22:53:27.714] [alevinLog] [info] Processing barcodes files (if Present) . ; processed 87 Million barcodes. [2018-07-19 22:55:37.299] [alevinLog] [info] Done barcode density calculation.; [2018-07-19 22:55:37.299] [alevinLog] [info] # Barcodes Used: 86885223 / 87959276.; [2018-07-19 22:55:37.303] [alevinLog] [info] Done importing white-list Barcodes; [2018-07-19 22:55:37.303] [alevinLog] [info] Total 5238 white-listed Barcodes; [2018-07-1",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243:292,error,error,292,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243,3,"['avail', 'error']","['available', 'error']"
Availability,"Hi @k3yavi - apologies, just coming back to this with an eye to updating our pipelines, just wanted to clarify. . Just to recap, right now I'm running the previous Alevin version with `--dumpFeatures --noQuant`, filtering raw_cb_frequency.txt by barcode frequency (e.g. 10), and then using the whitelist in a further Alevin run, like `--whitelist whitelist.txt --forceCells (whitelist size)`. I then get a relaxed matrix I can filter in downstream analysis. Am I right in thinking that with the new version I can now just have a single run and say `--keepFraction 1 --freqThreshold 10`? Is the freqThreshold applied before the keepFraction?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-516399536:437,down,downstream,437,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-516399536,1,['down'],['downstream']
Availability,"Hi @k3yavi . Can you elaborate on 3 and 4 with command line usage examples? I feel you misunderstood my Question 3. My question 3 was ""how to do `salmon index` if I do not have a genome"" with salmon/v1.0. If my understanding is right (based on your response 4 - about dropping quasi mapping support with salmon/v1.0), I believe **_you cannot use salmon/v1.0 to do something like this below_** for my Question 3 (salmon index in absence of genome) ;; `salmon index -t txome_fasta -i txome_index`. Other questions:. 1. I don't believe bioconda has salmon/v1.0 - I checked on 01-Nov-2019 (around 7am Eastern); 2. Is salmon v0.15.0 available via bioconda - when I tried (same time as above) updating salmon via bioconda channel on my conda env it still pointed me to 0.14.1 . Thanks in advance to both @k3yavi and @rob-p",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549189494:628,avail,available,628,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549189494,1,['avail'],['available']
Availability,"Hi @k3yavi . Thank you for linking me to your script to parse the bfh file from alevin. I think I could figure out the structure of the bfh file. I will write it down underneath with the help of an example. Could you confirm it is correct? . Everything up and until the listing of the barcodes is clear. I will start with a line from after the barcodes. ; ""7	90480	90486	107507	107990	108641	109149	112915	1	1	105	1	TGGGATTT	1"". I think that each such line corresponds to an equivalence class (EC). The first entry on each row is the number of transcripts in the EC. This is followed by the transcripts (more correctly, indices you can use to obtain the transcripts). Then you have the number of reads with in the EC, followed by the number of barcodes (~cells). For each barcode, you have an index that can be used to retrieve the identity of the barcode, followed by the number of UMIs within that barcode, the sequence of the UMI and lastly the number of reads associated with that UMI. . My goal is create a expression matrix where the ECs are the rows and the columns are the cells. If I want the UMI counts, do I need to count the number of reads associated with each UMI or just the number of UMIs per cell? . Thanks in advance.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/728#issuecomment-1028272923:162,down,down,162,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/728#issuecomment-1028272923,2,['down'],['down']
Availability,"Hi @k3yavi Is there any way that an option can be added to ignore missing transcripts? I had to modify the gencode v30 transcriptome fasta and GTF to include fusion transcripts... but this seems to have created an issue:; ```; ERROR: Txp to Gene Map not found for 9 transcripts. Exiting; ```; I don't think ignoring 9 transcripts should be a big deal. Is there any way to accomplish that? Or any other workaround? . Thank you,; Henry. Edit: Figured out a work around!; -- For anyone who is having a similar issue--. I figured out that the issue was a set of transcripts in my fasta file that were not in the trp2gene file. . To find the conflicts in my annotations, I had to grep the headers from my fasta file and direct the output into a new .txt file. I read the new file into R as a ""|"" delimited table and used gsub() to remove the "">"" from the first column. Then I used vim to search and delete all the lines of the fasta file which were missing from the trp2gene file using `?searchText` --> `ma` (marks the start of the delete) --> `d'a` (deletes from `ma` to the current cursor location).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-576069305:227,ERROR,ERROR,227,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-576069305,1,['ERROR'],['ERROR']
Availability,"Hi @k3yavi and @rob-p,. Thanks for the detailed info and pointing me to the links on your github page. One suggestion regarding semantics ([from the README page](https://github.com/COMBINE-lab/SalmonTools/blob/master/README.md)) - you might want to rethink if stating 80% homology is the correct way. I know it is prevalent in literature, etc but from a bioinformatics/computational biology expertise standpoint ""80% homology etc"" is wrong. I think you are meaning similarity/identity here when you refer to homology as written here on the README page:.; ```; to align transcriptome to an exon masked genome, with 80% homology and extracts the mapped genomic interval.; ```; Check these out: ; https://www.ncbi.nlm.nih.gov/books/NBK20255/#A23; https://twitter.com/MatthewMoscou/status/866227138575429633; http://bytesizebio.net/2009/07/15/distant-homology-and-being-a-little-pregnant/. Thanks once again,",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499373498:594,mask,masked,594,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499373498,1,['mask'],['masked']
Availability,"Hi @k3yavi, ; So there is no issue when I manually add 2 pairs. Is there a max amount of input files? ; Below is the simple bash script to organize the data and find the correct files; ```; #!/bin/bash; #this script calls alevin for multiple library pairs of files . #where salmon located; salmon=""/usr/local/bin/salmon"". index=""path/to/gencode_annot/AlevinIndex/""; echo ${index}. #output folder path; output_folder=""path/to/alevin_outputTest""; echo ${output_folder}. #where the raw files are; samples_folder=""path/to/Raw_data/Sample_cells/"". cd ${samples_folder}. sample1=$(ls *R1*.fastq.gz -p | grep -v / | tr '\n' ' ') #this gives us a space seperated list of all the R1 files; #this is from the alevin tutorial ""Often, a single library may be split into multiple FASTA/Q files. Also, sometimes one may wish to quantify multiple; #replicates or samples together, treating them as if they are one library""; echo ""Value of sample1:""; echo ${sample1}. echo ""Value of sample2:""; sample2=${sample1//R1/R2} #switch the R1 with R2 to find the second pair for ALL (//) occurances; echo ${sample2}. tgMap=""path/to/gencode.primary_assembly.v29.tsv""; #this is a transcript --> gene map tsv file. Can create this using tximport. whitelist=""path/to/my_barcode.tsv""; #a list of true barcodes; salmonCommand=""${salmon} alevin -i $index -lISR -1 ${sample1} -2 ${sample2} -p 8 --celseq2 --dumpCsvCounts -o ${output_folder}/quantSC --tgMap ${tgMap} --whitelist ${whitelist}""; #--numCellBootstraps 100; #numCellBootstraps args -- generate a mean and varience for cell x; #dumpCSVcounts - dumps cell v. transcripts count matrix in csv format; echo ${salmonCommand}; if ${salmonCommand}; then; touch ${output_folder}/qauntSC_complete.txt; else; touch ${output_folder}/quantSC_failed_to_complete.txt; fi; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446199327:366,echo,echo,366,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446199327,14,['echo'],['echo']
Availability,"Hi @k3yavi,; There is no more message error. Once the message occurs, it abruptly ends and that's it. > weren't you using the whitelisted CB instead of ""knee"" thresholding?. Yeap, but in the previous dataset. In this one the CB is provided in the dataset, and I don't have to create a whitelist. . The error does not always happen. I have created other random datasets, and they do not always fail. I will try to create a small dataset which fails, for you to replicate. Is there anyway I can privately send it to you?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386#issuecomment-505504105:38,error,error,38,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386#issuecomment-505504105,2,['error'],['error']
Availability,"Hi @kai2june,. I'm glad to hear the pre-compiled one works. To try and compile in debug mode, I suggest the following. Let `salmon` be the top level directory where you checked out the repository. And assume you're not in a fresh checkout (i.e. you already tried to build and got this error). Look at the file:. ```; salmon/external/pufferfish/CMakeLists.txt; ```. on line `131` you should see the following:. ```; set(DEBUG_FLAGS ""-D__STDC_FORMAT_MACROS;-DSTX_NO_STD_STRING_VIEW;-pg;-g;-gstabs""); ```. try removing the `-pg` from this so it reads . ```; set(DEBUG_FLAGS ""-D__STDC_FORMAT_MACROS;-DSTX_NO_STD_STRING_VIEW;-g;-gstabs""); ```. then try to compile again and see if that is able to complete successfully.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751922623:285,error,error,285,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751922623,1,['error'],['error']
Availability,"Hi @kai2june,. Thank you for the _detailed_ report! It's interesting because (a) those functions aren't doing anything too exotic and (b) CentOS is the OS we use on our continuous integration. We'll try and get a better handle of what is going on here. In the mean time, could you tell us if you see the same behavior with the [pre-compiled binary](https://github.com/COMBINE-lab/salmon/releases/download/v1.4.0/salmon-1.4.0_linux_x86_64.tar.gz) available from the downloads page?. P.S. One other thing worth trying. We've noticed that compiler support for interprocedural optimization isn't terrific. You can try building salmon without this option by passing `-DNO_IPO=TRUE` as an additional cmake flag.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751366046:396,down,download,396,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751366046,3,"['avail', 'down']","['available', 'download', 'downloads']"
Availability,"Hi @kate-simonova,. How low is your mapping rate? Can you explicitly pass the flag `-l IU` for library type? This strand bias means that the data look stranded however. Also, can you mention how the mapping rate changes if you add `--softclip` and/or if you lower `--minScoreFraction`? If the mapping rate is very low, this could signify a failure of the sample to match the reference well. Could you post the contents of `meta_info.json`?. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/679#issuecomment-1036315058:340,failure,failure,340,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/679#issuecomment-1036315058,1,['failure'],['failure']
Availability,"Hi @kayDaramola ,. The download you will get from the releases page is the source. You will either need to build / compile it from source or, alternatively, install the binary using bioconda (recommended). Finally, you can try [this](https://github.com/COMBINE-lab/salmon/files/2099291/salmon-latest_linux_x86_64.tar.gz) pre-compiled binary for Linux, though we are trying to move to bioconda for all binary distribution as it makes support easier by removing a major variable.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/238#issuecomment-398558525:23,down,download,23,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/238#issuecomment-398558525,1,['down'],['download']
Availability,"Hi @keithgmitchell,. Alevin is designed for droplet-based, tagged-end protocols, and in the vast majority of these protocols, transcript-level quantification isn't really reliable enough to be useful. Since most tagged-end protocols sequence information from only the 3' end of the transcripts, there is a highly-biased coverage signal, and discerning UMI assignment at the transcript level is usually not possible. Therefore, I wouldn't generally recommend trying to obtain transcript-level counts from alevin and we haven't tested it in this context. If you have a particular reason you want to look at transcript counts and believe it may be reasonable in your specific use-case, you can alway pass in a gene-to-transcript map that just maps each transcript to itself, which will result in a transcript-level output matrix. However, I anticipate that the resolution problem will become more difficult in this case, and there will be much more uncertainty in the assignments. @k3yavi, please feel free to add anything you think I may have missed. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/588#issuecomment-729974232:171,reliab,reliable,171,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/588#issuecomment-729974232,1,['reliab'],['reliable']
Availability,"Hi @kieranrcampbell,. Indeed, such reads will be un-mappable. The only tricky question here is at which point we should (1) do nothing (2) issue a warning (3) issue an error. Since the reads may not all be of the same size (perhaps the user has quality-trimmed the reads first and not opted to discard the short ones), it's possible we may see some reads too short to consider, but others would not be. We could choose arbitrary cutoffs (warning if greater than 1,000 such reads and an error if greater than 1,000,000), but this will, of course, depend on how large the input data set is. Anyway, I agree that we should notify the user of this and will be happy to add it; do you have any suggestions on the default behavior?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/41#issuecomment-181394180:168,error,error,168,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/41#issuecomment-181394180,2,['error'],['error']
Availability,"Hi @klaas-men,. Thanks for the question and for the detailed report! This is an interesting observation. The most likely reason you are seeing this behavior is that the fast mapping algorithms are, in a sense, quite greedy in how they attempt to map reads. This can lead them to suffer with compared to more traditional alignment algorithms like Bowtie2 and BWA-MEM with respect to both sensitivity and specificity. Here, you are likely seeing a manifestation of the former. Specifically, greedy behavior can lead to spurious matches. Many of these spurious matches are filtered out when applying a consensus mechanism to the series of matches produced by a read; however, this can result in the read going unmapped. We have noticed this behavior where spurious matches can ""mask"" better overall mappings, and we have developed an algorithm to overcome these limitations (called selective-alignment). This is currently implemented in [this branch](https://github.com/COMBINE-lab/salmon/tree/rescue-orphan) of the Salmon repo (if you want to test it out and have trouble building, we can build you a linux executable). This algorithm explores more potential mappings and then applies a fast algorithm for filtering potentially poor ones. In our benchmarks, it exhibits sensitivity and specificity very close to Bowtie2 (which is among the best of the alignment-based methods we considered). Also, I will note that, though the speed and statistical optimization procedures used in fast transcript abundance estimation tools make them a potentially desirable choice for microbiomic / metagenomic abundance estimation, their indices are typically optimized for speed and not size. For small numbers of bacterial species this can be okay, but if one wishes to index large collections of species, the memory usage can become a problem. To this end, we have developed a new indexing scheme (software [here](https://github.com/COMBINE-lab/pufferfish), slightly out-of-date pre-print [here](https://www.biorxiv",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/196#issuecomment-365337297:775,mask,mask,775,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/196#issuecomment-365337297,1,['mask'],['mask']
Availability,"Hi @knokknok ,. Thanks for reporting this (and for testing out 0.10.0 so quickly)! Is this read set & reference txome available to try and reproduce this? Also, would it be possible to check if this occurs using the bioconda-packaged release?. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393218241:118,avail,available,118,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393218241,1,['avail'],['available']
Availability,"Hi @knokknok ,. The latest commit on develop branch https://github.com/COMBINE-lab/salmon/commit/94eab5dae04da4ca02b8da8b630e0750bc15e010 , should fix it. However, there are other major changes in develop branch which can change things from last stable release. I'd recommend, if you can, then please wait for some time before we make the official release of `1.0`. If it's urgent, then try grep(ping) for the changes related to `umiLength` from the above commit and making them into your local salmon code. Hope this helps !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/430#issuecomment-536052532:396,ping,ping,396,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/430#issuecomment-536052532,1,['ping'],['ping']
Availability,"Hi @knokknok,. That's a good point. I don't know if there's a way to get at this easily. I'll ping @k3yavi here for his input. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/757#issuecomment-1068649915:94,ping,ping,94,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/757#issuecomment-1068649915,1,['ping'],['ping']
Availability,"Hi @kvittingseerup,. No need to apologize, I think it was I who was not clear. What I am saying is that this is *already* the way that Salmon handles such a case. That is, if you have a paired-end read, and one of the reads maps but the other doesn't (due to e.g., adapter contamination or just very low quality), then Salmon will consider the remaining (mapping) end of the read as representative of an entire fragment, and will resolve the fragment origin accordingly during optimization. Generally, not having both ends of a paired-end read leads to increased ambiguity, but this isn't a particularly big problem if it only happens to a generally small fraction of the reads. Further, since you cannot reliably infer the implied fragment length on a transcript from only a single-end read, such mappings will not contribute to the bias model. Again, however, as long as this doesn't happen to the vast majority of fragments, it should have only a negligible effect on quantification and bias correction. Please let me know if this description makes sense. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-355881997:705,reliab,reliably,705,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-355881997,2,['reliab'],['reliably']
Availability,"Hi @kvittingseerup,. Sorry for letting this sit for so long without responding. Currently, Salmon does not support mixed paired-end and single-end library types, so this is presumably what is causing the error (granted, the error message here could be considerably better). Practically, I'd be curious what the difference is between allowing this and simply running Salmon with the _non-quality-trimmed_ paired-end reads. Specifically, if Salmon is not able to map a pair concordantly, but it can map one of the ends of the read, then it will already do so. . However, in the case that there's a really compelling reason to want to quality trim the reads prior to quantification (and to include the reads such that the mate has been completely quality-trimmed away), we would be able to support this. It will require a bit of modification to allow different library types to be processed back to back and to contribute to the same quantification estimates. In this case, I imagine what we would want to do for the orphans is essentially what Salmon would do internally if it can't map the mate. That is, we would learn essentially all of the parameters and biases from the pairs that do map concordantly, and then just include the orphaned reads as indicating an entire fragment but of unknown length. Let me know if you have any thoughts about the above, and sorry again for the delay!. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-353196630:204,error,error,204,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-353196630,4,['error'],['error']
Availability,"Hi @lijing28101,. Thanks for your interest in salmon. The answer to your first question:. > I want to know how did you estimate the final counts to combine the unique and ambiguous counts?. is actually a huge part of the method behind salmon. Salmon uses a statistical estimation procedure to determine what abundances for the transcripts are most likely given the observed data (read alignments). You can read about the method in detail [here](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5600148/pdf/nihms849351.pdf) and about some subsequent improvements [here](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5870700/) and [here](https://www.biorxiv.org/content/10.1101/657874v2). > For the unstranded library, did you use the same algorithm to estimate the final counts as the stranded library? . The difference between stranded and unstranded is that in the stranded library, we set the conditional probability of alignments that don't agree with the specified strandedness to be a very-low, user-adjustable value (`--incompatPrior` : 0 by default). The underlying inference methodology is identical. Strand specificity, if the library was sequenced that way, provides extra signal to the quantification algorithm. However, that is an external source of information, and is only available if the library itself was strand-specific.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/492#issuecomment-620232036:1282,avail,available,1282,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/492#issuecomment-620232036,1,['avail'],['available']
Availability,"Hi @litongda007,. If you can share the sample table and code you are using to process up to this point, I can see if I get the same error. I'm guessing the result is something happening _after_ the conversion to h5. Some subsequent processing is likely leading to the error, but the bootstraps themselves contain no NA/NAN values.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638568102:132,error,error,132,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638568102,2,['error'],['error']
Availability,"Hi @litongda007,. Thanks for the updated. I grabbed these and ... basically saw the same thing:. ```; 23R1F : has null = False; 23R2F : has null = False; 23R3F : has null = False; 23R4F : has null = False; R1ST1 : has null = False; R2ST1 : has null = False; R3ST1 : has null = False; R4ST1 : has null = False; ```. I am thinking that perhaps the error is popping up somewhere _downstream_ of salmon. I presume you are using the `salmon` -> `wasabi` -> `sleuth` pipeline, is that correct? If so, I can try and see if I get the same thing importing in R. The tests above were using the python importer from [here](https://github.com/COMBINE-lab/pluribus). **Update**: Ok, that, too, has failed. I converted all of the quantifications to hdf5 files using wasabi, and then checked for nans in the converted files:. ```python; import h5py; import numpy as np; def get_num_nan(x):; nbs = int(x['aux']['num_bootstrap'].value[0]); s = 0; for i in range(nbs):; s += np.isnan(x['bootstrap']['bs{}'.format(i)].value).sum(); return s. samps = ['23R1F', '23R2F', '23R3F', '23R4F', 'R1ST1', 'R2ST1', 'R3ST1', 'R4ST1']; for s in samps:; d = h5py.File('quant/{}/abundance.h5'.format(s)) # abundance.h5 created by wasabi; null_count = get_num_nan(d); print(""{} : null count = {}"".format(s, null_count)); d.close(); ```. The output, as above, is : . ```; 23R1F : null count = 0; 23R2F : null count = 0; 23R3F : null count = 0; 23R4F : null count = 0; R1ST1 : null count = 0; R2ST1 : null count = 0; R3ST1 : null count = 0; R4ST1 : null count = 0; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638553711:346,error,error,346,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638553711,1,['error'],['error']
Availability,"Hi @lubios,. I'm glad that you were able to address the first issue. The thing that's strange about the second is that somehow the output path you are providing in the command doesn't match the directory name in the error message. Specifically, your command has the output directory as `transcripts_DecoyQuant`, but the error reports not being able to create the directory `transcripts_quant`. Are the command and error here properly paired?. The only situations under which one might expect this issue to occur is if either (1) your user doesn't have sufficient permission to create the location where the output is to be written or (2) the disk on which the output is to be written has insufficient space. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/717#issuecomment-964546340:216,error,error,216,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/717#issuecomment-964546340,3,['error'],['error']
Availability,"Hi @martynakgajos ,. It's very hard to say without looking at the data. If you can share a minimal data on which we can replicate the error, that'd be great.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/414#issuecomment-521744430:134,error,error,134,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/414#issuecomment-521744430,1,['error'],['error']
Availability,"Hi @matthew-valentine,. In general, extra non-primary alignments are OK. This can, of course, slow down quantification somewhat because many more alignments are being evaluated. However, salmon (with the `--ont` flag) is designed to consider the provided alignments and allocate the corresponding read proportionally according to all of the relevant probabilities (including alignment quality). If, under this aligner setting, there are many *highly* sub-optimal alignments being reported, you may consider filtering them out, but that shouldn't be strictly necessary. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/796#issuecomment-1235769651:99,down,down,99,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/796#issuecomment-1235769651,1,['down'],['down']
Availability,"Hi @mdshw5,. Thanks for the detailed report (and trying out the new version). Could you provide some details about the system you're running on? For example, how much memory is available? Also, how easy would it be to provide the actual fasta you are trying to index (for us to attempt to reproduce this locally)?. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/432#issuecomment-538548418:177,avail,available,177,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/432#issuecomment-538548418,1,['avail'],['available']
Availability,"Hi @microsat2018,. If you provide some details about what OS you are running on I may be able to try and create a compatible executable. Are you able to run docker images in your environment? If so, a quicker option may be to use Docker or uDocker (completely in user space) to pull down the Docker image for the latest Salmon from [Docker Hub](https://hub.docker.com/r/combinelab/salmon/tags/). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/256#issuecomment-407874226:283,down,down,283,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/256#issuecomment-407874226,1,['down'],['down']
Availability,"Hi @mishaprochazka and @jdidion,. Thanks @jdidion for pinging me on this. Somehow, Gmail has decided that all GitHub notifications (except those that explicitly tag me, but somehow I missed this one) should go to SPAM. So, I've been missing some of the newer issues here. The short answer is that the documentation needs to be updated. When salmon was originally published, we made use of [RapMap](https://github.com/COMBINE-lab/RapMap) as the underlying mapper, which performed quasi-mapping against an index that consisted of a suffix array and a hash over k-mers pointing to prefixes in the suffix array (similar to the strategy used by STAR, but using much longer k-mers to improve lookup speed). We referred to this index as the quasi-index. As the software evolved and we continued to improve the mapping methodology, we eventually transitioned over to an index based on [our pufferfish data structure](https://github.com/COMBINE-lab/pufferfish). In addition to the new data structure, this coincided with our move over to selective-alignment as the mapping algorithm, and all of this happened at the 1.0.0 release (this is why, for example, indices built before 1.0.0 are not compatible with salmon > 1.0.0; a topic on which there have been a few GitHub issues). However, given the fact that the documentation and software are linked only through manual human intervention (we haven't leveled up to e.g. having salmon be a [literate program](https://en.wikipedia.org/wiki/Literate_programming) yet), these two sometimes get out of sync. This is an instance of that. We have maintained the functionality of the `--writeMappings` feature, and in fact, even augmented it. However, we have not replaced the antiquated `quasi-index` terminology in the documentation. The TLDR is that you can use `--writeMappings` with the index you built with the `salmon index` command, and it should work fine. If you are mapping against an index without decoy sequences, then the output format will be basically ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/727#issuecomment-996192524:54,ping,pinging,54,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/727#issuecomment-996192524,1,['ping'],['pinging']
Availability,"Hi @mohsenzakeri ,. Sorry for the slow reply! I’ve done some sleuthing and have (seemingly) figured out what’s going on. I compared tons of overlapping transcript scenarios and played with the salmon options and concluded the following:. 1. **Success scenarios:** Generally, with default options, Salmon does an excellent job at assigning reads to overlapping transcripts the same way that a human would. Whether or not the transcripts overlap slightly or one is entirely contained within another is irrelevant. 2. **Failure scenarios:** In some scenarios with overlapping transcripts, read assignment can be very strange and unintuitive, especially when one of the transcript isoforms is much more abundant than the other (the abundant transcript tends to “steal” reads from the less abundant one). 3. Both the success and failure scenarios are **due to the length bias model** used when estimating the abundance of transcripts. **Totally disabling this with the —noLengthCorrection flag** (NOT the —no**Effective**LengthCorrection flag) **actually *creates* the transcript within a transcript failure scenario that I mistakenly thought was the original issue.** That is, when length bias modeling is turned off, then longer transcripts will always get assigned *all* of the reads that multimap to shorter transcripts.; -Therefore... if you *did* want to tackle the transcript within a transcript scenario to build a coverage bias model, you probably want to disable the length bias modeling or at least consider how it would interact with coverage modeling. With that said, I'm sharing an example that illustrates each of the above points and a link to a toy dataset that you can use to recreate the examples or explore this further. If you'd like to dig deeper into this, free free to e-mail me at jason@calicolabs.com, I have tons more notes and data that I'm willing to share. Dataset is in google drive (you'll have to click the link and request access to view it) https://drive.google.com/drive",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-653747847:517,Failure,Failure,517,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-653747847,3,"['Failure', 'failure']","['Failure', 'failure']"
Availability,"Hi @moschmi ,. Thanks for sharing the file.; You are right the transcript id `PB.40054.21` is indeed present & has the gene mapping in the file you forwarded. Unfortunately, the specific error message was not useful here but the issue is the following: ; ![image](https://user-images.githubusercontent.com/8772521/85436584-45706f00-b557-11ea-9ba2-95ebf4e43bc4.png). If you check the file you forwarded from line number 12,133 - 12,137, it seems a bunch of transcript ids are blank and has no assigned gene-ids. In this case the file parser was not intelligent enough to ignore such empty mappings and end up using the next line (before) tab as the wrong mapped gene-mappings. Later, when alevin sanity checks for the mappings of all transcripts, alevin complaints about not being able to find it for a random transcript much lower in the order. In short, I know you used the bioawk script for making the transcript to gene mapping file, but the script was written with the gencode generated GTF in mind, it seems the one you have has some small difference which is creating the issue. Currently, the easiest fix is to parse the GFF file again and generate the mappings for all the transcript in the proper format. In the future, we will add a sanity check for these type of corner cases, thanks for reporting this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/540#issuecomment-648319730:187,error,error,187,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/540#issuecomment-648319730,1,['error'],['error']
Availability,"Hi @mr-c,. First of all, **thank you** for your monumental effort in supporting salmon as a Debian package. I think this is fantastic. I'm also not a CMake expert, but I've failed with it enough times to start to get a handle. I have actually moved to the latest version of Jellyfish (v2.2.3) in the [quasimapping branch](https://github.com/COMBINE-lab/salmon/tree/quasimapping), which will be merged back into master as soon as we've finished porting the bootstrapping feature from [sailfish-master](https://github.com/kingsfordgroup/sailfish). Regarding supporting external versions of the libraries — this absolutely makes sense. What is the standard location where they are assumed to be installed? In this case I can search with a `FindPackage` before I attempt to download them. From the list above, I see two potential problem libraries:; - bwa — We actually use a modified version of bwa that accepts and uses an extra parameter that specifies the suffix array sampling frequency. Specifically, we, by default, use a denser sampling of the suffix array to trade off extra space usage for more speed in lookup. The standard bwa, therefore, probably wouldn't work.; - jellyfish — I actually tried to use jellyfish without obtaining the source and building it early on in development. I ran into an issue where the config.h file generated during compile wasn't installed by Jellyfish, and this caused runtime failures when Salmon was running. It seems to me that either (1) config.h should be installed with jellyfish by default or (2) it shouldn't be necessary to use jellyfish as a library. However, as far as I know, this issue persists in the latest version of jellyfish (if you want to use it as a library as we do, and not just as a k-mer counter). For the remaining libraries, we just use the standard versions, so this should be _OK_.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-144721158:770,down,download,770,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-144721158,2,"['down', 'failure']","['download', 'failures']"
Availability,"Hi @najibveto,. I do not have access to a windows machine, unfortunately, so I can not test this directly. It would seem that somehow the appropriate version of `libstdc++` is not available or is not being found? I would recommend to raise this issue over on the [`bioconda` repository](https://github.com/bioconda/bioconda-recipes/issues) or in their [gitter channel](https://app.gitter.im/#/room/#bioconda_Lobby:gitter.im). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/864#issuecomment-1660467862:180,avail,available,180,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/864#issuecomment-1660467862,1,['avail'],['available']
Availability,"Hi @paulitikka,. This isn't something that I have control over (in terms of the official package repositories), and we don't have the resources to independently package salmon for the huge variety of different linux distributions. However, there are already ways to install the salmon binary directly across linux and OSX. Specifically, there is a pre-compiled binary [here](https://github.com/COMBINE-lab/salmon/releases/download/v1.5.2/salmon-1.5.2_linux_x86_64.tar.gz) --- tagged on the release page. Additionally, you can install salmon directly on linux or osx using bioconda — as outlined [here](https://anaconda.org/bioconda/salmon). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/716#issuecomment-962084234:422,down,download,422,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/716#issuecomment-962084234,1,['down'],['download']
Availability,"Hi @phickner,. The error message seems to be coming from the library we use to parse the BAM file (https://github.com/jkbonfield/io_lib/blob/master/io_lib/bam.c#L329). Is it possible that somehow the BAM itself is ill-formed? Maybe as determined by [picard ValidateSamFile](https://broadinstitute.github.io/picard/command-line-overview.html#ValidateSamFile) or some such?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/323#issuecomment-442697747:19,error,error,19,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/323#issuecomment-442697747,1,['error'],['error']
Availability,"Hi @pinin4fjords ,. I am gonna make the hot-fix release for the `0.14.2` now.; We plan to release `v1.0.0` mid October, so with the `v0.14.2` I can make just the bioconda and github release from the master branch to fix the `mtx` issue. Just wanted to give you heads up, I am making 14.2 from master, so the only difference from 14.1 would be the hotfix i.e. there would be no Genome+txome capability as that's planned with 1.0. I'll keep you updated once it's available through bioconda.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-538507954:461,avail,available,461,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-538507954,1,['avail'],['available']
Availability,"Hi @pinin4fjords ,. That's a really nice suggestion. We had a similar idea, basically the plan was to ask the user to run the algorithm with `--dumpFeatures` which dumps the `filter_read_counts.txt` file, basically this file has the per CB level read counts after sequence correction, and visualize the distribution through small script to chose a user-defined threshold by `--forceCell` command line flag. I do see a value in giving a ballpark for some boundary in the error code, but the problem is a little circular i.e. if we had some idea about the boundary we use it anyhow and correct it later through the intelligent whitelisting. ; We are open to ideas you may have ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490143396:470,error,error,470,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490143396,1,['error'],['error']
Availability,"Hi @pinin4fjords ,. We have release a new version `v0.14.0`. In the latest version we have added different error codes based on what stage the pipeline fails. The error codes are as follows:. ```; 1: Error while mapping reads and/or generic errors.; 64: Error in knee estimation / Cellular Barcode sequence correction.; 74: Error while deduplicating UMI and/or EM optimization.; 84: Error while intelligent whitelisting.; ```. As we have discussed earlier, you can control the expected behavior by tweaking the following two flags.; ```; --keepCBfraction: A value in (0, 1] i..e what fraction of CB to keep for quantification.; --freqThreshold: default 10, Minimum frequency required to quantify the CB.; ```. Just a heads up, alevin with the current release will by default dump the `dumpFeatures.txt` which contains the per CB level features. Please check the release notes for more details. Closing this issue for now, but feel free to reopen if you face any issue or have question.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-498040072:107,error,error,107,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-498040072,7,"['Error', 'error']","['Error', 'error', 'errors']"
Availability,"Hi @pinin4fjords ,; The error is very subtle, It happens when the total number of genes are exactly a multiple of 8, which in your case it is. It'd be great that before moving forward, if you can quickly verify if 0.99 actually fixes the issue or is it something else. Unfortunately, there is a chance that the `mtx` format output is corrupted for the last 8 genes (in the order they present in the quants_mat_cols.txt), however, the baseline output of alevin `quants_mat.gz` would still be correct and already be in the output folder of your pipeline. The EDS repo I forwarded you just convert the binary output into mtx format correctly. Due to these subtle issues making into production environment, we changed the release cycle to be like a beta to stable type. Currently 0.99 is a beta release, which has been out for some time. If I have to guess, we plan to release 1.0 (the stable release) in approximately 2 weeks.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-537077512:24,error,error,24,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-537077512,1,['error'],['error']
Availability,"Hi @pophipi ,; Thanks for the interesting question, but unfortunately in the current version of Alevin you can't tweak the mismatch rate option although based on the type of error/noise in the reads you can try reducing the size of the k from default 31 to something smaller and see if it helps. We are working on tweaking the mapping algorithm for Alevin allowing mismatches but it's still in testing phase and has not been integrated yet. We'll let you know as soon as we have version supporting that.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/280#issuecomment-416969420:174,error,error,174,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/280#issuecomment-416969420,1,['error'],['error']
Availability,"Hi @pophipi ,; We are in process of documenting the details of these files generated by using flag `--dumpFeatures`.; However, for your use case of getting alignment rate, there are two ways to get it in Alevin system. First you have to run Aleivn with the flag `--dumpFeatures` but since you have the file `filtered_cb_frequency.txt` I think you already have specified this flag in your run of the dataset. The relevant files you need for generating alignment rate would be following:. 1. *filtered_cb_frequency.txt*: A *tsv* file with the first column as the Cellular Barcode(CB) id and the second column has the frequency of the CB after sequence correction.; 2. *MappedUmi.txt*: A *tsv* file with the first column as the Cellular Barcode(CB) id and the second column has the number of reads confidently mapped to the provided reference transcriptome. Both the file should have same number of rows (i.e. CB), although the order can be different. To get the Alignment rate you might have to divide the value of each CB in the second file by the value in the first file i.e. the Number of mapped reads over total number of available reads for that CB. The second and more easier way is (although version bounded i.e. if you have latest version of Salmon (v11.2)), then if you run alevin with `--dumpFeatures` flag it will also generate a file called `featureDump.txt`. This file has multiple feature entries although the relevant one (the alignment rate) in case of yours would be the first one. Hope that helps. Let us know if you need more help.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/274#issuecomment-414416572:1124,avail,available,1124,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/274#issuecomment-414416572,1,['avail'],['available']
Availability,"Hi @ppflrs,. Thanks for the detailed bug report. It seems that the index was constructed properly, but is not being appropriately read in during the quant phase. I've seen a big-index issue with 0.8.1 from another user as well --- but I haven't had a chance to dig down into this yet. Would it be possible for you to see if the issue also exists if you try the precompiled executable for v0.7.2? If that index builds and runs for you, we can at least narrow down the error to this particular release. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/129#issuecomment-287131172:265,down,down,265,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/129#issuecomment-287131172,3,"['down', 'error']","['down', 'error']"
Availability,"Hi @qifei9,. Thanks for the question and for pointing out the need for update in the docs. Regarding your first question, both approaches (3) and (2) seem reasonable to me. I would *not* try approach (1) as this will eliminate the benefit of the stranded library for the targets where you do know the orientation. For approach (2) , I'd either use `--validateMappings` or at least set `--rangeFactorizationBins 4` (the former implies the latter). As for what value to set for `--incompatPrior`, the effect should be reasonably robust across a range of values, the question is how unlikely _a priori_ would you expect a mapping not in `ISR` orientation to be if you also observed a mapping in `ISR` ... probably very unlikely (you could try e.g. 1e-10 or some such). Approach 3 is also also reasonable, though what you might consider doing is looking at the abundances for these opposite strands of the same sequence post quantification --- you should generally see that one of the two has a non-zero expression, or at least one orientation should have a much higher expression than the other (for expressed transcripts, at least, this might give you evidence as to the true strand of origin). Regarding your second point, the changelog is correct. In recent versions of salmon, `--incompatPrior` is 0 by default. We'll update the documentation accordingly.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/332#issuecomment-450929631:527,robust,robust,527,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/332#issuecomment-450929631,1,['robust'],['robust']
Availability,"Hi @rached-97,. First of all, thank you for the _incredibly-detailed_ report. All of the information you provided made it easy to pull down the data and to test what might be going on. I pulled down the first sample, consisting of `SRR9071838_1.fastq` and `SRR9071838_2.fastq`, which was recognized as `IU` for you. . However, since I didn't have access to the annotation you used or the specific scripts you used to extract the transcriptome reference, I instead quantified directly against [gencode v37](ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_37/gencode.v37.transcripts.fa.gz). When I did this, salmon calls the library format type as `ISR`, which is what we would expect. The `lib_format_count.json` is as such:. ```; {; ""read_files"": ""[ SRR9071838_1.fastq.gz, SRR9071838_2.fastq.gz]"",; ""expected_format"": ""ISR"",; ""compatible_fragment_ratio"": 1.0,; ""num_compatible_fragments"": 31944161,; ""num_assigned_fragments"": 31944161,; ""num_frags_with_concordant_consistent_mappings"": 29445487,; ""num_frags_with_inconsistent_or_orphan_mappings"": 2576421,; ""strand_mapping_bias"": 0.000022006283676957945,; ""MSF"": 0,; ""OSF"": 0,; ""ISF"": 648,; ""MSR"": 0,; ""OSR"": 0,; ""ISR"": 29445487,; ""SF"": 1098610,; ""SR"": 1477163,; ""MU"": 0,; ""OU"": 0,; ""IU"": 0,; ""U"": 0; }; ```. As you can see, the strand mapping bias reported is `0.000022006283676957945` (to an insanely higher level of precision than we actually need). This is, of course, drastically different from the value of `0.36810071818291797` that showed up in your table for this sample. While it is true that salmon is quite conservative about calling a library as stranded (i.e. it would rather make the mistake of calling stranded library as unstranded than vice-versa, as the latter would discard reads while the former would not), in this case it looks like the culprit is likely the transcriptome reference being used. When quantified under the standard gencode transcriptome, this sample is inferred as `ISR` with very high confidence ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-825393464:135,down,down,135,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-825393464,2,['down'],['down']
Availability,"Hi @radlinsky,. I've downloaded the read data and am looking into this. In the meantime, I did notice some relevant output from your log. First, when I run with the automatic library type, I get that the most likely library type is `ISF` rather than `ISR`. Second, I note that ~4M fragments are discarded because they produce dovetailing reads. We discard dovetailing reads by default (this was a recent change in default behavior, though it is the same default choice made by e.g. Bowtie2). You can allow these reads to be mapped and quantified by passing salmon the `--allowDovetail` flag during quantification. Does this make any different in the alignments you see for this gene?. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-494208884:21,down,downloaded,21,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-494208884,1,['down'],['downloaded']
Availability,"Hi @rbenel,. This is quite interesting. So I downloaded both the Gencode transcriptome (all transcript sequences) and the annotation you point out (PRI --- comprehensive gene annotation). There are a few transcripts present in the latter but not the former:. ``````. Specifically, these are _not_ dropped by salmon. They are not in the [input reference transcriptome file](ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_28/gencode.v28.transcripts.fa.gz). So it looks like Gencode includes these in the GTF, but _not_ in the transcriptome fasta. I looked at the first few, and nothing immediately jumps out as to why Gencode would have dropped",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-410725104:45,down,downloaded,45,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-410725104,1,['down'],['downloaded']
Availability,"Hi @rbenel,. This message is just salmon letting you know a newer version is available. The installed version should function perfectly fine. If you really want to avoid the message, you can pass `--no-version-check` *before* the salmon command; e.g.:. ` salmon --no-version-check index ...`. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/262#issuecomment-409903345:77,avail,available,77,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/262#issuecomment-409903345,1,['avail'],['available']
Availability,"Hi @rfarouni ,. Please use [this](https://drive.google.com/file/d/11lav7dOQkn5VuSNZwC2CZUgx_eeXpBmx/view?usp=sharing) link to download a linux compatible binary, the fix will be available by default with the next release . > Also, does Alevin use 10x cell barcode whitelist internally to correct barcodes?. In our experiments, we find that, in expectation, the 10x generated experiments are clean enough that we don't need the 10x whitelisted barcode to be explicitly specified or used. > And do you recommend using the `--naiveEqclass` only 64 guide sequences as features ?. That's a very good question. Basically the answer lies in how complicated the UMI graph network is. Experiment with the antibody derived barcodes (ADT) with 20 protein panel, generally, doesn't need the `--naiveEqclass` mode UMI deduplication, unless the experiment is super deeply sequenced. However, for super low diversity like 4-8 barcodes e.g. for HTO like sample barcodes, the graphical network becomes exponentially hard to solve and significantly increases the running time for alevin. . In general, I'd recommend if you expect very low diversity in the number of barcodes in your experiment, use `--naiveEqclass` otherwise prefer avoiding it. Generally, the experiment with low diversity barcodes results in such a highly dense count matrix that a few error in UMI deduplication won't matter and you can tradeoff extra long running time with reasonable under/over UMI deduplicated counts. . _In short_, 64 guide sequences are relatively high diversity and I'd advise skipping `--naiveEqclass` in your command line argument. Hope it helps !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638576983:126,down,download,126,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638576983,6,"['avail', 'down', 'error']","['available', 'download', 'error']"
Availability,"Hi @rob-p , @mdshw5 , . I did a local run, it crashed again, but now at least with some more information and a core dump. ; So the process failed with this error:; ```; /bin/bash: line 1: 31345 Aborted (core dumped) /home/agosdsc/pigx/pigx_rnaseq/.guix-profile/bin/salmon quant -i /scratch/AG_Akalin/agosdsc/projects/mrg1_rnaseq/analysis_v2/salmon_index -l A -p 8 -1 /scratch/AG_Akalin/agosdsc/projects/mrg1_rnaseq/analysis_v2/trimmed_reads/N2_1_R1.fastq.gz -2 /scratch/AG_Akalin/agosdsc/projects/mrg1_rnaseq/analysis_v2/trimmed_reads/N2_1_R2.fastq.gz -o /scratch/AG_Akalin/agosdsc/projects/mrg1_rnaseq/analysis_v2/salmon_output/N2_1 --seqBias --gcBias -g /data/akalin/Base/Annotation/ce11/ENSEMBL91/Caenorhabditis_elegans.WBcel235.91.gtf >> /scratch/AG_Akalin/agosdsc/projects/mrg1_rnaseq/analysis_v2/logs/salmon_quant_N2_1.log 2>&1; ```; I uploaded the files and the dump, such that you can try to debug this: ; https://1drv.ms/f/s!AqRdeUKlw8lFjDV7eDqqQbN7cQPa",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-377190490:156,error,error,156,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-377190490,1,['error'],['error']
Availability,"Hi @rob-p , thank you for so quick response. I spent some time organizing my demo data. Here is link for demo: ftp://bioinfo.noble.org/pub/for-github/. Two genes, with transcript name MSAD_157177.t1 and MSAD_200218.t1, get significantly different expression value in two runs, although they are almost identical. . Below are NumReads from Salmon:; ```; runA runB; MSAD_200218.t1 636.8 12201.2; MSAD_157177.t1 9307.1 0.8; ```. I agree with the necessity of allocating mulit-mapping reads. However, our problem is MSAD_157177.t1 received most of mapping reads in runA (9307 vs 636) but lost all of mapping reads in runB (0.8 vs 12201). And MSAD_200218.t1 has totally opposite result. Such different behavior for two genes make downstream Deseq2 reported both genes as significantly DE genes across samples but we know it is false result. Look at histogram.jpg , you will find it is pretty common phenomena over samples in terms of normalized RPKM. . I did a quick test for runB using eXpress, here is eff_counts:; ```; MSAD_200218.t1 5406; MSAD_157177.t1 3990; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/107#issuecomment-263783167:725,down,downstream,725,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/107#issuecomment-263783167,1,['down'],['downstream']
Availability,"Hi @rob-p ,. I tried both ways. Classic installation (not through bioconda) gave me this error:. ```; In file included from /usr/local/salmon-0.10.2/include/eigen3/Eigen/Core:420:0,; from /usr/local/salmon-0.10.2/include/eigen3/Eigen/Dense:1,; from /usr/local/salmon-0.10.2/include/SalmonUtils.hpp:21,; from /usr/local/salmon-0.10.2/include/ReadPair.hpp:7,; from /usr/local/salmon-0.10.2/include/AlignmentGroup.hpp:15,; from /usr/local/salmon-0.10.2/include/AlignmentLibrary.hpp:12,; from /usr/local/salmon-0.10.2/src/SalmonQuantifyAlignments.cpp:39:; /usr/local/salmon-0.10.2/include/eigen3/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]; MaySliceVectorize = bool(MightVectorize) && bool(DstHasDirectAccess); ^~~~~~~~~~~~~~~~~~~~~~~~; At global scope:; cc1plus: warning: unrecognized command line option ‘-Wno-unused-local-typedef’; cc1plus: warning: unrecognized command line option ‘-Wno-unused-local-typedef’; make[2]: *** [src/CMakeFiles/salmon.dir/SalmonQuantifyAlignments.cpp.o] Error 1; make[1]: *** [src/CMakeFiles/salmon.dir/all] Error 2; make: *** [all] Error 2; ```. I also tried installing it through bioconda. Apparently, it installs it correctly, but when I try to use Trinity (I'm installing Salmon as a Trinity requirement) this is what happens: . ```; salmon: /opt/conda/conda-bld/salmon_1528409373758/work/salmon-0.10.2/include/eigen3/Eigen/src/Core/util/Memory.h:161: void* Eigen::internal::aligned_malloc(std::size_t): Assertion `(size<16 || (std::size_t(result)%16)==0) && ""System's malloc returned an unaligned pointer. Compile with EIGEN_MALLOC_ALREADY_ALIGNED=0 to fallback to handmade alignd memory allocator.""' failed.; Error, cmd:; salmon --no-version-check quant -i /home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out/Trinity.fasta.tmp.salmon.idx -l U -r /home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403:89,error,error,89,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403,1,['error'],['error']
Availability,"Hi @rob-p ,. It does solve that issue. (I had figured out that AVX features were probably on the oldish side of software on that system, but I had the most recent `gas` available without having to recompile it from source myself). Thanks a lot (for this answer and for Salmon)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/20#issuecomment-145677185:169,avail,available,169,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/20#issuecomment-145677185,1,['avail'],['available']
Availability,"Hi @rob-p ,. Thanks for your reply. I just confirmed with my colleague, and realised the data I uploaded previously was related to another issue instead of the ""NA"" issue. I just re-uploaded the data. Please use the link below to download it. I am sorry for any inconvenience caused by this. https://send.firefox.com/download/8344911f0baae7d0/#xIWOt34AlY4XENr23IkBJA. Thanks.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638496616:230,down,download,230,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638496616,2,['down'],['download']
Availability,"Hi @rob-p ,. The data downloaded from sra database and use `fastq-dump` to split it only generate one fastq file, and EBI database only show one fastq file per sample. I am not sure if I process the file correctly. And here is a part of the description of the file on the sra database, and the link of one of the file <br class=""Apple-interchange-newline"">[SRR8453531](https://www.ncbi.nlm.nih.gov/sra/SRX5260234[accn]). ```; Instrument: Illumina HiSeq 3000; Strategy: RNA-Seq; Source: TRANSCRIPTOMIC; Selection: cDNA; Layout: SINGLE; Construction protocol: The scRNA-seq libraries were generated using Chromium Single Cell 3' Library & Gel Bead Kit v2 (10X Genomic) according to manufacturer's protocol. Briefly, 10,000-15,000 live cells were FACS-sorted and used to generate single-cell gel-bead in emulsion (GEM). After reverse transcription, GEMs were disrupted. Barcoded cDNA was isolated and amplified by PCR (12 cycles). Following fragmentation, end repair, and A-tailing, sample indexes were added during index PCR (8 cycles). Indexed libraries were multiplexed and sequenced on Illumina HiSeq 3000 instruments according to the manufacturer's instructions (26 cycles of Read 1, 8 cycles of i7 Index, and 98 cycles of Read2).; ```. Best",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/769#issuecomment-1107684572:22,down,downloaded,22,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/769#issuecomment-1107684572,2,"['down', 'repair']","['downloaded', 'repair']"
Availability,"Hi @rob-p ,. Yes that's one aspect. But also, Salmon uses CIGAR to evaluate alignment probability in alignment quantification mode no?. And with just RapMap output you would lose other information that Salmon uses to determine likely fragment assignment?. With UMI's you can deduplicate fragments _before_ inferring where they were likely to come from. Ideally you would deduplicate the reads directly based on UMI, then you wouldn't have to think about PCR duplication in the quantification. But of course keeping a hash of all reads in a FASTQ and accounting for dequencing errors wouldn't be really tractable..",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-268994712:576,error,errors,576,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-268994712,1,['error'],['errors']
Availability,"Hi @rob-p ,. we managed to successfully install Salmon and run Trinity. We compiled Salmon ourselves and we managed to find where the error is located, that is in a Boost file. ; I'm not sure if this information is useful for you, but in order to correctly install Boost, we had to modify the file boost_1_67_0/boost/lockfree/spsc_queue.hpp by adding the line `#include <boost/next_prior.hpp>` among the other inclusions of that file. After editing it and compiling Salmon again, it works properly. Thank you for your support!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398450528:134,error,error,134,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398450528,1,['error'],['error']
Availability,"Hi @rob-p ,; After removing ""-pg"" flag in ""salmon/external/pufferfish/CMakeLists.txt"", it's able to be compiled successfully now using Debug mode. To reproduce (in salmon/build directory):; ISSUE 1: The second test failed, I'm wondering whether this should happen or not.; > /root/cmake-3.13.4-Linux-x86_64/bin/cmake -DFETCH_BOOST=TRUE -DTBB_INSTALL_DIR=/usr/include -DCMAKE_BUILD_TYPE=Debug -DNO_IPO=TRUE -DCMAKE_INSTALL_PREFIX=../stage ..; > make // to get /root/salmon/external/pufferfish/CMakeLists.txt file; > vim /root/salmon/external/pufferfish/CMakeLists.txt // remove the ""-pg"" flag on line 131 ; > make // successfully compiled after removing ""-pg"" flag; > make install ; > make test; ![second_test_failed](https://user-images.githubusercontent.com/24876498/103263448-e4809280-49e2-11eb-9be9-7bbedfa2f1a5.png). (in /mammoth/salmon_data directory):; ISSUE 2: segmentation fault occurs after ""wrote [count] cleaned references"" (the same place as Release mode); > /root/salmon/stage/bin/salmon index -t gentrome.fa.gz -d decoys.txt -p 12 -i salmon_index --gencode (data from your tutorial https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/); ![image](https://user-images.githubusercontent.com/24876498/103263653-75576e00-49e3-11eb-9661-abd69de73a5e.png). gdb /root/salmon/stage/bin/salmon core.23591; (it seems to crash at cereal::OutputArchive, fixFasta, fixFastaMain, etc.); ![image](https://user-images.githubusercontent.com/24876498/103263925-2100be00-49e4-11eb-8918-01f9adf52d98.png)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751968056:881,fault,fault,881,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751968056,1,['fault'],['fault']
Availability,"Hi @rob-p ,; I used the latest version of salmon, and you were right, the difference between two database decreased a little bit, but still affect my downstream analysis. So I'm wondering should I change or add some options when run salmon quantification step to count for the different reads between two databases? Now I'm using the same script for both NCBI and ENSEMBL quantification except using related index file as below:. ./salmon-latest_linux_x86_64/bin/salmon quant -i index -l A -r SRR.fastq -p 8 --numBootstraps 100 --validateMappings --writeMappings=../mapinfo.sam -o pat1 . As you mentioned the NCBI find the best locus to assign reads and ENSEMBL match the reads better, so should I use different parameters when quantify reads for these two databases? Thank you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/525#issuecomment-639000029:150,down,downstream,150,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/525#issuecomment-639000029,1,['down'],['downstream']
Availability,"Hi @rob-p . A json file would be fine - I was just suggesting a text file. I myself use jq. So, adding it to 'versionInfo.json"" file is fine. Would you know when this update will be available?. On a different note - is salmon 1.2.0 available? See attached screenshot from the ""readthedocs"" page - that seems to suggest that salmon 1.2.0 is already available. I checked out the releases page and could only see 1.1.0. Even bioconda has salmon 1.1.0 - am I missing anything?. ![image](https://user-images.githubusercontent.com/8467214/77860517-d399bb00-71dd-11ea-9f07-d8173789cd6f.png)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/498#issuecomment-605700208:182,avail,available,182,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/498#issuecomment-605700208,3,['avail'],['available']
Availability,"Hi @rob-p . Thanks for getting back. I know there are lots of such instances in the literature which have wordings like ```50% homology``` etc - that's why I shared the book chapter from Eugene Koonin's book and the other references/quotes from Walter Fitch. We both cannot change what has already been published, however, when we write something ourselves, we can change the paradigm and represent things correctly. Also, the preprint paper has similar wordings that you might want to reconsider changing:. ```To obtain homologous sequences within a reference, we map the spliced transcript sequences against a version of the genome where all exon segments are hard-masked (i.e. replaced with N). We perform this mapping using MashMap 20, with segment size 500 and homology 80%. ```. Probably, change the first instance of ```homologous``` to '_identical_' and ```homology 80%``` to' _identity 80%_'. And I do not want to digress from the main issue or **take the sheen away from the great work from your group on the paper**.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499542660:667,mask,masked,667,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499542660,1,['mask'],['masked']
Availability,Hi @rob-p . Thanks for the elaborate answer - makes a lot of sense. The problem is that adapter contamination typically occures because the fragments were smaller than the sequence length we sequence into the adapters - and it can occur for a larger fraction of the reads (I've seen up to 50% of reads affected in the 3'end) making it non-negligible. That is why I suggested the extension in the first place. I think it makes a lot of sense to trim adapters away - both because they reduce the number of compatible reads - mostly because the failure to do so will result in an overestimation of the fragment length. . Now that I think about it I don't think we should trim reads based on quality as that will lead to an underestimation of the read length - or what do you think?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-355909325:542,failure,failure,542,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-355909325,1,['failure'],['failure']
Availability,"Hi @rob-p . Thanks for the thanksgiving release of salmon. We saw salmon 1.3.0 for July 4th, salmon 1.4.0 for Thanksgiving, hopefully we would see 1.5.0 for Christmas and 1.6.0 for New Year :) . Keep up the great work. I see that you have salmon now available for ARM machines - https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0. As myself and @patrick-douglas has requested here - https://github.com/COMBINE-lab/salmon/issues/424 - the ability to compile salmon on ARM is great. A question: Will this work if I do a bioconda install or do I need to compile using the tar.gz file. I am using the ARM based conda from https://github.com/Archiconda/build-tools/releases/download/0.2.3/Archiconda3-0.2.3-Linux-aarch64.sh and with that I could do ; ``` ; conda config --add channels c4aarch64 && conda config --add channels defaults && conda config --add channels anaconda && conda config --add channels bioconda && conda config --add channels conda-forge ; ; conda install -c bioconda -c conda-forge -y nextflow bbmap numpy fastqc. ```. I don't see arch64 for salmon in bioconda here - https://anaconda.org/bioconda/salmon",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/556#issuecomment-734442247:250,avail,available,250,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/556#issuecomment-734442247,2,"['avail', 'down']","['available', 'download']"
Availability,"Hi @rob-p . Totally understood (even more severe current limitations here) - survey completed. I think there'll ""always"" be Illumina-level coding (we use it to multiplex samples or cells), but I suspect most (all?) wild-west method will be some form of using the one read for barcoding. So as long as I can stipulate which bases in the read are which kind of barcode (cell/molecular) that'd be a good start. Of course having more mature methods than the current [drop-seq protocol](http://mccarrolllab.com/wp-content/uploads/2016/03/Drop-seqAlignmentCookbookv1.2Jan2016.pdf) to error correct, remove poly-A, remove adaptor sequences etc. always very welcome. (I suspect @vals is onto something... I still struggle to be entirely convinced that UMIs, as currently used, have the long-term legs that some people think.)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/93#issuecomment-282741659:578,error,error,578,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/93#issuecomment-282741659,1,['error'],['error']
Availability,"Hi @rob-p ; Yes, for now I'm just trying to run the getting started tutorial, I dowloaded and indexed the A. thaliana transcriptome, then I dowloaded the sequnecing data and run the quantification code:. `#!/bin/bash; for fn in data/DRR0161{25..40};; do; samp=`basename ${fn}`; echo ""Processing sample ${samp}""; sailfish quant -i athal_index -l A \; -1 ${fn}/${samp}_1.fastq.gz \; -2 ${samp}_2.fastq.gz \; 		 -p 8 -o quants/${samp}_quant; done `. `_Processing sample DRR016125. -bash: sailfish: command not found_`",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614279802:278,echo,echo,278,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614279802,1,['echo'],['echo']
Availability,"Hi @rob-p, ; I have successfully run the Salmon analysis, but I should add that the admin of the cluster utilized the executable you sent, but I used conda to install salmon 10.1, the executable you sent me for some reason didn't index the transcriptome correctly, I received the same error I initially started this post for...; Thank you so much for all of your help, I'll post here how it goes. :)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-395416625:285,error,error,285,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-395416625,1,['error'],['error']
Availability,"Hi @rob-p, ; So I can't update you on if it worked, because the cluster is using the 10.0 version (because we can't install from source), and I ran into this bug, ( Error in function boost::math::digamma<double>(double): numeric overflow] #229) for all of my samples, which you mention in the thread that this was fixed in the 10.1 version. Any idea when the binary for 10.1 will be out?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-395108485:165,Error,Error,165,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-395108485,1,['Error'],['Error']
Availability,"Hi @rob-p, ; Thank you for getting back to me so quickly and thank you for the explanation. ; I found this info about the `--eqclasses ` parameter in the Salmon quant help manual for alignment-based mode:; <img width=""626"" alt=""Screenshot 2023-10-03 at 11 40 56"" src=""https://github.com/COMBINE-lab/salmon/assets/76558077/dc98c406-759f-4543-8cdd-5299d24775eb"">; Everything else I tried was a guess.; I wasn’t sure how to get the right file, so I thought it might be the **eq_classes.txt.gz** file, made using the `--dumpEq` option. I read about [—dumpEq option ](https://salmon.readthedocs.io/en/latest/salmon.html#dumpeq) and I found some explanation of [equivalence class file](https://salmon.readthedocs.io/en/latest/file_formats.html#equivalence-class-file). So, I made this file using the `--dumpEq` option and then used it with `--eqclasses` option, but I made mistake by also providing a BAM file with `-a` option. When I got the error, i thought maybe this file was supposed to be used instead of the alignment BAM file, not together with, and now i understand.; I'm still not clear: is this file only used when I want to analyze the same sample multiple times, with different options?; Also, I noticed the `--eqclasses` parameter isn’t in the help manual for salmon quant in mapping-based mode because it’s not there when I run `salmon quant --help-reads`.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/877#issuecomment-1744787632:937,error,error,937,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/877#issuecomment-1744787632,2,['error'],['error']
Availability,"Hi @rob-p, The version we see the fault on is Red Hat Enterprise Release 6.10 (Scientific linux). I have a version of ubuntu that I can test on but not sure when I can get around to it at the moment.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458145886:34,fault,fault,34,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458145886,1,['fault'],['fault']
Availability,"Hi @rob-p,. As for our main goal, we are looking at the precision of Salmon versus biological PCR expectations of abundances. However, it is on a small number of genes as there have been some initial challenges with using ""accurate"" transcripts versus ""computational predicted transcripts"". Anyway, we hope to have this paper ready this year, but again I think we need to look at it from a different angle. While this project is a bit of a side project, my hope it that it will accomplish our initial goal and to provide the community with the general behavior of Salmon with different spliced types (i.e. Exon skipping, IR, AA, AD, etc). Again, it'll be on a small set of genes, but still should be interesting and hopeful can improve the future use of Salmon. I'll make sure to let you know when it is available.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/523#issuecomment-633099524:804,avail,available,804,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/523#issuecomment-633099524,1,['avail'],['available']
Availability,"Hi @rob-p,. I was finally able to grab some time to try running the beta version you linked (see attached logs). This certainly helped, although I'm still nowhere near a time-frame of ~30min. Here are my results:. The 31-mer running took a bit over an hour and consumed ~17GB of memory. This is about half the running time as the previous version, but approx. the same amount of memory requirement (more on that below). The 17-mer running, took 4.5hrs to complete and consumed ~64GB of memory. This particular running is again, about twice as fast, although the time really depends on the memory limitations I gave it. Since it appears that this version no longer crashes when given less than about 250GB of memory, I also tested with 32G and 16GB of memory, just to see what impact this would have on the times. Those jobs are still running (it's only been about 4hrs as of this writing, I'll update my post if/when they complete). Current logs are showing that they quickly consume all the available memory, but have not yet crashed. I've also got versions with 128-512GB of memory requested (by powers of 2) for comparison. Some random notes: both the 31-mer index experienced about twice as many soft page reclaims with the new/faster version and experienced a few hard page faults (the previous version saw none of the latter). The 17-mer version experienced fewer page reclaims than any of the 31-mer indices and far fewer than with the prior version. Again, a few page faults crept in, but relatively few by percentage and likely not contributing any significant amount of time overall. [index-qacct-17mer.log](https://github.com/COMBINE-lab/salmon/files/4246516/index-qacct-17mer.log); [index-qacct-31mer.log](https://github.com/COMBINE-lab/salmon/files/4246517/index-qacct-31mer.log). **UPDATE**; The 16GB version finished running. It actually only took a little over 4 hours to run, as well. The troubling thing about this job seems to be that, despite having successfully completed, accordi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590516702:992,avail,available,992,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590516702,1,['avail'],['available']
Availability,"Hi @rob-p,. Sure. Here are the metadata file and the R script file. Thanks again for your help. . https://send.firefox.com/download/2fbeef50b5ce0919/#Q8UXl4L0kXyjfGz03vyjsQ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638672708:123,down,download,123,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638672708,1,['down'],['download']
Availability,"Hi @rob-p,. Thanks for the speedy reply! There are definitely some strange things going on here. I can confirm that the second run (and the others that timed out) didn't produce any information about mapping. The outdir only contained empty subdirs + an empty log file:. ![image](https://user-images.githubusercontent.com/11418858/220816388-0a6272d4-a0c8-4e26-bf9f-15afda61cc44.png). 1. Thanks for the suggestion, I've now been investigating the potential of an index-related issue. Firstly, I downloaded the pre-built salmon index from refgenie using `refgenie pull hg38/salmon_sa_index`. I then ran `salmon quant` using this index and the singularity image of salmon v1.9.0. What, would you know: it worked in about 11 minutes. ```; <truncated>; [2023-02-23 14:46:31.892] [jointLog] [info] Aggregating expressions to gene level; [2023-02-23 14:46:32.452] [jointLog] [info] done; ```. This pre-built index does appear to be decoy-aware:. ```; [2023-02-23 14:38:21.709] [jointLog] [info] Number of decoys : 195; [2023-02-23 14:38:21.709] [jointLog] [info] First decoy index : 177412 ; ```. Secondly, I created a new transcriptome-only salmon index (`singularity run -B /data $SALMON_SIMG salmon index -t genome.transcripts.fa -i salmon_index -k 31`), then ran `salmon quant` again (as above) but using the new transcriptome-only index. Note: 'genome.transcripts.fa' is the transcripts file created during the `nf-core/rnaseq` pipeline. Again, this analysis completed properly in a reasonable time. Seems like there is something very wrong with the 'gentrome.fa' file that's being created by `nf-core/rnaseq`! It's just so odd that _some_ samples would work and others wouldn't. 2. It's definitely worth noting that I originally opted against using `star_salmon` with the following command:. ```; nextflow run nf-core/rnaseq --max_memory 55.GB --fasta /data/reference_genomes/GRCh38/Homo_sapiens.GRCh38.dna_sm.primary_assembly.fa.gz --gtf /data/reference_genomes/GRCh38/Homo_sapiens.GRCh38.106.gtf.gz -",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830#issuecomment-1441194948:494,down,downloaded,494,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830#issuecomment-1441194948,1,['down'],['downloaded']
Availability,"Hi @rob-p,. Thanks for the tip, using `--noErrorModel` indeed got rid of the error messages. Also, any advice regarding the best practices using salmon on nanopore data are welcome. Best,; Botond",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-420553174:77,error,error,77,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-420553174,1,['error'],['error']
Availability,"Hi @rob-p,. Thanks for your reply. Yes I am using the salmon -> wasabi -> sleuth pipeline. The NaN error showed up at this step. `so <- sleuth_prep(s2c, extra_bootstrap_summary = TRUE, read_bootstrap_tpm = TRUE, num_cores = 1, filter_fun = my_filter)`. Sleuth complained that there are NAs in bootstrap values and then stopped. Therefore, I removed the two options that are related to processing bootstrap and it worked. `so<- sleuth_prep(s2c, num_cores = 1, filter_fun = my_filter)` . However, the following sleuth_fit step showed the same error. `so <- sleuth_fit(so, ~condition, 'full', which_var = 'obs_counts') `",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638566265:99,error,error,99,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638566265,2,['error'],['error']
Availability,"Hi @rob-p,. We ran the tests you requested and the main problem remains. The memory load is lower than before, but for some reason `Salmon` (0.8.2) only works in the SGE cluster we have access to when we increase the memory limits (just like 0.7.2). (Edit: we used 0.8.2 to build a new index). I'll ask the cluster admins as they might have a clue on how to proceed. ## Low memory test. ### bash script. ```bash; #!/bin/bash; #$ -cwd; #$ -l mem_free=14G,h_vmem=15G,h_fsize=100G; #$ -N step6-salmon_test3.gsk_phaseII; #$ -pe local 1; #$ -o ./logs/salmon_test3.$TASK_ID.txt; #$ -e ./logs/salmon_test3.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 14:51:10 EDT 2017; **** JHPCE info ****; User: lcollado; Job id: 110315; Job name: step6-salmon_test3.gsk_phaseII; Hostname: compute-061; Task id: ; Version Info: This is the most recen",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:701,echo,echo,701,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,7,['echo'],['echo']
Availability,"Hi @rob-p,. thank you for your quick answer. As mentioned already, I started with the full set of options (at least I thought so) and then reduced them to the minimal case to reproduce the error for reporting the problem.; I was mislead by the term 'unrecognized option' and didn't expect the program to ""forget"" options from other modes. But now that you stated that this is the case, I realized that the '-a' in front of the BAM file name was missing, which I overlooked before. After adding it the program at least started to run. (Although it ran into another crirical error, appearantly misinterpreting chromosome and supercontig names from the BAM file header generated by STAR as transcript names.). Maybe it would be a good idea to distinguish in the error messages between 'unrecognised' and 'inappropriate' options to provide a better clue to the user what went wrong.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/343#issuecomment-462761900:189,error,error,189,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/343#issuecomment-462761900,3,['error'],['error']
Availability,"Hi @rob-p,; thanks a lot for your investigation. Could you please be more verbose on those incorrect Build-Depends? What dependencies can be removed (if not used they should not really harm, thought but you are correct that it makes sense to remove these) and more importantly which can not be used. For instance if we can't use libstaden as packaged we have a problem. All preconditions for a Debian package have to be packaged first. Fetching something from network is not permitted at package build time.; Thus I simply tried changing the cmake options to. ```; $ cmake -DCMAKE_BUILD_TYPE=Release -DUSE_SHARED_LIBS=TRUE -DBZIP2_LIBRARIES=-lbz2 -DBZIP2_INCLUDE_DIR=/usr/include -DLIBLZMA_INCLUDE_DIR=/usr/include/ -DLIBLZMA_LIBRARY=lzma -DCMAKE_MODULE_PATH=/usr/share/cmake/Modules -DTBB_WILL_RECONFIGURE=FALSE -DBOOST_WILL_RECONFIGURE=FALSE ..; ```. which does not change the SEGFAULT problem. If the issue belongs to something we need to download from somewhere please let me know what looks suspicious to you. This would be helpful since we could either add it to the Debian package source in debian/missing-sources ... or rather fix the predependency that would break salmon.; Kind regards, Andreas.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464471988:942,down,download,942,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464471988,2,['down'],['download']
Availability,"Hi @rudondamba,. Thanks for the report. At salmon v1.0.0, there was a breaking change in the index used in salmon. We moved from using the RapMap index to using a [pufferfish based index](https://github.com/COMBINE-lab/pufferfish). This means that, you'll want to rebuild your index using a recent version of salmon. Further, the move to the pufferfish index drops support for the FMD-like index, so you can remove the `--type` argument. With a new version of salmon you should be able to do:. ```{bash}; salmon index -t galGal6.gene+cluster+repBase+tRNA.fa -i SalmonIndex -k 31 -p 8; ```. the `-p` is optional and tells salmon to use 8 threads during indexing. Also, the default `k` is 31, so you don't need to pass that explicitly if don't want. Best,; Rob. P.S. It's worth noting that, even after this, there is still one small problem with your FASTA input file. You have an empty sequence name on line `30445`. More specifically, you have a record named `> NM_001318772.1_Unfound_-`. Note the space between the `>` and the record name. This is not allowed, and leads to an error in parsing the file. If you fix this header line, I can verify that the index builds successfully with the above command using the latest version of salmon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/694#issuecomment-892079287:1078,error,error,1078,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/694#issuecomment-892079287,1,['error'],['error']
Availability,"Hi @rudondamba,. The problem is that the sequence on line `30403` is parsed as ""empty"", since there is a space after the initial `>` and before the sequence name. This messes up the state of the underlying parser leading to the (in this case, uninformative) error message you are observing. If you fix the name online `30403`, then you should be able to index the transcriptome as expected. Let me know if this works for you. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/683#issuecomment-880059577:258,error,error,258,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/683#issuecomment-880059577,1,['error'],['error']
Availability,"Hi @s1corley . As @rob-p mentions, your paper could help assess different methodologies for quantification and also help optimize salmon further for QuantSeq. I would still like you to check if you have used salmon quant command line correctly for QuantSeq data analysis. Your paper briefly alludes to QuantSeq Forward in the Introduction section of the paper; >The QuantSeq Forward kit has an oligo (dT) primer which contains the Illumina-specific Read 2 linker ... but the Methods section of your paper does not specify if you have used QuantSeq FWD or REV. Page 14 of the PDF from the [Lexogen Website data analysis pipeline for QuantSeq FWD](https://www.bluebee.com/wp-content/uploads/2018/11/015UG108V0201-QuantSeq-Data-Analysis-Pipeline_2018-10-18.pdf) recommends using the below htseq command line. ```; htseq-count -m intersection-nonempty -s yes -f bam -r pos $bam; $resource_dir/annotation.gtf > $bam_dir/read_counts.txt; ```; > QuantSeq is a stranded protocol. For the QuantSeq FWD pipeline the argument -s yes indicates; > stranded in the sense orientation. For the QuantSeq REV pipeline -s reverse is used. Similar to the above htseq command line arguments, I think if you are using QuantSeq FWD, the` libType argument from salmon quant should have been SF` . One way I checked these with my datasets was to run the salmon quant command 3 times - once with `libType A`, once with` libType SF` and once with `libType SR` -- with QuantSeq FWD the estimated counts will be almost same with libType A and libType SF. I echo what @rob-p says - Congratulations once again on the paper.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565653150:1528,echo,echo,1528,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565653150,1,['echo'],['echo']
Availability,"Hi @sagnikbanerjee15,. It looks like you are providing the `-t` flag with the *reads* rather than the target transcriptome (i.e. set of reference transcripts). The error is saying that the target file does not contain the reference sequences listed in the bam file. The argument to the `-t` flag should be a FASA file that contains the sequence of the reference transcripts, and the names and lengths of those reference transcripts should match the names and lengths encoded in the BAM file. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-270007151:164,error,error,164,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-270007151,1,['error'],['error']
Availability,"Hi @schelhorn,. I've implemented these changes in the latest commit. Now, the behavior if fewer than 10 reads are assigned sample-wide will be to output a `quant.sf` file with all 0s and to record in the `meta_info.json` file the quant error that led to this output. Does this seem reasonable? Also, do you suggest that, even in this case, the return code be 0? In some sense, something very unexpected happened (i.e. you had no --- or by default, fewer than 10 --- mapping reads), so signifying that at the process level might be useful. However, if you require that every ""valid"" run of salmon return with code 0, I can see an argument against returning a non-standard status in this case.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/130#issuecomment-303472255:236,error,error,236,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/130#issuecomment-303472255,1,['error'],['error']
Availability,"Hi @seanken,. Thank you for reporting this. I agree this error message should always show up. My guess is that this is related to the fact that the error is reported through the asynchronous logger, which is notoriously picky about how it must be torn down to avoid dropping messages on atypical (non-zero) program exit. I'll see if I can make this one show up reliably. By the way, do you have a small pair of FASTQ files that will trigger this error?. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/736#issuecomment-1018119606:57,error,error,57,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/736#issuecomment-1018119606,5,"['down', 'error', 'reliab']","['down', 'error', 'reliably']"
Availability,"Hi @seboles ,. My guess is that the issue is related to this (non-salmon) error appearing before each salmon output:. ```; basename: extra operand ‘lightreceptor-1_S114_L005_R1_001.qc.fq.gz’; Try 'basename --help' for more information.; ```. it looks like there is an error in the way the paths to the files are being provided for the jobs, which is resulting in an incorrect command line being provided to salmon (and the index not being properly located). It's also of note that this is on the command line:. ```; -1 *R1_001.qc.fq.gz -2 R2_001.qc.fq.gz; ```. which is trying to expand a wildcard before read 1 but not read 2; is that intended?. Any idea what the output is if you run:. ```; #!/bin/bash -l ; #SBATCH -J male_salmon_map; #SBATCH -t 700:00:00; #SBATCH -p high; #SBATCH --cpus-per-task=24; source ~/.bashrc; source activate salmon; cd /home/seboles/abaloneraw/salmon_quantification/salmon_male/abalone_orfs/; ls -la salmon_index; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-514816761:74,error,error,74,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-514816761,2,['error'],['error']
Availability,"Hi @shalercr,. I agree that if each sample runs as quickly as you see here, it's not a big deal to just re-run them all. Note that, while my avoids ~116 times more (eventually-discarded) alignments than did yours, the difference in the number of discarded _fragments_ (i.e. fragments that had no mapping) is very small — ~7,000, or 0.023% of the fragments. Thus, despite the huge speed-up, I wouldn't expect many differences in the quantifications. However, I couldn't argue against re-quantifying everything with the new version just for good measure :). When you have a chance, please do let me know if you see this same performance difference using the pre-compiled (linux) binary [here](https://drive.google.com/file/d/1tPyOPW3Y8l86RS0-zBRLh0wCt3VTpkNw/view?usp=sharing). Of course, once we finalize this release (soon), we will push to bioconda so we will also have OSX binaries available. However, I just want to make sure this fixes things on your end as well before the release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644796608:884,avail,available,884,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644796608,1,['avail'],['available']
Availability,"Hi @shanmugavadivelps,. This is because, to properly find and link libiconv, the build requires a version of CMake that ships with FindIConv.cmake. So, to build salmon from source, you should have at least CMake version 3.12. Internally and on our continuous integration servers, we use version 3.15. . Also, I'll mention that it may not be essential to build from source. Salmon is available via Bioconda, and a docker image is available via DockerHub. Also, we have a pre-compiled binary that should work on many linux distributions available under our [releases](https://github.com/COMBINE-lab/salmon/releases).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-557149581:383,avail,available,383,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-557149581,3,['avail'],['available']
Availability,"Hi @shnmunk,. Yes, the `--noLengthCorrection` flag is recommended for nanopore based quantification. We expect (and generally observe) that there is not a fragmentation effect in ONT data. Therefore, it is recommended that you use the `--noLengthCorrection` flag with ONT data. You are correct that this make the setting of `--fldMean` and `--fldSD` irrelevant, since there is no length effect applied during the EM algorithm. The other point of note is that selective-alignment is not really designed for long reads, so folks typically use salmon with external alignment for quantifying long-read data (minimap2 is a popular choice). Currently, it's necessary to turn off the read error model `--noErrorModel` when processing long-read alignments, as the long read error profiles are very different form those of short reads. However, this is a temporary issue, as a long-read error model has been developed and is in the pipeline. For the time being though, `--noErrorModel --noLengthCorrection` is the relevant set of flags to get the best results with long-read RNA-seq (either cDNA or direct RNA). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/602#issuecomment-748729130:682,error,error,682,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/602#issuecomment-748729130,3,['error'],['error']
Availability,"Hi @silvanopiazza,. It would seem that this pre-compiled binary is making use of an instruction that is not available on the CPU on which you are executing `salmon`. In this case, there are a few alternatives:. * Try and run the command through a Docker image — the latest salmon is always available on [Dockerhub](https://hub.docker.com/layers/8712688/combinelab/salmon/latest/images/sha256-1c0b7e5b8a0996b6080cfc76fcd4e565f8c92689fe3cf1debc8b7493ae964c14?context=repo).; * Try and [install salmon via bioconda](https://anaconda.org/bioconda/salmon). The bioconda build may be making fewer assumptions about the target architecture than the pre-compiled github binary.; * Compile salmon from source locally. This will, of course, guarantee to only use instructions available on your hardware, though it's the most involved of these options.; ; Let me know if any of these work for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1143871440:108,avail,available,108,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1143871440,3,['avail'],['available']
Availability,"Hi @silvernano,. Though alignment stringency parameters can have an effect here, the problem of comparing the abundance of a specific transcript within the context of different annotations is more fundamental. That is, apart from the transcript of interest, the ""background"" of related transcripts may be different. Consider the following case:. You have an annotation with 2 transcripts annotated for your gene:. ```; [A, B, C]; [A,C]; ```. Where `A`, `B`, and `C` are exons and the `[A,B,C]` notation means the transcript is exon `A`, followed by `B`, followed by `C`. Now, imagine that in annotation 2, you just have:. ```; [A,C]; ```. That is, the other isoform `[A, B, C]` is missing from annotation 2. Now, imagine that, in reality, `[A,B,C]` is highly expressed in your sample and `[A,C]` is lowly expressed. Under annotation 1, you get (correct) high expression for `[A,B,C]` and low expression for `[A,C]`. However, in annotation 2, since you still have to describe the `A` reads and the `C` reads, you get high expression for `[A,C]` since the reads contained within `A` and within `C` still map well there — the reads that map to `B` and to the `A-B` and `B-C` junction will likely just go un-mapped (which explains a difference in mapping rate). Now if you compare `[A,C]` across databases ... you will see big differences. This is not really related to the alignments that are observed, but rather how the data (reads) must be explained conditioned on the transcriptome (annotation) you have available. In other words, in loci with substantial unannotated transcription, the annotation used can definitely have a considerable effect on the quantification results. How to best assess, detect, and mitigate these effects is an active area of research, but I can point you at papers like [this](https://www.life-science-alliance.org/content/2/1/e201800175) and [this](https://www.cell.com/cell-systems/pdfExtended/S2405-4712(19)30381-3).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/525#issuecomment-639057440:1505,avail,available,1505,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/525#issuecomment-639057440,1,['avail'],['available']
Availability,"Hi @sjackman , Thanks for you question. It is indeed a good observation to use salmon for combining separate CB and read-sequence fastq files.; Having said that, we have designed alevin to work with, and tested it on 10x-chromium `cellranger` pipeline which itself has a feature similar to mentioned above by you (enabled by flag `--dumpfq`). This feature takes in two separate files: one with CB+UMI and another with read-sequence, and performs initial whitelisting (knee based , more intelligent whitelisting happens downstream and needs deduplicated UMI counts or one can just optionally provide external whitelist), error corrects the CB, attaches it to the header (although not with tag `BX:Z`) of the read-sequence in the second file, and dumps it to the standard out. I might have to read a bit about `longranger` and its `FASTQ` format, but if you are familiar with the `longranger` pipeline and are sure that it uses 16+10 (CB+UMI) in one file and read-sequence in the second file, then I think you are good to try alevin with `--dumpfq` flag. Let us know how it goes and if you face any problem. . Note: Just put an extra flag `--noQuant` so that alevin knows to stop after dumping the fastq otherwise it will start performing downstream tasks.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395174284:519,down,downstream,519,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395174284,3,"['down', 'error']","['downstream', 'error']"
Availability,"Hi @sjroth , I think it's a warning (not error) with unstranded library, can you share the file `salmon-out/lib_format_counts.json` ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/753#issuecomment-1045154961:41,error,error,41,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/753#issuecomment-1045154961,1,['error'],['error']
Availability,"Hi @sjroth,. This is strange. I'll ping @k3yavi here to see if he has any thoughts about what might be going on.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/753#issuecomment-1045150809:35,ping,ping,35,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/753#issuecomment-1045150809,1,['ping'],['ping']
Availability,"Hi @sschmeier,. I just pushed a small improvement and bugfix that constitutes 0.8.2. I will make a PR to Bioconda for this. I had to add some stuff to the build file to comply with upstream requests for homebrew-science, so now 0.8.2 should make its way into both Bioconda and homebrew-science. I'll ping back here and close this issue when it's available. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/128#issuecomment-287486743:300,ping,ping,300,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/128#issuecomment-287486743,2,"['avail', 'ping']","['available', 'ping']"
Availability,"Hi @tamuanand & @k3yavi,. Actually, I think the `makefasta` bedtools command we use accepts a gff file directly (https://bedtools.readthedocs.io/en/latest/content/tools/maskfasta.html). So, it might make sense to have a flag (or automatically detect, but that can be error prone), and only run the line Avi links above if we have a GTF. If we have a BED or GFF file, we can just pass it directly to bedtools.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/384#issuecomment-503627124:169,mask,maskfasta,169,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/384#issuecomment-503627124,2,"['error', 'mask']","['error', 'maskfasta']"
Availability,"Hi @tamuanand ,. I don't understand the question. I think there is some mis understanding, genome is the decoys you have to just cat it with the transcriptome to create the gentrome, no extra processing is required. Unless, your suggestion is to maintain the concatenated transcriptome + genome in a tar ball ? If it is then I don't really see the use case as both the genome and transcriptome can be easily downloadable from either ensembl or gencode.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/444#issuecomment-550387405:408,down,downloadable,408,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/444#issuecomment-550387405,1,['down'],['downloadable']
Availability,"Hi @tamuanand,. Ok, it seems something simple with the preparation of the decoys.txt file. I'm looking into it. If you watch the log, you see the following output before the (intentional exit with status code 1):. ```; [2020-04-14 09:44:12.991] [puff::index::jointLog] [critical] The decoy file contained the names of 955 decoy sequences, but 953 were matched by sequences in the reference file provided. To prevent unintentional errors downstream, please ensure that the decoy file exactly matches with the fasta file that is being indexed.; [2020-04-14 09:44:13.304] [puff::index::jointLog] [error] The fixFasta phase failed with exit code 1; Command exited with non-zero status 1; 56.66user 9.14system 1:04.69elapsed 101%CPU (0avgtext+0avgdata 6902936maxresident)k; 3792inputs+16outputs (30major+3629051minor)pagefaults 0swaps; ```. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/505#issuecomment-613451792:430,error,errors,430,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/505#issuecomment-613451792,6,"['down', 'error']","['downstream', 'error', 'errors']"
Availability,"Hi @tamuanand,. Thanks @k3yavi for pointing out the major idea. Just to fill in some more details. The implementation of SA is, as Avi mentions, part of the mainline salmon code now (in the develop and master branch). We link, in the README, to some pre-constructed decoy-aware transcriptomes, but you can build your own for any organism where you have the transcriptome, the genome, and an annotation, using the script Avi linked to. There are a few ways to enable selective alignment, and the details are listed with the relevant flags in the release notes (we will be updating the documentation shortly with more detailed examples as well). Specifically, you can pass salmon the `—validateMappings` flag, which turns on selective alignment with some reasonable default parameters. You can, instead, pass the flag `—mimicBT2`, which is a meta-flag that enables selective alignment, and turns on a few other things that make the alignments more similar to the Bowtie2 parameters we discuss in the paper (e.g. it disallows orphan alignments). Finally, there is the `—mimicStrictBT2` flag, which mimics Bowtie2 parameters that disallow indels; however, we generally don’t recommend this flag unless you have a particular reason for using it. For any of these, once you’ve built a decoy-aware index, you need not do anything else special during quantification. We’ll ping back here with more details once we have more examples in place etc.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499303095:1365,ping,ping,1365,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499303095,1,['ping'],['ping']
Availability,"Hi @tharvesh — The error suggests that memory allocation failed when trying to build the suffix array. I'm guessing from what I can tell from the log (e.g. the fact that the 64-bit index is being invoked, suggesting the input contains > 2^31 nucleotides), that you actually tried to build an index on the GENCODE **genome** plus a set of extra transcripts. Salmon (unlike Cufflinks, but like RSEM, TIGAR, eXpress, etc.) should be used with the **transcriptome**, not the **genome** of the target organism. That is, if you want to use GENCODE (say, in human), you should be indexing either (ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_human/release_24/gencode.v24.transcripts.fa.gz) or (ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_human/release_24/gencode.v24.pc_transcripts.fa.gz), not e.g. (ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_human/release_24/GRCh38.primary_assembly.genome.fa.gz).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/39#issuecomment-176783177:19,error,error,19,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/39#issuecomment-176783177,1,['error'],['error']
Availability,"Hi @tillea and @nileshpatra, thanks for the report (and ping). Can you point me to a Docker / Singularity container of the relevant Debian build so I can try and reproduce locally? This will make debugging much easier. For example, I am unable to reproduce this issue building the latest release from the `master` branch using the latest [official Debian image](https://hub.docker.com/_/debian). In particular, release 1.10 addresses a rare (but stubborn) segfault that certainly was present in 1.9. However, the fix for this is in the corresponding tagged release of pufferfish, which is pulled in by the build script when salmon is built.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1462538853:56,ping,ping,56,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1462538853,1,['ping'],['ping']
Availability,"Hi @tillea and @nileshpatra,. Ok, I dug deeper and found out what's going on. The culprit is, in fact, `libcereal`. The problem is that `libcereal` bumped patch versions only since the version corresponding to the headers included in `pufferfish`, but their changes are not, in fact, backwards compatible! This lead to a version mismatch between the headers used in `pufferfish` and the headers found from the installed package, ultimately resulting in an assertion failure in `rapidjson` (which cereal is using) and a segfault. On the plus side, this was relatively easy to fix by bumping the included cereal headers in pufferfish. I also updated the `Findcereal.cmake` module and added a version constraint so that we now require the new version (1.3.2). This is now tagged and released as `salmon 1.10.1`. Please give that a go when you have a chance. I'll note that, before this is added upstream in debian, I'd still advocate for fixing the `libstaden` package to update to the new version. I'd also recommend moving to dependencies like the ones I've included above to remove some really antiquated dependencies that salmon no longer requires but are still being pulled in. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1465096711:466,failure,failure,466,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1465096711,1,['failure'],['failure']
Availability,"Hi @tillea,. It seems this is exactly the problem. The build deps here are not quite correct. There are dependencies that salmon no longer has, and some of the dependencies it does have are out of date and can't be used from upstream (e.g. libstaden in the latest version, among others). On the bright side, it's not the dynamic linking alone that is problematic. The following works fine on my end:. ```{bash}; $ docker pull debian:testing; $ docker run -it debian:testing; $ echo ""deb-src http://deb.debian.org/debian unstable main"" > /etc/apt/sources.list.d/10-debsrc.list; $ apt-get update; $ apt-get upgrade; $ apt-get install build-essential git libboost-all-dev liblzma-dev libbz2-dev cmake zlib1g-dev curl unzip wget libcurl4-openssl-dev libtbb-dev libtbb12 liblzma-dev libjemalloc2 pkg-config libgff-dev; $ wget https://github.com/COMBINE-lab/salmon/archive/refs/tags/v1.10.0.tar.gz; $ tar xaf v1.10.0.tar.gz; $ cd salmon-1.10.0; $ mkdir build && cd build; $ cmake -DCMAKE_BUILD_TYPE=Release -DUSE_SHARED_LIBS=TRUE -DBZIP2_LIBRARIES=-lbz2 -DBZIP2_INCLUDE_DIR=/usr/include -DLIBLZMA_INCLUDE_DIR=/usr/include/ -DLIBLZMA_LIBRARY=lzma -DCMAKE_MODULE_PATH=/usr/share/cmake/Modules -DTBB_WILL_RECONFIGURE=FALSE -DBOOST_WILL_RECONFIGURE=FALSE ..; $ make -j8; $ make install; $ make test; ```. This is preferring dynamic linking, and the resulting installed executable runs fine without a segfault. Can you try this on your end? Then the thing to do may be to find what is discordant between the packages I install above and what gets pulled in by `apt build-dep salmon`. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464182279:477,echo,echo,477,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464182279,1,['echo'],['echo']
Availability,"Hi @tillea,. So I went through the list of deps pulled in by `apt build-dep salmon` and the minimal set I gave above. I tried to make the smallest number of changes I could to the `apt build-dep salmon` list while also removing things that are clearly outdated (we no longer use jellyfish, rapmap, etc. and we use the header-only version of spdlog). As a result I came up with this list of dependencies. The offending dependency seems to be `libcereal-dev`. Specifically, I was able to install just this list of dependencies (minus `libcereal-dev`) atop a clean `debian:testing` and get a working version where the only thing downloaded from the internet was the appropriate version of the pufferfish files grabbed by `fetchPufferfish.sh` in the `1.10.0` release. Once I installed `libcereal-dev` with `apt-get install`, and rebuilt, then I got the segfault mentioned at the top of this issue. So, it seems that we either have to let `salmon` build it's own libcereal, or figure out what the problem is with the library upstream. Please let me know if this you observe this same behavior as well (also @nileshpatra may want to try this out). If so, perhaps we can get `libstaden` updated upstream, and then use this as the new dep list for `salmon`. I installed these deps with a simple `xargs apt-get install -y < deps_sorted_updated.txt` (without `libcereal-dev` for the working version, and with it included, as below, for the segfault). Best,; Rob. [deps_sorted_updated.txt](https://github.com/COMBINE-lab/salmon/files/10949233/deps_sorted_updated.txt)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464986376:626,down,downloaded,626,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464986376,2,['down'],['downloaded']
Availability,"Hi @tmmse,. I have a feeling this is a python 2 vs. python 3 issue. I just ran your data through the script without problem on my end, but my default python install is still 2.7. When using a Python 3 install, I get the same error you're seeing. I updated the script so that it should now be python3 compatible. You can find that version [here](https://github.com/COMBINE-lab/salmon/blob/develop/scripts/ConvertBootstrapsToTSV.py). Please let me know if it works for you. These changes should be in the next release as well (which should land soon).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-336901461:225,error,error,225,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-336901461,1,['error'],['error']
Availability,"Hi @tomsing1,. Thanks for following up on this --- I was scratching my head about why multiple libraries might be causing an issue. Both `--seqBias` and `--gcBias` are relatively new features, and have definitely undergone more testing under the ""quasi-mapping"" codepath than the alignment-based codepath (though it's passed our internal regression tests on both). That being said, bias correction is equally valid regardless of whether you're using quasi-mapping or quantifying from a bam file directly. I'd be happy to take a look if you can provide a small example (a subset of the reads in the bam file?) that triggers the behavior. One thought might be that, for some reason, positions in the bam file could disagree with what's provided in the corresponding fasta. However, that's just a guess and I'd have to try and debug the segfault once I can reproduce it. Thanks again for the detailed error report and the update!. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-261738431:898,error,error,898,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-261738431,1,['error'],['error']
Availability,"Hi @vals,. This is very interesting, as we've been doing quite a bit of testing and (to the contrary) have found v0.4.0 to perform substantially _better_ than v0.3.x. Out of curiosity, could you check how v0.4.0 performs _without_ `--useVBOpt`? Obviously, if you continue to see this regression, I'll be happy to try and dig down deeper, but I might need you to provide some testing data. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-111538228:325,down,down,325,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-111538228,1,['down'],['down']
Availability,"Hi @vals,; I'm still trying to track down this bug and figure out why it occurred in the first place. I've been working on a different way to deal with reclaiming the resources that caused the problem before and was wondering if you'd be willing to test the attached binary to see if it still segfaults on your data. ; Thanks! [SalmonBeta-0.6.1_DebianSqueeze.tar.gz](https://github.com/COMBINE-lab/salmon/files/87914/SalmonBeta-0.6.1_DebianSqueeze.tar.gz)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-171038135:37,down,down,37,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-171038135,1,['down'],['down']
Availability,"Hi @vasisht,. Actually, the settings of these flags aren't incorrect according to the [SAM spec](https://samtools.github.io/hts-specs/SAMv1.pdf):. > Bit 0x4 is the only reliable place to tell whether the read is unmapped. If 0x4 is set, no assumptions can be made about RNAME, POS, CIGAR, MAPQ, and bits 0x2, 0x100, and 0x800. That is, if the unmapped flag is set, then there is not a specific ""correct"" setting for these other fields, since they should most likely be ignored anyway. That being said, concordant with some small changes in the [most-recent RapMap](https://github.com/COMBINE-lab/RapMap/releases/tag/v0.4.0), the CIGAR string will be set to `*` for unmapped reads in future versions of Salmon. We may consider setting other fields to `*` for unmapped reads to simplify the output, but, as the SAM spec suggests, these fields offer quite a bit of freedom in terms of ""legal"" values if the unmapped flag is set anyway.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/94#issuecomment-250350189:169,reliab,reliable,169,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/94#issuecomment-250350189,2,['reliab'],['reliable']
Availability,Hi @vbontempi96 — I don't know how bioconda is actually handling building for the new Mac archs. I'll ping @dpryan79 who would know what's currently being done and what the plan is.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-984930979:102,ping,ping,102,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-984930979,1,['ping'],['ping']
Availability,"Hi @vertesy ,. Thanks for asking the very interesting question.; I'd say the answer might depend on what's your downstream use case. Traditionally, no quantification pipeline, in my knowledge, has used the pre-mRNA counts alone to bump up the gene counts, however, recent method of estimating RNA-velocity does utilizes the intronic counts for extracting the ratio of spliced/unspliced counts. If you are interested in disjoint signals (gene count matrix) for spliced and unspliced molecules you can use the recent scheme of decoy indexing from our latest [preprint](https://www.biorxiv.org/content/10.1101/657874v2). We (mostly @csoneson) have been testing alevin with following scheme for generating spliced and unspliced counts. 1.) Spliced Counts: Index transcriptome w/ pre-mRNA sequence as the decoys.; 2) Unspliced Counts: Index pre-mRNA sequence w/ transcriptome as the decoys. The third case is a little tricky because if you index both pre-mRNA and transcriptome, due to relatively longer length of pre-mRNA sequence compared to transcripts it might end-up biasing the UMI deduplication algorithm towards unspliced counts. To summarize, the best way to have an additive spliced and unspliced counts is still an open area of research.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/450#issuecomment-555136444:112,down,downstream,112,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/450#issuecomment-555136444,1,['down'],['downstream']
Availability,"Hi @vivekabarath,. The final v0.12.0 has been released and is available via both the release page on github and via bioonda, so I recommend you use the official version. Regarding your specific question, the failure of the unit tests should not be a problem and doesn't affect salmon. However there was previously an issue that could cause the `make test` to fail if `make install` was not run first. This should be resolved in the latest release as well. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/315#issuecomment-444971569:62,avail,available,62,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/315#issuecomment-444971569,2,"['avail', 'failure']","['available', 'failure']"
Availability,"Hi @warrenmcg — Thanks for your interest in Salmon. There are actually a number of improvements since the pre-print as well! I'm very surprised as well that `curl` is not available by default on Ubuntu 14.04 (or some variants of the installation). It's actually a very common tool. One thing worth noting is that we also provide [pre-compiled binaries](https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0) for Linux and OSX, if users aren't looking for the ""bleeding-edge"" version of Salmon, or if their environment causes difficulty in compiling.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/42#issuecomment-186706128:171,avail,available,171,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/42#issuecomment-186706128,1,['avail'],['available']
Availability,"Hi @warrenmcg,. Thanks for this bug report. This error is caused by the `--useVBOpt` argument. The telltale sign that this is the cause is that the exception contains the text `Exception : [Error in function boost::math::digamma<long double>(long double): Evaluation of function at pole -nan]; salmon quant was invoked improperly.` The digamma function is used only in the `useVBOpt` codepath. . I can say that this behavior is never expected (i.e. it's not the case that due to the stochastic nature of the algorithm we sometimes expect to evaluate the digamma function on an argument of `-nan`). Actually, even if one could set a randomization seed, he could not make salmon purely deterministic unless it was restricted to a single thread. This is because the order in which reads are observed during the online phase of the algorithm can change, as a result of the multithreaded read parser (which is _ok_ since the absolute order of the reads in the file is, itself, random). What I suspect is that there is some corner case here where the argument to the `digamma` function should be checked for validity before the `digamma` function is called. The key, of course, is to find a small example that will reproduce this behavior so that the bug can be tracked down and fixed. In the meantime, my recommendation would be to remove the `--useVBOpt` option to Salmon. In this case, it will use the standard (rather than variational Bayesian) EM algorithm, which should yield similarly accurate results.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/48#issuecomment-196848149:49,error,error,49,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/48#issuecomment-196848149,3,"['Error', 'down', 'error']","['Error', 'down', 'error']"
Availability,"Hi @yeodynasty,. There are two different ways to tackle this question. The first relies on the fact that the correction employed by salmon for GC bias is done via the adjustment of transcript effective lengths. Here, you could compare the effective length in the quant.sf file to the effective length you would get ignoring GC-fragment (or other bias). Granted, the latter is not written down in the file here, but it is straightforward to calculate since salmon also writes out the fragment length distribution. ; The effective length discarding bias estimates is simply the transcript length, minus the mean of the conditional fragment length distribution (the fragment length distribution from 0 up to the transcript length, re-normalized to be an appropriate probability distribution). If you look at the differences between these values, you can infer how much bias correction was applied. Specifically, when the bias-corrected length is longer than the non bias-corrected length, then these transcripts are over-represented in sequencing and the bias correction aims to reduce their estimated abundance. On the other hand, when the bias-corrected length is shorter than the non bias-corrected length, then these transcripts are under-represented in sequencing and the bias correction aims to increase their estimated abundance.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/578#issuecomment-717267531:388,down,down,388,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/578#issuecomment-717267531,2,['down'],['down']
Availability,"Hi @yeodynasty,. This is because of the unfortunate conventions regarding the parsing of command line options in the presence of a flag that has an _implicit_ option. Specifically, the `--writeMappings` flag has an implicit option. Therefore, to provide an explicit option to the long-form argument flag, you must use the syntax `--writeMappings=<outputdir>`. So, your command would look something like:. ```; /gpfsdata/apps/salmon-latest_linux_x86_64/bin/salmon quant; -i /gpfshome/hockchuan/SALMON/GCF_900626175.2_cs10_index; -l ISR; -1 /gpfsdata/JangiLab/hockchuan/170302/2.Trimmomatic_output/clean_HEADBANDSTEM_1.fastq.gz; -2 /gpfsdata/JangiLab/hockchuan/170302/2.Trimmomatic_output/clean_HEADBANDSTEM_2.fastq.gz; --seqBias; --gcBias; --posBias; --incompatPrior 0.0; --geneMap /gpfsdata/JangiLab/hockchuan/cs10_reference_genome/GCF_900626175.2_cs10_genomic.gtf; --recoverOrphans; --allowDovetail; --threads $NSLOTS; --dumpEq; --minScoreFraction 0.65; --writeMappings=/gpfshome/hockchuan/SALMON/MAP/HEADBANDSTEM; --fldMean 250; --fldSD 25; --writeOrphanLinks; --writeUnmappedNames; --quiet; -o /gpfshome/hockchuan/SALMON/HEADBANDSTEM_quant; ```. let me know if this resolves your issue. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/573#issuecomment-709323564:868,recover,recoverOrphans,868,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/573#issuecomment-709323564,1,['recover'],['recoverOrphans']
Availability,"Hi Andrea,. The bias correction time depends on the number of expressed transcripts. There is a flag to speed it up `--biasSpeedSamp`. It takes a value by which to downsample the fragment length pmf for bias modeling. The larger this number, the faster bias correction will become. The default is 1, and is super conservative (we are probably going to make the default 5 in the next release because it is much faster with no real difference in modeling quality). In fact, values up to at least 10 seem to work quite well with respect to the baseline. So, I'd recommend testing this parameter on a sample until you are happy with the speed, and then using that on all samples. Let me know how it goes, and if my description makes sense. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/201#issuecomment-369766969:164,down,downsample,164,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/201#issuecomment-369766969,1,['down'],['downsample']
Availability,"Hi Andreas,. So I don't know if there is a easy way to get the specific list of reverse dependencies, but then we can cross-check it with my explicit list above:. ```; build-essential; git ; libboost-all-dev ; liblzma-dev ; libbz2-dev ; cmake ; zlib1g-dev ; curl ; unzip ; wget ; libcurl4-openssl-dev ; libtbb-dev ; libtbb12 ; liblzma-dev ; libjemalloc2 ; pkg-config ; libgff-dev; ```. One thing I noticed during build is that, while I included `libjemalloc2` here, the salmon build procedure still downloaded and built `jemalloc`. However, I don't _think_ jemalloc is the thing causing the segfault. Regarding dependencies that can't be used — the current `libstaden` is behind the upstream release. The upstream release contains an important bug fix for a bug (and suggested fix that we proposed to the developer) upon which we rely. More importantly, afaik there is no relevant `libpufferfish-dev` package (we certainly have not made one), and so there is not even e.g. a check in the `CMakeLists.txt` file. Salmon's build always tries to run `fetchPufferfish.sh` to download the relevant `pufferfish` source files needed to build `salmon`. Critically, the relevant `pufferfish` dependencies and `salmon` releases move in lockstep. Each new `salmon` release it accompanied by a new tag in the `pufferfish` repo (so that the specific source used to build a given `salmon` release is fixed and easily trackable). So, I think the easiest way to move forward is to:. * do a diff of my list of packages above with what is pulled in by `apt build-dep salmon`. * figure out why, even when `libjemalloc2` is installed, the build system tries to build `jemalloc` itself (maybe we need the dev package?). * determine what folks want to do upstream about the lockstep pufferfish dependency. Right now, the `fetchPufferfish.sh` script pulls a tagged tarball from github and checks that the sha matches, and moves the relevant source files into place. This is true both when we build our own releases as well as",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233:499,down,downloaded,499,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233,1,['down'],['downloaded']
Availability,"Hi Avi, thanks for your detailed explanation!. From my understanding: a pre-selection of high-quality cells based on 1) CB frequency - finding the knee point (in the initial whitelisting) and 2) other features (in finalized/intelligent) whitelisting is performed in alevin, while [cell ranger count](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/algorithms/overview#cell_calling) does step 1) related to the `--expectCells` number and used an alternative method w/o knee point estimation. . Based on above, the newly included cells w/ increased number of `--expectCells` are also more likely to be filtered out in later steps using criteria such as `min of number of features/reads` detected per sample. But such filtering may not be expected if interests are also on cells with small transcriptomes such as TILs. I will try some downstream filtering to see how many good cells I can get. . Yeah it helps - thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510639440:870,down,downstream,870,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510639440,1,['down'],['downstream']
Availability,"Hi Avi,. Thanks for the detailed reply. I was able to run it (see logs below), but I had to use `ISR`, not `ISF` to get it to work. I also had to add these two settings as well; `--freqThreshold 1 --lowRegionMinNumBarcodes 100`. . I am not sure why the `ISF` option didn't work, but probably it has something to do with the guide sequences I was provided. At any rate, I have a few other questions I hope you can help me answer. 1. Why does increasing --maxNumBarcodes to 200000 results in no barcodes getting corrected? (See log for Run 2 below). What is the rationale for the current default of 100000? ; 2. For the downstream analysis of such data, I usually work with both the read and UMI counts, but `quants_mat.gz` only contains the UMI counts. Can Alevin a produce a matrix of read counts as well. It would be a great feature to add. For now, what is easiest way to get the cell x feature matrix of read counts if I use the ` --dumpEq` or `--dumpBfh` flags? Can *tximport* be used for this or do I need to use the Python [parser]([https://github.com/k3yavi/vpolo/blob/master/vpolo/alevin/parser.pyl]) first?. I will be sending you some reads from the experiments for unit testing shortly. Thanks!. Run 1: `salmon alevin -l ISR --citeseq --barcodeLength 16 --umiLength 10 --end 5 --featureStart 19 --featureLength 21 --maxNumBarcodes 100000 --freqThreshold 1 --lowRegionMinNumBarcodes 100`. > 20-06-04 12:24:47.610] [alevinLog] [info] set CITE-seq minScoreFraction parameter to : 0.797619; > [2020-06-04 12:24:47.610] [alevinLog] [info] Found 64 transcripts(+0 decoys, +0 short and +0 duplicate names in the index); > [2020-06-04 12:24:47.610] [alevinLog] [info] Filled with 64 txp to gene entries ; > [2020-06-04 12:24:47.610] [alevinLog] [info] Found all transcripts to gene mappings; > [2020-06-04 12:24:47.616] [alevinLog] [info] Processing barcodes files (if Present) ; > ; > [2020-06-04 12:26:04.322] [alevinLog] [info] Done barcode density calculation.; > [2020-06-04 12:26:04.322] [alev",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638991199:618,down,downstream,618,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638991199,2,['down'],['downstream']
Availability,"Hi Bill,. You probably shouldn't be including the transcript version number (the; trailing . 2) when using grep, to be safe. It's possible that you could; have a different transcript version so there isn't any profit in being so; exact. Jim. On Fri, Oct 12, 2018, 9:03 PM wedelma <notifications@github.com> wrote:. > Hi Rob,; >; > Thanks to both you and Jim for helping with this, since I'm the one who; > actually need some help. I've tried indexed using v0.11.0 then the latest; > version. Both, with the same transcriptome you tried doesn't result in; > duplicates when I grep ""ENST00000617214.2"". Telling me I'm getting a; > different result from your grep. I don't know why. I will be downloading; > the latest version of the human transcriptome and using latest salmon to; > index, and I should see these duplicate transcripts in the duplicate; > clusters file, like you did, likely resolving my issue. We had older data; > which is why I used an older version of the human transcriptome, which I; > will not be doing anymore. I'll keep you posted and thanks for the help!; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429498684>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFqmvIVbfG6l9DaQQiKnkYPO1UGGQQ90ks5ukTvAgaJpZM4XaDfK>; > .; >",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429499670:690,down,downloading,690,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429499670,1,['down'],['downloading']
Availability,"Hi Brian,. In general, I would argue that one should be cautious with removing PCR duplicates in RNA-seq data (unless you are dealing with reads with UMI tags). This is because reads that align to the same reference position can easily have come from alternative transcripts sharing the same underlying sequence. Hence, the normal tests used to infer PCR duplicates with e.g. DNA-seq reads can yield false-positives in RNA-seq. This is particularly true for highly abundant transcripts (or transcripts from highly-abundant genes). We are currently working on the code that will do duplicate removal when UMI tags are present. That methodology can be extended to remove duplicates even without UMI tags --- though I'd generally caution against that for the reasons mentioned above. However, for the time being, if you have a strong need or desire to filter PCR duplicates, you could use alignment-based Salmon with a BAM file that has duplicates removed. Finally, regarding the error you are getting during SAM validation; this sounds like a different issue. Would you mind providing a piece of that SAM file for me to take a look at? Specifically, I don't believe the quasi-mapping output file should even contain unmapped reads (unless you consider unmapped mates of orphaned reads). --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-305317281:977,error,error,977,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-305317281,1,['error'],['error']
Availability,"Hi Gert,. Indeed, the CMake build uses `curl` for downloading relevant dependencies. Presumably, it would be possible to have a fallback to `wget` if `curl` is not available. I will look into the best way to do this. In the meantime, you should be able to use the pre-compiled binary for linux (x86-64) or install Salmon via [bioconda](https://anaconda.org/bioconda/salmon). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-354673470:50,down,downloading,50,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-354673470,2,"['avail', 'down']","['available', 'downloading']"
Availability,"Hi James,. Indeed! No problem. Looking at the older annotation, it seems that the transcripts have slightly different lengths:. ```; >ENST00000617214 ensembl:known chromosome:GRCh38:CHR_HSCHR8_8_CTG1:1973878:2006943:1 gene:ENSG00000273645 gene_biotype:protein_coding transcript_biotype:protein_coding. >ENST00000320248 ensembl_havana_transcript:known chromosome:GRCh38:8:1973878:2006936:1 gene:ENSG00000176595 gene_biotype:protein_coding transcript_biotype:protein_coding; ```. I don't know if that's the _only_ difference between them or if they are spliced differently in the middle etc. Both salmon and seqkit only check for *exact* sequence duplication. If you wanted to try to dig more into what might be causing the differences you might consider `<salmon_quant_folder>/aux_info/ambig_info.tsv` which lists the transcripts in the same order as `quant.sf` but gives for each the number of uniquely mapping reads and the total number of potential reads. You could see if the unique evidence for the txps changes between conditions. However, given that Ensembl has changed their mind about these guys, maybe that's not a rabbit hole worth going down. Anyway, glad I could help!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429506265:1148,down,down,1148,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429506265,1,['down'],['down']
Availability,"Hi Jason,. Thanks for the super-detailed feedback! A couple of thoughts / questions:. > FYI, I am getting a segfault when I run only --posBias in the current salmon version, but if I run all the models together like --gcBias --seqBias --posBias, it completes fine. ~~Do you have a small example (ref / read pair) that reproduces this? It would be great to figure out why and fix it. We could split that into a new issue if you'd rather.~~. P.S. Nevermind; thanks to you mentioning this, I was able to track it down and fix it in develop!. > As I understand the selective alignment, the alignment scores are passed to the quantification step, but the position of the reads is not used downstream. . Well, yes and no. We make extensive use of the position when estimate the implied fragment length (distance between paired end reads) and then model the conditional probability of this fragment based on the global fragment length distribution. This is just as much as is done by e.g. RSEM. However, you are right that there is no notion of using the coverage profile in estimation (more on this below)!. > Also, my intuition for these transcripts is not really a coverage ""bias"" . My intuition agrees with yours here completely. First, this isn't really a coverage bias as we use the normal definition of the term. Second, the positional bias modeling in salmon is not on a per-transcript level (since that would be an astronomical number of different parameters to learn, and any procedure would almost certainly overfit). Instead, it groups transcripts into length bins, and learns a distinct coverage bias model per-bin. > It would be neat if Salmon could detect these kinds of dramatic dropoffs and add a warning or something... even if not incorporating the information into the quants... it could even be a good QC step to identify large deletions/insertions over a gene body. As far as I know, there are NO rnaseq quant programs that would handle this, because even something like a STAR -> RSEM ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-623047035:510,down,down,510,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-623047035,4,['down'],"['down', 'downstream']"
Availability,"Hi Kimon,. I was able to access the file with no problem. Unfortunately, I don't seem able to reproduce the issue! I grabbed the 0.7.1 release, in case there were any differences between that and the latest develop version that I usually use, and I tried to index your fasta. ```; ./salmon index -t ~/salmon/build/Homo_sapiens.GRCh37.transcripts.fa -i idx; Version Info: ### A newer version of Salmon is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains some new features and minor bug fixes; please upgrade at your; earliest convenience.; ###; index [""idx""] did not previously exist . . . creating it; [2016-11-04 12:41:37.805] [jLog] [info] building index; RapMap Indexer. [Step 1 of 4] : counting k-mers; counted k-mers for 30000 transcripts[2016-11-04 12:41:39.312] [jointLog] [warning] Entry with header [ENST00000415118], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.312] [jointLog] [warning] Entry with header [ENST00000434970], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.312] [jointLog] [warning] Entry with header [ENST00000448914], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.380] [jointLog] [warning] Entry with header [ENST00000439842], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.380] [jointLog] [warning] Entry with header [ENST00000390567], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.380] [jointLog] [warning] Entry with header [ENST00000452198], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.380] [jointLog] [warning] Entry with header [ENST00000390569], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.380] [jointLog] [warning] Entry with header [EN",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/100#issuecomment-258484912:404,avail,available,404,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/100#issuecomment-258484912,2,['avail'],['available']
Availability,"Hi Kivanc,. Thanks for the kind words, and thank you for the _extremely detailed_ report. Reports like this are a model of what every developer wishes a user did before filing an issue :). First, let me clear up what seems like might be a small source of confusion. Since both of the salmon runs are from v1.1.0, _neither_ of these are making use of quasi-mapping. Specifically, newer versions of salmon _only_ perform selective alignment (and this makes the `--validateMappings` command line argument redundant in newer versions, though we keep it so as to maximize backward compatibility with command line parameters people may be using). So, the main difference between your two salmon runs is inclusion of the decoy set. This almost certainly means that the reads that map in your second set of salmon runs but not your first are being assigned to decoys in the first case. To try and get a better handle on this, could you upload a `meta_info.json` file from both runs? This file lives in the `aux_info` directory, and it will provide information about e.g. how many reads were best mapped to decoys and were discarded for this reason. The guarantee you get from the selective alignment is that, if the fragment is discarded by decoy mapping, it maps _strictly better_ to the decoy than to the non-decoy sequence. There are many reasons this could happen. One is rRNA contamination, another could be that reads are coming from processed pseudogenes that are not properly in your annotation, yet a third is that your sample has a considerable fraction of reads spanning exon-intron junctions (in this case, the read will map better to the corresponding location on the genome, and worse to the annotate transcript where the intronic sequence is not present). Now, figuring out exactly which of these cases you are in is a bit more difficult, but one approach would be to pick one of the samples with the biggest differences and map to the reads to the genome with e.g. STAR or HISAT2 to see what y",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/479#issuecomment-578848875:502,redundant,redundant,502,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/479#issuecomment-578848875,2,['redundant'],['redundant']
Availability,"Hi Kristoffer,. The duplicate transcript issue is a frustrating one. It came to our attention when we noticed that ensembl often annotated transcripts on patch / haplotype contigs that were identical and unlikely to be different from more ""canonical"" transcripts in any way. Further, these transcripts are indistinguishable from the quantification perspective. That being said, the removal of sequence duplicate transcripts is optional in Salmon. If you pass `--keepDuplicates` to the indexer, it wont remove them. Also, Salmon does record, in the index directory, the ""collapsing map"". Specifically, there is a tsv file that record, for every collapsed transcript, the transcript that was sequence identical and retained in the index. You can use this map to recover the abundances for the collapsed transcripts, since they are all sequence identical, they should all have an abundance of x / num duplicates (where x is the abundance of the retained transcript). I hope this info helps. Let me know if there is anything else i can clarify or help with. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-381580235:760,recover,recover,760,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-381580235,1,['recover'],['recover']
Availability,"Hi Laurent,. I typically like to keep master compilable, which is why I pushed the boost 1.59 change after 1.57 became available on the previous host. If you're going to be compiling from source, v0.5.0 should be fine if you're using a system boost (and so don't have to fetch and compile one through CMake). Otherwise, it should be OK to compile from master, which currently doesn't have any substantial changes from v0.5.0. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/23#issuecomment-153182461:119,avail,available,119,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/23#issuecomment-153182461,1,['avail'],['available']
Availability,"Hi Mike,. Glad to hear this fixes it. I pushed a commit that does the check, prints out a useful error message (that suggests how you can make a compatible transcriptome fasta) and then bails. Regarding the `libParams` directory --- that is actually a somewhat anachronistic directory anyway. Currently, I've been moving all of the parameters into their own (gzipped) files in the `aux_info` directory. I've kept `libParams` there for backward compatibility sake, but I think it's confusing if the fld appears in multiple places, but the other parameters appear somewhere else, so perhaps it's time to remove it (and note such in the next version's release notes).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267610178:97,error,error,97,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267610178,1,['error'],['error']
Availability,"Hi Mohsen,. Thanks for looking into this!. I'm attaching a small dataset to reproduce the issue. I extracted the reads aligned to the region in the screenshot above (the snR40 transcript) for that sample. I've included two fasta files, one with the standard snR40 transcript, and one that has a second transcript called snR40_genomic which includes upstream/downstream sequences. Based on the image above, you would expect >90% of the reads to apportion to the smaller transcript, but instead I see the reads going ~50/50 when I run salmon on the fasta file with both indexes. . I've included an ""index"" folder with a script to build each index and a salmon.sh script to reproduce my results. My salmon binary version is 1.2.1. Please let me know if this works for you, or if you need anything else from me. Happy to share the full fastq files if that's helpful too. Thanks,; Jason. [snr40_example_github.gz](https://github.com/COMBINE-lab/salmon/files/4761633/snr40_example_github.gz)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-642307073:358,down,downstream,358,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-642307073,1,['down'],['downstream']
Availability,"Hi Nate,. Can you tell me / do you know how boost was compiled? The error you're getting looks like what happens when the version of boost against which salmon is attempting to link was not built with >= C++11. Basically, the newest version of salmon requires C++14 (which GCC 8 obviously supports). However, there are binary incompatibilities between pre-C++11 and post-C++11 code libraries. So, whatever version of boost you link against must have been compiled with at least `--std=c++11`. One option is to let salmon fetch and build boost for you by putting `-DFETCH_BOOST=TRUE` in the cmake configuration flags when calling `cmake`. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-436830925:68,error,error,68,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-436830925,1,['error'],['error']
Availability,"Hi Pete,. Yup, this would be my recommended way to handle it. Since salmon accepts streaming input, you could do something like:. ```; salmon quant -i index -l A -1 <(gzcat rep1_muliplex1_1.fq.gz rep1_mutliplex2_1.fq.gz) -2 <(gzcat rep1_multiplex1_2.fq.gz rep1_multiplex2_2.fq.gz) [other options etc.]; ```. to avoid creating the intermediate concatenated files on disk. This will treat all the multiplexed samples from the same replicate as one giant input read stream (conceptually representing a single replicate). As far as merging / combining Salmon output, if you're doing the downstream analysis in R, the tximport package is nice. Otherwise, @vals has a python tool [readquant](https://github.com/Teichlab/readquant) that can also do some merging. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/88#issuecomment-245412770:583,down,downstream,583,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/88#issuecomment-245412770,1,['down'],['downstream']
Availability,"Hi Rachel,. So it looks like `output/hs.grch39.index/versionInfo.json` doesn't exist here? Are there any other messages that show up during indexing? Also, v0.8.1 is very outdated at this point. It might be worth checking if this issue is still popping up if you grab the latest version (available both as a linux binary from the releases page, as well as via bioconda).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/197#issuecomment-467194457:288,avail,available,288,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/197#issuecomment-467194457,1,['avail'],['available']
Availability,"Hi Rob!; I think I got it, I might have posted too soon, I was too eager to run the latest Salmon :). Basically, for the first part of my question, if anyone else happens to run into here:; To successfully run Salmon Index 1.0.0+, three inputs are required:; 1. Transriptome FASTA; 2. Concatenated Transcriptome+Genome FASTA; 3. List of decoys (most likely the list of all contigs from the Genome FASTA); So on from version 1.0.0, any supplementary scripts aren't needed (as you properly specified in your latest instructions). . Regarding the second part of my question, the ERCC contigs and the error that Salmon Index gave:; The reason for this was that my ERCC entries look like this:; `ERCC-00002 ERCC exon 1 1061 0.000000 + . gene_id ""ERCC-00002""; transcript_id ""ERCC-00002"";`; i.e. the contig name and the transcript name is identical. ; This means that there will exist an entry in the Transcriptome FASTA file labeled as ERCC-00002, and an entry in the Genome FASTA file labeled as ERCC-00002.; Then, in the concatenated Transcriptome+Genome FASTA, there will first be transcript sequence ERCC-00002, and then a genome sequence ERCC-00002, which is labeled as decoy. ; Hence the error: non-decoy, then some decoys, then again the ERCC-00002 as non-decoy. So my solution here was just to omit the ERCC entries both from the decoy list and from the genome FASTA that gets concatenated to the transcriptome. They're still kept in the transcriptome FASTA, as this allows to look for expression results of these transcripts for downstream absolute normalization. Thanks for the answer Rob!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/481#issuecomment-583888968:597,error,error,597,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/481#issuecomment-583888968,3,"['down', 'error']","['downstream', 'error']"
Availability,"Hi Rob, . Thank you for the fast reply. I did some tests and ran the suggestions you told me. Everything comes down to the reference i used. The mapping rates are still low (44 - 54 %) but they have increased when I mapped the reads with Salmon allowing for more genes in the reference. Thank you for the useful suggestions though, I will incorporate them in my future evaluations.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/212#issuecomment-379253109:111,down,down,111,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/212#issuecomment-379253109,1,['down'],['down']
Availability,"Hi Rob, thanks for the quick reply.; I tried what you suggested and I tried with adding the bioconda channel but still got the same error, however adding the conda-forge and bioconda channels to the conda config solved it. Maybe it needed access to conda-forge to find the boost and libcxx packages?. ```; $ conda config --add channels conda-forge; $ conda config --add channels bioconda; $ conda create -n salmon salmon=0.9.1; Solving environment: done. ## Package Plan ##. environment location: /Users/Jb_Macbook/miniconda3/envs/salmon. added / updated specs: ; - salmon=0.9.1. The following packages will be downloaded:. package | build; ---------------------------|-----------------; tk-8.6.7 | 0 3.0 MB conda-forge; mkl_random-1.0.1 | py36_0 371 KB conda-forge; boost-1.64.0 | py36_4 304 KB conda-forge; libiconv-1.15 | 0 1.3 MB conda-forge; clangdev-4.0.0 | default_0 62.8 MB conda-forge; bzip2-1.0.6 | 1 145 KB conda-forge; xz-5.2.3 | 0 304 KB conda-forge; certifi-2018.1.18 | py36_0 143 KB conda-forge; pip-9.0.3 | py36_0 1.7 MB conda-forge; tbb-2018_20171205 | 0 404 KB conda-forge; boost-cpp-1.64.0 | 1 16.2 MB conda-forge; ncurses-5.9 | 10 1.1 MB conda-forge; jemalloc-4.5.0 | 0 4.1 MB bioconda; salmon-0.9.1 | 1 2.6 MB bioconda; numpy-1.14.2 | py36ha9ae307_1 4.0 MB; sqlite-3.20.1 | 2 1.4 MB conda-forge; setuptools-39.0.1 | py36_0 552 KB conda-forge; llvmdev-4.0.0 | default_0 100.9 MB conda-forge; icu-58.2 | 0 22.7 MB conda-forge; readline-7.0 | 0 383 KB conda-forge; libcxx-4.0.0 | 1 1.1 MB conda-forge; zlib-1.2.11 | 0 95 KB conda-forge; libxml2-2.9.8 | 0 1.9 MB conda-forge; wheel-0.31.0 | py36_0 62 KB conda-forge; python-3.6.5 | 1 13.9 MB conda-forge; mkl_fft-1.0.1 | py36_1 146 KB conda-forge; ------------------------------------------------------------; Total: 241.7 MB; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-379821279:132,error,error,132,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-379821279,2,"['down', 'error']","['downloaded', 'error']"
Availability,"Hi Rob,. Finished compiling and it no longer throws that error. Thanks for the help!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/5#issuecomment-110488164:57,error,error,57,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/5#issuecomment-110488164,1,['error'],['error']
Availability,"Hi Rob,. I checked the cdna.fa files I downloaded from Ensembl and indeed there is a difference. In Ensembl v.75 the version number was not included in the fasta header, in v.91 it is.; e.g. . grep ENST00000518611 *cdna.ncrna.fa; Homo_sapiens.GRCh37.75.cdna.ncrna.fa:>ENST00000518611 cdna:novel chromosome:GRCh37:8:26247878:26268564:1 gene:ENSG00000104765 gene_biotype:protein_coding transcript_biotype:protein_coding; Homo_sapiens.GRCh38.91.cdna.ncrna.fa:>**ENST00000518611.5** cdna chromosome:GRCh38:8:26390362:26411048:1 gene:ENSG00000104765.15 gene_biotype:protein_coding transcript_biotype:protein_coding gene_symbol:BNIP3L description:BCL2 interacting protein 3 like [Source:HGNC Symbol;Acc:HGNC:1085]. while in the gtf file the transcript_id is still ENST00000518611 and version transcript is indicated separately. The gtf file does not have transcript_id ENST00000518611.5. just ENST00000518611. I don't mind parsing the gtf file to a tsv mapping. If I want to use a tsv file, what should be its format - just 2 columns - first one with transcript ID (just as it appears in the fasta file - in this case ENST00000518611.5) , second one with the gene ID?. Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/198#issuecomment-365984195:39,down,downloaded,39,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/198#issuecomment-365984195,1,['down'],['downloaded']
Availability,"Hi Rob,. I did some follow up using your suggestions, and I had indexed my; transcriptome incorrectly, but now it appears that I am having a separate; issue and was hoping that you might be able to point me in the right; direction? Here is my command:. ```#!/bin/bash -l; #SBATCH -J male_salmon_map; #SBATCH -t 150:00:00; #SBATCH -p high; #SBATCH --cpus-per-task=24; source ~/.bashrc; source activate salmon; cd /home/seboles/abaloneraw/salmon_quantification/SALMON_MALE/; for i in *.qc.fq.gz; do; salmon quant -i maleredabalone_index --libType IU -1 *R1_001.qc.fq.gz -2; *R2_001.qc.fq.gz ${i} -o ${i}_quant --seqBias --gcBias --validateMappings; done```. And here is the error message that I receive:. ```[2019-07-29 14:31:12.352] [jointLog] [error] You passed paired-end files; to salmon, but you passed 12 files to --mates1 and 13 files to --mates2.; You must pass the same number of files to both flags; Name : male_salmon_map; User : seboles; Partition : high; Nodes : c11-71; Cores : 24; GPUs : 0; State : FAILED; Submit : 2019-07-29T14:31:01; Start : 2019-07-29T14:31:02; End : 2019-07-29T14:31:13; Reserved walltime : 6-06:00:00; Used walltime : 00:00:11; Used CPU time : 00:00:09; % User (Computation): 54.66%; % System (I/O) : 45.33%; Mem reserved : 2000M/core; Max Mem used : 0.00 (c11-71); Max Disk Write : 0.00 (c11-71); Max Disk Read : 0.00 (c11-71)```. I have gone back and checked the directory containing the PE reads, and; they are all accounted for, so I am a little stumped at the moment. I; appreciate any advice you may have. Happy Monday,. Sara. On Wed, Jul 24, 2019 at 3:04 PM Rob Patro <notifications@github.com> wrote:. > Hi @seboles <https://github.com/seboles> ,; >; > My guess is that the issue is related to this (non-salmon) error appearing; > before each salmon output:; >; > basename: extra operand ‘lightreceptor-1_S114_L005_R1_001.qc.fq.gz’; >; > Try 'basename --help' for more information.; >; >; > it looks like there is an error in the way the paths to the files ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516173395:672,error,error,672,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516173395,2,['error'],['error']
Availability,"Hi Rob,. I don't have git (don't have root access on the red hat server im on). I downloaded the salmon-master.zip, and then tried running the following:. ```; [bernsteinnj@lngnode1 salmon-master]$ cmake . . -- The C compiler identification is GNU 4.4.7; -- The CXX compiler identification is GNU 4.4.7; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; CMake Error at CMakeLists.txt:69 (message):; Salmon requires g++ 4.7 or greater.; ```. I'm trying now with -k 27 with the original build I had. Keep you updated. Best",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/53#issuecomment-203018082:82,down,downloaded,82,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/53#issuecomment-203018082,2,"['Error', 'down']","['Error', 'downloaded']"
Availability,"Hi Rob,. I have downloaded the cdna and ncrna from ENSEMBL ftp site and merged, got the gtf file from the same site:. `http://useast.ensembl.org/info/data/ftp/index.html` . **Replaced the version issue as follows:** forward slash before dot, git removed it; >sed -i 's/\.[123456789]//g' Homo_sapiens.GRCh38.87.cdna.ncrna.fa`. **Indexed it:** ; >`salmon index -t Homo_sapiens.GRCh38.87.cdna.ncrna.fa -i Homo_sapiens.GRCh38.cdna.ncrna.quasi.index`. `Did alignment:`. >`salmon quant -i /data1/genome/hg38_r87/Homo_sapiens.GRCh38.cdna.ncrna.quasi.index -l ISR -1 1013_S7_R1_001.fastq.gz -2 1013_S7_R2_001.fastq.gz -p 8 -o 1013_quant -g /data1/genome/hg38_r87/Homo_sapiens.GRCh38.87.chr.gtf`. **Tried this too:**; >`salmon quant -i /data1/genome/hg38_r87/Homo_sapiens.GRCh38.cdna.ncrna.quasi.index -l ISR -1 1013_S7_R1_001.fastq.gz -2 1013_S7_R2_001.fastq.gz -p 8 -o 1013_quant -g /data1/genome/hg38_r87/Homo_sapiens.GRCh38.87.gtf`. Got this error:; >`[2017-03-01 14:52:23.285] [jointLog] [warning] couldn't find transcript named [ENST00000615101] in transcript <-> gene map; returning transcript as it's own gene; `; Did this: ; >`(rseqpipe) [ddjima@jima:1013_quant]$ grep ""ENST"" quant.genes.sf | wc -l; >21370; (rseqpipe) [ddjima@jima:1013_quant]$ grep ""ENSG"" quant.genes.sf | wc -l; >56934; `. Seems don't find gene name for 21370 transcript ... Any idea?. Thank you very much!!!!!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/122#issuecomment-283453800:16,down,downloaded,16,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/122#issuecomment-283453800,2,"['down', 'error']","['downloaded', 'error']"
Availability,"Hi Rob,. I made such a stupid mistake, it is embarrassing to write it down, and I am ashamed of having wasted your time. Last time I used Salmon was to process a murine Chromium dataset... Copy/paste fossil ... :-( ; Time to call it a day.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/572#issuecomment-708555196:70,down,down,70,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/572#issuecomment-708555196,1,['down'],['down']
Availability,"Hi Rob,. I'm compiling it now. I ran into a different issue with this commit that took a little bit to track down. It looks like you switch from jellyfish 2.1.3 to 2.2.0. I was running into an issue with some undefined values, eraise and a few associated classes from jellyfish include/jellyfish/err.hpp that were present in 2.1.3 and seemingly removed in 2.2.0. Making it use 2.1.3 instead of 2.2.0 let it get past that point in the compilation (still ongoing). I'll get back to you about the impact of that commit.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/5#issuecomment-110484917:109,down,down,109,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/5#issuecomment-110484917,1,['down'],['down']
Availability,"Hi Rob,. I'm running from the empty directory 'build'. The cmake file and folder you mention are not there. . I downloaded here https://github.com/COMBINE-lab/salmon/releases: salmon-0.12.0_linux_x86_64.tar.gz. Unpacked it. Went into directory 'salmon-0.12.0_linux_x86_6'. Created new dir build/ (same level as bin and lib). Installed cmake with sudo apt-get. Attempted to run cmake from build/. . If I just type 'cmake':; Usage. cmake [options] <path-to-source>; cmake [options] <path-to-existing-build>. Specify a source directory to (re-)generate a build system for it in the; current working directory. Specify an existing build directory to; re-generate its build system. Run 'cmake --help' for more information. So it looks installed I would think.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449066012:112,down,downloaded,112,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449066012,1,['down'],['downloaded']
Availability,"Hi Rob,. Thanks for your reply. When I run salmon --version I get this:. ```; <jemalloc>: MADV_DONTNEED does not work (memset will be used instead); <jemalloc>: (This is the expected behaviour if you are running under QEMU); salmon 1.10.2; ```. I'm running the script using Nextflow in a Docker container. However whether I run the script locally, within Nextflow or on a HPC cluster, it weirdly runs using salmon v0.14.1 (despite me specifying in my environment.yml file to use 1.10.2) and gives the same error. I also installed Salmon through a bioconda channel, not sure if that has any impact. On your last point - I haven't noticed different versions being used but I'll look out for this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1766370214:506,error,error,506,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1766370214,1,['error'],['error']
Availability,"Hi Rob,. Thanks to both you and Jim for helping with this, since I'm the one who actually need some help. I've tried indexed using v0.11.0 then the latest version. Both, with the same transcriptome you tried doesn't result in duplicates when I grep ""ENST00000617214.2"". Telling me I'm getting a different result from your grep. I don't know why. I will be downloading the latest version of the human transcriptome and using latest salmon to index, and I should see these duplicate transcripts in the duplicate clusters file, like you did, likely resolving my issue. We had older data which is why I used an older version of the human transcriptome, which I will not be doing anymore. I'll keep you posted and thanks for the help!. Regards,. Bill Edelman",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429498684:356,down,downloading,356,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429498684,1,['down'],['downloading']
Availability,"Hi Rob,; That seemed to be the problem. I rebuilt the index on my laptop and salmon worked perfectly on my laptop!; Thanks,; Grant. On Mar 22, 2018, at 6:21 PM, Rob Patro <notifications@github.com<mailto:notifications@github.com>> wrote:. Hi @grantcramer<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fgrantcramer&data=01%7C01%7Ccramer%40unr.edu%7C54d34feceb114e30a61b08d5905c7a7b%7C523b4bfc0ebd4c03b2b96f6a17fd31d8%7C1&sdata=w1ED%2B5ZBUY6Z8fTiIs62IZJizv0HcvVzw8CtfEdK32E%3D&reserved=0>,. I was able to successfully index and map against the fasta file you link above (on linux). I was also able to index and map against the index on OSX, using the salmon from bioconda (v 0.9.1). So, I'm not yet able to reproduce this. It seems the file you uploaded for your pre-built index is no longer available, so I couldn't try that out. I'd be happy to give it a try if you can put it up on dropbox or some such. Otherwise, I wonder if there could be some sort of binary compatibility issue. Did you build the index on the same machine you're quantifying on? The OSX I tested on is 10.13.1. Best,; Rob. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FCOMBINE-lab%2Fsalmon%2Fissues%2F209%23issuecomment-375509050&data=01%7C01%7Ccramer%40unr.edu%7C54d34feceb114e30a61b08d5905c7a7b%7C523b4bfc0ebd4c03b2b96f6a17fd31d8%7C1&sdata=5XDT2ix1q1Uz%2B3kTchI%2B5K9Hzu7UuGkyQAz8KB9ko4o%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAj0RizznzcCphH-HJ9Q8uXvndQ4Lsg9Oks5thE43gaJpZM4Sw28q&data=01%7C01%7Ccramer%40unr.edu%7C54d34feceb114e30a61b08d5905c7a7b%7C523b4bfc0ebd4c03b2b96f6a17fd31d8%7C1&sdata=7DLxrFx74WqeN71%2Bs5cfSxEA1NRxj%2F7uqvp9SrGgjck%3D&reserved=0>.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/209#issuecomment-375683475:821,avail,available,821,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/209#issuecomment-375683475,1,['avail'],['available']
Availability,"Hi Rob,; since dog [as well as cow and pig] is not well-annotated compared to human and mouse, I cannot post a link to the transcriptome fasta because, to the best of my knowledge, there is none officially provided/curated by a consortium for the current dog assembly. I downloaded the Ensembl annotation from UCSC (assembly: canFam3; track: Ensembl Genes; table: ensGene) and selected as output ""sequence - all upper case - repeat masking: lowercase"". That results in a transcriptome fasta of approx. ~350MB; Good luck with your deadline!. +Peter",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/66#issuecomment-233659056:271,down,downloaded,271,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/66#issuecomment-233659056,2,"['down', 'mask']","['downloaded', 'masking']"
Availability,"Hi Rob. I thought about this a little bit more. I am confused. We build the index from decoys. My understanding is that only reads that map to the decoy will be quantified. I am surprised to see that the name for mapped reads would show up in the unmapped_names.txt file. It seems like I need to use something like. Grep -v “$d”. to find the reads that did not map. Is this correct? I have been given the task of exploring our unmapped reads. Running grep is not a big deal. I just want to make sure I do not mess up my downstream analysis. By the way our lab is a huge fan of Salmon. ctrl.1.unmapped]$ cut -d "" "" -f 2 aux_info/unmapped_names.txt | sort | uniq -c; 519916 d; 39097 m1; 34534 m2; 747447 u. Kind regards. Andy. From: Rob Patro ***@***.***>; Reply-To: COMBINE-lab/salmon ***@***.***>; Date: Thursday, May 6, 2021 at 1:53 PM; To: COMBINE-lab/salmon ***@***.***>; Cc: ""andrew e. davidson"" ***@***.***>, Mention ***@***.***>; Subject: Re: [COMBINE-lab/salmon] salmon --writeUnmappedNames produced undocumented result (#657). Hi @aedavids<https://github.com/aedavids>,. Thanks for catching that this is undocumented! This means that the mapping type was determined as mapping to a decoy sequence. When we added this output into the code, the documentation wasn't updated accordingly. We'll update the documentation. Best,; Rob. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/COMBINE-lab/salmon/issues/657#issuecomment-833857753>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AN3VWAQ35L6PU3DKXYIM4ODTML6TPANCNFSM44HLOFXQ>.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/657#issuecomment-833928924:520,down,downstream,520,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/657#issuecomment-833928924,2,['down'],['downstream']
Availability,"Hi Roy,. I looks like things are going awry during seq-specific bias correction. Can you remove that option and see if it rubs to completion? If so, it would be great if you can share a sample that reproduces this error so we can fix the underlying issue. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/144#issuecomment-319665072:214,error,error,214,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/144#issuecomment-319665072,1,['error'],['error']
Availability,"Hi Ryan,. Thanks for your kind words regarding salmon! First, I'll point out that *if it is desired*, you can also use STAR+Salmon in much the same way you've used STAR+RSEM (though STAR+salmon will be faster). To your question, if you want to use salmon's built-in selective-alignment, while choosing a k-mer length for this data, then the general rule of thumb is that the k-mer length should not be much longer than about half of the read length. In general, the alignment procedure and ultimate quantification are pretty robust to the specific choice of k, but you may want to try out a few values for one or two samples. Given these read lengths, I'd probably choose a value in {21, 23, 25}. If you have any follow-up questions after looking at those results, I'd be happy to discuss further!. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/807#issuecomment-1293620131:525,robust,robust,525,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/807#issuecomment-1293620131,1,['robust'],['robust']
Availability,"Hi Ryan,. The difficulty is, indeed, exactly as you specify. Given a single-end read, one does not know the length of the _fragment_ from which it originates. In this case the ""right"" thing to do (the best thing we can do) is to consider the read as starting / ending a fragment of every possible length allowed by the user-provided fragment length distribution (with the contribution of each possible fragment weighted by the probability of observing a fragment of that length). In order to make this computationally feasible, one would have to do some clever pre-computation and thing a bit more about how to efficiently update the observed GC model (right now, each mapping contributes a single weight to the model, but under the naive implementation in the single-end case, each mapping would contribute different weights to each bin of the observed GC-bias curve, which would slow things down considerably). Also, as you point out, the quality of the correction would depend somewhat on the user providing appropriate parameters for the fragment length distribution mean and standard deviation — but this seems reasonable in the single-end case. That being said, I'm sure there's a way to handle this efficiently, I'd just have to think about it a bit. Regarding your second question; Salmon learns the fragment length distribution in paired-end data, but not with single-end data. Single-end data can provide a little bit of information (e.g. there is in upper bound on fragment lengths that one can infer based on single-end reads based on how far they map from the end of the transcript), but not enough information to reliably infer a fragment length distribution. cc @mikelove in case he has any thoughts on this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/83#issuecomment-243833424:893,down,down,893,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/83#issuecomment-243833424,4,"['down', 'reliab']","['down', 'reliably']"
Availability,"Hi Shaun!. This is strange! One thing that's strange about it is that this seems to be trying to pull down v0.8.2 rather than v0.9.1 --- is that correct? The stranger thing though is that it seem the ""fetchRapMap.sh"" script isn't being run, which means the following from the CMakeLists.txt is not being executed:. ```; if(NOT FETCHED_RAPMAP); exec_program(${CMAKE_CURRENT_SOURCE_DIR}/scripts/fetchRapMap.sh); set(FETCHED_RAPMAP TRUE CACHE BOOL ""Has RapMap been fetched?"" FORCE); endif(); ```. Any idea why this might be happening? Does the CI environment prohibit this for some reason?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367729441:102,down,down,102,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367729441,1,['down'],['down']
Availability,"Hi Tanya,. The only cases in which I've seen this before have had to do with corrupted input (most often with corrupted `.gz` files --- for which we have a fix to report and quit on the develop branch). Can you confirm that all of the files you are providing to salmon as input properly decompress without error? If so, would you be able to share the specific files causing the problem?. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/163#issuecomment-337916447:306,error,error,306,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/163#issuecomment-337916447,1,['error'],['error']
Availability,"Hi Valentine,. That's not good! I suppose that testing the gibbs sampling should be added to our standard set of regression tests. Can you provide me with a data set that reproduces this issue? I'll track it down and figure out why Gibbs is behaving badly. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/58#issuecomment-218878561:208,down,down,208,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/58#issuecomment-218878561,1,['down'],['down']
Availability,"Hi Victor,. Is it the case that `/n/data1/cores/bcbio/ej_rnaseq/tCells_KO/work/spikein/Flox5YFP0_B07_R/index` is an index of only your genes of interest? If so, that would explain what you're seeing. Salmon assumes that some non-zero fraction of reads map in your sample. In this case, I'd presume that if you have some samples where no reads map to any transcript of your gene of interest, then salmon will complain in exactly the manner mentioned above. Now that I think about it, there are actually two different scenarios that can cause the above. The first is if something goes wrong in the optimization (there should be no way for this to happen, and so it would be the result of a bug if it did). The second is actually if there are no mappable reads. That's not the result of a bug, or even an ""error"" per-se, but just very unexpected input (since, in a typical scenario, this would imply the reads are unmatched with the reference). It might make sense to handle this case separately. However, this is certainly what is causing the output in your case, and you can safely assume that here, were it not for this specific check, Salmon would return an estimated count of 0 for all transcripts in the index.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/119#issuecomment-278743839:803,error,error,803,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/119#issuecomment-278743839,1,['error'],['error']
Availability,"Hi again @GWW,. We have a hotfix for this that we are currently testing, but feel free to try it out if you have a chance. If you download the source from [here](https://github.com/COMBINE-lab/salmon/archive/hash-resize-hotfix.zip), or checkout the branch `hash-resize-hotfix`, you can pass alevin an extra hidden option `--maxHashResizeThreads` that allows you to limit the maximum number of threads used during the hash table resize. If you use `--maxHashResizeThreads 1`, at most one extra thread should be created during hash table resizing. Hopefully, this should fix the issue occurring in your execution environment. If so, please let us know so we can merge the fix back into develop (and then master).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395907924:130,down,download,130,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395907924,1,['down'],['download']
Availability,"Hi all - this looks like an old version of Trinity. I'd suggest upgrading. For any version of Trinity, you can look at the Dockerfile to see what the; corresponding compatibilities are for versions that get co-installed for a; fully functional package. For example, in the current release, you'll find:. https://github.com/trinityrnaseq/trinityrnaseq/blob/5ce78d2b6d63aaae9fe491408311ebaf158deaa6/Docker/Dockerfile#L235. best,. ~brian. On Fri, Feb 24, 2023 at 1:19 PM Rob Patro ***@***.***> wrote:. > I am not sure how the index here was created, but the actual error; > signifies that you are attempting to quantify the assembled transcripts; > using a recent version of salmon (1.9.0 in this case) against an index; > that was created by a *very old* version of salmon (pre 1.0). This is not; > supported, as the index format completely changed between pre v1.0 and post; > v1.0, and newer versions rely on a completely different data structure.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/832#issuecomment-1444189059>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABZRKX5M6TN6DEQJQCP2AALWZD3TRANCNFSM6AAAAAAVHFUQRA>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >. -- ; --; Brian J. Haas; The Broad Institute; http://broadinstitute.org/~bhaas <http://broad.mit.edu/~bhaas>",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/832#issuecomment-1444289845:562,error,error,562,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/832#issuecomment-1444289845,1,['error'],['error']
Availability,"Hi all,. bit of a manual workaround, but for each missing package I searched anaconda https://anaconda.org/, downloaded the package manually from downloads then installed the latest build of salmon using . conda install -c bioconda/label/main salmon. Hope this helps",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/308#issuecomment-507332196:109,down,downloaded,109,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/308#issuecomment-507332196,2,['down'],"['downloaded', 'downloads']"
Availability,"Hi k3yavi, yes you are correct regarding 1,2 & 3. Howver, at step 2, I generated mapped files as two separate files, *.R1.paired.fastq, *.R2.paired.fastq and individual *.singletons.fastq file. Used Hisat2 using -1, -2 and -U parameters with the respective files and generated bam files - used these files in Salmon then and encountered the error.; I can run Hisat2 again without the -U option and see if Salmon works!!. In a separate run, I used transcriptome.fasta file in the 1st step and generated bam file using Hisat2. Then used bam file in Salmon using transcriptome.fasta in the -t flag. Error below:. WARNING: Detected suspicious pair --- ; 	The names are different:; 	read1 : HWI-7001326F:36:C7J2GANXX:4:1302:8789:95937; 	read2 : HWI-7001326F:36:C7J2GANXX:4:2204:6152:63667; 	The proper-pair statuses are inconsistent:; read1 [HWI-7001326F:36:C7J2GANXX:4:1302:8789:95937] : proper-pair; mapped; matemapped. read2 : [HWI-7001326F:36:C7J2GANXX:4:1302:8789:95937] : no proper-pair; mapped; matenot mapped. [2017-07-07 10:53:31.160] [jointLog] [warning] . Does the bam files need to be sorted before using Salmon? Thanks",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/140#issuecomment-313546915:341,error,error,341,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/140#issuecomment-313546915,2,"['Error', 'error']","['Error', 'error']"
Availability,"Hi rob... Yep, I found it with a binary search of the fasta reference file. On Friday, October 9, 2015, Rob Patro notifications@github.com wrote:. > Thanks for reporting this. Certainly, failure should be more apparent. Out; > of curiosity, is the failure in building the index? It looks like loading; > the index didn't work, so was the space character that caused the problem; > in your reference file?; > ; > --Rob; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/COMBINE-lab/salmon/issues/22#issuecomment-146996488.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/22#issuecomment-147008848:187,failure,failure,187,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/22#issuecomment-147008848,2,['failure'],['failure']
Availability,"Hi scott,. Thank you for the detailed report. Im trying to reproduce the issue. So far, i have been unable to reproduce the issue on an ubuntu 16.04 or OSX box with either 0.11.1 or 0.9.1. My next test is to try on an ubuntu 14.04 docker container. I'm afraid there may be a system library issue involved. Could you try upgrading via bioconda as well to see if that helps? The latest linux release is available on bioconda.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-413855775:401,avail,available,401,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-413855775,1,['avail'],['available']
Availability,"Hi! I'm really sorry for taking so long to get back to you; things have been quite hectic this semester. The reason it's not being show is because it's been placed in a parameter group that is not made visible by default; the `--posBias` option itself is still available. It's definitely still experimental in that it has not been tested nearly as thoroughly as the other bias models. However, it is useable. Once we have performed more testing, it will migrate into the normal options and be better documented. If you gather any useful data while using this flag, we'd love some feedback!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/191#issuecomment-367448963:261,avail,available,261,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/191#issuecomment-367448963,2,['avail'],['available']
Availability,"Hi!. Sorry for not answering. I'm trying to get a small sample to replicate the error and misteriously I can't. I will try to update Alevin and run it in the big samples, then if it fails, try to send you the a sample to work with.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386#issuecomment-506225248:80,error,error,80,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386#issuecomment-506225248,1,['error'],['error']
Availability,"Hi, . Sorry for not mentioning it previously, can you please also attach/add the error log you are getting.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/549#issuecomment-660248736:81,error,error,81,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/549#issuecomment-660248736,1,['error'],['error']
Availability,"Hi, ; I have same issue using Salmon 1.4.0. * `grep ""^>"" <GRCh38.d1.vd1.fa | cut -d "" "" -f 1 > decoys.txt`; * `sed -i.bak -e 's/>//g' decoys.txt`; * `cat GDC.GRCh38_gencode.v22.fasta.gz GRCh38.d1.vd1.fa.gz > GRCh38.d1.vd1_gencode.v22_gentrome.fa.gz`; * `salmon index -t GRCh38.d1.vd1_gencode.v22_gentrome.fa.gz -d decoys.txt -i salmon_1.4.0/ -p 12 -k 31 --gencode`. [2021-04-07 12:31:14.685] [puff::index::jointLog] [warning] Removed 789 transcripts that were sequence duplicates of indexed transcripts.; [2021-04-07 12:31:14.685] [puff::index::jointLog] [warning] If you wish to retain duplicate transcripts, please use the `--keepDuplicates` flag; [2021-04-07 12:31:14.685] [puff::index::jointLog] [critical] The decoy file contained the names of 2779 decoy sequences, but 0 were matched by sequences in the reference file provided. To prevent unintentional errors downstream, please ensure that the decoy file exactly matches with the fasta file that is being indexed.; [2021-04-07 12:31:15.194] [puff::index::jointLog] [error] The fixFasta phase failed with exit code 1",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/644#issuecomment-815252574:860,error,errors,860,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/644#issuecomment-815252574,3,"['down', 'error']","['downstream', 'error', 'errors']"
Availability,"Hi, I am running salmon-1.9.0, but in quant bulk mode for rat from *.bam files it stops with this error `Segmentation fault (core dumped)`. --threads 10 and 10 cpu (each core is 5.3 GB) are allocated for this job. Thanks for your solution(s) in advance!. Hi again, I found this issue is related to multiple bam input files which I've done by -a parameter with a (space-separated) list of these files. It is fixed now if just run salmon per file individually.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-1239714634:98,error,error,98,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-1239714634,2,"['error', 'fault']","['error', 'fault']"
Availability,"Hi, I had previousl tried using the `--whitelist` option using the 10x barcode whitelist (they're available at `cellranger-2.0.0/cellranger-cs/2.0.0/tenkit/lib/python/tenkit/barcodes/737K-august-2016.txt` and `4M-with-alts-february-2016.txt`). This had the same output as not using them. I just reran alevin with the `--dumpFeatures` flag, attached are the barcodes. I forgot to mention that with cellranger we saw that the knee was very soft, there was no sharp drop, and that might be what's confusing salmon. I had looked at the documentation but did not see a way to manually specify the cutoff. It is also desirable to manually the first few barcodes, because those have abnormally more counts than would be expected. Here's a log-log histogram of the alevin frequency output; ![image](https://user-images.githubusercontent.com/12504176/42296042-b9a944c6-7fa5-11e8-9f33-02a178d249ce.png). [frequency.txt](https://github.com/COMBINE-lab/salmon/files/2164480/frequency.txt)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/245#issuecomment-402569828:98,avail,available,98,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/245#issuecomment-402569828,1,['avail'],['available']
Availability,"Hi, I have some kind the same error. I download the prebuild index from refgenie and I got exactly the same error message. . refgenie pull hg38/salmon_sa_index <- I downloaded the 16Gb of the index files. [2020-05-04 21:30:58.648] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2020-05-04 21:30:58.648] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2020-05-04 21:30:58.648] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2020-05-04 21:30:58.648] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2020-05-04 21:30:58.648] [jointLog] [info] parsing read library format; [2020-05-04 21:30:58.648] [jointLog] [info] There is 1 library.; [2020-05-04 21:30:58.701] [jointLog] [info] Loading Quasi index; Exception : [rapidjson internal assertion failure: IsObject()]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting. The son files of the index show this;; ls -lrth *json; -rwxrwxrwx 1 usr usr 1007 dic 14 00:41 info.json; -rwxrwxrwx 1 usr usr 96 dic 14 00:44 versionInfo.json. Any idea would be really appreciated,. Kind regards, ; Fer",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/251#issuecomment-623664770:30,error,error,30,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/251#issuecomment-623664770,5,"['down', 'error', 'failure']","['download', 'downloaded', 'error', 'failure']"
Availability,"Hi, I have the exact same issue, in that it is quite likely that some barcodes will be empty and I don't obtain any results now.; It seems that you (@k3yavi) closed the feature request when you closed this issue. was that your intention? I'll try to get the work around working, but it would be nice if there is a flag we could set in the future to ignore this error when running salmon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-409553247:361,error,error,361,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-409553247,1,['error'],['error']
Availability,"Hi, Rob. I'm seeing this same error `Cannot find source file`; ```; -- Configuring done; CMake Error at src/CMakeLists.txt:113 (add_executable):; Cannot find source file:; /tmp/salmon-20180222-8345-abjxc0/salmon-0.8.2/external/install/src/rapmap/RapMapFileSystem.cpp; Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp; .hxx .in .txx; ```; See the complete build log at https://circleci.com/gh/brewsci/homebrew-bio/491; Any ideas?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367590842:30,error,error,30,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367590842,2,"['Error', 'error']","['Error', 'error']"
Availability,"Hi, just wondering if you guys managed to understand what the source of my error was? I don't know if I just don't know how to work the sci-rna-seq3 data",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/813#issuecomment-1344464188:75,error,error,75,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/813#issuecomment-1344464188,1,['error'],['error']
Availability,"Hi,. I thought I would extend this issue rather than creating a new issue. Happy to create new if that would be better. I'm using the docker version of Salmon (latest version). I have also mounted a local directory. I'm getting the same error. (Note I have tried several different versions of the command, including the --no-version-check command). salmon index --gencode ; -t /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/gentrome.fa ; -d /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/decoys.txt ; -i /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/combined_index. Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; [2019-07-01 12:32:42.622] [jLog] [info] building index; [2019-07-01 12:32:42.628] [jointLog] [info] [Step 1 of 4] : counting k-mers. <Several warnings about transcripts that are disliked>. [2019-07-01 12:33:02.020] [jointLog] [info] Replaced 3801867 non-ATCG nucleotides; [2019-07-01 12:33:02.020] [jointLog] [info] Clipped poly-A tails from 1630 transcripts; [2019-07-01 12:33:02.041] [jointLog] [info] Building rank-select dictionary and saving to disk; [2019-07-01 12:33:02.248] [jointLog] [info] done; Elapsed time: 0.20793s; [2019-07-01 12:33:02.252] [jointLog] [info] Writing sequence data to file . . . ; [2019-07-01 12:33:04.501] [jointLog] [info] done; Elapsed time: 2.24861s; [2019-07-01 12:33:04.572] [jointLog] [info] Building 32-bit suffix array (length of generalized text is 469043886); [2019-07-01 12:33:08.681] [jointLog] [info] Building suffix array . . . ; success; saving to disk . . . done; Elapsed time: 61.4932s; done; Elapsed time: 171.743s; processed 12000000 positionsKilled. I can send log files if required. The problem I have is that I cannot seem to run quant without the quant function. salmon quant --validateMappings ; -i /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/combined_index -l IU ; -1 /home/RnaSeq/fastq/DM_4a_H_",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/389#issuecomment-507253562:237,error,error,237,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/389#issuecomment-507253562,1,['error'],['error']
Availability,"Hi,. Juugii, the problem seems to be stemming from the fact that, although you are using clang, you don't have lib++, or the development headers it provides installed. Thus, clang is failing to find the basic c++ library includes that it needs. The easiest way to get salmon is to install the latest version for Linux via Bioconda, or to use the docker image of the latest release (from dockethub) `combinelab/salmon:latest`, or, to download the pre-compiled Linux binary from the release page. If you really wish to compile from source, you could try installing libc++ and the development directories or, perhaps more easily, switching your compiler to GCC.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/263#issuecomment-410240722:433,down,download,433,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/263#issuecomment-410240722,1,['down'],['download']
Availability,"Hi,. Yes, I did install with bioconda. Thanks for the link to the precompiled; version, which I downloaded and unzipped. I'm sorry to be so ignorant (my; unix knowledge is 25 years out of date) but how/where should I install; this?. Also, currently ""which salmon"" gives me the bioconda version. I guess I; will need to add the path to the precompiled version on the end of my PATH; environment variable?. Thanks,; Michael. On Sat, Nov 24, 2018 at 3:51 PM Rob Patro <notifications@github.com> wrote:. > Hi @michael-brent <https://github.com/michael-brent> ,; >; > Did you, by any chance, install via bioconda? There is a known issue with; > the bioconda build on OSX. Can you try this; > <https://github.com/COMBINE-lab/salmon/files/2383948/salmon_0.11.4-pre_OSX.tar.gz>; > pre-compiled binary in the meantime to see if it works for you?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-441398017>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ArM27mCF3NQcGVuZHpU3-8mb2_6WI7NIks5uyb9egaJpZM4YxmdA>; > .; >",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-441447779:96,down,downloaded,96,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-441447779,1,['down'],['downloaded']
Availability,"Hi,; Downgraded to version 0.11.3 of salmon using conda and the segmentation fault doesn't occur anymore. So must be an issue in the conda build of version 0.12.0 of salmon. ; Thanks",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-457573475:5,Down,Downgraded,5,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-457573475,2,"['Down', 'fault']","['Downgraded', 'fault']"
Availability,"Hi,; I found the point, it was my fault... I've replaced salmon by a script calling salmon after changing the working directory, so salmon can both be in the PATH and find its libraries, forgetting that relative paths will hence not work.; I guess playing with LD_LIBRARY_PATH would be a better way to achieve that.; Sorry for the disturbance",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/420#issuecomment-524756680:34,fault,fault,34,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/420#issuecomment-524756680,1,['fault'],['fault']
Availability,"Hi,; It does not seem to work through bioconda, I am trying to install the latest release on OSX with conda but I keep getting the following error:. ```; $ conda install -c bioconda salmon ; Solving environment: failed. PackagesNotFoundError: The following packages are not available from current channels:. - salmon; - boost=1.64; - salmon; - libcxx==4.0.0. Current channels:. - https://conda.anaconda.org/bioconda/osx-64; - https://conda.anaconda.org/bioconda/noarch; - https://repo.anaconda.com/pkgs/main/osx-64; - https://repo.anaconda.com/pkgs/main/noarch; - https://repo.anaconda.com/pkgs/free/osx-64; - https://repo.anaconda.com/pkgs/free/noarch; - https://repo.anaconda.com/pkgs/r/osx-64; - https://repo.anaconda.com/pkgs/r/noarch; - https://repo.anaconda.com/pkgs/pro/osx-64; - https://repo.anaconda.com/pkgs/pro/noarch; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-379743230:141,error,error,141,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-379743230,2,"['avail', 'error']","['available', 'error']"
Availability,"Hi,; Thanks for your reply. Yes, this is very much possible that a spurious mapping to a longer transcript is masking the original mapping, I find it extremely interesting from a mapping perspective. ; There are two ways to track down this, if the read file and reference are sharable, I can try to track the mapping artifact, otherwise, I would request you to try [this branch](https://github.com/COMBINE-lab/salmon/tree/selective-alignment-09) of salmon. The build process of the branch is identical with Salmon, and below is the instruction to run it. ; ```. build/src/salmon index -t Nbv5.1_TrPrm_NtCorrect.fasta -t Nbv5.1_TrPrm_NtCorrect_index; build/src/salmon quant -i Nbv5.1_TrPrm_NtCorrect_index -la -r <read file> -o <quant_dir> --softFilter --editDistance 4 --rangeFactorization 4. ```; This branch is not exactly designed for single end data, but I would be interested to see if there is any change. If you can provide me with some example dataset I will push possible bug fixes ASAP.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-385753659:110,mask,masking,110,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-385753659,2,"['down', 'mask']","['down', 'masking']"
Availability,"Hi,; it goes literally in panic: . ```; panic: runtime error: slice bounds out of range. goroutine 1 [running]:; github.com/sylabs/singularity/internal/pkg/util/uri.Split(0x7ffd422b2b65, 0x1f, 0xc00003c195, 0xc0004852f0, 0xc0004e5c78, 0x929217); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/internal/pkg/util/uri/uri.go:104 +0x13e; github.com/sylabs/singularity/cmd/singularity/cli.replaceURIWithImage(0x19d2a60, 0xc0000b8900, 0x11, 0x12); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/cmd/singularity/cli/actions.go:189 +0x5d; github.com/sylabs/singularity/vendor/github.com/spf13/cobra.(*Command).execute(0x19d2a60, 0xc000030160, 0x12, 0x12, 0x19d2a60, 0xc000030160); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/vendor/github.com/spf13/cobra/command.go:755 +0x4ed; github.com/sylabs/singularity/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0x19d65c0, 0x0, 0xf6, 0xfc0b01); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/vendor/github.com/spf13/cobra/command.go:852 +0x2fd; github.com/sylabs/singularity/vendor/github.com/spf13/cobra.(*Command).Execute(0x19d65c0, 0x4, 0x1133611); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/vendor/github.com/spf13/cobra/command.go:800 +0x2b; github.com/sylabs/singularity/cmd/singularity/cli.ExecuteSingularity(); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/cmd/singularity/cli/singularity.go:114 +0x110; main.main(); 	/tools/others_tools/Go/go-1.11.2/src/github.com/sylabs/singularity/cmd/singularity/cli.go:16 +0x20; ```; with -e you clean environment before running container.; I haven't found how to add the environmental variable, but logging in as shell and exporting the variable, it works ( or at least, I discover that I have to rebuild the index since it was built with the old verision in RapMap). I'll see if there is another way to import the variable or I'll build an image with the env; Thanks ; Claudio",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/447#issuecomment-553005722:55,error,error,55,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/447#issuecomment-553005722,1,['error'],['error']
Availability,Hi; I reply as an author of the Scientific Reports paper referred to above. The salmon analysis was done in May 2018 using salmon v 0.9.1. I should have noted the version in the paper as I did for other software used - my slip up there.; It did take longer than expected to get the work written up and published. In the meantime there have been changes to Salmon. When I used it I am not sure the --noLengthCorrection flag was available ?? If it was then it wasn't apparent to me in the documentation.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565314277:427,avail,available,427,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565314277,1,['avail'],['available']
Availability,"Hm. I had to tweak a few bits in the cmake file for it to compile here due; to the firewall I'm behind (generally no ftp access) so it must have been a; side effect of that. I tried to make sure I was starting from a clean slate; to verify before posting, but guess I wasn't. Jason. On Tue, Jun 9, 2015 at 4:12 PM, Rob Patro notifications@github.com wrote:. > Strange! I should still be using Jellyfish 2.1.3 (; > https://github.com/COMBINE-lab/salmon/blob/master/CMakeLists.txt#L355).; > I'm not sure why it was fetching 2.2.0 for you. Anyway, I'm glad that this; > seems to resolve the error with the bias correction --- thanks for; > reporting back here. I'll probably roll this and a few other small changes; > into a v0.4.1 soon.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/COMBINE-lab/salmon/issues/5#issuecomment-110489862.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/5#issuecomment-110492510:588,error,error,588,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/5#issuecomment-110492510,1,['error'],['error']
Availability,Hmm strange! But `conda install salmon` still gives the same error for me.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137172685:61,error,error,61,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137172685,1,['error'],['error']
Availability,"Hmm, something's up. I just deleted my previous transcripts_quan directory, replaced salmon with this newer version, and ran the same command. It finishes almost immediately with a return value of 1. ```; $ /home/jorvis/salmon/bin/salmon quant -p 24 -i transcripts_index -l IU -1 R1.trimmed.PE.fastq -2 R2.trimmed.PE.fastq -o transcripts_quan; Version Info: This is the most recent version of Salmon.; # salmon (mapping-based) v0.6.0; # [ program ] => salmon ; # [ command ] => quant ; # [ threads ] => { 24 }; # [ index ] => { transcripts_index }; # [ libType ] => { IU }; # [ mates1 ] => { R1.trimmed.PE.fastq }; # [ mates2 ] => { R2.trimmed.PE.fastq }; # [ output ] => { transcripts_quan }; Logs will be written to transcripts_quan/logs; there is [2016-03-31 12:30:21.714] [jointLog] [info] parsing read library format; 1 lib; [jorvis@grid-1-3-4 salmon]$ echo $?; 1; [jorvis@grid-1-3-4 salmon]$ ls transcripts_quan; logs; [jorvis@grid-1-3-4 salmon]$ ls transcripts_quan/logs/; salmon_quant.log; [jorvis@grid-1-3-4 salmon]$ cat transcripts_quan/logs/salmon_quant.log ; [2016-03-31 12:30:21.714] [jointLog] [info] parsing read library format; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204011075:858,echo,echo,858,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-204011075,1,['echo'],['echo']
Availability,"Ho @rob-p,. I changed gcc version so many times, I changed cluster, nothing. I tried with conda and it works, kind of. But apparently the bioconda version the [0.101](https://anaconda.org/bioconda/salmon) and is not the latest:. ```; Version Info: ### A newer version of Salmon is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and minor bug fixes; please upgrade at your; earliest convenience.; ###; ```; Anything to be worried?; Thanks; F",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394448744:281,avail,available,281,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394448744,2,['avail'],['available']
Availability,Homebred-Science is still having some issues (but I don't think it's salmon's fault). However 0.8.2 is now available via bioconda :) https://github.com/bioconda/bioconda-recipes/pull/4208. Let me know if you have any problems. --Rob,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/128#issuecomment-287567714:78,fault,fault,78,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/128#issuecomment-287567714,2,"['avail', 'fault']","['available', 'fault']"
Availability,"Hrmm the first error looks like some missing symbols; strange, since it seems to be looking in the right place. Can you tell me what system / compiler etc. are being used?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201253665:15,error,error,15,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201253665,1,['error'],['error']
Availability,"I agree completely with that complaint. Originally, I started using TBB instead of OpenMP because OSX's clang compiler didn't have OpenMP support. It's possible I will revisit this decision in the future, as I think that is no longer the case. On the other hand, this bug looks not to be TBB's fault. I pushed a fix, but then I explicitly resized the hash *before* setting the max thread count. I just pushed an update to this branch --- can you see if that helps?. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396093096:294,fault,fault,294,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396093096,1,['fault'],['fault']
Availability,"I agree with the @roryk's suggestion and that was indeed the motivation to have whitelisting step downstream of deduplication in Alevin.; @pinin4fjords sounds good, I will add this into the todo list for next release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490165970:98,down,downstream,98,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490165970,1,['down'],['downstream']
Availability,"I also have had to submit indexing jobs with much larger resources and times since the switch to the new indexing method with whole genome decoys. Prior to this I could built and index asking for only 16GB of ram in minutes. Now, I have to request ~256GB of memory and it runs for 7-10 hours. These are just ""standard"" mouse transcriptomes (GENCODE M23). I should note that using 17-mers as my kmer length dramatically increased these requirements. I re-ran using 31-mers, and the time reduces to a couple of hours and only used ~20GB of memory. I've attached two files that have summaries of the resources used in the jobs I ran in the above. Everything about these jobs is the same, except for the k-mer lengths. I requested the same amount of resources for each, but you can see that the one labeled 31mer has drastically less ""ru_maxrss"", which is the maximum amount of memory used by the process (it's in KB, although it's not labeled in the log). I also noted that there weren't any hard page faults for either of the jobs (""ru_majflt""). The longer job did have more soft page faults/page reclaims (""ru_minflt""). I don't know if that's useful information or not. [qacct-17mer.log](https://github.com/COMBINE-lab/salmon/files/4172209/qacct-17mer.log); [qacct-31mer.log](https://github.com/COMBINE-lab/salmon/files/4172210/qacct-31mer.log)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-583526416:999,fault,faults,999,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-583526416,2,['fault'],['faults']
Availability,"I also tried on the `testing` image. For more detail, here are the steps performed (perhaps taking a look at the installed packages will highlight a difference, as I did this from a clean testing Docker image, so my environment had nothing else in it). ### Attempt to reproduce segfault on Debian:testing. ```{bash}; $ docker pull debian:testing. $ docker run -it debian:testing. $ apt-get update. $ apt-get install build-essential git libboost-all-dev liblzma-dev libbz2-dev cmake zlib1g-dev curl unzip wget libcurl4-openssl-dev. $ git clone https://github.com/COMBINE-lab/salmon.git; $ cd salmon; $ mkdir build && cd build; $ cmake -DNO_IPO=TRUE .. # GCC still doesn't handle LTO robustly; $ make -j8; $ make install; $ make test; ```. which leads to the output. ```; root@fd877e359439:/salmon/build# make install; [ 7%] Built target libcereal; [ 13%] Built target libtbb; [ 16%] Built target ntcard; [ 19%] Built target graphdump; [ 27%] Built target twopaco; [ 29%] Built target ksw2pp_sse2; [ 32%] Built target ksw2pp_sse4; [ 37%] Built target ksw2pp_basic; [ 38%] Built target ksw2pp; [ 59%] Built target puffer; [ 73%] Built target salmon_core; [ 76%] Built target alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:682,robust,robustly,682,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['robust'],['robustly']
Availability,I am also running the same MacOS 10.12.6 and having a similar issue. I cannot get the provided binary to work either. I still get segmentation fault. The index seems to build but quantifying any samples is where I receive 'segmentation fault: 11'. Thanks for any advice.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-442681558:143,fault,fault,143,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-442681558,2,['fault'],['fault']
Availability,"I am assuming what you are looking for is the ""effective lengths"" of the transcripts i.e. not just the original transcript lengths but instead corrected based on the quantification model. I think it's going to be tricky to generate that because of two major reasons: (1) salmon model does not perform length correction in single-cell mode mainly due to 3' single-end sequencing of the read it's hard to reliably estimate the fragment lengths (2) salmon in single-cell mode performs quantification at gene-level which makes it harder to predict effective length of the transcripts.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/693#issuecomment-916889943:403,reliab,reliably,403,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/693#issuecomment-916889943,1,['reliab'],['reliably']
Availability,"I am assuming you gave the `--chromium` to `pbmc_4k` data too and it's throwing error, since the above log doesn't seems to have it. I am puzzled because it should have complained much before starting reading the fastq. Can you please try the following command: ; ```; salmon alevin -p 10 -lISR --chromium --no-version-check -1 /path/to/downloads/10xPBMC/pbmc4k_S1_L001_R1_001.fastq.gz -2 /path/to/downloads/10xPBMC/pbmc4k_S1_L001_R2_001.fastq.gz -i /path/to/salmonIndex -o alevin_output --tgMap tx2gene.tsv; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410328801:80,error,error,80,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410328801,3,"['down', 'error']","['downloads', 'error']"
Availability,"I am getting a consistent segmentation fault 11 when running on the salmon tutorial on the provided arabidopsis data set. Details below:. salmon v0.11.3 on MacBook Pro (15-inch, 2016) macOS Sierra 10.12.6. The output is below. If I run the bash shell on all the A. thaliana samples it produces the same seg fault on each one. However the number that appears immediately before ""Segmentation fault"" (914 below) varies from one invocation to the next, even on the same data file. . I appreciate any help you can offer and I apologize in advance if there's something obvious I should have read or known about. (it seems like the lines below that are preceded by ### are coming out in fold face. They are not meant to.). (salmon) MacBook-Pro-2:salmon-tutorial brent$ bash quant_tut_samples.sh; Processing sample DRR016125; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; ### salmon (mapping-based) v0.11.3; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { athal_index }; ### [ libType ] => { A }; ### [ mates1 ] => { data/DRR016125/DRR016125_1.fastq.gz }; ### [ mates2 ] => { data/DRR016125/DRR016125_2.fastq.gz }; ### [ threads ] => { 8 }; ### [ output ] => { quants/DRR016125_quant }; Logs will be written to quants/DRR016125_quant/logs; [2018-11-24 15:08:09.785] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-11-24 15:08:09.785] [jointLog] [info] parsing read library format; [2018-11-24 15:08:09.785] [jointLog] [info] There is 1 library.; [2018-11-24 15:08:09.877] [jointLog] [info] Loading Quasi index; [2018-11-24 15:08:09.877] [jointLog] [info] Loading 32-bit quasi index; [2018-11-24 15:08:09.877] [stderrLog] [info] Loading Suffix Array ; [2018-11-24 15:08:10.319] [stderrLog] [info] Loading Transcript Info ; [2018-11-24 15:08:10.423] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-11-24 15:08:10.4",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/317#issuecomment-441396828:39,fault,fault,39,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/317#issuecomment-441396828,3,['fault'],['fault']
Availability,I am getting the same error on the latest binary distro. I am running CentOS Linux 7 (Core).; Does this affect the performance?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/277#issuecomment-440346529:22,error,error,22,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/277#issuecomment-440346529,1,['error'],['error']
Availability,"I am having trouble with this. I'm at the cmake step and don't really know what I'm doing wrong but keep getting the error:. `CMake Error: The source directory ""/home/csijcs/salmon-0.11.1-linux_x86_64/build"" does not appear to contain CMakeLists.txt`",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409436618:117,error,error,117,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409436618,2,"['Error', 'error']","['Error', 'error']"
Availability,"I am not sure how the index here was created, but the actual error signifies that you are attempting to quantify the assembled transcripts using a recent version of salmon (`1.9.0` in this case) against an index that was created by a _very old_ version of salmon (`pre 1.0`). This is not supported, as the index format completely changed between pre v1.0 and post v1.0, and newer versions rely on a completely different data structure.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/832#issuecomment-1444189059:61,error,error,61,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/832#issuecomment-1444189059,1,['error'],['error']
Availability,"I am trying to quantify these data at the transcript level which is why the number of features is this big. For the PBMC3k I was trying with a transcript to gene --tgMap but was still seeing the same error. I realized I forgot to update the path to the run.sh script when calling the 0.12.0 binary (I updated the path to the binary but no to the script). When running the wrapper in the 0.12.0 folder I could succesfully run alevin on the CD14 dataset, with or without the --forceCells 4000 flag. I tried to run alevin-0.12.0 on the PBMC 3k dataset but I got the same error. I am now trying to run it on all the FACS-sorted samples and I will see how that goes. I feel this is happening slightly inconsistently (although very frequently). Notably, it either happens after `Clearing EqMap; Might take some time.` or `Starting Import of the gene count matrix of size 5344x167268.`. I have had it happen once in the middle of the `Analyzed xxx cells (yy% of all)` phase. I just managed to succesfully process the CD19+ B cells from the 10x v1 dataset, I'll attempt to process the other FACS sorted samples overnight and let you know how it went. Thank you",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445109075:200,error,error,200,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445109075,2,['error'],['error']
Availability,"I am trying to replicate the issue but unfortunately I am not observing the similar behavior. Alevin should ideally be using 2 threads (at the same time) and the program seems to be crashing at the CB counting stage, which doesn't uses more than 3 threads (no matter the number of available/given threads). Having said that, can you please confirm that you observe the same behavior when you provide say `-p 4` ? Since Alevin has been designed to work in highly parallel environment (within given limits), although it's possible there is a some tricky corner case we might be missing when using 1 thread.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395824915:281,avail,available,281,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395824915,1,['avail'],['available']
Availability,"I am unsure what qualifies as many but on an input of 20M reads and an unsorted BAM file, I get around 600 lines of error in the log file, some of the reads have many alignments so the errors are redundant to some extent. The no. of unique reads' alignments that cause an error is perhaps 300.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1427049939:116,error,error,116,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1427049939,4,"['error', 'redundant']","['error', 'errors', 'redundant']"
Availability,"I am using the following commands:. ```; ./bin/salmon index -t ../Homo_sapiens.GRCh37.75.cdna.all.fa.gz -i transcripts_index --type quasi -k 31. ./bin/salmon quant -l A -i transcripts_index -r ../../rnaseq_data/SRR764785.fastq ../../rnaseq_data/SRR764786.fastq ../../rnaseq_data/SRR764787.fastq ../../rnaseq_data/SRR764788.fastq ../../rnaseq_data/SRR764789.fastq ../../rnaseq_data/SRR764790.fastq ../../rnaseq_data/SRR764791.fastq ../../rnaseq_data/SRR764792.fastq ../../rnaseq_data/SRR764793.fastq ../../rnaseq_data/SRR764794.fastq ../../rnaseq_data/SRR764795.fastq ../../rnaseq_data/SRR764796.fastq ../../rnaseq_data/SRR764797.fastq ../../rnaseq_data/SRR764802.fastq ../../rnaseq_data/SRR764803.fastq ../../rnaseq_data/SRR764804.fastq ../../rnaseq_data/SRR764805.fastq ../../rnaseq_data/SRR764806.fastq ../../rnaseq_data/SRR764807.fastq ../../rnaseq_data/SRR764808.fastq ../../rnaseq_data/SRR764809.fastq ../../rnaseq_data/SRR764810.fastq ../../rnaseq_data/SRR764811.fastq ../../rnaseq_data/SRR764812.fastq ../../rnaseq_data/SRR764813.fastq -1 ../../rnaseq_data/SRR764782_1.fastq ../../rnaseq_data/SRR764783_1.fastq ../../rnaseq_data/SRR764784_1.fastq -2 ../../rnaseq_data/SRR764782_2.fastq ../../rnaseq_data/SRR764783_2.fastq ../../rnaseq_data/SRR764784_2.fastq -o transcripts_quant; ```; and I get the following error and no .sf file in output:; ```; processed 783000000 fragmentsrag: 3.56267[2017-04-11 20:17:10.337] [jointLog] [info] Automatically detected most likely library type as IU; hits: 184962311, hits per frag: 0.236263couldn't dequeue read chunk; couldn't dequeue read chunk; couldn't dequeue read chunk; couldn't dequeue read chunk; ```. Am I using the commands wrong?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/131#issuecomment-293391845:1316,error,error,1316,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/131#issuecomment-293391845,1,['error'],['error']
Availability,"I apologize, I misread one of the previous threads on segmentation faults. Upon downloading and running the precompiled linux binary provided in this thread https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409436938 the program ran to completion. Sorry for that!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/268#issuecomment-413045028:67,fault,faults,67,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/268#issuecomment-413045028,2,"['down', 'fault']","['downloading', 'faults']"
Availability,"I attempted to use the new --ont error model that has been developed for Salmon but am getting the same error mentioned here. **To Reproduce**. Which version of salmon was used?; salmon version: salmon 1.5.1, minimap2 version: 2.20-r1061; How was salmon installed (compiled, downloaded executable, through bioconda)?; Installed through bioconda.; Which reference (e.g. transcriptome) was used?; Custom generated transcriptome (Stringtie2, merged with ensembl release 104 Hg38); Which read files were used?; Nanopore reads.; Which which program options were used?; salmon quant -p {threads} -t {input.trs} -l MSF -a {input.bam} -o {output.tsv_dir} --ont; Desktop (please complete the following information):; Ubuntu 20.04.2 LTS",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-872309220:33,error,error,33,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-872309220,3,"['down', 'error']","['downloaded', 'error']"
Availability,"I can confirm that the problem in the log is not creating the exception error raised by this issue and the indexing procedure took care of the potential duplicates due to repeated names. There is something else going on. I used the binary from github and indexed, it seems to work on our end. @rob-p thoughts ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-549155511:72,error,error,72,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-549155511,1,['error'],['error']
Availability,"I can't seem to reproduce this locally (OSX 10.13.1). However, what happens if you try:. `> conda install salmon=0.9.1`. do you see this version as available? Does it try to install it?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364824034:148,avail,available,148,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364824034,1,['avail'],['available']
Availability,"I changed the BUILD_COMMAND to use gmake. I also ran 'export MAKE=gmake', and used gmake to run the output of cmake. . BUILD_COMMAND sh -c ""gmake ${QUIET_MAKE} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}"". Unfortunately, the BWA included with Salmon is broken on FreeBSD. . kthread.c:70:2: error: unknown type name 'int64_t'. The one on Git (https://github.com/lh3/bwa) works though. So I modified DOWNLOAD_COMMAND to grab the one from Git. . DOWNLOAD_COMMAND git clone https://github.com/lh3/bwa bwa-master. Next problem, it tries to build TBB and fails. This is two problems, because I have TBB, I passed it the path, and it fails to use it. The output of cmake says:. -- Could NOT find TBB (missing: tbbmalloc_proxy) (found suitable version ""2018.0"", minimum required is ""4.4""). tbbmalloc_proxy.h is present in /usr/local/include/tbb. Moving on, TBB fails to build because it's hard coded to use make. I fixed this and it built. BUILD_COMMAND gmake ${QUIET_MAKE} CXXFLAGS=${TBB_CXXFLAGS} lambdas=1 compiler=${TBB_COMPILER} cfg=release tbb_build_prefix=LIBS. Staden-io_lib fails to build with: ; /usr/bin/ld: undefined reference to symbol `pthread_create@@FBSD_1.0' (try adding -lthr); //lib/libthr.so.3: could not read symbols: Bad value. As advertised, -lthr fixed this issue. ; CONFIGURE_COMMAND ./configure --enable-shared=no --without-libcurl --prefix=<INSTALL_DIR> LDFLAGS=-lthr CFLAGS=${LIBSTADEN_CFLAGS} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}. This leads me to an error I can't fix on my own. /home/esiefker/salmon/fresh-salmon/include/BWAMemStaticFuncs.hpp:36:36: error:; use of undeclared identifier 'MEM_F_SELF_OVLP'; int start_width = (opt->flag & MEM_F_SELF_OVLP)? 2 : 1;. There is a similar Debian bug which is fixed: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=818397. I could not find the fix mentioned. https://github.com/COMBINE-lab/salmon/commits/master?author=satta. I have done my best, but I am stuck. I hope this is helpful for those more skilled than I.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-337390415:1615,error,error,1615,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-337390415,2,['error'],['error']
Availability,"I don't know enough about the Alevin code base but I think you are using intel thread buildling blocks. I did notice on [stackoverflow](https://stackoverflow.com/questions/3786408/number-of-threads-used-by-intel-tbb) that . > You must keep the tbb::task_scheduler_init object alive after this, or it will revert back to automatic. Perhaps there's a place where the init object is being destroyed before the different parallelization steps are complete?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395842118:276,alive,alive,276,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395842118,1,['alive'],['alive']
Availability,"I don't see any files named `*CMakeLog*`. Which file exactly do you need? I see…; ```; CMakeFiles/CMakeError.log CMakeFiles/CMakeRuleHashes.txt; CMakeFiles/CMakeOutput.log CMakeFiles/TargetDirectories.txt; ```; Here's a gist: https://gist.github.com/sjackman/6e15b7dfebaaad99b9476aa5ce269fda; This error is reproducible like so:; ```sh; docker run -it linuxbrew/linuxbrew brew install -sdv https://raw.githubusercontent.com/sjackman/homebrew-bio/dab661f902c5841e0d498eb338975c47080a1118/Formula/salmon.rb; ```. Ignore `FormulaUnavailableError: No available formula with the name ""xorg""`; and select `5. shell` to get a shell prompt",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367793075:298,error,error,298,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367793075,2,"['avail', 'error']","['available', 'error']"
Availability,"I don't think sequencing errors of the UMI's is a big issue. I was thinking more of the reads. I've been thinking in terms of (read, UMI) pairs and (transcript, UMI) pairs, and what the relation between them is. Now, during mapping, an equivalence class get a count every time a read is mapped to it right? How feasible would it be to keep track of all UMI's which have been assigned to an equivalence task?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-269042747:25,error,errors,25,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-269042747,1,['error'],['errors']
Availability,"I downloaded the binary, both times.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-394752289:2,down,downloaded,2,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-394752289,1,['down'],['downloaded']
Availability,"I downloaded the package from here ; https://anaconda.org/bioconda/salmon/files; then I opened the package up with ""The Unarchiver.app"", so I downloaded linux one, and open up the package with ""Unarchiver.app"", I didn't see any library files -libtbbmalloc.dylib, libtbbmalloc_proxy.dylib and libtbb.dylib. ; ![Screen Shot 2020-05-03 at 4 17 25 PM](https://user-images.githubusercontent.com/64718774/80924960-3ee52880-8d5a-11ea-8fbc-5cf4537f0129.png); ; Then I just installed Conda, but I have no idea how to install the package, sorry, I have ground zero coding knowledge",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623175345:2,down,downloaded,2,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623175345,2,['down'],['downloaded']
Availability,"I faced the same problem and found a simple solution. The trick is at line 585 of the cMakeList.txt. ""if (${TBB_VERSION} VERSION_GREATER_EQUAL 2018.0)"". It checks if you have tbb version 2018 or above. If you install tbb BEFORE running cmake, it will fulfill the requirement and bypass installing tbb in the make command, hence bypass the error. The solution:; 1. Delete the salmon folder and download a fresh one from github; 2. sudo apt update (this step is very important, to update the packages to be above version 2018) ; 3. sudo apt-get install libtbb-dev; 4. (Optional) apt-cache policy libtbb-dev (check the version of libtbb, it should be 2019 or above); 5. Then follows the standard installation (cmake, make etc.) The error should disappear and compile successfully. Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-610977958:339,error,error,339,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-610977958,6,"['down', 'error']","['download', 'error']"
Availability,I get the same error in buliding 3' UTR index and expect the next version.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/451#issuecomment-558448799:15,error,error,15,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/451#issuecomment-558448799,1,['error'],['error']
Availability,I got the same error and a segmentation fault while processing single-read data using salmon 0.10.2. My command was:; `salmon quant -i <transcripts_index_folder> -l A -r <some_R1.fastq> -o <output_quant_folder>`; Are Salmon working on this since August?. Update: Using Salmon version 0.11.4 solved the issue for me.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/265#issuecomment-435715951:15,error,error,15,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/265#issuecomment-435715951,2,"['error', 'fault']","['error', 'fault']"
Availability,"I got the same error but under Ubuntu 20.04.; After Installing boost 1.60.0 manually it initially seemed to work, but then I got the following error:. ```; Error, cannot determine salmon version installed from (salmon: symbol lookup error: salmon: undefined symbol: _ZN5boost15program_options3argE; ) at /usr/local/bin/trinityrnaseq-v2.11.0/Trinity line 3969.; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-696784484:15,error,error,15,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-696784484,4,"['Error', 'error']","['Error', 'error']"
Availability,"I got this error and was surprised to find the cause. I've added `--no-version-check` now, but I agree the default of phone-home behaviour is not great.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/277#issuecomment-447030871:11,error,error,11,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/277#issuecomment-447030871,1,['error'],['error']
Availability,"I had a similar error, but was able to fix it by adding the line:; export LD_LIBRARY_PATH=/path/to/lib:$LD_LIBRARY_PATH ; to my .bashrc file, so maybe that's something to try if you haven't already. (There's a similar issue described here: #219).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/845#issuecomment-1570842745:16,error,error,16,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/845#issuecomment-1570842745,1,['error'],['error']
Availability,"I have a pretty wide array of benchmarks and I haven't seen any regression with the VB option on 0.4.1, including ERCC spike-ins on the SEQC data, where it does very well. But I haven't tested 0.4.0. @vals your data looks really compelling, I wonder if you'd humor me and try something, if it's not too much trouble: Could you try recomputing these correlations excluding ERCC-00074 and ERCC-00130? I've seen some data suggesting these might be misannotated by the vendor, which can cause these two to have a large effect on something like Pearson correlation, especially with methods like salmon and cufflinks that do bias correction. In benchmarks I've done, excluding them leads to more reliable results. I'm really curious if doing the same in your data changes anything.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-111743583:690,reliab,reliable,690,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-111743583,1,['reliab'],['reliable']
Availability,"I have a question , if you guys would like to answer. Where can I get the transcripts.gtf file for mm9. Is there any link from where I can download or do I have to create on my own. I am a bit confused and different forums are adding up to my confusion if you would like to suggest.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/49#issuecomment-197899378:139,down,download,139,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/49#issuecomment-197899378,1,['down'],['download']
Availability,"I have a similar problem.; Attached are:; 1. gtf file, where clearly, the gene_ id and transcript_id are provided; 2. quant files are as followed for gene and transcripts; 3. my command as followed:; ---. /gpfsdata/apps/salmon-latest_linux_x86_64/bin/salmon quant \; -i /gpfshome/hockchuan/SALMON/GCF_900626175.2_cs10_index \; -l ISR \; -1 /gpfsdata/JangiLab/hockchuan/170302/2.Trimmomatic_output/clean_HEADBANDSTEM_1.fastq.gz \; -2 /gpfsdata/JangiLab/hockchuan/170302/2.Trimmomatic_output/clean_HEADBANDSTEM_2.fastq.gz \; --seqBias \; --gcBias \; --posBias \; --incompatPrior 0.0 \; --geneMap /gpfsdata/JangiLab/hockchuan/cs10_reference_genome/GCF_900626175.2_cs10_genomic.gtf \; --recoverOrphans \; --allowDovetail \; --threads $NSLOTS \; --dumpEq \; --minScoreFraction 0.65 \; --writeMappings /gpfshome/hockchuan/SALMON/MAP/HEADBANDSTEM \; --fldMean 250 \; --fldSD 25 \; --writeOrphanLinks \; --writeUnmappedNames \; --quiet \; -o /gpfshome/hockchuan/SALMON/HEADBANDSTEM_quant; ---. [fewLines.gtf.txt](https://github.com/COMBINE-lab/salmon/files/5383013/fewLines.gtf.txt); [quant.genes.txt](https://github.com/COMBINE-lab/salmon/files/5382998/quant.genes.txt); [quant.txt](https://github.com/COMBINE-lab/salmon/files/5382999/quant.txt)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-708949661:683,recover,recoverOrphans,683,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-708949661,2,['recover'],['recoverOrphans']
Availability,"I have already run them all (successfully) separately as pairs, but for downstream analysis I need them to be a single library, so I thought it would be simpler to run them as multiple input files..?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446212203:72,down,downstream,72,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446212203,2,['down'],['downstream']
Availability,"I have narrowed down the issue, the first 8 files are fine, adding a 9th reproduces the issue. . Will send you a link with a subset of the files",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446230657:16,down,down,16,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446230657,1,['down'],['down']
Availability,I have the same issue. But doing 'cmake -DFETCH_BOOST=TRUE ..' or 'cmake ..' gives the same error message 'does not appear to contain CMakeLists.txt'. I downloaded version 'salmon-0.12.0_linux_x86_64'.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449017473:92,error,error,92,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449017473,2,"['down', 'error']","['downloaded', 'error']"
Availability,"I have this error too. ```; root@10a5cddfd8c6:/mnt/experiments/Bebee-2015-Esrps/data# salmon quant -p 20 -t /mnt/genome/GRCm39.primary_assembly.genome.fa --quiet -l A \; 5976_Aligned.sortedByCoord.out.bam bam/SRR1725977_> -a bam/SRR1725976_Aligned.sortedByCoord.out.bam bam/SRR1725977_Aligned.sortedByCoord.out.bam bam/SRR1725983_Aligned.sortedByCoord.out.bam bam/SRR1725984_Aligned.sortedByCoord.out.bam \; > -o salmon_bam/; Version Server Response: Not Found; Library format { type:paired end, relative orientation:inward, strandedness:unstranded }; parseThreads = 6; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""bam/SRR1725976_Aligned.sortedByCoord.out.bam"", fasta = ""/mnt/genome/GRCm39.primary_assembly.genome.fa"" . . .done. processed 83000000 reads in current roundSegmentation fault; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-2411953965:12,error,error,12,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-2411953965,2,"['error', 'fault']","['error', 'fault']"
Availability,"I haven't got it to reproduce the error yet, but I did see the error in one more run outside of gdb. . On the plus side, I did find this: http://stackoverflow.com/questions/6545763/how-can-i-rerun-a-program-with-gdb-until-a-segmentation-fault-occurs. So now I can have it keep trying forever.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267255069:34,error,error,34,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267255069,3,"['error', 'fault']","['error', 'fault-occurs']"
Availability,I haven't kept up with khmer so I'm not sure what it does. Can I do something equivalent of this with khmer?. ```; mkfifo /tmp/1.fastq && \; mkfifo /tmp/2.fastq && \; samtools sort -n input.cram | samtools fastq -1 /tmp/1.fastq -2 /tmp/2.fastq & salmon -i index -l IU -1 /tmp/1.fastq -2 /tmp/2.fastq -o /tmp/salmon_out && \; mv /tmp/salmon_out && \; rm /tmp/1.fastq && \; rm /tmp/2.fastq; ```. I just want to be able to do these sorts of things without wrapper scripts that obfuscate and complicate things... But maybe a robust bash wrapper is the best way to go.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168534703:521,robust,robust,521,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168534703,1,['robust'],['robust']
Availability,"I increased ram to 24G. Segmentation fault happens even faster. I have fiddled with swap memory, to no avail, but I am not a good swap fiddler.; libs with malloc in their name, installed in directory /salmon-latest_linux_x86_64/ib adjacent to /salmon-latest_linux_x86_64/bin, are the same as elsewhere already on my system. conda and bioconda are not available for FreeBSD. What OS would work?; I have looked through the published papers and find no mention of which OS should work. My attempted command for compiling the sources from unzipped directory salmon-0.14.1 is: cmake -S src -B build; Many errors result, starting with:; TBB_LIBRARIES = ; Setting libdivsufsort = /external/install/lib/libdivsufsort.a; Setting libdivsufsort64 = /external/install/lib/libdivsufsort64.a; -- Configuring done; CMake Error at CMakeLists.txt:196 (add_executable):; Cannot find source file:. /tests/UnitTests.cpp. Tried extensions .c .C .c++ .cc .cpp .cxx .cu .m .M .mm .h .hh .h++ .hm; .hpp .hxx .in .txx. CMake Error at CMakeLists.txt:196 (add_executable):; Target ""unitTests"" links to target ""Threads::Threads"" but the target was; not found. Perhaps a find_package() call is missing for an IMPORTED; target, or an ALIAS target is missing?. CMake Error at CMakeLists.txt:162 (add_library):; Cannot find source file:. /src/jellyfish/mer_dna.cc. Tried extensions .c .C .c++ .cc .cpp .cxx .cu .m .M .mm .h .hh .h++ .hm; .hpp .hxx .in .txx. Apparently the so-called sources do not include many files ending in .cpp, for instance. Please, I repeat, what linux OS should be able to install salmon? ; And/Or what command could compile salmon?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-522626638:37,fault,fault,37,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-522626638,7,"['Error', 'avail', 'error', 'fault']","['Error', 'avail', 'available', 'errors', 'fault']"
Availability,"I just conda installed salmon fresh. I got error when I ran it. . ```; $ conda create -n salmon salmon; Collecting package metadata (current_repodata.json): done; Solving environment: done. ## Package Plan ##. environment location:~/miniconda3/envs/salmon. added / updated specs:; - salmon. The following NEW packages will be INSTALLED:. _libgcc_mutex conda-forge/linux-64::_libgcc_mutex-0.1-conda_forge; _openmp_mutex conda-forge/linux-64::_openmp_mutex-4.5-1_gnu; bzip2 conda-forge/linux-64::bzip2-1.0.8-h7f98852_4; icu conda-forge/linux-64::icu-64.2-he1b5a44_1; jemalloc conda-forge/linux-64::jemalloc-5.2.1-h9c3ff4c_5; libgcc-ng conda-forge/linux-64::libgcc-ng-9.3.0-h2828fa1_18; libgomp conda-forge/linux-64::libgomp-9.3.0-h2828fa1_18; libstdcxx-ng conda-forge/linux-64::libstdcxx-ng-9.3.0-h6de172a_18; salmon bioconda/linux-64::salmon-1.4.0-hf69c8f4_0; tbb conda-forge/linux-64::tbb-2021.1.1-h4bd325d_1; zlib conda-forge/linux-64::zlib-1.2.11-h516909a_1010. Proceed ([y]/n)? y. Preparing transaction: done; Verifying transaction: done; Executing transaction: done; #; # To activate this environment, use; #; # $ conda activate salmon; #; # To deactivate an active environment, use; #; # $ conda deactivate. $ conda activate salmon; $ salmon; salmon: symbol lookup error: salmon: undefined symbol: _ZN3tbb8internal24concurrent_queue_base_v818internal_push_moveEPKv; ```. I think this is related with rob-p commented on Sep 22, 2020. ; I have a naive question: Is it possible to fix this in the recipe by adding the problematic dependencies?; I am using centOS 8.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-805608173:43,error,error,43,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-805608173,2,['error'],['error']
Availability,I just issued an other pull request: boost_1_57 is no longer available on the download site.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/23#issuecomment-153147884:61,avail,available,61,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/23#issuecomment-153147884,2,"['avail', 'down']","['available', 'download']"
Availability,I just provided the list of transcripts in fasta format with the -t flag but its still giving me the same error.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-270007769:106,error,error,106,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-270007769,1,['error'],['error']
Availability,"I just redownloaded and extracted and tried again, and unfortunately the problem persists =/. ```; ...; [2016-01-02 17:47:51.342] [jointLog] [info] iteration = 1600 | max rel diff. = 0.0133376; [2016-01-02 17:47:51.443] [jointLog] [info] iteration = 1630 | max rel diff. = 0.00771098; [2016-01-02 17:47:51.447] [jointLog] [info] Finished optimizer; [2016-01-02 17:47:51.448] [jointLog] [info] writing output. Computing gene-level abundance estimates; [2016-01-02 17:47:51.678] [jointLog] [warning] NOTE: Read Lib [( /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq, /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: SRP057125_SRS936134_salmon_out/libFormatCounts.txt for details. There were 104534 transcripts mapping to 44034 genes; Parsed 104000 expression lines; done; Aggregating expressions to gene level . . . done; Segmentation fault (core dumped); ```. If you want I can upload index and a couple of fastq files somewhere so you can try?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168412271:1089,fault,fault,1089,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168412271,1,['fault'],['fault']
Availability,"I just tried it on a fresh docker image of ubuntu 16.04 and am unable to install salmon. After `apt-get install build-essential cmake g++ gcc curl autoconfig libdevsufsort-dev`, `cmake -DFETCH_BOOST=TRUE` passes, but `make install` fails with following output:; ```; [ 6%] Built target liblzma; [ 12%] Built target libbz2; [ 18%] Built target libjemalloc; [ 19%] Performing download step (verify and extract) for 'libdivsufsort'; -- verifying file...; file='/home/salmon-0.10.2/external/libdivsufsort.zip'; -- verifying file... warning: did not verify file - no URL_HASH specified?; -- extracting...; src='/home/salmon-0.10.2/external/libdivsufsort.zip'; dst='/home/salmon-0.10.2/external/libdivsufsort-master'; CMake Error at /home/salmon-0.10.2/libdivsufsort-prefix/src/libdivsufsort-stamp/extract-libdivsufsort.cmake:11 (message):; error: file to extract does not exist:; '/home/salmon-0.10.2/external/libdivsufsort.zip'. CMakeFiles/libdivsufsort.dir/build.make:90: recipe for target 'libdivsufsort-prefix/src/libdivsufsort-stamp/libdivsufsort-download' failed; make[2]: *** [libdivsufsort-prefix/src/libdivsufsort-stamp/libdivsufsort-download] Error 1; CMakeFiles/Makefile2:137: recipe for target 'CMakeFiles/libdivsufsort.dir/all' failed; make[1]: *** [CMakeFiles/libdivsufsort.dir/all] Error 2; Makefile:160: recipe for target 'all' failed; make: *** [all] Error 2; ```; It confuses me, as the error seems to be in the libdevsufsort, which should be installed.; (sorry for all the mess, really)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404455397:374,down,download,374,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404455397,9,"['Error', 'down', 'error']","['Error', 'download', 'error']"
Availability,I just tried with gcc 4.9.0 and errored out at the the same point (attached). I'll try using the pre-compiled ones. . [compile.error.txt](https://github.com/COMBINE-lab/salmon/files/189653/compile.error.txt),MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201331991:32,error,errored,32,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201331991,3,['error'],"['error', 'errored']"
Availability,"I prefer to have it bundled _within_ RapMap (but am willing to hear argument against this). Specifically, this allows that I have control over the availability (i.e. if the official repo disappears, RapMap will continue to build). Of course, the bundled zip was from a slightly updated version of the official `libdivsufsort` that incorporates a fix into the `CMakeLists.txt` file where the original failed. It would certainly be easy to just move the bundled version into a tarball rather than a zip without any hassle.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-193926752:147,avail,availability,147,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-193926752,1,['avail'],['availability']
Availability,"I realize my mistake, I was confused by the error message.; Pseudoaligment seems to work now. [...]; [2018-08-03 20:13:23.083] [jointLog] [info] Computed 312565 rich; equivalence classes for further processing; [2018-08-03 20:13:23.083] [jointLog] [info] Counted 120065952 total; reads in the equivalence classes; [2018-08-03 20:13:23.084] [jointLog] [warning] Found 9775 reads with `N`; in the UMI sequence and ignored the reads.; Please report on github if this number is too large; [2018-08-03 20:13:23.084] [jointLog] [info] Mapping rate = 63.2442%. [2018-08-03 20:13:23.084] [jointLog] [info] finished quantifyLibrary(); [2018-08-03 20:13:26.208] [alevinLog] [info] Starting optimizer. ERROR: Txp to Gene Map not found for 203027 transcripts. Exiting(salmon). I just have a problem with my tx2gene file. Here is the head of my file:. ENST00000013125	MAP4K5; ENST00000215368	EFNA2; ENST00000200453	PPP1R15A; ENST00000202028	EPB41L1; ENST00000204679	GNPTG; ENST00000175506	ASNS; ENST00000215574	CDC34; ENST00000167106	VASH1; ENST00000074304	INPP4A; ENST00000055077	RFC2. The transcript ID is probably not consistent with the one from the; alevin output. However, I used to perform some pseudo-alignments using; salmon on bulk RNAseq with the same transcriptome references and the; same tx2gene file that I used here (postprocessed using R) and it work.; What could be wrong here? Could you provide me with an example of the; tx2gene file needed?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410337209:44,error,error,44,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410337209,2,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"I recently had a similar problem using bioconda. . When installing salmon alongside [RSEM](https://anaconda.org/bioconda/rsem), conda downgraded salmon to version 0.6. As soon as I installed salmon in a dedicated environment, everything worked fine.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-735962605:134,down,downgraded,134,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-735962605,1,['down'],['downgraded']
Availability,"I see, we might have to tweak a bit based on the use case for `longranger basic`.; In `v0.10`, alevin should still be able to do CB correction, and attach the corrected CBs to the header of the second file, although the remaining template sequence (128 bases) from the first file might get loss, since `cellranger` was using template sequencing in only one file. Like @rob-p was saying we can work on making this step more generalized, once we confirm that the error-correction model for `cellranger` and `longranger` can be used interchangeably. In theory we can still concatenate the remaining 128 bases into an interleaved format since alevin has hidden options to provide the lengths explicitly but we have not tested this feature extensively. We will keep this at the top of our feature-request list and would inform you as soon as we have a stable version with this feature. Thanks again for the interest !!. re: *interleaved format* -- indeed an interleave format does makes sense and should be the default dumping format, but I believe since the default mode of 10x's `mkfastq` is to dump separate `FASTQ`, we should not use resources to create an interim interleaved format and then consume it downstream (since`FASTQ` itself is not very efficient), instead, in alevin we just consume the two separate `FASTQ` into our own interim data-structure to perform the downstream analysis.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395195411:461,error,error-correction,461,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395195411,3,"['down', 'error']","['downstream', 'error-correction']"
Availability,"I see. Well, this is definitely what is leading to the error. The JSON files shouldn't be empty. Can you report the output of `salmon quant` when you were building the index? It seems that the JSON files were not written correctly, which prevents proper loading of the index (and which may be indicative of other parts of the index not being properly written).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/251#issuecomment-404959801:55,error,error,55,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/251#issuecomment-404959801,1,['error'],['error']
Availability,"I still had the same error on that computer after following the instructions on the other thread. However, that computer is a bit older (OS 10.11.3), and when I used that OSX binary on my newer computer in lab (OS 10.13.4) it is working perfectly well so far. Thank you!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/303#issuecomment-432662209:21,error,error,21,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/303#issuecomment-432662209,1,['error'],['error']
Availability,"I suppose it is two issues. With 1.4.0 I get a stripped down `cmd_info.json` file, and with 1.5.1 I get none at all.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-882833076:56,down,down,56,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-882833076,1,['down'],['down']
Availability,"I suspect the issue may be the computational cluster, which limits the number or processes an application can solve and the large number of threads alevin is spawning after processing the first 6M reads. Is there an alternative way to limit the number of threads? . I get the same error at 6M barcodes processed with the v2 chemsitry pbmc4k dataset available on the 10X website.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395814714:281,error,error,281,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395814714,2,"['avail', 'error']","['available', 'error']"
Availability,"I suspect you're running this on a Mac, correct? ; I had the same issue, Salmon would index for the better part of a day, use ~30 gb of swap space, then die (killed 9 message). The versionInfo.json error is slightly misleading, most likely what happened is that the indexing didn't finish and since that file is only created if it finishes correctly, that's the error you get.; Running the indexing with the same code, with similar resources completed on our AWS node so I wonder if this is a Mac specific problem...",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/559#issuecomment-738480434:198,error,error,198,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/559#issuecomment-738480434,2,['error'],['error']
Availability,"I tested changing the parameters, and I am still getting the same error message:. ```; [2021-07-08 16:05:50.979] [alevinLog] [info] Done importing white-list Barcodes; [2021-07-08 16:05:50.979] [alevinLog] [error] Wrong whitelist provided; Please check https://salmon.readthedocs.io/en/develop/alevin.html#whitelist; ```. However, I will look into the other information and see if I can understand what is happening. I can also test not using a white list and see if that changes the number to be something like an order of magnitude different that what I would expect from the other sample. So, I will post an update when I can run alevin without an error message, and try to give some sense of the results that are quantified.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-877303669:66,error,error,66,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-877303669,3,['error'],['error']
Availability,"I think @rob-p meant to include links in his reply. The download page is [here](https://www.gencodegenes.org/releases/current.html), and you're likely looking for this file:. ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_human/release_27/gencode.v27.pc_transcripts.fa.gz",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/186#issuecomment-359017963:56,down,download,56,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/186#issuecomment-359017963,1,['down'],['download']
Availability,"I think if you want to automate these steps though the easiest and most robust thing you could do is require everyone to tell you how many cells they captured and sequenced, and relax that number a little bit and do whatever filtering you need to do downstream to get rid of the crap on the low end; usually other quality control metrics like mitochondrial content or genes detected or whatever will filter out the garbage that leaks into the count matrix from being permissive in initial cell demultiplexing + quantification steps.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490161823:72,robust,robust,72,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490161823,2,"['down', 'robust']","['downstream', 'robust']"
Availability,I think logging non-error output to stderr is OK.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/55#issuecomment-237040761:20,error,error,20,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/55#issuecomment-237040761,1,['error'],['error']
Availability,"I think that's the right binary. You can check the sha256 sum:. ```; rob at Robs-MacBook-Pro in ~/Salmon-0.8.2_macOX_10.12; $ shasum -a256 bin/salmon; 7be1c57e1a83956cc9c18f75aed3b2376c93595de7dec215041fe3065528b527 bin/salmon; ```. You can also check the libraries that `salmon` is seeing:. ```; rob at Robs-MacBook-Pro in ~/Salmon-0.8.2_macOX_10.12; $ otool -L bin/salmon; 	bin/salmon:; 	/usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.8); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.0.0); 	/usr/lib/libbz2.1.0.dylib (compatibility version 1.0.0, current version 1.0.5); 	@rpath/libtbbmalloc_proxy.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libtbbmalloc.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libtbb.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.4.0); ```. but, again, the library of interest with respect to this message (jemalloc) is linked statically. Out of curiosity, is this message a warning or error (i.e. does salmon run or return a non-zero exit code). The message you're seeing is actually expected if jemalloc was compiled without debug mode turned off (because apple did some funny business with the allocator in OS X 10.12).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294852033:1106,error,error,1106,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294852033,1,['error'],['error']
Availability,I think the error was caused by running out of memory,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/641#issuecomment-817390863:12,error,error,12,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/641#issuecomment-817390863,1,['error'],['error']
Availability,"I think the recommended approach would be to map against everything and filter down to only the information for these 1800 transcripts. Let us know if that process leads to further questions. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/681#issuecomment-1138621099:79,down,down,79,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/681#issuecomment-1138621099,1,['down'],['down']
Availability,"I think we should sort out this issue step by step. If you say `libstaden` has an important bugfix we should upgrade to the latest version in any case. Do you have a link to this bug? I admit this update simply slipped through - we should have upgraded this in the beginning of this year. Usually we try to follow upstream closely (which we failed for salmon blatantly for several reasons - one is the close connection to pufferfish).; Regarding `pufferfish`: We tried hard to get `pufferfish` packaged but failed (due to the use of other versions of `spdlog`, `cereal`, and `fmt`) However, since we can't run `fetchPufferfish.sh` *inside the build process* I was running it separately and added the downloaded source in [debian/external/pufferfish](https://salsa.debian.org/med-team/salmon/-/tree/master/debian/external/pufferfish) So I think the requirement of salmon should be fulfilled. I confirm your feeling that pufferfish is important for the current issue.; However, in the test I did when opening this bug report I did not do that pre-downloading of pufferfish since I was building right in the downloaded source tarball. `libpufferfish-dev` was not installed by `apt build-dep salmon` since this package does not exist.; Kind regards, Andreas.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464878371:700,down,downloaded,700,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464878371,6,['down'],"['downloaded', 'downloading']"
Availability,"I tried ; conda install -c bioconda salmon ; similar failure as shown by Jx-b.; Then I tried the way as Jx-b suggested, it failed at first. After updating Conda to the latest version (4.5.1), removing the salmon file and reinstall it by:; conda create -n salmon salmon=0.9.1; The installation was finally complete without error. Thanks for the discussion here, @Jx-b",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-383178270:53,failure,failure,53,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-383178270,2,"['error', 'failure']","['error', 'failure']"
Availability,I tried re-installing salmon today after seeing your message. A simple `conda install salmon` worked for me this time. I don't know why it was giving me an error back then and not one now though....,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137154359:156,error,error,156,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137154359,2,['error'],['error']
Availability,"I tried using Homo_sapiens.GRCh38.94.chr_patch_hapl_scaff.gtf.gz for the annotation file and ftp://ftp.ensembl.org/pub/release-94/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz to build the index but got a similar error. Here are the logs (I modified the salmon log a bit because it didn't have the error message that printed to stdout). [alevin.log](https://github.com/COMBINE-lab/salmon/files/3224429/alevin.log); [salmon_quant.log](https://github.com/COMBINE-lab/salmon/files/3224440/salmon_quant.log). One curious thing that I noticed:. ```; Index contained 175,775 targets; ...; ERROR: Txp to Gene Map not found for 175775 transcripts; ```; It seems to not be finding any of the transcripts? This was also the case for the gencode attempt that I made previously.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-496258062:226,error,error,226,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-496258062,3,"['ERROR', 'error']","['ERROR', 'error']"
Availability,I tried using salmon quant v 1.3.0. I still get the same error,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/641#issuecomment-809864805:57,error,error,57,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/641#issuecomment-809864805,1,['error'],['error']
Availability,"I wonder if the max 1-edit distance restriction is too stringent for 21 length barcodes. One important flag to play with is the `--minScoreFraction`. The basic rule to set that is define [here](https://github.com/COMBINE-lab/salmon/blob/91091fc3650a3220f657a9f31616916513f0ad02/src/SalmonUtils.cpp#L3242-L3253). The gist being say if we wan't max k-edit we allow all the reads above the following threshold score (as in the log ):. ```; [2020-06-04 17:55:11.700] [alevinLog] [info] set CITE-seq minScoreFraction parameter to : 0.797619; ```; i.e. we use the equation `(max_score + edit_cost) - 0.5) / max_score`; where `max_score` = 2 * length of barcode = 2 * 21 = 42,; and `edit_cost`= `min( k * (mismatch - match), k * (go + ge - match)`;; `mismatch` penalty = -4; `match` = 2; `go` gap open penalty = -4; `ge` gap extend penalty = -2. For k=1, we had `edit_cost = 8` leading to automatic setting of `minScoreFraction` of 0.797619.; we have looked at 15 length barcodes, but it's possible longer barcodes might have more sequencing error. Let's try allowing more edits i.e. k=2, by setting `--minScoreFraction 0.607` and see if it improves the mapping rate.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639235133:1035,error,error,1035,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639235133,1,['error'],['error']
Availability,I would have prefered an option to check if a new version is available instead of having a software that systematicly phone home . it will be problematic on our cluster as compute nodes does not have network acces to internet. ; did not checked yet how this case in handled by salmon. regards. Eric,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-617251989:61,avail,available,61,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-617251989,1,['avail'],['available']
Availability,"I would think the best way to test it would be as Mike says: run Salmon on a paired-end library with bias-correction enabled, and then re-run it on only read 1 of the same library, only read 2, and on all the reads but treating it as single-end, and see how close it comes in each case. I would say it's also important to test whether the bias estimation is robust against modest misspecification of the mean fragment size, since that is often not known very accurately.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/83#issuecomment-246164791:358,robust,robust,358,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/83#issuecomment-246164791,1,['robust'],['robust']
Availability,"I wrote the '[make.dummy.fastq()](https://bitbucket.org/habilzare/alzheimer/src/master/code/Habil/utilities/make.dummy.fastq.R) function in R, which addressed the issue as planned in above. . For some of the samples, I got the ""umi indexing of jellyfish failing"" error, which I realized from [this](https://github.com/COMBINE-lab/salmon/issues/237) report must be related to shorter than 26 bps reads. I used trimommatic to exclude those short reads, and finally Alevin produced the count matrix in CSV format for me. Thank you Salmon team!. Minor: The output CSV file has an extra comma at the end of each line, which I ignored in my post-processing step.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-407266564:263,error,error,263,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-407266564,1,['error'],['error']
Availability,"I'd rather not bundle the dependency. Troubleshooting bundled dependencies is crazy making. The `cmake` script could check that the dependency is satisfied and report an error message if it's not. Or I suppose install the dependency if it's not satisfied. Perhaps that's what you were thinking.; In any case, here's the web site: http://tukaani.org/xz/; and git repository: http://git.tukaani.org/; Here's a GitHub mirror. I don't know whether it's current: https://github.com/nobled/xz",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193941254:170,error,error,170,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193941254,1,['error'],['error']
Availability,"I'll be happy to go ahead an implement this; but the numeric_error exception that is thrown doesn't contain the value that caused the error (just that string that is printed out) `Error in function boost::math::digamma(double): numeric overflow`. The try/catch should be easy to do, but I'm quite interested in how this can even be triggered given that the range check is already being done.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393606315:134,error,error,134,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393606315,2,"['Error', 'error']","['Error', 'error']"
Availability,I'm actually still getting the same error.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-259483994:36,error,error,36,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-259483994,1,['error'],['error']
Availability,"I'm also not quite convinced about the superiority of either approach. On one hand, it would, of course, be nice to have sailfish and salmon natively support as many file formats as possible. On the other hand, every extra file format increases the complexity of the parsing code paths, probably putting us in some technical debt, and creating more opportunities for bugs to creep in. From this perspective, anything that can be handled cleanly and robustly from the command line seems a win (of course, this is only true if it can actually be handled _cleanly_ and _robustly_).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168536811:449,robust,robustly,449,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168536811,1,['robust'],['robustly']
Availability,"I'm attaching the linux binary with the fix [here](https://github.com/COMBINE-lab/salmon/files/2074498/salmon-latest_linux_x86_64.tar.gz). Can you see if this runs without error for you (after addressing the issues with the duplicate sequences and alignment sort order mentioned above)? If so, I'll cut it as a new release. Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394912602:172,error,error,172,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394912602,1,['error'],['error']
Availability,"I'm curious if there is code available to remove the duplicates based on UMI tags for RNA. I'm aware of Alevin, but I don't think this suits my purpose. Regards,; Steven",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-499500637:29,avail,available,29,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-499500637,1,['avail'],['available']
Availability,"I'm curious too if there is any specific feedback from the devs on whether using salmon on bacterial coding sequences is generally seen as appropriate or not? (sorry if this information is already available elsewhere, I've looked a bit and not seen it yet)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/350#issuecomment-582077473:197,avail,available,197,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/350#issuecomment-582077473,2,['avail'],['available']
Availability,"I'm getting the same error as reported above. Copying the code i ran below:; ```; # download reference genome; curl -JLO https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/latest_assembly_versions/GCF_009914755.1_T2T-CHM13v2.0/GCF_009914755.1_T2T-CHM13v2.0_genomic.fna.gz; # extract chromosome names; grep ""^>"" <(gunzip -c GCF_009914755.1_T2T-CHM13v2.0_genomic.fna.gz) | cut -d "" "" -f 1 > GCF_009914755.1_T2T-CHM13v2.0_genomic.txt; # download transcriptome; curl -JLO https://ftp.ncbi.nlm.nih.gov/genomes/refseq/vertebrate_mammalian/Homo_sapiens/latest_assembly_versions/GCF_000001405.40_GRCh38.p14/GCF_000001405.40_GRCh38.p14_rna.fna.gz; # combine transcriptome and genome, in that order; cat GCF_000001405.40_GRCh38.p14_rna.fna.gz GCF_009914755.1_T2T-CHM13v2.0_genomic.fna.gz > human_seq.fa.gz; # give to salmon to index; salmon index -t human_seq.fa.gz -i salmon_index -d GCF_009914755.1_T2T-CHM13v2.0_genomic.txt; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/788#issuecomment-1482927046:21,error,error,21,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/788#issuecomment-1482927046,3,"['down', 'error']","['download', 'error']"
Availability,"I'm having a similar problem, also using an M1 mac. I've tried your solution @rob-p, as well as updating conda, creating a new environment specifically for salmon, it still doesn't work. I get the following error:. ```; $ conda install -c bioconda salmon 3s Py salmon; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve. PackagesNotFoundError: The following packages are not available from current channels:. - salmon. Current channels:. - https://conda.anaconda.org/bioconda/osx-arm64; - https://conda.anaconda.org/bioconda/noarch; - https://conda.anaconda.org/conda-forge/osx-arm64; - https://conda.anaconda.org/conda-forge/noarch; - https://repo.anaconda.com/pkgs/main/osx-arm64; - https://repo.anaconda.com/pkgs/main/noarch; - https://repo.anaconda.com/pkgs/r/osx-arm64; - https://repo.anaconda.com/pkgs/r/noarch. To search for alternate channels that may provide the conda package you're; looking for, navigate to. https://anaconda.org. and use the search bar at the top of the page.; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137109855:207,error,error,207,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137109855,2,"['avail', 'error']","['available', 'error']"
Availability,"I'm not sure whether I should create a new issue for each problem. I'll just put them all here. . BWA continued to make, when I changed the BUILD_COMMAND to use gmake. I also ran 'export MAKE=gmake', and used gmake to run the output of cmake. . BUILD_COMMAND sh -c ""gmake ${QUIET_MAKE} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}"". Unfortunately, the BWA included with Salmon is broken on FreeBSD. . kthread.c:70:2: error: unknown type name 'int64_t'. The one on Git (https://github.com/lh3/bwa) works though. So I modified DOWNLOAD_COMMAND to grab the one from Git. . DOWNLOAD_COMMAND git clone https://github.com/lh3/bwa bwa-master. Next problem, it tries to build TBB and fails. This is two problems, because I have TBB, I passed it the path, and it fails to use it. The output of cmake says:. -- Could NOT find TBB (missing: tbbmalloc_proxy) (found suitable version ""2018.0"", minimum required is ""4.4""). tbbmalloc_proxy.h is present in /usr/local/include/tbb. Moving on, TBB fails to build because it's hard coded to use make. I fixed this and it built. BUILD_COMMAND gmake ${QUIET_MAKE} CXXFLAGS=${TBB_CXXFLAGS} lambdas=1 compiler=${TBB_COMPILER} cfg=release tbb_build_prefix=LIBS. Staden-io_lib fails to build with: ; /usr/bin/ld: undefined reference to symbol `pthread_create@@FBSD_1.0' (try adding -lthr); //lib/libthr.so.3: could not read symbols: Bad value. As advertised, -lthr fixed this issue. ; CONFIGURE_COMMAND ./configure --enable-shared=no --without-libcurl --prefix=<INSTALL_DIR> LDFLAGS=-lthr CFLAGS=${LIBSTADEN_CFLAGS} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}. This leads me to an error I can't fix on my own. /home/esiefker/salmon/fresh-salmon/include/BWAMemStaticFuncs.hpp:36:36: error:; use of undeclared identifier 'MEM_F_SELF_OVLP'; int start_width = (opt->flag & MEM_F_SELF_OVLP)? 2 : 1;. There is a similar Debian bug which is fixed: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=818397. I could not find the fix mentioned. https://github.com/COMBINE-lab/s",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-337390415:421,error,error,421,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-337390415,1,['error'],['error']
Availability,I'm still experiencing this `cmake` error:. ```; -- extracting... [tar xfz]; CMake Error: Problem with archive_write_finish_entry(): Can't restore time; CMake Error: Problem extracting tar: /var/tmp/sjackman/salmon20160307-4399-1vksuoo/salmon-0.6.0/external/libdivsufsort.zip; -- extracting... [error clean up]; CMake Error at /var/tmp/sjackman/salmon20160307-4399-1vksuoo/salmon-0.6.0/libdivsufsort-prefix/src/libdivsufsort-stamp/extract-libdivsufsort.cmake:33 (message):; error: extract of; '/var/tmp/sjackman/salmon20160307-4399-1vksuoo/salmon-0.6.0/external/libdivsufsort.zip'; failed; ```. Here's a gist of the logs:; https://gist.github.com/sjackman/2bbfcf212c555fb20505#file-02-make-L397-L404,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-193515060:36,error,error,36,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-193515060,6,"['Error', 'error']","['Error', 'error']"
Availability,"I'm surprised that the `@rpath` showed up, when I thought that we had disabled that. So long as `brew install salmon` works on Mac, I wouldn't worry about downloading and installing dependencies. Leave that chore to the package manager.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239604008:155,down,downloading,155,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239604008,1,['down'],['downloading']
Availability,"I've encountered a very similar scenario - I've used STAR for alignment and next ran salmon quant with transcripts data.. I'm also getting the error:. `[2019-01-21 23:11:38.495] [jointLog] [critical] Please provide a reference FASTA file that includes all targets present in the BAM header; If you have access to the genome FASTA and GTF used for alignment`. But the correction suggested above using gttread does not solve my issue.. any suggestions?. Edit: apologies, it appears I forgot to use the `--quantMode TranscriptomeSAM` flag in STAR. now that I had the suggested fix works just fine.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-456201406:143,error,error,143,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-456201406,1,['error'],['error']
Availability,"I've just used https://transfer.pcloud.com/ to share the files with you. I think you should get an email with the download link. I've included the FASTQ, the index (entire folder in a tar.gz) and the compiled-from-source salmon executable that I used.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266898682:114,down,download,114,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266898682,1,['down'],['download']
Availability,"I've run into this (or a similar) issue attempting to install Salmon on the UC Berkeley HPC cluster. Iconv was present within one of our Python installs, but that didn't seem to have the header files, so I installed libiconv/1.16 thinking this was a dependency issue. Unfortunately this didn't seem to help. Any guidance would be greatly appreciated. Here is my build script to the point of failure:; ```sh; #!/bin/sh ; MODULE_HOME=/clusterfs/vector/home/groups/software/sl-7.x86_64; PACKAGE_NAME=salmon; GITHUB_URL=https://api.github.com/repos/COMBINE-lab/salmon/releases/latest; VERSION=$(curl -s $GITHUB_URL | \; grep '""tag_name"":' | \; cut -d : -f 2,3 | \; tr -d \"",v | \; xargs); LATEST_RELEASE=$(curl -s $GITHUB_URL | \; grep '""tarball_url""' | \; cut -d : -f 2,3 | \; tr -d \"", | \; xargs); module load gcc/7.4.0 cmake/3.15.1 boost/1.70.0-gcc libiconv/1.16; export CC=`which gcc`; export CXX=`which c++`. cd $MODULE_HOME; mkdir -p source/$PACKAGE_NAME/$VERSION; INSTALL_DIR=$MODULE_HOME/modules/$PACKAGE_NAME/$VERSION; mkdir -p $INSTALL_DIR; mkdir -p modfiles/$PACKAGE_NAME. cd source/$PACKAGE_NAME/$VERSION; wget $LATEST_RELEASE -O - | tar -xz --strip-components 1; cmake -DBOOST_ROOT=/global/software/sl-7.x86_64/modules/gcc/7.4.0/boost/1.70.0-gcc -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR; make; ```; And the tail of the output from make:. ```; creating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/; inflating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/int128_numeric_limits.cpp ; -- fetch PUFFERFISH exit code 0; -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11"") ; -- Performing Test Iconv_IS_BUILT_IN; -- Performing Test Iconv_IS_BUILT_IN - Failed; CMake Error at /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindPackageHandleStandardArgs.cmake:137 (message",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315:391,failure,failure,391,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315,2,['failure'],['failure']
Availability,"I've run into this as well, but's proving tricky to track down. I'm by no mean a expert on build chains (or a C/C++ for that matter), but as far as I can figure, this issue seems specific to RedHat systems. I get exactly the same linking error on RH6 and RH7 using any GCC compiler I have access to on those systems (4.8.5, 5.2.0, 7.2.0). Compiling on an Arch system with GCC 9.2.0 (glibc 2.30) sees no issue. Unfortunately I don't have easy access to the same compiler versions on both systems. I'm compiling GCC 5.2.0 (with glibc2.28) on the Arch system to test this now, but it's going to be a little while before I even know if I have a working toolchain that can use it.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/455#issuecomment-558714532:58,down,down,58,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/455#issuecomment-558714532,2,"['down', 'error']","['down', 'error']"
Availability,"I've tried to reproduce the issue in docker by using the Build-Depends that are used in Debian:. $ docker pull debian:testing; $ docker run -it debian:testing; $ echo ""deb-src http://deb.debian.org/debian unstable main"" > /etc/apt/sources.list.d/10-debsrc.list; $ apt update; $ apt upgrade; $ apt build-dep salmon; $ wget https://github.com/COMBINE-lab/salmon/archive/refs/tags/v1.10.0.tar.gz; $ tar xaf v1.10.0.tar.gz; $ cd salmon-1.10.0; $ mkdir build && cd build; $ cmake -DNO_IPO=TRUE ..; $ make -j8; make -j8; [ 3%] Built target ksw2pp_sse4; [ 6%] Built target ntcard; [ 15%] Built target twopaco; [ 18%] Built target graphdump; [ 21%] Built target ksw2pp_sse2; [ 27%] Built target ksw2pp_basic; [ 43%] Built target salmon_core; [ 67%] Built target puffer; [ 68%] Built target ksw2pp; [ 69%] Built target UnitTestsMain; [ 73%] Built target alevin_core; [ 74%] Linking CXX executable unitTests; /usr/bin/ld: /usr/lib/x86_64-linux-gnu/libcurl.a(libcurl_gnutls_la-psl.o): in function `Curl_psl_destroy':; (.text+0x21): undefined reference to `psl_free'; /usr/bin/ld: /usr/lib/x86_64-linux-gnu/libcurl.a(libcurl_gnutls_la-psl.o): in function `Curl_psl_use':; (.text+0xbc): undefined reference to `psl_latest'; /usr/bin/ld: (.text+0x157): undefined reference to `psl_builtin'; /usr/bin/ld: /usr/lib/x86_64-linux-gnu/libcurl.a(libcurl_gnutls_la-version.o): in function `curl_version':; (.text+0x129): undefined reference to `BrotliDecoderVersion'; /usr/bin/ld: (.text+0x16f): undefined reference to `ZSTD_versionNumber'; /usr/bin/ld: (.text+0x1e3): undefined reference to `idn2_check_version'; /usr/bin/ld: (.text+0x20e): undefined reference to `psl_get_version'; /usr/bin/ld: /usr/lib/x86_64-linux-gnu/libcurl.a(libcurl_gnutls_la-version.o): in function `curl_version_info':; (.text+0x386): undefined reference to `idn2_check_version'; /usr/bin/ld: (.text+0x3ad): undefined reference to `BrotliDecoderVersion'; /usr/bin/ld: (.text+0x3b8): undefined reference to `BrotliDecoderVersion'; /usr/bin/ld: (.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463708855:162,echo,echo,162,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463708855,1,['echo'],['echo']
Availability,I've updated the doc and it should me available with the next release or the docs from the develop branch. Thanks again.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/395#issuecomment-510121247:38,avail,available,38,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/395#issuecomment-510121247,1,['avail'],['available']
Availability,"If I install Salmon Binary:; [100%] Building CXX object src/CMakeFiles/salmon.dir/BAMUtils.cpp.o; [100%] Linking CXX executable salmon; /usr/bin/ld: ../../external/install/lib/libstaden-read.a(libstaden_read_la-open_trace_file.o): in function `find_file_url':; open_trace_file.c:(.text+0xf4e): warning: the use of `tempnam' is dangerous, better use `mkstemp'; during IPA pass: icf; lto1: internal compiler error: Segmentation fault; Please submit a full bug report,; with preprocessed source if appropriate.; See <file:///usr/share/doc/gcc-9/README.Bugs> for instructions.; lto-wrapper: fatal error: /usr/bin/c++ returned 1 exit status; compilation terminated.; /usr/bin/ld: error: lto-wrapper failed; collect2: error: ld returned 1 exit status; make[2]: *** [src/CMakeFiles/salmon.dir/build.make:421: src/salmon] Error 1; make[1]: *** [CMakeFiles/Makefile2:659: src/CMakeFiles/salmon.dir/all] Error 2; make: *** [Makefile:163: all] Error 2",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/592#issuecomment-734935424:406,error,error,406,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/592#issuecomment-734935424,8,"['Error', 'error', 'fault']","['Error', 'error', 'fault']"
Availability,"If Salmon requires CMake 3.12 (or later), it would probably be worth bumping the `cmake_minimum_required` to this version in CMakeLists.txt. It's currently set to 3.9. This would at least point users to the ""proper"" error. At the moment, it's unclear if Salmon meant to provide its own FindIconv.cmake (like it does for several other packages) or not.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-557680455:216,error,error,216,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-557680455,1,['error'],['error']
Availability,"If i use the smaller set of barcodes, then I progress further. However, I still receive an error message (and there no **quants_mat_rows.txt** file):. ```; [2021-07-13 13:59:07.109] [alevinLog] [info] Total 0.00 UMI after deduplicating.; [2021-07-13 13:59:07.109] [alevinLog] [info] Total 0 BiDirected Edges.; [2021-07-13 13:59:07.109] [alevinLog] [info] Total 0 UniDirected Edges.; [2021-07-13 13:59:07.134] [alevinLog] [info] Finished optimizer; /var/spool/slurmd/job3050767/slurm_script: line 23: 10494 Floating point exception../../Ref_Generation/salmon-1.5.1_linux_x86_64/bin/salmon alevin -l ISF --chromium -1 $R1 -2 $R2 -i $REF -p 4 -o $ID --tgMap $MAP --whitelist $CBWL. ```. If the barcode is on the opposite read, then I am not sure if I should really be using the reverse or reverse complement (possibly even for the full barcode list)?. However, for the sake of this discussion, I will now test not providing any white list. If that works, then I will close the ticket again. **Update (7/14/2021)**: I have added the full log file here: [cluster_log.log](https://github.com/COMBINE-lab/salmon/files/6819402/cluster_log.log)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-879497561:91,error,error,91,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-879497561,1,['error'],['error']
Availability,"If it is a _large_ (i.e. > 2^31 nucleotide reference) then it should trigger the 64-bit index automatically. If there's a failure to do that, it's a bug I have to fix in RapMap. Admittedly, I've not tried to map to many transcriptomes that large, so I'd be much obliged if you could provide me with an example to trigger that behavior :).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/37#issuecomment-174085756:122,failure,failure,122,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/37#issuecomment-174085756,1,['failure'],['failure']
Availability,"If it's useful, I made an example where you can run beginning to end to reproduce (didn't see this thread beforehand). Download these:. ```; ftp://ftp.ensembl.org/pub/release-87/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz; ftp://ftp.ensembl.org/pub/release-87/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz; ftp://ftp.ensembl.org/pub/release-87/gtf/homo_sapiens/Homo_sapiens.GRCh38.87.gtf.gz. ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR188/ERR188297/ERR188297_1.fastq.gz; ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR188/ERR188297/ERR188297_2.fastq.gz; ```. Using STAR 2.5.2b. ```; star --runThreadN 6 \; --runMode genomeGenerate \; --genomeDir ensembl87 \; --genomeFastaFiles Homo_sapiens.GRCh38.dna.primary_assembly.fa \; --sjdbGTFfile Homo_sapiens.GRCh38.87.gtf \; --sjdbOverhang 100. star --runThreadN 6 \; --genomeDir ensembl87 \; --readFilesIn ERR188297_1.fastq ERR188297_2.fastq \; --outFileNamePrefix star/ \; --outSAMtype BAM Unsorted \; --quantMode TranscriptomeSAM; ```. Then, following Thomas, I chop the version numbers from the FASTA. ```; cut -f1 -d ""."" Homo_sapiens.GRCh38.cdna.all.fa > transcripts_unversioned.fa; ```. Now Salmon v0.7.2. Without `--gcBias` it runs to completion. Although nothing in `libParams` dir... ```; Salmon-0.7.2_linux_x86_64/bin/salmon quant -t transcripts_unversioned.fa -l IU -p 6 -a star/Aligned.toTranscriptome.out.bam -o align_test; ```. With `--gcBias` produces segfault:. ```; Salmon-0.7.2_linux_x86_64/bin/salmon quant --gcBias -t transcripts_unversioned.fa -l IU -p 6 -a star/Aligned.toTranscriptome.out.bam -o align_testGC; ```. ```; ^M^MESC[0;32mprocessedESC[0;31m 0 ESC[0;32mreads in current roundESC[0;0m/nas02/home/m/i/milove/.lsbatch/1481837415.333618.shell: line 9: 29198 Segmentation fault (core dumped); ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267451963:119,Down,Download,119,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267451963,2,"['Down', 'fault']","['Download', 'fault']"
Availability,"If one has a downstream fusion pipeline that uses transcriptome mapping, you can already get those from the -z=<output.sam> option for a while. The real challenge is how to properly control the false positive rate. That's the main thing special purpose downstream software must solve.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-280828290:13,down,downstream,13,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-280828290,2,['down'],['downstream']
Availability,"If so, I also received an 'image not found' error",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421408534:44,error,error,44,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421408534,1,['error'],['error']
Availability,"If this feature is not supported, is there a reason that Salmon is allowed to run through the entire quantification process before throwing the error? Wouldn't it be beneficial to check that the -r and -1 -2 flags are not all called simultaneously? You could always add an override flag if there is some use case for adding all together...",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/175#issuecomment-392174468:144,error,error,144,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/175#issuecomment-392174468,1,['error'],['error']
Availability,"If you are not building from source, then `0.10.1` is identical to `0.10.0`, there are no new features, behavior changes, or bug fixes. The entire purpose of `0.10.1` is to fix the source build on specific versions of Debian linux using system versions of dependencies. Thus, the pre-compiled versions of `0.10.0` and `0.10.1` (which are not build on a Debian system and which downloads and builds the dependencies directly) will not have any differences.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/841#issuecomment-1542672313:377,down,downloads,377,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/841#issuecomment-1542672313,1,['down'],['downloads']
Availability,"If you put it in e.g. a google drive or dropbox link and share privately with me by email, i will let you know once it's downloaded. Otherwise, i might be able to set a google drive link where you can upload, but I've had mixed success with that in the past.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/435#issuecomment-544178376:121,down,downloaded,121,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/435#issuecomment-544178376,1,['down'],['downloaded']
Availability,"In my case, the issue was that I was giving a relative path instead of absolute path to the `salmon quant -i` argument. Giving the absolute path made the `Exception : [Error: The index version file salmon_index/versionInfo.json doesn't seem to exist. Please try re-building the salmon index.]` error go away.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/696#issuecomment-1903505996:168,Error,Error,168,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/696#issuecomment-1903505996,2,"['Error', 'error']","['Error', 'error']"
Availability,"In my experience it is normal to get a **much lower** transcriptome mapping rate for rRNA-depleted samples vs polyA-selected samples. . I'm getting ~21% mapping rate (using Gencode 41 transcripts) on human brain RNAseq samples sequenced several years ago using rRNA-depletion protocol (older Illumina Ribo Zero kits).; I was initially shocked (being used to seeing >90% mapping rates from HISAT2/STAR for these samples) but it turns out **this is normal** for this kind of samples, in this context.; HISAT2 reports 96% mapping rate on the same samples, but QC metrics (rnaseqc) for these HISAT2 alignments (using the same Gencode annotation) show a **65% intronic rate** and a **%23.5 exonic rate** (the rest being intergenic etc). So the _exonic rate_ is getting close to what Salmon is showing (and what it measures), thus I suppose it makes sense to see such a low mapping rate for Salmon on these samples.; (kallisto also reports ~21% pseudoaligned percentage on the same samples). I am only a bit disappointed that when I use `--validateMappings` with decoy sequences (whole genome) added, the mapping rate goes down to about **16.7%** -- as some reads map better to the decoys in that case (partially intronic reads etc.), but I also see a `higher number of fragments entirely discarded because of alignment score` (higher `num_fragments_filtered_vm` and much higher `num_alignments_below_threshold_for_mapped_fragments_vm`).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/779#issuecomment-1474291747:1117,down,down,1117,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/779#issuecomment-1474291747,1,['down'],['down']
Availability,"In other news --- after many many continuous tries, I was finally able to reproduce the issue! I've never been so happy to reproduce a bug. Now to find out if it's our fault or TBB's fault.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267692883:168,fault,fault,168,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267692883,2,['fault'],['fault']
Availability,"In particular, this would enable streaming behavior => transcript quantification, downstream of khmer error trimming etc. c.f. http://khmer.readthedocs.org/en/stable/whats-new-2.0.html cc @MacManes @Blahah",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152827347:82,down,downstream,82,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152827347,2,"['down', 'error']","['downstream', 'error']"
Availability,"In terms of an intermediate update:. **Setting 1**:. _Command 1_:; `/path/to/salmon alevin -l ISF --chromium -1 $R1 -2 $R2 -i $REF -p 4 -o $ID --tgMap $MAP`; _End of Log 1_:; ```; [2021-07-13 20:12:34.651] [alevinLog] [info] Starting white listing of 814 cells; [2021-07-13 20:12:34.651] [alevinLog] [info] Starting to make feature Matrix; [2021-07-13 20:12:34.654] [alevinLog] [info] Done making feature Matrix; [2021-07-13 20:12:35.447] [alevinLog] [info] Finished white listing; [2021-07-13 20:12:36.158] [alevinLog] [info] Finished optimizer; 0.0408521	8.9925e-05	0.000114595	636780	18682.9	; 0.0290163	6.61624e-05	0.000111685	230922	8010.3	; ```; _Size of quants_mat_rows.txt 1_: 814 lines/barcodes. **Setting 2:**:; _Command 1_:; `/path/to/salmon alevin -l ISR --chromium -1 $R1 -2 $R2 -i $REF -p 4 -o $ID --tgMap $MAP`; _End of Log 1_:; ```; [2021-07-14 09:51:38.564] [alevinLog] [info] Starting white listing of 814 cells; [2021-07-14 09:51:38.564] [alevinLog] [info] Starting to make feature Matrix; [2021-07-14 09:51:38.566] [alevinLog] [info] Done making feature Matrix; [2021-07-14 09:51:39.347] [alevinLog] [info] Finished white listing; [2021-07-14 09:51:39.541] [alevinLog] [info] Finished optimizer; [2021-07-14 09:51:39.564] [jointLog] [warning] NOTE: Read Lib [[ ../Reads/5309-CT-2_S01_L005_R1_001.fastq.gz, ../Reads/5309-CT-2_S01_L005_R2_001.fastq.gz]] :. Greater than 5% of the fragments disagreed with the provided library type; check the file: 5309-CT-2/lib_format_counts.json for details. 0.0408521	8.9925e-05	0.000114595	636780	18682.9	; 0.0290163	6.61624e-05	0.000111685	230922	8010.3	; ```; _Size of quants_mat_rows.txt 1_: 814 lines/barcodes. Technically, this means that the program ran without generating an error message, but this seems strange to me. So, I think I would prefer to keep the issue open a little bit longer.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-880273749:1737,error,error,1737,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-880273749,1,['error'],['error']
Availability,"In this case, it is likely treating the left and right reads as orphans when mapping. Therefore, you're losing basically all of the benefit of having paired-end reads (which can be considerable) and also increasing the probability of spurious mapping (orphans generally map much more ambiguously than properly paired reads). Since you have the paired-end files, you should try to repair them (using something like BBMap's [re-pair tool](https://jgi.doe.gov/data-and-tools/software-tools/bbtools/bb-tools-user-guide/repair-guide/)) to get back properly-paired FASTQ files for analysis. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/793#issuecomment-1220164752:380,repair,repair,380,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/793#issuecomment-1220164752,4,['repair'],"['repair', 'repair-guide']"
Availability,"Internal testing suggests that these errors are gone, but feel free to report back here (and reopen this) if you still encounter it.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/50#issuecomment-303617599:37,error,errors,37,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/50#issuecomment-303617599,1,['error'],['errors']
Availability,"Is there a different binary somewhere perhaps? . I a downloading: . https://github.com/COMBINE-lab/salmon/releases/download/v0.8.2/Salmon-0.8.2_macOS_10.12.tar.gz. And get this: . Salmon-0.8.2_macOS_10.12.tar.gz; 100%[=====================================================>] 2.64M ; 326KB/s in 6.6s . 2017-04-18 09:43:33 (409 KB/s) - 'Salmon-0.8.2_macOS_10.12.tar.gz' saved; [2766997/2766997] . MacBook-Air:salmon jjv5$ tar zxf Salmon-0.8.2_macOS_10.12.tar.gz . MacBook-Air:salmon jjv5$ cd Salmon-0.8.2_macOX_10.12/bin/ . MacBook-Air:bin jjv5$ ./salmon -h . salmon(43548,0x7fffdc0c23c0) malloc: *** malloc_zone_unregister() failed; for 0x7fffdc0b8000 . Salmon v0.8.2 . Usage: salmon -h|--help or . salmon -v|--version or . salmon -c|--cite or . salmon [--no-version-check] <COMMAND> [-h | options] . Commands: . cite Show salmon citation information . index Create a salmon index . quant Quantify a sample . swim Perform super-secret operation . MacBook-Air:bin jjv5$ sw_vers . ProductName: Mac OS X . ProductVersion: 10.12.4 . BuildVersion: 16E195. On 2017-04-18 09:33, Rob Patro wrote:. > Hi @jjv5 [1], ; > ; > This error should be fixed. The binary works for me without error (or that strange jemalloc warning) on OS X 10.12.4. The relevant library should be statically linked in, so I doubt it's a path problem. You could also try the conda build [2] to see if that works for you. ; > ; > --; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub [3], or mute the thread [4].; . Links:; ------; [1] https://github.com/jjv5; [2] https://anaconda.org/bioconda/salmon; [3]; https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294845429; [4]; https://github.com/notifications/unsubscribe-auth/AA45u06Kawg81nafcz0GBVcZICdu85iqks5rxLuSgaJpZM4Ktuq4",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294849229:53,down,downloading,53,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294849229,4,"['down', 'error']","['download', 'downloading', 'error']"
Availability,"It depends what type of ""replicates"" these are. If these are biological replicates, then they should _definitely_ be run separately. Biological replicates contain crucial information about the variability of expression that can be expected in a given condition, and all downstream differential expression tools will use this information. If these are ""technical"" replicates, then there should be little harm in quantifying them together (of course, then one has a 2 condition experiment with only 1 biological replicate per-condition ... which is a big problem if one wishes to analyze e.g. differential expression).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/190#issuecomment-400080695:270,down,downstream,270,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/190#issuecomment-400080695,1,['down'],['downstream']
Availability,"It is, if you provide a list of CB to use through command line flag --whitelist. But again I think it's a circular problem, if you know the list of CB to use, you might have already figures out the frequency distribution of each CB by parsing the fastq. Either by using --dumpFeatures or externally may be through awk. One other option is to use --keepCBfraction it takes a number in (0, 1] , which basically tells Alevin to use X fraction of CB from the total observed. The caveat there is to figure out a decent value of X as the CB frequency distribution is a long tailed distribution and if say you provide 1 then Alevin will quantify each and every observed CB and slow down the full pipeline.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490833213:675,down,down,675,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490833213,1,['down'],['down']
Availability,"It looks like it's having trouble parsing this folder name ""salmon-1.2.1-h2072146_0 2/"", what if you put it in quotes?. ```; export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:""/Users/maysonlin/Downloads/salmon-1.2.1-h2072146_0 2/lib""; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623118024:187,Down,Downloads,187,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623118024,1,['Down'],['Downloads']
Availability,"It looks like you are issuing . `$cmake .` . rather than . `$cmake ..`. when trying to perform the cmake step. If you could build from source, that would be great. However, I was suggesting you try downloading [this](; https://github.com/COMBINE-lab/salmon/releases/download/v0.11.1/salmon-0.11.1-linux_x86_64.tar.gz) pre-compiled linux binary and running that.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409436938:198,down,downloading,198,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409436938,2,['down'],"['download', 'downloading']"
Availability,"It may be a bad alloc error. Do you have a machine with a bit more ram to try it on? Also, you could try installing through bioconda to see if it may be an issue with the precompiled binary (e.g. librar compatibility).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-522261180:22,error,error,22,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-522261180,1,['error'],['error']
Availability,"It seems FreeBSD prefers to use Docker under an emulator -- I did not try that.; I installed a ubuntu on VirtualBox. There I was able to run salmon index and salmon quant in a conda environment. Same Segmentation Fault crash.; I also get the same crashes if I use only the first 54K reads of the 23.5M in the files. So I do not ; think it is an issue of computer memory size.; Maybe virtual Ubuntu is not the same as hardware Ubuntu. Can you please try the fastq files that I tried, and see if they don't crash for you on Ubuntu 19.04?; If they do not crash for you, I will build a hardware Ubuntu box so I can use your salmon suite.; As you probably know, you can find these mouse brain RNA-seq data at; https://www.ncbi.nlm.nih.gov/sra/?term=SRR1818187. I just noticed that you have posted decoys, thank you.; I indexed one, with your recommended command, and I got many many many warnings; (I could not figure out how to count them) such as; -------------------------------------------------------------; [2019-08-21 13:19:31.122] [jointLog] [warning] Entry with header [ENSMUST00000103739.3], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2019-08-21 13:19:31.178] [jointLog] [warning] Entry with header [ENSMUST00000200713.1], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2019-08-21 13:19:31.201] [jointLog] [warning] Entry with header [ENSMUST00000191703.1], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2019-08-21 13:19:31.344] [jointLog] [warning] Entry with header [ENSMUST00000192089.1], had length less than the k-mer length of 31 (perhaps after poly-A clipping); -------------------------------------- ; Is that expected for the gentome.fa ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-524416706:213,Fault,Fault,213,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-524416706,1,['Fault'],['Fault']
Availability,It seems to be working now with lab-generated data. Can't seem to recreate the issue. So will close the issue until we find more data that returns the same error. Thanks!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-466424466:156,error,error,156,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-466424466,1,['error'],['error']
Availability,It will be good to have this feature to automatically infer the most likely library type by downsampling. Waiting for this feature to be implemented!!!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/36#issuecomment-186365104:92,down,downsampling,92,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/36#issuecomment-186365104,1,['down'],['downsampling']
Availability,"It's now available in latest stable release, closing the issue but feel free to reopen if you have any issues.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/416#issuecomment-548614903:9,avail,available,9,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/416#issuecomment-548614903,2,['avail'],['available']
Availability,"It's possible that `Caenorhabditis_elegans.WBcel235.cdna.all.fa.gz` was corrupted during your FTP download, since there's no error correction aside from TCP checksums. You might want to check your file just to make sure:. ```shell; $ md5 Caenorhabditis_elegans.WBcel235.cdna.all.fa.gz ; MD5 (Caenorhabditis_elegans.WBcel235.cdna.all.fa.gz) = 3979cd3a2d5fe408b6261ae5b1d0c4de; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-376924236:98,down,download,98,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-376924236,2,"['down', 'error']","['download', 'error']"
Availability,"It's possible this is [related to the other issue](https://github.com/COMBINE-lab/salmon/issues/321), since I'm also seeing:. ```; 2018-11-28 18:01:19,745 i-05ef169a0611966c7 data_refinery_workers.processors.utils ERROR [pipeline_applied: SALMON] [failure_reason: Shell call to salmon failed because: ### salmon (; ### [ program ] => salmon; ### [ command ] => quant; ### [ libType ] => { A }; ### [ biasSpeedSamp ] => { 5 }; ### [ index ] => { /home/user/data_store/TRANSCRIPTOME_INDEX/HOMO_SAPIENS/long }; ### [ mates1 ] => { /home/user/data_store/processor_job_405995/SRR2963482_1.fastq }; ### [ mates2 ] => { /home/user/data_store/processor_job_405995/SRR2963482_2.fastq }; ### [ threads ] => { 16 }; ### [ output ] => { /home/user/data_store/processor_job_405995/SRR2963482_output/ }; ### [ seqBias ] => { }; ### [ gcBias ] => { }; ### [ dumpEq ] => { }; ### [ writeUnmappedNames ] => { }; Logs will be written to /home/user/data_store/processor_job_405995/SRR2963482_output/logs; [2018-11-28 18:01:15.711] [jointLog] [info] parsing read library format; [2018-11-28 18:01:15.711] [jointLog] [info] There is 1 library.; [2018-11-28 18:01:15.761] [stderrLog] [info] Loading Suffix Array; [2018-11-28 18:01:15.761] [jointLog] [info] Loading Quasi index; [2018-11-28 18:01:15.761] [jointLog] [info] Loading 32-bit quasi index; Exception : [Failed to read 1176099240 bytes from input stream! Read 872415224]; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/322#issuecomment-442548280:214,ERROR,ERROR,214,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/322#issuecomment-442548280,1,['ERROR'],['ERROR']
Availability,"It's still not working. If I type ./bin/salmon I get:. salmon(68460,0x7fffdb32f3c0) malloc: **\* malloc_zone_unregister() failed for 0x7fffdb325000; version : 0.7.1. So maybe it's working okay but it's still printing the error message.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-259472964:221,error,error,221,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-259472964,1,['error'],['error']
Availability,"It's still only a hypothesis that moving to a tarball would fix my issue. I noticed that once I hacked around this one error by using `unzip` instead, it seems to be working. Still, I think using a `tarball` rather than `zip` file is good style anyway.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-193939385:119,error,error,119,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-193939385,1,['error'],['error']
Availability,"I’ve noticed the same thing, and have been hard-masking any repetitive sequences in my pipeline (which I’ve been late to open-source and should be available soon): http://mattshirley.com/uploads/2017/11/2017-11-01_Genome_Informatics.pdf",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/217#issuecomment-385393689:48,mask,masking,48,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/217#issuecomment-385393689,2,"['avail', 'mask']","['available', 'masking']"
Availability,"Jumping on this thread. I received similar Seg faults with conda install on OSX. I tried the binary you posted, but receive this error when I try to execute. dyld: Library not loaded: @rpath/libtbbmalloc_proxy.dylib; Referenced from: /Users/dnb14/Documents/salmon_0.11.4-pre_OSX/./bin/salmon; Reason: image not found; Trace/BPT trap: 5",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421407796:47,fault,faults,47,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421407796,2,"['error', 'fault']","['error', 'faults']"
Availability,"Just a bit more information:. I installed through conda salmon=0.11.3 and executed command on two different fastq files. The first one was on a single lane of the data and the second was on a concatenated file across 4 lanes. I managed to run the single lane file but got a seg dump error for the ""big""er file. Both times it seems to output the correct files. . Single lane:; ```; salmon alevin -l ISR -1 hgmm_100_S1_L001_001.fastq.1.gz -2 hgmm_100_S1_L001_001.fastq.2.gz --chromium -i geneset.dir/geneset_coding_exons.salmon.index/ -o salmon.dir/ --tgMap transcript2geneMap.tsv --dumpCsvCounts; Version Info: ### PLEASE UPGRADE SALMON ###; ### A newer version of Salmon with important bug fixes and improvements is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; Logs will be written to salmon.dir/logs; ### alevin (dscRNA-seq quantification) v0.11.3; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ libType ] => { ISR }; ### [ mates1 ] => { hgmm_100_S1_L001_001.fastq.1.gz }; ### [ mates2 ] => { hgmm_100_S1_L001_001.fastq.2.gz }; ### [ chromium ] => { }; ### [ index ] => { geneset.dir/geneset_coding_exons.salmon.index/ }; ### [ output ] => { salmon.dir/ }; ### [ tgMap ] => { transcript2geneMap.tsv }; ### [ dumpCsvCounts ] => { }. [2019-01-29 09:54:57.898] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-01-29 09:54:57.916] [alevinLog] [info] Processing barcodes files (if Present) . ; processed 0 Million barcodes. [2019-01-29 09:54:59.693] [alevinLog] [info] Done barcode density calculation.; [2019-01-29 09:54:59.693] [alevinLog] [info] # Barcodes Used: 902561 / 912145.; [2019-01-29 09:55:04.490] [alevinLog] [info] Knee found left boundary at 391 ; [2019-01-29 09:55:04.817] [alevinLog] [info] Gauss Corrected Boundary at 99 ; [2019-01-29 09:55:04.81",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:283,error,error,283,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,3,"['avail', 'error']","['available', 'error']"
Availability,"Just a heads up, issue #266 has been added and the solution is currently available in the source build from the develop branch. We will include this to master with the next planned release of Salmon v0.11.3. Thanks again for the useful feedbacks and comments.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-412352411:73,avail,available,73,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-412352411,2,['avail'],['available']
Availability,"Looks like --no-version-check does the job of avoiding this warning, however, make it is better to just make a command for version check instead of forcing users to do --no-version-check all the time to silence this error?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/277#issuecomment-415572366:216,error,error,216,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/277#issuecomment-415572366,1,['error'],['error']
Availability,"Looks like I have some sort of conflict going on:. UnsatisfiableError: The following specifications were found to be in conflict:; - libboost -> libcxx >=4.0.1 -> clangdev ==5.0.0 -> llvmdev ==5.0.0; - libcxx 4.0.0* -> clangdev ==4.0.0 -> llvmdev ==4.0.0; Use ""conda info <package>"" to see the dependencies for each package. [https://sites.google.com/site/ummslogos/_/rsrc/1489610858836/home/apple-icon-76x76.png]. Javier E. Irazoqui, PhD; Associate Professor; Department of Microbiology and Physiological Systems; UMass Medical School. 368 Plantation Street; Albert Sherman Center; Room AS8.1053; Worcester, MA 01605. (774) 455-3797; Skype: javierirazoqui. Confidentiality Notice:; This e-mail message, including any attachments, is for the sole use of the intended recipient(s) and may contain confidential, proprietary and privileged information. Any unauthorized review, use, disclosure or distribution is prohibited. If you are not the intended recipient, please contact the sender immediately and destroy or permanently delete all copies of the original message. On Feb 11, 2018, at 11:01 PM, Rob Patro <notifications@github.com<mailto:notifications@github.com>> wrote:. I can't seem to reproduce this locally (OSX 10.13.1). However, what happens if you try:. > conda install salmon=0.9.1. do you see this version as available? Does it try to install it?. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364824034>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AiohHaDPT6VtnW3toOd9kEKLLo2Zjvvcks5tT7e0gaJpZM4SAonB>.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364941997:1323,avail,available,1323,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364941997,1,['avail'],['available']
Availability,"MI count **but** I had to bring that part into the discussion as it was mentioned that you wanted to compare different deduplication strategies. I think your suggestion makes sense and mostly aligns with the definition being used by 10x [here](https://kb.10xgenomics.com/hc/en-us/articles/115003646912-How-is-sequencing-saturation-calculated-). Although note they have changed the definition with the new version of the software. Anyhow, the *short answer* to the question of how can we generate that in Alevin environment is -- by post processing the dumpFeatures output of the Alevin run. _long answer_: The difference lies in the term deduplication and the strategy used to perform it. Basically the fundamental unit for deduplication in 10x as mentioned in the link above is a tuple of `(valid cell-barcode, valid UMI, gene) `, while that's not exactly true for us. We can certainly generate it but it does not aligns with the theory of Alevin's deduplication Algorithm. Having said that, I also like your idea of using:; > the gene quantifications from (de)duplicated UMIs, gene quantifications from unique UMIs, using them to have an idea of the amount/ratio of redundant information. However, the above definition reflect more of the duplication rate (at least in terms of the definition defined in *Alevin* manuscript [here](https://www.biorxiv.org/content/early/2018/06/01/335000)) than sequence saturation. **NOTE** the quoted definition was actually the 10x definition of sequence saturation too before it was changed, at least in my understanding. If you need the deduplication rate of each cell you can get that by using `--dumpFeature` flag in the Alevin run and look for file `featureDump.txt`. There will be a dump of multiple features w/ each CB but the second (starting from 0) column of the file gives you the duplication rate of each CB. Hope that helps, I totally understand your suggestion and would like to include @rob-p into this too if he has more comments/insights on this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/267#issuecomment-414784626:1344,redundant,redundant,1344,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/267#issuecomment-414784626,1,['redundant'],['redundant']
Availability,Maybe SLURM is killing your job because of too less memory allocation and the error message is just really wired?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-415887826:78,error,error,78,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-415887826,1,['error'],['error']
Availability,"Maybe it is a little off-topic, but here is the code for the v3 sample that ran without generating error messages:. ```; ID=5k_pbmc_v3. R1a=../Reads/5k_pbmc_v3_S1_L001_R1_001.fastq.gz; R1b=../Reads/5k_pbmc_v3_S1_L002_R1_001.fastq.gz; R1c=../Reads/5k_pbmc_v3_S1_L003_R1_001.fastq.gz; R1d=../Reads/5k_pbmc_v3_S1_L004_R1_001.fastq.gz. R2a=../Reads/5k_pbmc_v3_S1_L001_R2_001.fastq.gz; R2b=../Reads/5k_pbmc_v3_S1_L002_R2_001.fastq.gz; R2c=../Reads/5k_pbmc_v3_S1_L003_R2_001.fastq.gz; R2d=../Reads/5k_pbmc_v3_S1_L004_R2_001.fastq.gz. TYPE=10xV3; #for MAP, download from UCSC Table Browser, and remove 1st line (and then manually add SARS-COV-2 genes); MAP=../../Ref_Generation/SARS_COV_2-hg38_RefSeq_2column.txt; REF=../../Ref_Generation/SARS_COV_2-hg38_salmon; CBWL=/net/isi-dcnl/ifs/user_data/Seq/Chromium_data/3M-february-2018.txt. ../../Ref_Generation/salmon-1.5.1_linux_x86_64/bin/salmon alevin -l ISR --chromium -1 $R1a $R1b $R1c $R1d -2 $R2a $R2b $R2c $R2d -i $REF -p 4 -o $ID --tgMap $MAP --whitelist $CBWL; ```. That v3 white list is even **larger** than the v2 white list:. ```; cwarden$ wc -l /net/isi-dcnl/ifs/user_data/Seq/Chromium_data/3M-february-2018.txt; 6794880 /net/isi-dcnl/ifs/user_data/Seq/Chromium_data/3M-february-2018.txt; ```. So, that is part of why I was confused. However, before I start running the analysis with the shorter set of barcodes unique for this sample, here are the commands that I believe you were asking about. ```; cwarden$ wc -l ../CellRanger/5309-CT-2/outs/raw_feature_bc_matrix/barcodes.tsv; 737280 ../CellRanger/5309-CT-2/outs/raw_feature_bc_matrix/barcodes.tsv; cwarden$ wc -l ../CellRanger/5309-CT-2/outs/filtered_feature_bc_matrix/barcodes.tsv; 9974 ../CellRanger/5309-CT-2/outs/filtered_feature_bc_matrix/barcodes.tsv; ```. I would prefer to have an option where I could potentially conclude the cell count is different than provided by CellRanger. . However, I will at least check to confirm this solves the problem with the error message that I am seei",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-879347665:99,error,error,99,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-879347665,2,"['down', 'error']","['download', 'error']"
Availability,Maybe move the download stuff into an `install_deps.sh` script.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/11#issuecomment-132487629:15,down,download,15,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/11#issuecomment-132487629,1,['down'],['download']
Availability,"MinCPUsNode=1 MinMemoryCPU=100000M MinTmpDiskNode=0; Features=(null) Gres=(null) Reservation=(null); Shared=OK Contiguous=0 Licenses=(null) Network=(null); Command=(null); WorkDir=/mnt/galaxy/tmp/job_working_directory/000/994; ```. - `Galaxy stderr`; ```; Fatal error: Exit code 139 (); ...; /mnt/galaxy/tmp/job_working_directory/000/994/tool_script.sh: line 50: 7495 Segmentation fault (core dumped) salmon quant --index ./index --libType U --unmatedReads ./single.fastq --output ./output --allowOrphans --ma 2 --mp 4 --go 5 --ge 3 --minScoreFraction 0.65 --threads ""${GALAXY_SLOTS:-4}"" --incompatPrior 1e-20 --biasSpeedSamp 1 --fldMax 1000 --fldMean 200 --fldSD 80 --forgettingFactor 0.65 --maxReadOcc 100 --numBiasSamples 2000000 --numAuxModelSamples 5000000 --numPreAuxModelSamples 1000000 --numGibbsSamples 0 --numBootstraps 0 --consensusSlack 0 --vbPrior 0.001 --sigDigits 3; ```. - `syslog`; ```; Aug 27 20:14:23 ip-172-31-16-139 kernel: [ 2134.447133] traps: salmon[7495] general protection ip:7ff9ce320dca sp:7ffd6e497020 error:0 in libtbb.so.2[7ff9ce2fe000+37000]; ```. **`salmon 0.11.2 run with: NativeSpecification --ntasks=1 --nodes=1 --mem-per-cpu=100000`**; - `scontrol show job 99`; ```; JobId=99 Name=g995_salmon_refinery_stemcellcommons_org; UserId=galaxy(1001) GroupId=users(100); Priority=4294901662 Account=(null) QOS=(null); JobState=COMPLETED Reason=None Dependency=(null); Requeue=1 Restarts=0 BatchFlag=1 ExitCode=0:0; RunTime=00:07:36 TimeLimit=UNLIMITED TimeMin=N/A; SubmitTime=2018-08-27T20:20:26 EligibleTime=2018-08-27T20:20:26; StartTime=2018-08-27T20:20:26 EndTime=2018-08-27T20:28:02; PreemptTime=None SuspendTime=None SecsPreSuspend=0; Partition=main AllocNode:Sid=ip-172-31-24-127:7975; ReqNodeList=(null) ExcNodeList=(null); NodeList=w21; BatchHost=w21; NumNodes=1 NumCPUs=1 CPUs/Task=1 ReqS:C:T=*:*:*; MinCPUsNode=1 MinMemoryNode=100000M MinTmpDiskNode=0; Features=(null) Gres=(null) Reservation=(null); Shared=OK Contiguous=0 Licenses=(null) Network=(null); Comma",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238:3857,error,error,3857,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238,1,['error'],['error']
Availability,"Modified the CMakeLists.txt file to use dynamic libraries unconditionally, edited that section down to:. `set (Boost_USE_STATIC_LIBS OFF); `; Changed the CMakeLists.txt to try everything I could think of and then finally force the issue:. ```; set(Boost_ADDITIONAL_VERSIONS ""1.57"" ""1.57.0"" ""1.59.0"" ""1.60.0"" ""1.61.0"" ""1.62"" ""1.63"" ""1.64"" ""1.65"" ""1.66""); find_package(Boost 1.57 COMPONENTS iostreams filesystem system thread timer chrono program_options); message(""Boost_FOUND 1.57 = ${Boost_FOUND}""); find_package(Boost 1.57.0 COMPONENTS iostreams filesystem system thread timer chrono program_options); message(""BOOST_INCLUDEDIR = ${BOOST_INCLUDEDIR}""); message(""BOOST_LIBRARYDIR = ${BOOST_LIBRARYDIR}""); message(""Boost_FOUND 1.57.0 = ${Boost_FOUND}""); set(Boost_FOUND ""1""); message(""Boost_FOUND FORCED = ${Boost_FOUND}""); include(ExternalProject); ```; This emits:; ```. -- Could NOT find Boost; Boost_FOUND 1.57 = 0; -- Could NOT find Boost; BOOST_INCLUDEDIR = /usr/include/boost157; BOOST_LIBRARYDIR = /usr/lib64; Boost_FOUND 1.57.0 = 0; Boost_FOUND FORCED = 1; BOOST INCLUDE DIR = /usr/include/boost157; BOOST INCLUDE DIRS = /usr/include/boost157; BOOST LIB DIR = /usr/lib64; BOOST LIBRARIES = ; ```; That at least allowed cmake to complete when it was run with:. `nice scl enable devtoolset-4 '~/bin/cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBoost_NO_BOOST_CMAKE=BOOL:ON -DBOOST_LIBRARYDIR=/usr/lib64 -DBOOST_INCLUDEDIR=/usr/include/boost157 ../CMakeLists.txt' >try_cmake.log 2>&1 &; `. Then tried to build it. ```; cd ..; nice scl enable devtoolset-4 'make' >build_2018_06_13d.log 2>&1 &. ```. It failed at this command because of missing boost symbols in a link operation, my reading is that the command does not include anything to link boost libraries. So telling cmake where the libraries are, where the include files are, and that boost was found was not sufficient. There must be some other set of symbols which need to be defined. `/opt/rh/devtoolset-4/root/usr/bin/c++ -pthread -ftree-ve",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397025719:95,down,down,95,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397025719,1,['down'],['down']
Availability,"Moving to Quantify. [2019-06-06 19:24:55.716] [alevinLog] [info] parsing read library format; [2019-06-06 19:24:55.716] [jointLog] [info] There is 1 library.; [2019-06-06 19:24:55.889] [jointLog] [info] Loading Quasi index; [2019-06-06 19:24:55.889] [jointLog] [info] Loading 32-bit quasi index; [2019-06-06 19:24:55.890] [stderrLog] [info] Loading Suffix Array ; [2019-06-06 19:24:56.791] [stderrLog] [info] Loading Transcript Info ; [2019-06-06 19:24:57.025] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-06-06 19:24:57.061] [stderrLog] [info] There were 136,011 set bits in the bit array; [2019-06-06 19:24:57.084] [stderrLog] [info] Computing transcript lengths; [2019-06-06 19:24:57.084] [stderrLog] [info] Waiting to finish loading hash; [2019-06-06 19:25:06.552] [jointLog] [info] done; [2019-06-06 19:25:06.552] [jointLog] [info] Index contained 136,011 targets; [2019-06-06 19:25:06.552] [stderrLog] [info] Done loading index; [2019-06-06 19:25:06.728] [alevinLog] [error] Barcode not found in frequency table; ```. Salmon Quant log is this. ```; [2019-06-06 19:23:29.519] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-06-06 19:23:29.519] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-06-06 19:23:29.520] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-06-06 19:23:29.520] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-06-06 19:23:29.520] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin; Using default value of 0.6 for consensusSlack in Alevin; [2019-06-06 19:24:55.716] [jointLog] [info] There is 1 library.; [2019-06-06 19:24:55.889] [jointLog] [info] Loading Quasi index; [2019-06-06 19:24:55.889] [join",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790:2082,error,error,2082,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/369#issuecomment-499592790,1,['error'],['error']
Availability,"My preference would be to throw a warning if any reads are shorter than the; kmer length and throw an error if all are. So if any reads are less then; k-mer length report ""Warning: x% of reads were found to be less than k used; to build index. Consider rebuilding index with smaller k. Minimum read size; found was [min read size]"" and then halt execution if x% is 100%. Would; that sound reasonable?. Thanks,. Kieran. On 8 February 2016 at 14:25, Rob Patro notifications@github.com wrote:. > Hi @kieranrcampbell https://github.com/kieranrcampbell,; > ; > Indeed, such reads will be un-mappable. The only tricky question here is; > at which point we should (1) do nothing (2) issue a warning (3) issue an; > error. Since the reads may not all be of the same size (perhaps the user; > has quality-trimmed the reads first and not opted to discard the short; > ones), it's possible we may see some reads too short to consider, but; > others would not be. We could choose arbitrary cutoffs (warning if greater; > than 1,000 such reads and an error if greater than 1,000,000), but this; > will, of course, depend on how large the input data set is. Anyway, I agree; > that we should notify the user of this and will be happy to add it; do you; > have any suggestions on the default behavior?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/COMBINE-lab/salmon/issues/41#issuecomment-181394180.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/41#issuecomment-181396844:102,error,error,102,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/41#issuecomment-181396844,3,['error'],['error']
Availability,"Nevermind, I figured it out! It seems this boils down to specifying the number of cores you request (if using HPC). I'm super new to this so I hope this was helpful!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/643#issuecomment-2113100892:49,down,down,49,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/643#issuecomment-2113100892,1,['down'],['down']
Availability,No error so far! Thanks a bunch. I'll let you know if I get any more errors,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-259488873:3,error,error,3,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-259488873,2,['error'],"['error', 'errors']"
Availability,"No, it's fine. I understand the error, it doesn't affect any of my workflow, and I can easily compensate for it.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/806#issuecomment-1294029352:32,error,error,32,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/806#issuecomment-1294029352,1,['error'],['error']
Availability,"Not a problem @roryk , yes in my understanding of v3 things directly effecting Alevin is just the Umi length increment. Other noticeable changes downstream of Alevin I have observed and seen some comments from @LTLA would be:; * Read length changes from 98 to 91; * The output format of cellranger has changed, [this](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/matrices) might give full overview.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/324#issuecomment-443237933:145,down,downstream,145,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/324#issuecomment-443237933,1,['down'],['downstream']
Availability,"Note that I do (now) have `cereal` installed, so there is no need for `salmon` to download and build it. It would be nice if this were an option to use the system-provided `cereal` library.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-127342739:82,down,download,82,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-127342739,1,['down'],['download']
Availability,"OK --- I have an example where I can reproduce, and it does indeed seem to only occur with 64-bit indices. I will try and track this down ASAP, I'm almost certain it has to do with cereal though. While I look into this, I've also filed https://github.com/USCiLab/cereal/issues/386.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/129#issuecomment-287348908:133,down,down,133,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/129#issuecomment-287348908,1,['down'],['down']
Availability,"OK --- I think I fixed it; can you re-download the v0.6.0 binary and see if the segfault goes away for you? I think it was the result of failing to give a particular class a default constructor --- a certain variable was being initialized properly on my newer compiler, but that was not the case on the older compiler on the VM where I build the binary. ~~If this resolves the issue for you, I'll probably bump to v0.6.1 just in case anyone tries to build from the source tarball on an older compiler.~~ (I already moved the v0.6.0 tag to point to the new commit and updated the binaries. Hopefully nobody fell through the cracks with the old source tarball, but this doesn't seem like something worth bumping a release for --- assuming my minor change fixes the issue for you as well).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168364366:38,down,download,38,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168364366,1,['down'],['download']
Availability,"O_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7fff7e0f4700 (LWP 14274) exited]; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; [New Thread 0x7fff7d273700 (LWP 14275)]; Logs will be written to pbmc4k/alevin/logs; [New Thread 0x7ffefc3f1700 (LWP 14276)]; [New Thread 0x7ffe7b56f700 (LWP 14277)]; [New Thread 0x7ffdfa6ed700 (LWP 14278)]; ### salmon (single-cell-based) v0.10.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 8 }; ### [ output ] => { pbmc4k/alevin }; ### [ mates1 ] => { /dev/fd/63 }; ### [ mates2 ] => { /dev/fd/62 }; ### [ index ] => { /u/user/ref/cellranger/salmon/transcripts_index }; ### [ tgMap ] => { tx2gene.txt }. [2018-06-08 13:37:41.409] [jointLog] [info] Fragment incompatibility prior below threshold.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:2806,avail,available,2806,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['avail'],['available']
Availability,"Ok, I figured it out :) — these two *decoy* references are (1) identical with each other and (2) collide with *another* decoy reference. Currently, the way we process decoys, we don't allow duplicate decoys (it makes even less sense to allow duplicate decoys than to allow duplicate transcripts). However, the reason indexing worked with `k=17` is not because of `k` but because of the `--keepDuplicates` flag. With that flag, these decoys get added. I think the right thing for us to do on our part is to remove duplicate *decoys* if they appear in the reference and the user has not passed `--keepDuplicates`. . However, for the time being, I think the best thing to do is simply to remove `AABR07022993.1` and `AABR07023006.1` from the `toplevel` file and from `decoys.txt`, since the sequence they contain is already represented in the decoy part of the index. This will represent a full and comprehensive SAF index. I'm pinging @k3yavi to see if he has any good idea about the easiest way to cull these duplicate refs from the input files.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/505#issuecomment-613480649:925,ping,pinging,925,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/505#issuecomment-613480649,2,['ping'],['pinging']
Availability,"Ok, I realized that the Segmentation fault was not caused by passing multiple bam files, but by including either the `--seqBias` or `--gcBias` arguments. . The following command generates the segmentation fault:. ```; salmon quant -t transcripts.fasta -g gene_annotations.gtf -l IU -p 8 -o quantitation -a Aligned.toTranscriptome.bam --seqBias --gcBias; ```. and returns the following output before exiting:. ```; # salmon (alignment-based) v0.7.2; # [ program ] => salmon; # [ command ] => quant; # [ targets ] => { transcripts.fasta }; # [ geneMap ] => { gene_annotations.gtf }; # [ libType ] => { IU }; # [ threads ] => { 8 }; # [ output ] => { quantitation }; # [ alignments ] => {Aligned.toTranscriptome.bam }; # [ seqBias ] => { }; # [ gcBias ] => { }; Library format { type:paired end, relative orientation:inward, strandedness:unstranded }; Logs will be written to quantitation/logs; numQuantThreads = 4; parseThreads = 4; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""Aligned.toTranscriptome.bam"", fasta = ""transcripts.fasta"" . . .WARNING: Transcript ENSMUST00000185127 appears in the reference but did not appear in the BAM; WARNING: Transcript ENSMUST00000180893 appears in the reference but did not appear in the BAM; WARNING: Transcript ENSMUST00000206884 appears in the reference but did not appear in the BAM; WARNING: Transcript ENSMUST00000181916 appears in the reference but did not appear in the BAM; WARNING: Transcript ENSMUST00000202657 appears in the reference but did not appear in the BAM; [truncated]. replaced 3 non-ACGT nucleotides with random nucleotides; done. processed 0 reads in current round; ```. follow by the segmentation fold. The same command without the `--seqBias --gcBias` arguments succeeds. Perhas bias correction is not supported (or even necessary) when quantifying from a bam file?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-261738122:37,fault,fault,37,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-261738122,2,['fault'],['fault']
Availability,"Ok, I think I tracked it down! I'd forgot to replace `int` with the generic `OffsetT` in one function. This led to the `int64_t` being interpreted as an `int32_t` and hence ... overflow. I'll fix this upstream and push a new salmon binary (by the end of the week). Luckily, this only affects mapping and not index building, so you can use the index you already have.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-203700011:25,down,down,25,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-203700011,1,['down'],['down']
Availability,"Ok, I've tracked down and fixed the bug. I'll be tagging a new release with the fix soon. I'll ping back here and close this issue when the new release is out.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/129#issuecomment-287431196:17,down,down,17,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/129#issuecomment-287431196,2,"['down', 'ping']","['down', 'ping']"
Availability,"Ok, SAM output of the mapping information is available in 0.7.2 :).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/38#issuecomment-243957318:45,avail,available,45,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/38#issuecomment-243957318,1,['avail'],['available']
Availability,"Ok, nothing about your hardware, as reported, above, raises any ideas. I'll keep looking at the code that executes between the end of VBEM and Gibbs. However, one thing we might try to narrow down the offending region is running salmon under `gdb` (I can do this as well, but it's not useful on my end yet since I can't get the hanging behavior). If you run salmon under `gdb` and then issue a `SIGINT` (i.e., press `ctrl+C`) when the hanging behavior occurs, this will return you to `gdb`. At that point, you can issue the backtrace command (`bt`) at the `gdb` prompt, and it will tell us where in the code the thread was at the point the process was interrupted. Hopefully, this can narrow things down to an offending function.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267140418:192,down,down,192,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267140418,2,['down'],['down']
Availability,"Ok, pushed to [bioconda](https://github.com/bioconda/bioconda-recipes/pull/17922/checks?check_run_id=248588035), should be available in a couple of hours. Once it's available I'll make the official release too on the github. It'd be great if you can quickly test the new release for the bug once it's available. Thanks again !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-538581395:123,avail,available,123,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-538581395,3,['avail'],['available']
Availability,"Ok, so this mapping rate looks perfectly normal. Can you share some of these reads so I can see if I can reproduce the error on my end? Also, do you see this issue when / if you use the pre-compiled binary included on the GitHub release page (i.e. just to make sure the problem isn't specific to the bioconda executable)?. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409428971:119,error,error,119,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409428971,1,['error'],['error']
Availability,"Ok, thank you very much.; The problem I had was RAM availability. I enlarged it for 48 and it works.; However, to quantify I had another problem.; I use this command line and I increase to 56 RAM. srun ./salmon-1.5.2_linux_x86_64/bin/salmon quant -i salmon_index \; -l A \; -1 ERR3537668_1.fastq.gz \; -2 ERR3537668_2.fastq.gz \; -o transcripts_DecoyQuant \; --validateMappings \; --numBootstraps 100 \; --gcBias \; --seqBias\; -p 12. And I got this error message:; [2021-11-08 14:35:28.348] [jointLog] [info] Finished Bootstrapping; ERROR: Could not create the directory [""transcripts_quant""]. Please check; that. But actually, it was created.; I really don't understand the message error. Best wishes,; Luciana. On Fri, Nov 5, 2021 at 5:56 PM Rob Patro ***@***.***> wrote:. > Hi @lubios <https://github.com/lubios>,; >; > This suggests that the machine was not able to allocate enough memory to; > perform the requested operation. I would try the following things in order; > to see if they fix the issue. First, try quantifying without the; > decoy-aware index. This doesn't provide the benefits of the decoy sequence,; > but it will ensure that this is, in fact, the problem you are having. If; > that works, try building the decoy-aware index with the --sparse; > parameter. This will build the sparse index instead of the dense index,; > which is a bit smaller and may therefore fit in RAM on the machine where; > you are doing quantification.; >; > Best,; > Rob; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/717#issuecomment-962058307>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADRT5CUYGXBSY3UOX24RTYDUKQLETANCNFSM5HOIMSQQ>; > .; > Triage notifications on the go with GitHub Mobile for iOS; > <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>; > or Android; > <https://play.google.com/store/apps/details?id",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/717#issuecomment-963995631:52,avail,availability,52,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/717#issuecomment-963995631,4,"['ERROR', 'avail', 'error']","['ERROR', 'availability', 'error']"
Availability,"Ok, that's interesting. I am certain this is the error, because I had a student compiling salmon on OS 10.12 come to my office yesterday and we were able to fix the issue with exactly the change I'm using here. I have one more idea (and one more shot before I try upgrading to 10.12). Could you try the binary attached below?. [Salmon-0.7.3-pre_OSX_10.11.tar.gz](https://github.com/COMBINE-lab/salmon/files/581546/Salmon-0.7.3-pre_OSX_10.11.tar.gz)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-259488142:49,error,error,49,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-259488142,1,['error'],['error']
Availability,"Ok, the missing transcripts (from the reference FASTA) were definitely *the* problem. I created a transcript fasta using the genome FASTA and GTF file that were fed to STAR. Specifically, I used the command:. ```; $ ./gffread -w all_transcripts.fa -g Homo_sapiens.GRCh38.dna.primary_assembly.fa Homo_sapiens.GRCh38.87.gtf; ```. this produced transcript fasta that led to no warnings (fasta sequences not present in BAM) or errors (BAM sequences not present in fasta). This also allowed quantification (with bias correction) to run to completion. @mikelove, can you validate that this fixes things on your end? If so, perhaps @tomsing1 could also validate that this is the same root cause of the issue for him? In that case, I think that the right thing for me to do is to merge in the change that yells very loudly and bails if we find BAM header entries not present in the transcriptome FASTA.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267507316:423,error,errors,423,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267507316,1,['error'],['errors']
Availability,"Ok, when I attempt the build the way you say above, I get the following error during CMake:. ```; -- fetch PUFFERFISH exit code 127; CMake Error at CMakeLists.txt:317 (message):; Could not fetch pufferfish source [fetchPufferfish.sh returned exit code; 127]. -- Configuring incomplete, errors occurred!; See also ""/salmon-1.10.0/build/CMakeFiles/CMakeOutput.log"".; ```. It seems `wget`, `curl` and `unzip` were missing, and I had to install them. After that, I was able to build and install. At that point, I was able to reproduce the issue! So, it seems to me the underlying problem is coming from one of the upstream dependencies (i.e. libraries being linked to). I will try see if I can find the offender. In general, we like to statically link salmon for exactly this reason. Outside of package systems with which I am familiar (e.g. conda), we don't have a lot of experience in specifying dependent package version constrains, which I believe to be at fault here.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463973824:72,error,error,72,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463973824,4,"['Error', 'error', 'fault']","['Error', 'error', 'errors', 'fault']"
Availability,Okay got it. And is there any prospect of dealing with frameshift errors in the barcode detection step? Or is that out of scope?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988023540:66,error,errors,66,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988023540,1,['error'],['errors']
Availability,"Oki, so I have updated a couple of things in the latest commit on the develop branch, which should make the things more streamlined. . * `maxNumBarcodes`: As you have initially used `maxNumBarcodes` which is by default set to 100k it means. by default alevin quantifies 100k CBs which includes both the low and high confidence CB count. You can change this number accordingly to set the universe of the top CB to quantify.; * `KeepCBFraction` : It defines what fraction of `maxNumBarcodes` to be used as the high confidence barcodes and should definitely generate the quants for. If set to 1 then everything is high confidence and the whitelisting cannot be performed. Thanks to this issue, alevin will not fail without error when there is no low confidence CB is found instead it checks if the number of low confidence CB is less than `lowRegionMinBarcodes` (default to 200), alevin will warn and not perform the whitelisting.; * `freqThreshold`: This is used to filter out most obvious cases to filter out CB with frequency less than set by the parameter (default to 10). Hope this help ! I am also testing on my end for any other potential bug. Please let me know if you get a chance to check the develop branch .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-503396823:720,error,error,720,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-503396823,1,['error'],['error']
Availability,"On Sun, Mar 07, 2021 at 09:55:59AM -0800, Rob Patro wrote:; > This seems to explain the source of the issue : https://twitter.com/dpryan79/status/1368116490801717251?s=19. It looks like it will be fixed upstream (hopefully soon). excellent, thanks for tracking that down! Hopefully this issue can serve; as google bait for others wondering how to deal with this error :)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/637#issuecomment-792324222:266,down,down,266,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/637#issuecomment-792324222,2,"['down', 'error']","['down', 'error']"
Availability,"On Sun, Nov 01, 2015 at 06:15:19AM -0800, Rob Patro wrote:. > I, too, would like to see the relative performance of the two libraries. The only challenge is in making the comparison apples-to-apples (i.e. enabling multi-threaded parsing in seqtk with minimal overhead ??? a concurrent queue is cheap, but not free). . Other points worth considering:; - there's a runtime overhead to constantly changing sequencing formats. Some; programs want split, others want interleaved. We've settled on interleaved; because it enables streaming, which is a major win (2-4x performance); and; also because having one file is better than having 2 or 4.; - the management overhead to keeping track of many files is less for experts,; but is pretty significant for beginners. Enabling multiple input formats ++. So I think it'd be great to have the basic functionality, identify where; there are performance problems, and then simply note them for future ;). I would like to enable -1 and -2 in khmer scripts, but for our usual use cases; (multiple sequencing files being normalized and/or partitioned and/or error; trimmed) the command line syntax is too confusing ATM.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152829225:1094,error,error,1094,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-152829225,2,['error'],['error']
Availability,"One thing is that bioconda is not in your channels list, only conda forge. Though I don't think that's the ultimate source of this error.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171217271:131,error,error,131,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171217271,1,['error'],['error']
Availability,"P.S. @shalercr,. I also note that layering `--hitFilterPolicy BOTH` on top of the new version cuts down the time by another factor of 2 for me . ```; 2163.65user 12.72system 4:21.57elapsed 832%CPU (0avgtext+0avgdata 1221856maxresident)k; ```. and the number of mappings discarded alignments due to score comes down by another factor of ~6X. It might be worth seeing what you get with that option as well.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-645127364:99,down,down,99,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-645127364,2,['down'],['down']
Availability,"Ping @k3yavi here. One thing to try @umutcakir would be to see if you get a similar mapping rate outputting a RAD file for processing with `alevin-fry`. For example if you ran:. ```; salmon alevin -l ISR \; -1 ""Single_S1_L001_R1_001.fastq.gz"" \; -2 ""Single_S1_L001_R2_001.fastq.gz"" \; --chromiumV3 \; --sketch \; -i $my_index \; -p 48 \; -o outputfolder \; ```. what happens to the mapping rate then? Also, as long as you are careful to pass the files in the same relative order, you can directly pass multiple input read files to the `salmon alevin` command as a _space separated_ list; you don't have to concatenate them manually. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/814#issuecomment-1336423789:0,Ping,Ping,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/814#issuecomment-1336423789,1,['Ping'],['Ping']
Availability,Pinging @Gaura here — any idea what might be causing the inability to properly process the barcodes?. @cliftonlewis — would you be able to share a sampling of the reads for us to examine and help debug with?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/813#issuecomment-1330832918:0,Ping,Pinging,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/813#issuecomment-1330832918,1,['Ping'],['Pinging']
Availability,"Pinging @k3yavi / @DongzeHE here in case they have an idea of what would be used for this protocol. If we know the fragment geometry, I imagine we could just use the custom geometry flag.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/878#issuecomment-1753070571:0,Ping,Pinging,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/878#issuecomment-1753070571,1,['Ping'],['Pinging']
Availability,Pinging @k3yavi here again and moving this over to a discussion where convo might better take place. This now lives [here](https://github.com/COMBINE-lab/salmon/discussions/780).,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/757#issuecomment-1138604971:0,Ping,Pinging,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/757#issuecomment-1138604971,1,['Ping'],['Pinging']
Availability,"Pinging @mikelove, who is certainly the person to give the best answer here. One clear difference to note though is that TPM is a length-normalized measure, while CPM is not. This alone means they will exhibit nontrivial differences.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/812#issuecomment-1323774035:0,Ping,Pinging,0,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/812#issuecomment-1323774035,1,['Ping'],['Pinging']
Availability,"Right I've been checking it without the trailing character as well, I changed to leaving that out. . Oddly, my index doesn't have the decimals at all, just continuous ENSTxx, unlike the examples you and Rob provided. I redownloaded the new release, same result. No duplicate in my grep query, which would lead to getting the quant for both transcripts. Not being filtered by salmon as duplicates. I also downloaded the same version in Rob's example above, indexed with latest salmon, with the same result. At a loss right now. I don't know why this is.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429501783:404,down,downloaded,404,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429501783,1,['down'],['downloaded']
Availability,"Right, in short `salmon index -t txome_fasta -i txome_index` should work and both the versions of salmon (v0.15 and v1.0) is available on bioconda, check [here](https://bioconda.github.io/recipes/salmon/README.html), you may wanna try [force](https://docs.conda.io/projects/conda/en/latest/commands/update.html) update of conda. I think the confusion is you are thinking of the concept of Selective Alignment as the same as aligning to transcriptome w/ decoys (can be genome or mashmap based). Although they are related methods but the concept of Selective Alignment predates the idea of decoy based alignment, checkout [this](https://dl.acm.org/citation.cfm?id=3233589) paper from our lab where we discuss how Selectively Aligning difficult reads to just the transcriptome itself can result in improved quantification estimates compared to quasi or pseduo alignment. To summarize: ; In version 1.0; A) SA: The mashmap and bedtools based pipeline which follows old SalmonTools based pipeline.; B) SAF: Inbuilt salmon pipeline to consume genome and follows this pipeline.; C) If you don't provide any decoys, salmon will do Selective Alignment just on the transcriptome. The Release notes you quoted just means you cannot disable this feature i.e. you cannot fall back to quasi-mapping (in quasi mapping there is no alignment of the reads at all). In version 0.15.0; You cannot provide decoys and the transcriptome based mapping performed in this version would be quasi-mapping i.e. no Alignment of reads. Hope it helps .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549195321:125,avail,available,125,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549195321,1,['avail'],['available']
Availability,"Right, that might explain it. So first of all I indeed used the `--dumpFeature` option to get the `MappedUMI.txt`, sorry for that. I will check the file once again and rerun the analysis, which I did on my machine at home. It might be that the 17M I told from the top of my head is actually incorrect. Unfortunately, the 10x crashes with a memory error on our clusters (I tested 2 different machines), for which I will open a separate thread (I think I saw someone else reporting a similar issue; will look that up). Celseq2 runs fine. I will check the analysis and the `mappedUMI.txt` a.s.a.p. I fear this issue will soon be resolved where both of us have a memory problem to deal with ;-). Cheers,; Wout",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/361#issuecomment-490115088:347,error,error,347,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/361#issuecomment-490115088,1,['error'],['error']
Availability,"Rob,. Brilliant - I forgot that I built the boost libraries from whatever version of gcc was on the standard distribution. I have included -DFETCH_BOOST=TRUE, do you know why I am receiving the following error regarding a missing when executing make?. [ 5%] Performing configure step for 'libboost'; Building Boost.Build engine with toolset gcc... tools/build/src/engine/bin.linuxx86_64/b2; Detecting Python version... 2.7; Detecting Python root... /usr; Unicode/ICU support for Boost.Regex?... not found.; Generating Boost.Build configuration in project-config.jam... Bootstrapping is done. To build, run:. ./b2. To adjust configuration, edit 'project-config.jam'.; Further information:. - Command line help:; ./b2 --help. - Getting started guide:; http://www.boost.org/more/getting_started/unix-variants.html. - Boost.Build documentation:; http://www.boost.org/build/doc/html/index.html. using gcc : : /opt/gcc-8.2.0/bin/g++ ); [ 6%] Performing build step for 'libboost'; opt.jam: No such file or directory; /opt/salmon/external/boost_1_66_0/tools/build/src/build/toolset.jam:43: in toolset.using; ERROR: rule ""opt.init"" unknown in module ""toolset"".; /opt/salmon/external/boost_1_66_0/tools/build/src/build-system.jam:461: in process-explicit-toolset-requests; /opt/salmon/external/boost_1_66_0/tools/build/src/build-system.jam:527: in load; /opt/salmon/external/boost_1_66_0/tools/build/src/kernel/modules.jam:295: in import; /opt/salmon/external/boost_1_66_0/tools/build/src/kernel/bootstrap.jam:139: in boost-build; /opt/salmon/external/boost_1_66_0/boost-build.jam:17: in module scope; make[2]: *** [libboost-prefix/src/libboost-stamp/libboost-build] Error 1; make[1]: *** [CMakeFiles/libboost.dir/all] Error 2; make: *** [all] Error 2. Thanks for all your help!. Nate",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-436834099:204,error,error,204,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-436834099,6,"['ERROR', 'Error', 'error']","['ERROR', 'Error', 'error']"
Availability,"Rob,. Thanks for the --no-version-check option, I did not see it. regarding issue (2). I have been able to process these files without any problem with other; tools.; I have the same problem with the 10x pbmc4k fastq files:. salmon --no-version-check alevin -p 10 -lISR -1; /path/to/downloads/10xPBMC/pbmc4k_S1_L001_R1_001.fastq.gz -2; /path/to/downloads/10xPBMC/pbmc4k_S1_L001_R2_001.fastq.gz -i; /path/to/salmonIndex -o alevin_output --tgMap tx2gene.tsv; Logs will be written to alevin_output/logs; ### salmon (single-cell-based) v0.11.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ threads ] => { 10 }; ### [ libType ] => { ISR }; ### [ mates1 ] => {; /path/to/downloads/10xPBMC/pbmc4k_S1_L001_R1_001.fastq.gz }; ### [ mates2 ] => {; /path/to/downloads/10xPBMC/pbmc4k_S1_L001_R2_001.fastq.gz }; ### [ index ] => { /path/to/salmonIndex }; ### [ output ] => { alevin_output }; ### [ tgMap ] => { tx2gene.tsv }. [2018-08-03 19:20:57.848] [jointLog] [info] Fragment incompatibility; prior below threshold. Incompatible fragments will be ignored.; [2018-08-03 19:20:57.867] [alevinLog] [info] Processing barcodes files; (if Present). processed 189 Million barcodes. Segmentation error (core dumped). Avi,. You are right, I did miss the --chromium option. However, I just tried; again with the above command with --chromium and I still get the; segmentation error.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410325090:283,down,downloads,283,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410325090,6,"['down', 'error']","['downloads', 'error']"
Availability,"Rob,; Rob,. Thank you. It worked. I was able to make my index without error messages. Best wishes,; Rich",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/215#issuecomment-382031294:70,error,error,70,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/215#issuecomment-382031294,1,['error'],['error']
Availability,Salmon also depends on `libz` when compiling `bwa`.; https://gist.github.com/anonymous/a50569adddca1b8605f7#file-02-make-L118-L120. ```; /usr/bin/gcc-4.8 -c -g -Wall -Wno-unused-function -O2 -DHAVE_PTHREAD -DUSE_MALLOC_WRAPPERS utils.c -o utils.o; utils.c:33:18: fatal error: zlib.h: No such file or directory; #include <zlib.h>; ```,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193959265:269,error,error,269,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193959265,1,['error'],['error']
Availability,"Salmon is version 0.9.1. This is happening for lots of samples, the error message is always `Exception : [Failed to read 879238456 bytes from input stream! Read 851443704]` regardless of the fastq files that are provided. . Nothing else too special is going on. It doesn't seem to have this problem with other indexes. Can you try to load and map again with 0.9.1?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442569984:68,error,error,68,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/321#issuecomment-442569984,1,['error'],['error']
Availability,"Same error here, with a fresh (this morning) install of anaconda3-4.40 on Linux64-bit and a first-time install of salmon through bioconda. This may be premature / just plain incorrect, but [this post](https://github.com/ContinuumIO/anaconda-recipes/issues/56) mentioned issues with the default version of readline, so on a hunch I installed readline from conda-forge and then reinstalled salmon. The above errors disappear (still waiting on other errors).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/147#issuecomment-324627178:5,error,error,5,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/147#issuecomment-324627178,3,['error'],"['error', 'errors']"
Availability,"Same issue on Alpine Linux (latest, 3.6). kthread.c:70:2: error: unknown type name 'int64_t'; int64_t index;; ^~~~~~~; kthread.c:78:2: error: unknown type name 'int64_t'; int64_t index;; ^~~~~~~ ; make[3]: *** [Makefile:24: kthread.o] Error 1",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-343470922:58,error,error,58,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-343470922,3,"['Error', 'error']","['Error', 'error']"
Availability,Since I can't reproduce this locally? I'm going to close this until more information is available.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/730#issuecomment-1010446444:88,avail,available,88,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/730#issuecomment-1010446444,1,['avail'],['available']
Availability,"So I got the data and am trying to repro the issue now (thanks!). Quick question. I noticed in your example command you have `--libType ISF`. However, you have single-end reads, so the appropriate library type would be `SF` (i.e., they can't be ""inward"" facing reads, b/c there is no mate for each read). When I run your command as is, but replace `ISF` as `SF`, my run completes successfully, and I don't get any `errorminEQClassWeight` output. Could you let me know if this makes any difference for you (also, sorry that, apparently, we're not outputting a useful error message when one passes in a paired-end library type with single-end data). edit: Actually, it's even stranger. I noticed that in your command the library type comes *after* the reads to which it refers, but in this case, Salmon will not apply that library type to those reads (which explains why you're not getting a warning message). The restriction that the `--libType` flag comes before the reads it describes is buried in [the docs](http://salmon.readthedocs.io/en/latest/salmon.html#using-salmon), but I definitely need to make that clearer. Anyway, the point is that, in this case, Salmon should apply the ""default"" single-end library type (i.e., `U`) to your reads. So, presumably, that was what was happening when you saw the strange behavior during Gibbs sampling (and is also what was happening when my Gibbs sampling run completed successfully).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266927204:415,error,errorminEQClassWeight,415,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266927204,4,['error'],"['error', 'errorminEQClassWeight']"
Availability,So no error/warning I guess ?; can you share a minimal bam from which we can replicate and work on solving the issue ?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/387#issuecomment-506399769:6,error,error,6,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/387#issuecomment-506399769,1,['error'],['error']
Availability,"So the plot thickens, it seems like this is only happening for certain data. Unfortunately I cant share the data that creates the error because its commercially sensitive (I don't have permission, which is annoying) so I am looking for other data that will reproduce the issue. I have just ran a huge 10X PBMC dataset and it ran without any errors, so its unlikely due to any memory issue. Will let you know when I have data that can recreate this error",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458998076:130,error,error,130,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458998076,3,['error'],"['error', 'errors']"
Availability,"Sorry for not following up.. I'm an HPC sysadmin and the user probably found another way to do it's work. Yes, mixing compilers is probably not an error proof technique. Thanks anyway!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/43#issuecomment-285603015:147,error,error,147,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/43#issuecomment-285603015,1,['error'],['error']
Availability,"Sorry if I wasn't clear. Also, maybe I am trying to bluntly transpose a; metric that comes from alignment-based quantification. Yes, sequencing; saturation relies on UMI, using the transcript reads associated to the UMIs. I am not sure to understand the difference between resolving ambiguity; or collision at the transcript level, with the evaluation of sequencing; saturation in mind. To be more precise, I am not sure to see how it; could be a problem in this computation. But I am probably missing an; important point?. The idea of quasi-mapping as I understand is identifying the transcripts; from which the reads could have originated, generating a quantification.; For the sequencing saturation, we don't really need to know where the; read align on the transcript sequence, we just want to know that the; read comes from one single transcript, a unique UMI. So if I am right,; it is possible to summarize this quantification at the level of UMIs,; and have an idea of the duplication level of the transcripts that have; been tagged with UMIs. From what I understand, this is where alevin; perform the deduplication computation to have a correct idea of the; transcript amount when UMI are added, prior amplifications resulting; from the RT/PCR steps. So I was imagining it could be possible to take the gene quantifications; from (de)duplicated UMIs, gene quantifications from unique UMIs, using; them to have an idea of the amount/ratio of redundant information in the; sequencing data, producing a metric very similar to the seq sat from the; 10x definition.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/267#issuecomment-414331344:1449,redundant,redundant,1449,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/267#issuecomment-414331344,2,['redundant'],['redundant']
Availability,"Sorry if I wasn't clear. I did try with and without the --chromium; option, with the same error. I just have try the exact command you provided (including the --chromium; flag), with option in the same order. The command log is then:; ### salmon (single-cell-based) v0.11.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ threads ] => { 10 }; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ mates1 ] => {; /path/to/downloads/10xPBMC/pbmc4k_S1_L001_R1_001.fastq.gz }; ### [ mates2 ] => {; /path/to/downloads/10xPBMC/pbmc4k_S1_L001_R2_001.fastq.gz }; ### [ index ] => { /path/to/salmonIndex }; ### [ output ] => { alevin_output }; ### [ tgMap ] => { tx2gene.tsv }. Now it seems to work. I'll tell you if the whole alignment is; successfull when it will end. Note that when I use the --chromium flag earlier in the command, ie:. salmon --no-version-check --chromium alevin -p 10 -lISR -1 [...]. The log contains:; ### salmon (single-cell-based) v0.11.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ ] => { alevin }; ### [ threads ] => { 10 }; ### [ libType ] => { ISR }",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410331030:90,error,error,90,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410331030,6,"['down', 'error']","['downloads', 'error']"
Availability,"Sorry to add on previous issue but I am trying to run salmon quant using --gencode flag but it still outputs errors that header names in BAM file cannot be found in the input fasta. . gencode.M24.transcript.fa was indexed by minimap2 and reads were aligned using map-ont mode, using the unsorted BAM file ran the following command: . ```; salmon quant --noErrorModel --gencode -p 4 -t /home/callum/Genome_files/gencode.vM24.transcripts.fa -l U -a alignments/O1.bam -o counts/O1_salmon; ```. Example line from the error output. ; ```; [2021-06-04 13:48:14.728] [jointLog] [critical] Transcript ENSMUST00000078393.6|ENSMUSG00000062279.6|OTTMUSG00000071892.1|OTTMUST00000173863.1|Gm10237-201|Gm10237|336|processed_pseudogene| appeared in the BAM header, but was not in the provided FASTA file ; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/95#issuecomment-854355704:109,error,errors,109,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/95#issuecomment-854355704,2,['error'],"['error', 'errors']"
Availability,"Sorry,. > Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; # salmon (alignment-based) v0.9.1; # [ program ] => salmon; # [ command ] => quant; # [ targets ] => { transcripts.fa }; # [ libType ] => { A }; # [ alignments ] => { A549_S1_001.bam }; # [ output ] => { A549_S1_quant }; Logs will be written to A549_S1_quant/logs; Malformed key:value pair at line 44017: ""@PG ID:OSA IsCdna:True ReferenceLibraryID:Human.B37.3_RefGene20121217 VN:7.2""; ============; Exception : [ERROR: Failed to open file A549_S1_001.bam, exiting!]; ============; ./bin/salmon alignment-quant was invoked improperly.; For usage information, try ./bin/salmon quant --help-alignments; Exiting.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/222#issuecomment-387497883:565,ERROR,ERROR,565,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/222#issuecomment-387497883,1,['ERROR'],['ERROR']
Availability,"Sounds good, just wanted to give you the heads up, as we are working on some other part of the salmon pipeline, currently I can't give you an ETA when would the new version of salmon be available. If For the time being the choice are either you can compile the develop branch of salmon or I can forward you a linux usable salmon binary.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/416#issuecomment-523090214:186,avail,available,186,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/416#issuecomment-523090214,2,['avail'],['available']
Availability,Strange the updated error message has @PG not @pg,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/222#issuecomment-387498610:20,error,error,20,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/222#issuecomment-387498610,1,['error'],['error']
Availability,"Strange! I should still be using Jellyfish 2.1.3 (https://github.com/COMBINE-lab/salmon/blob/master/CMakeLists.txt#L355). I'm not sure why it was fetching 2.2.0 for you. Anyway, I'm glad that this seems to resolve the error with the bias correction --- thanks for reporting back here. I'll probably roll this and a few other small changes into a v0.4.1 soon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/5#issuecomment-110489862:218,error,error,218,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/5#issuecomment-110489862,1,['error'],['error']
Availability,"Strangely enough - with the above error message of mine. when I go to the logs directory and look up salmon_quant.log, it has correct info (last line below); ```; [2020-04-22 19:45:18.487] [jointLog] [info] Finished Bootstrapping; ```. And the output directory has a `quant.sf` file and it has all the records I want -- however, salmon is exiting with the above error message",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/512#issuecomment-618027626:34,error,error,34,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/512#issuecomment-618027626,2,['error'],['error']
Availability,"Strictly speaking, barcodes.tsv**.gz** files are provided. I was viewing the uncompressed file in Notepad++, so I think that number (from the line numbers on the left) should be correct. I will double-check the next time that I am on my work computer. I will test using the smaller number of barcodes. However, unlike the larger file, I think this would be different for every sample. If part of the reason that I wanted to run Alevin is that I wanted an independent quantification (which takes less time), then that may be a notable limitation. However, for whatever reason, this seems to only be an issue with the v2 sample (the v3 sample worked fine). So, I will test that, and I will at least confirm if I see the same error message or not.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-878693769:723,error,error,723,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-878693769,1,['error'],['error']
Availability,"Strictly speaking, if I use the barcodes.tsv (decompressed) files from CellRanger (for the _same sample_), I still get the same error message. I get the error message below, with or without ""-1"" at the end of the barcodes:. ```; [2021-07-12 15:55:48.717] [alevinLog] [info] Done importing white-list Barcodes; [2021-07-12 15:55:48.717] [alevinLog] [error] Wrong whitelist provided; Please check https://salmon.readthedocs.io/en/develop/alevin.html#whitelist; ```. If I **don't** use any white list, then I think that should be one possible resolution (mentioned before). However, in case others have a similar question, I have at least temporarily re-opened the ticket. This is the command that I am currently using:. ```; ID=5309-CT-2; R1=../Reads/5309-CT-2_S01_L005_R1_001.fastq.gz; R2=../Reads/5309-CT-2_S01_L005_R2_001.fastq.gz. TYPE=10xV2; #for MAP, download from UCSC Table Browser, and remove 1st line (and then manually add SARS-COV-2 genes); MAP=../../Ref_Generation/SARS_COV_2-hg38_RefSeq_2column.txt; REF=../../Ref_Generation/SARS_COV_2-hg38_salmon; CBWL=../CellRanger/5309-CT-2/outs/raw_feature_bc_matrix/barcodes.tsv. /path/to/salmon-1.5.1_linux_x86_64/bin/salmon alevin -l ISF --chromium -1 $R1 -2 $R2 -i $REF -p 4 -o $ID --tgMap $MAP --whitelist $CBWL; ```. **Is there anything that you think I should change, if I wanted to confirm that I can run the analysis with some sort of white list?**",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-878688294:128,error,error,128,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-878688294,4,"['down', 'error']","['download', 'error']"
Availability,"Sure --- we'll just leave the issue open and when you have a chance we can dig in further. Once I can reproduce the issue, I can dig down to see the underlying cause.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393244558:133,down,down,133,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393244558,1,['down'],['down']
Availability,"Sure thing, thanks for your help. It's entirely possible the issue is user error, rather than something wrong with the bioconda build. I had to install and run in a py3 env, since our server defaults to py2. Not sure if that's related, but I've used successfully in the past one a server with py3 as the default.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409779737:75,error,error,75,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409779737,1,['error'],['error']
Availability,"Sure, thanks for letting me know you were able to install via bioconda. I'll try to make these build errors more informative.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/331#issuecomment-447963407:101,error,errors,101,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/331#issuecomment-447963407,1,['error'],['errors']
Availability,"Sure, works for me. Is it possible to add an argument that indicates that the dependencies (like `xz`) should be provided by the host, and any missing dependencies are an error, rather than installing them automatically?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193944377:171,error,error,171,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193944377,1,['error'],['error']
Availability,"Sure; its rob.[lastname]@cs.stonybrook.edu. Sorry for the trouble you're encountering with the 64-bit index, but thanks for helping me track it down to fix!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-203656485:144,down,down,144,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/54#issuecomment-203656485,1,['down'],['down']
Availability,"Thank *you* for providing this software to the community.; BTW, it seems you're making an effort to support externally installed dependencies, for which I'm grateful. I did have to patch around a few bundled deps (e.g. libgff), which are downloaded unconditionally. Many package managers (e.g. FreeBSD ports, Gentoo Portage, MacPorts, pkgsrc, ...) do not allow manual downloads by upstream build systems, for obvious security reasons. I'm hoping it will be possible to avoid all such downloads without patching in the future, by preinstalling and having them discovered by find_package(), as you're already doing for things like bzip2. This will make it easier to package salmon in many of the numerous package managers out there (and eliminate the need for you to install dependencies via cmake). Cheers!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/288#issuecomment-420352699:238,down,downloaded,238,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/288#issuecomment-420352699,3,['down'],"['downloaded', 'downloads']"
Availability,"Thank @rob-p and @gmarcais, that clarifies it. There's only a handful of reads that seem to fall in this category.; Just a suggestion would it better to have just a one line summary on the amount of reads that are categorised as such and then make quite the error messages?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1422213426:258,error,error,258,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1422213426,1,['error'],['error']
Availability,"Thank you @rached-97, for the incredibly thorough follow-up to the original issue. I agree that the work you put into not only reporting the issue thoroughly to begin with, but following up with your findings, will certainly help others who might encounter related issues in the future. Since salmon seems not to be at fault here, I'll close the issue. I do recommend taking this over to the bioconductor forums, where the community is _incredibly_ responsive; I imagine you'll have a resolution in no time. Thanks again for the excellent report and follow-up!. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826117612:319,fault,fault,319,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/655#issuecomment-826117612,2,['fault'],['fault']
Availability,Thank you for the response. I suspect the same. mapping works fine normally but keeps giving me this error when I follow their protocol. They have this .R file that they say is bundled up with the index. Anyways I am not an expert in the field. Thank you for your quick response.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/833#issuecomment-1451389744:101,error,error,101,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/833#issuecomment-1451389744,1,['error'],['error']
Availability,"Thank you guys. The new software did the trick and now I am getting 18 nt barcodes, however it appears that the mapping efficiency has gone down significantly. Previously it was about 8% of reads now it like 5.3e-5%. Any ideas where the issue might be?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/670#issuecomment-861099975:140,down,down,140,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/670#issuecomment-861099975,1,['down'],['down']
Availability,"Thank you! After unzipping and putting in my path and trying to run “salmon –version” I get the following error:. dyld: lazy symbol binding failed: Symbol not found: _os_unfair_lock_lock. Referenced from: /Users/douglasbarrows/Tools/salmon_0.11.4-pre_OSX/bin/./salmon (which was built for Mac OS X 10.13). Expected in: /usr/lib/libSystem.B.dylib. dyld: Symbol not found: _os_unfair_lock_lock. Referenced from: /Users/douglasbarrows/Tools/salmon_0.11.4-pre_OSX/bin/./salmon (which was built for Mac OS X 10.13). Expected in: /usr/lib/libSystem.B.dylib. Trace/BPT trap: 5. Is that something you have seen before?. From: Rob Patro <notifications@github.com>; Reply-To: COMBINE-lab/salmon <reply@reply.github.com>; Date: Tuesday, October 23, 2018 at 8:25 PM; To: COMBINE-lab/salmon <salmon@noreply.github.com>; Cc: dougbarrows <dbarrows@mail.rockefeller.edu>, Author <author@noreply.github.com>; Subject: Re: [COMBINE-lab/salmon] Segmentation fault 11 with bioconda build (#303). Thanks for reporting this. It seems there is an osx bioconda issue (likely related to their massive backend upgrade). Hopefully we can fix this upstream in the next release. I. The meantime, can you see if this<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_COMBINE-2Dlab_salmon_files_2383948_salmon-5F0.11.4-2Dpre-5FOSX.tar.gz&d=DwMFaQ&c=JeTkUgVztGMmhKYjxsy2rfoWYibK1YmxXez1G3oNStg&r=AcsC5BcigO3PFsA0uPOPf6vTyS2zaocuu4GaWSrIemY&m=wLNfpc7aJ_B1oE6XAqYsYKk5m7_TsLrkikeQql9eerg&s=40WTo4E4Odm5ZPLtYzGnDNBOb05l6L5woT7ke2vQ1L4&e=> OSX binary works for you?. —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_COMBINE-2Dlab_salmon_issues_303-23issuecomment-2D432468434&d=DwMFaQ&c=JeTkUgVztGMmhKYjxsy2rfoWYibK1YmxXez1G3oNStg&r=AcsC5BcigO3PFsA0uPOPf6vTyS2zaocuu4GaWSrIemY&m=wLNfpc7aJ_B1oE6XAqYsYKk5m7_TsLrkikeQql9eerg&s=2d8a8eiQ0LuIlgyxoiTnsiwesaQ16X9sju0l7tT1WAw&e=>, or mute the thread<https://",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/303#issuecomment-432469726:106,error,error,106,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/303#issuecomment-432469726,2,"['error', 'fault']","['error', 'fault']"
Availability,"Thank you!. For a fix, I did: `echo $LD_LIBRARY_PATH`. ; this shows `salmonpath/1.3.0/lib:originalpath`; Doing ` export LD_LIBRARY_PATH=originalpath` fixed this in my environment",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/710#issuecomment-1165640786:31,echo,echo,31,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/710#issuecomment-1165640786,1,['echo'],['echo']
Availability,"Thanks @Gaura! Sounds promising. . Can you clarify what differences you saw between v1/v2 protocols? My understanding was that the only changes were slight differences in barcode positions within the barcode read, ie something that could be handled with different `bc-geometry`, but maybe that's all you meant in terms of differing implementations. Regarding the BC1 and how it could be two sequences for the same sample - this is confusing to explain in text format, but all comes down to the sequential nature of how the cells acquire barcodes in this protocol. We start with a 96-well plate, where each of the top 48 wells contain BOTH an oligo-dT barcode and random hexamer barcode. The samples then get added to each well. Biochemistry happens. Then you pool all the cells together, split them back out into 48 wells again, and each well gets its own BC2. Then repeat for BC3. . So a given transcript may get amplified via one of two amplification primers (oligo-dT or random hexamer), but after that, will get a single BC2 sequence and BC3 sequence added after that. In Fig 1A of the Rosenberg paper, it's as though there isn't _just_ an orange sequence carrying out reverse transcription, there are actually two different (known) sequences associated with different routes of amplification per cell. . The net effect is that a given cell can contain transcripts that have a sequence like this:; AACGTGAT-CTGTAGCC-ACACAGAA. or like this:; GATAGACA-CTGTAGCC-ACACAGAA. where maybe the first sequence was amplified by oligo-dT and the second was amplified via a random hexamer. Because they have the same BC2 and BC3 sequence, and the BC1 sequences match a known pairing, we know they come from the same cell and therefore the data should be merged. . Any lab running these experiments will have a table of known pairings (ie the two barcodes added to each of first 48 wells), so that they can be merged and treated as though they came from the same cell. This can either be handled upstream of sal",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-937918722:482,down,down,482,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-937918722,2,['down'],['down']
Availability,"Thanks @Gaura! This is helpful. I think I figured it out, and it was my fault indeed. Everything seems to be working as expected based on this info!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/774#issuecomment-1185098089:72,fault,fault,72,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/774#issuecomment-1185098089,1,['fault'],['fault']
Availability,"Thanks @Ryan-Zhu ,. A couple of thoughts.; To me the data seem a little noisy as a lot of CB/reads are thrown away due to ""knee"" thresholding.; Check https://github.com/COMBINE-lab/salmon/issues/362 if you wanna play with how to customize alevin for user-define whitelisting. Having said that this is how you can parse the data from alevin.; Alevin use 1277 CB after its knee thresholding + 638 low confidence Barcode for downstream whitelisting = total 1915 CBs.; If you check the warning in the log it says :. ```; [2019-06-12 15:07:08.152] [alevinLog] [warning] Skipped 313 barcodes due to No mapped read; ```; Basically it means out of 1915, 313 didn't had any read mapped to them, so alevin doesn't report them in the output matrix. Alevin reports 1915 - 313 = 1602 CBs both in `.mtx` and `quants_mat.gz` file. You can check the order of the CB in the `quants_mat_rows.txt` file, which has 1602 rows/CBs. If you don't provide alevin with external whitelist alevin tries to do post whitelisting of it's own. Basically out of the 1277 high confidence CBs alevin initially find out through knee it assigns 647 CBs as final whitelisted CB as found in the `whitelist.txt` file. If you wan't to subsample these CBs you have to extract the information from the `.mtx` or `quants_mat.gz` file. You can check a simple python parse of the `quants_mat.gz` file [here](https://github.com/k3yavi/vpolo/blob/master/vpolo/alevin/parser.py#L187-L230).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/374#issuecomment-501846672:422,down,downstream,422,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/374#issuecomment-501846672,2,['down'],['downstream']
Availability,"Thanks @Tj-Idowu,. So, indeed, it looks like this is the problem. The mapping is completing, but you seem to be encountering a segmentation fault at the end of the run (before the abundance estimation finishes). Could you tell me what OS and version you're using, and how you installed Salmon? My guess is a binary incompatibility somewhere. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/239#issuecomment-400009534:140,fault,fault,140,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/239#issuecomment-400009534,1,['fault'],['fault']
Availability,"Thanks @juugii for the detailed response and clarifying my doubts.; It surely is possible to lose some information when projecting the data on lower dimensional space since none of the methods, CCA and MNN, are lossless. I do see your point and would like to understand more about the depth normalization problem you are facing with different experiments. . I tried to search the algorithm used by cellranger to aggregate the counts and it looks like the following:; * As I was saying earlier aggregation step was happening downstream of count/quantification of the gene count matrix, at least in cellranger pipeline.; > When doing large studies involving multiple biological samples (or multiple libraries or replicates of the same sample), it is best to run cellranger count on each of the libraries individually, and then pool the results using cellranger aggr. * It looks like they have three different modes to normalize the libraries; > There are three normalization modes:; mapped: (default) Subsample reads from higher-depth libraries until they all have an equal number of confidently mapped reads per cell.; raw: Subsample reads from higher-depth libraries until they all have an equal number of total (i.e. raw, mapping-independent) reads per cell.; none: Do not normalize at all. * Although it's not clear, what do they mean by `equal number of confidently mapped reads per cell`, does it mean median reads per cell ? Like you tried to show in the above plot the distribution can be very uneven. But the part that troubles me more is once `count` information has been generated it has lost the read level information, since we have deduplicated them, then how do they use the read counts to normalize. Unless that is dumped too, not clear. Quoting your text from above:; > Alternatively, could a subsampling covariate be added to the probabilistic quantification model of alevin. I think we can definitely work on correcting the subsampling bias in the probabilistic model of Alevin but we",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433453155:524,down,downstream,524,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433453155,2,['down'],['downstream']
Availability,"Thanks @k3yavi , --keepCBfraction isn't in the docs, so I missed it. Unless it leads to completely unfeasible run times, --keepCBfraction 1 combined with downstream filtering may be the most robust way to handle things in my high throughput situation (as alluded to by @roryk ). Is there a way of combining this with a minimum UMI count per CB to remove just the most obvious junk and hopefully somewhat limit the impact on runtimes?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490843243:154,down,downstream,154,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490843243,2,"['down', 'robust']","['downstream', 'robust']"
Availability,"Thanks @mikelove . > we had some people using txi$counts alone and not using the countsFromAbundance argument. Based on the above, I assume that **_doing something like this is wrong_** as DESeqDataSetFromMatrix is being used after countsFromAbundance = ""no"". ```; txi = tximport(files, type=""salmon"", tx2gene=tx2gene,; countsFromAbundance = ""no""). dds <- DESeqDataSetFromMatrix (countData = txi$counts,; colData = coldata, ~ condition); ```. @rob-p and @mikelove -- While on this topic, how would you use salmon quant and DESeq2 for QuantSeq data (which would be 3' tagged RNA-seq)? Would you use `salmon quant without --noLengthCorrection` or would you use` salmon quant with ; --noLengthCorrection`. 1. call salmon quant as before (and **_do not use --noLengthCorrection_**) and then do as suggested/stated in these 2 links ; - https://bioconductor.org/packages/devel/bioc/vignettes/tximport/inst/doc/tximport.html#Downstream_DGE_in_Bioconductor and https://bioconductor.org/packages/devel/bioc/vignettes/tximport/inst/doc/tximport.html#3%E2%80%99_tagged_RNA-seq; - Do not manually pass the original gene-level counts to downstream methods without an offset. The only case where this would make sense is if there is no length bias to the counts, as happens in 3’ tagged RNA-seq data (see section below). The original gene-level counts are in txi$counts when tximport was run with countsFromAbundance=""no"". ; - If you have 3’ tagged RNA-seq data, then correcting the counts for gene length will induce a bias in your analysis, because the counts do not have length bias. Instead of using the default full-transcript-length pipeline, we recommend to use the original counts, e.g. txi$counts as a counts matrix , e.g. providing to DESeqDataSetFromMatrix",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/581#issuecomment-719946865:1124,down,downstream,1124,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/581#issuecomment-719946865,1,['down'],['downstream']
Availability,"Thanks @mikelove . I believe tximeta can be used only for human/mouse? In my case, it is not human/mouse. @rob-p and @mikelove - Based on my reading of the salmon documentation, isn't it that the NumReads/TPM etc made available after lengthCorrection. Extending this, the NumReads in quant.sf corresponds to the estimated count value for each transcript and correlated by effective length. My idea is to therefore use the countsFromAbundance=“lengthScaledTPM” to compute counts that are on the same scale as original counts and not correlated with transcript length across samples. Given this - Is this below also valid (after salmon quant). ```; salmon_tx2gene_data = tximport(files, type=""salmon"", tx2gene=tx2gene,; countsFromAbundance = ""lengthScaledTPM""). # generate CSV for archival/use-for-other-purposes ; # then read in the csv and use with DESeq. write.csv(as.data.frame(salmon_tx2gene_data$counts),; file = ""lengthScaledTPM_tx2gene_counts.csv""). # other code for reading in csv, design_metadata etc. dds <- DESeqDataSetFromMatrix (countData = salmon_tx2gene_data$counts,; colData = coldata, ~ condition). ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/581#issuecomment-719784814:218,avail,available,218,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/581#issuecomment-719784814,1,['avail'],['available']
Availability,"Thanks @molwizard,. We've added a more informative error message in 0.13.0. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/343#issuecomment-469843098:51,error,error,51,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/343#issuecomment-469843098,1,['error'],['error']
Availability,"Thanks @reganhayward. I'm pinging @hiraksarkar here as well as he can help us dig into this. I do think it will be really useful to have the bootstrap (in this case Gibbs) folders for the runs, so we can load that data up and see what the posterior traces look like for these transcripts. If you can throw that up somewhere, then we can grab it as well.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-756948080:26,ping,pinging,26,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/600#issuecomment-756948080,1,['ping'],['pinging']
Availability,"Thanks @rob-p and Thanks in advance @mikelove . The original question pertained to using salmon with say ILMN RNA-Seq followed by DGE with DESeq2. @rob-p - I will also use this opportunity to indulge myself on a related question (how to use salmon with QuantSeq and then downstream with DESeq2). I have asked many QuantSeq related questions on this GH forum and I am yet to find the correct recipe for using salmon with quantseq and downstream DGE; - https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565474848; - https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499732849; - and many others (do not want to get into a infinite loop here :) . @rob-p @mikelove - Here is my thought process (for salmon-QuantSeq-DESeq):; - I know salmon has the `--noLengthCorrection` feature and the help text says it is ""experimental"" for QuantSeq; - Probably, I should not use `--noLengthCorrection` feature when running salmon quant and just get the counts. ; - One might be wondeing why not to use `--noLengthCorrection` as it was introduced by @rob-p exclusively for QuantSeq -- that idea is based on what I see on [the tximport vignette for 3' tagged RNA-seq](https://bioconductor.org/packages/devel/bioc/vignettes/tximport/inst/doc/tximport.html#3%E2%80%99_tagged_RNA-seq) which has this to state; ```; If you have 3’ tagged RNA-seq data, then correcting the counts for gene length will induce a bias in your analysis, ; because the counts do not have length bias. Instead of using the default full-transcript-length pipeline, ; we recommend to use the original counts, e.g. txi$counts as a counts matrix, e.g. ; providing to DESeqDataSetFromMatrix or to the edgeR or limma functions ; without calculating an offset and without using countsFromAbundance.; ```. Let me know if you would approach the salmon-QuantSeq-DESeq puzzle differently. Thanks in advance.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/581#issuecomment-719150287:271,down,downstream,271,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/581#issuecomment-719150287,2,['down'],['downstream']
Availability,"Thanks @rob-p for a quick and complete reply. I got your point :) Actually, I downloaded fastq files from ENA so I do not have access to BioAnalyzer results. From literature review it could be concluded that Alignment-free tools like Salmon or kallisto yield more accurate quantifications, that's why I went to apply salmon on my data (my aim is differential gene expression at the end). Now, my main issue is: without an accurate estimation of fragment length for running salmon, would it end up with less accurate quantification result? If yes, then it is more rational to me to use traditional methods such as featureCounts. Do you have any idea that sheds more light on this ambiguity.; Best,; Tima",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-750925173:78,down,downloaded,78,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-750925173,1,['down'],['downloaded']
Availability,"Thanks @roryk and @k3yavi . The issue we have is that we're trying to run a pipeline in a fairly high-throughput manner to get a sensible 'enough' matrix without too much manual intervention. So I'm trying to avoid anything that requires an eyeballing step, accepting that the matrix we get will be less optimal than one you'd get from manual optimisation. Where possible, our curators are extracting the expected cell numbers from publications, so sometimes I have at least a general idea of where to look for an elbow/ feature. @roryk - have you used your alternate view on the data to automatically derive cutoffs? Does it work well?. @k3yavi:. As I say, first point is that this is for cases where I have a rough idea of the target cell number- we're generally working with pre-published data (though cell numbers per run are not always available). . From https://github.com/COMBINE-lab/salmon/issues/340 I'd inferred that --expectCells gives Alevin ballpark to look for a knee within, while --forceCells is a strict cuttoff. Is that correct? . That being the case, my thought was to try --expectCells first, and failing that --forceCells. The problem is that I need to parse the STDOUT/ERR to detect the boundary error from --expectCells, which is not a very robust way of doing things. If you returned informative error codes (anything but 1) on this and other errors, I could detect the error and implement the logic I describe.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490157428:841,avail,available,841,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490157428,6,"['avail', 'error', 'robust']","['available', 'error', 'errors', 'robust']"
Availability,"Thanks @roryk and @rob-p ; The transcript PB.40054.21 is in all of the files: The gff files from which I made Alin_neg_txp2gene.tsv, the gentrome.fasta. The gene is ""novelGene_36859"". All are unique.; It should be indexed, I have several samples and they all have this error with various transcripts/genes.; What about this error: `ERROR: Txp to Gene Map not found for 52191 transcripts`; The transcript numbers are 88793",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/540#issuecomment-648248120:269,error,error,269,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/540#issuecomment-648248120,3,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"Thanks @roryk for the code and @pinin4fjords for the suggestion.; That's correct, `--expectCells` and `--forceCells` flags are designed to use the way you described above. ; re: error codes, It's a good suggestion. Based on the timeline either we can make this into the next release of alevin or we can edit it in a different branch and then you can compile or I can give you a linux binary. Let us know what works for you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490161277:178,error,error,178,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490161277,1,['error'],['error']
Availability,"Thanks @tamuanand for the (as always) detailed and clear question! Since this directly involves `tximport` and `DESeq2` downstream, let me also ping @mikelove here.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/581#issuecomment-719143923:120,down,downstream,120,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/581#issuecomment-719143923,4,"['down', 'ping']","['downstream', 'ping']"
Availability,"Thanks Matt for the response and fix, unfortunately the error persists;; Might need to re-align using a different pipeline?. > Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; # salmon (alignment-based) v0.9.1; # [ program ] => salmon; # [ command ] => quant; # [ targets ] => { transcripts.fa }; # [ libType ] => { A }; # [ alignments ] => { A549_S1_001.bam }; # [ output ] => { A549_S1_quant }; Logs will be written to A549_S1_quant/logs; Malformed key:value pair at line 44017: ""@PG ID:OSA IsCdna:True ReferenceLibraryID:Human.B37.3_RefGene20121217 VN:7.2""; ============; Exception : [ERROR: Failed to open file A549_S1_001.bam, exiting!]; ============; ./bin/salmon alignment-quant was invoked improperly.; For usage information, try ./bin/salmon quant --help-alignments; Exiting.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/222#issuecomment-387497579:56,error,error,56,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/222#issuecomment-387497579,2,"['ERROR', 'error']","['ERROR', 'error']"
Availability,"Thanks Nicolas,. I downloaded the files from this url and (unfortunately?) was unable to reproduce the segfault. I'd just like to check that we are working from the same source files and there wasn't e.g. a corruption during your download or some such. I have the following as the MD5 hash sums for the files input into the indexing. ```; $ md5sum GRCm38.primary_assembly.genome.fa.gz; 3bc591be24b77f710b6ba5d41022fc5a GRCm38.primary_assembly.genome.fa.gz; $ md5sum gencode.vM25.transcripts.fa.gz; a821c0dde39c48b9d2c4b48d36b0180c gencode.vM25.transcripts.fa.gz; $ md5sum decoys.txt; fdfb8e3ea371649a7ec2c39fcd8bb8f4 decoys.txt; $ md5sum gentrome.fa.gz; db7022ecc40483f105aedcdc4e113304 gentrome.fa.gz; ```. could you let me know if the signatures for your files are the same?. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/521#issuecomment-627671880:19,down,downloaded,19,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/521#issuecomment-627671880,2,['down'],"['download', 'downloaded']"
Availability,"Thanks Rob!; For both providing the binary download again, and pointing me to MultiQC (meanwhile got a informative QC report). :); Guido",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/252#issuecomment-405540123:43,down,download,43,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/252#issuecomment-405540123,1,['down'],['download']
Availability,"Thanks Rob. The sublib BC seems to be 6nt for a total of 30nt so good on that front. If @DongzeHE or @k3yavi know the chemistry already that would be great, if not I can try to figure it out by inspecting the reads. ; I'm using `alevin-fry` downstream but I thought this step (barcode extraction) had to happen via `salmon alevin`?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/874#issuecomment-1732630683:241,down,downstream,241,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/874#issuecomment-1732630683,1,['down'],['downstream']
Availability,"Thanks a lot @rob-p and @k3yavi .; I wanted your advise on something more intricate. Asking since you people are the pioneers in this aspect of problem solving.; I have to determine the expression of GFP and Transposon sequence in the transcriptome.; I read the material posted on the link https://salmon.readthedocs.io/en/latest/salmon.html.; It instructs this to be done in 2 different ways-; There are two options for generating a decoy-aware transcriptome:. The first is to compute a set of decoy sequences by mapping the annotated transcripts you wish to index against a hard-masked version of the organism’s genome. This can be done with e.g. MashMap2, and we provide some simple scripts to greatly simplify this whole process. Specifically, you can use the generateDecoyTranscriptome.sh script, whose instructions you can find in this README. The second is to use the entire genome of the organism as the decoy sequence. This can be done by concatenating the genome to the end of the transcriptome you want to index and populating the decoys.txt file with the chromosome names. Detailed instructions on how to prepare this type of decoy sequence is available here. This scheme provides a more comprehensive set of decoys, but, obviously, requires considerably more memory to build the index. I tried the 2nd approach. Combined the GFP,Transposon and the genome FASTA files, indexed it , constructed the decoy according to the given instructions given here https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/.; When I ran Salmon (version 1.2.1_linux_x86_64) it did not report anything in the quant files (I know that these samples have high GFP and Transposon expression in these samples). The 1st approach is giving me problems to the construction of the GTF file and then memory usage. The instructions say - generateDecoyTranscriptome.sh — Located in the scripts/ directory, this is a preprocessing script for creating augmented hybrid fasta file for salmon index. It cons",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/737#issuecomment-1022416973:581,mask,masked,581,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/737#issuecomment-1022416973,2,['mask'],['masked']
Availability,"Thanks for making these available! I'm looking through. Though it's not directly related to the `fetchRapMap.sh` script, I do find [this](https://gist.github.com/sjackman/6e15b7dfebaaad99b9476aa5ce269fda#file-cmakeerror-log-L47) disconcerting. Any idea what's up there?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367795756:24,avail,available,24,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367795756,1,['avail'],['available']
Availability,Thanks for pinging on this — I'll poke the model implementor (@gmarcais) via other channels and get back to you as soon as I can.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1420973769:11,ping,pinging,11,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1420973769,1,['ping'],['pinging']
Availability,"Thanks for reporting this. Certainly, failure should be more apparent. Out of curiosity, is the failure in building the index? It looks like loading the index didn't work, so was the space character that caused the problem in your reference file?. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/22#issuecomment-146996488:38,failure,failure,38,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/22#issuecomment-146996488,2,['failure'],['failure']
Availability,"Thanks for sharing the preprint. Is the SA method codebase available via github or via the combine lab site https://combine-lab.github.io/software/ . I know the preprint has supplementary material and code, but it would be valuable to have something like https://combine-lab.github.io/salmon/getting_started/ and/or https://salmon.readthedocs.io/en/latest/salmon.html",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-498953769:59,avail,available,59,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-498953769,1,['avail'],['available']
Availability,"Thanks for so much for tracking down that issue so quickly! These problems have plagued me for years with different tools. There always seems to be a library that does this. I'll try the patched version this weekend and let you know how it goes. Finally, thanks for pointing out the issue about process substitution issue. I usually have 4-12 fastq files per sample and was following the [Alevin documentation](http://salmon.readthedocs.io/en/latest/alevin.html), which had the gzipped example using process substitution.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395911670:32,down,down,32,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395911670,1,['down'],['down']
Availability,"Thanks for testing that out. In this case, I'll try an dig more deeply into why you're having issues compiling from source. In the mean time, I hope the pre-compiled binary will work for you. edit: I wonder if the error might be related to the fact that the build system things TBB was compiled with GCC 4.4? From the log:. > /usr/local/packages/intel-tbb.4.4.3.181/compilers_and_libraries_2016.2.181/linux/tbb/lib/intel64_lin/**gcc4.4**/libtbb.so.2",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201332198:214,error,error,214,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201332198,1,['error'],['error']
Availability,"Thanks for the detailed report @idinsmore1,. These are quite different versions of ensembl, and so changes in the underlying transcriptome can absolutely have an effect on estimated abundances. Specifically, as the newer releases of ensemble tend to annotate more and more isoforms, there are more potential explanations for the reads. Reads that may have been previously assigned to an isoform in the old annotation may better match to a new isoform in the new annotation, etc. This will affect the read assignment and TPM both to the isoform to which the reads were originally being assigned and the new isoform to which the reads are now being assigned. . One thing to look at would be to see how much things change at the gene level, where we'd expect mapping uncertainty to be much lower. Once there's an idea of the types of things that are changing, it will be possible to drill down a bit more to try and figure out exactly what's going on. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/653#issuecomment-823560566:886,down,down,886,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/653#issuecomment-823560566,1,['down'],['down']
Availability,"Thanks for the fast reply (and detailed explanation). The seg fault is produced regardless of the type (or lack thereof). In case the error below is somehow related to tbb: I haven't had it pre-installed, so the c- / make procedure 'took care of it'. Following output is generated by gdb:. ```Starting program: /usr/local/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; [New Thread 0x7ffff62b0700 (LWP 17488)]; Version Info: This is the most recent version of Salmon.; [Thread 0x7ffff62b0700 (LWP 17488) exited]. Thread 1 ""salmon"" received signal SIGSEGV, Segmentation fault.; __GI___libc_free (mem=0x7fff00000002) at malloc.c:2951; 2951	malloc.c: No such file or directory.; ``` ; and the backtrace:; ```; #0 __GI___libc_free (mem=0x7fff00000002) at malloc.c:2951; #1 0x00007ffff79b775d in operator delete[] (ptr=0x7fff00000002); at ../../src/tbbmalloc/proxy.cpp:256; #2 0x0000000000792272 in salmonIndex(int, char**) (); #3 0x000000000065baca in main (); ```. Edit: Similar things happen with conda installation, though the traceback details are slightly different:; `Temporary breakpoint 1 at 0x7ffff6cf2512: file malloc.c, line 2951. `",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404232467:62,fault,fault,62,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404232467,3,"['error', 'fault']","['error', 'fault']"
Availability,"Thanks for the feedback!. I tried playing with the vbPrior setting and observed that, as you noted, higher increases of the vbPrior tended to flatten out the read apportionment, such that as the vbPrior increased the two transcripts became increasingly similar in their final expression (presumably they would eventually hit 50/50). It's good to know how that settings affects my data, but this is not quite what I was hoping for... . Ideally, the short transcript would get nearly *all* of the reads, rather than splitting the reads 50/50 or, with the default settings, giving nearly all the reads to the longer transcript. I realized that, as a human, the reason the short transcript is obviously the dominant one is how the reads pileup in the alignment. There are hundreds of reads mapping to both transcripts, but NO reads map to the 5' of the long transcript. As I understand the selective alignment, the alignment scores are passed to the quantification step, but the *position* of the reads is not used downstream. In order to pass my human intuition along here, the software would need to pay attention to the coverage bias of the reads mapping to the transcripts and assign a penalty when two otherwise identical transcripts have a different coverage variance across the transcript. This sounds like what the --posBias flag should incorporate into the effective lengths, but it doesn't have much effect on these transcripts for me (FYI, I am getting a segfault when I run only --posBias in the current salmon version, but if I run all the models together like --gcBias --seqBias --posBias, it completes fine). . Also, my intuition for these transcripts is not really a coverage ""bias"" as much as the read depth absolutely plummeting at the 5' end of the long transcript. It would be neat if Salmon could detect these kinds of dramatic dropoffs and add a warning or something... even if not incorporating the information into the quants... it could even be a good QC step to identify large de",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-623043651:1011,down,downstream,1011,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-623043651,2,['down'],['downstream']
Availability,"Thanks for the heads up. I gave it a test this evening and wow, it is wicked fast. I’ll send you those quant files tomorrow when I get a chance, but adding that flag and the new version fixed the problem. . Thank you for all your help. . Best,. Ryan . Sent from my iPhone. On Jun 16, 2020, at 11:36 PM, Rob Patro <notifications@github.com> wrote:. ﻿. P.S. ; @shalercr,; I also note that layering --hitFilterPolicy BOTH on top of the new version cuts down the time by another factor of 2 for me; 2163.65user 12.72system 4:21.57elapsed 832%CPU (0avgtext+0avgdata 1221856maxresident)k. and the number of mappings discarded alignments due to score comes down by another factor of ~6X. It might be worth seeing what you get with that option as well.; —; You are receiving this because you were mentioned.; Reply to this email directly, ; view it on GitHub, or ; unsubscribe.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-645762627:450,down,down,450,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-645762627,2,['down'],['down']
Availability,"Thanks for the help sir. On Sat, Nov 23, 2019 at 1:52 AM cljacobs <notifications@github.com> wrote:. > If Salmon requires CMake 3.12 (or later), it would probably be worth; > bumping the cmake_minimum_required to this version in CMakeLists.txt.; > It's currently set to 3.9.; >; > This would at least point users to the ""proper"" error. At the moment, it's; > unclear if Salmon meant to provide its own FindIconv.cmake (like it does; > for several other packages) or not.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/453?email_source=notifications&email_token=AN2V7HUD74JWFOQATIRUGM3QVA5QXA5CNFSM4JP7NHKKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEE6YORY#issuecomment-557680455>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AN2V7HT2IHF63T56PP3EECTQVA5QXANCNFSM4JP7NHKA>; > .; >. -- ; *Shanmugavadivel, P. S.*; *Scientist (Agricultural Biotechnology),*. *#216, Block A,*; *ICAR-Indian Institute of Pulses Research,*. *Min. of Agriculture & Farmers Welfare,*. *Govt. of India,Kanpur - 208 024.*; *email: shanmugavadivel.ps@icar.gov.in <shanmugavadivel.ps@icar.gov.in>*; *www.iipr.res.in <http://www.iipr.res.in>*",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-557774552:329,error,error,329,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-557774552,1,['error'],['error']
Availability,"Thanks for the info, @annajbott! Can you mention what OS and version you see the segfault on? This will help trying to track it down.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-457575844:128,down,down,128,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-457575844,2,['down'],['down']
Availability,"Thanks for the kind word @alexvpickering and bringing this to our attention.; It does makes sense to have this clarified in alevin docs. We use `mRNA` for optional whitelisting at the end and you are right about aleivn using the fraction of reads from the mtRNA as a feature, so if the reads are both up and down regulated then the feature would not be very useful as it might cancel out the overall effect. May be we can use more fine grained at per gene level information as a feature but currently we have not put enough thoughts into it but we will clarify this in the alevin docs.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/367#issuecomment-497390977:308,down,down,308,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/367#issuecomment-497390977,1,['down'],['down']
Availability,"Thanks for the replies @alexvpickering @k3yavi ; As we have very high Ambient RNA and Doublet rate, we find that some of our key cell type genes for different neurotransmitters and glial expression are everywhere and this is to some extent affecting our clustering. While removing the doublets with 3 methods and taking a union of atleast 2 to get rid of cells helped, we still need to do something about the background.; So far the results seem ok, but we havent finished all our downstream analyses on the adjusted data to be sure that SoupX isnt doing something to the data that is weird. Thanks for the suggestions Avi, as I am no longer worried that I need CBs with UMIs in the range of 1-10 for SoupX i am using the default FreqThreshold 1 and only playing with MaxNumBarcodes and using KeepCBfraction 1.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/538#issuecomment-646077084:481,down,downstream,481,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/538#issuecomment-646077084,1,['down'],['downstream']
Availability,"Thanks for the reply; I actually tried the one on conda, but it says segmentation fault. I will look at the one you provided, thanks. Kay",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/238#issuecomment-398579731:82,fault,fault,82,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/238#issuecomment-398579731,1,['fault'],['fault']
Availability,Thanks for the report @callumparr! I'll ping @gmarcais on this.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-921864891:40,ping,ping,40,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-921864891,1,['ping'],['ping']
Availability,"Thanks for the report, @chilampoon. I think this is due to an arbitrary (but fixable) limitation on the length of identifier names in the input. Can you look into this, @fataltes, and fix in upstream indexing code. We'll ping back here once we have a fix. I believe version 0.15.0 should not have this issue if you are in immediate need.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/451#issuecomment-555998732:221,ping,ping,221,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/451#issuecomment-555998732,1,['ping'],['ping']
Availability,"Thanks for the response. . The transcriptional variants I've been interested often are quite similar (e.g. only differ for a small part of one exon). Therefore, many of the reads (especially when they map to parts of the genes that don't differ) show up as pseudoaligned to multiple variants, as you'd expect. In that case, do you suggest only looking at the uniquely mapped reads, or only looking at primary alignments for each read, or still looking at all reads (perhaps with a certain `AS` score) for a given transcript? I'm mostly interested in performing sanity checks that transcriptional variants identified by Salmon/Swish are differentially used across conditions. Or would it be better to use a tool like DEXSeq to asks these questions directly? . Also, when filtering by the `AS`, I found some reads with `AS:i:-2147483648`, which I assume is an overflow error.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/528#issuecomment-639153957:867,error,error,867,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/528#issuecomment-639153957,1,['error'],['error']
Availability,"Thanks for the responses. Here's the records for the first read in my bam:; ```; NB501285:81:HVJFGBGX2:1:11101:7287:1044 105 uc008cdk.2|C4b 2845 1 36M = 2845 0 AGATTCTCCAAATTGAGAAGGAAGGAGCCATCCACA * NH:i:3; NB501285:81:HVJFGBGX2:1:11101:7287:1044 149 uc008cdk.2|C4b 2845 0 * = 2845 0 ACCCTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN * NH:i:3; NB501285:81:HVJFGBGX2:1:11101:7287:1044 361 uc008cdl.2|C4b 2845 1 36M = 2845 0 AGATTCTCCAAATTGAGAAGGAAGGAGCCATCCACA * NH:i:3; NB501285:81:HVJFGBGX2:1:11101:7287:1044 405 uc008cdl.2|C4b 2845 0 * = 2845 0 ACCCTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN * NH:i:3; NB501285:81:HVJFGBGX2:1:11101:7287:1044 361 uc008cdp.1|C4a 2814 1 36M = 2814 0 AGATTCTCCAAATTGAGAAGGAAGGAGCCATCCACA * NH:i:3; NB501285:81:HVJFGBGX2:1:11101:7287:1044 405 uc008cdp.1|C4a 2814 0 * = 2814 0 ACCCTNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN * NH:i:3; ```; Picard crashes on the fourth record with error: ; ```; ERROR: Record 4, Read name NB501285:81:HVJFGBGX2:1:11101:7287:1044, Not primary alignment flag should not be set for unmapped read.; ```; It looks like the issue is that Salmon is setting bit 4 (read unmapped) for the mates and is setting bit 256 (not primary alignment) for the secondary alignments. Both bits 4 and 256 are set for the mate of a secondary alignment which picard doesn't like.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-305539421:877,error,error,877,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-305539421,2,"['ERROR', 'error']","['ERROR', 'error']"
Availability,Thanks for the speedy replies. I tried running alevin with 8 threads and it ends up leading to the same error and backtrace. I can see a large number of threads still spawning through GDB. I have had these kinds of issues before with OpenMP and I usually had to specify an environment variable to limit the threads. I compiled salmon with the download boost etc option:. ```; linux-vdso.so.1 (0x00007ffc90379000); libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f859b069000); libtbbmalloc_proxy.so.2 => /u/user/tmp/salmon/build-debug/src/../../external/install/lib/libtbbmalloc_proxy.so.2 (0x00007f859ae66000); libtbbmalloc.so.2 => /u/user/tmp/salmon/build-debug/src/../../external/install/lib/libtbbmalloc.so.2 (0x00007f859ac36000); libtbb.so.2 => /u/user/tmp/salmon/build-debug/src/../../external/install/lib/libtbb.so.2 (0x00007f859aa08000); libgomp.so.1 => /u/user/local/lib64/libgomp.so.1 (0x00007f859a7e7000); librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007f859a5df000); libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007f859a2de000); libgcc_s.so.1 => /u/user/local/lib64/libgcc_s.so.1 (0x00007f859a0c8000); libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f8599d1d000); /lib64/ld-linux-x86-64.so.2 (0x00007f859b286000); libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f8599b19000); libstdc++.so.6 => /u/user/local/lib64/libstdc++.so.6 (0x00007f859979f000); ```. The linux version and g++ version are listed below:; ```; cat /proc/version; Linux version 4.9.0-0.bpo.6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 4.9.82-1+deb9u3~bpo8+1 (2018-03-22). ~/data/PCSI/PC10X/paper/pbmc$ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enab,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:104,error,error,104,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,2,"['down', 'error']","['download', 'error']"
Availability,"Thanks for your quick reply. My bam file is filtered, and there will be some single-ended reads. I don’t know how to deal with these 'orphan'. The program give me the info:orphan status: paired error likelihood: inf",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/131#issuecomment-1343760837:194,error,error,194,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/131#issuecomment-1343760837,1,['error'],['error']
Availability,"Thanks for your quickly reply! It really worked @k3yavi; Then I run the command line ; `salmon alevin -l ISR /home/lailab/disk/gjw/Ascite-1_R1.fq.gz -2 /home/lailab/disk/gjw/Ascite-1_R2.fq.gz --chromium --index /home/lailab/disk/gjw/default/ -p 10 -o /home/lailab/disk/gjw/alevin_out --tgMap /home/lailab/disk/gjw/txp2gene.tsv`. ```; Version Server Response: Not Found; Logs will be written to /home/lailab/disk/gjw/alevin_out/logs; [2021-05-27 14:31:00.318] [jointLog] [info] setting maxHashResizeThreads to 10; [2021-05-27 14:31:00.318] [jointLog] [info] The --mimicBT2, --mimicStrictBT2 and --hardFilter flags imply mapping validation (--validateMappings). Enabling mapping validation.; [2021-05-27 14:31:00.318] [jointLog] [error] You passed paired-end files to salmon, but you passed 0 files to --mates1 and 1 files to --mates2. You must pass the same number of files to both flags; [2021-05-27 14:31:00.318] [jointLog] [info] Using default value of 0.87 for minScoreFraction in Alevin; Using default value of 0.6 for consensusSlack in Alevin; [2021-05-27 14:31:00.318] [alevinLog] [error] Could not properly process salmon-level options!; ```; Is it the problem with my data?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/663#issuecomment-850151665:728,error,error,728,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/663#issuecomment-850151665,2,['error'],['error']
Availability,"Thanks sir. On Thu, Nov 21, 2019 at 9:27 PM Rob Patro <notifications@github.com> wrote:. > Hi @shanmugavadivelps <https://github.com/shanmugavadivelps>,; >; > This is because, to properly find and link libiconv, the build requires a; > version of CMake that ships with FindIConv.cmake. So, to build salmon from; > source, you should have at least CMake version 3.12. Internally and on our; > continuous integration servers, we use version 3.15.; >; > Also, I'll mention that it may not be essential to build from source.; > Salmon is available via Bioconda, and a docker image is available via; > DockerHub. Also, we have a pre-compiled binary that should work on many; > linux distributions available under our releases; > <https://github.com/COMBINE-lab/salmon/releases>.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/453?email_source=notifications&email_token=AN2V7HW3GLUZR52T4BJKOFLQU2VYHA5CNFSM4JP7NHKKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEE2W3DI#issuecomment-557149581>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AN2V7HTVJB3TCKRKDY6YKI3QU2VYHANCNFSM4JP7NHKA>; > .; >. -- ; *Shanmugavadivel, P. S.*; *Scientist (Agricultural Biotechnology),*. *#216, Block A,*; *ICAR-Indian Institute of Pulses Research,*. *Min. of Agriculture & Farmers Welfare,*. *Govt. of India,Kanpur - 208 024.*; *email: shanmugavadivel.ps@icar.gov.in <shanmugavadivel.ps@icar.gov.in>*; *www.iipr.res.in <http://www.iipr.res.in>*",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-557774568:534,avail,available,534,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-557774568,3,['avail'],['available']
Availability,"Thanks, @lgautier! I think that ideally, we will create a github repo for all dependencies, so that we can control such availability issues.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/23#issuecomment-152302062:120,avail,availability,120,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/23#issuecomment-152302062,1,['avail'],['availability']
Availability,"Thanks, Avi- actually, I am interested in obtaining the **original** transcript lengths . For now, I'm going through the effort of mapping the salmon quant output (quant.sf) ""Length"" column to the raw counts. Not quite there yet, but as long as there isn't anything already in place for this, I'll proceed down this avenue. . Thanks again!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/693#issuecomment-917202872:306,down,down,306,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/693#issuecomment-917202872,1,['down'],['down']
Availability,"Thanks, Isn't Sailfish required to run Salmon?, because the first time I run salmon I got an error:. `bash: sailfish: command not found_`. I dowloaded sailfish and when got back to use salmon the malloc error appears.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614218653:93,error,error,93,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614218653,2,['error'],['error']
Availability,"Thanks- Jonathan. Yikes, that bad quality one looks like particularly bad quality, I have an example that looks like that in my failed examples. Were you able to recover usable data from it?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490510234:162,recover,recover,162,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490510234,2,['recover'],['recover']
Availability,"Thanks. I noticed that you forked BWA. I'm guessing my substitution of mainline BWA for your forked version is behind the last error. If we get int64_t defined, that might resolve it. I'd be happy to test, and can submit some patches for my other edits to CMakefiles.txt . I will try the Docker image. I was hesitant to use it because it relies on ZFS, and I'm not sure how ZFS will interact with my jail. Probably the easier path right now though.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-337616760:127,error,error,127,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-337616760,1,['error'],['error']
Availability,"Thanks. The ref genie thing might be a little big for me to download to be honest. I talked to my PI and he said it was to be expected that the RNA might be low quality. I ran it against mouse DNA as well and the mouse was multiples worse so I guess that's a good sign. The decoy hits also outnumber the mapped hits by about 6:1. But they never exceed about 7%. Does this indicate something wrong with my indexing?. I also tried mapping indexing against human CDS and NCRNA files from ftp://ftp.ensembl.org/pub/release-100/fasta/homo_sapiens/ and the human genome from the same source. Those had even lower hit rates. That was odd because rRNA wasn't filtered out for this RNA seq, so I would have expected the rRNA parts of the NCRNA to have a lot of hits. But alas.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/558#issuecomment-673153902:60,down,download,60,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/558#issuecomment-673153902,1,['down'],['download']
Availability,"That does not seem very likely in this case. The default C++ compiler mode is C++14 and pretty much everything on the system is compiled that way. Still, I'm not sure how boost169 was compiled (the src.rpm is not available at the moment, waiting for email from the builder). It was used with other packages though, and if it had an incompatible ABI they should not have worked either. Checking my notes there are a couple of specific programs which had to be compiled with older C++ standards, but none of those are linked to Salmon. Also, if that was the problem, shouldn't these have shown up as unresolved references because of the ABI_TAG (""cxx11"" or ""_cxx11"", according to this:. https://developers.redhat.com/blog/2015/02/05/gcc5-and-the-c11-abi/. ) ?. ccache was installed and was active for the salmon build. It was removed and salmon rebuilt. No difference, it still segfaults.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641652976:213,avail,available,213,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641652976,1,['avail'],['available']
Availability,That sounds like a very good way of doing it :-). I'm sorry I was not clear enough - my question was acutally meant for a single sequence - let me try again:; Lets say we have a read pair where one mate maps fine - but the other mate have a problem - half of it is an adapter (or low quality sequence with to many errors). How would Salmon currently handle this situation where the first half of a sequence (e.g. nt 1-50) could be quasi-mapped to a transcript but the second half (nt 51-100) did not match anywhere? Would the the second half cause the whole sequence to be discarded or would it be enough that the first half matched for it to be considered/counted?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-354955072:314,error,errors,314,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/150#issuecomment-354955072,2,['error'],['errors']
Availability,"The 1 new alert is a false positive from LGTM. The rethrow is done in the uncaught error handler, so it is correct. Now this is a debugging feature to print the stack trace in case of error. It can be removed from the code (although you may be interested in keeping it maybe).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/617#issuecomment-764742021:83,error,error,83,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/617#issuecomment-764742021,2,['error'],['error']
Availability,"The `AS:i:-2147483648` is a sentinel value basically meaning the alignment was below the minimum acceptable quality. You can simply ignore those (its the min signed 32-bit integer). Let me think about your other question (and ping @mikelove), and get back to you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/528#issuecomment-639157711:226,ping,ping,226,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/528#issuecomment-639157711,2,['ping'],['ping']
Availability,"The current behavior, which I think is the most reasonable for now, is to keep logging messages to stderr, even if they are not errors. This lets us use stdout for output which may need to be redirected to other programs (e.g. mapping results).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/55#issuecomment-245804636:128,error,errors,128,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/55#issuecomment-245804636,1,['error'],['errors']
Availability,"The downside of this choice, @rob-p and @mdshw5, is that the user has to do this kind of thing to get the long documentation into `less`:. `salmon quant --help-reads 2>&1 | less`. And this behavior is very unusual among command-line tools when invoking `--help`",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/55#issuecomment-375116281:4,down,downside,4,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/55#issuecomment-375116281,1,['down'],['downside']
Availability,The error code comes from the underlying `kseq` parser. It means some read had an underlying quality string that was truncated (shorter than the corresponding read). See [this](https://www.biostars.org/p/342945/#405026) biostars post.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/709#issuecomment-928588815:4,error,error,4,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/709#issuecomment-928588815,1,['error'],['error']
Availability,"The error you're seeing is a result of the BAM parser (libstaden) finding an inconsistency in the BAM file. Specifically, this line of code seems to be triggering the error that is printed (https://github.com/svn2github/staden-io_lib/blob/master/trunk/io_lib/bam.c#L300). This suggests something is awry with the BAM file / header. While I can't see anything immediately problematic from the snippet of the header you posted above, I do see some curious things even in this short region of the header. Specifically, the first transcript `NC_003070.9:0-30427671`, appears to be > 30 million nucleotides long --- this is a very suspicious length for a transcript. Second, the second and third transcripts appear to be exact duplicates. Though that is not an inconsistency itself, there is no benefit to having a transcript present multiple times and it can adversely affect quantification estimates. Are there any details about how the reference was obtained (or the BAM file created) that might shed light on why the BAM parser finds such an inconsistency?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-270012983:4,error,error,4,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-270012983,2,['error'],['error']
Availability,"The following bash code will detect and parse either format of gtf into an appropriately versioned two column tx2gene file. test=$(zless -S $gtf | grep -v ""#"" | awk '$3==""transcript""' | head -n 1| cut -f9 | tr -s "";"" "" "" | awk '{print$3}' | sort | uniq | sed 's/\""//g'); if [[ $test == ""transcript_id"" ]]; then; zless -S $gtf | grep -v ""#"" | awk '$3==""transcript""' | cut -f9 | tr -s "";"" "" "" | awk '{print$4""\t""$2}' | sort | uniq | sed 's/\""//g' > txp2gene.tsv; elif [[ $test == ""gene_version"" ]]; then; echo ""Separate version field (ensembl, non-gencode transcriptome, eg. rat, etc)""; zless -S $gtf | grep -v ""#"" | awk '$3==""transcript""' | cut -f9 | tr -s "";"" "" "" | awk '{print$6 ""."" $8""\t""$2 ""."" $4}' | sort | uniq | sed 's/\""//g' > txp2gene.tsv; fi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/598#issuecomment-737617544:503,echo,echo,503,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/598#issuecomment-737617544,1,['echo'],['echo']
Availability,"The issue relates to the error message, so maybe I will close the issue in terms of being able to run the program without generating the error message. However, I think something still doesn't seem right, and I thought I should make that clear. <table>; <tbody>; <tr>; <th align=""center"">Method</th>; <th align=""center"">SRR13313130</th>; <th align=""center"">10x_pbmc_5k</th>; </tr>; <tr>; 	 <td align=""left"">CellRanger</td>; <td align=""center"">9,974 cells</td>; <td align=""center"">4,956 cells</td>; </tr>; <tr>; 	 <td align=""left"">STARsolo</td>; <td align=""center"">7,587 cells</br><i>(Summary.csv)</i></td>; <td align=""center"">4,586 cells</br><i>(Summary.csv)</i></td>; </tr>; <tr>; 	 <td align=""left"">Alevin</td>; <td align=""center""><b>814 cell barcodes?</b></td>; <td align=""center""> 856,224 cell barcodes</td>; </tr>; <tr>; 	 <td align=""left"">Kallisto</td>; <td align=""center"">79,254 cells</br><i>(BUSpaRse)</i></td>; <td align=""center"">47,598 cells</br><i>(BUSpaRse)</i></td>; </tr>; <tr>. </tbody>; </table>. For Alevin and Kallisto, I am not so worried about the exact values for cell barcodes (versus cells), since I was expecting extra work was needed to estimate a cell count from a distribution of measurements for each cell barcode. However, the number of cell barcodes should be larger than the number of cells, and that seems to match for everything except Alevin for this sample (SRR13313130). In other words, for sample, I think that this is the command that generates the fewest errors/warnings/notes:. `/path/to/salmon alevin -l ISF --chromium -1 $R1 -2 $R2 -i $REF -p 4 -o $ID --tgMap $MAP`. However, I think the cell barcode count is too small. **Is there anything else that you would recommend trying?**",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-882751952:25,error,error,25,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-882751952,6,['error'],"['error', 'errors']"
Availability,"The issue with reading the .mtx file does not appear to be fixed in develop. I still get:. `Error: readMM(): column values 'j' are not in 1:nc` with `Matrix::readMM(file)`. I think it is related to the column indexing in the .mtx file. Specifically, values should be in `1:nc` where `nc` is in the first row second column after the `%%MatrixMarket matrix coordinate real general` line. There is a value of 0 in my .mtx file so I am guessing the issue is 0 indexing instead of 1 indexing.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/380#issuecomment-503677169:92,Error,Error,92,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/380#issuecomment-503677169,1,['Error'],['Error']
Availability,"The last patch display the error with `std::cerr << ...`, because `log->critical(...)` does not seem to work. Not sure how to fix it.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/617#issuecomment-835404939:27,error,error,27,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/617#issuecomment-835404939,1,['error'],['error']
Availability,"The main issue of alevin failing at a low % of analyzed cells is solved, after personal communication with Avi. It turns out that index contained some duplicated transcripts, which were causing the error. I have removed the duplicated transcripts from the .fa file and the transcript_to_gene.tsv matrix, and the analysis completed without errors in a sample run. If the error happens in the whole set of samples I will reopen the issue.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386#issuecomment-508753067:198,error,error,198,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386#issuecomment-508753067,3,['error'],"['error', 'errors']"
Availability,"The problem you're encountering here seems to be a result of a memory allocation error. Basically, building the index requires considerably more memory than actually storing it (and using it for quantification). One option would be to try and build the index with smaller k-mers, which should require less memory. It looks like you successfully indexed 3.8 / 4.1 billion nucleotides, so you're reasonably close to done. The other option will only work with the newest commits of Salmon (i.e. you'd have to clone the repository and build) --- however, they allow building a perfect hash index rather than using the google dense hash we use by default. The perfect hash construction uses an external memory algorithm, and it takes considerably less memory to build the index. A pre-compiled binary exposing this option should also be available later this week.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/53#issuecomment-202592429:81,error,error,81,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/53#issuecomment-202592429,2,"['avail', 'error']","['available', 'error']"
Availability,"The sequence bias model is generic. That is, it does not start out with any assumption about the prevalence or use of specific hexamers. Rather, it trains a VLMM to assess bias in the context surrounding (upstream and downstream) read start positions. It makes sense to use this flag to model types of sequence-specific non-uniformity in read start positions even beyond those caused by non-random hexamer priming.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/880#issuecomment-1757689389:218,down,downstream,218,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/880#issuecomment-1757689389,1,['down'],['downstream']
Availability,"The singularity error must be related to the -e argument... I'll try tomorrow, but I think that will solve the problem, thank you very much!; ###; It works, thanks again.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/447#issuecomment-553016971:16,error,error,16,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/447#issuecomment-553016971,1,['error'],['error']
Availability,"The specific error message seems to be coming from [the serialization library we use](https://github.com/USCiLab/cereal/blob/master/include/cereal/archives/portable_binary.hpp#L245). This was upgraded recently, so I'm hoping that they didn't introduce a new bug upstream. As soon as I can reproduce this, I can test if rolling back the version of the serialization library fixes the issue (which I don't believe occurred in 0.7.2).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/129#issuecomment-287255919:13,error,error,13,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/129#issuecomment-287255919,1,['error'],['error']
Availability,"The ~/data/Sus_scrofa.Sscrofa11.1.dna.toplevel.fa is genome, the ./SQANTI3_1_output/cdna.new.fa is trans, therefore I don't know where is error.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/919#issuecomment-2009036657:138,error,error,138,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/919#issuecomment-2009036657,1,['error'],['error']
Availability,"There are quant.sf files in each one of folders. But i get the error saying ""doesn't contain quant.sf "". aux_info cmd_info.json lib_format_counts.json libParams logs quant.sf",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/179#issuecomment-543271953:63,error,error,63,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/179#issuecomment-543271953,1,['error'],['error']
Availability,"There is a (known) compiler error. To compile from source, you should pass `-DNO_IPO=TRUE` to the `cmake` step. That should fix your compile.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/592#issuecomment-734936468:28,error,error,28,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/592#issuecomment-734936468,1,['error'],['error']
Availability,"There is a long literature about why we use counts or CPM (in either case, optionally with an effective transcript length offset) instead of raw TPM for statistical modeling. Using TPM throws out information about the sampling variation. It can be recovered in large sample datasets, but in small sample datasets, it's too much information loss. With respect to Wilcoxon, again, it's good to incorporate the inherent sampling variation of counts into the test statistic even with nonparametric schemes. This occurs in SAMseq (2013). https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4605138/. ...and also in our method Swish (2019), which is based on SAMseq but designed specifically for output of methods like Salmon. https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6765120/. Note that Swish is both 1) nonparametric 2) takes into account the multinomial-based sampling nature of sequencing data 3) also takes into account inferential uncertainty from multimapping reads (across isoforms, alleles, or genes).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/812#issuecomment-1325134215:248,recover,recovered,248,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/812#issuecomment-1325134215,1,['recover'],['recovered']
Availability,"There is nothing obvious about the command you provided that looks incorrect. Can you please check if the segmentation fault still occurs with the most recent release of salmon (either 1.10 or 1.10.1)?. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/847#issuecomment-1533935566:119,fault,fault,119,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/847#issuecomment-1533935566,1,['fault'],['fault']
Availability,This error is only happening for HOMO_SAPIENS and no other organisms. Related TXI:; https://s3.amazonaws.com/data-refinery-s3-transcriptome-index-circleci-prod/HOMO_SAPIENS_TRANSCRIPTOME_LONG.tar.gz,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/322#issuecomment-442547014:5,error,error,5,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/322#issuecomment-442547014,1,['error'],['error']
Availability,"This error looks like it is not coming from Salmon, but from some R program that is processing Salmon's results.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/833#issuecomment-1446342132:5,error,error,5,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/833#issuecomment-1446342132,1,['error'],['error']
Availability,"This gave me:; ```; ****************; *** getDecoy ***; ****************; -a <Annotation GTF file> = /nfs/no_backup/genome_annots/Mus_musculus_ENSEMBL_v_102_GRCm38.gtf; -g <Genome fasta> = /nfs/no_backup/genome_seqs/Mmu10_gDNA.fasta; -t <Transcriptome fasta> = /nfs/no_backup/transcriptome_seqs/Mus_musculus_GENCODE_v25_GRCm38.fa; -o <Output files Path> = /no_backup/indexes/salmon/gencode_mm10_unzip; [1/10] Extracting exonic features from the gtf; [2/10] Masking the genome fasta; [3/10] Aligning transcriptome to genome; >>>>>>>>>>>>>>>>>>; Reference = [reference.masked.genome.fa]; Query = [/nfs/no_backup/transcriptome_seqs/Mus_musculus_GENCODE_v25_GRCm38.fa]; Kmer size = 16; Window size = 5; Segment length = 500 (read split allowed); Alphabet = DNA; Percentage identity threshold = 80%; Mapping output file = mashmap.out; Filter mode = 1 (1 = map, 2 = one-to-one, 3 = none); Execution threads = 8; >>>>>>>>>>>>>>>>>>; INFO, skch::Sketch::build, minimizers picked from reference = 843543544; INFO, skch::Sketch::index, unique minimizers = 276648625; INFO, skch::Sketch::computeFreqHist, Frequency histogram of minimizers = (1, 141685574) ... (2606547, 1); INFO, skch::Sketch::computeFreqHist, With threshold 0.001%, ignore minimizers occurring >= 7361 times during lookup.; INFO, skch::main, Time spent computing the reference index: 549.706 sec; INFO, skch::Map::mapQuery, [count of mapped reads, reads qualified for mapping, total input reads] = [111965, 112131, 142604]; INFO, skch::main, Time spent mapping the query : 17487.5 sec; INFO, skch::main, mapping results saved in : mashmap.out; [4/10] Extracting intervals from mashmap alignments; [5/10] Merging the intervals; [6/10] Extracting sequences from the genome; [7/10] Concatenating to get decoy sequences; [8/10] Making gentrome; [9/10] Extracting decoy sequence ids; [10/10] Removing temporary files; ```. Check the decoys:; ```; head /no_backup/indexes/salmon/gencode_mm10_unzip/decoys.txt ; GL456210.1; GL456367.1; chrX; chrY; GL4",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1003335885:457,Mask,Masking,457,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1003335885,2,"['Mask', 'mask']","['Masking', 'masked']"
Availability,"This happens when there was no read in the same length bin during training period (the first so many reads are used for training) as the read under consideration. So Salmon can't assigned a valid log likelihood and an error is reported. The 3 errors are really the same one. The error log likelihood of 3 models are added (based on position of first mismatch/indel, length of clipping at each end of the read). If the length bin is empty for 1 model, it is likely empty for the other 2 models, and 3 warnings are printed when 1 would have been enough. This read gets a error likelihood of 1 and is mostly ignored by Salmon after that. Such reads should be rare by definition (unless the input BAM was not randomized, or there is bug) and this warning should be rare as well. So unless you see many such warnings, you can safely ignore it.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1421264240:218,error,error,218,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1421264240,4,['error'],"['error', 'errors']"
Availability,"This in the compile error I get for the Staden package, FYI:. ```; ❯ make VERBOSE=1 [12:30:35]; /usr/local/Cellar/cmake/3.13.4/bin/cmake -S/Users/gabriel/Projects/salmon-0.13.1 -B/Users/gabriel/Projects/salmon-0.13.1/build --check-build-system CMakeFiles/Makefile.cmake 0; /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_progress_start /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/progress.marks; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/Makefile2 all; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libcereal.dir/build.make CMakeFiles/libcereal.dir/depend; cd /Users/gabriel/Projects/salmon-0.13.1/build && /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/libcereal.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libcereal.dir/build.make CMakeFiles/libcereal.dir/build; make[2]: Nothing to be done for `CMakeFiles/libcereal.dir/build'.; [ 8%] Built target libcereal; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/depend; cd /Users/gabriel/Projects/salmon-0.13.1/build && /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/libstadenio.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/build; [ 9%] Performing configure step for 'libstadenio'; cd /Users/gabr",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713:20,error,error,20,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713,1,['error'],['error']
Availability,"This is failing on our local drone CI during runtime. The log output is :. ```; + echo ""[Testing quant]""; [Testing quant]; + ./.drone/test_quant.sh; Holy build box activated; Prefix: /hbb_exe; CFLAGS: -g -O2 -fvisibility=hidden -I/hbb_exe/include ; LDFLAGS: -L/hbb_exe/lib -static-libstdc++; STATICLIB_CFLAGS: -g -O2 -fvisibility=hidden -I/hbb_exe/include ; SHLIB_CFLAGS: -g -O2 -fvisibility=hidden -I/hbb_exe/include ; SHLIB_LDFLAGS: -L/hbb_exe/lib -static-libstdc++; [Drone test] current path : /drone/src/github.com/COMBINE-lab/salmon; [Drone test] making quant test directory; [Drone test] run nextflow pipeline; N E X T F L O W ~ version 0.29.1; Launching `tests/test_quant.nf` [curious_gilbert] - revision: 4f25b30301; [warm up] executor > local; [91/922fac] Submitted process > buildIndex; ERROR ~ Error executing process > 'buildIndex'; Caused by:; Process `buildIndex` terminated with an error exit status (127); Command executed:; /drone/src/github.com/COMBINE-lab/salmon/bin/salmon index -t Homo_sapiens.GRCh37.75.cdna.pc.fa -i nfindex; Command exit status:; 127; Command output:; (empty); Command error:; /drone/src/github.com/COMBINE-lab/salmon/bin/salmon: error while loading shared libraries: libjemalloc.so.2: cannot open shared object file: No such file or directory; Work dir:; /drone/src/github.com/COMBINE-lab/salmon/work/91/922facec25da43edd4a2ce82f2289d; Tip: when you have fixed the problem you can continue the execution appending to the nextflow command line the option `-resume`; -- Check '.nextflow.log' file for detail; ```. So, it seems to be due to failure to find the dynamic shared library for jemalloc. Any idea why that might be?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472495264:82,echo,echo,82,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472495264,12,"['ERROR', 'Error', 'echo', 'error', 'failure']","['ERROR', 'Error', 'echo', 'error', 'failure']"
Availability,"This is great find! Thanks @jeremymsimon! I have started the download, will run it today.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-984788978:61,down,download,61,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-984788978,1,['down'],['download']
Availability,"This issue is not only the case for ensembl, but also for gencode v29. Following the [tutorial](https://gist.github.com/k3yavi/c501705ed2d29b12b0d10cf78b3ed001), building an index from *ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_29/gencode.v29.pc_transcripts.fa.gz* and *txp2gene.tsv* from *ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_29/gencode.v29.annotation.gtf.gz* results in *ERROR: Txp to Gene Map not found for 98665 transcripts. ExitingNULL*. A suggested solution: have an option during building the index so that it will only include transcripts also present in a pre-generated txp2gene.tsv (what @sarahhcarl did manually).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-496238223:422,ERROR,ERROR,422,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-496238223,1,['ERROR'],['ERROR']
Availability,To reproduce this error:. ``` sh; docker run linuxbrew/linuxbrew brew install gcc homebrew/science/salmon; ```,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/46#issuecomment-193897441:18,error,error,18,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/46#issuecomment-193897441,1,['error'],['error']
Availability,"UPDATE: On @rob-p 's suggestion, I removed the `--recoverOrphans` option and then all 60 samples did finished without segfaulting. Perhaps there were too many orphans to handle - alignments rates were a dismal 0.5-23%. These were heavily degraded samples that the sequencing center recommended not to sequence but the PI wanted to try it anyway. If you want a pair of fastq files (full or cutdown to ~5 M reads) to test this weird edge case, I can see about getting them to you. Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/668#issuecomment-862525216:50,recover,recoverOrphans,50,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/668#issuecomment-862525216,2,"['degraded', 'recover']","['degraded', 'recoverOrphans']"
Availability,"USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test11/${ID}. strace /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test11/${ID} 2> logs/strace_${SGE_TASK_ID}.txt. echo ""**** Job ends ****""; date; ```. This requests SGE 2 cores with a total free memory of 2 * 7 = 14 GB and a maximum memory of 16 GB. This is the `strace` output for task 1:. ```; execve(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", [""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""quant"", ""-i"", ""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""-p"", ""1"", ""-l"", ""ISR"", ""-1"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-2"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-o"", ""/dcl01/lieber/ajaffe/lab/libd_al""...], [/* 107 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", 4096) = 88; access(""/etc/ld.so.preload"", R_OK) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENO",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:3661,echo,echo,3661,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['echo'],['echo']
Availability,"Ugh, salmon built, but it crashes. ```; module load salmon; cd /tmp; gunzip -c $ROOT_SALMON/sample_data.tgz | tar -xf -; cd sample_data; salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Segmentation fault (core dumped); ```; I wonder if this is related to the segfault seen when Pufferfish was built on the same platfrom from the git repository (today also.)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641545954:223,fault,fault,223,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641545954,1,['fault'],['fault']
Availability,"Uh, why then does ""make test"" fail if the root directory name is changed? That was using the binary/libraries in $WHEREVER, after bin and lib below the root directory were removed. Typically that sort of operation doesn't care what the top level is named. For some future release, perhaps the run time dynamic loading of libraries could look up the path to libtbb.so.2 and try that first, before falling back to LD_LIBRARY_PATH? On my system ldd of salmon shows a link to libtbb.so.2, no LD_LIBRARY_PATH needed. ldd does not show any links to libtbb.malloc*. The program will do at least ""salmon --help' that way without any errors or warnings. That isn't sufficient to pass ""make test"" though (even when the directory has not been renamed). It seems that libtbb.malloc* libraries are used during that test, and that use requires LD_LIBRARY_PATH. Only when they are found that way does ""make test"" work.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397063656:625,error,errors,625,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397063656,1,['error'],['errors']
Availability,"Unfortunately it's getting into a little under explored territory. ; Retrospectively, it does makes sense to have such a threshold but sadly in the current version we don't have that option. If it may help, I just got some stats for 10x data and generally it's around top < 1% of the data which is useful, which should be even lower in dropseq. Although it's possible my sample size of 5 below dataset is too small. ```; useful -> total; 4k -> 1,239,476; 8k -> 1,877,718; 900 -> 657,180; 2k -> 1,653,795; 9k -> 2,812,291; ```. My guess is keeping the `keepCBFraction` even to 0.1 (i.e. 10%) would get you decent number of empty/low confidence CB to correct for downstream but you might have to explore a little. Another caveat is, having too many CB blows up the memory for downstream whitelisting of alevin and currently there is no option to disable that whitelisting, again a must have feature which is missing. Thanks for this very useful discussion, we will definitely improve/add these options into alevin with the next release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490857399:661,down,downstream,661,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490857399,2,['down'],['downstream']
Availability,"We do no have access to BSD-based systems (apart from the extent to which OSX can be said to be BSD-based) on which to test during development. Bioconda works on many linux distributions; though I do not have a comprehensive list. For example, we regularly run on Ubuntu, CentOS, RedHat and Debian. If you have the facilities to use Docker on this machine, you can also pull down a docker image of the latest release from https://hub.docker.com/r/combinelab/salmon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-522628674:375,down,down,375,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-522628674,1,['down'],['down']
Availability,"Well, one can certainly use a tool (like gffread or rsem-prepare-reference) to take a genome and a (possibly custom/augmented) GTF to extract a set of target transcripts. Above, it looks like you were only processing between 90 and 100k transcripts. Given the overall size of the overall reference — ~2.4 billion nucleotides — my guess would be that some of these transcripts may be exceedingly long (and perhaps extracted incorrectly from the underlying tool). I should note that an index can be built on large references (which is why we support 64-bit index construction), but it's a very rare use-case as most transcriptomes (even large _de novo_ transcriptomes) rarely cross the 2^31 barrier, and I would expect it to consume quite a bit of memory. The default `quasi` indexer of Salmon is optimized to be very fast for typical sized transcriptomes (usually a few hundred mega-bases) at the cost of using more memory. The alternative `fmd` index can be made more memory efficient, by setting a larger sampling factor, but the resulting mapping will be slower (though still much faster than standard alignment). I would first check to see if the transcripts.fa file contains what you were expecting (i.e. the normal transcriptome + the auxiliary transcripts you were interested in quantifying), and that you actually have close to 2.4Gb of non-redundant transcriptome sequence that you want to quantify. If this is the case, the options are to try and build the quasi-index on a large memory machine (building the index requires more memory than mapping with the constructed index), or using the fmd-index with a large sampling factor. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/39#issuecomment-176802594:1348,redundant,redundant,1348,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/39#issuecomment-176802594,1,['redundant'],['redundant']
Availability,When I add the whitelist using `--whitelist` command I get the following error. `[2020-06-09 09:01:07.401] [alevinLog] [error] Wrong whitelist provided; Please check https://salmon.readthedocs.io/en/develop/alevin.html#whitelist; `,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-641276650:73,error,error,73,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-641276650,2,['error'],['error']
Availability,"When I do with proxy I got : . ```; Last login: Thu Jun 30 15:10:26 on ttys001; Benjamin@u932-ulm-2-57030119-6834 ~ % all_proxy= url:port conda install salmon; Collecting package metadata (current_repodata.json): failed. # >>>>>>>>>>>>>>>>>>>>>> ERROR REPORT <<<<<<<<<<<<<<<<<<<<<<. Traceback (most recent call last):; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/exceptions.py"", line 1082, in __call__; return func(*args, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/cli/main.py"", line 87, in _main; exit_code = do_call(args, p); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/cli/conda_argparse.py"", line 84, in do_call; return getattr(module, func_name)(args, parser); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/cli/main_install.py"", line 20, in execute; install(args, parser, 'install'); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/cli/install.py"", line 260, in install; unlink_link_transaction = solver.solve_for_transaction(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 152, in solve_for_transaction; unlink_precs, link_precs = self.solve_for_diff(update_modifier, deps_modifier,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 195, in solve_for_diff; final_precs = self.solve_final_state(update_modifier, deps_modifier, prune, ignore_pinned,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 300, in solve_final_state; ssc = self._collect_all_metadata(ssc); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/common/io.py"", line 88, in decorated; return f(*args, **kwds); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 463, in _collect_all_metadata; index, r = self._prepare(prepared_specs); File ""/usr/local/Ca",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:246,ERROR,ERROR,246,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['ERROR'],['ERROR']
Availability,"When I try it this way, the program exits. ```; salmon index -t rnor_gentrome.fa -d decoys.txt -k 31 -p 16 -i rnor_ENSEMBL_96_SA_index_k31; ```. These are the last few lines. ```; [2020-04-14 01:07:52.750] [puff::index::jointLog] [critical] The decoy file contained the names of 955 decoy sequences, but 953 were matched by seq; uences in the reference file provided. To prevent unintentional errors downstream, please ensure that the decoy file exactly matches with the fasta; file that is being indexed.; [2020-04-14 01:07:52.895] [puff::index::jointLog] [error] The fixFasta phase failed with exit code 1; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/505#issuecomment-613229118:393,error,errors,393,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/505#issuecomment-613229118,3,"['down', 'error']","['downstream', 'error', 'errors']"
Availability,"When you compile the program, the last few lines tell you to make links to; the salmon executable and the LIB file. I forgot the lib file and was; getting this error. You can run the executable from the area of install; (works fine) or create a path to /urs/local/bin or any other folder you; want to install. You need to do this for both the files. For making path in linux:; https://stackoverflow.com/questions/14637979/how-to-permanently-set-path-on-linux. Hope this helps. On Mon, May 22, 2017 at 7:03 AM, Darlingfuer <notifications@github.com>; wrote:. > @sudeep71 <https://github.com/sudeep71> Hi there, I run into the same; > error when I use salmon. Would please tell me what you did to set a correct; > PATH ? Thanks!; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/135#issuecomment-303068916>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AGcbqM0Z1aeqPtMmppyF51gj9DvEJh5Vks5r8WtpgaJpZM4NT7ex>; > .; >",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/135#issuecomment-303152754:160,error,error,160,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/135#issuecomment-303152754,2,['error'],['error']
Availability,"With the extra `--expectCells 10000` parameter, Alevin finished running without error messages and 10,641 cell barcodes in **quants_mat_rows.txt**. I am not sure how much of a difference it makes if I expect 8,000 cells versus 10,000 cells. However, this looks much closer to the expected number, and I am closing the ticket. Thanks again!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-884309748:80,error,error,80,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-884309748,1,['error'],['error']
Availability,"Yea. Both are frustrating, which is why we spam warning messages to the console when we remove duplicates. Sorry if this default behavior caused you any trouble, but hopefully its easy to recover these quants without rerunning anything using the map of collapsed transcripts.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-381584892:188,recover,recover,188,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-381584892,1,['recover'],['recover']
Availability,"Yeah, this is definitely not your issue. In fact, I just figured out that my explanation above was incomplete. **You don't need to investigate anything on your end**. I simply didn't flush the entire contents of a FASTA file to disk before calling `salmon index`. In the course of tracking down the issue I fixed some of my code indentation, bringing some of my code into a more global scope, where the `with` context handler I was using to hold the FASTA file open went out of scope, flushing my final writes to disk. Sigh...",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/132#issuecomment-303813062:290,down,down,290,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/132#issuecomment-303813062,2,['down'],['down']
Availability,"Yep, I think that's right and it is expected that every sample would have different number of cells/cellular barcodes. The general idea is to use a frequency distribution to separate high quality barcodes from low quality post quantification. I'm sorry that you are facing issues with v2, but the error simply means you are providing the full list of 737k barcodes which is not an expected behavior for the `--whitelist` flag and in a typical 10x/ Dropseq based experiment one would expect ~10-12k cells/CB.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-878695672:297,error,error,297,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-878695672,2,['error'],['error']
Availability,"Yep, check this line in the log:; > Total 41.2673% reads will be thrown away because of noisy Cellular barcodes. I think the CB frequency is most probably a bimodal distribution, I'd suggest you to try `--expectCells 8000` command line flag along with the regular command you are using above and check if the numbers in the log comes down to `~15%`.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510549172:334,down,down,334,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510549172,1,['down'],['down']
Availability,"Yep, that is what I was reflecting at earlier. Using `--dumpFeatures` you can get the file `filtered_cb_frequency.txt` (this is after CB seq correction, `raw_cb_frequency` is before seq correction). As the file is reverse sorted by frequency you can count the number of CB with frequency `>100` and use that for the `--forceCell`. It does makes alevin multiple pass algorithm but that was the current use case with complex dataset where it fails to find the knee. . One thing to note here would be the downstream whitelisting. If the number of CB becomes too many then it can potentially blow up the memory. However, since you are already parsing the names of the CB (in your awk script) you can pass those CB as the `--whitelist`, alevin will still sequence correct the remaining CB with 1-edit distance around them. The benefit of this is, alevin will not run downstream whitelisting as a list of whitelisted CB has been provided externally.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490907226:502,down,downstream,502,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490907226,2,['down'],['downstream']
Availability,"Yes ! it's other error that I can't find . but I try : . ```; Last login: Thu Jun 30 15:14:51 on ttys002; Benjamin@u932-ulm-2-57030119-6834 ~ % conda config --add channels defaults; conda config --add channels bioconda; conda config --add channels conda-forge; Warning: 'conda-forge' already in 'channels' list, moving to the top; Benjamin@u932-ulm-2-57030119-6834 ~ % conda install salmon; Collecting package metadata (current_repodata.json): failed. CondaHTTPError: HTTP 000 CONNECTION FAILED for url <https://conda.anaconda.org/conda-forge/osx-arm64/current_repodata.json>; Elapsed: -. An HTTP error occurred when trying to retrieve this URL.; HTTP errors are often intermittent, and a simple retry will get you on your way.; 'https://conda.anaconda.org/conda-forge/osx-arm64'; ```. ```; Benjamin@u932-ulm-2-57030119-6834 ~ % conda config --show channels ; channels:; - conda-forge; - bioconda; - defaults; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171223414:17,error,error,17,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171223414,6,['error'],"['error', 'errors']"
Availability,"Yes, I wonder if there is some sort of simple formatting issue that could be at fault here. Having a look at the file(s) would make it much easier to diagnose.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/540#issuecomment-648250382:80,fault,fault,80,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/540#issuecomment-648250382,2,['fault'],['fault']
Availability,"Yes, for gencode the tsv file would like as following:; ```; ENST00000456328.2 ENSG00000223972.5; ENST00000450305.2 ENSG00000223972.5; ENST00000488147.1 ENSG00000227232.5; ENST00000619216.1 ENSG00000278267.1; ENST00000473358.1 ENSG00000243485.5; ENST00000469289.1 ENSG00000243485.5; ENST00000607096.1 ENSG00000284332.1; ENST00000417324.1 ENSG00000237613.2; ENST00000461467.1 ENSG00000237613.2; ENST00000606857.1 ENSG00000268020.3; ```; Basically the error is popping because it is not able to map the name of the transcript in your reference `fasta` file to the name of the transcript in the `tsv` file.; How does head of the `fasta` looks like or ; ```; grep ""^>"" /path/to/fasta | head ; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410346357:450,error,error,450,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410346357,1,['error'],['error']
Availability,"Yes, in the gtf file, I don't have any .[0-9] (transcript version); suffixes for the transcripts, while I have some on the fasta file; header. So it is the fasta feature identifier extracted from the header; that is used, not the transcript_id (without its suffix) from the gtf; file ? I'll rebuild a correct tx2gene file then. Le 03/08/2018 à 20:59, Avi Srivastava a écrit :; > Yes, for gencode the tsv file would like as following:; > ```; > ENST00000456328.2 ENSG00000223972.5; > ENST00000450305.2 ENSG00000223972.5; > ENST00000488147.1 ENSG00000227232.5; > ENST00000619216.1 ENSG00000278267.1; > ENST00000473358.1 ENSG00000243485.5; > ENST00000469289.1 ENSG00000243485.5; > ENST00000607096.1 ENSG00000284332.1; > ENST00000417324.1 ENSG00000237613.2; > ENST00000461467.1 ENSG00000237613.2; > ENST00000606857.1 ENSG00000268020.3; > ```; > Basically the error is popping because it is not able to map the name of the transcript in your reference `fasta` file to the name of the transcript in the `tsv` file.; > How does head of the `fasta` looks like or ; > ```; > grep ""^>"" /path/to/fasta | head ; > ```; >",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410351113:855,error,error,855,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/264#issuecomment-410351113,1,['error'],['error']
Availability,"Yes, that is true. I have one more thing to try before going down that road though. I just pushed a commit (56b127429d65b8aa4fe6f706d508fbc308e554ff ) that replaces that call to the `gamma_distribution` with one from Boost. Can we see if Boost's implementation also triggers this?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267842320:61,down,down,61,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267842320,1,['down'],['down']
Availability,"Yes, that is what I started to do as well. ; I generate reads from the transposon sequences and map them with bowtie allowing no missmatches to the transcriptome. Regions that get covered are masked.; Currently I use a read-length of 30 for the transposon masking. How are you doing it?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/217#issuecomment-386261471:192,mask,masked,192,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/217#issuecomment-386261471,2,['mask'],"['masked', 'masking']"
Availability,"Yes; that should definitely correctly be identified as 32-bit. The way the parser works is that it ""chops"" the header at the first whitepsace character. I can't think of anything that would cause failure during mapping (but bugs come from exactly the kind of thing you can't think of). Something that might cause an issue now that I think about it is a complete poly-A transcript. The indexer will attempt to clip poly-A tails (if a transcript ends with > 10 A's, then it will clip all of the trailing A's. If this causes the entire sequence to disappear, this might cause an issue. Also, I hadn't given deep consideration to what might happen if a transcript is shorter than the k-mer size (default 31) used for hashing --- so I might also check for very short transcripts.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/37#issuecomment-174578337:196,failure,failure,196,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/37#issuecomment-174578337,1,['failure'],['failure']
Availability,"Yesterday, I got a mapping rate of about 16% with `--split-seqV1` flag and alevin-fry using salmon index based on GENCODE v31 reference and salmon index without decoy. The number of nuclei identified with knee-distance filter is 6928. However, the number of barcodes that match b/w the submission and run is 305 which I am trying to figure out why. ; Earlier, we spotted a position error in about 10% of the split-seq reads in a subset of 2.5M reads. The fixed sequence `ATCCACGTGCTTGAGAGGCCAGAGCATTCG` doesn't always occur at its position and sometimes it's a base or 2 off, which changes the expected barcodes. For example, the sequence in red is part fixed sequence and part 8-bp barcode and it should be in the end of read but sometimes it is not. ; ![image](https://user-images.githubusercontent.com/12998572/144609847-635e1997-fcf3-4e30-8992-ce2a54e21329.png)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-985521197:382,error,error,382,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-985521197,1,['error'],['error']
Availability,You can see the added cmake file lint test case as allowed failures on Travis here.; It's good to see how the `cmakelint` works.; https://travis-ci.org/COMBINE-lab/salmon/builds/427929967,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/293#issuecomment-421432387:59,failure,failures,59,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/293#issuecomment-421432387,1,['failure'],['failures']
Availability,"You can try installing from bioconda, or compiling from source. In the cases above, I presume this has to be resolved via the module system on the cluster / server where this is being run. In the pre-compiled binaries, salmon attempts to link against a specific, old version of libm to maximize compatibility among the operating systems on which it will run. However, given it's availability on bioconda, Dockerhub, and compiled via source, the pre-compiled executable for linux is probably the least preferred way to obtain and run salmon on linux.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/710#issuecomment-1165611828:379,avail,availability,379,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/710#issuecomment-1165611828,1,['avail'],['availability']
Availability,"You mean like cloud services to perform the DE analysis? It’s always possible to round the non-integer counts to the nearest integer. However, reliable abundance estimation tools (e.g. RSEM) have been around long enough now that it’s worth pushing any cloud service you might be using to properly deal with these types of inputs. We do differential analysis quite commonly with DESeq2, and salmon -> tximport -> DESeq2 is a quite low-friction solution.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-751195284:143,reliab,reliable,143,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-751195284,1,['reliab'],['reliable']
Availability,"You specify in the `salmon index` command that the cda.new.fa sequences are the decoys though.; `-d /home/Dingzifeng/SQANTI3_1_output/cdna.decoys.txt`; This line means ""use the sequences with the titles in the text file as my decoy sequences.""; If the `cda.new.fa` sequences are not supposed to be decoys, remove that flag. Otherwise, my above answer should resolve the error.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/919#issuecomment-2013695547:370,error,error,370,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/919#issuecomment-2013695547,1,['error'],['error']
Availability,"Yup, but I'm just trying to work backward. That is, first figure out what's going on with the `minEqWeight` error, and then figure out if that's related to what was causing it to hang. The issue right now is just that I can't seem to easily repro either Gibbs error. I just ran using the binary you compiled with the following command, and got this output:. ```; $LD_LIBRARY_PATH=~/SoftwareStaging/salmon/lib:$LD_LIBRARY_PATH ./salmon quant --index Salmon_index_hg38.analysisSet_knownGene --unmatedReads SRR2454059.fq.gz --libType ISF --us; eVBOpt --output test_quant --numGibbsSamples 100 --threads 16; Version Info: This is the most recent **development version** of Salmon.; ### salmon (mapping-based) v0.7.3; ### [ program ] => salmon; ### [ command ] => quant; ### [ index ] => { Salmon_index_hg38.analysisSet_knownGene }; ### [ unmatedReads ] => { SRR2454059.fq.gz }; ### [ libType ] => { ISF }; ### [ useVBOpt ] => { }; ### [ output ] => { test_quant }; ### [ numGibbsSamples ] => { 100 }; ### [ threads ] => { 16 }; Logs will be written to test_quant/logs; [2016-12-13 22:44:07.409] [jointLog] [info] parsing read library format; [2016-12-13 22:44:07.409] [jointLog] [info] There is 1 library.; [2016-12-13 22:44:09.318] [jointLog] [info] Loading Quasi index; [2016-12-13 22:44:09.318] [jointLog] [info] Loading 32-bit quasi index; [2016-12-13 22:44:09.318] [stderrLog] [info] Loading Suffix Array; [2016-12-13 22:44:15.002] [stderrLog] [info] Loading Transcript Info; [2016-12-13 22:44:16.278] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-12-13 22:44:16.625] [stderrLog] [info] There were 182608 set bits in the bit array; [2016-12-13 22:44:16.680] [stderrLog] [info] Computing transcript lengths; [2016-12-13 22:44:16.681] [stderrLog] [info] Waiting to finish loading hash; [2016-12-13 22:44:20.485] [stderrLog] [info] Done loading index; [2016-12-13 22:44:20.485] [jointLog] [info] done; [2016-12-13 22:44:20.485] [jointLog] [info] Index contained 182608 targets. processed 19000",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584:108,error,error,108,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266935584,2,['error'],['error']
Availability,"Yup, the execution is *definitely* inside the Gibbs sampler at that point, since that's the code that sets up the progress bar etc. So, I'll focus my attention there until (if/when) we can get a specific offending function name. Thanks so much for all your help tracking this down so far; I really appreciate it!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267428600:276,down,down,276,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267428600,2,['down'],['down']
Availability,"[2018-05-31 20:01:46.042] [jointLog] [info] Marked 1 weighted equivalence classes as degenerate; [2018-05-31 20:01:46.073] [jointLog] [info] iteration = 0 | max rel diff. = 127.422; Exception : [Error in function boost::math::digamma<double>(double): numeric overflow]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting. :-O",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393621868:195,Error,Error,195,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393621868,1,['Error'],['Error']
Availability,"[2021-12-30 00:46:19.915] [puff::index::jointLog] [warning] Entry with header [ENSMUST00000229312.1|ENSMUSG00000056486.18|OTTMUSG00000013428.7|OTTMUST00000171565.1|Chn1-211|Chn1|20|processed_transcript|], had length less than equal to the k-mer length of 29 (perhaps after poly-A clipping). # [omissis]. [2021-12-30 00:46:27.227] [puff::index::jointLog] [warning] Entry with header [ENSMUST00000226172.1|ENSMUSG00000002249.21|OTTMUSG00000024245.6|OTTMUST00000167695.2|Tead3-208|Tead3|11|processed_transcript|], had length less than equal to the k-mer length of 29 (perhaps after poly-A clipping); [2021-12-30 00:46:28.327] [puff::index::jointLog] [warning] Removed 1612 transcripts that were sequence duplicates of indexed transcripts.; [2021-12-30 00:46:28.327] [puff::index::jointLog] [warning] If you wish to retain duplicate transcripts, please use the `--keepDuplicates` flag; [2021-12-30 00:46:28.327] [puff::index::jointLog] [critical] The decoy file contained the names of 55 decoy sequences, but 0 were matched by sequences in the reference file provided. To prevent unintentional errors downstream, please ensure that the decoy file exactly matches with the fasta file that is being indexed.; [2021-12-30 00:46:28.449] [puff::index::jointLog] [error] The fixFasta phase failed with exit code 1; ```. I believe; - [x] version is correct; - [x] file paths exists; - [x] It is not the k-mer number as now I get the same error with `-k 29`. For the files I've used:; The GTF file I've used for `./generateDecoyTranscriptome.sh ` I've downloaded it from ensembl with:. ```; wget http://ftp.ensembl.org/pub/release-102/gtf/mus_musculus/Mus_musculus.GRCm38.102.gtf.gz; ```; and just renamed it with `mv`. While the genome file I something already present in my lab folder structure. I could download a new original genome fasta file for mm10 if you think it's worth for the troubleshooting. Otherwise I'm not really sure how I could share this file with you. Thanks a lot for your support, ; Nicco",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1002817868:1919,error,errors,1919,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/731#issuecomment-1002817868,6,"['down', 'error']","['download', 'downloaded', 'downstream', 'error', 'errors']"
Availability,"[alevinLog] [info] Done importing order of barcodes ""quants_mat_rows.txt"" file.; [2019-01-29 09:55:59.107] [alevinLog] [info] Total 138 barcodes found; [2019-01-29 09:55:59.107] [alevinLog] [warning] mrna file not provided; using is 1 less feature for whitelisting; [2019-01-29 09:55:59.107] [alevinLog] [warning] rrna file not provided; using is 1 less feature for whitelisting; [2019-01-29 09:55:59.107] [alevinLog] [info] Starting to make feature Matrix; [2019-01-29 09:55:59.115] [alevinLog] [info] Done making regular featues; [2019-01-29 09:55:59.115] [alevinLog] [info] Done making feature Matrix; [2019-01-29 09:55:59.123] [alevinLog] [info] Finished white listing; [2019-01-29 09:55:59.126] [alevinLog] [info] Finished optimizer; ``` . Concat fastq:; ```; salmon alevin -l ISR -1 big.fastq.1.gz -2 big.fastq.2.gz --chromium -i geneset.dir/geneset_coding_exons.salmon.index/ -o salmon.dir/ --tgMap transcript2geneMap.tsv --dumpCsvCounts; Version Info: ### PLEASE UPGRADE SALMON ###; ### A newer version of Salmon with important bug fixes and improvements is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; Logs will be written to salmon.dir/logs; ### alevin (dscRNA-seq quantification) v0.11.3; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ libType ] => { ISR }; ### [ mates1 ] => { big.fastq.1.gz }; ### [ mates2 ] => { big.fastq.2.gz }; ### [ chromium ] => { }; ### [ index ] => { geneset.dir/geneset_coding_exons.salmon.index/ }; ### [ output ] => { salmon.dir/ }; ### [ tgMap ] => { transcript2geneMap.tsv }; ### [ dumpCsvCounts ] => { }. [2019-01-29 09:56:37.731] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-01-29 09:56:37.749] [alevinLog] [info] Processing barcodes files (if Present) . ; processed 2 Million barcodes. [2019-01-29 09:56:43.029",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:6144,avail,available,6144,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['avail'],['available']
Availability,"``. **`salmon 0.11.2 run with: NativeSpecification --ntasks=1 --nodes=1 --mem=100000`**; - `scontrol show job 98`; ```; JobId=98 Name=g994_salmon_refinery_stemcellcommons_org; UserId=galaxy(1001) GroupId=users(100); Priority=4294901663 Account=(null) QOS=(null); JobState=RUNNING Reason=None Dependency=(null); Requeue=1 Restarts=0 BatchFlag=1 ExitCode=0:0; RunTime=00:08:19 TimeLimit=UNLIMITED TimeMin=N/A; SubmitTime=2018-08-27T20:06:23 EligibleTime=2018-08-27T20:06:23; StartTime=2018-08-27T20:06:23 EndTime=Unknown; PreemptTime=None SuspendTime=None SecsPreSuspend=0; Partition=main AllocNode:Sid=ip-172-31-24-127:2236; ReqNodeList=(null) ExcNodeList=(null); NodeList=w21; BatchHost=w21; NumNodes=1 NumCPUs=1 CPUs/Task=1 ReqS:C:T=*:*:*; MinCPUsNode=1 MinMemoryCPU=100000M MinTmpDiskNode=0; Features=(null) Gres=(null) Reservation=(null); Shared=OK Contiguous=0 Licenses=(null) Network=(null); Command=(null); WorkDir=/mnt/galaxy/tmp/job_working_directory/000/994; ```. - `Galaxy stderr`; ```; Fatal error: Exit code 139 (); ...; /mnt/galaxy/tmp/job_working_directory/000/994/tool_script.sh: line 50: 7495 Segmentation fault (core dumped) salmon quant --index ./index --libType U --unmatedReads ./single.fastq --output ./output --allowOrphans --ma 2 --mp 4 --go 5 --ge 3 --minScoreFraction 0.65 --threads ""${GALAXY_SLOTS:-4}"" --incompatPrior 1e-20 --biasSpeedSamp 1 --fldMax 1000 --fldMean 200 --fldSD 80 --forgettingFactor 0.65 --maxReadOcc 100 --numBiasSamples 2000000 --numAuxModelSamples 5000000 --numPreAuxModelSamples 1000000 --numGibbsSamples 0 --numBootstraps 0 --consensusSlack 0 --vbPrior 0.001 --sigDigits 3; ```. - `syslog`; ```; Aug 27 20:14:23 ip-172-31-16-139 kernel: [ 2134.447133] traps: salmon[7495] general protection ip:7ff9ce320dca sp:7ffd6e497020 error:0 in libtbb.so.2[7ff9ce2fe000+37000]; ```. **`salmon 0.11.2 run with: NativeSpecification --ntasks=1 --nodes=1 --mem-per-cpu=100000`**; - `scontrol show job 99`; ```; JobId=99 Name=g995_salmon_refinery_stemcellcommons_org; ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238:3088,error,error,3088,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238,1,['error'],['error']
Availability,``; minEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266888582:1526,error,errorminEQClassWeight,1526,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266888582,1,['error'],['errorminEQClassWeight']
Availability,"```; > ; > ```; > Version Info: This is the most recent version of salmon.; > # salmon (alignment-based) v1.4.0; > # [ program ] => salmon ; > # [ command ] => quant ; > # [ targets ] => { mRNA.fasta }; > # [ threads ] => { 20 }; > # [ libType ] => { A }; > # [ alignments ] => { SRR3212847.Aligned.SortedByName.bam }; > # [ output ] => { SRR3212847.Aligned.SortedByName }; > Logs will be written to SRR3212847.Aligned.SortedByName/logs; > [2021-01-08 13:02:04.845] [jointLog] [info] setting maxHashResizeThreads to 20; > [2021-01-08 13:02:04.845] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; > Library format { type:paired end, relative orientation:inward, strandedness:unstranded }; > [2021-01-08 13:02:04.878] [jointLog] [info] numQuantThreads = 14; > parseThreads = 6; > Checking that provided alignment files have consistent headers . . . done; > Populating targets from aln = ""SRR3212847.Aligned.SortedByName.bam"", fasta = ""mRNA.fasta"" . . .done; > ; > processed 0 reads in current roundSegmentation fault (core dumped); > ```; > ; > (Which is the same as the 1st error. Actually, each time I re-run those two errors switched.); > ; > I tried running Salmon on the sorted-by-coordinates bam, and it didn't fail:; > ; > ```; > nohup salmon quant \; > -t mRNA.fasta \; > -p 20 \; > -l A \; > -a SRR3212847.Aligned.SortedByCoord.bam \; > -o SRR3212847.Aligned.SortedByCoord \; > > SRR3212847.Aligned.SortedByCoord.out &; > ```; > ; > Even so, `SRR3212847.Aligned.SortedByCoord.out` contained ~3.5GB worth of the warnings above.; > ; > Any help would be much appreciated. Thanks!. hello,i have the same problem,thanks for your answer. Your SRR3212847.Aligned.SortedByCoord.out contained ~3.5GB worth of the warnings above, What is the warning message? And in my log file,the warning as follow:. ![image](https://user-images.githubusercontent.com/45484925/206608510-b5cc88bd-18ac-42eb-bfa1-a5be862b0873.png); Can i ignore these warnings?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1343749456:4503,fault,fault,4503,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1343749456,3,"['error', 'fault']","['error', 'errors', 'fault']"
Availability,"```; Benjamin@u932-ulm-2-57030119-6834 ~ % conda install salmon; Collecting package metadata (current_repodata.json): failed. CondaHTTPError: HTTP 000 CONNECTION FAILED for url <https://conda.anaconda.org/conda-forge/osx-arm64/current_repodata.json>; Elapsed: -. An HTTP error occurred when trying to retrieve this URL.; HTTP errors are often intermittent, and a simple retry will get you on your way.; 'https://conda.anaconda.org/conda-forge/osx-arm64'; ```. ```; Benjamin@u932-ulm-2-57030119-6834 ~ % conda config --show channels; channels:; - conda-forge; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171204474:271,error,error,271,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171204474,4,['error'],"['error', 'errors']"
Availability,actually... `processed 3000000 reads in current round/home/lv70640/c7701100/Projects/ZebraFish/ZebFish.Transcriptome.sh: line 104: 19000 Segmentation fault`. It was better before; F,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394462073:150,fault,fault,150,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394462073,1,['fault'],['fault']
Availability,"against even attempting this is because it doesn't properly address any issue with respect to an actual biological analysis. That is, even if you could fix, precisely, the update order and initialization conditions for a specific sample to eliminate any variation between runs, almost all experiments consist of multiple samples. In other samples, the same transcript fractions could give rise to a slightly different set of observed fragments that induce exactly the same type of variation under uncertainty; and since that uncertainty is baked into the sample, it cannot and should not be removed. Having exact replication of a sample at a numerical threshold below the inferential uncertainty for a transcript conveys false confidence in the precision of the estimate. This is why, for transcript-level analysis, we highly recommend having salmon produce posterior gibbs samples (with the `--numGibbsSamples` flag). This will draw samples from the posterior distribution over the abundance estimates and allow determination of what inferences can be made robustly and what cannot. We have spent a good deal of time thinking about how to properly perform statistical inference on these uncertain quantities, and so I'd point you at [swish](https://bioconductor.org/packages/release/bioc/vignettes/fishpond/inst/doc/swish.html), which is a tool for differential analysis at the transcript level that makes uses of a non-parametric test over the inferential replicates (Gibbs samples) to incorporate uncertainty into the differential analysis. We also developed a tool [terminus](https://academic.oup.com/bioinformatics/article/36/Supplement_1/i102/5870485) that makes use of the Gibbs samples and point estimates of salmon to group together transcripts whose individual abundances cannot be reliably inferred given the fragments in the sample. While the best way to properly assess, propagate and handle uncertainty in transcript-level inference is still, in my opinion, an active area of research in",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/613#issuecomment-757989858:3540,robust,robustly,3540,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/613#issuecomment-757989858,2,['robust'],['robustly']
Availability,"all json files are empty files; When I did the index, it seems there is no error.; ls -lrth *json; -rw-r--r-- 1 yu_liu data-sci ==> 0 <== Jul 13 19:47 header.json; -rw-r--r-- 1 yu_liu data-sci ==>0 <== Jul 13 19:47 refInfo.json; -rw-r--r-- 1 yu_liu data-sci ==>0 <== Jul 13 19:47 versionInfo.json; (base)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/251#issuecomment-404959362:75,error,error,75,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/251#issuecomment-404959362,1,['error'],['error']
Availability,"almon-0.13.1/build && /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/libstadenio.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/build; [ 9%] Performing configure step for 'libstadenio'; cd /Users/gabriel/Projects/salmon-0.13.1/external/staden-io_lib && ./configure --enable-shared=no --without-libcurl --prefix=/Users/gabriel/Projects/salmon-0.13.1/external/install LDFLAGS= CFLAGS= CC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc CXX=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; checking for a BSD-compatible install... /usr/local/bin/ginstall -c; checking whether build environment is sane... yes; checking for a thread-safe mkdir -p... /usr/local/bin/gmkdir -p; checking for gawk... gawk; checking whether make sets $(MAKE)... yes; checking whether make supports nested variables... yes; checking whether to enable maintainer-specific portions of Makefiles... no; checking for gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; checking whether the C compiler works... yes; checking for C compiler default output file name... a.out; checking for suffix of executables...; checking whether we are cross compiling... configure: error: in `/Users/gabriel/Projects/salmon-0.13.1/external/staden-io_lib':; configure: error: cannot run C compiled programs.; If you meant to cross compile, use `--host'.; See `config.log' for more details; make[2]: *** [libstadenio-prefix/src/libstadenio-stamp/libstadenio-configure] Error 1; make[1]: *** [CMakeFiles/libstadenio.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713:3069,error,error,3069,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713,5,"['Error', 'error']","['Error', 'error']"
Availability,"almon_outdir -p 1 --minAssignedFrags 1; died with ret (6) at /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/../../PerlLib/Process_cmd.pm line 19.; Process_cmd::process_cmd(""salmon --no-version-check quant -i /home/federicoplazzi/test_""...) called at /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/salmon_runner.pl line 26; Trinity run failed. Must investigate error above.; warning, cmd: /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/../../Trinity --single ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa"" --output ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out"" --CPU 1 --max_memory 1G --run_as_paired --SS_lib_type F --seqType fa --trinity_complete --full_cleanup failed with ret: 512, going to retry.; succeeded(0), failed(1) 100% completed. We are sorry, commands in file: [FailedCommands] failed. :-(. Error, cmd: /usr/local/trinityrnaseq-Trinity-v2.6.6/trinity-plugins/BIN/ParaFly -c recursive_trinity.cmds -CPU 4 -v -shuffle died with ret 256 at /usr/local/bin/Trinity line 2581.; main::process_cmd(""/usr/local/trinityrnaseq-Trinity-v2.6.6/trinity-plugins/BIN/P""...) called at /usr/local/bin/Trinity line 3244; main::run_partitioned_cmds(""recursive_trinity.cmds"") called at /usr/local/bin/Trinity line 2239; main::run_recursive_trinity(""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/ch""...) called at /usr/local/bin/Trinity line 2001; main::run_chrysalis(""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/in""..., ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/bo""..., 200, 500, ""RF"", ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/bo""..., ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/bo""...) called at /usr/local/bin/Trinity line 1664; main::run_Trinity() called at /usr/local/bin/Trinity line 1317; eval {...} called at /usr/local/bin/Trinity line 1316. Trini",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403:3006,Error,Error,3006,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403,1,['Error'],['Error']
Availability,"alse confidence in the precision of the estimate. This is why, for transcript-level analysis, we highly recommend having salmon produce posterior gibbs samples (with the `--numGibbsSamples` flag). This will draw samples from the posterior distribution over the abundance estimates and allow determination of what inferences can be made robustly and what cannot. We have spent a good deal of time thinking about how to properly perform statistical inference on these uncertain quantities, and so I'd point you at [swish](https://bioconductor.org/packages/release/bioc/vignettes/fishpond/inst/doc/swish.html), which is a tool for differential analysis at the transcript level that makes uses of a non-parametric test over the inferential replicates (Gibbs samples) to incorporate uncertainty into the differential analysis. We also developed a tool [terminus](https://academic.oup.com/bioinformatics/article/36/Supplement_1/i102/5870485) that makes use of the Gibbs samples and point estimates of salmon to group together transcripts whose individual abundances cannot be reliably inferred given the fragments in the sample. While the best way to properly assess, propagate and handle uncertainty in transcript-level inference is still, in my opinion, an active area of research in the field, these are some solutions we've come up with to address this challenge so far. And while, as a computer scientist myself, I _certainly_ appreciate the desire to be able to have e.g. exactly the same numerical output for a particular sample, we feel that doing so might convey a false sense of certainty in the resulting estimates (and it would also be very difficult to do, technically, given the streaming asynchronous phase of the method). This also means, of course, that you should be wary of the precision between runs even for methods that produce their estimates in 100% deterministic ways (e.g. RSEM, etc.); you may get identical or near identical numbers, but without an estimate of the uncertainty, th",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/613#issuecomment-757989858:4274,reliab,reliably,4274,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/613#issuecomment-757989858,2,['reliab'],['reliably']
Availability,"atible with the appropriate strand type (which may be unstranded if that is the protocol). Salmon is pretty conservative about reporting when there is any ambiguity. By default, if the strand bias is stronger than a few percent. In a stranded protocol, it will report and if it infers more than a few percent of fragments no having a valid alignment. So you can always double-check samples where the strandedness is at all ambiguous. > In addition, if a transcript was aligned in a unstranded manner and ended up aligning to the wrong location due to ambiguity between the positive orientation of one transcript and the negative orientation of another, can salmon correct this by reassigning it to the right transcript based on the joint probability of all the other alignments (if you can't tell I'm at the edge of my BS zone)?. If there is not an alignment to the correct location _in addition to_ the wrong location, then no. If you run salmon in alignment mode, it will assign each fragment probabilistically to the set of transcripts to which it aligns. There is, by definition, a probability of 0 for a fragment being assigned to a location where it doesn't align. That is, the reported alignment positions should contain the true alignment. STAR is pretty good at reporting all equally good alignments, but you could see some corner cases (e.g. if there is an alignment to a pseudogene location that looks _very_ similar to a gene, etc.). However, these are the issues that arise due to the inherent difficulty of spliced alignment. Salmon's built-in [selective alignment](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-02151-8) is quite sensitive, but if you're using the STAR alignments for other tasks apart from transcript quantification, it may not be worth it to align the reads twice. Overall, STAR unstranded (using the `--quantMode TranscriptomeSAM`) -> salmon with `-l A` and then checking samples where there are any warnings should be a pretty robust pipeline.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/590#issuecomment-733417813:2815,robust,robust,2815,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/590#issuecomment-733417813,1,['robust'],['robust']
Availability,"bb/2020.5-CentOS-vanilla/lib/libtbb.so -lgomp /usr/lib64/libjemalloc.so -lrt ../external/pufferfish/src/libksw2pp.a libalevin_core.a -ldl -pthread ; /tmp/cc91ASWS.ltrans1.ltrans.o: In function `boost::iostreams::basic_gzip_compressor<std::allocator<char> >::basic_gzip_compressor(boost::iostreams::gzip_params const&, long) [clone .constprop.783]':; <artificial>:(.text+0xdca4): undefined reference to `boost::iostreams::detail::zlib_base::zlib_base()'; <artificial>:(.text+0xdcbc): undefined reference to `boost::iostreams::detail::zlib_base::do_init(boost::iostreams::zlib_params const&, bool, void* (*)(void*, unsigned int, unsigned int), void (*)(void*, void*), void*)'; <artificial>:(.text+0xddc8): undefined reference to `boost::iostreams::zlib::best_compression'; <artificial>:(.text+0xddd4): undefined reference to `boost::iostreams::zlib::best_speed'; /tmp/cc91ASWS.ltrans1.ltrans.o: In function `GZipWriter::writeMtx(std::shared_ptr<spdlog::logger>&, boost::filesystem::path&, unsigned long, unsigned long, unsigned long) [clone .constprop.780]':; <artificial>:(.text+0xe056): undefined reference to `boost::iostreams::zlib::default_strategy'; <artificial>:(.text+0xe05d): undefined reference to `boost::iostreams::zlib::deflated'; <artificial>:(.text+0xe2d1): undefined reference to `boost::filesystem::detail::status(boost::filesystem::path const&, boost::system::error_code*)'; ...; ```. The boost related errors go on forever. There is nothing about ""boost"" in that command line, so apparently the relevant pieces never made it into the makefile. Running that very long command line with this added on the end:. ```; -L/usr/lib64/boost169 -lboost_filesystem -lboost_system -lboost_program_options -lboost_iostreams; ```; ; let Salmon link (with no other warnings). The resulting binary will do; ""salmon -h"" correctly but has so far not been tested further. So, in short CMakeLists.txt's handling of boost is still badly broken on CentOS, 8 this time, but it was terrible on 7 and 6 too.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641531162:4031,error,errors,4031,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641531162,1,['error'],['errors']
Availability,"bioconda) gave me this error:. ```; In file included from /usr/local/salmon-0.10.2/include/eigen3/Eigen/Core:420:0,; from /usr/local/salmon-0.10.2/include/eigen3/Eigen/Dense:1,; from /usr/local/salmon-0.10.2/include/SalmonUtils.hpp:21,; from /usr/local/salmon-0.10.2/include/ReadPair.hpp:7,; from /usr/local/salmon-0.10.2/include/AlignmentGroup.hpp:15,; from /usr/local/salmon-0.10.2/include/AlignmentLibrary.hpp:12,; from /usr/local/salmon-0.10.2/src/SalmonQuantifyAlignments.cpp:39:; /usr/local/salmon-0.10.2/include/eigen3/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]; MaySliceVectorize = bool(MightVectorize) && bool(DstHasDirectAccess); ^~~~~~~~~~~~~~~~~~~~~~~~; At global scope:; cc1plus: warning: unrecognized command line option ‘-Wno-unused-local-typedef’; cc1plus: warning: unrecognized command line option ‘-Wno-unused-local-typedef’; make[2]: *** [src/CMakeFiles/salmon.dir/SalmonQuantifyAlignments.cpp.o] Error 1; make[1]: *** [src/CMakeFiles/salmon.dir/all] Error 2; make: *** [all] Error 2; ```. I also tried installing it through bioconda. Apparently, it installs it correctly, but when I try to use Trinity (I'm installing Salmon as a Trinity requirement) this is what happens: . ```; salmon: /opt/conda/conda-bld/salmon_1528409373758/work/salmon-0.10.2/include/eigen3/Eigen/src/Core/util/Memory.h:161: void* Eigen::internal::aligned_malloc(std::size_t): Assertion `(size<16 || (std::size_t(result)%16)==0) && ""System's malloc returned an unaligned pointer. Compile with EIGEN_MALLOC_ALREADY_ALIGNED=0 to fallback to handmade alignd memory allocator.""' failed.; Error, cmd:; salmon --no-version-check quant -i /home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out/Trinity.fasta.tmp.salmon.idx -l U -r /home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out/single.fa -o salmon_outdir -p 1 --minAssignedFrags ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403:1045,Error,Error,1045,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403,1,['Error'],['Error']
Availability,"cho ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 16 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 14:53:43 EDT 2017; **** JHPCE info ****; User: lcollado; Job id: 110316; Job name: step6-salmon_test4.gsk_phaseII; Hostname: compute-067; Task id: ; Version Info: This is the most recent version of Salmon.; ### salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 16 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/R10001_D2B1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/R10001_D2B1WACXX/logs; [1m",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:5127,echo,echo,5127,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['echo'],['echo']
Availability,"cify if you have used QuantSeq FWD or REV. Page 14 of the PDF from the Lexogen Website data analysis pipeline for QuantSeq FWD<https://www.bluebee.com/wp-content/uploads/2018/11/015UG108V0201-QuantSeq-Data-Analysis-Pipeline_2018-10-18.pdf> recommends using the below htseq command line. htseq-count -m intersection-nonempty -s yes -f bam -r pos $bam; $resource_dir/annotation.gtf > $bam_dir/read_counts.txt. QuantSeq is a stranded protocol. For the QuantSeq FWD pipeline the argument -s yes indicates; stranded in the sense orientation. For the QuantSeq REV pipeline -s reverse is used. Similar to the above htseq command line arguments, I think if you are using QuantSeq FWD, the libType argument from salmon quant should have been SF. One way I checked these with my datasets was to run the salmon quant command 3 times - once with libType A, once with libType SF and once with libType SR -- with QuantSeq FWD the estimated counts will be almost same with libType A and libType SF. I echo what @rob-p<https://github.com/rob-p> says - Congratulations once again on the paper. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/COMBINE-lab/salmon/issues/449?email_source=notifications&email_token=AC4A5AGWBAOLTI4MOFLAJNDQYQN7FA5CNFSM4JOIEHZ2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEG3S5HQ#issuecomment-565653150>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AC4A5AFB7EMLYHVLVSHVLBDQYQN7FANCNFSM4JOIEHZQ>. Sample S1. meta_info.json. ""salmon_version"": ""0.9.1"",; ""samp_type"": ""none"",; ""quant_errors"": [],; ""num_libraries"": 1,; ""library_types"": [; ""SR""; ],; ""frag_dist_length"": 1001,; ""seq_bias_correct"": true,; ""gc_bias_correct"": true,; ""num_bias_bins"": 4096,; ""mapping_type"": ""mapping"",; ""num_targets"": 202863,; ""serialized_eq_classes"": false,; ""eq_class_properties"": [],; ""length_classes"": [; 513,; 656,; 1013,; 2240,; 104301; ],; ""index_seq_hash"": ""5734f6acf3be3aa5103c5302b5a0807dd46d217d",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565684552:2505,echo,echo,2505,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565684552,1,['echo'],['echo']
Availability,"cmake produced quite an odd link line with mixed -l/-L and explicit paths, and dynamic and static libraries all intermixed. Here is a small part (expanded for readability):. ```; ../external/pufferfish/external/ntcard/libntcard.a \; -lgff \; /usr/common/modules/el8/x86_64/software/io_lib/1.14.9-CentOS-vanilla/lib/libstaden-read.a \; /usr/lib64/libcurl.so \; /usr/lib64/libz.so \; -lm \; /usr/lib64/liblzma.so \; ```. The distributed binary won't do that command either, but at least it does not crash:; ```. /usr/common/src/salmon-latest_linux_x86_64/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; Version Info: This is the most recent version of salmon.; Exception : [Error: FMD indexing is not supported in this version of salmon.]; /usr/common/src/salmon-latest_linux_x86_64/bin/salmon index was invoked improperly.; For usage information, try /usr/common/src/salmon-latest_linux_x86_64/bin/salmon index --help; Exiting.; #this worked OK; /usr/common/src/salmon-latest_linux_x86_64/bin/salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type puff. ```; Here is what happens in gdb for the version I built:. ```; gdb --args salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; GNU gdb (GDB) Red Hat Enterprise Linux 8.2-6.el8; Copyright (C) 2018 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law.; Type ""show copying"" and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>. For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410:701,Error,Error,701,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/460#issuecomment-641594410,1,['Error'],['Error']
Availability,"coefficient I did mention (pE[0;1]). An implementation of this approach as an option during the transcript quantification would be great. I can provide you with the simple python script I use for the subsampling, but I am not sure if it is the proper way to subsample during alevin quantification. >when you say cellranger subsampling, do you mean the cellranger aggregate pipeline?. Yes, sorry for not clearly stating it. I did use the cellranger aggregate function indeed, which by default subsample the expression matrices with high sequencing depth depending on amount of mapped reads, if I understand well. >Use Alevin w/o any modification to the fastq on both of your sample to generate the gene count matrices. I already did that, in downstream analyses I have a batch effect issue related to the sequencing depth. >that's why we recommend using the Seurat package downstream of the Alevin quantified matrices. I have some experience with downstream analyses with Seurat, Pagoda, Scater, scanpy and a few other tools, and I am aware of batch correction methods like CCA or MNN. But that is not what I am looking for here. I did both CCA and MNN but I loose some important information in the resulting eigenspaces or corrected matrix. I believe the proper way to correct my batch effect is to simply fix the difference between my two libraries, ie. the sequencing depth in this case. As I explained in my first message, cellranger aggregate (subsampling based on the amount of mapped reads) works very well in my case, correct the effect without any loss or modification of important genes in our scientific question. Not CCA or MNN. I would like to be able to do the same from the alevin quantifications. So I am looking for a proper way to apply a correction before/during/after the alevin quantification, in a way similar to what cellranger do with STAR. Alternatively, could a subsampling covariate be added to the probalistic quantification model of alevin (if I understand it well), in sor",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433319913:1258,down,downstream,1258,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433319913,2,['down'],['downstream']
Availability,"d files; to salmon, but you passed 12 files to --mates1 and 13 files to --mates2.; You must pass the same number of files to both flags; Name : male_salmon_map; User : seboles; Partition : high; Nodes : c11-71; Cores : 24; GPUs : 0; State : FAILED; Submit : 2019-07-29T14:31:01; Start : 2019-07-29T14:31:02; End : 2019-07-29T14:31:13; Reserved walltime : 6-06:00:00; Used walltime : 00:00:11; Used CPU time : 00:00:09; % User (Computation): 54.66%; % System (I/O) : 45.33%; Mem reserved : 2000M/core; Max Mem used : 0.00 (c11-71); Max Disk Write : 0.00 (c11-71); Max Disk Read : 0.00 (c11-71)```. I have gone back and checked the directory containing the PE reads, and; they are all accounted for, so I am a little stumped at the moment. I; appreciate any advice you may have. Happy Monday,. Sara. On Wed, Jul 24, 2019 at 3:04 PM Rob Patro <notifications@github.com> wrote:. > Hi @seboles <https://github.com/seboles> ,; >; > My guess is that the issue is related to this (non-salmon) error appearing; > before each salmon output:; >; > basename: extra operand ‘lightreceptor-1_S114_L005_R1_001.qc.fq.gz’; >; > Try 'basename --help' for more information.; >; >; > it looks like there is an error in the way the paths to the files are; > being provided for the jobs, which is resulting in an incorrect command; > line being provided to salmon (and the index not being properly located).; > It's also of note that this is on the command line:; >; > -1 *R1_001.qc.fq.gz -2 R2_001.qc.fq.gz; >; >; > which is trying to expand a wildcard before read 1 but not read 2; is that; > intended?; >; > Any idea what the output is if you run:; >; > #!/bin/bash -l; >; > #SBATCH -J male_salmon_map; >; > #SBATCH -t 700:00:00; >; > #SBATCH -p high; >; > #SBATCH --cpus-per-task=24; >; > source ~/.bashrc; >; > source activate salmon; >; > cd /home/seboles/abaloneraw/salmon_quantification/salmon_male/abalone_orfs/; >; > ls -la salmon_index; >; >; > —; > You are receiving this because you were mentioned.; > Reply t",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516173395:1756,error,error,1756,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516173395,1,['error'],['error']
Availability,"d2.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 4.6G Feb 20 12:42 merged_fastq/R10002_C29P7ACXX.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 4.7G Feb 20 12:44 merged_fastq/R10002_C29P7ACXX_read2.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 7.1G Feb 20 12:47 merged_fastq/R10003_D19KGACXX.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 7.1G Feb 20 12:50 merged_fastq/R10003_D19KGACXX_read2.fastq.gz; ```. where R10001* is task 1, R10002* is task 2, R10003* is task 3. So it looks like at some point Salmon is asking for some memory based on the input data. ## Strace test with low memory (but above reported usage when requesting 90GB). Mark taught me about `strace` and we ran the following test:. ```bash; #!/bin/bash; #$ -cwd; #$ -pe local 2; #$ -l mem_free=7G,h_vmem=8G,h_fsize=100G; #$ -N step6-salmon_test11.gsk_phaseII; #$ -o ./logs/salmon_test11.$TASK_ID.txt; #$ -e ./logs/salmon_test11.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test11/${ID}. strace /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/s",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:2601,echo,echo,2601,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['echo'],['echo']
Availability,"de.v25.transcripts -p 1 -l ISR -1 ${FILE1} -2 ${FILE2} -o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}; **** Job ends ****; Wed Mar 29 14:51:13 EDT 2017; ```. ### SGE email info example. ```; Job-array task 110315.1 (step6-salmon_test3.gsk_phaseII) Complete; User = lcollado; Queue = shared.q@compute-061.cm.cluster; Host = compute-061.cm.cluster; Start Time = 03/29/2017 14:51:09; End Time = 03/29/2017 14:51:13; User Time = 00:00:00; System Time = 00:00:02; Wallclock Time = 00:00:04; CPU = 00:00:02; Max vmem = 14.820G; Exit Status = 0; ```. ## 16 cores. ### Bash. ```bash; #!/bin/bash; #$ -cwd; #$ -l mem_free=2G,h_vmem=3G,h_fsize=100G; #$ -N step6-salmon_test4.gsk_phaseII; #$ -pe local 16; #$ -o ./logs/salmon_test4.$TASK_ID.txt; #$ -e ./logs/salmon_test4.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 16 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 1",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:4144,echo,echo,4144,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,6,['echo'],['echo']
Availability,"e code for the v3 sample that ran without generating error messages:. ```; ID=5k_pbmc_v3. R1a=../Reads/5k_pbmc_v3_S1_L001_R1_001.fastq.gz; R1b=../Reads/5k_pbmc_v3_S1_L002_R1_001.fastq.gz; R1c=../Reads/5k_pbmc_v3_S1_L003_R1_001.fastq.gz; R1d=../Reads/5k_pbmc_v3_S1_L004_R1_001.fastq.gz. R2a=../Reads/5k_pbmc_v3_S1_L001_R2_001.fastq.gz; R2b=../Reads/5k_pbmc_v3_S1_L002_R2_001.fastq.gz; R2c=../Reads/5k_pbmc_v3_S1_L003_R2_001.fastq.gz; R2d=../Reads/5k_pbmc_v3_S1_L004_R2_001.fastq.gz. TYPE=10xV3; #for MAP, download from UCSC Table Browser, and remove 1st line (and then manually add SARS-COV-2 genes); MAP=../../Ref_Generation/SARS_COV_2-hg38_RefSeq_2column.txt; REF=../../Ref_Generation/SARS_COV_2-hg38_salmon; CBWL=/net/isi-dcnl/ifs/user_data/Seq/Chromium_data/3M-february-2018.txt. ../../Ref_Generation/salmon-1.5.1_linux_x86_64/bin/salmon alevin -l ISR --chromium -1 $R1a $R1b $R1c $R1d -2 $R2a $R2b $R2c $R2d -i $REF -p 4 -o $ID --tgMap $MAP --whitelist $CBWL; ```. That v3 white list is even **larger** than the v2 white list:. ```; cwarden$ wc -l /net/isi-dcnl/ifs/user_data/Seq/Chromium_data/3M-february-2018.txt; 6794880 /net/isi-dcnl/ifs/user_data/Seq/Chromium_data/3M-february-2018.txt; ```. So, that is part of why I was confused. However, before I start running the analysis with the shorter set of barcodes unique for this sample, here are the commands that I believe you were asking about. ```; cwarden$ wc -l ../CellRanger/5309-CT-2/outs/raw_feature_bc_matrix/barcodes.tsv; 737280 ../CellRanger/5309-CT-2/outs/raw_feature_bc_matrix/barcodes.tsv; cwarden$ wc -l ../CellRanger/5309-CT-2/outs/filtered_feature_bc_matrix/barcodes.tsv; 9974 ../CellRanger/5309-CT-2/outs/filtered_feature_bc_matrix/barcodes.tsv; ```. I would prefer to have an option where I could potentially conclude the cell count is different than provided by CellRanger. . However, I will at least check to confirm this solves the problem with the error message that I am seeing (with the much smaller cell barcode list).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-879347665:1973,error,error,1973,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-879347665,1,['error'],['error']
Availability,"e most recent version of salmon.; > # salmon (alignment-based) v1.4.0; > # [ program ] => salmon ; > # [ command ] => quant ; > # [ targets ] => { mRNA.fasta }; > # [ threads ] => { 20 }; > # [ libType ] => { A }; > # [ alignments ] => { SRR3212847.Aligned.Shuffled.bam }; > # [ output ] => { SRR3212847.Aligned.Shuffled }; > Logs will be written to SRR3212847.Aligned.Shuffled/logs; > [2021-01-08 12:43:44.680] [jointLog] [info] setting maxHashResizeThreads to 20; > [2021-01-08 12:43:44.680] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; > Library format { type:paired end, relative orientation:inward, strandedness:unstranded }; > [2021-01-08 12:43:44.711] [jointLog] [info] numQuantThreads = 14; > parseThreads = 6; > Checking that provided alignment files have consistent headers . . . done; > Populating targets from aln = ""SRR3212847.Aligned.Shuffled.bam"", fasta = ""mRNA.fasta"" . . .done; > ; > processed 0 reads in current roundSegmentation fault (core dumped); > ```; > ; > ### 2. Shuffling a headless bam file with `samtools collate`; > (I think I saw something about the bam's header in another thread dealing with this issue); > ; > ```; > samtools view \; > -b \; > -@ 40 \; > -o SRR3212847.Aligned.SortedByCoord.NoHeader.bam \; > SRR3212847.Aligned.SortedByCoord.bam; > ; > samtools collate \; > -@ 40 \; > -o SRR3212847.Aligned.Shuffled.NoHeader.bam \; > SRR3212847.Aligned.SortedByCoord.NoHeader.bam; > ; > salmon quant \; > -t mRNA.fasta \; > -p 20 \; > -l A \; > -a SRR3212847.Aligned.Shuffled.NoHeader.bam \; > -o SRR3212847.Aligned.Shuffled.NoHeader; > ```; > ; > ```; > ; > ....; > ; > ; > [2021-01-08 12:42:10.700] [jointLog] [warning] ; > ; > WARNING: Detected suspicious pair --- ; > The names are different:; > read1 : SRR3212847.24133171; > read2 : SRR3212847.33911054; > The proper-pair statuses are inconsistent:; > read1 [SRR3212847.24133171] : no proper-pair; not mapped; matenot mapped; > ; > read2 : [SRR3212",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1343749456:1836,fault,fault,1836,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1343749456,1,['fault'],['fault']
Availability,"e next, even on the same data file. . I appreciate any help you can offer and I apologize in advance if there's something obvious I should have read or known about. (it seems like the lines below that are preceded by ### are coming out in fold face. They are not meant to.). (salmon) MacBook-Pro-2:salmon-tutorial brent$ bash quant_tut_samples.sh; Processing sample DRR016125; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; ### salmon (mapping-based) v0.11.3; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { athal_index }; ### [ libType ] => { A }; ### [ mates1 ] => { data/DRR016125/DRR016125_1.fastq.gz }; ### [ mates2 ] => { data/DRR016125/DRR016125_2.fastq.gz }; ### [ threads ] => { 8 }; ### [ output ] => { quants/DRR016125_quant }; Logs will be written to quants/DRR016125_quant/logs; [2018-11-24 15:08:09.785] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-11-24 15:08:09.785] [jointLog] [info] parsing read library format; [2018-11-24 15:08:09.785] [jointLog] [info] There is 1 library.; [2018-11-24 15:08:09.877] [jointLog] [info] Loading Quasi index; [2018-11-24 15:08:09.877] [jointLog] [info] Loading 32-bit quasi index; [2018-11-24 15:08:09.877] [stderrLog] [info] Loading Suffix Array ; [2018-11-24 15:08:10.319] [stderrLog] [info] Loading Transcript Info ; [2018-11-24 15:08:10.423] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-11-24 15:08:10.432] [stderrLog] [info] There were 40,812 set bits in the bit array; [2018-11-24 15:08:10.435] [stderrLog] [info] Computing transcript lengths; [2018-11-24 15:08:10.435] [stderrLog] [info] Waiting to finish loading hash. quant_tut_samples.sh: line 2: 914 Segmentation fault: 11 salmon quant -i athal_index -l A -1 ${fn}/${samp}_1.fastq.gz -2 ${fn}/${samp}_2.fastq.gz -p 8 -o quants/${samp}_quant; (salmon) MacBook-Pro-2:salmon-tutorial brent$",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/317#issuecomment-441396828:2268,fault,fault,2268,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/317#issuecomment-441396828,1,['fault'],['fault']
Availability,"e result is that for transcripts that have large inferential uncertainty, different numbers of reads can be assigned between runs. We have thought *a lot* about this behavior, what it means, and how the `NumRead` values should best be communicated to users. At the end of the day, the `NumReads` constitute the expected value of latent variables inferred in a _very_ high-dimensional space (# of parameters is at least the number of transcripts). Therefore, there are certain transcripts, whose estimated number of reads simply have _tremendous_ inferential uncertainty — and small perturbations in the initial conditions of the optimization will lead to different estimated values for their abundances. For those transcripts where you observe such fluctuations between runs, this is simply evidence that the precision that can be confidently placed on those estimates is below the degree of variation you observe. Treating these transcripts in downstream analysis as more certain can easily lead to spurious inferences regarding things like differential transcript expression or usage. . One can make an argument for trying to provide a way to enforce removal of this variation (which, granted, would be a challenge). However, the reason we decided against even attempting this is because it doesn't properly address any issue with respect to an actual biological analysis. That is, even if you could fix, precisely, the update order and initialization conditions for a specific sample to eliminate any variation between runs, almost all experiments consist of multiple samples. In other samples, the same transcript fractions could give rise to a slightly different set of observed fragments that induce exactly the same type of variation under uncertainty; and since that uncertainty is baked into the sample, it cannot and should not be removed. Having exact replication of a sample at a numerical threshold below the inferential uncertainty for a transcript conveys false confidence in the preci",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/613#issuecomment-757989858:2177,down,downstream,2177,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/613#issuecomment-757989858,2,['down'],['downstream']
Availability,"e/RnaSeq/fastq/DM_4c_H_1.fq.gz ; -2 /home/RnaSeq/fastq/DM_4a_H_2.fq.gz /home/RnaSeq/fastq/DM_4b_H_2.fq.gz /home/RnaSeq/fastq/DM_4c_H_2.fq.gz ; -o /home/RnaSeq/salmon_output_files/out/DM4h; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; ### salmon (mapping-based) v0.14.1; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/combined_index }; ### [ libType ] => { IU }; ### [ mates1 ] => { /home/RnaSeq/fastq/DM_4a_H_1.fq.gz /home/RnaSeq/fastq/DM_4b_H_1.fq.gz /home/RnaSeq/fastq/DM_4c_H_1.fq.gz }; ### [ mates2 ] => { /home/RnaSeq/fastq/DM_4a_H_2.fq.gz /home/RnaSeq/fastq/DM_4b_H_2.fq.gz /home/RnaSeq/fastq/DM_4c_H_2.fq.gz }; ### [ validateMappings ] => { }; ### [ output ] => { /home/RnaSeq/salmon_output_files/out/DM4h }; Logs will be written to /home/RnaSeq/salmon_output_files/out/DM4h/logs; [2019-07-01 12:51:42.856] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-07-01 12:51:42.856] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-07-01 12:51:42.856] [jointLog] [info] Usage of --validateMappings, without --hardFilter implies use of range factorization. rangeFactorizationBins is being set to 4; [2019-07-01 12:51:42.856] [jointLog] [info] Usage of --validateMappings implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-07-01 12:51:42.856] [jointLog] [info] parsing read library format; [2019-07-01 12:51:42.856] [jointLog] [info] There is 1 library.; Exception : [Error: The index version file /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/combined_index/versionInfo.json doesn't seem to exist. Please try re-building the salmon index.]; salmon quant was invoked improperly. Any ideas what I'm doing wrong please?. Thanks",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/389#issuecomment-507253562:3781,Error,Error,3781,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/389#issuecomment-507253562,1,['Error'],['Error']
Availability,"eader in another thread dealing with this issue); ```; samtools view \; -b \; -@ 40 \; -o SRR3212847.Aligned.SortedByCoord.NoHeader.bam \; SRR3212847.Aligned.SortedByCoord.bam. samtools collate \; -@ 40 \; -o SRR3212847.Aligned.Shuffled.NoHeader.bam \; SRR3212847.Aligned.SortedByCoord.NoHeader.bam. salmon quant \; -t mRNA.fasta \; -p 20 \; -l A \; -a SRR3212847.Aligned.Shuffled.NoHeader.bam \; -o SRR3212847.Aligned.Shuffled.NoHeader; ```. ```. .... [2021-01-08 12:42:10.700] [jointLog] [warning] . WARNING: Detected suspicious pair --- ; The names are different:; read1 : SRR3212847.24133171; read2 : SRR3212847.33911054; The proper-pair statuses are inconsistent:; read1 [SRR3212847.24133171] : no proper-pair; not mapped; matenot mapped. read2 : [SRR3212847.24133171] : proper-pair; mapped; matemapped. [2021-01-08 12:42:10.700] [jointLog] [warning] . WARNING: Detected suspicious pair --- ; The names are different:; read1 : SRR3212847.33911054; read2 : SRR3212847.30781941. Segmentation fault (core dumped); ```. ### 3. Sorting with `samtools sort -n`; ```; samtools sort \; -@ 40 \; -n \; -o SRR3212847.Aligned.SortedByName.bam \; SRR3212847.Aligned.SortedByCoord.bam. salmon quant \; -t mRNA.fasta \; -p 20 \; -l A \; -a SRR3212847.Aligned.SortedByName.bam \; -o SRR3212847.Aligned.SortedByName; ```. ```; Version Info: This is the most recent version of salmon.; # salmon (alignment-based) v1.4.0; # [ program ] => salmon ; # [ command ] => quant ; # [ targets ] => { mRNA.fasta }; # [ threads ] => { 20 }; # [ libType ] => { A }; # [ alignments ] => { SRR3212847.Aligned.SortedByName.bam }; # [ output ] => { SRR3212847.Aligned.SortedByName }; Logs will be written to SRR3212847.Aligned.SortedByName/logs; [2021-01-08 13:02:04.845] [jointLog] [info] setting maxHashResizeThreads to 20; [2021-01-08 13:02:04.845] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; Library format { type:paired end, relative orientation:inward, strande",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-756727212:2859,fault,fault,2859,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-756727212,1,['fault'],['fault']
Availability,"eads unmapped: too many mismatches | 0.00%; % of reads unmapped: too short | 8.07%; % of reads unmapped: other | 0.12%; CHIMERIC READS:; Number of chimeric reads | 0; % of chimeric reads | 0.00%; ```. *yet, only `9,310,303` reads* were determined by STAR to project properly to annotated transcripts (slightly _less_ than are mapped to the transcriptome by salmon, at least without the decoy sequence included). So, there is a very high fraction of the reads that align to the genome, but a much smaller fraction ~45%-50% that align to the transcriptome. There are many reasons something like this could happen, but it suggests that there are a lot of reads being generated from outside of annotated transcripts. This could be a mix of novel transcripts in this sample (both at entirely novel loci, as well as novel transcripts within annotated loci), as well as of noisy transcription, unannotated transcribed pseudogenes etc. I took a look at the bigwig generated by this pipeline, and STAR seems to be mapping quite a lot of reads to chr21 as well as to the mitochondrial genome (chrM). However, as evidenced by the fact that neither salmon using selective-alignment (and mapping to the transcriptome) nor the STAR->salmon pipeline see these reads mapping to annotated transcripts they must be arising from outside of these regions. There are a few option in this case. You could manually investigate where these reads are coming from by aligning them with e.g. STAR and inspecting the BAM files. Alternatively, you could attempt to assemble novel transcripts (e.g. using StringTie or Scallop) and then add them to the transcriptome for quantification. However, it does seem that getting down to the bottom of the relatively low mapping rate to the annotated transcriptome, in light of the relatively high mapping rate to the whole genome, but outside of annotated transcripts, may require a bit more digging. I'm happy to answer any other specific questions that might arise if you dig into this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/603#issuecomment-745768992:3091,down,down,3091,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/603#issuecomment-745768992,1,['down'],['down']
Availability,"echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 14:51:10 EDT 2017; **** JHPCE info ****; User: lcollado; Job id: 110315; Job name: step6-salmon_test3.gsk_phaseII; Hostname: compute-061; Task id: ; Version Info: This is the most recent version of Salmon.; ### salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/R10001_D2B1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/R10001_D2B1WACXX/logs; [1m[",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:1718,echo,echo,1718,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['echo'],['echo']
Availability,"echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 23:27:11 EDT 2017; **** JHPCE info ****; User: lcollado; Job id: 110632; Job name: step6-salmon_test5.gsk_phaseII; Hostname: compute-066; Task id: ; Version Info: This is the most recent version of Salmon.; ### salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/R10001_D2B1WACXX/logs; [1m[",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:8633,echo,echo,8633,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['echo'],['echo']
Availability,"eports to be valid with respect to the annotated transcriptome. I am guessing that many alignments overhang the end of the annotated transcripts, and so STAR does not project them to the transcriptome and so salmon cannot count them. **In mapping mode**, the nf-core pipeline makes use of salmon's selective-alignment _with decoy sequences_. The main purpose of this is to avoid spurious mapping to transcriptomic sequences that may be similar to other unannotated sequences in the genome that are nonetheless a better match for the read (e.g. an unannotated possibly transcribed pseudogene). The way this works in practice is that both the transcript sequences themselves *and the full genome* are indexed. Any read that aligns _strictly better_ to the genome than the transcriptome is considered to map to a decoy, and is not used for the purposes of quantification. Consistent with the behavior I hypothesized above for STAR, if you have many softclipped bases at the end of the read that nonetheless match what is in the genome downstream of the end of the annotated transcript, you'll likely see these reads assigned as decoys. To check this, you can look at salmon's `meta_info.json` output file to see how many reads were mapped best to decoys. * Why do I see much higher counts for this gene with FeatureCounts?. * It depends on the specific behavior you invoke. However, my guess is that FeatureCounts is being run with flags such that reads that only somewhat overlap a feature are nonetheless assigned to it. This suggests that while no good alignment may actually exist to the annotated transcript, FeatureCounts is still assigning the read to that feature because it overlaps it to some degree and matches the corresponding location on the genome. Again, you can test this by changing the required overlap fraction of FeatureCounts. * Why does running salmon outside of nf-core produce much higher counts?. * Since you are indexing *just* the transcriptome, and not including the genome ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1237133883:1883,down,downstream,1883,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1237133883,1,['down'],['downstream']
Availability,"es. Those jobs are still running (it's only been about 4hrs as of this writing, I'll update my post if/when they complete). Current logs are showing that they quickly consume all the available memory, but have not yet crashed. I've also got versions with 128-512GB of memory requested (by powers of 2) for comparison. Some random notes: both the 31-mer index experienced about twice as many soft page reclaims with the new/faster version and experienced a few hard page faults (the previous version saw none of the latter). The 17-mer version experienced fewer page reclaims than any of the 31-mer indices and far fewer than with the prior version. Again, a few page faults crept in, but relatively few by percentage and likely not contributing any significant amount of time overall. [index-qacct-17mer.log](https://github.com/COMBINE-lab/salmon/files/4246516/index-qacct-17mer.log); [index-qacct-31mer.log](https://github.com/COMBINE-lab/salmon/files/4246517/index-qacct-31mer.log). **UPDATE**; The 16GB version finished running. It actually only took a little over 4 hours to run, as well. The troubling thing about this job seems to be that, despite having successfully completed, according to the accounting log it used over 20GB of memory... which should be impossible to do. Our resident experts suspect there's a race condition occurring at the tail end of the job and that all of that extra memory is being allocated before the scheduler can kill it for exceeding the limit. Whatever the case, though, this throws into question some of those numbers that I've been grabbing from the accounting logs --- it's either being misreported, or the memory gobbling is happening so rapidly that it may not, in fact, be being properly recorded. I tested the index anyway. It *appears* to be working just fine. Nothing faulted or crashed when I attempted to quantify some reads against it. [index-qacct-17mer-16gigs.log](https://github.com/COMBINE-lab/salmon/files/4247214/index-qacct-17mer-16gigs.log)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590516702:2626,fault,faulted,2626,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590516702,1,['fault'],['faulted']
Availability,"experts tell me that you just need to be darned sure that conda-forge is a high priority channel, above bioconda, as [per instructions](https://bioconda.github.io/user/install.html#set-up-channels); that specifying multiple channels with `-c` explicitly is poor practice because it's so error prone; and that if I'm teaching people that, I'm a bad teacher. :). I'll look at the salmon documentation to make sure it's accurately represented there and then close this issue.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/480#issuecomment-579842099:287,error,error,287,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/480#issuecomment-579842099,1,['error'],['error']
Availability,"ext+0x475): undefined reference to `nghttp2_version'; /usr/bin/ld: /usr/lib/x86_64-linux-gnu/libcurl.a(libcurl_gnutls_la-libssh2.o): in function `ssh_attach':; (.text+0x3e1): undefined reference to `libssh2_session_abstract'; /usr/bin/ld: /usr/lib/x86_64-linux-gnu/libcurl.a(libcurl_gnutls_la-libssh2.o): in function `ssh_statemach_act':; (.text+0x4b1): undefined reference to `libssh2_session_set_blocking'; /usr/bin/ld: (.text+0x4fb): undefined reference to `libssh2_session_handshake'; /usr/bin/ld: (.text+0x58d): undefined reference to `libssh2_hostkey_hash'; /usr/bin/ld: (.text+0x6a0): undefined reference to `libssh2_hostkey_hash'; /usr/bin/ld: (.text+0x75d): undefined reference to `libssh2_knownhost_free'; ... So somehow this does not build - but I have the impression that the linker issues are caused by some missing CMAKE options (as well as using the build directory). Thus I used the cmake command line as its used in the Debian packaging:. $ docker pull debian:testing; $ docker run -it debian:testing; $ echo ""deb-src http://deb.debian.org/debian unstable main"" > /etc/apt/sources.list.d/10-debsrc.list; $ apt update; $ apt upgrade; $ apt build-dep salmon; $ wget https://github.com/COMBINE-lab/salmon/archive/refs/tags/v1.10.0.tar.gz; $ tar xaf v1.10.0.tar.gz; $ cd salmon-1.10.0; $ cmake -DCMAKE_BUILD_TYPE=Release -DUSE_SHARED_LIBS=TRUE -DBZIP2_LIBRARIES=-lbz2 -DBZIP2_INCLUDE_DIR=/usr/include -DLIBLZMA_INCLUDE_DIR=/usr/include/ -DLIBLZMA_LIBRARY=lzma -DCMAKE_MODULE_PATH=/usr/share/cmake/Modules -DTBB_WILL_RECONFIGURE=FALSE -DBOOST_WILL_RECONFIGURE=FALSE; $ make; $ tar xaf sample_data.tgz; # src/salmon index -t sample_data/transcripts.fasta -i sample_salmon_quasi_index; Version Info: This is the most recent version of salmon.; index [""sample_salmon_quasi_index""] did not previously exist . . . creating it; [2023-03-10 11:56:01.434] [jLog] [warning] The salmon index is being built without any decoy sequences. It is recommended that decoy sequence (either computed auxiliar",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463708855:3169,echo,echo,3169,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463708855,1,['echo'],['echo']
Availability,"files were extracted from the SRA experiment with [fastq-dump](https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=toolkit_doc&f=fastq-dump).; - Reads were aligned with STAR to the index and `unsorted` alignments to the transcriptome were returned (this keeps the paired-ends next to each other). I noticed that the cDNA FASTA files from ensembl include the transcript version, e.g. `ENSMUST00000178537.1` in the FASTA header. The GTF file specifies the transcript id and its version in different fields. Therefore, the STAR index does not include the version suffix. Instead, only the transcript ids are listed, e.g. `ENSMUST00000178537`. To provide a FASTA file with transcript identifiers that match those in STAR's BAM file, I pre-processed Ensembl's FASTA file with the following command:. ```; wget ftp://ftp.ensembl.org/pub/release-86/fasta/mus_musculus/cdna/Mus_musculus.GRCm38.cdna.all.fa.gz; gunzip Mus_musculus.GRCm38.cdna.all.fa.gz; cut -f1 -d ""."" Mus_musculus.GRCm38.cdna.all.fa > transcripts_unversioned.fa. head transcripts_unversioned.fa; >ENSMUST00000178537; GGGACAGGGGGC; >ENSMUST00000178862; GGGACTGGGGGGGC; >ENSMUST00000196221; ATGGCATAT; >ENSMUST00000179664; ATGGCATATCA; >ENSMUST00000177564; ATCGGAGGGATACGAG; [truncated]; ```. Then I try to run `salmon`:. ```; wget ftp://ftp.ensembl.org/pub/release-86/gtf/mus_musculus/Mus_musculus.GRCm38.86.gtf.gz; gunzip Mus_musculus.GRCm38.86.gtf.gz; salmon quant -t transcripts_unversioned.fa -g Mus_musculus.GRCm38.86.gtf -l IU -p 1 -o quantitation -a subsample.bam --seqBias --gcBias; ```. but get the segmentation fault. Omitting the `--seqBias --gcBias` options makes it work. Perhaps you can already spot where I am doing something wrong? If not, you can find the subsample.bam file [here](https://drive.google.com/open?id=0BzX9viKJksNtak0xako0VXptLW8). (The other files are publically available, as shown above.). Does that help? Please let me know if there is anything I can do to help you understand this better.; Best,; Thomas",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-261744459:2638,fault,fault,2638,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-261744459,2,"['avail', 'fault']","['available', 'fault']"
Availability,"g from one of my PE libraries. There are only 12; libraries for each in the directory, which is why I got confused when it; said 13. I will try putting in all of the file names and let you know how; it goes. Thank you for all of your help. Sara. [2019-07-29 15:58:39.034] [jointLog] [info] Fragment incompatibility prior; below threshold. Incompatible fragments will be ignored.; [2019-07-29 15:58:39.034] [jointLog] [info] Usage of --validateMappings; implies use of minScoreFraction. Since not explicitly specified, it is; being set to 0.65; [2019-07-29 15:58:39.034] [jointLog] [info] Usage of --validateMappings,; without --hardFilter implies use of range factorization.; rangeFactorizationBins is being set to 4; [2019-07-29 15:58:39.034] [jointLog] [info] Usage of --validateMappings; implies a default consensus slack of 0.2. Setting consensusSlack to 0.2.; [2019-07-29 15:58:39.034] [jointLog] [info] parsing read library format; [2019-07-29 15:58:39.034] [jointLog] [error] Failed to successfully parse; any complete read libraries. Please make sure you provided arguments; properly to -1, -2 (for paired-end libraries) or -r (for single-end; libraries), and that the library format option (-l) *comes before* the read; libraries. On Mon, Jul 29, 2019 at 4:06 PM Avi Srivastava <notifications@github.com>; wrote:. > Oh Sorry about that what I meant was the salmon.log file or the the; > meta-info.json file created by salmon in the output directory. You can; > check what files salmon is detecting it seems there are 12 files in the; > mate1 and 13 files in the mate2. Can you confirm there are 13 pairs of file; > in that directory and their regex is same as you are using ? Can you also; > try putting the names of the file instead * as regex ?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/408?email_source=notifications&email_token=AEHDXAA5DHKAZKVCZY5N7ULQB5ZXXA5CNFSM4IG",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516514620:1006,error,error,1006,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/408#issuecomment-516514620,1,['error'],['error']
Availability,"h is in the `aux_info` subdirectory of the quantification directory for a sample), you can see how many mappings are being discarded by virtue of being dovetail mappings. It is possible to allow such alignments (consider them as concordant) by passing the `--allowDovetail` flag. It is not the case that such alignments are always ""bad"", its simply that one would not expect many fragments to align in such a way, and if these constitute the overwhelming majority of the mappings, one might be suspicious about the underlying data. * Selective alignment actually _aligns_ the reads to the transcriptome. For this purpose, it performs end-to-end alignment. This means that if you suspect that the sample may contain adapters or very low-quality read ends, the reads should be trimmed prior to quantification. It is, therefore, worth checking how the mapping rate changes for some of these samples if the reads are trimmed first. * Selective alignment is more robust than quasi-mapping to the chosen value of `-k`, the minimum match length used when searching for alignments. I noticed that some of the samples contain relatively short reads, so you might see if the mapping rate changes if you adopt a smaller value of `-k` in the index (e.g. we use `23` in the [pre-print](https://www.biorxiv.org/content/10.1101/657874v2.full.pdf)). * You mention that this index doesn't contain any decoy sequence. This of course, should not affect the mapping rate. However, I'd be quite curious to see if you index the reference using the _whole genome_ as decoy (i.e. the SAF method from the pre-print), how many reads are discarded because they map better to a decoy sequence (this information can also be obtained from `meta_info.json`). This will tell you if something strange might be going on in those samples, like extensive rRNA contamination, that would lead to the observed mapping rates. You could also get this information using a tool like STAR, by asking it to produce both genomic and transcriptomi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-582734798:3023,robust,robust,3023,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-582734798,2,['robust'],['robust']
Availability,"h read, the length of each observed fragment, etc.). That information goes away when the reads are summarized into range-factorized equivalence classes. Moreover, some of the model parameters learned during the online phase will depend (in their details) on the order in which observations are made. Ostensibly, observing the same data in the same order **and issuing updates to shared model parameters from worker threads in the same order** should result in identical values, however this has never been tested and was never a design goal. The reason for this is that differences between runs are within the bounds of the inherent inferential uncertainty of the estimated parameters anyway. That is, if one is relying on a specific value at a level of precision such that a different run of salmon would produce a value different enough to change a downstream analysis, then one is imparting more precision on the estimates than they can provide. Other methods that produce identical results between runs for these values may produce the same output, but the accuracy of the output at that level shouldn't be trusted in this case. The uncertainty of the parameter estimates can be evaluated based on the Gibb samples (or bootstrap replicates) that salmon computes. Of course, the small differences between runs rarely lead to differences in downstream analysis (almost certainly at the gene level and also at the transcript level if you use a differential testing method that is aware of inferential uncertainty). On the other hand, if you are in need of something that produces identical output between runs (but that still also lets you assess uncertainty), then you can give [piscem](https://github.com/COMBINE-lab/piscem) => [piscem-infer](https://github.com/COMBINE-lab/piscem-infer) a try. That tool already works well, but it is in active development and we'd certainly be happy to help build features that you and others might find useful, and would be happy to chat about that if you like.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-2159300538:1821,down,downstream,1821,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-2159300538,2,['down'],['downstream']
Availability,"h the guide sequences I was provided. At any rate, I have a few other questions I hope you can help me answer. I'm not sure about this, it's possible if the guide sequences were already reverse-complemented then the above behavior would makes sense. I am a little less familiar with the guideRNA based ECCITE-seq data, although the mRNA library should be 5' and the sequence does come from forward strand but do we expect the guide RNA to be on the forward strand as well ? Unclear . I'll ask around at nygc and would let you know. > Why does increasing --maxNumBarcodes to 200000 results in no barcodes getting corrected? (See log for Run 2 below). What is the rationale for the current default of 100000?. That's again a great question. In short single-cell world is expanding rapidly and alevin was initially designed to work with 10x 3' data and some of the restriction are outdated with combinatorial indexing based multiplexed experiments. To be honest, 100k was just a random high enough number that was put down to throw away the obvious junk data. Having said that, you would notice that in both the logs you attached a significant fraction of barcodes are thrown away i.e., `Skipped 82268 barcodes due to No mapped read`, which is like ~82% of the 100k barcodes. Even if you include the 200k almost everything was thrown away, `[warning] Skipped 184123 barcodes due to No mapped read`. Although your point is important one why things are not getting sequence corrected with 200k, unfortunately I might have to do some more testing on that front to give more precise answer but in your case I'd advise keeping the default 100k bound, unless you are doing combinatorially-indexed data . > For the downstream analysis of such data, I usually work with both the read and UMI counts, but quants_mat.gz only contains the UMI counts. Can Alevin a produce a matrix of read counts as well. It would be a great feature to add. For now, what is easiest way to get the cell x feature matrix of read coun",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639048052:1151,down,down,1151,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639048052,2,['down'],['down']
Availability,"hello! I am having a similar issues and was wondering if you had an answer for this. My salmon quant.gene.sf file have the ID.version format, and when trying to do DEG using BiomaRt the gene ID are not in the ID.version format, thus I am unable to match them. I did notice that the index used for salmon was GRCm38 but the one currently available in BiomaRt is GRCm39. Do you know if i could cut the .version from my quan.gene.sf file, or I have to run salmon again with the current genome?; thank you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/598#issuecomment-988331751:337,avail,available,337,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/598#issuecomment-988331751,1,['avail'],['available']
Availability,"hey @kvittingseerup, glad to hear you find refgenie useful. . Currently, there is no way to view the recipe inputs using the web interface or server API. That said, it is possible to track this information down... For example, for [`hg38/salmon_sa_index`](http://refgenomes.databio.org/v2/asset/hg38/salmon_sa_index/splash?tag=default) asset look at the ""asset_parents"" section to find out what assets were used to create the salmon index. Then, by looking at [this file](https://github.com/refgenie/refgenomes.databio.org/blob/master/asset_pep/recipe_inputs.csv) you can find out what are the sources of the files we used to create the parent `fasta*` assets in question. . As an aside, we're working on a [new recipe system](https://github.com/refgenie/refgenie/issues/198) that will enable serving this kind of data on http://refgenomes.databio.org/.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/614#issuecomment-770049957:206,down,down,206,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/614#issuecomment-770049957,1,['down'],['down']
Availability,"hey try the following command, I double checked on 1.5.1 and it seemed to give the 18 length CBs:; ```; sudo ~/salmon-1.5.1_linux_x86_64/bin/salmon alevin -l ISR -i ~/Data/salmon/cell_hash -1 R1.fq.gz -2 R2.fq.gz --read-geometry 2[1-15] --bc-geometry 1[3-8,24-29,45-50] --umi-geometry 1[51-56] -o /home/cndd3/Data/Multi_3/hash_1.5.1/ —keepCBFraction 1 --tgMap <might have to create a tsv file with feature name tab feature name>; ```. If the program is not exiting with error with the command you shared then probably there is some error on the update as it should throw error when you simultaneously provide with `citeseq` and `geometry` flags.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/670#issuecomment-860927005:470,error,error,470,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/670#issuecomment-860927005,3,['error'],['error']
Availability,"hi @callumparr, I'm running into something similar, just wondering if you have a better idea now on your last comment (as in what qualifies as many errors)? thanks.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1928552794:148,error,errors,148,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1928552794,1,['error'],['errors']
Availability,"hmmmm I re-pasted the updated error twice but it still reverts back to original post?. Malformed key:value pair at line 44017: ""**@PG** ID:OSA IsCdna:True ReferenceLibraryID:Human.B37.3_RefGene20121217 VN:7.2""",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/222#issuecomment-387498342:30,error,error,30,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/222#issuecomment-387498342,1,['error'],['error']
Availability,hrmmmmm .... so then the failure is stochastic?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393688490:25,failure,failure,25,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393688490,1,['failure'],['failure']
Availability,"igen/src/Core/util/Memory.h:161: void* Eigen::internal::aligned_malloc(std::size_t): Assertion `(size<16 || (std::size_t(result)%16)==0) && ""System's malloc returned an unaligned pointer. Compile with EIGEN_MALLOC_ALREADY_ALIGNED=0 to fallback to handmade alignd memory allocator.""' failed.; Error, cmd:; salmon --no-version-check quant -i /home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out/Trinity.fasta.tmp.salmon.idx -l U -r /home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out/single.fa -o salmon_outdir -p 1 --minAssignedFrags 1; died with ret (6) at /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/../../PerlLib/Process_cmd.pm line 19.; Process_cmd::process_cmd(""salmon --no-version-check quant -i /home/federicoplazzi/test_""...) called at /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/salmon_runner.pl line 26; Trinity run failed. Must investigate error above.; warning, cmd: /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/../../Trinity --single ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa"" --output ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out"" --CPU 1 --max_memory 1G --run_as_paired --SS_lib_type F --seqType fa --trinity_complete --full_cleanup failed with ret: 512, going to retry.; succeeded(0), failed(1) 100% completed. We are sorry, commands in file: [FailedCommands] failed. :-(. Error, cmd: /usr/local/trinityrnaseq-Trinity-v2.6.6/trinity-plugins/BIN/ParaFly -c recursive_trinity.cmds -CPU 4 -v -shuffle died with ret 256 at /usr/local/bin/Trinity line 2581.; main::process_cmd(""/usr/local/trinityrnaseq-Trinity-v2.6.6/trinity-plugins/BIN/P""...) called at /usr/local/bin/Trinity line 3244; main::run_partitioned_cmds(""recursive_trinity.cmds"") called at /usr/local/bin/Trinity line 2239; ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403:2417,error,error,2417,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403,1,['error'],['error']
Availability,"ild system will compile libgff; ==================================================================; ==================================================================; Build system will compile Staden IOLib; ==================================================================; Build system will fetch SPDLOG; ==================================================================; -- Found PkgConfig: /apps/gentoo/usr/bin/pkg-config (found version ""0.29.2""); -- Found Jemalloc: /apps/gentoo/usr/lib/libjemalloc.so (found version """"); Found Jemalloc library --- using this memory allocator; CPACK_SOURCE_IGNORE_FILES = /src/PCA.cpp;/src/PCAUtils.cpp;/build/;/scripts/AggregateToGeneLevel.py;/scripts/ExpressionTools.py;/scripts/GenerateExpressionFiles.sh;/scripts/ParseSoftFile.py;/scripts/PlotCorrelation.py;/scripts/junk;/scripts/sfstrace.log;/scripts/SFPipeline.py;/bin/;/lib/;/sample_data/;PublishREADMEToWebsite.sh;/external/;/src/obsolete/;/include/obsolete/;WebsiteHeader.txt;/experimental_configs/;.git/; TBB_LIBRARIES = /apps/gentoo/usr/lib/libtbbmalloc_proxy.so;/apps/gentoo/usr/lib/libtbbmalloc.so;/apps/gentoo/usr/lib/libtbb.so; -- Configuring done; CMake Error at src/CMakeLists.txt:158 (add_executable):; Cannot find source file:. $blah/salmon-0.10.2/external/install/src/rapmap/RapMapFileSystem.cpp. Tried extensions .c .C .c++ .cc .cpp .cxx .cu .m .M .mm .h .hh .h++ .hm; .hpp .hxx .in .txx. CMake Error at src/CMakeLists.txt:160 (add_executable):; Cannot find source file:. $blah/salmon-0.10.2/external/install/src/rapmap/rank9b.cpp. Tried extensions .c .C .c++ .cc .cpp .cxx .cu .m .M .mm .h .hh .h++ .hm; .hpp .hxx .in .txx. CMake Error at src/CMakeLists.txt:158 (add_executable):; No SOURCES given to target: salmon. CMake Error at src/CMakeLists.txt:160 (add_executable):; No SOURCES given to target: unitTests. -- Build files have been written to: $blah/salmon-0.10.2; $blah/salmon-0.10.2 $ make; make: *** No targets specified and no makefile found. Stop.; $blah/salmon-0.10.2 $; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387:4933,Error,Error,4933,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387,4,['Error'],['Error']
Availability,inEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight; ```,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266888582:1988,error,errorminEQClassWeight,1988,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266888582,45,['error'],['errorminEQClassWeight']
Availability,"ing took a bit over an hour and consumed ~17GB of memory. This is about half the running time as the previous version, but approx. the same amount of memory requirement (more on that below). The 17-mer running, took 4.5hrs to complete and consumed ~64GB of memory. This particular running is again, about twice as fast, although the time really depends on the memory limitations I gave it. Since it appears that this version no longer crashes when given less than about 250GB of memory, I also tested with 32G and 16GB of memory, just to see what impact this would have on the times. Those jobs are still running (it's only been about 4hrs as of this writing, I'll update my post if/when they complete). Current logs are showing that they quickly consume all the available memory, but have not yet crashed. I've also got versions with 128-512GB of memory requested (by powers of 2) for comparison. Some random notes: both the 31-mer index experienced about twice as many soft page reclaims with the new/faster version and experienced a few hard page faults (the previous version saw none of the latter). The 17-mer version experienced fewer page reclaims than any of the 31-mer indices and far fewer than with the prior version. Again, a few page faults crept in, but relatively few by percentage and likely not contributing any significant amount of time overall. [index-qacct-17mer.log](https://github.com/COMBINE-lab/salmon/files/4246516/index-qacct-17mer.log); [index-qacct-31mer.log](https://github.com/COMBINE-lab/salmon/files/4246517/index-qacct-31mer.log). **UPDATE**; The 16GB version finished running. It actually only took a little over 4 hours to run, as well. The troubling thing about this job seems to be that, despite having successfully completed, according to the accounting log it used over 20GB of memory... which should be impossible to do. Our resident experts suspect there's a race condition occurring at the tail end of the job and that all of that extra memory is being allo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590516702:1279,fault,faults,1279,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590516702,1,['fault'],['faults']
Availability,"ingle-cell world is expanding rapidly and alevin was initially designed to work with 10x 3' data and some of the restriction are outdated with combinatorial indexing based multiplexed experiments. To be honest, 100k was just a random high enough number that was put down to throw away the obvious junk data. Having said that, you would notice that in both the logs you attached a significant fraction of barcodes are thrown away i.e., `Skipped 82268 barcodes due to No mapped read`, which is like ~82% of the 100k barcodes. Even if you include the 200k almost everything was thrown away, `[warning] Skipped 184123 barcodes due to No mapped read`. Although your point is important one why things are not getting sequence corrected with 200k, unfortunately I might have to do some more testing on that front to give more precise answer but in your case I'd advise keeping the default 100k bound, unless you are doing combinatorially-indexed data . > For the downstream analysis of such data, I usually work with both the read and UMI counts, but quants_mat.gz only contains the UMI counts. Can Alevin a produce a matrix of read counts as well. It would be a great feature to add. For now, what is easiest way to get the cell x feature matrix of read counts if I use the --dumpEq or --dumpBfh flags? Can tximport be used for this or do I need to use the Python parser first?. Congratulations on the awesome paper :). We were actually discussing yesterday about your paper and potentially modifying alevin to include model for correcting index-hoping, although it's still in discussion phase. To answer your question, thanks for the feature request, I can add that feature on the weekend if it's urgent. However, you can also generate that with the current version using the `--dumpBfh` flag and `bfh.txt` file. Unfortunately, since it's the first use case where we need the read-count matrix, we haven't included the support in `tximport` yet. However, like you said one can use the [read_bfh](https://g",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639048052:1841,down,downstream,1841,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639048052,2,['down'],['downstream']
Availability,itNum: 0; itNum: 1; [2018-05-31 22:48:54.566] [jointLog] [info] Computed 583973 rich equivalence classes for further processing; [2018-05-31 22:48:54.566] [jointLog] [info] Counted 59985214 total reads in the equivalence classes; [2018-05-31 22:48:54.609] [jointLog] [info] Mapping rate = 88.2723%. [2018-05-31 22:48:54.609] [jointLog] [info] finished quantifyLibrary(); [2018-05-31 22:48:54.610] [jointLog] [info] Starting optimizer; [2018-05-31 22:48:54.829] [jointLog] [info] Marked 1 weighted equivalence classes as degenerate; [2018-05-31 22:48:54.859] [jointLog] [info] iteration = 0 | max rel diff. = 127.38; Exception : [Error in function boost::math::digamma<double>(double): numeric overflow]; salmon quant was invoked improperly.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393675075:629,Error,Error,629,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393675075,1,['Error'],['Error']
Availability,ld is just the GNU linker.; I still think it's not able to find the zlib **library** file since the error at `-lz` where `-l` gives the namespace of the library.; If you are confident about the inclusion of the `Zlib` then can you try clearing the cmake cache (i.e. remove the file CMakeCache.txt) and build again?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314430634:100,error,error,100,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314430634,2,['error'],['error']
Availability,"led ; ```. ```; Version Info: This is the most recent version of salmon.; # salmon (alignment-based) v1.4.0; # [ program ] => salmon ; # [ command ] => quant ; # [ targets ] => { mRNA.fasta }; # [ threads ] => { 20 }; # [ libType ] => { A }; # [ alignments ] => { SRR3212847.Aligned.Shuffled.bam }; # [ output ] => { SRR3212847.Aligned.Shuffled }; Logs will be written to SRR3212847.Aligned.Shuffled/logs; [2021-01-08 12:43:44.680] [jointLog] [info] setting maxHashResizeThreads to 20; [2021-01-08 12:43:44.680] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; Library format { type:paired end, relative orientation:inward, strandedness:unstranded }; [2021-01-08 12:43:44.711] [jointLog] [info] numQuantThreads = 14; parseThreads = 6; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""SRR3212847.Aligned.Shuffled.bam"", fasta = ""mRNA.fasta"" . . .done. processed 0 reads in current roundSegmentation fault (core dumped); ```. ### 2. Shuffling a headless bam file with `samtools collate`; (I think I saw something about the bam's header in another thread dealing with this issue); ```; samtools view \; -b \; -@ 40 \; -o SRR3212847.Aligned.SortedByCoord.NoHeader.bam \; SRR3212847.Aligned.SortedByCoord.bam. samtools collate \; -@ 40 \; -o SRR3212847.Aligned.Shuffled.NoHeader.bam \; SRR3212847.Aligned.SortedByCoord.NoHeader.bam. salmon quant \; -t mRNA.fasta \; -p 20 \; -l A \; -a SRR3212847.Aligned.Shuffled.NoHeader.bam \; -o SRR3212847.Aligned.Shuffled.NoHeader; ```. ```. .... [2021-01-08 12:42:10.700] [jointLog] [warning] . WARNING: Detected suspicious pair --- ; The names are different:; read1 : SRR3212847.24133171; read2 : SRR3212847.33911054; The proper-pair statuses are inconsistent:; read1 [SRR3212847.24133171] : no proper-pair; not mapped; matenot mapped. read2 : [SRR3212847.24133171] : proper-pair; mapped; matemapped. [2021-01-08 12:42:10.700] [jointLog] [warning] . W",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-756727212:1734,fault,fault,1734,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-756727212,1,['fault'],['fault']
Availability,"lmon quant -i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR -1 ${FILE1} -2 ${FILE2} -o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}; **** Job ends ****; Wed Mar 29 14:51:13 EDT 2017; ```. ### SGE email info example. ```; Job-array task 110315.1 (step6-salmon_test3.gsk_phaseII) Complete; User = lcollado; Queue = shared.q@compute-061.cm.cluster; Host = compute-061.cm.cluster; Start Time = 03/29/2017 14:51:09; End Time = 03/29/2017 14:51:13; User Time = 00:00:00; System Time = 00:00:02; Wallclock Time = 00:00:04; CPU = 00:00:02; Max vmem = 14.820G; Exit Status = 0; ```. ## 16 cores. ### Bash. ```bash; #!/bin/bash; #$ -cwd; #$ -l mem_free=2G,h_vmem=3G,h_fsize=100G; #$ -N step6-salmon_test4.gsk_phaseII; #$ -pe local 16; #$ -o ./logs/salmon_test4.$TASK_ID.txt; #$ -e ./logs/salmon_test4.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 16 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_t",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:4109,echo,echo,4109,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['echo'],['echo']
Availability,"luded from /usr/local/salmon-0.10.2/include/eigen3/Eigen/Core:420:0,; from /usr/local/salmon-0.10.2/include/eigen3/Eigen/Dense:1,; from /usr/local/salmon-0.10.2/include/SalmonUtils.hpp:21,; from /usr/local/salmon-0.10.2/include/ReadPair.hpp:7,; from /usr/local/salmon-0.10.2/include/AlignmentGroup.hpp:15,; from /usr/local/salmon-0.10.2/include/AlignmentLibrary.hpp:12,; from /usr/local/salmon-0.10.2/src/SalmonQuantifyAlignments.cpp:39:; /usr/local/salmon-0.10.2/include/eigen3/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]; MaySliceVectorize = bool(MightVectorize) && bool(DstHasDirectAccess); ^~~~~~~~~~~~~~~~~~~~~~~~; At global scope:; cc1plus: warning: unrecognized command line option ‘-Wno-unused-local-typedef’; cc1plus: warning: unrecognized command line option ‘-Wno-unused-local-typedef’; make[2]: *** [src/CMakeFiles/salmon.dir/SalmonQuantifyAlignments.cpp.o] Error 1; make[1]: *** [src/CMakeFiles/salmon.dir/all] Error 2; make: *** [all] Error 2; ```. I also tried installing it through bioconda. Apparently, it installs it correctly, but when I try to use Trinity (I'm installing Salmon as a Trinity requirement) this is what happens: . ```; salmon: /opt/conda/conda-bld/salmon_1528409373758/work/salmon-0.10.2/include/eigen3/Eigen/src/Core/util/Memory.h:161: void* Eigen::internal::aligned_malloc(std::size_t): Assertion `(size<16 || (std::size_t(result)%16)==0) && ""System's malloc returned an unaligned pointer. Compile with EIGEN_MALLOC_ALREADY_ALIGNED=0 to fallback to handmade alignd memory allocator.""' failed.; Error, cmd:; salmon --no-version-check quant -i /home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out/Trinity.fasta.tmp.salmon.idx -l U -r /home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out/single.fa -o salmon_outdir -p 1 --minAssignedFrags 1; died with ret (6) at /usr/local/trinityrnaseq",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403:1099,Error,Error,1099,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403,2,['Error'],['Error']
Availability,"mon_refinery_stemcellcommons_org; UserId=galaxy(1001) GroupId=users(100); Priority=4294901667 Account=(null) QOS=(null); JobState=COMPLETED Reason=None Dependency=(null); Requeue=1 Restarts=0 BatchFlag=1 ExitCode=0:0; RunTime=00:07:32 TimeLimit=UNLIMITED TimeMin=N/A; SubmitTime=2018-08-27T15:36:41 EligibleTime=2018-08-27T15:36:41; StartTime=2018-08-27T15:36:41 EndTime=2018-08-27T15:44:13; PreemptTime=None SuspendTime=None SecsPreSuspend=0; Partition=main AllocNode:Sid=ip-172-31-24-127:21595; ReqNodeList=(null) ExcNodeList=(null); NodeList=w19; BatchHost=w19; NumNodes=1 NumCPUs=1 CPUs/Task=1 ReqS:C:T=*:*:*; MinCPUsNode=1 MinMemoryNode=25000M MinTmpDiskNode=0; Features=(null) Gres=(null) Reservation=(null); Shared=OK Contiguous=0 Licenses=(null) Network=(null); Command=(null); WorkDir=/mnt/galaxy/tmp/job_working_directory/000/990; ```. - `Galaxy stderr`; ```; Fatal error: Exit code 139 (); ...; /mnt/galaxy/tmp/job_working_directory/000/990/tool_script.sh: line 50: 5713 Segmentation fault (core dumped) salmon quant --index ./index --libType U --unmatedReads ./single.fastq --output ./output --allowOrphans --ma 2 --mp 4 --go 5 --ge 3 --minScoreFraction 0.65 --threads ""${GALAXY_SLOTS:-4}"" --incompatPrior 1e-20 --biasSpeedSamp 1 --fldMax 1000 --fldMean 200 --fldSD 80 --forgettingFactor 0.65 --maxReadOcc 100 --numBiasSamples 2000000 --numAuxModelSamples 5000000 --numPreAuxModelSamples 1000000 --numGibbsSamples 0 --numBootstraps 0 --consensusSlack 0 --vbPrior 0.001 --sigDigits 3; ```. - `syslog`; ```; ip-172-31-30-93 kernel: [ 681.083866] salmon[4167]: segfault at 2641a ip 00007fe2fcdc2dca sp 00007fff27128b90 error 4 in libtbb.so.2[7fe2fcda0000+37000]; ```. **`salmon 0.11.2 run with: NativeSpecification --ntasks=1 --nodes=1 --mem=100000`**; - `scontrol show job 98`; ```; JobId=98 Name=g994_salmon_refinery_stemcellcommons_org; UserId=galaxy(1001) GroupId=users(100); Priority=4294901663 Account=(null) QOS=(null); JobState=RUNNING Reason=None Dependency=(null); Requeue=1 Restart",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238:1407,fault,fault,1407,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238,1,['fault'],['fault']
Availability,"n equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 11:30:13.489] [puff::index::jointLog] [warning] Entry with header [ENST00000603935.1], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 11:30:13.489] [puff::index::jointLog] [warning] Entry with header [ENST00000604102.1], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 11:30:13.489] [puff::index::jointLog] [warning] Entry with header [ENST00000604838.1], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 11:30:14.411] [puff::index::jointLog] [warning] Entry with header [ENST00000579054.1], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 11:30:15.280] [puff::index::jointLog] [warning] Entry with header [ENST00000634174.1], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 11:31:24.590] [puff::index::jointLog] [warning] Removed 829 transcripts that were sequence duplicates of indexed transcripts.; [2020-12-26 11:31:24.590] [puff::index::jointLog] [warning] If you wish to retain duplicate transcripts, please use the `--keepDuplicates` flag; [2020-12-26 11:31:24.641] [puff::index::jointLog] [info] Replaced 151,122,967 non-ATCG nucleotides; [2020-12-26 11:31:24.641] [puff::index::jointLog] [info] Clipped poly-A tails from 1,829 transcripts; wrote 231443 cleaned references; [2020-12-26 11:31:28.118] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers; [2020-12-26 11:31:58.286] [puff::index::jointLog] [info] ntHll estimated 2628436199 distinct k-mers, setting filter size to 2^36; Threads = 12; Vertex length = 31; Hash functions = 5; Filter size = 68719476736; Capacity = 2; Files:; salmon-decoy-sa-index/ref_k31_fixed.fa. **My concern is would it make problem for rest of downstream analysis?. Thanks,; Tima**; #",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751354991:24466,down,downstream,24466,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751354991,1,['down'],['downstream']
Availability,"n this aspect of problem solving.; I have to determine the expression of GFP and Transposon sequence in the transcriptome.; I read the material posted on the link https://salmon.readthedocs.io/en/latest/salmon.html.; It instructs this to be done in 2 different ways-; There are two options for generating a decoy-aware transcriptome:. The first is to compute a set of decoy sequences by mapping the annotated transcripts you wish to index against a hard-masked version of the organism’s genome. This can be done with e.g. MashMap2, and we provide some simple scripts to greatly simplify this whole process. Specifically, you can use the generateDecoyTranscriptome.sh script, whose instructions you can find in this README. The second is to use the entire genome of the organism as the decoy sequence. This can be done by concatenating the genome to the end of the transcriptome you want to index and populating the decoys.txt file with the chromosome names. Detailed instructions on how to prepare this type of decoy sequence is available here. This scheme provides a more comprehensive set of decoys, but, obviously, requires considerably more memory to build the index. I tried the 2nd approach. Combined the GFP,Transposon and the genome FASTA files, indexed it , constructed the decoy according to the given instructions given here https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/.; When I ran Salmon (version 1.2.1_linux_x86_64) it did not report anything in the quant files (I know that these samples have high GFP and Transposon expression in these samples). The 1st approach is giving me problems to the construction of the GTF file and then memory usage. The instructions say - generateDecoyTranscriptome.sh — Located in the scripts/ directory, this is a preprocessing script for creating augmented hybrid fasta file for salmon index. It consumes genome fasta (one file given through -g), transcriptome fasta (-t) and the annotation (GTF file given through -a) to creat",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/737#issuecomment-1022416973:1156,avail,available,1156,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/737#issuecomment-1022416973,2,['avail'],['available']
Availability,"n, about twice as fast, although the time really depends on the memory limitations I gave it. Since it appears that this version no longer crashes when given less than about 250GB of memory, I also tested with 32G and 16GB of memory, just to see what impact this would have on the times. Those jobs are still running (it's only been about 4hrs as of this writing, I'll update my post if/when they complete). Current logs are showing that they quickly consume all the available memory, but have not yet crashed. I've also got versions with 128-512GB of memory requested (by powers of 2) for comparison. Some random notes: both the 31-mer index experienced about twice as many soft page reclaims with the new/faster version and experienced a few hard page faults (the previous version saw none of the latter). The 17-mer version experienced fewer page reclaims than any of the 31-mer indices and far fewer than with the prior version. Again, a few page faults crept in, but relatively few by percentage and likely not contributing any significant amount of time overall. [index-qacct-17mer.log](https://github.com/COMBINE-lab/salmon/files/4246516/index-qacct-17mer.log); [index-qacct-31mer.log](https://github.com/COMBINE-lab/salmon/files/4246517/index-qacct-31mer.log). **UPDATE**; The 16GB version finished running. It actually only took a little over 4 hours to run, as well. The troubling thing about this job seems to be that, despite having successfully completed, according to the accounting log it used over 20GB of memory... which should be impossible to do. Our resident experts suspect there's a race condition occurring at the tail end of the job and that all of that extra memory is being allocated before the scheduler can kill it for exceeding the limit. Whatever the case, though, this throws into question some of those numbers that I've been grabbing from the accounting logs --- it's either being misreported, or the memory gobbling is happening so rapidly that it may not, in fact, ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590516702:1476,fault,faults,1476,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590516702,1,['fault'],['faults']
Availability,"naseq-Trinity-v2.6.6/util/support_scripts/../../PerlLib/Process_cmd.pm line 19.; Process_cmd::process_cmd(""salmon --no-version-check quant -i /home/federicoplazzi/test_""...) called at /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/salmon_runner.pl line 26; Trinity run failed. Must investigate error above.; warning, cmd: /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/../../Trinity --single ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa"" --output ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out"" --CPU 1 --max_memory 1G --run_as_paired --SS_lib_type F --seqType fa --trinity_complete --full_cleanup failed with ret: 512, going to retry.; succeeded(0), failed(1) 100% completed. We are sorry, commands in file: [FailedCommands] failed. :-(. Error, cmd: /usr/local/trinityrnaseq-Trinity-v2.6.6/trinity-plugins/BIN/ParaFly -c recursive_trinity.cmds -CPU 4 -v -shuffle died with ret 256 at /usr/local/bin/Trinity line 2581.; main::process_cmd(""/usr/local/trinityrnaseq-Trinity-v2.6.6/trinity-plugins/BIN/P""...) called at /usr/local/bin/Trinity line 3244; main::run_partitioned_cmds(""recursive_trinity.cmds"") called at /usr/local/bin/Trinity line 2239; main::run_recursive_trinity(""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/ch""...) called at /usr/local/bin/Trinity line 2001; main::run_chrysalis(""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/in""..., ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/bo""..., 200, 500, ""RF"", ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/bo""..., ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/bo""...) called at /usr/local/bin/Trinity line 1664; main::run_Trinity() called at /usr/local/bin/Trinity line 1317; eval {...} called at /usr/local/bin/Trinity line 1316. Trinity run failed. Must investigate error above.; ```. Do you have any suggestions?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403:4062,error,error,4062,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403,1,['error'],['error']
Availability,"ne phase and an offline phase. The online phase has access to _fragment-level_ information that is then summarized away during the offline phase (like the specific locations of each read, the length of each observed fragment, etc.). That information goes away when the reads are summarized into range-factorized equivalence classes. Moreover, some of the model parameters learned during the online phase will depend (in their details) on the order in which observations are made. Ostensibly, observing the same data in the same order **and issuing updates to shared model parameters from worker threads in the same order** should result in identical values, however this has never been tested and was never a design goal. The reason for this is that differences between runs are within the bounds of the inherent inferential uncertainty of the estimated parameters anyway. That is, if one is relying on a specific value at a level of precision such that a different run of salmon would produce a value different enough to change a downstream analysis, then one is imparting more precision on the estimates than they can provide. Other methods that produce identical results between runs for these values may produce the same output, but the accuracy of the output at that level shouldn't be trusted in this case. The uncertainty of the parameter estimates can be evaluated based on the Gibb samples (or bootstrap replicates) that salmon computes. Of course, the small differences between runs rarely lead to differences in downstream analysis (almost certainly at the gene level and also at the transcript level if you use a differential testing method that is aware of inferential uncertainty). On the other hand, if you are in need of something that produces identical output between runs (but that still also lets you assess uncertainty), then you can give [piscem](https://github.com/COMBINE-lab/piscem) => [piscem-infer](https://github.com/COMBINE-lab/piscem-infer) a try. That tool already work",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-2159300538:1329,down,downstream,1329,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-2159300538,2,['down'],['downstream']
Availability,"ne should expect transcript (or even gene) abundances to stay the same under a change of annotation. The estimates computed by salmon (and by all transcript-level abundance estimation tools) is one that maximizes the likelihood of the data (or maximizes the ELBO in the case of VI) _conditioned on_ the observed fragments and the _transcripts_. When one changes the transcripts, they change the variable upon which the inference is conditioned, and the results, in general, can change (a lot, or a little bit). This is specifically most prone to happen when transcripts / genes are added to the annotation that are similar to other transcripts or genes in the annotation. Now, my specific thought based on your settings of parameters. They are _quite_ different, but the three big factors I see here are (1) the setting for `--scoreExp`, (2) the setting(s) for dovetail and softclipOverhangs and (3) the setting for `--consensusSlack` Why are they a big deal?. * `--scoreExp` determines how much we down-weight scores sub-optimal alignments. Setting `--scoreExp` to 0 says that a sub-optimal alignment, at least in terms of the alignment probability is _just as good as the optimal alignment_. So, imagine you had a few read length regions of a pair of genes that each differed by 1 or 2 SNPs. When `--scoreExp` is 0, then the model considers alignments (say to transcript 2) with 2 substitutions to be just as likely as alignments (say to transcript 1) that are perfect (with no substitutions). While you can play around with different values of `--scoreExp` to determine how differences from the optimal alignment should be weighted, I'd strongly suggest against setting `--scoreExp` equal to 0. * `--allowDovetail` and `--softclipOverhangs` may or may not have a significant effect based on the quality of your library and annotation. Ideally, you would have no dovetailed mappings and no reads overhanging annotated transcripts. However, if you have an incomplete assembly or a library of question",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/523#issuecomment-632953613:1212,down,down-weight,1212,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/523#issuecomment-632953613,1,['down'],['down-weight']
Availability,"ng 32-bit quasi index; [2019-01-29 09:56:54.551] [stderrLog] [info] Loading Transcript Info ; [2019-01-29 09:56:54.826] [stderrLog] [info] Loading Rank-Select Bit Array; [2019-01-29 09:56:54.883] [stderrLog] [info] There were 80,511 set bits in the bit array; [2019-01-29 09:56:54.908] [stderrLog] [info] Computing transcript lengths; [2019-01-29 09:56:54.908] [stderrLog] [info] Waiting to finish loading hash; [2019-01-29 09:57:09.336] [stderrLog] [info] Done loading index; [2019-01-29 09:57:09.336] [jointLog] [info] done; [2019-01-29 09:57:09.336] [jointLog] [info] Index contained 80,511 targets. processed 2 Million fragments; hits: 812181, hits per frag: 0.326777. [2019-01-29 09:57:36.647] [alevinLog] [info] Starting optimizer; [2019-01-29 09:57:36.587] [jointLog] [info] Computed 12,933 rich equivalence classes for further processing; [2019-01-29 09:57:36.587] [jointLog] [info] Counted 242,520 total reads in the equivalence classes ; [2019-01-29 09:57:36.601] [jointLog] [warning] Only 242520 fragments were mapped, but the number of burn-in fragments was set to 5000000.; The effective lengths have been computed using the observed mappings. [2019-01-29 09:57:36.601] [jointLog] [info] Mapping rate = 8.94141%. [2019-01-29 09:57:36.601] [jointLog] [info] finished quantifyLibrary(). Analyzed 293 cells (100% of all).; [2019-01-29 09:57:40.090] [alevinLog] [info] Total 206902 UMI after deduplicating.; [2019-01-29 09:57:40.091] [alevinLog] [warning] Skipped 71 barcodes due to No mapped read; [2019-01-29 09:57:40.110] [alevinLog] [info] Clearing EqMap; Might take some time.; [2019-01-29 09:57:40.176] [alevinLog] [info] Starting Import of the gene count matrix.; [2019-01-29 09:57:41.168] [alevinLog] [info] Done Importing gene count matrix for dimension 222x19879; [2019-01-29 09:57:41.168] [alevinLog] [info] Starting dumping cell v gene counts in csv format; Segmentation fault (core dumped); ```. I then installed through conda salmon=0.12.0. Both times it failed with core dump.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722:10240,fault,fault,10240,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458481722,1,['fault'],['fault']
Availability,"ng of these considerations. It’s good to think about how data processing choices may affect your results and you are being thoughtful here. I wouldn’t say that, generally, alignment-free tools are more accurate than alignment-based ones. For example, you might look at our recent paper on how [alignment and mapping methodology can influence abundance estimation even when holding the quantification approach fixed](https://genomebiology.biomedcentral.com/articles/10.1186/s13059-020-02151-8), or [this paper on the corner cases of alignment-free methodology](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-018-4869-5) (note the second paper pre-dates the first, and the new selective-alignment methodology in salmon should largely address the issues raised in that paper). However, the bigger and more meaningful distinction is between methods that attempt to properly quantify abundance (generally using a generative statistical model) — including methods like RSEM, BitSeq, salmon, etc., and those that try to simply count aligned reads — including methods like HTSeq and featureCounts. Generally, the former type of methods are more accurate than the latter at both the gene level and the former can also offer transcript-level estimates if desired (counting based methods generally cannot). Finally, to your question more directly, I don’t believe that model misspecification that may result due to not knowing the fragment length distribution will generally have enough of a deleterious effect on the probabilistic quantification methods to degrade their performance to the level of counting based methods. I would still argue to prefer probabilistic quantification (i.e. salmon) to read counting, even if you don’t know the fragment length distribution. As I mentioned above, it may change the maximum likelihood estimates a bit, but should do so across all samples, hopefully minimizing the downstream effects on differential analysis. Good luck with your analysis!. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-750943952:1967,down,downstream,1967,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-750943952,2,['down'],['downstream']
Availability,nm - I just re-read the above and realized @rob-p already suggested just that. Sorry for being redundant! PS I am very grateful for the existence of Salmon. Thanks to all contributors!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/175#issuecomment-392179743:95,redundant,redundant,95,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/175#issuecomment-392179743,1,['redundant'],['redundant']
Availability,"nto_ salmon. Specifically, it makes a lot of sense to have some component of the likelihood account for the coverage profile of transcripts. Yes! I've been analyzing a large dataset and my real motivating problem was not really the example I posted above, but distinguishing between pre-processed and fully-processed non-coding RNA transcripts. I'm attaching an image showing an example ncRNA; the two tracks are the same data, but the lower one shows abundance on a log scale. In this particular sample, it's easy to estimate that ~5-10% of the transcripts are pre-processed (the transcripts still have neighboring genomic DNA). I wanted to see how this ratio changes between samples (for example, in a snoRNA processing-defective mutant strain), but quickly realized this is not easily done in salmon or any other quant tools because the processed transcript is entirely a subset of the sequence of the pre-processed transcript. The only way to accurately quantify it is to use the coverage information, which as you agreed is not really taken into account downstream. If Salmon could incorporate the coverage information to solve this class of problem, that would indeed be a **huge win**. I think the ncRNA example would be both a great biologically-interesting motivating problem, as well as a good technical benchmark for implementing any new methods. It could even be used as a secondary RNA velocity measure in scRNA seq data, provided the method used can detect these (non-polyadenylated) transcripts. > The big questions are (1) how do you fold this type of intuition formally into the probabilistic model and (2) is it possible to incorporate this information efficiently?. This is definitely your domain of expertise (and I know it's a rhetorical question but I'd love to throw some ideas out here)... I can think of a few mostly heuristical approaches.... . 1) when apportioning reads to transcripts, after the mapping phase, incorporate a notion of ""evenness"" into the EM step... reads ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-623963851:2001,down,downstream,2001,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-623963851,2,['down'],['downstream']
Availability,"observe the coverage bias in them. I'd suggest can you please try subsampling randomly across the full `Fastq` if you haven't tried that already.; * `re: subsampling coefficient:` If you are looking for per-CB level mapping rate for your sample that would be very easy to calculate, although getting one number for the full sample might be little tricky since the mapping rate might have large variance across the sample, but it would be an interesting plot to generate, do let us know how it looks in your case.; If you run Alevin with `--dumpFeatures` flag, alevin will generate a file `featureDump.txt`, whose first column will be the per CB level mapping rate i.e. `#mapped reads/#raw reads`. If you wan't absolute values for per-CB reads and mapped reads, it should be in the file `filtered_cb_frequency.txt` and `mappedUMI.txt` respectively.; * `re: cellranger subsampling:` Correct me if I am wrong, when you say cellranger subsampling, do you mean the `cellranger aggregate` pipeline? It's possible you are talking about some other step which I am not aware of but if it's `aggregate` then I think it happens downstream of all the quantification. Indeed coverage bias correction is an important part of the aggregation step but in general it's not the only one and that's why we recommend using the `Seurat` package downstream of the Alevin quantified matrices. We will be more than happy to write a tutorial on, ""how to perform batch correction downstream of Alevin"" but in summary the following steps would be the gist of the process.; - Use Alevin w/o any modification to the `fastq` on both of your sample to generate the gene count matrices. (We have made a major upgrade to the Alevin. We'd recommend using [v0.12.0-alpha](https://github.com/COMBINE-lab/salmon/tree/v0.12.0-alpha) for now, we are planning to make an official release before the end of this week, currently you can use pre-release. Unfortunately, not available on conda yet).; - Import Alevin count matrices into R using ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433169468:1635,down,downstream,1635,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433169468,2,['down'],['downstream']
Availability,"of 31 (perhaps after poly-A clipping); [2020-12-26 11:30:13.489] [puff::index::jointLog] [warning] Entry with header [ENST00000603935.1], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 11:30:13.489] [puff::index::jointLog] [warning] Entry with header [ENST00000604102.1], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 11:30:13.489] [puff::index::jointLog] [warning] Entry with header [ENST00000604838.1], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 11:30:14.411] [puff::index::jointLog] [warning] Entry with header [ENST00000579054.1], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 11:30:15.280] [puff::index::jointLog] [warning] Entry with header [ENST00000634174.1], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping). [2020-12-26 11:31:24.590] [puff::index::jointLog] [warning] Removed 829 transcripts that were sequence duplicates of indexed transcripts.; [2020-12-26 11:31:24.590] [puff::index::jointLog] [warning] If you wish to retain duplicate transcripts, please use the `--keepDuplicates` flag; [2020-12-26 11:31:24.641] [puff::index::jointLog] [info] Replaced 151,122,967 non-ATCG nucleotides; [2020-12-26 11:31:24.641] [puff::index::jointLog] [info] Clipped poly-A tails from 1,829 transcripts; wrote 231443 cleaned references; [2020-12-26 11:31:28.118] [puff::index::jointLog] [info] Filter size not provided; estimating from number of distinct k-mers; [2020-12-26 11:31:58.286] [puff::index::jointLog] [info] ntHll estimated 2628436199 distinct k-mers, setting filter size to 2^36; Threads = 12; Vertex length = 31; Hash functions = 5; Filter size = 68719476736; Capacity = 2; Files:; salmon-decoy-sa-index/ref_k31_fixed.fa; -----------------------------. **My concern is would it make problem for rest of downstream analysis?. Thanks,; Tima**",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751354493:24544,down,downstream,24544,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751354493,1,['down'],['downstream']
Availability,"omatic adapter detection](https://github.com/OpenGene/fastp/issues/240). - [inconsistent behavior with different runs](https://github.com/OpenGene/fastp/issues/231). 3. When I see the above, I am bit skeptical using fastp for qc/adapter trimming. . After lot of trials with bbduk and fastp, I have decided to use bbduk and bbmap for my high throughput analysis. Below, I explain my reasoning behind those choices: . **_```Note - edited this on 02-Apr-2020 to have the correct order of operations ```_** . 1. **_STEP 1 - run bbmap.sh on raw fatsq file to remove contaminants as appropriate (rRNA, mitochondrial, chloroplast)_**; - You have alluded to the importance of removing contaminants [in this post](https://github.com/COMBINE-lab/salmon/issues/160#issuecomment-334762498); >However, the other thing to try is simply to align one of these samples to the genome with a tool like STAR or HISAT2 and look at their mapping rate to known features. If it's similar, then the other reads could be accounted for by e.g. intron retention or even contamination. Finally, [@vals has an excellent series of blog posts on investigating and addressing low mapping rates](http://www.nxn.se/valent/2017/9/18/low-mapping-rate-5-human-dna-contamination); - bbmap Command ([based of this biostars post](https://www.biostars.org/p/143019/#210890)):; `bbmap.sh in=read_1.fq.gz ref=rRNA_Chlor_Mito.fa maxindel=1 minid=0.95 outu=clean_read_1.fq.gz nodisk`; - Strategy:; `use the rRNA+Mito+Chloroplast file and map the reads using bbmap, then collect the unmapped reads (clean_read_1.fq.gz) for my downstream analysis`. 2. **_STEP 2 - run bbduk.sh on the outu files from bbmap step -- the outu stands for output unmapped - as stated in the logic above, anything that is unmapped to the rRNA_Chlor_Mito.fa is a clean read for downstream analysis_**. I use bbduk with adapter trimming and quality trimming in same command line - also, the adapters.fa file that ships with BBTools can be used in all runs. Hope that helps.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209:3155,down,downstream,3155,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-597393209,4,['down'],['downstream']
Availability,"on = 900 | max rel diff. = 0.0146915; [2016-01-02 20:23:59.212] [jointLog] [info] iteration 1000, recomputing effective lengths; [2016-01-02 20:24:01.395] [jointLog] [info] iteration = 1000 | max rel diff. = 0.0147088; [2016-01-02 20:24:01.837] [jointLog] [info] iteration = 1100 | max rel diff. = 0.021175; [2016-01-02 20:24:02.193] [jointLog] [info] iteration = 1200 | max rel diff. = 0.01904; [2016-01-02 20:24:02.572] [jointLog] [info] iteration = 1300 | max rel diff. = 0.0187047; [2016-01-02 20:24:02.972] [jointLog] [info] iteration = 1400 | max rel diff. = 0.0213549; [2016-01-02 20:24:03.360] [jointLog] [info] iteration = 1500 | max rel diff. = 0.0311727; [2016-01-02 20:24:03.745] [jointLog] [info] iteration = 1600 | max rel diff. = 0.0100658; [2016-01-02 20:24:04.141] [jointLog] [info] iteration = 1700 | max rel diff. = 0.0100679; [2016-01-02 20:24:04.536] [jointLog] [info] iteration = 1800 | max rel diff. = 0.0100686; [2016-01-02 20:24:04.642] [jointLog] [info] iteration = 1827 | max rel diff. = 0.00921912; [2016-01-02 20:24:04.646] [jointLog] [info] Finished optimizer; [2016-01-02 20:24:04.646] [jointLog] [info] writing output. Computing gene-level abundance estimates; [2016-01-02 20:24:04.882] [jointLog] [warning] NOTE: Read Lib [( /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq, /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: SRP057125_SRS936134_salmon_out/libFormatCounts.txt for details. There were 104534 transcripts mapping to 44034 genes; Parsed 104000 expression lines; done; Aggregating expressions to gene level . . . done; Segmentation fault (core dumped); [vale@ebi-003 mouse]$; ```. (I also tried the command in the NSF directory to write to /tmp/SRP057125_SRS936134_salmon_out, but that also segfaults)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741:11800,fault,fault,11800,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168426741,1,['fault'],['fault']
Availability,"on for the problems you are facing in alevin. >Your first question was related to alevin quantifying very less number of reads. To answer that,; if you look at the log, at the first few lines, alevin warns about ~91% of the reads being thrown away because; of the noisy CBs. The problem is alevin’s first “knee"" estimation is overshooting in predicting the first boundary. You will find https://github.com/COMBINE-lab/salmon/issues/362 issue to be; very useful in understanding that. As a summary if you look at the plot I attached it has bi-modalities,; which is generally not the case and alevin is greedily finding the threshold at the first ~100 cells. If this; happens the general direction is to help alevin by proving a upper bound, in case of your data; would be ~14000 cells. You can tell alevin with `—expectCells 14000` and alevin start to work; normally and logs ~12% of the data is noisy. >You second question was a little complicated to answer. Seemingly, your salmon index has transcript with; same exact name `ENST00000399966.9`, occurring twice with different sequences. Just by looking at the index,; I am unsure it’s actually present in the reference or its salmon indexing messing up. If I Assume it was actually; present two times in the reference, alevin should report it instead of exiting abruptly in the middle of quantification.; Although, alevin does warns:; ```; [2019-07-04 14:12:32.519] [alevinLog] [warning] Found 1 transcripts with duplicate names; ```; >However, the bug i.e. not being able to distinguish duplicate names of the transcript, has been ; fixed and pushed in the develop branch of salmon. Alevin was reporting the error at the stage of quantification too, ; if you dump the logs in a file, but it was invisible in the console as it was over written my complex progress bar. . >Once I process it through the modified pipeline, alevin finished normally and I am attaching the quants generated; by alevin. >Thanks again for forwarding the data.; Best,; —Avi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386#issuecomment-508754845:1876,error,error,1876,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386#issuecomment-508754845,2,['error'],['error']
Availability,"on; ) = 45; rt_sigprocmask(SIG_UNBLOCK, [ABRT], NULL, 8) = 0; write(3, ""[2017-04-05 16:24:38.504] [joint""..., 136) = 136; tgkill(10693, 10693, SIGABRT) = 0; --- SIGABRT (Aborted) @ 0 (0) ---; +++ killed by SIGABRT (core dumped) +++; ```. (371 lines for task 1, 368 for task 2). Basically, both fail at a point where `mmap()` cannot allocate memory. So it definitely looks like a memory issue and I don't know if these information gives you any hints. . ## Bumping memory. Bumping the memory request to 28/30GB. This is a scenario where task 2 seems to work ok but tasks 1 and 3 fail. ```bash; #!/bin/bash; #$ -cwd; #$ -pe local 2; #$ -l mem_free=14G,h_vmem=15G,h_fsize=100G; #$ -N step6-salmon_test12.gsk_phaseII; #$ -o ./logs/salmon_test12.$TASK_ID.txt; #$ -e ./logs/salmon_test12.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/${ID}. strace /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/${ID} 2> logs/strace_test12_${SGE_TASK_ID}.txt. echo ""**** Job ends ****""; date; ```. Again, here ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:78042,echo,echo,78042,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,6,['echo'],['echo']
Availability,"problem you are referring to. Secondly, I apologize for the long time it took me to get back at you. I would like you to know that we have been and are still working on possible solutions for addressing this problem, and here I would like to share some updates with you. . About the success cases, it was nice to know that the current model of Salmon with length correction works pretty well in recovering the right estimates for those ""easier"" cases where one transcript is fully contained in another one. Turning off the length correction, tells the Salmon model not to consider the effective length of each transcript for computing the conditional probabilities of originating a fragment from a transcript. So, for the RNA-seq data there is no reason to turn off this term of the model, and we highly recommend not to use that flag for the bulk RNA-seq abundance estimation with Salmon. Looking more carefully at the 2nd case you have posted as the failure case, it is interesting to see that there is a very nice visual evidence on the super transcript that the long transcript might not be expressed at all. I am referring to the zero coverage regions on the Super Transcript between the regions corresponding to the smaller transcripts, e. g., between POF1 and EMC1. So, we tried a solution that inspects the coverage profile of all transcripts and calculates the probability of observing a zero coverage region on each transcript. If this probability is too low, this would be counted as an evidence for a transcript not being expressed at all. This approach seems to be working fine on this example that you have shared here. however, one problem was that there were considerable number of reads in the sample that were uniquely mapping only to the Super Transcript and turning of the expression of that transcript would result in treating those reads as un-mapped. Furthermore, this problem was more evident when we tried that approach on other larger samples, it seemed that could effect the",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-666512703:1113,failure,failure,1113,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-666512703,2,['failure'],['failure']
Availability,"r -xz --strip-components 1; cmake -DBOOST_ROOT=/global/software/sl-7.x86_64/modules/gcc/7.4.0/boost/1.70.0-gcc -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR; make; ```; And the tail of the output from make:. ```; creating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/; inflating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/int128_numeric_limits.cpp ; -- fetch PUFFERFISH exit code 0; -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11"") ; -- Performing Test Iconv_IS_BUILT_IN; -- Performing Test Iconv_IS_BUILT_IN - Failed; CMake Error at /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find Iconv (missing: Iconv_LIBRARY); Call Stack (most recent call first):; /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindIconv.cmake:120 (find_package_handle_standard_args); CMakeLists.txt:362 (find_package). -- Configuring incomplete, errors occurred!; See also ""/clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/CMakeFiles/CMakeOutput.log"".; See also ""/clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/CMakeFiles/CMakeError.log"".; ```; I'm also attaching the full CMake logs. This is right at the edge of my knowledge, so I'm not 100% sure I got libiconv installed correctly. Compilation completed without error, and I added the bin, include, and lib directories to PATH, CPATH, and LD_LIBRARY_PATH, respectively. [CMakeError.log](https://github.com/COMBINE-lab/salmon/files/6665942/CMakeError.log); [CMakeOutput.log](https://github.com/COMBINE-lab/salmon/files/6665943/CMakeOutput.log)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315:2451,error,errors,2451,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315,4,['error'],"['error', 'errors']"
Availability,"r--r-- 1 lcollado lieber_jaffe 4.7G Feb 20 12:44 merged_fastq/R10002_C29P7ACXX_read2.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 7.1G Feb 20 12:47 merged_fastq/R10003_D19KGACXX.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 7.1G Feb 20 12:50 merged_fastq/R10003_D19KGACXX_read2.fastq.gz; ```. where R10001* is task 1, R10002* is task 2, R10003* is task 3. So it looks like at some point Salmon is asking for some memory based on the input data. ## Strace test with low memory (but above reported usage when requesting 90GB). Mark taught me about `strace` and we ran the following test:. ```bash; #!/bin/bash; #$ -cwd; #$ -pe local 2; #$ -l mem_free=7G,h_vmem=8G,h_fsize=100G; #$ -N step6-salmon_test11.gsk_phaseII; #$ -o ./logs/salmon_test11.$TASK_ID.txt; #$ -e ./logs/salmon_test11.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test11/${ID}. strace /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test11/${ID} 2> logs/strace_${SGE_TASK_ID}.txt. echo ""**** Job ends ****""; date; ```. This requests SGE 2",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:2636,echo,echo,2636,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,6,['echo'],['echo']
Availability,"rapmap works fine with this set of transcripts. indexing:. ```; $ rapmap pseudoindex -k 31 -i /path/to/output -t /path/to/transcripts.fa; RapMap Indexer. [Step 1 of 4] : counting k-mers; counted k-mers for 550000 transcripts^[; Elapsed time: 3526.23s; Clipped poly-A tails from 2375 transcripts. [Step 2 of 4] : marking k-mers; marked kmers for 550000 transcripts; Elapsed time: 1295.67s. [Step 3 of 4] : building k-mers equivalence classes; done! There were 5077370 classes; Elapsed time: 1351.53s. [Step 4 of 4] : finalizing index; finalized kmers for 550000 transcripts; Elapsed time: 4424.16s; Writing the index to test3/; transcriptIDs.size() = 1419746642; parsed 552702 transcripts; There were 1015977902 distinct k-mers (canonicalized); ```. which looks fine, and then alignments are generated and `rapmap` exists with no errors.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/37#issuecomment-175085651:829,error,errors,829,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/37#issuecomment-175085651,1,['error'],['errors']
Availability,"rge/base/lib/python3.9/site-packages/requests/adapters.py"", line 308, in get_connection; raise InvalidProxyURL(""Please check proxy URL. It is malformed""; requests.exceptions.InvalidProxyURL: Please check proxy URL. It is malformed and could be missing the host. `$ /usr/local/bin/conda install salmon`. environment variables:; CIO_TEST=<not set>; CONDA_ROOT=/usr/local/Caskroom/miniforge/base; CURL_CA_BUNDLE=<not set>; INFOPATH=/opt/homebrew/share/info:; MANPATH=/opt/homebrew/share/man::; PATH=/opt/homebrew/bin:/opt/homebrew/sbin:/usr/local/bin:/usr/bin:/bin:/usr; /sbin:/sbin; REQUESTS_CA_BUNDLE=<not set>; SSL_CERT_FILE=<not set>; all_proxy=<set>. active environment : None; user config file : /Users/Benjamin/.condarc; populated config files : /usr/local/Caskroom/miniforge/base/.condarc; conda version : 4.12.0; conda-build version : not installed; python version : 3.9.13.final.0; virtual packages : __osx=12.4=0; __unix=0=0; __archspec=1=arm64; base environment : /usr/local/Caskroom/miniforge/base (writable); conda av data dir : /usr/local/Caskroom/miniforge/base/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/conda-forge/osx-arm64; https://conda.anaconda.org/conda-forge/noarch; package cache : /usr/local/Caskroom/miniforge/base/pkgs; /Users/Benjamin/.conda/pkgs; envs directories : /usr/local/Caskroom/miniforge/base/envs; /Users/Benjamin/.conda/envs; platform : osx-arm64; user-agent : conda/4.12.0 requests/2.27.1 CPython/3.9.13 Darwin/21.5.0 OSX/12.4; UID:GID : 501:20; netrc file : None; offline mode : False. An unexpected error has occurred. Conda has prepared the above report. If submitted, this report will be used by core maintainers to improve; future releases of conda.; Would you like conda to send this report to the core maintainers?. [y/N]: y; Upload did not complete. Thank you for helping to improve conda.; Opt-in to always sending reports (and not see this message again); by running. $ conda config --set report_errors true; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:6216,error,error,6216,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['error'],['error']
Availability,"ript ENST00000384843 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000602568 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000384229 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000420508 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000608317 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000424410 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000417463 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000623071 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000447720 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000436681 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000416615 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000431488 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000411581 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000624642 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000564901 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000617743 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000516211 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000612964 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000448260 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000516334 appeared in the BAM index, but was not in the provided FASTA",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737:1844,ERROR,ERROR,1844,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737,1,['ERROR'],['ERROR']
Availability,"ript ENST00000415237 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000450652 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000384843 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000602568 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000384229 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000420508 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000608317 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000424410 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000417463 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000623071 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000447720 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000436681 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000416615 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000431488 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000411581 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000624642 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000564901 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000617743 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000516211 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000612964 appeared in the BAM index, but was not in the provided FASTA",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737:1642,ERROR,ERROR,1642,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737,1,['ERROR'],['ERROR']
Availability,"ript ENST00000429962 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000415237 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000450652 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000384843 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000602568 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000384229 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000420508 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000608317 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000424410 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000417463 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000623071 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000447720 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000436681 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000416615 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000431488 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000411581 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000624642 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000564901 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000617743 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000516211 appeared in the BAM index, but was not in the provided FASTA",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737:1541,ERROR,ERROR,1541,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737,1,['ERROR'],['ERROR']
Availability,"ript ENST00000450652 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000384843 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000602568 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000384229 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000420508 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000608317 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000424410 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000417463 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000623071 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000447720 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000436681 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000416615 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000431488 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000411581 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000624642 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000564901 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000617743 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000516211 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000612964 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000448260 appeared in the BAM index, but was not in the provided FASTA",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737:1743,ERROR,ERROR,1743,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737,1,['ERROR'],['ERROR']
Availability,"ript ENST00000630276 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000429962 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000415237 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000450652 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000384843 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000602568 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000384229 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000420508 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000608317 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000424410 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000417463 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000623071 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000447720 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000436681 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000416615 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000431488 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000411581 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000624642 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000564901 appeared in the BAM index, but was not in the provided FASTA file; ERROR: Transcript ENST00000617743 appeared in the BAM index, but was not in the provided FASTA",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737:1440,ERROR,ERROR,1440,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267505737,1,['ERROR'],['ERROR']
Availability,rrorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight errorminEQClassWeight,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266888582:1548,error,errorminEQClassWeight,1548,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266888582,20,['error'],['errorminEQClassWeight']
Availability,"rs/hg38/salmon_test4/${ID}; **** Job ends ****; Wed Mar 29 14:58:05 EDT 2017. ```. ### SGE email example info. ```; Job-array task 110316.1 (step6-salmon_test4.gsk_phaseII) Complete; User = lcollado; Queue = shared.q@compute-067.cm.cluster; Host = compute-067.cm.cluster; Start Time = 03/29/2017 14:53:42; End Time = 03/29/2017 14:58:05; User Time = 00:00:00; System Time = 00:05:39; Wallclock Time = 00:04:23; CPU = 00:05:39; Max vmem = 24.202G; Exit Status = 0; ```. Note that in this case, it didn't read the maximum memory requested (16 * 3 = 48 GB). ## Large memory, p 1. ### Bash. ```bash; #!/bin/bash; #$ -cwd; #$ -l mem_free=80G,h_vmem=90G,h_fsize=100G; #$ -N step6-salmon_test5.gsk_phaseII; #$ -pe local 1; #$ -o ./logs/salmon_test5.$TASK_ID.txt; #$ -e ./logs/salmon_test5.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 23",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:7651,echo,echo,7651,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,6,['echo'],['echo']
Availability,"ry easy to calculate, although getting one number for the full sample might be little tricky since the mapping rate might have large variance across the sample, but it would be an interesting plot to generate, do let us know how it looks in your case.; If you run Alevin with `--dumpFeatures` flag, alevin will generate a file `featureDump.txt`, whose first column will be the per CB level mapping rate i.e. `#mapped reads/#raw reads`. If you wan't absolute values for per-CB reads and mapped reads, it should be in the file `filtered_cb_frequency.txt` and `mappedUMI.txt` respectively.; * `re: cellranger subsampling:` Correct me if I am wrong, when you say cellranger subsampling, do you mean the `cellranger aggregate` pipeline? It's possible you are talking about some other step which I am not aware of but if it's `aggregate` then I think it happens downstream of all the quantification. Indeed coverage bias correction is an important part of the aggregation step but in general it's not the only one and that's why we recommend using the `Seurat` package downstream of the Alevin quantified matrices. We will be more than happy to write a tutorial on, ""how to perform batch correction downstream of Alevin"" but in summary the following steps would be the gist of the process.; - Use Alevin w/o any modification to the `fastq` on both of your sample to generate the gene count matrices. (We have made a major upgrade to the Alevin. We'd recommend using [v0.12.0-alpha](https://github.com/COMBINE-lab/salmon/tree/v0.12.0-alpha) for now, we are planning to make an official release before the end of this week, currently you can use pre-release. Unfortunately, not available on conda yet).; - Import Alevin count matrices into R using [this](https://combine-lab.github.io/alevin-tutorial/2018/alevin-seurat/) tutorial .; - Use [this](https://satijalab.org/seurat/immune_alignment.html) to perform the batch correction. ; We do realize it's currently complicated to use things downstream of Alevin",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433169468:1842,down,downstream,1842,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433169468,2,['down'],['downstream']
Availability,"salmon does run and completes normally so I guess it's just the warning; from jemalloc. . Is this expected for sailfish also? I get the same message about malloc.; . On 2017-04-18 09:55, Rob Patro wrote:. > I think that's the right binary. You can check the sha256 sum:; > ; > rob at Robs-MacBook-Pro in ~/Salmon-0.8.2_macOX_10.12; > $ shasum -a256 bin/salmon; > 7be1c57e1a83956cc9c18f75aed3b2376c93595de7dec215041fe3065528b527 bin/salmon; > ; > You can also check the libraries that salmon is seeing:; > ; > rob at Robs-MacBook-Pro in ~/Salmon-0.8.2_macOX_10.12; > $ otool -L bin/salmon; > bin/salmon:; > /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.8); > /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.0.0); > /usr/lib/libbz2.1.0.dylib (compatibility version 1.0.0, current version 1.0.5); > @rpath/libtbbmalloc_proxy.dylib (compatibility version 0.0.0, current version 0.0.0); > @rpath/libtbbmalloc.dylib (compatibility version 0.0.0, current version 0.0.0); > @rpath/libtbb.dylib (compatibility version 0.0.0, current version 0.0.0); > /usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 307.4.0); > ; > but, again, the library of interest with respect to this message (jemalloc) is linked statically. Out of curiosity, is this message a warning or error (i.e. does salmon run or return a non-zero exit code). The message you're seeing is actually expected if jemalloc was compiled without debug mode turned off (because apple did some funny business with the allocator in OS X 10.12). ; > ; > --; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub [1], or mute the thread [2].; . Links:; ------; [1]; https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294852033; [2]; https://github.com/notifications/unsubscribe-auth/AA45u0ozBxeE-i6orJcGrgIw4NstAXNvks5rxMDegaJpZM4Ktuq4",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294858583:1329,error,error,1329,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294858583,1,['error'],['error']
Availability,"sam-xlate is actually the only tool that I'm aware of to perform this operation on an existing BAM file. I've heard of people using it with success. Of course, I'd also think of doing an analysis with the original reads to validate concordance. Note: if you don't have the original reads, you can do a BAM -> FASTQ conversion to recover the read sequences and then feed them to Salmon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/131#issuecomment-293316682:329,recover,recover,329,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/131#issuecomment-293316682,1,['recover'],['recover']
Availability,"script set and the vector of conditional probability bins into which the mapping falls with respect to each transcript in the equivalence class. This means that range-factorized equivalence classes can have multiple classes of fragments that map to the same set of transcripts, but with different conditional probabilities. Additionally, for each bin, the average conditional probability of fragments arising from that bin is maintained. What you are seeing printed out are the transcript sets, followed by the conditional bin indexes. Starting in the next release (and currently in the develop branch), we've cleaned up the interaction of the range-factorized equivalence classes with the `--dumpEq` and `--dumpEqWeights` flags. If you run with the `--dumpEqWeights` flags, salmon will dump the transcript sets, followed by the conditional probability vector, followed by the fragment count. If you run with the `--dumpEq` flag, it will collapse all of the range-factorized equivalence classes into ""simple"" equivalence classes by combining classes with the same transcript set (but different conditional probability vectors) and summing the corresponding fragment counts. This, of course, is a lossy transformation, and the equivalence classes will no longer represent the relevant conditional probabilities used during inference. Also, since the range-factorized equivalence classes allow for (but probabilistically down-weight) non-optimal mappings of fragments to transcripts, these collapsed equivalence classes will tend to have bigger labels (i.e. more transcripts) which might be difficult to properly interpret without the relevant conditional probabilities. The `--hardFilter` flag will filter out transcripts that have non-best alignment scores (a big component of the conditional fragment probability), but that can have a negative effect on the modeling and inference. We'll update the documentation accordingly when we cut the next release to make all of these interactions more clear.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/402#issuecomment-517041654:2324,down,down-weight,2324,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/402#issuecomment-517041654,2,['down'],['down-weight']
Availability,"t to generate, do let us know how it looks in your case.; If you run Alevin with `--dumpFeatures` flag, alevin will generate a file `featureDump.txt`, whose first column will be the per CB level mapping rate i.e. `#mapped reads/#raw reads`. If you wan't absolute values for per-CB reads and mapped reads, it should be in the file `filtered_cb_frequency.txt` and `mappedUMI.txt` respectively.; * `re: cellranger subsampling:` Correct me if I am wrong, when you say cellranger subsampling, do you mean the `cellranger aggregate` pipeline? It's possible you are talking about some other step which I am not aware of but if it's `aggregate` then I think it happens downstream of all the quantification. Indeed coverage bias correction is an important part of the aggregation step but in general it's not the only one and that's why we recommend using the `Seurat` package downstream of the Alevin quantified matrices. We will be more than happy to write a tutorial on, ""how to perform batch correction downstream of Alevin"" but in summary the following steps would be the gist of the process.; - Use Alevin w/o any modification to the `fastq` on both of your sample to generate the gene count matrices. (We have made a major upgrade to the Alevin. We'd recommend using [v0.12.0-alpha](https://github.com/COMBINE-lab/salmon/tree/v0.12.0-alpha) for now, we are planning to make an official release before the end of this week, currently you can use pre-release. Unfortunately, not available on conda yet).; - Import Alevin count matrices into R using [this](https://combine-lab.github.io/alevin-tutorial/2018/alevin-seurat/) tutorial .; - Use [this](https://satijalab.org/seurat/immune_alignment.html) to perform the batch correction. ; We do realize it's currently complicated to use things downstream of Alevin and are working constantly on improving the overall pipeline to make the analyses as smooth as possible. If you happen to write a tutorial of your own on doing the analyses, we'd be happy to inc",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433169468:1972,down,downstream,1972,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433169468,2,['down'],['downstream']
Availability,"t:; https://nevada.box.com/s/b7wx8rnwae4dzak6m04u0lgxalv1kxh6. Here is a link to the transcriptome that was used in the build: Sorry my NevadaBox is very slow copying many files so I have copied the transcriptome again to the following Dropbox folder:. https://www.dropbox.com/s/3ux7lz84qrx5ybd/CS_clean.primary.corrected_loci.CDS.fasta?dl=0. Thanks for your help!. Grant. Grant R. Cramer; Professor; Department of Biochemistry and Molecular Biology, Howard Building Room 205, Mail Stop 330; University of Nevada, Reno; Reno, NV 89557; (775) 784-4204; cramer@unr.edu<mailto:cramer@unr.edu>; http://www.ag.unr.edu/cramer/. On Mar 19, 2018, at 1:43 PM, Rob Patro <notifications@github.com<mailto:notifications@github.com>> wrote:. Hi @grantcramer<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fgrantcramer&data=01%7C01%7Ccramer%40unr.edu%7Cfa8af76ea22140f38e4008d58dda106b%7C523b4bfc0ebd4c03b2b96f6a17fd31d8%7C1&sdata=Rv5JuLm0kNlPPfQOshcc%2FUGmEC2g%2B0wIXVmdmIXnbCk%3D&reserved=0>,. Is this the same index you used before? Were there any issues with indexing? Could you provide a link to the transcriptome you are mapping against? We could see if we can reproduce the error on our end. --Rob. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FCOMBINE-lab%2Fsalmon%2Fissues%2F209%23issuecomment-374368312&data=01%7C01%7Ccramer%40unr.edu%7Cfa8af76ea22140f38e4008d58dda106b%7C523b4bfc0ebd4c03b2b96f6a17fd31d8%7C1&sdata=5xxIgJXM4Fks3IGZkGjQ5%2FR7SAaqb%2F5TvMudf4jZTio%3D&reserved=0>, or mute the thread<https://na01.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAj0RiwrvJNIRo4GQHosqdQGVHLIG-iFYks5tgBhsgaJpZM4Sw28q&data=01%7C01%7Ccramer%40unr.edu%7Cfa8af76ea22140f38e4008d58dda106b%7C523b4bfc0ebd4c03b2b96f6a17fd31d8%7C1&sdata=mTKTIF9dFJToq9zGkIBQF%2FaET1Hu42%2F3QHiFmxpakNc%3D&reserved=0>.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/209#issuecomment-374383623:1464,error,error,1464,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/209#issuecomment-374383623,1,['error'],['error']
Availability,"tead and be more positionally flexible. But deciding how many indel bases are allowable, and presumably doing multiple passes through the data to establish an include-list could be time-consuming. Further, the zUMIs developer rightly mentions [in this thread](https://github.com/sdparekh/zUMIs/issues/63) that there are likely going to be _many_ unused barcode combinations this way, so lots of time could be spent looking for ""cells"" that don't actually exist in the data. The authors of the paper from which our test dataset was derived describe in their methods using a Drop-seq computational framework, so I'm not sure which approach theirs is more similar to. . The simplest approach here is certainly the automatic detection, but it will come at the cost of losing meaningful reads to frameshift errors. . My guess is this falls well out of the scope of alevin, but if you're interested in improving on that, there may be a middle ground between the two approaches above, one that I'm not sure if your group or others have attempted for other methods: we could essentially do a 2-pass barcode detection. The first pass would restrict based on positions like we're already doing, and establish an include-list of possible barcodes seen in the data. Then we could pass through the barcode sequences a second time, looking only for those sequence combinations, but allowing 1-2bp flexibility in the positions they occur, potentially rescuing some of the ones missed during the first pass. This would get around the issue of searching for thousands (or more) barcodes that never exist. . However, for your above sequences in red, we would still need to somehow collapse the barcodes `GATAGACA`, `ATAGACAT`, and `ATAGACAG`, but perhaps that can be achieved with some Levenshtein distance flexibility using the entire 24bp barcode sequence detected...? . Anyway sorry for the brainstorming dump, but the short answer is: we're probably stuck losing a bunch of reads due to positional errors like this",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-985554883:2489,error,errors,2489,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-985554883,2,['error'],['errors']
Availability,"thank you @alpapan, your post in this open issue had the information that helped me build the latest version of salmon (1.10.0 at this time) on Ubuntu 20 and 22. The documentation at https://salmon.readthedocs.io/en/latest/building.html#requirements-for-building-from-source was not helping with the build errors reported here, which is what I encountered too. . In my case the problem was that I had a custom build of libstaden installed (that I did not want to remove) that cmake was picking up, but which triggered those many libcurl linking errors (misleadingly I would say, since it seems to be related to the way libstaden is installed, not directly libcurl related, which is fine on my system). Here it is the build recipe that worked for me on Ubuntu 20/22:; ```; sudo apt install libboost-iostreams-dev libboost-chrono-dev libboost-filesystem-dev \; libboost-timer-dev libboost-program-options-dev ; PREFIX=$HOME/sw # or wherever you want it; mkdir build && cd build; cmake -DNO_IPO=TRUE -DFETCH_STADEN=TRUE -DCMAKE_INSTALL_PREFIX=${PREFIX} ..; make -j6; make install; ```; Note that the installation message states:; `Please add $PREFIX/lib to your LD_LIBRARY_PATH` ; .. but that does not seem to be needed, the linker seems to resolve those libraries properly in the installation directory.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/425#issuecomment-1445139922:306,error,errors,306,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/425#issuecomment-1445139922,2,['error'],['errors']
Availability,"thanks, I find my error, it was also the extract of the name. ; thanks for your advice!; Tiphaine",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/644#issuecomment-815384486:18,error,error,18,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/644#issuecomment-815384486,1,['error'],['error']
Availability,"the fact that this `Exception : [Error in function boost::math::digamma(double): numeric overflow]` is printing out means that it is being caught by the ""catch-all"" exception handling [here](https://github.com/COMBINE-lab/salmon/blob/develop/src/SalmonQuantify.cpp#L2889). Could you also make sure that this thing isn't triggered if you don't pass `--useVBOpt` (where no digamma should be called)?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393629501:33,Error,Error,33,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393629501,1,['Error'],['Error']
Availability,"the item.**; **WARNING: Target ""unitTests"" requests linking to directory ""/users/work/jake/bin/zlib-1.2.11/"". Targets may link only to libraries. CMake is dropping the item.**. So I actually went back a step and check my initial cmake command in the ../salmon-0.8.2/build/ directory. It also had the same issue and therefore wasn't building correctly. I started the install again from ../salmon-0.8.2/build/ using the following: . cmake -DBOOST_ROOT=/users/work/jake/bin/boost_1_64_0/ -DZLIB_LIBRARY=/users/work/jake/bin/zlib-1.2.11/zlib.h .. . It seemed to work nicely and I got all the build files to propagate into the ../salmon-0.8.2/build/ directory. From here I ran 'make' which did a whole bunch of things I hadn't seen it do yet, so assumably it was working as intended. This is until it got to the following stage:. Scanning dependencies of target libbwa; [ 48%] Creating directories for 'libbwa'; [ 49%] Performing download step for 'libbwa'; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 100 125 0 125 0 0 167 0 --:--:-- --:--:-- --:--:-- 167; 0 0 0 219k 0 0 123k 0 --:--:-- 0:00:01 --:--:-- 326k; bwa-master.tar.gz: OK; bwa-0.7.12.3/.gitignore; bwa-0.7.12.3/.travis.yml; bwa-0.7.12.3/COPYING; bwa-0.7.12.3/ChangeLog; bwa-0.7.12.3/Makefile; bwa-0.7.12.3/NEWS.md; bwa-0.7.12.3/QSufSort.c; bwa-0.7.12.3/QSufSort.h; bwa-0.7.12.3/README-alt.md; bwa-0.7.12.3/README.md; bwa-0.7.12.3/bamlite.c; bwa-0.7.12.3/bamlite.h; bwa-0.7.12.3/bntseq.c; bwa-0.7.12.3/bntseq.h; bwa-0.7.12.3/bwa.1; bwa-0.7.12.3/bwa.c; bwa-0.7.12.3/bwa.h; bwa-0.7.12.3/bwakit/; bwa-0.7.12.3/bwakit/README.md; bwa-0.7.12.3/bwakit/bwa-postalt.js; bwa-0.7.12.3/bwakit/run-HLA; bwa-0.7.12.3/bwakit/run-bwamem; bwa-0.7.12.3/bwakit/run-gen-ref; bwa-0.7.12.3/bwakit/typeHLA-selctg.js; bwa-0.7.12.3/bwakit/typeHLA.js; bwa-0.7.12.3/bwakit/typeHLA.sh; bwa-0.7.12.3/bwamem.c; bwa-0.7.12.3/bwamem.h; bwa-0.7.12.3/bwamem_extra.c; bwa-0.7.12.3/bwamem_pair.c; bwa-0.7.12.3/bwape.c; bwa",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873:1205,down,download,1205,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873,2,['down'],['download']
Availability,"the new json files from the latest index build are not empty. and ; salmon quant is running now, so far no error!; Thanks for the quick response!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/251#issuecomment-404961325:107,error,error,107,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/251#issuecomment-404961325,1,['error'],['error']
Availability,"the unique-region-derived prior... . But as I think about it... I realize I don't *really* know the underlying algorithmic details of the existing implements. But it would be **amazing** if you could incorporate this type of information into Salmon. I really hope some progress can be made here! . Thanks again for helping me out and showing interest in the motivating problem!. P.S.,; As a total aside, I've been working with this large yeast RNAseq dataset and eventually reached the same conclusions as the selective alignment paper and other recent ones; that is, the most important aspect for getting good transcript-level quantifications is not aligning to the genome vs. aligning to the transcriptome, but rather having an accurate transcriptome annotation to begin with. I saw **huge** gains from updating my transcriptome annotation to include UTRs, especially given differences in coverage bias between samples... for example, if the actual transcript is 500 bp but the gene body is only 200 bp, slight coverage biases can propagate non-linearly and cause huge problems downstream. This got me thinking... if the end goal is differential expression analysis (and obviously this is not *always* the end goal), what if we just discard the notion of a pre-defined transcriptome and stick with equivalence classes, then do differential expression analysis on the equivalence classes themselves (perhaps calculated against the whole genome... this is feasible in yeast, maybe not in humans), then only after discovering significant differential expression one could work backwards to interpret the changes. Is this a crazy idea? Or not crazy at all and already routine? I know salmon can dump the counts to each equivalence class already so it's not hard for me to *do* what I just described, but I'm wondering if you have any opinions/insights into this idea. Thanks again!. ![snr40_isoforms](https://user-images.githubusercontent.com/10292386/81047610-a17c1880-8e6f-11ea-8012-a6695afd68db.png)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-623963851:4650,down,downstream,4650,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-623963851,2,['down'],['downstream']
Availability,"too many mismatches |	0; % of reads unmapped: too many mismatches |	0.00%; Number of reads unmapped: too short |	0; % of reads unmapped: too short |	0.00%; Number of reads unmapped: other |	4006; % of reads unmapped: other |	0.00%; CHIMERIC READS:; Number of chimeric reads |	0; % of chimeric reads |	0.00%; ```. It was really better but I am afraid that I have really low quality (I try the parameter 0.3 when I wrote these lines ), I filtered again with samtools -f 2 -F3840 and the salmon counts which is still very low : 24323720 counts. I used samtools flagstat to see what happens after the filter and we get this?; ```; 48983692 + 0 in total (QC-passed reads + QC-failed reads); 0 + 0 secondary; 0 + 0 supplementary; 0 + 0 duplicates; 48983692 + 0 mapped (100.00% : N/A); 48983692 + 0 paired in sequencing; 24491846 + 0 read1; 24491846 + 0 read2; 48983692 + 0 properly paired (100.00% : N/A); 48983692 + 0 with itself and mate mapped; 0 + 0 singletons (0.00% : N/A); 0 + 0 with mate mapped to a different chr; 0 + 0 with mate mapped to a different chr (mapQ>=5); ```. I don't understand why I'm losing so many counts, is it because I'm filtering? But still I have to filter to get the properly pairs... For the sorting it's totally my fault I read the doc wrong but even by not sorting I get very low results not usable less than 26%. The experimentation is done on oak, on 4 times 3 late samples and 3 early samples of dormancy were recovered and we made a TruSeq stranded illumina on these samples. I use a gene model built by my team with the 25808 genes that the oak has as reference. For this part ""Is this a polyA selection or ribosomal depletion prep"" I don't know, I'll find out. To be honest I am totally lost because I don't understand what's wrong in my analysis.... Thank you very much for your help once again . Kisekya. EDIT:. I discover that I have 59 millions of duplicates in my data...; I tried to delete it after filtering my proper pair I get bad records 38% of mapping ...",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/676#issuecomment-874540664:4633,fault,fault,4633,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/676#issuecomment-874540664,4,"['fault', 'recover']","['fault', 'recovered']"
Availability,"ut then we can cross-check it with my explicit list above:. ```; build-essential; git ; libboost-all-dev ; liblzma-dev ; libbz2-dev ; cmake ; zlib1g-dev ; curl ; unzip ; wget ; libcurl4-openssl-dev ; libtbb-dev ; libtbb12 ; liblzma-dev ; libjemalloc2 ; pkg-config ; libgff-dev; ```. One thing I noticed during build is that, while I included `libjemalloc2` here, the salmon build procedure still downloaded and built `jemalloc`. However, I don't _think_ jemalloc is the thing causing the segfault. Regarding dependencies that can't be used — the current `libstaden` is behind the upstream release. The upstream release contains an important bug fix for a bug (and suggested fix that we proposed to the developer) upon which we rely. More importantly, afaik there is no relevant `libpufferfish-dev` package (we certainly have not made one), and so there is not even e.g. a check in the `CMakeLists.txt` file. Salmon's build always tries to run `fetchPufferfish.sh` to download the relevant `pufferfish` source files needed to build `salmon`. Critically, the relevant `pufferfish` dependencies and `salmon` releases move in lockstep. Each new `salmon` release it accompanied by a new tag in the `pufferfish` repo (so that the specific source used to build a given `salmon` release is fixed and easily trackable). So, I think the easiest way to move forward is to:. * do a diff of my list of packages above with what is pulled in by `apt build-dep salmon`. * figure out why, even when `libjemalloc2` is installed, the build system tries to build `jemalloc` itself (maybe we need the dev package?). * determine what folks want to do upstream about the lockstep pufferfish dependency. Right now, the `fetchPufferfish.sh` script pulls a tagged tarball from github and checks that the sha matches, and moves the relevant source files into place. This is true both when we build our own releases as well as when `salmon` is built for other distribution channels like `conda`. While I am happy to have someone",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233:1070,down,download,1070,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233,1,['down'],['download']
Availability,what's the error you are getting @rbenel ?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/325#issuecomment-443515116:11,error,error,11,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/325#issuecomment-443515116,1,['error'],['error']
Availability,"which we are making the inference are actually changing. It is possible e.g. that some uniquely mapped reads may not be chosen in some bootstrap sample (since we are re-sampling the observed read count, but doing so _with replacement_), and so the estimates of sets of related isoforms will change in those samples. Thus, since the observations themselves are changing, we expect the estimates to display greater variance. In fact, this is the main goal of performing the bootstrapping (or Gibbs sampling) — to estimate the uncertainty due to inference if we had observed many reads coming from the same underlying ""population"" as the ones we have in our specific sample, but subject to the random sampling effect induced by sequencing and all of the subsequent downstream effects it has on our estimator (i.e. salmon's computational procedure for estimating transcript abundance via the variational Bayesian optimization algorithm). From the practical perspective, one would not necessarily expect taking the average of the bootstrap estimates to produce a more accurate point estimate than taking the normal point estimate produced by salmon. The main purpose of performing the Gibbs sampling or bootstrapping is to allow accurate assessment of the _posterior variance_ of the point estimates (to build things like credible intervals). The mean of the bootstrap estimates should be highly-correlated with the normal point estimates, but I wouldn't expect it to be identical. Also, you might try seeing what you get with a different summary statistic, like the median. However, the main point of producing this information is to allow you to assess the posterior variance, and also to pass these samples to uncertainty-aware differential analysis tools, like [swish](https://academic.oup.com/nar/article/47/18/e105/5542870), downstream of salmon. . Anyway, thanks again for the detailed report! We'll look into the logging issue, and please let me know if my description above answers your question.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/466#issuecomment-568828362:3218,down,downstream,3218,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/466#issuecomment-568828362,2,['down'],['downstream']
Availability,"with only the -l A and --useVBOpt options, it processes all the reads but fails later on:. processed 67500000 fragmentsointLog] [info] Automatically detected most likely library type as IU; hits: 230221778, hits per frag: 3.41111. [2018-05-30 19:12:47.976] [jointLog] [info] Thread saw mini-batch with a maximum of 1.48% zero probability fragments; [2018-05-30 19:12:47.985] [jointLog] [info] Thread saw mini-batch with a maximum of 1.48% zero probability fragments; [2018-05-30 19:12:48.029] [jointLog] [info] Thread saw mini-batch with a maximum of 1.46% zero probability fragments; [2018-05-30 19:12:48.068] [jointLog] [info] Thread saw mini-batch with a maximum of 1.44% zero probability fragments; [2018-05-30 19:12:48.396] [jointLog] [info] Computed 425882 rich equivalence classes for further processing; [2018-05-30 19:12:48.396] [jointLog] [info] Counted 61485857 total reads in the equivalence classes; [2018-05-30 19:12:48.399] [jointLog] [info] Mapping rate = 90.4806%. [2018-05-30 19:12:48.399] [jointLog] [info] finished quantifyLibrary(); [2018-05-30 19:12:48.402] [jointLog] [info] Starting optimizer; [2018-05-30 19:12:48.586] [jointLog] [info] Marked 1 weighted equivalence classes as degenerate; [2018-05-30 19:12:48.608] [jointLog] [info] iteration = 0 | max rel diff. = 63.2619; Exception : [Error in function boost::math::digamma<double>(double): numeric overflow]; salmon quant was invoked improperly.; For usage information, try salmon quant --help; Exiting. Sorry but I won't be able to look into this more today...",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393243827:1313,Error,Error,1313,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393243827,1,['Error'],['Error']
Availability,"xpect this resampling to be similar to if we re-sampled _with replacement_ from the original set of input reads. That is, we are re-sampling from our population sample — the observed set of reads — to estimate the variance due to inference. So, for the bootstrap re-samplings, we expect significantly more variance than between subsequent runs of salmon, because the observations from which we are making the inference are actually changing. It is possible e.g. that some uniquely mapped reads may not be chosen in some bootstrap sample (since we are re-sampling the observed read count, but doing so _with replacement_), and so the estimates of sets of related isoforms will change in those samples. Thus, since the observations themselves are changing, we expect the estimates to display greater variance. In fact, this is the main goal of performing the bootstrapping (or Gibbs sampling) — to estimate the uncertainty due to inference if we had observed many reads coming from the same underlying ""population"" as the ones we have in our specific sample, but subject to the random sampling effect induced by sequencing and all of the subsequent downstream effects it has on our estimator (i.e. salmon's computational procedure for estimating transcript abundance via the variational Bayesian optimization algorithm). From the practical perspective, one would not necessarily expect taking the average of the bootstrap estimates to produce a more accurate point estimate than taking the normal point estimate produced by salmon. The main purpose of performing the Gibbs sampling or bootstrapping is to allow accurate assessment of the _posterior variance_ of the point estimates (to build things like credible intervals). The mean of the bootstrap estimates should be highly-correlated with the normal point estimates, but I wouldn't expect it to be identical. Also, you might try seeing what you get with a different summary statistic, like the median. However, the main point of producing this inf",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/466#issuecomment-568828362:2154,down,downstream,2154,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/466#issuecomment-568828362,2,['down'],['downstream']
Availability,y fragments; [2018-07-27 16:51:47.948] [jointLog] [info] Thread saw mini-batch with a maximum of 1.80% zero probability fragments; [2018-07-27 16:51:47.948] [jointLog] [info] Thread saw mini-batch with a maximum of 1.72% zero probability fragments; [2018-07-27 16:51:47.948] [jointLog] [info] Thread saw mini-batch with a maximum of 1.64% zero probability fragments; [2018-07-27 16:51:47.948] [jointLog] [info] Thread saw mini-batch with a maximum of 1.84% zero probability fragments; [2018-07-27 16:51:47.948] [jointLog] [info] Thread saw mini-batch with a maximum of 1.68% zero probability fragments; [2018-07-27 16:51:47.967] [jointLog] [info] Thread saw mini-batch with a maximum of 1.70% zero probability fragments; [2018-07-27 16:51:47.978] [jointLog] [info] Thread saw mini-batch with a maximum of 1.76% zero probability fragments; [2018-07-27 16:51:48.009] [jointLog] [info] Thread saw mini-batch with a maximum of 1.64% zero probability fragments; [2018-07-27 16:51:48.042] [jointLog] [info] Thread saw mini-batch with a maximum of 1.66% zero probability fragments; [2018-07-27 16:51:48.047] [jointLog] [info] Thread saw mini-batch with a maximum of 1.86% zero probability fragments; [2018-07-27 16:51:48.088] [jointLog] [info] Thread saw mini-batch with a maximum of 1.74% zero probability fragments; [2018-07-27 16:51:48.089] [jointLog] [info] Thread saw mini-batch with a maximum of 1.84% zero probability fragments; [2018-07-27 16:51:48.118] [jointLog] [info] Thread saw mini-batch with a maximum of 1.90% zero probability fragments. [2018-07-27 16:51:48.473] [jointLog] [info] Computed 457276 rich equivalence classes for further processing; [2018-07-27 16:51:48.473] [jointLog] [info] Counted 179109410 total reads in the equivalence classes . [2018-07-27 16:51:48.491] [jointLog] [info] Mapping rate = 74.748%. [2018-07-27 16:51:48.491] [jointLog] [info] finished quantifyLibrary(); [2018-07-27 16:51:48.507] [jointLog] [info] Starting optimizer; Segmentation fault (core dumped). ```,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409427898:6339,fault,fault,6339,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/261#issuecomment-409427898,1,['fault'],['fault']
Availability,"yes, I am using the 10x whitelist downloaded from their website. Thanks for clarifying it. so should I not use --whitelist at all and let alevin determine what BCs to use? 50% of reads throwing away seems to be too much. what percentage do you observe? Thanks! without whitelist and use --expectCells 3000 gives me error] Can't find right Boundary. I should do --dumpFeatures and --noQuant to get the whitelist first?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-458788769:34,down,downloaded,34,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-458788769,2,"['down', 'error']","['downloaded', 'error']"
Availability,"~~~~~~~~~~~~~~~~~~~; At global scope:; cc1plus: warning: unrecognized command line option ‘-Wno-unused-local-typedef’; cc1plus: warning: unrecognized command line option ‘-Wno-unused-local-typedef’; make[2]: *** [src/CMakeFiles/salmon.dir/SalmonQuantifyAlignments.cpp.o] Error 1; make[1]: *** [src/CMakeFiles/salmon.dir/all] Error 2; make: *** [all] Error 2; ```. I also tried installing it through bioconda. Apparently, it installs it correctly, but when I try to use Trinity (I'm installing Salmon as a Trinity requirement) this is what happens: . ```; salmon: /opt/conda/conda-bld/salmon_1528409373758/work/salmon-0.10.2/include/eigen3/Eigen/src/Core/util/Memory.h:161: void* Eigen::internal::aligned_malloc(std::size_t): Assertion `(size<16 || (std::size_t(result)%16)==0) && ""System's malloc returned an unaligned pointer. Compile with EIGEN_MALLOC_ALREADY_ALIGNED=0 to fallback to handmade alignd memory allocator.""' failed.; Error, cmd:; salmon --no-version-check quant -i /home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out/Trinity.fasta.tmp.salmon.idx -l U -r /home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out/single.fa -o salmon_outdir -p 1 --minAssignedFrags 1; died with ret (6) at /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/../../PerlLib/Process_cmd.pm line 19.; Process_cmd::process_cmd(""salmon --no-version-check quant -i /home/federicoplazzi/test_""...) called at /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/salmon_runner.pl line 26; Trinity run failed. Must investigate error above.; warning, cmd: /usr/local/trinityrnaseq-Trinity-v2.6.6/util/support_scripts/../../Trinity --single ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa"" --output ""/home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out"" --CPU 1 --max",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403:1706,Error,Error,1706,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403,1,['Error'],['Error']
Deployability," #$ -pe local 2; #$ -l mem_free=14G,h_vmem=15G,h_fsize=100G; #$ -N step6-salmon_test12.gsk_phaseII; #$ -o ./logs/salmon_test12.$TASK_ID.txt; #$ -e ./logs/salmon_test12.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/${ID}. strace /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/${ID} 2> logs/strace_test12_${SGE_TASK_ID}.txt. echo ""**** Job ends ****""; date; ```. Again, here is the `strace` output for task 1 (411 lines):. ```; execve(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", [""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""quant"", ""-i"", ""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""-p"", ""1"", ""-l"", ""ISR"", ""-1"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-2"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-o"", ""/dcl01/lieber/ajaffe/lab/libd_al""...], [/* 107 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Soft",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:78745,pipeline,pipeline,78745,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability," -DNO_IPO=TRUE .. # GCC still doesn't handle LTO robustly; $ make -j8; $ make install; $ make test; ```. which leads to the output. ```; root@fd877e359439:/salmon/build# make install; [ 7%] Built target libcereal; [ 13%] Built target libtbb; [ 16%] Built target ntcard; [ 19%] Built target graphdump; [ 27%] Built target twopaco; [ 29%] Built target ksw2pp_sse2; [ 32%] Built target ksw2pp_sse4; [ 37%] Built target ksw2pp_basic; [ 38%] Built target ksw2pp; [ 59%] Built target puffer; [ 73%] Built target salmon_core; [ 76%] Built target alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc.so; -- Installing: /salmon/lib/libtbbmalloc.so.2; -- Installing: /salmon/lib/libtbbmalloc.so.2.5; -- Installing: /salmon/lib/libtbbmalloc_proxy.so; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2.5; -- Installing: /salmon/bin/salmon; -- Installing: /salmon/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon/bin to your PATH; Please add /salmon/lib to your LD_LIBRARY_PATH; ============================================================",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:1608,Install,Installing,1608,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,2,"['Install', 'release']","['Installing', 'release']"
Deployability," -pe local 16; #$ -o ./logs/salmon_test4.$TASK_ID.txt; #$ -e ./logs/salmon_test4.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 16 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 14:53:43 EDT 2017; **** JHPCE info ****; User: lcollado; Job id: 110316; Job name: step6-salmon_test4.gsk_phaseII; Hostname: compute-067; Task id: ; Version Info: This is the most recent version of Salmon.; ### salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 16 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fas",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:4938,pipeline,pipeline,4938,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['pipeline'],['pipeline']
Deployability," /proc/version; Linux version 4.9.0-0.bpo.6-amd64 (debian-kernel@lists.debian.org) (gcc version 4.9.2 (Debian 4.9.2-10+deb8u1) ) #1 SMP Debian 4.9.82-1+deb9u3~bpo8+1 (2018-03-22). ~/data/PCSI/PC10X/paper/pbmc$ g++ -v; Using built-in specs.; COLLECT_GCC=g++; COLLECT_LTO_WRAPPER=/u/user/local/libexec/gcc/x86_64-unknown-linux-gnu/5.4.0/lto-wrapper; Target: x86_64-unknown-linux-gnu; Configured with: ./configure --prefix=/u/user/local; Thread model: posix; gcc version 5.4.0 (GCC); ```. ```; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe-path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7e0f4700 (LWP 14274)]; Version Info: ### A newer version of Salmon is available. ####; [Thread 0x7fff7e0f4700 (LWP 14274) exited]; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; [New Thread 0x7fff7d273700 (LWP 14275)]; Logs will be written to pbmc4k/alevin/logs; [New Thread 0x7ffefc3f1700 (LWP 14276)]; [New Thread 0x7ffe7b56f700 (LWP 14277)]; [New Thread 0x7ffdfa6ed700 (LWP 14278)]; ### salmon (single-cell-based) v0.10.1; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 8 }; ### [ output ] => { pbmc4k/alevi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214:2502,configurat,configuration,2502,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395836214,1,['configurat'],['configuration']
Deployability," ; libboost-all-dev ; liblzma-dev ; libbz2-dev ; cmake ; zlib1g-dev ; curl ; unzip ; wget ; libcurl4-openssl-dev ; libtbb-dev ; libtbb12 ; liblzma-dev ; libjemalloc2 ; pkg-config ; libgff-dev; ```. One thing I noticed during build is that, while I included `libjemalloc2` here, the salmon build procedure still downloaded and built `jemalloc`. However, I don't _think_ jemalloc is the thing causing the segfault. Regarding dependencies that can't be used — the current `libstaden` is behind the upstream release. The upstream release contains an important bug fix for a bug (and suggested fix that we proposed to the developer) upon which we rely. More importantly, afaik there is no relevant `libpufferfish-dev` package (we certainly have not made one), and so there is not even e.g. a check in the `CMakeLists.txt` file. Salmon's build always tries to run `fetchPufferfish.sh` to download the relevant `pufferfish` source files needed to build `salmon`. Critically, the relevant `pufferfish` dependencies and `salmon` releases move in lockstep. Each new `salmon` release it accompanied by a new tag in the `pufferfish` repo (so that the specific source used to build a given `salmon` release is fixed and easily trackable). So, I think the easiest way to move forward is to:. * do a diff of my list of packages above with what is pulled in by `apt build-dep salmon`. * figure out why, even when `libjemalloc2` is installed, the build system tries to build `jemalloc` itself (maybe we need the dev package?). * determine what folks want to do upstream about the lockstep pufferfish dependency. Right now, the `fetchPufferfish.sh` script pulls a tagged tarball from github and checks that the sha matches, and moves the relevant source files into place. This is true both when we build our own releases as well as when `salmon` is built for other distribution channels like `conda`. While I am happy to have someone figure out how to package that up as a package that can be put into the repo and depe",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233:1208,release,releases,1208,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233,1,['release'],['releases']
Deployability," Built target libtbb; [ 16%] Built target ntcard; [ 19%] Built target graphdump; [ 27%] Built target twopaco; [ 29%] Built target ksw2pp_sse2; [ 32%] Built target ksw2pp_sse4; [ 37%] Built target ksw2pp_basic; [ 38%] Built target ksw2pp; [ 59%] Built target puffer; [ 73%] Built target salmon_core; [ 76%] Built target alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc.so; -- Installing: /salmon/lib/libtbbmalloc.so.2; -- Installing: /salmon/lib/libtbbmalloc.so.2.5; -- Installing: /salmon/lib/libtbbmalloc_proxy.so; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2.5; -- Installing: /salmon/bin/salmon; -- Installing: /salmon/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon/bin to your PATH; Please add /salmon/lib to your LD_LIBRARY_PATH; ==========================================================================; root@fd877e359439:/salmon/build# make test; Running tests...; Test project /salmon/build; Start 1: unit_tests; 1/2 Test #1: unit_tests ....................... Passed 0.37 sec; Start 2: salmon_read_test_qua",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:1843,Install,Installing,1843,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['Install'],['Installing']
Deployability," alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc.so; -- Installing: /salmon/lib/libtbbmalloc.so.2; -- Installing: /salmon/lib/libtbbmalloc.so.2.5; -- Installing: /salmon/lib/libtbbmalloc_proxy.so; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2.5; -- Installing: /salmon/bin/salmon; -- Installing: /salmon/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon/bin to your PATH; Please add /salmon/lib to your LD_LIBRARY_PATH; ==========================================================================; root@fd877e359439:/salmon/build# make test; Running tests...; Test project /salmon/build; Start 1: unit_tests; 1/2 Test #1: unit_tests ....................... Passed 0.37 sec; Start 2: salmon_read_test_quasi; 2/2 Test #2: salmon_read_test_quasi ........... Passed 1.80 sec. 100% tests passed, 0 tests failed out of 2. Total Test time (real) = 2.17 sec; ```. The `make test` command itself runs the test the builds the index and maps the reads against it. Either way, I can do that explicitly too (from within build):. ```;",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:2153,Install,Installing,2153,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['Install'],['Installing']
Deployability," cores with a total free memory of 2 * 7 = 14 GB and a maximum memory of 16 GB. This is the `strace` output for task 1:. ```; execve(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", [""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""quant"", ""-i"", ""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""-p"", ""1"", ""-l"", ""ISR"", ""-1"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-2"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-o"", ""/dcl01/lieber/ajaffe/lab/libd_al""...], [/* 107 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", 4096) = 88; access(""/etc/ld.so.preload"", R_OK) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:4752,pipeline,pipeline,4752,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability," current output:. ```; [100%] Linking CXX executable salmon; ../../external/install/lib/libstaden-read.a(libstaden_read_la-open_trace_file.o): In function `find_file_url':; open_trace_file.c:(.text+0xec4): warning: the use of `tempnam' is dangerous, better use `mkstemp'; [100%] Built target salmon; root@e08cc9670e4a:/salmon-0.10.2/build# make install; [ 6%] Built target libdivsufsort; [ 12%] Built target libbz2; [ 17%] Built target liblzma; [ 24%] Built target libcereal; [ 31%] Built target libgff; [ 36%] Built target libbwa; [ 42%] Built target libstadenio; [ 48%] Built target libspdlog; [ 50%] Built target ksw2pp_sse4; [ 52%] Built target alevin_core; [ 55%] Built target ksw2pp_sse2; [ 60%] Built target ksw2pp_basic; [ 60%] Built target ksw2pp; [ 73%] Built target salmon_core; [ 77%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon-0.10.2/lib; -- Installing: /salmon-0.10.2/lib/libtbb.so; -- Installing: /salmon-0.10.2/lib/libtbbmalloc.so; -- Installing: /salmon-0.10.2/lib/libtbbmalloc_proxy.so; -- Installing: /salmon-0.10.2/lib/libtbbmalloc.so.2; -- Installing: /salmon-0.10.2/lib/libtbb.so.2; -- Installing: /salmon-0.10.2/lib/pkgconfig; -- Installing: /salmon-0.10.2/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon-0.10.2/bin/salmon; -- Installing: /salmon-0.10.2/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon-0.10.2/bin to your PATH; Please add /salmon-0.10.2/lib to your LD_LIBRARY_PATH; ==========================================================================; root@e08cc9670e4a:/salmon-0.10.2/build# make test; Running tests...; Test project /salmon-0.10.2/build; Start 1: unit_tests; 1/3 Test #1: unit_tests ....................... Passed 0.17 sec; Start 2: salmon_read_test_fmd; 2/3 Test #2: salmon_read_test_fmd ............. Passed 1.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404306268:1088,Install,Installing,1088,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404306268,1,['Install'],['Installing']
Deployability," dependencies that can't be used — the current `libstaden` is behind the upstream release. The upstream release contains an important bug fix for a bug (and suggested fix that we proposed to the developer) upon which we rely. More importantly, afaik there is no relevant `libpufferfish-dev` package (we certainly have not made one), and so there is not even e.g. a check in the `CMakeLists.txt` file. Salmon's build always tries to run `fetchPufferfish.sh` to download the relevant `pufferfish` source files needed to build `salmon`. Critically, the relevant `pufferfish` dependencies and `salmon` releases move in lockstep. Each new `salmon` release it accompanied by a new tag in the `pufferfish` repo (so that the specific source used to build a given `salmon` release is fixed and easily trackable). So, I think the easiest way to move forward is to:. * do a diff of my list of packages above with what is pulled in by `apt build-dep salmon`. * figure out why, even when `libjemalloc2` is installed, the build system tries to build `jemalloc` itself (maybe we need the dev package?). * determine what folks want to do upstream about the lockstep pufferfish dependency. Right now, the `fetchPufferfish.sh` script pulls a tagged tarball from github and checks that the sha matches, and moves the relevant source files into place. This is true both when we build our own releases as well as when `salmon` is built for other distribution channels like `conda`. While I am happy to have someone figure out how to package that up as a package that can be put into the repo and depended upon, we currently don't have the capacity to tackle that ourselves and don't have a suitable mechanism to replace the current approach to obtaining the dependent pufferfish files. However, this question is very important as e.g. a segfault exactly like the one you are encountering was actually a bug in the pufferfish source used in the 1.9.0 release of `salmon` that was _fixed_ for the 1.10.0 release. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233:1603,install,installed,1603,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233,4,"['install', 'release']","['installed', 'release', 'releases']"
Deployability," directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib"", {st_mode=S_IFDIR|0755, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib"", {st_mode=S_IFDIR|0775, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:6563,pipeline,pipeline,6563,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability," file . . . ; [2019-07-01 12:33:04.501] [jointLog] [info] done; Elapsed time: 2.24861s; [2019-07-01 12:33:04.572] [jointLog] [info] Building 32-bit suffix array (length of generalized text is 469043886); [2019-07-01 12:33:08.681] [jointLog] [info] Building suffix array . . . ; success; saving to disk . . . done; Elapsed time: 61.4932s; done; Elapsed time: 171.743s; processed 12000000 positionsKilled. I can send log files if required. The problem I have is that I cannot seem to run quant without the quant function. salmon quant --validateMappings ; -i /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/combined_index -l IU ; -1 /home/RnaSeq/fastq/DM_4a_H_1.fq.gz /home/RnaSeq/fastq/DM_4b_H_1.fq.gz /home/RnaSeq/fastq/DM_4c_H_1.fq.gz ; -2 /home/RnaSeq/fastq/DM_4a_H_2.fq.gz /home/RnaSeq/fastq/DM_4b_H_2.fq.gz /home/RnaSeq/fastq/DM_4c_H_2.fq.gz ; -o /home/RnaSeq/salmon_output_files/out/DM4h; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; ### salmon (mapping-based) v0.14.1; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/combined_index }; ### [ libType ] => { IU }; ### [ mates1 ] => { /home/RnaSeq/fastq/DM_4a_H_1.fq.gz /home/RnaSeq/fastq/DM_4b_H_1.fq.gz /home/RnaSeq/fastq/DM_4c_H_1.fq.gz }; ### [ mates2 ] => { /home/RnaSeq/fastq/DM_4a_H_2.fq.gz /home/RnaSeq/fastq/DM_4b_H_2.fq.gz /home/RnaSeq/fastq/DM_4c_H_2.fq.gz }; ### [ validateMappings ] => { }; ### [ output ] => { /home/RnaSeq/salmon_output_files/out/DM4h }; Logs will be written to /home/RnaSeq/salmon_output_files/out/DM4h/logs; [2019-07-01 12:51:42.856] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2019-07-01 12:51:42.856] [jointLog] [info] Usage of --validateMappings implies use of minScoreFraction. Since not explicitly specified, it is being set to 0.65; [2019-07-01 12:51:42.856",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/389#issuecomment-507253562:2321,upgrade,upgrades,2321,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/389#issuecomment-507253562,1,['upgrade'],['upgrades']
Deployability," first column will be the per CB level mapping rate i.e. `#mapped reads/#raw reads`. If you wan't absolute values for per-CB reads and mapped reads, it should be in the file `filtered_cb_frequency.txt` and `mappedUMI.txt` respectively.; * `re: cellranger subsampling:` Correct me if I am wrong, when you say cellranger subsampling, do you mean the `cellranger aggregate` pipeline? It's possible you are talking about some other step which I am not aware of but if it's `aggregate` then I think it happens downstream of all the quantification. Indeed coverage bias correction is an important part of the aggregation step but in general it's not the only one and that's why we recommend using the `Seurat` package downstream of the Alevin quantified matrices. We will be more than happy to write a tutorial on, ""how to perform batch correction downstream of Alevin"" but in summary the following steps would be the gist of the process.; - Use Alevin w/o any modification to the `fastq` on both of your sample to generate the gene count matrices. (We have made a major upgrade to the Alevin. We'd recommend using [v0.12.0-alpha](https://github.com/COMBINE-lab/salmon/tree/v0.12.0-alpha) for now, we are planning to make an official release before the end of this week, currently you can use pre-release. Unfortunately, not available on conda yet).; - Import Alevin count matrices into R using [this](https://combine-lab.github.io/alevin-tutorial/2018/alevin-seurat/) tutorial .; - Use [this](https://satijalab.org/seurat/immune_alignment.html) to perform the batch correction. ; We do realize it's currently complicated to use things downstream of Alevin and are working constantly on improving the overall pipeline to make the analyses as smooth as possible. If you happen to write a tutorial of your own on doing the analyses, we'd be happy to include that in Alevin tutorial page. However, if you get stuck with any of the above steps do let us know, we'd be more than happy to help in that front too.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433169468:2195,upgrade,upgrade,2195,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433169468,8,"['pipeline', 'release', 'upgrade']","['pipeline', 'release', 'upgrade']"
Deployability," login: Thu Jun 30 15:10:26 on ttys001; Benjamin@u932-ulm-2-57030119-6834 ~ % all_proxy= url:port conda install salmon; Collecting package metadata (current_repodata.json): failed. # >>>>>>>>>>>>>>>>>>>>>> ERROR REPORT <<<<<<<<<<<<<<<<<<<<<<. Traceback (most recent call last):; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/exceptions.py"", line 1082, in __call__; return func(*args, **kwargs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/cli/main.py"", line 87, in _main; exit_code = do_call(args, p); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/cli/conda_argparse.py"", line 84, in do_call; return getattr(module, func_name)(args, parser); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/cli/main_install.py"", line 20, in execute; install(args, parser, 'install'); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/cli/install.py"", line 260, in install; unlink_link_transaction = solver.solve_for_transaction(; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 152, in solve_for_transaction; unlink_precs, link_precs = self.solve_for_diff(update_modifier, deps_modifier,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 195, in solve_for_diff; final_precs = self.solve_final_state(update_modifier, deps_modifier, prune, ignore_pinned,; File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 300, in solve_final_state; ssc = self._collect_all_metadata(ssc); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/common/io.py"", line 88, in decorated; return f(*args, **kwds); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/site-packages/conda/core/solve.py"", line 463, in _collect_all_metadata; index, r = self._prepare(prepared_specs); File ""/usr/local/Caskroom/miniforge/base/lib/python3.9/sit",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515:1028,install,install,1028,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1171208515,1,['install'],['install']
Deployability," or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib"", {st_mode=S_IFDIR|0755, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib"", {st_mode=S_IFDIR|0775, st_size=33280, ...}) = 0; open(""/dcl",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:6231,pipeline,pipeline,6231,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability," or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib"", {st_mode=S_IFDIR|0755, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); s",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:6063,pipeline,pipeline,6063,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability," run -it debian:testing; $ echo ""deb-src http://deb.debian.org/debian unstable main"" > /etc/apt/sources.list.d/10-debsrc.list; $ apt update; $ apt upgrade; $ apt build-dep salmon; $ wget https://github.com/COMBINE-lab/salmon/archive/refs/tags/v1.10.0.tar.gz; $ tar xaf v1.10.0.tar.gz; $ cd salmon-1.10.0; $ cmake -DCMAKE_BUILD_TYPE=Release -DUSE_SHARED_LIBS=TRUE -DBZIP2_LIBRARIES=-lbz2 -DBZIP2_INCLUDE_DIR=/usr/include -DLIBLZMA_INCLUDE_DIR=/usr/include/ -DLIBLZMA_LIBRARY=lzma -DCMAKE_MODULE_PATH=/usr/share/cmake/Modules -DTBB_WILL_RECONFIGURE=FALSE -DBOOST_WILL_RECONFIGURE=FALSE; $ make; $ tar xaf sample_data.tgz; # src/salmon index -t sample_data/transcripts.fasta -i sample_salmon_quasi_index; Version Info: This is the most recent version of salmon.; index [""sample_salmon_quasi_index""] did not previously exist . . . creating it; [2023-03-10 11:56:01.434] [jLog] [warning] The salmon index is being built without any decoy sequences. It is recommended that decoy sequence (either computed auxiliary decoy sequence or the genome of the organism) be rovided during indexing. Further details can be found at https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode.; [2023-03-10 11:56:01.435] [jLog] [info] building index; out : sample_salmon_quasi_index; [2023-03-10 11:56:01.435] [puff::index::jointLog] [info] Running fixFasta. [Step 1 of 4] : counting k-mers. [2023-03-10 11:56:01.441] [puff::index::jointLog] [info] Replaced 0 non-ATCG nucleotides; [2023-03-10 11:56:01.441] [puff::index::jointLog] [info] Clipped poly-A tails from 0 transcripts; wrote 15 cleaned references; Segmentation fault (core dumped). Please note that `-DNO_IPO=TRUE` is not part of the above cmake call. I've added this to the packaging, but there is no difference. Please also note that I did *not* cloned the Git repository but have downloaded the release tarball since this is what we are packaging. Hope this helps tracking down the issue. Kind regards, Andreas.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463708855:5026,release,release,5026,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463708855,1,['release'],['release']
Deployability," sufficient. There must be some other set of symbols which need to be defined. `/opt/rh/devtoolset-4/root/usr/bin/c++ -pthread -ftree-vectorize -funroll-loops -fPIC -fomit-frame-pointer -O3 -DRAPMAP_SALMON_SUPPORT -DHAVE_ANSI_TERM -DHAVE_SSTREAM -Wall -Wno-unknown-pragmas -Wno-reorder -Wno-unused-variable -std=c++11 -Wreturn-type -Werror=return-type -Wno-unused-function -Wno-unused-local-typedef -static-libstdc++ -Wno-unused-local-typedefs -pthread -ftree-vectorize -funroll-loops -fPIC -fomit-frame-pointer -O3 -DRAPMAP_SALMON_SUPPORT -DHAVE_ANSI_TERM -DHAVE_SSTREAM -Wall -Wno-unknown-pragmas -Wno-reorder -Wno-unused-variable -std=c++11 -Wreturn-type -Werror=return-type -Wno-unused-function -Wno-unused-local-typedef -static-libstdc++ -Wno-unused-local-typedefs -rdynamic CMakeFiles/unitTests.dir/__/tests/UnitTests.cpp.o CMakeFiles/unitTests.dir/FragmentLengthDistribution.cpp.o CMakeFiles/unitTests.dir/__/external/install/src/rapmap/rank9b.cpp.o CMakeFiles/unitTests.dir/__/external/install/src/rapmap/bit_array.c.o -o unitTests -L/home/mathog/src/salmon/lib -L/home/mathog/src/salmon/external/install/lib -Wl,-rpath,""\$ORIGIN/../lib:\$ORIGIN/../../lib:\$ORIGIN/:\$ORIGIN/../../external/install/lib"" libsalmon_core.a libalevin_core.a -lgff -lpthread ../external/install/lib/libstaden-read.a -lz ../external/install/lib/libdivsufsort.a ../external/install/lib/libdivsufsort64.a ../external/install/lib/libbwa.a -lm -llzma -lbz2 -ltbb -lgomp -lrt ../external/install/lib/libjemalloc.a -lrt -ldl ../external/install/lib/libjemalloc.a -ldl`. Oh, I also had to update automake and autoconf because the 2 year old versions on this system were not new enough. Is there a static binary version of salmon available for download, Linux 64 bit? It looks like the default links are that way anyway, and that would save me what looks like at least another day of fighting with Cmake to force it to actually build a working make file. . You are developing on something like a recent Fedora or Ubuntu? In ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397025719:2859,install,install,2859,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397025719,1,['install'],['install']
Deployability," the most recent version of Salmon.; ### salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/R10001_D2B1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/R10001_D2B1WACXX/logs; [1m[2017-03-29 14:51:11.533] [jointLog] [info] parsing read library format; [00m[1m[2017-03-29 14:51:11.545] [jointLog] [info] There is 1 library.; [00mterminate called without an active exception; /cm/local/apps/sge/var/spool/compute-061/job_scripts/110315: line 31: 54922 Aborted (core dumped) /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant -i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR -1 ${FILE1} -2 ${FILE2} -o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}; **** Job ends ****; Wed Mar 29 14:51:13 EDT 2017; ```. ### SGE email info example. ```; Job-array task 110315.1 (step6-salmon_test3.gsk_phaseII) Complete; User = lcollado; Queue = shared.q@compute-061.cm.cluster; Host = compute-061.cm.cluster; Start Time = 03/29/2017 14:51:09; End Time = 03/29/2017 14:51:13; User Time = 00:00:00; System Time = 00:00:02; Wallclock Time = 00:00:04; CPU = 00:00:02; Max vmem = 14.820G; Exit Status = 0; ```. ## 16 cores. ### Bash. ```bash; #!/bin/bash; #$ -cwd; #$ -l mem_free=2G,h_vmem=3G,h_fsize=100G; #$ -N step6-salmon_test4.gsk_phaseII; #$ -pe local 16; #$ -o ./logs/salmon_test4.$TASK_ID.txt; #$ -e",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:3065,pipeline,pipeline,3065,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['pipeline'],['pipeline']
Deployability,""", ""ISR"", ""-1"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-2"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-o"", ""/dcl01/lieber/ajaffe/lab/libd_al""...], [/* 107 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", 4096) = 88; access(""/etc/ld.so.preload"", R_OK) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib"", {st_mode=S_IFDIR|0755, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/E",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:5085,pipeline,pipeline,5085,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability,"#$ -cwd; #$ -l mem_free=2G,h_vmem=3G,h_fsize=100G; #$ -N step6-salmon_test4.gsk_phaseII; #$ -pe local 16; #$ -o ./logs/salmon_test4.$TASK_ID.txt; #$ -e ./logs/salmon_test4.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 16 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 14:53:43 EDT 2017; **** JHPCE info ****; User: lcollado; Job id: 110316; Job name: step6-salmon_test4.gsk_phaseII; Hostname: compute-067; Task id: ; Version Info: This is the most recent version of Salmon.; ### salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 16 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:4839,pipeline,pipeline,4839,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['pipeline'],['pipeline']
Deployability,"$ -cwd; #$ -l mem_free=14G,h_vmem=15G,h_fsize=100G; #$ -N step6-salmon_test3.gsk_phaseII; #$ -pe local 1; #$ -o ./logs/salmon_test3.$TASK_ID.txt; #$ -e ./logs/salmon_test3.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 14:51:10 EDT 2017; **** JHPCE info ****; User: lcollado; Job id: 110315; Job name: step6-salmon_test3.gsk_phaseII; Hostname: compute-061; Task id: ; Version Info: This is the most recent version of Salmon.; ### salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:1431,pipeline,pipeline,1431,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['pipeline'],['pipeline']
Deployability,"$ -cwd; #$ -l mem_free=80G,h_vmem=90G,h_fsize=100G; #$ -N step6-salmon_test5.gsk_phaseII; #$ -pe local 1; #$ -o ./logs/salmon_test5.$TASK_ID.txt; #$ -e ./logs/salmon_test5.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 23:27:11 EDT 2017; **** JHPCE info ****; User: lcollado; Job id: 110632; Job name: step6-salmon_test5.gsk_phaseII; Hostname: compute-066; Task id: ; Version Info: This is the most recent version of Salmon.; ### salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:8346,pipeline,pipeline,8346,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['pipeline'],['pipeline']
Deployability,"$ -pe local 1; #$ -o ./logs/salmon_test3.$TASK_ID.txt; #$ -e ./logs/salmon_test3.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 14:51:10 EDT 2017; **** JHPCE info ****; User: lcollado; Job id: 110315; Job name: step6-salmon_test3.gsk_phaseII; Hostname: compute-061; Task id: ; Version Info: This is the most recent version of Salmon.; ### salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:1530,pipeline,pipeline,1530,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['pipeline'],['pipeline']
Deployability,"$ -pe local 1; #$ -o ./logs/salmon_test5.$TASK_ID.txt; #$ -e ./logs/salmon_test5.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**** JHPCE info ****""; echo ""User: ${USER}""; echo ""Job id: ${JOB_ID}""; echo ""Job name: ${JOB_NAME}""; echo ""Hostname: ${HOSTNAME}""; echo ""Task id: ${TASK_ID}"". FILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/${ID}. /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test5/${ID}. echo ""**** Job ends ****""; date; ```. ### Example log file. ```; **** Job starts ****; Wed Mar 29 23:27:11 EDT 2017; **** JHPCE info ****; User: lcollado; Job id: 110632; Job name: step6-salmon_test5.gsk_phaseII; Hostname: compute-066; Task id: ; Version Info: This is the most recent version of Salmon.; ### salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:8445,pipeline,pipeline,8445,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['pipeline'],['pipeline']
Deployability,"$ sudo make install; [ 7%] Built target libcereal; [ 14%] Built target libdivsufsort; [ 21%] Built target libstadenio; [ 28%] Built target libbwa; [ 36%] Built target libgff; [ 42%] Built target libspdlog; [ 47%] Built target ksw2pp_basic; [ 49%] Built target ksw2pp_sse4; [ 52%] Built target ksw2pp_sse2; [ 53%] Built target ksw2pp; [ 55%] Built target alevin_core; [ 69%] Built target salmon_core; [ 74%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /usr/local/lib; -- Up-to-date: /usr/local/lib/libtbbmalloc.so; -- Up-to-date: /usr/local/lib/pkgconfig; -- Up-to-date: /usr/local/lib/libtbb.so; -- Up-to-date: /usr/local/lib/libtbb.so.2; -- Up-to-date: /usr/local/lib/libtbbmalloc_proxy.so.2; -- Up-to-date: /usr/local/lib/libtbbmalloc_proxy.so; -- Up-to-date: /usr/local/lib/libtbbmalloc.so.2; -- Up-to-date: /usr/local/bin/salmon; -- Up-to-date: /usr/local/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly. Please add /usr/local/bin to your PATH; Please add /usr/local/lib to your LD_LIBRARY_PATH. $ make test; Running tests...; Test project salmon/build; Start 1: unit_tests; 1/3 Test #1: unit_tests .......................***Failed 0.02 sec; Start 2: salmon_read_test_fmd; 2/3 Test #2: salmon_read_test_fmd ............. Passed 1.67 sec; Start 3: salmon_read_test_quasi; 3/3 Test #3: salmon_read_test_quasi ........... Passed 1.62 sec. 67% tests passed, 1 tests failed out of 3. Total Test time (real) = 3.32 sec. The following tests FAILED:; 	 1 - unit_tests (Failed); Errors while running CTest; Makefile:151: recipe for target 'test' failed; make: *** [test] Error 8",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393691425:12,install,install,12,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393691425,6,"['Install', 'Release', 'configurat', 'install']","['Install', 'Installation', 'Release', 'configuration', 'install']"
Deployability,"(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib"", {st_mode=S_IFDIR|0755, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib"", {st_mode=S_IFDIR|0775, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:6737,pipeline,pipeline,6737,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability,"(with statistics) and advice! ; I really appreciate it!. I have looked into the `meta_info.json` files of these datasets. It looks like none of them has dovetail fragments. The following are the relevant information from the `meta_info.json` for each dataset:. For the 5 datasets with minimal mapping rates:. SRR9007475:; ```; ""num_processed"": 64991581,; ""num_mapped"": 1356,; ""num_decoy_fragments"": 0,; ""num_dovetail_fragments"": 0,; ""num_fragments_filtered_vm"": 1272836,; ""num_alignments_below_threshold_for_mapped_fragments_vm"": 3823916,. ```; SRR5866113:; ```; ""num_processed"": 8065000,; ""num_mapped"": 1384,; ""num_decoy_fragments"": 0,; ""num_dovetail_fragments"": 0,; ""num_fragments_filtered_vm"": 5154685,; ""num_alignments_below_threshold_for_mapped_fragments_vm"": 165001284,. ```; SRR448056:; ```; ""num_processed"": 13530942,; ""num_mapped"": 7101,; ""num_decoy_fragments"": 0,; ""num_dovetail_fragments"": 0,; ""num_fragments_filtered_vm"": 54,; ""num_alignments_below_threshold_for_mapped_fragments_vm"": 14420,; ```. SRR1535539:; ```; ""num_processed"": 8045873,; ""num_mapped"": 245,; ""num_decoy_fragments"": 0,; ""num_dovetail_fragments"": 0,; ""num_fragments_filtered_vm"": 111743,; ""num_alignments_below_threshold_for_mapped_fragments_vm"": 593521,; ```. SRR3129941:; ```; ""num_processed"": 57495682,; ""num_mapped"": 360,; ""num_decoy_fragments"": 0,; ""num_dovetail_fragments"": 0,; ""num_fragments_filtered_vm"": 358659,; ""num_alignments_below_threshold_for_mapped_fragments_vm"": 6631423,; ```. For the 4 datasets with 0 mapping rate (they do not have other info besides `""num_processed""` and `""num_mapped""`):. SRR764657:; ```; ""num_processed"": 28342632,; ""num_mapped"": 0,; ```. SRR067901:; ```; ""num_processed"": 3571366,; ""num_mapped"": 0,; ```. SRR2913241:; ```; ""num_processed"": 40070874,; ""num_mapped"": 8,; ```. SRR1182629:; ```; ""num_processed"": 15381872,; ""num_mapped"": 0,; ```. I will dig into the other possibilities that you suggested when I get time, and post the update. Thank you very much for all your help!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-583784767:2035,update,update,2035,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/482#issuecomment-583784767,1,['update'],['update']
Deployability,") = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib"", {st_mode=S_IFDIR|0775, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin"", {st_mode=S_IFDIR|0755, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:8019,pipeline,pipeline,8019,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability,") = 0; madvise(0x7fffbb600000, 29360128, MADV_DONTNEED) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX.fastq.gz"", {st_mode=S_IFREG|0644, st_size=4862610444, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX.fastq.gz"", {st_mode=S_IFREG|0644, st_size=4862610444, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX.fastq.gz"", {st_mode=S_IFREG|0644, st_size=4862610444, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX_read2.fastq.gz"", {st_mode=S_IFREG|0644, st_size=5004102866, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX_read2.fastq.gz"", {st_mode=S_IFREG|0644, st_size=5004102866, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX_read2.fastq.gz"", {st_mode=S_IFREG|0644, st_size=5004102866, ...}) = 0; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", {st_mode=S_IFREG|0775, st_size=96, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", O_RDONLY) = 4; read(4, ""{\n \""indexVersion\"": 2,\n \""ha""..., 8191) = 96; read(4, """", 8191) = 0; close(4) = 0; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", {st_mode=S_IFREG|0775, st_size=96, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", O_RDONLY) = 4; read(4, ""{\n \""indexVersion\"": 2,\n \""ha""..., 8191) = 96; read(4, """", 8191) = 0; close(4) = 0; clock_gettime(CLOCK_REALTIME, {1491424830, 69887706}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:164700,pipeline,pipeline,164700,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib"", {st_mode=S_IFDIR|0755, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/l",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:5885,pipeline,pipeline,5885,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability,"**Hi all,; Just an update:; I also got same warning message (as @rbenel talk about it here) when creating index along with decoy sequences I took @kvittingseerup's advice and made a transcripts.fa file by gffread command. Here is my input files and commend:; All gtf and genome references were downloaded from GENCODE: GRCh38.primary_assembly.genome.fa.gz, gencode.v36.annotation.gtf (CHR) and gencode.v36.transcripts.fa.gz.; commends:; grep ""^>"" <(gunzip -c GRCh38.primary_assembly.genome.fa.gz) | cut -d "" "" -f 1 > decoys.txt; sed -i.bak -e 's/>//g' decoys.txt; cat salmon_transcripts.fa.gz GRCh38.primary_assembly.genome.fa.gz > gentrome.fa.gz; salmon index -t gentrome.fa.gz -d decoys.txt -p 12 -i salmon-decoy-sa-index --gencode; warnings:**. [Step 1 of 4] : counting k-mers; [2020-12-26 10:47:50.823] [puff::index::jointLog] [warning] Entry with header [ENST00000473810.1|ENSG00000239255.1|OTTHUMG00000157482|OTTHUMT00000348942.1|AC007620.1-201|AC007620.1|25|processed_pseudogene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:50.973] [puff::index::jointLog] [warning] Entry with header [ENST00000603775.1|ENSG00000271544.1|OTTHUMG00000184300|OTTHUMT00000468575.1|AC006499.8-201|AC006499.8|23|processed_pseudogene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:52.758] [puff::index::jointLog] [warning] Entry with header [ENST00000632684.1|ENSG00000282431.1|OTTHUMG00000190602|OTTHUMT00000485301.1|TRBD1-201|TRBD1|12|TR_D_gene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:54.950] [puff::index::jointLog] [warning] Entry with header [ENST00000543745.1|ENSG00000255972.1|OTTHUMG00000168883|OTTHUMT00000401485.1|AC026333.1-201|AC026333.1|28|processed_pseudogene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:55.202] [puff::index::jointLog] [warning] Entry",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751354991:19,update,update,19,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751354991,1,['update'],['update']
Deployability,"**Hi all,; Just an update:; I also got same warning message (as @rbenel talk about it here) when creating index along with decoy sequences I took @kvittingseerup's suggestion and made a transcripts.fa file by gffread command. Here is my input files and commend:; All gtf and genome references were downloaded from GENCODE: GRCh38.primary_assembly.genome.fa.gz, gencode.v36.annotation.gtf (CHR), gencode.v36.transcripts.fa.gz.; commends:; grep ""^>"" <(gunzip -c GRCh38.primary_assembly.genome.fa.gz) | cut -d "" "" -f 1 > decoys.txt; sed -i.bak -e 's/>//g' decoys.txt; cat salmon_transcripts.fa.gz GRCh38.primary_assembly.genome.fa.gz > gentrome.fa.gz; salmon index -t gentrome.fa.gz -d decoys.txt -p 12 -i salmon-decoy-sa-index --gencode; warnings:**; [Step 1 of 4] : counting k-mers; [2020-12-26 10:47:50.823] [puff::index::jointLog] [warning] Entry with header [ENST00000473810.1|ENSG00000239255.1|OTTHUMG00000157482|OTTHUMT00000348942.1|AC007620.1-201|AC007620.1|25|processed_pseudogene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:50.973] [puff::index::jointLog] [warning] Entry with header [ENST00000603775.1|ENSG00000271544.1|OTTHUMG00000184300|OTTHUMT00000468575.1|AC006499.8-201|AC006499.8|23|processed_pseudogene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:52.758] [puff::index::jointLog] [warning] Entry with header [ENST00000632684.1|ENSG00000282431.1|OTTHUMG00000190602|OTTHUMT00000485301.1|TRBD1-201|TRBD1|12|TR_D_gene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:54.950] [puff::index::jointLog] [warning] Entry with header [ENST00000543745.1|ENSG00000255972.1|OTTHUMG00000168883|OTTHUMT00000401485.1|AC026333.1-201|AC026333.1|28|processed_pseudogene|], had length less than equal to the k-mer length of 31 (perhaps after poly-A clipping); [2020-12-26 10:47:55.202] [puff::index::jointLog] [warning] Entr",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751354493:19,update,update,19,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-751354493,1,['update'],['update']
Deployability,"+1 for curl not being installed on some Linux distros I've used in the past. It's always a shock, but usually there's wget to fall back on, so maybe that's an option for your script...",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/42#issuecomment-186714449:22,install,installed,22,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/42#issuecomment-186714449,1,['install'],['installed']
Deployability,"+1 for this feature, I would like to be able to use this feature for helping quality control and testing for our larger automated Salmon pipeline. @rekado - do you want to try to develop this and submit a pull request? :)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/185#issuecomment-358792432:137,pipeline,pipeline,137,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/185#issuecomment-358792432,1,['pipeline'],['pipeline']
Deployability,", 32681, SIGABRT) = 0; --- SIGABRT (Aborted) @ 0 (0) ---; +++ killed by SIGABRT (core dumped) +++; ```; and for task 2:. ```; execve(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", [""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""quant"", ""-i"", ""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""-p"", ""1"", ""-l"", ""ISR"", ""-1"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-2"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-o"", ""/dcl01/lieber/ajaffe/lab/libd_al""...], [/* 107 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", 4096) = 88; access(""/etc/ld.so.preload"", R_OK) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:41622,pipeline,pipeline,41622,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,", 51996, SIGABRT) = 0; --- SIGABRT (Aborted) @ 0 (0) ---; +++ killed by SIGABRT (core dumped) +++; ```. and for task 2:. ```; execve(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", [""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""quant"", ""-i"", ""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""-p"", ""1"", ""-l"", ""ISR"", ""-1"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-2"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-o"", ""/dcl01/lieber/ajaffe/lab/libd_al""...], [/* 107 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", 4096) = 88; access(""/etc/ld.so.preload"", R_OK) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:122585,pipeline,pipeline,122585,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,", st_size=5004102866, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX_read2.fastq.gz"", {st_mode=S_IFREG|0644, st_size=5004102866, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX_read2.fastq.gz"", {st_mode=S_IFREG|0644, st_size=5004102866, ...}) = 0; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", {st_mode=S_IFREG|0775, st_size=96, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", O_RDONLY) = 4; read(4, ""{\n \""indexVersion\"": 2,\n \""ha""..., 8191) = 96; read(4, """", 8191) = 0; close(4) = 0; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", {st_mode=S_IFREG|0775, st_size=96, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", O_RDONLY) = 4; read(4, ""{\n \""indexVersion\"": 2,\n \""ha""..., 8191) = 96; read(4, """", 8191) = 0; close(4) = 0; clock_gettime(CLOCK_REALTIME, {1491424830, 69887706}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/header.json"", O_RDONLY) = 4; read(4, ""{\n \""value0\"": {\n \""Index""..., 8191) = 357; read(4, """", 8191) = 0; close(4) = 0; clock_gettime(CLOCK_REALTIME, {1491424830, 139950818}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/header.json"", O_RDONLY) = 4; read(4, ""{\n \""value0\"": {\n \""Index""..., 8191) = 357; read(4, """", 8191) = 0; close(4) = 0; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7ffe7e5e8000; mprotect(0x7ffe7e5e8000, 4096, PROT_NONE) = 0; clone(child_stack=0x7ffebe5e7ed0,",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:165322,pipeline,pipeline,165322,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"-0.7.12.3/bwamem.c; bwa-0.7.12.3/bwamem.h; bwa-0.7.12.3/bwamem_extra.c; bwa-0.7.12.3/bwamem_pair.c; bwa-0.7.12.3/bwape.c; bwa-0.7.12.3/bwase.c; bwa-0.7.12.3/bwase.h; bwa-0.7.12.3/bwaseqio.c; bwa-0.7.12.3/bwashm.c; bwa-0.7.12.3/bwt.c; bwa-0.7.12.3/bwt.h; bwa-0.7.12.3/bwt_gen.c; bwa-0.7.12.3/bwt_lite.c; bwa-0.7.12.3/bwt_lite.h; bwa-0.7.12.3/bwtaln.c; bwa-0.7.12.3/bwtaln.h; bwa-0.7.12.3/bwtgap.c; bwa-0.7.12.3/bwtgap.h; bwa-0.7.12.3/bwtindex.c; bwa-0.7.12.3/bwtsw2.h; bwa-0.7.12.3/bwtsw2_aux.c; bwa-0.7.12.3/bwtsw2_chain.c; bwa-0.7.12.3/bwtsw2_core.c; bwa-0.7.12.3/bwtsw2_main.c; bwa-0.7.12.3/bwtsw2_pair.c; bwa-0.7.12.3/example.c; bwa-0.7.12.3/fastmap.c; bwa-0.7.12.3/is.c; bwa-0.7.12.3/kbtree.h; bwa-0.7.12.3/khash.h; bwa-0.7.12.3/kopen.c; bwa-0.7.12.3/kseq.h; bwa-0.7.12.3/ksort.h; bwa-0.7.12.3/kstring.c; bwa-0.7.12.3/kstring.h; bwa-0.7.12.3/ksw.c; bwa-0.7.12.3/ksw.h; bwa-0.7.12.3/kthread.c; bwa-0.7.12.3/kvec.h; bwa-0.7.12.3/main.c; bwa-0.7.12.3/malloc_wrap.c; bwa-0.7.12.3/malloc_wrap.h; bwa-0.7.12.3/maxk.c; bwa-0.7.12.3/pemerge.c; bwa-0.7.12.3/qualfa2fq.pl; bwa-0.7.12.3/utils.c; bwa-0.7.12.3/utils.h; bwa-0.7.12.3/xa2multi.pl; [ 50%] No patch step for 'libbwa'; [ 50%] No update step for 'libbwa'; [ 51%] No configure step for 'libbwa'; [ 51%] Performing build step for 'libbwa'; /bin/ld: cannot find -lz; collect2: error: ld returned 1 exit status; make[3]: *** [bwa] Error 1; make[2]: *** [libbwa-prefix/src/libbwa-stamp/libbwa-build] Error 2; make[1]: *** [CMakeFiles/libbwa.dir/all] Error 2; make: *** [all] Error 2. So as you said I'd say its having issued finding the zlibs library. Similar to how I used 'DZLIB_LIBRARY=/users/work/jake/bin/zlib-1.2.11/zlib.h' to specify the zlib library for 'cmake', is there a way to do it for the 'make' command? I've tried using the following but haven't had success:; make -I /users/work/jake/bin/zlib-1.2.11/zlib.h; make --include-dir=/users/work/jake/bin/zlib-1.2.11/zlib.h. Sorry for the very basic questions.... I'm kind of learning as I go.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873:3302,patch,patch,3302,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314451873,4,"['patch', 'update']","['patch', 'update']"
Deployability,"-1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/2011.11p1/lib/linux-x64/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/current/lib/linux-x64/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/lib64/libc.so.6"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0p\356A\316;\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0755, st_size=1926760, ...}) = 0; mmap(0x3bce400000, 3750152, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x3bce400000; mprotect(0x3bce58a000, 2097152, PROT_NONE) = 0; mmap(0x3bce78a000, 20480, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x18a000) = 0x3bce78a000; mmap(0x3bce78f000, 18696, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x3bce78f000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/pcre/8.36/lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/jags/4.2.0/lib64/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/compiler/gcc/4.4.7/netcdf/4.3.2/lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/curl/7.43.0/lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/2011.11p1/lib/linux-x64/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/current/lib/linux-x64/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or dire",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:58937,pipeline,pipeline,58937,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,2,['pipeline'],['pipeline']
Deployability,"-get install build-essential git libboost-all-dev liblzma-dev libbz2-dev cmake zlib1g-dev curl unzip wget libcurl4-openssl-dev. $ git clone https://github.com/COMBINE-lab/salmon.git; $ cd salmon; $ mkdir build && cd build; $ cmake -DNO_IPO=TRUE .. # GCC still doesn't handle LTO robustly; $ make -j8; $ make install; $ make test; ```. which leads to the output. ```; root@fd877e359439:/salmon/build# make install; [ 7%] Built target libcereal; [ 13%] Built target libtbb; [ 16%] Built target ntcard; [ 19%] Built target graphdump; [ 27%] Built target twopaco; [ 29%] Built target ksw2pp_sse2; [ 32%] Built target ksw2pp_sse4; [ 37%] Built target ksw2pp_basic; [ 38%] Built target ksw2pp; [ 59%] Built target puffer; [ 73%] Built target salmon_core; [ 76%] Built target alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc.so; -- Installing: /salmon/lib/libtbbmalloc.so.2; -- Installing: /salmon/lib/libtbbmalloc.so.2.5; -- Installing: /salmon/lib/libtbbmalloc_proxy.so; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2.5; -- Installing: /salmon/bin/salmon; -- Installing: /salmon/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set pr",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:1383,Install,Installing,1383,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['Install'],['Installing']
Deployability,"-lab/salmon.git; $ cd salmon; $ mkdir build && cd build; $ cmake -DNO_IPO=TRUE .. # GCC still doesn't handle LTO robustly; $ make -j8; $ make install; $ make test; ```. which leads to the output. ```; root@fd877e359439:/salmon/build# make install; [ 7%] Built target libcereal; [ 13%] Built target libtbb; [ 16%] Built target ntcard; [ 19%] Built target graphdump; [ 27%] Built target twopaco; [ 29%] Built target ksw2pp_sse2; [ 32%] Built target ksw2pp_sse4; [ 37%] Built target ksw2pp_basic; [ 38%] Built target ksw2pp; [ 59%] Built target puffer; [ 73%] Built target salmon_core; [ 76%] Built target alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc.so; -- Installing: /salmon/lib/libtbbmalloc.so.2; -- Installing: /salmon/lib/libtbbmalloc.so.2.5; -- Installing: /salmon/lib/libtbbmalloc_proxy.so; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2.5; -- Installing: /salmon/bin/salmon; -- Installing: /salmon/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon/bin to your PATH; Please add /salmon/lib to your LD_LIBRARY_PA",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:1546,Install,Installing,1546,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['Install'],['Installing']
Deployability,"-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/liblzma.so.0"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0 %\0\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_size=130728, ...}) = 0; mmap(NULL, 2226056, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbfdc3000; mprotect(0x7fffbfde2000, 2097152, PROT_NONE) = 0; mmap(0x7fffbffe2000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1f000) = 0x7fffbffe2000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libtbb.so.2"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320v\1\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_size=2271767, ...}) = 0; mmap(NULL, 2500784, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbfb60000; mprotect(0x7fffbfbac000, 2097152, PROT_NONE) = 0; mmap(0x7fffbfdac000, 16384, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x4c000) = 0x7fffbfdac000; mmap(0x7fffbfdb0000, 75952, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fffbfdb0000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libgomp.so.1"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\2405\0\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_size=56344, ...}) = 0; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfb5f000; mmap(NULL, 2151616, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbf951000; mprotect(0x7fffbf95e000, 2097152, PROT_NONE) = 0; mmap(0x7fffbfb5e000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0xd000) = 0x7fffbfb5e000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/librt.so.1"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0 \""\0\0\0\0\0\0""..., 832",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:17820,pipeline,pipeline,17820,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability,". Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon-0.10.2/bin to your PATH; Please add /salmon-0.10.2/lib to your LD_LIBRARY_PATH; ==========================================================================; root@e08cc9670e4a:/salmon-0.10.2/build# make test; Running tests...; Test project /salmon-0.10.2/build; Start 1: unit_tests; 1/3 Test #1: unit_tests ....................... Passed 0.17 sec; Start 2: salmon_read_test_fmd; 2/3 Test #2: salmon_read_test_fmd ............. Passed 1.78 sec; Start 3: salmon_read_test_quasi; 3/3 Test #3: salmon_read_test_quasi ........... Passed 1.59 sec. 100% tests passed, 0 tests failed out of 3. Total Test time (real) = 3.54 sec; root@e08cc9670e4a:/salmon-0.10.2/build# lsb_release -a; LSB Version: core-9.20160110ubuntu0.2-amd64:core-9.20160110ubuntu0.2-noarch:security-9.20160110ubuntu0.2-amd64:security-9.20160110ubuntu0.2-noarch; Distributor ID: Ubuntu; Description: Ubuntu 16.04.4 LTS; Release: 16.04; Codename: xenial; ```. I built with:. `$ cmake -DFETCH_BOOST=TRUE .. && make install && make test`. I can also install the boost via apt and see if that makes a difference (though I expect not since it looked like TBB was the issue, and I let cmake install that). We can also check our compiler versions, perhaps. I have : . ```; root@e08cc9670e4a:/salmon-0.10.2/build# g++ --version; g++ (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609; Copyright (C) 2015 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. root@e08cc9670e4a:/salmon-0.10.2/build# gcc --version; gcc (Ubuntu 5.4.0-6ubuntu1~16.04.10) 5.4.0 20160609; Copyright (C) 2015 Free Software Foundation, Inc.; This is free software; see the source for copying conditions. There is NO; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404306268:2542,Release,Release,2542,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404306268,4,"['Release', 'install']","['Release', 'install']"
Deployability,".a; ===========================================; -- Found BZip2: /apps/gentoo/usr/lib/libbz2.a (found version ""1.0.6""); -- Looking for BZ2_bzCompressInit; -- Looking for BZ2_bzCompressInit - found; Found libbz2 library: /apps/gentoo/usr/lib/libbz2.a; ===========================================; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - not found; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads: TRUE; -- Could NOT find Boost; BOOST_INCLUDEDIR =; BOOST_LIBRARYDIR =; Boost_FOUND = 0; Build system will fetch and build Boost; ==================================================================; Setting Temporary Boost paths; BOOST INCLUDE DIR = $blah/salmon-0.10.2/external/install/include; BOOST INCLUDE DIRS = $blah/salmon-0.10.2/external/install/include; BOOST LIB DIR = $blah/salmon-0.10.2/external/install/lib; BOOST LIBRARIES =; Build system will build libdivsufsort; ==================================================================; Build system will fetch and build the Cereal serialization library; ==================================================================; Build system will fetch and build BWA (for Salmon); ==================================================================; -- Found TBB: /apps/gentoo/usr/include (found suitable version ""2018.0"", minimum required is ""2018.0"") found components: tbb tbbmalloc tbbmalloc_proxy; TBB_LIBRARIES = /apps/gentoo/usr/lib/libtbbmalloc_proxy.so;/apps/gentoo/usr/lib/libtbbmalloc.so;/apps/gentoo/usr/lib/libtbb.so; Build system will compile libgff; ==================================================================; ==================================================================; Build system will compile Staden IOLib; ==================================================================; Buil",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387:3032,install,install,3032,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387,1,['install'],['install']
Deployability,".dir/build; make[2]: Nothing to be done for `CMakeFiles/libcereal.dir/build'.; [ 8%] Built target libcereal; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/depend; cd /Users/gabriel/Projects/salmon-0.13.1/build && /usr/local/Cellar/cmake/3.13.4/bin/cmake -E cmake_depends ""Unix Makefiles"" /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1 /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build /Users/gabriel/Projects/salmon-0.13.1/build/CMakeFiles/libstadenio.dir/DependInfo.cmake --color=; /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/libstadenio.dir/build.make CMakeFiles/libstadenio.dir/build; [ 9%] Performing configure step for 'libstadenio'; cd /Users/gabriel/Projects/salmon-0.13.1/external/staden-io_lib && ./configure --enable-shared=no --without-libcurl --prefix=/Users/gabriel/Projects/salmon-0.13.1/external/install LDFLAGS= CFLAGS= CC=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc CXX=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; checking for a BSD-compatible install... /usr/local/bin/ginstall -c; checking whether build environment is sane... yes; checking for a thread-safe mkdir -p... /usr/local/bin/gmkdir -p; checking for gawk... gawk; checking whether make sets $(MAKE)... yes; checking whether make supports nested variables... yes; checking whether to enable maintainer-specific portions of Makefiles... no; checking for gcc... /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc; checking whether the C compiler works... yes; checking for C compiler default output file name... a.out; checking for suffix of executables...; checking whether we are cross compiling... configure: error: in `/Users/gabriel/Projects/salmon-0.13.1/external/staden-io_lib':; configure: error: cannot run C com",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713:2159,install,install,2159,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472500713,1,['install'],['install']
Deployability,".so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin"", {st_mode=S_IFDIR|0755, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/jhpce/sha",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:8912,install,install,8912,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['install'],['install']
Deployability,"/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/R10001_D2B1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/R10001_D2B1WACXX/logs; [1m[2017-03-29 14:51:11.533] [jointLog] [info] parsing read library format; [00m[1m[2017-03-29 14:51:11.545] [jointLog] [info] There is 1 library.; [00mterminate called without an active exception; /cm/local/apps/sge/var/spool/compute-061/job_scripts/110315: line 31: 54922 Aborted (core dumped) /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant -i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR -1 ${FILE1} -2 ${FILE2} -o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test3/${ID}; **** Job ends ****; Wed Mar 29 14:51:13 EDT 2017; ```. ### SGE email info example. ```; Job-array task 110315.1 (step6-salmon_test3.gsk_phaseII) Complete; User = lcollado; Queue = shared.q@compute-061.cm.cluster; Host = compute-061.cm.cluster; Start Time = 03/29/2017 14:51:09; End Time = 03/29/2017 14:51:13; User Time = 00:00:00; System Time = 00:00:02; Wallclock Time = 00:00:04; CPU = 00:00:02; Max vmem = 14.820G; Exit Status = 0; ```. ## 16 cores. ### Bash. ```bash; #!/bin/bash; #$ -cwd; #$ -l mem_free=2G,h_vmem=3G,h_fsize=100G; #$ -N step6-salmon_test4.gsk_phaseII; #$ -pe local 16; #$ -o ./logs/salmon_test4.$TASK_ID.txt; #$ -e ./logs/salmon_test4.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_setup,step4-featCounts-alzheimer.gsk_phaseII; #$ -m e; echo ""**** Job starts ****""; date. echo ""**",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:3163,pipeline,pipeline,3163,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['pipeline'],['pipeline']
Deployability,"/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/pcre/8.36/lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/jhpce/shared/community/core/pcre/8.36/lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/pcre/8.36/lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/jhpce/shared/community/core/pcre/8.36/lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/pcre/8.36/lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/jhpce/shared/community/core/pcre/8.36/lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:9650,install,install,9650,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['install'],['install']
Deployability,"/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe; -path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7dbff700 (LWP 21437)]; [Thread 0x7fff7dbff700 (LWP 21437) exited]; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; [New Thread 0x7ffefcfff700 (LWP 21653)]; Logs will be written to BM_1/alevin/logs; [New Thread 0x7ffe7cffe700 (LWP 21654)]; [New Thread 0x7ffdfcffd700 (LWP 21655)]; [New Thread 0x7ffd7cffc700 (LWP 21656)]; ### salmon (single-cell-based) v0.10.3; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 4 }; ### [ output ] => { BM_1/alevin }; ### [ mates1 ] => { ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz }; ### [ mates2 ] => { ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz }; ### [ maxHashResizeThreads ] => { 2 }; ### [ index ] => { /u/user/ref/cellranger/salmon/transcripts_index }; ### [ tgMap ] => { tx2gene.txt }. [2018-06-10 16:07:09.798] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [New ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627:2404,upgrade,upgrade,2404,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627,1,['upgrade'],['upgrade']
Deployability,"0) = 0x7fffbf4c5000; mprotect(0x7fffbf547000, 2093056, PROT_NONE) = 0; mmap(0x7fffbf746000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x81000) = 0x7fffbf746000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libgcc_s.so.1"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P\36\0\0\0\0\0\0""..., 832) = 832; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbf4c4000; fstat(3, {st_mode=S_IFREG|0644, st_size=56072, ...}) = 0; mmap(NULL, 2151784, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbf2b6000; mprotect(0x7fffbf2c3000, 2097152, PROT_NONE) = 0; mmap(0x7fffbf4c3000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0xd000) = 0x7fffbf4c3000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/pcre/8.36/lib/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/jags/4.2.0/lib64/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/compiler/gcc/4.4.7/netcdf/4.3.2/lib/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/curl/7.43.0/lib/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/2011.11p1/lib/linux-x64/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/current/lib/linux-x64/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:20328,pipeline,pipeline,20328,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability,"07 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", 4096) = 88; access(""/etc/ld.so.preload"", R_OK) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib"", {st_mode=S_IFDIR|0755, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:5243,pipeline,pipeline,5243,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability,"0e4a:/salmon-0.10.2/build# make install; [ 6%] Built target libdivsufsort; [ 12%] Built target libbz2; [ 17%] Built target liblzma; [ 24%] Built target libcereal; [ 31%] Built target libgff; [ 36%] Built target libbwa; [ 42%] Built target libstadenio; [ 48%] Built target libspdlog; [ 50%] Built target ksw2pp_sse4; [ 52%] Built target alevin_core; [ 55%] Built target ksw2pp_sse2; [ 60%] Built target ksw2pp_basic; [ 60%] Built target ksw2pp; [ 73%] Built target salmon_core; [ 77%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon-0.10.2/lib; -- Installing: /salmon-0.10.2/lib/libtbb.so; -- Installing: /salmon-0.10.2/lib/libtbbmalloc.so; -- Installing: /salmon-0.10.2/lib/libtbbmalloc_proxy.so; -- Installing: /salmon-0.10.2/lib/libtbbmalloc.so.2; -- Installing: /salmon-0.10.2/lib/libtbb.so.2; -- Installing: /salmon-0.10.2/lib/pkgconfig; -- Installing: /salmon-0.10.2/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon-0.10.2/bin/salmon; -- Installing: /salmon-0.10.2/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon-0.10.2/bin to your PATH; Please add /salmon-0.10.2/lib to your LD_LIBRARY_PATH; ==========================================================================; root@e08cc9670e4a:/salmon-0.10.2/build# make test; Running tests...; Test project /salmon-0.10.2/build; Start 1: unit_tests; 1/3 Test #1: unit_tests ....................... Passed 0.17 sec; Start 2: salmon_read_test_fmd; 2/3 Test #2: salmon_read_test_fmd ............. Passed 1.78 sec; Start 3: salmon_read_test_quasi; 3/3 Test #3: salmon_read_test_quasi ........... Passed 1.59 sec. 100% tests passed, 0 tests failed out of 3. Total Test time (real) = 3.54 sec; root@e08cc9670e4a:/salmon-0.10.2/build# lsb_release -a; LSB Version: core-9.20160110ubuntu0.2-amd64:core-9.20160110ubuntu0.2-no",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404306268:1400,Install,Installing,1400,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404306268,1,['Install'],['Installing']
Deployability,"1 -Wreturn-type -Werror=return-type -Wno-unused-function -Wno-unused-local-typedef -static-libstdc++ -Wno-unused-local-typedefs -pthread -ftree-vectorize -funroll-loops -fPIC -fomit-frame-pointer -O3 -DRAPMAP_SALMON_SUPPORT -DHAVE_ANSI_TERM -DHAVE_SSTREAM -Wall -Wno-unknown-pragmas -Wno-reorder -Wno-unused-variable -std=c++11 -Wreturn-type -Werror=return-type -Wno-unused-function -Wno-unused-local-typedef -static-libstdc++ -Wno-unused-local-typedefs -rdynamic CMakeFiles/unitTests.dir/__/tests/UnitTests.cpp.o CMakeFiles/unitTests.dir/FragmentLengthDistribution.cpp.o CMakeFiles/unitTests.dir/__/external/install/src/rapmap/rank9b.cpp.o CMakeFiles/unitTests.dir/__/external/install/src/rapmap/bit_array.c.o -o unitTests -L/home/mathog/src/salmon/lib -L/home/mathog/src/salmon/external/install/lib -Wl,-rpath,""\$ORIGIN/../lib:\$ORIGIN/../../lib:\$ORIGIN/:\$ORIGIN/../../external/install/lib"" libsalmon_core.a libalevin_core.a -lgff -lpthread ../external/install/lib/libstaden-read.a -lz ../external/install/lib/libdivsufsort.a ../external/install/lib/libdivsufsort64.a ../external/install/lib/libbwa.a -lm -llzma -lbz2 -ltbb -lgomp -lrt ../external/install/lib/libjemalloc.a -lrt -ldl ../external/install/lib/libjemalloc.a -ldl`. Oh, I also had to update automake and autoconf because the 2 year old versions on this system were not new enough. Is there a static binary version of salmon available for download, Linux 64 bit? It looks like the default links are that way anyway, and that would save me what looks like at least another day of fighting with Cmake to force it to actually build a working make file. . You are developing on something like a recent Fedora or Ubuntu? In my experience packages which use boost and cmake inevitably cause a great great deal of pain when they are built on platforms like Centos or RHEL where long term support is one of the goals. They work fine on platforms which are cutting edge, but backwards compatibility extends back maybe 6 months or a year, tops.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397025719:3183,install,install,3183,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397025719,6,"['install', 'update']","['install', 'update']"
Deployability,"1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/2011.11p1/lib/linux-x64/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/current/lib/linux-x64/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/lib64/libc.so.6"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0p\356\1\3427\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0755, st_size=1926760, ...}) = 0; mmap(0x37e2000000, 3750152, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x37e2000000; mprotect(0x37e218a000, 2097152, PROT_NONE) = 0; mmap(0x37e238a000, 20480, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x18a000) = 0x37e238a000; mmap(0x37e238f000, 18696, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x37e238f000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/pcre/8.36/lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/jags/4.2.0/lib64/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/compiler/gcc/4.4.7/netcdf/4.3.2/lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/curl/7.43.0/lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/2011.11p1/lib/linux-x64/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/current/lib/linux-x64/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or dire",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:97398,pipeline,pipeline,97398,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/2011.11p1/lib/linux-x64/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/current/lib/linux-x64/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/lib64/libc.so.6"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0p\356\201\r5\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0755, st_size=1926760, ...}) = 0; mmap(0x350d800000, 3750152, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x350d800000; mprotect(0x350d98a000, 2097152, PROT_NONE) = 0; mmap(0x350db8a000, 20480, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x18a000) = 0x350db8a000; mmap(0x350db8f000, 18696, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x350db8f000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/pcre/8.36/lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/jags/4.2.0/lib64/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/compiler/gcc/4.4.7/netcdf/4.3.2/lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/curl/7.43.0/lib/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/2011.11p1/lib/linux-x64/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/current/lib/linux-x64/libdl.so.2"", O_RDONLY) = -1 ENOENT (No such file or dire",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:22066,pipeline,pipeline,22066,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"1%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc.so; -- Installing: /salmon/lib/libtbbmalloc.so.2; -- Installing: /salmon/lib/libtbbmalloc.so.2.5; -- Installing: /salmon/lib/libtbbmalloc_proxy.so; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2.5; -- Installing: /salmon/bin/salmon; -- Installing: /salmon/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon/bin to your PATH; Please add /salmon/lib to your LD_LIBRARY_PATH; ==========================================================================; root@fd877e359439:/salmon/build# make test; Running tests...; Test project /salmon/build; Start 1: unit_tests; 1/2 Test #1: unit_tests ....................... Passed 0.37 sec; Start 2: salmon_read_test_quasi; 2/2 Test #2: salmon_read_test_quasi ........... Passed 1.80 sec. 100% tests passed, 0 tests failed out of 2. Total Test time (real) = 2.17 sec; ```. The `make test` command itself runs the test the builds the index and maps the reads against it. Either way, I can do that explicitly too (from within build):. ```; $ ./src/salmon index -t ../sample_data/transcripts.f",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:2205,Install,Installing,2205,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['Install'],['Installing']
Deployability,"1) So `--celseq2` isn't there, I had initially checked here, to make sure that there wasn't something wrong with my command.. ; ```; alevin; ==========; salmon-based processing of single-cell RNA-seq data. alevin options:. mapping input options:; -l [ --libType ] arg Format string describing the library ; type; -i [ --index ] arg salmon index; -r [ --unmatedReads ] arg List of files containing unmated reads ; of (e.g. single-end reads); -1 [ --mates1 ] arg File containing the #1 mates; -2 [ --mates2 ] arg File containing the #2 mates. alevin-specific Options:; --noDedup Stops the pipeline after CB sequence ; correction and quasi-mapping reads.; --dropseq Use DropSeq Single Cell protocol for ; the library; --chromium Use 10x chromium v2 Single Cell ; protocol for the library.; --gemcode Use 10x gemcode v1 Single Cell protocol; for the library.; --whitelist arg File containing white-list barcodes; --noQuant Don't run downstream barcode-salmon ; model.; --naive Run Gene level naive deduplication; --noSoftMap Don't use soft-assignment for quant ; instead do hard-assignment.; --mrna arg path to a file containing mito-RNA ; gene, one per line; --rrna arg path to a file containing ribosomal ; RNA, one per line; --useCorrelation Use pair-wise pearson correlation with ; True barcodes as a feature for ; white-list creation.; --dumpfq Dump barcode modified fastq file for ; downstream analysis by using coin toss ; for multi-mapping.; --debug Enabling this mode mode will try to ; ignore segfaults based on no whitelist ; mapping or no whitelist deduplicated ; count; --dumpBfh dump the big hash with all the barcodes; and the UMI sequence.; --dumpFeatures Dump features for whitelist and ; downstream analysis.; --dumpCsvCounts Dump cell v transcripts count matrix in; csv format.; --lowRegionMinNumBarcodes arg (=200) Minimum Number of CB to use for ; learning Low confidence region ; (Default: 200).; --maxNumBarcodes arg (=100000) Maximum allowable limit to process the ; cell barcodes.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/325#issuecomment-443517536:587,pipeline,pipeline,587,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/325#issuecomment-443517536,2,['pipeline'],['pipeline']
Deployability,"1) SoupX is generally working with the raw output from Cell Ranger. I beleive they use all 1-10CBs, and state something to the effect that the soup expression profile estimate is of good quality because there are such a large fractions of droplets in this range. 2) I see your point. Maybe the SoupX pipeline could be improved by using low count but high confidence CBs. 3) raw_cb_frequency.txt was also not written. Here is the last line of featureDump.txt (line 494,002):. | CB	| CorrectedReads	| MappedReads	| DeduplicatedReads |	MappingRate	| DedupRate	| MeanByMax |	NumGenesExpressed	| NumGenesOverMean	| mRnaFraction	| rRnaFraction	| ArborescenceCount |; | ------ | ------ 	| ------ 	| ------ |	 ------ 	| ------ 	| ------ |	 ------ 	| ------ 	| ------ 	| ------ 	| ------ |; |AAAAATGGTTGCTCCT|	2	|1	|1	|0.5|	0|	1	|1|	0	|1	|0|	0|. Thanks for the heads up on `whitelist.txt`",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-503359662:300,pipeline,pipeline,300,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-503359662,1,['pipeline'],['pipeline']
Deployability,"1.3.0 had been released, with theses improvements and a few others you can read about in the release notes. Let is know if you have any further issues!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-653791377:15,release,released,15,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-653791377,2,['release'],"['release', 'released']"
Deployability,"1/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib"", {st_mode=S_IFDIR|0775, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Softwa",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:7068,pipeline,pipeline,7068,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability,"12_${SGE_TASK_ID}.txt. echo ""**** Job ends ****""; date; ```. Again, here is the `strace` output for task 1 (411 lines):. ```; execve(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", [""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""quant"", ""-i"", ""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""-p"", ""1"", ""-l"", ""ISR"", ""-1"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-2"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-o"", ""/dcl01/lieber/ajaffe/lab/libd_al""...], [/* 107 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", 4096) = 88; access(""/etc/ld.so.preload"", R_OK) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:80085,pipeline,pipeline,80085,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"2 ; liblzma-dev ; libjemalloc2 ; pkg-config ; libgff-dev; ```. One thing I noticed during build is that, while I included `libjemalloc2` here, the salmon build procedure still downloaded and built `jemalloc`. However, I don't _think_ jemalloc is the thing causing the segfault. Regarding dependencies that can't be used — the current `libstaden` is behind the upstream release. The upstream release contains an important bug fix for a bug (and suggested fix that we proposed to the developer) upon which we rely. More importantly, afaik there is no relevant `libpufferfish-dev` package (we certainly have not made one), and so there is not even e.g. a check in the `CMakeLists.txt` file. Salmon's build always tries to run `fetchPufferfish.sh` to download the relevant `pufferfish` source files needed to build `salmon`. Critically, the relevant `pufferfish` dependencies and `salmon` releases move in lockstep. Each new `salmon` release it accompanied by a new tag in the `pufferfish` repo (so that the specific source used to build a given `salmon` release is fixed and easily trackable). So, I think the easiest way to move forward is to:. * do a diff of my list of packages above with what is pulled in by `apt build-dep salmon`. * figure out why, even when `libjemalloc2` is installed, the build system tries to build `jemalloc` itself (maybe we need the dev package?). * determine what folks want to do upstream about the lockstep pufferfish dependency. Right now, the `fetchPufferfish.sh` script pulls a tagged tarball from github and checks that the sha matches, and moves the relevant source files into place. This is true both when we build our own releases as well as when `salmon` is built for other distribution channels like `conda`. While I am happy to have someone figure out how to package that up as a package that can be put into the repo and depended upon, we currently don't have the capacity to tackle that ourselves and don't have a suitable mechanism to replace the current app",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233:1253,release,release,1253,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233,2,['release'],['release']
Deployability,"2_linux_x86_64/bin/../lib/libgomp.so.1"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\2405\0\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_size=56344, ...}) = 0; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfb5f000; mmap(NULL, 2151616, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbf951000; mprotect(0x7fffbf95e000, 2097152, PROT_NONE) = 0; mmap(0x7fffbfb5e000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0xd000) = 0x7fffbfb5e000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/librt.so.1"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0 \""\0\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_size=50288, ...}) = 0; mmap(NULL, 2132936, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbf748000; mprotect(0x7fffbf74f000, 2097152, PROT_NONE) = 0; mmap(0x7fffbf94f000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x7000) = 0x7fffbf94f000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libm.so.6"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0`>\0\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_size=611736, ...}) = 0; mmap(NULL, 2629816, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbf4c5000; mprotect(0x7fffbf547000, 2093056, PROT_NONE) = 0; mmap(0x7fffbf746000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x81000) = 0x7fffbf746000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libgcc_s.so.1"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P\36\0\0\0\0\0\0""..., 832) = 832; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbf4c4000; fstat(3, {st_mode=S_IFREG|0644, st_size=56072, .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:18995,pipeline,pipeline,18995,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability,"2_linux_x86_64/bin/../lib/libm.so.6"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0`>\0\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_size=611736, ...}) = 0; mmap(NULL, 2629816, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbf4c5000; mprotect(0x7fffbf547000, 2093056, PROT_NONE) = 0; mmap(0x7fffbf746000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x81000) = 0x7fffbf746000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libgcc_s.so.1"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P\36\0\0\0\0\0\0""..., 832) = 832; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbf4c4000; fstat(3, {st_mode=S_IFREG|0644, st_size=56072, ...}) = 0; mmap(NULL, 2151784, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbf2b6000; mprotect(0x7fffbf2c3000, 2097152, PROT_NONE) = 0; mmap(0x7fffbf4c3000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0xd000) = 0x7fffbf4c3000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../lib/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/pcre/8.36/lib/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/jags/4.2.0/lib64/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/compiler/gcc/4.4.7/netcdf/4.3.2/lib/libc.so.6"", O_RDONLY) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/curl/7.43.0/lib/libc.so.6"", O_RDO",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:20170,pipeline,pipeline,20170,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability,"31808}}}, 128, 300000) = 1; recvmsg(6, {msg_name(0)=NULL, msg_iov(1)=[{""HTTP/1.1 200 OK\r\nServer: GitHub.""..., 512}], msg_controllen=0, msg_flags=0}, 0) = 512; recvmsg(6, {msg_name(0)=NULL, msg_iov(1)=[{""ccept-Encoding\r\nX-Fastly-Request""..., 512}], msg_controllen=0, msg_flags=0}, 0) = 124; epoll_wait(5, {}, 128, 0) = 0; recvmsg(6, {msg_name(0)=NULL, msg_iov(1)=[{""Server: GitHub.com\r\nContent-Type""..., 1024}], msg_controllen=0, msg_flags=0}, 0) = 0; epoll_wait(5, {}, 128, 0) = 0; close(6) = 0; futex(0x7fffbee4613c, FUTEX_CMP_REQUEUE_PRIVATE, 1, 2147483647, 0x7fffbee46110, 2) = 1; futex(0x7fffbee46110, FUTEX_WAKE_PRIVATE, 1) = 1; munmap(0x7fff7edff000, 1073745920) = 0; close(5) = 0; close(3) = 0; close(4) = 0; write(2, ""Version Info: This is the most r""..., 57Version Info: This is the most recent version of Salmon.; ) = 57; write(2, ""### salmon (mapping-based) v0.8.""..., 594### salmon (mapping-based) v0.8.2; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 1 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/R10002_C29P7ACXX }; ) = 594; stat(""/etc/localtime"", {st_mode=S_IFREG|0644, st_size=3519, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/R10002_C29P7ACXX"", {st_mode=S_IFDIR|S_ISGID|0755, st_size=512, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/R10002_C29P7ACXX"", {st_mode=S_IFDIR|S_ISGID|0755, st_size=512, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/R10002_C29P7ACXX/logs"", 0x7fffffff1e50) = -1 ENOENT (No such file or directory); s",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:147073,pipeline,pipeline,147073,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"340]@\3427\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0755, st_size=145896, ...}) = 0; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbffe3000; mmap(0x37e2400000, 2212848, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x37e2400000; mprotect(0x37e2417000, 2097152, PROT_NONE) = 0; mmap(0x37e2617000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x17000) = 0x37e2617000; mmap(0x37e2619000, 13296, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x37e2619000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/liblzma.so.0"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0 %\0\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_size=130728, ...}) = 0; mmap(NULL, 2226056, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbfdc3000; mprotect(0x7fffbfde2000, 2097152, PROT_NONE) = 0; mmap(0x7fffbffe2000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1f000) = 0x7fffbffe2000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libtbb.so.2"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320v\1\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_size=2271767, ...}) = 0; mmap(NULL, 2500784, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbfb60000; mprotect(0x7fffbfbac000, 2097152, PROT_NONE) = 0; mmap(0x7fffbfdac000, 16384, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x4c000) = 0x7fffbfdac000; mmap(0x7fffbfdb0000, 75952, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fffbfdb0000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libgomp.so.1"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\2405\0\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:92493,pipeline,pipeline,92493,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"4-openssl-dev. $ git clone https://github.com/COMBINE-lab/salmon.git; $ cd salmon; $ mkdir build && cd build; $ cmake -DNO_IPO=TRUE .. # GCC still doesn't handle LTO robustly; $ make -j8; $ make install; $ make test; ```. which leads to the output. ```; root@fd877e359439:/salmon/build# make install; [ 7%] Built target libcereal; [ 13%] Built target libtbb; [ 16%] Built target ntcard; [ 19%] Built target graphdump; [ 27%] Built target twopaco; [ 29%] Built target ksw2pp_sse2; [ 32%] Built target ksw2pp_sse4; [ 37%] Built target ksw2pp_basic; [ 38%] Built target ksw2pp; [ 59%] Built target puffer; [ 73%] Built target salmon_core; [ 76%] Built target alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc.so; -- Installing: /salmon/lib/libtbbmalloc.so.2; -- Installing: /salmon/lib/libtbbmalloc.so.2.5; -- Installing: /salmon/lib/libtbbmalloc_proxy.so; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2.5; -- Installing: /salmon/bin/salmon; -- Installing: /salmon/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon/bin to you",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:1503,Install,Installing,1503,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['Install'],['Installing']
Deployability,"4/bin"", {st_mode=S_IFDIR|0755, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/pcre/8.36/lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/jhpce/shared/community/core/pcre/8.36/lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/pcre/8.36/lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/jhpce/shared/community/core/pcre/8.36/lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:9406,pipeline,pipeline,9406,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability,"40]\300\r5\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0755, st_size=145896, ...}) = 0; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbffe3000; mmap(0x350dc00000, 2212848, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x350dc00000; mprotect(0x350dc17000, 2097152, PROT_NONE) = 0; mmap(0x350de17000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x17000) = 0x350de17000; mmap(0x350de19000, 13296, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x350de19000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/liblzma.so.0"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0 %\0\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_size=130728, ...}) = 0; mmap(NULL, 2226056, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbfdc3000; mprotect(0x7fffbfde2000, 2097152, PROT_NONE) = 0; mmap(0x7fffbffe2000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1f000) = 0x7fffbffe2000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libtbb.so.2"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320v\1\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_size=2271767, ...}) = 0; mmap(NULL, 2500784, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbfb60000; mprotect(0x7fffbfbac000, 2097152, PROT_NONE) = 0; mmap(0x7fffbfdac000, 16384, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x4c000) = 0x7fffbfdac000; mmap(0x7fffbfdb0000, 75952, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7fffbfdb0000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libgomp.so.1"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\2405\0\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:17161,pipeline,pipeline,17161,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"5.251] [alevinLog] [info] Done True Barcode Sampling; [2021-01-23 11:07:56.200] [alevinLog] [info] Total **49.0191% reads will be thrown away** because of noisy Cellular barcodes.; [2021-01-23 11:07:57.144] [alevinLog] [info] Done populating Z matrix; [2021-01-23 11:07:57.172] [alevinLog] [info] Total 35787 CB got sequence corrected; [2021-01-23 11:07:57.177] [alevinLog] [info] Done indexing Barcodes; [2021-01-23 11:07:57.177] [alevinLog] [info] Total Unique barcodes found: 3896665; [2021-01-23 11:07:57.177] [alevinLog] [info] Used Barcodes except Whitelist: 35219; [2021-01-23 11:07:57.360] [alevinLog] [info] Done with Barcode Processing; Moving to Quantify; .... > {; ""total_reads"": 188934609,; ""reads_with_N"": 0,; ""noisy_cb_reads"": 92614076,; ""noisy_umi_reads"": 17028,; ""used_reads"": 96303505,; ""mapping_rate"": 19.451325087824434,; ""reads_in_eqclasses"": 36750285,; ""total_cbs"": 3896665,; ""used_cbs"": 47725,; ""initial_whitelist"": 11511,; ""low_conf_cbs"": 995,; ""num_features"": 5,; ""no_read_mapping_cbs"": 70,; ""final_num_cbs"": 8324,; ""deduplicated_umis"": 19613485,; ""mean_umis_per_cell"": 2356,; ""mean_genes_per_cell"": 1120; }. ## I'm wondering that ; 1. how can I use as much reads as possible and improve the mapping rate.; 2. will the 150bp reads R1 affect the pipeline, and if it will, how can I make it to 28bp. By the way, the cellranger result shows that reads map to Transcriptome is low, but reads mapped to Genome is 85%. Reads Mapped to Genome | 85.2%; -- | --; Reads Mapped Confidently to Genome | 45.8%; Reads Mapped Confidently to Intergenic Regions | 11.0%; Reads Mapped Confidently to Intronic Regions | 4.2%; Reads Mapped Confidently to Exonic Regions | 30.6%; Reads Mapped Confidently to Transcriptome | 25.3%; Reads Mapped Antisense to Gene | 0.9%. Estimated Number of Cells | 7,938; -- | --; Fraction Reads in Cells | 73.1%; Mean Reads per Cell | 23,801; Median Genes per Cell | 1,076; Total Genes Detected | 17,492; Median UMI Counts per Cell | 2,155. Best wishes,; Matthew",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-766311567:8729,pipeline,pipeline,8729,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-766311567,1,['pipeline'],['pipeline']
Deployability,"73%] Built target salmon_core; [ 76%] Built target alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc.so; -- Installing: /salmon/lib/libtbbmalloc.so.2; -- Installing: /salmon/lib/libtbbmalloc.so.2.5; -- Installing: /salmon/lib/libtbbmalloc_proxy.so; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2.5; -- Installing: /salmon/bin/salmon; -- Installing: /salmon/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon/bin to your PATH; Please add /salmon/lib to your LD_LIBRARY_PATH; ==========================================================================; root@fd877e359439:/salmon/build# make test; Running tests...; Test project /salmon/build; Start 1: unit_tests; 1/2 Test #1: unit_tests ....................... Passed 0.37 sec; Start 2: salmon_read_test_quasi; 2/2 Test #2: salmon_read_test_quasi ........... Passed 1.80 sec. 100% tests passed, 0 tests failed out of 2. Total Test time (real) = 2.17 sec; ```. The `make test` command itself runs the test the builds the index and maps the reads against it. Either way, I can ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:2103,Install,Installing,2103,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['Install'],['Installing']
Deployability,"7ff8be5d09d0) = 52025; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7ff83e5cf000; mprotect(0x7ff83e5cf000, 4096, PROT_NONE) = 0; clone(child_stack=0x7ff87e5ceed0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7ff87e5cf9d0, tls=0x7ff87e5cf700, child_tidptr=0x7ff87e5cf9d0) = 52026; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = -1 ENOMEM (Cannot allocate memory); futex(0x7fffbf4c3350, FUTEX_WAKE_PRIVATE, 2147483647) = 0; write(2, ""terminate called without an acti""..., 45terminate called without an active exception; ) = 45; rt_sigprocmask(SIG_UNBLOCK, [ABRT], NULL, 8) = 0; write(3, ""[2017-04-05 16:40:15.587] [joint""..., 136) = 136; tgkill(51996, 51996, SIGABRT) = 0; --- SIGABRT (Aborted) @ 0 (0) ---; +++ killed by SIGABRT (core dumped) +++; ```. and for task 2:. ```; execve(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", [""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""quant"", ""-i"", ""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""-p"", ""1"", ""-l"", ""ISR"", ""-1"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-2"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-o"", ""/dcl01/lieber/ajaffe/lab/libd_al""...], [/* 107 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", 4096) = 88; access(""/etc/ld.so.preload"", R_OK) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory);",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:121719,pipeline,pipeline,121719,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"7ffc3e5de9d0) = 32696; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7ffbbe5dd000; mprotect(0x7ffbbe5dd000, 4096, PROT_NONE) = 0; clone(child_stack=0x7ffbfe5dced0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7ffbfe5dd9d0, tls=0x7ffbfe5dd700, child_tidptr=0x7ffbfe5dd9d0) = 32697; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = -1 ENOMEM (Cannot allocate memory); futex(0x7fffbf4c3350, FUTEX_WAKE_PRIVATE, 2147483647) = 0; write(2, ""terminate called without an acti""..., 45terminate called without an active exception; ) = 45; rt_sigprocmask(SIG_UNBLOCK, [ABRT], NULL, 8) = 0; write(3, ""[2017-04-05 16:24:37.940] [joint""..., 136) = 136; tgkill(32681, 32681, SIGABRT) = 0; --- SIGABRT (Aborted) @ 0 (0) ---; +++ killed by SIGABRT (core dumped) +++; ```; and for task 2:. ```; execve(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", [""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""quant"", ""-i"", ""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""-p"", ""1"", ""-l"", ""ISR"", ""-1"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-2"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-o"", ""/dcl01/lieber/ajaffe/lab/libd_al""...], [/* 107 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", 4096) = 88; access(""/etc/ld.so.preload"", R_OK) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory);",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:40756,pipeline,pipeline,40756,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"862610444, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX.fastq.gz"", {st_mode=S_IFREG|0644, st_size=4862610444, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX.fastq.gz"", {st_mode=S_IFREG|0644, st_size=4862610444, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX_read2.fastq.gz"", {st_mode=S_IFREG|0644, st_size=5004102866, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX_read2.fastq.gz"", {st_mode=S_IFREG|0644, st_size=5004102866, ...}) = 0; stat(""/dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10002_C29P7ACXX_read2.fastq.gz"", {st_mode=S_IFREG|0644, st_size=5004102866, ...}) = 0; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", {st_mode=S_IFREG|0775, st_size=96, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", O_RDONLY) = 4; read(4, ""{\n \""indexVersion\"": 2,\n \""ha""..., 8191) = 96; read(4, """", 8191) = 0; close(4) = 0; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", {st_mode=S_IFREG|0775, st_size=96, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", O_RDONLY) = 4; read(4, ""{\n \""indexVersion\"": 2,\n \""ha""..., 8191) = 96; read(4, """", 8191) = 0; close(4) = 0; clock_gettime(CLOCK_REALTIME, {1491424830, 69887706}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/header.json"", O_RDONLY) = 4; read(4, ""{\n \""value0\"": {\n \""Index""..., 8191) = 357; read(4, """", 8191) = 0; close(4) = 0; clock_gettime(CLOCK_REALTIME, {1491424830, 139950818}",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:164886,pipeline,pipeline,164886,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"://github.com/rob-p> mentions, your paper could help assess different methodologies for quantification and also help optimize salmon further for QuantSeq. I would still like you to check if you have used salmon quant command line correctly for QuantSeq data analysis. Your paper briefly alludes to QuantSeq Forward in the Introduction section of the paper. The QuantSeq Forward kit has an oligo (dT) primer which contains the Illumina-specific Read 2 linker ... but the Methods section of your paper does not specify if you have used QuantSeq FWD or REV. Page 14 of the PDF from the Lexogen Website data analysis pipeline for QuantSeq FWD<https://www.bluebee.com/wp-content/uploads/2018/11/015UG108V0201-QuantSeq-Data-Analysis-Pipeline_2018-10-18.pdf> recommends using the below htseq command line. htseq-count -m intersection-nonempty -s yes -f bam -r pos $bam; $resource_dir/annotation.gtf > $bam_dir/read_counts.txt. QuantSeq is a stranded protocol. For the QuantSeq FWD pipeline the argument -s yes indicates; stranded in the sense orientation. For the QuantSeq REV pipeline -s reverse is used. Similar to the above htseq command line arguments, I think if you are using QuantSeq FWD, the libType argument from salmon quant should have been SF. One way I checked these with my datasets was to run the salmon quant command 3 times - once with libType A, once with libType SF and once with libType SR -- with QuantSeq FWD the estimated counts will be almost same with libType A and libType SF. I echo what @rob-p<https://github.com/rob-p> says - Congratulations once again on the paper. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/COMBINE-lab/salmon/issues/449?email_source=notifications&email_token=AC4A5AGWBAOLTI4MOFLAJNDQYQN7FA5CNFSM4JOIEHZ2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEG3S5HQ#issuecomment-565653150>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AC4A5AFB7EMLYHVLVS",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565684552:1981,pipeline,pipeline,1981,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565684552,1,['pipeline'],['pipeline']
Deployability,"; $ make -j8; $ make install; $ make test; ```. which leads to the output. ```; root@fd877e359439:/salmon/build# make install; [ 7%] Built target libcereal; [ 13%] Built target libtbb; [ 16%] Built target ntcard; [ 19%] Built target graphdump; [ 27%] Built target twopaco; [ 29%] Built target ksw2pp_sse2; [ 32%] Built target ksw2pp_sse4; [ 37%] Built target ksw2pp_basic; [ 38%] Built target ksw2pp; [ 59%] Built target puffer; [ 73%] Built target salmon_core; [ 76%] Built target alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc.so; -- Installing: /salmon/lib/libtbbmalloc.so.2; -- Installing: /salmon/lib/libtbbmalloc.so.2.5; -- Installing: /salmon/lib/libtbbmalloc_proxy.so; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2.5; -- Installing: /salmon/bin/salmon; -- Installing: /salmon/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon/bin to your PATH; Please add /salmon/lib to your LD_LIBRARY_PATH; ==========================================================================; root@fd877e359439:/salmon/build# make test",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:1678,Install,Installing,1678,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['Install'],['Installing']
Deployability,"; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin"", {st_mode=S_IFDIR|0755, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../../external/install/lib"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/pcre/8.36/lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/jhpce/shared/community/core/pcre/8.36/lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/jhpce/shared/community/core/pcre/8.36/lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/jhpce/",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:9278,install,install,9278,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['install'],['install']
Deployability,"========================; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - not found; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads: TRUE; -- Could NOT find Boost; BOOST_INCLUDEDIR =; BOOST_LIBRARYDIR =; Boost_FOUND = 0; Build system will fetch and build Boost; ==================================================================; Setting Temporary Boost paths; BOOST INCLUDE DIR = $blah/salmon-0.10.2/external/install/include; BOOST INCLUDE DIRS = $blah/salmon-0.10.2/external/install/include; BOOST LIB DIR = $blah/salmon-0.10.2/external/install/lib; BOOST LIBRARIES =; Build system will build libdivsufsort; ==================================================================; Build system will fetch and build the Cereal serialization library; ==================================================================; Build system will fetch and build BWA (for Salmon); ==================================================================; -- Found TBB: /apps/gentoo/usr/include (found suitable version ""2018.0"", minimum required is ""2018.0"") found components: tbb tbbmalloc tbbmalloc_proxy; TBB_LIBRARIES = /apps/gentoo/usr/lib/libtbbmalloc_proxy.so;/apps/gentoo/usr/lib/libtbbmalloc.so;/apps/gentoo/usr/lib/libtbb.so; Build system will compile libgff; ==================================================================; ==================================================================; Build system will compile Staden IOLib; ==================================================================; Build system will fetch SPDLOG; ==================================================================; -- Found PkgConfig: /apps/gentoo/usr/bin/pkg-config (found version ""0.29.2""); -- Found Jemalloc: /apps/gentoo/usr/lib/libjemalloc.so (found version """"); Found Jemalloc librar",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387:3094,install,install,3094,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387,1,['install'],['install']
Deployability,"> > Hmm strange! But `conda install salmon` still gives the same error for me.; > ; > Hi @charlotte-west,; > ; > Can you please try the following?; > ; > ```; > CONDA_SUBDIR=osx-64 conda create -n rosetta # create a new environment; > conda activate rosetta; > conda env config vars set CONDA_SUBDIR=osx-64 # subsequent commands use intel packages; > conda install salmon; > ```; > ; > These instructions came from (here)[https://github.com/Haydnspass/miniforge#rosetta-on-mac-with-apple-silicon-hardware] and have worked for me on my M1 laptop. My understanding is that conda / bioconda are still working on having worker nodes that can pre-compile native M1 executables. So, until that work is complete, it may be necessary to run certain native packages in a Rosetta environment. Let me know if this works for you.; > ; > Best, Rob. it worked for me but i had to remove the comments starting with the `#`",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1384299365:28,install,install,28,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1384299365,2,['install'],['install']
Deployability,"> @citron96; > Applying patch is very standard. The way i created it was to make a copy of; > salmon-1.1.0/CMakeLists.txt as salmon-1.1.0/CMakeLists.txt.orig and to make edits to; > CMakeLists.txt.; > Then apply diff command to create patch:; > diff -Naur salmon-1.1.0/CMakeLists.txt.orig salmon-1.1.0/CMakeLists.txt > salmon-1.1.0.patch; > ; > Now, to apply the patch one needs to put a patch file on the same level where your untar'ed salmon-1.1.0/ is and then; > cd salmon-1.1.0/; > patch -p1 < ../salmon-1.1.0.patch; > ; > nadya. get it, and already solved the problem, thank you so much.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-604461081:24,patch,patch,24,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-604461081,7,['patch'],['patch']
Deployability,> A back port of this fix to a released 0.14.2 would be the most awesome solution ;-). Let me take this to the salmon team and get back to you. My apologies again for the stupid bug.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-537079202:31,release,released,31,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-537079202,1,['release'],['released']
Deployability,> A very old version of Salmon (0.4.2). Right. Sorry. I've just updated Homebrew-science to Salmon 0.6.0. https://github.com/Homebrew/homebrew-science/pull/3407,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/46#issuecomment-193939787:64,update,updated,64,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/46#issuecomment-193939787,1,['update'],['updated']
Deployability,"> Ahh, that's not how the conda install works. Take a look at the bioconda instructions here (http://combine-lab.github.io/salmon/getting_started/), and click the link therein to see how to install conda. Hi, problem solved, I can finally install and activate Salmon now, thank you very much!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623635133:32,install,install,32,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623635133,3,['install'],['install']
Deployability,"> Any idea what went wrong?. I had that issue while using Salmon version 0.9.1. Once I upgraded the salmon version, I could index the genome properly and I obtained gene-level TPM for the samples.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709536328:87,upgrade,upgraded,87,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/569#issuecomment-709536328,1,['upgrade'],['upgraded']
Deployability,"> Any updates on this, I agree with @antonkulaga that there should be some examples in the docs on how to use quantmerge. Have you solved it? I also need help",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/278#issuecomment-516709978:6,update,updates,6,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/278#issuecomment-516709978,1,['update'],['updates']
Deployability,"> Default RPATH settings; > By default if you don't change any RPATH related settings, CMake will link the executables and shared libraries with full RPATH to all used libraries in the build tree. When installing, it will clear the RPATH of these targets so they are installed with an empty RPATH. https://cmake.org/Wiki/CMake_RPATH_handling#Default_RPATH_settings. We want this default `RPATH` behaviour from `cmake`. I'm unsure why we're getting non-default behaviour.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239534893:202,install,installing,202,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239534893,4,['install'],"['installed', 'installing']"
Deployability,"> Edit: Similar things happen with conda installation, though the traceback details are slightly different:; Temporary breakpoint 1 at 0x7ffff6cf2512: file malloc.c, line 2951. Ok; *very* interesting. My current best idea is to try and reproduce this on a ubuntu 16.04 docker image. I'll let you know what I find.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404297912:41,install,installation,41,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404297912,1,['install'],['installation']
Deployability,"> Got it working. The ""short"" form for how to do so in Centos 6.9 is:. Awesome!. > Is it OK to delete the (large) salmon directory at this point, or is the binary hardwired to find things in it?. Every library that is not installed on the systems or statically compiled in is placed in the `lib` directory during the install process. So, it should be fine to delete the salmon directory.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397055192:222,install,installed,222,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397055192,2,['install'],"['install', 'installed']"
Deployability,"> Hey, I'm having the same kind of problem.; > ; > I aligned my PE reads against the transcriptome using BWA-mem and then sorted them by coordinates (as a regular procedure). I know Salmon assumes the alignments are not sorted, so I shuffled these bam files, and then run `salmon quant`. Here are the errors I got in a number of trials:; > ; > ### Fresh installation of Salmon; > ```; > conda create --name salmon -c bioconda salmon; > conda activate salmon; > ```; > ; > ### 1. Shuffling a bam file with `samtools collate`; > ```; > samtools collate \; > -@ 40 \; > -o SRR3212847.Aligned.Shuffled.bam \; > SRR3212847.Aligned.SortedByCoord.bam; > ; > salmon quant \; > -t mRNA.fasta \; > -p 20 \; > -l A \; > -a SRR3212847.Aligned.Shuffled.bam \; > -o SRR3212847.Aligned.Shuffled ; > ```; > ; > ```; > Version Info: This is the most recent version of salmon.; > # salmon (alignment-based) v1.4.0; > # [ program ] => salmon ; > # [ command ] => quant ; > # [ targets ] => { mRNA.fasta }; > # [ threads ] => { 20 }; > # [ libType ] => { A }; > # [ alignments ] => { SRR3212847.Aligned.Shuffled.bam }; > # [ output ] => { SRR3212847.Aligned.Shuffled }; > Logs will be written to SRR3212847.Aligned.Shuffled/logs; > [2021-01-08 12:43:44.680] [jointLog] [info] setting maxHashResizeThreads to 20; > [2021-01-08 12:43:44.680] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; > Library format { type:paired end, relative orientation:inward, strandedness:unstranded }; > [2021-01-08 12:43:44.711] [jointLog] [info] numQuantThreads = 14; > parseThreads = 6; > Checking that provided alignment files have consistent headers . . . done; > Populating targets from aln = ""SRR3212847.Aligned.Shuffled.bam"", fasta = ""mRNA.fasta"" . . .done; > ; > processed 0 reads in current roundSegmentation fault (core dumped); > ```; > ; > ### 2. Shuffling a headless bam file with `samtools collate`; > (I think I saw something about the bam's header in another thread d",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1343749456:354,install,installation,354,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1343749456,1,['install'],['installation']
Deployability,"> Hi @citron96,; > ; > This is what is covered in #496. This is because an upstream package changed the SHA of their _tagged_ releases (which is really not ideal). Are you pulling from the master branch? If you pull from develop, everything should build. I can pull the changes that fix this into master. Unfortunately, to avoid changing the signatures of _our_ tagged releases, I can't push this change back to older releases.; > ; > I think @nadyawilliams may also have a patch for the CMakeLists.txt file, which, perhaps, can be shared?. thank you so much.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-604461264:126,release,releases,126,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-604461264,4,"['patch', 'release']","['patch', 'releases']"
Deployability,"> Hi @jashapiro,; > ; > I've just pushed a commit that should address this, adding both a ""full"" `cmd_info.json` and a reasonable `meta_info.json`. If this is something you need on short notice we can try an push out a 1.5.2 soon, otherwise, this will be in the next release.; > ; > Best,; > Rob. Hi Rob- . I was happy to wait, but since [you were so quick to push out `alevin-fry` 0.4.1](https://github.com/COMBINE-lab/alevin-fry/issues/22#issuecomment-885195051) , it might be nice to have the version bump here too, so we can use all of the available info in our pipeline!. Thanks for your quick responses!; -Josh",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-885209656:267,release,release,267,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-885209656,2,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"> Hi Brian,; > ; > In general, I would argue that one should be cautious with removing PCR duplicates in RNA-seq data (unless you are dealing with reads with UMI tags). This is because reads that align to the same reference position can easily have come from alternative transcripts sharing the same underlying sequence. Hence, the normal tests used to infer PCR duplicates with e.g. DNA-seq reads can yield false-positives in RNA-seq. This is particularly true for highly abundant transcripts (or transcripts from highly-abundant genes).; > ; > We are currently working on the code that will do duplicate removal when UMI tags are present. That methodology can be extended to remove duplicates even without UMI tags --- though I'd generally caution against that for the reasons mentioned above. However, for the time being, if you have a strong need or desire to filter PCR duplicates, you could use alignment-based Salmon with a BAM file that has duplicates removed.; > ; > Finally, regarding the error you are getting during SAM validation; this sounds like a different issue. Would you mind providing a piece of that SAM file for me to take a look at? Specifically, I don't believe the quasi-mapping output file should even contain unmapped reads (unless you consider unmapped mates of orphaned reads).; > ; > --Rob. It is in the latest Salmon release?. Thanks",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-446191570:1348,release,release,1348,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/136#issuecomment-446191570,1,['release'],['release']
Deployability,"> Hmm strange! But `conda install salmon` still gives the same error for me. Hi @charlotte-west,. Can you please try the following?. ```; CONDA_SUBDIR=osx-64 conda create -n rosetta # create a new environment; conda activate rosetta; conda env config vars set CONDA_SUBDIR=osx-64 # subsequent commands use intel packages; conda install salmon; ```. These instructions came from (here)[https://github.com/Haydnspass/miniforge#rosetta-on-mac-with-apple-silicon-hardware] and have worked for me on my M1 laptop. My understanding is that conda / bioconda are still working on having worker nodes that can pre-compile native M1 executables. So, until that work is complete, it may be necessary to run certain native packages in a Rosetta environment. Let me know if this works for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137183671:26,install,install,26,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137183671,2,['install'],['install']
Deployability,> I have the same issue. None of the conda version works on my Linux Centos.; > Is there any library to add in the conda recipe to fix the issue ?. Similar issue here too with salmon 1.4.0 installed via conda in a clean environment; `salmon: error while loading shared libraries: libtbb.so.2: cannot open shared object file: No such file or directory`. Edit: apparently solved by downgrading `tbb` as suggested in https://www.biostars.org/p/494922/,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-802737580:189,install,installed,189,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-802737580,1,['install'],['installed']
Deployability,"> In STAR there is an option to use stranded alignment (--readStrand, which can take ""Unstranded"", ""Forward"", or ""Reverse""). For the pipeline I'm building it would be ideal if I didn't have to specify the strandedness of the library as I'm not the one preparing the samples and it's not always easy to get that information from the scientist in the lab. As such, it would be great if I can use the default strandedness argument to STAR (""Unstranded"") and let salmon ""do the right thing"" by letting it choose the libType for me. With that in mind, if I let salmon choose for me (-l A) am I risking throwing out any data?. Right, so in this case, STAR should produce all highest-scoring valid alignments regardless of orientation. Then, when running salmon with `-l A` it will detect the strandedness and only discard alignments compatible with the appropriate strand type (which may be unstranded if that is the protocol). Salmon is pretty conservative about reporting when there is any ambiguity. By default, if the strand bias is stronger than a few percent. In a stranded protocol, it will report and if it infers more than a few percent of fragments no having a valid alignment. So you can always double-check samples where the strandedness is at all ambiguous. > In addition, if a transcript was aligned in a unstranded manner and ended up aligning to the wrong location due to ambiguity between the positive orientation of one transcript and the negative orientation of another, can salmon correct this by reassigning it to the right transcript based on the joint probability of all the other alignments (if you can't tell I'm at the edge of my BS zone)?. If there is not an alignment to the correct location _in addition to_ the wrong location, then no. If you run salmon in alignment mode, it will assign each fragment probabilistically to the set of transcripts to which it aligns. There is, by definition, a probability of 0 for a fragment being assigned to a location where it doesn't align.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/590#issuecomment-733417813:133,pipeline,pipeline,133,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/590#issuecomment-733417813,1,['pipeline'],['pipeline']
Deployability,"> Is this read set & reference txome available to try and reproduce this?. Unfortunately no, it's a generated fasta file (it used to work with 0.9.1 without ""validateMappings"" though). [info] Building 32-bit suffix array (length of generalized text is 462349554); processed 462000000 positions; khash had 208056876 keys. > Also, would it be possible to check if this occurs using the bioconda-packaged release?. Still a seg fault but I now have the following message:; WARNING: Could not associate known library type with read!; WARNING: PE compatibility function called with SE read!; expected: Library format { type:paired end, relative orientation:inward, strandedness:unstranded }, observed: Library format { type:, relative orientation:, strandedness: }; Segmentation fault: 11",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393236903:402,release,release,402,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393236903,1,['release'],['release']
Deployability,"> Please see attached patch here. I did not realized my writing was stylized which; > wiped out correct syntax. Nadya; > [salmon-1.1.0.patch.txt](https://github.com/COMBINE-lab/salmon/files/4382067/salmon-1.1.0.patch.txt). Hello, @nadyawilliams ; Thank you for your kind support. Since I'm pretty new here and even know nothing about how to applying this patch to fix the problem, could you give me some extra advice on it? Many thanks.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-603952681:22,patch,patch,22,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-603952681,4,['patch'],['patch']
Deployability,"> Thanks!! Looking into it, replied. Hi,. I am having a similar issue when running salmon 1.4 on stranded single end data. Transcript count is over 4,000 for certain genes when analyzed by STAR, but salmon does not detect the transcript. Is there any newer version of this branch or suggested configuration that I can use to test my data? Thank you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-1145373488:293,configurat,configuration,293,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-1145373488,1,['configurat'],['configuration']
Deployability,"> The same with version 1.2.0.; > ; > Is there a way to disable version check by default, completely? I install Salmon as a module and I wouldn't let it update itself automatically, anyway. ```; --- Salmon.cpp.ori 2020-04-21 15:12:29.916219870 +0000; +++ Salmon.cpp 2020-04-21 15:16:48.488926415 +0000; @@ -53,7 +53,7 @@; ""Usage: salmon -h|--help or \n""; "" salmon -v|--version or \n""; "" salmon -c|--cite or \n""; - "" salmon [--no-version-check] <COMMAND> [-h | options]\n\n"");; + "" salmon <COMMAND> [-h | options]\n\n"");; helpMsg.write(""Commands:\n"");; helpMsg.write("" index Create a salmon index\n"");; helpMsg.write("" quant Quantify a sample\n"");; @@ -171,8 +171,6 @@; // https://gist.github.com/randomphrase/10801888; po::options_description sfopts(""Allowed Options"");; sfopts.add_options()(""version,v"", ""print version string"")(; - ""no-version-check"",; - ""don't check with the server to see if this is the latest version"")(; ""cite,c"", ""show citation information"")(; ""help,h"", ""produce help message"")(""command"", po::value<string>(),; ""command to run {index, quant, sf}"")(; @@ -209,11 +207,6 @@; std::exit(0);; }. - if (!vm.count(""no-version-check"")) {; - std::string versionMessage = getVersionMessage();; - std::cerr << versionMessage;; - }; -; // po::notify(vm);. std::string cmd = vm[""command""].as<std::string>();; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-617250297:104,install,install,104,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-617250297,2,"['install', 'update']","['install', 'update']"
Deployability,@Arturo3116 - looks like your file/directory structure is needed to help. You could go 1 level up from where you were running `salmon index` and share the output of the `tree` command (https://www.tecmint.com/linux-tree-command-examples/) . You can install tree via conda - https://anaconda.org/conda-forge/tree,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/797#issuecomment-1238807484:249,install,install,249,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/797#issuecomment-1238807484,1,['install'],['install']
Deployability,"@HenrikBengtsson,. Good catch. We had to update the continuous integration image used because we bumped some libraries (and the compiler version). Apparently the permissions are not set up in the same way by default. Can you share what you think the permissions should be for the relevant files / folders?. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/761#issuecomment-1067239060:41,update,update,41,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/761#issuecomment-1067239060,3,"['continuous', 'integrat', 'update']","['continuous', 'integration', 'update']"
Deployability,"@InesdeSantiago ; Sorry, that the docs are not updated yet. It's definitely on our to-do list. The selective alignment needs a separate index from normal quasi-index. The steps are as following, ; If you are in salmon root folder, the most updated branch that implements Selective Alignment is,; [this branch](https://github.com/COMBINE-lab/salmon/tree/rescue-orphan). >git checkout rescue-orphan ; (re-build it); >build/src/salmon index -i selective_alignment_ind -t transcript.fa; >salmon quant -i selective_alignment_ind -la -1 reads1.fa -2 reads2.fq -o transcript_quant --softFilter --editDistance 4 --rangeFactorization 4 . We strongly recommend these options while using selective alignment, as they tend to produce superior result almost always (I am considering them making default soon :) ). Please let me know if you face problem in any of the above steps, or if the results are not expected. ; Thanks again for using selective alignment and Salmon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/160#issuecomment-367371707:47,update,updated,47,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/160#issuecomment-367371707,2,['update'],['updated']
Deployability,"@Miserlou : I was assuming that this is actually the predecessor of #323, which is still open (@k3yavi, can we remove ""fixed in latest release"" tag, until we know?).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/320#issuecomment-444990544:135,release,release,135,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/320#issuecomment-444990544,1,['release'],['release']
Deployability,"@PeteHaitch Thanks for making the pull request and correcting the barcode length for the celseq2 protocol. We'll review it soon and merge it to the develop (which will be merged to master in next release). @rob-p I think we already have that capability of specifying the CB and UMI length, it's just CelSeq2 was little difference in the *order* of them. Basically the flags like `--chromium` or any other protocols are wrapper around using the standard CB and UMI lengths. If one wants a customization we can always use `--umiLength` and `--barcodeLength`. I am thinking of tweaking the `--end` part of the `struct` to select the order of the CB and UMI which incase of CelSeq2 is reverse.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-418772038:196,release,release,196,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-418772038,1,['release'],['release']
Deployability,"@apeltzer ,. I tried to use the pre-compiled binary myself under alpine within Docker. Initially, it suffers from the same issue (lack of a compliant libc). However, by installing the glibc compatibility layer (which was simply a few commands as laid out [here](https://github.com/sgerrand/alpine-pkg-glibc)), I was able to get the pre-compiled binary to work without issue. Actually, this layer may also fix building from source, but I have not checked yet.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-345761296:169,install,installing,169,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-345761296,2,['install'],['installing']
Deployability,"@bgruening So I've tried some runs today with higher memory configurations and can still reproduce the segfault. I'm going to continue on and try to write up a reproducer for @dpryan79 [here](https://github.com/bioconda/bioconda-recipes/issues/10662#issuecomment-415967622). **`salmon 0.11.2 run with: NativeSpecification --ntasks=1 --nodes=1 --mem=25000`**; - `scontrol show job 94`; ```; JobId=94 Name=g990_salmon_refinery_stemcellcommons_org; UserId=galaxy(1001) GroupId=users(100); Priority=4294901667 Account=(null) QOS=(null); JobState=COMPLETED Reason=None Dependency=(null); Requeue=1 Restarts=0 BatchFlag=1 ExitCode=0:0; RunTime=00:07:32 TimeLimit=UNLIMITED TimeMin=N/A; SubmitTime=2018-08-27T15:36:41 EligibleTime=2018-08-27T15:36:41; StartTime=2018-08-27T15:36:41 EndTime=2018-08-27T15:44:13; PreemptTime=None SuspendTime=None SecsPreSuspend=0; Partition=main AllocNode:Sid=ip-172-31-24-127:21595; ReqNodeList=(null) ExcNodeList=(null); NodeList=w19; BatchHost=w19; NumNodes=1 NumCPUs=1 CPUs/Task=1 ReqS:C:T=*:*:*; MinCPUsNode=1 MinMemoryNode=25000M MinTmpDiskNode=0; Features=(null) Gres=(null) Reservation=(null); Shared=OK Contiguous=0 Licenses=(null) Network=(null); Command=(null); WorkDir=/mnt/galaxy/tmp/job_working_directory/000/990; ```. - `Galaxy stderr`; ```; Fatal error: Exit code 139 (); ...; /mnt/galaxy/tmp/job_working_directory/000/990/tool_script.sh: line 50: 5713 Segmentation fault (core dumped) salmon quant --index ./index --libType U --unmatedReads ./single.fastq --output ./output --allowOrphans --ma 2 --mp 4 --go 5 --ge 3 --minScoreFraction 0.65 --threads ""${GALAXY_SLOTS:-4}"" --incompatPrior 1e-20 --biasSpeedSamp 1 --fldMax 1000 --fldMean 200 --fldSD 80 --forgettingFactor 0.65 --maxReadOcc 100 --numBiasSamples 2000000 --numAuxModelSamples 5000000 --numPreAuxModelSamples 1000000 --numGibbsSamples 0 --numBootstraps 0 --consensusSlack 0 --vbPrior 0.001 --sigDigits 3; ```. - `syslog`; ```; ip-172-31-30-93 kernel: [ 681.083866] salmon[4167]: segfault at 2641a i",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238:60,configurat,configurations,60,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416364238,1,['configurat'],['configurations']
Deployability,"@cihanerkut and @EricDeveaud,. We just released 1.2.1, which is on the release page, and dockerhub, and should propagate to bioconda soon. It adds support for the `SALMON_NO_VERSION_CHECK` environment variable. If you set `SALMON_NO_VERSION_CHECK` to either `1` or `TRUE` in the environment where salmon is running, it will skip the version check. I hope this helps!. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-617830312:39,release,released,39,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-617830312,2,['release'],"['release', 'released']"
Deployability,"@citron96 ; Applying patch is very standard. The way i created it was to make a copy of; salmon-1.1.0/CMakeLists.txt as salmon-1.1.0/CMakeLists.txt.orig and to make edits to; CMakeLists.txt. ; Then apply diff command to create patch:; diff -Naur salmon-1.1.0/CMakeLists.txt.orig salmon-1.1.0/CMakeLists.txt > salmon-1.1.0.patch. Now, to apply the patch one needs to put a patch file on the same level where your untar'ed salmon-1.1.0/ is and then; cd salmon-1.1.0/; patch -p1 < ../salmon-1.1.0.patch. nadya",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-604029006:21,patch,patch,21,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-604029006,7,['patch'],['patch']
Deployability,"@deevdevil88,. As an update to this, you can now use the alevin -> [alevin-fry](https://alevin-fry.readthedocs.io/en/latest/) pipeline to quantify with different strategies for filtering. If you're using a technology with an external permit list (like 10x chromium), you can recover and quantify unfiltered cells as well as of version 0.2.0 using the `--unfiltered-pl` flag. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/538#issuecomment-825059035:21,update,update,21,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/538#issuecomment-825059035,2,"['pipeline', 'update']","['pipeline', 'update']"
Deployability,"@demis001 Salmon's `--geneMap | -g` option does take a GTF file (although you're correct that it can also take a two-column text file, and I think accepting both types of files in the same option is a bit confusing). See some context in this [old issue](https://github.com/COMBINE-lab/salmon/issues/114). I believe the issue you're seeing is that Ensembl will update transcript (and gene I think) versions like so:. ```; !! this is not real data, just a toy example. ensembl v24; -------------; ENST0000001.1; ENST0000002.1. ensembl v25; -------------; ENST0000001.2; ENST0000002.2; ```; and the GTF file you used to build the salmon index is ""ensembl v24"", but now you only have ""ensembl v25"" available during the `salmon quant` run. . **The most correct thing** to do at this point would be to either rebuild the salmon index using ""ensembl v25"" and rerun `salmon quant -g ensembl_v25.gtf`, or get the ""ensembl v24"" GTF file (re-download from Ensembl website) and pass this to `salmon quant -g ensembl_v24.gtf`. . **The thing would probably be okay** is to allow passing GTF files that do not exactly match the transcript accessions, where ""ENST0000001"" is the ""accession"" and "".1"" is the ""version"" - hence ""accession.version"". This way you can just ignore the version part of the transcript/gene names in the GTF file for the purposes of constructing a tx<>gene map.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/122#issuecomment-282342092:360,update,update,360,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/122#issuecomment-282342092,1,['update'],['update']
Deployability,"@diegoalzatec86 Also, you should probably upgrade to 1.2.0 as there have been many memory related issues that @rob-p and @k3yavi have incorporated in 1.2.0",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614198287:42,upgrade,upgrade,42,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614198287,1,['upgrade'],['upgrade']
Deployability,"@diegoalzatec86 I think you are referring to this page - https://combine-lab.github.io/salmon/getting_started/. I myself have used that I did not encounter any errors or anything related to sailfish when I used the very same shell script you are alluding to.. I don't know which tutorial has the sailfish code that you state - https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614279802. @rob-p Check this https://raw.githubusercontent.com/COMBINE-lab/salmon/gh-pages/assets/quant_tut_samples.sh . Probably you landed on a wrong or outdated tutorial page . As previously mentioned many times in this GH issue, most of sailfish code is within salmon . Either way, I think you should use bioconda to upgrade to 1.2.0 and start using salmon as the quantification tool",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614298125:710,upgrade,upgrade,710,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614298125,1,['upgrade'],['upgrade']
Deployability,@habilzare Glad to hear that it worked out and thanks for fast and useful moderation from default alevin pipeline. We will work on correcting the suggestions made in the next release of Salmon.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-407618154:105,pipeline,pipeline,105,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-407618154,2,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"@ialbert (and @mdshw5 who seems to be peeking in ;P),. Ok, actually, the adjustment code seems correct. The issue actually seems to be stemming from the use of sse in the call to ksw2. It's actually a bit unclear why this is happening, but interestingly, if we *don't* use the sse variant, we get the correct positions for these alignments. So, we know how to fix these case, but I'd like to understand *why* better before I push the fix upstream (and make sure it doesn't adversely affect other alignments). _edit_: Update to clarify the culprit is `extz2_sse` in combination with `KSW_EZ_RIGHT` and not just `KSW_EZ_RIGHT` by itself.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/475#issuecomment-574472965:517,Update,Update,517,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/475#issuecomment-574472965,1,['Update'],['Update']
Deployability,"@ialbert,. Thanks again for the detailed bug report and reproducible example for this. We (@mohsenzakeri and I) have pushed experimental support for soft-clipping to the develop branch. You can enable this feature by passing `--softclip` flag to the `quant` command. We have also made a pre-compiled binary that includes this feature [here](https://drive.google.com/open?id=1Si1BqGXLievhol-e3RWjhxzajvVHY2mS). If you have a chance to test this on some of your data to see if the soft-clipping is working as expected in IGV on a larger scale (we tested on the data you provided), we'd be happy to have any feedback. In a future version, we will likely provide the ability to write the full CIGAR string (with mismatches, indels, etc.) out, but that requires the merging and testing of two branches of pufferfish upstream, and so will probably be reserved for a future release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/475#issuecomment-596774053:867,release,release,867,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/475#issuecomment-596774053,2,['release'],['release']
Deployability,@k3yavi . I cannot get it to update even on new env. My command is; ```; conda install -c bioconda salmon=1.0.0; ```; and it freezes everytime; ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; ```,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/461#issuecomment-567461956:29,update,update,29,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/461#issuecomment-567461956,2,"['install', 'update']","['install', 'update']"
Deployability,@k3yavi . Works!! I would update the documentation file. Thanks!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/389#issuecomment-506496725:26,update,update,26,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/389#issuecomment-506496725,1,['update'],['update']
Deployability,"@k3yavi let me share my status. > salmon-latest_linux_x86_64.tar.gz; > Mac-Osx v 10.13.2. I downloaded the binary file. And it works! :) Thanks. In other words, I downloaded below binary file on release page.; https://github.com/COMBINE-lab/salmon/releases/download/v0.11.2/salmon-0.11.2-linux_x86_64.tar.gz. But it did not work like this. ```; $ wget https://github.com/COMBINE-lab/salmon/releases/download/v0.11.2/salmon-0.11.2-linux_x86_64.tar.gz; $ tar xzvf salmon-0.11.2-linux_x86_64.tar.gz; $ cd salmon-0.11.2-linux_x86_64/; $ ./salmon --help; -bash: ./salmon: cannot execute binary file; ```. I have not tried to install by bioconda yet.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-412661401:195,release,release,195,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-412661401,4,"['install', 'release']","['install', 'release', 'releases']"
Deployability,"@kobeho24, Any update on this? Have you had a chance to try any of the suggestions?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/120#issuecomment-281438238:15,update,update,15,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/120#issuecomment-281438238,1,['update'],['update']
Deployability,@lizhaozhi Do you have R 4.0.3 in your conda enviornment? 0.14 is the version of Salmon that conda tries to downgrade me to when I try to update from R 4.0.2 to R 4.0.3 see: https://github.com/COMBINE-lab/salmon/issues/594,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/592#issuecomment-736855646:138,update,update,138,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/592#issuecomment-736855646,1,['update'],['update']
Deployability,"@mousepixels Apologies for slow reply, I found myself circling back to this same issue with another project and thought I'd update the thread. Seems like there was some guidance all along regarding dealing with ONT data. See this [link ](https://combine-lab.github.io/salmon-tutorials/2021/ont-long-read-quantification/). . To summarize, looks like they advise _-N 100 -p 1.0_ for minimap2, which coincidently is what I have been doing as well. Hope that's helpful if you haven't already come up with a strategy.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/790#issuecomment-2028185516:124,update,update,124,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/790#issuecomment-2028185516,2,['update'],['update']
Deployability,@nickhir https://github.com/COMBINE-lab/salmon/releases/tag/v1.2.0 is now released by @rob-p,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/503#issuecomment-612220894:47,release,releases,47,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/503#issuecomment-612220894,2,['release'],"['released', 'releases']"
Deployability,"@ppflrs . This issue is now resolved in [v0.8.2](https://github.com/COMBINE-lab/salmon/releases/tag/v0.8.2). Further, since the bug was only on the de-serialization end, this should work with the index you've already prepared with Salmon v0.8.1. Please let me know if that works for you. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/129#issuecomment-287460267:87,release,releases,87,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/129#issuecomment-287460267,1,['release'],['releases']
Deployability,"@red-plant ,. Thanks for the detailed report. Has anything else changed on the system since you upgraded? Does this same dataset finish much faster with 1.0.0? There have been no large-scale changes to alignment since 1.0.0 that should affect the runtime, so this is definitely completely unexpected behavior. We will also try to reproduce locally on this data.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-636410492:96,upgrade,upgraded,96,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-636410492,1,['upgrade'],['upgraded']
Deployability,"@rob-p @k3yavi . With release of salmon/v1.0, do you have any recommendations for `salmon quant command line for QuantSeq`. Many users (me included) would [like to hear from you to the question posted here](https://github.com/COMBINE-lab/salmon/issues/365)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549220121:22,release,release,22,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549220121,1,['release'],['release']
Deployability,"@rob-p @k3yavi ; IMO, There is something missing in all the relevant documentation associated with salmon/v1.0. https://salmon.readthedocs.io/en/latest/salmon.html#preparing-transcriptome-indices-mapping-based-mode points to this https://github.com/COMBINE-lab/SalmonTools/blob/master/README.md which still states the use of gtf/gff. also, the usage statement in generateDecoyTranscriptome.sh script [here](https://github.com/COMBINE-lab/SalmonTools/blob/master/scripts/generateDecoyTranscriptome.sh) still states the use of gtf files. The link to the preprint paper within salmon_readthedocs stills points to the June 2019 version - https://www.biorxiv.org/content/10.1101/657874v1 . Isn't there a newer version of this preprint which got released couple of days back.. Am I missing something?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/384#issuecomment-549180089:740,release,released,740,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/384#issuecomment-549180089,1,['release'],['released']
Deployability,"@rob-p Could it be that I am not using the correct command line `salmon quant` options for Lexogen/QuantSeq _(this will be referred to as QS in the rest of the message(s))_ ?. `salmon quant --threads 16 --noLengthCorrection --validateMappings --numBootstraps 100 -l SF -i <path_to_SAF_Gentrome_Index> -r <SE_READ_1.fq> -o <salmon_SE_READ_1>`. I chose the above command line options (`especially --noLengthCorrection`) based on [Rob's message here](https://groups.google.com/d/msg/sailfish-users/VIfqBwgF6xQ/fw-rgC_kAwAJ) and a [thread here](https://github.com/COMBINE-lab/salmon/issues/108). Let me elaborate the big picture of my analyses and give more details about how I came up with the mapping numbers in my original post. Big Picture - DEG identification for samples sequenced by ILMN (whole transcript method) and QS (3' method) - [something similar to this paper](https://bmcgenomics.biomedcentral.com/articles/10.1186/s12864-018-5393-3). Bioinformatics Pipeline(s) for both ILMN and QS :. 1. HISAT Method : Adapter/Quality Trimming, Hisat2-HTSEQ, Get_Count_Table, DESeq; 2. STAR_RSEM Method: Adapter/Quality Trimming, STAR_RSEM, Get_Count_Table, DESeq; 3. SAF Method: Adapter/Quality Trimming, SAF_SALMON, Get_Count_Table, DESeq; 4. Quasi-Mapping or TXOME Method: Adapter/Quality Trimming, TXOME_SALMON, Get_Count_Table, DESeq. I used UpSetR plots for comparisons of sets of DEGs from each method just [as you have shown in your recent preprint](https://www.biorxiv.org/content/10.1101/657874v1.full). In the ILMN analyses, there is great concordance between the SAF method and HISAT/STAR_RSEM method. However, in the QS analyses, there is very limited concordance between SAF and the HISAT/STAR_RSEM method. For QS analyses, the TXOME method shows great concordance with HISAT/STAR_RSEM. This finding made me wonder if this has to be something with my salmon quant command line options for QS. Therefore, I wanted to check how the QS expected counts for SAF method show up for all samples in",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195:962,Pipeline,Pipeline,962,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-554768195,1,['Pipeline'],['Pipeline']
Deployability,"@rob-p I've taken the time to [update salmon to 0.11.2 in it's respective Galaxy Tool wrapper](https://github.com/bgruening/galaxytools/pull/778) and am still seeing the `salmon quant` segfault when running through SLURM. . bioconda installs of salmon 0.9.1 & 0.11.2 run to completion outside of SLURM on the same machine. I've seen that #268 was opened and closed recently, but I don't have the liberty to resolve the salmon dependency outside of conda (at least very easily/in a timely fashion). Update: Have since filed https://github.com/bioconda/bioconda-recipes/issues/10662",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-415831123:31,update,update,31,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-415831123,3,"['Update', 'install', 'update']","['Update', 'installs', 'update']"
Deployability,@rob-p Thanks for your quick reply! I'll try this out with a more recent conda installation of salmon and report back,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-413883226:79,install,installation,79,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-413883226,1,['install'],['installation']
Deployability,"@rob-p This is not running twice on same sample. I can see that this run generates a exit code of 1 for that run - however all files are there as needed. Other samples have a exit code 0. I looked up sample runs before and after - they seem to have correct exit codes and ran fine. Even this runs fine, but what triggers that error message - I am not sure. ```; failed to read 8 bytes; salmon quant invoked improperly; ```. I also reran my whole pipeline (qc_trimming etc and finally salmon) - this time with 5 samples only (and included the above sample) - the pipeline runs successfully. Not sure where to investigate",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/512#issuecomment-618044865:446,pipeline,pipeline,446,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/512#issuecomment-618044865,2,['pipeline'],['pipeline']
Deployability,@rob-p We have our own Jenkins install at Gent University that we use to make sure [EasyBuild](http://easybuild.readthedocs.org/en/latest/) scripts build a wide range of scientific software. I don't think we're to open it up for free use. I see there is AppVeyor but they only support Visual Studio. I'll take a look at what's available.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/9#issuecomment-126522041:31,install,install,31,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/9#issuecomment-126522041,1,['install'],['install']
Deployability,@rob-p and @Gaura and update on this? Would be good to know if this is feasible,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-936300287:22,update,update,22,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-936300287,1,['update'],['update']
Deployability,@rob-p and @k3yavi . Thanks for your answers. **_Suggestion_**: It will be great if the [getting started with Salmon document](https://combine-lab.github.io/salmon/getting_started/) is updated to reflect all possible scenarios you list out above. It might also be better to pull off that document till it gets updated OR if it is redirected to something more pertinent.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549200108:185,update,updated,185,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549200108,2,['update'],['updated']
Deployability,"@rob-p hi,; any chance of making them BAM output for future releases? In some cases (e.g. TCGA files) the SAM output can be really huge...",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/38#issuecomment-390611228:60,release,releases,60,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/38#issuecomment-390611228,1,['release'],['releases']
Deployability,"@rob-p once you have time, we should cut out a release for `0.11.3`, #281 can also be solved using `--debug` mode.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/266#issuecomment-416974627:47,release,release,47,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/266#issuecomment-416974627,1,['release'],['release']
Deployability,"@roryk I don't think an R package is the right answer :) . My real motivation is to load into Degust: http://www.vicbioinformatics.com/degust/. It can be done with simple Unix cut/paste or with a python script too. But I don't want to depend on R for the pipeline, or even littler. @vals I'll take a look at your script, but still be better if part of Salmon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/77#issuecomment-240556885:255,pipeline,pipeline,255,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/77#issuecomment-240556885,2,['pipeline'],['pipeline']
Deployability,"@vals, it shouldn't be a coverage issue, at least as compared to previous versions of Salmon. Hopefully we'll have a chance to look at this soon and see if we can figure out what might be causing the performance ""regression"" when `--useVBOpt` is enabled. As @dcjones suggests, we haven't really seen any performance degradation with the VB option in our other testing, so I suspect something characteristic of this dataset. @dcjones; it's great to see you drop by! I'm actually looking for a reasonable collection of datasets to do (automated) regression testing on new releases of salmon --- something to replace my fairly simple and manual existing regression tests. I'd greatly appreciate any suggestions or advice you may have about this! Such tests will become even more useful as we're experimenting with a few inference approaches and it would be great to have a reasonable spread of data to see the effects of different strategies.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-112224408:570,release,releases,570,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/6#issuecomment-112224408,2,['release'],['releases']
Deployability,"@zhangchipku,. The default value of `--minScoreFraction` is quite reasonable, I think. It depends on the read length, but for a 100-bp read, it corresponds to 8 mismatches under the default scoring parameters. So the read pair could have up to 16 mismatches before being discarded. I understand that the recommendation to trim reads is a new one, but I think it is a standard best-practice anyway. However, we are looking at the possibility of allowing read-end soft-clipping in future releases, which could mitigate this need in the most common case. It is worth noting that, if you *don't* want to use selective alignment, then the last version of salmon that you can use is the one tagged as `0.15.0`. As of version 1.0.0, the index structure and default mapping algorithm changed, so that selective alignment is ""always on"". This is discussed in some detail in the release notes for version 1.0.0. Generally, we think that the benefits offered by selective-alignment are important, and, unless there is a very strong reason not to, one should generally ensure that reads sharing some exact matches with the reference also produce reasonable quality alignments at the implied loci. However, we also try to be very receptive and responsive to our users' workflows and desiderata, so if the soft-clipping feature is something that would make your experience much smoother, we will certainly consider prioritizing that feature for a future release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-586478704:486,release,releases,486,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/485#issuecomment-586478704,6,['release'],"['release', 'releases']"
Deployability,"A BAM file can contain both paired and single-end reads. I haven't been using Salmon long enough to know whether it supports a mixture of paired and single reads. If it doesn't, then there's no issue, because you know immediately after reading the first mapped read whether it is paired. If Salmon does support a mixture of paired and single reads, then you have a problem, because you could have, for example, a BAM file with 10 million single-end reads and then one paired set of 2 reads. In other words, you can't conclude a BAM file is single-end only except by checking every read in the file. I think this means that in the worst case, `--libtype A` would require 2 passes through the BAM file, once to check for paired reads and then again to actually run the quantification. Here's a strategy that might work without 2 passes, possibly at the cost of increased peak memory usage. The release notes say that `--libType A` uses the first 50k reads to infer the lib type. So, read from the BAM file until enough read pairs (25k pairs?) have been read, and then infer the paired library type from those. However, if the first 100k reads don't yield 25k pairs, then just infer the orientation of the unpaired/first mate reads. In this case, now feed the input into 3 separate runs of the quantification at once, one for each possible paired library type. For example, if the first-read orientation is inferred as `SF`, then the 3 possible paired library types are `ISF`, `MSF`, and `OSF`. Run the entire file through each of these 3 quantifaction runs, and then decide afterward which one turned out to be correct (probably whichever one counted the most concordantly paired mates?). Then kill the other 2 runs and finish running the chosen one through the rest of the algorithm. That should avoid having to make multiple passes through the input, but you will triple some component of the memory usage up to the point where the two wrong runs are killed.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/79#issuecomment-241900687:892,release,release,892,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/79#issuecomment-241900687,1,['release'],['release']
Deployability,A back port of this fix to a released 0.14.2 would be the most awesome solution ;-),MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-537076262:29,release,released,29,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-537076262,1,['release'],['released']
Deployability,A couple of question before you fix the pipeline to do this though: ; * In general what fraction of the CB does SoupX expects to have from 1-10 CB ?; * In our experience. a usual setup has <1% of the High confidence CB which alevin reports at the end. If you are keeping 10% of the CB then you already have >9% of the low quality stuff. I might have to read the SoupX paper again but I feel it's a lot of low quality data to begin with.; * Can you check what was the frequency of the last CB which was reported ? Because I do see; `Skipped 330862 barcodes due to No mapped read` in the log which mean even if there was >0 reads for the CB that doesn't map to the reference and alevin end up skipping it.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-503356703:40,pipeline,pipeline,40,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-503356703,1,['pipeline'],['pipeline']
Deployability,"A series of commit till 409e7508194176f596e394e18a4dd59c88d46def, adds a new mode activated with `--debug` command line flag. Will be available for use with the next planned release of Salmon v0.11.3 later this month.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/266#issuecomment-412352265:174,release,release,174,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/266#issuecomment-412352265,1,['release'],['release']
Deployability,"Absolutely! And thank you for your quick responses! Just trying to make an index from Homo_sapiens.GRCh38.cdna.all.fa.gz (ftp://ftp.ensembl.org/pub/release-95/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz) to use for a ENCODE fastq file (test file is https://www.encodeproject.org/files/ENCFF163DLM/@@download/ENCFF163DLM.fastq.gz). I'm working from a cluster computer in a salmon environment with biopython as the only other thing installed ; <img width=""750"" alt=""screen shot 2019-02-25 at 2 50 38 pm"" src=""https://user-images.githubusercontent.com/18176863/53374317-d1936780-390c-11e9-8370-51504ffb0996.png"">. Index is here: https://drive.google.com/file/d/1iKD-qfJKIViePE7Uu_1Wsp8z71oGipjN/view?usp=sharing",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/197#issuecomment-467217789:148,release,release-,148,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/197#issuecomment-467217789,2,"['install', 'release']","['installed', 'release-']"
Deployability,"Ah, I see what went wrong! When I initially looked at the `B13_MeOH_cells_Jurkat_Cas9_EGR1_1_simulated.out.err` I saw all the index files listed and thought that that meant the pipeline found all of them, but I see that it was just grabbing that first file and trying to use it as the entire index directory. I have adjusted my snakemake rule per your suggestion and it is now working. Thank you so much @rob-p! I appreciate it, and sorry for the oversight on my part!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/713#issuecomment-941866580:177,pipeline,pipeline,177,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/713#issuecomment-941866580,1,['pipeline'],['pipeline']
Deployability,"Ah, my bad. I assumed you were running featureCounts via the pipeline. Thanks for clarifying. Happy to incorporate changes into the pipeline in the future if they improve the default behaviour. For now, you can tweak the settings you provide the pipeline to incorporate the `--softclipOverhangs` parameter. You can put the snippet below in a file called `custom.config` and pass to the pipeline on the CLI with `-c custom.config`:. ```; process {; withName: '.*:QUANTIFY_SALMON:SALMON_QUANT' {; ext.args = '--softclipOverhangs'; }; }; ```. Let me know if you have any problems with this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1239100429:61,pipeline,pipeline,61,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1239100429,4,['pipeline'],['pipeline']
Deployability,"Ahh --- I see what's happening. This is the offending line:. https://github.com/COMBINE-lab/salmon/blob/develop/src/SalmonUtils.cpp#L1346. I must have changed it and forgotten to change back at some point. That should be stderr, not stdout. I'll fix this in develop and build a new release. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/90#issuecomment-247083685:282,release,release,282,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/90#issuecomment-247083685,1,['release'],['release']
Deployability,"Ahh, serves me right for trying to write that help message by hand! I'll remove `cite` from the list of ""commands"" in the next release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/149#issuecomment-325170015:127,release,release,127,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/149#issuecomment-325170015,1,['release'],['release']
Deployability,"Ahh, that's not how the conda install works. Take a look at the bioconda instructions here (http://combine-lab.github.io/salmon/getting_started/), and click the link therein to see how to install conda.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623179953:30,install,install,30,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623179953,2,['install'],['install']
Deployability,"Alas, I'd just forgotten to do it :). That part of the release process is manual, and requires me grabbing files from the CI, changing the folder name to reflect the release, and uploading them to GitHub. One of these days I'll automate that, but for now it's a manual process. Just added the 1.8.0 binary tarball. Thanks for the reminder.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/760#issuecomment-1064350509:55,release,release,55,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/760#issuecomment-1064350509,2,['release'],['release']
Deployability,All staden and libstaden aswells as libcurl4-openssl-dev and other libcurl packages were installed.; I fixed it by uninstalling curl and staden library packages and letting the CMAKE deal with compiling the required Staden IOLib itself. Could it have been that some required flags were not passed correctly to the linker?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/425#issuecomment-526339339:89,install,installed,89,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/425#issuecomment-526339339,1,['install'],['installed']
Deployability,"All tests pass, hurray!; The solution was to uninstall `libtbb-dev`, which I have prior installed via `apt-get` (it was version 4.4, hence salmon installed a new version while `make`ing). So it seems there was a conflict between the tbb installed via apt-get and salmon itself.; Shall I close the issue or do you need any further info?; Thanks for the help in debugging ;)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404546040:88,install,installed,88,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404546040,3,['install'],['installed']
Deployability,Already fixed @k3yavi ? Is there any chance of a 0.14.2 release containing the fix?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-537068509:56,release,release,56,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-537068509,1,['release'],['release']
Deployability,"Also getting segmentation fault. Any progress on this? This is salmon v1.3.0, installed with conda or using the binary, running in slurm. I do not get a segmentation fault if I pass only a single file, but I do if I pass two files. ```; $ ./src/salmon-latest_linux_x86_64/bin/salmon quant --threads $(nproc) --libType U -t GRCh38_latest_rna.fa -a data/processed/bwa-mem/SRR10571655.sam data/processed/bwa-mem/SRR10571656.sam -o _tmp/ ; Version Info Exception: server did not respond before timeout; # salmon (alignment-based) v1.3.0; # [ program ] => salmon ; # [ command ] => quant ; # [ threads ] => { 32 }; # [ libType ] => { U }; # [ targets ] => { GRCh38_latest_rna.fa }; # [ alignments ] => { data/processed/bwa-mem/SRR10571655.sam data/processed/bwa-mem/SRR10571656.sam }; # [ output ] => { _tmp/ }; Logs will be written to _tmp/logs; [2020-10-12 16:13:21.969] [jointLog] [info] setting maxHashResizeThreads to 32; [2020-10-12 16:13:21.969] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; Library format { type:single end, relative orientation:none, strandedness:unstranded }; [2020-10-12 16:13:21.969] [jointLog] [info] numQuantThreads = 26; parseThreads = 6; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""data/processed/bwa-mem/SRR10571655.sam"", fasta = ""GRCh38_latest_rna.fa"" . . .done; [2020-10-12 16:13:26.979] [jointLog] [info] replaced 5 non-ACGT nucleotides with random nucleotides. processed 103000000 reads in current round[1] 1994 segmentation fault (core dumped) ./src/salmon-latest_linux_x86_64/bin/salmon quant --threads $(nproc) --libTyp; ```. Always at 103000000 reads.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-707334655:78,install,installed,78,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-707334655,1,['install'],['installed']
Deployability,"Also, I assumed (according to the documentation) that these underflow and overflow errors inherit from `std::runtime_error`, but I've updated the try/catch with a more generic exception class just in case they are not.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393631624:134,update,updated,134,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393631624,1,['update'],['updated']
Deployability,"Also, this appears to be:; 1. A very old version of Salmon (0.4.2); 2. Using GCC 5.0, to which I have not yet moved (and which isn't installed on any machines where I have access). Is it easy to check if this pops up with 4.8.x or 4.9.x as well?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/46#issuecomment-193922543:133,install,installed,133,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/46#issuecomment-193922543,1,['install'],['installed']
Deployability,"And I made one in Python :) https://github.com/Teichlab/readquant , you can pip install it. It also reads QC metrics from the directories. It's not updated for 0.7.0 yet though.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/77#issuecomment-240556614:80,install,install,80,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/77#issuecomment-240556614,2,"['install', 'update']","['install', 'updated']"
Deployability,And any status updates? I'd be interested to test drive a quasi-mapping-based fusion caller!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-280756041:15,update,updates,15,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-280756041,1,['update'],['updates']
Deployability,"And for us, who have blocked download on a computational cluster `cmake` silently continues even when `scripts/fetchRapMap.sh` failed (see error code `403` below). That is bad. Please propagate the error back to `cmake` so it dies immediately. Actually, remove the download altogether. Improve Requirements documentation and put a link to it there instead. ```; $blah/salmon-0.10.2 $ cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBoost_NO_BOOST_CMAKE=BOOL:ON -DFETCH_BOOST=TRUE CMakeLists.txt; -- The C compiler identification is GNU 7.3.0; -- The CXX compiler identification is GNU 7.3.0; -- Check for working C compiler: /apps/gentoo/usr/bin/cc; -- Check for working C compiler: /apps/gentoo/usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /apps/gentoo/usr/bin/c++; -- Check for working CXX compiler: /apps/gentoo/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; Making Release build; running $blah/salmon-0.10.2/scripts/fetchRapMap.sh 2>&1; % Total % Received % Xferd Average Speed Time Time Time Current; Dload Upload Total Spent Left Speed; 0 0 0 0 0 0 0 0 --:--:-- --:--:-- --:--:-- 0; curl: (56) Received HTTP code 403 from proxy after CONNECT; -- Found ZLIB: /apps/gentoo/usr/lib/libz.a (found version ""1.2.11""); -- Looking for lzma_auto_decoder in /apps/gentoo/usr/lib/liblzma.a; -- Looking for lzma_auto_decoder in /apps/gentoo/usr/lib/liblzma.a - found; -- Looking for lzma_easy_encoder in /apps/gentoo/usr/lib/liblzma.a; -- Looking for lzma_easy_encoder in /apps/gentoo/usr/lib/liblzma.a - found; -- Looking for lzma_lzma_preset in /apps/gentoo/usr/lib/liblzma.a; -- Looking for lzma_lzma_preset in /apps/gentoo/usr/lib/liblzma.a - found; -- Found LibLZMA: /apps/gentoo/usr/include (found version ""5.2.3""); Fo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387:1152,Release,Release,1152,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-399775387,1,['Release'],['Release']
Deployability,Any progress/updates on circRNA?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/220#issuecomment-443369908:13,update,updates,13,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/220#issuecomment-443369908,1,['update'],['updates']
Deployability,"Any reasons why you want to still use 0.14.1 - probably you should upgrade to 1.3.0. This is not to suggest that upgrading will fix your issue - salmon has many new features since v1 (@rob-p can allude to it), but IMO you should be using salmon >= 1.2. > We have seen that others have had similar issue but haven't found a thread that mentions what the user did to remedy the problem. Any suggestions would be appreciated! We are using salmon V0.14.1.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-732397913:67,upgrade,upgrade,67,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-732397913,1,['upgrade'],['upgrade']
Deployability,Any update on this? I am having the same error,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1979988398:4,update,update,4,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-1979988398,1,['update'],['update']
Deployability,"Any updates on this, I agree with @antonkulaga that there should be some examples in the docs on how to use quantmerge",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/278#issuecomment-513041200:4,update,updates,4,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/278#issuecomment-513041200,1,['update'],['updates']
Deployability,"Any updates on this?; The doc does not mention anything of the sort; ```The first entry in this line is the number of transcripts in the label of this equivalence class (the number of different transcripts to which fragments in this class map — call this k). The line then contains the k transcript IDs. Finally, the line contains the count of fragments in this equivalence class (how many fragments mapped to these transcripts). The values in each such line are tab separated.```; Thanks",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/402#issuecomment-515138596:4,update,updates,4,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/402#issuecomment-515138596,1,['update'],['updates']
Deployability,Any updates or recommendation on this front?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/406#issuecomment-820027601:4,update,updates,4,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/406#issuecomment-820027601,1,['update'],['updates']
Deployability,"Any updates? I am having a related issue with 0 reads being found by Salmon:; TBX21 transcripts ENST00000177694 and ENST00000581328 both report 0 read counts, but I am confident there are plenty of reads from these transcripts. (1) download sra and fastq-dump, (2) trim_galore (3) fastQC (4) STAR to generate aligned bams (for other analyses) and Salmon in mapping-based mode to get transcript counts. I am using the same transcript annotation for STAR and Salmon. . When I samtools view the aligned bam over the TBX21 region, I get back >4000 paired reads. The majority of the TBX21 reads have flags 99 or 147:; (# of reads) | (flag); 4431 | 147; 12 | 355; 14 | 403; 2 | 419; 4432 | 99. I also confirmed that many of these reads are indeed from the TBX21 spliced transcripts (cross splice junctions). I am running Salmon in mapping-based mode on the unaligned fastqs, and it is picking up exactly 0 reads in these transcripts. salmon index -t hg38_salmon_transcriptome.fa -i salmon_hg38_index --type quasi -k 31; salmon quant -i salmon_hg38_index -l ISR -p 8 -1 SRR1615172_1_val_1.fq.gz -2 SRR1615172_2_val_2.fq.gz -o salmon_quant_SRR1615172. The genome-wide distribution of insert size ranges for this sample are unusual (bi-modal), and this is partly why STAR only mapped 65% of the reads. The other issue with the sample is STAR reports 19% multi-mapped reads, but even so, there are still at least 4000 reads uniquely mapping to TBX21. Attached are:; ### Output from Salmon; [salmon_quant.log](https://github.com/COMBINE-lab/salmon/files/3199053/salmon_quant.log); [lib_format_counts.json.zip](https://github.com/COMBINE-lab/salmon/files/3199074/lib_format_counts.json.zip); ### Output from STAR; [SRR1615173.Log.final.out.STAR.txt](https://github.com/COMBINE-lab/salmon/files/3199078/SRR1615173.Log.final.out.STAR.txt); ### Output from samtools view over the TBX21 gene start and end (hg38 17:47733244-47746119); [TBX21_reads.txt](https://github.com/COMBINE-lab/salmon/files/3199054/TBX21_reads.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-494079306:4,update,updates,4,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/218#issuecomment-494079306,1,['update'],['updates']
Deployability,Awesome! Thank you so much for the detailed report and for finding this data that exposed this strange (but interesting) performance case. We'll fold these improvements into the next release as well.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-637601951:183,release,release,183,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-637601951,1,['release'],['release']
Deployability,Awesome! Thanks for checking it out. I think having `denorm_min` become `min` makes sense. I'm gonna push both this and #228 to master and cut a 0.10.1 release (and I'll be sure to thank you in the release notes). I'll close these issues once that release is done.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393905696:152,release,release,152,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393905696,3,['release'],['release']
Deployability,Awesome! Thanks for looping back around. I'll update the discussion Q&A on GitHub about this and update that when bioconda has native M1 support.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137266420:46,update,update,46,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137266420,2,['update'],['update']
Deployability,"Both the originally-reported issue (form @kurtwheeler) and the request by @Miserlou are now implemented in develop, and so will be available in the next release, so I'm going to close this issue for now.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/279#issuecomment-416381103:153,release,release,153,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/279#issuecomment-416381103,1,['release'],['release']
Deployability,"Bottled. Try again now, Michael. ``` sh; brew update; brew install salmon; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/46#issuecomment-247490845:46,update,update,46,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/46#issuecomment-247490845,2,"['install', 'update']","['install', 'update']"
Deployability,Building my own TBB hasn't helped. I installed it and set its path on the command line using -DTBB_INSTALL_DIR=/usr/local/packages/intel-tbb.4.4.3.181 and still CMAKE returns this in its output:. ```; ERROR: Intel TBB NOT found!; -- Looked for Threading Building Blocks in /usr/local/packages/intel-tbb.4.4.3.181/compilers_and_libraries_2016; Build system will fetch and build Intel Threading Building Blocks; ```. I've tried numerous subdirectories as well but can't seem to find what it's looking for to determine the TPP directory. Setting TBB_INSTALL_DIR also changed nothing. Currently stuck on my salmon build.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201157274:37,install,installed,37,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201157274,1,['install'],['installed']
Deployability,"Built target ksw2pp; [ 59%] Built target puffer; [ 73%] Built target salmon_core; [ 76%] Built target alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc.so; -- Installing: /salmon/lib/libtbbmalloc.so.2; -- Installing: /salmon/lib/libtbbmalloc.so.2.5; -- Installing: /salmon/lib/libtbbmalloc_proxy.so; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2; -- Installing: /salmon/lib/libtbbmalloc_proxy.so.2.5; -- Installing: /salmon/bin/salmon; -- Installing: /salmon/lib/libsalmon_core.a. Installation complete. Please ensure the following paths are set properly.; ==========================================================================; Please add /salmon/bin to your PATH; Please add /salmon/lib to your LD_LIBRARY_PATH; ==========================================================================; root@fd877e359439:/salmon/build# make test; Running tests...; Test project /salmon/build; Start 1: unit_tests; 1/2 Test #1: unit_tests ....................... Passed 0.37 sec; Start 2: salmon_read_test_quasi; 2/2 Test #2: salmon_read_test_quasi ........... Passed 1.80 sec. 100% tests passed, 0 tests failed out of 2. Total Test time (real) = 2.17 sec; ```. The `make test` command itself runs the test the builds the inde",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:2055,Install,Installing,2055,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,1,['Install'],['Installing']
Deployability,"C29P7ACXX_read2.fastq.gz"", {st_mode=S_IFREG|0644, st_size=5004102866, ...}) = 0; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", {st_mode=S_IFREG|0775, st_size=96, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", O_RDONLY) = 4; read(4, ""{\n \""indexVersion\"": 2,\n \""ha""..., 8191) = 96; read(4, """", 8191) = 0; close(4) = 0; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", {st_mode=S_IFREG|0775, st_size=96, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", O_RDONLY) = 4; read(4, ""{\n \""indexVersion\"": 2,\n \""ha""..., 8191) = 96; read(4, """", 8191) = 0; close(4) = 0; clock_gettime(CLOCK_REALTIME, {1491424830, 69887706}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/header.json"", O_RDONLY) = 4; read(4, ""{\n \""value0\"": {\n \""Index""..., 8191) = 357; read(4, """", 8191) = 0; close(4) = 0; clock_gettime(CLOCK_REALTIME, {1491424830, 139950818}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/header.json"", O_RDONLY) = 4; read(4, ""{\n \""value0\"": {\n \""Index""..., 8191) = 357; read(4, """", 8191) = 0; close(4) = 0; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7ffe7e5e8000; mprotect(0x7ffe7e5e8000, 4096, PROT_NONE) = 0; clone(child_stack=0x7ffebe5e7ed0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7ffebe5e89d0, tls=0x7ffebe5e8700, child_tidptr=0x7ffebe5e89d0) = 14677; open(""/dcl01/lieber/ajaffe/Emily/RNAs",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:165631,pipeline,pipeline,165631,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"Can you try installing trinity through bioconda ? It seems like an environment related issue. Since it's outside the scope of salmon tool and seems to be an issue with trinity, closing this issue but feel free to reopen if the bioconda solution didn't work.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/452#issuecomment-565297678:12,install,installing,12,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/452#issuecomment-565297678,1,['install'],['installing']
Deployability,"Certainly. Let me be more specific. The model itself is general, though we train it on a context that is of length 8. Specifically, the model that is used (the context) is defined here. https://github.com/COMBINE-lab/salmon/blob/1c3f6c014ce77ec593d5b37ee2bb0cf9feddf123/src/SBModel.cpp#L20. If you look further up in that file, you can see that it's reasonably easy to consider different contexts — it's just a matter of how the model is initialized. However, this isn't something that we currently expose as a runtime parameter. However, if you have a reason to believe that a different model topology would work better in your context, we'd be happy to help you try it out (and enable such a feature in a future release). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/880#issuecomment-1757810371:714,release,release,714,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/880#issuecomment-1757810371,1,['release'],['release']
Deployability,"Closing this as it's not an issue with Salmon. ; The main problem was that the nf-core/rnaseq pipeline didn't call `umi_tools` with the `--paired` flag. . Some more fine-tuning of the UMI-tools output might be necessary to make sure unpaired reads are properly counted by Salmon. For this, see https://github.com/CGATOxford/UMI-tools/issues/465.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/684#issuecomment-884695240:94,pipeline,pipeline,94,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/684#issuecomment-884695240,1,['pipeline'],['pipeline']
Deployability,"Closing this for lack of activity, but feel free to reopen if there are updates.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/741#issuecomment-1138617086:72,update,updates,72,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/741#issuecomment-1138617086,1,['update'],['updates']
Deployability,"Confirmed with v0.6.0:. ```; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; # salmon (mapping-based) v0.6.0; # [ program ] => salmon; # [ command ] => quant; # [ index ] => { ... }; # [ libType ] => { IU }; # [ mates1 ] => { ... }; # [ mates2 ] => { ... }; # [ output ] => {... }; # [ threads ] => { 16 }; Logs will be written to ...; there is 1 lib; [2016-01-22 17:59:17.894] [jointLog] [info] parsing read library format; Loading 32-bit quasi index[2016-01-22 17:59:18.735] [stderrLog] [info] Loading Suffix Array; [2016-01-22 17:59:18.736] [stderrLog] [info] Loading Position Hash; [2016-01-22 17:59:18.731] [jointLog] [info] Loading Quasi index; [2016-01-22 18:00:59.879] [stderrLog] [info] Loading Transcript Info; [2016-01-22 18:01:25.157] [stderrLog] [info] Loading Rank-Select Bit Array; [2016-01-22 18:01:30.642] [stderrLog] [info] There were 552702 set bits in the bit a; [2016-01-22 18:01:31.487] [stderrLog] [info] Computing transcript lengths; [2016-01-22 18:01:31.491] [stderrLog] [info] Waiting to finish loading hash; Index contained 552702 targets; [2016-01-22 18:04:43.717] [jointLog] [info] done; [2016-01-22 18:04:43.717] [stderrLog] [info] Done loading index; ```. I'll check the index creation logs, but didn't notice anything out of the ordinary...",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/37#issuecomment-174082911:61,upgrade,upgrade,61,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/37#issuecomment-174082911,2,['upgrade'],"['upgrade', 'upgrades']"
Deployability,Cool! I'll post this under releases with a brief note when I get home. I'll probably leave both binaries under the releases. I'm still very curious what's up with jemalloc!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168448704:27,release,releases,27,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168448704,2,['release'],['releases']
Deployability,"Cool, glad to hear that the above binary works for you. The binary on the release page was for linux that's why you were getting that error. As we progress, I'll keep updating the version for Macosx here, until the conda build is fixed for Osx. Also I've update the name of the file above just to avoid the confusion, thanks for the tip .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-412663036:74,release,release,74,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-412663036,2,"['release', 'update']","['release', 'update']"
Deployability,Could you let me know if a minor release is on the cards (or not) @k3yavi ? Would be nice if at least one Bioconda-available release had the fix.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-538345350:33,release,release,33,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-538345350,2,['release'],['release']
Deployability,"Could you please expand upon the question a bit? Are you asking if I would recommend the [nf-core RNA-seq pipeline](https://nf-co.re/rnaseq/usage) using `salmon` as the quantifier? In general, I think it is a nice pipeline that provides a good deal of information and a nice report. If you're looking for an off-the-shelf workflow for sample quantification for gene-level differential expression, I think that nf-core's RNA-seq workflow is a good option for quality-control and quantification. If you want to do transcript-level differential analysis, you may want to consider [swish](https://academic.oup.com/nar/article/47/18/e105/5542870), in which case you need to make sure that salmon is run with parameters to generate inferential replicates (either `--numBootstraps X` or `--numGibbsSamples X`). You can ask over in the nf-core GitHub repo or Slack channel how best to pass those extra options. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/784#issuecomment-1170721108:106,pipeline,pipeline,106,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/784#issuecomment-1170721108,2,['pipeline'],['pipeline']
Deployability,"Could you please share one of the output directories? It's not immediately obvious what the problem might be, since the log ends with . ```; [2020-06-03 23:47:15.955] [jointLog] [info] Computing gene-level abundance estimates; ```. which suggests the function to aggregate abundances to the gene level should be activated. On a related note, though we are definitely interesting in figuring out what might being going awry here, the recommended way to aggregate transcript-level abundances from salmon to the gene level is to use [tximport](https://bioconductor.org/packages/release/bioc/html/tximport.html), as it accounts for across-sample variability in expressed gene length, and makes it trivial to get your corresponding gene counts into a downstream DE tool like DESeq2, EdgeR, etc.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/530#issuecomment-638453196:575,release,release,575,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/530#issuecomment-638453196,1,['release'],['release']
Deployability,"Currently the installed `salmon` executable has `RPATH` set, which isn't needed on Mac OS, which uses absolute paths to dynamic libraries. ```; ❯❯❯ otool -l /usr/local/bin/salmon |grep -A2 RPATH; cmd LC_RPATH; cmdsize 56; path /usr/local/Cellar/salmon/0.6.0_1/bin (offset 12); --; cmd LC_RPATH; cmdsize 56; path /usr/local/Cellar/salmon/0.6.0_1/lib (offset 12); --; cmd LC_RPATH; cmdsize 32; path @executable_path (offset 12); ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239522831:14,install,installed,14,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239522831,1,['install'],['installed']
Deployability,"Dear @callumparr,. Thank you for bringing this up. So you are correct that the `--noLengthCorrection` flag should be passed to salmon when quantifying data that does not have a ""fragmentation effect"", that is, where the number of fragments we expect to draw from a transcript is not dependent upon the length of that transcript. In the ONT protocols, it is usually the case that we get 1 read -> 1 transcript, even if we don't read the whole thing. We have tested the effect of this in ONT data with spike ins, and have verified that using `--noLengthCorrection` does generally lead to improved accuracy with respect to quantification estimates. We have informed ONT of this, and I would guess they may optimize the flags that are used soon (we have also developed an error model that works correctly for these long reads, and that should make it into the next release of salmon). Regarding the effect this has on the `NumReads` values reported by salmon, it's not as simple as with the `TPM` estimates. The length affects the assigned reads through the probabilistic model on which inference is done. With the length effect we have that P(f | t_i) ∝ P( position | f, t_i ) * P( alignment | f, t_i) --- forgetting the alignment term for the time being, we have that with length correction P( position | f, t_i ) ∝ 1 / l_i and without length correction the l_i term goes away. In other words, the probability of allocating reads has a term that depends on the effective length when the `--noLengthCorrection` flag is not passed, but that term goes away when it is passed. This is not quite as drastic as with TPM where the normalization includes the length directly in the normalization (note, however, that when the `--noLengthCorrection` flag is passed, this adjusts the TPM as well). Further, the `NumReads` is still better than TPM in this regard because it still encodes the effect size (i.e. `NumReads` will sum to the total number of aligned reads). Anyway TLDR: Passing the `--noLengthCorrectio",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/651#issuecomment-821995147:861,release,release,861,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/651#issuecomment-821995147,2,['release'],['release']
Deployability,"Dear Rob, ; sorry for the late replay.; the culprit was indeed the libm.; when i REMOVED from the binary installation folder, salmon was able to produce the index. _[2022-06-07 09:43:33.637] [jLog] [info] done building index_. Bests; Silvano",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1148320487:105,install,installation,105,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1148320487,1,['install'],['installation']
Deployability,"Dear Rob, thank you for the fast replay. a) I tried to compile but it is not working for me either; ....; _[100%] Linking CXX executable salmon; /usr/bin/ld: ../../external/install/lib/libstaden-read.a(libstaden_read_la-open_trace_file.o): in function `find_file_url':; open_trace_file.c:(.text+0xf74): warning: the use of `tempnam' is dangerous, better use `mkstemp'; during IPA pass: icf; lto1: internal compiler error: Segmentation fault; 0xd12487 internal_error(char const*, ...); 	???:0; 0xe4f0b6 varpool_node::get_constructor(); 	???:0; 0xea01ff ipa_icf::sem_item_optimizer::subdivide_classes_by_equality(bool); 	???:0; 0x12ab4cb ipa_icf::sem_item_optimizer::execute(); 	???:0; Please submit a full bug report,; with preprocessed source if appropriate.; Please include the complete backtrace with any bug report.; See <file:///usr/share/doc/gcc-11/README.Bugs> for instructions.; lto-wrapper: fatal error: /usr/bin/c++ returned 1 exit status; compilation terminated.; /usr/bin/ld: error: lto-wrapper failed; collect2: error: ld returned 1 exit status; make[2]: *** [src/CMakeFiles/salmon.dir/build.make:486: src/salmon] Error 1; make[1]: *** [CMakeFiles/Makefile2:665: src/CMakeFiles/salmon.dir/all] Error 2; make: *** [Makefile:166: all] Error 2_. 2) bioconda on a server is a mess. it will be my last resort. 3) I am trying the Docker version and it seems to work!!!; ; PS It seems to me a be a little strange though that the binary version is not working. I tried on three different systems (all with ubuntu 22.04) with Xeon gold and intel i7 . thank you again",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1144000013:173,install,install,173,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1144000013,1,['install'],['install']
Deployability,"Dear Rob,; a brief update:; 1) with the flag -DNO_IPO=TRUE the compilation worked perfectly. thank you . 2)following a guide found at stackoverlow ([Find which assembly instruction caused an Illegal Instruction error without debugging], I discover that the illegal instruction is **vfmsubsd**. ; I am not an expert at all in the field, but googling it seems to be a standard SSE instruction.; I am surprised indeed.; cpus tested: ; Intel Xeon Gold 5220 (72) ; Intel Xeon Gold 5317 (48); Intel i7-10750H (12). Best and thanks again; Silvano. Program terminated with signal SIGILL, Illegal instruction.; #0 0x00007fa222c47396 in __ieee754_pow_fma4 () from /dataraw/mouse/salmon-1.8.0_linux_x86_64/bin/../lib/libm.so.6. 0x7fa222c47396 <__ieee754_pow_fma4+182> vfmsubsd %xmm3,%xmm6,%xmm3,%xmm7",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1145687835:19,update,update,19,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1145687835,2,['update'],['update']
Deployability,"Depending on what environment you install in (other conda software), the default resolver in conda is messed up. You should just explicitly ask for 1.10.2 with “ conda install salmon=1.10.2”. You can also try installing it in a clean conda env which is how I install most of my conda software anyway. Best,; Rob. note: these resolver issues are a conda problem, and there’s nothin we as the salmon devs can do. So if you’d like to be able to avoid specifying the version, even when you put it in an env with arbitrary other software, I suggest making aMWE and opening an issue upstream in conda/bioconda.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/895#issuecomment-1784085120:34,install,install,34,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/895#issuecomment-1784085120,4,['install'],"['install', 'installing']"
Deployability,"Distributor ID:	Ubuntu; Description:	Ubuntu 16.04.3 LTS; Release:	16.04; Codename:	xenial. Linux version 4.13.0-45-generic (buildd@lgw01-amd64-011) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.9)) #50~16.04.1-Ubuntu SMP. I installed Salmon using the command on https://anaconda.org/bioconda/salmon; ""conda install -c bioconda salmon""",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/239#issuecomment-400677292:57,Release,Release,57,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/239#issuecomment-400677292,3,"['Release', 'install']","['Release', 'install', 'installed']"
Deployability,"Drone is awesome! The problem seems to be related to the ancient image on which we do CI (holy build box) having a version of curl that, just now (in the last day?), became incompatible with github's OpenSSL protocol. I guess they did an update, and now my version of curl is too old. I think we need to update the image.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/199#issuecomment-368083042:238,update,update,238,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/199#issuecomment-368083042,2,['update'],['update']
Deployability,"ENT (No such file or directory); stat(""/cm/shared/apps/sge/current/lib/linux-x64/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/cm/shared/apps/sge/current/lib/linux-x64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/cm/shared/apps/sge/current/lib/linux-x64"", {st_mode=S_IFDIR|0755, st_size=7, ...}) = 0; open(""/etc/ld.so.cache"", O_RDONLY) = 3; fstat(3, {st_mode=S_IFREG|0644, st_size=100319, ...}) = 0; mmap(NULL, 100319, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7fffbffe4000; close(3) = 0; open(""/lib64/libpthread.so.0"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\340]\300\r5\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0755, st_size=145896, ...}) = 0; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbffe3000; mmap(0x350dc00000, 2212848, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x350dc00000; mprotect(0x350dc17000, 2097152, PROT_NONE) = 0; mmap(0x350de17000, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x17000) = 0x350de17000; mmap(0x350de19000, 13296, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x350de19000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/liblzma.so.0"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0 %\0\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_size=130728, ...}) = 0; mmap(NULL, 2226056, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7fffbfdc3000; mprotect(0x7fffbfde2000, 2097152, PROT_NONE) = 0; mmap(0x7fffbffe2000, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1f000) = 0x7fffbffe2000; close(3) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libtbb.so.2"", O_RDONLY) = 3; read(3, ""\177ELF\2\1\1\0\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\320v\1\0\0\0\0\0""..., 832) = 832; fstat(3, {st_mode=S_IFREG|0644, st_si",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:16618,pipeline,pipeline,16618,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"ENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7fff3e5ea9d0, tls=0x7fff3e5ea700, child_tidptr=0x7fff3e5ea9d0) = 10741; mmap(NULL, 8388608, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffbd200000; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7ffebe5e9000; mprotect(0x7ffebe5e9000, 4096, PROT_NONE) = 0; clone(child_stack=0x7ffefe5e8ed0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7ffefe5e99d0, tls=0x7ffefe5e9700, child_tidptr=0x7ffefe5e99d0) = 10742; clock_gettime(CLOCK_REALTIME, {1491423878, 504035343}) = 0; gettid() = 10693; clock_gettime(CLOCK_REALTIME, {1491423878, 507735356}) = 0; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", {st_mode=S_IFREG|0775, st_size=96, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", O_RDONLY) = 4; read(4, [1m[2017-04-05 16:24:38.504] [jointLog] [info] parsing read library format; [00m[1m[2017-04-05 16:24:38.507] [jointLog] [info] There is 1 library.; [00m""{\n \""indexVersion\"": 2,\n \""ha""..., 8191) = 96; read(4, """", 8191) = 0; close(4) = 0; mmap(NULL, 29360128, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffbb600000; mmap(NULL, 4194304, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffbb200000; mmap(NULL, 117440512, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffb4200000; mmap(NULL, 4194304, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffb3e00000; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7ffe7e5e8000; mprotect(0x7ffe7e5e8000, 4096, PROT_NONE) = 0; clone(child_stack=0x7ffebe5e7ed0, flags=CLONE",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:71148,pipeline,pipeline,71148,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"ENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7fff3e5ea9d0, tls=0x7fff3e5ea700, child_tidptr=0x7fff3e5ea9d0) = 14651; mmap(NULL, 8388608, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffbd200000; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7ffebe5e9000; mprotect(0x7ffebe5e9000, 4096, PROT_NONE) = 0; clone(child_stack=0x7ffefe5e8ed0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7ffefe5e99d0, tls=0x7ffefe5e9700, child_tidptr=0x7ffefe5e99d0) = 14652; clock_gettime(CLOCK_REALTIME, {1491424829, 790500042}) = 0; gettid() = 14648; clock_gettime(CLOCK_REALTIME, {1491424829, 791313810}) = 0; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", {st_mode=S_IFREG|0775, st_size=96, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", O_RDONLY) = 4; read(4, ""{\n \""indexVersion\"": 2,\n \""ha""..., 8191) = 96; read(4, """", 8191) = 0; close(4) = 0; mmap(NULL, 29360128, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffbb600000; mmap(NULL, 4194304, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffbb200000; mmap(NULL, 117440512, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffb4200000; [1m[2017-04-05 16:40:29.790] [jointLog] [info] parsing read library format; [00m[1m[2017-04-05 16:40:29.791] [jointLog] [info] There is 1 library.; [00mmmap(NULL, 4194304, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffb3e00000; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7ffe7e5e8000; mprotect(0x7ffe7e5e8000, 4096, PROT_NONE) = 0; clone(child_stack=0x7ffebe5e7ed0, flags=CLONE",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:152049,pipeline,pipeline,152049,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"ENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7fff3e5ea9d0, tls=0x7fff3e5ea700, child_tidptr=0x7fff3e5ea9d0) = 32684; mmap(NULL, 8388608, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffbd200000; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7ffebe5e9000; mprotect(0x7ffebe5e9000, 4096, PROT_NONE) = 0; clone(child_stack=0x7ffefe5e8ed0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7ffefe5e99d0, tls=0x7ffefe5e9700, child_tidptr=0x7ffefe5e99d0) = 32685; clock_gettime(CLOCK_REALTIME, {1491423877, 940907968}) = 0; gettid() = 32681; clock_gettime(CLOCK_REALTIME, {1491423877, 941299576}) = 0; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", {st_mode=S_IFREG|0775, st_size=96, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", O_RDONLY) = 4; read(4, ""{\n \""indexVersion\"": 2,\n \""ha""..., 8191) = 96; read(4, """", 8191) = 0; close(4) = 0; mmap(NULL, 29360128, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffbb600000; mmap(NULL, 4194304, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffbb200000; mmap(NULL, 117440512, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffb4200000; [1m[2017-04-05 16:24:37.940] [jointLog] [info] parsing read library format; [00m[1m[2017-04-05 16:24:37.941] [jointLog] [info] There is 1 library.; [00mmmap(NULL, 4194304, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffb3e00000; open(""/sys/devices/system/cpu/online"", O_RDONLY|O_CLOEXEC) = 4; read(4, ""0-19\n"", 8192) = 5; close(4) = 0; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:34372,pipeline,pipeline,34372,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"ENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7fff3e5ea9d0, tls=0x7fff3e5ea700, child_tidptr=0x7fff3e5ea9d0) = 51999; mmap(NULL, 8388608, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffbd200000; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7ffebe5e9000; mprotect(0x7ffebe5e9000, 4096, PROT_NONE) = 0; clone(child_stack=0x7ffefe5e8ed0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tidptr=0x7ffefe5e99d0, tls=0x7ffefe5e9700, child_tidptr=0x7ffefe5e99d0) = 52000; clock_gettime(CLOCK_REALTIME, {1491424815, 587265106}) = 0; gettid() = 51996; clock_gettime(CLOCK_REALTIME, {1491424815, 588110132}) = 0; stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", {st_mode=S_IFREG|0775, st_size=96, ...}) = 0; open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts/versionInfo.json"", O_RDONLY) = 4; read(4, [1m[2017-04-05 16:40:15.587] [jointLog] [info] parsing read library format; [00m[1m[2017-04-05 16:40:15.588] [jointLog] [info] There is 1 library.; [00m""{\n \""indexVersion\"": 2,\n \""ha""..., 8191) = 96; read(4, """", 8191) = 0; close(4) = 0; mmap(NULL, 29360128, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffbb600000; mmap(NULL, 4194304, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffbb200000; mmap(NULL, 117440512, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffb4200000; mmap(NULL, 4194304, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_NORESERVE, -1, 0) = 0x7fffb3e00000; mmap(NULL, 1073745920, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS|MAP_STACK, -1, 0) = 0x7ffe7e5e8000; mprotect(0x7ffe7e5e8000, 4096, PROT_NONE) = 0; clone(child_stack=0x7ffebe5e7ed0, flags=CLONE",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:109730,pipeline,pipeline,109730,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts }; ### [ threads ] => { 16 }; ### [ libType ] => { ISR }; ### [ mates1 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX.fastq.gz }; ### [ mates2 ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/merged_fastq/R10001_D2B1WACXX_read2.fastq.gz }; ### [ output ] => { /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/R10001_D2B1WACXX }; Logs will be written to /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/R10001_D2B1WACXX/logs; [1m[2017-03-29 14:56:39.675] [jointLog] [info] parsing read library format; [00m[1m[2017-03-29 14:56:39.733] [jointLog] [info] There is 1 library.; [00mterminate called without an active exception; /cm/local/apps/sge/var/spool/compute-067/job_scripts/110316: line 31: 64339 Aborted (core dumped) /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant -i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 16 -l ISR -1 ${FILE1} -2 ${FILE2} -o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test4/${ID}; **** Job ends ****; Wed Mar 29 14:58:05 EDT 2017. ```. ### SGE email example info. ```; Job-array task 110316.1 (step6-salmon_test4.gsk_phaseII) Complete; User = lcollado; Queue = shared.q@compute-067.cm.cluster; Host = compute-067.cm.cluster; Start Time = 03/29/2017 14:53:42; End Time = 03/29/2017 14:58:05; User Time = 00:00:00; System Time = 00:05:39; Wallclock Time = 00:04:23; CPU = 00:05:39; Max vmem = 24.202G; Exit Status = 0; ```. Note that in this case, it didn't read the maximum memory requested (16 * 3 = 48 GB). ## Large memory, p 1. ### Bash. ```bash; #!/bin/bash; #$ -cwd; #$ -l mem_free=80G,h_vmem=90G,h_fsize=100G; #$ -N step6-salmon_test5.gsk_phaseII; #$ -pe local 1; #$ -o ./logs/salmon_test5.$TASK_ID.txt; #$ -e ./logs/salmon_test5.$TASK_ID.txt; #$ -t 1-3; #$ -hold_jid pipeline_s",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965:6573,pipeline,pipeline,6573,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-290516965,1,['pipeline'],['pipeline']
Deployability,"Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", [""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""quant"", ""-i"", ""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""-p"", ""1"", ""-l"", ""ISR"", ""-1"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-2"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-o"", ""/dcl01/lieber/ajaffe/lab/libd_al""...], [/* 107 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", 4096) = 88; access(""/etc/ld.so.preload"", R_OK) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib"", {st_mode=S_IFDIR|0755, st_size=33280, ...}) = 0; open(""/dcl01/lieber/ajaffe/E",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:4917,pipeline,pipeline,4917,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,4,['pipeline'],['pipeline']
Deployability,"Especially since the files in both cases actually are in the same location... I could imagine it being an issue with something going write with the communication over the NFS. But in the working case it's just links to the same NFS location. Here is the tail of the gdb output:. ```; Computing gene-level abundance estimates; [2016-01-02 21:56:43.793] [jointLog] [warning] NOTE: Read Lib [( /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_1.fastq, /nfs/research2/teichmann/valentine/detection-comparison/salmon0.4.2-comparison/mouse/SRP057125_SRS936134_2.fastq )] :. Greater than 5% of the alignments (but not, necessarily reads) disagreed with the provided library type; check the file: SRP057125_SRS936134_salmon_out/libFormatCounts.txt for details. There were 104534 transcripts mapping to 44034 genes; Parsed 104000 expression lines; done; Aggregating expressions to gene level . . . done. Program received signal SIGSEGV, Segmentation fault.; 0x000000320dc093a0 in pthread_mutex_lock () from /lib64/libpthread.so.0; Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.149.el6_6.5.x86_64; (gdb) bt; #0 0x000000320dc093a0 in pthread_mutex_lock () from /lib64/libpthread.so.0; #1 0x0000000000806370 in je_tcache_bin_flush_small () at include/jemalloc/internal/mutex.h:85; #2 0x0000000000806c60 in je_tcache_event_hard () at src/tcache.c:44; #3 0x00000000005915fc in std::vector<Transcript, std::allocator<Transcript> >::~vector() (); #4 0x00000000005941c6 in ReadExperiment::~ReadExperiment() (); #5 0x00000000005872ce in salmonQuantify(int, char**) (); #6 0x0000000000514472 in main (); (gdb); ```. It does indeed seem to be inside JeMalloc.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168431900:1122,install,install,1122,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/34#issuecomment-168431900,1,['install'],['install']
Deployability,"Even I am not sure how to add the flags in the make command explicitly.; But, I'd suggest you can try couple of things:; Like I said before installing zlib to apt-get/brew would be the easiest.; If not can you try `-DZLIB_LIBRARY=/users/work/jake/bin/zlib-1.2.11/` i.e. remove `zlib.h`.; As you can see I am learning on the go too 😜",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314454908:140,install,installing,140,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/141#issuecomment-314454908,2,['install'],['installing']
Deployability,"Exactly, I meant that if the dep is not already satisfied, I'll pull the source and compile and install it locally (not that I would bundle the dependency with salmon).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193942045:96,install,install,96,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193942045,1,['install'],['install']
Deployability,"Excellent! Now we should do some internal testing to see if this has any negative performance impact on machines that _do_ have SSE4. Then we can determine if we can just make this the default, or if it's worth cutting a release under 2 configurations.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/500#issuecomment-610602162:221,release,release,221,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/500#issuecomment-610602162,2,"['configurat', 'release']","['configurations', 'release']"
Deployability,FWIW I'm experiencing this same behavior (`salmon quant` segfaults with 0.9.1 & 0.11.2 from bioconda) on my SLURM cluster. Ref #271 . @NatPRoach If you ever end up figuring out a solution for bioconda installs for this please let me know!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/268#issuecomment-415828393:201,install,installs,201,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/268#issuecomment-415828393,1,['install'],['installs']
Deployability,"FYI, I'm taking another crack at an official FreeBSD port, but still hitting some gnarly issues with 1.5.2, so it might be a while. https://github.com/outpaddling/freebsd-ports-wip/tree/master/salmon; https://github.com/outpaddling/freebsd-ports-wip/tree/master/pufferfish; https://github.com/COMBINE-lab/salmon/issues/502. 1. The cmake system still forces downloading pufferfish during configure, which is forbidden in the ports system (like many other package managers). All downloads must occur during fetch phase and be verified using locally stored checksums. This would be easy to work around using GH_TUPLE, which downloads additional distfiles during fetch phase, except that fetchPufferfish.sh doesn't just extract the pufferfish dist, but has a long list of ""cp"" commands to copy pieces of it to ${INSTALL_DIR}. That's not something I'm inclined to tamper with since it will likely change with new versions and hence be a headache to maintain over time. It would be ideal if salmon could work with a separately installed pufferfish as it does with many other dependencies. This would make the port much cleaner.; 2. The code is not compatible with onetbb 2021.3, which is the current FreeBSD ports version.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-917642392:1021,install,installed,1021,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-917642392,1,['install'],['installed']
Deployability,"FYI, miniconda works fine on FreeBSD. It's not too difficult to configure manually, but to make it even easier:. As root:. ```; pkg install auto-admin linux-miniconda-installer; auto-install-linux_base; ```; As a non-root user:. ```; miniconda-installer; conda-shell; conda config --add channels conda-forge; conda config --add channels bioconda; conda create -n salmon salmon; ```; Note: Just running `conda install salmon` instead of `conda create -n salmon salmon` will install a very old version rather than the latest. This utilizes the Linux compatibility module, which simply adds Linux system calls to the FreeBSD kernel. Unlike a virtual machine, there's no performance penalty and memory overhead is trivial. In fact, Linux binaries sometimes run slightly faster on FreeBSD than they do on Linux. Average speed is about the same. I'd only use conda as a stop-gap, though. There's a large and growing selection of bioinformatics software in FreeBSD ports that can be more easily installed and used, e.g. 'pkg install samtools bwa'. Also I'm working on a native FreeBSD port for salmon:. https://github.com/COMBINE-lab/salmon/issues/162. Best,. Jason",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-917648051:132,install,install,132,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-917648051,16,['install'],"['install', 'install-', 'installed', 'installer']"
Deployability,"FYI: [https://github.com/outpaddling/freebsd-ports-wip/tree/master/salmon](https://github.com/outpaddling/freebsd-ports-wip/tree/master/salmon). It would be good to update to onetbb 2021 soon. FreeBSD ports still has a 2020.3 legacy port, but we're trying to update everything that depends on it so it can be retired. I think maybe this issue can be closed at this point?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-989322122:165,update,update,165,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-989322122,2,['update'],['update']
Deployability,"Feel free to close out this thread. I was able to set my user up with the salmon binary running 0.11 instead! . I wasn't able to address where GCC was being set exactly between the CMakelist and Makefile. I did manage to install it from source using ""source /opt/rh/devtools-3"" to invoke gcc-4.9.2, but that installation binary did not run and raised additional GCC library mismatch errors due to the system running 4.8.5, even though 4.9.2 was used to compile it. Sorry for the lengthy posts in any case!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-423646567:221,install,install,221,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-423646567,2,['install'],"['install', 'installation']"
Deployability,"Finalky i found that my transcript file was crashed during uploading to my; server; I repeated the process. It works now; Thank you so much. في الاثنين، ٢٢ أغسطس ٢٠٢٢ ٣:٢١ م Rob Patro ***@***.***> كتب:. > Hi @esraagithub <https://github.com/esraagithub>,; >; > Thanks for the bug report. Can you tell me how the specific version of; > salmon you are using was installed (e.g. via source, downloaded from the; > ""releases page"", or installed via bioconda)? Would it be possible to share; > the contigs that cause this error?; >; > Thanks,; > Rob; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/795#issuecomment-1222353941>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AMY4XZX6ZGAO5DOU5YOWTG3V2N5DZANCNFSM57HUQWJQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/795#issuecomment-1223885767:360,install,installed,360,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/795#issuecomment-1223885767,3,"['install', 'release']","['installed', 'releases']"
Deployability,"Following are some weird thing I am noticing in your log:. ```; 2019-11-02T16:23:27.745502492Z [2019-11-02 16:23:27.745] [puff::index::jointLog] [warning] The decoy name JH584303.1 was encountered more than once --- please be sure all decoy names and sequences are unique.; 2019-11-02T16:23:27.745504753Z [2019-11-02 16:23:27.745] [puff::index::jointLog] [warning] The decoy name JH584304.1 was encountered more than once --- please be sure all decoy names and sequences are unique.; 2019-11-02T16:24:33.408457659Z [2019-11-02 16:24:33.408] [puff::index::jointLog] [warning] The decoy file contained the names of 88 decoy sequences, but 66 were matched by sequences in the reference file provided.; ```; Where we expect only 66 decoys (genomic targets) to start with. I think it's the issue with the gencode reference names having blank space as a delimiter in its target name with repeated names. The ipython notebook was right but I missed to update the static website, in the prepare metadata section I have updated the decoy name extracting step to:. ```; grep ""^>"" <(zcat GRCm38.primary_assembly.genome.fa.gz) | cut -d "" "" -f 1 > decoys.txt; ```. That is I splitting the genomic target names by space and taking just the first part as the target name. I working on checking what's happening if I follow the step of using the full gencode names and would update you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-549146224:945,update,update,945,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-549146224,3,['update'],"['update', 'updated']"
Deployability,"Following up on this, if I was to fork `salmon` and fix this, would the correct solution be to update the following line? https://github.com/COMBINE-lab/salmon/blob/a2f6912b3f9f9af91e3a4b0d74adcb3bdc4c9a32/src/AlevinUtils.cpp#L1204",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/943#issuecomment-2284917014:95,update,update,95,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/943#issuecomment-2284917014,1,['update'],['update']
Deployability,"For clarification: From memory, using the same cluster, I had the same error at the same stage but only with particular data sets and confirmed this was not an issue of available memory. @k3yavi may remember some more of the details but we never got to the bottom of it. . @Acribbs Testing on another cluster would be a good idea in case this is a very specific cluster configuration issue",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458160685:370,configurat,configuration,370,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458160685,1,['configurat'],['configuration']
Deployability,"Fwiw, the conda resolver is not the only issue:. >conda create -n salmon -c bioconda -c conda-forge salmon=1.10.2. Collecting package metadata (current_repodata.json): done; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): / Killed. Adam H. Freedman, PhD; Data Scientist; Faculty of Arts & Sciences Informatics Group; Harvard University; 38 Oxford St; Cambridge, MA 02138; phone: +001 310 415 7145; ________________________________; From: Rob Patro ***@***.***>; Sent: Sunday, October 29, 2023 8:04 AM; To: COMBINE-lab/salmon ***@***.***>; Cc: Freedman, Adam ***@***.***>; Author ***@***.***>; Subject: Re: [COMBINE-lab/salmon] anaconda version of salmon outdated, missing decoys option (Issue #895). Depending on what environment you install in (other conda software), the default resolver in conda is messed up. You should just explicitly ask for 1.10.2 with “ conda install salmon=1.10.2”. You can also try installing it in a clean conda env which is how I install most of my conda software anyway. Best,; Rob. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_COMBINE-2Dlab_salmon_issues_895-23issuecomment-2D1784085120&d=DwMFaQ&c=WO-RGvefibhHBZq3fL85hQ&r=MITI_LEJgyr1a24IMFAlSaZIPxMpOUT21T7L3fg4CjA&m=BuO8x-09ODKHZCV2IlEsuaycWlFfWjCrfXJ-22PbmV0x8PssZEMVgCYeWBbR1GlW&s=Ea4-F5juBTywwyjamWmiXQu3PVrQ4kCnIg-68wR1Pa4&e=>, or unsubscribe<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_notifications_unsubscribe-2Dauth_ADBMMUHDLECWA4NGVBBX7R3YBZA5HAVCNFSM6AAAAAA6UYYPGOVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTOOBUGA4DKMJSGA&d=DwMFaQ&c=WO-RGvefibhHBZq3fL85hQ&r=MITI_LEJgyr1a24IMFAlSaZIPxMpOUT21T7L3fg4CjA&m=BuO8x-09ODKHZCV2IlEsuaycWlFfWjCrfXJ-22PbmV0x8PssZEMVgCYeWBbR1GlW&s=UIOMil_E-TPQw6P8DHvvV7-jaFu1apAxBIJgLzjUtvs&e=>.; You are receiving this because you authored the thread.Message ID: ***@***.***>",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/895#issuecomment-1784119351:840,install,install,840,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/895#issuecomment-1784119351,4,['install'],"['install', 'installing']"
Deployability,"GitHub supports uploading files directly in the issues, so I'll compile the updated binary and I'll drop it right here (I'll do this today, but it might be an hour or so). Once you have it, you can confirm if it works for you (I'm still on 10.11, so I'll have to build it there, but with the updated dependency).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-259466544:76,update,updated,76,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-259466544,2,['update'],['updated']
Deployability,"Glad to hear that it worked for you. Thanks for the suggestions, we will surely update the document soon and be more clear about the manual cutoff.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/245#issuecomment-402759530:80,update,update,80,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/245#issuecomment-402759530,2,['update'],['update']
Deployability,"Glad to hear that. Yes, I agree we can put some sort of filter while indexing to make the pipeline less painful in case of a failure. Regarding the transcript to gene map file parsing before the CB correction, we plan to make that into the next release which we plan to merge soon. I'll update you once we have the new version ready.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-496280290:90,pipeline,pipeline,90,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-496280290,3,"['pipeline', 'release', 'update']","['pipeline', 'release', 'update']"
Deployability,"Glad to hear you were able to find a solution! I'm not sure why your environment kept getting corrupted with the pre-C++14 compiler, but if you run into that issue again in the future, we can revisit. For the time being, using the binaries (we create one for each new tagged release) should work out fine.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-423785031:275,release,release,275,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-423785031,1,['release'],['release']
Deployability,"Good to hear, I checked the release log but I wasn't able to confirm whether I was using the bugged conda build since we are using docker biocontainers (build v1.9.0--h7e5ed60_1). I'll upgrade our pipeline and close the issue after a new run of the same data if the problem seems to be resolved. Best,; Alex",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/876#issuecomment-1739857661:28,release,release,28,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/876#issuecomment-1739857661,3,"['pipeline', 'release', 'upgrade']","['pipeline', 'release', 'upgrade']"
Deployability,"Got it working. The ""short"" form for how to do so in Centos 6.9 is:. ```; 1. install current versions of autoconf, automake, and cmake; 2. install the boost 1.57 set of RPMS if they are not already present; 3. install devtoolset-4 (or higher); 4. download and unpack salmon; 5. modify CMakeLists.txt; #around line 220, remove condition testing, set it to just; set (Boost_USE_STATIC_LIBS OFF); #around line 310; set(Boost_ADDITIONAL_VERSIONS ""1.57.0"" ""1.59.0"" ""1.60.0"" ""1.61.0"" ""1.62"" ""1.63"" ""1.64"" ""1.65"" ""1.66""); find_package(Boost 1.57.0 COMPONENTS iostreams filesystem system thread timer chrono program_options); 6. in top level of salmon do; mkdir build; cd build; nice scl enable devtoolset-4 '~/bin/cmake -DBoost_DEBUG=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON -DBoost_NO_BOOST_CMAKE=BOOL:ON -DBOOST_LIBRARYDIR=/usr/lib64/boost157 -DBOOST_INCLUDEDIR=/usr/include/boost157 ../CMakeLists.txt' >try_cmake2.log 2>&1 &; 7. in top level of salmon do; nice scl enable devtoolset-4 'make' >build_2018_06_13a.log 2>&1 &; There will be lots of warnings but it should run to completion; 8. make install; cp bin/salmon $WHEREVER/bin/salmon; rmdir lib/pkgconfig; cp lib/* $WHEREVER/lib; rm -rf bin; rm -rf lib; export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$WHEREVER/lib; make test; ```. Is it OK to delete the (large) salmon directory at this point, or is the binary hardwired to find things in it?; I know that this does not work:. ```; cd ..; mv salmon not_salmon; cd not_salmon; make test; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397050436:77,install,install,77,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397050436,4,['install'],['install']
Deployability,"Got it, thanks for the heads up. I'd probably reach out to the refgenie people about the hg38 specific versions. It makes sense to have the feature of having the gtf at the time of indexing. The only concern I have is that mandating to have the gtf might restrict the overall workflow by a bit. Specifically because a user might not always have the full GTF available for every use case, although we can always make having GTF as an optional requirement for indexing. Adding the support should not be too difficult but it will certainly add a new logic path which would need thorough testing. . We'll certainly keep you updated with the feature as we progress although it can take some time to get back. In terms of your pipeline one option would be to actually save the GTF explicitly in the salmon index folder post indexing. Although it's definitely not a very computer science friendly solution but it will help maintain the consistency while we work on the feature.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/595#issuecomment-738200842:620,update,updated,620,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/595#issuecomment-738200842,2,"['pipeline', 'update']","['pipeline', 'updated']"
Deployability,"Got this working, I had to make some edits to CMakeLists.txt:. ```; sed -i 's/.\/autogen.sh/CFLAGS=-fPIC CPPFLAGS=-fPIC .\/autogen.sh/' CMakeLists.txt; sed -i 's/CFLAGS+=${STADEN_LIB}/CFLAGS+=${STADEN_LIB} CFLAGS+=-lz/' CMakeLists.txt; ```. jemalloc wasn't getting passed the -fPIC flag properly so was causing some problems and libstaden was having some troubles finding the non-systemwide installed zlib.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/89#issuecomment-246073102:391,install,installed,391,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/89#issuecomment-246073102,1,['install'],['installed']
Deployability,"Great to hear @Liripo. Note that we're working on some updates to the SPLiT-seq vignette, so be sure to check back there soon for a new version!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/774#issuecomment-1127121152:55,update,updates,55,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/774#issuecomment-1127121152,1,['update'],['updates']
Deployability,"Great! One thing I found is that if I `INSTALL` the unitTests like I've been doing, they fail to find the appropriate libraries (again if they were fetched). I pushed a fix for this in develop. Basically, you just have to copy, not install, the unit test executable. That's done with the following incantation:. ```; add_custom_command(TARGET unitTests POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:unitTests> ${GAT_SOURCE_DIR}/tests/$<TARGET_FILE_NAME:unitTests>; COMMENT ""Copying unitTests""; ); ```. I don't know if this is necessary for homebrew or not, since it has no effect on the salmon binary itself.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239632810:39,INSTALL,INSTALL,39,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239632810,2,"['INSTALL', 'install']","['INSTALL', 'install']"
Deployability,"Great- thanks @roryk , I'll give your code a try, and yes, we are applying some filtering downstream. Unfortunately we don't always have control of the metadata associated with the experiments we're handling. . @k3yavi - thank you, next release will be fine :-)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490163389:237,release,release,237,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490163389,1,['release'],['release']
Deployability,Great; I'll definitely update the documentation with this as I agree that it's not obvious at all :).,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/164#issuecomment-338296339:23,update,update,23,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/164#issuecomment-338296339,1,['update'],['update']
Deployability,"Great; glad to hear it. I'm going to close this issue since this fix is already in develop and will make it to the next release. At that point, the fix should make it to homebrew as well.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/112#issuecomment-267613176:120,release,release,120,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/112#issuecomment-267613176,1,['release'],['release']
Deployability,"Great; would you like help testing the pipeline, and integrating it into bcbio? We could help with both :)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-255123178:39,pipeline,pipeline,39,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-255123178,2,"['integrat', 'pipeline']","['integrating', 'pipeline']"
Deployability,"Greetings,; I recently ran across this problem. In my invocation, I noticed that the boost build process was running with a b2 command which looked like:. cd /cbcb/sw/RedHat-7-x86_64/common/local/salmon/0.12.0/src/salmon-0.12.0/external/boost_1_66_0 && CC=/opt/local/stow/gcc-8.1.0/bin/gcc CXX=/opt/local/stow/gcc-8.1.0/bin/g++ /cbcb/sw/RedHat-7-x86_64/common/local/salmon/0.12.0/src/salmon-0.12.0/external/boost_1_66_0/b2 -d0 -j2 --with-iostreams --with-atomic --with-chrono --with-container --with-date_time --with-exception --with-filesystem --with-graph --with-graph_parallel --with-math --with-program_options --with-system --with-locale --with-timer toolset=/opt/local/stow/gcc-8.1.0/bin/gcc toolset=/opt/local/stow/gcc-8.1.0/bin/gcc cxxflags=-std=c++14 ""cxxflags= -std=c++14 -I/cbcb/sw/RedHat-7-x86_64/common/local/salmon/0.12.0/src/salmon-0.12.0/external/install/include -L/cbcb/sw/RedHat-7-x86_64/common/local/salmon/0.12.0/src/salmon-0.12.0/external/install/lib"" link=static install. and was generated in the file:; CMakeFiles/libboost.dir/build.make. which I then edited to ensure that all the toolset entries were set to 'toolset=gcc'.; Rerunning the make then passed without error.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-466558449:863,install,install,863,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-466558449,3,['install'],['install']
Deployability,"HI @Acribbs ,. Thanks for the very interesting question.; I think the first question in my mind is, do you need intron level deduplicated counts ? If yes, then sadly concatenating the pre-mrna sequence into the transcriptome sequences is probably not a good idea, as in general, the length of intronic sequences are much longer than that of exonic sequence and it may bias alevin deduplication algorithm. However, if you don't need the number of unspliced deduplicated counts and as the nuceli scRNA-seq has more pre-mRNA data if the question is regarding the aligning to genome v transcriptome then we just proposed a solution in our latest [preprint](https://www.biorxiv.org/content/10.1101/657874v1?rss=1). The new SA method is already integrated into salmon but you may have to index the genome+transcriptome using our scripts from [here](https://github.com/COMBINE-lab/SalmonTools). Hope it helps !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/370#issuecomment-499513288:739,integrat,integrated,739,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/370#issuecomment-499513288,1,['integrat'],['integrated']
Deployability,"HI @jamesrhowe ,; A couple of things, we have made major upgrades into Alevin with the release `v0.12.0` and would be releasing soon and it would take care of the problems you are facing.; We are still working on improving the tutorials and guide for using Alevin but for 10xV3 we added a new flag into `0.12.0` since the UMI length has increased; with the command line flag `--chromiumV3`. You might have to swap `--chromium` with `--chromiumV3`. I'd let you know once we release the latest version otherwise if you can compile from source, compiling `develop` should do the job for you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/324#issuecomment-443218599:57,upgrade,upgrades,57,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/324#issuecomment-443218599,6,"['release', 'upgrade']","['release', 'upgrades']"
Deployability,"HI @mariaolaaksonen ,; Thanks for raising the issue and using Alevin with 1.3M dataset.; Can you check if your issue has the same behavior as in https://github.com/COMBINE-lab/salmon/issues/329, i.e. Alevin is stuck after processing a multiple of 4 number of barcodes?; We have already fixed the issue but it's not in the master or in the release `v0.12.0` of salmon. . As a fast resolution, we'd recommend compiling salmon from source using the develop branch. If you can wait for sometime, we'd release a new version with the hot-fix soon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/333#issuecomment-452491311:339,release,release,339,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/333#issuecomment-452491311,2,['release'],['release']
Deployability,"HI @mfansler ,; Thanks for asking the very important question.; Alevin is primarily (till current release) designed to work with 3'-tagged end, droplet based sequencing where the primary assumption is that most of the reads would ideally be sequenced from the 3'-end of the molecule. Although, Salmon is a transcript quantification tool for *bulk* RNA-seq but we believe in singe-cell (3'-tagged) sequencing, generating quantification at transcript level is fundamentally hard problem to solve. Specifically, one of the reason is, a lot of transcripts share the terminal exon, and the features like length effect which are used in bulk RNA-seq to resolve ambiguity is not directly usable in single-cell for resolving the transcript ambiguity making the problem hard.; It's possible in the future that assays are designed to help incorporate more information e.g. sequencing from both 5' or 3' end sequencing or use SMART-seq2 which sequence the full molecule. In latter case people have been using Salmon as-is for generating the transcript level quantification. . _In summary_: We believe it's a trade-off based on your use case i.e. if you wan't to generate transcript level counts then most-likely single cell protocols which sequence from the full length of the molecules like smart-seq2 is better suited but if the motivation is to get higher number of cell coverage w/ decent gene-level molecule counts that's where 3'-end tagged end sequencing protocols shines most. _One Liner_; Alevin generates only gene-level counts for droplet based sequencing (til latest release v0.11.2).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/287#issuecomment-420627713:98,release,release,98,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/287#issuecomment-420627713,4,['release'],['release']
Deployability,"HI @pinin4fjords ,. Thanks for reporting the this. There was bug associated with binary format to mtx format conversion we fixed in the upcoming release. The problem was associated with the last index of the matrix which can be off by max 8 indices because we were using `uint_8` for storing the bit vectors. ; My apologies for the trouble, there are two ways to solve this issue:; 1.) Rerun the pipeline with the latest beta release of [0.99](https://github.com/COMBINE-lab/salmon/releases/tag/v0.99.0-beta2), unfortunately this is not in conda yet, but we plan to release it soon with awesome new updates like consuming both genome and transcriptome for read mapping.; 2.) If you wan't to avoid rerunning the full pipeline, try this. Try cloning [this](https://github.com/COMBINE-lab/EDS) repo and do a `cargo install --release` for the code in `src-rs` folder. Note: You might have to install [Rust](https://www.rust-lang.org/tools/install) for this, it's just one liner install. Once compiled the EDS code, you can just do the following to generate the correct mtx file.; ```; ./target/release/eds convert -i <Path to output/alevin/quants_mat.gz> --mtx -c <num_cells> -f <num_genes>; ```. Please let me know if it works out for you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-537069929:145,release,release,145,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-537069929,13,"['install', 'pipeline', 'release', 'update']","['install', 'pipeline', 'release', 'releases', 'updates']"
Deployability,"Happy to help! Have just been patching for the `salmon` package in`spack`, so figured I'd do a PR here as well.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/856#issuecomment-1607764883:30,patch,patching,30,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/856#issuecomment-1607764883,1,['patch'],['patching']
Deployability,Hard to say - I definitely don't know the code base or algorithm details better than you. The thing that jumps to mind is separation of finding equivalent CBs/quantification and whitelisting. For example:. 1) `salmon alevin --quantifyAll`: could do no whitelisting (knee or otherwise) and output a sparse matrix of counts for all CBs (binning counts by equivalences). 2) `salmon alevin --runQC --rrna path/to/rrna.txt --mrna path/to/mrna.txt path/to/quants_mat.gz`: could just do whitelisting via whatever combination of knee and/or NB modelling on the counts from `1)`. . I think you're much better positioned to know if the above makes sense or is reasonable. One advantage of separating CB mapping/quantification and whitelisting is that it would be relatively straightforward to run automatic cell QC filtering from the output of kallisto or Cell Ranger. There seems to be a definite lack of automation in this area (only other thing I have come across is [`cellity`](https://bioconductor.org/packages/release/bioc/html/cellity.html) which seems to be more hands on).,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-503641072:1006,release,release,1006,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-503641072,1,['release'],['release']
Deployability,Has Sierra issue been fixed? Binary release Salmon-0.8.2_macOS_10.12.tar.gz; still gives malloc error under OSX 10.12.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294840673:36,release,release,36,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294840673,1,['release'],['release']
Deployability,Has anyone found a solution to this issue? I just installed Salmon and used it ( I really liked it by the way). But now my R doesn't work. Should I re-install R with condo? Will this then break Salmon?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/147#issuecomment-374346707:50,install,installed,50,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/147#issuecomment-374346707,2,['install'],"['install', 'installed']"
Deployability,"Hello @rob-p ,; 1. For pre-compiled binary, ""salmon index"" complete successfully, but ""salmon quant"" failed to find the read file. (""ls"" command confirms the existence of the read file SRR6269049_2.fastq); ![image](https://user-images.githubusercontent.com/24876498/103170603-66a47600-4880-11eb-9da1-336f96880e4f.png). 2. ; > cmake -DFETCH_BOOST=TRUE -DTBB_INSTALL_DIR=/usr/include -DCMAKE_BUILD_TYPE=Release -DNO_IPO=TRUE -DCMAKE_INSTALL_PREFIX=../stage ..; I add the additional ""-DNO_IPO"" flag, but ""salmon index -t gentrome.fa.gz -d decoys.txt -p 12 -i salmon_index --gencode""(same as **To Reproduce** point 5) still crashed at fixFasta(), fixFastaMain() with segmentation fault. 3.; I had another issue posted yesterday reporting that the Debug mode is unabled to be compiled successfully, and I'm wondering if there's a resolution for the problem. Thank you:)); title: [salmon v1.4.0 -DCMAKE_BUILD_TYPE=Debug produce compile error: -pg and -fomit-frame-pointer are incompatible #608]",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751460320:401,Release,Release,401,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751460320,1,['Release'],['Release']
Deployability,Hello @rob-p! I was wondering if there have been any updates on the fusion/detection of spanning reads problem. I'm about to embark on a project to process many bacterial transcriptomes from many different genomes/species and plan to use salmon. I would love to be able to detect polycistronic transcripts through the identification of spanning reads.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-1017768886:53,update,updates,53,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-1017768886,1,['update'],['updates']
Deployability,"Hello @rob-p,. thank you very much for your quick and detailed answer!. > Why are the salmon counts for this gene much lower when using alignment mode and mapping mode under nf-core?. This theory makes perfect sense and would explain the low counts for the short genes perfectly. When I check the bam files, I see quite a few reads that are only partially in the region of the particular feature. ; I looked at the meta_info.json: . ""num_bootstraps"": 0,; ""num_processed"": 36672829,; ""num_mapped"": 27737862,; ""num_decoy_fragments"": 2690181,; ""num_dovetail_fragments"": 59605,; ""num_fragments_filtered_vm"": 2897142,; ""num_alignments_below_threshold_for_mapped_fragments_vm"": 4117684,; ""percent_mapped"": 75.63600288376989,. It looks like the decoy percentage is substantial. ; I'll run the pseudo-aligment in decoy mode and take a look at the unmapped reads to see if there are many that could be mapped to the chloroplast genome (I'll update this later). > Why am I seeing much higher values for this gene with FeatureCounts?. I have now run FeatureCounts several times with different overlaps (minOverlap =25, minOverlap =50, minOverlap =75min Overlap =100) and indeed the counts have decreased (again the psbI example: 8685 , 6011, 4237, 1805 accordingly). Again, this is a good argument for the hypothesis put forward. >Why does running Salmon outside nf-core lead to much higher values?. Hopefully, after I run Decoy mode, this problem is solved. I also tried mapping mode with the --softclipOverhangs option. That increased the counts (psbI : 4696 counts); playing around with the --minScoreFraction flag in addition to the --softclipOverhangs flag also increased the numbers ( minScoreFraction= 0 ->psbI = 8496; minScoreFraction= 0.5 ->psbI = 5633; minScoreFraction= 0.7 ->psbI =3627 ). . So, in summary, your explanation seems to be completely correct. ; In the case that decoy mode resolves the difference between the pipeline and the run outside the pipeline, I would not give this to the nf-cor",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1238043213:932,update,update,932,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1238043213,1,['update'],['update']
Deployability,"Here is the part of the log I've left out previously; <img width=""978"" alt=""Screen Shot 2019-11-03 at 8 41 57 PM"" src=""https://user-images.githubusercontent.com/17168657/68090974-860d6200-fe7a-11e9-972f-d529453bbea8.png"">. I've downloaded Linux executables on 11/02/ from the following link: https://github.com/COMBINE-lab/salmon/releases/download/v1.0.0/salmon-1.0.0_linux_x86_64.tar.gz. Decoys and gentrome files seem to be ok since they are working properly with bioconda version of salmon. I am sharing a Dockerfile in case you would like to reproduce the entire environment I was using. [Dockerfile](https://github.com/COMBINE-lab/salmon/files/3802055/Dockerfile)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-549171596:330,release,releases,330,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-549171596,1,['release'],['releases']
Deployability,Here's the official tarball release of `libdivsufsort`:; https://github.com/y-256/libdivsufsort/archive/2.0.1.tar.gz,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-193878275:28,release,release,28,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-193878275,1,['release'],['release']
Deployability,"Hey @Hoohm , we have released `v0.11.1` with some fix for the customized length mode. Let us know how it worked out for you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/247#issuecomment-408565409:21,release,released,21,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/247#issuecomment-408565409,1,['release'],['released']
Deployability,"Hey @PeteHaitch ,; I think currently there is no direct way to tell Alevin to use CB and UMI in reverse order and you might have to hack a bit for that. Although it should not be too hard to do that. Specifically, the `extractBarcodes` and `extractUMI` function [here](https://github.com/COMBINE-lab/salmon/blob/master/src/AlevinUtils.cpp#L44) has to be updated with a new generic type (`celseq` may be). Let us know if it works out for you otherwise I can take a look into this sometime next week.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-416324900:354,update,updated,354,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-416324900,1,['update'],['updated']
Deployability,"Hey @antonkulaga ,; Sorry for the late reply. Somehow, this one got lost somewhere in the mids of all the other issues.; Thanks for the heads-up and a very nice suggestion. ; I think they have included Alevin in the form of salmon [here](https://www.scrna-tools.org/tools.html#salmon). But we do see your point it could be confusing because of the names, we'll see what can be done in terms of including Alevin too. I am closing this issue for now and would update here if any changes happen down the line.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/283#issuecomment-433157082:458,update,update,458,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/283#issuecomment-433157082,1,['update'],['update']
Deployability,"Hey @jeremymsimon! I checked the protocol and the [pipeline code](https://github.com/yjzhang/split-seq-pipeline/blob/master/split_seq/tools.py). The protocol you described is v1 and the Parsebio is v2. I have implemented v2 in salmon and would be testing it this week. v1 can be similarly implemented. I read the paper and other available resources but I am not clear about the random hexamer usage and it's effects on the barcode. Can you please explain what you meant by BC1s being paired and what's the use of random hexamer, please? Thanks.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-936331597:51,pipeline,pipeline,51,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-936331597,4,['pipeline'],['pipeline']
Deployability,"Hey @jeremymsimon! I generated the barcode list using all combinations of 8-bp barcode sequence in [sci-seq-pipeline github repo](https://github.com/yjzhang/split-seq-pipeline/tree/master/split_seq/barcodes) for version v1. Using `alevin-fry generate-permit-list -u barcode_list` instead of `-k` resulted in 142,667 nuclei. After using Seurat filtering on the generated counts, `min.cells = 3, min.features = 200` as done [here](https://satijalab.org/seurat/articles/pbmc3k_tutorial.html), I got 7,442 nuclei. All of the barcodes were present in the submission. The correlation b/w alevin-fry and submission is also good:; ```; Min. 1st Qu. Median Mean 3rd Qu. Max. ; 0.2966 0.7127 0.8689 0.8163 0.9448 0.9963; ```; Addressing your previous question, I would recommend using `salmon alevin` and `alevin-fry` for single cell quantification. It is much faster than using `alevin`. Let me know if you have any questions.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988185505:108,pipeline,pipeline,108,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988185505,2,['pipeline'],['pipeline']
Deployability,"Hey @k3yavi . The data is from a public dataset hosted on the 10x genomics website:. [200 Sorted Cells from Human Glioblastoma Multiforme, 3’ LT v3.1](https://support.10xgenomics.com/single-cell-gene-expression/datasets/6.0.0/Brain_Tumor_3p_LT). I downloaded the data and subsampled the FASTQ files to 1,000 reads. It was an arbitary choice, I just needed a small dataset to test a pipeline I was building.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/647#issuecomment-821522673:382,pipeline,pipeline,382,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/647#issuecomment-821522673,1,['pipeline'],['pipeline']
Deployability,"Hey @mahogny , ; Newest release: [0.11.3](https://github.com/COMBINE-lab/salmon/tree/v0.11.3) should fix the above issue. feel free to reopen this issue if you face any problems.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/281#issuecomment-417164716:24,release,release,24,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/281#issuecomment-417164716,1,['release'],['release']
Deployability,"Hey @pinin4fjords, did you fully figure it out? I'm having the exact same question while implementing my own RNA-seq pipeline that closely resembles nf-core's one.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/938#issuecomment-2173852278:117,pipeline,pipeline,117,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/938#issuecomment-2173852278,1,['pipeline'],['pipeline']
Deployability,"Hey @plbaldoni ,. Thanks for raising the issue, it does seem like a corner case. We just released `v0.14.0`, can you please check if this still an issue? If it is can you please share a minimal data so that we can replicate and work on solving this issue ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/368#issuecomment-498037183:89,release,released,89,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/368#issuecomment-498037183,1,['release'],['released']
Deployability,"Hey @rob-p, you are quite welcome; thanks for the warm response. Being system installed packages most headers and dynamic libraries will be installed using the standard prefixes: /usr/include, /usr/lib/${multiarch-tuple}/, . I've updated the checklist [above](https://github.com/COMBINE-lab/salmon/issues/19#issue-109233280) with links to the file lists so you can see the paths yourself. Interestingly I was able to build, run, and pass all the included tests using the version of BWA in the Debian archive. As for Jellyfish I had to update our package to include 'json.h' which had gotten dropped.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-144914246:78,install,installed,78,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-144914246,4,"['install', 'update']","['installed', 'update', 'updated']"
Deployability,"Hey @rob-p,. OK, I think the changes should pass CI now in theory. Basically I patched the `CMakeLists.txt` file to only download and build those libraries which are not found on the system. If they aren't found, then you have the same behaviour as before. Also, you can now activate the use of shared libraries by setting `USE_SHARED_LIBS=1` on cmake. This should work quite nicely for a Homebrew formula.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472593229:79,patch,patched,79,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-472593229,1,['patch'],['patched']
Deployability,"Hey @rob-p,. Thanks for your efforts in handling these issues! I'll try the analysis again with the updated commits, and I'll let you know if I have further issues.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/50#issuecomment-201894954:100,update,updated,100,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/50#issuecomment-201894954,1,['update'],['updated']
Deployability,"Hey Rob, I wound up just installing it using the tar.gz and no issues",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364953699:25,install,installing,25,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364953699,1,['install'],['installing']
Deployability,"Hey Rob,. I did manage to test v1.3 this evening. Ran much faster. The same sample that took about 6 hours ran in 45mins. Still not great, but I think it might be intrinsic to some of these samples, also I was running it off my laptop and was running Linux off a; flash drive so not an ideal setup. Either way much more reasonable. Do you want me to attach any logs or anything?. Best,. Ryan . Sent from my iPhone. On Jun 16, 2020, at 10:20 AM, Rob Patro <notifications@github.com> wrote:. ﻿. Hi ; @shalercr,; I agree that if each sample runs as quickly as you see here, it's not a big deal to just re-run them all. Note that, while my avoids ~116 times more (eventually-discarded) alignments than did yours, the difference in the number of discarded; fragments (i.e. fragments that had no mapping) is very small — ~7,000, or 0.023% of the fragments. Thus, despite the huge speed-up, I wouldn't expect many differences in the quantifications. However, I couldn't argue against re-quantifying everything; with the new version just for good measure :). When you have a chance, please do let me know if you see this same performance difference using the pre-compiled (linux) binary. here. Of course, once we finalize this release (soon), we will push to bioconda so we will also have OSX binaries available. However, I just want to make sure this fixes things on your end as well before the release.; —; You are receiving this because you were mentioned.; Reply to this email directly, ; view it on GitHub, or ; unsubscribe.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-645119801:1219,release,release,1219,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-645119801,2,['release'],['release']
Deployability,"Hey Rob, . Sorry for the delay, here is a link to the quants folder if you guys are still interested. Everything worked well, especially with the additional flag. Any idea on the timeline for the bioconda release?. Best, . Ryan . https://www.dropbox.com/sh/rmy4f6brxx5iczo/AACxbyZFxN0XGcP3YRGjGO-pa?dl=0 . On Jun 18, 2020, at 12:21 AM, Ryan, Shaler <shalercr@mcmaster.ca> wrote:. Thanks for the heads up. I gave it a test this evening and wow, it is wicked fast. I’ll send you those quant files tomorrow when I get a chance, but adding that flag and the new version fixed the problem. . Thank you for all your help. . Best,. Ryan . Sent from my iPhone. On Jun 16, 2020, at 11:36 PM, Rob Patro <notifications@github.com> wrote:. ﻿. P.S. ; @shalercr,; I also note that layering --hitFilterPolicy BOTH on top of the new version cuts down the time by another factor of 2 for me; 2163.65user 12.72system 4:21.57elapsed 832%CPU (0avgtext+0avgdata 1221856maxresident)k. and the number of mappings discarded alignments due to score comes down by another factor of ~6X. It might be worth seeing what you get with that option as well.; —; You are receiving this because you were mentioned.; Reply to this email directly, ; view it on GitHub, or ; unsubscribe.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-647273636:205,release,release,205,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-647273636,1,['release'],['release']
Deployability,"Hey Rob. It looks like this was an error in the way I was calling `salmon index`. I've wrapped salmon in a python based pipeline where I manage creation of index files using configuration files. To call `salmon index` I was previously iterating on standard error, capturing your err and logging it after reformatting a bit. It looks like what was happening is:. 1. I opened a subprocess and executed salmon; 2. Salmon worked properly; 3. Salmon stopped producing output on stderr (and sent an EOF marker?) and so my script exited; - killing salmon prematurely; - truncating the salmon index (In a way that salmon found perfectly acceptable during `salmon quant`; - frustrating me quite a bit. I fixed this by doing the right thing and blocking for the process to return an exit code:. ```diff; p = Popen(cmd, stderr=PIPE); - for line in p.stderr:; - line = line.decode(); - if line.endswith('\n'):; - logging.info(line.rstrip()); - else:; - logging.info(line); + _, err = p.communicate(); + logging.info(err); ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/132#issuecomment-303738589:120,pipeline,pipeline,120,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/132#issuecomment-303738589,2,"['configurat', 'pipeline']","['configuration', 'pipeline']"
Deployability,"Hey guys, just wanna give heads up, we just released `0.14.1` for various bugfixes. Please consider updating salmon to the latest.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/380#issuecomment-505983550:44,release,released,44,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/380#issuecomment-505983550,1,['release'],['released']
Deployability,"Hey, I'm having the same kind of problem. I aligned my PE reads against the transcriptome using BWA-mem and then sorted them by coordinates (as a regular procedure). I know Salmon assumes the alignments are not sorted, so I shuffled these bam files, and then run `salmon quant`.; Here are the errors I got in a number of trials:. ### Fresh installation of Salmon; ```; conda create --name salmon -c bioconda salmon; conda activate salmon; ```. ### 1. Shuffling a bam file with `samtools collate`; ```; samtools collate \; -@ 40 \; -o SRR3212847.Aligned.Shuffled.bam \; SRR3212847.Aligned.SortedByCoord.bam. salmon quant \; -t mRNA.fasta \; -p 20 \; -l A \; -a SRR3212847.Aligned.Shuffled.bam \; -o SRR3212847.Aligned.Shuffled ; ```. ```; Version Info: This is the most recent version of salmon.; # salmon (alignment-based) v1.4.0; # [ program ] => salmon ; # [ command ] => quant ; # [ targets ] => { mRNA.fasta }; # [ threads ] => { 20 }; # [ libType ] => { A }; # [ alignments ] => { SRR3212847.Aligned.Shuffled.bam }; # [ output ] => { SRR3212847.Aligned.Shuffled }; Logs will be written to SRR3212847.Aligned.Shuffled/logs; [2021-01-08 12:43:44.680] [jointLog] [info] setting maxHashResizeThreads to 20; [2021-01-08 12:43:44.680] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; Library format { type:paired end, relative orientation:inward, strandedness:unstranded }; [2021-01-08 12:43:44.711] [jointLog] [info] numQuantThreads = 14; parseThreads = 6; Checking that provided alignment files have consistent headers . . . done; Populating targets from aln = ""SRR3212847.Aligned.Shuffled.bam"", fasta = ""mRNA.fasta"" . . .done. processed 0 reads in current roundSegmentation fault (core dumped); ```. ### 2. Shuffling a headless bam file with `samtools collate`; (I think I saw something about the bam's header in another thread dealing with this issue); ```; samtools view \; -b \; -@ 40 \; -o SRR3212847.Aligned.SortedByCoord.NoHeader.bam \",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-756727212:340,install,installation,340,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/582#issuecomment-756727212,1,['install'],['installation']
Deployability,"Heya, there are precompiled binaries available which might be easier to install. https://github.com/COMBINE-lab/salmon/releases/download/v0.9.1/Salmon-0.9.1_linux_x86_64.tar.gz is a link to them. Another option would be to use bioconda:. https://bioconda.github.io/. which is awesome if you are just starting out doing RNA-seq, since you won't have to spend time trying to get all of the tools to compile.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/216#issuecomment-383913243:72,install,install,72,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/216#issuecomment-383913243,2,"['install', 'release']","['install', 'releases']"
Deployability,"Hi :). `wget` war already installed (to download the sources in the first place, so this one works). ; After `wget`ing the source files again re-`cmake`-ing them again `make install` did work, not sure what happened there in the first place. Also the tests are passing now. I will try to figure out what is different between the clean docker version and my system setup and will report back as soon as I know more.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404536671:26,install,installed,26,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404536671,2,['install'],"['install', 'installed']"
Deployability,"Hi @ACastanza,. Thanks for reporting both of these. For the first, I think it is just the case that the message needs to be updated. In fact, the `--validateMappings` flag is now deprecated since selective-alignment is used by default (and can't be turned off, except in the single-cell mapping context, with the `--sketchMode` flag, which is currently only in the develop branch). We'll update that message.; Regarding the misplaced newline, the issue is that the other messages are written by the logger, which is asynchronous. So, sometimes it will get to the appropriate place and write a newline before the fragment counter starts, and sometimes it won't. I'll look into if there is a way to better clear the line, even if the update is asynchronous. Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/587#issuecomment-729044670:124,update,updated,124,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/587#issuecomment-729044670,6,['update'],"['update', 'updated']"
Deployability,"Hi @Beatzekatze,. The issue with test 1 seems to be from CMake being unable to find the unit test to execute under certain configurations. I'll consider this a bug in the CMake file, and look into fixing it. The failure of tests 2 and 3 is more interesting, as one would definitely not expect this given that the program compiled without error. Does indexing fail only with `--type fmd`, or also with `--type quasi` (or no `--type` as that is the default)? Would it be possible to run the command under gdb and report the stack trace? That would be something like:. ```; $ gdb --args salmon index -t transcripts.fasta -i sample_salmon_fmd_index --type fmd; ```. and then, when you encounter the segfault issuing the back-trace `bt` command. This would give insight into where, exactly this is showing up. One issue I've seen before is when the resident installation of Boost is _not_ compiled with `--std=c++11` (or 14 or 17), since this leads to an incompatible ABI between salmon and the Boost library. If that's what's going on, it should be evident from the backtrace. Finally, while I'd want to figure out what's going on with this build from source, it would also be useful to know if you encounter the same behavior when installing via bioconda. Thanks for the detailed report!. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404223014:123,configurat,configurations,123,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404223014,3,"['configurat', 'install']","['configurations', 'installation', 'installing']"
Deployability,"Hi @BenjaminDEMAILLE,. I think brew is a bit behind bioconda on this front, and, indeed, the M1 being a completely new architecture complicates things. I have an M1 Max and so there are plans to get a native compile going soon. For the time being, the recommended way to get `salmon` on an M1 (or M2) Mac is as suggested [here](https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137183671). Basically, you create an x86 conda environment (running under rosetta2) and install the latest version of salmon there. Rosetta2 is pretty amazing, and everything seems to run without a hitch, with nary a performance hit for the x86 -> ARM translation. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/787#issuecomment-1170723368:479,install,install,479,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/787#issuecomment-1170723368,1,['install'],['install']
Deployability,"Hi @BisonKok ,. If you looks at the first line of the sam file:; ```; @HD VN:1.0 SO:coordinate ; ```; There seem to be extra whitespaces after `SO:coordinate`, if you can edit sam and remove the tab after the first line in the header then salmon works fine. Not sure why the C++ parser is failing to remove extra whitespaces, we will update you once we have a fix.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/387#issuecomment-506853630:334,update,update,334,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/387#issuecomment-506853630,1,['update'],['update']
Deployability,"Hi @ChelseaCHENX ,. Thanks for raising the issue.; I think if you can share the alevin log (say for 1192 cells ?) we can comment much more about the details. However, if you ask me to guess then I believe the initial whitelisting of alevin seems to be predicting a lot less cells, if you check the alevin log, it would say what % of CB are thrown due to noisy cellular barcodes. If the number is `>20%`, then the chances are indeed ""knee"" estimates are shooting up. The way to get better estimates from there would be to help alevin with a ballpark number of cells (as you are giving to cellranger with --expect-cell 8000, you can provide alevin with --expectCells 8000). Even after that if you get a lot of noisy CB prediction then you can force alevin to use certain number of cells with `--forceCells` option. https://github.com/COMBINE-lab/salmon/issues/362 this issue might help you understand more the details of the pipeline.; Hope it helps !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510540540:923,pipeline,pipeline,923,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510540540,1,['pipeline'],['pipeline']
Deployability,"Hi @DobbyLikesPenguins,. ### conda idea. So, if you want to try with conda again, I would first recommend that you create a new environment for salmon. ```; conda create --name salmon; ```. which you can then activate with . ```; conda activate salmon; ```. From this environment, you should be able to install the latest version. ```; conda install salmon; ```. or specifying version explicitly like . ```; conda install salmon=1.4.0; ```. ### using the pre-compiled executable. The simplest thing would be to simply add it to your PATH. Assuming you are using bash or a similar shell, you can do something like:. ```; export PATH=<path_to_salmon_directory>/bin:$PATH; ```. to add salmon to your path. It should choose this version when you use `salmon`. However, this will be reset when you logout. To make the change permanent, then you add this command to your bash profile (usually `~/.bash_profile`). It's a little bit different (but very similar) if you are using a different shell. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/483#issuecomment-775273715:303,install,install,303,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/483#issuecomment-775273715,6,['install'],['install']
Deployability,"Hi @DobbyLikesPenguins,. You can download a pre-compiled executable for 1.4.0 [here](https://github.com/COMBINE-lab/salmon/releases/download/v1.4.0/salmon-1.4.0_linux_x86_64.tar.gz). You should be able to just decompress it and run the binary in that folder. Let me know if that works.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/483#issuecomment-774550817:123,release,releases,123,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/483#issuecomment-774550817,1,['release'],['releases']
Deployability,"Hi @ECuris,. Indeed, this seems to be a case where the code evolved and the documentation has yet to catch up. The defaults are `fldMean` = 250 and `fldSD` = 25. The relevant code is here (https://github.com/COMBINE-lab/salmon/blob/master/src/SalmonQuantify.cpp#L2260). This defines how default values are set for these parameters. I'll make a note to update the documentation to be consistent with these changes (which were made to be more in line with modern protocols, though there's still no good universal parameters for things that can vary so widely between experiments).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-286760710:352,update,update,352,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-286760710,1,['update'],['update']
Deployability,"Hi @ECuris,. Yes, the values you give are used to form a normal distribution, which is then truncated on the left at 0. So, the parameters you provide are the mean and standard deviation of the distribution *prior* to truncation. However, I'll note that the values are such that 0 is usually sufficiently far (in terms of standard deviations from the mean) that the mean and standard deviation of the fragment length distribution are very similar before and after the 0 truncation. Finally, I'll mention that, if you have paired-end reads, Salmon will *always* learn the empirical fragment length distribution (since the experiment, itself, is the best estimator of the true distribution), but the `--fldMean` and `--fldSD` parameters define the prior distribution that is updated with observed fragment lengths.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-285686442:773,update,updated,773,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/127#issuecomment-285686442,2,['update'],['updated']
Deployability,"Hi @EPunzi ,. There are a couple of options. First, I see you're using an older release of Salmon. I strongly suggest grabbing [the latest release](https://github.com/COMBINE-lab/salmon/releases/tag/v0.10.2). What you posted here is actually a warning, not an error. What is preventing compilation looks to be a linking error (i.e. your compiler cannot find -lstdc++). If the newest salmon doesn't compile cleanly for the easiest thing to do is to install [through bioconda](https://anaconda.org/bioconda/salmon). Please let me know if either of these are successful, or, if not, what issues you run into. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-396624060:80,release,release,80,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-396624060,4,"['install', 'release']","['install', 'release', 'releases']"
Deployability,"Hi @EPunzi,. The trinity-based installation error looks quite cryptic. It suggests what to do to fix it, but it seems like something that shouldn't be happening in the first place. I would be happy to see if I could figure out what's going on with the ""manual"" installation. Could you provide more of the compiler output? What you have included above shows a warning, but I can't see what's causing the actual compiler *error* (what compiler & OS version are you using?). Finally, could you let me know if [this](https://github.com/COMBINE-lab/salmon/files/2099291/salmon-latest_linux_x86_64.tar.gz) pre-compiled linux-x86-64 binary works for you?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398104378:31,install,installation,31,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398104378,2,['install'],['installation']
Deployability,"Hi @FlorianRNA ! As stated in the [usage docs](https://nf-co.re/rnaseq/3.8.1/usage#quantification-options) for the nf-core/rnaseq pipeline:. ""Since v3.0 of the pipeline, featureCounts is no longer used to perform gene/transcript quantification, however it is still used to generate QC metrics based on [biotype](http://www.ensembl.org/info/genome/genebuild/biotypes.html) information available within GFF/GTF genome annotation files. This decision was made primarily because of the limitations of featureCounts to appropriately quantify gene expression data. Please see [Zhao et al., 2015](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0141910#pone-0141910-t001) and [Soneson et al., 2015](https://f1000research.com/articles/4-1521/v1)."". This is a common cause of confusion and I have tried to be as explicit about this in the docs. featureCounts is used to quantify features in the annotation by `gene_biotype` and not the actual gene / transcript features themselves. This may explain why you are seeing these discrepancies. However, I am still a little puzzled how you are able to directly compare the counts generated by featureCounts and Salmon (in either mode) because the core features that are being quantified should be different. Where did you get the plant reference genome from? If it's not from Ensembl then it probably isn't worth running the biotype quantification with featureCounts anyway because the GTF annotation files may not contain that information. There are some docs for this [here](https://nf-co.re/rnaseq/3.8.1/usage#prokaryotic-genome-annotations). Hope that helps and if you think we can improve the pipeline in any way please feel free to create an issue on the nf-core/rnaseq repo.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1237865190:130,pipeline,pipeline,130,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/798#issuecomment-1237865190,3,['pipeline'],['pipeline']
Deployability,"Hi @Gaura and @gmarcais,. Just an update, this approach currently seems to be working. We can stream sciseq3 data through our `seq_geom_xform` tool to convert it to a standard ""normalized"" geometry, and the quantify using `piscem` + `alevin-fry` and get highly-concordant results to what we get with the builtin `--sciseq3` flag! In case you are interested, the current grammar that is supported is described [here](https://hackmd.io/kfRWvfjQTua42PxD_v5Vzg). The syntax is that of the [pest](pest.rs) parser. In fact, if you copy that grammar into [https://pest.rs/#editor](https://pest.rs/#editor) you can try out geometry strings live and see how it's parsed!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/734#issuecomment-1460840281:34,update,update,34,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/734#issuecomment-1460840281,1,['update'],['update']
Deployability,"Hi @HenrikBengtsson,. I've updated the script that builds the tarball of the CI server to apply the above permissions explicitly. It seems to be working (and I've uploaded the modified tarball under the release page). Thanks again for the issue!. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/761#issuecomment-1067481658:27,update,updated,27,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/761#issuecomment-1067481658,2,"['release', 'update']","['release', 'updated']"
Deployability,"Hi @Hoohm , ; Thanks for the quick reply and the explanation . I personally am not very well versed in the working of `SCRBseq`. But, as you explained, knowing a set of whitelist CB beforehand is always a plus for the downstream working of the pipeline. Currently, Alevin merge all the observed CB which are 1-edit distance from a known whitelist CB towards the whitelist. The underlying assumption being that the sequencing error (although with low probability) can change CB sequence and we can correct for that. I wonder, is this right to do for your experiment ?. re: >Is there an option for max distance allowed between BC or UMI?; Sorry, but I don't completely understand this question. When you say distance allowed between CB and UMI, do you mean there is a sequence between CB and UMI ( like in in-drop seq)? If that's the case then we might have to tweak a bit in alevin command line flags again. But I suspect what you meant by above statement is -- max distance allowed between CB among themselves. If that's the question then unfortunately we currently allow correcting for only 1-edit distance for both CB and UMI. But if you think more correction is needed by your protocol then we can put this on the feature request list and discuss about working on this on the next release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/247#issuecomment-402543751:244,pipeline,pipeline,244,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/247#issuecomment-402543751,2,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"Hi @Jx-b,. There seem to be some strange versioning issues with bioconda. Can you try the following; which should install salmon in its own environment?. ```; conda create -n salmon salmon=0.9.1; ```. Then, you can activate the salmon environment and run salmon from there. Please let me know if this works for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-379775613:114,install,install,114,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-379775613,1,['install'],['install']
Deployability,"Hi @Melkaz,; These options have been added as of commit c207d0f28e5782f9a16747a72ac6f06c277fd4ed. There are some new options, all of which have reasonable defaults (the ones that were hard coded before). The relevant options here are: `--fldMean` which you can use to specify the expected mean length of the fragment distribution and `--fldSD` which you can use to specify the expected standard deviation of the fragment length distribution. These values are used to set the _prior_ on the fragment length distribution. This means that if you're using paired-end reads, the observations will overwhelm this prior quickly and we'll learn the empirical distribution. If you're using single-end data, then the prior won't really be updated and the values you specify above are what will be used in practice (e.g. to compute effective transcript lengths). Please let us know if you run into any trouble using this new feature. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/2#issuecomment-103974922:729,update,updated,729,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/2#issuecomment-103974922,2,['update'],['updated']
Deployability,"Hi @Munfred , ; Thanks again for testing Alevin with your dataset. Extrapolating from the log, It indeed looks like a challenging dataset. In default settings Alevin pipeline starts with finding a knee in the curve (which itself is a non-trivial problem) and then use KDE w/ gaussian correction to adjust for the right probability. In your case it looks like knee is overshooting (if true number of CB is 300 ) but more troubling part for me is gaussian correction is coming out 0. Now based on your motivation for using Alevin, I can propose two solutions:. 1. If the motivation is to get gene-level count without worrying about the whitelisted CB prediction then the easiest way is to use external whitelist. Alevin can use external whitelist using flag `--whitelist` and would generate gene level counts for specified list of CB.; 2. If you need full end-to-end run of Alevin, then I propose using command line flag `--dumpFeatures` along with Alevin default. This flag tells Alevin to dump various features, the important one here would be a file named `frequency.txt`, what this file basically tells you is the frequency of all the observed CB in a order. From there we can manually select a knee in the frequency curve and use that as a whitelist. In terms of improving the task for improving the knee selection in Alevin, if you can share the `frequency.txt` file then I can look into what's causing the issue for gaussian correction or the knee selection itself. Thanks again for your interest !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/245#issuecomment-402547744:166,pipeline,pipeline,166,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/245#issuecomment-402547744,1,['pipeline'],['pipeline']
Deployability,"Hi @Munfred , thanks for all the useful comments and glad to hear that you were able to run alevin successfully. ; I agree, in the next release we can work on adding the flag for ignoring the reads below a certain length.; Regarding the Transcript to gene Mapping file, all `bioawk` script does it to generate a `tsv` file with the first column as transcript name (as present in the reference) and the second column is the relevant gene id to the transcript. We have described the format [here](http://salmon.readthedocs.io/en/latest/alevin.html) but we can also update the tutorial to reflect the same more clearly. I agree with your last point too, we are working on writing a python parser, to parse the binary format and would update the tutorial soon with the relevant code. Thanks again for using our tool and let us know if you have any other feedback / suggestion regarding improving the alevin pipeline.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/237#issuecomment-400439678:136,release,release,136,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/237#issuecomment-400439678,8,"['pipeline', 'release', 'update']","['pipeline', 'release', 'update']"
Deployability,"Hi @Munfred ,. As promised we have updated the [tutorial](https://combine-lab.github.io/alevin-tutorial/2018/output-format/) to read-in the binary format of the Alevin's output and can now be easily imported without using `--dumpCsvCounts`. If you are interested in looking at code to parse the binary format it can be found [here](https://github.com/k3yavi/vpolo/blob/master/vpolo/alevin/parser.py#L8). Thanks again for the request .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/237#issuecomment-402570994:35,update,updated,35,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/237#issuecomment-402570994,1,['update'],['updated']
Deployability,"Hi @Munfred ,. Thanks for raising the issue. We have significantly modified the mapping algorithm and the output format of alevin in the latest release, the manuscript for changes in the mapping algorithm can be found in the [this](https://www.biorxiv.org/content/10.1101/657874v1) preprint. We have updated the relevant parsers in the python channel too. In practice we have observed significant difference in the size, although we think there is still room for improvement and we are working on improving it. Let us know how it works out for you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/354#issuecomment-498320392:144,release,release,144,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/354#issuecomment-498320392,2,"['release', 'update']","['release', 'updated']"
Deployability,"Hi @PeteHaitch ,; I have just pushed a potentially testable version in Alevin for cel-seq2 ( activated by `--celseq` command line flag ), although to make it work the develop branch has to compiled from source.; A couple of points to note:; * I assumed the the length of both CB and UMI to be 6 as in the original cel-seq2 paper.; * The deduplication algorithm is still same as default and nothing has been changed in the part. Please let us know how it works out for you and if at all it's useful / comparable to the output generated by the traditional cel-seq2 pipeline.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-418570247:563,pipeline,pipeline,563,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-418570247,1,['pipeline'],['pipeline']
Deployability,"Hi @PeteHaitch ,; Thanks for your interest in *Alevin*.; Although in current Alevin we have concentrated mainly on learning more about Droplet based 3'-tagged single cell protocols, especially 10x; we are very much interested in extending it towards other protocols like CEL-seq.; However, there are couple of challenges/difference which should be considered before incorporating it into the Alevin pipeline. Currently Alevin relies on the fact that the droplet based protocols use PCR amplification of the library and the UMI deduplication phase of Alevin assumes an exponential model, I am not sure how true is this with CEL-seq? Another issue is that CEL-seq is a Fluidigm based system while the current application for Alevin is for microfluidics based. In general we have observed that the 10x cell isolation step is pretty robust in reporting the Cellular Barcodes(CB) and although we have a probabilisitic model to handle the CB based uncertainty but the ambiguous case like that are very less frequent, (although not true for Drop-Seq). Having said that, we might have to do some analysis to actually figure out the right model for Barcode correction in Fluidigm based system. Also, please do let us know of your experience in using the solution proposed in #247 . Looking forward to hearing back from you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-414162302:399,pipeline,pipeline,399,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/269#issuecomment-414162302,2,['pipeline'],['pipeline']
Deployability,"Hi @RK489,. It seems it cannot find the library it wants. The easiest solution is to install salmon on OS X [using bioconda](https://anaconda.org/bioconda/salmon). Otherwise, you can also try to explicitly make sure that path is being searched via e.g.:. `DYLD_FALLBACK_LIBRARY_PATH=/Users/rishika/Downloads/Salmon-0.8.2_macOX_10.12/lib ~/Downloads/Salmon-0.8.2_macOX_10.12/bin/salmon -h`. Please let me know if either of these solutions works for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/172#issuecomment-343558684:85,install,install,85,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/172#issuecomment-343558684,1,['install'],['install']
Deployability,"Hi @Ray6283,. The `bootstraps.gz` file is not designed to be read as plain text. The file encodes information in binary. If you are interested in extract the information encoded in those files, the easiest thing to do is likely to read them in using the [`fishpond`](https://bioconductor.org/packages/release/bioc/html/fishpond.html) package. Looking at the code there will also show you exactly how those files are packed. The same is true for the bias files. The format for those is documented [here](https://salmon.readthedocs.io/en/latest/file_formats.html#sequence-specific-bias-files) and [here](https://salmon.readthedocs.io/en/latest/file_formats.html#fragment-gc-bias-files), those these are binary encoded files and not designed for human consumption. For the bias files, even if you did read them in, the information is not trivially interpretable (e.g. the parameters of the variable length Markov model, etc.). --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-1792970641:301,release,release,301,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-1792970641,1,['release'],['release']
Deployability,"Hi @Rhinogradentia,. This error occurs when there is a binary mismatch between the library used to compile salmon versus that used to run it. Specifically, this occurs when the boost library is _not_ compiled with a modern ABI (Application Binary Interface) — when boost was not compiled in a way compatible with C++11/14/17/20. Are you using the version installed via bioconda, or the pre-compiled binary from github, or have you compiled this yourself? You can [use the `LD_LIBRARY_PATH`](https://stackoverflow.com/questions/13428910/how-to-set-the-environmental-variable-ld-library-path-in-linux) to set things so that the appropriate version of the library is discovered first. You want the version of boost that is found first (the one appearing earliest in the `LD_LIBRARY_PATH`) to be matched to the one with which salmon was compiled.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-696812977:355,install,installed,355,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-696812977,1,['install'],['installed']
Deployability,"Hi @RoebideBruijn,. It looks as though you downloaded the file that contains the pre-compiled release (https://github.com/COMBINE-lab/salmon/releases/download/v0.12.0/salmon-0.12.0_linux_x86_64.tar.gz), rather than the source code (https://github.com/COMBINE-lab/salmon/archive/v0.12.0.tar.gz). In that case, you need not (and can't) compile the already compiled binary. There is an executable named `salmon` in the `bin` subdirectory that you should be able to run directly (assuming you are in Linux).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449718276:94,release,release,94,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449718276,4,['release'],"['release', 'releases']"
Deployability,"Hi @Ryan-Zhu ,. Thanks a lot for bringing this to our attention.; We have fixed this in the latest commit of the develop branch https://github.com/COMBINE-lab/salmon/commit/e93d6cee19c46d56d603e75097dbe17ab18e6811 and will merge in the next release . Usually the number of skipped Barcodes due to no mapped reads are relatively few that's why this corner case slipped from our testing. If it's possible for you to compile salmon from source you can use the develop branch to generate the new binary otherwise let us know we can provide a temporary linux binary until the next release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/374#issuecomment-501943370:241,release,release,241,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/374#issuecomment-501943370,2,['release'],['release']
Deployability,"Hi @SSaleem94,. This is an issue upstream in the `SUPPA` tool (or the way that it is installed). This is not an issue with `salmon`. I would recommend posting this issue to the `SUPPA` GitHub repository. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/859#issuecomment-1609970132:85,install,installed,85,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/859#issuecomment-1609970132,1,['install'],['installed']
Deployability,"Hi @Tj-Idowu,. Thanks for the details. The fact that the bioconda install is giving problems is disconcerting, as that should be properly linked against all of the correct libraries etc. I do wonder if it might have something to do with all of the package rebuilding and upgrading that has been going on in bioconda. Would you be able to give [this binary](https://github.com/COMBINE-lab/salmon/files/2099291/salmon-latest_linux_x86_64.tar.gz) a try, and let me know if it works? It was built on our continuous integration server, and should be compatible with a wide variety of different platforms.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/239#issuecomment-400679476:66,install,install,66,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/239#issuecomment-400679476,3,"['continuous', 'install', 'integrat']","['continuous', 'install', 'integration']"
Deployability,"Hi @TobiTekath ,. Thanks for bringing this to our attention. We fixed this bug in the latest release. Just a heads up we have deprecated the `csv` dumping in favor of sparse `mtx` format. The format is still human readable, it's just dumping each and every point we dump only the expressed value and their coordinates in the quant matrix. We have update the python parser too which can be found [here](https://github.com/k3yavi/vpolo/blob/master/vpolo/alevin/parser.py#L140). Closing this issue for now but feel free to reopen it if you still face the issue.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/363#issuecomment-498039361:93,release,release,93,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/363#issuecomment-498039361,2,"['release', 'update']","['release', 'update']"
Deployability,"Hi @Toseph,. Thank you for the detailed report. I am actually surprised that it agreed to compile, since the CMake file should check for GCC >= 5.2 (https://github.com/COMBINE-lab/salmon/blob/master/CMakeLists.txt#L102). The reason for that check is that this is the version of GCC we have on our CI servers, and GCC 5 is, I believe, the first C++14 feature-complete version of GCC. Nonetheless, the gcc release pages suggest that 4.9 does support polymorphic lambdas. What concerns me though is that your backtrace has references to e.g. `/usr/include/c++/4.8.2/bits/unique_ptr.h:262:16`. GCC 4.8.2 is _not_ C++14 compatible, and does not support polymorphic lambdas. Do you have any idea why the compiler might be looking into headers included from GCC 4.8.2?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-422878261:404,release,release,404,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-422878261,1,['release'],['release']
Deployability,"Hi @Vida0,. Thanks for pointing this out. The short answer is that the `--eqclasses` option (which is different from the `--dumpEq` option) is designed, as you suggest, to allow using a pre-computed set of equivalence classes for quantification (thus bypassing the need to read in and parse alignments from a BAM file, or to read in and selectively-align reads from a FASTQ file). This, of course, requires the equivalence classes to have already been constructed and dumped in the proper format (see the `--dumpEq` option mentioned above). Finally, I'll mention that with a quick search through the [documentation at ReadTheDocs](https://salmon.readthedocs.io/en/latest/salmon.html), I couldn't find our current description of the `--eqclasses` option (which I'd like to update). Could you point me at where you came across it?. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/877#issuecomment-1743291304:772,update,update,772,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/877#issuecomment-1743291304,1,['update'],['update']
Deployability,"Hi @Zhuxitong, . You can easily change the k-mer length used for indexing by passing the desired value to the `-k` option of the `index` command. So, that part isn't technically a problem. The bigger issue is that Ribo-seq data doesn't follow the same basic model as RNA-seq data. That is, the coverage variation in RNA-seq is more often an issue to be corrected (e.g. evidence of bias during library prep / sequencing), whereas it is integral to the interpretation of Ribo-seq data (i.e. the peaks are primary features of interest). Therefore, it's not clear to me that using any RNA-seq abundance estimation software on Ribo-seq data ""off-the-shelf"" is conceptually the right thing to do, though you are welcome to experiment with it. However, there is some interesting work on combining transcript abundance profiles with Ribo-seq data to infer isoform-level information in the Ribo-seq data. For example, [this recent pre-print](https://www.biorxiv.org/content/10.1101/582031v3) provides a pipeline for this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/454#issuecomment-557558554:994,pipeline,pipeline,994,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/454#issuecomment-557558554,2,['pipeline'],['pipeline']
Deployability,"Hi @aedavids,. Thanks for catching that this is undocumented! This means that the mapping type was determined as mapping to a _decoy_ sequence. When we added this output into the code, the documentation wasn't updated accordingly. We'll update the documentation. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/657#issuecomment-833857753:210,update,updated,210,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/657#issuecomment-833857753,4,['update'],"['update', 'updated']"
Deployability,"Hi @alexg9010 ,. A apologize profusely for dropping the ball on this. Would it be possible to test with the latest release of salmon? I am still not able to reproduce this behavior on any of our test machines.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-395199735:115,release,release,115,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-395199735,1,['release'],['release']
Deployability,"Hi @alexvpickering ,. Thanks for raising the issue. It seems #377 and #379 are connected .; Alevin is in fact suppose to output whitelist.txt file when provided with the flags you provided.; I think what's happening in your case is since `--keepCBFraction 1`, alevin is using all the CB for quantification and it couldn't find (any or very low) CB from the low confidence region needed for the whitelisting. ; Basically in the above screenshot, alevin never finished. It should have failed more gracefully, I'll make sure of that in the next release. In the meantime you can use the exit code 0 or ""Finished Optimizer"" log for successful finish. Also, try playing with the lower values for the `keepCBFracion` may be around (0.4 / 0.5) and `--freqThreshold` for changing the minimum frequency of a CB to consider, currently set to 10. You can also follow https://github.com/COMBINE-lab/salmon/issues/362 for more details.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-502818453:542,release,release,542,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-502818453,1,['release'],['release']
Deployability,"Hi @alexvpickering ,. With the latest release we have moved the pipeline failure with `txp2gene` file before parsing the CB .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-498040517:38,release,release,38,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-498040517,2,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"Hi @amaer,. The warning suggests that the gff parser cannot even find a transcript with the given name (in the example you provided `ENST00000619185.1`). Does such a transcript exist? Can you grep for it. The string must match exactly (version number and all). The gff-based parser to do the transcript to gene mapping is quite picky, as gff & gtf files are often quite ill-formed. My top suggestion would be to do transcript -> gene abundance aggregation using [tximport](https://bioconductor.org/packages/release/bioc/html/tximport.html). The other option is to provide Salmon with a TSV mapping the transcripts to genes, as this eliminates all of the parsing problems (at the cost of pawning them off on the user, who must parse the questionable gtf file). However, tximport is the recommended strategy, since it can perform average gene length normalization across multiple samples (rather than just per-sample), which is useful for downstream DE.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/198#issuecomment-365950366:507,release,release,507,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/198#issuecomment-365950366,1,['release'],['release']
Deployability,"Hi @amitpande74 ,. May be you are already aware of this but just to make it clear, the idea behind decoy indexing is to ""exclude"" those sequences from the transcriptome quantification and that's why you don't see the indexed transposon sequence in the salmon output. The motivation behind such indexing is to remove false mapping reads i.e. exclude RNA-seq reads from the quantification pipelines which maps better to the decoy sequences compared to the provided transcriptome. . I hope that clarifies your doubt and if you wan't to quantify GFP sequences then you have to concatenate them with the transcriptome sequence ""not"" the decoy sequence, although I just wanted to give you heads up that this analysis goes into an unexplored territory as we personally have not explored such use cases. Unless Rob have more thoughts on it.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/737#issuecomment-1024668469:387,pipeline,pipelines,387,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/737#issuecomment-1024668469,2,['pipeline'],['pipelines']
Deployability,"Hi @astrdhr,. Ok, so the difference between the version you get on the command line, versus the version you get when you actually attempt to run your script to process your data, is certainly a point of concern. In general, the behavior you are seeing during runtime seems like it may be an artifact of not having a compatible index. Is it possible for you to do a ""test run"" outside of the Nextflow script? Since you are getting v1.10.2 locally, and this version should work without segmentation fault, that would at least let us narrow the issue down to different versions of salmon being invoked at different stages of the pipeline. At that point, it may be a Nextflow / nf-core issue, but those folks are *great* and will be able to help in a jiffy!. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1766508995:626,pipeline,pipeline,626,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1766508995,1,['pipeline'],['pipeline']
Deployability,"Hi @astrdhr,. Thank you for the bug report. I was wondering if you can run . ```; salmon --version; ```. under the invocation that is failing. I bring this up because your output starts with:. ```; Version Info: ### PLEASE UPGRADE SALMON ###; ```. and this should not happen if you are using the most recent version (there was a segfault related bugfix directly related to what you are seeing in v1.10). It's possible that if you are running salmon using some sort of script or job submission system, that the version of salmon that is available in your `PATH` isn't the same as the most recent one you have installed. P.S. I'll also note that v0.14 and v1.10 don't have compatible indices, which can also cause a segfault. You should make sure that the index was generated with the version of salmon with which you are attempting to quantify. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1758110567:223,UPGRADE,UPGRADE,223,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1758110567,2,"['UPGRADE', 'install']","['UPGRADE', 'installed']"
Deployability,"Hi @bgarchow,. This appears to be because you are trying to use the linux binary on OSX. These aren't binary-compatible operating systems. If you want to use Salmon on OSX, then you should either [install it using bioconda](https://anaconda.org/bioconda/salmon) (this is the easiest and quickest option), or build it from source. Let me know if you're able to do the bioconda install (they have it pre-built for OSX). --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-362880274:197,install,install,197,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-362880274,2,['install'],['install']
Deployability,"Hi @biozzq,. Sure; let me try and explain the likely causes of these observations:. > I had a similar problem, however, I reassemblied the new isoforms using the Hisat2+Stringtie pipeline. The mapping rate from Hisat is 96.49% but it is 65.39% in Salmon. . The mapping rate of Hisat2 is the total number of reads assigned by Hisat2 both to the annotated transcriptome (what will be alignable to a transcript by salmon) as well as to the genome. It is quite common that the mapping rate to the genome is higher than that to the transcriptome. This is much more a result of what you are aligning _to_ than the aligner. If you were to take the transcriptome, and align to it using Hisat2 with `--no-spliced-alignment` and `--end-to-end` (since there won't be splice junctions when you align to the transcriptome), I'd expect you to get a similar mapping rate as you see in salmon. > I also noticed a high number of mappings discarded because of alignment score. I also wonder why the number of mappings discarded can be larger than num of processed (57113760, the reads number in 1_1.fq.gz). . Good question. The number you are looking at is the number of discarded _mappings_, not the number of discarded _fragments_. The difference is that every fragment can have many potential mappings. The number you are looking at is the total number of attempted _alignments_ that failed to achieve the threshold score. Luckily, salmon reports both numbers. The number of fragments for which _all_ alignments failed to reach the score threshold is `4,196,417`; given in `aux_info.json` by ` ""num_fragments_filtered_vm"": 4196417`. One point to note is that these are all fragments for which mapping is attempted (they had at least one k-mer match the reference), but no alignment was valid up to the threshold. You could try running the quantification again with `--softclip` to allow softclipping of the reads and see if any considerable fraction of these `4196417` failed to align because they overhang the annot",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/533#issuecomment-697125235:179,pipeline,pipeline,179,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/533#issuecomment-697125235,1,['pipeline'],['pipeline']
Deployability,"Hi @bounlu ,. This warning is harmless, and comes from the fact that the parsing code improved but the rapmap code being called to build the index is forgetting to call a particular method. So, the destructor detects this and calls it instead. This isn't a problem, and won't affect the results. However, I'll push a patch release that eliminates this issue (either today or tomorrow sometime). Until then, you can go ahead using this index, it should work fine.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/176#issuecomment-347524898:317,patch,patch,317,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/176#issuecomment-347524898,2,"['patch', 'release']","['patch', 'release']"
Deployability,"Hi @brianjohnhaas --- I know it's been a while (but I didn't gain access to an older OSX machine in that time). However, you should now be able to get the latest Salmon release on any OSX >= 10.8 via [its Bioconda release](https://bioconda.github.io/recipes/salmon/README.html). Let me know if this works for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/117#issuecomment-287753410:169,release,release,169,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/117#issuecomment-287753410,2,['release'],['release']
Deployability,"Hi @bsipos,. This is caused primarily by salmon's desire to apply an error model (by default) to the CIGAR strings. For secondary alignments, as you note, minmap2 doesn't write the read string, and so when salmon is trying to score the alignments under the error model, it can't find the relevant characters in the read. In general, it's not clear to me if one would actually want to apply the error model (designed primarily for short reads) when quantifying long reads (this is something we are currently testing in the lab). For the time being, I'd probably recommend disabling the error model when quantifying alignments from long reads (`--noErrorModel`). In that case, the errors should hopefully go away. Please let me know, and we'll be sure to keep you updated on best practices for long reads as we figure things out.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-420295665:762,update,updated,762,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-420295665,2,['update'],['updated']
Deployability,"Hi @charlesfoster,. Thanks for opening the issue. The second run looks like it ends before there is any information about mapped reads. Have mappings started to be reported at that point? I wonder if there is some issue related to the loading of the index. I have a few suggestions that may be worthwhile to try:. 1) Do you observe the same problem if you index only the transcriptome (i.e. if you don't also include the genome as a decoy)?. 2) If you are using nfcore/rnaseq you can also consider using the STAR => salmon path. Of course, I'm interested in addressing whatever the underlying issue here is anyway, but it's worth noting that this may be a viable alternative to allow you to process all of these samples using the nfcore pipeline in the meantime. This will align the reads to the genome using STAR (which gives the benefit of having a full decoy), project them to the transcriptome, and then quantify them. Also, if you can share a set of problematic reads (or even a subset of them that will reproduce the extreme slowness problem) privately, that would be very helpful in debugging. In addition to trying to debug what's going on here, I'd probably also try running them through [piscem](https://github.com/COMBINE-lab/piscem). While this isn't yet an actual substitute for salmon, it will help isolate if the problem is directly related to the index or something else. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/830#issuecomment-1441139338:737,pipeline,pipeline,737,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/830#issuecomment-1441139338,1,['pipeline'],['pipeline']
Deployability,"Hi @cihanerkut,. First, thanks for reporting this, and going through the trouble to give the `strace` information. Second, salmon won't auto-update anyway. That would be quite slick, but there's not a good and reliable way to do that with natively-compiled programs that I know of. However, the most surprising thing is that you are finding the call to the version check ip to be hanging for any significant amount of time. The timeout should be pretty quick. How long does it hang when you do `salmon index --help`? I'll look into it on our end as well.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-592203836:141,update,update,141,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/486#issuecomment-592203836,1,['update'],['update']
Deployability,"Hi @citron96,. The patch is quite simple and i have verified it and it works for salmon-1.1.0 version that i compiled. Here is the patch content:. --- salmon-1.1.0/CMakeLists.txt.orig 2020-03-24 08:50:22.681000000 -0700; +++ salmon-1.1.0/CMakeLists.txt 2020-03-24 08:51:41.786000000 -0700; @@ -596,7 +596,7 @@; message(""Build system will fetch and build Intel Threading Building Blocks""); message(""==================================================================""); # These are useful for the custom install step we'll do later; -set(TBB_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/tbb-2019_U8); +set(TBB_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/oneTBB-2019_U8); set(TBB_INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install). if(""${TBB_COMPILER}"" STREQUAL ""gcc""); @@ -610,9 +610,9 @@; externalproject_add(libtbb; DOWNLOAD_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external; DOWNLOAD_COMMAND curl -k -L https://github.com/intel/tbb/archive/2019_U8.tar.gz -o tbb-2019_U8.tgz &&; - ${SHASUM} 7b1fd8caea14be72ae4175896510bf99c809cd7031306a1917565e6de7382fba tbb-2019_U8.tgz &&; + ${SHASUM} 6b540118cbc79f9cbc06a35033c18156c21b84ab7b6cf56d773b168ad2b68566 tbb-2019_U8.tgz &&; tar -xzvf tbb-2019_U8.tgz; - SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/tbb-2019_U8; + SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/oneTBB-2019_U8; INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external/install; PATCH_COMMAND ""${TBB_PATCH_STEP}""; CONFIGURE_COMMAND """". Rob, ; I understand that you don't want to push changes to older releases but perhaps one; can issue a README/NOTE for all prior releases that are affected by this. The explanation of; what changed will allow people to create their own patches for their specific releases. Regards,; Nadya",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-603916394:19,patch,patch,19,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-603916394,18,"['install', 'patch', 'release']","['install', 'patch', 'patches', 'releases']"
Deployability,"Hi @citron96,. This is what is covered in https://github.com/COMBINE-lab/salmon/issues/496. This is because an upstream package changed the SHA of their *tagged* releases (which is really not ideal). Are you pulling from the master branch? If you pull from develop, everything should build. I can pull the changes that fix this into master. Unfortunately, to avoid changing the signatures of _our_ tagged releases, I can't push this change back to older releases. I think @nadyawilliams may also have a patch for the CMakeLists.txt file, which, perhaps, can be shared?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-603902738:162,release,releases,162,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-603902738,4,"['patch', 'release']","['patch', 'releases']"
Deployability,"Hi @cljacobs,. Ok, so I figured it out and just pushed a fix to develop. The problem is the following. The `--genes` flag was only recently added to quant merge (actually, via a pull request). The problem is that while, in transcript-level `quant.sf` files, the `Length` field is always an integer, in gene-level `quant.genes.sf` files, the `Length` field can actually be a floating point number (because the gene length is the abundance weighted combination of transcript lengths). So the problem is that the code was parsing length as a `uint32_t`, which is right for transcript-level files but wrong for gene-level files (where it should be a `double`). This caused the parsing to fail when aggregating gene-level files in your example data. As I said, I pushed a fix to develop, and this will make it into the next release. [Here's](https://drive.google.com/file/d/1olbeygYYHvdJGDKNlmZr6F8HMI1NBgRC/view?usp=sharing) a copy of our CI-server's pre-compiled executable (for linux), in case you need this functionality ASAP and can't build from source.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/356#issuecomment-481945550:819,release,release,819,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/356#issuecomment-481945550,1,['release'],['release']
Deployability,"Hi @cljacobs,. There was at least one unnecessarily large allocation within our pufferfish code, and now Ilia has also massively optimized the intermediate disk space usage behavior of TwoPaCo. An updated binary that incorporates these changes can be obtained [here](https://drive.google.com/open?id=1QHYCT3Vs9bRD7UmJY6JJKjlzmmUE4wRl). If you have a chance, it would be fantastic if you could test this out and see how the resource requirements change for you.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-587082126:197,update,updated,197,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-587082126,1,['update'],['updated']
Deployability,"Hi @come-raczy,. Thanks for reporting this, it is addressed now in commit efe26b1ca2ced305256357e3b2e95f0e51e3376d. While the function that returns this value is called in two places `normalizeAlphas()` and `writeAbundances()`, the latter of these is actually deprecated and so is not used (we should clean up that code). So, while this value should clearly be initialized, the only potential effect here is through `normalizeAlphas()`, is called before the optimization, and which modifies the alphas that will be used for setting the _initial conditions_ of the VBEM. Therefore, the effect is likely to be limited since, even if the value of `totalCount_` was incorrectly initialized, it should only affect the initialization condition of the optimization. Thank you again for the detailed bug report, and the patch! This is now fixed in develop and will be in the next release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/355#issuecomment-480004146:812,patch,patch,812,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/355#issuecomment-480004146,4,"['patch', 'release']","['patch', 'release']"
Deployability,"Hi @crazyhottommy ,. Reading a bit in https://github.com/COMBINE-lab/salmon/issues/245 and https://github.com/COMBINE-lab/salmon/issues/284 would definitely help understand more about the pipeline. _summary:_ it's possible the 50% mapping read is due to alevin throwing away CB. In this case, we normally suggest to try running alevin in the following order:; 1.) `--expectCells X`: alevin will look for local knee threshold near to top X barcodes. Alevin can still here based on the CB frequency distribution.; 2.) `--forceCells X`: run alevin with `--noQuant --dumpFeature` mode and extract the frequency histogram of the CBs present in the histogram. Try to manually found knee in the descending sorted CB frequency histogram and figure out X. alevin will use top X barcodes as specified by the user.; 3.) If there is other tools like `cellranger` already been run on the data, then alevin can directly consume their predicted CB sequence using `--whitelist` option. This is different file, not the 727k file from 10x, and is different for each experiment .",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-458793327:188,pipeline,pipeline,188,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-458793327,1,['pipeline'],['pipeline']
Deployability,"Hi @curtisd0886,. So, issues relevant to processing this data should be resolved in the new release (v1.5.1). However, for technical reasons in the way different modes are handled internally, we had to simplify the mixing and matching of certain different options. Specifically, one can no longer use the `--citeseq` flag in conjunction with the custom geometry flags. So, if you have non-standard `--citeseq` geometry, the recommendation is to just use the new barcode specification format (e.g. `--umi-geometry`, `--bc-geometry` and `--read-geometry`), along with a couple of other flags. Specifically, you should explicitly provide `--keepCBFraction 1.0` and a tgMap file (even if it is just a trivial one mapping each feature to itself). @k3yavi can elaborate further if I've overlooked anything. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/670#issuecomment-860704025:92,release,release,92,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/670#issuecomment-860704025,2,['release'],['release']
Deployability,"Hi @cwarden45 ,. So `--whitelist` flag is not intended to consume the 737k list of CB you are providing, that's why the error. Thanks for the issue in the doc, I updated it. Idea behind the flag is to externally provide a list of high confidence barcodes potentially identified by different tools like Cellranger, and quantify *only* those barcodes. One use case would be to take the output file `barcodes.tsv` of the cellranger and provide it to flag and quantify only those barcodes. Briefly, alevin doesn't use the 737k list of barcodes at all, it identifies barcodes empirically. If you'd like to quantify using the 737k list of barcodes, checkout the next generation of alevin tool, called [alevin-fry](https://github.com/COMBINE-lab/alevin-fry).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-877325227:162,update,updated,162,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-877325227,1,['update'],['updated']
Deployability,Hi @dougbarrows --- just wanted to inform you that v0.12.0 has been released and is now also available via bioconda for both linux and osx. The osx segfault issue has been resolved.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/303#issuecomment-444971786:68,release,released,68,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/303#issuecomment-444971786,1,['release'],['released']
Deployability,"Hi @dritoshi ,. As per your request I've added the support for Quartz-seq2 data in the alevin framework with https://github.com/COMBINE-lab/salmon/commit/f6905b1d1dc6cf6bc4597927ad3be637ba615c9a and should be available with next salmon release. Currently the develop branch has to be compile from source to use the following command line argument.; ![image](https://user-images.githubusercontent.com/8772521/63282768-8df73600-c27d-11e9-832d-f4a1232f17f6.png). Currently I just have on flag i.e. quartzseq2 which assumes 15 length CB and 8 length UMI. Unfortunately adding multiple versioned is gonna be little complicated as I might have to discuss with the alevin team and that might take some time. As you can check through the new code through the commit (linked above) adding just the Rule of new protocol is not enough and we might have to add some helper code with each new protocol which increases the redundancy in the code. Currently we are in the process of figuring out a better way to handle new protocols.; Having said that it should not stop users from using alevin with previous version of quartzseq2, you can use the following command line triplet as `--end 5 --barcodeLength 14 --umiLength 8` along with you other alevin flag and it's gonna behave just like `QuartzSeq2v31` you specified above. If possible, It'd be great if you can share some of the results you get while comparing Quartz-seq2 pipeline with alevin. Hope this helps !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/416#issuecomment-522658541:236,release,release,236,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/416#issuecomment-522658541,2,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"Hi @ebecht ,. Thanks for raising the issue. In the latest release we have significantly modified alevin to perform online feature creation and whitelisting. We hope that this might fix the memory related issue which you were observing on the clusters. Do let us know how it worked out for you. PS: Nice work on your recent [preprint](https://www.biorxiv.org/content/10.1101/648733v1), it raises very important questions. On the similar note, we also released a preprint today, can be found [here](https://www.biorxiv.org/content/10.1101/657874v1). Do let us know your thoughts !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-498322884:58,release,release,58,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-498322884,2,['release'],"['release', 'released']"
Deployability,"Hi @ebecht ,; Can you please try running Alevin again with the latest release? We just released [v0.12.0](https://github.com/COMBINE-lab/salmon/releases/tag/v0.12.0).; It should be available on bioconda too.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-444755421:70,release,release,70,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-444755421,3,['release'],"['release', 'released', 'releases']"
Deployability,Hi @egreen2 --- just wanted to inform you that v0.12.0 has been released and is now also available via bioconda for both linux and osx. The osx segfault issue has been resolved.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-444970458:64,release,released,64,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-444970458,1,['release'],['released']
Deployability,"Hi @emilyburke,. Absolutely; sorry for the oversight and the confusion. We'll update the documentation to mention this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/118#issuecomment-278131378:78,update,update,78,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/118#issuecomment-278131378,1,['update'],['update']
Deployability,"Hi @esraagithub,. Thanks for the bug report. Can you tell me how the specific version of salmon you are using was installed (e.g. via source, downloaded from the ""releases page"", or installed via bioconda)? Would it be possible to share the contigs that cause this error?. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/795#issuecomment-1222353941:114,install,installed,114,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/795#issuecomment-1222353941,3,"['install', 'release']","['installed', 'releases']"
Deployability,"Hi @euduca,. This is a good idea. Currently, there is no easy way to do this apart from hacking the CMake file. If salmon doesnt find jellyfish in a standard location, it just ferches its own copy. Fortunately, in the newest release (scheduled to drop this coming week), we've dropped the dependency on libjellyfish. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/225#issuecomment-392336913:225,release,release,225,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/225#issuecomment-392336913,1,['release'],['release']
Deployability,"Hi @evofish,. Unless you have a particular reason to build from source, it is much easier to install salmon via bioconda, or to simply download our pre-compiled executable from the releases page. Nonetheless, your error stems from not having the `curl` program installed, which is used by the build system to automatically fetch all dependencies.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/331#issuecomment-447689917:93,install,install,93,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/331#issuecomment-447689917,6,"['install', 'release']","['install', 'installed', 'releases']"
Deployability,"Hi @francicco ,. I've dug further, and in addition to these problems with the input file, there was also a specific bug in salmon's processing of the alignments for the error model. Specifically, it was triggered when an alignment ended with a soft-clip of the reference. I have now fixed this issue in the develop branch, and, after some more testing, will push it to a new release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394859031:375,release,release,375,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394859031,1,['release'],['release']
Deployability,"Hi @francicco,. It looks like the problem is that the compiler being used is newer than the linker being used to link bzip2 here (see e.g. [this](https://stackoverflow.com/questions/46058050/unable-to-compile-unrecognized-relocation)). You should try and make sure the appropriate (newer) linker is present in your path before the older one. Another option, of course, would be to simply install salmon through Bioconda, which will take care of such issues for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394164828:388,install,install,388,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394164828,2,['install'],['install']
Deployability,"Hi @gaberoo,. I rebased this in develop since this is where we make changes, so that this will be in the next release. There was one change I had to make. There was a place where a string variable was being checked to determine the existence of a library (e.g. `if (${SUFFARRAY_LIB})` I believe). It seems CMake interprets even the empty string as TRUE here, so I had to change this to the corresponding `FOUND` variable. Otherwise, the changes all seem to have worked beautifully. Thanks again.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-473300118:110,release,release,110,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/348#issuecomment-473300118,1,['release'],['release']
Deployability,"Hi @gamabunta313,. When you say `mapping-mode`, do you mean that you are passing a SAM file _into_ salmon rather than passing the FASTQ file and letting it perform the mapping itself? Because salmon makes use of a statistical inference procedure to determine the ultimate allocations of reads to transcripts, you cannot just count up the reads ""mapped"" to a transcript to obtain the count you see in the `quant.sf` file. Rather, when you see a read mapped to a transcript in the SAM/BAM file, you should interpret this as the read _could_ be assigned (most likely proportionally) to the transcript. The `--writeMappings` option is primarily intended for the mode where `salmon` performs the mapping itself, rather than the mode where aligned reads are provided as input. What does your alignment pipeline look like upstream of salmon?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/799#issuecomment-1245687786:796,pipeline,pipeline,796,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/799#issuecomment-1245687786,1,['pipeline'],['pipeline']
Deployability,"Hi @gresteban,. Thanks for reporting this. One issue is that the library types are kept encoded in a dense table. Some codes correspond to ""invalid"" library types (i.e. types we'd never see in practice like single end, with a paired-end strandedness type like forward-reverse, etc.). Even those these never garner counts, the `lib_format_counts.json` file was generated by enumerating all possible library type codes, which is why you see more than 12 different library formats even though there are only 12 valid formats. The other issue was that, though the encoding was right internally, I was writing out single end, stranded, forward reads as 'F' and single end, stranded, reverse reads as 'R' when these should be 'SF' and 'SR'. This issue should be addressed by commit a944f7d, and the fix will make it into the next release of Salmon. Thanks again!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/82#issuecomment-243652543:824,release,release,824,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/82#issuecomment-243652543,1,['release'],['release']
Deployability,"Hi @gresteban,. Yes, here's what's happening. Salmon's aggregation strategy is to collect the transcript-level abundances and then aggregate them to the gene level (this means summing the counts / TPMs, and doing an abundance weighted combination of the lengths / effective lengths). If there is no gene annotated for a transcript, than Salmon's behavior is to treat this transcript as it's own (single isoform) gene, and the gene name should be the name of this transcript. This is to retain the totality of the originally computed expression (i.e. the gene level results will have the same total read count and TPM as the transcript level results). I realize that this default behavior may not be a one-size-fits-all solution. If you have a suggestion for a different way to handle this, I'd be happy to hear it. I'll double check the code, but I believe the reason you're only seeing the warning show up once is that Salmon reports the warning the first time it sees such an occurrence, but not thereafter. That's sort of confusing default behavior, so I'll fix that up anyway. Also, I should mention that, generally, I now recommend that people use [tximport](https://bioconductor.org/packages/release/bioc/html/tximport.html) for transcript to gene level aggregation. Within a single sample, it's default strategy is equivalent to what Salmon does. However, it has some nice extra features, like the ability to do transcript -> gene aggregation across multiple samples while accounting for the variation in the effective gene length (abundance weighted average of isoform lengths) across samples. Let me know if you have other questions about this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/98#issuecomment-252635252:1198,release,release,1198,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/98#issuecomment-252635252,1,['release'],['release']
Deployability,"Hi @gringer,. Yes, we can add a section for this in the docs. It will replace the old way for specifying geometry soon, as its just easier and more flexible. We talk about it in the 1.4.0 release notes. I copy the relevant info below (@k3yavi pulled for the 1-based indexing and won out ... this time):. generic barcode / umi / read geometry syntax : Alevin learned to support a generic syntax to specify the read sequence that should be used for barcodes, UMIs and the read sequence. The syntax allows one to specify how the pattern corresponding to the barcode, UMI, and read sequence should be pieced together, and the syntax is meant to be intuitive and general. For example, one can specify the 10Xv2 geometry in the following manner using the generic syntax:. --read-geometry 2[1-end] --bc-geometry 1[1-16] --umi-geometry 1[17-26]. This specifies that the ""sequence"" read (the biological sequence to be aligned) comes from read 2, and it spans from the first index 1 (this syntax used 1-based indexing) until the end of the read. Likewise, the barcode derives from read 1 and occupies positions 1-16, and the UMI comes from read 1 and occupies positions 17-26. The syntax can specify multiple ranges, and they will simply be concatenated together to produce the string. For example, one could specify --bc-geometry 1[1-8,16-23] to designate that the barcode should be taken from the substring in positions 1-8 of read 1 followed by the substring in positions 16-23 of read 1. It is even possible to have the string pieced together across both reads, but that functionality is only available if you are running with --rad or --sketch and preparing a RAD file for alevin-fry. If you are running classic alevin, the barcode must reside on a single read. The robust parsing of the flexible geometry syntax is made possible by the cpp-peglib project.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/445#issuecomment-777884823:188,release,release,188,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/445#issuecomment-777884823,2,['release'],['release']
Deployability,"Hi @guidohooiveld, . Regarding your questions:. (1) The motivation behind asking users to use Bioconda to install the binary is to limit the number of variables we may encounter when someone is reporting a bug --- i.e. if there are fewer distribution channels there is less maintenance overhead. Nonetheless, as you can see, I've had to make the binary available anyway, because it was the only way some people could easily get the program. Therefore, I think I'll start attaching binaries to releases again. (2) Yes, though this functionality is not part of Salmon itself. I *highly* recommend the [MultiQC](http://multiqc.info/) tool. MultiQC has a salmon module, which will parse all of the salmon log files in an experiment directory and produce a report. This report will contain the mapping percentages for all of the samples extracted from the salmon logs (and will color them nicely). It will also produce other QC information from the salmon runs. We are currently working on an improved multi-QC module, which will also provide summaries for things like GC / seq bias by analyzing the models that salmon learns, but this module isn't yet complete. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/252#issuecomment-405442271:106,install,install,106,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/252#issuecomment-405442271,4,"['install', 'release']","['install', 'releases']"
Deployability,"Hi @guidohooiveld,. Yes, the original cutoff was set to accomodate TITIN, which, at the time, was the longest human transcript. Note, this warning doesn't prevent the transcript from being indexed, it just notifies the user its exceptionally long. I think updating the warning threshold makes sense so that gencode indexes cleanly in this regard. We'll update this. Thanks for the report!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/591#issuecomment-733736492:353,update,update,353,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/591#issuecomment-733736492,2,['update'],['update']
Deployability,"Hi @habilzare ,; re: importing binary format: [this](https://combine-lab.github.io/alevin-tutorial/2018/output-format/) tutorial might help more of how to read the binary output. Specifically, if you are familiar with python then [this](https://github.com/k3yavi/vpolo/blob/master/vpolo/alevin/parser.py#L8) function can be used for importing the binary. However, I reckon that alevin hasn't successfully completed. It looks like one of the whitelisted CB ended up having no read at all after deduplicating. We usually assume it should not happen since a whitelisted CB should have at least some count after deduplicating UMIs, which in your case can happen since the mapping rate looks like is surprisingly low `0.469385%` (is this expected ?). . `Skipped Barcodes are from High Confidence Region` is actually an error, again we need more informative and elegant exit from the pipeline once Alevin fails.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406648841:878,pipeline,pipeline,878,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406648841,1,['pipeline'],['pipeline']
Deployability,"Hi @halexand,. Please do let me know if this is fixed for you in the latest release. I believe it's the same as the issue reported [here](https://github.com/COMBINE-lab/salmon/issues/105), which has indeed been fixed since v0.8.0. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/134#issuecomment-296513984:76,release,release,76,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/134#issuecomment-296513984,1,['release'],['release']
Deployability,"Hi @ialbert,. Small update. I've identified the issue. Internally, the position is being computed properly (hence the appropriate alignment score `AS` tag) for the read. However, there is a prefix offset we compute when the initial part of the read before the first MEM may contain indels under the optimal alignment. This should be added to the position, and that isn't currently happening. We'll fix this upstream. It would be trivial, except that I have to think about reverse complements ... sigh.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/475#issuecomment-574392998:20,update,update,20,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/475#issuecomment-574392998,1,['update'],['update']
Deployability,"Hi @jamesrhowe ,; We are still working on the release, but there seems to be a bioconda wide PR outage and not sure how much time it's gonna take for them to resolve it.; In the meantime you can use [this](https://drive.google.com/file/d/143RwsFpVYghr_DFv_4vuvbGmSlt3zlcW/view?usp=sharing) binary which should resolve your problem. We'd let you know once salmon is ready to be installed from bioconda.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/324#issuecomment-443554193:46,release,release,46,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/324#issuecomment-443554193,2,"['install', 'release']","['installed', 'release']"
Deployability,"Hi @jamesrhowe ,; We just released v0.12.0 and is updated on bioconda. It should solve your problem now.; Feel free to reopen this issue if you still face any problem.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/324#issuecomment-444756149:26,release,released,26,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/324#issuecomment-444756149,2,"['release', 'update']","['released', 'updated']"
Deployability,"Hi @jan-g1,. The length of a feature is used during inference to determine the likelihood that multimapping reads should be allocated to different targets. You're describing what is essentially a simplified model where P(f | t) (i.e., the probability of a fragment given a transcript) is independent of length(t). There's currently no option to disable length normalization completely in Salmon, and you can't ""de-normalize"" by simply multiplying by a factor because those weights are considered during each and every round of the EM (or VBEM) algorithm. However, supporting this should actually be very straight-forward. We simply assign a uniform and identical length to all transcripts for the purpose of inference. I can add such a flag in the next release, though it will initially have to be incompatible with bias correction (since it's not clear right now how the biases for which we account interact with this type of sequencing). Also, it would be possible to run salmon with `--dumpEq`, and then to have a little script / tool that simply re-runs the EM, but without different length factors, using the equivalence class file. I might be able to hack something like that together on short notice if you'd be interested in testing it out. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-264659889:753,release,release,753,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-264659889,2,['release'],['release']
Deployability,"Hi @jashapiro,. I've just pushed a commit that should address this, adding both a ""full"" `cmd_info.json` and a reasonable `meta_info.json`. If this is something you need on short notice we can try an push out a 1.5.2 soon, otherwise, this will be in the next release. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-883029429:259,release,release,259,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-883029429,1,['release'],['release']
Deployability,"Hi @jasonvrogers,. First of all thank you so much for sharing this thorough analysis with us, it was very clear and helpful for understanding the details of the problem you are referring to. Secondly, I apologize for the long time it took me to get back at you. I would like you to know that we have been and are still working on possible solutions for addressing this problem, and here I would like to share some updates with you. . About the success cases, it was nice to know that the current model of Salmon with length correction works pretty well in recovering the right estimates for those ""easier"" cases where one transcript is fully contained in another one. Turning off the length correction, tells the Salmon model not to consider the effective length of each transcript for computing the conditional probabilities of originating a fragment from a transcript. So, for the RNA-seq data there is no reason to turn off this term of the model, and we highly recommend not to use that flag for the bulk RNA-seq abundance estimation with Salmon. Looking more carefully at the 2nd case you have posted as the failure case, it is interesting to see that there is a very nice visual evidence on the super transcript that the long transcript might not be expressed at all. I am referring to the zero coverage regions on the Super Transcript between the regions corresponding to the smaller transcripts, e. g., between POF1 and EMC1. So, we tried a solution that inspects the coverage profile of all transcripts and calculates the probability of observing a zero coverage region on each transcript. If this probability is too low, this would be counted as an evidence for a transcript not being expressed at all. This approach seems to be working fine on this example that you have shared here. however, one problem was that there were considerable number of reads in the sample that were uniquely mapping only to the Super Transcript and turning of the expression of that transcript would result in t",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-666512703:414,update,updates,414,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/514#issuecomment-666512703,2,['update'],['updates']
Deployability,"Hi @jblachly,. Thanks again for the kind words! I agree that this option is useful for producing some quick gene-level results to show to collaborators. I've just pushed a fix that should allow parsing of (well-formated) files that end in any of {.gtf, .GTF, .gff, .GFF, .gff3, .GFF3}. Furthermore, going over the relevant bug revealed a latent potential bug that could pop up when there was a transcript in the salmon index that was absent from the GTF/GFF file. So this commit fixes this as well. All of this is present on the develop branch, but these changes will make it into the upcoming release (which should hit soon, if you care to wait for it).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/114#issuecomment-273391326:594,release,release,594,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/114#issuecomment-273391326,1,['release'],['release']
Deployability,"Hi @jblachly,. Thanks for pointing this out. The underlying parser we use should also support gff (&gff3), so I should probably just expand the extension set. I'll ping back here once the relevant changes have been made on the develop branch. I'll also note that, generally, we now recommend [tximport](https://bioconductor.org/packages/release/bioc/html/tximport.html) as the way to aggregate transcript-level abundance estimates to the gene level, since it provides some nice multi-sample functionality and also allows the user to choose from a few different ways in which the aggregation can be performed. If you're doing any of your downstream analysis in R, it's worth a look. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/114#issuecomment-272709627:337,release,release,337,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/114#issuecomment-272709627,1,['release'],['release']
Deployability,"Hi @jcasc,. Thanks for raising the issue. The reason for this that when selectively aligning the reads, salmon writes in the SAM file the length of each transcript as retained in the index. This is the length the transcript has after the basic pre-processing, which includes clipping polyA tails. Thus, the length will not always precisely match the input fasta file. Interestingly, we _do_ also maintain the original length of each transcript prior to any processing in the index, and I agree that this makes more sense to put in the header, so I will tag this as a fix for a future release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/465#issuecomment-567973865:584,release,release,584,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/465#issuecomment-567973865,1,['release'],['release']
Deployability,"Hi @jdrnevich ,. Thanks for the PR.; I think I've already merged your previous PR https://github.com/COMBINE-lab/salmon/pull/391 about the same issue. It was merged with the develop branch and should be updated with the new salmon release, which is suppose to happen soon. My apologies for the confusion.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/421#issuecomment-524436646:203,update,updated,203,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/421#issuecomment-524436646,2,"['release', 'update']","['release', 'updated']"
Deployability,"Hi @jeremymsimon and @Gaura,. After redoing the analysis with the correct barcode geometry (still with --sketch-mode), using knee filtering with alevin-fry leads to the following:. ```; robp@ocean1:/data007/users/rob/SRR10174292$ ~/alevin-fry/target/release/alevin-fry generate-permit-list -k -i SRR10174292_map -o SRR10174292_quant -d both; 2021-12-03 09:49:37 INFO paired : false, ref_count : 228,754, num_chunks : 11,194; 2021-12-03 09:49:37 INFO read 2 file-level tags; 2021-12-03 09:49:37 INFO read 2 read-level tags; 2021-12-03 09:49:37 INFO read 1 alignemnt-level tags; 2021-12-03 09:49:37 INFO File-level tag values FileTags { bclen: 24, umilen: 10 }; 2021-12-03 09:49:50 INFO observed 55,952,280 reads in 11,194 chunks --- max ambiguity read occurs in 2,330 refs; 2021-12-03 09:49:50 INFO max_idx = 268803; 2021-12-03 09:49:50 INFO max_idx = 86532; 2021-12-03 09:49:50 INFO max_idx = 30016; 2021-12-03 09:49:50 INFO max_idx = 12061; 2021-12-03 09:49:50 INFO max_idx = 8292; 2021-12-03 09:49:50 INFO max_idx = 7396; 2021-12-03 09:49:50 INFO max_idx = 7112; 2021-12-03 09:49:50 INFO max_idx = 7012; 2021-12-03 09:49:50 INFO max_idx = 6969; 2021-12-03 09:49:50 INFO max_idx = 6952; 2021-12-03 09:49:50 INFO knee-finding iter = 10; 2021-12-03 09:49:50 INFO max_idx = 6944; 2021-12-03 09:49:50 INFO max_idx = 6938; 2021-12-03 09:49:50 INFO max_idx = 6937; 2021-12-03 09:49:50 INFO knee distance method resulted in the selection of 6938 permitted barcodes.; 2021-12-03 09:49:52 INFO total number of distinct corrected barcodes : 391,939; ````. so 6938 detected cells seems about right. Of course, since I'm not using the external unfiltered permit list here, they are likely not the same barcodes as in the deposited data due to the issue that @Gaura mentioned.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-985583153:250,release,release,250,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-985583153,1,['release'],['release']
Deployability,"Hi @jeremymsimon, to answer your last question:. > As for the barcode detection - my usual approach with alevin at least is to let it try to estimate a ""real"" cell number, but if it's way off from our experimental expectations, to inject --expectCells ncells and let that serve as a starting point (with subsequent filtering). That has worked reasonably well in the past for me , and seems to be an option for alevin-fry as well. I don't know whether that is poor practice in the long run...it came from a place of seeing far too many weak knee plots early in the droplet scRNA-seq days. Are you generally more trusting of these estimates these days?. So one of the nice aspects of the alevin to alevin-fry pipeline is that it's relatively easy to try different filtering approaches since the initial mapping process only has to happen once. In general, the knee detection method is pretty good, and often gives a reasonable cell count. However, this isn't always the case. What we find in the alevin-fry pre-print is that it tends to be slightly more conservative than if you did e.g. unfiltered quantification followed by filtering with something like `DropletUtils` (but usually only slightly). The knee method is basically the iterative knee finding procedure from UMI-tools, with some slight tweaks to the parameters. However, unlike alevin, alevin-fry also supports unfiltered quantification. In this case, you provide an `unfiltered-permitlist`, which is a set of acceptable barcodes (not necessarily all expected to be present), and alevin-fry will correct against this. This will tend to produce a _lot_ of quantified cells, since we quantify any barcode matching 10 or more reads (by default, this value is modifiable on the command line). So, such unfiltered matrices definitely need to be filtered after quantification. However, for protocols with an external permit list, or those where you can reasonably derive a list of potential expected barcodes, it's less stringent and therefore po",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988967759:707,pipeline,pipeline,707,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988967759,1,['pipeline'],['pipeline']
Deployability,"Hi @jeremymsimon,. A few quick thoughts on this.; ; > -Is quantification via alevin-fry (rather than alevin itself) mandatory here? I ask since your run seems successful whereas my full alevin run had a very poor BC detection and mapping rate.; ; I don't think we've been able to successfully obtain the same concordance with alevin yet (as opposed to alevin-fry). There is more sophisticated _internal_ barcode logic going on there, and we may need to pull @k3yavi in to see what is happening outside of the RAD -> fry pipeline.; ; > -I see you specified -l A - can you comment on what the detected/correct library type was here?; ; Unlike `alevin`, when you run with in `--rad` or `--sketch` mode, the library type isn't really relevant. All mappings are passed through to the rad file. Subsequently, in `alevin-fry` there is a `-d` (direction) flag that is used to filter mappings that don't concord with the expected orientation. I'm not sure what @Gaura used in the run above — the default is to keep reads from either orientation.; ; > -I assume all of this will also work in conjunction with --expectCells or --keepCBFraction if those parameters were needed? Your ~7k cells detected is very close to the published number post-filtering, but no similar filtering has been done here yet. My guess is that the proportion of cells that pass these filters will be higher for alevin, but we may still be under-estimating the number of real cells by a little bit here.; ; According to the commands listed, @Gaura used `alevin-fry`'s built-in knee-like filtering. This tries to use a knee on the cumulative read count histogram to determine a good cutoff for ""reliable"" cells versus poor quality cells. Alternatively, one can provide an external permit list with `-u` (unfiltered permit list) to quantify all cells that match any known barcode. This will generally result in *many* more quantified cells, which you will then want to filter post-quantification.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988011633:520,pipeline,pipeline,520,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-988011633,1,['pipeline'],['pipeline']
Deployability,"Hi @jeremymsimon,. Both `--splitseqV1` and `--splitseqV2` assume that cDNA is on R1 and UMI + barcodes are on R2. The geometries used are:; - For `--splitseqV1`:; `NNNNNNNNNNIIIIIIIIGTGGCCGATGTTTCGCATCGGCGTACGACTIIIIIIIIATCCACGTGCTTGAGAGGCCAGAGCATTCGIIIIIIII`, or; UMI-BC1-FixedSeq-BC2-FixedSeq-BC3; Barcode positions (0-based index): 10, 48, 86; - For `--splitseqV2`: ; `NNNNNNNNNNIIIIIIIIGTGGCCGATGTTTCGCATCGGCGTACGACTIIIIIIIIATCCACGTGCTTGAGACTGTGGIIIIIIII` or ; UMI-BC1-FixedSeq-BC2-FixedSeq-BC3; Barcode positions (0-based index): 10, 48, 78. where the `IIIIIIII` sequence corresponds to barcode and `NNNNNNNNNN` to UMI. This is from the [pipeline code](https://github.com/yjzhang/split-seq-pipeline/blob/master/split_seq/tools.py) used in [this paper](https://www.nature.com/articles/s41593-021-00872-y) co-authored by the lab that developed the protocol. I previously mentioned this in our initial discussions [here](https://github.com/COMBINE-lab/salmon/issues/699#issuecomment-951080577). I think adding this to the documentation is a good idea. I will discuss with Rob and add the information. Thank you. :). Now it seems like it's not behaving as expected for `splitseqV1`? Can you share the command you used and the salmon version?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/774#issuecomment-1184412691:643,pipeline,pipeline,643,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/774#issuecomment-1184412691,2,['pipeline'],['pipeline']
Deployability,"Hi @jirazoqui and @pdellorusso,; beware that if you install via a `.tar.gz` file, you make `conda` ignore *all* dependencies. It's somewhat equivalent to `conda install --no-deps ...` and thus I wouldn't recommend doing something like that.; Until we fix the dependencies in Bioconda, can you, if possible, use a separate Conda environment for `salmon` with `conda create -c bioconda -c conda-forge --name salmon salmon`. In this new environment you wouldn't have any dependency version conflict.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364996006:52,install,install,52,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364996006,2,['install'],['install']
Deployability,"Hi @jorvis,. @sjackman ran into a [similar (but different) issue](https://github.com/COMBINE-lab/salmon/issues/46#issuecomment-193963209), and the root cause seems to be GCC5.3. My best guess is that there is some symbol munging that is incompatible between things compiled with GCC 4.x and GCC 5.x. The newest version of GCC seems to break quite a bit of software. I haven't installed it and tried to build with it yet, but I'll add it to my list of things to investigate. For the time being, would it be possible to build with GCC 4.X (where X > = 8.2), or to use the [pre-compiled binary](https://github.com/COMBINE-lab/salmon/releases/download/v0.6.0/SalmonBeta-0.6.0_DebianSqueeze.tar.gz)?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201302732:376,install,installed,376,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/51#issuecomment-201302732,2,"['install', 'release']","['installed', 'releases']"
Deployability,"Hi @junaruga , Although the above attached binary has been mistakenly named as for linux it should work with MacOsx Sierra. The current recommended way of installing salmon is through bioconda or docker, but unfortunately currently bioconda system is down for MacOsx releases. You can try using docker if the above binary doesn't works for you. Let us know how it goes.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-410478640:155,install,installing,155,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-410478640,2,"['install', 'release']","['installing', 'releases']"
Deployability,"Hi @juugii ,; Thanks for the suggestion and it indeed makes sense to report a metric like sequencing saturation. However, a couple of comments before we try to work on this metric. Even though Alevin uses transcript based method to get the UMI count, it does not resolve the ambiguity at transcript level instead we only resolve collision at transcript level and report gene level counts (at least in current stable release of Alevin v11.2). Having said that the definition of sequence saturation you are suggesting:; > the fraction of duplicated reads from unique transcripts that are sequenced at least 2 times. My understanding is that the sequence saturation (at least in 10x based definition) is based on UMI not on reads. Can you please give a small example of your suggestion ?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/267#issuecomment-414163553:416,release,release,416,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/267#issuecomment-414163553,1,['release'],['release']
Deployability,"Hi @k3yavi ,. I'm using alevin to process 10X V3 data and encountered similar problem with this issue. I've tried run the pipeline using default whitelisting by alevin, `--whitelist barcode.txt` which from cellranger v.3.1.0 run (including 7938 barcodes), `--expectCells 10000`, and `--expectCells 30000`. But no matter how I change the parameter, the log shows that there are always about 50% percent reads has been thrown away, and the mapping rate was between 18.7%-19.1%. . the salmon version is `salmon 1.4.0`; the reference genome is sequenced by ourselves, and it's a plant.; my reads layout is paired end 150bp, . > R1: ; @A00582:424:HJYLGDSXY:3:1101:1090:1000 1:N:0:ACCGGCTC; TAACCAGGTCGAGTGAGTATTTAAGGCGCGCGGCGCACCAACGCACTCCCAACAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; > +; FFFFFFFFFFFFFFFFFFFFFFFFFFFF,,:,,FF:,,,::FF,,:F,,,,,,F:,,,:,::FF::::::,FFF:F:FF:FFFFFFF::FF::FF,F:F:FF:F,FFFF,:FF,FFFFF:,FF:::FF:FFF:FF:FF:FFFFFFFFFF:; > R2:; @A00582:424:HJYLGDSXY:3:1101:1090:1000 2:N:0:ACCGGCTC; NCCTAGAAGCAGCCACCCTTGAAAGAGTGCGTAATAGCTCACTGATCGAGCGCTCTTGCGCCGAAGATGAACGGGGCTAAGCGATCTGCCGAAGCTGTGGGATGTAAAAATACATCGGTAGGGGAGCGTTCCGCCTTAGAGAGAAGCCTC; > +; #FF:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF:FFFFFFFFFFFF::FFFFFFFFFF:FFFFFFFFFFFFF:FFFFFF:FFFFFFF:. Here is the logs. ## Default setting ; `salmon alevin -l ISR -1 ../clean/sample_S1_L001_R1_001.fastq -2 ../clean/sample_S1_L001_R2_001.fastq --chromiumV3 -i ../../dna/00.ref_genome/sample/salmon_index_allmRNA -p 40 -o test_alevin_allmRNA --tgMap ../../dna/00.ref_genome/sample/alltxp2gene.tsv`. > [2021-01-25 16:22:09.565] [alevinLog] [info] Found 43030 transcripts(+0 decoys, +0 short and +0 duplicate names in the index); [2021-01-25 16:22:09.615] [alevinLog] [info] Filled with 43030 txp to gene entries; [2021-01-25 16:22:09.620] [alevinLog] [info] Found all transcripts to gene mappings; [2021-01-25 16:22:09.631] [alevinLog] [info",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-766311567:122,pipeline,pipeline,122,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/340#issuecomment-766311567,1,['pipeline'],['pipeline']
Deployability,"Hi @k3yavi ,; Thanks for looking at this isssue. The CB whitelist corresponds to a larger study, which includes the cells in these fastq files and many more. I'll rerun with only the 2K-4K cells that are related to this specific sample, and then I send you and update.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406462122:261,update,update,261,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406462122,1,['update'],['update']
Deployability,"Hi @k3yavi ,; Using the 5238 barcodes that are specific to this experiment, and also removing the quotes from the transcript to gene map file [bcNotFound-2018-07-19b.tar.gz](https://github.com/COMBINE-lab/salmon/files/2214018/bcNotFound-2018-07-19b.tar.gz), this time Alevin finished with no error. However, I did not get a count matrix in csv format. Also, the quants_mat_cols.txt file is missing, and I do not know how to read the binary quants.mat file. `salmon alevin -l ISR -1 SRR6327122_1.fastq.gz -2 SRR6327122_2.fastq.gz --chromium -i index -p 2 -o alevin_output --tgMap transposon_sequence_set.fa.tsv --whitelist barcode_seq_5K.txt --dumpCsvCounts`; Version Info: ### A newer version of Salmon is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and bug fixes; please upgrade at your; earliest convenience.; ###; Logs will be written to alevin_output/logs; [2018-07-19 22:53:27.709] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; ### salmon (single-cell-based) v0.10.2; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ libType ] => { ISR }; ### [ mates1 ] => { SRR6327122_1.fastq.gz }; ### [ mates2 ] => { SRR6327122_2.fastq.gz }; ### [ chromium ] => { }; ### [ index ] => { index }; ### [ threads ] => { 2 }; ### [ output ] => { alevin_output }; ### [ tgMap ] => { transposon_sequence_set.fa.tsv }; ### [ whitelist ] => { barcode_seq_5K.txt }; ### [ dumpCsvCounts ] => { }. [2018-07-19 22:53:27.714] [alevinLog] [info] Processing barcodes files (if Present) . ; processed 87 Million barcodes. [2018-07-19 22:55:37.299] [alevinLog] [info] Done barcode density calculation.; [2018-07-19 22:55:37.299] [alevinLog] [info] # Barcodes Used: 86885223 / 87959276.; [2018-07-19 22:55:37.303] [alevinLog] [info] Done importing white-list Barcodes; [2018-07-19 22:55:37.303] [alevinLog] [info] Total 5238 white-listed Barcodes; [2018-07-1",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243:799,release,releases,799,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-406597243,2,"['release', 'upgrade']","['releases', 'upgrade']"
Deployability,"Hi @k3yavi - apologies, just coming back to this with an eye to updating our pipelines, just wanted to clarify. . Just to recap, right now I'm running the previous Alevin version with `--dumpFeatures --noQuant`, filtering raw_cb_frequency.txt by barcode frequency (e.g. 10), and then using the whitelist in a further Alevin run, like `--whitelist whitelist.txt --forceCells (whitelist size)`. I then get a relaxed matrix I can filter in downstream analysis. Am I right in thinking that with the new version I can now just have a single run and say `--keepFraction 1 --freqThreshold 10`? Is the freqThreshold applied before the keepFraction?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-516399536:77,pipeline,pipelines,77,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-516399536,1,['pipeline'],['pipelines']
Deployability,"Hi @k3yavi - thanks for the response. We have been looking at using Alevin to support our wider pipelines in the gene expression group at the EBI, as a generic way of quantifying droplet experiments. It has worked well for the 10X v2 studies I've tried, but I'm experiencing some trouble with the drop-seq studies I've tried thus far due to noisy barcodes. May just be bad data, but I'll post an issue or two when I'm clearer.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/358#issuecomment-490095148:96,pipeline,pipelines,96,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/358#issuecomment-490095148,2,['pipeline'],['pipelines']
Deployability,"Hi @k3yavi, ; My local repository now contains the latest commit, and the run proceeds past the `processed X Million barcodes` however, I have been stuck at `Analyzed 95 cells (100% of all)` for the past few hours.. I am sorry this is giving you guys such issues :( . I also tried this on `cat *R1*.fq.gz` of the files, and had the same issue.; [alevin.log](https://github.com/COMBINE-lab/salmon/files/2672819/alevin.log); [salmon_quant.log](https://github.com/COMBINE-lab/salmon/files/2672821/salmon_quant.log). ```; Logs will be written to path/to/alevin_outputSingleLibrary/quantSC/logs; Check for upgrades manually at https://combine-lab.github.io/salmon; [2018-12-12 15:07:42.022] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; ### alevin (dscRNA-seq quantification) v0.12.1; ### [ program ] => salmon ; ### [ command ] => alevin ; ### [ index ] => { /path/to/gencode_annot/AlevinIndex/ }; ### [ libType ] => { ISR }; ### [ mates1 ] => { 12_CTTGTA_L001_R1_001.fastq.gz 12_CTTGTA_L001_R1_002.fastq.gz 12_CTTGTA_L001_R1_003.fastq.gz 12_CTTGTA_L001_R1_004.fastq.gz 12_CTTGTA_L001_R1_005.fastq.gz 12_CTTGTA_L001_R1_006.fastq.gz 12_CTTGTA_L001_R1_007.fastq.gz 12_CTTGTA_L001_R1_008.fastq.gz 12_CTTGTA_L001_R1_009.fastq.gz 12_CTTGTA_L001_R1_010.fastq.gz 12_CTTGTA_L002_R1_001.fastq.gz 12_CTTGTA_L002_R1_002.fastq.gz 12_CTTGTA_L002_R1_003.fastq.gz 12_CTTGTA_L002_R1_004.fastq.gz 12_CTTGTA_L002_R1_005.fastq.gz 12_CTTGTA_L002_R1_006.fastq.gz 12_CTTGTA_L002_R1_007.fastq.gz 12_CTTGTA_L002_R1_008.fastq.gz 12_CTTGTA_L002_R1_009.fastq.gz 12_CTTGTA_L002_R1_010.fastq.gz }; ### [ mates2 ] => { 12_CTTGTA_L001_R2_001.fastq.gz 12_CTTGTA_L001_R2_002.fastq.gz 12_CTTGTA_L001_R2_003.fastq.gz 12_CTTGTA_L001_R2_004.fastq.gz 12_CTTGTA_L001_R2_005.fastq.gz 12_CTTGTA_L001_R2_006.fastq.gz 12_CTTGTA_L001_R2_007.fastq.gz 12_CTTGTA_L001_R2_008.fastq.gz 12_CTTGTA_L001_R2_009.fastq.gz 12_CTTGTA_L001_R2_010.fastq.gz 12_CTTGTA_L002_R2_001.fastq.gz 12_CTTGTA_L002",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422:601,upgrade,upgrades,601,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446668422,1,['upgrade'],['upgrades']
Deployability,"Hi @k3yavi,; Many thanks for you prompt answer, once again. >When you say you try subsampling the Fastq, did you sample randomly across the full Fastq or chose the top X reads. Yes, I did perform a random subsampling, ie. taking a read with a p probability while reading the fastq files, p being the subsampling coefficient I did mention (pE[0;1]). An implementation of this approach as an option during the transcript quantification would be great. I can provide you with the simple python script I use for the subsampling, but I am not sure if it is the proper way to subsample during alevin quantification. >when you say cellranger subsampling, do you mean the cellranger aggregate pipeline?. Yes, sorry for not clearly stating it. I did use the cellranger aggregate function indeed, which by default subsample the expression matrices with high sequencing depth depending on amount of mapped reads, if I understand well. >Use Alevin w/o any modification to the fastq on both of your sample to generate the gene count matrices. I already did that, in downstream analyses I have a batch effect issue related to the sequencing depth. >that's why we recommend using the Seurat package downstream of the Alevin quantified matrices. I have some experience with downstream analyses with Seurat, Pagoda, Scater, scanpy and a few other tools, and I am aware of batch correction methods like CCA or MNN. But that is not what I am looking for here. I did both CCA and MNN but I loose some important information in the resulting eigenspaces or corrected matrix. I believe the proper way to correct my batch effect is to simply fix the difference between my two libraries, ie. the sequencing depth in this case. As I explained in my first message, cellranger aggregate (subsampling based on the amount of mapped reads) works very well in my case, correct the effect without any loss or modification of important genes in our scientific question. Not CCA or MNN. I would like to be able to do the same from the a",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433319913:685,pipeline,pipeline,685,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/305#issuecomment-433319913,2,['pipeline'],['pipeline']
Deployability,"Hi @kai2june,. Thank you for the _detailed_ report! It's interesting because (a) those functions aren't doing anything too exotic and (b) CentOS is the OS we use on our continuous integration. We'll try and get a better handle of what is going on here. In the mean time, could you tell us if you see the same behavior with the [pre-compiled binary](https://github.com/COMBINE-lab/salmon/releases/download/v1.4.0/salmon-1.4.0_linux_x86_64.tar.gz) available from the downloads page?. P.S. One other thing worth trying. We've noticed that compiler support for interprocedural optimization isn't terrific. You can try building salmon without this option by passing `-DNO_IPO=TRUE` as an additional cmake flag.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751366046:169,continuous,continuous,169,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751366046,3,"['continuous', 'integrat', 'release']","['continuous', 'integration', 'releases']"
Deployability,"Hi @kate-simonova,. While I would certainly recommend updating to the latest version of salmon (which, given the pre 1.0.0 to post 1.0.0 difference would require you to rebuild the index), I don't think that would have a substantial effect on a mapping rate that is this low. If the Fastqscreen report suggests that most of the reads map to the genome (>75%), but you are seeing an 8% mapping rate in salmon, this highly suggests that most of the reads are, for some reason, arising from outside of an annotated gene. I would then have two suggestions to test out:. 1.) Check for mtRNA contamination. Try adding extra mitochondrial RNA to your reference fasta, re-indexing, and re-quantifying. If mtRNA depletion or polyA enrichment failed, then it's possible that you have most of your RNA-seq reads coming from mt genes. I've seen this before a number of times and it results in a situation where most of the reads map back to the genome — but not the annotated transcriptome, which often has an incomplete set of mtRNA sequences. 2.) Try mapping the reads to the genome and see how many reads overlap known genes. This is what you would do with a ""counting-based"" RNA-seq pipeline, so something like STAR+feature-counts or subread+feature-counts. While I would generally not recommend this for quantification, it can be instructive to see the fraction of reads that map to the genome but not to known transcripts. Likewise, you could (with the newest salmon) build an index on the transcriptome with the genome added as a decoy (see about our decoy-aware indexing), then the `meta_info.json` will let you know the fraction of reads that were discarded because they were best matched to a decoy sequence (in this case, the genome, but not some annotated transcript). This should help clarify what's going on, and might suggest some issues with the sample that are preventing a reasonable mapping rate to the annotated transcriptome. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/679#issuecomment-1036524215:1175,pipeline,pipeline,1175,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/679#issuecomment-1036524215,1,['pipeline'],['pipeline']
Deployability,"Hi @kayDaramola ,. The download you will get from the releases page is the source. You will either need to build / compile it from source or, alternatively, install the binary using bioconda (recommended). Finally, you can try [this](https://github.com/COMBINE-lab/salmon/files/2099291/salmon-latest_linux_x86_64.tar.gz) pre-compiled binary for Linux, though we are trying to move to bioconda for all binary distribution as it makes support easier by removing a major variable.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/238#issuecomment-398558525:54,release,releases,54,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/238#issuecomment-398558525,2,"['install', 'release']","['install', 'releases']"
Deployability,"Hi @knokknok ,. Thanks for reporting this (and for testing out 0.10.0 so quickly)! Is this read set & reference txome available to try and reproduce this? Also, would it be possible to check if this occurs using the bioconda-packaged release?. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393218241:234,release,release,234,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393218241,1,['release'],['release']
Deployability,"Hi @knokknok ,. Thanks for sharing the data that reproduces this; interesting if it's OSX specific! I'll try and reproduce and dig into this today --- but I have to upgrade my minor version of OSX first.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393538186:165,upgrade,upgrade,165,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393538186,1,['upgrade'],['upgrade']
Deployability,"Hi @knokknok ,. Thanks for your question.; Unfortunately, we don't have a command line option to do that in the released version.; However, you can potentially change [this](https://github.com/COMBINE-lab/salmon/blob/master/src/Graph.cpp#L52) from `oneHamming` to `kHamming` with your required distance, and compile salmon from source, alevin can potentially use higher distance UMIs. One thing to note here would be, since we are checking for more distant UMIs the overall running time can increase. Hope it helps.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/430#issuecomment-534653897:112,release,released,112,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/430#issuecomment-534653897,1,['release'],['released']
Deployability,"Hi @knokknok ,. The latest commit on develop branch https://github.com/COMBINE-lab/salmon/commit/94eab5dae04da4ca02b8da8b630e0750bc15e010 , should fix it. However, there are other major changes in develop branch which can change things from last stable release. I'd recommend, if you can, then please wait for some time before we make the official release of `1.0`. If it's urgent, then try grep(ping) for the changes related to `umiLength` from the above commit and making them into your local salmon code. Hope this helps !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/430#issuecomment-536052532:253,release,release,253,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/430#issuecomment-536052532,2,['release'],['release']
Deployability,"Hi @kzkedzierska,. I'm not sure why the virtual memory usage here is so high, and am also not aware of a great way to predict it. One thing I might ask is if you could test this executable on your system ( [salmon-1.2.0-beta](https://drive.google.com/open?id=1QHYCT3Vs9bRD7UmJY6JJKjlzmmUE4wRl)). This is the near-final beta version of 1.2.0 whose release is imminent. One of the big changes in this version is a considerably more memory-efficient construction. We have been measuring this in terms of resident memory, but it may also apply to virtual memory. Would you mind giving it a try if you have a chance?. Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-605106040:347,release,release,347,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/441#issuecomment-605106040,1,['release'],['release']
Deployability,"Hi @lauraht,. Sure; let me answer these in order. (1) Salmon does not really make use of the read id (we assume the fasta files are synchronized in the input). The one place that not using the `-l` option might raise a complication is if you wish to dump the mappings and examine them (using `--writeMappings`), in which case it will be difficult in the SAM file to discern which read is which just from the names (though the flags should still be valid). (2) Yes, this is normal and expected behavior. Since the online phase of salmon is asynchronous, the online updates may arrive in a slightly different order. This can lead to a slightly different starting condition for the offline phase and, subsequently, small differences in the abundances. However, these differences are generally small and are _inherent_ to the uncertainty in the inference itself. That is, the estimates have inherent uncertainty that is greater than the variation you might see between runs. To assess this you can (and, perhaps should) estimate this uncertainty by asking salmon to draw inferential samples (e.g. Gibbs samples with `--numGibbsSamples`). Best,; Rob. P.S. As a general note, I'd recommending upgrading to the latest version of salmon. We update salmon quite regularly with both small and large improvements (and bug fixes where relevant). There has been quite a lot of progress since version 0.9.1.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/478#issuecomment-578326494:564,update,updates,564,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/478#issuecomment-578326494,2,['update'],"['update', 'updates']"
Deployability,"Hi @leagleag,. Thank you for your question. This is because with selective alignment (`--validateMappings`) salmon is making use of [range-factorized equivalence classes](https://academic.oup.com/bioinformatics/article/33/14/i142/3953977), which do not directly correspond to the ""standard"" notion of equivalence classes. In fact, as of the next release, it will _always_ make use of these equivalence classes by default. This leads to potentially confusing results when used in conjunction with `--dumpEq`. Specifically, the range-factorized equivalence relation group fragments not only by the transcripts to which they map, but also with respect to the conditional probabilities of having generated that fragment & alignment score given each transcript. Practically, what happens is that the space of conditional probabilities is quantized, and an equivalence relation is defined based on both the transcript set and the vector of conditional probability bins into which the mapping falls with respect to each transcript in the equivalence class. This means that range-factorized equivalence classes can have multiple classes of fragments that map to the same set of transcripts, but with different conditional probabilities. Additionally, for each bin, the average conditional probability of fragments arising from that bin is maintained. What you are seeing printed out are the transcript sets, followed by the conditional bin indexes. Starting in the next release (and currently in the develop branch), we've cleaned up the interaction of the range-factorized equivalence classes with the `--dumpEq` and `--dumpEqWeights` flags. If you run with the `--dumpEqWeights` flags, salmon will dump the transcript sets, followed by the conditional probability vector, followed by the fragment count. If you run with the `--dumpEq` flag, it will collapse all of the range-factorized equivalence classes into ""simple"" equivalence classes by combining classes with the same transcript set (but different co",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/402#issuecomment-517041654:346,release,release,346,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/402#issuecomment-517041654,2,['release'],['release']
Deployability,"Hi @litongda007,. Thanks for the updated. I grabbed these and ... basically saw the same thing:. ```; 23R1F : has null = False; 23R2F : has null = False; 23R3F : has null = False; 23R4F : has null = False; R1ST1 : has null = False; R2ST1 : has null = False; R3ST1 : has null = False; R4ST1 : has null = False; ```. I am thinking that perhaps the error is popping up somewhere _downstream_ of salmon. I presume you are using the `salmon` -> `wasabi` -> `sleuth` pipeline, is that correct? If so, I can try and see if I get the same thing importing in R. The tests above were using the python importer from [here](https://github.com/COMBINE-lab/pluribus). **Update**: Ok, that, too, has failed. I converted all of the quantifications to hdf5 files using wasabi, and then checked for nans in the converted files:. ```python; import h5py; import numpy as np; def get_num_nan(x):; nbs = int(x['aux']['num_bootstrap'].value[0]); s = 0; for i in range(nbs):; s += np.isnan(x['bootstrap']['bs{}'.format(i)].value).sum(); return s. samps = ['23R1F', '23R2F', '23R3F', '23R4F', 'R1ST1', 'R2ST1', 'R3ST1', 'R4ST1']; for s in samps:; d = h5py.File('quant/{}/abundance.h5'.format(s)) # abundance.h5 created by wasabi; null_count = get_num_nan(d); print(""{} : null count = {}"".format(s, null_count)); d.close(); ```. The output, as above, is : . ```; 23R1F : null count = 0; 23R2F : null count = 0; 23R3F : null count = 0; 23R4F : null count = 0; R1ST1 : null count = 0; R2ST1 : null count = 0; R3ST1 : null count = 0; R4ST1 : null count = 0; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638553711:33,update,updated,33,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638553711,3,"['Update', 'pipeline', 'update']","['Update', 'pipeline', 'updated']"
Deployability,"Hi @lparsons,. Thanks for bringing this to our attention. There are just too many different places to remember to bump the version. This one was in the Python configuration script for the ReadTheDocs pages. Anyway, I've finally properly scripted the ""version_bump"" process, so this should happen automatically in the future (and is fixes as of 0.11.1). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/259#issuecomment-408574511:159,configurat,configuration,159,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/259#issuecomment-408574511,1,['configurat'],['configuration']
Deployability,"Hi @mcfwoodruff,. Sorry to see you're encountering this issue. Can you let me know how you installed Salmon? Did you compile it from source, or install it via bioconda? My best guess is that some binary incompatibility is what's causing the segfault.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421376023:91,install,installed,91,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421376023,2,['install'],"['install', 'installed']"
Deployability,"Hi @mdshw5,. I'm still interested in trying to figure out what might be going on here; any updates?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/132#issuecomment-296820845:91,update,updates,91,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/132#issuecomment-296820845,1,['update'],['updates']
Deployability,"Hi @michael-brent ,. Did you, by any chance, install via bioconda? There is a known issue with the bioconda build on OSX. Can you try [this](https://github.com/COMBINE-lab/salmon/files/2383948/salmon_0.11.4-pre_OSX.tar.gz) pre-compiled binary in the meantime to see if it works for you?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-441398017:45,install,install,45,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-441398017,1,['install'],['install']
Deployability,"Hi @mishaprochazka and @jdidion,. Thanks @jdidion for pinging me on this. Somehow, Gmail has decided that all GitHub notifications (except those that explicitly tag me, but somehow I missed this one) should go to SPAM. So, I've been missing some of the newer issues here. The short answer is that the documentation needs to be updated. When salmon was originally published, we made use of [RapMap](https://github.com/COMBINE-lab/RapMap) as the underlying mapper, which performed quasi-mapping against an index that consisted of a suffix array and a hash over k-mers pointing to prefixes in the suffix array (similar to the strategy used by STAR, but using much longer k-mers to improve lookup speed). We referred to this index as the quasi-index. As the software evolved and we continued to improve the mapping methodology, we eventually transitioned over to an index based on [our pufferfish data structure](https://github.com/COMBINE-lab/pufferfish). In addition to the new data structure, this coincided with our move over to selective-alignment as the mapping algorithm, and all of this happened at the 1.0.0 release (this is why, for example, indices built before 1.0.0 are not compatible with salmon > 1.0.0; a topic on which there have been a few GitHub issues). However, given the fact that the documentation and software are linked only through manual human intervention (we haven't leveled up to e.g. having salmon be a [literate program](https://en.wikipedia.org/wiki/Literate_programming) yet), these two sometimes get out of sync. This is an instance of that. We have maintained the functionality of the `--writeMappings` feature, and in fact, even augmented it. However, we have not replaced the antiquated `quasi-index` terminology in the documentation. The TLDR is that you can use `--writeMappings` with the index you built with the `salmon index` command, and it should work fine. If you are mapping against an index without decoy sequences, then the output format will be basically ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/727#issuecomment-996192524:327,update,updated,327,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/727#issuecomment-996192524,1,['update'],['updated']
Deployability,"Hi @mns1972,. Thanks for reporting this issue. Are you on Sierra? There is a known problem with libjemalloc (the memory allocator we use) under OSX 10.12. This has been fixed upstream, and is fixed in the develop branch of Salmon (so the fix will make it into the next release). For the time-being. Could you tell me if the binary below works for you?. --Rob. [Salmon-0.7.3-pre_OSX_10.12.tar.gz](https://github.com/COMBINE-lab/salmon/files/657454/Salmon-0.7.3-pre_OSX_10.12.tar.gz)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/112#issuecomment-267609482:269,release,release,269,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/112#issuecomment-267609482,1,['release'],['release']
Deployability,"Hi @mr-c,. First of all, **thank you** for your monumental effort in supporting salmon as a Debian package. I think this is fantastic. I'm also not a CMake expert, but I've failed with it enough times to start to get a handle. I have actually moved to the latest version of Jellyfish (v2.2.3) in the [quasimapping branch](https://github.com/COMBINE-lab/salmon/tree/quasimapping), which will be merged back into master as soon as we've finished porting the bootstrapping feature from [sailfish-master](https://github.com/kingsfordgroup/sailfish). Regarding supporting external versions of the libraries — this absolutely makes sense. What is the standard location where they are assumed to be installed? In this case I can search with a `FindPackage` before I attempt to download them. From the list above, I see two potential problem libraries:; - bwa — We actually use a modified version of bwa that accepts and uses an extra parameter that specifies the suffix array sampling frequency. Specifically, we, by default, use a denser sampling of the suffix array to trade off extra space usage for more speed in lookup. The standard bwa, therefore, probably wouldn't work.; - jellyfish — I actually tried to use jellyfish without obtaining the source and building it early on in development. I ran into an issue where the config.h file generated during compile wasn't installed by Jellyfish, and this caused runtime failures when Salmon was running. It seems to me that either (1) config.h should be installed with jellyfish by default or (2) it shouldn't be necessary to use jellyfish as a library. However, as far as I know, this issue persists in the latest version of jellyfish (if you want to use it as a library as we do, and not just as a k-mer counter). For the remaining libraries, we just use the standard versions, so this should be _OK_.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-144721158:692,install,installed,692,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-144721158,3,['install'],['installed']
Deployability,"Hi @nh13,. This is not something for which we currently have support or something that we currently plan. I'd be open to it, but I'm honestly not sure how to cleanly do it in the current architecture, and doing so would certainly incur a performance hit. Salmon runs 2 phases of inference; and online phase and an offline phase. The online phase has access to _fragment-level_ information that is then summarized away during the offline phase (like the specific locations of each read, the length of each observed fragment, etc.). That information goes away when the reads are summarized into range-factorized equivalence classes. Moreover, some of the model parameters learned during the online phase will depend (in their details) on the order in which observations are made. Ostensibly, observing the same data in the same order **and issuing updates to shared model parameters from worker threads in the same order** should result in identical values, however this has never been tested and was never a design goal. The reason for this is that differences between runs are within the bounds of the inherent inferential uncertainty of the estimated parameters anyway. That is, if one is relying on a specific value at a level of precision such that a different run of salmon would produce a value different enough to change a downstream analysis, then one is imparting more precision on the estimates than they can provide. Other methods that produce identical results between runs for these values may produce the same output, but the accuracy of the output at that level shouldn't be trusted in this case. The uncertainty of the parameter estimates can be evaluated based on the Gibb samples (or bootstrap replicates) that salmon computes. Of course, the small differences between runs rarely lead to differences in downstream analysis (almost certainly at the gene level and also at the transcript level if you use a differential testing method that is aware of inferential uncertainty). On the ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-2159300538:846,update,updates,846,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-2159300538,2,['update'],['updates']
Deployability,"Hi @nskbe,. The issue you're seeing with the mapping file name is related to this note in the release notes:. > Note: In the 0.7.2 release, the file provided to --writeMappings must use a qualified path (e.g. --writeMappings=./out.sam rather than --writeMappings=out.sam), this constraint is already addressed on develop and will be fixed in the next release. . Essentially, the code should internally qualify the filepath before checking if a directory exists, but it doesn't. The fix for this is to pass the file name as a qualified path (i.e. adding `./` before the file name when you want it in the current directory). This is already resolved in develop and the fix for this annoyance will make it into the next release. Regarding the issue with writing the information to `stdout`; actually, all of the logging messages are written to `stderr`. If you don't redirect `stdout`, then you'll see everything, but the intended usage for that mode is something like:. ```; salmon quant -i idx [other options] --writeMappings > out.sam; ```. This will redirect standard out to out.sam. You'll still see the logging messages on the console, since they are written to `stderr`, but all of the mapping contents are redirected to the file. Let me know if this resolves your issue. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/90#issuecomment-247072758:94,release,release,94,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/90#issuecomment-247072758,4,['release'],['release']
Deployability,"Hi @outpaddling,. The only point of pulling from the fork of jemalloc is only to ensure the stability of the URL / release tag. That is, no modifications are made to the corresponding point release of jemalloc. This is not necessarily true for _all forks_ (e.g. we used to rely on some files of a fork from BWA where some things were heavily modified, though that whole fork is no longer part of the build process). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/288#issuecomment-420069005:115,release,release,115,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/288#issuecomment-420069005,2,['release'],['release']
Deployability,"Hi @patrickvdb , Thanks for pointing this out.; My impression was there were two issues here:; 1. The presence of whitelist CB w/ 0 frequency. (Subject of this issue).; 2. The presence of whitelist CB w/ 0 mapping reads. The solution of the first problem is pretty straight forward and since it was the subject of the issue I thought closing this one and opening a new w/ the second problem would be better thing to do. ; We are in the process of fixing these two issues and my plan was to open and close a new issue w/ the fix but you are right, either this issue should not have been closed or a new should have been created. We'll update this soon, thanks for bringing this to our attention.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-410325797:634,update,update,634,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/253#issuecomment-410325797,1,['update'],['update']
Deployability,"Hi @paulitikka,. This isn't something that I have control over (in terms of the official package repositories), and we don't have the resources to independently package salmon for the huge variety of different linux distributions. However, there are already ways to install the salmon binary directly across linux and OSX. Specifically, there is a pre-compiled binary [here](https://github.com/COMBINE-lab/salmon/releases/download/v1.5.2/salmon-1.5.2_linux_x86_64.tar.gz) --- tagged on the release page. Additionally, you can install salmon directly on linux or osx using bioconda — as outlined [here](https://anaconda.org/bioconda/salmon). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/716#issuecomment-962084234:266,install,install,266,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/716#issuecomment-962084234,4,"['install', 'release']","['install', 'release', 'releases']"
Deployability,"Hi @phickner,. Any update on this? How does the BAM file look under ValidateSamFile or some such?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/323#issuecomment-450573944:19,update,update,19,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/323#issuecomment-450573944,1,['update'],['update']
Deployability,"Hi @pinin4fjords ,. I am gonna make the hot-fix release for the `0.14.2` now.; We plan to release `v1.0.0` mid October, so with the `v0.14.2` I can make just the bioconda and github release from the master branch to fix the `mtx` issue. Just wanted to give you heads up, I am making 14.2 from master, so the only difference from 14.1 would be the hotfix i.e. there would be no Genome+txome capability as that's planned with 1.0. I'll keep you updated once it's available through bioconda.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-538507954:48,release,release,48,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-538507954,5,"['hotfix', 'release', 'update']","['hotfix', 'release', 'updated']"
Deployability,"Hi @pinin4fjords ,. We have release a new version `v0.14.0`. In the latest version we have added different error codes based on what stage the pipeline fails. The error codes are as follows:. ```; 1: Error while mapping reads and/or generic errors.; 64: Error in knee estimation / Cellular Barcode sequence correction.; 74: Error while deduplicating UMI and/or EM optimization.; 84: Error while intelligent whitelisting.; ```. As we have discussed earlier, you can control the expected behavior by tweaking the following two flags.; ```; --keepCBfraction: A value in (0, 1] i..e what fraction of CB to keep for quantification.; --freqThreshold: default 10, Minimum frequency required to quantify the CB.; ```. Just a heads up, alevin with the current release will by default dump the `dumpFeatures.txt` which contains the per CB level features. Please check the release notes for more details. Closing this issue for now, but feel free to reopen if you face any issue or have question.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-498040072:28,release,release,28,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-498040072,4,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"Hi @pinin4fjords ,; The error is very subtle, It happens when the total number of genes are exactly a multiple of 8, which in your case it is. It'd be great that before moving forward, if you can quickly verify if 0.99 actually fixes the issue or is it something else. Unfortunately, there is a chance that the `mtx` format output is corrupted for the last 8 genes (in the order they present in the quants_mat_cols.txt), however, the baseline output of alevin `quants_mat.gz` would still be correct and already be in the output folder of your pipeline. The EDS repo I forwarded you just convert the binary output into mtx format correctly. Due to these subtle issues making into production environment, we changed the release cycle to be like a beta to stable type. Currently 0.99 is a beta release, which has been out for some time. If I have to guess, we plan to release 1.0 (the stable release) in approximately 2 weeks.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-537077512:543,pipeline,pipeline,543,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/431#issuecomment-537077512,5,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"Hi @pophipi ,; Sorry for the late response.; We have updated some of the steps for the `v1` pipeline and the relevant How to [document](https://combine-lab.github.io/alevin-tutorial/2018/running-alevin/) has been updated too. Please refer to the tutorial and let us know if you still face the problem. Specifically in your case you might have to do the following things: ; * compile the `wrapper.cpp` file in `salmon/scripts/v1_10x` folder with the command:; ```; g++ -std=c++11 -O3 -I \<PATH TO SALMON INCLUDE DIRECTORY\>-o wrapper wrapper.cpp -lz; ```; * Update the `run.sh` file [here](https://github.com/COMBINE-lab/salmon/blob/master/scripts/v1_10x/run.sh#L17) with the path to the `wrapper` binary created in the above step.; * Use following command to run alevin in v1 mode:; ```; ./run.sh salmon alevin -l ISR -b ./reads/ --gemcode -i ./index_15_pc -p 10 -o ./alevin_15_pc --tgMap ./txp2gene.tsv --dumpCsvCounts --dumpFeatures --end 5 --umiLength 5 --barcodeLength 14; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/294#issuecomment-422198746:53,update,updated,53,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/294#issuecomment-422198746,4,"['Update', 'pipeline', 'update']","['Update', 'pipeline', 'updated']"
Deployability,"Hi @pophipi ,; Thanks for reporting the issue.; It looks like a bug has creeped in while merging the `drop-seq` pipeline to alevin [here](https://github.com/COMBINE-lab/salmon/blob/ad4f74a4e3d7424bcd0ec0c1ec2af300dcbffc44/src/AlevinUtils.cpp#L47-L48).; If it's an urgent requirement you can swap the above two lines by: . ```; umi = read.substr(pt.barcodeLength, pt.umiLength);; return true;; ```. If it's too much trouble to compile from source, we will release a version w/ the hot-fix by today/tomorrow and would update you soon.; Thanks again !. P.S: I was curious how did the `chromium` pipeline went through, since the length requirement of 10x based pipeline is longer and it should break much earlier. The experiment you forwarded above seems to have 25 length bases for CB+UMI sequences. I wonder has any of the Drop-seq guideline changed? I was in the impression it was 12 base CB and 8 base UMI if not, then `--dropseq` flag would not be ideal thing to use since it will just use 20 bases out of 25 present in the fastq files.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/258#issuecomment-408168390:112,pipeline,pipeline,112,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/258#issuecomment-408168390,10,"['pipeline', 'release', 'update']","['pipeline', 'release', 'update']"
Deployability,"Hi @pophipi ,; Thanks for the interesting question, but unfortunately in the current version of Alevin you can't tweak the mismatch rate option although based on the type of error/noise in the reads you can try reducing the size of the k from default 31 to something smaller and see if it helps. We are working on tweaking the mapping algorithm for Alevin allowing mismatches but it's still in testing phase and has not been integrated yet. We'll let you know as soon as we have version supporting that.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/280#issuecomment-416969420:425,integrat,integrated,425,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/280#issuecomment-416969420,1,['integrat'],['integrated']
Deployability,"Hi @ppflrs,. Thanks for the detailed bug report. It seems that the index was constructed properly, but is not being appropriately read in during the quant phase. I've seen a big-index issue with 0.8.1 from another user as well --- but I haven't had a chance to dig down into this yet. Would it be possible for you to see if the issue also exists if you try the precompiled executable for v0.7.2? If that index builds and runs for you, we can at least narrow down the error to this particular release. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/129#issuecomment-287131172:492,release,release,492,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/129#issuecomment-287131172,1,['release'],['release']
Deployability,"Hi @qifei9,. Thanks for the question and for pointing out the need for update in the docs. Regarding your first question, both approaches (3) and (2) seem reasonable to me. I would *not* try approach (1) as this will eliminate the benefit of the stranded library for the targets where you do know the orientation. For approach (2) , I'd either use `--validateMappings` or at least set `--rangeFactorizationBins 4` (the former implies the latter). As for what value to set for `--incompatPrior`, the effect should be reasonably robust across a range of values, the question is how unlikely _a priori_ would you expect a mapping not in `ISR` orientation to be if you also observed a mapping in `ISR` ... probably very unlikely (you could try e.g. 1e-10 or some such). Approach 3 is also also reasonable, though what you might consider doing is looking at the abundances for these opposite strands of the same sequence post quantification --- you should generally see that one of the two has a non-zero expression, or at least one orientation should have a much higher expression than the other (for expressed transcripts, at least, this might give you evidence as to the true strand of origin). Regarding your second point, the changelog is correct. In recent versions of salmon, `--incompatPrior` is 0 by default. We'll update the documentation accordingly.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/332#issuecomment-450929631:71,update,update,71,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/332#issuecomment-450929631,2,['update'],['update']
Deployability,"Hi @rahulnutron,. Currently, the recommendation is to move to [`alevin-fry`](https://github.com/COMBINE-lab/alevin-fry). If you don't have a good annotation (i.e. transcripts as well as introns) then you can index just the transcriptome as normal. The big differences are that, rather than letting alevin do the quantification, you would ask `salmon alevin` to just a do the mapping phase and produce a rad file. This can be done with (assuming chromium v3 chemistry): . ```; salmon alevin -i <index> --chromiumV3 -l A -1 <reads1> -2 <reads2> -p 16 -o <outdir> --sketch; ```. note that with the `alevin-fry` pipeline, there is no need to provide the t2g map at this phase (it's used later). Further, the `--sketch` flag tells alevin just to map the reads and to prepare the RAD file for subsequent quantification with `alevin-fry`.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/706#issuecomment-1183300898:608,pipeline,pipeline,608,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/706#issuecomment-1183300898,1,['pipeline'],['pipeline']
Deployability,"Hi @ramezrawas,. Can you say precisely what you mean by reproducible? Do you mean that the values in the .sf file are not identical? If so, this is expected behavior. It exists for a number of reasons. The big one is that the initial phase of salmon uses an online inference algorithm so that specific details of the solution are dependent on the order in which the reads are processed (which is random given that multiple threads parse reads and update estimates asynchronously). However, the more important point here is that the inference estimates returned by Salmon (and, for that matter, every other transcript-level expression tool) are the result of a statistical optimization procedure that cannot guarantee a unique global optimal solution (and, in fact, even if a global optimum could be guaranteed, there may be multiple different optima). Thus, there is uncertainty inherent in the statistical problem being solved. Of course, if one ordered updates in the same way and set up the initial conditions precisely the same, there would be convergence to the same result, but any sense of confidence there is illusory. However, Salmon does provide a way to quantify, statistically, confidence in the result. The `--numBootstraps` option will do bootstrap sampling, or the `--numGibbsSamples` option will perform posterior Gibbs sampling. Both of these techniques will provide samples from the posterior distribution, and the variance of these samples will give you some information about the variance in the results that are due purely to the inherent statistical uncertainty in the problem. In the `scripts` folder there is a python script `ConvertBootstrapsToTSV.py` that will convert either the bootstrap or gibbs samples to a easily readable tsv format. These samples represent the estimated number of reads coming from each transcript when sampling from the posterior. These can be used to empirically estimate that statistical uncertainty in the abundance estimates of the different tran",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-259464248:447,update,update,447,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/102#issuecomment-259464248,1,['update'],['update']
Deployability,"Hi @rbenel ,; Thanks a lot for bringing this to our attention and forwarding the relevant data to replicate the issue.; Apparently it was an extremely complicated and rare corner case but thanks to @rob-p we were able to resolve it. Since you are using Alevin by compiling from source our latest commit (https://github.com/COMBINE-lab/salmon/commit/c3eeec93d00a9b66bffb7a470723ddb6b4d8bf0d) on the develop branch should solve your issue. We will eventually merge the fix to master in the next release or as a hot-fix sometime later in the future.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446442085:493,release,release,493,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/329#issuecomment-446442085,1,['release'],['release']
Deployability,"Hi @rbenel,. Did you install via bioconda, or build from source? If you built from source, you have to do a completely clean build (i.e. removing the build directory that existed for the prior installation). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-394752048:21,install,install,21,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-394752048,2,['install'],"['install', 'installation']"
Deployability,"Hi @rbenel,. This message is just salmon letting you know a newer version is available. The installed version should function perfectly fine. If you really want to avoid the message, you can pass `--no-version-check` *before* the salmon command; e.g.:. ` salmon --no-version-check index ...`. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/262#issuecomment-409903345:92,install,installed,92,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/262#issuecomment-409903345,1,['install'],['installed']
Deployability,"Hi @red-plant,. So, I have some update from our end. @mohsenzakeri dug into the data a bit (specifically `SRR7985407`). What he found is that there are a considerable number of reads (~13%) have long stretches of polyA or polyT that are matching in a hyper-repetitive manner internally within a certain set of transcripts (i.e. these are not matching polyA tails, because those are already trimmed). These matches are, obviously, minimally informative, but we had not special-cased ignoring them yet. Specifically, what seems to be prevalent in these reads are read pairs where one read has polyA, the other has polyT, and the keep matching to the same positions. However, the rest of the reads don't match the transcript, so a bunch of time is wasted on validating (and discarding) these mappings. To test this hypothesis, we made a small change to the mapping algorithm to special case and ignore k-mers that are purely homopolymers. I'll note that in this data, this has no effect on the mapping rate. I get the following performance profile running the trimmed version of this data (having trimmed with `fastp`) using 4 threads, and _without_ the additional `--hitFilterPolicy BOTH` flag. ```; 1306.86user 4.79system 4:42.54elapsed 464%CPU (0avgtext+0avgdata 592704maxresident)k; ```. I was wondering if you might test this altered version out and see if it has a similarly beneficial effect for you as well. Probably, the time will be different, since the processors themselves are, and since I elided all non-essential flags here, but I would hope this version is faster than the current (even with the altered `hitFilterPolicy`). You can find a tarball with the pre-compiled binary [here](https://drive.google.com/file/d/1tPyOPW3Y8l86RS0-zBRLh0wCt3VTpkNw/view?usp=sharing). It should work on any relatively recent linux system.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-637568013:32,update,update,32,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/527#issuecomment-637568013,1,['update'],['update']
Deployability,"Hi @rekado,. I would absolutely be willing to accept such a patch, and this is a good idea! However, as I mention in issue #102, there is a _small_, inherent, non-determinism in the program, even if random seeds are all set identically. This is due to the streaming nature of the first phase of the algorithm (i.e., the online phase). Specifically, the initial, online abundance estimates, as well as the parameters of some of the experimental and bias models, can be affected by the order in which reads are observed / processed, which is asynchronous and non-deterministic. As I mention in #102, deviations are expected to be _very small_, and any differences encountered due to this are smaller than the inherent uncertainty in inference. I think that allowing to remove all controllable sources of non-determinism (e.g. random number generator seeds) is a great idea, and we should do it. However, removing small perturbations that are due to asynchronous processing of reads is a much larger task.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/185#issuecomment-358336866:60,patch,patch,60,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/185#issuecomment-358336866,1,['patch'],['patch']
Deployability,"Hi @rekado,. The order is determined based on how work is pulled from a queue. Specifically, the way quantification works in the first phase is that independent threads pull reads to be processed from a lock-free concurrent queue [e.g. here for paired-end reads](https://github.com/COMBINE-lab/salmon/blob/master/src/SalmonQuantify.cpp#L981). This queue is filled in by parsing threads (e.g. [here](https://github.com/COMBINE-lab/salmon/blob/master/src/FastxParser.cpp#L151)). This is the major source of stochasticity. One other source is that once reads are pulled from the queue, they are mapped and then their contribution to the quantifications is processed in [this function](https://github.com/COMBINE-lab/salmon/blob/master/src/SalmonQuantify.cpp#L165) which, itself, calls update functions to a few classes that are potentially being updated by many threads. I'd be thrilled, of course, if you were able to find a good way to make this process deterministic. To me, however, this seems like a tall task. Best,; Rob. P.S. None of your questions are silly; I'm happy to answer them!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/185#issuecomment-392962209:782,update,update,782,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/185#issuecomment-392962209,2,['update'],"['update', 'updated']"
Deployability,"Hi @remyschwab,. Yes, this is a known issue and is a result of an incompatibility with jemalloc (which we use as our memory allocator). JEmalloc has issued a fix and this will be present in the next release. For the time-being, I can provide you with an updated binary if that would help. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-259461445:199,release,release,199,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-259461445,2,"['release', 'update']","['release', 'updated']"
Deployability,"Hi @rfarouni ,. Is it possible to visualize the above two plots on the same scale ? ; Regarding the few cells not from 10x whitelist, I should have been more clear last time. ; Basically, what I meant earlier when I said that 10x data is clean is that we do observe some cells from the non whitelist file _but_ they have very few UMI and we discard them anyway. I am guessing here your motivation is a bit different i.e. considering very low confidence (even with 1 UMI) barcodes, while generally we discard anything below 10 as noise. Thanks a lot for offering to help with index-hopping idea. I agree, it'd be great to include the model in the alevin framework. Currently I just got the gist of your paper, let us go through the paper in a bit more detail and we'll get back to you as soon as we have some free cycles for the integration.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639137897:828,integrat,integration,828,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639137897,2,['integrat'],['integration']
Deployability,"Hi @rfarouni ,. Please use [this](https://drive.google.com/file/d/11lav7dOQkn5VuSNZwC2CZUgx_eeXpBmx/view?usp=sharing) link to download a linux compatible binary, the fix will be available by default with the next release . > Also, does Alevin use 10x cell barcode whitelist internally to correct barcodes?. In our experiments, we find that, in expectation, the 10x generated experiments are clean enough that we don't need the 10x whitelisted barcode to be explicitly specified or used. > And do you recommend using the `--naiveEqclass` only 64 guide sequences as features ?. That's a very good question. Basically the answer lies in how complicated the UMI graph network is. Experiment with the antibody derived barcodes (ADT) with 20 protein panel, generally, doesn't need the `--naiveEqclass` mode UMI deduplication, unless the experiment is super deeply sequenced. However, for super low diversity like 4-8 barcodes e.g. for HTO like sample barcodes, the graphical network becomes exponentially hard to solve and significantly increases the running time for alevin. . In general, I'd recommend if you expect very low diversity in the number of barcodes in your experiment, use `--naiveEqclass` otherwise prefer avoiding it. Generally, the experiment with low diversity barcodes results in such a highly dense count matrix that a few error in UMI deduplication won't matter and you can tradeoff extra long running time with reasonable under/over UMI deduplicated counts. . _In short_, 64 guide sequences are relatively high diversity and I'd advise skipping `--naiveEqclass` in your command line argument. Hope it helps !",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638576983:213,release,release,213,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-638576983,2,['release'],['release']
Deployability,"Hi @rhlampe,. Currently, there is no way to prevent the salmon indexer from using more memory if it is needed ot build the index. However, if there is a limit placed by the cluster, it will likely just result in a `bad_alloc` exception from the indexer. The number of sequences alone can tell you a bit about scaling, but the total number of nuclotides being indexed is actually a better predictor of resource usage. How many nucleotides, total, are the references you're considering? While we are working on ways to make the indexing scheme highly scalable, it's worth noting that, to achieve some of it's speed, salmon pre-computes a lot of information it its index (so that the index can become fairly large). One thing I might suggest, if you want to attempt to index and quantify on a very large reference, is to use the `--perfectHash` index in the newest development version of Salmon (pre-release tarball attached below). The latest version (for which the official version should appear soon) represents a number of improvements to index construction. The default indexer has reduced memory usage by ~40%, and the new `--perfectHash` indexer, while somewhat slower, reduces the memory usage even more (by an additional 40-50%). With a fixed memory budget, then, it should allow you to index ever larger references. --Rob. [Salmon-v0.7.3-pre_linux_x86_64.tar.gz](https://github.com/COMBINE-lab/salmon/files/512019/Salmon-v0.7.3-pre_linux_x86_64.tar.gz)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/97#issuecomment-251759242:897,release,release,897,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/97#issuecomment-251759242,1,['release'],['release']
Deployability,"Hi @rmurray2,. Thank you for the report. First, I just want to mention that I don't believe v0.99.0 to be an officially released version number. That is, there was a v0.14.x and a (released in source only v0.15.0), and then the versions moved to 1.0.0 and beyond. However, this behavior certainly isn't related to that. There are 2 things going on that can lead to this effect. The first one, which is relatively easy to test, is that there may be small changes in when the inferred library type starts to be enforced (if it is not `IU`) when auto type detection is used (see [this issue and comments therein](https://github.com/COMBINE-lab/salmon/issues/489)). The second and more fundamental thing going on is that the observed behavior is intended. Even with a single thread of execution provided to salmon for mapping and quantification, there is a separate background thread that simply consumes reads from file and puts them in memory for quantification, and while e.g. pairing information between files is guaranteed to be preserved, exact read order is not. This can lead to differences in the order in which reads are processed and, as a result, differences in the initialization conditions of the optimization. The ultimate result is that for transcripts that have large inferential uncertainty, different numbers of reads can be assigned between runs. We have thought *a lot* about this behavior, what it means, and how the `NumRead` values should best be communicated to users. At the end of the day, the `NumReads` constitute the expected value of latent variables inferred in a _very_ high-dimensional space (# of parameters is at least the number of transcripts). Therefore, there are certain transcripts, whose estimated number of reads simply have _tremendous_ inferential uncertainty — and small perturbations in the initial conditions of the optimization will lead to different estimated values for their abundances. For those transcripts where you observe such fluctuations between",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/613#issuecomment-757989858:120,release,released,120,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/613#issuecomment-757989858,4,['release'],['released']
Deployability,"Hi @rob-p ,. I tried both ways. Classic installation (not through bioconda) gave me this error:. ```; In file included from /usr/local/salmon-0.10.2/include/eigen3/Eigen/Core:420:0,; from /usr/local/salmon-0.10.2/include/eigen3/Eigen/Dense:1,; from /usr/local/salmon-0.10.2/include/SalmonUtils.hpp:21,; from /usr/local/salmon-0.10.2/include/ReadPair.hpp:7,; from /usr/local/salmon-0.10.2/include/AlignmentGroup.hpp:15,; from /usr/local/salmon-0.10.2/include/AlignmentLibrary.hpp:12,; from /usr/local/salmon-0.10.2/src/SalmonQuantifyAlignments.cpp:39:; /usr/local/salmon-0.10.2/include/eigen3/Eigen/src/Core/AssignEvaluator.h:90:50: warning: enum constant in boolean context [-Wint-in-bool-context]; MaySliceVectorize = bool(MightVectorize) && bool(DstHasDirectAccess); ^~~~~~~~~~~~~~~~~~~~~~~~; At global scope:; cc1plus: warning: unrecognized command line option ‘-Wno-unused-local-typedef’; cc1plus: warning: unrecognized command line option ‘-Wno-unused-local-typedef’; make[2]: *** [src/CMakeFiles/salmon.dir/SalmonQuantifyAlignments.cpp.o] Error 1; make[1]: *** [src/CMakeFiles/salmon.dir/all] Error 2; make: *** [all] Error 2; ```. I also tried installing it through bioconda. Apparently, it installs it correctly, but when I try to use Trinity (I'm installing Salmon as a Trinity requirement) this is what happens: . ```; salmon: /opt/conda/conda-bld/salmon_1528409373758/work/salmon-0.10.2/include/eigen3/Eigen/src/Core/util/Memory.h:161: void* Eigen::internal::aligned_malloc(std::size_t): Assertion `(size<16 || (std::size_t(result)%16)==0) && ""System's malloc returned an unaligned pointer. Compile with EIGEN_MALLOC_ALREADY_ALIGNED=0 to fallback to handmade alignd memory allocator.""' failed.; Error, cmd:; salmon --no-version-check quant -i /home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity.reads.fa.out/Trinity.fasta.tmp.salmon.idx -l U -r /home/federicoplazzi/test_Trinity_Assembly/trinity_out_dir/read_partitions/Fb_0/CBin_0/c30.trinity",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403:40,install,installation,40,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398081403,1,['install'],['installation']
Deployability,"Hi @rob-p ,. I'm using a Centos server, centos-release-7-1.1503.el7.centos.2.8.x86_64, the CMake version required is CMake3 and the compiler is g++ 7.3.1.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398456073:47,release,release-,47,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398456073,1,['release'],['release-']
Deployability,"Hi @rob-p ,. thank you very much for your quick and detailed answer. I really appreciate that you will include this feature in your next release.; Indeed, I'm interested in testing out your suggested script/tool !. Best,; Jan",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-264812173:137,release,release,137,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/108#issuecomment-264812173,1,['release'],['release']
Deployability,"Hi @rob-p ,. we managed to successfully install Salmon and run Trinity. We compiled Salmon ourselves and we managed to find where the error is located, that is in a Boost file. ; I'm not sure if this information is useful for you, but in order to correctly install Boost, we had to modify the file boost_1_67_0/boost/lockfree/spsc_queue.hpp by adding the line `#include <boost/next_prior.hpp>` among the other inclusions of that file. After editing it and compiling Salmon again, it works properly. Thank you for your support!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398450528:40,install,install,40,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/235#issuecomment-398450528,2,['install'],['install']
Deployability,"Hi @rob-p ,; After removing ""-pg"" flag in ""salmon/external/pufferfish/CMakeLists.txt"", it's able to be compiled successfully now using Debug mode. To reproduce (in salmon/build directory):; ISSUE 1: The second test failed, I'm wondering whether this should happen or not.; > /root/cmake-3.13.4-Linux-x86_64/bin/cmake -DFETCH_BOOST=TRUE -DTBB_INSTALL_DIR=/usr/include -DCMAKE_BUILD_TYPE=Debug -DNO_IPO=TRUE -DCMAKE_INSTALL_PREFIX=../stage ..; > make // to get /root/salmon/external/pufferfish/CMakeLists.txt file; > vim /root/salmon/external/pufferfish/CMakeLists.txt // remove the ""-pg"" flag on line 131 ; > make // successfully compiled after removing ""-pg"" flag; > make install ; > make test; ![second_test_failed](https://user-images.githubusercontent.com/24876498/103263448-e4809280-49e2-11eb-9be9-7bbedfa2f1a5.png). (in /mammoth/salmon_data directory):; ISSUE 2: segmentation fault occurs after ""wrote [count] cleaned references"" (the same place as Release mode); > /root/salmon/stage/bin/salmon index -t gentrome.fa.gz -d decoys.txt -p 12 -i salmon_index --gencode (data from your tutorial https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/); ![image](https://user-images.githubusercontent.com/24876498/103263653-75576e00-49e3-11eb-9661-abd69de73a5e.png). gdb /root/salmon/stage/bin/salmon core.23591; (it seems to crash at cereal::OutputArchive, fixFasta, fixFastaMain, etc.); ![image](https://user-images.githubusercontent.com/24876498/103263925-2100be00-49e4-11eb-8918-01f9adf52d98.png)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751968056:672,install,install,672,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/609#issuecomment-751968056,2,"['Release', 'install']","['Release', 'install']"
Deployability,"Hi @rob-p ,; Thanks for the update. This will be great. I tried using the 1.5.1 version today and I am still only getting the 16nt barcodes. I used the below commands. . sudo ~/salmon-1.5.1_linux_x86_64/bin/salmon alevin -l ISR -i ~/Data/salmon/cell_hash -1 R1.fq.gz -2 R2.fq.gz --read-geometry 2[1-end] --bc-geometry 1[3-8,24-29,45-50] --umi-geometry 1[51-56] -o /home/cndd3/Data/Multi_3/hash_1.5.1/ --citeseq --featureStart 0 --featureLength 15 —keepCBFraction 1 . I made sure to get rid of the --citeseq flag, but I am not sure if I am missing something else to get it working. . Thanks for your help with this!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/670#issuecomment-860924195:28,update,update,28,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/670#issuecomment-860924195,1,['update'],['update']
Deployability,"Hi @rob-p . A json file would be fine - I was just suggesting a text file. I myself use jq. So, adding it to 'versionInfo.json"" file is fine. Would you know when this update will be available?. On a different note - is salmon 1.2.0 available? See attached screenshot from the ""readthedocs"" page - that seems to suggest that salmon 1.2.0 is already available. I checked out the releases page and could only see 1.1.0. Even bioconda has salmon 1.1.0 - am I missing anything?. ![image](https://user-images.githubusercontent.com/8467214/77860517-d399bb00-71dd-11ea-9f07-d8173789cd6f.png)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/498#issuecomment-605700208:167,update,update,167,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/498#issuecomment-605700208,2,"['release', 'update']","['releases', 'update']"
Deployability,"Hi @rob-p . I had a similar problem, however, I reassemblied the new isoforms using the Hisat2+Stringtie pipeline. The mapping rate from Hisat is 96.49% but it is 65.39% in Salmon. I also noticed a high number of mappings discarded because of alignment score. I also wonder why the number of mappings discarded can be larger than num of processed (57113760, the reads number in 1_1.fq.gz). Thanks. ```; Command: salmon-latest_linux_x86_64/bin/salmon quant -i transcript -l A -1 1_1.fq.gz -2 1_2.fq.gz -p 4 -o ${out}. [2020-09-23 10:09:32.992] [jointLog] [info] Index contained 153,995 targets; [2020-09-23 10:09:33.190] [jointLog] [info] Number of decoys : 0; [2020-09-23 10:09:40.178] [jointLog] [info] Automatically detected most likely library type as ISR; [2020-09-23 10:31:17.407] [jointLog] [info] Thread saw mini-batch with a maximum of 1.68% zero probability fragments; [2020-09-23 10:31:17.467] [jointLog] [info] Thread saw mini-batch with a maximum of 1.64% zero probability fragments; [2020-09-23 10:31:17.563] [jointLog] [info] Thread saw mini-batch with a maximum of 1.66% zero probability fragments; [2020-09-23 10:31:17.573] [jointLog] [info] Thread saw mini-batch with a maximum of 1.72% zero probability fragments; [2020-09-23 10:31:18.005] [jointLog] [info] Computed 329,858 rich equivalence classes for further processing; [2020-09-23 10:31:18.005] [jointLog] [info] Counted 37,348,440 total reads in the equivalence classes ; [2020-09-23 10:31:18.009] [jointLog] [info] Number of mappings discarded because of alignment score : 120,261,413; [2020-09-23 10:31:18.009] [jointLog] [info] Number of fragments entirely discarded because of alignment score : 4,196,417; [2020-09-23 10:31:18.009] [jointLog] [info] Number of fragments discarded because they are best-mapped to decoys : 0; [2020-09-23 10:31:18.009] [jointLog] [info] Number of fragments discarded because they have only dovetail (discordant) mappings to valid targets : 569,393; [2020-09-23 10:31:18.009] [jointLog] [info]",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/533#issuecomment-697107525:105,pipeline,pipeline,105,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/533#issuecomment-697107525,1,['pipeline'],['pipeline']
Deployability,"Hi @rob-p . Thank you very much for your help! I can run the binary in the folder, but is there a way to ""install"" it? ; I'm using miniconda and would like to install the current version of salmon ""permanently"" so that it just works whenever I type salmon ...; I've opened the directory via the terminal using the environment I'd like to run salmon in and run the binary and it opened v1.4.0 . However, when I type salmon (in the same terminal or a new terminal) it still opens v0.13.1 (I somehow managed to install a newer version from bioconda, I think it was $ conda install -c bioconda/label/cf201901 salmon )",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/483#issuecomment-774555943:106,install,install,106,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/483#issuecomment-774555943,4,['install'],['install']
Deployability,"Hi @rob-p . Thanks for the quick reply. Salmon was installed through bioconda. I'm pretty new to working in the console, but these are the commands I used:. `$ conda config --add channels conda-forge`; `$ conda config --add channels bioconda`; `$ conda create -n salmon salmon`",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421376969:51,install,installed,51,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/295#issuecomment-421376969,1,['install'],['installed']
Deployability,"Hi @rob-p . Thanks for the thanksgiving release of salmon. We saw salmon 1.3.0 for July 4th, salmon 1.4.0 for Thanksgiving, hopefully we would see 1.5.0 for Christmas and 1.6.0 for New Year :) . Keep up the great work. I see that you have salmon now available for ARM machines - https://github.com/COMBINE-lab/salmon/releases/tag/v1.4.0. As myself and @patrick-douglas has requested here - https://github.com/COMBINE-lab/salmon/issues/424 - the ability to compile salmon on ARM is great. A question: Will this work if I do a bioconda install or do I need to compile using the tar.gz file. I am using the ARM based conda from https://github.com/Archiconda/build-tools/releases/download/0.2.3/Archiconda3-0.2.3-Linux-aarch64.sh and with that I could do ; ``` ; conda config --add channels c4aarch64 && conda config --add channels defaults && conda config --add channels anaconda && conda config --add channels bioconda && conda config --add channels conda-forge ; ; conda install -c bioconda -c conda-forge -y nextflow bbmap numpy fastqc. ```. I don't see arch64 for salmon in bioconda here - https://anaconda.org/bioconda/salmon",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/556#issuecomment-734442247:40,release,release,40,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/556#issuecomment-734442247,5,"['install', 'release']","['install', 'release', 'releases']"
Deployability,"Hi @rob-p ; Thank you very much for your help! I finally had the time to try installing salmon again and followed your instructions for conda. It worked perfectly! I tried adding it to my PATH as well (I went to the directory where conda installed salmon and copied its ""address"" in the place of ""path_to_salmon"", and salmon works perfectly fine even in new terminals (after activating the conda environment). Since I'm new to Linux, I don't know if I managed to change the PATH permanently, but I'm happy as long as it works in its conda environment :D; Thank you very much again :D",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/483#issuecomment-778208335:77,install,installing,77,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/483#issuecomment-778208335,2,['install'],"['installed', 'installing']"
Deployability,"Hi @rob-p, ; I have successfully run the Salmon analysis, but I should add that the admin of the cluster utilized the executable you sent, but I used conda to install salmon 10.1, the executable you sent me for some reason didn't index the transcriptome correctly, I received the same error I initially started this post for...; Thank you so much for all of your help, I'll post here how it goes. :)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-395416625:159,install,install,159,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-395416625,1,['install'],['install']
Deployability,"Hi @rob-p, ; So I can't update you on if it worked, because the cluster is using the 10.0 version (because we can't install from source), and I ran into this bug, ( Error in function boost::math::digamma<double>(double): numeric overflow] #229) for all of my samples, which you mention in the thread that this was fixed in the 10.1 version. Any idea when the binary for 10.1 will be out?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-395108485:24,update,update,24,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-395108485,2,"['install', 'update']","['install', 'update']"
Deployability,"Hi @rob-p, I believe the docs for `--incompatPrior` still need to be updated to reflect the default behaviour.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/332#issuecomment-1331883878:69,update,updated,69,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/332#issuecomment-1331883878,1,['update'],['updated']
Deployability,"Hi @rob-p, The version we see the fault on is Red Hat Enterprise Release 6.10 (Scientific linux). I have a version of ubuntu that I can test on but not sure when I can get around to it at the moment.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458145886:65,Release,Release,65,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/337#issuecomment-458145886,1,['Release'],['Release']
Deployability,"Hi @rob-p, thanks for you response! I think this answers my question, but let me ask a couple follow up questions just to be sure:. In `STAR` there is an option to use stranded alignment (`--readStrand`, which can take ""Unstranded"", ""Forward"", or ""Reverse""). For the pipeline I'm building it would be ideal if I didn't have to specify the strandedness of the library as I'm not the one preparing the samples and it's not always easy to get that information from the scientist in the lab. As such, it would be great if I can use the default strandedness argument to `STAR` (""Unstranded"") and let `salmon` ""do the right thing"" by letting it choose the `libType` for me. With that in mind, if I let `salmon` choose for me (`-l A`) am I risking throwing out any data?. In addition, if a transcript was aligned in a unstranded manner and ended up aligning to the wrong location due to ambiguity between the positive orientation of one transcript and the negative orientation of another, can `salmon` correct this by reassigning it to the right transcript based on the joint probability of all the other alignments (if you can't tell I'm at the edge of my BS zone)?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/590#issuecomment-733278723:267,pipeline,pipeline,267,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/590#issuecomment-733278723,1,['pipeline'],['pipeline']
Deployability,"Hi @rob-p,. Actually I have to apologize, because about one month ago I got it running, after using an updated version of our guix installation (hpc package manager). I still do not know what actually caused that issue, but it seems to be fixed now. ; So sorry for bothering you so long and thanks for digging into this!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-395375963:103,update,updated,103,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-395375963,2,"['install', 'update']","['installation', 'updated']"
Deployability,"Hi @rob-p,. Ah, I hadn't looked carefully at the outputs, so I was overlooking the fact that the `meta_info.json` for `salmon alevin` is in the `aux_info` subdirectory, while the one for `alevin-fry quant` is in the output directory, so I don't _think_ there will be a conflict. (We have been using the same directory in our pipeline for simplicity.) However, I do think having them named the same thing is a potential source of confusion. Is there a reason not to name the file produced by `alevin-fry quant` something more like `quant.json` or `quant_info.json` to be more in parallel with the `collate.json` and `generate_permit_list.json` files generated at those steps? Either way, I agree that merging the files within `alevin-fry` is probably _not_ the best solution. . The `cmd_info.json` file, seems a special case: I am not sure what the ultimate goal for that file is; it seems now to be included ""for R compatibility"" though I am not fully clear on what that means (with `.mtx` input we don't need it, but `tximeta`/`tximport` may be looking for it?). If the final quant output directory does need the file, it would seem to make sense to copy it along somehow from the `salmon alevin --rad` output directory (with a stop along the way in the `collate` output I guess?). Presumably the `aux_info` would also be desired for `tximeta` if/when `alevin-fry` support is implemented there?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-883524316:325,pipeline,pipeline,325,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-883524316,2,['pipeline'],['pipeline']
Deployability,"Hi @rob-p,. Do you have any update on this yet?. Best,; Alex",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-380456916:28,update,update,28,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-380456916,1,['update'],['update']
Deployability,"Hi @rob-p,. I think I have figured out the issue. It seems like there's a dependency conflict with the ICU (international components for unicode) package between Salmon and R. It's been mentioned in this issue as well: https://github.com/COMBINE-lab/salmon/issues/594. I cannot have both the newest version of R and Salmon in the same environment. For context I've been installing Salmon>=1.10.1 through the bioconda channel, and base-r>=4.3.2 through conda-forge. Whenever I have R in the same environment, Salmon defaults to v0.14.1 during use (but the newest version when on the command line). If I remove R, Salmon defaults to the newest version during use and on the command line and works as normal.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1944356621:370,install,installing,370,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1944356621,1,['install'],['installing']
Deployability,"Hi @rob-p,. I was finally able to grab some time to try running the beta version you linked (see attached logs). This certainly helped, although I'm still nowhere near a time-frame of ~30min. Here are my results:. The 31-mer running took a bit over an hour and consumed ~17GB of memory. This is about half the running time as the previous version, but approx. the same amount of memory requirement (more on that below). The 17-mer running, took 4.5hrs to complete and consumed ~64GB of memory. This particular running is again, about twice as fast, although the time really depends on the memory limitations I gave it. Since it appears that this version no longer crashes when given less than about 250GB of memory, I also tested with 32G and 16GB of memory, just to see what impact this would have on the times. Those jobs are still running (it's only been about 4hrs as of this writing, I'll update my post if/when they complete). Current logs are showing that they quickly consume all the available memory, but have not yet crashed. I've also got versions with 128-512GB of memory requested (by powers of 2) for comparison. Some random notes: both the 31-mer index experienced about twice as many soft page reclaims with the new/faster version and experienced a few hard page faults (the previous version saw none of the latter). The 17-mer version experienced fewer page reclaims than any of the 31-mer indices and far fewer than with the prior version. Again, a few page faults crept in, but relatively few by percentage and likely not contributing any significant amount of time overall. [index-qacct-17mer.log](https://github.com/COMBINE-lab/salmon/files/4246516/index-qacct-17mer.log); [index-qacct-31mer.log](https://github.com/COMBINE-lab/salmon/files/4246517/index-qacct-31mer.log). **UPDATE**; The 16GB version finished running. It actually only took a little over 4 hours to run, as well. The troubling thing about this job seems to be that, despite having successfully completed, accordi",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590516702:894,update,update,894,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-590516702,1,['update'],['update']
Deployability,"Hi @rob-p,. It turns out I slightly misdiagnosed the problem... The ""no `cmd_info.json`"" was correct 1.5.1, but as you may have discovered, it is also missing in earlier versions. What I was seeing was a `cmd_info.json` file that is somehow generated along the `alevin-fry` pipeline we are using. For extra confusion, that was reporting a salmon version of 1.4.0, even when salmon 1.5.1 was used. We will dive in a bit deeper to see if we can find exactly where that file was generated.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-883442154:274,pipeline,pipeline,274,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-883442154,1,['pipeline'],['pipeline']
Deployability,"Hi @rob-p,. Thank you for your reply.; It's a BWA-mem2 aligment with this command:. ```; ""bwa-mem2 mem -M -t {threads} -v 2 {input.reference} {input.reads} | samtools view -q 20 -F 3844 --threads {threads} -Sb -> {output.inter_bam} && ""; ""samtools sort -@ {threads} -O bam {output.inter_bam} > {output.final_bam} && samtools index -@ {threads} {output.final_bam} && samtools flagstat {output.final_bam} > {output.flag} ""; ```; I don't if it's because I use BWA which is a non-splicing aligner? Or because I sorted my BAM file?; I am developing a pipeline and the first step is to test the data with bwa-mem2 with salmon. Is it really a problem to use the results with the MU lib? The 60% may be wrong and reflect alignments that don't exist and ignore good alignments because of the wrong lib?. ### Edit. I tried to do the mapping and the aligment with salmon:; ```. {; ""read_files"": ""[ ../results/trimmed/3373-1_CCGCGGTT-CTAGCGCT-AHV5HLDSXY_L004_R1_trimmed.fastq.gz, ../results/trimmed/3373-1_CCGCGGTT-CTAGCGCT-AHV5HLDSXY_L004_R2_trimmed.fastq.gz]"",; ""expected_format"": ""ISR"",; ""compatible_fragment_ratio"": 1.0,; ""num_compatible_fragments"": 35843765,; ""num_assigned_fragments"": 35843765,; ""num_frags_with_concordant_consistent_mappings"": 29709658,; ""num_frags_with_inconsistent_or_orphan_mappings"": 6209768,; ""strand_mapping_bias"": 0.000008381042727599249,; ""MSF"": 0,; ""OSF"": 0,; ""ISF"": 249,; ""MSR"": 0,; ""OSR"": 0,; ""ISR"": 29709658,; ""SF"": 2520360,; ""SR"": 3689159,; ""MU"": 0,; ""OU"": 0,; ""IU"": 0,; ""U"": 0; }; ```; It's the ISR library but I have only 40% of mapping , it's really confusing.... Best,; Kisekya",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/676#issuecomment-866187414:546,pipeline,pipeline,546,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/676#issuecomment-866187414,1,['pipeline'],['pipeline']
Deployability,"Hi @rob-p,. Thank you for your response/explanation about the CIGAR strings. I had a feeling this was the case based on previous issues I had been reading, but I just wanted to make sure I was understanding correctly about the CIGAR output. I will update to the latest version of Salmon and will check if the selective-alignment helps with these false mappings. Thanks again!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/491#issuecomment-597755020:248,update,update,248,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/491#issuecomment-597755020,1,['update'],['update']
Deployability,"Hi @rob-p,. Thanks for your reply. Yes I am using the salmon -> wasabi -> sleuth pipeline. The NaN error showed up at this step. `so <- sleuth_prep(s2c, extra_bootstrap_summary = TRUE, read_bootstrap_tpm = TRUE, num_cores = 1, filter_fun = my_filter)`. Sleuth complained that there are NAs in bootstrap values and then stopped. Therefore, I removed the two options that are related to processing bootstrap and it worked. `so<- sleuth_prep(s2c, num_cores = 1, filter_fun = my_filter)` . However, the following sleuth_fit step showed the same error. `so <- sleuth_fit(so, ~condition, 'full', which_var = 'obs_counts') `",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638566265:81,pipeline,pipeline,81,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/529#issuecomment-638566265,1,['pipeline'],['pipeline']
Deployability,"Hi @rob-p,. The system that I am running on is CentOS Linux release 7.4.1708, salmon was compiled locally with gcc and the version of gcc that I am using is 5.4.0. ; I hope that this helps you do find the reason for the crash.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-378182888:60,release,release,60,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-378182888,1,['release'],['release']
Deployability,"Hi @rob-p,. i have pasted the three .json file data below. The way i installed was by first installing boost (./bootstrap.sh --prefix=/usr/local), and setting up boost. I did install clang 3.9 too. Then i did use ; cmake -DBOOST_ROOT=/usr/local, make and sudo make install and make test. Then i copied the executable made in bin to /usr/local/bin as sudo. May be it's me using sudo make install which is goofing stuff.. Let me try to reinstall without ""sudo"". I have used salmon 0.8.1, with no problems on another machine. So, on this machine this is a fresh install. I do think there is a script which does fetch Rapmap.. Thanks. Sudeep. #header.json. ""value0"": {; ""IndexType"": 1,; ""IndexVersion"": ""q5"",; ""UsesKmers"": true,; ""KmerLen"": 31,; ""BigSA"": false,; ""PerfectHash"": false,; ""SeqHash"": ""bc7ce7a64f79aeb355818ffc5050bf682f281160738498d11dbc3330b67c4889"",; ""NameHash"": ""3843f236fc87b02e5c477daa29053725d376d8725c10ec23ee2225e8fab6326e""; }; }. #refino.json; {; ""ReferenceFiles"": [; ""Equus_caballus.EquCab2.cds.all.fa""; ]; }. #versioninfo.json. {; ""indexVersion"": 2,; ""hasAuxIndex"": false,; ""auxKmerLength"": 31,; ""indexType"": 1; }",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/135#issuecomment-299885992:69,install,installed,69,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/135#issuecomment-299885992,6,['install'],"['install', 'installed', 'installing']"
Deployability,"Hi @rob-p,. thank you for the attention. . I noticed that Salmon tries to fetch and install dependencies. It's just that I tried to install a newer version in my home, but the HPC I'm using does not allow an external connection to the Internet. The installed version is a bit obsolete, so I need to wait for administrators to install the newer version (and usually the wait takes days and I like to settle things for myself. haha). Thank you very much. Best, Duca.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/225#issuecomment-392344952:84,install,install,84,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/225#issuecomment-392344952,4,['install'],"['install', 'installed']"
Deployability,"Hi @rob-p,; We are working towards creating fusion calling pipeline based on Salmon/Pizzly. It would be helpful to see the current state of the repository and try to replicate some of the experiments we have done with it. We seem to be hitting good specificity but lagging a bit short on sensitivity.; Thanks,; Prateek",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-517011119:59,pipeline,pipeline,59,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-517011119,1,['pipeline'],['pipeline']
Deployability,"Hi @rob-p,; thanks a lot for your investigation. Could you please be more verbose on those incorrect Build-Depends? What dependencies can be removed (if not used they should not really harm, thought but you are correct that it makes sense to remove these) and more importantly which can not be used. For instance if we can't use libstaden as packaged we have a problem. All preconditions for a Debian package have to be packaged first. Fetching something from network is not permitted at package build time.; Thus I simply tried changing the cmake options to. ```; $ cmake -DCMAKE_BUILD_TYPE=Release -DUSE_SHARED_LIBS=TRUE -DBZIP2_LIBRARIES=-lbz2 -DBZIP2_INCLUDE_DIR=/usr/include -DLIBLZMA_INCLUDE_DIR=/usr/include/ -DLIBLZMA_LIBRARY=lzma -DCMAKE_MODULE_PATH=/usr/share/cmake/Modules -DTBB_WILL_RECONFIGURE=FALSE -DBOOST_WILL_RECONFIGURE=FALSE ..; ```. which does not change the SEGFAULT problem. If the issue belongs to something we need to download from somewhere please let me know what looks suspicious to you. This would be helpful since we could either add it to the Debian package source in debian/missing-sources ... or rather fix the predependency that would break salmon.; Kind regards, Andreas.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464471988:592,Release,Release,592,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464471988,1,['Release'],['Release']
Deployability,"Hi @ryanpe13002,. The bootstrap has no effect on the main `quant.sf` file (that is always the result of the main maximum likelihood estimate). All bootstrap samples are written to the `bootstraps.gz` file. If you load your data with the `fishpond` package in `R`, you can request to load the bootstraps to investigate them. Otherwise, if you use an uncertainty aware tool like [`swish`](https://bioconductor.org/packages/release/bioc/vignettes/fishpond/inst/doc/swish.html) for differential testing, it will make use of the bootstraps automatically to account for inferential uncertainty when performing differential testing. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/818#issuecomment-1354070141:421,release,release,421,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/818#issuecomment-1354070141,1,['release'],['release']
Deployability,"Hi @s1corley . As @rob-p mentions, your paper could help assess different methodologies for quantification and also help optimize salmon further for QuantSeq. I would still like you to check if you have used salmon quant command line correctly for QuantSeq data analysis. Your paper briefly alludes to QuantSeq Forward in the Introduction section of the paper; >The QuantSeq Forward kit has an oligo (dT) primer which contains the Illumina-specific Read 2 linker ... but the Methods section of your paper does not specify if you have used QuantSeq FWD or REV. Page 14 of the PDF from the [Lexogen Website data analysis pipeline for QuantSeq FWD](https://www.bluebee.com/wp-content/uploads/2018/11/015UG108V0201-QuantSeq-Data-Analysis-Pipeline_2018-10-18.pdf) recommends using the below htseq command line. ```; htseq-count -m intersection-nonempty -s yes -f bam -r pos $bam; $resource_dir/annotation.gtf > $bam_dir/read_counts.txt; ```; > QuantSeq is a stranded protocol. For the QuantSeq FWD pipeline the argument -s yes indicates; > stranded in the sense orientation. For the QuantSeq REV pipeline -s reverse is used. Similar to the above htseq command line arguments, I think if you are using QuantSeq FWD, the` libType argument from salmon quant should have been SF` . One way I checked these with my datasets was to run the salmon quant command 3 times - once with `libType A`, once with` libType SF` and once with `libType SR` -- with QuantSeq FWD the estimated counts will be almost same with libType A and libType SF. I echo what @rob-p says - Congratulations once again on the paper.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565653150:619,pipeline,pipeline,619,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/449#issuecomment-565653150,3,['pipeline'],['pipeline']
Deployability,"Hi @s6juncheng,. Ahh, yes, we've since updated the data format so that output sizes stay small even when the number of bootstraps grows large. Thanks for pointing out the inconsistency with respect to the blog; I'll update that. I'll put together a script to convert the bootstrap values to a text format so that you can view them. Regarding strand specific information: Yes, if you have considerably antisense transcription, then the strand information can be quite helpful. It can make a significant difference in terms of quantification results. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-194338604:39,update,updated,39,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-194338604,2,['update'],"['update', 'updated']"
Deployability,"Hi @sagnikbanerjee15, do you have any updates on this?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-285509185:38,update,updates,38,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-285509185,1,['update'],['updates']
Deployability,"Hi @saipra003,. Thank you for posting the issue, and also following up with the resolution. It’s not immediately clear why there would have been an issue with 1.2.1, but we’ll be sure to make not of this for anyone else who runs into such an issue with older releases. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/690#issuecomment-886279790:259,release,releases,259,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/690#issuecomment-886279790,2,['release'],['releases']
Deployability,"Hi @satta,. Thanks for bringing this to my attention. I am of two minds on this proposal. On one hand, I agree that it is cleaner, in theory, to have a RapMap shared library to which Salmon could simply link. Currently, Salmon pulls in the relevant portions of the RapMap code to call what is essentially an ill-defined public API for mapping. On the other hand, I have two concerns about separating the code at this point, one is major the other minor. The major concern is that both Salmon and RapMap are still very much under active development, core code and even the interfaces are undergoing reasonably rapid changes (thus the versioning < 1.0). This allows me to easily add features that may potentially benefit Salmon to the RapMap codebase, and then to synchronize Salmon releases with particular commits (tags) in the RapMap codebase. The current build system makes it very easy to pull in the appropriately versioned RapMap code. On the other hand, I have very little experience in properly versioning shared libraries so I would have to understand that better and how this could be done without complicating the build process. My _minor_ concern is that I don't know what effect, if any, separating the code into a separate shared library might have on compiler optimizations. Right now, since the relevant RapMap code is compiled alongside Salmon and they are linked together into the same module, certain optimizations may be possible that would not be so when linking to a shared library. My educated guess is that the effect of such optimizations would be negligible, but it's something that may be worth some exploration first. Overall, I'm very open to this idea, but I think I need to do some homework on it before we can commit and undertake the change.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/87#issuecomment-246027704:781,release,releases,781,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/87#issuecomment-246027704,2,['release'],['releases']
Deployability,"Hi @schelhorn, I agree. Though having no mapping reads is ""catastrophic"" in the common intended use case for Salmon, I think we should have a more graceful handling. Especially, since it's easy to diagnose. I'll fix this in the next release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/130#issuecomment-291917751:233,release,release,233,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/130#issuecomment-291917751,1,['release'],['release']
Deployability,"Hi @schelhorn,. Sorry for the uncharacteristically slow response on this. We're going full steam ahead for the RECOMB deadline, so I've been less responsive than usual. Anyway, I've invited you to the repository for the fusion project (it's currently private). Feel free to poke around, but it's probably not useful until we can send you a short writeup describing the current pipeline (since things are still very ""alpha""). Regarding calling fusions from the sam output of Salmon, one can't do this directly because there are, by default, no encompassing reads (i.e. individual reads split between transcripts) and, to improve abundance estimation, salmon is conservative with it's use of spanning reads. However, we can get at this information from quasi-mapping, so I can definitely consider adding some flags to provide this info (this is the type of thing we output in the fusion pipeline currently, and then we have to postprocess it).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-256045452:377,pipeline,pipeline,377,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-256045452,4,['pipeline'],['pipeline']
Deployability,"Hi @schelhorn,. Sure, I'll had her now. We'll send you a small write-up about the state of the codebase and how to run the current pipeline next week (once my student is back from the current CSHL meeting with all of the cool kids ;P).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-256936372:131,pipeline,pipeline,131,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-256936372,1,['pipeline'],['pipeline']
Deployability,"Hi @schelhorn,. Yes, we have built a pipeline atop salmon and quasi-mapping. At this point, what we see is that it is very fast with high sensitivity. Our main focus has been on improving the specificity, which is current better than some, but not all methods. I realize, of course, that false-positives are a very difficult (and _key_) problem in this domain, so I'd really like to make sure they are well-handled.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-255116221:37,pipeline,pipeline,37,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-255116221,1,['pipeline'],['pipeline']
Deployability,"Hi @shalercr,. I agree that if each sample runs as quickly as you see here, it's not a big deal to just re-run them all. Note that, while my avoids ~116 times more (eventually-discarded) alignments than did yours, the difference in the number of discarded _fragments_ (i.e. fragments that had no mapping) is very small — ~7,000, or 0.023% of the fragments. Thus, despite the huge speed-up, I wouldn't expect many differences in the quantifications. However, I couldn't argue against re-quantifying everything with the new version just for good measure :). When you have a chance, please do let me know if you see this same performance difference using the pre-compiled (linux) binary [here](https://drive.google.com/file/d/1tPyOPW3Y8l86RS0-zBRLh0wCt3VTpkNw/view?usp=sharing). Of course, once we finalize this release (soon), we will push to bioconda so we will also have OSX binaries available. However, I just want to make sure this fixes things on your end as well before the release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644796608:809,release,release,809,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644796608,2,['release'],['release']
Deployability,"Hi @shanmugavadivelps,. This is because, to properly find and link libiconv, the build requires a version of CMake that ships with FindIConv.cmake. So, to build salmon from source, you should have at least CMake version 3.12. Internally and on our continuous integration servers, we use version 3.15. . Also, I'll mention that it may not be essential to build from source. Salmon is available via Bioconda, and a docker image is available via DockerHub. Also, we have a pre-compiled binary that should work on many linux distributions available under our [releases](https://github.com/COMBINE-lab/salmon/releases).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-557149581:248,continuous,continuous,248,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-557149581,4,"['continuous', 'integrat', 'release']","['continuous', 'integration', 'releases']"
Deployability,"Hi @shannonekj,. Thanks for reporting this. This is resolved upstream & in the develop branch, and will be fixed in the next release of Salmon. Sorry for the inconvenience!. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/105#issuecomment-262035535:125,release,release,125,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/105#issuecomment-262035535,1,['release'],['release']
Deployability,"Hi @shnmunk,. Yes, the `--noLengthCorrection` flag is recommended for nanopore based quantification. We expect (and generally observe) that there is not a fragmentation effect in ONT data. Therefore, it is recommended that you use the `--noLengthCorrection` flag with ONT data. You are correct that this make the setting of `--fldMean` and `--fldSD` irrelevant, since there is no length effect applied during the EM algorithm. The other point of note is that selective-alignment is not really designed for long reads, so folks typically use salmon with external alignment for quantifying long-read data (minimap2 is a popular choice). Currently, it's necessary to turn off the read error model `--noErrorModel` when processing long-read alignments, as the long read error profiles are very different form those of short reads. However, this is a temporary issue, as a long-read error model has been developed and is in the pipeline. For the time being though, `--noErrorModel --noLengthCorrection` is the relevant set of flags to get the best results with long-read RNA-seq (either cDNA or direct RNA). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/602#issuecomment-748729130:923,pipeline,pipeline,923,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/602#issuecomment-748729130,1,['pipeline'],['pipeline']
Deployability,"Hi @silvanopiazza,. It would seem that this pre-compiled binary is making use of an instruction that is not available on the CPU on which you are executing `salmon`. In this case, there are a few alternatives:. * Try and run the command through a Docker image — the latest salmon is always available on [Dockerhub](https://hub.docker.com/layers/8712688/combinelab/salmon/latest/images/sha256-1c0b7e5b8a0996b6080cfc76fcd4e565f8c92689fe3cf1debc8b7493ae964c14?context=repo).; * Try and [install salmon via bioconda](https://anaconda.org/bioconda/salmon). The bioconda build may be making fewer assumptions about the target architecture than the pre-compiled github binary.; * Compile salmon from source locally. This will, of course, guarantee to only use instructions available on your hardware, though it's the most involved of these options.; ; Let me know if any of these work for you. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1143871440:484,install,install,484,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/783#issuecomment-1143871440,1,['install'],['install']
Deployability,"Hi @sjackman , Thanks for you question. It is indeed a good observation to use salmon for combining separate CB and read-sequence fastq files.; Having said that, we have designed alevin to work with, and tested it on 10x-chromium `cellranger` pipeline which itself has a feature similar to mentioned above by you (enabled by flag `--dumpfq`). This feature takes in two separate files: one with CB+UMI and another with read-sequence, and performs initial whitelisting (knee based , more intelligent whitelisting happens downstream and needs deduplicated UMI counts or one can just optionally provide external whitelist), error corrects the CB, attaches it to the header (although not with tag `BX:Z`) of the read-sequence in the second file, and dumps it to the standard out. I might have to read a bit about `longranger` and its `FASTQ` format, but if you are familiar with the `longranger` pipeline and are sure that it uses 16+10 (CB+UMI) in one file and read-sequence in the second file, then I think you are good to try alevin with `--dumpfq` flag. Let us know how it goes and if you face any problem. . Note: Just put an extra flag `--noQuant` so that alevin knows to stop after dumping the fastq otherwise it will start performing downstream tasks.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395174284:243,pipeline,pipeline,243,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/233#issuecomment-395174284,2,['pipeline'],['pipeline']
Deployability,"Hi @tamuanand ,. I think these are very important question and thanks for raising the issue.; As you mention, In the preprint we put out two different modes of Selective Alignment:; A) SA: The mashmap and bedtools based pipeline which follows old [SalmonTools](https://github.com/COMBINE-lab/SalmonTools/blob/master/README.md) based pipeline.; B) SAF: Inbuilt salmon pipeline to consume genome and follows [this](https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/) pipeline. The distinction between the two comes from how the decoy sequence are actually generated. To answer your question point wise.; 1.) That's correct SAF based pipeline follows the tutorial as mentioned in B above and uses the full genome as decoys.; 2.) That's correct, if a user wan't to run SA method, then they should follow mashmap based tutorial A. This might be useful for situation where the index is too big to fit into the machine's memory.; 3.) That's also correct, yes if you don't provide decoys `-d` you can still run salmon on the transcriptome. We have just enabled the validateMapping option by default, which is also used in transcriptome only mode, currently there is no option to _disable_ it.; 4) That's also correct, we have dropped the quasi-mapping based support from the latest version, If you need to run quasi we have released `0.15` just as a last version into the archive.; 5 & 6) Very good question, short answer is your default pipeline of VBEM is the recommended way. We have to use additional flags `--mimicBT2 and --useEM` while comparing the methods in the preprint. RSEM can only do EM and as we were comparing against Bowtie2 we have to mimic it with more stricter requirements for fair comparison. We expect the performance to be better with VB based optimization and not using `mimcBT2` . @rob-p Feel free to add if I missed something.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549187035:220,pipeline,pipeline,220,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549187035,7,"['pipeline', 'release']","['pipeline', 'released']"
Deployability,"Hi @tamuanand ,. Thanks for pointing this out. You are right, we missed to update the salmon doc with this details. You can find the latest preprint [here](https://www.biorxiv.org/content/10.1101/657874v2). The new version don't require the GTF because now we don't generate the decoys explicitly i.e. you don't have to run mashmap. With the latest version salmon, it can consume the full genome and transcriptome without the explicit need of annotation. It's much more efficient and takes significantly less memory to align/quantify compared to other genome based method. Please checkout the preprint for more details and [this](https://combine-lab.github.io/alevin-tutorial/2019/selective-alignment/) tutorial for how to index the gentrome (genome + transcriptome) index. We will update the salmon docs too, to reflect the same.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/384#issuecomment-549183799:75,update,update,75,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/384#issuecomment-549183799,2,['update'],['update']
Deployability,"Hi @tamuanand ,. Thanks for the very interesting question.; Personally I can't comment much on the Lexogen Quantseq quantification, however, the comparison of alignment based (both STAR/Bowtie2) and alignment free methods and their impact on RNA-seq quantification is within itself a very interesting comparison. In fact. we just released a preprint today about the same, you can check it out [here](https://www.biorxiv.org/content/10.1101/657874v1).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-498316176:330,release,released,330,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-498316176,1,['release'],['released']
Deployability,"Hi @tamuanand ,; Thanks for raising this doubt. SA is already integrated into the salmon environment i.e. you just have to re index salmon using the `generateDecoyTranscriptome.sh` script from [here](https://github.com/COMBINE-lab/SalmonTools) and run salmon quant as you usually do w/ the `--validateMappings` additional command line flag.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499297622:62,integrat,integrated,62,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499297622,1,['integrat'],['integrated']
Deployability,"Hi @tamuanand,. Nope; these values are right. The `indexVersion` is a global identifier with respect to previous versions of salmon. It is a global number that is incremented each time (a) a backward-incompatible change to the index is introduced or (b) a fundamentally new piece of information is contained in the index. This field took a value of `1` way back when we started versioning the salmon index a number of years ago, and version `1` was based on the RapMap index (rather than pufferfish like the current one). This is simply a global identifier that we can use internally to determine whether the version of salmon reading this index can be expected to make use of it. The other field `indexType` corresponds to the value from an internal enumeration used in the salmon code. Over the years (since it was first released in 2014), salmon has used a number of different data structures for its underlying index. First, it used a modified version of the FMD index that BWA is based upon, then, it used the RapMap index (based upon a sparse hash map and an uncompressed suffix array), and now it uses the pufferfish index. This `indexType` filed just records the type of this index. In modern (post 1.0.0) versions of salmon, the pufferfish index (`2`) is the only valid version. There's a lot of history to these values, but they all make sense internally within salmon, which is how the contents of this file are primarily used (i.e. to make sure there is compatibility between the version of salmon being run and the index we are trying to consume). Hopefully, this description clears things up a bit. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/504#issuecomment-613217080:823,release,released,823,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/504#issuecomment-613217080,2,['release'],['released']
Deployability,"Hi @tamuanand,. Thank you for the detailed questions! Let me elaborate a bit on a few of @k3yavi's answers. 1&2) Yes; if you want to use SAF, you no longer need mashmap, as what you are essentially doing is treating the entire genome as a ""decoy"". As @k3yavi alludes, SA is still useful when you need to run in a very memory-constrained environment. After adopting the new [pufferfish-based](https://github.com/COMBINE-lab/pufferfish/tree/develop) index, the size of the transcriptome plush mashmap 2 decoys becomes considerably smaller than the previous size of the transcriptome in earlier versions of salmon (<= 0.15.0). However, depending on the organism, indexing the entire genome as decoy, even though it yields the best accuracy, does require a bit more memory, as specified in the release notes for the 0.99 betas and 1.0.0. 3) Yes; it is still possible to use `salmon index` without any decoy sequence. In this case, one can expect results similar to if you had aligned to the target transcriptome using Bowtie2. In this case, you perform indexing by simply not providing any `--decoy` flag to the `index` command. In that case, all of the records in the target fasta will be treated as valid and quantifiable targets. Of course, for reasons detailed in the pre-print --- the high _sensitivity_ of both Bowtie2 and selective-alignment --- we recommend including either mashmap-derived decoys or the organism's genome as a decoy whenever possible. . 4) Related to @k3yavi's response and my elaboration above: we have dropped quasi-mapping from 1.0.0 (though something akin to it may return in the future if there is sufficient demand and if the shortcomings described in the manuscript can be overcome). However, as I mention in part 3 above, this doesn't mean it's not possible to use v1.0.0 without an explicit decoy sequence. The `--decoy` flag of the indexing command is optional, not required. We will update this in the documentation making it more explicit. However, as @k3yavi points ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549195390:790,release,release,790,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/442#issuecomment-549195390,2,['release'],['release']
Deployability,"Hi @tamuanand,. Thanks @k3yavi for pointing out the major idea. Just to fill in some more details. The implementation of SA is, as Avi mentions, part of the mainline salmon code now (in the develop and master branch). We link, in the README, to some pre-constructed decoy-aware transcriptomes, but you can build your own for any organism where you have the transcriptome, the genome, and an annotation, using the script Avi linked to. There are a few ways to enable selective alignment, and the details are listed with the relevant flags in the release notes (we will be updating the documentation shortly with more detailed examples as well). Specifically, you can pass salmon the `—validateMappings` flag, which turns on selective alignment with some reasonable default parameters. You can, instead, pass the flag `—mimicBT2`, which is a meta-flag that enables selective alignment, and turns on a few other things that make the alignments more similar to the Bowtie2 parameters we discuss in the paper (e.g. it disallows orphan alignments). Finally, there is the `—mimicStrictBT2` flag, which mimics Bowtie2 parameters that disallow indels; however, we generally don’t recommend this flag unless you have a particular reason for using it. For any of these, once you’ve built a decoy-aware index, you need not do anything else special during quantification. We’ll ping back here with more details once we have more examples in place etc.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499303095:545,release,release,545,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/365#issuecomment-499303095,1,['release'],['release']
Deployability,"Hi @tamuanand,. Yes, we had just about finished up a nice set of features and I thought it would be fun to have another holiday-themed release :). I'm not sure if we'll hit all of the holidays but we definitely have more stuff in the pipeline over the next few months. Currently, the ARM build has to be compiled from source. I asked a leader of the bioconda team about automatically compiling ARM binaries through the mainstream bioconda and having them be part of the package management system. They told me this isn't currently possible, but that capability should exist early next year. Once it's feasible upstream in the main bioconda, we'll have ARM executables built as well. For the time being, building from source is probably the easiest way. We may also make a pre-compiled ARM binary (e.g. on an AWS machine), though that will have limited compatibility, so its not as preferred as building from source.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/556#issuecomment-734954158:135,release,release,135,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/556#issuecomment-734954158,2,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"Hi @taylorreiter,. I was wrong — there was simply a bug that, in single end mode, everything was being written out with the `u` flag. This is now fixed in develop. It will be in the next release. Sorry about that!. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/748#issuecomment-1146205498:187,release,release,187,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/748#issuecomment-1146205498,2,['release'],['release']
Deployability,"Hi @taylorreiter,. This should now be fixed in v1.9.0 which was just released 🎉 . Let us know if it works for you. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/748#issuecomment-1164760864:69,release,released,69,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/748#issuecomment-1164760864,1,['release'],['released']
Deployability,"Hi @teshomem ,. We are working on resolving this issue just waiting for few other things to resolve before making a new tagged release.; In the meantime you can resolve this issue by replace the hash in [this](https://github.com/COMBINE-lab/salmon/blob/master/CMakeLists.txt#L522) line by `00a8b2798c498507572e24c2db7bf4896f05b760a38ed9ba566ffd348a7c6cef `.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/153#issuecomment-331260342:127,release,release,127,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/153#issuecomment-331260342,1,['release'],['release']
Deployability,"Hi @teshomem,. If you want to proceed with transcript-level differential expression, _all transcripts are relevant_. That is, the relevant tools (e.g. DESeq2, limma-voom, Sleuth, etc.) will expect to be provided with _all_ quantified isoforms for each gene. They will then automatically apply their own filtering criteria to determine which transcripts to actually test for DE. . If you want to proceed with DE at the gene level (and hence want to aggregate the quantification information from the level of transcripts to genes), the easiest option is to use the [tximport](http://bioconductor.org/packages/release/bioc/html/tximport.html) package. It can import all of the quantifications from multiple runs of Salmon, aggregate them to the gene level, and produce a count matrix that can then be used with traditional count-based gene-level DE tools. I would recommend the pipeline Salmon => tximport => DESeq2 for gene-level DE analysis. Finally, the best place for questions like this, that don't have to do with a specific bug or feature request for the Salmon software, is the [Google user group](https://groups.google.com/forum/#!forum/sailfish-users). This way, other users will be more likely to provide you with feedback and help answer your questions.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/154#issuecomment-329974141:607,release,release,607,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/154#issuecomment-329974141,4,"['pipeline', 'release']","['pipeline', 'release']"
Deployability,"Hi @tillea and @nileshpatra, thanks for the report (and ping). Can you point me to a Docker / Singularity container of the relevant Debian build so I can try and reproduce locally? This will make debugging much easier. For example, I am unable to reproduce this issue building the latest release from the `master` branch using the latest [official Debian image](https://hub.docker.com/_/debian). In particular, release 1.10 addresses a rare (but stubborn) segfault that certainly was present in 1.9. However, the fix for this is in the corresponding tagged release of pufferfish, which is pulled in by the build script when salmon is built.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1462538853:288,release,release,288,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1462538853,3,['release'],['release']
Deployability,"Hi @tillea and @nileshpatra,. Ok, I dug deeper and found out what's going on. The culprit is, in fact, `libcereal`. The problem is that `libcereal` bumped patch versions only since the version corresponding to the headers included in `pufferfish`, but their changes are not, in fact, backwards compatible! This lead to a version mismatch between the headers used in `pufferfish` and the headers found from the installed package, ultimately resulting in an assertion failure in `rapidjson` (which cereal is using) and a segfault. On the plus side, this was relatively easy to fix by bumping the included cereal headers in pufferfish. I also updated the `Findcereal.cmake` module and added a version constraint so that we now require the new version (1.3.2). This is now tagged and released as `salmon 1.10.1`. Please give that a go when you have a chance. I'll note that, before this is added upstream in debian, I'd still advocate for fixing the `libstaden` package to update to the new version. I'd also recommend moving to dependencies like the ones I've included above to remove some really antiquated dependencies that salmon no longer requires but are still being pulled in. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1465096711:155,patch,patch,155,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1465096711,5,"['install', 'patch', 'release', 'update']","['installed', 'patch', 'released', 'update', 'updated']"
Deployability,"Hi @tillea,. It seems this is exactly the problem. The build deps here are not quite correct. There are dependencies that salmon no longer has, and some of the dependencies it does have are out of date and can't be used from upstream (e.g. libstaden in the latest version, among others). On the bright side, it's not the dynamic linking alone that is problematic. The following works fine on my end:. ```{bash}; $ docker pull debian:testing; $ docker run -it debian:testing; $ echo ""deb-src http://deb.debian.org/debian unstable main"" > /etc/apt/sources.list.d/10-debsrc.list; $ apt-get update; $ apt-get upgrade; $ apt-get install build-essential git libboost-all-dev liblzma-dev libbz2-dev cmake zlib1g-dev curl unzip wget libcurl4-openssl-dev libtbb-dev libtbb12 liblzma-dev libjemalloc2 pkg-config libgff-dev; $ wget https://github.com/COMBINE-lab/salmon/archive/refs/tags/v1.10.0.tar.gz; $ tar xaf v1.10.0.tar.gz; $ cd salmon-1.10.0; $ mkdir build && cd build; $ cmake -DCMAKE_BUILD_TYPE=Release -DUSE_SHARED_LIBS=TRUE -DBZIP2_LIBRARIES=-lbz2 -DBZIP2_INCLUDE_DIR=/usr/include -DLIBLZMA_INCLUDE_DIR=/usr/include/ -DLIBLZMA_LIBRARY=lzma -DCMAKE_MODULE_PATH=/usr/share/cmake/Modules -DTBB_WILL_RECONFIGURE=FALSE -DBOOST_WILL_RECONFIGURE=FALSE ..; $ make -j8; $ make install; $ make test; ```. This is preferring dynamic linking, and the resulting installed executable runs fine without a segfault. Can you try this on your end? Then the thing to do may be to find what is discordant between the packages I install above and what gets pulled in by `apt build-dep salmon`. Thanks,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464182279:587,update,update,587,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464182279,7,"['Release', 'install', 'update', 'upgrade']","['Release', 'install', 'installed', 'update', 'upgrade']"
Deployability,"Hi @tillea,. So I went through the list of deps pulled in by `apt build-dep salmon` and the minimal set I gave above. I tried to make the smallest number of changes I could to the `apt build-dep salmon` list while also removing things that are clearly outdated (we no longer use jellyfish, rapmap, etc. and we use the header-only version of spdlog). As a result I came up with this list of dependencies. The offending dependency seems to be `libcereal-dev`. Specifically, I was able to install just this list of dependencies (minus `libcereal-dev`) atop a clean `debian:testing` and get a working version where the only thing downloaded from the internet was the appropriate version of the pufferfish files grabbed by `fetchPufferfish.sh` in the `1.10.0` release. Once I installed `libcereal-dev` with `apt-get install`, and rebuilt, then I got the segfault mentioned at the top of this issue. So, it seems that we either have to let `salmon` build it's own libcereal, or figure out what the problem is with the library upstream. Please let me know if this you observe this same behavior as well (also @nileshpatra may want to try this out). If so, perhaps we can get `libstaden` updated upstream, and then use this as the new dep list for `salmon`. I installed these deps with a simple `xargs apt-get install -y < deps_sorted_updated.txt` (without `libcereal-dev` for the working version, and with it included, as below, for the segfault). Best,; Rob. [deps_sorted_updated.txt](https://github.com/COMBINE-lab/salmon/files/10949233/deps_sorted_updated.txt)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464986376:486,install,install,486,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464986376,14,"['install', 'release', 'update']","['install', 'installed', 'release', 'updated']"
Deployability,"Hi @tillea,. Thanks for taking care of pushing this to Debian. The reason for the tags are as follows. Though RapMap is a stand-alone tool, the main mapping algorithm is used (as a library, via an API) within salmon. There are sometimes changes made to the RapMap codebase that are relevant only for salmon. Since we distribute salmon releases via a few channels (including bioconda), we want to have reproducible builds at stable point releases. Thus, every release of salmon is ""paired"" with a corresponding tagged version of RapMap, which is the exact RapMap version used in that version of salmon. Since salmon is updated more frequently than RapMap, and since many times the relevant changes only have an effect for salmon, this approach was taken to not require a major RapMap version bump prior to each new salmon release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/87#issuecomment-447482180:335,release,releases,335,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/87#issuecomment-447482180,5,"['release', 'update']","['release', 'releases', 'updated']"
Deployability,"Hi @tmmse,. I have a feeling this is a python 2 vs. python 3 issue. I just ran your data through the script without problem on my end, but my default python install is still 2.7. When using a Python 3 install, I get the same error you're seeing. I updated the script so that it should now be python3 compatible. You can find that version [here](https://github.com/COMBINE-lab/salmon/blob/develop/scripts/ConvertBootstrapsToTSV.py). Please let me know if it works for you. These changes should be in the next release as well (which should land soon).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-336901461:157,install,install,157,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-336901461,4,"['install', 'release', 'update']","['install', 'release', 'updated']"
Deployability,"Hi @tobi-te ,. Thanks for the bug report we will try to correct it in our next release.; In the mean time you can make it work by swapping [line](https://github.com/COMBINE-lab/salmon/blob/master/include/BAMQueue.tpp#L540) by `scram_close(fp_);` and compiling it again. Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/145#issuecomment-320442364:79,release,release,79,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/145#issuecomment-320442364,1,['release'],['release']
Deployability,"Hi @tomsing1,. Thanks for following up on this --- I was scratching my head about why multiple libraries might be causing an issue. Both `--seqBias` and `--gcBias` are relatively new features, and have definitely undergone more testing under the ""quasi-mapping"" codepath than the alignment-based codepath (though it's passed our internal regression tests on both). That being said, bias correction is equally valid regardless of whether you're using quasi-mapping or quantifying from a bam file directly. I'd be happy to take a look if you can provide a small example (a subset of the reads in the bam file?) that triggers the behavior. One thought might be that, for some reason, positions in the bam file could disagree with what's provided in the corresponding fasta. However, that's just a guess and I'd have to try and debug the segfault once I can reproduce it. Thanks again for the detailed error report and the update!. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-261738431:919,update,update,919,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-261738431,1,['update'],['update']
Deployability,"Hi @tseemann, you can now use `-DBOOST_BUILD_THREADS=<desired threads>` during configuration to control this. Let me know if it works.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/412#issuecomment-549180097:79,configurat,configuration,79,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/412#issuecomment-549180097,1,['configurat'],['configuration']
Deployability,"Hi @ulin27,. This isn't a `salmon`-related issue. The script is trying to run an instance of R, and within R to load the `edgeR` package to perform some normalization. It looks like the location you are running this doesn't have `edgeR` installed. I would check in with the people who installed `trinity` on your computer or, if that was you, ask upstream in the `trinity` user group. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/855#issuecomment-1604792956:237,install,installed,237,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/855#issuecomment-1604792956,2,['install'],['installed']
Deployability,"Hi @uros-sipetic!. Unfortunately, as you suggest, there really is no good way to infer the fragment length distribution from only single-end reads. Rather, this flag determines how the conditional probability of single-end fragments near the beginning (if in the rc orientation) or end (if in the forward orientation) of the transcript are determined. A single-end read does not have any known fragment length. But we do know that e.g. fragments very close to the end or beginning of the transcript are rather unlikely. In this case, we can integrate (sum) over all possibilities to assign a conditional probability. This is what salmon does. For a single-end read (assume forward orientation for simplicity) at position i on a transcript of length n, we consider the conditional fragment length probability to be given by F_n(n-i), where f_n is the conditional fragment length distribution conditioned on the transcript length (maximum observable length) being n and F_n is the cumulative distribution function of f_n. Intuitively, this means that fragments very close to transcript ends will get a smaller conditional probability, while those farther from the end will get larger conditional probabilities. The `--noSingleFragProb` flag simply turns off this conditional probability all together. It is _not_ recommended to disable the single-end fragment length probability modeling. We have evidence from testing that it improves quantification accuracy. Thus, I would suggest _not_ setting the `--noSingleFragProb` flag. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/575#issuecomment-711061553:541,integrat,integrate,541,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/575#issuecomment-711061553,2,['integrat'],['integrate']
Deployability,"Hi @uros-sipetic,. Actually, it looks like what you're seeing is [actually the intended behavior](http://stackoverflow.com/questions/39351580/default-and-implicit-arguments-in-boost-program-options), and the behavior where `--writeMappings ./test_output` works is actually unexpected. Thus, I don't anticipate this being ""fixed"" in a future release, since it's actually behaving as expected. So, you can use either `--writeMappings=<outfile>` to get the correct behavior. I might look into why my system accepts `--writeMappings <outfile>`, but probably won't dig too deep since I expect the behavior is probably ill defined.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/86#issuecomment-244982752:341,release,release,341,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/86#issuecomment-244982752,1,['release'],['release']
Deployability,"Hi @uros-sipetic,. Indeed, you're right on both fronts. I've just pushed commit 423b622, which addresses these. It removes one of the duplicate flags --- keeping the one with the same description as in the mapping-based mode, and it updates the default `--fldMax` in alignment-based mode to be 1000 for consistency with mapping-based mode. Thanks for pointing these out!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/80#issuecomment-243138374:233,update,updates,233,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/80#issuecomment-243138374,1,['update'],['updates']
Deployability,"Hi @vals,. So there was a very subtle bug in `useFSPD` that would (in a very non-reproducible manner) trigger such a segfault. It was related to some very tricky locking behavior. However, the manner in which `useFSPD` corrected for position specific bias isn't actually compatible with our new sequence-specific and fragment-gc bias models. Thus, I've deprecated `useFSPD`. The replacement is the flag `posBias`. This models the same type of positional bias, but does so in a way that is compatible with our other bias models. It also doesn't rely on the tricky threading behavior, so it should be more stable. Unlike sequence-specific and fragment-gc bias, however, the `posBias` option is still _experimental_ in the 0.7.0 release. However, we have been testing it internally, and I'd be very grateful for your feedback if you have a chance to try it out. Assuming things look good, we can promote it from experimental in the next release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/64#issuecomment-241234373:726,release,release,726,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/64#issuecomment-241234373,4,['release'],['release']
Deployability,"Hi @vasisht,. Actually, the settings of these flags aren't incorrect according to the [SAM spec](https://samtools.github.io/hts-specs/SAMv1.pdf):. > Bit 0x4 is the only reliable place to tell whether the read is unmapped. If 0x4 is set, no assumptions can be made about RNAME, POS, CIGAR, MAPQ, and bits 0x2, 0x100, and 0x800. That is, if the unmapped flag is set, then there is not a specific ""correct"" setting for these other fields, since they should most likely be ignored anyway. That being said, concordant with some small changes in the [most-recent RapMap](https://github.com/COMBINE-lab/RapMap/releases/tag/v0.4.0), the CIGAR string will be set to `*` for unmapped reads in future versions of Salmon. We may consider setting other fields to `*` for unmapped reads to simplify the output, but, as the SAM spec suggests, these fields offer quite a bit of freedom in terms of ""legal"" values if the unmapped flag is set anyway.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/94#issuecomment-250350189:603,release,releases,603,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/94#issuecomment-250350189,2,['release'],['releases']
Deployability,"Hi @vasisht,. Here is a pre-compiled binary of a hotfix that should resolve this issue. The bug will be fixed in the 0.8.1 release that should appear by Monday. However, there are one or two other things I want to include in that release, so I didn't tag another just yet. --Rob. [Salmon-latest_linux_x86_64.tar.gz](https://github.com/COMBINE-lab/salmon/files/812143/Salmon-latest_linux_x86_64.tar.gz)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/123#issuecomment-283484721:49,hotfix,hotfix,49,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/123#issuecomment-283484721,3,"['hotfix', 'release']","['hotfix', 'release']"
Deployability,"Hi @vertesy ,. Thanks for asking the very interesting question.; I'd say the answer might depend on what's your downstream use case. Traditionally, no quantification pipeline, in my knowledge, has used the pre-mRNA counts alone to bump up the gene counts, however, recent method of estimating RNA-velocity does utilizes the intronic counts for extracting the ratio of spliced/unspliced counts. If you are interested in disjoint signals (gene count matrix) for spliced and unspliced molecules you can use the recent scheme of decoy indexing from our latest [preprint](https://www.biorxiv.org/content/10.1101/657874v2). We (mostly @csoneson) have been testing alevin with following scheme for generating spliced and unspliced counts. 1.) Spliced Counts: Index transcriptome w/ pre-mRNA sequence as the decoys.; 2) Unspliced Counts: Index pre-mRNA sequence w/ transcriptome as the decoys. The third case is a little tricky because if you index both pre-mRNA and transcriptome, due to relatively longer length of pre-mRNA sequence compared to transcripts it might end-up biasing the UMI deduplication algorithm towards unspliced counts. To summarize, the best way to have an additive spliced and unspliced counts is still an open area of research.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/450#issuecomment-555136444:166,pipeline,pipeline,166,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/450#issuecomment-555136444,1,['pipeline'],['pipeline']
Deployability,"Hi @vivekabarath,. The final v0.12.0 has been released and is available via both the release page on github and via bioonda, so I recommend you use the official version. Regarding your specific question, the failure of the unit tests should not be a problem and doesn't affect salmon. However there was previously an issue that could cause the `make test` to fail if `make install` was not run first. This should be resolved in the latest release as well. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/315#issuecomment-444971569:46,release,released,46,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/315#issuecomment-444971569,4,"['install', 'release']","['install', 'release', 'released']"
Deployability,"Hi @warrenmcg — Thanks for your interest in Salmon. There are actually a number of improvements since the pre-print as well! I'm very surprised as well that `curl` is not available by default on Ubuntu 14.04 (or some variants of the installation). It's actually a very common tool. One thing worth noting is that we also provide [pre-compiled binaries](https://github.com/COMBINE-lab/salmon/releases/tag/v0.6.0) for Linux and OSX, if users aren't looking for the ""bleeding-edge"" version of Salmon, or if their environment causes difficulty in compiling.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/42#issuecomment-186706128:233,install,installation,233,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/42#issuecomment-186706128,2,"['install', 'release']","['installation', 'releases']"
Deployability,"Hi @warrenmcg,. I just wanted to let you know that I'm investigating this now. It looks like this may be fixed on the latest commits to the master branch, which should become an official release soon.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/50#issuecomment-201299200:187,release,release,187,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/50#issuecomment-201299200,1,['release'],['release']
Deployability,"Hi @wmegchel ,. We have just release `v0.14.0`, we expect the memory problem to go away with the latest release. Let us know if it works out for you and feel free to close the issue.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/361#issuecomment-498040307:29,release,release,29,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/361#issuecomment-498040307,2,['release'],['release']
Deployability,"Hi @yagam-fluent,. Thanks for the excellent question. We should update the documentation regarding this option. Basically, in `salmon alevin`, we assumptions about expected read orientation are applied as ""hard filters"". That is, the behavior is equivalent to `--incompatPrior 0`, so that aligninments not in the prescribed orientation are simply not considered as invalid alignments. This is because in the case of single-cell processing, we (the community in general) currently do not have as sophisticated of probabilistic models for resolving UMI origins and gene abundances, and so algorithms typically do not take into account a ""wrong orientation"" probability. So, in `salmon alevin` if you are using alevin itself for the quantification, then hard filtering will be applied based on the expectations of `--libType`. On the other hand, if you are using `salmon alevin` to simply map the reads for subsequent processing with [`alevin-fry`](https://github.com/COMBINE-lab/alevin-fry) (i.e. `salmon alevin .... --rad` or `salmon alevin ... --sketch`), then *no* filtering is applied to mapping orientation, and instead you filter reads by orientation later in `alevin-fry`'s `generate-permit-list` step. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/749#issuecomment-1038325742:64,update,update,64,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/749#issuecomment-1038325742,2,['update'],['update']
Deployability,"Hi @zaherlab, . We recently noticed some strangeness with the bioconda build (probably recently auto-rebuilt with a new compiler) that we have to look into. Could you see if you observe the same behavior using the precompiles executable from the GitHub releases page?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/829#issuecomment-1439983916:253,release,releases,253,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/829#issuecomment-1439983916,1,['release'],['releases']
Deployability,"Hi Alex,. The appropriate way to _force_ salmon to use the library type as a hard constraint is to pass the option `--incompatPrior 0.0` on the command line. This will tell salmon that it should consider a fragment mapping different than the library type to be impossible (i.e. this mapping should simply be discarded). This will actually be the default behavior starting from the next release anyway, as the current behavior seems to confuse more people than not. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/67#issuecomment-388863963:386,release,release,386,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/67#issuecomment-388863963,2,['release'],['release']
Deployability,"Hi Andrea,. The bias correction time depends on the number of expressed transcripts. There is a flag to speed it up `--biasSpeedSamp`. It takes a value by which to downsample the fragment length pmf for bias modeling. The larger this number, the faster bias correction will become. The default is 1, and is super conservative (we are probably going to make the default 5 in the next release because it is much faster with no real difference in modeling quality). In fact, values up to at least 10 seem to work quite well with respect to the baseline. So, I'd recommend testing this parameter on a sample until you are happy with the speed, and then using that on all samples. Let me know how it goes, and if my description makes sense. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/201#issuecomment-369766969:383,release,release,383,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/201#issuecomment-369766969,1,['release'],['release']
Deployability,"Hi Andreas,. So I don't know if there is a easy way to get the specific list of reverse dependencies, but then we can cross-check it with my explicit list above:. ```; build-essential; git ; libboost-all-dev ; liblzma-dev ; libbz2-dev ; cmake ; zlib1g-dev ; curl ; unzip ; wget ; libcurl4-openssl-dev ; libtbb-dev ; libtbb12 ; liblzma-dev ; libjemalloc2 ; pkg-config ; libgff-dev; ```. One thing I noticed during build is that, while I included `libjemalloc2` here, the salmon build procedure still downloaded and built `jemalloc`. However, I don't _think_ jemalloc is the thing causing the segfault. Regarding dependencies that can't be used — the current `libstaden` is behind the upstream release. The upstream release contains an important bug fix for a bug (and suggested fix that we proposed to the developer) upon which we rely. More importantly, afaik there is no relevant `libpufferfish-dev` package (we certainly have not made one), and so there is not even e.g. a check in the `CMakeLists.txt` file. Salmon's build always tries to run `fetchPufferfish.sh` to download the relevant `pufferfish` source files needed to build `salmon`. Critically, the relevant `pufferfish` dependencies and `salmon` releases move in lockstep. Each new `salmon` release it accompanied by a new tag in the `pufferfish` repo (so that the specific source used to build a given `salmon` release is fixed and easily trackable). So, I think the easiest way to move forward is to:. * do a diff of my list of packages above with what is pulled in by `apt build-dep salmon`. * figure out why, even when `libjemalloc2` is installed, the build system tries to build `jemalloc` itself (maybe we need the dev package?). * determine what folks want to do upstream about the lockstep pufferfish dependency. Right now, the `fetchPufferfish.sh` script pulls a tagged tarball from github and checks that the sha matches, and moves the relevant source files into place. This is true both when we build our own releases as well as",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233:692,release,release,692,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464538233,2,['release'],['release']
Deployability,"Hi Avi, thanks for your detailed explanation!. From my understanding: a pre-selection of high-quality cells based on 1) CB frequency - finding the knee point (in the initial whitelisting) and 2) other features (in finalized/intelligent) whitelisting is performed in alevin, while [cell ranger count](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/algorithms/overview#cell_calling) does step 1) related to the `--expectCells` number and used an alternative method w/o knee point estimation. . Based on above, the newly included cells w/ increased number of `--expectCells` are also more likely to be filtered out in later steps using criteria such as `min of number of features/reads` detected per sample. But such filtering may not be expected if interests are also on cells with small transcriptomes such as TILs. I will try some downstream filtering to see how many good cells I can get. . Yeah it helps - thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510639440:369,pipeline,pipelines,369,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/396#issuecomment-510639440,1,['pipeline'],['pipelines']
Deployability,"Hi Bill,. One thing I noticed is that your log says :; ```; [2018-10-12 18:13:10.808] [jointLog] [warning] Removed 7582 transcripts that were sequence duplicates of indexed transcripts.; ```. while my run said:. ```; [2018-10-12 17:29:14.651] [jointLog] [warning] Removed 11851 transcripts that were sequence duplicates of indexed transcripts.; ```. that's a non-trivial difference in number. My run was from the fasta file using *this* link (ftp://ftp.ensembl.org/pub/release-94/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz). Was yours the same? Digging into the _other_ version now to see if I can find anything.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429503523:469,release,release-,469,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429503523,1,['release'],['release-']
Deployability,"Hi Gary,. Oh that's quite weird!. How do you deal with multimapping reads in the featureCounts pipeline? I haven't looked at this particular data set, but the Sandberg lab usually have very short (single end) reads, which I suspect will multimap a lot?. If you are removing multimapping reads in the featureCounts pipeline before counting, this might explain things, since any genes with ambiguously mappable sequences won't be counted. (In particular, the Sandberg lab tend to use genome references with ambiguous regions removed.)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/120#issuecomment-279979792:95,pipeline,pipeline,95,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/120#issuecomment-279979792,2,['pipeline'],['pipeline']
Deployability,"Hi Gary,. Ok, I'm out of ideas... Do the number of genes per cell at least correlate between the pipelines?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/120#issuecomment-279984140:97,pipeline,pipelines,97,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/120#issuecomment-279984140,1,['pipeline'],['pipelines']
Deployability,"Hi Gert,. Indeed, the CMake build uses `curl` for downloading relevant dependencies. Presumably, it would be possible to have a fallback to `wget` if `curl` is not available. I will look into the best way to do this. In the meantime, you should be able to use the pre-compiled binary for linux (x86-64) or install Salmon via [bioconda](https://anaconda.org/bioconda/salmon). Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-354673470:306,install,install,306,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-354673470,1,['install'],['install']
Deployability,"Hi Hamdi,. http://bioconductor.org/packages/release/bioc/vignettes/tximport/inst/doc/tximport.html has a really great description of how to use the output from Salmon with DESeq2.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-545108970:44,release,release,44,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-545108970,1,['release'],['release']
Deployability,"Hi Hari,. Some thoughts on your questions:. > I had to use mem_free=34G for building index. Is that expected?. Certainly, it is _not_ the case that index creation should require 34G of physical memory. When indexing the genome and transcriptome in dense mode, we typically expect it to require <20G of physical RAM (and <4 for just the transcriptome). However, we have noticed some strange behavior in the past about how compute clusters manage process allocation — sometimes, it seems, one must overcommit. Given the diversity of different software on which different compute clusters run, as well as the manifold way sysadmins may configure these things, we've not found a universal explanation / conclusion yet, but it does seem that the resources actually required (e.g. if you run salmon index under `/usr/bin/time` and look at the resources) are less than what should be requested. The differences in the sha256 sums are a bit strange and I don't have a great explanation for them. One difference is that I built with the head of the develop branch (which has version tag 1.3.1). That describes a difference in `versionInfo.json` but nothing upstream in the index building should have changed, so I am not sure why the other files would have different sha256 sums. I can try with the pre-compiled binary and see if my results match yours. In the meantime, please keep me posted. If index building ends up worth for you with a different configuration, it would be good to check this off of our list of TODOs, and if not, it would be good to get to the bottom of it. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/561#issuecomment-674528707:1442,configurat,configuration,1442,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/561#issuecomment-674528707,1,['configurat'],['configuration']
Deployability,"Hi Jamal,. Can you say something about the hardware (specifically, the CPU) you are running on? It looks like the compiles code contains a hardware instruction not supported by your CPU. Also, could you check if the precompiled linux binary from the tagged GitHub release has the same issur for you? Compiling from source would fix this for you, but thats probably more trouble than it's worth if there is another path.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/458#issuecomment-559801533:264,release,release,264,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/458#issuecomment-559801533,1,['release'],['release']
Deployability,"Hi Josh,. We've released 1.5.2 that incorporates these changes. Let me know if everything works from your end. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-885640975:16,release,released,16,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-885640975,1,['release'],['released']
Deployability,"Hi Kadir,. How significant are the differences? There is a stochastic component to the algorithm, so one would not generally expect identical results between runs. However, differences should be small. The use of the `-g` flag should not affect transcript level inference, since the aggregation to gene-level abundances is done post-facto (i.e. after all transcript-level abundances have been estimated). Nonetheless, [tximport](https://bioconductor.org/packages/release/bioc/html/tximport.html) is the recommended way to aggregate transcript-level inferences to the gene level. The `-g` option predates the existence of that package and exists mostly for backward compatibility.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/169#issuecomment-341436830:463,release,release,463,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/169#issuecomment-341436830,1,['release'],['release']
Deployability,"Hi Kimon,. I was able to access the file with no problem. Unfortunately, I don't seem able to reproduce the issue! I grabbed the 0.7.1 release, in case there were any differences between that and the latest develop version that I usually use, and I tried to index your fasta. ```; ./salmon index -t ~/salmon/build/Homo_sapiens.GRCh37.transcripts.fa -i idx; Version Info: ### A newer version of Salmon is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains some new features and minor bug fixes; please upgrade at your; earliest convenience.; ###; index [""idx""] did not previously exist . . . creating it; [2016-11-04 12:41:37.805] [jLog] [info] building index; RapMap Indexer. [Step 1 of 4] : counting k-mers; counted k-mers for 30000 transcripts[2016-11-04 12:41:39.312] [jointLog] [warning] Entry with header [ENST00000415118], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.312] [jointLog] [warning] Entry with header [ENST00000434970], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.312] [jointLog] [warning] Entry with header [ENST00000448914], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.380] [jointLog] [warning] Entry with header [ENST00000439842], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.380] [jointLog] [warning] Entry with header [ENST00000390567], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.380] [jointLog] [warning] Entry with header [ENST00000452198], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.380] [jointLog] [warning] Entry with header [ENST00000390569], had length less than the k-mer length of 31 (perhaps after poly-A clipping); [2016-11-04 12:41:39.380] [jointLog] [warning] Entry with header [EN",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/100#issuecomment-258484912:135,release,release,135,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/100#issuecomment-258484912,3,"['release', 'upgrade']","['release', 'releases', 'upgrade']"
Deployability,"Hi Kristoffer,. The duplicate transcript issue is a frustrating one. It came to our attention when we noticed that ensembl often annotated transcripts on patch / haplotype contigs that were identical and unlikely to be different from more ""canonical"" transcripts in any way. Further, these transcripts are indistinguishable from the quantification perspective. That being said, the removal of sequence duplicate transcripts is optional in Salmon. If you pass `--keepDuplicates` to the indexer, it wont remove them. Also, Salmon does record, in the index directory, the ""collapsing map"". Specifically, there is a tsv file that record, for every collapsed transcript, the transcript that was sequence identical and retained in the index. You can use this map to recover the abundances for the collapsed transcripts, since they are all sequence identical, they should all have an abundance of x / num duplicates (where x is the abundance of the retained transcript). I hope this info helps. Let me know if there is anything else i can clarify or help with. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-381580235:154,patch,patch,154,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-381580235,1,['patch'],['patch']
Deployability,"Hi Maya,. You can try the solution posed over in issue #192. That should install the newer version via bioconda. I'll also mention that version 0.10 should land sometime early this coming week, so keep an eye out for this update . Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-392336534:73,install,install,73,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-392336534,2,"['install', 'update']","['install', 'update']"
Deployability,"Hi Mike,. Glad to hear this fixes it. I pushed a commit that does the check, prints out a useful error message (that suggests how you can make a compatible transcriptome fasta) and then bails. Regarding the `libParams` directory --- that is actually a somewhat anachronistic directory anyway. Currently, I've been moving all of the parameters into their own (gzipped) files in the `aux_info` directory. I've kept `libParams` there for backward compatibility sake, but I think it's confusing if the fld appears in multiple places, but the other parameters appear somewhere else, so perhaps it's time to remove it (and note such in the next version's release notes).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267610178:649,release,release,649,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267610178,1,['release'],['release']
Deployability,"Hi Nate,. Can you tell me / do you know how boost was compiled? The error you're getting looks like what happens when the version of boost against which salmon is attempting to link was not built with >= C++11. Basically, the newest version of salmon requires C++14 (which GCC 8 obviously supports). However, there are binary incompatibilities between pre-C++11 and post-C++11 code libraries. So, whatever version of boost you link against must have been compiled with at least `--std=c++11`. One option is to let salmon fetch and build boost for you by putting `-DFETCH_BOOST=TRUE` in the cmake configuration flags when calling `cmake`. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-436830925:596,configurat,configuration,596,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/309#issuecomment-436830925,1,['configurat'],['configuration']
Deployability,"Hi Nazeeefa,. Is the relevant file `libtbbmalloc_proxy.so.2` actually present in that directory? What are the contents of `path/to/salmondir/lib`? If you are in an environment with bioconda, you can also try installing tbb through that system as well to ensure you have the shared library. Unfortunately, TBB is pretty much the one library that is not possible to link statically. Also, which shell are you using? The syntax for exporting an environment variable is different in different shells.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/219#issuecomment-386299893:208,install,installing,208,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/219#issuecomment-386299893,1,['install'],['installing']
Deployability,"Hi Nick,. If that doesn't work, you can use [this](https://github.com/COMBINE-lab/salmon/files/197982/SalmonBeta-0.6.5-pre_CentOS5.tar.gz) salmon executable to try the perfect hash indexing. If you pass the `--perfectHash` flag when indexing, it will use the minimum perfect hash rather than Google's dense hash. Also, please use this executable anyway when _quantifying_ your reads, as it fixes a potential bug with 64-bit indices in the older release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/53#issuecomment-203994051:445,release,release,445,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/53#issuecomment-203994051,1,['release'],['release']
Deployability,"Hi Nick,. No problem at all; sorry for not providing a better explanation (I'm planning on writing one up for when this feature is listed in the next official release). In terms of strategy, my recommendation would be to use the default (the `dense hash`) unless indexing memory becomes a problem. The main differences are the following:; - The perfect hash uses an external memory algorithm to construct the hash function, and so requires less memory.; - Because the perfect hash function is built in external memory, **construction** of the hash using this data structure is sower. I don't have longitudinal benchmarks, but it is somewhere between 2 and 5x slower to populate the perfect hash than the dense hash.; - Once constructed, the perfect hash is _considerably_ smaller, and so quantification on an index built using a perfect hash will require only ~50% of the memory that is required when using a dense hash. Obviously if you're quantifying on the same machine that was able to build the index, this isn't a problem. However, if you're shipping the index to smaller memory computers, then this is something to consider.; - The performance difference in terms of mapping speed is very minimal; the minimum perfect hash can be 5-10% slower than the dense hash, but this difference is usually only a matter of seconds. Also, the total runtime difference can be even less since the smaller perfect hash can be read more quickly from disk than the larger dense hash. So, the standard recommendation would be use the default unless you run into memory problems building the index; in that case, try enabling the `--perfectHash` flag.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/53#issuecomment-204069238:159,release,release,159,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/53#issuecomment-204069238,1,['release'],['release']
Deployability,"Hi Peter,. Obviously, I got tied up with other obligations a bit longer than I thought! Sorry for the delay. Anyway, I've run both of these samples with the newest release, using parameters as close as I can (given that the bias correction flags have changed in 0.7.0). Both samples seem to run cleanly. Would you mind testing with the latest release and seeing if the issue is resolved? Here is the procedure I used:. Index with k=19 (I think this is what you did), using the default `quasi` index. ```; > salmon index -t Canis_familiaris.CanFam3.1.cdna.all.fa.gz -i index -k 19; ```. Run sample `SRR636842`:. ```; > salmon quant -i index -p 16 -l IU -1 SRR636842_1.fastq.gz -2 SRR636842_2.fastq.gz --seqBias -o quant_SRR636842 --useVBOpt; ```. here, the mapping rate was ~78.8%. Run sample `SRR636843`:. ```; >salmon quant -i index -p 16 -l IU -1 SRR636843_1.fastq.gz -2 SRR636843_2.fastq.gz --seqBias -o quant_SRR636843 --useVBOpt; ```. here, the mapping rate was ~79.5%. The mapping rates may differ for you a bit, since I used [this](ftp://ftp.ensembl.org/pub/release-85/fasta/canis_familiaris/cdna/Canis_familiaris.CanFam3.1.cdna.all.fa.gz) Ensembl transcript set directly.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/66#issuecomment-241235054:164,release,release,164,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/66#issuecomment-241235054,3,['release'],"['release', 'release-']"
Deployability,"Hi Rachel,. So it looks like `output/hs.grch39.index/versionInfo.json` doesn't exist here? Are there any other messages that show up during indexing? Also, v0.8.1 is very outdated at this point. It might be worth checking if this issue is still popping up if you grab the latest version (available both as a linux binary from the releases page, as well as via bioconda).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/197#issuecomment-467194457:330,release,releases,330,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/197#issuecomment-467194457,1,['release'],['releases']
Deployability,"Hi Rich,. The issue with pre-compiled OSX binaries is that they are difficult to make portable across OSX versions. This is why we strongly suggest installing Salmon (especially for OSX) through [Bioconda](https://bioconda.github.io/). This greatly eases installation and updating, and doesn't require admin privileges. On OSX, you can try the following:. ```; $ conda config --add channels conda-forge; $ conda config --add channels bioconda; $ conda create -n salmon salmon=0.9.1; ```. This should take care of all relevant dependencies as well as e.g. library locations and placement. Could you please give this a try and let me know if it works for you?. Best,; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/215#issuecomment-381997508:148,install,installing,148,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/215#issuecomment-381997508,2,['install'],"['installation', 'installing']"
Deployability,"Hi Rob, . Thanks for the quick reply. I'm looking into it and will try this with an updated install of GCC >= 5.2.; The system default gcc is 4.8.5 but I set it to use a different install using environment modules to load gcc-4.9.2 but some environment variables may not have been set correctly, hence why the build file switches to a lower-version GCC but it isn't clear why it looks for 4.8.2 despite that.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-422891645:84,update,updated,84,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/296#issuecomment-422891645,6,"['install', 'update']","['install', 'updated']"
Deployability,"Hi Rob, After posting yesterdays message, I generated the vM23 index, and the alignments/quants worked. I had to use mem_free=34G for building index. Is that expected?; I will try building the vM25 index again and and post the update.; In the meantime, sha256sum of my vM25 index that I had generated has some mismatches from the one you created. Below is my sha256sum on vM25 index:; `306e9d98b3460859f579059bf876aa3b6e264c8f38c04cde332b03632edc6dfb complete_ref_lens.bin; 636b3df7e097d58fa846bd85ce650ce5bf72c66dc5b2d7566fc9e3db087c5c9c ctable.bin; 1c7501deaa4524f4700152713228cb03949775dce481384eac67bb45458508be ctg_offsets.bin; dbc575fed0d589b4671c26bd8cbcb4b3d52ef41c299a90de978ab940abb751fc duplicate_clusters.tsv; c3ec09a30adc9d47bc95839157cb2ff66530353106a4fd8e75b167ac5db67820 info.json; 430be78bae99a4592fcedc5c800a42313f2b1252e3953f89f347779056c1ee5b mphf.bin; 2fb0b5151f9f2544c06a9f95d03075f7af0494d0fe31745504a5a7da43edc1b1 pos.bin; 15d3bb6a16bcd8c1a6814852bd3dcfa439b60ec84c706f868ee7ec2d5a90581d pre_indexing.log; 8e665e5fdee5af6fcedabc69fd04eda6e66055ef811ebde6de6f86a66521198a rank.bin; 793c79f5fd6046dfea07bbc9587d2835088e54c78197d652d1b1f205c6b16983 refAccumLengths.bin; c5ea8eccca3fdc299ad7c9d2f07a4ed14c8c830940e83c315e7eaad6905a40aa ref_indexing.log; b580b9c6257254a018a9ae22291a64892c1a3715c69272637f5c504fc5545a70 reflengths.bin; 89679603ac0b28042275e5ff04b222bad3fd431cab573f0c2b61e7455aec43e7 refseq.bin; 46bf28001e00d491b68bf8758b99c1f304523c79bd94a97d7797888856594e84 seq.bin; 4c7e56ba28383774e786826099ef412761326fe18ce69f29033ad2886542985d versionInfo.json; `; Following are different.; `ctable.bin; info.json; mphf.bin; pos.bin; pre_indexing.log; ref_indexing.log; seq.bin; versionInfo.json`. I will try creating the vM25 index with increased memory. Wonder if its not building. Just FYI, my sha256sum on vM23 index is:; `9788716f4ce42b049fe7e865108f45392bb8a5847cfcd47369512783dc918239 complete_ref_lens.bin; 9c2453a47ce1808f54733f049b8c4cf38634c9116eb55ed725b73219caa",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/561#issuecomment-674527480:227,update,update,227,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/561#issuecomment-674527480,1,['update'],['update']
Deployability,"Hi Rob, thanks for the quick reply.; I tried what you suggested and I tried with adding the bioconda channel but still got the same error, however adding the conda-forge and bioconda channels to the conda config solved it. Maybe it needed access to conda-forge to find the boost and libcxx packages?. ```; $ conda config --add channels conda-forge; $ conda config --add channels bioconda; $ conda create -n salmon salmon=0.9.1; Solving environment: done. ## Package Plan ##. environment location: /Users/Jb_Macbook/miniconda3/envs/salmon. added / updated specs: ; - salmon=0.9.1. The following packages will be downloaded:. package | build; ---------------------------|-----------------; tk-8.6.7 | 0 3.0 MB conda-forge; mkl_random-1.0.1 | py36_0 371 KB conda-forge; boost-1.64.0 | py36_4 304 KB conda-forge; libiconv-1.15 | 0 1.3 MB conda-forge; clangdev-4.0.0 | default_0 62.8 MB conda-forge; bzip2-1.0.6 | 1 145 KB conda-forge; xz-5.2.3 | 0 304 KB conda-forge; certifi-2018.1.18 | py36_0 143 KB conda-forge; pip-9.0.3 | py36_0 1.7 MB conda-forge; tbb-2018_20171205 | 0 404 KB conda-forge; boost-cpp-1.64.0 | 1 16.2 MB conda-forge; ncurses-5.9 | 10 1.1 MB conda-forge; jemalloc-4.5.0 | 0 4.1 MB bioconda; salmon-0.9.1 | 1 2.6 MB bioconda; numpy-1.14.2 | py36ha9ae307_1 4.0 MB; sqlite-3.20.1 | 2 1.4 MB conda-forge; setuptools-39.0.1 | py36_0 552 KB conda-forge; llvmdev-4.0.0 | default_0 100.9 MB conda-forge; icu-58.2 | 0 22.7 MB conda-forge; readline-7.0 | 0 383 KB conda-forge; libcxx-4.0.0 | 1 1.1 MB conda-forge; zlib-1.2.11 | 0 95 KB conda-forge; libxml2-2.9.8 | 0 1.9 MB conda-forge; wheel-0.31.0 | py36_0 62 KB conda-forge; python-3.6.5 | 1 13.9 MB conda-forge; mkl_fft-1.0.1 | py36_1 146 KB conda-forge; ------------------------------------------------------------; Total: 241.7 MB; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-379821279:547,update,updated,547,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-379821279,1,['update'],['updated']
Deployability,"Hi Rob,. A colleague did the alignment, using some really old Ensembl version (ftp://ftp.ensembl.org/pub/release-79/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz). For the example I gave I used the current version, which should be +/- the same (ftp://ftp.ensembl.org/pub/release-94/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz). Thanks!. Jim",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429465245:105,release,release-,105,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/301#issuecomment-429465245,2,['release'],['release-']
Deployability,"Hi Rob,. I don't have git (don't have root access on the red hat server im on). I downloaded the salmon-master.zip, and then tried running the following:. ```; [bernsteinnj@lngnode1 salmon-master]$ cmake . . -- The C compiler identification is GNU 4.4.7; -- The CXX compiler identification is GNU 4.4.7; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; CMake Error at CMakeLists.txt:69 (message):; Salmon requires g++ 4.7 or greater.; ```. I'm trying now with -k 27 with the original build I had. Keep you updated. Best",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/53#issuecomment-203018082:819,update,updated,819,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/53#issuecomment-203018082,1,['update'],['updated']
Deployability,"Hi Rob,. I'm running from the empty directory 'build'. The cmake file and folder you mention are not there. . I downloaded here https://github.com/COMBINE-lab/salmon/releases: salmon-0.12.0_linux_x86_64.tar.gz. Unpacked it. Went into directory 'salmon-0.12.0_linux_x86_6'. Created new dir build/ (same level as bin and lib). Installed cmake with sudo apt-get. Attempted to run cmake from build/. . If I just type 'cmake':; Usage. cmake [options] <path-to-source>; cmake [options] <path-to-existing-build>. Specify a source directory to (re-)generate a build system for it in the; current working directory. Specify an existing build directory to; re-generate its build system. Run 'cmake --help' for more information. So it looks installed I would think.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449066012:166,release,releases,166,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/139#issuecomment-449066012,3,"['Install', 'install', 'release']","['Installed', 'installed', 'releases']"
Deployability,"Hi Rob,. Seems to work great! Thanks for the updates!. I would consider this issue closed!. -Josh",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-885683822:45,update,updates,45,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/688#issuecomment-885683822,1,['update'],['updates']
Deployability,"Hi Rob,. TBB was already installed. It's the path to TBB files was missing in .bashrc, it seems to work fine now! I am using bash. Cheers!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/219#issuecomment-386827231:25,install,installed,25,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/219#issuecomment-386827231,1,['install'],['installed']
Deployability,"Hi Rob,. Thank you so much for the explanation! Most of the samples were 80-85%, but some did dip as low as 75%; I ran FASTQC on all the samples before running the pipeline and they all looked fine (quite good quality, in fact). I also checked the `lib_format_counts.json` file for a few of the ""problem"" samples and it looks as you'd expect (~99% of reads map consistent with ISR orientation). Are there other diagnostics you might recommend running?. Thanks so much,; Ryan",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/819#issuecomment-1358573944:164,pipeline,pipeline,164,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/819#issuecomment-1358573944,1,['pipeline'],['pipeline']
Deployability,"Hi Rob,. Thanks for the update. I’ll see about setting up a Linux box in the morning and trying the v1.3.1. I expected some reads to be discharged as this is a mixed intestinal sample so there is likely a lot of bacterial rna as we used rRNA depletion not polyA; selection. We were hoping to align to both the mouse genome and one of the bacteria species of interest. . Given the several orders of magnitude difference in discarded alignments between mine on 1.2.1 and your test run on 1.3.1, would you recommend I redo the whole dataset alignment on 1.3.1? If it runs even close to what you saw it shouldn’t take too long; to rerun. . Thanks again,. Ryan. Sent from my iPhone. On Jun 16, 2020, at 12:13 AM, Rob Patro <notifications@github.com> wrote:. ﻿. I processed the data above using the latest salmon from the develop branch; (the release candidate for 1.3.0), and I got the following time (used 8; threads, so timing is not directly comparable). ```; 4604.57user 43.64system 9:24.15elapsed 823%CPU; ```. The whole log is. ```; [2020-06-15 23:51:54.747] [jointLog] [info] setting maxHashResizeThreads to; 8; [2020-06-15 23:51:54.747] [jointLog] [info] Fragment incompatibility prior; below threshold. Incompatible fragments will be ignored.; [2020-06-15 23:51:54.747] [jointLog] [info] Usage of --validateMappings; implies use of minScoreFraction. Since not explicitly specified, it is; being set to 0.65; [2020-06-15 23:51:54.747] [jointLog] [info] Usage of --validateMappings; implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-06-15 23:51:54.747] [jointLog] [info] parsing read library format; [2020-06-15 23:51:54.747] [jointLog] [info] There is 1 library.; [2020-06-15 23:51:54.814] [jointLog] [info] Loading pufferfish index; [2020-06-15 23:51:54.814] [jointLog] [info] Loading dense pufferfish index.; [2020-06-15 23:51:55.555] [jointLog] [info] done; [2020-06-15 23:51:55.555] [jointLog] [info] Index contained 116,248 targets; [2020-06-15 23:51:55.588] [jo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644527727:24,update,update,24,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644527727,2,"['release', 'update']","['release', 'update']"
Deployability,"Hi Rob,. Thanks for your reply. When I run salmon --version I get this:. ```; <jemalloc>: MADV_DONTNEED does not work (memset will be used instead); <jemalloc>: (This is the expected behaviour if you are running under QEMU); salmon 1.10.2; ```. I'm running the script using Nextflow in a Docker container. However whether I run the script locally, within Nextflow or on a HPC cluster, it weirdly runs using salmon v0.14.1 (despite me specifying in my environment.yml file to use 1.10.2) and gives the same error. I also installed Salmon through a bioconda channel, not sure if that has any impact. On your last point - I haven't noticed different versions being used but I'll look out for this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1766370214:520,install,installed,520,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/881#issuecomment-1766370214,1,['install'],['installed']
Deployability,"Hi Rob,. Thanks. Sorry for the delay. I’ll give it a try next week. I decided that for my stuff, the full STAR->HTSeq pipeline was more appropriate (nuclear RNAseq..lots of intron). -Alex. > On Feb 17, 2017, at 10:21 AM, Rob Patro <notifications@github.com> wrote:; > ; > Hi @achamess <https://github.com/achamess>, Can you let me know if the solution suggested above works for you?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/COMBINE-lab/salmon/issues/117#issuecomment-280678281>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AHGbcn1bUjqrMtLwp_HXNId583d_aXSlks5rdbsBgaJpZM4L3UvG>.; >",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/117#issuecomment-280679945:118,pipeline,pipeline,118,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/117#issuecomment-280679945,1,['pipeline'],['pipeline']
Deployability,"Hi Rob,. The file that I am building the index on is a cdna.all fasta file from Ensembl, ; exactly this one here : ftp://ftp.ensembl.org/pub/release-91/fasta/caenorhabditis_elegans/cdna/Caenorhabditis_elegans.WBcel235.cdna.all.fa.gz . . It was unzipped and then used with `salmon index`. ; This is the log of the indexing process:; ```; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; [2018-03-20 17:41:44.417] [jLog] [info] building index; RapMap Indexer. [Step 1 of 4] : counting k-mers; [2018-03-20 17:41:48.639] [jointLog] [warning] Entry with header [W03F8.6d], had length less than the k-mer length of 31 (perhaps after poly-A clipping); Elapsed time: 4.82575s. [2018-03-20 17:41:49.262] [jointLog] [warning] Removed 414 transcripts that were sequence duplicates of indexed transcripts.; [2018-03-20 17:41:49.263] [jointLog] [warning] If you wish to retain duplicate transcripts, please use the `--keepDuplicates` flag; Replaced 0 non-ATCG nucleotides; Clipped poly-A tails from 20 transcripts; Building rank-select dictionary and saving to disk done; Elapsed time: 0.0570225s; Writing sequence data to file . . . done; Elapsed time: 0.286971s; [info] Building 32-bit suffix array (length of generalized text is 56718041); Building suffix array . . . success; saving to disk . . . done; Elapsed time: 0.959095s; done; Elapsed time: 8.1189s; ^M^Mprocessed 0 positions^M^Mprocessed 1000000 positions^M^Mprocessed 2000000 positions^M^Mprocessed 3000000 positions^M^Mprocessed 4000000 positions^M^Mprocessed 5000000 positions^M^Mprocessed 6000000 positions^M^Mprocessed 7000000 positions^M^Mprocessed 8000000 positions^M^Mprocessed 9000000 positions^M^Mprocessed 10000000 positions^M^Mprocessed 11000000 positions^M^Mprocessed 12000000 positions^M^Mprocessed 13000000 positions^M^Mprocessed 14000000 positions^M^Mprocessed 15000000 positions^M^Mprocessed 16000000 positions^M^Mprocessed 17000000 position",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-376093497:141,release,release-,141,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/210#issuecomment-376093497,3,"['release', 'upgrade']","['release-', 'upgrade', 'upgrades']"
Deployability,"Hi Rob,. thanks a lot for your quick response and apologies for misdiagnosing my problem earlier. ## Data sources. The dataset I am looking at is from the SRA e.g. [this experiment](http://www.ebi.ac.uk/ena/data/view/SRR1033785). My workflow uses thes following genome sequence:; - Mus_musculus.GRCm38.dna.primary_assembly.fa.gz; - ftp://ftp.ensembl.org/pub/release-86/fasta/mus_musculus/dna/Mus_musculus.GRCm38.dna.primary_assembly.fa.gz). the following transcripts fasta files (concatenated before use):; - Mus_musculus.GRCm38.cdna.all.fa.gz; - ftp://ftp.ensembl.org/pub/release-86/fasta/mus_musculus/cdna/Mus_musculus.GRCm38.cdna.all.fa.gz; - Mus_musculus.GRCm38.ncrna.fa.gz; - ftp://ftp.ensembl.org/pub/release-86/fasta/mus_musculus/ncrna/Mus_musculus.GRCm38.ncrna.fa.gz. and this gene annotation file; - Mus_musculus.GRCm38.86.gtf.gz; - ftp://ftp.ensembl.org/pub/release-86/gtf/mus_musculus/Mus_musculus.GRCm38.86.gtf.gz. all from ensembl version 86. ## Workflow; - I built a STAR index with the GTF and genome FASTA files listed above. ; - The FASTQ files were extracted from the SRA experiment with [fastq-dump](https://trace.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=toolkit_doc&f=fastq-dump).; - Reads were aligned with STAR to the index and `unsorted` alignments to the transcriptome were returned (this keeps the paired-ends next to each other). I noticed that the cDNA FASTA files from ensembl include the transcript version, e.g. `ENSMUST00000178537.1` in the FASTA header. The GTF file specifies the transcript id and its version in different fields. Therefore, the STAR index does not include the version suffix. Instead, only the transcript ids are listed, e.g. `ENSMUST00000178537`. To provide a FASTA file with transcript identifiers that match those in STAR's BAM file, I pre-processed Ensembl's FASTA file with the following command:. ```; wget ftp://ftp.ensembl.org/pub/release-86/fasta/mus_musculus/cdna/Mus_musculus.GRCm38.cdna.all.fa.gz; gunzip Mus_musculus.GRCm38.cdna.all.fa.g",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-261744459:358,release,release-,358,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-261744459,4,['release'],['release-']
Deployability,"Hi Rob-. Might be worth noting that ``` conda install -c bioconda salmon ``` automatically installs v0.8.1 for me, but followed your previous suggestion to upgrade to v0.12.0 (https://github.com/COMBINE-lab/salmon/issues/192). Even with this upgrade, I still have the same issue where versionInfo.json is not outputted at all . <img width=""1080"" alt=""screen shot 2019-02-25 at 2 19 55 pm"" src=""https://user-images.githubusercontent.com/18176863/53372728-7d868400-3908-11e9-9564-ced6045d5a88.png"">; <img width=""1197"" alt=""screen shot 2019-02-25 at 2 24 35 pm"" src=""https://user-images.githubusercontent.com/18176863/53372992-27fea700-3909-11e9-9210-18d6282fe630.png"">; <img width=""1240"" alt=""screen shot 2019-02-25 at 2 24 49 pm"" src=""https://user-images.githubusercontent.com/18176863/53372996-292fd400-3909-11e9-8c57-c8835cb3fa0d.png"">",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/197#issuecomment-467209019:46,install,install,46,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/197#issuecomment-467209019,4,"['install', 'upgrade']","['install', 'installs', 'upgrade']"
Deployability,"Hi Rob. I thought about this a little bit more. I am confused. We build the index from decoys. My understanding is that only reads that map to the decoy will be quantified. I am surprised to see that the name for mapped reads would show up in the unmapped_names.txt file. It seems like I need to use something like. Grep -v “$d”. to find the reads that did not map. Is this correct? I have been given the task of exploring our unmapped reads. Running grep is not a big deal. I just want to make sure I do not mess up my downstream analysis. By the way our lab is a huge fan of Salmon. ctrl.1.unmapped]$ cut -d "" "" -f 2 aux_info/unmapped_names.txt | sort | uniq -c; 519916 d; 39097 m1; 34534 m2; 747447 u. Kind regards. Andy. From: Rob Patro ***@***.***>; Reply-To: COMBINE-lab/salmon ***@***.***>; Date: Thursday, May 6, 2021 at 1:53 PM; To: COMBINE-lab/salmon ***@***.***>; Cc: ""andrew e. davidson"" ***@***.***>, Mention ***@***.***>; Subject: Re: [COMBINE-lab/salmon] salmon --writeUnmappedNames produced undocumented result (#657). Hi @aedavids<https://github.com/aedavids>,. Thanks for catching that this is undocumented! This means that the mapping type was determined as mapping to a decoy sequence. When we added this output into the code, the documentation wasn't updated accordingly. We'll update the documentation. Best,; Rob. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/COMBINE-lab/salmon/issues/657#issuecomment-833857753>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AN3VWAQ35L6PU3DKXYIM4ODTML6TPANCNFSM44HLOFXQ>.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/657#issuecomment-833928924:1272,update,updated,1272,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/657#issuecomment-833928924,4,['update'],"['update', 'updated']"
Deployability,"Hi Ryan,. The difficulty is, indeed, exactly as you specify. Given a single-end read, one does not know the length of the _fragment_ from which it originates. In this case the ""right"" thing to do (the best thing we can do) is to consider the read as starting / ending a fragment of every possible length allowed by the user-provided fragment length distribution (with the contribution of each possible fragment weighted by the probability of observing a fragment of that length). In order to make this computationally feasible, one would have to do some clever pre-computation and thing a bit more about how to efficiently update the observed GC model (right now, each mapping contributes a single weight to the model, but under the naive implementation in the single-end case, each mapping would contribute different weights to each bin of the observed GC-bias curve, which would slow things down considerably). Also, as you point out, the quality of the correction would depend somewhat on the user providing appropriate parameters for the fragment length distribution mean and standard deviation — but this seems reasonable in the single-end case. That being said, I'm sure there's a way to handle this efficiently, I'd just have to think about it a bit. Regarding your second question; Salmon learns the fragment length distribution in paired-end data, but not with single-end data. Single-end data can provide a little bit of information (e.g. there is in upper bound on fragment lengths that one can infer based on single-end reads based on how far they map from the end of the transcript), but not enough information to reliably infer a fragment length distribution. cc @mikelove in case he has any thoughts on this.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/83#issuecomment-243833424:623,update,update,623,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/83#issuecomment-243833424,2,['update'],['update']
Deployability,"Hi Ryan,. You're right. This fact is not documented and it should be. I'll update the docs to address this. Using the `A` library type with pre-computed alignments has one additional complication that doesn't arise in the quasi-mapping mode. That is, many aligners offer the user the capability of aligning the reads with a prescribed library type (e.g. TopHat, HISAT, etc.), so that in this case the implied library type depends not only on how the reads map to the underlying transcriptome, but also on the parameters with which the reads were aligned with the upstream alignment tool. . However, I don't suppose this needs to be a ""blocking"" technicality. I'll add this feature to the list for the next minor release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/79#issuecomment-241603077:75,update,update,75,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/79#issuecomment-241603077,2,"['release', 'update']","['release', 'update']"
Deployability,"Hi Ryan,; I was looking at the output matrix. It seems the count values are in scientific notations like e-7. Not sure how that happened and it's not happening at my end. I'll check what can be done. Thanks again for reporting this. Regarding the binary file parsing, we recently optimize the output format for Alevin and have updated the python parser. We are still working on updating R parser, will update here once stable.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/380#issuecomment-502788751:327,update,updated,327,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/380#issuecomment-502788751,2,['update'],"['update', 'updated']"
Deployability,"Hi Stephen,. So, the variation you see when you re-run salmon multiple times is _expected_ to be different (and _much_ smaller) than the variance you see when bootstrapping. Why is this? When you re-run salmon, the only variance you are seeing is due to small differences in the order of observations / updates from the streaming collapsed variational Bayes phase of the algorithm. This, in turn can have a _slight_ effect on the initialization conditions of the offline phase of the algorithm, and some of the parameters learned for the auxiliary parameters. However, in each run, you are observing _exactly_ the same set of reads and salmon is producing _exactly_ the same set of alignments; only the order and therefore some of the streaming updates change. So, we expect the final estimated abundances to be _very_ similar to each other. However, when salmon performs bootstrapping, it is actually resampling _with replacement_, from the counts of the range-factorized equivalence classes. Roughly, we expect this resampling to be similar to if we re-sampled _with replacement_ from the original set of input reads. That is, we are re-sampling from our population sample — the observed set of reads — to estimate the variance due to inference. So, for the bootstrap re-samplings, we expect significantly more variance than between subsequent runs of salmon, because the observations from which we are making the inference are actually changing. It is possible e.g. that some uniquely mapped reads may not be chosen in some bootstrap sample (since we are re-sampling the observed read count, but doing so _with replacement_), and so the estimates of sets of related isoforms will change in those samples. Thus, since the observations themselves are changing, we expect the estimates to display greater variance. In fact, this is the main goal of performing the bootstrapping (or Gibbs sampling) — to estimate the uncertainty due to inference if we had observed many reads coming from the same under",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/466#issuecomment-568828362:303,update,updates,303,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/466#issuecomment-568828362,4,['update'],['updates']
Deployability,"Hi Valentine,. Thanks for reporting this! Do you have any recollection of what option might be incompatible with Gibbs? Specifically, it's interesting that it doesn't work with Gibbs (it looks like you're getting `std::numeric_limits<double>::min()` everywhere) but works with Bootstrapping. I will certainly look into this and will document (and make an explicit warning) any known incompatibilities in the next release. I'd very much like to fix the issue with Gibbs sampling, as it's substantially faster than bootstrapping for a large number of samples. Actually, there's a fairly substantial upgrade to the bias modeling that is just about ready and will be part of the next release (which is, in fact, what has delayed v0.7.0 for so long). Regarding converting counts back to TPM, what you're doing there looks like it's actually converting to NPM (nucleotides per million) which is a relative abundance measure that is not normalized for transcript length. To get TPM estimates from the bootstrap numbers what you would want to do would be something like: `TPM = 1e6 * ((bootstraps / effective_lengths) / (bootstraps / effective_lengths).sum())`. --Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/58#issuecomment-218589200:413,release,release,413,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/58#issuecomment-218589200,3,"['release', 'upgrade']","['release', 'upgrade']"
Deployability,"Hi again @GWW,. We have a hotfix for this that we are currently testing, but feel free to try it out if you have a chance. If you download the source from [here](https://github.com/COMBINE-lab/salmon/archive/hash-resize-hotfix.zip), or checkout the branch `hash-resize-hotfix`, you can pass alevin an extra hidden option `--maxHashResizeThreads` that allows you to limit the maximum number of threads used during the hash table resize. If you use `--maxHashResizeThreads 1`, at most one extra thread should be created during hash table resizing. Hopefully, this should fix the issue occurring in your execution environment. If so, please let us know so we can merge the fix back into develop (and then master).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395907924:26,hotfix,hotfix,26,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-395907924,3,['hotfix'],['hotfix']
Deployability,"Hi again,. Together with Mark Miller (JHPCE's admin) we ran more tests. We verified that `Salmon` does indeed use at least 2 threads so now I'm always requesting 2 from SGE. We also noticed that when the jobs fail due to memory (the actual issue in this thread) they fail after the `There is 1 library` message as shown below for one test:. ```; [2017-04-05 14:28:09.021] [jointLog] [info] parsing read library format; [2017-04-05 14:28:09.035] [jointLog] [info] There is 1 library.; terminate called without an active exception; /cm/local/apps/sge/var/spool/compute-064/job_scripts/420662: line 31: 28651 Aborted (core dumped) /dcl01/lieber/ajaffe/Emily/RNAseq-pipelin; e/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant -i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode; .v25.transcripts -p 1 -l ISR -1 ${FILE1} -2 ${FILE2} -o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test7/${ID}; ```. Files that work well, keep on going:. ```; [2017-04-05 14:30:23.757] [jointLog] [info] parsing read library format; [2017-04-05 14:30:23.767] [jointLog] [info] There is 1 library.; [2017-04-05 14:30:24.378] [jointLog] [info] Loading Quasi index; ```. I don't know if that hint makes you suspect anything in `Salmon`. . Now, for some tests only task 2 runs and it turns out that task 2 has a smaller fastq file than the other 2:. ```bash; $ ls -lh merged_fastq/R1000[1-3]*; -rw-r--r-- 1 lcollado lieber_jaffe 6.2G Feb 20 12:39 merged_fastq/R10001_D2B1WACXX.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 6.3G Feb 20 12:40 merged_fastq/R10001_D2B1WACXX_read2.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 4.6G Feb 20 12:42 merged_fastq/R10002_C29P7ACXX.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 4.7G Feb 20 12:44 merged_fastq/R10002_C29P7ACXX_read2.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 7.1G Feb 20 12:47 merged_fastq/R10003_D19KGACXX.fastq.gz; -rw-r--r-- 1 lcollado lieber_jaffe 7.1G Feb 20 12:50 merged_fastq/R10003_D19KGACXX_read2.fastq.g",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:762,pipeline,pipeline,762,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"Hi all - this looks like an old version of Trinity. I'd suggest upgrading. For any version of Trinity, you can look at the Dockerfile to see what the; corresponding compatibilities are for versions that get co-installed for a; fully functional package. For example, in the current release, you'll find:. https://github.com/trinityrnaseq/trinityrnaseq/blob/5ce78d2b6d63aaae9fe491408311ebaf158deaa6/Docker/Dockerfile#L235. best,. ~brian. On Fri, Feb 24, 2023 at 1:19 PM Rob Patro ***@***.***> wrote:. > I am not sure how the index here was created, but the actual error; > signifies that you are attempting to quantify the assembled transcripts; > using a recent version of salmon (1.9.0 in this case) against an index; > that was created by a *very old* version of salmon (pre 1.0). This is not; > supported, as the index format completely changed between pre v1.0 and post; > v1.0, and newer versions rely on a completely different data structure.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/832#issuecomment-1444189059>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABZRKX5M6TN6DEQJQCP2AALWZD3TRANCNFSM6AAAAAAVHFUQRA>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >. -- ; --; Brian J. Haas; The Broad Institute; http://broadinstitute.org/~bhaas <http://broad.mit.edu/~bhaas>",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/832#issuecomment-1444289845:210,install,installed,210,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/832#issuecomment-1444289845,2,"['install', 'release']","['installed', 'release']"
Deployability,"Hi all,. bit of a manual workaround, but for each missing package I searched anaconda https://anaconda.org/, downloaded the package manually from downloads then installed the latest build of salmon using . conda install -c bioconda/label/main salmon. Hope this helps",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/308#issuecomment-507332196:161,install,installed,161,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/308#issuecomment-507332196,2,['install'],"['install', 'installed']"
Deployability,"Hi guys,. Which existing dependencies would you like to be able to use? There are some of these libraries that cannot be replaced by already installed variants. Specifically,; - BWA --- since the version that is pulled in and used actually requires we expose certain functionality for our lightweight alignment procedure (though this dependency may go away all together if we deprecate lightweight alignment in favor of quasi-mapping).; - Jellyfish --- here, we require the ability to use jellyfish as a library. Specifically, we rely on some headers that are not installed with the standard package. Perhaps here there could be some synergy with Guillaume on making all of the things Salmon uses part of the standard Jellyfish install, but, at least currently, this isn't the case. The CMake build system already looks for existing versions of the following before fetching them:; - Boost; - tbb; - jemalloc. So, the the remaining guys are `libgff` (which is just some small libraryification of a gff parser that I put together a while ago, I don't know that it's in any package manager --- is it? It doesn't even have an associated install script) and `staden IO lib`. For Staden, I'd be happy to have it look for an existing installation, but there is no FindStaden.cmake that I know of, and I don't really know how to write FindX.cmake files appropriately. However, I'd be happy to learn and / or accept pull requests.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-193559957:141,install,installed,141,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-193559957,10,['install'],"['install', 'installation', 'installed']"
Deployability,"Hi guys,; Thanks @alexvpickering for the faster version !; There has been a lot of language switches recently (C++, Rust, python and R), and I apologize there is a minor bug in the above code, thanks to @mikelove for pointing it.; ```; get_binary <- function(id) { as.integer(head(intToBits(id), 8)) }; ```. should be updated to; ```; get_binary <- function(id) { rev( as.integer(head(intToBits(id), 8)) ) }; ```. The R functions returns least significant bit first while I was in the pythonic/C++ mode and assumed their native format of most significant bit first. Python parser was fine but please consider updating the above lines in the parser. @mikelove is double checking the code and will update the tximport package to make it more streamlined. I will keep you guys updated. re: mtx format, yea I think we designed the sparse format mainly with the motivation of saving space both in memory and disk as our per cell level inferential data grows linearly with the number of bootstraps used.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/380#issuecomment-503778585:318,update,updated,318,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/380#issuecomment-503778585,3,['update'],"['update', 'updated']"
Deployability,"Hi rob,; Thanks for the very fast and detailed answer. It is not trivial to use a recent GCC on CentOS 7, I was trying to work around with clang. I'll try to add libc++.; I have some issues with salmon-0.11.1 on both precompiled binaries or bionconda install, that's why I. I'll post as a separate issue.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/263#issuecomment-410243577:251,install,install,251,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/263#issuecomment-410243577,1,['install'],['install']
Deployability,"Hi rob-p,; `gcc -version ` tells me its version `6.3.0` of the GCC compiler. . ```; c+\+ -v; Using built-in specs.; COLLECT_GCC=c++; COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-alpine-linux-musl/6.3.0/lto-wrapper; Target: x86_64-alpine-linux-musl; Configured with: /home/buildozer/aports/main/gcc/src/gcc-6.3.0/configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --build=x86_64-alpine-linux-musl --host=x86_64-alpine-linux-musl --target=x86_64-alpine-linux-musl --with-pkgversion='Alpine 6.3.0' --enable-checking=release --disable-fixed-point --disable-libstdcxx-pch --disable-multilib --disable-nls --disable-werror --disable-symvers --enable-__cxa_atexit --enable-default-pie --enable-cloog-backend --enable-languages=c,c++,objc,java,fortran,ada --disable-libssp --disable-libmpx --disable-libmudflap --disable-libsanitizer --enable-shared --enable-threads --enable-tls --with-system-zlib --with-linker-hash-style=gnu; Thread model: posix; gcc version 6.3.0 (Alpine 6.3.0); ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-343658308:535,release,release,535,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-343658308,1,['release'],['release']
Deployability,"Hi scott,. Thank you for the detailed report. Im trying to reproduce the issue. So far, i have been unable to reproduce the issue on an ubuntu 16.04 or OSX box with either 0.11.1 or 0.9.1. My next test is to try on an ubuntu 14.04 docker container. I'm afraid there may be a system library issue involved. Could you try upgrading via bioconda as well to see if that helps? The latest linux release is available on bioconda.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-413855775:390,release,release,390,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-413855775,1,['release'],['release']
Deployability,"Hi vals,; Cutoffs for Salmon as well as STAR+featurecounts/RSEM are all >0, no matter it is normalized value (RPKM, TPM) or rawcount. To my knowledge, there shouldn't be a hugh difference between different pipeline in terms of number of detected genes. Somehow, I think Salmon is over-sensitive to some extent. It's good to know that there will be small >0 expression on most genes. That makes the thing clear~. Best!; Gary",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/120#issuecomment-279960488:206,pipeline,pipeline,206,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/120#issuecomment-279960488,2,['pipeline'],['pipeline']
Deployability,"Hi vals,; I don't know the correlation between Salmon and featureCounts pipelines. However, I've just done similar counting with htseq-count (-m union) . The result of gene number is similar (just slightly higher) to featureCounts (w/o multimapped reads). ; https://flic.kr/p/RXy39z; As far as I can tell, count-based methods performs similarly. The number of detected gene is within expectation.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/120#issuecomment-279985466:72,pipeline,pipelines,72,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/120#issuecomment-279985466,1,['pipeline'],['pipelines']
Deployability,"Hi!. Sorry for not answering. I'm trying to get a small sample to replicate the error and misteriously I can't. I will try to update Alevin and run it in the big samples, then if it fails, try to send you the a sample to work with.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/386#issuecomment-506225248:126,update,update,126,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/386#issuecomment-506225248,1,['update'],['update']
Deployability,Hi!; I installed version 0.8.2 (on linux) by using the command:; conda install -c bioconda salmon . Is there an update on how to get the newer version?. Thanks!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-392333657:7,install,installed,7,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-392333657,3,"['install', 'update']","['install', 'installed', 'update']"
Deployability,"Hi, ; I am writing here, because I think this issue is relevant to both @rob-p and @kvittingseerup. I ran my salmon analysis twice with the most recent gencode annotation [https://www.gencodegenes.org/releases/current.html](url) -> PRI. Once with the `--keepDuplicates` option in the indexing and once without (bec I read this post late..). ; When loadind the data into IsoformSwithcAnalyzer the first time (w/o `--keepDuplicates`), I received the following warning message, ""The annotation (count matrix and isoform annotation) contain differences in which isoforms are analyzed... 875 more isoforms than the count matrix..."". Following the run with `--keepDuplicates`, I now receive ""67 more isoforms than the count matrix"". If I am using the `--keepDuplicates` option, what exactly are there 67 isforms?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-410512481:201,release,releases,201,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/214#issuecomment-410512481,1,['release'],['releases']
Deployability,"Hi, I have the same problem installing version 1.10.1, Do you find any solution?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/551#issuecomment-1577187733:28,install,installing,28,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/551#issuecomment-1577187733,1,['install'],['installing']
Deployability,"Hi, Rob. I'm migrating the previous known-good formula from the deprecated Homebrew/science tap to the new Brewsci/bio tap. I usually first migrate the last known-good formula, and then in a second PR bump the version to the most recent version. I'll bump the version know though for the sake of troubleshooting. Here's the build log for 0.9.1: https://circleci.com/gh/brewsci/homebrew-bio/500. ~~By default CircleCI runs with `make -j32`. Is it perhaps an issue with the Makefile not liking parallel?~~; I see that it's already being run with `make -j1` because it's known not to like being run in parallel. > Any idea why this might be happening? Does the CI environment prohibit this for some reason?. I'm not aware of any reason that it wouldn't be run. `curl` is installed.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367734290:768,install,installed,768,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367734290,1,['install'],['installed']
Deployability,"Hi, Rob. I'm seeing this same error `Cannot find source file`; ```; -- Configuring done; CMake Error at src/CMakeLists.txt:113 (add_executable):; Cannot find source file:; /tmp/salmon-20180222-8345-abjxc0/salmon-0.8.2/external/install/src/rapmap/RapMapFileSystem.cpp; Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp; .hxx .in .txx; ```; See the complete build log at https://circleci.com/gh/brewsci/homebrew-bio/491; Any ideas?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367590842:227,install,install,227,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367590842,1,['install'],['install']
Deployability,"Hi, thank you for your reply, I prefer to use the pre-built version 1.10.0. * J. Eduardo Martinez-Hernandez*; *PhD Integrative Genomics*. El lun, 5 jun 2023 a las 14:02, Rob Patro ***@***.***>); escribió:. > This *usually* means that the version of the boost library you have was; > not compiled with a C++11-compatible ABI. There is a incompatibility; > between pre C++11 and post C++11 std::string representations, and since; > salmon uses modern C++ (C++14 as of this writing), you need a version of; > boost compiled in a compatible way. How was boost installed on your system?; >; > Of course, if you don't need to compile from source, it's *much* easier; > to install via conda, or to grab the pre-built executable (1.10.0 is; > feature and bugfix identical to 1.10.1).; >; > Best,; > Rob; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/551#issuecomment-1577237260>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AM6EVFLJX45SB67GSQ3RYO3XJYNLBANCNFSM4PG7JFPQ>; > .; > You are receiving this because you commented.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/551#issuecomment-1577285952:115,Integrat,Integrative,115,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/551#issuecomment-1577285952,3,"['Integrat', 'install']","['Integrative', 'install', 'installed']"
Deployability,"Hi, while this issue was solved, im just a bit confused, if i want to generate a quant matrix of all CBS including those in the range of 1-10 reads for use with SoupX, how do i do this in the most streamlined way. As there has been a lot of discussion about this and many release of alevin since then. Will using FreqThreshold 0 --maxNumBarcodes 4294967295 do the trick? or do i also need to use --KeepCBFraction 1.0",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-645474333:272,release,release,272,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/379#issuecomment-645474333,1,['release'],['release']
Deployability,"Hi,. I thought I would extend this issue rather than creating a new issue. Happy to create new if that would be better. I'm using the docker version of Salmon (latest version). I have also mounted a local directory. I'm getting the same error. (Note I have tried several different versions of the command, including the --no-version-check command). salmon index --gencode ; -t /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/gentrome.fa ; -d /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/decoys.txt ; -i /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/combined_index. Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; [2019-07-01 12:32:42.622] [jLog] [info] building index; [2019-07-01 12:32:42.628] [jointLog] [info] [Step 1 of 4] : counting k-mers. <Several warnings about transcripts that are disliked>. [2019-07-01 12:33:02.020] [jointLog] [info] Replaced 3801867 non-ATCG nucleotides; [2019-07-01 12:33:02.020] [jointLog] [info] Clipped poly-A tails from 1630 transcripts; [2019-07-01 12:33:02.041] [jointLog] [info] Building rank-select dictionary and saving to disk; [2019-07-01 12:33:02.248] [jointLog] [info] done; Elapsed time: 0.20793s; [2019-07-01 12:33:02.252] [jointLog] [info] Writing sequence data to file . . . ; [2019-07-01 12:33:04.501] [jointLog] [info] done; Elapsed time: 2.24861s; [2019-07-01 12:33:04.572] [jointLog] [info] Building 32-bit suffix array (length of generalized text is 469043886); [2019-07-01 12:33:08.681] [jointLog] [info] Building suffix array . . . ; success; saving to disk . . . done; Elapsed time: 61.4932s; done; Elapsed time: 171.743s; processed 12000000 positionsKilled. I can send log files if required. The problem I have is that I cannot seem to run quant without the quant function. salmon quant --validateMappings ; -i /home/RnaSeq/transcriptome_gencode_v29/human_GENCODEv29/combined_index -l IU ; -1 /home/RnaSeq/fastq/DM_4a_H_",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/389#issuecomment-507253562:626,upgrade,upgrade,626,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/389#issuecomment-507253562,2,['upgrade'],"['upgrade', 'upgrades']"
Deployability,"Hi,. Juugii, the problem seems to be stemming from the fact that, although you are using clang, you don't have lib++, or the development headers it provides installed. Thus, clang is failing to find the basic c++ library includes that it needs. The easiest way to get salmon is to install the latest version for Linux via Bioconda, or to use the docker image of the latest release (from dockethub) `combinelab/salmon:latest`, or, to download the pre-compiled Linux binary from the release page. If you really wish to compile from source, you could try installing libc++ and the development directories or, perhaps more easily, switching your compiler to GCC.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/263#issuecomment-410240722:157,install,installed,157,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/263#issuecomment-410240722,5,"['install', 'release']","['install', 'installed', 'installing', 'release']"
Deployability,"Hi,. We'll install the latest version of Salmon, make new indexes and run the tests against the new indexes. It'll take us a bit to report back. Best,; Leo",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-289539265:11,install,install,11,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-289539265,1,['install'],['install']
Deployability,"Hi,. Yes, I did install with bioconda. Thanks for the link to the precompiled; version, which I downloaded and unzipped. I'm sorry to be so ignorant (my; unix knowledge is 25 years out of date) but how/where should I install; this?. Also, currently ""which salmon"" gives me the bioconda version. I guess I; will need to add the path to the precompiled version on the end of my PATH; environment variable?. Thanks,; Michael. On Sat, Nov 24, 2018 at 3:51 PM Rob Patro <notifications@github.com> wrote:. > Hi @michael-brent <https://github.com/michael-brent> ,; >; > Did you, by any chance, install via bioconda? There is a known issue with; > the bioconda build on OSX. Can you try this; > <https://github.com/COMBINE-lab/salmon/files/2383948/salmon_0.11.4-pre_OSX.tar.gz>; > pre-compiled binary in the meantime to see if it works for you?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-441398017>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/ArM27mCF3NQcGVuZHpU3-8mb2_6WI7NIks5uyb9egaJpZM4YxmdA>; > .; >",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-441447779:16,install,install,16,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-441447779,3,['install'],['install']
Deployability,"Hi,; I confirm that `salmon 1.10.1` fixes the issue. I'll update `libstaden` in Debian. We probably should talk about some separate `pufferfish` package for the next Debian release. We actually [started]( https://salsa.debian.org/med-team/pufferfish/) with the packaging but this has somehow stalled (I don't remember the reasons but I'll keep an eye on this soon (but its too late for bookworm).; Kind regards and thanks a lot for the fix, Andreas.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1467446759:58,update,update,58,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1467446759,2,"['release', 'update']","['release', 'update']"
Deployability,"Hi,; I've just uploaded the latest upstream release of salmon to Debian and like to bring up this topic again. I noticed that RapMap is tagging releases even with salmon- prefix. I have no idea why the release tags are choosen this way but I was confused in the first moment.; Kind regards, Andreas.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/87#issuecomment-447234788:44,release,release,44,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/87#issuecomment-447234788,3,['release'],"['release', 'releases']"
Deployability,"Hi,; It does not seem to work through bioconda, I am trying to install the latest release on OSX with conda but I keep getting the following error:. ```; $ conda install -c bioconda salmon ; Solving environment: failed. PackagesNotFoundError: The following packages are not available from current channels:. - salmon; - boost=1.64; - salmon; - libcxx==4.0.0. Current channels:. - https://conda.anaconda.org/bioconda/osx-64; - https://conda.anaconda.org/bioconda/noarch; - https://repo.anaconda.com/pkgs/main/osx-64; - https://repo.anaconda.com/pkgs/main/noarch; - https://repo.anaconda.com/pkgs/free/osx-64; - https://repo.anaconda.com/pkgs/free/noarch; - https://repo.anaconda.com/pkgs/r/osx-64; - https://repo.anaconda.com/pkgs/r/noarch; - https://repo.anaconda.com/pkgs/pro/osx-64; - https://repo.anaconda.com/pkgs/pro/noarch; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-379743230:63,install,install,63,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-379743230,3,"['install', 'release']","['install', 'release']"
Deployability,"Hi,; Thank you for your response!. I'm working from a server that has 48 CPU.; I'll try to re-install this version using the precompiled linux binary file from the release page, and let you know how it goes.; PS: I hadn't this issue with previous versions (0.14.1, 0.9..etc). Kind regards,; Jamal.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/458#issuecomment-559802958:94,install,install,94,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/458#issuecomment-559802958,2,"['install', 'release']","['install', 'release']"
Deployability,"Hi,; Unfortunately no. It did not work even using the binary file from github, nor installing using bioconda. I hope this will be fixed as soon as possible!; Best regards,; Jamal.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/458#issuecomment-562051770:83,install,installing,83,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/458#issuecomment-562051770,1,['install'],['installing']
Deployability,Hmm strange! But `conda install salmon` still gives the same error for me.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137172685:24,install,install,24,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137172685,1,['install'],['install']
Deployability,"Ho @rob-p,. I changed gcc version so many times, I changed cluster, nothing. I tried with conda and it works, kind of. But apparently the bioconda version the [0.101](https://anaconda.org/bioconda/salmon) and is not the latest:. ```; Version Info: ### A newer version of Salmon is available. ####; ###; The newest version, available at https://github.com/COMBINE-lab/salmon/releases; contains new features, improvements, and minor bug fixes; please upgrade at your; earliest convenience.; ###; ```; Anything to be worried?; Thanks; F",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394448744:374,release,releases,374,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394448744,2,"['release', 'upgrade']","['releases', 'upgrade']"
Deployability,"Hrmm, it doesn't seem so. I am able to do cmake with exactly these options and it still runs the `fetchRapMap.sh` script. I tried this under both 0.8.2 and 0.9.1. Let me look more through the logs. Also, parallel builds *should* work in newer releases (our internal build does parallel make on our CI).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367755018:243,release,releases,243,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367755018,1,['release'],['releases']
Deployability,"Hrmm; can you say a bit about where you got the executable from? What's missing in that directory are the key shared library files `libtbbmalloc.dylib`, `libtbbmalloc_proxy.dylib` and `libtbb.dylib`. These are included in precompiled linux excutable, and if you install via Conda for linux or OSX, they should be taken care of. Also, if you build from source, they are installed into the install target `lib` subdirectory by the `make install` command.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623164361:262,install,install,262,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623164361,4,['install'],"['install', 'installed']"
Deployability,"I agree completely with that complaint. Originally, I started using TBB instead of OpenMP because OSX's clang compiler didn't have OpenMP support. It's possible I will revisit this decision in the future, as I think that is no longer the case. On the other hand, this bug looks not to be TBB's fault. I pushed a fix, but then I explicitly resized the hash *before* setting the max thread count. I just pushed an update to this branch --- can you see if that helps?. Thanks!; Rob",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396093096:412,update,update,412,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396093096,1,['update'],['update']
Deployability,"I agree with the @roryk's suggestion and that was indeed the motivation to have whitelisting step downstream of deduplication in Alevin.; @pinin4fjords sounds good, I will add this into the todo list for next release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490165970:209,release,release,209,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490165970,1,['release'],['release']
Deployability,"I also tried on the `testing` image. For more detail, here are the steps performed (perhaps taking a look at the installed packages will highlight a difference, as I did this from a clean testing Docker image, so my environment had nothing else in it). ### Attempt to reproduce segfault on Debian:testing. ```{bash}; $ docker pull debian:testing. $ docker run -it debian:testing. $ apt-get update. $ apt-get install build-essential git libboost-all-dev liblzma-dev libbz2-dev cmake zlib1g-dev curl unzip wget libcurl4-openssl-dev. $ git clone https://github.com/COMBINE-lab/salmon.git; $ cd salmon; $ mkdir build && cd build; $ cmake -DNO_IPO=TRUE .. # GCC still doesn't handle LTO robustly; $ make -j8; $ make install; $ make test; ```. which leads to the output. ```; root@fd877e359439:/salmon/build# make install; [ 7%] Built target libcereal; [ 13%] Built target libtbb; [ 16%] Built target ntcard; [ 19%] Built target graphdump; [ 27%] Built target twopaco; [ 29%] Built target ksw2pp_sse2; [ 32%] Built target ksw2pp_sse4; [ 37%] Built target ksw2pp_basic; [ 38%] Built target ksw2pp; [ 59%] Built target puffer; [ 73%] Built target salmon_core; [ 76%] Built target alevin_core; [ 77%] Built target UnitTestsMain; [ 81%] Built target unitTests; [100%] Built target salmon; Install the project...; -- Install configuration: ""Release""; -- Installing: /salmon/lib/libntcard.a; -- Installing: /salmon/lib/ntcard/ntcard-targets.cmake; -- Installing: /salmon/lib/ntcard/ntcard-targets-release.cmake; -- Installing: /salmon/lib/libgraphdump.a; -- Installing: /salmon/lib/graphdump/graphdump-targets.cmake; -- Installing: /salmon/lib/graphdump/graphdump-targets-release.cmake; -- Installing: /salmon/lib/libtwopaco.a; -- Installing: /salmon/lib/twopaco/twopaco-targets.cmake; -- Installing: /salmon/lib/twopaco/twopaco-targets-release.cmake; -- Installing: /salmon/lib/libtbb.so; -- Installing: /salmon/lib/libtbb.so.12; -- Installing: /salmon/lib/libtbb.so.12.5; -- Installing: /salmon/lib/libtbbmalloc",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554:113,install,installed,113,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463312554,4,"['install', 'update']","['install', 'installed', 'update']"
Deployability,"I also wonder why salmon not output original reads counts. update:. Because it is more accurate. DeSeq2 should accept it. As for now, maybe we could simply round to the nearest integer. > NumReads — This is salmon’s estimate of the number of reads mapping to each transcript that was quantified. It is an “estimate” insofar as it is the expected number of reads that have originated from each transcript given the structure of the uniquely mapping and multi-mapping reads and the relative abundance estimates for each transcript.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-751189286:59,update,update,59,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-751189286,2,['update'],['update']
Deployability,I am confirming the suspicion that the build process is trying to use the system's Boost. After I installed boost-iostreams and boost-serialization through the system's package manager the build completes (despite that boost being older that the one fetched and built earlier during the `make` step),MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/21#issuecomment-145695208:98,install,installed,98,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/21#issuecomment-145695208,1,['install'],['installed']
Deployability,"I am getting a consistent segmentation fault 11 when running on the salmon tutorial on the provided arabidopsis data set. Details below:. salmon v0.11.3 on MacBook Pro (15-inch, 2016) macOS Sierra 10.12.6. The output is below. If I run the bash shell on all the A. thaliana samples it produces the same seg fault on each one. However the number that appears immediately before ""Segmentation fault"" (914 below) varies from one invocation to the next, even on the same data file. . I appreciate any help you can offer and I apologize in advance if there's something obvious I should have read or known about. (it seems like the lines below that are preceded by ### are coming out in fold face. They are not meant to.). (salmon) MacBook-Pro-2:salmon-tutorial brent$ bash quant_tut_samples.sh; Processing sample DRR016125; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; ### salmon (mapping-based) v0.11.3; ### [ program ] => salmon ; ### [ command ] => quant ; ### [ index ] => { athal_index }; ### [ libType ] => { A }; ### [ mates1 ] => { data/DRR016125/DRR016125_1.fastq.gz }; ### [ mates2 ] => { data/DRR016125/DRR016125_2.fastq.gz }; ### [ threads ] => { 8 }; ### [ output ] => { quants/DRR016125_quant }; Logs will be written to quants/DRR016125_quant/logs; [2018-11-24 15:08:09.785] [jointLog] [info] Fragment incompatibility prior below threshold. Incompatible fragments will be ignored.; [2018-11-24 15:08:09.785] [jointLog] [info] parsing read library format; [2018-11-24 15:08:09.785] [jointLog] [info] There is 1 library.; [2018-11-24 15:08:09.877] [jointLog] [info] Loading Quasi index; [2018-11-24 15:08:09.877] [jointLog] [info] Loading 32-bit quasi index; [2018-11-24 15:08:09.877] [stderrLog] [info] Loading Suffix Array ; [2018-11-24 15:08:10.319] [stderrLog] [info] Loading Transcript Info ; [2018-11-24 15:08:10.423] [stderrLog] [info] Loading Rank-Select Bit Array; [2018-11-24 15:08:10.4",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/317#issuecomment-441396828:851,upgrade,upgrade,851,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/317#issuecomment-441396828,2,['upgrade'],"['upgrade', 'upgrades']"
Deployability,"I am trying to quantify these data at the transcript level which is why the number of features is this big. For the PBMC3k I was trying with a transcript to gene --tgMap but was still seeing the same error. I realized I forgot to update the path to the run.sh script when calling the 0.12.0 binary (I updated the path to the binary but no to the script). When running the wrapper in the 0.12.0 folder I could succesfully run alevin on the CD14 dataset, with or without the --forceCells 4000 flag. I tried to run alevin-0.12.0 on the PBMC 3k dataset but I got the same error. I am now trying to run it on all the FACS-sorted samples and I will see how that goes. I feel this is happening slightly inconsistently (although very frequently). Notably, it either happens after `Clearing EqMap; Might take some time.` or `Starting Import of the gene count matrix of size 5344x167268.`. I have had it happen once in the middle of the `Analyzed xxx cells (yy% of all)` phase. I just managed to succesfully process the CD19+ B cells from the 10x v1 dataset, I'll attempt to process the other FACS sorted samples overnight and let you know how it went. Thank you",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445109075:230,update,update,230,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-445109075,2,['update'],"['update', 'updated']"
Deployability,"I appreciate to your answer.; Thanks a lot; ; ; Ki-Wook Lee; Student; Department of Integrative Biotechnology; College of Biotechnology & Bioengineering; Sungkyunkwan University; Biotechnology and Bioengineering Building 2, Rm 62156; 2066 Seobu-ro, Jangan-gu, Suwon, Gyeonggi, 16419, Republic of Korea; Tel: +82-10-5580-1770 Fax:+82-31-290-7870; ; -----Original Message-----; From: ""Anthony S. ***@***.***>; To: ***@***.***>;; Cc: ***@***.***>; ***@***.***>;; Sent: 2021-06-09 (수) 05:16:26 (GMT+09:00); Subject: Re: [COMBINE-lab/salmon] Quant.sf index issue (#640); ; Not affiliated with the Salmon team, but since you didn't get an answer here...; When building an index with transcriptomes from Gencode, you should pass the flag ""--gencode"" to the indexer. This allows salmon to split the record names on the | character and gives you the expected ""ENST00000456328.2 or ENSG00000223972.5"" style names.; —; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub, or unsubscribe.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/640#issuecomment-857337814:84,Integrat,Integrative,84,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/640#issuecomment-857337814,1,['Integrat'],['Integrative']
Deployability,"I attempted to use the new --ont error model that has been developed for Salmon but am getting the same error mentioned here. **To Reproduce**. Which version of salmon was used?; salmon version: salmon 1.5.1, minimap2 version: 2.20-r1061; How was salmon installed (compiled, downloaded executable, through bioconda)?; Installed through bioconda.; Which reference (e.g. transcriptome) was used?; Custom generated transcriptome (Stringtie2, merged with ensembl release 104 Hg38); Which read files were used?; Nanopore reads.; Which which program options were used?; salmon quant -p {threads} -t {input.trs} -l MSF -a {input.bam} -o {output.tsv_dir} --ont; Desktop (please complete the following information):; Ubuntu 20.04.2 LTS",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-872309220:254,install,installed,254,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/289#issuecomment-872309220,3,"['Install', 'install', 'release']","['Installed', 'installed', 'release']"
Deployability,"I believe this is because unlike the `salmon` target, the unitTests that run when `make test` is executed aren't installed via the `install` command [see e.g.](https://github.com/COMBINE-lab/salmon/blob/master/src/CMakeLists.txt#L312). This is due, I presume, to my naive usage of CMake as it relates to the testing target. I've yet to find a solid resource that explains the ""right way"" to handle this using (modern) CMake. That, of course, goes to your point of the pain of CMake.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397080244:113,install,installed,113,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/236#issuecomment-397080244,2,['install'],"['install', 'installed']"
Deployability,I bumped into a similar problem. Fixed by making an new enviroment and forcing conda to install the most recent version. ; conda install -c conda-forge -c bioconda salmon=1.3.0,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-780036521:88,install,install,88,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-780036521,2,['install'],['install']
Deployability,I can also upgrade my 10.12.6 Sierra to Mojave if you have a working binary for that. Let me know. Thanks so much.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-442904994:11,upgrade,upgrade,11,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/318#issuecomment-442904994,1,['upgrade'],['upgrade']
Deployability,"I can do that, but wish if the option exist in salmon... mark for future upgrade. I can't thank you enough both of you for your time. Thank you very much for your time!; You may close the issue now.; @demis001",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/122#issuecomment-283478208:73,upgrade,upgrade,73,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/122#issuecomment-283478208,1,['upgrade'],['upgrade']
Deployability,I can try that later today. Does your list of installed dependencies look different?. The thing that's strange about this is that the main motivation for releasing 1.10 was a discovery of an intermittent segfault due to UB at exactly this spot. But that was resolved in the associated tagged pufferfish upstream and checked further with both valgrind and asan.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463629042:46,install,installed,46,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463629042,1,['install'],['installed']
Deployability,I can try. I will need to send the executable to the administrator of the cluster and request for it to be installed.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-395121560:107,install,installed,107,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-395121560,1,['install'],['installed']
Deployability,"I can't reproduce this using 0.11.2 on Galaxy (18.05, not that that should matter) with a slurm (17.02.9) cluster. I've tried using both 20 cores and 1 core (in case something weird is going on with the threading) and both run fine. I used our cluster default of 6GB per core, which is overkill for this job. My guess is that the same tbb version is getting used in each version of salmon you're trying and that it got corrupted at some point. Are you spinning up a new CloudMan instance for these runs or are you restarting a saved instance? If you're not starting a brand new instance then try that, then you can avoid using the same possibly corrupted tbb install.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416383307:659,install,install,659,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/271#issuecomment-416383307,1,['install'],['install']
Deployability,"I can't seem to reproduce this locally (OSX 10.13.1). However, what happens if you try:. `> conda install salmon=0.9.1`. do you see this version as available? Does it try to install it?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364824034:98,install,install,98,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/194#issuecomment-364824034,2,['install'],['install']
Deployability,"I changed the BUILD_COMMAND to use gmake. I also ran 'export MAKE=gmake', and used gmake to run the output of cmake. . BUILD_COMMAND sh -c ""gmake ${QUIET_MAKE} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}"". Unfortunately, the BWA included with Salmon is broken on FreeBSD. . kthread.c:70:2: error: unknown type name 'int64_t'. The one on Git (https://github.com/lh3/bwa) works though. So I modified DOWNLOAD_COMMAND to grab the one from Git. . DOWNLOAD_COMMAND git clone https://github.com/lh3/bwa bwa-master. Next problem, it tries to build TBB and fails. This is two problems, because I have TBB, I passed it the path, and it fails to use it. The output of cmake says:. -- Could NOT find TBB (missing: tbbmalloc_proxy) (found suitable version ""2018.0"", minimum required is ""4.4""). tbbmalloc_proxy.h is present in /usr/local/include/tbb. Moving on, TBB fails to build because it's hard coded to use make. I fixed this and it built. BUILD_COMMAND gmake ${QUIET_MAKE} CXXFLAGS=${TBB_CXXFLAGS} lambdas=1 compiler=${TBB_COMPILER} cfg=release tbb_build_prefix=LIBS. Staden-io_lib fails to build with: ; /usr/bin/ld: undefined reference to symbol `pthread_create@@FBSD_1.0' (try adding -lthr); //lib/libthr.so.3: could not read symbols: Bad value. As advertised, -lthr fixed this issue. ; CONFIGURE_COMMAND ./configure --enable-shared=no --without-libcurl --prefix=<INSTALL_DIR> LDFLAGS=-lthr CFLAGS=${LIBSTADEN_CFLAGS} CC=${CMAKE_C_COMPILER} CXX=${CMAKE_CXX_COMPILER}. This leads me to an error I can't fix on my own. /home/esiefker/salmon/fresh-salmon/include/BWAMemStaticFuncs.hpp:36:36: error:; use of undeclared identifier 'MEM_F_SELF_OVLP'; int start_width = (opt->flag & MEM_F_SELF_OVLP)? 2 : 1;. There is a similar Debian bug which is fixed: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=818397. I could not find the fix mentioned. https://github.com/COMBINE-lab/salmon/commits/master?author=satta. I have done my best, but I am stuck. I hope this is helpful for those more skilled than I.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-337390415:1161,release,release,1161,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-337390415,1,['release'],['release']
Deployability,"I did not previously test that, but I am currently running the analysis with the extra `--expectCells 10000` parameter. I will post an update. If all goes well, I will then close the ticket. Thank you again for your help!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-883784536:135,update,update,135,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-883784536,1,['update'],['update']
Deployability,"I did not see any output. That's the reason why the test stopped with the timeout.; Ref: https://travis-ci.org/COMBINE-lab/salmon/builds/419012959. Here is my commit on this PR. You can do cherry-pick to check it.; https://github.com/junaruga/salmon/commits/hotfix/develop-unrecognized-cxx-std-14_3. If you add `--verbose` or `--debug` to the `ctest`, you might see something?. ```; /usr/local/cmake-3.9.2/bin/ctest --force-new-ctest-process --verbose --debug; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/276#issuecomment-416155226:258,hotfix,hotfix,258,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/276#issuecomment-416155226,1,['hotfix'],['hotfix']
Deployability,"I don't see any files named `*CMakeLog*`. Which file exactly do you need? I see…; ```; CMakeFiles/CMakeError.log CMakeFiles/CMakeRuleHashes.txt; CMakeFiles/CMakeOutput.log CMakeFiles/TargetDirectories.txt; ```; Here's a gist: https://gist.github.com/sjackman/6e15b7dfebaaad99b9476aa5ce269fda; This error is reproducible like so:; ```sh; docker run -it linuxbrew/linuxbrew brew install -sdv https://raw.githubusercontent.com/sjackman/homebrew-bio/dab661f902c5841e0d498eb338975c47080a1118/Formula/salmon.rb; ```. Ignore `FormulaUnavailableError: No available formula with the name ""xorg""`; and select `5. shell` to get a shell prompt",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367793075:377,install,install,377,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/181#issuecomment-367793075,1,['install'],['install']
Deployability,I don't think `config.h` is needed when compiling against prebuilt `libjellyfish*.so`; when building salmon for Debian I explicitly patched out the include and everything built just fine. http://anonscm.debian.org/cgit/debian-med/salmon.git/plain/debian/patches/jellyfish-update,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195452002:132,patch,patched,132,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195452002,3,"['patch', 'update']","['patched', 'patches', 'update']"
Deployability,"I downloaded the package from here ; https://anaconda.org/bioconda/salmon/files; then I opened the package up with ""The Unarchiver.app"", so I downloaded linux one, and open up the package with ""Unarchiver.app"", I didn't see any library files -libtbbmalloc.dylib, libtbbmalloc_proxy.dylib and libtbb.dylib. ; ![Screen Shot 2020-05-03 at 4 17 25 PM](https://user-images.githubusercontent.com/64718774/80924960-3ee52880-8d5a-11ea-8fbc-5cf4537f0129.png); ; Then I just installed Conda, but I have no idea how to install the package, sorry, I have ground zero coding knowledge",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623175345:465,install,installed,465,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/517#issuecomment-623175345,2,['install'],"['install', 'installed']"
Deployability,"I faced the same problem and found a simple solution. The trick is at line 585 of the cMakeList.txt. ""if (${TBB_VERSION} VERSION_GREATER_EQUAL 2018.0)"". It checks if you have tbb version 2018 or above. If you install tbb BEFORE running cmake, it will fulfill the requirement and bypass installing tbb in the make command, hence bypass the error. The solution:; 1. Delete the salmon folder and download a fresh one from github; 2. sudo apt update (this step is very important, to update the packages to be above version 2018) ; 3. sudo apt-get install libtbb-dev; 4. (Optional) apt-cache policy libtbb-dev (check the version of libtbb, it should be 2019 or above); 5. Then follows the standard installation (cmake, make etc.) The error should disappear and compile successfully. Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-610977958:209,install,install,209,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/497#issuecomment-610977958,12,"['install', 'update']","['install', 'installation', 'installing', 'update']"
Deployability,I got the same error and a segmentation fault while processing single-read data using salmon 0.10.2. My command was:; `salmon quant -i <transcripts_index_folder> -l A -r <some_R1.fastq> -o <output_quant_folder>`; Are Salmon working on this since August?. Update: Using Salmon version 0.11.4 solved the issue for me.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/265#issuecomment-435715951:255,Update,Update,255,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/265#issuecomment-435715951,1,['Update'],['Update']
Deployability,"I got the same error but under Ubuntu 20.04.; After Installing boost 1.60.0 manually it initially seemed to work, but then I got the following error:. ```; Error, cannot determine salmon version installed from (salmon: symbol lookup error: salmon: undefined symbol: _ZN5boost15program_options3argE; ) at /usr/local/bin/trinityrnaseq-v2.11.0/Trinity line 3969.; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-696784484:52,Install,Installing,52,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-696784484,2,"['Install', 'install']","['Installing', 'installed']"
Deployability,"I have used ""U"" as was default in config.yml for pipeline-transcriptome-de but now I am thinking it should be stranded but i am not understanding the reverse part? Should it not be SF as this is essentially single-read and the baseball sequence is output as 5' to 3' of original RNA molecule despite being sequenced in the reverse from 3' to 5'.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/211#issuecomment-822139485:49,pipeline,pipeline-transcriptome-de,49,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/211#issuecomment-822139485,1,['pipeline'],['pipeline-transcriptome-de']
Deployability,"I increased ram to 24G. Segmentation fault happens even faster. I have fiddled with swap memory, to no avail, but I am not a good swap fiddler.; libs with malloc in their name, installed in directory /salmon-latest_linux_x86_64/ib adjacent to /salmon-latest_linux_x86_64/bin, are the same as elsewhere already on my system. conda and bioconda are not available for FreeBSD. What OS would work?; I have looked through the published papers and find no mention of which OS should work. My attempted command for compiling the sources from unzipped directory salmon-0.14.1 is: cmake -S src -B build; Many errors result, starting with:; TBB_LIBRARIES = ; Setting libdivsufsort = /external/install/lib/libdivsufsort.a; Setting libdivsufsort64 = /external/install/lib/libdivsufsort64.a; -- Configuring done; CMake Error at CMakeLists.txt:196 (add_executable):; Cannot find source file:. /tests/UnitTests.cpp. Tried extensions .c .C .c++ .cc .cpp .cxx .cu .m .M .mm .h .hh .h++ .hm; .hpp .hxx .in .txx. CMake Error at CMakeLists.txt:196 (add_executable):; Target ""unitTests"" links to target ""Threads::Threads"" but the target was; not found. Perhaps a find_package() call is missing for an IMPORTED; target, or an ALIAS target is missing?. CMake Error at CMakeLists.txt:162 (add_library):; Cannot find source file:. /src/jellyfish/mer_dna.cc. Tried extensions .c .C .c++ .cc .cpp .cxx .cu .m .M .mm .h .hh .h++ .hm; .hpp .hxx .in .txx. Apparently the so-called sources do not include many files ending in .cpp, for instance. Please, I repeat, what linux OS should be able to install salmon? ; And/Or what command could compile salmon?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-522626638:177,install,installed,177,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/419#issuecomment-522626638,4,['install'],"['install', 'installed']"
Deployability,"I just conda installed salmon fresh. I got error when I ran it. . ```; $ conda create -n salmon salmon; Collecting package metadata (current_repodata.json): done; Solving environment: done. ## Package Plan ##. environment location:~/miniconda3/envs/salmon. added / updated specs:; - salmon. The following NEW packages will be INSTALLED:. _libgcc_mutex conda-forge/linux-64::_libgcc_mutex-0.1-conda_forge; _openmp_mutex conda-forge/linux-64::_openmp_mutex-4.5-1_gnu; bzip2 conda-forge/linux-64::bzip2-1.0.8-h7f98852_4; icu conda-forge/linux-64::icu-64.2-he1b5a44_1; jemalloc conda-forge/linux-64::jemalloc-5.2.1-h9c3ff4c_5; libgcc-ng conda-forge/linux-64::libgcc-ng-9.3.0-h2828fa1_18; libgomp conda-forge/linux-64::libgomp-9.3.0-h2828fa1_18; libstdcxx-ng conda-forge/linux-64::libstdcxx-ng-9.3.0-h6de172a_18; salmon bioconda/linux-64::salmon-1.4.0-hf69c8f4_0; tbb conda-forge/linux-64::tbb-2021.1.1-h4bd325d_1; zlib conda-forge/linux-64::zlib-1.2.11-h516909a_1010. Proceed ([y]/n)? y. Preparing transaction: done; Verifying transaction: done; Executing transaction: done; #; # To activate this environment, use; #; # $ conda activate salmon; #; # To deactivate an active environment, use; #; # $ conda deactivate. $ conda activate salmon; $ salmon; salmon: symbol lookup error: salmon: undefined symbol: _ZN3tbb8internal24concurrent_queue_base_v818internal_push_moveEPKv; ```. I think this is related with rob-p commented on Sep 22, 2020. ; I have a naive question: Is it possible to fix this in the recipe by adding the problematic dependencies?; I am using centOS 8.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-805608173:13,install,installed,13,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-805608173,3,"['INSTALL', 'install', 'update']","['INSTALLED', 'installed', 'updated']"
Deployability,I just had to update Salmon to the last. Solved,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/862#issuecomment-1653566342:14,update,update,14,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/862#issuecomment-1653566342,1,['update'],['update']
Deployability,"I just tried it on a fresh docker image of ubuntu 16.04 and am unable to install salmon. After `apt-get install build-essential cmake g++ gcc curl autoconfig libdevsufsort-dev`, `cmake -DFETCH_BOOST=TRUE` passes, but `make install` fails with following output:; ```; [ 6%] Built target liblzma; [ 12%] Built target libbz2; [ 18%] Built target libjemalloc; [ 19%] Performing download step (verify and extract) for 'libdivsufsort'; -- verifying file...; file='/home/salmon-0.10.2/external/libdivsufsort.zip'; -- verifying file... warning: did not verify file - no URL_HASH specified?; -- extracting...; src='/home/salmon-0.10.2/external/libdivsufsort.zip'; dst='/home/salmon-0.10.2/external/libdivsufsort-master'; CMake Error at /home/salmon-0.10.2/libdivsufsort-prefix/src/libdivsufsort-stamp/extract-libdivsufsort.cmake:11 (message):; error: file to extract does not exist:; '/home/salmon-0.10.2/external/libdivsufsort.zip'. CMakeFiles/libdivsufsort.dir/build.make:90: recipe for target 'libdivsufsort-prefix/src/libdivsufsort-stamp/libdivsufsort-download' failed; make[2]: *** [libdivsufsort-prefix/src/libdivsufsort-stamp/libdivsufsort-download] Error 1; CMakeFiles/Makefile2:137: recipe for target 'CMakeFiles/libdivsufsort.dir/all' failed; make[1]: *** [CMakeFiles/libdivsufsort.dir/all] Error 2; Makefile:160: recipe for target 'all' failed; make: *** [all] Error 2; ```; It confuses me, as the error seems to be in the libdevsufsort, which should be installed.; (sorry for all the mess, really)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404455397:73,install,install,73,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/250#issuecomment-404455397,4,['install'],"['install', 'installed']"
Deployability,I just tried to index the GRCh38 transcriptome with decoys on a local machine (macOS Catalina 16GB) and it seemed to be doing ok for a while but after ~3hrs it got stuck (see log attached). I waited a good long while before killing it. Any suggestions?; These are the files I'm using:; ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/gencode.v33.transcripts.fa.gz; ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_33/GRCh38.primary_assembly.genome.fa.gz. [ref_indexing.log](https://github.com/COMBINE-lab/salmon/files/4377206/ref_indexing.log). EDIT: works fine without using decoys.; EDIT2: do you recommend using the indexes you link to here: http://bit.ly/30yn3FJ ? Or is there someway you could link to updated versions for the latest Salmon? ; thanks!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-603455186:741,update,updated,741,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/476#issuecomment-603455186,1,['update'],['updated']
Deployability,"I just wanted to point you that Gentoo Linux also has a FreeBSD port, so the packages in Gentoo should compile on Gentoo FreeBSD too. But hey, it is just discontinued: https://wiki.gentoo.org/wiki/Gentoo_FreeBSD. I just managed to to get a working package for salmon in Gentoo (with some patches fixing the awfull curl/cmake mixture): https://github.com/gentoo/sci/tree/master/sci-biology/salmon",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-400086140:288,patch,patches,288,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/162#issuecomment-400086140,1,['patch'],['patches']
Deployability,"I looked into this, since I'm working on a pipeline that could encounter a similar issue, the problem is that in the ensembl .fq files the transcript IDs are represented as the standard ID.version format, e.g. ENST00000415118.1; but in the GTF, they're represented as separate fields:. gene_id ""ENSG00000223972""; gene_version ""5""; transcript_id ""ENST00000456328""; transcript_version ""2""; gene_name ""DDX11L1""; gene_source ""havana""; gene_biotype ""transcribed_unprocessed_pseudogene""; transcript_name ""DDX11L1-202""; transcript_source ""havana""; transcript_biotype ""processed_transcript""; tag ""basic""; transcript_support_level ""1"";. This is different than the Gencode GTFs where there is not a separate version field and the transcript ids match exactly between the GTF and Fq without parsing any additional fields:. gene_id ""ENSMUSG00000102693.1""; transcript_id ""ENSMUST00000193812.1""; gene_type ""TEC""; gene_name ""4933401J01Rik""; transcript_type ""TEC""; transcript_name ""4933401J01Rik-201""; level 2; transcript_support_level ""NA""; mgi_id ""MGI:1918292""; tag ""basic""; havana_gene ""OTTMUSG00000049935.1""; havana_transcript ""OTTMUST00000127109.1"";. This is also going to affect things like the feature request I made here: https://github.com/COMBINE-lab/salmon/issues/595. So it seems that any attempt at GTF parsing is going to need to check for those atypical gene_version and transcript_version fields and attempt to tack on that information to the base ID.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/598#issuecomment-737603618:43,pipeline,pipeline,43,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/598#issuecomment-737603618,1,['pipeline'],['pipeline']
Deployability,"I managed to figure out what I assume is the up-to-date way of doing things. I will post the code that works for me here in case anyone else comes across this issue:; ```; suppressPackageStartupMessages({; library(fishpond); library(tximport); library(devtools); library(ggplot2); library(patchwork); # Just install Seurat like normal. Tutorial's allusion to a ""spatial"" branch appears to be outdated.; library(Seurat); }). # navigate to data directory; wkdir <- ""path/to/alevin_data/""; setwd(wkdir). # load in alevin output; files <- file.path(""alevin_out/alevin/quants_mat.gz""); file.exists(files). # set prefix for output files; prefix = ""alevin"". # tximport loads the alevin data into R; txi <- tximport(files = files, type = ""alevin""). # Creating a Seurat object with spatial assay; assay <- ""Spatial""; brain <- CreateSeuratObject(counts = txi$counts, project = ""SPATIAL"", assay = assay); brain. # loading the 10x image data; seqdir <- ""path/to/10x_imaging_data/""; image.data <- Read10X_Image(paste0(seqdir,""spatial/"")). # Since the names of alevin cb is different from 10x; # we rename the cells and filter the image data; # to have the metadata for only quantified cells; image.data@boundaries$centroids@cells <- gsub(""-1"", """", image.data@boundaries$centroids@cells); common.cells <- intersect(Cells(x = brain), image.data@boundaries$centroids@cells). # Subset the centroids object; centroids <- image.data@boundaries$centroids. # Find indices of common cells; common_indices <- which(centroids@cells %in% common.cells). # Subset the cells and coords slots; centroids@cells <- centroids@cells[common_indices]; centroids@coords <- centroids@coords[common_indices, ]. # Update the image.data object with the subsetted centroids; image.data@boundaries$centroids <- centroids. # Update the brain object accordingly; brain <- subset(brain, cells = common.cells). # adding image data to Seurat object; DefaultAssay(object = image.data) <- ""Spatial""; brain@images[['slice']] <- image.data; ```; The re",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/942#issuecomment-2204802696:289,patch,patchwork,289,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/942#issuecomment-2204802696,2,"['install', 'patch']","['install', 'patchwork']"
Deployability,"I might add that the progress display is pretty, but having an option to exclude it from the stderr logging, or even have no status updates, would be helpful for log file analysis.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/55#issuecomment-209989267:132,update,updates,132,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/55#issuecomment-209989267,1,['update'],['updates']
Deployability,"I noticed that I am using ""salmon quant"" version 1.4.0. My index was created; using ""salmon index version 1.3.0"". I check the release notes. It does not mention any backwards compatibility issue. Could the version miss-match be my bug?. kind regards. Andy",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/641#issuecomment-809806782:126,release,release,126,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/641#issuecomment-809806782,1,['release'],['release']
Deployability,"I opened an issue in the ngs notes about this. I need to update the docs; the library format string should come before the reads (I.e. -1, -2, -r).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/30#issuecomment-153502274:57,update,update,57,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/30#issuecomment-153502274,1,['update'],['update']
Deployability,"I prefer to have it bundled _within_ RapMap (but am willing to hear argument against this). Specifically, this allows that I have control over the availability (i.e. if the official repo disappears, RapMap will continue to build). Of course, the bundled zip was from a slightly updated version of the official `libdivsufsort` that incorporates a fix into the `CMakeLists.txt` file where the original failed. It would certainly be easy to just move the bundled version into a tarball rather than a zip without any hassle.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-193926752:278,update,updated,278,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/10#issuecomment-193926752,1,['update'],['updated']
Deployability,"I processed the data above using the latest salmon from the develop branch; (the release candidate for 1.3.0), and I got the following time (used 8; threads, so timing is not directly comparable). ```; 4604.57user 43.64system 9:24.15elapsed 823%CPU; ```. The whole log is. ```; [2020-06-15 23:51:54.747] [jointLog] [info] setting maxHashResizeThreads to; 8; [2020-06-15 23:51:54.747] [jointLog] [info] Fragment incompatibility prior; below threshold. Incompatible fragments will be ignored.; [2020-06-15 23:51:54.747] [jointLog] [info] Usage of --validateMappings; implies use of minScoreFraction. Since not explicitly specified, it is; being set to 0.65; [2020-06-15 23:51:54.747] [jointLog] [info] Usage of --validateMappings; implies a default consensus slack of 0.2. Setting consensusSlack to 0.35.; [2020-06-15 23:51:54.747] [jointLog] [info] parsing read library format; [2020-06-15 23:51:54.747] [jointLog] [info] There is 1 library.; [2020-06-15 23:51:54.814] [jointLog] [info] Loading pufferfish index; [2020-06-15 23:51:54.814] [jointLog] [info] Loading dense pufferfish index.; [2020-06-15 23:51:55.555] [jointLog] [info] done; [2020-06-15 23:51:55.555] [jointLog] [info] Index contained 116,248 targets; [2020-06-15 23:51:55.588] [jointLog] [info] Number of decoys : 0; [2020-06-16 00:00:59.666] [jointLog] [info] Computed 344,764 rich; equivalence classes for further processing; [2020-06-16 00:00:59.666] [jointLog] [info] Counted 12,956,134 total reads; in the equivalence classes; [2020-06-16 00:00:59.673] [jointLog] [warning] 0.0736383% of fragments were; shorter than the k used to build the index.; If this fraction is too large, consider re-building the index with a; smaller k.; The minimum read size found was 1. [2020-06-16 00:00:59.673] [jointLog] [info] Number of mappings discarded; because of alignment score : 134,091,887; [2020-06-16 00:00:59.673] [jointLog] [info] Number of fragments entirely; discarded because of alignment score : 2,429,390; [2020-06-16 00:00:59.673]",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644520228:81,release,release,81,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/537#issuecomment-644520228,1,['release'],['release']
Deployability,"I recently had a similar problem using bioconda. . When installing salmon alongside [RSEM](https://anaconda.org/bioconda/rsem), conda downgraded salmon to version 0.6. As soon as I installed salmon in a dedicated environment, everything worked fine.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-735962605:56,install,installing,56,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/565#issuecomment-735962605,2,['install'],"['installed', 'installing']"
Deployability,"I see! Thanks for the tip!. At this point, I would say that there either needs to be a check that curl is installed before using it (for user-friendliness) or that this is a known issue with the workaround above (with the caveat that you delete the CMakeCache.txt file in the build directory after you run `fetchRapMap.sh` manually). I'm surprised curl is not included with the default developer tools on Ubuntu...",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/42#issuecomment-186702766:106,install,installed,106,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/42#issuecomment-186702766,1,['install'],['installed']
Deployability,I seem to have a general issue with installing packages through bioconda. I will close this issue and move it to the conda GitHub.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/871#issuecomment-1706854563:36,install,installing,36,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/871#issuecomment-1706854563,1,['install'],['installing']
Deployability,"I somehow deleted it and forced it to install 1.10.3 and problem solved. ; ""conda install bioconda::salmon=1.10.3"" does not work; I have to do ""conda install salmon=1.10.3""",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/927#issuecomment-2067759510:38,install,install,38,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/927#issuecomment-2067759510,3,['install'],['install']
Deployability,I tested against the released 0.6.0 tarball.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239631165:21,release,released,21,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239631165,1,['release'],['released']
Deployability,"I tested changing the parameters, and I am still getting the same error message:. ```; [2021-07-08 16:05:50.979] [alevinLog] [info] Done importing white-list Barcodes; [2021-07-08 16:05:50.979] [alevinLog] [error] Wrong whitelist provided; Please check https://salmon.readthedocs.io/en/develop/alevin.html#whitelist; ```. However, I will look into the other information and see if I can understand what is happening. I can also test not using a white list and see if that changes the number to be something like an order of magnitude different that what I would expect from the other sample. So, I will post an update when I can run alevin without an error message, and try to give some sense of the results that are quantified.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-877303669:611,update,update,611,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-877303669,1,['update'],['update']
Deployability,"I think @rob-p meant to include links in his reply. The download page is [here](https://www.gencodegenes.org/releases/current.html), and you're likely looking for this file:. ftp://ftp.sanger.ac.uk/pub/gencode/Gencode_human/release_27/gencode.v27.pc_transcripts.fa.gz",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/186#issuecomment-359017963:109,release,releases,109,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/186#issuecomment-359017963,1,['release'],['releases']
Deployability,"I think it probably fetched and built it? Here's what CmakeCache.txt says:. ```; $ grep TBB CMakeCache.txt; //TBB debug library directory; TBB_DEBUG_LIBRARY_DIRS:PATH=; TBB_INCLUDE_DIR:PATH=/home/ryan/src/salmon/external/install/include; //TBB include directory; TBB_INCLUDE_DIRS:PATH=/home/ryan/src/salmon/external/install/include; TBB_LIBRARY:FILEPATH=/home/ryan/src/salmon/external/install/lib/libtbb.so; TBB_LIBRARY_DEBUG:FILEPATH=TBB_LIBRARY_DEBUG-NOTFOUND; //TBB library directory; TBB_LIBRARY_DIRS:PATH=/home/ryan/src/salmon/external/install/lib; TBB_MALLOC_LIBRARY:FILEPATH=/home/ryan/src/salmon/external/install/lib/libtbbmalloc.so; TBB_MALLOC_LIBRARY_DEBUG:FILEPATH=TBB_MALLOC_LIBRARY_DEBUG-NOTFOUND; TBB_RECONFIGURE:UNINITIALIZED=TRUE; TBB_WILL_RECONFIGURE:UNINITIALIZED=FALSE; //ADVANCED property for variable: TBB_DEBUG_LIBRARY_DIRS; TBB_DEBUG_LIBRARY_DIRS-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_INCLUDE_DIR; TBB_INCLUDE_DIR-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_INCLUDE_DIRS; TBB_INCLUDE_DIRS-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_LIBRARY; TBB_LIBRARY-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_LIBRARY_DEBUG; TBB_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_LIBRARY_DIRS; TBB_LIBRARY_DIRS-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_MALLOC_LIBRARY; TBB_MALLOC_LIBRARY-ADVANCED:INTERNAL=1; //ADVANCED property for variable: TBB_MALLOC_LIBRARY_DEBUG; TBB_MALLOC_LIBRARY_DEBUG-ADVANCED:INTERNAL=1; ```. Also, here's the output of every hardware/OS reporting command I can think of:. ```; $ cat /proc/cpuinfo; processor : 0; vendor_id : GenuineIntel; cpu family : 6; model : 63; model name : Intel(R) Xeon(R) CPU E5-2623 v3 @ 3.00GHz; stepping : 2; microcode : 0x36; cpu MHz : 3300.000; cache size : 10240 KB; physical id : 0; siblings : 8; core id : 0; cpu cores : 4; apicid : 0; initial apicid : 0; fpu : yes; fpu_exception : yes; cpuid level : 15; wp : yes; flags : ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266953657:221,install,install,221,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-266953657,5,['install'],['install']
Deployability,"I think this is resolved, right? Since Salmon builds properly in homebrew-science? The next release should solve the external package hashing requirement that they now want to enforce.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-285511495:92,release,release,92,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-285511495,1,['release'],['release']
Deployability,"I think this should be fixed with the latest release, please feel free to reopen if you still face any issues.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-548616164:45,release,release,45,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/328#issuecomment-548616164,1,['release'],['release']
Deployability,"I think we should sort out this issue step by step. If you say `libstaden` has an important bugfix we should upgrade to the latest version in any case. Do you have a link to this bug? I admit this update simply slipped through - we should have upgraded this in the beginning of this year. Usually we try to follow upstream closely (which we failed for salmon blatantly for several reasons - one is the close connection to pufferfish).; Regarding `pufferfish`: We tried hard to get `pufferfish` packaged but failed (due to the use of other versions of `spdlog`, `cereal`, and `fmt`) However, since we can't run `fetchPufferfish.sh` *inside the build process* I was running it separately and added the downloaded source in [debian/external/pufferfish](https://salsa.debian.org/med-team/salmon/-/tree/master/debian/external/pufferfish) So I think the requirement of salmon should be fulfilled. I confirm your feeling that pufferfish is important for the current issue.; However, in the test I did when opening this bug report I did not do that pre-downloading of pufferfish since I was building right in the downloaded source tarball. `libpufferfish-dev` was not installed by `apt build-dep salmon` since this package does not exist.; Kind regards, Andreas.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464878371:109,upgrade,upgrade,109,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1464878371,8,"['install', 'update', 'upgrade']","['installed', 'update', 'upgrade', 'upgraded']"
Deployability,"I think you're right wrt conda. I was able to install 1.10.2 with mamba fairly easily. We've been moving away from conda (towards mamba) but this didn't cross my mind when I was playing in my sandbox. Might be some cluster latency issues combined with conda's snail's pace causing the problem on our end. Thx for the quick replies!. Adam H. Freedman, PhD; Data Scientist; Faculty of Arts & Sciences Informatics Group; Harvard University; 38 Oxford St; Cambridge, MA 02138; phone: +001 310 415 7145; ________________________________; From: Rob Patro ***@***.***>; Sent: Sunday, October 29, 2023 11:01 AM; To: COMBINE-lab/salmon ***@***.***>; Cc: Freedman, Adam ***@***.***>; Mention ***@***.***>; Subject: Re: [COMBINE-lab/salmon] anaconda version of salmon outdated, missing decoys option (Issue #895). Hi @adamfreedman<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_adamfreedman&d=DwMCaQ&c=WO-RGvefibhHBZq3fL85hQ&r=MITI_LEJgyr1a24IMFAlSaZIPxMpOUT21T7L3fg4CjA&m=40O3raH84f_BIZ3HF7nqTYSO2FehGrGHL9b7sqT7LIpWZjFmA3BLxNDTHoz420jp&s=kxY9gCLGWZJp-dp7l31S6M5u2RuUTeWXVrKmaydpo5o&e=>,. I think this is just conda being very very very slow (and potentially broken). The following works fine for me (and finishes in ~1 minute):. mamba create -n salmon -c conda-forge -c bioconda salmon=1.10.2. Can you use the mamba resolver in your environment? Conda has become hardly usable over the years, but mamba works quite well as a fast replacement. I'll also note that I swapped the order of conda-forge and bioconda as the docs specify that bioconda should preferably come last in the list of channels. --Rob. —; Reply to this email directly, view it on GitHub<https://urldefense.proofpoint.com/v2/url?u=https-3A__github.com_COMBINE-2Dlab_salmon_issues_895-23issuecomment-2D1784137337&d=DwMCaQ&c=WO-RGvefibhHBZq3fL85hQ&r=MITI_LEJgyr1a24IMFAlSaZIPxMpOUT21T7L3fg4CjA&m=40O3raH84f_BIZ3HF7nqTYSO2FehGrGHL9b7sqT7LIpWZjFmA3BLxNDTHoz420jp&s=GNiCXqUbJLM16QBJ5PNAqv-rsgDdpCpcvezPXO_riWk&e=>, or unsubscribe<",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/895#issuecomment-1784196835:46,install,install,46,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/895#issuecomment-1784196835,2,['install'],['install']
Deployability,"I think your first suggestion would be the best option - although not sure you want worm transcripts in your decoy file. An alternative is to just quantify the entire collection of sequences. This is what [our pipeline](https://github.com/Novartis/pisces) does. This mostly just consists of running salmon plus some functionality for building custom index files and splitting output for multi-species analysis. You can specify your GTF/FASTA pairs using a [config file](https://github.com/Novartis/pisces/blob/9936079ac75d4b75be95bad5bc962465e8c5f458/pisces/config.json#L46-L49) and the pipeline builds index files, helps run salmon and some basic QC, and outputs separate expression matrices for each individual organism - normalized back to TPM space. The approach seems to work well and is flexible enough for users to specify custom transcriptomes for chimeric/mixed samples or extensive genetic engineering.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/901#issuecomment-1828116329:210,pipeline,pipeline,210,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/901#issuecomment-1828116329,2,['pipeline'],['pipeline']
Deployability,"I tried ; conda install -c bioconda salmon ; similar failure as shown by Jx-b.; Then I tried the way as Jx-b suggested, it failed at first. After updating Conda to the latest version (4.5.1), removing the salmon file and reinstall it by:; conda create -n salmon salmon=0.9.1; The installation was finally complete without error. Thanks for the discussion here, @Jx-b",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-383178270:16,install,install,16,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/192#issuecomment-383178270,2,['install'],"['install', 'installation']"
Deployability,I tried re-installing salmon today after seeing your message. A simple `conda install salmon` worked for me this time. I don't know why it was giving me an error back then and not one now though....,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137154359:11,install,installing,11,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137154359,4,['install'],"['install', 'installing']"
Deployability,"I tried running Alevin again from the new branch and it still seems to be spawning a large number of unexpected threads. Thanks again for all of the help I really appreciate it and I hope you both have a great weekend. ```; GNU gdb (Debian 7.7.1+dfsg-5) 7.7.1; Copyright (C) 2014 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from /u/user/local/bin/salmon...done.; (gdb) run alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; Starting program: /u/user/local/bin/salmon alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe; -path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable ",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627:627,configurat,configuration,627,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627,2,['configurat'],['configuration']
Deployability,"I tried using Homo_sapiens.GRCh38.94.chr_patch_hapl_scaff.gtf.gz for the annotation file and ftp://ftp.ensembl.org/pub/release-94/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz to build the index but got a similar error. Here are the logs (I modified the salmon log a bit because it didn't have the error message that printed to stdout). [alevin.log](https://github.com/COMBINE-lab/salmon/files/3224429/alevin.log); [salmon_quant.log](https://github.com/COMBINE-lab/salmon/files/3224440/salmon_quant.log). One curious thing that I noticed:. ```; Index contained 175,775 targets; ...; ERROR: Txp to Gene Map not found for 175775 transcripts; ```; It seems to not be finding any of the transcripts? This was also the case for the gencode attempt that I made previously.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-496258062:119,release,release-,119,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/336#issuecomment-496258062,1,['release'],['release-']
Deployability,"I used autotools back in 2008 or so (when I was still working in computer graphics). I found it to be horribly archaic (not that CMake is a bastion of clarity). Also, as opaque as CMake sometimes is, I at least found it easier to discover how to force it to do what I wanted than with autotools. That being said, I feel like it is one of these situations where, if you are a wizard with the tool, everything seems relatively easy and straightforward (e.g. Guillaume uses autotools for Jellyfish, and he seems to have internalized all of the quirks fairly well). I guess I long for a configuration and build DSL that has an actual nice language, rather than the somewhat crazy invocations required by autotools and CMake. Then again, the annals of history are strewn with the wreckage of deprecated and defunct attempts to make better build systems.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195457891:583,configurat,configuration,583,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195457891,1,['configurat'],['configuration']
Deployability,I want the salmon binary package for MacOSX too like bowtie2 does. https://github.com/BenLangmead/bowtie2/releases; > bowtie2-2.3.4.1-linux-x86_64.zip; > bowtie2-2.3.4.1-macos-x86_64.zip,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-410478288:106,release,releases,106,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/260#issuecomment-410478288,1,['release'],['releases']
Deployability,I was able to fix the other bug you encountered (on OSX) --- it should now be fixed in the develop branch with a clean build. That makes this bug my current top priority. I'd like to fix it so I can merge both changes into master and cut a v0.10.1 release. Let me know the best way I can help address this one.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393595135:248,release,release,248,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/229#issuecomment-393595135,1,['release'],['release']
Deployability,"I was trying to troubleshoot the contemplation period of salmon with monitoring utilities and just stumbled upon this issue upon submitting my own. The failed version check gets buried by the spew of warnings for too short/long transcripts for hg38 mrna.fna in my case. The current behaviour is particularly irritating as I assumed, that `salmon index -h` just runs into a loop accidentally. The check takes multiple minutes to timeout. I am behind a proxy. Please remove the version check by default, as this is not common behaviour of command line tools or anticipated by the user. Or at least please add a verbose message before checking ""Checking for upgrades online..."".",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/277#issuecomment-474388032:655,upgrade,upgrades,655,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/277#issuecomment-474388032,1,['upgrade'],['upgrades']
Deployability,I will be trying your suggestion out. I might be able to share with you a toy dataset with a fewer number of guides. I will update you as soon as I get it.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639618956:124,update,update,124,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/531#issuecomment-639618956,2,['update'],['update']
Deployability,"I will close this once I'm able to apply the patch for your other issue. At that point, I will bump everything to 0.10.1 and cut a new release.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393594278:45,patch,patch,45,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/228#issuecomment-393594278,2,"['patch', 'release']","['patch', 'release']"
Deployability,"I would argue that Kallisto is ""cheating"" a bit by looking at expression of the equivalence classes :p, avoiding the ambiguous assignment issue. Just offering an opinion as a Salmon fan, but to me it seems extremely hard to make the data generation model of coverage based sequencing compatible with umi-tags. I've been thinking a bit about this, and actually, if the PCR bias model in 0.7/Alpine is good, it might even make sense to _ignore_ the UMI and quantify the expression based the mRNA tags alone. In this case you would just need to change transcript length to be constant per transcript, and only update effectiveLength's based on the sequence biases. The reason you have UMI's in the first place, is that 3'/5'-tag libraries will have much lower complexity than full-length libraries, and due to that you can argue that PCR bias will be a larger problem. But if it is possible to accurately account for the PCR bias with GC content, maybe they are not so needed?",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/93#issuecomment-249524891:607,update,update,607,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/93#issuecomment-249524891,1,['update'],['update']
Deployability,"I'd like to release a relocatable bottle of 0.6.0. Would you like to merge this PR and tag Salmon 0.6.1, or would you prefer that I release a revised bottle of Salmon 0.6.0. The revised bottle has the version number `0.6.0_1`. I'm perfectly fine with either.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239631230:12,release,release,12,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239631230,2,['release'],['release']
Deployability,"I'd rather not bundle the dependency. Troubleshooting bundled dependencies is crazy making. The `cmake` script could check that the dependency is satisfied and report an error message if it's not. Or I suppose install the dependency if it's not satisfied. Perhaps that's what you were thinking.; In any case, here's the web site: http://tukaani.org/xz/; and git repository: http://git.tukaani.org/; Here's a GitHub mirror. I don't know whether it's current: https://github.com/nobled/xz",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193941254:210,install,install,210,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193941254,1,['install'],['install']
Deployability,"I'll be adding this script to the next release (which should happen very soon). At that point, I'll close this issue unless anyone objects. I may still look into supporting interleaved format natively in the future, but for now this approach seems to work well.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-173980056:39,release,release,39,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-173980056,1,['release'],['release']
Deployability,I'll check that Homebrew installs the Jellyfish config.h file.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195604141:25,install,installs,25,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/19#issuecomment-195604141,1,['install'],['installs']
Deployability,"I'm attaching the linux binary with the fix [here](https://github.com/COMBINE-lab/salmon/files/2074498/salmon-latest_linux_x86_64.tar.gz). Can you see if this runs without error for you (after addressing the issues with the duplicate sequences and alignment sort order mentioned above)? If so, I'll cut it as a new release. Thanks!",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394912602:315,release,release,315,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/231#issuecomment-394912602,1,['release'],['release']
Deployability,"I'm going to close this for now, since it seems there are no updates. If there are any more details, we can reopen.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-289310929:61,update,updates,61,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/113#issuecomment-289310929,1,['update'],['updates']
Deployability,"I'm having a similar problem, also using an M1 mac. I've tried your solution @rob-p, as well as updating conda, creating a new environment specifically for salmon, it still doesn't work. I get the following error:. ```; $ conda install -c bioconda salmon 3s Py salmon; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve. PackagesNotFoundError: The following packages are not available from current channels:. - salmon. Current channels:. - https://conda.anaconda.org/bioconda/osx-arm64; - https://conda.anaconda.org/bioconda/noarch; - https://conda.anaconda.org/conda-forge/osx-arm64; - https://conda.anaconda.org/conda-forge/noarch; - https://repo.anaconda.com/pkgs/main/osx-arm64; - https://repo.anaconda.com/pkgs/main/noarch; - https://repo.anaconda.com/pkgs/r/osx-arm64; - https://repo.anaconda.com/pkgs/r/noarch. To search for alternate channels that may provide the conda package you're; looking for, navigate to. https://anaconda.org. and use the search bar at the top of the page.; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137109855:228,install,install,228,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/724#issuecomment-1137109855,1,['install'],['install']
Deployability,"I'm interested in this as well. Note that the (Harvard) inDrops v3 library protocol differs from v2, and is documented here: https://iccb.med.harvard.edu/files/iccb/files/sequencing_indrops_libraries_02_28_18.pdf. For reference, bcbio supports inDrops and Dropseq barcodes, but it'd be great it if we could better integrate this workflow with alevin: https://bcbio-nextgen.readthedocs.io/en/latest/contents/pipelines.html",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/339#issuecomment-474551107:314,integrat,integrate,314,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/339#issuecomment-474551107,2,"['integrat', 'pipeline']","['integrate', 'pipelines']"
Deployability,"I'm rebasing this since it's easier to put it directly into develop (which is merged into master prior to every release) than to pull into master and cherry pick. However, since this is just relevant to a single file, I might cherry pick to master as well anyway ;P.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/273#issuecomment-414320321:112,release,release,112,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/273#issuecomment-414320321,1,['release'],['release']
Deployability,I'm sorry my late response. I will check the latest stable release. I will contact you if we find any problems. Thanks!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/416#issuecomment-550180608:59,release,release,59,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/416#issuecomment-550180608,1,['release'],['release']
Deployability,"I'm surprised that the `@rpath` showed up, when I thought that we had disabled that. So long as `brew install salmon` works on Mac, I wouldn't worry about downloading and installing dependencies. Leave that chore to the package manager.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239604008:102,install,install,102,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239604008,2,['install'],"['install', 'installing']"
Deployability,"I'm testing it now. ``` sh; brew edit salmon; ```. Then add. ``` ruby; patch do; url ""https://github.com/COMBINE-lab/salmon/pull/70.patch""; sha256 ""7129eac8591ad954cca30576519071b1f5ea2a36206f973a1aef0bc1eb5d20da""; end; ```. Then. ``` sh; brew install salmon --build-bottle; brew bottle salmon --json -v; ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239628714:71,patch,patch,71,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239628714,3,"['install', 'patch']","['install', 'patch']"
Deployability,"I've also updated the blog post to refer to the new format. I'm going to close this issue for now, but please feel free to comment on it or re-open if you run into any more trouble.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-194490282:10,update,updated,10,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/47#issuecomment-194490282,1,['update'],['updated']
Deployability,I've figured out the incompatibilities with Jellyfish 2.2.3 and switched to that in the [quasimapping](https://github.com/COMBINE-lab/salmon/tree/quasimapping) branch. This will be merged back into master and made part of the next release as soon as we're finished with porting the bootstrapping feature from Sailfish.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/11#issuecomment-144717497:231,release,release,231,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/11#issuecomment-144717497,1,['release'],['release']
Deployability,"I've run into this (or a similar) issue attempting to install Salmon on the UC Berkeley HPC cluster. Iconv was present within one of our Python installs, but that didn't seem to have the header files, so I installed libiconv/1.16 thinking this was a dependency issue. Unfortunately this didn't seem to help. Any guidance would be greatly appreciated. Here is my build script to the point of failure:; ```sh; #!/bin/sh ; MODULE_HOME=/clusterfs/vector/home/groups/software/sl-7.x86_64; PACKAGE_NAME=salmon; GITHUB_URL=https://api.github.com/repos/COMBINE-lab/salmon/releases/latest; VERSION=$(curl -s $GITHUB_URL | \; grep '""tag_name"":' | \; cut -d : -f 2,3 | \; tr -d \"",v | \; xargs); LATEST_RELEASE=$(curl -s $GITHUB_URL | \; grep '""tarball_url""' | \; cut -d : -f 2,3 | \; tr -d \"", | \; xargs); module load gcc/7.4.0 cmake/3.15.1 boost/1.70.0-gcc libiconv/1.16; export CC=`which gcc`; export CXX=`which c++`. cd $MODULE_HOME; mkdir -p source/$PACKAGE_NAME/$VERSION; INSTALL_DIR=$MODULE_HOME/modules/$PACKAGE_NAME/$VERSION; mkdir -p $INSTALL_DIR; mkdir -p modfiles/$PACKAGE_NAME. cd source/$PACKAGE_NAME/$VERSION; wget $LATEST_RELEASE -O - | tar -xz --strip-components 1; cmake -DBOOST_ROOT=/global/software/sl-7.x86_64/modules/gcc/7.4.0/boost/1.70.0-gcc -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR; make; ```; And the tail of the output from make:. ```; creating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/; inflating: /clusterfs/vector/home/groups/software/sl-7.x86_64/source/salmon/1.5.1/scripts/../external/pufferfish-salmon-v1.5.1/tests/compile_tests/int128_numeric_limits.cpp ; -- fetch PUFFERFISH exit code 0; -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11"") ; -- Performing Test Iconv_IS_BUILT_IN; -- Performing Test Iconv_IS_BUILT_IN - Failed; CMake Error at /global/home/groups/consultsw/sl-7.x86_64/modules/cmake/3.15.1/share/cmake-3.15/Modules/FindPackageHandleStandardArgs.cmake:137 (message",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315:54,install,install,54,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/453#issuecomment-862737315,8,"['install', 'release']","['install', 'installed', 'installs', 'releases']"
Deployability,"I've tried to reproduce the issue in docker by using the Build-Depends that are used in Debian:. $ docker pull debian:testing; $ docker run -it debian:testing; $ echo ""deb-src http://deb.debian.org/debian unstable main"" > /etc/apt/sources.list.d/10-debsrc.list; $ apt update; $ apt upgrade; $ apt build-dep salmon; $ wget https://github.com/COMBINE-lab/salmon/archive/refs/tags/v1.10.0.tar.gz; $ tar xaf v1.10.0.tar.gz; $ cd salmon-1.10.0; $ mkdir build && cd build; $ cmake -DNO_IPO=TRUE ..; $ make -j8; make -j8; [ 3%] Built target ksw2pp_sse4; [ 6%] Built target ntcard; [ 15%] Built target twopaco; [ 18%] Built target graphdump; [ 21%] Built target ksw2pp_sse2; [ 27%] Built target ksw2pp_basic; [ 43%] Built target salmon_core; [ 67%] Built target puffer; [ 68%] Built target ksw2pp; [ 69%] Built target UnitTestsMain; [ 73%] Built target alevin_core; [ 74%] Linking CXX executable unitTests; /usr/bin/ld: /usr/lib/x86_64-linux-gnu/libcurl.a(libcurl_gnutls_la-psl.o): in function `Curl_psl_destroy':; (.text+0x21): undefined reference to `psl_free'; /usr/bin/ld: /usr/lib/x86_64-linux-gnu/libcurl.a(libcurl_gnutls_la-psl.o): in function `Curl_psl_use':; (.text+0xbc): undefined reference to `psl_latest'; /usr/bin/ld: (.text+0x157): undefined reference to `psl_builtin'; /usr/bin/ld: /usr/lib/x86_64-linux-gnu/libcurl.a(libcurl_gnutls_la-version.o): in function `curl_version':; (.text+0x129): undefined reference to `BrotliDecoderVersion'; /usr/bin/ld: (.text+0x16f): undefined reference to `ZSTD_versionNumber'; /usr/bin/ld: (.text+0x1e3): undefined reference to `idn2_check_version'; /usr/bin/ld: (.text+0x20e): undefined reference to `psl_get_version'; /usr/bin/ld: /usr/lib/x86_64-linux-gnu/libcurl.a(libcurl_gnutls_la-version.o): in function `curl_version_info':; (.text+0x386): undefined reference to `idn2_check_version'; /usr/bin/ld: (.text+0x3ad): undefined reference to `BrotliDecoderVersion'; /usr/bin/ld: (.text+0x3b8): undefined reference to `BrotliDecoderVersion'; /usr/bin/ld: (.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463708855:268,update,update,268,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/835#issuecomment-1463708855,2,"['update', 'upgrade']","['update', 'upgrade']"
Deployability,I've updated the doc and it should me available with the next release or the docs from the develop branch. Thanks again.,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/395#issuecomment-510121247:5,update,updated,5,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/395#issuecomment-510121247,2,"['release', 'update']","['release', 'updated']"
Deployability,I've updated the linked shell script. Thanks for pointing it ou!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614386127:5,update,updated,5,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/508#issuecomment-614386127,1,['update'],['updated']
Deployability,"I've updated the runner script so that it is now self contained (i.e. it no longer relies on deinterleave_fastq.sh as an external script). Once we're able to modify it to work with multiple input interleaved fastq files, I'll add it to the official repository.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168821483:5,update,updated,5,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/29#issuecomment-168821483,1,['update'],['updated']
Deployability,"ILE1=$(awk 'BEGIN {FS=""\t""} {print $1}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); if [ TRUE == ""TRUE"" ] ; then; FILE2=$(awk 'BEGIN {FS=""\t""} {print $3}' /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk ""NR==${SGE_TASK_ID}""); fi; ID=$(cat /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/samples.manifest | awk '{print $NF}' | awk ""NR==${SGE_TASK_ID}""). mkdir -p /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/${ID}. strace /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon quant 	-i /dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Annotation/Salmon_index_test/salmon_0.8.2_index_gencode.v25.transcripts -p 1 -l ISR 	-1 ${FILE1} -2 ${FILE2} 	-o /dcl01/lieber/ajaffe/lab/libd_alzheimers/hg38/salmon_test12/${ID} 2> logs/strace_test12_${SGE_TASK_ID}.txt. echo ""**** Job ends ****""; date; ```. Again, here is the `strace` output for task 1 (411 lines):. ```; execve(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", [""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""quant"", ""-i"", ""/dcl01/lieber/ajaffe/Emily/RNAse""..., ""-p"", ""1"", ""-l"", ""ISR"", ""-1"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-2"", ""/dcl01/lieber/ajaffe/lab/libd_al""..., ""-o"", ""/dcl01/lieber/ajaffe/lab/libd_al""...], [/* 107 vars */]) = 0; brk(0) = 0xc2c000; mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fffbfffd000; readlink(""/proc/self/exe"", ""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/salmon"", 4096) = 88; access(""/etc/ld.so.preload"", R_OK) = -1 ENOENT (No such file or directory); open(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64/libpthread.so.0"", O_RDONLY) = -1 ENOENT (No such file or directory); stat(""/dcl01/lieber/ajaffe/Emily/RNAseq-pipeline/Software/Salmon-0.8.2_linux_x86_64/bin/../lib/tls/x86_64"", 0x7fffffffb4f0) = -1 ENOENT (No such file or directory);",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888:79219,pipeline,pipeline,79219,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/126#issuecomment-291994888,1,['pipeline'],['pipeline']
Deployability,"ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; Starting program: /u/user/local/bin/salmon alevin -l ISR --chromium -p 4 -o BM_1/alevin -1 ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz -2 ./BM_1/run1/bm_S10_L001_R2_001.fastq.gz --maxHashResizeThreads 2 -i /u/user/ref/cellranger/salmon/transcripts_index --tgMap tx2gene.txt; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; warning: File ""/u/user/local/lib64/libstdc++.so.6.0.21-gdb.py"" auto-loading has been declined by your `auto-load safe; -path' set to ""$debugdir:$datadir/auto-load"".; To enable execution of this file add; add-auto-load-safe-path /u/user/local/lib64/libstdc++.so.6.0.21-gdb.py; line to your configuration file ""/u/user/.gdbinit"".; To completely disable this security protection add; set auto-load safe-path /; line to your configuration file ""/u/user/.gdbinit"".; For more information about this security protection see the; ""Auto-loading safe path"" section in the GDB manual. E.g., run from the shell:; info ""(gdb)Auto-loading safe path""; [New Thread 0x7fff7dbff700 (LWP 21437)]; [Thread 0x7fff7dbff700 (LWP 21437) exited]; Version Info: Could not resolve upgrade information in the alotted time.; Check for upgrades manually at https://combine-lab.github.io/salmon; [New Thread 0x7ffefcfff700 (LWP 21653)]; Logs will be written to BM_1/alevin/logs; [New Thread 0x7ffe7cffe700 (LWP 21654)]; [New Thread 0x7ffdfcffd700 (LWP 21655)]; [New Thread 0x7ffd7cffc700 (LWP 21656)]; ### salmon (single-cell-based) v0.10.3; ### [ program ] => salmon; ### [ command ] => alevin; ### [ libType ] => { ISR }; ### [ chromium ] => { }; ### [ threads ] => { 4 }; ### [ output ] => { BM_1/alevin }; ### [ mates1 ] => { ./BM_1/run1/bm_S10_L001_R1_001.fastq.gz }; ### [ mates2 ] => { ./BM_1/run1/bm_S10_L001_R2_",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627:2071,configurat,configuration,2071,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/234#issuecomment-396078627,1,['configurat'],['configuration']
Deployability,"If I install Salmon Binary:; [100%] Building CXX object src/CMakeFiles/salmon.dir/BAMUtils.cpp.o; [100%] Linking CXX executable salmon; /usr/bin/ld: ../../external/install/lib/libstaden-read.a(libstaden_read_la-open_trace_file.o): in function `find_file_url':; open_trace_file.c:(.text+0xf4e): warning: the use of `tempnam' is dangerous, better use `mkstemp'; during IPA pass: icf; lto1: internal compiler error: Segmentation fault; Please submit a full bug report,; with preprocessed source if appropriate.; See <file:///usr/share/doc/gcc-9/README.Bugs> for instructions.; lto-wrapper: fatal error: /usr/bin/c++ returned 1 exit status; compilation terminated.; /usr/bin/ld: error: lto-wrapper failed; collect2: error: ld returned 1 exit status; make[2]: *** [src/CMakeFiles/salmon.dir/build.make:421: src/salmon] Error 1; make[1]: *** [CMakeFiles/Makefile2:659: src/CMakeFiles/salmon.dir/all] Error 2; make: *** [Makefile:163: all] Error 2",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/592#issuecomment-734935424:5,install,install,5,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/592#issuecomment-734935424,2,['install'],['install']
Deployability,"If i use the smaller set of barcodes, then I progress further. However, I still receive an error message (and there no **quants_mat_rows.txt** file):. ```; [2021-07-13 13:59:07.109] [alevinLog] [info] Total 0.00 UMI after deduplicating.; [2021-07-13 13:59:07.109] [alevinLog] [info] Total 0 BiDirected Edges.; [2021-07-13 13:59:07.109] [alevinLog] [info] Total 0 UniDirected Edges.; [2021-07-13 13:59:07.134] [alevinLog] [info] Finished optimizer; /var/spool/slurmd/job3050767/slurm_script: line 23: 10494 Floating point exception../../Ref_Generation/salmon-1.5.1_linux_x86_64/bin/salmon alevin -l ISF --chromium -1 $R1 -2 $R2 -i $REF -p 4 -o $ID --tgMap $MAP --whitelist $CBWL. ```. If the barcode is on the opposite read, then I am not sure if I should really be using the reverse or reverse complement (possibly even for the full barcode list)?. However, for the sake of this discussion, I will now test not providing any white list. If that works, then I will close the ticket again. **Update (7/14/2021)**: I have added the full log file here: [cluster_log.log](https://github.com/COMBINE-lab/salmon/files/6819402/cluster_log.log)",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-879497561:990,Update,Update,990,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-879497561,1,['Update'],['Update']
Deployability,"If it's useful, I made an example where you can run beginning to end to reproduce (didn't see this thread beforehand). Download these:. ```; ftp://ftp.ensembl.org/pub/release-87/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz; ftp://ftp.ensembl.org/pub/release-87/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz; ftp://ftp.ensembl.org/pub/release-87/gtf/homo_sapiens/Homo_sapiens.GRCh38.87.gtf.gz. ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR188/ERR188297/ERR188297_1.fastq.gz; ftp://ftp.sra.ebi.ac.uk/vol1/fastq/ERR188/ERR188297/ERR188297_2.fastq.gz; ```. Using STAR 2.5.2b. ```; star --runThreadN 6 \; --runMode genomeGenerate \; --genomeDir ensembl87 \; --genomeFastaFiles Homo_sapiens.GRCh38.dna.primary_assembly.fa \; --sjdbGTFfile Homo_sapiens.GRCh38.87.gtf \; --sjdbOverhang 100. star --runThreadN 6 \; --genomeDir ensembl87 \; --readFilesIn ERR188297_1.fastq ERR188297_2.fastq \; --outFileNamePrefix star/ \; --outSAMtype BAM Unsorted \; --quantMode TranscriptomeSAM; ```. Then, following Thomas, I chop the version numbers from the FASTA. ```; cut -f1 -d ""."" Homo_sapiens.GRCh38.cdna.all.fa > transcripts_unversioned.fa; ```. Now Salmon v0.7.2. Without `--gcBias` it runs to completion. Although nothing in `libParams` dir... ```; Salmon-0.7.2_linux_x86_64/bin/salmon quant -t transcripts_unversioned.fa -l IU -p 6 -a star/Aligned.toTranscriptome.out.bam -o align_test; ```. With `--gcBias` produces segfault:. ```; Salmon-0.7.2_linux_x86_64/bin/salmon quant --gcBias -t transcripts_unversioned.fa -l IU -p 6 -a star/Aligned.toTranscriptome.out.bam -o align_testGC; ```. ```; ^M^MESC[0;32mprocessedESC[0;31m 0 ESC[0;32mreads in current roundESC[0;0m/nas02/home/m/i/milove/.lsbatch/1481837415.333618.shell: line 9: 29198 Segmentation fault (core dumped); ```",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267451963:167,release,release-,167,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/104#issuecomment-267451963,3,['release'],['release-']
Deployability,"If one has a downstream fusion pipeline that uses transcriptome mapping, you can already get those from the -z=<output.sam> option for a while. The real challenge is how to properly control the false positive rate. That's the main thing special purpose downstream software must solve.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-280828290:31,pipeline,pipeline,31,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/52#issuecomment-280828290,1,['pipeline'],['pipeline']
Deployability,"If you can already use DESeq2, then using tximport should not make it any harder at all. Given the tximport data, getting it into DESeq2 is as easy as. ```; dds <- DESeqDataSetFromTximport(txi, sampleTable, ~condition); ```. as shown in the [tximport vignette](https://bioconductor.org/packages/release/bioc/vignettes/tximport/inst/doc/tximport.html#Introduction). . Regarding outputting ""original read counts""; salmon *does* output the estimates for the number of reads deriving from each transcript. If the question is, why is this number not an integer, that's because the best estimate (the maximum likelihood estimate) is often not integral. Tools that simply count reads (e.g. HTSeq) produce integer counts, but these are in no way ""original read counts"" for the corresponding genes, and are usually less accurate (farther from the true number of fragments deriving from a transcript / gene) than the estimates produced by salmon. The fact that the best estimate is often not an integer is a direct result of the fact one is considering a statistical model and taking expectations.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-751190682:295,release,release,295,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/437#issuecomment-751190682,2,['release'],['release']
Deployability,"Ignore travis-ci --- it's drunk (has been broken for the past week or so, without any good reason; I think they updated images or some such).",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/158#issuecomment-332854529:112,update,updated,112,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/158#issuecomment-332854529,1,['update'],['updated']
Deployability,"In other news --- after many many continuous tries, I was finally able to reproduce the issue! I've never been so happy to reproduce a bug. Now to find out if it's our fault or TBB's fault.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267692883:34,continuous,continuous,34,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/111#issuecomment-267692883,1,['continuous'],['continuous']
Deployability,"In terms of an intermediate update:. **Setting 1**:. _Command 1_:; `/path/to/salmon alevin -l ISF --chromium -1 $R1 -2 $R2 -i $REF -p 4 -o $ID --tgMap $MAP`; _End of Log 1_:; ```; [2021-07-13 20:12:34.651] [alevinLog] [info] Starting white listing of 814 cells; [2021-07-13 20:12:34.651] [alevinLog] [info] Starting to make feature Matrix; [2021-07-13 20:12:34.654] [alevinLog] [info] Done making feature Matrix; [2021-07-13 20:12:35.447] [alevinLog] [info] Finished white listing; [2021-07-13 20:12:36.158] [alevinLog] [info] Finished optimizer; 0.0408521	8.9925e-05	0.000114595	636780	18682.9	; 0.0290163	6.61624e-05	0.000111685	230922	8010.3	; ```; _Size of quants_mat_rows.txt 1_: 814 lines/barcodes. **Setting 2:**:; _Command 1_:; `/path/to/salmon alevin -l ISR --chromium -1 $R1 -2 $R2 -i $REF -p 4 -o $ID --tgMap $MAP`; _End of Log 1_:; ```; [2021-07-14 09:51:38.564] [alevinLog] [info] Starting white listing of 814 cells; [2021-07-14 09:51:38.564] [alevinLog] [info] Starting to make feature Matrix; [2021-07-14 09:51:38.566] [alevinLog] [info] Done making feature Matrix; [2021-07-14 09:51:39.347] [alevinLog] [info] Finished white listing; [2021-07-14 09:51:39.541] [alevinLog] [info] Finished optimizer; [2021-07-14 09:51:39.564] [jointLog] [warning] NOTE: Read Lib [[ ../Reads/5309-CT-2_S01_L005_R1_001.fastq.gz, ../Reads/5309-CT-2_S01_L005_R2_001.fastq.gz]] :. Greater than 5% of the fragments disagreed with the provided library type; check the file: 5309-CT-2/lib_format_counts.json for details. 0.0408521	8.9925e-05	0.000114595	636780	18682.9	; 0.0290163	6.61624e-05	0.000111685	230922	8010.3	; ```; _Size of quants_mat_rows.txt 1_: 814 lines/barcodes. Technically, this means that the program ran without generating an error message, but this seems strange to me. So, I think I would prefer to keep the issue open a little bit longer.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-880273749:28,update,update,28,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/682#issuecomment-880273749,1,['update'],['update']
Deployability,"In the latest release (along with other, even **more-awesome** new features), FPKM has been dropped from the output.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/3#issuecomment-107132845:14,release,release,14,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/3#issuecomment-107132845,1,['release'],['release']
Deployability,Indeed — do you know if there's a fork of lzma on GitHub that I can pull from (if there's not a version locally installed on the target)?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193921026:112,install,installed,112,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/45#issuecomment-193921026,1,['install'],['installed']
Deployability,"Indeed. It looks like the option name changed at some point in the past, but the documentation didn't follow suite. The appropriate long-form option is `--threads`. I'll update this in the docs.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/241#issuecomment-400053601:170,update,update,170,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/241#issuecomment-400053601,1,['update'],['update']
Deployability,Interesting! That looks docker / singularity related. I pushed an updated latest tag with the proper ld library path. Perhaps pulling thay again will resolve it?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/447#issuecomment-553008756:66,update,updated,66,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/447#issuecomment-553008756,1,['update'],['updated']
Deployability,Interesting. One thing that changed is that we finally upgraded the Docker image used in our continuous integration server from CentOS5 to CentOS6; I wonder if that might cause some portability issues. Could you try installing via Bioconda to see if that executable gives you the same trouble?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-394752905:55,upgrade,upgraded,55,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/232#issuecomment-394752905,4,"['continuous', 'install', 'integrat', 'upgrade']","['continuous', 'installing', 'integration', 'upgraded']"
Deployability,"Interesting... So you're concerned that; [https://github.com/jemalloc/jemalloc/archive/5.1.0.tar.gz](https://github.com/jemalloc/jemalloc/archive/5.1.0.tar.gz); could change at some point? I'm not an expert on Github internals, but I would assume there are some safeguards against changes to release distfiles.; Thanks,; Jason",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/288#issuecomment-420335374:292,release,release,292,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/288#issuecomment-420335374,1,['release'],['release']
Deployability,Is it possible to have homebrew pull from the head of develop before I tag the release to make sure this fix works under homebrew science?,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239627288:79,release,release,79,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239627288,1,['release'],['release']
Deployability,"Is there a different binary somewhere perhaps? . I a downloading: . https://github.com/COMBINE-lab/salmon/releases/download/v0.8.2/Salmon-0.8.2_macOS_10.12.tar.gz. And get this: . Salmon-0.8.2_macOS_10.12.tar.gz; 100%[=====================================================>] 2.64M ; 326KB/s in 6.6s . 2017-04-18 09:43:33 (409 KB/s) - 'Salmon-0.8.2_macOS_10.12.tar.gz' saved; [2766997/2766997] . MacBook-Air:salmon jjv5$ tar zxf Salmon-0.8.2_macOS_10.12.tar.gz . MacBook-Air:salmon jjv5$ cd Salmon-0.8.2_macOX_10.12/bin/ . MacBook-Air:bin jjv5$ ./salmon -h . salmon(43548,0x7fffdc0c23c0) malloc: *** malloc_zone_unregister() failed; for 0x7fffdc0b8000 . Salmon v0.8.2 . Usage: salmon -h|--help or . salmon -v|--version or . salmon -c|--cite or . salmon [--no-version-check] <COMMAND> [-h | options] . Commands: . cite Show salmon citation information . index Create a salmon index . quant Quantify a sample . swim Perform super-secret operation . MacBook-Air:bin jjv5$ sw_vers . ProductName: Mac OS X . ProductVersion: 10.12.4 . BuildVersion: 16E195. On 2017-04-18 09:33, Rob Patro wrote:. > Hi @jjv5 [1], ; > ; > This error should be fixed. The binary works for me without error (or that strange jemalloc warning) on OS X 10.12.4. The relevant library should be statically linked in, so I doubt it's a path problem. You could also try the conda build [2] to see if that works for you. ; > ; > --; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub [3], or mute the thread [4].; . Links:; ------; [1] https://github.com/jjv5; [2] https://anaconda.org/bioconda/salmon; [3]; https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294845429; [4]; https://github.com/notifications/unsubscribe-auth/AA45u06Kawg81nafcz0GBVcZICdu85iqks5rxLuSgaJpZM4Ktuq4",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294849229:106,release,releases,106,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/103#issuecomment-294849229,1,['release'],['releases']
Deployability,Is there any update on this? I am seeing the same warnings and I don't think I totally understand what they mean and whether they can be safely ignored... Thanks!,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1328992610:13,update,update,13,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/701#issuecomment-1328992610,1,['update'],['update']
Deployability,"Is there some way I can pass a custom CFLAGS to the libbwa build? The Makefile there assumes a system-wide installed zlib, which bioconda doesn't have on its docker image, so the bwa build needs to get the -I and -L flags to point to the correct place.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/89#issuecomment-245999418:107,install,installed,107,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/89#issuecomment-245999418,1,['install'],['installed']
Deployability,It does seem that this option is implemented on the latest release (0.8.2). With single-end data with the --gcBias flag there is a warning about the implementation being experimental. Have you had a chance to test the results? Would be very interested to hear,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/83#issuecomment-320479168:59,release,release,59,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/83#issuecomment-320479168,1,['release'],['release']
Deployability,"It is, if you provide a list of CB to use through command line flag --whitelist. But again I think it's a circular problem, if you know the list of CB to use, you might have already figures out the frequency distribution of each CB by parsing the fastq. Either by using --dumpFeatures or externally may be through awk. One other option is to use --keepCBfraction it takes a number in (0, 1] , which basically tells Alevin to use X fraction of CB from the total observed. The caveat there is to figure out a decent value of X as the CB frequency distribution is a long tailed distribution and if say you provide 1 then Alevin will quantify each and every observed CB and slow down the full pipeline.",MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490833213:689,pipeline,pipeline,689,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/issues/362#issuecomment-490833213,1,['pipeline'],['pipeline']
Deployability,It looks like this patch had no effect at all. :confused:. ```; ❯❯❯ cmake -DCMAKE_INSTALL_PREFIX:PATH=$HOME/tmp/salmon ..; ❯❯❯ make; ❯❯❯ make install; ❯❯❯ otool -l /Users/sjackman/tmp/salmon/bin/salmon |grep -A2 RPATH; cmd LC_RPATH; cmdsize 48; path /Users/sjackman/tmp/salmon/bin (offset 12); --; cmd LC_RPATH; cmdsize 48; path /Users/sjackman/tmp/salmon/lib (offset 12); --; cmd LC_RPATH; cmdsize 32; path @executable_path (offset 12); ```,MatchSource.ISSUE_COMMENT,COMBINE-lab,salmon,v1.10.1,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239532970:19,patch,patch,19,https://combine-lab.github.io/salmon,https://github.com/COMBINE-lab/salmon/pull/70#issuecomment-239532970,2,"['install', 'patch']","['install', 'patch']"
