quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Energy Efficiency,"ect::RecursiveRemove(TObject* obj); Bool_tRooAbsArg::redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); voidRooAbsArg::registerCache(RooAbsCache& cache); voidRooAbsArg::removeServer(RooAbsArg& server, Bool_t force = kFALSE); voidRooAbsArg::replaceServer(RooAbsArg& oldServer, RooAbsArg& newServer, Bool_t valueProp, Bool_t shapeProp); voidTObject::ResetBit(UInt_t f); virtual voidRooAbsPdf::resetErrorCounters(Int_t resetValue = 10); RooMultiVarGaussian(); RooMultiVarGaussian(const RooMultiVarGaussian& other, const char* name = 0); RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TMatrixDSym& covMatrix); RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const RooArgList& mu, const TMatrixDSym& covMatrix); RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const RooFitResult& fr, Bool_t reduceToConditional = kTRUE); RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TVectorD& mu, const TMatrixDSym& covMatrix); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tRooAbsPdf::selfNormalized() const; TIterator*RooAbsArg::serverIterator() const; RooFIterRooAbsArg::serverMIterator() const; virtual voidRooAbsArg::serverNameChangeHook(const RooAbsArg*, const RooAbsArg*); voidsetAnaIntZ(Double_t z); voidRooAbsArg::setAttribute(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsArg::setCacheAndTrackHints(RooArgSet&); static voidRooAbsReal::setCacheCheck(Bool_t flag); virtual Bool_tRooAbsReal::setData(RooAbsData&, Bool_t = kTRUE); static voidRooAbsArg::setDirtyInhibit(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMultiVarGaussian.html:28302,reduce,reduceToConditional,28302,root/html602/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html602/RooMultiVarGaussian.html,4,['reduce'],['reduceToConditional']
Energy Efficiency,"ect::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Int_tfActWorkersNumebr of workers still active; Long64_tfBytesReadNumber of bytes read; Float_tfEffSessionsNumber of effective sessions running on the machines allocated to this session; Float_tfEvtRateIInstantaneous event rate; Float_tfInitTimeTime for initialization; Float_tfMBRateIInstantaneous byte read rate; Float_tfProcTimeTime for processing; Long64_tfProcessedNumber of events processed; Int_tfTotSessionsNumebr of PROOF sessions running currently on the clusters; Long64_tfTotalTotal number of events to process. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressInfo(Long64_t tot = 0, Long64_t proc = 0, Long64_t bytes = 0, Float_t initt = -1., Float_t proct = -1., Float_t evts = -1., Float_t mbs = -1., Int_t actw = 0, Int_t tsess = 0, Float_t esess = 0.); { }. virtual ~TProofProgressInfo(); { }. TProofInterruptHandler& operator=(const TProofProgressInfo& ). » Author: Fons Rademakers 13/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofProgressInfo.html:5741,allocate,allocated,5741,root/html534/TProofProgressInfo.html,https://root.cern,https://root.cern/root/html534/TProofProgressInfo.html,2,['allocate'],['allocated']
Energy Efficiency,"ect::kWriteDelete; static TVirtualX::EDrawModeTVirtualX::kXor; static TObject::(anonymous)TObject::kZombie. protected:. ULong_tfBlackPixelValue of black pixel in colormap; Int_tfBlueDivBlue value divider; Int_tfBlueShiftBits to left shift blue; Float_tfCharacterUpXCharacter Up vector along X; Float_tfCharacterUpYCharacter Up vector along Y; ColormapfColormapDefault colormap, 0 if b/w; Int_tfDepthNumber of color planes; void*fDisplayPointer to display; TVirtualX::EDrawModeTVirtualX::fDrawModeDrawing mode; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Int_tfGreenDivGreen value divider; Int_tfGreenShiftBits to left shift green; Bool_tfHasTTFontsTrue when TrueType fonts are used; Bool_tfHasXftTrue when XftFonts are used; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; TStringTNamed::fNameobject identifier; Int_tfRedDivRed value divider, -1 if no TrueColor visual; Int_tfRedShiftBits to left shift red, -1 if no TrueColor visual; DrawablefRootWinRoot window used as parent of all windows; Int_tfScreenNumberScreen number; Int_tfTextAlignText alignment (set in SetTextAlign); Short_tTAttText::fTextAlignText alignment; Int_tfTextAlignHText Alignment Horizontal; Int_tfTextAlignVText Alignment Vertical; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tfTextMagnitudeText Magnitude; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; DrawablefVisRootWinRoot window with fVisual to be used to create GC's and XImages; RVisual*fVisualPointer to visual used by all windows; ULong_tfWhitePixelValue of white pixel in colormap. private:. TExMap*fColorsHash list of colors; CursorfCursors[19]List of cursors; Int_tfMaxNumberOfWindowsMaximum number",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGX11.html:25010,green,green,25010,root/html604/TGX11.html,https://root.cern,https://root.cern/root/html604/TGX11.html,2,['green'],['green']
Energy Efficiency,"ect; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. ULong_tfBlackPixelValue of black pixel in colormap; Int_tfBlueDivBlue value divider; Int_tfBlueShiftBits to left shift blue; Float_tfCharacterUpXCharacter Up vector along X; Float_tfCharacterUpYCharacter Up vector along Y; unsigned longfColormapDefault colormap, 0 if b/w; Int_tfDepthNumber of color planes; Display*fDisplayPointer to display; TVirtualX::EDrawModeTVirtualX::fDrawModeDrawing mode; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Int_tfGreenDivGreen value divider; Int_tfGreenShiftBits to left shift green; Bool_tfHasTTFontsTrue when TrueType fonts are used; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; TStringTNamed::fNameobject identifier; Int_tfRedDivRed value divider, -1 if no TrueColor visual; Int_tfRedShiftBits to left shift red, -1 if no TrueColor visual; unsigned longfRootWinRoot window used as parent of all windows; Int_tfScreenNumberScreen number; Int_tfTextAlignText alignment (set in SetTextAlign); Short_tTAttText::fTextAlignText alignment; Int_tfTextAlignHText Alignment Horizontal; Int_tfTextAlignVText Alignment Vertical; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tfTextMagnitudeText Magnitude; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; unsigned longfVisRootWinRoot window with fVisual to be used to create GC's and XImages; Visual*fVisualPointer to visual used by all windows; ULong_tfWhitePixelValue of white pixel in colormap. private:. TExMap*fColorsHash list of colors; unsigned longfCursors[19]List of cursors; Int_tfMaxNumberOfWindowsMaximum number of w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:22972,green,green,22972,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,4,['green'],['green']
Energy Efficiency,"ectAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. private:. TBuffer3D*fBuffbuffer of projectable object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEvePolygonSetProjected(const char* n = ""TEvePolygonSetProjected"", const char* t = """"); Constructor. ~TEvePolygonSetProjected(); Destructor. void ComputeBBox(); Override of virtual method from TAttBBox. void SetProjection(TEveProjectionManager* mng, TEveProjectable* model); This is virtual method from base-class TEveProjected. void SetDepthLocal(Float_t d); Set depth (z-coordinate) of the projected points. void UpdateProjection(); This is virtual method from base-class TEveProjected. Bool_t IsFirstIdxHead(Int_t s0, Int_t s1); Compare the two segments and check if the first index of first segment is starting. Int_t* ProjectAndReducePoints(); Project and reduce buffer points. Float_t AddPolygon(list<Int_t>& pp, list<TEvePolygonSetProjected::Polygon_t>& p); Check if polygon has dimensions above TEveProjection::fgEps and add it; to a list if it is not a duplicate. Float_t MakePolygonsFromBP(Int_t* idxMap); Build polygons from list of buffer polygons. Float_t MakePolygonsFromBS(Int_t* idxMap); Build polygons from the set of buffer segments.; First creates a segment pool according to reduced and projected points; and then build polygons from the pool. void ProjectBuffer3D(); Project current buffer. Float_t PolygonSurfaceXY(const TEvePolygonSetProjected::Polygon_t& poly) const; Calculate XY surface of a polygon. void DumpPolys() const; Dump information about built polygons. void DumpBuffer3D(); Dump information about currenty projected buffer. TEvePolygonSetProjected(const TEvePolygonSetProjected& ). TEvePolygonSetProjected& operator=(const TEvePolygonSetProjected& ). TEveElement* GetProjectedAsElement(); { return this; }. » Las",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEvePolygonSetProjected.html:24900,reduce,reduce,24900,root/html602/TEvePolygonSetProjected.html,https://root.cern,https://root.cern/root/html602/TEvePolygonSetProjected.html,4,['reduce'],['reduce']
Energy Efficiency,"ectArray (Int_t nElements) const;  Construct an array of nElements container objects and return the base address of the array. ;  ; virtual TClass::ObjectPtr NewObjectArray (Int_t nElements, void *arena) const;  Construct an array of nElements container objects at the address given by arena ;  ; char * operator[] (UInt_t idx) const;  Return the address of the value at index idx ;  ; virtual void PopProxy ()=0;  Reset the address of the container being proxied to the previous container. ;  ; virtual void PushProxy (void *objectstart)=0;  Set the address of the container being proxied and keep track of the previous one. ;  ; virtual Bool_t Reset ();  Reset the information gathered from StreamerInfos and value's TClass. ;  ; virtual UInt_t Size () const =0;  Return the current number of elements in the container. ;  ; virtual UInt_t Sizeof () const =0;  Return the sizeof() of the collection object. ;  . Static Public Attributes; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  . Protected Attributes; TClassRef fClass;  ; UInt_t fProperties;  . Private Member Functions;  TVirtualCollectionProxy (const TVirtualCollectionProxy &)=delete;  ; TVirtualCollectionProxy & operator= (const TVirtualCollectionProxy &)=delete;  . Friends; class TClass;  . #include <TVirtualCollectionProxy.h>. Inheritance diagram for TVirtualCollectionProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ CopyIterator_t. typedef void *(* TVirtualCollectionProxy::CopyIterator_t) (void *dest, const void *source). Copy the iterator source into dest. ; dest should contain the location of a memory arena of size fgIteratorArenaSize. If iterator-specific information is of that size or less, the iterators will be constructed in place in the given locations. Otherwise, iterators will be allocated via new and their address return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualCollectionProxy.html:7263,allocate,allocated,7263,doc/master/classTVirtualCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionProxy.html,1,['allocate'],['allocated']
Energy Efficiency,"ected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; THashTable*fTableHashtable used for quick lookup of objects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THashList(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); Create a THashList object. Capacity is the initial hashtable capacity; (i.e. number of slots), by default kInitHashTableCapacity = 17, and; rehash is the value at which a rehash will be triggered. I.e. when the; average size of the linked lists at a slot becomes longer than rehash; then the hashtable will be resized and refilled to reduce the collision; rate to about 1. The higher the collision rate, i.e. the longer the; linked lists, the longer lookup will take. If rehash=0 the table will; NOT automatically be rehashed. Use Rehash() for manual rehashing.; WARNING !!!; If the name of an object in the HashList is modified, The hashlist; must be Rehashed. THashList(TObject* parent, Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); For backward compatibility only. Use other ctor. ~THashList(); Delete a hashlist. Objects are not deleted unless the THashList is the; owner (set via SetOwner()). void AddFirst(TObject* obj); Add object at the beginning of the list. void AddFirst(TObject* obj, Option_t* opt); Add object at the beginning of the list and also store option.; Storing an option is useful when one wants to change the behaviour; of an object a little without having to create a complete new; copy of the object. This feature is used, for example",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THashList.html:10906,reduce,reduce,10906,root/html528/THashList.html,https://root.cern,https://root.cern/root/html528/THashList.html,6,['reduce'],['reduce']
Energy Efficiency,"ector per direction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFoam(); Default constructor for streamer, user should not use it. TFoam(const Char_t* ); User constructor, to be employed by the user. ~TFoam(); Default destructor; cout<<"" DESTRUCTOR entered ""<<endl;. TFoam(const TFoam& ); Copy Constructor NOT IMPLEMENTED (NEVER USED). void Initialize(TRandom* , TFoamIntegrand* ); Basic initialization of FOAM invoked by the user. Mandatory!. This method starts the process of the cell build-up.; User must invoke Initialize with two arguments or Initialize without arguments.; This is done BEFORE generating first MC event and AFTER allocating FOAM object; and reseting (optionally) its internal parameters/switches.; The overall operational scheme of the FOAM is the following:. . This method invokes several other methods:. InitCells initializes memory storage for cells and begins exploration process; from the root cell. The empty cells are allocated/filled using CellFill.; The procedure Grow which loops over cells, picks up the cell with the biggest; ``driver integral'', see Comp. Phys. Commun. 152 152 (2003) 55 for explanations,; with the help of PeekMax procedure. The chosen cell is split using Divide.; Subsequently, the procedure Explore called by the Divide; (and by InitCells for the root cell) does the most important; job in the FOAM object build-up: it performs a small MC run for each; newly allocated daughter cell.; Explore calculates how profitable the future split of the cell will be; and defines the optimal cell division geometry with the help of Carver or Varedu; procedures, for maximum weight or variance optimization respectively.; All essential results of the exploration are written into; the explored cell object. At the very end of the foam build-up,; Finally, MakeActiveList is invoked to create a list of pointers to; all active cells, for the purpose of the quick access during the MC generation.; The procedure E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFoam.html:14873,allocate,allocated,14873,root/html528/TFoam.html,https://root.cern,https://root.cern/root/html528/TFoam.html,6,['allocate'],['allocated']
Energy Efficiency,"ector<std::string>& args). string processCreateVar(string& func, vector<std::string>& args); Glue function between high-level syntax and low-level factory call to createVariable:; Process a parsed call to create a variable named 'func'. If initial token is non-numeric, a RooCategory will be created, and the args are interpreted; as either state names or 'name=id' assignments. Otherwise a RooRealvar is created and the; arg list is interpreted as follows:; If list has two args, these are interpreted as xmin,xmax; If list has three args, these are interpreted as xinit,xmin,xmax; If list has one arg, this is interpreted as xinit and the variable is set as constant. string processCreateArg(string& func, vector<std::string>& args); Glue function between high-level syntax and low-level factory call to createArg:; Process a parsed call to create a p.d.f named func. The func arg is interpreted as ClassName::ObjectName and the arglist is passed; verbatim to createArg. The received arglist is expected to be fully reduced (i.e.; all inline object creations must have been compiled). std::string processMetaArg(string& func, vector<std::string>& args); Concatenate list of args into comma separated string. vector<string> splitFunctionArgs(const char* funcExpr); Allocate and fill work buffer. Bool_t checkSyntax(const char* arg); Perform basic syntax on given factory expression. If function returns; true syntax errors are found. void checkIndex(UInt_t index). RooAbsArg& asARG(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. RooAbsReal& asFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsReal reference found in workspace. RooAbsRealLValue& asVARLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsRealLValue reference found in workspace. RooRealVar& asVAR(const char* ); CINT constructor interface, return constructor string ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFactoryWSTool.html:18765,reduce,reduced,18765,root/html528/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html528/RooFactoryWSTool.html,6,['reduce'],['reduced']
Energy Efficiency,"ector<std::string>& args). string processCreateVar(string& func, vector<std::string>& args); Glue function between high-level syntax and low-level factory call to createVariable:; Process a parsed call to create a variable named 'func'. If initial token is non-numeric, a RooCategory will be created, and the args are interpreted; as either state names or 'name=id' assignments. Otherwise a RooRealvar is created and the; arg list is interpreted as follows:; If list has two args, these are interpreted as xmin,xmax; If list has three args, these are interpreted as xinit,xmin,xmax; If list has one arg, this is interpreted as xinit and the variable is set as constant. string processCreateArg(string& func, vector<std::string>& args); Glue function between high-level syntax and low-level factory call to createArg:; Process a parsed call to create a p.d.f named func. The func arg is interpreted as ClassName::ObjectName and the arglist is passed; verbatim to createArg. The received arglist is expected to be fully reduced (i.e.; all inline object creations must have been compiled). std::string processMetaArg(string& func, vector<std::string>& args); Concatenate list of args into comma separated string. vector<string> splitFunctionArgs(const char* funcExpr); Allocate and fill work buffer. void checkIndex(UInt_t index). RooAbsArg& asARG(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. RooAbsReal& asFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsReal reference found in workspace. RooAbsRealLValue& asVARLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsRealLValue reference found in workspace. RooRealVar& asVAR(const char* ); CINT constructor interface, return constructor string argument #idx as RooRealVar reference found in workspace. RooAbsPdf& asPDF(const char* ); CINT constructor interface, return constructor s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFactoryWSTool.html:18745,reduce,reduced,18745,root/html526/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html526/RooFactoryWSTool.html,1,['reduce'],['reduced']
Energy Efficiency,"ects that can be inserted into RooPlots and take advantage of its internal normalization and axis range adjustment features ;  CRooPoissonPoisson pdf ;  CRooPolynomialRooPolynomial implements a polynomial p.d.f of the form ; \[ f(x) = \sum_{i} a_{i} * x^i \]. By default coefficient a_0 is chosen to be 1, as polynomial probability density functions have one degree of freedom less than polynomial functions due to the normalization condition ;  CRooPolyVarClass RooPolyVar is a RooAbsReal implementing a polynomial in terms of a list of RooAbsReal coefficients ; \[f(x) = \sum_{i} a_{i}x \]. Class RooPolyvar implements analytical integrals of all polynomials it can define ;  CRooPrintableRooPlotable is a 'mix-in' base class that define the standard RooFit plotting and printing methods ;  CRooProdGenContextRooProdGenContext is an efficient implementation of the generator context specific for RooProdPdf PDFs ;  ►CRooProdPdfRooProdPdf is an efficient implementation of a product of PDFs of the form ;  CCacheElem;  ►CRooProductRooProduct a RooAbsReal implementation that represent the product of a given set of other RooAbsReal objects ;  CCacheElem;  CRooProfileLLClass RooProfileLL implements the profile likelihood estimator for a given likelihood and set of parameters of interest ;  ►CRooProjectedPdfClass RooProjectedPdf is a RooAbsPdf implementation that represent a projection of a given input p.d.f and the object returned by RooAbsPdf::createProjection ;  CCacheElem;  CRooProofDriverSelector;  CRooPullVarClass RooPullVar represents the pull of measurement w.r.t to true value using the measurement value and its error ;  CRooQuasiRandomGeneratorThis class generates the quasi-random (aka ""low discrepancy"") sequence for dimensions up to 12 using the Niederreiter base 2 algorithm described in Bratley, Fox, Niederreiter, ACM Trans ;  ►CRooRandomThis class provides a static interface for generating random numbers ;  CGuard;  ►CRooRandomizeParamMCSModuleRooRandomizeParamMCSModule is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:109369,efficient,efficient,109369,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,6,['efficient'],['efficient']
Energy Efficiency,"ects, ROOT has designed the TTree and TNtuple classes specifically for that purpose. The TTree class is optimized to reduce disk space and enhance access speed. A TNtuple is a TTree that is limited to only hold floating-point numbers; a TTree on the other hand can hold all kind of data, such as objects or arrays in addition to all the simple types.; When using a TTree, we fill its branch buffers with leaf data and the buffers are written to disk when it is full. Branches, buffers, and leafs, are explained a little later in this chapter, but for now, it is important to realize that each object is not written individually, but rather collected and written a bunch at a time.; This is where the TTree takes advantage of compression and will produce a much smaller file than if the objects were written individually. Since the unit to be compressed is a buffer, and the TTree contains many same-class objects, the header of the objects can be compressed.; The TTree reduces the header of each object, but it still contains the class name. Using compression, the class name of each same-class object has a good chance of being compressed, since the compression algorithm recognizes the bit pattern representing the class name. Using a TTree and compression the header is reduced to about 4 bytes compared to the original 60 bytes. However, if compression is turned off, you will not see these large savings.; The TTree is also used to optimize the data access. A tree uses a hierarchy of branches, and each branch can be read independently from any other branch. Now, assume that Px and Py are data members of the event, and we would like to compute Px2 + Py2 for every event and histogram the result.; If we had saved the million events without a TTree we would have to:. read each event in its entirety into memory; extract the Px and Py from the event; compute the sum of the squares; fill a histogram. We would have to do that a million times! This is very time consuming, and we really do not",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:520529,reduce,reduces,520529,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['reduce'],['reduces']
Energy Efficiency,"ed (__MWERKS__); 13 void FillX3DBuffer (X3DBuffer *buff) { }; 14 int AllocateX3DBuffer () { return 0;}; 15#else; 16 ; 17int currPoint = 0;; 18int currSeg = 0;; 19int currPoly = 0;; 20 ; 21Color *colors;; 22point *points;; 23segment *segs;; 24polygon *polys;; 25 ; 26 ; 27int AllocateX3DBuffer (); 28{; 29/******************************************************************************; 30 Allocate memory for points, colors, segments and polygons.; 31 Returns 1 if OK, otherwise 0.; 32******************************************************************************/; 33 ; 34 int ret = 1;; 35 ; 36 points = NULL;; 37 colors = NULL;; 38 segs = NULL;; 39 polys = NULL;; 40 ; 41 /*; 42 * Allocate memory for points; 43 */; 44 ; 45 if (gSize3D.numPoints) {; 46 points = (point *) calloc(gSize3D.numPoints, sizeof (point));; 47 if (!points) {; 48 puts (""Unable to allocate memory for points !"");; 49 ret = 0;; 50 }; 51 }; 52 else return (0); /* if there are no points, return back */; 53 ; 54 ; 55 ; 56 /*; 57 * Allocate memory for colors; 58 */; 59 ; 60 colors = (Color *) calloc(28+4, sizeof (Color));; 61 if(!colors) {; 62 puts (""Unable to allocate memory for colors !"");; 63 ret = 0;; 64 }; 65 else {; 66 colors[ 0].red = 92; colors[ 0].green = 92; colors[0].blue = 92;; 67 colors[ 1].red = 122; colors[ 1].green = 122; colors[1].blue = 122;; 68 colors[ 2].red = 184; colors[ 2].green = 184; colors[2].blue = 184;; 69 colors[ 3].red = 215; colors[ 3].green = 215; colors[3].blue = 215;; 70 colors[ 4].red = 138; colors[ 4].green = 15; colors[4].blue = 15;; 71 colors[ 5].red = 184; colors[ 5].green = 20; colors[5].blue = 20;; 72 colors[ 6].red = 235; colors[ 6].green = 71; colors[6].blue = 71;; 73 colors[ 7].red = 240; colors[ 7].green = 117; colors[7].blue = 117;; 74 colors[ 8].red = 15; colors[ 8].green = 138; colors[8].blue = 15;; 75 colors[ 9].red = 20; colors[ 9].green = 184; colors[9].blue = 20;; 76 colors[10].red = 71; colors[10].green = 235; colors[10].blue = 71;; 77 colors[11].red = 117;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/X3DBuffer_8c_source.html:1316,allocate,allocate,1316,doc/master/X3DBuffer_8c_source.html,https://root.cern,https://root.cern/doc/master/X3DBuffer_8c_source.html,2,['allocate'],['allocate']
Energy Efficiency,"ed (chi2) and number of degrees of freedom (ndf...Definition TMath.cxx:637; TMath::IsInsideBool_t IsInside(T xp, T yp, Int_t np, T *x, T *y)Function which returns kTRUE if point xp,yp lies inside the polygon defined by the np points in array...Definition TMath.h:1233; TMath::ASinDouble_t ASin(Double_t)Returns the principal value of the arc sine of x, expressed in radians.Definition TMath.h:624; TMath::Log2Double_t Log2(Double_t x)Returns the binary (base-2) logarithm of x.Definition TMath.cxx:107; TMath::BesselK1Double_t BesselK1(Double_t x)Modified Bessel function I_1(x)Definition TMath.cxx:1529; TMath::MedianDouble_t Median(Long64_t n, const T *a, const Double_t *w=nullptr, Long64_t *work=nullptr)Same as RMS.Definition TMath.h:1272; TMath::BubbleHighvoid BubbleHigh(Int_t Narr, Double_t *arr1, Int_t *arr2)Bubble sort variant to obtain the order of an array's elements into an index in order to do more usef...Definition TMath.cxx:1314; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::BesselI1Double_t BesselI1(Double_t x)Modified Bessel function K_0(x)Definition TMath.cxx:1494; TMath::ErfDouble_t Erf(Double_t x)Computation of the error function erf(x).Definition TMath.cxx:190; TMath::PermuteBool_t Permute(Int_t n, Int_t *a)Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinc...Definition TMath.cxx:2557; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath::FloorDouble_t Floor(Double_t x)Rounds x downward, returning the largest integral value that is not greater than x.Definition TMath.h:680; TMath::PoissonIDouble_t PoissonI(Double_t x, Double_t par)Computes the Discrete Poisson distribution function for (x,par).Definition TMath.cxx:615; TMath::CauchyDistDouble_t CauchyDist(Double_t x, Double_t t=0, Double_t s=1)Computes the density of Cauchy distribution at point x by defaul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h_source.html:59261,power,power,59261,doc/master/TMath_8h_source.html,https://root.cern,https://root.cern/doc/master/TMath_8h_source.html,1,['power'],['power']
Energy Efficiency,"ed (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. Double_t AsLAST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local apparant sidereal time (LAST) in hour-angle, given a; longitude in degrees. Return value will always be between 0 and 24; (hours). Sidereal time is most accurately calculated from UT1. If fSec; and fNanoSec are in UTC (which they are by default), the optional; argument UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. const Char_t * AsString(Option_t* option = """") const; Return the date & time as a string. Result is pointer to a statically allocated string.; User should copy this into their own buffer before calling; this method again. Option ""l"" returns it in local zone format; (can be applied to default or compact format). Default format is RFC822 compliant:; ""Mon, 02 Jan 2001 18:11:12 +0000 (GMT) +999999999 nsec""; ""Mon, 02 Jan 2001 10:11:12 -0800 (PST) +999999999 nsec"". Option ""c"" compact is (almost) ISO 8601 compliant:; ""2001-01-02 18:11:12.9999999999Z""; ""2001-01-02 10:11:12.9999999999-0800"" if PST; * uses ""-"" as date separator as specified in ISO 8601; * uses ""."" rather than preferred "","" for decimal separator; * -HHMM is the difference between local and UTC (if behind, + if ahead).; The ""-HHMM"" is replaced with ""Z"" if given as UTC.; To be strictly conforming it should use ""T"" instead of the; blank separating the date and time. Option ""2"" returns as {sec,nsec} integers. Option ""s"" returns ""2001-01-02 18:11:12"" with an implied UTC,; overrides ""l"" option. Internally uses a circular list of buffers to avoid pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTimeStamp.html:7829,allocate,allocated,7829,root/html534/TTimeStamp.html,https://root.cern,https://root.cern/root/html534/TTimeStamp.html,2,['allocate'],['allocated']
Energy Efficiency,"ed - they appear hollow.; Only shapes, which can be described with combination of planes, can be rendered in this fashion - e.g. a clipping tube is not possible.; Each additional clipping plane requires an additional render pass - so the more active planes the more time the render will take. Set the current clip object with TGLClipSet::SetClipType; v->GetClipSet()->SetClipType(TGLClipSet::kClipPlane);; Configure the clip object with TGLClipSet::SetClipState; Double_t planeEq[4] = {0.5,1.0,-1.0, 2.0};; v->GetClipSet()->SetClipState(TGLClipSet::kClipPlane, planeEq);; As with cameras, any clip can be configured at any time, but you must set the clip current to see the effect.; 9.13.2.6 Manipulators; Manipulators are GUI ‘widgets’ or controls attached to a 3D object in the viewer, allowing a direct manipulation of the object’s geometry. There are three manipulators for the three basic geometries transformations. In each case, the manipulator consists of three components, one for each local axis of the object, shown in standard colors: red (X), green (Y) and blue (Z). GL Viewer object manipulators. Activate the manipulator by moving the mouse over one of these components (which turns yellow to indicate active state). Click with left mouse and drag this active component to perform the manipulation. Toggle between the manipulator types using the ‘x’, ‘c’, ‘v’ keys while the mouse cursor is above the manipulator. Note: Manipulators cannot be controlled via the API at present.; 9.13.2.7 Guides; Guides are visual aids drawn into the viewer world. Controls for these are under the “Guides” tab:; Viewer Controls Pane Guides Tab; Axes show the world (global) frame coordinatedirections: X (red), Y (green) and Z (blue). The negative portion of the axis line is shown in dark color, the positive in bright. The axis name and minimum / maximum values are labeled in the same color. There are three options for axes drawing - selected by radio buttons:. None - not drawn (default).; Edge -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:396195,green,green,396195,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['green'],['green']
Energy Efficiency,"ed = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayC; Char_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH3; static TH1D * DoProject1D (const TH3 &h, const char *name, const char *title, const TAxis *projX, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 1D histogram ;  ; static TH2D * DoProject2D (const TH3 &h, const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 2D histogram ;  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3C.html:57192,power,power,57192,doc/master/classTH3C.html,https://root.cern,https://root.cern/doc/master/classTH3C.html,1,['power'],['power']
Energy Efficiency,"ed = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayF; Float_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH3; static TH1D * DoProject1D (const TH3 &h, const char *name, const char *title, const TAxis *projX, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 1D histogram ;  ; static TH2D * DoProject2D (const TH3 &h, const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 2D histogram ;  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3F.html:57321,power,power,57321,doc/master/classTH3F.html,https://root.cern,https://root.cern/doc/master/classTH3F.html,1,['power'],['power']
Energy Efficiency,"ed = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Attributes inherited from TArrayS; Short_t * fArray;  ;  Public Attributes inherited from TArray; Int_t fN;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TH3; static TH1D * DoProject1D (const TH3 &h, const char *name, const char *title, const TAxis *projX, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 1D histogram ;  ; static TH2D * DoProject2D (const TH3 &h, const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool computeErrors, bool originalRange, bool useUF, bool useOF);  static methdod performing the projection to 2D histogram ;  ;  Static Protected Member Functions inherited from TH1; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3S.html:57180,power,power,57180,doc/master/classTH3S.html,https://root.cern,https://root.cern/doc/master/classTH3S.html,1,['power'],['power']
Energy Efficiency,"ed as non-staged; I, nostagedcheck: do not check the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxiliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataSetManager.html:13884,monitor,monitoring,13884,root/html534/TDataSetManager.html,https://root.cern,https://root.cern/root/html534/TDataSetManager.html,3,"['Monitor', 'monitor']","['MonitorUsedSpace', 'monitoring']"
Energy Efficiency,"ed by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinimizer(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinimizer(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinimizer constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. void setMinimizerType(const char* type); Choose the minimzer algorithm. RooFitResult* fit(const char* options); Parse traditional RooAbsPdf::fitTo driver options. m - Run Migrad only; h - Run Hesse to estimate errors; v - Verbose mode; l - Log parameters after each Minuit steps to file; t - Activate profile timer; r - Save fit result; 0 - Run Migrad with strategy 0. Int_t minimize(const char* type, const char* alg = 0). Int_t migrad(); Execute MIGRAD. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinimizer.html:8557,efficient,efficiently,8557,root/html526/RooMinimizer.html,https://root.cern,https://root.cern/root/html526/RooMinimizer.html,5,['efficient'],['efficiently']
Energy Efficiency,"ed by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinimizer(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinimizer(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setMaxIterations(Int_t n); Change maximum number of MINUIT iterations; (RooMinimizer default 500 * #parameters). void setMaxFunctionCalls(Int_t n); Change maximum number of likelihood function calss from MINUIT; (RooMinimizer default 500 * #parameters). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinimizer constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. void setOffsetting(Bool_t flag); Enable internal likelihood offsetting for enhanced numeric precision. void setMinimizerType(const char* type); Choose the minimzer algorithm. ROOT::Fit::Fitter* fitter(); Return underlying ROOT fitter object. const ROOT::Fit::Fitter* fitter() const; Return underlying ROOT fitter object. RooFitResult* fit(const char* options); Parse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinimizer.html:9090,efficient,efficiently,9090,root/html534/RooMinimizer.html,https://root.cern,https://root.cern/root/html534/RooMinimizer.html,6,['efficient'],['efficiently']
Energy Efficiency,"ed by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. void * New(void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated array of objects; of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetCanSplit(Int_t splitmode); Set the splitability of this class:; -1: Use the default calculation; 0: Disallow splitting; 1: Always allow splitting. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represented by; this TClass object. See the public interface:; ROOT::ResetClassVersion; defined in TClassT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClass.html:35994,allocate,allocated,35994,root/html530/TClass.html,https://root.cern,https://root.cern/root/html530/TClass.html,9,['allocate'],['allocated']
Energy Efficiency,"ed by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. void * New(void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated array of objects; of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represented by; this TClass object. See the public interface:; ROOT::ResetClassVersion; defined in TClassTable.cxx. Note on class version numbers:; If no class number has been specified, TClass::GetVersion will return -1; The Class Version 0 request the whole o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:32080,allocate,allocated,32080,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,2,['allocate'],['allocated']
Energy Efficiency,"ed data. Input:; a,b: One-dimensional arrays of length na, nb, respectively. The elements of a and b must be given in ascending order. option is a character string to specify options ""D"" Put out a line of ""Debug"" printout ""M"" Return the Maximum Kolmogorov distance instead of prob. Output:; The returned value prob is a calculated confidence level which gives a statistical test for compatibility of a and b. Values of prob close to zero are taken as indicating a small probability of compatibility. For two point sets drawn randomly from the same parent distribution, the value of prob should be uniformly distributed between zero and one. in case of error the function return -1 If the 2 sets have a different number of points, the minimum of the two sets is used. Method:; The Kolmogorov test is used. The test statistic is the maximum deviation between the two integrated distribution functions, multiplied by the normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James) (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet, Statistical Methods in Experimental Physics, (North-Holland, Amsterdam 1971) 269-271). Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop over the two sorted arrays a and b representing empirical distribution functions. The for-loop handles 3 cases: when the next points to be evaluated satisfy a>b, a<b, or a=b:; for (Int_t i=0;i<na+nb;i++) {; if (a[ia-1] < b[ib-1]) {; rdiff -= sa;; ia++;; if (ia > na) {ok = kTRUE; break;}; } else if (a[ia-1] > b[ib-1]) {; rdiff += sb;; ib++;; if (ib > nb) {ok = kTRUE; break;}; } else {; rdiff += sb - sa;; ia++;; ib++;; if (ia > na) {ok = kTRUE; break;}; if (ib > nb) {ok = kTRUE; break;}; }; rdmax = TMath::Max(rdmax,TMath::Abs(rdiff));; }; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; Int_tint Int_tDefinition RtypesCore.h:45; kTRUEconstexpr Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:52366,adapt,adapted,52366,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['adapt'],['adapted']
Energy Efficiency,"ed extra events (PaveLabels and Texts); TFile*fFileROOT file to store recorded events in; Bool_tfFilterEventPaveSpecial flag to filter events during the pave recording; Window_t*fFilteredIdsOnly when GUI for recorer is used: IDs of windows that creates that GUI.; Int_tfFilteredIdsCountOnly when GUI for recorder is used: Count of windows in GUI recorder; TRecGuiEvent*fGuiEventThe newest GUI event to be stored in TTree; TTree*fGuiTreeTTree with recorded GUI events; TTimer*fMouseTimerTimer used for recording mouse position; TRecorder*fRecorderReference to recorder (owner of this state) is kept in order to switch; Int_tfRegWinCounterCounter of registered ROOT windows.; TTimer*fTimerTimer used for recording; ULong64_tfWinThe newest registered window to be stored in TTree; TTree*fWinTreeTTree with registered windows. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TRecorderRecording(TRecorder* r, const char* filename, Option_t* option, Window_t* w, Int_t winCount); Initializes TRecorderRecording for recording; What is allocated here is deleted in destructor. Bool_t StartRecording(); Connects appropriate signals and slots in order to gain all registered; windows and processed events in ROOT and then starts recording. void Stop(TRecorder* r, Bool_t guiCommand); Disconnects all slots and stopps recording. void RegisterWindow(Window_t w); This method is called when RegisteredWindow(Window_t) is emitted from; TGClient. void RecordCmdEvent(const char* line); Records commandline event (text and time) ans saves the previous; commandline event; This 1 event delay in saving ensures that the last commandline events; 'TRecorder::Stop' will be not stored. void RecordGuiEvent(Event_t* e, Window_t wid); Records GUI Event_t *e different from kConfigureNotify (they are; recorded in TRecorderRecording::RecordGuiCNEvent). It is called via signal-slot when an event is processed in; TGClient::HandleEvent(Event_t *event); or in TGClient::HandleMaskEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecorderRecording.html:3525,allocate,allocated,3525,root/html528/TRecorderRecording.html,https://root.cern,https://root.cern/root/html528/TRecorderRecording.html,6,['allocate'],['allocated']
Energy Efficiency,"ed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; ;  CMinimumStateMinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder) ;  CMinosErrorClass holding the result of Minos (lower and upper values) for a specific parameter ;  CMinuit2MinimizerMinuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm ;  CMinuitParameterClass for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; ;  CMnApplicationApplication interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization ;  CMnContoursAPI class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors; ;  CMnCovarianceSqueezeClass to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index ;  ►CMnCross;  CCrossFcnLimit;  CCrossNewMin;  CCrossParLimit;  CMnEigenAPI class for calculating the eigenvalues of symmetric matrix ;  CMnFcnWrapper class to FCNBase interface used internally by Minuit ;  CMnFumiliMinimizeAPI class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc ;  CMnFunctionCrossMnFunctionCross ;  CMnGlobalCorrelationCoeffClass for global correlation coefficient ;  CMnHesseAPI class for calculating the numerical covariance matrix (== 2x Inverse Hessian == 2x Inverse 2nd derivative); can be used by the user or Minuit itself ;  CMnLineSearchImplements a 1-dimensional minimization along a given direction (i.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:59303,reduce,reduce,59303,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,8,['reduce'],['reduce']
Energy Efficiency,"ed in as: Z = -0.500000; Graph: 3 -- 93 Elements; Graph: 4 -- 93 Elements; Z-Level Passed in as: Z = -0.700000; Graph: 5 -- 65 Elements; Graph: 6 -- 65 Elements; Z-Level Passed in as: Z = 0.100000; Graph: 7 -- 147 Elements; Graph: 8 -- 147 Elements; Z-Level Passed in as: Z = 0.400000; Graph: 9 -- 107 Elements; Graph: 10 -- 107 Elements; Z-Level Passed in as: Z = 0.800000; Graph: 11 -- 49 Elements; Graph: 12 -- 49 Elements; ; ; Extracted 6 Contours and 12 Graphs ; (TCanvas *) 0x5649202575c0; ContourList.C; ; Double_t SawTooth(Double_t x, Double_t WaveLen);; ; TCanvas *ContourList(){; ; const Double_t PI = TMath::Pi();; ; TCanvas* c = new TCanvas(""c"",""Contour List"",0,0,600,600);; c->SetRightMargin(0.15);; c->SetTopMargin(0.15);; ; Int_t i, j;; ; Int_t nZsamples = 80;; Int_t nPhiSamples = 80;; ; Double_t HofZwavelength = 4.0; // 4 meters; Double_t dZ = HofZwavelength/(Double_t)(nZsamples - 1);; Double_t dPhi = 2*PI/(Double_t)(nPhiSamples - 1);; ; TArrayD z(nZsamples);; TArrayD HofZ(nZsamples);; TArrayD phi(nPhiSamples);; TArrayD FofPhi(nPhiSamples);; ; // Discretized Z and Phi Values; for ( i = 0; i < nZsamples; i++) {; z[i] = (i)*dZ - HofZwavelength/2.0;; HofZ[i] = SawTooth(z[i], HofZwavelength);; }; ; for(Int_t i=0; i < nPhiSamples; i++){; phi[i] = (i)*dPhi;; FofPhi[i] = sin(phi[i]);; }; ; // Create Histogram; TH2D *HistStreamFn = new TH2D(""HstreamFn"",; ""#splitline{Histogram with negative and positive contents. Six contours are defined.}{It is plotted with options CONT LIST to retrieve the contours points in TGraphs}"",; nZsamples, z[0], z[nZsamples-1], nPhiSamples, phi[0], phi[nPhiSamples-1]);; ; // Load Histogram Data; for (Int_t i = 0; i < nZsamples; i++) {; for(Int_t j = 0; j < nPhiSamples; j++){; HistStreamFn->SetBinContent(i,j, HofZ[i]*FofPhi[j]);; }; }; ; gStyle->SetOptStat(0);; gStyle->SetTitleW(0.99);; gStyle->SetTitleH(0.08);; ; Double_t contours[6];; contours[0] = -0.7;; contours[1] = -0.5;; contours[2] = -0.1;; contours[3] = 0.1;; contours[4] = 0.4;; conto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ContourList_8C.html:1529,meter,meters,1529,doc/master/ContourList_8C.html,https://root.cern,https://root.cern/doc/master/ContourList_8C.html,1,['meter'],['meters']
Energy Efficiency,"ed inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointer). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html:6858,ADAPT,ADAPTIVE,6858,root/html532/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html,3,['ADAPT'],['ADAPTIVE']
Energy Efficiency,"ed inside; @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. SetFunction(const ROOT::Math::IGenFunction& f, bool copy = false). IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Template Constructor of one dimensional Integrator passing a generic function object. @param f integration function (any C++ callable object implementing operator()(double x); @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type). virtual ~IntegratorOneDim(); destructor (will delete contained pointers). IntegratorOneDim & operator=(const ROOT::Math::IntegratorOneDim& ); { return *this; }. double Integral(const ROOT::Math::IGenFunction& f, double a, double b); integration methods using a function. evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must be a C++ callable object implementing operator()(double x); @param a lower value of the integration interval; @param b upper value of the integration interval. double Integral(const ROOT::Math::IGenFunction& f, double a, double b). evaluate the Integral of a function f over the defined interval (a,b); @param f integration function. The function type must implement the mathlib::IGenFunction interface; @param a lower value of the integration interval; @param b upper value of the integration interval. r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:6828,ADAPT,ADAPTIVE,6828,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,1,['ADAPT'],['ADAPTIVE']
Energy Efficiency,"ed int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); set relative tolerance. void SetAbsTolerance(double absTol); set absolute tolerance. void SetSize(unsigned int size); set workspace size. { fSize = size; }. void SetMinPts(unsigned int n); set min points. { fMinPts = n; }. void SetMaxPts(unsigned int n); set max points. { fMaxPts = n; }. void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options. » Author: M. Slawinska 08/2007 » Copyright (c) 2007 , LCG ROOT MathLib Team *; » Last changed: root/mathcore:$Id: AdaptiveIntegratorMultiDim.h 36768 2010-11-19 10:34:53Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html:5498,Adapt,AdaptiveIntegratorMultiDim,5498,root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['Adapt'],['AdaptiveIntegratorMultiDim']
Energy Efficiency,"ed minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFlatRandomGen;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation ;  CFumiliStandardMaximumLikelihoodFCNClass implementing the Elements member function for the standard maximum likelihood method ;  CFunctionGradient;  CFunctionMinimizerBase class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance matrix is stored in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:55903,adapt,adapting,55903,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,4,['adapt'],['adapting']
Energy Efficiency,"ed object. Return; an empty string if the named object cannot be found. Bool_t setDrawOptions(const char* name, TString options); Register the specified drawing options for the named object.; Return kFALSE if the named object cannot be found. Bool_t getInvisible(const char* name) const; Returns true of object with given name is set to be invisible. void setInvisible(const char* name, Bool_t flag = kTRUE); If flag is true object with 'name' is set to be invisible; i.e. it is not drawn when Draw() is called. TString caller(const char* method) const; Utility function. void SetMaximum(Double_t maximum = -1111); Set maximum value of Y axis. void SetMinimum(Double_t minimum = -1111); Set minimum value of Y axis. Double_t chiSquare(const char* pdfname, const char* histname, int nFitParam = 0) const; Calculate and return reduced chi-squared of curve with given name with respect; to histogram with given name. If nFitParam is non-zero, it is used to reduce the; number of degrees of freedom for a chi^2 for a curve that was fitted to the; data with that number of floating parameters. RooHist* residHist(const char* histname = 0, const char* pdfname = 0, bool normalize = false) const; Return a RooHist containing the residuals of histogram 'histname' with respect; to curve 'curvename'. If normalize is true the residuals are divided by the error; on the histogram, effectively returning a pull histogram. Double_t getFitRangeNEvt(Double_t xlo, Double_t xhi) const; Return the number of events that is associated with the range [xlo,xhi]; This method is only fully functional for ranges not equal to the full; range if the object that inserted the normalization data provided; a link to an external object that can calculate the event count in; in sub ranges. An error will be printed if this function is used; on sub-ranges while that information is not available. void SetName(const char* name); Set the name of the RooPlot to 'name'. void SetNameTitle(const char* name, const char* title); Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooPlot.html:21168,reduce,reduce,21168,root/html526/RooPlot.html,https://root.cern,https://root.cern/root/html526/RooPlot.html,5,['reduce'],['reduce']
Energy Efficiency,"ed object. Return; an empty string if the named object cannot be found. Bool_t setDrawOptions(const char* name, TString options); Register the specified drawing options for the named object.; Return kFALSE if the named object cannot be found. Bool_t getInvisible(const char* name) const; Returns true of object with given name is set to be invisible. void setInvisible(const char* name, Bool_t flag = kTRUE); If flag is true object with 'name' is set to be invisible; i.e. it is not drawn when Draw() is called. TString caller(const char* method) const; Utility function. void SetMaximum(Double_t maximum = -1111); Set maximum value of Y axis. void SetMinimum(Double_t minimum = -1111); Set minimum value of Y axis. Double_t chiSquare(const char* pdfname, const char* histname, int nFitParam = 0) const; Calculate and return reduced chi-squared of curve with given name with respect; to histogram with given name. If nFitParam is non-zero, it is used to reduce the; number of degrees of freedom for a chi^2 for a curve that was fitted to the; data with that number of floating parameters. RooHist* residHist(const char* histname = 0, const char* pdfname = 0, bool normalize = false, bool useAverage = kFALSE) const; Return a RooHist containing the residuals of histogram 'histname' with respect; to curve 'curvename'. If normalize is true the residuals are divided by the error; on the histogram, effectively returning a pull histogram. Double_t getFitRangeNEvt(Double_t xlo, Double_t xhi) const; Return the number of events that is associated with the range [xlo,xhi]; This method is only fully functional for ranges not equal to the full; range if the object that inserted the normalization data provided; a link to an external object that can calculate the event count in; in sub ranges. An error will be printed if this function is used; on sub-ranges while that information is not available. void SetName(const char* name); Set the name of the RooPlot to 'name'. void SetNameTitle(const char* nam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooPlot.html:21635,reduce,reduce,21635,root/html534/RooPlot.html,https://root.cern,https://root.cern/root/html534/RooPlot.html,6,['reduce'],['reduce']
Energy Efficiency,"ed stat drawing; Using ‘same’ identifier in item name, one can easily draw or superimpose similar items from different files. Could be used in URL like: ...&files=[file1.root,file2.root]&items=[file1.root/hpx, file2.root/_same_] ...&files=[file1.root,file2.root]&item=file1.root/hpx+file2.root/_same_ Main limitation - file names should have similar length.; When ‘autozoom’ specified in draw options, histogram zoomed into non-empty content. Same command available via context menu.; Item of ‘Text’ kind can be created. It is displayed as lain text in the browser. If property ‘mathjax’ specified, MathJax.js library will be loaded and used for rendering. See tutorials/http/httpcontrol.C macro for example.; When using foreignObject, provide workaround for absolute positioning problem in Chrome/Safari, see http://bit.ly/1wjqCQ9; Support usage of minimized versions of .js and .css files. Minimized scripts used by default on web servers.; Implement JSROOT.extend instead of jQuery.extend, reduce usage of jquery.js in core JSROOT classes; Implement main graphics without jquery at all, such mode used in nobrowser mode.; Provide optional latex drawing with MathJax SVG. TMathText always drawn with MathJax, other classes require mathjax option in URL; Improve drawing of different text classes, correctly handle their alignment and scaling, special handling for IE. TTree Libraries; TTree Behavior change.; Merging.; Added fast cloning support to TTree::MergeTrees and TTree::Merge(TCollection,Option_t).; TTreeCache; The TTreeCache is now enabled by default. The default size of the TTreeCache is the estimated size of a cluster size for the TTree. The TTreeCache prefilling is also enabled by default; when in learning phase rather than reading each requested branch individually, the TTreeCache will read all the branches thus trading off the latencies inherent to multiple small reads for the potential of requesting more data than needed by read from the disk or server the baskets for too ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:11279,reduce,reduce,11279,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['reduce'],['reduce']
Energy Efficiency,"ed to _any_ kind of plot (components, asymmetries, efficiencies; // etc..); model.plotOn(frame, VisualizeError(*r, 1), FillColor(kOrange), Components(""bkg""));; model.plotOn(frame, VisualizeError(*r, 1, false), DrawOption(""L""), LineWidth(2), LineColor(kRed), Components(""bkg""),; LineStyle(kDashed));; ; // Overlay central value; model.plotOn(frame);; model.plotOn(frame, Components(""bkg""), LineStyle(kDashed));; d->plotOn(frame);; frame->SetMinimum(0);; ; // V i s u a l i z e p a r t i a l f i t e r r o r; // ------------------------------------------------------; ; // Make plot frame; RooPlot *frame2 = x.frame(Bins(40), Title(""Visualization of 2-sigma partial error from (m,m2)""));; ; // Visualize partial error. For partial error visualization the covariance matrix is first reduced as follows; // ___ -1; // Vred = V22 = V11 - V12 * V22 * V21; //; // Where V11,V12,V21,V22 represent a block decomposition of the covariance matrix into observables that; // are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), and V22bar; // is the Shur complement of V22, calculated as shown above; //; // (Note that Vred is _not_ a simple sub-matrix of V); ; // Propagate partial error due to shape parameters (m,m2) using linear and sampling method; model.plotOn(frame2, VisualizeError(*r, RooArgSet(m, m2), 2), FillColor(kCyan));; model.plotOn(frame2, Components(""bkg""), VisualizeError(*r, RooArgSet(m, m2), 2), FillColor(kCyan));; ; model.plotOn(frame2);; model.plotOn(frame2, Components(""bkg""), LineStyle(kDashed));; frame2->SetMinimum(0);; ; // Make plot frame; RooPlot *frame3 = x.frame(Bins(40), Title(""Visualization of 2-sigma partial error from (s,s2)""));; ; // Propagate partial error due to yield parameter using linear and sampling method; model.plotOn(frame3, VisualizeError(*r, RooArgSet(s, s2), 2), FillColor(kGreen));; model.plotOn(frame3, Components(""bkg""), VisualizeError(*r, RooArgSet(s, s2), 2), FillColor(kGreen));; ; model.plotOn(frame3);; model.plotO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8C.html:4140,reduce,reduced,4140,doc/master/rf610__visualerror_8C.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8C.html,1,['reduce'],['reduced']
Energy Efficiency,"ed!; Short_tTEveElement::fImpliedSelected!; TArrayI*fIntIdsOptional array of integer ideices.; Int_tfIntIdsPerPointNumber of integer indices assigned to each point.; set<TEveElement::TEveListTreeInfo,less<TEveElement::TEveListTreeInfo>,allocator<TEveElement::TEveListTreeInfo> >TEveElement::fItems! Set of list-tree-items.; Int_tTPolyMarker3D::fLastPointThe index of the last filled point; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTPolyMarker3D::fNNumber of allocated points; TStringTPolyMarker3D::fNameName of polymarker; Int_tTEveElement::fNumChildren!; TStringTPolyMarker3D::fOptionOptions; Bool_tTPointSet3D::fOwnIdsFlag specifying id-objects are owned by the point-set; Float_t*TPolyMarker3D::fP[3*fN] Array of X,Y,Z coordinates; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; list<TEveElement*>TEveElement::fParentsList of parents.; Bool_tTEveElement::fPickable; list<TEveProjected*>TEveProjectable::fProjectedListreferences to projected instances.; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TRefTEveElement::fSourceExternal object that is represented by this element.; TEvePointSelectorConsumer::ETreeVarType_eTEvePointSelectorConsumer::fSourceCSCoordinate-System of the source tree variables; TStringfTitleTitle/tooltip of the TEvePointSet.; Int_tTEveElement::fTopItemCnt! Counter for top-level list-tree items that prevent autom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEvePointSet.html:25821,allocate,allocated,25821,root/html534/TEvePointSet.html,https://root.cern,https://root.cern/root/html534/TEvePointSet.html,2,['allocate'],['allocated']
Energy Efficiency,"ed*fSysInfo. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMemStatMng(); Default constructor. void Init(); Initialize MemStat manager - used only by instance method. TMemStatMng* GetInstance(); GetInstance - a static function; Initialize a singleton of MemStat manager. void Close(); Close - a static function; This method stops the manager,; flashes all the buffered data and closes the output tree. void SetBufferSize(Int_t buffersize); Set the maximum number of alloc/free calls to be buffered.; if the alloc and free are in the buffer, the corresponding entries; are not saved tio the Tree, reducing considerably the Tree output size. void SetMaxCalls(Int_t maxcalls); Set the maximum number of new/delete registered in the output Tree. void Enable(); Enable memory hooks. void Disable(); Disble memory hooks. void MacAllocHook(void* ptr, size_t size); AllocHook - a static function; a special memory hook for Mac OS X memory zones.; Triggered when memory is allocated. void MacFreeHook(void* ptr); AllocHook - a static function; a special memory hook for Mac OS X memory zones.; Triggered when memory is deallocated. void * AllocHook(size_t size, const void* ); AllocHook - a static function; A glibc memory allocation hook. void FreeHook(void* ptr, const void* ); FreeHook - a static function; A glibc memory deallocation hook. Int_t generateBTID(UChar_t* CRCdigest, Int_t stackEntries, void** stackPointers); An internal function, which returns a bitid for a corresponding CRC digest; cache variables. void AddPointer(void* ptr, Int_t size); Add pointer to table.; This method is called every time when any of the hooks are triggered.; The memory de-/allocation information will is recorded. void FillTree(); loop on all entries in the buffer and fill the output Tree; entries with alloc and free in the buffer are eliminated. TMemStatMng(). void SetUseGNUBuiltinBacktrace(Bool_t newVal); stack data members. » Author: Anar Manafov (A.Manafov@gsi.d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/memstat__TMemStatMng.html:7854,allocate,allocated,7854,root/html528/memstat__TMemStatMng.html,https://root.cern,https://root.cern/root/html528/memstat__TMemStatMng.html,5,['allocate'],['allocated']
Energy Efficiency,"ed.GetValue(linidx);; 677 }; 678 fBinsContinued.Add(linidx, idx + 1);; 679 } else {; 680 fBins.Add(hash, idx + 1);; 681 }; 682 }; 683 }; 684}; 685 ; 686////////////////////////////////////////////////////////////////////////////////; 687/// Initialize storage for nbins; 688 ; 689void THnSparse::Reserve(Long64_t nbins) {; 690 if (!fBins.GetSize() && fBinContent.GetSize()) {; 691 FillExMap();; 692 }; 693 if (2 * nbins > fBins.Capacity()) {; 694 fBins.Expand(3 * nbins);; 695 }; 696}; 697 ; 698////////////////////////////////////////////////////////////////////////////////; 699/// Get the bin index for the n dimensional tuple x,; 700/// allocate one if it doesn't exist yet and ""allocate"" is true.; 701 ; 702Long64_t THnSparse::GetBin(const Double_t* x, Bool_t allocate /* = kTRUE */); 703{; 704 THnSparseCompactBinCoord* cc = GetCompactCoord();; 705 Int_t *coord = cc->GetCoord();; 706 for (Int_t i = 0; i < fNdimensions; ++i); 707 coord[i] = GetAxis(i)->FindBin(x[i]);; 708 cc->UpdateCoord();; 709 ; 710 return GetBinIndexForCurrentBin(allocate);; 711}; 712 ; 713 ; 714////////////////////////////////////////////////////////////////////////////////; 715/// Get the bin index for the n dimensional tuple addressed by ""name"",; 716/// allocate one if it doesn't exist yet and ""allocate"" is true.; 717 ; 718Long64_t THnSparse::GetBin(const char* name[], Bool_t allocate /* = kTRUE */); 719{; 720 THnSparseCompactBinCoord* cc = GetCompactCoord();; 721 Int_t *coord = cc->GetCoord();; 722 for (Int_t i = 0; i < fNdimensions; ++i); 723 coord[i] = GetAxis(i)->FindBin(name[i]);; 724 cc->UpdateCoord();; 725 ; 726 return GetBinIndexForCurrentBin(allocate);; 727}; 728 ; 729////////////////////////////////////////////////////////////////////////////////; 730/// Get the bin index for the n dimensional coordinates coord,; 731/// allocate one if it doesn't exist yet and ""allocate"" is true.; 732 ; 733Long64_t THnSparse::GetBin(const Int_t* coord, Bool_t allocate /*= kTRUE*/); 734{; 735 GetCompactCoord",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:26469,allocate,allocate,26469,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,4,['allocate'],['allocate']
Energy Efficiency,"ed; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Double_tfAdaptiveBandwidthFactorGeometric mean of the kernel density estimation from the data for adaptive iteration; TF1*fApproximateBiasOutput Kernel Density Estimation approximate bias; Bool_tfAsymLeft; Bool_tfAsymRight; vector<UInt_t>fBinCountNumber of events per bin for binned data option; TKDE::EBinningfBinning; vector<Double_t>fCanonicalBandwidths; vector<Double_t>fDataData events; vector<Double_t>fEventsOriginal data storage; TGraphErrors*fGraphGraph with the errors; TKDE::EIterationfIteration; TKDE::TKernel*fKernel; TKDE::KernelFunction_PtrfKernelFunction; vector<Double_t>fKernelSigmas2; TKDE::EKernelTypefKernelType; TF1*fLowerPDFOutput Kernel Density Estimation lower confidence interval PDF function; Double_tfMeanData mean; TKDE::EMirrorfMirror; Bool_tfMirrorLeft; Bool_tfMirrorRight; UInt_tfNBinsNumber of bins for binned data option; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0., Double_t xMax = 0., const Option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TKDE.html:10208,adapt,adaptive,10208,root/html602/TKDE.html,https://root.cern,https://root.cern/root/html602/TKDE.html,2,['adapt'],['adaptive']
Energy Efficiency,"edFilter, DS_t > Filter(std::string_view expression, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:288; ROOT::RDF::RInterface::Profile2DRResultPtr<::TProfile2D > Profile2D(const TProfile2DModel &model)Fill and return a two-dimensional profile (lazy action).Definition RInterface.hxx:2496; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:219; ROOT::RDF::RInterface::AggregateRResultPtr< U > Aggregate(AccFun aggregator, MergeFun merger, std::string_view columnName, const U &aggIdentity)Execute a user-defined accumulation operation on the processed column values in each processing slot.Definition RInterface.hxx:2879; ROOT::RDF::RInterface::RInterfaceRInterface(RInterface &&)=defaultMove-ctor for RInterface.; ROOT::RDF::RInterface::ReduceRResultPtr< T > Reduce(F f, std::string_view columnName, const T &redIdentity)Execute a user-defined reduce operation on the values of a column.Definition RInterface.hxx:1711; ROOT::RDF::RInterface::Histo3DRResultPtr<::TH3D > Histo3D(const TH3DModel &model, std::string_view v1Name, std::string_view v2Name, std::string_view v3Name, std::string_view wName)Fill and return a three-dimensional histogram (lazy action).Definition RInterface.hxx:2098; ROOT::RDF::RInterface::DefaultValueForRInterface< Proxied, DS_t > DefaultValueFor(std::string_view column, const T &defaultValue)In case the value in the given column is missing, provide a default value.Definition RInterface.hxx:672; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, std::string_view name)Append a filter to the call graph.Definition RInterface.hxx:242; ROOT::RDF::RInterface::RangeRInterface< RDFDetail::RRange< Proxied >, DS_t > Range(unsigned int begin, unsigned int end, unsigned int stride=1)Creates a node that filters entries based on range:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:214910,reduce,reduce,214910,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['reduce'],['reduce']
Energy Efficiency,"edMinimizerCombined minimizer: combination of Migrad and Simplex ;  CCombinedMinimumBuilder;  CContoursError;  CDavidonErrorUpdatorUpdate of the covariance matrix for the Variable Metric minimizer (MIGRAD) ;  CFCNAdapterTemplate wrapped class for adapting to FCNBase signature ;  CFCNBaseInterface (abstract class) defining the function to be minimized, which has to be implemented by the user ;  CFCNGradAdapterTemplate wrapped class for adapting to FCNBase signature a IGradFunction ;  CFCNGradientBaseExtension of the FCNBase for providing the analytical Gradient of the function ;  CFumiliBuilderBuilds the FunctionMinimum using the Fumili method ;  CFumiliChi2FCNExtension of the FCNBase for the Fumili method ;  CFumiliErrorUpdatorIn the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives ;  CFumiliFCNAdapterTemplate wrapped class for adapting to FumiliFCNBase signature ;  CFumiliFCNBaseExtension of the FCNBase for the Fumili method ;  CFumiliGradientCalculator;  CFumiliMaximumLikelihoodFCNExtension of the FCNBase for the Fumili method ;  CFumiliMinimizerInstantiates the seed generator and Minimum builder for the Fumili minimization method ;  CFumiliStandardChi2FCNClass implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation ;  CFumiliStandardMaximumLikelihoodFCNClass implementing the Elements member function for the standard maximum likelihood method ;  CFunctionGradient;  CFunctionMinimizerBase class for function minimizers; user may give FCN or FCN with Gradient, Parameter starting values and initial Error guess (sigma) (or ""step size""), or Parameter starting values and initial covariance matrix; covariance matrix is stored in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:62394,adapt,adapting,62394,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,4,['adapt'],['adapting']
Energy Efficiency,"edflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fAddNewIsoBtnButton to add new iso.; TGNumberEntry*fAlpha; TGTextButton*fApplyAlpha; TGTextButton*fApplyPlanes; TGTextButton*fCancelGridBtn""Cancel"" button.; TGL5DDataSet*fDataSetData adapter for TTree.; TGL5DDataSetEditor::TGL5DEditorPrivate*fHidden; TGCheckButton*fHighlightCheckHighlight selected surface.; TGListBox*fIsoListList box to select surface.; TGCheckButton*fLogScale; TGNumberEntry*fNCellsXEntryNumber of cells along X.; TGNumberEntry*fNCellsYEntryNumber of cells along Y.; TGNumberEntry*fNCellsZEntryNumber of cells along Z.; TGNumberEntry*fNewIsoEntrySet the iso-level for new surface.; TGNumberEntry*fNumberOfPlanes; TGTextButton*fOkGridBtn""Apply"" button.; TGL5DPainter*fPainterPainter.; Int_tfSelectedSurface; TGCheckButton*fShowBoxCut; TGCheckButton*fShowCloudShow/hide points for surface.; TGDoubleHSlider*fSlideRange; TGHSlider*fSurfAlphaSliderSlider to control transparency.; TGColorSelect*fSurfColorSelectOpen color dialog.; TGTextButton*fSurfRemoveBtnRemove selected surface.; TGNumberEntryField*fV4MaxEntryRead only widget.; TGNumberEntryField*fV4MinEntryRead only widget.; TGCheckButton*fVisibleCheckShow/hide surface.; TGDoubleHSlider*fXRangeSliderSlid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGL5DDataSetEditor.html:20735,adapt,adapter,20735,root/html528/TGL5DDataSetEditor.html,https://root.cern,https://root.cern/root/html528/TGL5DDataSetEditor.html,6,['adapt'],['adapter']
Energy Efficiency,"eds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; Bool_tfAWaitkTRUE if waiting at the async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWheter the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queue",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXSocket.html:12400,monitor,monitoring,12400,root/html530/TXSocket.html,https://root.cern,https://root.cern/root/html530/TXSocket.html,3,['monitor'],['monitoring']
Energy Efficiency,"edu; procedures, for maximum weight or variance optimization respectively.; All essential results of the exploration are written into; the explored cell object. At the very end of the foam build-up,; Finally, MakeActiveList is invoked to create a list of pointers to; all active cells, for the purpose of the quick access during the MC generation.; The procedure Explore employs MakeAlpha to generate random coordinates; inside a given cell with the uniform distribution.; The above sequence of the procedure calls is depicted in the following figure:. . void Initialize(); Basic initialization of FOAM invoked by the user.; IMPORTANT: Random number generator and the distribution object has to be; provided using SetPseRan and SetRho prior to invoking this initializator!. void InitCells(); Internal subprogram used by Initialize.; It initializes ""root part"" of the FOAM of the tree of cells. Int_t CellFill(Int_t , TFoamCell* ); Internal subprogram used by Initialize.; It initializes content of the newly allocated active cell. void Explore(TFoamCell* Cell); Internal subprogram used by Initialize.; It explores newly defined cell with help of special short MC sampling.; As a result, estimates of true and drive volume is defined/determined; Average and dispersion of the weight distribution will is found along; each edge and the best edge (minimum dispersion, best maximum weight); is memorized for future use.; The optimal division point for eventual future cell division is; determined/recorded. Recorded are also minimum and maximum weight etc.; The volume estimate in all (inactive) parent cells is updated.; Note that links to parents and initial volume = 1/2 parent has to be; already defined prior to calling this routine. void Varedu(Double_t* , Int_t& , Double_t& , Double_t& ); Internal subrogram used by Initialize.; In determines the best edge candidate and the position of the cell division plane; in case of the variance reduction for future cell division,; using results of the M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFoam.html:16523,allocate,allocated,16523,root/html528/TFoam.html,https://root.cern,https://root.cern/root/html528/TFoam.html,6,['allocate'],['allocated']
Energy Efficiency,"edu; procedures, for maximum weight or variance optimization respectively.; All essential results of the exploration are written into; the explored cell object. At the very end of the foam build-up,; Finally, MakeActiveList is invoked to create a list of pointers to; all active cells, for the purpose of the quick access during the MC generation.; The procedure Explore employs MakeAlpha to generate random coordinates; inside a given cell with the uniform distribution.; The above sequence of the procedure calls is depicted in the following figure:. . void Initialize(); Basic initialization of FOAM invoked by the user.; IMPORTANT: Random number generator and the distribution object has to be; provided using SetPseRan and SetRho prior to invoking this initializator!. void InitCells(); Internal subprogram used by Initialize.; It initializes ""root part"" of the FOAM of the tree of cells. Int_t CellFill(Int_t , TFoamCell* ); Internal subprogram used by Initialize.; It initializes content of the newly allocated active cell. void Explore(TFoamCell* Cell); Internal subprogram used by Initialize.; It explores newly defined cell with help of special short MC sampling.; As a result, estimates of true and drive volume is defined/determined; Average and dispersion of the weight distribution will is found along; each edge and the best edge (minimum dispersion, best maximum weight); is memorized for future use.; The optimal division point for eventual future cell division is; determined/recorded. Recorded are also minimum and maximum weight etc.; The volume estimate in all (inactive) parent cells is updated.; Note that links to parents and initial volume = 1/2 parent has to be; already defined prior to calling this routine. void Varedu(Double_t[] , Int_t& , Double_t& , Double_t& ); Internal subrogram used by Initialize.; In determines the best edge candidate and the position of the cell division plane; in case of the variance reduction for future cell division,; using results of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFoam.html:17210,allocate,allocated,17210,root/html602/TFoam.html,https://root.cern,https://root.cern/root/html602/TFoam.html,4,['allocate'],['allocated']
Energy Efficiency,"educe the ; : number of input variables that have only little discrimination power. ; : ; : In the tests we have carried out so far, the MLP and ROOT networks; : (TMlpANN, interfaced via TMVA) performed equally well, with however; : a clear speed advantage for the MLP. The Clermont-Ferrand neural ; : net (CFMlpANN) exhibited worse classification performance in these; : tests, which is partly due to the slow convergence of its training; : (at least 10k training cycles are required to achieve approximately; : competitive results).; : ; : ␛[1mOvertraining: ␛[0monly the TMlpANN performs an explicit separation of the; : full training sample into independent training and validation samples.; : We have found that in most high-energy physics applications the ; : available degrees of freedom (training events) are sufficient to ; : constrain the weights of the relatively simple architectures required; : to achieve good performance. Hence no overtraining should occur, and ; : the use of validation samples would only reduce the available training; : information. However, if the performance on the training sample is ; : found to be significantly better than the one found with the inde-; : pendent test sample, caution is needed. The results for these samples ; : are printed to standard output at the end of each training job.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : The hidden layer architecture for all ANNs is defined by the option; : ""HiddenLayers=N+1,N,..."", where here the first hidden layer has N+1; : neurons and the second N neurons (and so on), and where N is the number ; : of input variables. Excessive numbers of hidden layers should be avoided,; : in favour of more neurons in the first hidden layer.; : ; : The number of cycles should be above 500. As said, if the number of; : adjustable weights is small compared to the training sample size,; : using a large number of training samples should not lead to overtraining.; : ; : <Suppress this messa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:43358,reduce,reduce,43358,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['reduce'],['reduce']
Energy Efficiency,"ee “The Tree Viewer”. For example, we can plot a two dimensional histogram. The tree viewer. 12.14.3 Reading the Tree; The tree1r function shows how to read the tree and access each entry and each leaf. We first define the variables to hold the read values.; Float_t px, py, pz;; Then we tell the tree to populate these variables when reading an entry. We do this with the method TTree::SetBranchAddress. The first parameter is the branch name, and the second is the address of the variable where the branch data is to be placed. In this example, the branch name is px. This name was given when the tree was written (see tree1w). The second parameter is the address of the variable px.; t1->SetBranchAddress(""px"",&px);; 12.14.3.1 GetEntry; Once the branches have been given the address, a specific entry can be read into the variables with the method TTree::GetEntry(n). It reads all the branches for entry (n) and populates the given address accordingly. By default, GetEntry() reuses the space allocated by the previous object for each branch. You can force the previous object to be automatically deleted if you call mybranch.SetAutoDelete(kTRUE) (default is kFALSE).; Consider the example in $ROOTSYS/test/Event.h. The top-level branch in the tree T is declared with:; Event *event = 0;; // event must be null or point to a valid object;; // it must be initialized; T.SetBranchAddress(""event"",&event);; When reading the Tree, one can choose one of these 3 options:; Option 1:; for (Int_t i = 0; i<nentries; i++) {; T.GetEntry(i);; //the object event has been filled at this point; }; This is the default and recommended way to create an object of the class Event.It will be pointed by event.; At the following entries, event will be overwritten by the new data. All internal members that are TObject* are automatically deleted. It is important that these members be in a valid state when GetEntry is called. Pointers must be correctly initialized. However these internal members will not be delet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:556237,allocate,allocated,556237,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['allocate'],['allocated']
Energy Efficiency,"eeCache::SetLearnEntries ; (; Int_t ; n = 10). static . Static function to set the number of entries to be used in learning mode The default value for n is 10. ; n must be >= 1 ; Definition at line 2144 of file TTreeCache.cxx. ◆ SetLearnPrefill(). void TTreeCache::SetLearnPrefill ; (; TTreeCache::EPrefillType ; type = kNoPrefill). virtual . Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches. The default prefilling behavior can be controlled by setting TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. . Definition at line 2159 of file TTreeCache.cxx. ◆ SetOptimizeMisses(). void TTreeCache::SetOptimizeMisses ; (; bool ; opt). Start of methods for the miss cache. ; Enable / disable the miss cache.; The first time this is called on a TTreeCache object, the corresponding data structures will be allocated. Subsequent enable / disables will simply turn the functionality on/off. ; Definition at line 683 of file TTreeCache.cxx. ◆ StartLearningPhase(). void TTreeCache::StartLearningPhase ; (; ). The name should be enough to explain the method. ; The only additional comments is that the cache is cleaned before the new learning phase. ; Definition at line 2169 of file TTreeCache.cxx. ◆ StopLearningPhase(). void TTreeCache::StopLearningPhase ; (; ). virtual . This is the counterpart of StartLearningPhase() and can be used to stop the learning phase. ; It's useful when the user knows exactly what branches they are going to use. For the moment it's just a call to FillBuffer() since that method will create the buffer lists from the specified branches. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2186 of file TTreeCache.cxx. ◆ Streamer(). void TTreeCache::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:50358,allocate,allocated,50358,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['allocate'],['allocated']
Energy Efficiency,"eeCache::SetLearnEntries ; (; Int_t ; n = 10). static . Static function to set the number of entries to be used in learning mode The default value for n is 10. ; n must be >= 1 ; Definition at line 2145 of file TTreeCache.cxx. ◆ SetLearnPrefill(). void TTreeCache::SetLearnPrefill ; (; TTreeCache::EPrefillType ; type = kNoPrefill). virtual . Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches. The default prefilling behavior can be controlled by setting TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. . Definition at line 2160 of file TTreeCache.cxx. ◆ SetOptimizeMisses(). void TTreeCache::SetOptimizeMisses ; (; bool ; opt). Start of methods for the miss cache. ; Enable / disable the miss cache.; The first time this is called on a TTreeCache object, the corresponding data structures will be allocated. Subsequent enable / disables will simply turn the functionality on/off. ; Definition at line 683 of file TTreeCache.cxx. ◆ StartLearningPhase(). void TTreeCache::StartLearningPhase ; (; ). The name should be enough to explain the method. ; The only additional comments is that the cache is cleaned before the new learning phase. ; Definition at line 2170 of file TTreeCache.cxx. ◆ StopLearningPhase(). void TTreeCache::StopLearningPhase ; (; ). virtual . This is the counterpart of StartLearningPhase() and can be used to stop the learning phase. ; It's useful when the user knows exactly what branches they are going to use. For the moment it's just a call to FillBuffer() since that method will create the buffer lists from the specified branches. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2187 of file TTreeCache.cxx. ◆ Streamer(). void TTreeCache::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:50428,allocate,allocated,50428,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['allocate'],['allocated']
Energy Efficiency,"eeHookfunction called on free; static void*fgFreeHookDatadata used by this function; static Bool_tfgHasCustomNewDeletetrue if using ROOT's new/delete; static size_tfgMaxBlockSizelargest block allocated; static ReAllocCFun_tfgReAllocCHookcustom ReAlloc with length check; static ReAllocFun_tfgReAllocHookcustom ReAlloc; static const UInt_tkObjectAllocMemValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void EnterStat(size_t size, void* p); Register a memory allocation operation. If desired one can trap an; allocation of a certain size in case one tries to find a memory; leak of that particular size. This function is only called via; the ROOT custom new operators. void RemoveStat(void* p); Register a memory free operation. This function is only called via; the custom ROOT delete operator. void * Alloc(size_t size); Allocate a block of memory, that later can be resized using; TStorage::ReAlloc(). void Dealloc(void* ptr); De-allocate block of memory, that was allocated via TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. Don't use if size is larger; than old size, use ReAlloc(void *, size_t, size_t) instead. void * ReAlloc(void* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) block of memory. Checks if current size is; equal to oldsize. If not memory was overwritten. char * ReAllocChar(char* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of chars. Size and oldsize are; in number of chars. Int_t * ReAllocInt(Int_t* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of integers. Size and oldsize are; number of integers (not number of bytes). void * ObjectAlloc(size_t size); Used to allocate a TObject on the heap (via TObject::operator new()).; Directly after this routine one can call (in the TObject ctor); TStorage::FilledByObjectAlloc() to find out if the just created object is on; the heap. void * ObjectAlloc(size_t size, void* vp);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStorage.html:3657,allocate,allocate,3657,root/html534/TStorage.html,https://root.cern,https://root.cern/root/html534/TStorage.html,4,['allocate'],"['allocate', 'allocated']"
Energy Efficiency,"eeded. Example:. Event* event = 0;; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. If addr is not zero and the pointer addr points at is; also not zero, then the caller has allocated a branch; object and is asking us to use it. The caller owns it; and must delete it when it is no longer needed. Example:. Event* event = new Event();; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. These rules affect users of TTree::Branch(),; TTree::SetBranchAddress(), and TChain::SetBranchAddress(); as well because those routines call this one. An example of a tree with branches with objects allocated; and owned by us:. TFile* f1 = new TFile(""myfile_original.root"");; TTree* t1 = (TTree*) f->Get(""MyTree"");; TFile* f2 = new TFile(""myfile_copy.root"", ""recreate"");; TTree* t2 = t1->Clone(0);; for (Int_t i = 0; i < 10; ++i) {; t1->GetEntry(i);; t2->Fill();; }; t2->Write(); delete f2;; f2 = 0;; delete f1;; f1 = 0;. An example of a branch with an object allocated by us,; but owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = 0;; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;. Notice that the only difference between this example; and the following example is that the event pointer; is zero when the branch is created. An example of a branch with an object allocated and; owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = new Event();; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;. If AutoDelete is on (see TBranch::SetAutoDelete),; the top level objet will be deleted a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchElement.html:25424,allocate,allocated,25424,root/html526/TBranchElement.html,https://root.cern,https://root.cern/root/html526/TBranchElement.html,11,['allocate'],['allocated']
Energy Efficiency,"ef VectorOfCharAndInt::iterator ItVarTypeIdx;  ; typedef VectorOfCharAndInt::const_iterator ItVarTypeIdxConst;  ; typedef std::vector< std::pair< Char_t, UInt_t > > VectorOfCharAndInt;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::VariableTransformBase; void CalcNorm (const std::vector< const Event * > &);  TODO --> adapt to variable,target,spectator selection method to calculate minimum, maximum, mean, and RMS for all variables used in the MVA. ;  ; Int_t GetNClasses () const;  ; UInt_t GetNSpectators () const;  ; UInt_t GetNTargets () const;  ; UInt_t GetNVariables () const;  ; void SetCreated (Bool_t c=kTRUE);  ; void SetName (const TString &c);  ; void SetNVariables (UInt_t i);  ; std::vector< TMVA::VariableInfo > & Spectators ();  ; std::vector< TMVA::VariableInfo > & Targets ();  ; std::vector< TMVA::VariableInfo > & Variables ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::VariableTransformBase; Event * fBackTransformedEvent;  holds the current back-transformed event ;  ; DataSetInfo & fDsi;  ; DataSetInfo * fDsiOutput;  ; VectorOfC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableDecorrTransform.html:13783,adapt,adapt,13783,doc/master/classTMVA_1_1VariableDecorrTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableDecorrTransform.html,4,['adapt'],['adapt']
Energy Efficiency,"efConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. void * New(void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated array of objects; of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetCanSplit(Int_t splitmode); Set the splitability of this class:; -1: Use the default calculation; 0:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClass.html:35744,allocate,allocated,35744,root/html530/TClass.html,https://root.cern,https://root.cern/root/html530/TClass.html,5,['allocate'],['allocated']
Energy Efficiency,"efConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. void * New(void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated array of objects; of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void * NewArray(Long_t nElements, void* arena, TClass::ENewType defConstructor = kClassNew) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). void Destructor(void* obj, Bool_t dtorOnly = kFALSE); Explicitly call destructor for object. void DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); Explicitly call operator delete[] for an array. void SetClassVersion(Version_t version); Private function. Set the class version for the 'class' represente",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:31830,allocate,allocated,31830,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,2,['allocate'],['allocated']
Energy Efficiency,"efer to x,y, here to pass the values because; # d is not linked to them (as explained above); if i < 3:; print(x, y, c); print(type(x)); d.add({x, y, c}); ; d.Print(""v""); print(""""); ; # The get() function returns a pointer to the internal copy of the RooArgSet(x,y,c); # supplied in the constructor; row = d.get(); row.Print(""v""); print(""""); ; # Get with an argument loads a specific data point in row and returns; # a pointer to row argset. get() always returns the same pointer, unless; # an invalid row number is specified. In that case a null ptr is returned; d.get(900).Print(""v""); print(""""); ; # Reducing, appending and merging; # -------------------------------------------------------------; ; # The reduce() function returns a dataset which is a subset of the; # original; print(""\n >> d1 has only columns x,c""); d1 = d.reduce({x, c}); d1.Print(""v""); ; print(""\n >> d2 has only column y""); d2 = d.reduce({y}); d2.Print(""v""); ; print(""\n >> d3 has only the points with y>5.17""); d3 = d.reduce(""y>5.17""); d3.Print(""v""); ; print(""\n >> d4 has only columns x, for data points with y>5.17""); d4 = d.reduce({x, c}, ""y>5.17""); d4.Print(""v""); ; # The merge() function adds two data set column-wise; print(""\n >> merge d2(y) with d1(x,c) to form d1(x,c,y)""); d1.merge(d2); d1.Print(""v""); ; # The append() function adds two datasets row-wise; print(""\n >> append data points of d3 to d1""); d1.append(d3); d1.Print(""v""); ; # Operations on binned datasets; # ---------------------------------------------------------; ; # A binned dataset can be constructed empty, an unbinned dataset, or; # from a ROOT native histogram (TH1,2,3); ; print("">> construct dh (binned) from d(unbinned) but only take the x and y dimensions, ""); print("">> the category 'c' will be projected in the filling process""); ; # The binning of real variables (like x,y) is done using their fit range; # 'get/setRange()' and number of specified fit bins 'get/setBins()'.; # Category dimensions of binned datasets get one bin per defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf402__datahandling_8py.html:2479,reduce,reduce,2479,doc/master/rf402__datahandling_8py.html,https://root.cern,https://root.cern/doc/master/rf402__datahandling_8py.html,1,['reduce'],['reduce']
Energy Efficiency,"eference run; ; ; // the right coefficients (before fit); double GoodCoeffsNoFit[] = {; -4.37056,; 43.1468,; 13.432,; 13.4632,; 13.3964,; 13.328,; 13.3016,; 13.3519,; 4.49724,; 4.63876,; 4.89036,; -3.69982,; -3.98618,; -3.86195,; 4.36054,; -4.02597,; 4.57037,; 4.69845,; 2.83819,; -3.48855,; -3.97612; };; ; // the right coefficients (after fit); double GoodCoeffs[] = {; -4.399,; 43.15,; 13.41,; 13.49,; 13.4,; 13.23,; 13.34,; 13.29,; 4.523,; 4.659,; 4.948,; -4.026,; -4.045,; -3.939,; 4.421,; -4.006,; 4.626,; 4.378,; 3.516,; -4.111,; -3.823,; };; ; // Good Powers; int GoodPower[] = {; 1, 1, 1, 1,; 2, 1, 1, 1,; 1, 1, 1, 2,; 1, 1, 2, 1,; 1, 2, 1, 1,; 2, 2, 1, 1,; 2, 1, 1, 2,; 2, 1, 2, 1,; 1, 1, 1, 3,; 1, 3, 1, 1,; 1, 1, 5, 1,; 1, 1, 2, 2,; 1, 2, 1, 2,; 1, 2, 2, 1,; 2, 1, 1, 3,; 2, 2, 1, 2,; 2, 1, 3, 1,; 2, 3, 1, 1,; 1, 2, 2, 2,; 2, 1, 2, 2,; 2, 2, 2, 1; };; ; int nc = fit->GetNCoefficients();; int nv = fit->GetNVariables();; const int *powers = fit->GetPowers();; const int *pindex = fit->GetPowerIndex();; if (nc != 21) return 1;; const TVectorD *coeffs = fit->GetCoefficients();; int k = 0;; for (int i=0;i<nc;i++) {; if (doFit) {; if (!TMath::AreEqualRel((*coeffs)[i],GoodCoeffs[i],1e-3)) return 2;; }; else {; if (TMath::Abs((*coeffs)[i] - GoodCoeffsNoFit[i]) > 5e-5) return 2;; }; for (int j=0;j<nv;j++) {; if (powers[pindex[i]*nv+j] != GoodPower[k]) return 3;; k++;; }; }; ; // now test the result of the generated function; gROOT->ProcessLine("".L MDF.C"");; ; double refMDF = (doFit) ? 43.95 : 43.98;; // this does not work in CLing since the function is not defined; //double x[] = {5,5,5,5};; //double rMDF = MDF(x);; //LM: need to return the address of the result since it is casted to a long (this should not be in a tutorial !); std::intptr_t iret = gROOT->ProcessLine("" double xvalues[] = {5,5,5,5}; double result=MDF(xvalues); &result;"");; double rMDF = * ( (double*)iret);; //printf(""%f\n"",rMDF);; if (TMath::Abs(rMDF -refMDF) > 1e-2) return 4;; return 0;; }; ; //______________",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/multidimfit_8C.html:7051,power,powers,7051,doc/master/multidimfit_8C.html,https://root.cern,https://root.cern/doc/master/multidimfit_8C.html,2,['power'],['powers']
Energy Efficiency,"efined(__ZEPHYR__); 19138 if ((so.lsa.sa.sa_family == AF_INET); 19139 || (so.lsa.sa.sa_family == AF_INET6)) {; 19140 /* Set TCP keep-alive for TCP sockets (IPv4 and IPv6).; 19141 * This is needed because if HTTP-level keep-alive; 19142 * is enabled, and client resets the connection, server won't get; 19143 * TCP FIN or RST and will keep the connection open forever. With; 19144 * TCP keep-alive, next keep-alive handshake will figure out that; 19145 * the client is down and will close the server end.; 19146 * Thanks to Igor Klopov who suggested the patch. */; 19147 if (setsockopt(so.sock,; 19148 SOL_SOCKET,; 19149 SO_KEEPALIVE,; 19150 (SOCK_OPT_TYPE)&on,; 19151 sizeof(on)); 19152 != 0) {; 19153 mg_cry_ctx_internal(; 19154 ctx,; 19155 ""%s: setsockopt(SOL_SOCKET SO_KEEPALIVE) failed: %s"",; 19156 __func__,; 19157 strerror(ERRNO));; 19158 }; 19159 }; 19160#endif; 19161 ; 19162 /* Disable TCP Nagle's algorithm. Normally TCP packets are coalesced; 19163 * to effectively fill up the underlying IP packet payload and; 19164 * reduce the overhead of sending lots of small buffers. However; 19165 * this hurts the server's throughput (ie. operations per second); 19166 * when HTTP 1.1 persistent connections are used and the responses; 19167 * are relatively small (eg. less than 1400 bytes).; 19168 */; 19169 if ((ctx->dd.config[CONFIG_TCP_NODELAY] != NULL); 19170 && (!strcmp(ctx->dd.config[CONFIG_TCP_NODELAY], ""1""))) {; 19171 if (set_tcp_nodelay(&so, 1) != 0) {; 19172 mg_cry_ctx_internal(; 19173 ctx,; 19174 ""%s: setsockopt(IPPROTO_TCP TCP_NODELAY) failed: %s"",; 19175 __func__,; 19176 strerror(ERRNO));; 19177 }; 19178 }; 19179 ; 19180 /* The ""non blocking"" property should already be; 19181 * inherited from the parent socket. Set it for; 19182 * non-compliant socket implementations. */; 19183 set_non_blocking_mode(so.sock);; 19184 ; 19185 so.in_use = 0;; 19186 produce_socket(ctx, &so);; 19187 }; 19188}; 19189 ; 19190 ; 19191static void; 19192master_thread_run(struct mg_context *ctx); 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:571155,reduce,reduce,571155,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['reduce'],['reduce']
Energy Efficiency,"efined(__ZEPHYR__); 19139 if ((so.lsa.sa.sa_family == AF_INET); 19140 || (so.lsa.sa.sa_family == AF_INET6)) {; 19141 /* Set TCP keep-alive for TCP sockets (IPv4 and IPv6).; 19142 * This is needed because if HTTP-level keep-alive; 19143 * is enabled, and client resets the connection, server won't get; 19144 * TCP FIN or RST and will keep the connection open forever. With; 19145 * TCP keep-alive, next keep-alive handshake will figure out that; 19146 * the client is down and will close the server end.; 19147 * Thanks to Igor Klopov who suggested the patch. */; 19148 if (setsockopt(so.sock,; 19149 SOL_SOCKET,; 19150 SO_KEEPALIVE,; 19151 (SOCK_OPT_TYPE)&on,; 19152 sizeof(on)); 19153 != 0) {; 19154 mg_cry_ctx_internal(; 19155 ctx,; 19156 ""%s: setsockopt(SOL_SOCKET SO_KEEPALIVE) failed: %s"",; 19157 __func__,; 19158 strerror(ERRNO));; 19159 }; 19160 }; 19161#endif; 19162 ; 19163 /* Disable TCP Nagle's algorithm. Normally TCP packets are coalesced; 19164 * to effectively fill up the underlying IP packet payload and; 19165 * reduce the overhead of sending lots of small buffers. However; 19166 * this hurts the server's throughput (ie. operations per second); 19167 * when HTTP 1.1 persistent connections are used and the responses; 19168 * are relatively small (eg. less than 1400 bytes).; 19169 */; 19170 if ((ctx->dd.config[CONFIG_TCP_NODELAY] != NULL); 19171 && (!strcmp(ctx->dd.config[CONFIG_TCP_NODELAY], ""1""))) {; 19172 if (set_tcp_nodelay(&so, 1) != 0) {; 19173 mg_cry_ctx_internal(; 19174 ctx,; 19175 ""%s: setsockopt(IPPROTO_TCP TCP_NODELAY) failed: %s"",; 19176 __func__,; 19177 strerror(ERRNO));; 19178 }; 19179 }; 19180 ; 19181 /* The ""non blocking"" property should already be; 19182 * inherited from the parent socket. Set it for; 19183 * non-compliant socket implementations. */; 19184 set_non_blocking_mode(so.sock);; 19185 ; 19186 so.in_use = 0;; 19187 produce_socket(ctx, &so);; 19188 }; 19189}; 19190 ; 19191 ; 19192static void; 19193master_thread_run(struct mg_context *ctx); 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:571188,reduce,reduce,571188,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['reduce'],['reduce']
Energy Efficiency,"efinition GSLMultiMinFunctionWrapper.h:69; ROOT::Math::GSLMultiMinFunctionWrapper::GetFuncgsl_multimin_function * GetFunc()Definition GSLMultiMinFunctionWrapper.h:83; ROOT::Math::GSLMultiMinFunctionWrapper::SetParamsvoid SetParams(void *p)Definition GSLMultiMinFunctionWrapper.h:71; ROOT::Math::GSLMultiMinFunctionWrapper::SetFunctionvoid SetFunction(const FuncType &f)Fill gsl function structure from a C++ Function class.Definition GSLMultiMinFunctionWrapper.h:75; ROOT::Math::GSLMultiMinFunctionWrapper::IsValidbool IsValid()Definition GSLMultiMinFunctionWrapper.h:85; ROOT::Math::GSLMultiMinFunctionWrapper::GSLMultiMinFunctionWrapperGSLMultiMinFunctionWrapper()Definition GSLMultiMinFunctionWrapper.h:62; ROOT::Math::GSLMultiMinFunctionWrapper::SetDimvoid SetDim(unsigned int n)Definition GSLMultiMinFunctionWrapper.h:70; ROOT::Math::GSLMultiMinFunctionWrapper::fFuncgsl_multimin_function fFuncDefinition GSLMultiMinFunctionWrapper.h:92; double; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::GSLMultiMinDfPointervoid(* GSLMultiMinDfPointer)(const gsl_vector *, void *, gsl_vector *)Definition GSLMultiMinFunctionWrapper.h:47; ROOT::Math::GSLMultiMinFuncPointerdouble(* GSLMultiMinFuncPointer)(const gsl_vector *, void *)Definition GSLMultiMinFunctionWrapper.h:46; ROOT::Math::GSLMultiMinFdfPointervoid(* GSLMultiMinFdfPointer)(const gsl_vector *, void *, double *, gsl_vector *)Definition GSLMultiMinFunctionWrapper.h:48; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Math::GSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin ...Definition GSLMultiMinFunctionAdapter.h:66. mathmathmoresrcGSLMultiMinFunctionWrapper.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html:8790,adapt,adapting,8790,doc/master/GSLMultiMinFunctionWrapper_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiMinFunctionWrapper_8h_source.html,1,['adapt'],['adapting']
Energy Efficiency,"efinition Rtypes.h:66; kDotted@ kDottedDefinition TAttLine.h:48; TAxis.h; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; TH1.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; gPad#define gPadDefinition TVirtualPad.h:308; RooAbsCollection::findRooAbsArg * find(const char *name) constFind object with given name in list.Definition RooAbsCollection.cxx:922; RooAbsData::plotOnvirtual RooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) constDefinition RooAbsData.cxx:548; RooAbsData::reduceRooFit::OwningPtr< RooAbsData > reduce(const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) constCreate a reduced copy of this dataset.Definition RooAbsData.cxx:399; RooArgSetRooArgSet is a container object that can hold multiple RooAbsArg objects.Definition RooArgSet.h:24; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooDataSet::getconst RooArgSet * get(Int_t index) const overrideReturn RooArgSet with coordinates of event 'index'.Definition RooDataSet.cxx:835; RooDataSet::binnedCloneRooFit::OwningPtr< RooDataHist > binnedClone(const char *newName=nullptr, const char *newTitle=nullptr) constReturn binned clone of this dataset.Definition RooDataSet.cxx:736; RooGaussianPlain Gaussian p.d.f.Definition RooGaussian.h:24; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooPlot::framestatic RooPlot * frame(const RooAbsRealLValue &var, double xmin, double xmax, Int_t nBins)Create a new frame ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf303__conditional_8C.html:4763,reduce,reduceRooFit,4763,doc/master/rf303__conditional_8C.html,https://root.cern,https://root.cern/doc/master/rf303__conditional_8C.html,3,['reduce'],"['reduce', 'reduceRooFit', 'reduced']"
Energy Efficiency,"efinition at line 143 of file Derivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::Derivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 122 of file Derivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::Derivator::EvalBackward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 105 of file Derivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::Derivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 97 of file Derivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::Derivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:8439,adapt,adaptive,8439,doc/master/classROOT_1_1Math_1_1Derivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html,1,['adapt'],['adaptive']
Energy Efficiency,"efinition at line 170 of file LorentzVector.h. ◆ Dimension(). template<class CoordSystem > . unsigned int ROOT::Math::LorentzVector< CoordSystem >::Dimension ; (; ); const. inline . dimension ; Definition at line 269 of file LorentzVector.h. ◆ Dot(). template<class CoordSystem > . template<class OtherLorentzVector > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Dot ; (; const OtherLorentzVector< CoordSystem > & ; q); const. inline . scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any other LorentzVector implementing the x(), y() , y() and t() member functions ; Parameters. qany LorentzVector implementing the x(), y() , z() and t() member functions . Returnsthe result of v.q of type according to the base scalar type of v ; Definition at line 387 of file LorentzVector.h. ◆ E(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::E ; (; ); const. inline . return 4-th component (time, or energy for a 4-momentum vector) ; Definition at line 294 of file LorentzVector.h. ◆ e(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::e ; (; ); const. inline . Definition at line 649 of file LorentzVector.h. ◆ energy(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::energy ; (; ); const. inline . Definition at line 664 of file LorentzVector.h. ◆ Et(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et ; (; ); const. inline . return the transverse energy . \[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \]. Definition at line 349 of file LorentzVector.h. ◆ Et2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et2 ; (; ); const. inline . return the transverse energy squared . \[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \]. Definition at line 343 of file LorentzVector.h. ◆ Eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Eta ; (; );",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:14830,energy,energy,14830,doc/master/classROOT_1_1Math_1_1LorentzVector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html,1,['energy'],['energy']
Energy Efficiency,"efinition at line 387 of file LorentzVector.h. ◆ E(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::E ; (; ); const. inline . return 4-th component (time, or energy for a 4-momentum vector) ; Definition at line 294 of file LorentzVector.h. ◆ e(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::e ; (; ); const. inline . Definition at line 649 of file LorentzVector.h. ◆ energy(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::energy ; (; ); const. inline . Definition at line 664 of file LorentzVector.h. ◆ Et(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et ; (; ); const. inline . return the transverse energy . \[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \]. Definition at line 349 of file LorentzVector.h. ◆ Et2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et2 ; (; ); const. inline . return the transverse energy squared . \[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \]. Definition at line 343 of file LorentzVector.h. ◆ Eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Eta ; (; ); const. inline . pseudorapidity . \[ \eta = - \ln { \tan { \frac { \theta} {2} } } \]. Definition at line 365 of file LorentzVector.h. ◆ eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::eta ; (; ); const. inline . Definition at line 654 of file LorentzVector.h. ◆ Gamma(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Gamma ; (; ); const. inline . Return Gamma scalar value. ; Definition at line 617 of file LorentzVector.h. ◆ GetCoordinates() [1/4]. template<class CoordSystem > . template<class IT > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; IT ; begin); const. inline . get internal data into 4 Scalars at *begin ; Definition at line 229 of file LorentzVector.h. ◆ GetCoordinates() [",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:15642,energy,energy,15642,doc/master/classROOT_1_1Math_1_1LorentzVector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html,1,['energy'],['energy']
Energy Efficiency,"efinition legend1.C:11; Factory.h; MathNamespace for new Math classes and functions.; ROOT::TF1Helper::IntegralErrordouble IntegralError(TF1 *func, Int_t ndim, const double *a, const double *b, const double *params, const double *covmat, double epsilon)Definition TF1Helper.cxx:39; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMath::IsNaNBool_t IsNaN(Double_t x)Definition TMath.h:892; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::ProbDouble_t Prob(Double_t chi2, Int_t ndf)Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf...Definition TMath.cxx:637; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::AreEqualRelBool_t AreEqualRel(Double_t af, Double_t bf, Double_t relPrec)Comparing floating points.Definition TMath.h:426; TMath::BinarySearchLong64_t BinarySearch(Long64_t n, const T *array, T value)Binary search in an array of n values to locate value.Definition TMathBase.h:347; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; TMath::InfinityDouble_t Infinity()Returns an infinity as defined by the IEEE standard.Definition TMath.h:917; formula1Definition formula1.py:1; v@ vDefinition rootcling_impl.cxx:3699; ROOT::v5::TF1DataDefinition TF1Data.h:37; ROOT::v5::TF1Data::fParMinDouble_t * fParMinDefinition TF1Data.h:48; ROOT::v5::TF1Data::fNsa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:201551,power,power,201551,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['power'],['power']
Energy Efficiency,"efix, series of archive members (sub-files), and a central directory. In theory the archive could span multiple disks (or files) with the central directory of the whole archive on the last disk, but this class does not support such multi-part archives. The prefix is only used in self-extracting executable archive files. The members are stored in the archive sequentially, each with a local header followed by the (optionally) compressed data; the local header describes the member, including its file name and compressed and real sizes. The central directory includes the member details again, plus allows an extra member comment to be added. The last member in the central directory is an end marker that can contain a comment for the whole archive. Both the local header and the central directory can also carry extra member-specific data; the data in the local and global parts can be different. The fact that the archive has a global directory makes it efficient and allows for only the reading of the desired data, one does not have to scan through the whole file to find the desired sub-file. The Zip64 extensions are supported so files larger than 2GB can be stored in archives larger than 4 GB. Once the archive has been opened, the client can query the members and read their contents by asking the archive for an offset where the sub-file starts. The members can be accessed in any order. ; Definition at line 20 of file TZIPFile.h. Public Member Functions;  TZIPFile ();  Default ctor. ;  ;  TZIPFile (const char *archive, const char *member, TFile *file);  Specify the archive name and member name. ;  ;  ~TZIPFile () override;  ; TClass * IsA () const override;  ; Int_t OpenArchive () override;  Open archive and read end-header and directory. ;  ; void Print (Option_t *option="""") const override;  Pretty print ZIP archive members. ;  ; Int_t SetCurrentMember () override;  Find the desired member in the member array and make it the current member. ;  ; void Streamer (TBuffer &) ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTZIPFile.html:2022,efficient,efficient,2022,doc/master/classTZIPFile.html,https://root.cern,https://root.cern/doc/master/classTZIPFile.html,1,['efficient'],['efficient']
Energy Efficiency,"efore ORDER+1 pointers; to sub-trees. The keys are numbered and indexed 1 to ORDER while the; pointers are numbered and indexed 0 to ORDER. The 0th ptr points to the; sub-tree of all elements that are less than key[1]. Ptr[1] points to the; sub-tree that contains all the elements greater than key[1] and less than; key[2]. etc. The array of pointers and keys is allocated as ORDER+1; pairs of keys and nodes, meaning that one key field (key[0]) is not used; and therefore wasted. Given that the number of interior nodes is; small, that this waste allows fewer cases of special code, and that it; is useful in certain of the methods, it was felt to be a worthwhile waste. The size of the exterior nodes (leaf nodes) does not need to be related to; the size of the interior nodes at all. Since leaf nodes contain only; keys, they may be as large or small as we like independent of the size; of the interior nodes. For no particular reason other than it seems like; a good idea, we will allocate 2*(ORDER+1) keys in each leaf node, and they; will be numbered and indexed from 0 to 2*ORDER+1. It does have the advantage; of keeping the size of the leaf and interior arrays the same, so that if we; find allocation and de-allocation of these arrays expensive, we can modify; their allocation to use a garbage ring, or something. Both of these numbers will be run-time constants associated with each tree; (each tree at run-time can be of a different order). The variable ""order""; is the order of the tree, and the inclusive upper limit on the indices of; the keys in the interior nodes. The variable ""order2"" is the inclusive; upper limit on the indices of the leaf nodes, and is designed; >; (1) to keep the sizes of the two kinds of nodes the same;; (2) to keep the expressions involving the arrays of keys looking; somewhat the same: lower limit upper limit; for inner nodes: 1 order; for leaf nodes: 0 order2; Remember that index 0 of the inner nodes is special. Currently, order2 = 2*(order+1).; >; P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBtree.html:4435,allocate,allocate,4435,root/html526/TBtree.html,https://root.cern,https://root.cern/root/html526/TBtree.html,11,['allocate'],['allocate']
Energy Efficiency,"egin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFuncti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:30608,allocate,allocate,30608,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['allocate'],['allocate']
Energy Efficiency,"egin, Int_t iend, Int_t obegin) override;  Copy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  Constructor allocate. ;  ; Bool_t DoMerge (const TGraph *g) override;  Protected function to perform the merge operation of a graph with errors. ;  ; void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) override;  Set zero values for point arrays in the range [begin, end]. ;  ; void SwapPoints (Int_t pos1, Int_t pos2) override;  Swap points. ;  ; void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) override;  Update the fX, fY, fEX, and fEY arrays with the sorted values. ;  ;  Protected Member Functions inherited from TGraph; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphPolar.h>. Inheritance diagram for TGraphPolar:.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPolar.html:34952,allocate,allocate,34952,doc/master/classTGraphPolar.html,https://root.cern,https://root.cern/doc/master/classTGraphPolar.html,1,['allocate'],['allocate']
Energy Efficiency,"egrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::IntegrationOneDim::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLIntegrator.html:5114,Adapt,Adaptive,5114,root/html532/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLIntegrator.html,2,['Adapt'],['Adaptive']
Energy Efficiency,"egrator(expo); ; # Power law example; # -----------------; ; # Let's not look at another example: a power law \f[x^a\f].; a = ROOT.RooRealVar(""a"", ""a"", -0.3, -5.0, 5.0); powerlaw = ROOT.RooPowerSum(""powerlaw"", ""powerlaw"", x, ROOT.RooFit.RooConst(1.0), a); powerlaw_data = generateBinnedAsimov(powerlaw, x, 10000); ; # Again, if you do a vanilla fit, you'll get a bias; fit3 = powerlaw.fitTo(powerlaw_data, Save=True, PrintLevel=-1, SumW2Error=False); fit3.Print(); ; # This time, the bias is not the same factor in each bin! This means our; # trick by sampling the integral in the same way doesn't cancel out the; # bias completely. The average bias is canceled, but there are per-bin; # biases that remain. Still, this method has some value: it is cheaper than; # rigurously correcting the bias by integrating the pdf in each bin. So if; # you know your per-bin bias variations are small or performance is an; # issue, this approach can be sufficient.; enableBinIntegrator(powerlaw, x.numBins()); fit4 = powerlaw.fitTo(powerlaw_data, Save=True, PrintLevel=-1, SumW2Error=False); fit4.Print(); disableBinIntegrator(powerlaw); ; # To get rid of the binning effects in the general case, one can use the; # IntegrateBins() command argument. Now, the pdf is not evaluated at the; # bin centers, but numerically integrated over each bin and divided by the; # bin width. The parameter for IntegrateBins() is the required precision; # for the numeric integrals. This is computationally expensive, but the; # bias is now not a problem anymore.; fit5 = powerlaw.fitTo(powerlaw_data, IntegrateBins=1e-3, Save=True, PrintLevel=-1, SumW2Error=False); fit5.Print(); ; # Improving numerical stability; # -----------------------------; ; # There is one more problem with binned fits that is related to the binning; # effects because often, a binned fit is affected by both problems.; #; # The issue is numerical stability for fits with a greatly different number; # of events in each bin. For each bin, you have a t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html:4841,power,powerlaw,4841,doc/master/rf614__binned__fit__problems_8py.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html,1,['power'],['powerlaw']
Energy Efficiency,egrator.h;  IntegratorMultiDim.h;  IntegratorOptions.h;  IOptions.h;  IParamFunction.h;  IParamFunctionfwd.h;  IRootFinderMethod.h;  KDTree.h;  KDTree.icc;  Math.h;  MersenneTwisterEngine.h;  Minimizer.h;  MinimizerOptions.h;  MinimizerVariableTransformation.h;  MinimTransformFunction.h;  MinimTransformVariable.h;  MixMaxEngine.h;  MultiDimParamFunctionAdapter.h;  OneDimFunctionAdapter.h;  ParamFunctor.h;  PdfFunc.h;  PdfFuncMathCore.h;  ProbFunc.h;  ProbFuncMathCore.h;  QuantFunc.h;  QuantFuncMathCore.h;  Random.h;  RandomFunctions.h;  RichardsonDerivator.h;  RootFinder.h;  SpecFunc.h;  SpecFuncMathCore.h;  StdRandomEngines.h;  TDataPoint.h;  TDataPoint.icc;  TDataPointN.h;  TDataPointN.icc;  TRandomEngine.h;  Util.h;  VirtualIntegrator.h;  WrappedFunction.h;  WrappedParamFunction.h;  LinkDef.h;  LinkDef1.h;  LinkDef2.h;  LinkDef3.h;  LinkDef_Func.h;  TComplex.h;  TKDTree.h;  TKDTreeBinning.h;  TMath.h;  TRandom.h;  TRandom1.h;  TRandom2.h;  TRandom3.h;  TStatistic.h;  ► src;  AdaptiveIntegratorMultiDim.cxx;  BasicMinimizer.cxx;  BinData.cxx;  BinPoint.cxx;  BrentMethods.cxx;  BrentMinimizer1D.cxx;  BrentRootFinder.cxx;  ChebyshevPol.cxx;  DataRange.cxx;  DataVector.cxx;  Delaunay2D.cxx;  DistSampler.cxx;  DistSamplerOptions.cxx;  Factory.cxx;  FitConfig.cxx;  FitResult.cxx;  Fitter.cxx;  FitUtil.cxx;  FitUtilParallel.cxx;  GaussIntegrator.cxx;  GaussLegendreIntegrator.cxx;  GenAlgoOptions.cxx;  GoFTest.cxx;  Integrator.cxx;  IntegratorOptions.cxx;  MersenneTwisterEngine.cxx;  MinimizerOptions.cxx;  MinimizerVariableTransformation.cxx;  MinimTransformFunction.cxx;  mixmax.cxx;  mixmax.h;  mixmax_skip_N256.icc;  MixMaxEngine.cxx;  ParameterSettings.cxx;  PdfFuncMathCore.cxx;  ProbFuncMathCore.cxx;  QuantFuncMathCore.cxx;  RandomFunctions.cxx;  RichardsonDerivator.cxx;  RootFinder.cxx;  SparseData.cxx;  SpecFuncCephes.cxx;  SpecFuncCephes.h;  SpecFuncCephesInv.cxx;  SpecFuncMathCore.cxx;  TComplex.cxx;  TDataPointN.cxx;  TKDTree.cxx;  TKDTreeBinning.cxx;  TMath.cxx;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/files.html:44648,Adapt,AdaptiveIntegratorMultiDim,44648,root/html606/files.html,https://root.cern,https://root.cern/root/html606/files.html,1,['Adapt'],['AdaptiveIntegratorMultiDim']
Energy Efficiency,"ehavior; 1276 ; 1277void TH1::AddBinContent(Int_t, Double_t); 1278{; 1279 AbstractMethod(""AddBinContent"");; 1280}; 1281 ; 1282////////////////////////////////////////////////////////////////////////////////; 1283/// Sets the flag controlling the automatic add of histograms in memory; 1284///; 1285/// By default (fAddDirectory = kTRUE), histograms are automatically added; 1286/// to the list of objects in memory.; 1287/// Note that one histogram can be removed from its support directory; 1288/// by calling h->SetDirectory(nullptr) or h->SetDirectory(dir) to add it; 1289/// to the list of objects in the directory dir.; 1290///; 1291/// NOTE that this is a static function. To call it, use;; 1292/// TH1::AddDirectory; 1293 ; 1294void TH1::AddDirectory(Bool_t add); 1295{; 1296 fgAddDirectory = add;; 1297}; 1298 ; 1299////////////////////////////////////////////////////////////////////////////////; 1300/// Auxiliary function to get the power of 2 next (larger) or previous (smaller); 1301/// a given x; 1302///; 1303/// next = kTRUE : next larger; 1304/// next = kFALSE : previous smaller; 1305///; 1306/// Used by the autobin power of 2 algorithm; 1307 ; 1308inline Double_t TH1::AutoP2GetPower2(Double_t x, Bool_t next); 1309{; 1310 Int_t nn;; 1311 Double_t f2 = std::frexp(x, &nn);; 1312 return ((next && x > 0.) || (!next && x <= 0.)) ? std::ldexp(std::copysign(1., f2), nn); 1313 : std::ldexp(std::copysign(1., f2), --nn);; 1314}; 1315 ; 1316////////////////////////////////////////////////////////////////////////////////; 1317/// Auxiliary function to get the next power of 2 integer value larger then n; 1318///; 1319/// Used by the autobin power of 2 algorithm; 1320 ; 1321inline Int_t TH1::AutoP2GetBins(Int_t n); 1322{; 1323 Int_t nn;; 1324 Double_t f2 = std::frexp(n, &nn);; 1325 if (TMath::Abs(f2 - .5) > 0.001); 1326 return (Int_t)std::ldexp(1., nn);; 1327 return n;; 1328}; 1329 ; 1330////////////////////////////////////////////////////////////////////////////////; 1331/// Bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:51440,power,power,51440,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['power'],['power']
Energy Efficiency,"el = 1, Int_t wsize = kDfltWindowSize, TSocket* sock = 0); Open connection to host specified by the url using par parallel sockets.; The url has the form: [root[s,k]://]host[:port].; If port is not specified the default rootd port (1094) will be used.; Using wsize one can specify the tcp window size. Normally this is not; needed when using parallel sockets.; An existing connection (TSocket *sock) can also be used to establish; the FTP session. void Init(const char* url, Int_t parallel, Int_t wsize); Set up the actual connection. ~TFTP(); TFTP dtor. Send close message and close socket. void Print(Option_t* opt = """") const; Print some info about the FTP connection. void PrintError(const char* where, Int_t err) const; Print error string depending on error code. Int_t Recv(Int_t& status, EMessageTypes& kind) const; Return status from rootd server and message kind. Returns -1 in; case of error otherwise 8 (sizeof 2 words, status and kind). void SetBlockSize(Int_t blockSize); Make sure the block size is a power of two, with a minimum of 32768. Long64_t PutFile(const char* file, const char* remoteName = 0); Transfer file to remote host. Returns number of bytes; sent or < 0 in case of error. Error -1 connection is still; open, error -2 connection has been closed. In case of failure; fRestartAt is set to the number of bytes correclty transfered.; Calling PutFile() immediately afterwards will restart at fRestartAt.; If this is not desired call SetRestartAt(0) before calling PutFile().; If rootd reports that the file is locked, and you are sure this is not; the case (e.g. due to a crash), you can force unlock it by prepending; the remoteName with a '-'. Long64_t GetFile(const char* file, const char* localName = 0); Transfer file from remote host. Returns number of bytes; received or < 0 in case of error. Error -1 connection is still; open, error -2 connection has been closed. In case of failure; fRestartAt is set to the number of bytes correclty transfered.; Calling GetFile() i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFTP.html:8856,power,power,8856,root/html528/TFTP.html,https://root.cern,https://root.cern/root/html528/TFTP.html,10,['power'],['power']
Energy Efficiency,"el or 'j', 'J', 'k', 'K' keys.; 3000 ; 3001 ; 3002\anchor HP29i; 3003#### Panning; 3004 ; 3005The selected plot can be moved in a pad's area by pressing and; 3006holding the left mouse button and the shift key.; 3007 ; 3008\anchor HP29j; 3009#### Box cut; 3010 ; 3011Surface, iso, box, TF3 and parametric painters support box cut by; 3012pressing the 'c' or 'C' key when the mouse cursor is in a plot's; 3013area. That will display a transparent box, cutting away part of the; 3014surface (or boxes) in order to show internal part of plot. This box; 3015can be moved inside the plot's area (the full size of the box is; 3016equal to the plot's surrounding box) by selecting one of the box; 3017cut axes and pressing the left mouse button to move it.; 3018 ; 3019\anchor HP29k; 3020#### Plot specific interactions (dynamic slicing etc.); 3021 ; 3022Currently, all gl-plots support some form of slicing. When back plane; 3023is selected (and if it's highlighted in green) you can press and hold; 3024left mouse button and shift key and move this back plane inside; 3025plot's area, creating the slice. During this ""slicing"" plot becomes; 3026semi-transparent. To remove all slices (and projected curves for; 3027surfaces) double click with left mouse button in a plot's area.; 3028 ; 3029\anchor HP29l; 3030#### Surface with option ""GLSURF""; 3031 ; 3032The surface profile is displayed on the slicing plane.; 3033The profile projection is drawn on the back plane; 3034by pressing `'p'` or `'P'` key.; 3035 ; 3036\anchor HP29m; 3037#### TF3; 3038 ; 3039The contour plot is drawn on the slicing plane. For TF3 the color; 3040scheme can be changed by pressing 's' or 'S'.; 3041 ; 3042\anchor HP29n; 3043#### Box; 3044 ; 3045The contour plot corresponding to slice plane position is drawn in real time.; 3046 ; 3047\anchor HP29o; 3048#### Iso; 3049 ; 3050Slicing is similar to ""GLBOX"" option.; 3051 ; 3052\anchor HP29p; 3053#### Parametric plot; 3054 ; 3055No slicing. Additional keys: 's' or 'S' to change",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:119718,green,green,119718,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"el. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a 2-D \( \chi^2 \) fit using a series of x ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolyVar.html:3271,adapt,adaptor,3271,doc/master/classRooPolyVar.html,https://root.cern,https://root.cern/doc/master/classRooPolyVar.html,1,['adapt'],['adaptor']
Energy Efficiency,"el. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConvCoefVar.html:2987,adapt,adaptor,2987,doc/master/classRooConvCoefVar.html,https://root.cern,https://root.cern/doc/master/classRooConvCoefVar.html,3,['adapt'],['adaptor']
Energy Efficiency,"elSigma2(). void TKDE::SetUserKernelSigma2 ; (; ). private . Definition at line 1207 of file TKDE.cxx. ◆ Streamer(). void TKDE::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TKDE::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 301 of file TKDE.h. ◆ UpperConfidenceInterval(). Double_t TKDE::UpperConfidenceInterval ; (; const Double_t * ; x, . const Double_t * ; p . ); const. private . Valid if the bandwidth is small compared to nEvents**1/5. ; Definition at line 1063 of file TKDE.cxx. Friends And Related Symbol Documentation. ◆ KernelIntegrand. friend struct KernelIntegrand. friend . Definition at line 233 of file TKDE.h. ◆ TKernel. friend class TKernel. friend . Definition at line 176 of file TKDE.h. Member Data Documentation. ◆ fAdaptiveBandwidthFactor. Double_t TKDE::fAdaptiveBandwidthFactor. private . Geometric mean of the kernel density estimation from the data for adaptive iteration. ; Definition at line 221 of file TKDE.h. ◆ fApproximateBias. TF1* TKDE::fApproximateBias. private . Output Kernel Density Estimation lower confidence interval PDF function. ; Definition at line 196 of file TKDE.h. ◆ fAsymLeft. Bool_t TKDE::fAsymLeft. private . Definition at line 205 of file TKDE.h. ◆ fAsymRight. Bool_t TKDE::fAsymRight. private . Definition at line 205 of file TKDE.h. ◆ fBinCount. std::vector<Double_t> TKDE::fBinCount. private . Number of events per bin for binned data option. ; Definition at line 228 of file TKDE.h. ◆ fBinning. EBinning TKDE::fBinning. private . Definition at line 202 of file TKDE.h. ◆ fCanonicalBandwidths. std::vector<Double_t> TKDE::fCanonicalBandwidths. private . Definition at line 225 of file TKDE.h. ◆ fData. std::vector<Double_t> TKDE::fData. private . Data events. ; Definition at line 189 of file TKDE.h. ◆ fEvents. std::vector<Double_t> TKDE::fEvents. private . Original data storage. ; Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDE.html:37124,adapt,adaptive,37124,doc/master/classTKDE.html,https://root.cern,https://root.cern/doc/master/classTKDE.html,1,['adapt'],['adaptive']
Energy Efficiency,"elect events for the analysis; ROOT.gInterpreter.Declare(; """"""; using ROOT::RVecF;; using ROOT::RVecI;; bool GoodElectronsAndMuons(const RVecI &type, const RVecF &pt, const RVecF &eta, const RVecF &phi, const RVecF &e, const RVecF &trackd0pv, const RVecF &tracksigd0pv, const RVecF &z0); {; for (size_t i = 0; i < type.size(); i++) {; ROOT::Math::PtEtaPhiEVector p(0.001*pt[i], eta[i], phi[i], 0.001*e[i]);; if (type[i] == 11) {; if (pt[i] < 7000 || abs(eta[i]) > 2.47 || abs(trackd0pv[i] / tracksigd0pv[i]) > 5 || abs(z0[i] * sin(p.Theta())) > 0.5) return false;; } else {; if (abs(trackd0pv[i] / tracksigd0pv[i]) > 5 || abs(z0[i] * sin(p.Theta())) > 0.5) return false;; }; }; return true;; }; """"""; ); ; # Select electron or muon trigger; df = df.Filter(""trigE || trigM""); ; # Select events with exactly four good leptons conserving charge and lepton numbers; # Note that all collections are RVecs and good_lep is the mask for the good leptons.; # The lepton types are PDG numbers and set to 11 or 13 for an electron or muon; # irrespective of the charge.; ; df = (; df.Define(; ""good_lep"",; ""abs(lep_eta) < 2.5 && lep_pt > 5000 && lep_ptcone30 / lep_pt < 0.3 && lep_etcone20 / lep_pt < 0.3"",; ); .Filter(""Sum(good_lep) == 4""); .Filter(""Sum(lep_charge[good_lep]) == 0""); .Define(""goodlep_sumtypes"", ""Sum(lep_type[good_lep])""); .Filter(""goodlep_sumtypes == 44 || goodlep_sumtypes == 52 || goodlep_sumtypes == 48""); ); ; # Apply additional cuts depending on lepton flavour; df = df.Filter(; ""GoodElectronsAndMuons(lep_type[good_lep], lep_pt[good_lep], lep_eta[good_lep], lep_phi[good_lep], lep_E[good_lep], lep_trackd0pvunbiased[good_lep], lep_tracksigd0pvunbiased[good_lep], lep_z0[good_lep])""; ); ; # Create new columns with the kinematics of good leptons; df = (; df.Define(""goodlep_pt"", ""lep_pt[good_lep]""); .Define(""goodlep_eta"", ""lep_eta[good_lep]""); .Define(""goodlep_phi"", ""lep_phi[good_lep]""); .Define(""goodlep_E"", ""lep_E[good_lep]""); .Define(""goodlep_type"", ""lep_type[good_lep]""); ); ; # Selec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html:3515,charge,charge,3515,doc/master/df106__HiggsToFourLeptons_8py.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html,1,['charge'],['charge']
Energy Efficiency,"elete();; }. One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete();; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method. The diffrent Add() methods of; TObjArray and its base classes are not allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offer the possibility to allocate and delete memory.; Forgetting to delete allocated memory is a programming error that originate ""leaks"",; i.e. the memory of your process grows and eventually your program crashes.; Even if you *always* delete the allocated memory, the recovered space may not be; efficiently reused. The process knows that there are portions of free memory,; but when you allocate it again, a fresh piece of memory is grabbed.; Your program is free from semantic errors, but the total memory of your process; still grows. Moreover your program's memory is full of ""holes"" which reduce the; efficiency of memory access, this is called ""memory fragmentation"".; Moreover new / delete are expensive operations in terms of CPU time. Without entering into technical details, the TClonesArray allow to ""reuse"" the; same portion of memory for new/delete avoiding memory fragmentation and memory; growth and improving by orders of magnitude the performance. Every time the; memory of the TClonesArray has to be reused, the Clear() method is employed.; To provide its benefits, each TClonesArray must be allocated *once* per process; and disposed of (deleted) *only when not needed any more*.; So a job should see *only one* deletion for each TClonesArray, which should be; ""Cleared()"" in between several times. Keep deleting a TClonesArray is a double; waste. Not only you",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:1858,allocate,allocate,1858,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['allocate'],['allocate']
Energy Efficiency,"elete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection. private:. TList**fContHash table (table of lists); Int_tfEntriesNumber of objects in table; Int_tfRehashLevelAverage collision rate which triggers rehash; Int_tfUsedSlotsNumber of used slots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THashTable(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); Create a THashTable object. Capacity is the initial hashtable capacity; (i.e. number of slots), by default kInitHashTableCapacity = 17, and; rehashlevel is the value at which a rehash will be triggered. I.e. when; the average size of the linked lists at a slot becomes longer than; rehashlevel then the hashtable will be resized and refilled to reduce; the collision rate to about 1. The higher the collision rate, i.e. the; longer the linked lists, the longer lookup will take. If rehashlevel=0; the table will NOT automatically be rehashed. Use Rehash() for manual; rehashing. ~THashTable(); Delete a hashtable. Objects are not deleted unless the THashTable is the; owner (set via SetOwner()). void Add(TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function. void AddAll(const TCollection* col); Add all objects from collection col to this collection.; Implemented for more efficient rehashing. void Clear(Option_t* option = """"); Remove all objects from the table. Does not delete the objects; unless the THashTable is the owner (set via SetOwner()). Int_t Collisions(const char* name) const; Returns the number of collisions for an object with a certain name; (i.e. number of objects in same slot in the hash ta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THashTable.html:8709,reduce,reduce,8709,root/html528/THashTable.html,https://root.cern,https://root.cern/root/html528/THashTable.html,4,['reduce'],['reduce']
Energy Efficiency,"elete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection. private:. TList**fContHash table (table of lists); Int_tfEntriesNumber of objects in table; Int_tfRehashLevelAverage collision rate which triggers rehash; Int_tfUsedSlotsNumber of used slots. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THashTable(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); Create a THashTable object. Capacity is the initial hashtable capacity; (i.e. number of slots), by default kInitHashTableCapacity = 17, and; rehashlevel is the value at which a rehash will be triggered. I.e. when; the average size of the linked lists at a slot becomes longer than; rehashlevel then the hashtable will be resized and refilled to reduce; the collision rate to about 1. The higher the collision rate, i.e. the; longer the linked lists, the longer lookup will take. If rehashlevel=0; the table will NOT automatically be rehashed. Use Rehash() for manual; rehashing. ~THashTable(); Delete a hashtable. Objects are not deleted unless the THashTable is the; owner (set via SetOwner()). void Add(TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function. void AddBefore(const TObject* before, TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function.; If and only if 'before' is in the same bucket as obj, obj is added; in front of 'before' within the bucket's list. void AddAll(const TCollection* col); Add all objects from collection col to this collection.; Implemented for more efficient rehashing. void Clear(Option_t* optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THashTable.html:8917,reduce,reduce,8917,root/html534/THashTable.html,https://root.cern,https://root.cern/root/html534/THashTable.html,2,['reduce'],['reduce']
Energy Efficiency,"elete; };. protected:. Int_tfDegreedegree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Float_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Float_tfFilterCoeffvalue set in the filtered region; TStringTNamed::fNameobject identifier; Int_tfSizelength of transformed data; TStringTNamed::fTitleobject title; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel of filtered or enhanced region; Int_tfXminfirst channel of filtered or enhanced region. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSpectrumTransform(); default constructor. TSpectrumTransform(Int_t size); the constructor creates TSpectrumTransform object. Its size must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrumTransform(); destructor. void Haar(float* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -direction-forward or inverse transform. void Walsh(float* working_space, Int_t num). AUXILIARY FUNCION. This function calculates Walsh transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data. void BitReverse(float* working_space, Int_t num). AUXILIARY FUNCION. This function carries out bir-reverse reordering of data; Function parameters:; -working_space-pointer to vector of processed data; -num-length of processed data. void Fourier(float* working_space, Int_t num, Int_t hartley, Int_t direc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumTransform.html:8529,power,power,8529,root/html528/TSpectrumTransform.html,https://root.cern,https://root.cern/root/html528/TSpectrumTransform.html,6,['power'],['power']
Energy Efficiency,"ell-known array semantics. Overhead per element: none, except possible over sizing of fCont.; 16.8 TClonesArray An Array of Identical Objects; A TClonesArray is an array of identical (clone) objects. The memory for the objects stored in the array is allocated only once in the lifetime of the clones array. All objects must be of the same class. For the rest this class has the same properties as a TObjArray. The internal data structure of a TClonesArray. The figure above shows the internal data structure of a TClonesArray. The class is specially designed for repetitive data analysis tasks, where in a loop many times the same objects, are created and deleted. The only supported way to add objects to a TClonesArray is via the new with placement method. The different Add() methods of TObjArray and its base classes are not supported.; 16.8.1 The Idea Behind TClonesArray; To reduce the very large number of new and delete calls in large loops like this (O(100000) x O(10000) times new/delete):; TObjArray a(10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000); for (int i = 0; i < ev->Ntracks; i++) { // O(10000); a[i] = new TTrack(x,y,z,...);; ...; }; ...; a.Delete();; }; You better use a TClonesArray which reduces the number of new/delete calls to only O(10000):; TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000); for (int i = 0; i < ev->Ntracks; i++) { // O(10000); TTrack *track = (Track*)a.ConstructedAt(i);; track->Set(x,y,z,...);; ...; }; ...; a.Clear(); // Or Clear(""C"") if the track objects must be returned (via Track::Clear) to a default state.; }; Considering that a pair of new/delete calls on average cost about 70 ms, O(109) new/deletes will save about 19 hours. For the other collections, see the class reference guide on the web and the test program $ROOTSYS/test/tcollex.cxx.; 16.9 Template Containers and STL; Some people dislike polymorphic containers because they are not truly “type safe”. In the end, the compiler leaves i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:854562,reduce,reduce,854562,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['reduce'],['reduce']
Energy Efficiency,"ely new techniques for scientific programming. We knew that there is no better way to learn a new programming environment than to use it to write a program that can solve a real problem. After a few weeks, we had our first histogramming package in C++. A few weeks later we had a rewrite of the same package using the, at that time, very new template features of C++. Again, a few weeks later we had another rewrite of the package without templates since we could only compile the version with templates on one single platform using a specific compiler. Finally, after about four months we had a histogramming package that was faster and more efficient than the well-known FORTRAN based HBOOK histogramming package. This gave us enough confidence in the new technologies to decide to continue the development. Thus was born ROOT. Since its first public release at the end of 1995, ROOT has enjoyed an ever-increasing popularity. Currently it is being used in all major High Energy and Nuclear Physics laboratories around the world to monitor, to store and to analyse data. In the other sciences as well as the medical and financial industries, many people are using ROOT. We estimate the current user base to be around several thousand people. In 1997, Eric Raymond analysed in his paper “The Cathedral and the Bazaar” the development method that makes Linux such a success. The essence of that method is: “release early, release often and listen to your customers”. This is precisely how ROOT is being developed. Over the last five years, many of our “customers” became co-developers. Here we would like to thank our main co-developers and contributors:; Masaharu Goto wrote the C++ interpreter CINT that was an essential part of ROOT before ROOT 6. Despite being 8 time zones ahead of us, we have the feeling he has been sitting in the room next door since 1995.; Andrei and Mihaela Gheata (Alice collaboration) are co-authors of the ROOT geometry classes and Virtual Monte-Carlo. They have been wo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:2304,monitor,monitor,2304,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,3,"['Energy', 'monitor']","['Energy', 'monitor']"
Energy Efficiency,"em directly from Python.; 19.1.8.2 Fitting Histograms; Fitting a histogram with a Python function is no more difficult than plotting: instantiate a TF1 with the Python callable and supply that TF1 as a parameter to the Fit() member function of the histogram. After the fit, you can retrieve the fit parameters from the TF1 instance. For example:; from ROOT import TF1, TH1F, TCanvas. class Linear:; def __call__( self, x, par ):; return par[0] + x[0]*par[1]. # create a linear function for fitting; f = TF1('pyf3',Linear(),-1.,1.,2). # create and fill a histogram; h = TH1F('h','test',100,-1.,1.); f2 = TF1('cf2','6.+x*4.5',-1.,1.); h.FillRandom('cf2',10000). # fit the histo with the python 'linear' function; h.Fit(f). # print results; par = f.GetParameters(); print('fit results: const =', par[0], ',pitch =', par[1]); 19.1.9 Working with Trees; Next to making histograms, working with trees is probably the most common part of any analysis. The TTree implementation uses pointers and dedicated buffers to reduce the memory usage and to speed up access. Consequently, mapping TTree functionality to Python is not straightforward, and most of the following features are implemented in ROOT release 4.01/04 and later only, whereas you will need 5.02 if you require all of them.; 19.1.9.1 Accessing an Existing Tree; Let us assume that you have a file containing TTrees, TChains, or TNtuples and want to read the contents for use in your analysis code. This is commonly the case when you work with the result of the reconstruction software of your experiment (e.g. the combined ntuple in ATLAS). The following example code outlines the main steps (you can run it on the result of the tree1.C macro):; from ROOT import TFile. # open the file; myfile = TFile('tree1.root'). # retrieve the ntuple of interest; mychain = myfile.Get('t1'); entries = mychain.GetEntriesFast(). for jentry in xrange(entries):; # get the next tree in the chain and verify; ientry = mychain.LoadTree(jentry); if ientry < 0:; b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1068606,reduce,reduce,1068606,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['reduce'],['reduce']
Energy Efficiency,"ember Functions inherited from TGenCollectionProxy; void CheckFunctions () const;  Check existence of function pointers. ;  ; virtual void DeleteItem (Bool_t force, void *ptr) const;  Call to delete/destruct individual item. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  . Private Member Functions; TEmulatedCollectionProxy & operator= (const TEmulatedCollectionProxy &);  . Friends; class TCollectionProxy;  . Additional Inherited Members;  Static Public Attributes inherited from TVirtualCollectionProxy; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  ;  Protected Types inherited from TGenCollectionProxy; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  ;  Protected Attributes inherited from TGenCollectionProxy; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block fee",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEmulatedCollectionProxy.html:11105,allocate,allocated,11105,doc/master/classTEmulatedCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTEmulatedCollectionProxy.html,1,['allocate'],['allocated']
Energy Efficiency,"embers; class charts. ROOT; » CORE; » BASE; » TQObjSender. class TQObjSender: public TQObject. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. This implementation is provided by; Valeriy Onuchin (onuchin@sirius.ihep.su). Function Members (Methods); public:. TQObjSender(); virtual~TQObjSender(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQObjSender.html:1199,power,powerfull,1199,root/html528/TQObjSender.html,https://root.cern,https://root.cern/root/html528/TQObjSender.html,6,['power'],['powerfull']
Energy Efficiency,"embers; class charts. ROOT; » CORE; » BASE; » TQObjSender. class TQObjSender: public TQObject. This is the ROOT implementation of the Qt object communication; mechanism (see also http://www.troll.no/qt/metaobjects.html). Signals and slots are used for communication between objects.; When an object has changed in some way that might be interesting; for the outside world, it emits a signal to tell whoever is; listening. All slots that are connected to this signal will be; activated (called). It is even possible to connect a signal; directly to another signal (this will emit the second signal; immediately whenever the first is emitted.) There is no limitation; on the number of slots that can be connected to a signal.; The slots will be activated in the order they were connected; to the signal. This mechanism allows objects to be easily reused,; because the object that emits a signal does not need to know; to which objects the signals are connected.; Together, signals and slots make up a powerfull component; programming mechanism. This implementation is provided by; Valeriy Onuchin (onuchin@sirius.ihep.su). Function Members (Methods); public:. virtual~TQObjSender(); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQObjSender.html:1223,power,powerfull,1223,root/html602/TQObjSender.html,https://root.cern,https://root.cern/root/html602/TQObjSender.html,4,['power'],['powerfull']
Energy Efficiency,"ement-change notification.; Stamp all tracks as requiring display-list regeneration.; Virtual from TEveElement. void InitTrack(const TEveVectorD& v, Int_t charge); Initialize internal data-members for given particle parameters. void InitTrack(const TEveVectorF& v, Int_t charge); TEveVectorF wrapper. void ResetTrack(); Reset cache holding particle trajectory. Bool_t GoToVertex(TEveVectorD& v, TEveVectorD& p); Propagate particle with momentum p to vertex v. Bool_t GoToVertex(TEveVectorF& v, TEveVectorF& p); TEveVectorF wrapper. void GoToBounds(TEveVectorD& p); Propagate particle to bounds.; Return TRUE if hit bounds. void GoToBounds(TEveVectorF& p); TEveVectorF wrapper. void Update(const TEveVector4D& v, const TEveVectorD& p, Bool_t full_update = kFALSE, Bool_t enforce_max_step = kFALSE); Update helix / B-field projection state. void Step(const TEveVector4D& v, const TEveVectorD& p, TEveVector4D& vOut, TEveVectorD& pOut); Wrapper to step helix. void LoopToBounds(TEveVectorD& p); Propagate charged particle with momentum p to bounds.; It is expected that Update() with full-update was called before. Bool_t LoopToVertex(TEveVectorD& v, TEveVectorD& p); Propagate charged particle with momentum p to vertex v.; It is expected that Update() with full-update was called before. Bool_t LineToVertex(TEveVectorD& v); Propagate neutral particle to vertex v. void LineToBounds(TEveVectorD& p); Propagatate neutral particle with momentum p to bounds. Bool_t HelixIntersectPlane(const TEveVectorD& p, const TEveVectorD& point, const TEveVectorD& normal, TEveVectorD& itsect); Intersect helix with a plane. Current position and argument p define; the helix. Bool_t LineIntersectPlane(const TEveVectorD& p, const TEveVectorD& point, const TEveVectorD& normal, TEveVectorD& itsect); Intersect line with a plane. Current position and argument p define; the line. Bool_t IntersectPlane(const TEveVectorD& p, const TEveVectorD& point, const TEveVectorD& normal, TEveVectorD& itsect); Find intersection of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTrackPropagator.html:26703,charge,charged,26703,root/html530/TEveTrackPropagator.html,https://root.cern,https://root.cern/root/html530/TEveTrackPropagator.html,3,['charge'],['charged']
Energy Efficiency,"ement::fDestroyOnZeroRefCntAuto-destruct when ref-count reaches zero.; Char_tTEveElement::fDestructing!; Bool_tTEveShape::fDrawFramedraw frame; Color_tTEveShape::fFillColorfill color of polygons; Bool_tTEveShape::fHighlightFramehighlight frame / all shape; Bool_tTEveElement::fHighlighted!; Short_tTEveElement::fImpliedHighlighted!; Short_tTEveElement::fImpliedSelected!; set<TEveElement::TEveListTreeInfo,less<TEveElement::TEveListTreeInfo>,allocator<TEveElement::TEveListTreeInfo> >TEveElement::fItems! Set of list-tree-items.; Color_tTEveShape::fLineColoroutline color of polygons; Float_tTEveShape::fLineWidthoutline width of polygons; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; TEveProjectionManager*TEveProjected::fManagermanager; Bool_tTEveShape::fMiniFramedraw minimal frame; Int_tfNPntsnumber of reduced and projected points; TStringTNamed::fNameobject identifier; Int_tTEveElement::fNumChildren!; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; list<TEveElement*>TEveElement::fParentsList of parents.; Bool_tTEveElement::fPickable; TEveVector*fPntsreduced and projected points; list<TEvePolygonSetProjected::Polygon_t,allocator<TEvePolygonSetProjected::Polygon_t> >fPolspolygons; list<TEvePolygonSetProjected::Polygon_t,allocator<TEvePolygonSetProjected::Polygon_t> >fPolsBPpolygons build from TBuffer3D polygons; list<TEvePolygonSetProjected::Polygon_t,allocator<TEvePolygonSetProjected::Polygon_t> >fPolsBSpolygons build from TBuffer3D segments; TEveProjectable*TEveProjected::fProjectablelink to original object; list<TEveProjected*>TEveProjectable::fProjectedListreferences to projected instances.; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; TRefTEveElement::fSourceExternal objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePolygonSetProjected.html:21519,reduce,reduced,21519,root/html528/TEvePolygonSetProjected.html,https://root.cern,https://root.cern/root/html528/TEvePolygonSetProjected.html,6,['reduce'],['reduced']
Energy Efficiency,"ement::fUserData! Externally assigned and controlled user data.; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element. private:. TBuffer3D*fBuffbuffer of projectable object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEvePolygonSetProjected(const char* n = ""TEvePolygonSetProjected"", const char* t = """"); Constructor. ~TEvePolygonSetProjected(); Destructor. void ComputeBBox(); Override of virtual method from TAttBBox. void SetProjection(TEveProjectionManager* mng, TEveProjectable* model); This is virtual method from base-class TEveProjected. void SetDepthLocal(Float_t d); Set depth (z-coordinate) of the projected points. void UpdateProjection(); This is virtual method from base-class TEveProjected. Bool_t IsFirstIdxHead(Int_t s0, Int_t s1); Compare the two segments and check if the first index of first segment is starting. Int_t* ProjectAndReducePoints(); Project and reduce buffer points. Float_t AddPolygon(list<Int_t,std::allocator<Int_t> >& pp, list<TEvePolygonSetProjected::Polygon_t,allocator<TEvePolygonSetProjected::Polygon_t> >& p); Check if polygon has dimensions above TEveProjection::fgEps and add it; to a list if it is not a duplicate. Float_t MakePolygonsFromBP(Int_t* idxMap); Build polygons from list of buffer polygons. Float_t MakePolygonsFromBS(Int_t* idxMap); Build polygons from the set of buffer segments.; First creates a segment pool according to reduced and projected points; and then build polygons from the pool. void ProjectBuffer3D(); Project current buffer. Float_t PolygonSurfaceXY(const TEvePolygonSetProjected::Polygon_t& poly) const; Calculate XY surface of a polygon. void DumpPolys() const; Dump information about built polygons. void DumpBuffer3D(); Dump information about currenty projected buffer. TEvePolygonSetProjected(const TEvePolygonSetProjected& ). TEvePolygonSetProjected& operator=(const TEvePolygonSetProje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePolygonSetProjected.html:23758,reduce,reduce,23758,root/html528/TEvePolygonSetProjected.html,https://root.cern,https://root.cern/root/html528/TEvePolygonSetProjected.html,6,['reduce'],['reduce']
Energy Efficiency,"ementation of RooSharedProperties that stores the properties of a RooRealVar that are shared among clones ;  CRooRecursiveFractionClass RooRecursiveFraction is a RooAbsReal implementation that calculates the plain fraction of sum of RooAddPdf components from a set of recursive fractions: for a given set of input fractions a_i it returns a_0 * Prod_i (1 - a_i) ;  CRooRefArray;  CRooRefCountListA RooRefCountList is a RooLinkedList that keeps a reference counter with each added node ;  CRooResolutionModel;  CRooScaledFuncLightweight RooAbsFunction implementation that applies a constant scale factor to another RooAbsFunc ;  CRooSecondMomentRooSecondMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  CRooSegmentedIntegrator1DRooSegmentedIntegrator1D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSegmentedIntegrator2DRooSegmentedIntegrator2D implements an adaptive one-dimensional numerical integration algorithm ;  CRooSentinelRooSentinel is a special purposes singleton class that terminates all other RooFit singleton services when the process exists ;  CRooSetPairRooSetPair is a utility class that stores a pair of RooArgSets ;  CRooSetProxyRooSetProxy is the concrete proxy for RooArgSet objects ;  CRooSharedPropertiesClass RooSharedProperties is the base class for shared properties that can be stored in RooSharedPropertiesList ;  CRooSharedPropertiesListClass RooSharedPropertiesList maintains the properties of RooRealVars and RooCategories that are clones of each other ;  CRooSimGenContextRooSimGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the component pdfs ;  CRooSimPdfBuilder;  CRooSimSplitGenContextRooSimSplitGenContext is an efficient implementation of the generator context specific for RooSimultaneous PDFs when generating more than one of the compon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:104012,adapt,adaptive,104012,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,5,['adapt'],['adaptive']
Energy Efficiency,"ementing generic options for a numerical algorithm Just store the options in a map of string-value pairs ;  CGeneralLinearFunctionDerivationAuxiliar class to bypass the (provisional) lack of vectorization in TFormula::EvalPar ;  CGeneralLinearFunctionDerivation< double >;  CGeneticMinimizerGeneticMinimizer ;  CGeneticMinimizerParameters;  CGenVector_exception;  CGlobalCoordinateSystemTagTag for identifying vectors based on a global coordinate system ;  CGoFTest;  CGradFunctorGradFunctor class for Multidimensional gradient functions ;  CGradFunctor1DGradFunctor1D class for one-dimensional gradient functions ;  CGSL1DMinimizerWrapperWrapper class for gsl_min_fminimizer structure ;  CGSLChebSeriesWrapper class for C struct gsl_cheb_series ;  CGSLDerivatorClass for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:37733,adapt,adapting,37733,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,4,['adapt'],['adapting']
Energy Efficiency,"ement KOrdStat (Size n, const Element *a, Size k, Size *work=0);  Returns k_th order statistic of the array a of size n (k_th smallest element out of n elements). ;  ; constexpr Double_t KUncertainty ();  Boltzmann's constant uncertainty. ;  ; Double_t Landau (Double_t x, Double_t mpv=0, Double_t sigma=1, Bool_t norm=kFALSE);  The LANDAU function. ;  ; Double_t LandauI (Double_t x);  Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ;  ; Double_t LaplaceDist (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t LaplaceDistI (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the cumulative distribution function (lower tail integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:11859,power,power,11859,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['power'],['power']
Energy Efficiency,"emory and directory structure itself.; 641/// if option is ""slow"", iterate through the containers in a way to can handle; 642/// 'external' modification (induced by recursions); 643/// if option is ""nodelete"", write the TDirectory but do not delete the contained; 644/// objects.; 645void TDirectory::Close(Option_t *option); 646{; 647 if (!fList) {; 648 return;; 649 }; 650 ; 651 // Save the directory key list and header; 652 Save();; 653 ; 654 Bool_t nodelete = option ? (!strcmp(option, ""nodelete"") ? kTRUE : kFALSE) : kFALSE;; 655 ; 656 if (!nodelete) {; 657 Bool_t slow = option ? (!strcmp(option, ""slow"") ? kTRUE : kFALSE) : kFALSE;; 658 if (!slow) {; 659 // Check if it is wise to use the fast deletion path.; 660 TObjLink *lnk = fList->FirstLink();; 661 while (lnk) {; 662 if (lnk->GetObject()->IsA() == TDirectory::Class()) {; 663 slow = kTRUE;; 664 break;; 665 }; 666 lnk = lnk->Next();; 667 }; 668 }; 669 ; 670 // Delete objects from directory list, this in turn, recursively closes all; 671 // sub-directories (that were allocated on the heap); 672 // if this dir contains subdirs, we must use the slow option for Delete!; 673 // we must avoid ""slow"" as much as possible, in particular Delete(""slow""); 674 // with a large number of objects (eg >10^5) would take for ever.; 675 if (slow) fList->Delete(""slow"");; 676 else fList->Delete();; 677 }; 678 ; 679 TDirectory::CleanTargets();; 680}; 681 ; 682////////////////////////////////////////////////////////////////////////////////; 683/// Delete all objects from memory.; 684 ; 685void TDirectory::DeleteAll(Option_t *); 686{; 687 fList->Delete(""slow"");; 688}; 689 ; 690////////////////////////////////////////////////////////////////////////////////; 691/// Delete Objects or/and keys in a directory.; 692///; 693/// - namecycle has the format name;cycle; 694/// - namecycle = """" same as namecycle =""T*""; 695/// - name = * means all; 696/// - cycle = * means all cycles (memory and keys); 697/// - cycle = """" or cycle = 9999 ==> apply to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:23322,allocate,allocated,23322,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"emoved in ROOT 6.36. Please write your own plotting code inspired by the hf001 tutorial. ; Member RooStats::HistFactory::FormatFrameForLikelihood (RooPlot *frame, std::string xTitle=std::string(""#sigma / #sigma_{SM}""), std::string yTitle=std::string(""-log likelihood"")) R__DEPRECATED(6; Will be removed in ROOT 6.36. Please write your own plotting code inspired by the hf001 tutorial. ; Member RooStats::HistFactory::Measurement::SetExportOnly (bool ExportOnly) R__DEPRECATED(6; Will be removed in ROOT 6.36. ExportOnly() == true is the default since ROOT 6.34 and it can't be disabled anymore in 6.36. ; Member RooStats::MarkovChain::GetAsDataHist (const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const R__DEPRECATED(6; Will be removed in ROOT 6.36. Please implement this functionality by calling RooAbsData::reduce on the Markov Chain's RooDataSet* (obtained using MarkovChain::GetAsConstDataSet), and then obtaining its binned clone. ; Will be removed in ROOT 6.36. . Member RooStats::MarkovChain::GetAsDataSet (const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const R__DEPRECATED(6; Will be removed in ROOT 6.36. ; Will be removed in ROOT 6.36. Please implement this functionality by calling RooAbsData::reduce on the Markov Chain's RooDataSet* (obtained using MarkovChain::GetAsConstDataSet) . Member RooTemplateProxy< T >::lvptr (const LValue_t *) const; This function is unnecessary if the template parameter is RooAbsRealLValue (+ derived types) or RooAbsCategoryLValue (+derived types), as arg() will always return the correct type. ; Member RooTemplateProxy< T >::R__DEPRECATED (6, 36, ""Use RooTemplateProxy(const char*, const char*, RooAbsArg*, bool, bool) and transfer the ow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/deprecated.html:4750,reduce,reduce,4750,doc/master/deprecated.html,https://root.cern,https://root.cern/doc/master/deprecated.html,1,['reduce'],['reduce']
Energy Efficiency,"empty (this is a protected method used mainly by TH1Merger ) ;  ; int LoggedInconsistency (const char *name, const TH1 *h1, const TH1 *h2, bool useMerge=false) const;  ; virtual Double_t RetrieveBinContent (Int_t bin) const;  Raw retrieval of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ; virtual void SavePrimitiveHelp (std::ostream &out, const char *hname, Option_t *option="""");  Helper function for the SavePrimitive functions from TH1 or classes derived from TH1, eg TProfile, TProfile2D. ;  ; virtual void UpdateBinContent (Int_t bin, Double_t content);  Raw update of bin content on internal data structure see convention for numbering bins in TH1::GetBin. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static Int_t AutoP2GetBins (Int_t n);  Auxiliary function to get the next power of 2 integer value larger then n. ;  ; static Double_t AutoP2GetPower2 (Double_t x, Bool_t next=kTRUE);  Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ;  ; static bool CheckAxisLimits (const TAxis *a1, const TAxis *a2);  Check that the axis limits of the histograms are the same. ;  ; static bool CheckBinLabels (const TAxis *a1, const TAxis *a2);  Check that axis have same labels. ;  ; static bool CheckBinLimits (const TAxis *a1, const TAxis *a2);  Check bin limits. ;  ; static int CheckConsistency (const TH1 *h1, const TH1 *h2);  Check histogram compatibility. ;  ; static bool CheckConsistentSubAxes (const TAxis *a1, Int_t firstBin1, Int_t lastBin1, const TAxis *a2, Int_t firstBin2=0, Int_t lastBin2=0);  Check that two sub axis are the same. ;  ; static bool CheckEqualAxes (const TAxis *a1, const TAxis *a2);  Check that the axis are the same. ;  ; static Bool_t RecomputeAxisLimits (TAxis &destAxis, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:65955,power,power,65955,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['power'],['power']
Energy Efficiency,"en ""NEW"", ""CREATE"" or ""RECREATE"" are used). ; Definition at line 1172 of file TMapFile.cxx. ◆ CreateSemaphore(). void TMapFile::CreateSemaphore ; (; Int_t ; pid = 0). protected . Create semaphore used for synchronizing access to shared memory. ; Definition at line 847 of file TMapFile.cxx. ◆ DeclFileName(). static const char * TMapFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 118 of file TMapFile.h. ◆ DeleteSemaphore(). void TMapFile::DeleteSemaphore ; (; ). protected . Delete the semaphore. ; Definition at line 877 of file TMapFile.cxx. ◆ FindShadowMapFile(). TMapFile * TMapFile::FindShadowMapFile ; (; ). protected . Returns shadow map file. ; Definition at line 1024 of file TMapFile.cxx. ◆ Get(). TObject * TMapFile::Get ; (; const char * ; name, . TObject * ; delObj = nullptr . ). Return pointer to object retrieved from shared memory. ; The object must be deleted after use. If delObj is a pointer to a previously allocated object it will be deleted. Returns 0 in case object with the given name does not exist. ; Definition at line 800 of file TMapFile.cxx. ◆ GetBaseAddr(). void * TMapFile::GetBaseAddr ; (; ); const. inline . Definition at line 89 of file TMapFile.h. ◆ GetBestBuffer(). Int_t TMapFile::GetBestBuffer ; (; ). protected . Return the best buffer size for objects in this file. ; The best buffer size is estimated based on the current mean value and standard deviation of all objects written so far to this file. Returns mean value + one standard deviation. ; Definition at line 1142 of file TMapFile.cxx. ◆ GetBreakval(). void * TMapFile::GetBreakval ; (; ); const. Return the current location in the memory region for this malloc heap which represents the end of memory in use. ; Returns 0 if map file was closed. ; Definition at line 1154 of file TMapFile.cxx. ◆ GetDirectory(). TDirectory * TMapFile::GetDirectory ; (; ); const. inline . Definition at line 91 of file TMapFile.h. ◆ GetFd(). I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMapFile.html:21992,allocate,allocated,21992,doc/master/classTMapFile.html,https://root.cern,https://root.cern/doc/master/classTMapFile.html,1,['allocate'],['allocated']
Energy Efficiency,"en invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this list of TExecs. In the code (interpreted or compiled) executed; by the TExec referenced command, one can call the pad service functions; such as TPad::GetEvent, TPad::GetEventX, TPad::GetEventY to find; which type of event and the X,Y position of the mouse.; By default, the list of TExecs is executed. This can be disabled; via the canvas menu ""Option"".; See $ROOTSYS/tutorials/hist/exec2.C for an example.; Root > TFile f(""hsimple.root"");; Root > hpxpy.Draw();; Root > c1.AddExec(""ex2"","".x exec2.C"");; When moving the mouse in the canvas, a second canvas shows the; projection along X of the bin corresponding to the Y position; of the mouse. The resulting histogram is fitted with a gaussian.; A ""dynamic"" line shows the current bin position in Y.; This more elaborated example can be used as a starting point; to develop more powerful interactive applications exploiting CINT; as a development engine. The 3 options above can be combined. Function Members (Methods); public:. TExec(); TExec(const TExec& text); TExec(const char* name, const char* command); virtual~TExec(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TExec.html:3027,power,powerful,3027,root/html528/TExec.html,https://root.cern,https://root.cern/root/html528/TExec.html,6,['power'],['powerful']
Energy Efficiency,"en invoking TPad::AddExec.; Each pad contains a TList of TExecs (0, 1 or more). When a mouse event; (motion, click, etc) happens, the pad object executes sequentially; this list of TExecs. In the code (interpreted or compiled) executed; by the TExec referenced command, one can call the pad service functions; such as TPad::GetEvent, TPad::GetEventX, TPad::GetEventY to find; which type of event and the X,Y position of the mouse.; By default, the list of TExecs is executed. This can be disabled; via the canvas menu ""Option"".; See $ROOTSYS/tutorials/hist/exec2.C for an example.; Root > TFile f(""hsimple.root"");; Root > hpxpy.Draw();; Root > c1.AddExec(""ex2"","".x exec2.C"");; When moving the mouse in the canvas, a second canvas shows the; projection along X of the bin corresponding to the Y position; of the mouse. The resulting histogram is fitted with a gaussian.; A ""dynamic"" line shows the current bin position in Y.; This more elaborated example can be used as a starting point; to develop more powerful interactive applications exploiting CINT; as a development engine. The 3 options above can be combined. Function Members (Methods); public:. virtual~TExec(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TExec.html:3027,power,powerful,3027,root/html602/TExec.html,https://root.cern,https://root.cern/root/html602/TExec.html,4,['power'],['powerful']
Energy Efficiency,"en only the basket header must be read/written. ; Definition at line 66 of file TBasket.h. ◆ fIOBits. UChar_t TBasket::fIOBits {0}. protected . !IO feature flags. Serialized in custom portion of streamer to avoid forward compat issues unless needed. ; Definition at line 67 of file TBasket.h. ◆ fLast. Int_t TBasket::fLast {0}. protected . Pointer to last used byte in basket. ; Definition at line 65 of file TBasket.h. ◆ fLastWriteBufferSize. Int_t TBasket::fLastWriteBufferSize[3] = {0,0,0}. protected . ! Size of the buffer last three buffers we wrote it to disk ; Definition at line 75 of file TBasket.h. ◆ fNevBuf. Int_t TBasket::fNevBuf {0}. protected . Number of entries in basket. ; Definition at line 64 of file TBasket.h. ◆ fNevBufSize. Int_t TBasket::fNevBufSize {0}. protected . Length in Int_t of fEntryOffset OR fixed length of each entry if fEntryOffset is null! ; Definition at line 63 of file TBasket.h. ◆ fNextBufferSizeRecord. UChar_t TBasket::fNextBufferSizeRecord {0}. protected . ! Index into fLastWriteBufferSize of the last buffer written to disk ; Definition at line 77 of file TBasket.h. ◆ fOwnsCompressedBuffer. bool TBasket::fOwnsCompressedBuffer {false}. protected . ! Whether or not we own the compressed buffer. ; Definition at line 68 of file TBasket.h. ◆ fReadEntryOffset. bool TBasket::fReadEntryOffset {false}. protected . !Set to true if offset array was read from a file. ; Definition at line 69 of file TBasket.h. ◆ fResetAllocation. bool TBasket::fResetAllocation {false}. protected . ! True if last reset re-allocated the memory ; Definition at line 76 of file TBasket.h. ◆ kIOBitCount. constexpr int TBasket::kIOBitCount = 1. staticconstexpr . Definition at line 111 of file TBasket.h. Libraries for TBasket:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBasket.h; tree/tree/src/TBasket.cxx. TBasket. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBasket.html:33137,allocate,allocated,33137,doc/master/classTBasket.html,https://root.cern,https://root.cern/doc/master/classTBasket.html,1,['allocate'],['allocated']
Energy Efficiency,"enFunction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDim.html:2681,Adapt,Adaptive,2681,root/html602/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDim.html,2,['Adapt'],['Adaptive']
Energy Efficiency,"ence interval are returned in the array ci cl is the desired confidence interval value norm is a flag to control if the intervals need to be normalized to the chi2/ndf value The intervals can be corrected optionally using the chi2/ndf value of the fit if a chi2 fit is performed. This has changed since ROOT 6.14, before the interval were corrected by default. ; Definition at line 506 of file FitResult.cxx. ◆ GetCorrelationMatrix(). template<class Matrix > . void ROOT::Fit::FitResult::GetCorrelationMatrix ; (; Matrix & ; mat); const. inline . fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 249 of file FitResult.h. ◆ GetCovarianceMatrix(). template<class Matrix > . void ROOT::Fit::FitResult::GetCovarianceMatrix ; (; Matrix & ; mat); const. inline . fill covariance matrix elements using a generic matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 235 of file FitResult.h. ◆ GetErrors(). const double * ROOT::Fit::FitResult::GetErrors ; (; ); const. inline . parameter errors (return const pointer) ; Definition at line 164 of file FitResult.h. ◆ GetParameterName(). std::string ROOT::Fit::FitResult::GetParameterName ; (; unsigned int ; ipar); const. inline . get name of parameter (deprecated) ; Definition at line 327 of file FitResult.h. ◆ GetParams(). const double * ROOT::Fit::FitResult::GetParams ; (; ); const. inline . parameter values (return const pointer) ; Definition at line 169 of file FitResult.h. ◆ GlobalCC(). double ROOT::Fit::FitResult::GlobalCC ; (; unsigned int ; i); const. inline . parameter global correlation coefficient ; Definition at line 209 of file FitResult.h. ◆ HasMinosError(). bool ROOT::Fit::FitResult::HasMinosError ; (; unsigned int ; i); const. query if parameter i has the Minos error ; Definition at line 325 of file FitResult.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:16612,allocate,allocates,16612,doc/master/classROOT_1_1Fit_1_1FitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html,1,['allocate'],['allocates']
Energy Efficiency,"ence. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const char *cut) const;  Create a subset of the data set by applying the given cut on the data points. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooArgSet &varSubset, const char *cut=nullptr) const;  Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooArgSet &varSubset, const RooFormulaVar &cutVar) const;  Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create a reduced copy of this dataset. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooFormulaVar &cutVar) const;  Create a subset of the data set by applying the given cut on the data points. ;  ; virtual void reset ();  ; void resetBuffers ();  ; RooRealVar * rmsVar (const RooRealVar &var, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  Create a RooRealVar containing the RMS of observable 'var' in this dataset. ;  ; void setDirtyProp (bool flag);  Control propagation of dirty flags from observables in dataset. ;  ; void setGlobalObservables (RooArgSet const &globalObservables);  Sets the global observables stored in this data. ;  ; double sigma (const RooRealVar &var, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; double skewness (const RooRealVar &var, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; virtual RooFit::OwningPtr< TList > split (const RooAbsCategory &splitCat, bool createEmptyDataSets=false) const;  Split the dataset into subsets based on states of a categorical variable in this dataset. ;  ; virtual RooFit::OwningPtr< ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:16075,reduce,reduce,16075,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['reduce'],['reduce']
Energy Efficiency,"ence. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const char *cut) const;  Create a subset of the data set by applying the given cut on the data points. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooArgSet &varSubset, const char *cut=nullptr) const;  Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooArgSet &varSubset, const RooFormulaVar &cutVar) const;  Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create a reduced copy of this dataset. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooFormulaVar &cutVar) const;  Create a subset of the data set by applying the given cut on the data points. ;  ; virtual void reset ();  ; void resetBuffers ();  ; RooRealVar * rmsVar (const RooRealVar &var, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  Create a RooRealVar containing the RMS of observable 'var' in this dataset. ;  ; void setDirtyProp (bool flag);  Control propagation of dirty flags from observables in dataset. ;  ; void setGlobalObservables (RooArgSet const &globalObservables);  Sets the global observables stored in this data. ;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; double sigma (const RooRealVar &var, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; double skewness (const RooRealVar &var, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; virtual RooFit::OwningPtr< TList > split",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeData.html:8419,reduce,reduce,8419,doc/master/classRooTreeData.html,https://root.cern,https://root.cern/doc/master/classRooTreeData.html,2,['reduce'],['reduce']
Energy Efficiency,"ence. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const char *cut) const;  Create a subset of the data set by applying the given cut on the data points. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooArgSet &varSubset, const char *cut=nullptr) const;  Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooArgSet &varSubset, const RooFormulaVar &cutVar) const;  Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create a reduced copy of this dataset. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooFormulaVar &cutVar) const;  Create a subset of the data set by applying the given cut on the data points. ;  ; void resetBuffers ();  ; RooRealVar * rmsVar (const RooRealVar &var, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  Create a RooRealVar containing the RMS of observable 'var' in this dataset. ;  ; void setDirtyProp (bool flag);  Control propagation of dirty flags from observables in dataset. ;  ; void setGlobalObservables (RooArgSet const &globalObservables);  Sets the global observables stored in this data. ;  ; double sigma (const RooRealVar &var, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; double skewness (const RooRealVar &var, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  ; virtual RooFit::OwningPtr< TList > split (const RooAbsCategory &splitCat, bool createEmptyDataSets=false) const;  Split the dataset into subsets based on states of a categorical variable in this dataset. ;  ; virtual RooFit::OwningPtr< TList > split (const RooSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:19245,reduce,reduce,19245,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['reduce'],['reduce']
Energy Efficiency,"enceMath » Physics Vectors. ; template<class CoordSystem>; class ROOT::Math::LorentzVector< CoordSystem >Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. ; The metric used for the LorentzVector is (-,-,-,+). In the case of LorentzVector we don't distinguish the concepts of points and displacement vectors as in the 3D case, since the main use case for 4D Vectors is to describe the kinematics of relativistic particles. A LorentzVector behaves like a DisplacementVector in 4D. The Minkowski components could be viewed as v and t, or for kinematic 4-vectors, as p and E.; ROOT provides specialisations and aliases to them of the ROOT::Math::LorentzVector template:; ROOT::Math::PtEtaPhiMVector based on pt (rho),eta,phi and M (t) coordinates in double precision; ROOT::Math::PtEtaPhiEVector based on pt (rho),eta,phi and E (t) coordinates in double precision; ROOT::Math::PxPyPzMVector based on px,py,pz and M (mass) coordinates in double precision; ROOT::Math::PxPyPzEVector based on px,py,pz and E (energy) coordinates in double precision; ROOT::Math::XYZTVector based on x,y,z,t coordinates (cartesian) in double precision (same as PxPyPzEVector); ROOT::Math::XYZTVectorF based on x,y,z,t coordinates (cartesian) in float precision (same as PxPyPzEVector but float). See alsoOverview of the physics vector library ; Definition at line 59 of file LorentzVector.h. Public Types; typedef DisplacementVector3D< Cartesian3D< Scalar > > BetaVector;  ; typedef CoordSystem CoordinateType;  ; typedef CoordSystem::Scalar Scalar;  . Public Member Functions;  LorentzVector ();  default constructor of an empty vector (Px = Py = Pz = E = 0 ) ;  ; template<class ForeignLorentzVector , typename = decltype(std::declval<ForeignLorentzVector>().x() + std::declval<ForeignLorentzVector>().y() + std::declval<ForeignLorentzVector>().z() + std::declval<ForeignLorentzVector>().t())> ; constexpr LorentzVector (const ForeignLorentzVec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:1438,energy,energy,1438,doc/master/classROOT_1_1Math_1_1LorentzVector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html,1,['energy'],['energy']
Energy Efficiency,"eneric Python callable, the following can performed:; def func(x: numpy.ndarray, pars: numpy.ndarray) -> float:; return pars[0] * x[0] * x[0] + x[1] * pars[0]; ; my_func = ROOT.TF1(""my_func"", func, -10, 10, npar=2, ndim=2); Second, after performing the initialisation with a Python functor, the TF1 instance can be evaluated using the Pythonized TF1::EvalPar function. The pythonization allows passing in 1D(single set of x variables) or 2D(a dataset) NumPy arrays.; The following example shows how we can create a TF1 instance with a Python function and evaluate it on a dataset:; import ROOT; import math; import numpy as np; ; def pyf_tf1_coulomb(x, p):; return p[1] * x[0] * x[1] / (p[0]**2) * math.exp(-p[2] / p[0]); ; rtf1_coulomb = ROOT.TF1(""my_func"", pyf_tf1_coulomb, -10, 10, ndims = 2, npars = 3); ; # x dataset: 5 pairs of particle charges; x = np.array([; [1.0, 10, 2.0],; [1.5, 10, 2.5],; [2.0, 10, 3.0],; [2.5, 10, 3.5],; [3.0, 10, 4.0]; ]); ; params = np.array([; [1.0], # Distance between charges r; [8.99e9], # Coulomb constant k (in N·m²/C²); [0.1] # Additional factor for modulation; ]); ; # Slice to avoid the dummy column of 10's; res = rtf1_coulomb.EvalPar(x[:, ::2], params). Definition at line 233 of file TF1.h. Classes; struct  TF1FunctorPointer;  ; struct  TF1FunctorPointerImpl;  . Public Types; enum class  EAddToList { kDefault; , kAdd; , kNo; };  Add to list behavior. More...;  ; enum  EStatusBits { kNotGlobal = (1ULL << ( 10 )); , kNotDraw = (1ULL << ( 9 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:9222,charge,charges,9222,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,1,['charge'],['charges']
Energy Efficiency,"enna; 3465 case 99:; 3466 {; 3467 Double_t red[9] = { 99./255., 112./255., 148./255., 165./255., 179./255., 182./255., 183./255., 183./255., 208./255.};; 3468 Double_t green[9] = { 39./255., 40./255., 57./255., 79./255., 104./255., 127./255., 148./255., 161./255., 198./255.};; 3469 Double_t blue[9] = { 15./255., 16./255., 18./255., 33./255., 51./255., 79./255., 103./255., 129./255., 177./255.};; 3470 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3471 }; 3472 break;; 3473 ; 3474 // Solar; 3475 case 100:; 3476 {; 3477 Double_t red[9] = { 99./255., 116./255., 154./255., 174./255., 200./255., 196./255., 201./255., 201./255., 230./255.};; 3478 Double_t green[9] = { 0./255., 0./255., 8./255., 32./255., 58./255., 83./255., 119./255., 136./255., 173./255.};; 3479 Double_t blue[9] = { 5./255., 6./255., 7./255., 9./255., 9./255., 14./255., 17./255., 19./255., 24./255.};; 3480 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3481 }; 3482 break;; 3483 ; 3484 // South West; 3485 case 101:; 3486 {; 3487 Double_t red[9] = { 82./255., 106./255., 126./255., 141./255., 155./255., 163./255., 142./255., 107./255., 66./255.};; 3488 Double_t green[9] = { 62./255., 44./255., 69./255., 107./255., 135./255., 152./255., 149./255., 132./255., 119./255.};; 3489 Double_t blue[9] = { 39./255., 25./255., 31./255., 60./255., 73./255., 68./255., 49./255., 72./255., 188./255.};; 3490 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3491 }; 3492 break;; 3493 ; 3494 // Starry Night; 3495 case 102:; 3496 {; 3497 Double_t red[9] = { 18./255., 29./255., 44./255., 72./255., 116./255., 158./255., 184./255., 208./255., 221./255.};; 3498 Double_t green[9] = { 27./255., 46./255., 71./255., 105./255., 146./255., 177./255., 189./255., 190./255., 183./255.};; 3499 Double_t blue[9] = { 39./255., 55./255., 80./255., 108./255., 130./255., 133./255., 124./255., 100./255., 76./255.};; 3500 Idx = TColor::CreateGradientCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:137557,green,green,137557,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"enough to do. gStyle->SetPalette(100, MyPalette);. As only one palette is active, one need to use TExec to be able to; display plots using different palettes on the same pad.; The following macro illustrate this feature. Picture; Source. //Draw color plots using different color palettes.; //Author:: Olivier Couet. #include ""TStyle.h""; #include ""TColor.h""; #include ""TF2.h""; #include ""TExec.h""; #include ""TCanvas.h"". ; void Pal1(); {; static Int_t colors[50];; static Bool_t initialized = kFALSE;. Double_t Red[3] = { 1.00, 0.00, 0.00};; Double_t Green[3] = { 0.00, 1.00, 0.00};; Double_t Blue[3] = { 1.00, 0.00, 1.00};; Double_t Length[3] = { 0.00, 0.50, 1.00 };. if(!initialized){; Int_t FI = TColor::CreateGradientColorTable(3,Length,Red,Green,Blue,50);; for (int i=0; i<50; i++) colors[i] = FI+i;; initialized = kTRUE;; return;; }; gStyle->SetPalette(50,colors);; }. void Pal2(); {; static Int_t colors[50];; static Bool_t initialized = kFALSE;. Double_t Red[3] = { 1.00, 0.50, 0.00};; Double_t Green[3] = { 0.50, 0.00, 1.00};; Double_t Blue[3] = { 1.00, 0.00, 0.50};; Double_t Length[3] = { 0.00, 0.50, 1.00 };. if(!initialized){; Int_t FI = TColor::CreateGradientColorTable(3,Length,Red,Green,Blue,50);; for (int i=0; i<50; i++) colors[i] = FI+i;; initialized = kTRUE;; return;; }; gStyle->SetPalette(50,colors);; }. TCanvas* multipalette() {; TCanvas *c3 = new TCanvas(""c3"",""C3"",0,0,600,400);; c3->Divide(2,1);; TF2 *f3 = new TF2(""f3"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);. c3->cd(1);; f3->Draw(""surf1""); ; TExec *ex1 = new TExec(""ex1"",""Pal1();"");; ex1->Draw();; f3->Draw(""surf1 same""); . c3->cd(2);; f3->Draw(""surf1""); ; TExec *ex2 = new TExec(""ex2"",""Pal2();"");; ex2->Draw();; f3->Draw(""surf1 same""); . return c3;; } . Function Members (Methods); public:. TColor(); TColor(const TColor& color); TColor(Int_t color, Float_t r, Float_t g, Float_t b, const char* name = """", Float_t a = 1); virtual~TColor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TColor.html:6900,Green,Green,6900,root/html532/TColor.html,https://root.cern,https://root.cern/root/html532/TColor.html,1,['Green'],['Green']
Energy Efficiency,"enough to do. gStyle->SetPalette(100, MyPalette);. As only one palette is active, one need to use TExec to be able to; display plots using different palettes on the same pad.; The following macro illustrate this feature. Picture; Source. //Draw color plots using different color palettes.; //Author:: Olivier Couet. #include ""TStyle.h""; #include ""TColor.h""; #include ""TF2.h""; #include ""TExec.h""; #include ""TCanvas.h"". ; void Pal1(); {; static Int_t colors[50];; static Bool_t initialized = kFALSE;. Double_t Red[3] = { 1.00, 0.00, 0.00};; Double_t Green[3] = { 0.00, 1.00, 0.00};; Double_t Blue[3] = { 1.00, 0.00, 1.00};; Double_t Length[3] = { 0.00, 0.50, 1.00 };. if(!initialized){; Int_t FI = TColor::CreateGradientColorTable(3,Length,Red,Green,Blue,50);; for (int i=0; i<50; i++) colors[i] = FI+i;; initialized = kTRUE;; return;; }; gStyle->SetPalette(50,colors);; }. void Pal2(); {; static Int_t colors[50];; static Bool_t initialized = kFALSE;. Double_t Red[3] = { 1.00, 0.50, 0.00};; Double_t Green[3] = { 0.50, 0.00, 1.00};; Double_t Blue[3] = { 1.00, 0.00, 0.50};; Double_t Length[3] = { 0.00, 0.50, 1.00 };. if(!initialized){; Int_t FI = TColor::CreateGradientColorTable(3,Length,Red,Green,Blue,50);; for (int i=0; i<50; i++) colors[i] = FI+i;; initialized = kTRUE;; return;; }; gStyle->SetPalette(50,colors);; }. TCanvas* multipalette() {; TCanvas *c3 = new TCanvas(""c3"",""C3"",0,0,600,400);; c3->Divide(2,1);; TF2 *f3 = new TF2(""f3"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; f3->SetLineWidth(1);; f3->SetLineColor(kBlack);. c3->cd(1);; f3->Draw(""surf1""); ; TExec *ex1 = new TExec(""ex1"",""Pal1();"");; ex1->Draw();; f3->Draw(""surf1 same""); . c3->cd(2);; f3->Draw(""surf1""); ; TExec *ex2 = new TExec(""ex2"",""Pal2();"");; ex2->Draw();; f3->Draw(""surf1 same""); . return c3;; }; Color transparency; To make a graphics object transparent it is enough to set its color to a; transparent one. The color transparency is defined via its alpha component. The; alpha value varies from 0. (fully trans",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColor.html:6968,Green,Green,6968,root/html534/TColor.html,https://root.cern,https://root.cern/root/html534/TColor.html,1,['Green'],['Green']
Energy Efficiency,"ensitive volume flag; ifield magnetic field; fieldm max. field value (kilogauss); tmaxfd max. angle due to field (deg/step); stemax max. step allowed; deemax max. fraction of energy lost in a step; epsil tracking precision (cm); stmin min. step due to continuous processes (cm). ifield = 0 if no magnetic field; ifield = -1 if user decision in guswim;; ifield = 1 if tracking performed with g3rkuta; ifield = 2 if tracking; performed with g3helix; ifield = 3 if tracking performed with g3helx3. void Medium(Int_t& kmed, const char* name, Int_t nmat, Int_t isvol, Int_t ifield, Double_t fieldm, Double_t tmaxfd, Double_t stemax, Double_t deemax, Double_t epsil, Double_t stmin, Double_t* ubuf, Int_t nbuf). kmed tracking medium number assigned; name tracking medium name; nmat material number; isvol sensitive volume flag; ifield magnetic field; fieldm max. field value (kilogauss); tmaxfd max. angle due to field (deg/step); stemax max. step allowed; deemax max. fraction of energy lost in a step; epsil tracking precision (cm); stmin min. step due to continuos processes (cm). ifield = 0 if no magnetic field; ifield = -1 if user decision in guswim;; ifield = 1 if tracking performed with g3rkuta; ifield = 2 if tracking; performed with g3helix; ifield = 3 if tracking performed with g3helx3. void Matrix(Int_t& krot, Double_t thetaX, Double_t phiX, Double_t thetaY, Double_t phiY, Double_t thetaZ, Double_t phiZ). krot rotation matrix number assigned; theta1 polar angle for axis i; phi1 azimuthal angle for axis i; theta2 polar angle for axis ii; phi2 azimuthal angle for axis ii; theta3 polar angle for axis iii; phi3 azimuthal angle for axis iii. it defines the rotation matrix number irot. Int_t Gsvolu(const char* name, const char* shape, Int_t nmed, Float_t* upar, Int_t np). NAME Volume name; SHAPE Volume type; NUMED Tracking medium number; NPAR Number of shape parameters; UPAR Vector containing shape parameters. It creates a new volume in the JVOLUM data structure. Int_t Gsvolu(const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMCGeometry.html:13134,energy,energy,13134,root/html528/TGeoMCGeometry.html,https://root.cern,https://root.cern/root/html528/TGeoMCGeometry.html,10,['energy'],['energy']
Energy Efficiency,"ent and daughters, as; well as ""which variable is used"" in the selection of this node,; including the respective cut value. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Node(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*AddXMLTo(void* parent) const; static TClass*Class(); Int_tCountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; intGetCount(); UInt_tGetDepth() const; virtual TMVA::Node*GetLeft() const; virtual TMVA::Node*GetParent() const; virtual TMVA::BinaryTree*GetParentTree() const; charGetPos() const; virtual TMVA::Node*GetRight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; TMVA::NodeNode(); TMVA::NodeNode(const TMVA::Node& n); TMVA::NodeNode(TMVA::Node* p, char pos); TMVA::Node&operator=(const TMVA::Node&); virtual voidPrint(ostream& os) const; virtual voidPrintRec(ostream& os) const; virtual voidReadAttributes(void* node, UInt_t tmva_Version_Code = 262656); virtual voidReadContent(stringstream& s); virtual Bool_tReadDataRecord(istream&, UInt_t tmva_Version_Code = 262656); voidReadXML(void* node, UInt_t tmva_Version_Code = 262656); voidSetDepth(UInt_t d); virtual voidSetLeft(TMVA::Node* l); virtual voidSetParent(TMVA::Node* p); virtual voidSetParentTree(TMVA::BinaryTree* t); voidSetPos(char s); virtual voidSetRight(TMVA::Node* r); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_tfDepthdepth of the node within the tree (seen from root node); TMVA::Node*fLeftpointers to the two ""daughter"" nodes; TMVA::Node*fParentthe previous (parent) node; TMVA::BinaryTree*fParentTreepointer to the parent tree to which the Node belongs; charfPosposit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Node.html:1172,charGe,charGetPos,1172,root/html602/TMVA__Node.html,https://root.cern,https://root.cern/root/html602/TMVA__Node.html,1,['charGe'],['charGetPos']
Energy Efficiency,"ent and daughters, as; well as ""which variable is used"" in the selection of this node,; including the respective cut value. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Node(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*AddXMLTo(void* parent) const; static TClass*Class(); Int_tCountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; intGetCount(); UInt_tGetDepth() const; virtual TMVA::Node*GetLeft() const; virtual TMVA::Node*GetParent() const; virtual TMVA::BinaryTree*GetParentTree() const; charGetPos() const; virtual TMVA::Node*GetRight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; TMVA::NodeNode(); TMVA::NodeNode(const TMVA::Node& n); TMVA::NodeNode(TMVA::Node* p, char pos); TMVA::Node&operator=(const TMVA::Node&); virtual voidPrint(ostream& os) const; virtual voidPrintRec(ostream& os) const; virtual voidReadAttributes(void* node, UInt_t tmva_Version_Code = 262657); virtual voidReadContent(stringstream& s); virtual Bool_tReadDataRecord(istream&, UInt_t tmva_Version_Code = 262657); voidReadXML(void* node, UInt_t tmva_Version_Code = 262657); voidSetDepth(UInt_t d); virtual voidSetLeft(TMVA::Node* l); virtual voidSetParent(TMVA::Node* p); virtual voidSetParentTree(TMVA::BinaryTree* t); voidSetPos(char s); virtual voidSetRight(TMVA::Node* r); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_tfDepthdepth of the node within the tree (seen from root node); TMVA::Node*fLeftpointers to the two ""daughter"" nodes; TMVA::Node*fParentthe previous (parent) node; TMVA::BinaryTree*fParentTreepointer to the parent tree to which the Node belongs; charfPosposit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Node.html:1180,charGe,charGetPos,1180,root/html604/TMVA__Node.html,https://root.cern,https://root.cern/root/html604/TMVA__Node.html,1,['charGe'],['charGetPos']
Energy Efficiency,"ent(XMLNodePointer_t xmlnode); get contents (if any) of xml node. XMLNodePointer_t GetChild(XMLNodePointer_t xmlnode); returns first child of xml node. XMLNodePointer_t GetParent(XMLNodePointer_t xmlnode); returns parent of xmlnode. XMLNodePointer_t GetNext(XMLNodePointer_t xmlnode); return next to xmlnode node. void ShiftToNext(XMLNodePointer_t& xmlnode, bool tonode = true); shifts specified node to next. Bool_t IsEmptyNode(XMLNodePointer_t xmlnode); return kTRUE is this is node with special data like comments to data processing instructions. void SkipEmpty(XMLNodePointer_t& xmlnode); Skip all current empty nodes and locate on first ""true"" node. void CleanNode(XMLNodePointer_t xmlnode); remove all childs node from xmlnode. XMLDocPointer_t NewDoc(const char* version = ""1.0""); creates new xml document with provided version. void AssignDtd(XMLDocPointer_t xmldoc, const char* dtdname, const char* rootname); assignes dtd filename to document. void FreeDoc(XMLDocPointer_t xmldoc); frees allocated document data and deletes document itself. void SaveDoc(XMLDocPointer_t xmldoc, const char* filename, Int_t layout = 1); store document content to file; if layout<=0, no any spaces or newlines will be placed between; xmlnodes. Xml file will have minimum size, but nonreadable structure; if (layout>0) each node will be started from new line,; and number of spaces will correspond to structure depth. void DocSetRootElement(XMLDocPointer_t xmldoc, XMLNodePointer_t xmlnode); set main (root) node for document. XMLNodePointer_t DocGetRootElement(XMLDocPointer_t xmldoc); returns root node of document. XMLDocPointer_t ParseFile(const char* filename); parses content of file and tries to produce xml structures. XMLDocPointer_t ParseString(const char* xmlstring); parses content of string and tries to produce xml structures. XMLDocPointer_t ParseStream(TXMLInputStream* input); parses content of the stream and tries to produce xml structures. Bool_t ValidateVersion(XMLDocPointer_t doc, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLEngine.html:14354,allocate,allocated,14354,root/html528/TXMLEngine.html,https://root.cern,https://root.cern/root/html528/TXMLEngine.html,1,['allocate'],['allocated']
Energy Efficiency,"ent(XMLNodePointer_t xmlnode); get contents (if any) of xml node. XMLNodePointer_t GetChild(XMLNodePointer_t xmlnode); returns first child of xml node. XMLNodePointer_t GetParent(XMLNodePointer_t xmlnode); returns parent of xmlnode. XMLNodePointer_t GetNext(XMLNodePointer_t xmlnode); return next to xmlnode node. void ShiftToNext(XMLNodePointer_t& xmlnode, bool tonode = true); shifts specified node to next. Bool_t IsEmptyNode(XMLNodePointer_t xmlnode); return kTRUE is this is node with special data like comments to data processing instructions. void SkipEmpty(XMLNodePointer_t& xmlnode); Skip all current empty nodes and locate on first ""true"" node. void CleanNode(XMLNodePointer_t xmlnode); remove all childs node from xmlnode. XMLDocPointer_t NewDoc(const char* version = ""1.0""); creates new xml document with provided version. void AssignDtd(XMLDocPointer_t xmldoc, const char* dtdname, const char* rootname); assignes dtd filename to document. void FreeDoc(XMLDocPointer_t xmldoc); frees allocated document data and deletes document itself. void SaveDoc(XMLDocPointer_t xmldoc, const char* filename, Int_t layout = 1); store document content to file; if layout<=0, no any spaces or newlines will be placed between; xmlnodes. Xml file will have minimum size, but nonreadable structure; if (layout>0) each node will be started from new line,; and number of spaces will correspond to structure depth. void DocSetRootElement(XMLDocPointer_t xmldoc, XMLNodePointer_t xmlnode); set main (root) node for document. XMLNodePointer_t DocGetRootElement(XMLDocPointer_t xmldoc); returns root node of document. XMLDocPointer_t ParseFile(const char* filename, Int_t maxbuf = 100000); Parses content of file and tries to produce xml structures.; The maxbuf argument specifies the max size of the XML file to be; parsed. The default value is 100000. XMLDocPointer_t ParseString(const char* xmlstring); parses content of string and tries to produce xml structures. XMLDocPointer_t ParseStream(TXMLInputStream*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXMLEngine.html:14446,allocate,allocated,14446,root/html530/TXMLEngine.html,https://root.cern,https://root.cern/root/html530/TXMLEngine.html,3,['allocate'],['allocated']
Energy Efficiency,"ent,1); };; ; ClassImp(Event); ; void tree0() {; // create a TTree; TTree *tree = new TTree(""tree"",""treelibrated tree"");; Event *e = new Event;; ; // create a branch with energy; tree->Branch(""event"",&e);; ; // fill some events with random numbers; Int_t nevent=10000;; for (Int_t iev=0;iev<nevent;iev++) {; if (iev%1000==0) cout<<""Processing event ""<<iev<<""...""<<endl;; ; Float_t ea,eb;; gRandom->Rannor(ea,eb); // the two energies follow a gaus distribution; e->a.e=ea;; e->b.e=eb;; e->a.t=gRandom->Rndm(); // random; e->b.t=e->a.t + gRandom->Gaus(0.,.1); // identical to a.t but a gaussian; // 'resolution' was added with sigma .1; ; tree->Fill(); // fill the tree with the current event; }; ; // start the viewer; // here you can investigate the structure of your Event class; tree->StartViewer();; ; //gROOT->SetStyle(""Plain""); // uncomment to set a different style; ; // now draw some tree variables; TCanvas *c1 = new TCanvas();; c1->Divide(2,2);; c1->cd(1);; tree->Draw(""a.e""); //energy of det a; tree->Draw(""a.e"",""3*(-.2<b.e && b.e<.2)"",""same""); // same but with condition on energy b; scaled by 3; c1->cd(2);; tree->Draw(""b.e:a.e"","""",""colz""); // one energy against the other; c1->cd(3);; tree->Draw(""b.t"","""",""e""); // time of b with errorbars; tree->Draw(""a.t"","""",""same""); // overlay time of detector a; c1->cd(4);; tree->Draw(""b.t:a.t""); // plot time b again time a; ; cout<<endl;; cout<<""You can now examine the structure of your tree in the TreeViewer""<<endl;; cout<<endl;; }; ; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; Riostream.h; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; ClassImp#define ClassImp(name)Definition Rtypes.h:382; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; TCanvas.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; TTree.h; TCanvasThe Canvas class.Definition TCanvas.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree0_8C.html:2434,energy,energy,2434,doc/master/tree0_8C.html,https://root.cern,https://root.cern/doc/master/tree0_8C.html,1,['energy'],['energy']
Energy Efficiency,"ent::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveLine(Int_t n_points = 0, TEvePointSelectorConsumer::ETreeVarType_e tv_type = kTVT_XYZ); Constructor. TEveLine(const char* name, Int_t n_points = 0, TEvePointSelectorConsumer::ETreeVarType_e tv_type = kTVT_XYZ); Constructor. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Returns list-tree icon for TEveLine. void SetMarkerColor(Color_t col); Set marker color. Propagate to projected lines. void SetLineStyle(Style_t lstyle); Set line-style of the line.; The style is propagated to projecteds. void SetLineWidth(Width_t lwidth); Set line-style of the line.; The style is propagated to projecteds. void SetRnrLine(Bool_t r); Set rendering of line. Propagate to projected lines. void SetRnrPoints(Bool_t r); Set rendering of points. Propagate to projected lines. void SetSmooth(Bool_t r); Set smooth rendering. Propagate to projected lines. void ReduceSegmentLengths(Float_t max); Make sure that no segment is longer than max.; Per point references and integer ids are lost. Float_t CalculateLineLength() const; Sum-up lengths of individual segments. TEveVector GetLineStart() const; Return the first point of the line.; If there are no points (0,0,0) is returned. TEveVector GetLineEnd() const; Return the last point of the line.; If there are no points (0,0,0) is returned. void CopyVizParams(const TEveElement* el); Copy visualization parameters from element el. void WriteVizParams(ostream& out, const TString& var); Write visualization parameters. TClass* ProjectedClass(const TEveProjection* p) const; Virtual from TEveProjectable, returns TEvePointSetProjected class. Bool_t GetDefaultSmooth(); Get default value for smooth-line drawing flag.; Static function. void SetDefaultSmooth(Bool_t r); Set default value for smooth-line drawing flag (default kFALSE).; Static function. TEveLine(const TEveLine& ). TEveLine& operator=(const TEveLine& ). virtual ~TEveLine(); {}. void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveLine.html:30219,Reduce,ReduceSegmentLengths,30219,root/html602/TEveLine.html,https://root.cern,https://root.cern/root/html602/TEveLine.html,2,['Reduce'],['ReduceSegmentLengths']
Energy Efficiency,"entCalculator supplies Minuit with an externally calculated gradient. More...;  ; class  FCNAdapter;  template wrapped class for adapting to FCNBase signature More...;  ; class  FCNBase;  Interface (abstract class) defining the function to be minimized, which has to be implemented by the user. More...;  ; class  FCNGradAdapter;  template wrapped class for adapting to FCNBase signature a IGradFunction More...;  ; class  FCNGradientBase;  Extension of the FCNBase for providing the analytical Gradient of the function. More...;  ; class  FumiliBuilder;  Builds the FunctionMinimum using the Fumili method. More...;  ; class  FumiliChi2FCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliErrorUpdator;  In the case of the Fumili algorithm the Error matrix (or the Hessian matrix containing the (approximate) second derivatives) is calculated using a linearization of the model function negleting second derivatives. More...;  ; class  FumiliFCNAdapter;  template wrapped class for adapting to FumiliFCNBase signature More...;  ; class  FumiliFCNBase;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliGradientCalculator;  Fumili gradient calculator using external gradient provided by FCN Note that the computed Hessian and G2 are an approximation valid for small residuals. More...;  ; class  FumiliMaximumLikelihoodFCN;  Extension of the FCNBase for the Fumili method. More...;  ; class  FumiliMinimizer;  Instantiates the seed generator and Minimum builder for the Fumili minimization method. More...;  ; class  FumiliStandardChi2FCN;  Class implementing the standard chi square function, which is the sum of the squares of the figures-of-merit calculated for each measurement point, the individual figures-of-merit being: (the Value predicted by the model-measured Value)/standard deviation. More...;  ; class  FumiliStandardMaximumLikelihoodFCN;  Class implementing the Elements member function for the standard maximum likelihood method. More.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:2592,adapt,adapting,2592,doc/master/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html,1,['adapt'],['adapting']
Energy Efficiency,"entVector3D & operator+= (const DisplacementVector3D< OtherCoords, Tag > &v);  Self Addition with a displacement vector. ;  ; DisplacementVector3D operator- () const;  Negative of the vector. ;  ; template<class OtherCoords > ; DisplacementVector3D & operator-= (const DisplacementVector3D< OtherCoords, Tag > &v);  Self Difference with a displacement vector. ;  ; DisplacementVector3D operator/ (Scalar a) const;  Division of a vector with a real number. ;  ; DisplacementVector3D & operator/= (Scalar a);  divide this vector by a scalar quantity ;  ; template<class OtherCoords > ; DisplacementVector3D & operator= (const DisplacementVector3D< OtherCoords, Tag > &v);  Assignment operator from a displacement vector of arbitrary type. ;  ; template<class ForeignVector > ; DisplacementVector3D & operator= (const ForeignVector &v);  Assignment from a foreign 3D vector type, for example, Hep3Vector Precondition: v must implement methods x(), y() and z() ;  ; template<class OtherCoords > ; DisplacementVector3D & operator= (const PositionVector3D< OtherCoords, Tag > &rhs);  Assignment operator from a position vector (not necessarily efficient unless one or the other is Cartesian) ;  ; bool operator== (const DisplacementVector3D &rhs) const;  Exact equality. ;  ; Scalar Perp2 () const;  Transverse component squared (rho^2 in cylindrical coordinates. ;  ; Scalar perp2 () const;  ; Scalar Phi () const;  Polar phi, converting if necessary from internal coordinate system. ;  ; Scalar phi () const;  ; Scalar R () const;  Polar R, converting if necessary from internal coordinate system. ;  ; Scalar r () const;  ; Scalar Rho () const;  Cylindrical transverse component rho. ;  ; Scalar rho () const;  ; DisplacementVector3D< CoordSystem, Tag > & SetCoordinates (const Scalar src[]);  Set internal data based on a C-style array of 3 Scalar numbers. ;  ; template<class IT > ; DisplacementVector3D< CoordSystem, Tag > & SetCoordinates (IT begin, IT end);  Set internal data based on 3 Scalars at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html:5304,efficient,efficient,5304,doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html,1,['efficient'],['efficient']
Energy Efficiency,entation. ;  ; void CreateCache ();  Create a TFileCacheRead if it was requested. ;  ; UInt_t FillCache (UInt_t from);  Fill the file cache with the next set of basket. ;  ; void ImportClusterRanges ();  Set the entries and import the cluster range of the. ;  ; TTreeCloner & operator= (const TTreeCloner &)=delete;  ; void RestoreCache ();  Restore the TFileCacheRead to its previous value. ;  . Private Attributes; UInt_t * fBasketBranchNum;  [fMaxBaskets] Index of the branch(es) of the basket. ;  ; Long64_t * fBasketEntry;  [fMaxBaskets] list of basket start entries. ;  ; UInt_t * fBasketIndex;  [fMaxBaskets] ordered list of basket indices to be written. ;  ; UInt_t * fBasketNum;  [fMaxBaskets] index of the basket within the branch. ;  ; Long64_t * fBasketSeek;  [fMaxBaskets] list of basket position to be read. ;  ; Long64_t fCacheSize;  Requested size of the file cache. ;  ; UInt_t fCloneMethod;  Indicates which cloning method was selected. ;  ; TFileCacheRead * fFileCache;  File Cache used to reduce the number of individual reads. ;  ; TObjArray fFromBranches;  ; TTree * fFromTree;  ; bool fIsValid;  ; UInt_t fMaxBaskets;  ; Option_t * fMethod;  ; bool fNeedConversion;  True if the fast merge is not possible but a slow merge might possible. ;  ; UInt_t fOptions;  ; UShort_t fPidOffset;  Offset to be added to the copied key/basket. ;  ; TFileCacheRead * fPrevCache;  Cache that set before the TTreeCloner ctor for the 'from' TTree if any. ;  ; TObjArray fToBranches;  ; TDirectory * fToDirectory;  ; TFile * fToFile;  ; Long64_t fToStartEntries;  Number of entries in the target tree before any addition. ;  ; TTree * fToTree;  ; TString fWarningMsg;  Text of the error message lead to an 'invalid' state. ;  . Friends; class CompareEntry;  ; class CompareSeek;  . #include <TTreeCloner.h>; Member Enumeration Documentation. ◆ ECloneMethod. enum TTreeCloner::ECloneMethod. private . EnumeratorkDefault ; kSortBasketsByBranch ; kSortBasketsByOffset ; kSortBasketsByEntry . Definit,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCloner.html:3787,reduce,reduce,3787,doc/master/classTTreeCloner.html,https://root.cern,https://root.cern/doc/master/classTTreeCloner.html,1,['reduce'],['reduce']
Energy Efficiency,"entation. ◆ All(). constexpr bool ROOT::Internal::VecOps::All ; (; const bool * ; vals, . std::size_t ; size . ). constexpr . Definition at line 79 of file RVec.hxx. ◆ GetVectorsSize(). template<typename... T> . std::size_t ROOT::Internal::VecOps::GetVectorsSize ; (; const std::string & ; id, . const RVec< T > &... ; vs . ). Definition at line 88 of file RVec.hxx. ◆ MapFromTuple(). template<typename Tuple_t , std::size_t... Is> . auto ROOT::Internal::VecOps::MapFromTuple ; (; Tuple_t && ; t, . std::index_sequence< Is... > ;  . ); -> decltype(MapImpl(std::get<std::tuple_size<Tuple_t>::value - 1>(t), std::get<Is>(t)...)). Definition at line 117 of file RVec.hxx. ◆ MapImpl(). template<typename F , typename... RVecs> . auto ROOT::Internal::VecOps::MapImpl ; (; F && ; f, . RVecs &&... ; vs . ); -> RVec<decltype(f(vs[0]...))>. Definition at line 105 of file RVec.hxx. ◆ NextPowerOf2(). uint64_t ROOT::Internal::VecOps::NextPowerOf2 ; (; uint64_t ; A). inline . Return the next power of two (in 64-bits) that is strictly greater than A. ; Return zero on overflow. ; Definition at line 126 of file RVec.hxx. ◆ ResetView(). template<typename T > . void ROOT::Internal::VecOps::ResetView ; (; RVec< T > & ; v, . T * ; addr, . std::size_t ; sz . ). An unsafe function to reset the buffer for which this RVec is acting as a view. ; NoteThis is a low-level method that must be called on RVecs that are already non-owning:; it does not put the RVec in ""non-owning mode"" (fCapacity == -1); it does not free any owned buffer . Definition at line 546 of file RVec.hxx. ◆ UninitializedValueConstruct(). template<typename ForwardIt > . void ROOT::Internal::VecOps::UninitializedValueConstruct ; (; ForwardIt ; first, . ForwardIt ; last . ). Definition at line 530 of file RVec.hxx. ◆ void(). template<typename T , bool TriviallyCopyable> . ROOT::Internal::VecOps::void ; (; off ; ). ROOTInternalVecOps. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html:3613,power,power,3613,doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Internal_1_1VecOps.html,1,['power'],['power']
Energy Efficiency,"entation. ◆ EReturnType. using TMethodCall::EReturnType = TInterpreter::EReturnType. Definition at line 40 of file TMethodCall.h. Constructor & Destructor Documentation. ◆ TMethodCall() [1/6]. TMethodCall::TMethodCall ; (; ). Default TMethodCall ctor. ; Use Init() to initialize the method call environment. ; Definition at line 40 of file TMethodCall.cxx. ◆ TMethodCall() [2/6]. TMethodCall::TMethodCall ; (; TClass * ; cl, . CallFunc_t * ; callfunc, . Longptr_t ; offset = 0 . ). Create a method invocation environment for a specific class, method described by the callfunc. ; Definition at line 49 of file TMethodCall.cxx. ◆ TMethodCall() [3/6]. TMethodCall::TMethodCall ; (; TClass * ; cl, . const char * ; method, . const char * ; params . ). Create a method invocation environment for a specific class, method and parameters. ; The parameter string has the form: ""\""aap\"", 3, 4.35"". To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 62 of file TMethodCall.cxx. ◆ TMethodCall() [4/6]. TMethodCall::TMethodCall ; (; const char * ; function, . const char * ; params . ). Create a global function invocation environment. ; The parameter string has the form: ""\""aap\"", 3, 4,35"". To execute the function call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 75 of file TMethodCall.cxx. ◆ TMethodCall() [5/6]. TMethodCall::TMethodCall ; (; const TFunction * ; func). Create a global function invocation environment base on a TFunction object. ; To execute the function call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 87 of file TMethodCall.cxx. ◆ TMethodCall() [6/6]. TMethodCall::TMethodCall ; (; const TMethodCall & ; org). Copy ctor. ; Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodCall.html:16670,efficient,efficient,16670,doc/master/classTMethodCall.html,https://root.cern,https://root.cern/doc/master/classTMethodCall.html,1,['efficient'],['efficient']
Energy Efficiency,"ented from TSelector.; Definition at line 1169 of file TSelectorDraw.cxx. ◆ ProcessFillMultiple(). void TSelectorDraw::ProcessFillMultiple ; (; Long64_t ; entry). virtual . Called in the entry loop for all entries accepted by Select. ; Complex case with multiplicity. ; Definition at line 1206 of file TSelectorDraw.cxx. ◆ ProcessFillObject(). void TSelectorDraw::ProcessFillObject ; (; Long64_t ; entry). virtual . Called in the entry loop for all entries accepted by Select. ; Case where the only variable returns an object (or pointer to). ; Definition at line 1283 of file TSelectorDraw.cxx. ◆ SetEstimate(). void TSelectorDraw::SetEstimate ; (; Long64_t ; n). virtual . Set number of entries to estimate variable limits. ; Definition at line 1351 of file TSelectorDraw.cxx. ◆ SplitNames(). UInt_t TSelectorDraw::SplitNames ; (; const TString & ; varexp, . std::vector< TString > & ; names . ). virtual . Build Index array for names in varexp. ; This will allocated a C style array of TString and Ints ; Definition at line 1125 of file TSelectorDraw.cxx. ◆ Streamer(). void TSelectorDraw::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TSelector. ◆ StreamerNVirtual(). void TSelectorDraw::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 121 of file TSelectorDraw.h. ◆ TakeAction(). void TSelectorDraw::TakeAction ; (; ). virtual . Execute action for object obj fNfill times. ; Reimplemented in TEvePointSelector, and ROOT::Experimental::REvePointSelector.; Definition at line 1365 of file TSelectorDraw.cxx. ◆ TakeEstimate(). void TSelectorDraw::TakeEstimate ; (; ). virtual . Estimate limits for 1-D, 2-D or 3-D objects. ; Definition at line 1555 of file TSelectorDraw.cxx. ◆ Terminate(). void TSelectorDraw::Terminate ; (; void ; ). overridevirtual . Called at the end of a loop on a TTree. ; Reimplemented from TSelector.; Definition at line 1827 of file TSelectorDraw.cxx. Member Data Docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorDraw.html:26421,allocate,allocated,26421,doc/master/classTSelectorDraw.html,https://root.cern,https://root.cern/doc/master/classTSelectorDraw.html,1,['allocate'],['allocated']
Energy Efficiency,"ented with doxygen comments */; class Undocumented { };; ; /*! Class that is inherited using public inheritance */; class PublicBase : public Truncated { };; ; /*! A template class */; template<class T> class Templ { };; ; /*! Class that is inherited using protected inheritance */; class ProtectedBase { };; ; /*! Class that is inherited using private inheritance */; class PrivateBase { };; ; /*! Class that is used by the Inherited class */; class Used { };; ; /*! Super class that inherits a number of other classes */; class Inherited : public PublicBase,; protected ProtectedBase,; private PrivateBase,; public Undocumented,; public Templ<int>; {; private:; Used *m_usedClass;; };; This will result in the following graph:; This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.The boxes in the above graph have the following meaning: . A filled gray box represents the struct or class for which the graph is generated. . A box with a black border denotes a documented struct or class. . A box with a gray border denotes an undocumented struct or class. . A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. . The arrows have the following meaning: . A blue arrow is used to visualize a public inheritance relation between two classes. . A dark green arrow is used for protected inheritance. . A dark red arrow is used for private inheritance. . A purple dashed arrow is used if a class is contained or used by another class. The arrow is labelled with the variable(s) through which the pointed class or struct is accessible. . A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labelled with the template parameters of the instance. . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graph_legend.html:1840,green,green,1840,doc/master/graph_legend.html,https://root.cern,https://root.cern/doc/master/graph_legend.html,1,['green'],['green']
Energy Efficiency,"entry number to debug; Int_tTTree::fDefaultEntryOffsetLenInitial Length of fEntryOffset table in the basket buffers; TDirectory*TTree::fDirectory! Pointer to directory holding this tree; Long64_tTTree::fEntriesNumber of entries; TEntryList*TTree::fEntryList! Pointer to event selection list (if one); Long64_tTTree::fEstimateNumber of entries to estimate histogram limits; TEventList*TTree::fEventList! Pointer to event selection list (if one); TFile*fFile! Pointer to current file (We own the file).; Int_tTTree::fFileNumber! current file number (if file extensions); TObjArray*fFiles-> List of file names containing the trees (TChainElement, owned); Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Long64_tTTree::fFlushedBytesNumber of autoflushed bytes; UInt_tTTree::fFriendLockStatus! Record which method is locking the friend recursion; TList*TTree::fFriendspointer to list of friend elements; TArrayITTree::fIndexIndex of sorted values; TArrayDTTree::fIndexValuesSorted index values; TObjArrayTTree::fLeavesDirect pointers to individual branch leaves; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_tTTree::fMakeClass! not zero when processing code generated by MakeClass; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTTree::fMaxClusterRange! Memory allocated for the cluster range.; Long64_tTTree::fMaxEntriesMaximum number of entries in case of circular buffers; Long64_tTTree::fMaxEntryLoopMaximum number of entries to process; Long64_tTTree::fMaxVirtualSizeMaximum total size of buffers kept in memory; Int_tTTree::fNClusterRangeNumber of Cluster range in addition to the one defined by 'AutoFlush'; TStringTNamed::fNameobject identifier; Int_tTTree::fNfill! Local for EntryLoop; TObject*TTree::fNotify! Object to be notified when loading a Tree; Int_tfNtreesNumber of trees; In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TChain.html:24152,allocate,allocated,24152,root/html530/TChain.html,https://root.cern,https://root.cern/root/html530/TChain.html,9,['allocate'],['allocated']
Energy Efficiency,"ents inside range with given name. Multiple CutRange; arguments may be given to select multiple ranges; EventRange(int lo, int hi) -- Only retain events with given sequential event numbers; Name(const char* name) -- Give specified name to output dataset; Title(const char* name) -- Give specified title to output dataset. RooAbsData* reduce(const char* cut); Create a subset of the data set by applying the given cut on the data points.; The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points.; The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. RooAbsData* reduce(const RooArgSet& varSubset, const char* cut = 0); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. Double_t weightError(RooAbsData::ErrorType etype = Poisson) const; Return error on current weight (dummy implementation returning zero). void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; Return asymmetric error on weight. (Dummy implementation returning zero). RooPlot* plotOn(RooPlot* frame, const RooCmdArg& arg1 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsData.html:16356,reduce,reduce,16356,root/html528/RooAbsData.html,https://root.cern,https://root.cern/root/html528/RooAbsData.html,9,['reduce'],['reduce']
Energy Efficiency,"enu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TGraph; virtual Double_t ** Allocate (Int_t newsize);  Allocate internal data structures for newsize points. ;  ; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; virtual void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin);  Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin != iend. ;  ; virtual Bool_t CopyPoints (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin);  Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; virtual Bool_t DoMerge (const TGraph *g);  protected function to perform the merge operation of a graph ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; virtual void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE);  Set zero values for point arrays in the range [begin, end) Should be redefined in descendant classes. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ; virtual void SwapPoints (Int_t pos1, Int_t pos2);  Swap points. ;  ; virtual void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low);  Upda",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCutG.html:34102,allocate,allocate,34102,doc/master/classTCutG.html,https://root.cern,https://root.cern/doc/master/classTCutG.html,1,['allocate'],['allocate']
Energy Efficiency,"eoBBox(""sladder"", 20,300,5);; // The volume for the ladder; TGeoVolume *ladder = new TGeoVolume(""ladder"",sladder, medAl);; ladder->SetLineColor(kBlue);; ; // Add nodes; top->AddNode(ladder,1);; for (Int_t i=0; i<10; i++); top->AddNode(chip, i+1, new TGeoTranslation(0, -225.+50.*i, 10));; ; gGeoManager->CloseGeometry();; TGeoParallelWorld *pw = nullptr;; if (usepw) pw = gGeoManager->CreateParallelWorld(""priority_sensors"");; // Align chips; align();; if (usepw) {; if (useovlp) pw->AddOverlap(ladder);; pw->CloseGeometry();; gGeoManager->SetUseParallelWorldNav(kTRUE);; }; TString cname;; cname = usepw ? ""cpw"" : ""cnopw"";; TCanvas *c = (TCanvas*)gROOT->GetListOfCanvases()->FindObject(cname);; if (c) c->cd();; else c = new TCanvas(cname, """",800,600);; top->Draw();; // top->RandomRays(0,0,0,0,sensor->GetName());; // Track random ""particles"" coming from the block side and draw only the tracklets; // actually crossing one of the sensors. Note that some of the tracks coming; // from the outer side may see the full sensor, while the others only part of it.; TStopwatch timer;; timer.Start();; top->RandomRays(100000,0,0,-30,sensor->GetName());; timer.Stop();; timer.Print();; TView3D *view = (TView3D*)gPad->GetView();; if (view) {; view->SetParallel();; view->Side();; }; if (usepw) pw->PrintDetectedOverlaps();; }; ; //______________________________________________________________________________; void align(); {; // Aligning 2 sensors so they will overlap with the support. One sensor is positioned; // normally while the other using the shared matrix; TGeoPhysicalNode *node;; TGeoParallelWorld *pw = gGeoManager->GetParallelWorld();; Double_t sag;; for (Int_t i=0; i<10; i++) {; node = gGeoManager->MakePhysicalNode(TString::Format(""/TOP_1/chip_%d"",i+1));; sag = 8.-0.494*(i-4.5)*(i-4.5);; TGeoTranslation *tr = new TGeoTranslation(0., -225.+50.*i, 10-sag);; node->Align(tr);; if (pw) pw->AddNode(TString::Format(""/TOP_1/chip_%d"",i+1));; }; }; c#define c(i)Definition RSha256.hxx:101; Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/parallel__world_8C.html:3325,sensor,sensor,3325,doc/master/parallel__world_8C.html,https://root.cern,https://root.cern/doc/master/parallel__world_8C.html,1,['sensor'],['sensor']
Energy Efficiency,"er ; (; LongDouble_t ; x, . LongDouble_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 721 of file TMath.h. ◆ Prob(). Double_t TMath::Prob ; (; Double_t ; chi2, . Int_t ; ndf . ). Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ; Calculations are based on the incomplete gamma function P(a,x), where a=ndf/2 and x=chi2/2.; P(a,x) represents the probability that the observed Chi-squared for a correct model should be less than the value chi2.; The returned probability corresponds to 1-P(a,x), which denotes the probability that an observed Chi-squared exceeds the value chi2 by chance, even for a correct model.; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 637 of file TMath.cxx. ◆ Qe(). constexpr Double_t TMath::Qe ; (; ). constexpr . Elementary charge in \( C \) . ; Definition at line 339 of file TMath.h. ◆ QeUncertainty(). constexpr Double_t TMath::QeUncertainty ; (; ). constexpr . Elementary charge uncertainty. ; Definition at line 346 of file TMath.h. ◆ Quantiles(). void TMath::Quantiles ; (; Int_t ; n, . Int_t ; nprob, . Double_t * ; x, . Double_t * ; quantiles, . Double_t * ; prob, . Bool_t ; isSorted = kTRUE, . Int_t * ; index = nullptr, . Int_t ; type = 7 . ). Computes sample quantiles, corresponding to the given probabilities. ; Parameters. [in]xthe data sample ; [in]nits size ; [out]quantilescomputed quantiles are returned in there ; [in]probprobabilities where to compute quantiles ; [in]nprobsize of prob array ; [in]isSortedis the input array x sorted ? ; [in]indexparameter index ; [in]typemethod to compute (from 1 to 9). NOTE:; When the input is not sorted, an array of integers of size n needs to be allocated. It can be passed by the user in parameter index, or, if not passed, it will be allocated inside the function. Following types are provided:. Discontinuous:; type=1 - inverse of the empirical distribution function; type=2 - like type 1, but with averaging at disc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:73473,charge,charge,73473,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['charge'],['charge']
Energy Efficiency,"er ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::VariableTransformBase. ◆ StreamerNVirtual(). void TMVA::VariablePCATransform::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 80 of file VariablePCATransform.h. ◆ Transform(). const TMVA::Event * TMVA::VariablePCATransform::Transform ; (; const Event * const ; ev, . Int_t ; cls . ); const. virtual . apply the principal component analysis ; Implements TMVA::VariableTransformBase.; Definition at line 127 of file VariablePCATransform.cxx. ◆ WriteTransformationToStream(). void TMVA::VariablePCATransform::WriteTransformationToStream ; (; std::ostream & ; o); const. virtual . write mean values to stream ; Implements TMVA::VariableTransformBase.; Definition at line 315 of file VariablePCATransform.cxx. ◆ X2P(). void TMVA::VariablePCATransform::X2P ; (; std::vector< Float_t > & ; pc, . const std::vector< Float_t > & ; x, . Int_t ; cls . ); const. private . Calculate the principal components from the original data vector x, and return it in p (function extracted from TPrincipal::X2P) It's the users responsibility to make sure that both x and p are of the right size (i.e., memory must be allocated for p) ; Definition at line 280 of file VariablePCATransform.cxx. Member Data Documentation. ◆ fEigenVectors. std::vector<TMatrixD*> TMVA::VariablePCATransform::fEigenVectors. private . eigenvectors ; Definition at line 78 of file VariablePCATransform.h. ◆ fMeanValues. std::vector<TVectorD*> TMVA::VariablePCATransform::fMeanValues. private . mean values ; Definition at line 77 of file VariablePCATransform.h. Libraries for TMVA::VariablePCATransform:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/VariablePCATransform.h; tmva/tmva/src/VariablePCATransform.cxx. TMVAVariablePCATransform. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariablePCATransform.html:21880,allocate,allocated,21880,doc/master/classTMVA_1_1VariablePCATransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariablePCATransform.html,1,['allocate'],['allocated']
Energy Efficiency,"er bound of the row index; static TVectorT<double>::(anonymous)kSizeMax; static TVectorT<double>::EVectorStatusBitskStatus; static TVectorT<double>::(anonymous)kWorkMax. Class Charts. Inheritance Chart:. TObject. ←; TVectorT<double>. Function documentation; void TVectorT<Element> Delete_m(Int_t size, double*& ); Delete data pointer m, if it was assigned on the heap. Element* TVectorT<Element> New_m(Int_t size); Return data pointer . if requested size <= kSizeMax, assign pointer; to the stack space. void TVectorT<Element> Add(const TVectorT<double>& v); Add vector v to this vector. void TVectorT<Element> Add(const TVectorT<double>& v1, const TVectorT<double>& v2); Set this vector to v1+v2. Int_t TVectorT<Element> Memcpy_m(double* newp, const double* oldp, Int_t copySize, Int_t newSize, Int_t oldSize); Copy copySize doubles from *oldp to *newp . However take care of the; situation where both pointers are assigned to the same stack space. void TVectorT<Element> Allocate(Int_t nrows, Int_t row_lwb = 0, Int_t init = 0); Allocate new vector. Arguments are number of rows and row; lowerbound (0 default). TVectorT<Element> &TVectorT<Element> ResizeTo(Int_t lwb, Int_t upb); Resize the vector to [lwb:upb] .; New dynamic elemenst are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. TVectorT<Element> &TVectorT<Element> Use(Int_t lwb, Int_t upb, double* data); Use the array data to fill the vector lwb..upb]. TVectorT<Element> &TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, TVectorT<double>& target, Option_t* option = ""S"") const; Get subvector [row_lwb..row_upb]; The indexing range of the; returned vector depends on the argument option:. option == ""S"" : return [0..row_upb-row_lwb+1] (default); else : return [row_lwb..row_upb]. TVectorT<Element> &TVectorT<Element> SetSub(Int_t row_lwb, const TVectorT<double>& source); Insert vector source starting at [row_lwb], thereby overwriting the part; [row_lwb..row_lwb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVectorT_double_.html:11275,Allocate,Allocate,11275,root/html602/TVectorT_double_.html,https://root.cern,https://root.cern/root/html602/TVectorT_double_.html,4,['Allocate'],['Allocate']
Energy Efficiency,"er coefficients, \( F_i \), are then given by. \[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \]. where in TMVA is set \( N_S = N_B \), so that the factor in front of the sum simplifies to \( \frac{1}{2}\). The Fisher discriminant then reads. \[; X_{Fi} = F_0 + \sum_{i=1}^{N_{SB}} F_i X_i; \]. The offset \( F_0 \) centers the sample mean of \( x_{Fi} \) at zero. Instead of using the within-class matrix, the Mahalanobis variant determines the Fisher coefficients as follows:. \[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} (W + B)_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \]. with resulting \( x_{Ma} \) that are very similar to the \( x_{Fi} \).; TMVA provides two outputs for the ranking of the input variables:. Fisher test: the Fisher analysis aims at simultaneously maximising the between-class separation, while minimising the within-class dispersion. A useful measure of the discrimination power of a variable is hence given by the diagonal quantity: \( \frac{B_{ii}}{W_{ii}} \) .; Discrimination power: the value of the Fisher coefficient is a measure of the discriminating power of a variable. The discrimination power of set of input variables can therefore be measured by the scalar. \[; \lambda = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} F_i (\bar{X}_{Sj} - \bar{X}_{Bj}); \]. The corresponding numbers are printed on standard output. ; Definition at line 54 of file MethodFisher.h. Public Types; enum  EFisherMethod { kFisher; , kMahalanobis; };  ;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFisher.html:2695,power,power,2695,doc/master/classTMVA_1_1MethodFisher.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFisher.html,1,['power'],['power']
Energy Efficiency,"er for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) More...;  ; class  GSLMultiRootDerivFunctionWrapper;  wrapper to a multi-dim function with derivatives for multi roots algorithm More...;  ; class  GSLMultiRootDerivSolver;  GSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives. More...;  ; class  GSLMultiRootFinder;  Class for Multidimensional root finding algorithms bassed on GSL. More...;  ; clas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:10916,adapt,adapting,10916,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['adapt'],['adapting']
Energy Efficiency,"er is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCrystalBall() [1/5]. RooCrystalBall::RooCrystalBall ; (; ). inline . Definition at line 16 of file RooCrystalBall.h. ◆ RooCrystalBall() [2/5]. RooCrystalBall::RooCrystalBall ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . RooAbsReal & ; x0, . RooAbsReal & ; sigmaL, . RooAbsReal & ; sigmaR, . RooAbsReal & ; alphaL, . RooAbsReal & ; nL, . RooAbsReal & ; alphaR, . RooAbsReal & ; nR . ). Creates the fully parametrized crystal ball shape with asymmetric Gaussian core and asymmetric tails. ; Parameters. nameName that identifies the PDF in computations. ; titleTitle for plotting. ; xThe variable of the PDF. ; x0Location parameter of the Gaussian component. ; sigmaLWidth parameter of the left side of the Gaussian component. ; sigmaRWidth parameter of the right side of the Gaussian component. ; alphaLLocation of transition to a power law on the left, in standard deviations away from the mean. ; nLExponent of power-law tail on the left. ; alphaRLocation of transition to a power law on the right, in standard deviations away from the mean. ; nRExponent of power-law tail on the right. . Definition at line 73 of file RooCrystalBall.cxx. ◆ RooCrystalBall() [3/5]. RooCrystalBall::RooCrystalBall ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . RooAbsReal & ; x0, . RooAbsReal & ; sigmaLR, . RooAbsReal & ; alphaL, . RooAbsReal & ; nL, . RooAbsReal & ; alphaR, . RooAbsReal & ; nR . ). Create a crystal ball shape with symmetric Gaussian core and asymmetric tails (just like RooDSCBShape). ; Parameters. nameName that identifies the PDF in computations. ; titleTitle for plotting. ; xThe variable of the PDF. ; x0Location parameter of the Gaussian component. ; sigmaLRWidth parameter of the Gaussian component. ; alphaLLocation of transition to a power law on the left, in standard deviations away from the mean. ; nLExp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCrystalBall.html:76082,power,power,76082,doc/master/classRooCrystalBall.html,https://root.cern,https://root.cern/doc/master/classRooCrystalBall.html,1,['power'],['power']
Energy Efficiency,"er j}, over i}. ;  ; TMatrixTBase< Element > & SetColIndexArray (Int_t *data) override;  ; TMatrixTBase< Element > & SetMatrixArray (const Element *data, Option_t *="""") override;  Copy array data to matrix . ;  ; virtual TMatrixTBase< Element > & SetMatrixArray (Int_t nr_nonzeros, Int_t *irow, Int_t *icol, Element *data);  Copy nr elements from row/col index and data array to matrix . ;  ; virtual TMatrixTBase< Element > & SetMatrixArray (Int_t nr_nonzeros, Int_t nrows, Int_t ncols, Int_t *irow, Int_t *icol, Element *data);  ; TMatrixTBase< Element > & SetRowIndexArray (Int_t *data) override;  ; TMatrixTSparse< Element > & SetSparseIndex (const TMatrixTBase< Element > &another);  Use non-zero data of matrix source to set the sparse structure. ;  ; TMatrixTSparse< Element > & SetSparseIndex (Int_t nelem_new);  Increase/decrease the number of non-zero elements to nelems_new. ;  ; TMatrixTSparse< Element > & SetSparseIndexAB (const TMatrixT< Element > &a, const TMatrixTSparse< Element > &b);  Set the row/column indices to the ""sum"" of matrices a and b It is checked that enough space has been allocated. ;  ; TMatrixTSparse< Element > & SetSparseIndexAB (const TMatrixTSparse< Element > &a, const TMatrixT< Element > &b);  ; TMatrixTSparse< Element > & SetSparseIndexAB (const TMatrixTSparse< Element > &a, const TMatrixTSparse< Element > &b);  Set the row/column indices to the ""sum"" of matrices a and b It is checked that enough space has been allocated. ;  ; TMatrixTBase< Element > & SetSub (Int_t row_lwb, Int_t col_lwb, const TMatrixTBase< Element > &source) override;  Insert matrix source starting at [row_lwb][col_lwb], thereby overwriting the part [row_lwb..row_lwb+nrows_source-1][col_lwb..col_lwb+ncols_source-1];. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TMatrixTSparse. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TMatrixTSparse< Element > & T ();  ; TMatrixTSparse< Element > & Transpose (const TMatrixTSparse< Element >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSparse.html:12226,allocate,allocated,12226,doc/master/classTMatrixTSparse.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html,1,['allocate'],['allocated']
Energy Efficiency,"er methods (Fourier, VanCittert etc.) oscillate.; \[ y = Hx \] \[ H^T=H^THx \] \[ y^{'} = H^{'}x \] \[x_{i}^{(k+1)}=\frac{y_{i}^{'}}{\sum_{m=0}^{N-1}H_{im}^{'}x_{m}^{(k)}}x_{i}^{(k)}, i=0,1,...,N-1, \] where: \[ k=1,2,3,...,I \] \[ x^{(0)} = [1,1,...,1]^T \]; The basic function has the form of; char *Deconvolution1(float *source,; const float *resp,; int size,; int number_of_iterations);; This function calculates deconvolution from the source spectrum according to the response spectrum.; Function parameters:. source: pointer to the vector of the source spectrum; resp: pointer to the vector of the response spectrum; size: length of source and the response spectra; number_of_iterations: for details see [8]. As an illustration of the method, let us introduce a small example. In Figure 4.1 we present original 1-dimensional spectrum. It contains multiplets that cannot be directly analyzed. The response function (one peak) is given in Figure 4.2. We assume the same response function (not changing the shape) along the entire energy scale. So the response matrix is composed of mutually shifted response functions by one channel, however of the same shape. Original 1-dimensional spectrum. Response function (one peak). The result after deconvolution is given in Figure 4.3. It substantially improves the resolution in the spectrum. Result after deconvolution. We have developed a new high resolution deconvolution algorithm. We have observed that the Gold deconvolution converges to its stable state (solution). It is useless to increase the number of iterations, the result obtained does not change. To continue decreasing the width of peaks, we have found that when the solution reaches its stable state, it is necessary to stop iterations, then to change the vector in a way and repeat again the Gold deconvolution. We have found that in order to change the particular solution we need to apply a non-linear boosting function to it. The power function proved to give the best results. At t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:25487,energy,energy,25487,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,2,['energy'],['energy']
Energy Efficiency,"er names); 2164 next.Reset();; 2165 while ((element = (TStreamerElement*)next())) {; 2166 Int_t etype = element->GetType();; 2167 if (element->IsBase() || etype == TVirtualStreamerInfo::kBase) {; 2168 //base class; 2169 Longptr_t eoffset = element->GetOffset();; 2170 TClass *cle = element->GetClassPointer();; 2171 if (cle) cle->BuildEmulatedRealData(name,offset+eoffset,cl, isTransient);; 2172 }; 2173 }; 2174}; 2175 ; 2176 ; 2177////////////////////////////////////////////////////////////////////////////////; 2178/// Calculate the offset between an object of this class to; 2179/// its base class TObject. The pointer can be adjusted by; 2180/// that offset to access any virtual method of TObject like; 2181/// Streamer() and ShowMembers().; 2182 ; 2183void TClass::CalculateStreamerOffset() const; 2184{; 2185 R__LOCKGUARD(gInterpreterMutex);; 2186 if (!fIsOffsetStreamerSet && HasInterpreterInfo()) {; 2187 // When called via TMapFile (e.g. Update()) make sure that the dictionary; 2188 // gets allocated on the heap and not in the mapped file.; 2189 ; 2190 TMmallocDescTemp setreset;; 2191 fOffsetStreamer = const_cast<TClass*>(this)->GetBaseClassOffsetRecurse(TObject::Class());; 2192 if (fStreamerType == kTObject) {; 2193 fStreamerImpl = &TClass::StreamerTObjectInitialized;; 2194 }; 2195 fIsOffsetStreamerSet = kTRUE;; 2196 }; 2197}; 2198 ; 2199 ; 2200////////////////////////////////////////////////////////////////////////////////; 2201/// Call ShowMembers() on the obj of this class type, passing insp and parent.; 2202/// isATObject is -1 if unknown, 0 if it is not a TObject, and 1 if it is a TObject.; 2203/// The function returns whether it was able to call ShowMembers().; 2204 ; 2205Bool_t TClass::CallShowMembers(const void* obj, TMemberInspector &insp, Bool_t isTransient) const; 2206{; 2207 if (fShowMembers) {; 2208 // This should always works since 'pointer' should be pointing; 2209 // to an object of the actual type of this TClass object.; 2210 fShowMembers(obj, insp, i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:82664,allocate,allocated,82664,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"er names); 2231 next.Reset();; 2232 while ((element = (TStreamerElement*)next())) {; 2233 Int_t etype = element->GetType();; 2234 if (element->IsBase() || etype == TVirtualStreamerInfo::kBase) {; 2235 //base class; 2236 Longptr_t eoffset = element->GetOffset();; 2237 TClass *cle = element->GetClassPointer();; 2238 if (cle) cle->BuildEmulatedRealData(name,offset+eoffset,cl, isTransient);; 2239 }; 2240 }; 2241}; 2242 ; 2243 ; 2244////////////////////////////////////////////////////////////////////////////////; 2245/// Calculate the offset between an object of this class to; 2246/// its base class TObject. The pointer can be adjusted by; 2247/// that offset to access any virtual method of TObject like; 2248/// Streamer() and ShowMembers().; 2249 ; 2250void TClass::CalculateStreamerOffset() const; 2251{; 2252 R__LOCKGUARD(gInterpreterMutex);; 2253 if (!fIsOffsetStreamerSet && HasInterpreterInfo()) {; 2254 // When called via TMapFile (e.g. Update()) make sure that the dictionary; 2255 // gets allocated on the heap and not in the mapped file.; 2256 ; 2257 TMmallocDescTemp setreset;; 2258 fOffsetStreamer = const_cast<TClass*>(this)->GetBaseClassOffsetRecurse(TObject::Class());; 2259 if (fStreamerType == kTObject) {; 2260 fStreamerImpl = &TClass::StreamerTObjectInitialized;; 2261 }; 2262 fIsOffsetStreamerSet = kTRUE;; 2263 }; 2264}; 2265 ; 2266 ; 2267////////////////////////////////////////////////////////////////////////////////; 2268/// Call ShowMembers() on the obj of this class type, passing insp and parent.; 2269/// isATObject is -1 if unknown, 0 if it is not a TObject, and 1 if it is a TObject.; 2270/// The function returns whether it was able to call ShowMembers().; 2271 ; 2272Bool_t TClass::CallShowMembers(const void* obj, TMemberInspector &insp, Bool_t isTransient) const; 2273{; 2274 if (fShowMembers) {; 2275 // This should always works since 'pointer' should be pointing; 2276 // to an object of the actual type of this TClass object.; 2277 fShowMembers(obj, insp, i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:85415,allocate,allocated,85415,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"er of bytes in all branches before compression; Long64_tTTree::fTotalBuffers! Total number of bytes in branch buffers; TBuffer*TTree::fTransientBuffer! Pointer to the current transient buffer.; TVirtualIndex*TTree::fTreeIndexPointer to the tree Index (if any); Int_tTTree::fUpdateUpdate frequency for EntryLoop; TList*TTree::fUserInfopointer to a list of user objects associated to this Tree; Double_tTTree::fWeightTree weight (see TTree::SetWeight); Long64_tTTree::fZipBytesTotal number of bytes in all branches after compression; static Int_tTTree::fgBranchStyleOld/New branch style; static Long64_tTTree::fgMaxTreeSizeMaximum size of a file containg a Tree. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNtuple(); Default constructor for Ntuple*-*-*-*-*-*-*-*-; *-* ==============================. TNtuple(const char* name, const char* title, const char* varlist, Int_t bufsize = 32000); Create an Ntuple*-*-; *-* ================; The parameter varlist describes the list of the ntuple variables; separated by a colon:; example: ""x:y:z:energy""; For each variable in the list a separate branch is created. NOTE:; -Use TTree to create branches with variables of different data types.; -Use TTree when the number of branches is large (> 100).; -. ~TNtuple(); Default destructor for an Ntuple*-*-*-*-*-*-; *-* ================================. TTree* CloneTree(Long64_t nentries = -1, Option_t* option = """"); Create a clone of this tree and copy nentries. By default copy all entries.; Note that only active branches are copied.; The compression level of the cloned tree is set to the destination file's; compression level. See TTree::CloneTree for more details. void ResetBranchAddress(TBranch* ); Reset the branch addresses to the internal fArgs array. Use this; method when the addresses were changed via calls to SetBranchAddress(). void ResetBranchAddresses(); Reset the branch addresses to the internal fArgs array. Use this; method when the addres",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TNtuple.html:25801,energy,energy,25801,root/html532/TNtuple.html,https://root.cern,https://root.cern/root/html532/TNtuple.html,4,['energy'],['energy']
Energy Efficiency,"er of bytes in all branches before compression; Long64_tTTree::fTotalBuffers! Total number of bytes in branch buffers; TBuffer*TTree::fTransientBuffer! Pointer to the current transient buffer.; TVirtualIndex*TTree::fTreeIndexPointer to the tree Index (if any); Int_tTTree::fUpdateUpdate frequency for EntryLoop; TList*TTree::fUserInfopointer to a list of user objects associated to this Tree; Double_tTTree::fWeightTree weight (see TTree::SetWeight); Long64_tTTree::fZipBytesTotal number of bytes in all branches after compression; static Int_tTTree::fgBranchStyleOld/New branch style; static Long64_tTTree::fgMaxTreeSizeMaximum size of a file containg a Tree. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNtuple(); Default constructor for Ntuple*-*-*-*-*-*-*-*-; *-* ==============================. TNtuple(const char* name, const char* title, const char* varlist, Int_t bufsize = 32000); Create an Ntuple*-*-; *-* ================; The parameter varlist describes the list of the ntuple variables; separated by a colon:; example: ""x:y:z:energy""; For each variable in the list a separate branch is created. NOTE:; -Use TTree to create branches with variables of different data types.; -Use TTree when the number of branches is large (> 100).; -. ~TNtuple(); Default destructor for an Ntuple*-*-*-*-*-*-; *-* ================================. void ResetBranchAddress(TBranch* ); Reset the branch addresses to the internal fArgs array. Use this; method when the addresses were changed via calls to SetBranchAddress(). void ResetBranchAddresses(); Reset the branch addresses to the internal fArgs array. Use this; method when the addresses were changed via calls to SetBranchAddress(). void Browse(TBrowser* b); Browse content of the ntuple. Int_t Fill(); -*-*Fill a Ntuple with current values in fArgs; *-* ==========================================; Note that this function is protected.; Currently called only by TChain::Merge. Int_t Fill(const Float_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TNtuple.html:25425,energy,energy,25425,root/html530/TNtuple.html,https://root.cern,https://root.cern/root/html530/TNtuple.html,1,['energy'],['energy']
Energy Efficiency,"er of floats read. see comments about Float16_t encoding at TBufferFile::WriteFloat16 ; Implements TBuffer.; Definition at line 1230 of file TBufferFile.cxx. ◆ ReadStdString() [1/3]. virtual void TBuffer::ReadStdString ; (; std::string & ; s). inlinevirtual . Reimplemented from TBuffer.; Reimplemented in TBufferSQL.; Definition at line 292 of file TBuffer.h. ◆ ReadStdString() [2/3]. void TBufferFile::ReadStdString ; (; std::string * ; s). overridevirtual . Read std::string from TBuffer. ; Implements TBuffer.; Reimplemented in TBufferSQL, and TBufferSQL.; Definition at line 231 of file TBufferFile.cxx. ◆ ReadStdString() [3/3]. virtual void TBuffer::ReadStdString ; (; std::string * ; s). virtual . Implements TBuffer.; Reimplemented in TBufferSQL, and TBufferSQL. ◆ ReadString(). char * TBufferFile::ReadString ; (; char * ; s, . Int_t ; max . ). overridevirtual . Read string from I/O buffer. ; String is read till 0 character is found or till max-1 characters are read (i.e. string s has max bytes allocated). If max = -1 no check on number of character is made, reading continues till 0 character is found. ; Implements TBuffer.; Definition at line 3371 of file TBufferFile.cxx. ◆ ReadTString(). void TBufferFile::ReadTString ; (; TString & ; s). overridevirtual . Read TString from TBuffer. ; Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 187 of file TBufferFile.cxx. ◆ ReadUChar(). void TBufferFile::ReadUChar ; (; UChar_t & ; c). inlineoverridevirtual . Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 381 of file TBufferFile.h. ◆ ReadUInt(). void TBufferFile::ReadUInt ; (; UInt_t & ; i). inlineoverridevirtual . Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 405 of file TBufferFile.h. ◆ ReadULong(). void TBufferFile::ReadULong ; (; ULong_t & ; l). inlineoverridevirtual . Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 419 of file TBufferFile.h. ◆ ReadULong64(). void TBufferFile::ReadULong64",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:67514,allocate,allocated,67514,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['allocate'],['allocated']
Energy Efficiency,"er the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ;  ; void * New (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; virtual void PostLoadCheck ();  Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ;  ; Long_t Property () const override;  Returns the properties of the TClass as a bit field stored as a Long_t value. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer, Int_t version, UInt_t start, UInt_t count);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; void RegisterStreamerInfo (TVirtualStreamerInfo *info);  Register the StreamerInfo in the given slot, change the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:20849,allocate,allocated,20849,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,3,['allocate'],['allocated']
Energy Efficiency,"er to the matrix of source spectrum; p pointer to the two_dim_fit structure pointer, see manual; sizex length x of source spectrum; sizey length y of source spectrum. The two_dim_fit structure has the form; class TSpectrumTwoDimFit{. public:. int number_of_peaks; // input parameter, shoul be>0; int number_of_iterations; // input parameter, should be >0; int xmin; // first fitted channel in x direction; int xmax; // last fitted channel in x direction; int ymin; // first fitted channel in y direction; int ymax; // last fitted channel in y direction; double alpha; // convergence coefficient, input parameter, it should be positive; // number and <=1; double chi; // here the function returns resulting chi square; int statistic_type; // type of statistics, possible values; // FIT2_OPTIM_CHI_COUNTS (chi square statistics with; // counts as weighting coefficients),; // FIT2_OPTIM_CHI_FUNC_VALUES (chi square statistics; // with function values as weighting; // coefficients),FIT2_OPTIM_MAX_LIKELIHOOD; int alpha_optim; // optimization of convergence coefficients, possible values; // FIT2_ALPHA_HALVING, FIT2_ALPHA_OPTIMAL; int power; // possible values FIT21_FIT_POWER2,4,6,8,10,12; int fit_taylor; // order of Taylor expansion, possible values; // FIT2_TAYLOR_ORDER_FIRST,; // FIT2_TAYLOR_ORDER_SECOND; double position_init_x[MAX_NUMBER_OF_PEAKS2]; // initial values of x; // positions of 2D peaks, input parameters; double position_calc_x[MAX_NUMBER_OF_PEAKS2]; // calculated values; // of fitted x positions of 2D peaks, output parameters; double position_err_x[MAX_NUMBER_OF_PEAKS2]; // x position errors of 2D peaks; bool fix_position_x[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate; // x positions of 2D peaks (not fit).; // However they are present in the estimated functional; double position_init_y[MAX_NUMBER_OF_PEAKS2]; // initial values of y; // positions of 2D peaks, input parameters; double position_calc_y[MAX_NUMBER_OF_PEAKS2]; // calculated values; /",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:46433,power,power,46433,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,2,['power'],['power']
Energy Efficiency,"er viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum2Transform. class TSpectrum2Transform: public TObject. THIS CLASS CONTAINS 2-DIMENSIONAL ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. TSpectrum2Transform(); TSpectrum2Transform(const TSpectrum2Transform&); TSpectrum2Transform(Int_t sizeX, Int_t sizeY); virtual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Transform.html:1117,adapt,adaptive,1117,root/html528/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Transform.html,6,['adapt'],['adaptive']
Energy Efficiency,"er viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum2Transform. class TSpectrum2Transform: public TObject. THIS CLASS CONTAINS 2-DIMENSIONAL ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2Transform.html:1141,adapt,adaptive,1141,root/html602/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html602/TSpectrum2Transform.html,4,['adapt'],['adaptive']
Energy Efficiency,"er { kNoTreatment; kKernelRenorm; kSampleMirror; };. private:. Float_tfFineFactorfine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function; TH1F*fFirstIterHisthistogram to be filled in the hidden iteration; Bool_tfHiddenIterationDefines if whats currently running is the ; TH1F*fHistcopy of input histogram; TMVA::KDEKernel::EKernelIterfIteriteration number; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects; TF1*fKernel_integthe integral of the Kernel function; TMVA::MsgLogger*fLoggermessage logger; Float_tfLowerEdgethe lower edge of the PDF; Float_tfSigmaWidth of the Kernel function; TH1F*fSigmaHistcontains the Sigmas Widths for adaptive KDE ; Float_tfUpperEdgethe upper edge of the PDF. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; KDEKernel(TMVA::KDEKernel::EKernelIter kiter = kNonadaptiveKDE, const TH1* hist = 0, Float_t lower_edge = 0., Float_t upper_edge = 1., TMVA::KDEKernel::EKernelBorder kborder = kNoTreatment, Float_t FineFactor = 1.); constructor; sanity check. ~KDEKernel(); destructor. void SetKernelType(TMVA::KDEKernel::EKernelType ktype = kGauss); fIter == 1 ---> nonadaptive KDE; fIter == 2 ---> adaptive KDE. Float_t GetBinKernelIntegral(Float_t lowr, Float_t highr, Float_t mean, Int_t binnum); calculates the integral of the Kernel. KDEKernel(TMVA::KDEKernel::EKernelIter kiter = kNonadaptiveKDE, const TH1* hist = 0, Float_t lower_edge = 0., Float_t upper_edge = 1., TMVA::KDEKernel::EKernelBorder kborder = kNoTreatment, Float_t FineFactor = 1.). const char* GetName() const; modified name (remove TMVA::). { return ""KDEKernel""; }. » Author: Asen Christov » Copyright (c) 2007: *; » Last changed: root/tmva $Id: KDEKernel.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__KDEKernel.html:2427,adapt,adaptive,2427,root/html532/TMVA__KDEKernel.html,https://root.cern,https://root.cern/root/html532/TMVA__KDEKernel.html,2,['adapt'],['adaptive']
Energy Efficiency,"er& b); -- Read leaves into i/o buffers for this branch.; For split-class branch, base class branch, data member branch, or top-level branch.; which do have a branch count and are not a counter. void ReadLeavesMemberCounter(TBuffer& b); -- Read leaves into i/o buffers for this branch.; For split-class branch, base class branch, data member branch, or top-level branch.; which do not have a branch count and are a counter. void ReadLeavesCustomStreamer(TBuffer& b); -- Read leaves into i/o buffers for this branch.; Non TObject, Non collection classes with a custom streamer. void ReleaseObject(); -- Delete any object we may have allocated on a previous call to SetAddress. void Reset(Option_t* option = """"); -- Reset a Branch. Existing i/o buffers are deleted.; Entries, max and min are reset. void ResetAddress(); Set branch address to zero and free all allocated memory. void ResetDeleteObject(); -- Release ownership of any allocated objects. Note: This interface was added so that clone trees could; be told they do not own the allocated objects. void SetAddress(void* addobj); -- Point this branch at an object. For a sub-branch, addr is a pointer to the branch object. For a top-level branch the meaning of addr is as follows:. If addr is zero, then we allocate a branch object; internally and the branch is the owner of the allocated; object, not the caller. However the caller may obtain; a pointer to the branch object with GetObject(). Example:. branch->SetAddress(0);; Event* event = branch->GetObject();; ... Do some work. If addr is not zero, but the pointer addr points at is; zero, then we allocate a branch object and set the passed; pointer to point at the allocated object. The caller; owns the allocated object and is responsible for deleting; it when it is no longer needed. Example:. Event* event = 0;; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. If addr is not zero and the pointer addr points at is; also not zero, then the caller has allocated",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBranchElement.html:26937,allocate,allocated,26937,root/html528/TBranchElement.html,https://root.cern,https://root.cern/root/html528/TBranchElement.html,2,['allocate'],['allocated']
Energy Efficiency,"er, then; this material represents some sort of mixture.; Inputs:; TString& volumeName The volume name; Outputs:; TSrting &name Material name; Int_t &imat Material index number; Double_t &a Average Atomic mass of material; Double_t &z Average Atomic number of material; Double_t &dens Density of material [g/cm^3]; Double_t &radl Average radiation length of material [cm]; Double_t &inter Average interaction length of material [cm]; TArrayD &par A TArrayD of user defined parameters.; Return:; kTRUE if no errors. Bool_t GetMedium(const TString& volumeName, TString& name, Int_t& imed, Int_t& nmat, Int_t& isvol, Int_t& ifield, Double_t& fieldm, Double_t& tmaxfd, Double_t& stemax, Double_t& deemax, Double_t& epsil, Double_t& stmin, TArrayD& par); Returns the Medium and its parameters for the volume specified; by volumeName.; Inputs:; TString& volumeName The volume name.; Outputs:; TString &name Medium name; Int_t &nmat Material number defined for this medium; Int_t &imed The medium index number; Int_t &isvol volume number defined for this medium; Int_t &iflield Magnetic field flag; Double_t &fieldm Magnetic field strength; Double_t &tmaxfd Maximum angle of deflection per step; Double_t &stemax Maximum step size; Double_t &deemax Maximum fraction of energy allowed to be lost; to continuous process.; Double_t &epsil Boundary crossing precision; Double_t &stmin Minimum step size allowed; TArrayD &par A TArrayD of user parameters with all of the; parameters of the specified medium.; Return:; kTRUE if there where no errors. TGeoMCGeometry(const char* name, const char* title, Bool_t g3CompatibleVolumeNames = false). void Gsbool(const char* , const char* ); {}. TGeoMCGeometry& operator=(const TGeoMCGeometry& ). » Last changed: root/vmc:$Id: TGeoMCGeometry.h 34810 2010-08-13 13:36:26Z ivana $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMCGeometry.html:21452,energy,energy,21452,root/html528/TGeoMCGeometry.html,https://root.cern,https://root.cern/root/html528/TGeoMCGeometry.html,1,['energy'],['energy']
Energy Efficiency,"er, then; this material represents some sort of mixture.; Inputs:; TString& volumeName The volume name; Outputs:; TSrting &name Material name; Int_t &imat Material index number; Double_t &a Average Atomic mass of material; Double_t &z Average Atomic number of material; Double_t &dens Density of material [g/cm^3]; Double_t &radl Average radiation length of material [cm]; Double_t &inter Average interaction length of material [cm]; TArrayD &par A TArrayD of user defined parameters.; Return:; kTRUE if no errors. Bool_t GetMedium(const TString& volumeName, TString& name, Int_t& imed, Int_t& nmat, Int_t& isvol, Int_t& ifield, Double_t& fieldm, Double_t& tmaxfd, Double_t& stemax, Double_t& deemax, Double_t& epsil, Double_t& stmin, TArrayD& par); Returns the Medium and its parameters for the volume specified; by volumeName.; Inputs:; TString& volumeName The volume name.; Outputs:; TString &name Medium name; Int_t &nmat Material number defined for this medium; Int_t &imed The medium index number; Int_t &isvol volume number defined for this medium; Int_t &iflield Magnetic field flag; Double_t &fieldm Magnetic field strength; Double_t &tmaxfd Maximum angle of deflection per step; Double_t &stemax Maximum step size; Double_t &deemax Maximum fraction of energy allowed to be lost; to continuous process.; Double_t &epsil Boundary crossing precision; Double_t &stmin Minimum step size allowed; TArrayD &par A TArrayD of user parameters with all of the; parameters of the specified medium.; Return:; kTRUE if there where no errors. TGeoMCGeometry(const char* name, const char* title, Bool_t g3CompatibleVolumeNames = false). void Gsbool(const char* , const char* ); {}. TGeoMCGeometry& operator=(const TGeoMCGeometry& ). » Last changed: root/vmc:$Id: TGeoMCGeometry.h 34810 2010-08-13 13:36:26Z ivana $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoMCGeometry.html:21521,energy,energy,21521,root/html530/TGeoMCGeometry.html,https://root.cern,https://root.cern/root/html530/TGeoMCGeometry.html,1,['energy'],['energy']
Energy Efficiency,"er, then; this material represents some sort of mixture.; Inputs:; TString& volumeName The volume name; Outputs:; TSrting &name Material name; Int_t &imat Material index number; Double_t &a Average Atomic mass of material; Double_t &z Average Atomic number of material; Double_t &dens Density of material [g/cm^3]; Double_t &radl Average radiation length of material [cm]; Double_t &inter Average interaction length of material [cm]; TArrayD &par A TArrayD of user defined parameters.; Return:; kTRUE if no errors. Bool_t GetMedium(const TString& volumeName, TString& name, Int_t& imed, Int_t& nmat, Int_t& isvol, Int_t& ifield, Double_t& fieldm, Double_t& tmaxfd, Double_t& stemax, Double_t& deemax, Double_t& epsil, Double_t& stmin, TArrayD& par); Returns the Medium and its parameters for the volume specified; by volumeName.; Inputs:; TString& volumeName The volume name.; Outputs:; TString &name Medium name; Int_t &nmat Material number defined for this medium; Int_t &imed The medium index number; Int_t &isvol volume number defined for this medium; Int_t &iflield Magnetic field flag; Double_t &fieldm Magnetic field strength; Double_t &tmaxfd Maximum angle of deflection per step; Double_t &stemax Maximum step size; Double_t &deemax Maximum fraction of energy allowed to be lost; to continuous process.; Double_t &epsil Boundary crossing precision; Double_t &stmin Minimum step size allowed; TArrayD &par A TArrayD of user parameters with all of the; parameters of the specified medium.; Return:; kTRUE if there where no errors. TGeoMCGeometry(const char* name, const char* title, Bool_t g3CompatibleVolumeNames = false). void Gsbool(const char* , const char* ); {}. TGeoMCGeometry& operator=(const TGeoMCGeometry& ). » Last changed: root/vmc:$Id: TGeoMCGeometry.h 34810 2010-08-13 13:36:26Z ivana $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoMCGeometry.html:21521,energy,energy,21521,root/html532/TGeoMCGeometry.html,https://root.cern,https://root.cern/root/html532/TGeoMCGeometry.html,2,['energy'],['energy']
Energy Efficiency,"er.h:43; TBuffer::SetParentvoid SetParent(TObject *parent)Set parent owning this buffer.Definition TBuffer.cxx:270; TBuffer::kWrite@ kWriteDefinition TBuffer.h:73; TBuffer::kRead@ kReadDefinition TBuffer.h:73; TBuffer::SetBufferOffsetvoid SetBufferOffset(Int_t offset=0)Definition TBuffer.h:93; TBuffer::LengthInt_t Length() constDefinition TBuffer.h:100; TBuffer::MapObjectvirtual void MapObject(const TObject *obj, UInt_t offset=1)=0; TBuffer::Bufferchar * Buffer() constDefinition TBuffer.h:96; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::Streamervoid Streamer(void *obj, TBuffer &b, const TClass *onfile_class=nullptr) constDefinition TClass.h:607; TClass::Browsevoid Browse(TBrowser *b) overrideThis method is called by a browser to get the class information.Definition TClass.cxx:2077; TClass::GetStateEState GetState() constDefinition TClass.h:488; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TClass::Destructorvoid Destructor(void *obj, Bool_t dtorOnly=kFALSE)Explicitly call destructor for object.Definition TClass.cxx:5467; TClass::DynamicCastvoid * DynamicCast(const TClass *base, void *obj, Bool_t up=kTRUE)Cast obj of this class type up to baseclass cl if up is true.Definition TClass.cxx:4982; TClass::GetDirectoryAutoAddROOT::DirAutoAdd_t GetDirectoryAutoAdd() constReturn the wrapper around the directory auto add function.Definition TClass.cxx:7554; TClass::kDummyNew@ kDummyNewDefinition TClass.h:107; TClass::GetSchemaRulesconst ROOT::Detail::TSchemaRuleSet * GetSchemaRules() constReturn the set of the schema rules if any.Definition TClass.cxx:1999; TClass::IsTObjectBool_t IsTObject() constReturn kTRUE is the class inherits from TObject.Definition TClass.cxx:6005; TClass::InheritsFromBool_t InheritsFrom(const char *cl) const overrideReturn kTRUE if this class inherits from",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:59250,allocate,allocated,59250,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"er::~TStructViewer ; (; ). override . Destructor. Clean all object after closing the viewer. ; Definition at line 87 of file TStructViewer.cxx. Member Function Documentation. ◆ AddNode(). void TStructViewer::AddNode ; (; TStructNode * ; node, . ULong_t ; size . ). private . Find list with nodes on specified level and add node to this list and increment list of sizes and list of members. ; Definition at line 97 of file TStructViewer.cxx. ◆ Class(). static TClass * TStructViewer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TStructViewer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TStructViewer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 62 of file TStructViewer.h. ◆ CountMembers(). void TStructViewer::CountMembers ; (; TClass * ; cl, . TStructNode * ; parent, . void * ; pointer . ). private . Count allocated memory, increase member counters, find child nodes. ; Definition at line 115 of file TStructViewer.cxx. ◆ DeclFileName(). static const char * TStructViewer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 62 of file TStructViewer.h. ◆ Draw(). void TStructViewer::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw object if there is valid pointer. ; Reimplemented from TObject.; Definition at line 342 of file TStructViewer.cxx. ◆ GetCanvas(). TCanvas * TStructViewer::GetCanvas ; (; ). Returns canvas used to keep TGeoVolumes. ; Definition at line 362 of file TStructViewer.cxx. ◆ GetColor(). TColor TStructViewer::GetColor ; (; const char * ; typeName). Returns color associated with type ""typeName"". ; Definition at line 503 of file TStructViewer.cxx. ◆ GetFrame(). TGMainFrame * TStructViewer::GetFrame ; (; ). Returns pointer to main window. ; Definition at line 370 of file TStructViewer.cxx. ◆ GetLevelMembersCount(). TExMap TStructVie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewer.html:13077,allocate,allocated,13077,doc/master/classTStructViewer.html,https://root.cern,https://root.cern/doc/master/classTStructViewer.html,1,['allocate'],['allocated']
Energy Efficiency,"erator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMCParticle&operator=(const TMCParticle&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEnergy(Float_t energy); virtual voidSetFirstChild(Int_t first); virtual voidSetKF(Int_t kF); virtual voidSetKS(Int_t kS); virtual voidSetLastChild(Int_t last); virtual voidSetLifetime(Float_t lifetime); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetMass(Float_t mass); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetParent(Int_t parent); virtual voidSetPx(Float_t px); virtual voidSetPy(Float_t py); virtual voidSetPz(Float_t pz); virtual voidSetTime(Float_t time); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVx(Float_t vx); virtual voidSetVy(Float_t vy); virtual voidSetVz(Float_t vz); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMCParticle.html:5052,energy,energy,5052,root/html530/TMCParticle.html,https://root.cern,https://root.cern/root/html530/TMCParticle.html,3,['energy'],['energy']
Energy Efficiency,"erator when comparing to another RooAbsArg.; Only functional when the other arg is a RooAbsReal. TString getTitle(Bool_t appendUnit = kFALSE) const; Return this variable's title string. If appendUnit is true and; this variable has units, also append a string "" (<unit>)"". Double_t getValV(const RooArgSet* set = 0) const; Return value of object. If the cache is clean, return the; cached value, otherwise recalculate on the fly and refill; the cache. Int_t numEvalErrorItems(). Double_t traceEval(const RooArgSet* set) const; Calculate current value of object, with error tracing wrapper. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Variant of getAnalyticalIntegral that is also passed the normalization set; that should be applied to the integrand of which the integral is request.; For certain operator p.d.f it is useful to overload this function rather; than analyticalIntegralWN() as the additional normalization information; may be useful in determining a more efficient decomposition of the; requested integral. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Interface function getAnalyticalIntergral advertises the; analytical integrals that are supported. 'integSet'; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to anaIntSet and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Implements the actual analytical integral(s) advertised by; getAnalyticalIntegral. This functions will only be called with; codes returned by getAnalyticalIntegral, except code zero. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Implements the actual analy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsReal.html:33773,efficient,efficient,33773,root/html532/RooAbsReal.html,https://root.cern,https://root.cern/root/html532/RooAbsReal.html,1,['efficient'],['efficient']
Energy Efficiency,"erator=(const TMVA::IMethod&); virtual voidPrintHelpMessage() const; virtual voidProcessOptions(); virtual voidReadWeightsFromStream(istream&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTrain(); virtual voidWriteMonitoringHistosToFile() const. protected:. virtual voidGetHelpMessage() const; virtual voidMakeClassSpecific(ostream&, const TString&) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IMethod(); default destructur. {}. const char * GetName() const; ------- virtual member functions to be implemented by each MVA method; the name of the method. Double_t GetMvaValue(Double_t* err = 0); calculate the MVA value - some methods may return a per-event error estimate (unless: *err = -1). void Train( void ); training method. void ReadWeightsFromStream(istream& ); read weights from output stream. void WriteMonitoringHistosToFile( void ); write method specific monitoring histograms to target file. void MakeClass(const TString& classFileName = TString("""")) const; make ROOT-independent C++ class for classifier response. const Ranking* CreateRanking(); create ranking. void PrintHelpMessage() const; print help message. Bool_t MonitorBoost(TMVA::MethodBoost* boost); perfrom extra actions during the boosting at different stages. void Init(). void DeclareOptions(). void ProcessOptions(). void MakeClassSpecific(ostream& , const TString& ) const; make ROOT-independent C++ class for classifier response (classifier-specific implementation). void GetHelpMessage() const; get specific help message from classifer. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: IMethod.h 31458 2009-11-30 13:58:20Z stelzer $ » Last generated: 2010-09-23 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__IMethod.html:1850,monitor,monitoring,1850,root/html528/TMVA__IMethod.html,https://root.cern,https://root.cern/root/html528/TMVA__IMethod.html,1,['monitor'],['monitoring']
Energy Efficiency,"erge operation (drop data but keep customizations). void ResetAddress(); Set branch address to zero and free all allocated memory. void ResetDeleteObject(); -- Release ownership of any allocated objects. Note: This interface was added so that clone trees could; be told they do not own the allocated objects. void SetAddress(void* addobj); -- Point this branch at an object. For a sub-branch, addr is a pointer to the branch object. For a top-level branch the meaning of addr is as follows:. If addr is zero, then we allocate a branch object; internally and the branch is the owner of the allocated; object, not the caller. However the caller may obtain; a pointer to the branch object with GetObject(). Example:. branch->SetAddress(0);; Event* event = branch->GetObject();; ... Do some work. If addr is not zero, but the pointer addr points at is; zero, then we allocate a branch object and set the passed; pointer to point at the allocated object. The caller; owns the allocated object and is responsible for deleting; it when it is no longer needed. Example:. Event* event = 0;; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. If addr is not zero and the pointer addr points at is; also not zero, then the caller has allocated a branch; object and is asking us to use it. The caller owns it; and must delete it when it is no longer needed. Example:. Event* event = new Event();; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. These rules affect users of TTree::Branch(),; TTree::SetBranchAddress(), and TChain::SetBranchAddress(); as well because those routines call this one. An example of a tree with branches with objects allocated; and owned by us:. TFile* f1 = new TFile(""myfile_original.root"");; TTree* t1 = (TTree*) f->Get(""MyTree"");; TFile* f2 = new TFile(""myfile_copy.root"", ""recreate"");; TTree* t2 = t1->Clone(0);; for (Int_t i = 0; i < 10; ++i) {; t1->GetEntry(i);; t2->Fill();; }; t2->Write(); delete f2;; f2 = 0;; delete f1;; f1 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBranchElement.html:31509,allocate,allocated,31509,root/html532/TBranchElement.html,https://root.cern,https://root.cern/root/html532/TBranchElement.html,8,['allocate'],['allocated']
Energy Efficiency,"erial * Mixture(const char* name, Float_t* a, Float_t* z, Double_t dens, Int_t nelem, Float_t* wmat, Int_t uid); Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem; materials defined by arrays A,Z and WMAT, having an unique id. TGeoMaterial * Mixture(const char* name, Double_t* a, Double_t* z, Double_t dens, Int_t nelem, Double_t* wmat, Int_t uid); Create mixture OR COMPOUND IMAT as composed by THE BASIC nelem; materials defined by arrays A,Z and WMAT, having an unique id. TGeoMedium * Medium(const char* name, Int_t numed, Int_t nmat, Int_t isvol, Int_t ifield, Double_t fieldm, Double_t tmaxfd, Double_t stemax, Double_t deemax, Double_t epsil, Double_t stmin); Create tracking medium. numed tracking medium number assigned; name tracking medium name; nmat material number; isvol sensitive volume flag; ifield magnetic field; fieldm max. field value (kilogauss); tmaxfd max. angle due to field (deg/step); stemax max. step allowed; deemax max. fraction of energy lost in a step; epsil tracking precision (cm); stmin min. step due to continuous processes (cm). ifield = 0 if no magnetic field; ifield = -1 if user decision in guswim;; ifield = 1 if tracking performed with g3rkuta; ifield = 2 if tracking; performed with g3helix; ifield = 3 if tracking performed with g3helx3. void Node(const char* name, Int_t nr, const char* mother, Double_t x, Double_t y, Double_t z, Int_t irot, Bool_t isOnly, Float_t* upar, Int_t npar = 0); Create a node called <name_nr> pointing to the volume called <name>; as daughter of the volume called <mother> (gspos). The relative matrix is; made of : a translation (x,y,z) and a rotation matrix named <matIROT>.; In case npar>0, create the volume to be positioned in mother, according; its actual parameters (gsposp).; NAME Volume name; NUMBER Copy number of the volume; MOTHER Mother volume name; X X coord. of the volume in mother ref. sys.; Y Y coord. of the volume in mother ref. sys.; Z Z coord. of the volume in mother ref. sys.; IROT Rotation ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoBuilder.html:17438,energy,energy,17438,root/html528/TGeoBuilder.html,https://root.cern,https://root.cern/root/html528/TGeoBuilder.html,20,['energy'],['energy']
Energy Efficiency,"eric key of one of the elements in the; table, returns the string key of that element. Returns NULL if numKey; was not equal to any of the numeric keys in the table. Bool_t FieldSpecified(const char* field); Helper function for ParseXLFD(). Determines if a field in the XLFD was; set to a non-null, non-don't-care value. The return value is kFALSE if the field in the XLFD was not set and; should be ignored, kTRUE otherwise. field -- The field of the XLFD to check. Strictly speaking, only when; the string is ""*"" does it mean don't-care. However, an; unspecified or question mark is also interpreted as don't-care. const char * NameOfFont(TGFont* font); Given a font, return a textual string identifying it. char ** GetFontFamilies(); Return information about the font families that are available on the; current display. An array of strings is returned holding a list of all the available font; families. The array is terminated with a NULL pointer. void FreeFontFamilies(char** f); Delete an array of families allocated GetFontFamilies() method. TGFont * GetFontFromAttributes(FontAttributes_t* fa, TGFont* fontPtr); Given a desired set of attributes for a font, find a font with the; closest matching attributes and create a new TGFont object.; The return value is a pointer to a TGFont object that represents the; font with the desired attributes. If a font with the desired attributes; could not be constructed, some other font will be substituted; automatically. Every call to this procedure returns a new TGFont object, even if the; specified attributes have already been seen before. TGFont * GetNativeFont(const char* name, Bool_t fixedDefault = kTRUE); The return value is a pointer to an TGFont object that represents the; native font. If a native font by the given name could not be found,; the return value is NULL. Every call to this procedure returns a new TGFont object, even if the; name has already been seen before. The caller should call FreeFont; when the font is no longer need",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGFontPool.html:11563,allocate,allocated,11563,root/html528/TGFontPool.html,https://root.cern,https://root.cern/root/html528/TGFontPool.html,10,['allocate'],['allocated']
Energy Efficiency,"erited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGeoHelix.h>. Inheritance diagram for TGeoHelix:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EGeoHelixTypes. enum TGeoHelix::EGeoHelixTypes. EnumeratorkHelixNeedUpdate ; kHelixStraight ; kHelixCircle . Definition at line 37 of file TGeoHelix.h. Constructor & Destructor Documentation. ◆ TGeoHelix() [1/3]. TGeoHelix::TGeoHelix ; (; const TGeoHelix & ; ). privatedelete . ◆ TGeoHelix() [2/3]. TGeoHelix::TGeoHelix ; (; ). Dummy constructor. ; Definition at line 61 of file TGeoHelix.cxx. ◆ TGeoHelix() [3/3]. TGeoHelix::TGeoHelix ; (; Double_t ; curvature, . Double_t ; step, . Int_t ; charge = 1 . ). Normal constructor. ; Definition at line 82 of file TGeoHelix.cxx. ◆ ~TGeoHelix(). TGeoHelix::~TGeoHelix ; (; ). override . Destructor. ; Definition at line 104 of file TGeoHelix.cxx. Member Function Documentation. ◆ Class(). static TClass * TGeoHelix::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoHelix::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoHelix::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 73 of file TGeoHelix.h. ◆ ComputeSafeStep(). Double_t TGeoHelix::ComputeSafeStep ; (; Double_t ; epsil = 1E-6); const. Compute safe linear step that can be made such that the error between linear-helix extrapolation is less than EPSIL. ; Definition at line 114 of file TGeoHelix.cxx. ◆ DeclFileName(). static const char * TGeoHelix::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHelix.html:14301,charge,charge,14301,doc/master/classTGeoHelix.html,https://root.cern,https://root.cern/doc/master/classTGeoHelix.html,1,['charge'],['charge']
Energy Efficiency,"erivator::GSLFuncPointer& f, void* p = 0). Construct using a GSL function pointer type; @param f : free function pointer of the GSL required type; @param p : pointer to the object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Derivator.html:3474,adapt,adaptive,3474,root/html602/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Derivator.html,4,['adapt'],['adaptive']
Energy Efficiency,"erived classes: THnD (typedef for THnT<Double_t>): bin content held by a Double_t,; THnF (typedef for THnT<Float_t>): bin content held by a Float_t,; THnL (typedef for THnT<Long64_t>): bin content held by a Long64_t,; THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; THnC (typedef for THnT<Char_t>): bin content held by a Char_t,; They take name and title, the number of dimensions, and for each dimension the number of bins, the minimal, and the maximal value on the dimension's axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnF hn(""hn"", ""hn"", 2, bins, xmin, xmax);; ; Filling; A THn is filled just like a regular histogram, using THn::Fill(x, weight), where x is a n-dimensional Double_t value. To take errors into account, Sumw2() must be called before filling the histogram. Storage is allocated when the first bin content is stored. Projections; The dimensionality of a THn can be reduced by projecting it to 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or a THn. See the Projection() members. To only project parts of the histogram, call hn->GetAxis(12)->SetRange(from_bin, to_bin);; ; Conversion from other histogram classes; The static factory function THn::CreateHn() can be used to create a THn from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The created THn will have compatble storage type, i.e. calling CreateHn() on a TH2F will create a THnF. ; Definition at line 30 of file THn.h. Public Member Functions;  ~THn () override;  Destruct a THn. ;  ; void AddBinContent (const Int_t *idx, Double_t v=1.);  Forwards to THnBase::SetBinContent(). ;  ; void AddBinContent (Long64_t bin, Double_t v=1.) override;  ; void AddBinError2 (Long64_t bin, Double_t e2) override;  ; ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectAxisRange) const overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHn.html:1780,allocate,allocated,1780,doc/master/classTHn.html,https://root.cern,https://root.cern/doc/master/classTHn.html,1,['allocate'],['allocated']
Energy Efficiency,"erpreterInfo() && !fCollectionProxy) {; 5433 // There is no dictionary at all and we do not have; 5434 // the services of a collection proxy available, so; 5435 // use the streamer info to approximate calling a; 5436 // destructor.; 5437 ; 5438 Bool_t inRepo = kTRUE;; 5439 Bool_t currentVersion = kFALSE;; 5440 ; 5441 // Was this object allocated through TClass?; 5442 Version_t objVer = -1;; 5443 {; 5444 R__LOCKGUARD2(fOVRMutex);; 5445 RepoCont_t::iterator iter = fObjectVersionRepository.find(p);; 5446 if (iter == fObjectVersionRepository.end()) {; 5447 // No, it wasn't, skip special version handling.; 5448 //Error(""Destructor2"", ""Attempt to delete unregistered object of class '%s' at address %p!"", GetName(), p);; 5449 inRepo = kFALSE;; 5450 } else {; 5451 //objVer = iter->second;; 5452 for (; (iter != fObjectVersionRepository.end()) && (iter->first == p); ++iter) {; 5453 objVer = iter->second;; 5454 if (objVer == fClassVersion) {; 5455 currentVersion = kTRUE;; 5456 break;; 5457 }; 5458 }; 5459 }; 5460 }; 5461 ; 5462 if (!inRepo || currentVersion) {; 5463 // The object was allocated using code for the same class version; 5464 // as is loaded now. We may proceed without worry.; 5465 TVirtualStreamerInfo* si = GetStreamerInfo();; 5466 if (si) {; 5467 si->Destructor(p, dtorOnly);; 5468 } else {; 5469 Error(""Destructor"", ""No streamer info available for class '%s' version %d at address %p, cannot destruct emulated object!"", GetName(), fClassVersion, p);; 5470 Error(""Destructor"", ""length of fStreamerInfo is %d"", fStreamerInfo->GetSize());; 5471 Int_t i = fStreamerInfo->LowerBound();; 5472 for (Int_t v = 0; v < fStreamerInfo->GetSize(); ++v, ++i) {; 5473 Error(""Destructor"", ""fStreamerInfo->At(%d): %p"", i, fStreamerInfo->At(i));; 5474 if (fStreamerInfo->At(i) != nullptr) {; 5475 Error(""Destructor"", ""Doing Dump() ..."");; 5476 ((TVirtualStreamerInfo*)fStreamerInfo->At(i))->Dump();; 5477 }; 5478 }; 5479 }; 5480 } else {; 5481 // The loaded class version is not the same as the ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:208760,allocate,allocated,208760,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"erpreterInfo() && !fCollectionProxy) {; 5500 // There is no dictionary at all and we do not have; 5501 // the services of a collection proxy available, so; 5502 // use the streamer info to approximate calling a; 5503 // destructor.; 5504 ; 5505 Bool_t inRepo = kTRUE;; 5506 Bool_t currentVersion = kFALSE;; 5507 ; 5508 // Was this object allocated through TClass?; 5509 Version_t objVer = -1;; 5510 {; 5511 R__LOCKGUARD2(fOVRMutex);; 5512 RepoCont_t::iterator iter = fObjectVersionRepository.find(p);; 5513 if (iter == fObjectVersionRepository.end()) {; 5514 // No, it wasn't, skip special version handling.; 5515 //Error(""Destructor2"", ""Attempt to delete unregistered object of class '%s' at address %p!"", GetName(), p);; 5516 inRepo = kFALSE;; 5517 } else {; 5518 //objVer = iter->second;; 5519 for (; (iter != fObjectVersionRepository.end()) && (iter->first == p); ++iter) {; 5520 objVer = iter->second;; 5521 if (objVer == fClassVersion) {; 5522 currentVersion = kTRUE;; 5523 break;; 5524 }; 5525 }; 5526 }; 5527 }; 5528 ; 5529 if (!inRepo || currentVersion) {; 5530 // The object was allocated using code for the same class version; 5531 // as is loaded now. We may proceed without worry.; 5532 TVirtualStreamerInfo* si = GetStreamerInfo();; 5533 if (si) {; 5534 si->Destructor(p, dtorOnly);; 5535 } else {; 5536 Error(""Destructor"", ""No streamer info available for class '%s' version %d at address %p, cannot destruct emulated object!"", GetName(), fClassVersion, p);; 5537 Error(""Destructor"", ""length of fStreamerInfo is %d"", fStreamerInfo->GetSize());; 5538 Int_t i = fStreamerInfo->LowerBound();; 5539 for (Int_t v = 0; v < fStreamerInfo->GetSize(); ++v, ++i) {; 5540 Error(""Destructor"", ""fStreamerInfo->At(%d): %p"", i, fStreamerInfo->At(i));; 5541 if (fStreamerInfo->At(i) != nullptr) {; 5542 Error(""Destructor"", ""Doing Dump() ..."");; 5543 ((TVirtualStreamerInfo*)fStreamerInfo->At(i))->Dump();; 5544 }; 5545 }; 5546 }; 5547 } else {; 5548 // The loaded class version is not the same as the ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:211511,allocate,allocated,211511,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"erridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ClearAll ();  ; void CreateMVAHistorgrams ();  ; MethodBase * CurrentMethod ();  ; UInt_t CurrentMethodIdx ();  ; void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ;  ; void DeclareOptions ();  ; void FindMVACut (MethodBase *method);  find the CUT on the individual MVA that defines an event as correct or misclassified (to be used in the boosting process) ;  ; Double_t GetBoostROCIntegral (Bool_t, Types::ETreeType, Bool_t CalcOverlapIntergral=kFALSE);  Calculate the ROC integral of a single classifier or even the whole boosted classifier. ;  ; void Init ();  ; void InitHistos ();  initialisation routine ;  ; void MonitorBoost (Types::EBoostStage stage, UInt_t methodIdx=0);  fill various monitoring histograms from information of the individual classifiers that have been boosted. ;  ; void PrintResults (const TString &, std::vector< Double_t > &, const Double_t) const;  ; void ProcessOptions ();  process user options ;  ; void ResetBoostWeights ();  resetting back the boosted weights of the events to 1 ;  ; Double_t SingleBoost (MethodBase *method);  ; void SingleTrain ();  initialization ;  ; virtual void TestClassification ();  initialization ;  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteMonitoringHistosToFile (void) const;  write special monitoring histograms to file dummy implementation here --------------— ;  . Private Attributes; Double_t fAdaBoostBeta;  ADA boost parameter, default is 1. ;  ; Double_t fBaggedSampleFraction;  rel.Size of bagged sample ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:27833,monitor,monitoring,27833,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['monitor'],['monitoring']
Energy Efficiency,"erridevirtual . Decrement level. ; Implements TBuffer.; Definition at line 130 of file TBufferFile.cxx. ◆ GetInfo(). TVirtualStreamerInfo * TBufferFile::GetInfo ; (; ). inlineoverridevirtual . Implements TBuffer.; Definition at line 93 of file TBufferFile.h. ◆ IncrementLevel(). void TBufferFile::IncrementLevel ; (; TVirtualStreamerInfo * ; info). overridevirtual . Increment level. ; Implements TBuffer.; Definition at line 121 of file TBufferFile.cxx. ◆ IsA(). TClass * TBufferFile::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TBuffer.; Reimplemented in TMessage, and TBufferSQL.; Definition at line 265 of file TBufferFile.h. ◆ operator=(). void TBufferFile::operator= ; (; const TBufferFile & ; ). protecteddelete . not implemented . ◆ ReadArray() [1/13]. Int_t TBufferFile::ReadArray ; (; Bool_t *& ; b). overridevirtual . Read array of bools from the I/O buffer. ; Returns the number of bools read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 730 of file TBufferFile.cxx. ◆ ReadArray() [2/13]. Int_t TBufferFile::ReadArray ; (; Char_t *& ; c). overridevirtual . Read array of characters from the I/O buffer. ; Returns the number of characters read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 758 of file TBufferFile.cxx. ◆ ReadArray() [3/13]. Int_t TBufferFile::ReadArray ; (; Double_t *& ; d). overridevirtual . Read array of doubles from the I/O buffer. ; Returns the number of doubles read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 934 of file TBufferFile.cxx. ◆ ReadArray() [4/13]. Int_t TBufferFile::ReadArray ; (; Float_t *& ; f). overridevirtual . Read array of floats from the I/O buffer. ; Returns the number of floats read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:46161,allocate,allocated,46161,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['allocate'],['allocated']
Energy Efficiency,"erridevirtual . Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ; Reimplemented from RooAbsArg.; Definition at line 105 of file RooAbsCategoryLValue.h. ◆ numBins(). Int_t RooAbsCategoryLValue::numBins ; (; const char * ; rangeName = nullptr); const. overridevirtual . Return the number of fit bins ( = number of types ) ; Implements RooAbsLValue.; Definition at line 189 of file RooAbsCategoryLValue.cxx. ◆ operator=() [1/3]. RooAbsArg & RooAbsCategoryLValue::operator= ; (; const char * ; label). Assignment operator from string pointer. ; Definition at line 77 of file RooAbsCategoryLValue.cxx. ◆ operator=() [2/3]. RooAbsArg & RooAbsCategoryLValue::operator= ; (; const RooAbsCategory & ; other). Assignment from another RooAbsCategory. ; This will use the state name of the other object to set the corresponding state. This is less efficient then directly assigning the state index. ; Definition at line 89 of file RooAbsCategoryLValue.cxx. ◆ operator=() [3/3]. RooAbsArg & RooAbsCategoryLValue::operator= ; (; int ; index). Assignment operator from integer index number. ; Definition at line 66 of file RooAbsCategoryLValue.cxx. ◆ randomize(). void RooAbsCategoryLValue::randomize ; (; const char * ; rangeName = nullptr). overridevirtual . Randomize current value. ; If the result is not in the range, the randomisation is repeated. ; Implements RooAbsLValue.; Definition at line 136 of file RooAbsCategoryLValue.cxx. ◆ setBin(). void RooAbsCategoryLValue::setBin ; (; Int_t ; ibin, . const char * ; rangeName = nullptr . ). overridevirtual . Set category to i-th fit bin, which is the i-th registered state. ; Implements RooAbsLValue.; Definition at line 163 of file RooAbsCategoryLValue.cxx. ◆ setConstant(). void RooAbsCategoryLValue::setConstant ; (; bool ; value = true). inline . Definition at line 100 of file RooAbsCategoryLValue.h. ◆ setIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategoryLValue.html:51042,efficient,efficient,51042,doc/master/classRooAbsCategoryLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategoryLValue.html,1,['efficient'],['efficient']
Energy Efficiency,"ers from the I/O buffer. Returns the number of; characters read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Short_t*& h); Read array of shorts from the I/O buffer. Returns the number of shorts; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Int_t*& i); Read array of ints from the I/O buffer. Returns the number of ints; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long_t*& l); Read array of longs from the I/O buffer. Returns the number of longs; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long64_t*& l); Read array of long longs from the I/O buffer. Returns the number of; long longs read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Float_t*& f); Read array of floats from the I/O buffer. Returns the number of floats; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Double_t*& d); Read array of doubles from the I/O buffer. Returns the number of doubles; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArrayFloat16(Float_t*& f, TStreamerElement* ele = 0); Read array of floats (written as truncated float) from the I/O buffer.; Returns the number of floats read.; If argument is a 0 pointer then space will be allocated for the array.; see comments about Float16_t encoding at TBufferFile::WriteFloat16. Int_t ReadArrayDouble32(Double_t*& d, TStreamerElement* ele = 0); Read array of doubles (written as float) from the I/O buffer.; Returns the number of doubles read.; If argument is a 0 pointer then space will be allocated for the array.; see comments about Double32_t encoding at TBufferFile::WriteDouble32. Int_t ReadStaticArray(Bool_t* b); Read array of bools from the I/O buffer. Returns the number of bools; read. Int_t ReadStaticArray(Char_t* c); Read array of ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBufferFile.html:27860,allocate,allocated,27860,root/html528/TBufferFile.html,https://root.cern,https://root.cern/root/html528/TBufferFile.html,10,['allocate'],['allocated']
Energy Efficiency,"ers; 6.5 Interpretation of parameter errors; 6.6 Convergence in \(\mbox{MIGRAD}\), and positive–definiteness; 6.7 Additional trouble–shooting. 7 A complete example; 7.1 The user’s \(\mbox{FCN}\); 7.2 The user’s main program. Minuit 2; *** Fred JAMES and Matthias WINKLER CERN, Geneva ***; 1 Foreword; 1.1 What M is intended to do; M is conceived as a tool to find the minimum value of a multi-parameter function (the “\(\mbox{FCN}\)”) and analyze the shape of the function around the minimum. The principal application is foreseen for statistical analysis, working on chisquare or log-likelihood functions, to compute the best-fit parameter values and uncertainties, including correlations between the parameters. It is especially suited to handle difficult problems, including those which may require guidance in order to find the correct solution.; 1.2 What M is not intended to do; Although M will of course solve easy problems faster than complicated ones, it is not intended for the repeated solution of identically parametrized problems (such as track fitting in a detector) where a specialized program will in general be much more efficient.; 1.3 Further remarks; M was initially written in Fortran around 1975-1980 at CERN by Fred James @bib-MINUIT. Its main field of usage is statistical data analysis of experimental data recorded at CERN, but it is also used by people doing data analysis outside CERN or outside high energy physics (HEP). In 2002 Fred James started a project aiming to re-implement M in an object-oriented way using .; More information about recent developments, releases and installation can be obtained from the M homepage @bib-C++MINUIT.; The names of M applications are written in capital letters (e.g. \(\mbox{MIGRAD}\), \(\mbox{MINOS}\), \(\mbox{CONTOURS}\)), the corresponding names of the classes are written using sans-serif font type (MnMigrad, MnMinos, MnContours).; 2 Introduction: M basic concepts; [sec:intro]; 2.1 The organization of M; The M package acts o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:2381,efficient,efficient,2381,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,2,['efficient'],['efficient']
Energy Efficiency,"erse energy larger than 30 GeV; df[s] = df[s].Filter(""trigE || trigM"")\; .Filter(""met_et > 30000""); ; # Find events with exactly one good lepton; df[s] = df[s].Define(""good_lep"", ""lep_isTightID && lep_pt > 35000 && lep_ptcone30 / lep_pt < 0.1 && lep_etcone20 / lep_pt < 0.1"")\; .Filter(""ROOT::VecOps::Sum(good_lep) == 1""); ; # Apply additional cuts in case the lepton is an electron or muon; df[s] = df[s].Define(""idx"", ""ROOT::VecOps::ArgMax(good_lep)"")\; .Filter(""GoodElectronOrMuon(lep_type[idx], lep_pt[idx], lep_eta[idx], lep_phi[idx], lep_E[idx], lep_trackd0pvunbiased[idx], lep_tracksigd0pvunbiased[idx], lep_z0[idx])""); ; # Apply luminosity, scale factors and MC weights for simulated events; for s in samples:; if ""data"" in s:; df[s] = df[s].Define(""weight"", ""1.0""); else:; df[s] = df[s].Define(""weight"", ""scaleFactor_ELE * scaleFactor_MUON * scaleFactor_LepTRIGGER * scaleFactor_PILEUP * mcWeight * {} / {} * {}"".format(xsecs[s], sumws[s], lumi)); ; # Compute transverse mass of the W boson using the lepton and the missing transverse energy and make a histogram; ROOT.gInterpreter.Declare(""""""; float ComputeTransverseMass(float met_et, float met_phi, float lep_pt, float lep_eta, float lep_phi, float lep_e); {; ROOT::Math::PtEtaPhiEVector met(met_et, 0, met_phi, met_et);; ROOT::Math::PtEtaPhiEVector lep(lep_pt, lep_eta, lep_phi, lep_e);; return (met + lep).Mt() / 1000.0;; }; """"""); ; histos = {}; for s in samples:; df[s] = df[s].Define(""mt_w"", ""ComputeTransverseMass(met_et, met_phi, lep_pt[idx], lep_eta[idx], lep_phi[idx], lep_E[idx])""); histos[s] = df[s].Histo1D(ROOT.RDF.TH1DModel(s, ""mt_w"", 24, 60, 180), ""mt_w"", ""weight""); ; # Run the event loop and merge histograms of the respective processes; ; # RunGraphs allows to run the event loops of the separate RDataFrame graphs; # concurrently. This results in an improved usage of the available resources; # if each separate RDataFrame can not utilize all available resources, e.g.,; # because not enough data is available.; ROOT.RDF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html:5146,energy,energy,5146,doc/master/df105__WBosonAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df105__WBosonAnalysis_8py.html,1,['energy'],['energy']
Energy Efficiency,"ersion ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  THnSparse ();  Construct an empty THnSparse. ;  ;  THnSparse (const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin, const Double_t *xmax, Int_t chunksize);  Construct a THnSparse with ""dim"" dimensions, with chunksize as the size of the chunks. ;  ; THnSparseArrayChunk * AddChunk ();  Create a new chunk of bin content. ;  ; void FillBin (Long64_t bin, Double_t w) override;  Increment the bin content of ""bin"" by ""w"", return the bin index. ;  ; void FillExMap ();  We have been streamed; set up fBins. ;  ; virtual TArray * GenerateArray () const =0;  ; Long64_t GetBinIndexForCurrentBin (Bool_t allocate);  Return the index for fCurrentBinIndex. ;  ; THnSparseArrayChunk * GetChunk (Int_t idx) const;  ; THnSparseCompactBinCoord * GetCompactCoord () const;  Return THnSparseCompactBinCoord object. ;  ; void InitStorage (Int_t *nbins, Int_t chunkSize) override;  Initialize the storage of a histogram created via Init() ;  ; void Reserve (Long64_t nbins) override;  Initialize storage for nbins. ;  ;  Protected Member Functions inherited from THnBase;  THnBase ();  ;  THnBase (const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin, const Double_t *xmax);  Construct a THnBase with ""dim"" dimensions, ""nbins"" holds the number of bins for each dimension; ""xmin"" and ""xmax"" the minimal and maximal value for each dimension. ;  ;  THnBase (const char *name, const char *title, Int_t dim, const Int_t *nbins, const std::vector< std::vector< double > > &xbins);  ;  THnBase (const THnBase &other);  ;  THnBase (THnBase &&other);  ; void AddInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:23434,allocate,allocate,23434,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,1,['allocate'],['allocate']
Energy Efficiency,"ersion 1 was introduced with sqlite 3.6, version 2 with sqlite 3.7.8, version 3 with sqlite 3.7.17; 160 sqlite3_io_methods io_methods;; 161 memset(&io_methods, 0, sizeof(io_methods));; 162 io_methods.iVersion = 1;; 163 io_methods.xClose = VfsRdOnlyClose;; 164 io_methods.xRead = VfsRdOnlyRead;; 165 io_methods.xWrite = VfsRdOnlyWrite;; 166 io_methods.xTruncate = VfsRdOnlyTruncate;; 167 io_methods.xSync = VfsRdOnlySync;; 168 io_methods.xFileSize = VfsRdOnlyFileSize;; 169 io_methods.xLock = VfsRdOnlyLock;; 170 io_methods.xUnlock = VfsRdOnlyUnlock;; 171 io_methods.xCheckReservedLock = VfsRdOnlyCheckReservedLock;; 172 io_methods.xFileControl = VfsRdOnlyFileControl;; 173 io_methods.xSectorSize = VfsRdOnlySectorSize;; 174 io_methods.xDeviceCharacteristics = VfsRdOnlyDeviceCharacteristics;; 175 return io_methods;; 176}; 177 ; 178////////////////////////////////////////////////////////////////////////////; 179/// Fills a new VfsRootFile struct enclosing a Davix file; 180int VfsRdOnlyOpen(sqlite3_vfs * /*vfs*/, const char *zName, sqlite3_file *pFile, int flags, int * /*pOutFlags*/); 181{; 182 // Storage for the VfsRootFile structure has been already allocated by sqlite, so we use placement new; 183 VfsRootFile *p = new (pFile) VfsRootFile();; 184 p->pFile.pMethods = nullptr;; 185 ; 186 // This global struct contains the function pointers to all the callback operations that act on an open database.; 187 // It is passed via the pFile struct back to sqlite so that it can call back to the functions provided above.; 188 static const sqlite3_io_methods io_methods = GetSqlite3IoMethods();; 189 ; 190 if (flags & (SQLITE_OPEN_READWRITE | SQLITE_OPEN_DELETEONCLOSE | SQLITE_OPEN_EXCLUSIVE)); 191 return SQLITE_IOERR;; 192 ; 193 p->fRawFile = ROOT::Internal::RRawFile::Create(zName);; 194 if (!p->fRawFile) {; 195 ::Error(""VfsRdOnlyOpen"", ""Cannot open %s\n"", zName);; 196 return SQLITE_IOERR;; 197 }; 198 ; 199 p->pFile.pMethods = &io_methods;; 200 return SQLITE_OK;; 201}; 202 ; 203// The foll",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RSqliteDS_8cxx_source.html:8284,allocate,allocated,8284,doc/master/RSqliteDS_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RSqliteDS_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"erties of the shape.; Note: At present modifications to the shapes are local to the viewer - they are not propagated back to external objects/client that published to the viewer. The changes are preserved only until the viewer is closed. In some cases, this will never be feasible as there is not a one-to-one correspondence between a shape in the viewer and a single external object in which the modification could be stored.; 9.13.2.10 Colors / Style; Viewer Controls Pane ‘Style’ tab.; A full description of OpenGL materials, colors and lighting is beyond the scope of this document. You should refer to the OpenGL programming manual (Red Book) for a full discussion. In most cases adjustment of the Diffuse color material + Opacity/Shine properties is sufficient to achieve desired results.; A shape has four-color materials (components):. Diffuse; Ambient; Specular; Emissive. For each of these you can select the component via the radio buttons. Each component can have the red, green and blue values for the component adjusted via the sliders. You can apply this adjustment to the shape itself, or to all shapes sharing a common ‘family’. Shapes of the same family have external objects with the same TObject name string. You can also adjust the ‘Opacity’ and ‘Shine’ for the shapes materials via the sliders.; 9.13.2.11 Geometry; Viewer Controls Pane ‘Geometry’ tab.; Review and modify the shapes X/Y/Z center and scaling factors via the edit boxes. Selection and editing of shapes is not available via the API at present.; 9.13.2.12 Outputting Viewer Contents; The current viewer rendering can be output to an external EPS or PDF, using the options under the ‘File’ menu on the top menu bar. The file is named ‘viewer.eps’ or ‘viewer.pdf’ and written to the current ROOT directory.; 9.13.3 The X3D Viewer; The X3D viewer is a fairly simple and limited viewer, capable of showing basic lines and polygons. It lacks the quality, performance and more advanced features of the GL Viewer, and addi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:399853,green,green,399853,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['green'],['green']
Energy Efficiency,"erver of "" << plotVar->GetName() << std::endl ;; 2927 projectedVars.remove(*tmp) ;; 2928 }; 2929 }; 2930 ; 2931 if (!silent) {; 2932 coutW(Plotting) << ""RooAbsReal::plotOn("" << GetName(); 2933 << "") WARNING: cannot project out frame variable (""; 2934 << found->GetName() << ""), ignoring"" << std::endl ;; 2935 }; 2936 }; 2937 ; 2938 // Take out all non-dependents of function; 2939 for(RooAbsArg * arg : *allVars) {; 2940 if (!dependsOnValue(*arg)) {; 2941 projectedVars.remove(*arg,true) ;; 2942 ; 2943 cxcoutD(Plotting) << ""RooAbsReal::plotOn("" << GetName(); 2944 << "") function doesn't depend on projection variable ""; 2945 << arg->GetName() << "", ignoring"" << std::endl ;; 2946 }; 2947 }; 2948}; 2949 ; 2950 ; 2951 ; 2952 ; 2953////////////////////////////////////////////////////////////////////////////////; 2954/// If true, the current pdf is a selected component (for use in plotting); 2955 ; 2956bool RooAbsReal::isSelectedComp() const; 2957{; 2958 return _selectComp || _globalSelectComp ;; 2959}; 2960 ; 2961 ; 2962 ; 2963////////////////////////////////////////////////////////////////////////////////; 2964/// Global switch controlling the activation of the selectComp() functionality; 2965 ; 2966void RooAbsReal::globalSelectComp(bool flag); 2967{; 2968 _globalSelectComp = flag ;; 2969}; 2970 ; 2971 ; 2972 ; 2973 ; 2974////////////////////////////////////////////////////////////////////////////////; 2975/// Create an interface adaptor f(vars) that binds us to the specified variables; 2976/// (in arbitrary order). For example, calling bindVars({x1,x3}) on an object; 2977/// F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the; 2978/// current values of x2 and x4. The caller takes ownership of the returned adaptor.; 2979 ; 2980RooFit::OwningPtr<RooAbsFunc> RooAbsReal::bindVars(const RooArgSet &vars, const RooArgSet* nset, bool clipInvalid) const; 2981{; 2982 auto binding = std::make_unique<RooRealBinding>(*this,vars,nset,clipInvalid);; 2983 if(!binding->isVal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:128964,adapt,adaptor,128964,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['adapt'],['adaptor']
Energy Efficiency,"erything within the circle belongs to the TGraphPolargram. void Draw(Option_t* options = """"); Draw Polargram. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Indicate that there is something to click here. Int_t FindAlign(Double_t angle); Find the alignement rule to apply for TText::SetTextAlign(Short_t). Double_t FindTextAngle(Double_t theta); Determine the orientation of the polar labels according to their angle. void Init(); Initiallize some of the fields of TGraphPolargram. void Paint(Option_t* options = """"); Paint TGraphPolargram. void PaintCircle(Double_t x, Double_t y, Double_t r, Double_t phimin, Double_t phimax, Double_t theta); This is simplifed from TEllipse::PaintEllipse.; Draw this ellipse with new coordinates. void PaintPolarDivisions(Bool_t noLabels); Draw Polar divisions.; Check for editable pad or create default. void PaintRadialDivisions(Bool_t drawaxis); Paint radial divisions.; Check for editable pad or create default. void ReduceFraction(Int_t Num, Int_t Denom, Int_t& rnum, Int_t& rden); Reduce fractions. void SetAxisAngle(Double_t angle = 0); Set axis angle. void SetNdivPolar(Int_t Ndiv = 508); Set the number of Polar divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major Polar divisions.; j sets the minor Polar divisions. void SetNdivRadial(Int_t Ndiv = 508); Set the number of radial divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major radial divisions.; j sets the minor radial divisions. void SetPolarLabel(Int_t div, const TString& label); Set some specified polar labels, used in the case of a spider plot. void SetPolarLabelColor(Color_t tcolorangular = 1); Set Polar labels color. void SetPolarLabelFont(Font_t tfontangular = 62). void SetPolarLabelSize(Double_t angularsize = 0.04); Set angular labels size. void SetPolarOffset(Double_t PolarOffset = 0.04); Set the labels offset. void SetRadialLabelColor(Color_t tcolorradial = 1); Set radial labels color. void SetRadialLabelFont(Font_t tfontradial = 62); Set radial ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPolargram.html:12132,Reduce,ReduceFraction,12132,root/html532/TGraphPolargram.html,https://root.cern,https://root.cern/root/html532/TGraphPolargram.html,4,['Reduce'],"['Reduce', 'ReduceFraction']"
Energy Efficiency,"erything within the circle belongs to the TGraphPolargram. void Draw(Option_t* options = """"); Draw Polargram. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Indicate that there is something to click here. Int_t FindAlign(Double_t angle); Find the alignement rule to apply for TText::SetTextAlign(Short_t). Double_t FindTextAngle(Double_t theta); Determine the orientation of the polar labels according to their angle. void Init(); Initiallize some of the fields of TGraphPolargram. void Paint(Option_t* options = """"); Paint TGraphPolargram. void PaintCircle(Double_t x, Double_t y, Double_t r, Double_t phimin, Double_t phimax, Double_t theta); This is simplifed from TEllipse::PaintEllipse.; Draw this ellipse with new coordinates. void PaintPolarDivisions(Bool_t noLabels); Draw Polar divisions.; Check for editable pad or create default. void PaintRadialDivisions(Bool_t drawaxis); Paint radial divisions.; Check for editable pad or create default. void ReduceFraction(Int_t Num, Int_t Denom, Int_t& rnum, Int_t& rden); Reduce fractions. void SetAxisAngle(Double_t angle = 0); Set axis angle. void SetNdivPolar(Int_t Ndiv = 508); Set the number of Polar divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major Polar divisions.; j sets the minor Polar divisions. void SetNdivRadial(Int_t Ndiv = 508); Set the number of radial divisions: enter a number ij with 0<i<99; 0<j<99; i sets the major radial divisions.; j sets the minor radial divisions. void SetPolarLabel(Int_t div, const TString& label); Set some specified polar labels, used in the case of a spider plot. void SetPolarLabelColor(Color_t tcolorangular = 1); Set Polar labels color. void SetPolarLabelFont(Font_t tfontangular = 62). void SetPolarLabelSize(Double_t angularsize = 0.040000000000000001); Set angular labels size. void SetPolarOffset(Double_t PolarOffset = 0.040000000000000001); Set the labels offset. void SetRadialLabelColor(Color_t tcolorradial = 1); Set radial labels color. void SetRadialLabelFont(Font_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphPolargram.html:12844,Reduce,ReduceFraction,12844,root/html602/TGraphPolargram.html,https://root.cern,https://root.cern/root/html602/TGraphPolargram.html,4,['Reduce'],"['Reduce', 'ReduceFraction']"
Energy Efficiency,"es are parallel which allows representing data in much more than three dimensions. To show a set of points in Parallel Coordinates, a set of parallel lines is drawn, typically vertical and equally spaced. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes. The position of the vertex on the i-th axis corresponds to the i-th coordinate of the point. The three following figures show some very simple examples:. The Parallel Coordinates representation of the six dimensional point (-5,3,4,2,0,1). The line y = -3x+20 and a circle in Parallel Coordinates. The Parallel Coordinates technique is good at: spotting irregular events, seeing the data trend, finding correlations and clusters. Its main weakness is the cluttering of the output. Because each “point” in the multidimensional space is represented as a line, the output is very quickly opaque and therefore it is difficult to see the data clusters. Most of the work done about Parallel Coordinates is to find techniques to reduce the output’s cluttering. The Parallel Coordinates plots in ROOT have been implemented as a new plotting option “PARA” in the TTree::Draw()method. To demonstrate how the Parallel Coordinates works in ROOT we will use the tree produced by the following “pseudo C++” code:; void parallel_example() {; TNtuple *nt = new TNtuple(""nt"",""Demo ntuple"",""x:y:z:u:v:w:a:b:c"");; for (Int_t i=0; i<3000; i++) {; nt->Fill( rnd, rnd, rnd, rnd, rnd, rnd, rnd, rnd, rnd );; nt->Fill( s1x, s1y, s1z, s2x, s2y, s2z, rnd, rnd, rnd );; nt->Fill( rnd, rnd, rnd, rnd, rnd, rnd, rnd, s3y, rnd );; nt->Fill( s2x-1, s2y-1, s2z, s1x+.5, s1y+.5, s1z+.5, rnd, rnd, rnd );; nt->Fill( rnd, rnd, rnd, rnd, rnd, rnd, rnd, rnd, rnd );; nt->Fill( s1x+1, s1y+1, s1z+1, s3x-2, s3y-2, s3z-2, rnd, rnd, rnd );; nt->Fill( rnd, rnd, rnd, rnd, rnd, rnd, s3x, rnd, s3z );; nt->Fill( rnd, rnd, rnd, rnd, rnd, rnd, rnd, rnd, rnd );; }; The data set generated has:. 9 variables: x, y, z, u, v, w, a, b, c.; 3000*8 = 24",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:611226,reduce,reduce,611226,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['reduce'],['reduce']
Energy Efficiency,"es read-only access to a single field of the ntuple. More...;  ; class  ROOT::Experimental::RNTupleWriteOptions;  Common user-tunable settings for storing ntuples. More...;  ; class  ROOT::Experimental::RNTupleWriteOptionsDaos;  DAOS-specific user-tunable settings for storing ntuples. More...;  ; class  ROOT::Experimental::RNTupleWriter;  An RNTuple that gets filled with entries (data) and writes them to storage. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  ROOT::Experimental::Internal::RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  ROOT::Experimental::Internal::RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  ROOT::Experimental::Internal::RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  ROOT::Experimental::Internal::RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  ROOT::Experimental::Internal::RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  ROOT::Experimental::Internal::RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  ROOT::Experimental::RClusterDescriptor::RPageRange;  Records the partition of data into pages for a particular column in a particular cluster. More...;  ; class  ROOT::Experimental::Internal::RPageRef;  Reference to a page stored in the page pool. More...;  ; class  ROOT::Experimental::Internal::RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  ROOT::Experimental::Internal::RPageSinkBuf;  Wrapper sink that coalesc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__NTuple.html:11766,allocate,allocate,11766,doc/master/group__NTuple.html,https://root.cern,https://root.cern/doc/master/group__NTuple.html,1,['allocate'],['allocate']
Energy Efficiency,"es which share our addressesDefinition TTree.h:135; TTree::Classstatic TClass * Class(); TTree::kLoadTree@ kLoadTreeDefinition TTree.h:221; TTree::CopyAddressesvirtual void CopyAddresses(TTree *, bool undo=false)Set branch addresses of passed tree equal to ours.Definition TTree.cxx:3299; TTree::GetListOfFriendsvirtual TList * GetListOfFriends() constDefinition TTree.h:530; TTree::fReadEntryLong64_t fReadEntry! Number of the entry being processedDefinition TTree.h:107; TTree::GetNbranchesvirtual Int_t GetNbranches()Definition TTree.h:542; TTree::FindLeafvirtual TLeaf * FindLeaf(const char *name)Find leaf..Definition TTree.cxx:4916; TTree::fDirectoryTDirectory * fDirectory! Pointer to directory holding this treeDefinition TTree.h:121; TTree::kNeedEnableDecomposedObj@ kNeedEnableDecomposedObjDefinition TTree.h:244; TTree::kNoCheck@ kNoCheckDefinition TTree.h:243; TTree::kMissingBranch@ kMissingBranchDefinition TTree.h:233; TTree::ResetBranchAddressesvirtual void ResetBranchAddresses()Tell all of our branches to drop their current objects and allocate new ones.Definition TTree.cxx:8075; TTree::SetNamevoid SetName(const char *name) overrideChange the name of this tree.Definition TTree.cxx:9205; TTree::SetCacheSizevirtual Int_t SetCacheSize(Long64_t cachesize=-1)Set maximum size of the file cache .Definition TTree.cxx:8683; TTree::AddClonevoid AddClone(TTree *)Add a cloned tree to our list of trees to be notified whenever we change our branch addresses or when...Definition TTree.cxx:1219; TTree::CheckBranchAddressTypevirtual Int_t CheckBranchAddressType(TBranch *branch, TClass *ptrClass, EDataType datatype, bool ptr)Check whether or not the address described by the last 3 parameters matches the content of the branch...Definition TTree.cxx:2867; TTree::GetFileNumbervirtual Int_t GetFileNumber() constDefinition TTree.h:516; TTree::SetChainOffsetvirtual void SetChainOffset(Long64_t offset=0)Definition TTree.h:649; TTree::fPacketSizeInt_t fPacketSize! Number of entries in one",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:152184,allocate,allocate,152184,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency,"es. ;  ; Int_t GetNumberOfInactiveSlaves () const;  Return number of inactive slaves, i.e. ;  ; Int_t GetNumberOfSlaves () const;  Return number of slaves as described in the config file. ;  ; Int_t GetNumberOfUniqueSlaves () const;  Return number of unique slaves, i.e. ;  ; Int_t GetQueryReference (Int_t qry, TString &ref);  Get reference for the qry-th query in fQueries (as displayed by ShowQueries). ;  ; Int_t GoMoreParallel (Int_t nWorkersToAdd);  Add nWorkersToAdd workers to current list of workers. ;  ; Int_t GoParallel (Int_t nodes, Bool_t accept=kFALSE, Bool_t random=kFALSE);  Go in parallel mode with at most ""nodes"" slaves. ;  ; Int_t HandleInputMessage (TSlave *wrk, TMessage *m, Bool_t deactonfail=kFALSE);  Analyze the received message. ;  ; void HandleSubmerger (TMessage *mess, TSlave *sl);  Process a message of type kPROOF_SUBMERGER. ;  ; void Interrupt (EUrgent type, ESlaves list=kActive);  Send interrupt to master or slave servers. ;  ; void InterruptCurrentMonitor ();  If in active in a monitor set ready state. ;  ; Bool_t IsEndMaster () const;  ; Bool_t IsSync () const;  ; Int_t LoadPackage (const char *package, Bool_t notOnClient=kFALSE, TList *loadopts=0, TList *workers=0);  Load specified package. ;  ; void MarkBad (TSlave *wrk, const char *reason=0);  Add a bad slave server to the bad slave list and remove it from the active list and from the two monitor objects. ;  ; void MarkBad (TSocket *s, const char *reason=0);  Add slave with socket s to the bad slave list and remove if from the active list and from the two monitor objects. ;  ; Int_t ModifyWorkerLists (const char *ord, Bool_t add, Bool_t save);  Modify the worker active/inactive list by making the worker identified by the ordinal number 'ord' active (add == TRUE) or inactive (add == FALSE). ;  ; void NotifyLogMsg (const char *msg, const char *sfx=""\n"");  Notify locally 'msg' to the appropriate units (file, stdout, window) If defined, 'sfx' is added after 'msg' (typically a line-feed);. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:50330,monitor,monitor,50330,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['monitor'],['monitor']
Energy Efficiency,"es. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMonitor Class Reference. . Definition at line 36 of file TMonitor.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMonitor.html:1139,monitor,monitor,1139,doc/master/classTMonitor.html,https://root.cern,https://root.cern/doc/master/classTMonitor.html,1,['monitor'],['monitor']
Energy Efficiency,"es. TH3 as color boxes - (TGLVoxelPainter); The supported option is:. ""GLCOL"" : TH3 is drawn using semi-transparent colored boxes. See $ROOTSYS/tutorials/gl/glvox1.C. TF3 (implicit function) - (TGLTF3Painter); The supported option is:. ""GLTF3"" : Draw a TF3. Parametric surfaces - (TGLParametricPlot); $ROOTSYS/tutorials/gl/glparametric.C shows how to create parametric equations and visualize the surface. Interaction with the plots; General information.; All the interactions are implemented via standard methods DistancetoPrimitive and ExecuteEvent. That's why all the interactions with the OpenGL plots are possible i only when the mouse cursor is in the plot's area (the plot's area is the part of a the pad occupied by gl-produced picture). If the mouse cursor is not above gl-picture, the standard pad interaction is performed.; Selectable parts.; Different parts of the plot can be selected:. xoz, yoz, xoy back planes: When such a plane selected, it's highlighted in green if the dynamic slicing by this plane is supported, and it's highlighted in red, if the dynamic slicing is not supported. -*The plot itself*: On surfaces, the selected surface is outlined in red. (TF3 and ISO are not outlined). On lego plots, the selected bin is highlihted. The bin number and content are displayed in pad's status bar. In box plots, the box or sphere is highlighted and the bin info is displayed in pad's status bar. Rotation and zooming. Rotation:. When the plot is selected, it can be rotated by pressing and holding the left mouse button and move the cursor.; Zoom/Unzoom:. Mouse wheel or ‘'j’,'J','k','K'` keys.; Panning.; The selected plot can be moved in a pad's area by pressing and holding the left mouse button and the shift key. Box cut; Surface, iso, box, TF3 and parametric painters support box cut by pressing the ‘'c’or 'C'` key when the mouse cursor is in a plot's area. That will display a transparent box, cutting away part of the surface (or boxes) in order to show internal part of p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLHistPainter.html:3148,green,green,3148,doc/master/classTGLHistPainter.html,https://root.cern,https://root.cern/doc/master/classTGLHistPainter.html,1,['green'],['green']
Energy Efficiency,"es.; ; . void RGB2HLS(Float_t r, Float_t g, Float_t b, Float_t& h, Float_t& l, Float_t& s). Static method to compute HLS from RGB. The r,g,b triplet is between; [0,1], hue is between [0,360], light and satur are [0,1].; ; . void RGB2HSV(Float_t r, Float_t g, Float_t b, Float_t& h, Float_t& s, Float_t& v). Static method to compute HSV from RGB.; ; The input values:; ; r,g,b triplet is between [0,1].; ; The returned values:; ; The hue value runs from 0 to 360.; The saturation is the degree of strength or purity and is from 0 to 1.; Purity is how much white is added to the color, so S=1 makes the purest; color (no white).; Brightness value also ranges from 0 to 1, where 0 is the black.; . . void RGB2HLS(Int_t r, Int_t g, Int_t b, Int_t& h, Int_t& l, Int_t& s). Static method to compute HLS from RGB. The r,g,b triplet is between; [0,255], hue, light and satur are between [0,255].; ; . void SetRGB(Float_t r, Float_t g, Float_t b). Initialize this color and its associated colors.; ; . void Allocate(). Make this color known to the graphics system.; ; . Int_t GetColor(const char* hexcolor). Static method returning color number for color specified by; hex color string of form: #rrggbb, where rr, gg and bb are in; hex between [0,FF], e.g. ""#c0c0c0"".; ; If specified color does not exist it will be created with as; name ""#rrggbb"" with rr, gg and bb in hex between [0,FF].; ; . Int_t GetColor(Float_t r, Float_t g, Float_t b). Static method returning color number for color specified by; r, g and b. The r,g,b should be in the range [0,1].; ; If specified color does not exist it will be created; with as name ""#rrggbb"" with rr, gg and bb in hex between; [0,FF].; ; . Int_t GetColor(ULong_t pixel). Static method returning color number for color specified by; system dependent pixel value. Pixel values can be obtained, e.g.,; from the GUI color picker.; ; . Int_t GetColor(Int_t r, Int_t g, Int_t b). Static method returning color number for color specified by; r, g and b. The r,g,b should b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TColor.html:19565,Allocate,Allocate,19565,root/html532/TColor.html,https://root.cern,https://root.cern/root/html532/TColor.html,4,['Allocate'],['Allocate']
Energy Efficiency,"es; FitOptions(const char*) -- Classic fit options, provided for backward compatibility; FitOptions(....) -- Options to be used for fitting. All named arguments inside FitOptions(); are passed to RooAbsPdf::fitTo();; Verbose(Bool_t flag) -- Activate informational messages in event generation phase; Extended(Bool_t flag) -- Determine number of events for each sample anew from a Poisson distribution; Constrain(const RooArgSet& pars) -- Apply internal constraints on given parameters in fit and sample constrained parameter; values from constraint p.d.f for each toy.; ExternalConstraints(const RooArgSet& ) -- Apply internal constraints on given parameters in fit and sample constrained parameter; values from constraint p.d.f for each toy.; ProtoData(const RooDataSet&,; Bool_t randOrder) -- Prototype data for the event generation. If the randOrder flag is; set, the order of the dataset will be re-randomized for each generation; cycle to protect against systematic biases if the number of generated; events does not exactly match the number of events in the prototype dataset; at the cost of reduced precision; with mu equal to the specified number of events. RooMCStudy(const RooAbsPdf& genModel, const RooAbsPdf& fitModel, const RooArgSet& dependents, const char* genOptions = """", const char* fitOptions = """", const RooDataSet* genProtoData = 0, const RooArgSet& projDeps = RooArgSet()); OBSOLETE, RETAINED FOR BACKWARD COMPATIBILY. PLEASE; USE CONSTRUCTOR WITH NAMED ARGUMENTS. Constructor with a generator and fit model. Both models may point; to the same object. The 'dependents' set of variables is generated; in the generator phase. The optional prototype dataset is passed to; the generator. Available generator options; v - Verbose; e - Extended: use Poisson distribution for Nevts generated. Available fit options; See RooAbsPdf::fitTo(). ~RooMCStudy(); Destructor. void addModule(RooAbsMCStudyModule& module); Insert given RooMCStudy add-on module to the processing chain; of this MC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMCStudy.html:14308,reduce,reduced,14308,root/html526/RooMCStudy.html,https://root.cern,https://root.cern/root/html526/RooMCStudy.html,11,['reduce'],['reduced']
Energy Efficiency,"es; from 1..10, 1..5 (a(1,1)..a(10,5)). The present package provides all facilities to completely AVOID; returning matrices. Use ""TMatrixD A(TMatrixD::kTransposed,B);""; and other fancy constructors as much as possible. If one really needs; to return a matrix, return a TMatrixTLazy object instead. The; conversion is completely transparent to the end user, e.g.; ""TMatrixT m = THaarMatrixT(5);"" and _is_ efficient. Since TMatrixT et al. are fully integrated in ROOT, they of course; can be stored in a ROOT database. For usage examples see $ROOTSYS/test/stressLinear.cxx. Acknowledgements. 1. Oleg E. Kiselyov; First implementations were based on the his code . We have diverged; quite a bit since then but the ideas/code for lazy matrix and; ""nested function"" are 100% his .; You can see him and his code in action at http://okmij.org/ftp; 2. Chris R. Birchenhall,; We adapted his idea of the implementation for the decomposition; classes instead of our messy installation of matrix inversion; His installation of matrix condition number, using an iterative; scheme using the Hage algorithm is worth looking at !; Chris has a nice writeup (matdoc.ps) on his matrix classes at; ftp://ftp.mcc.ac.uk/pub/matclass/; 3. Mark Fischler and Steven Haywood of CLHEP; They did the slave labor of spelling out all sub-determinants; for Cramer inversion of (4x4),(5x5) and (6x6) matrices; The stack storage for small matrices was also taken from them; 4. Roldan Pozo of TNT (http://math.nist.gov/tnt/); He converted the EISPACK routines for the eigen-vector analysis to; C++ . We started with his implementation; 5. Siegmund Brandt (http://siux00.physik.uni-siegen.de/~brandt/datan; We adapted his (very-well) documented SVD routines. How to efficiently use this package. 1. Never return complex objects (matrices or vectors); Danger: For example, when the following snippet:; TMatrixD foo(int n); {; TMatrixD foom(n,n); fill_in(foom); return foom;; }; TMatrixD m = foo(5);; runs, it constructs matrix foo:foom,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTBase_double_.html:2454,adapt,adapted,2454,root/html528/TMatrixTBase_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTBase_double_.html,20,['adapt'],['adapted']
Energy Efficiency,"es; static Int_tRooPrintable::_nameLength; map<string,RooAbsData*>RooAbsData::_ownedComponentsOwned external components; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool; RooArgSetRooAbsData::_varsDimensions of this data set; RooArgSet_varsNoWgtVars without weight variable; RooRealVar*_wgtVarPointer to weight variable (if set); static RooAbsData::StorageTypeRooAbsData::defaultStorageType; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooDataSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooDataSet(); Default constructor for persistence. RooDataSet(const char* name, const char* title, const RooArgSet& vars, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Construct an unbinned dataset from a RooArgSet defining the dimensions of the data space. Optionally, data; can be imported at the time of construction. This constructor takes the following optional arguments. Import(TTree*) -- Import contents of given TTree. Only braches of the TTree that have names; corresponding to those of the RooAbsArgs that define the RooDataSet are; imported.; ImportFromFile(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataSet.html:19642,allocate,allocates,19642,root/html602/RooDataSet.html,https://root.cern,https://root.cern/root/html602/RooDataSet.html,4,['allocate'],['allocates']
Energy Efficiency,"ese objects if the internal viewer state changes. It does this presently by forcing a repaint on the attached TPad object - hence the reason for putting all publishing to the viewer in the attached pad objects Paint() method. We will likely remove this requirement in the future, indicating the rebuild request via a normal ROOT signal, which the client can detect. Physical IDs; TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const TBuffer3D & buffer, Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; TVirtualViewer3D::AddObjectvirtual Int_t AddObject(const TBuffer3D &buffer, Bool_t *addChildren=nullptr)=0; bool; unsigned int; If you use the first (simple) case a viewer using logical/physical pairs will generate IDs for each physical object internally. In the second you can specify a unique identifier from the client, which allows the viewer to be more efficient. It can now cache both logical and physical objects, and only discard physical objects no longer of interest as part of scene rebuilds. Child Objects; In many geometries there is a rigid containment hierarchy, and so if the viewer is not interested in a certain object due to limits/size then it will also not be interest in any of the contained branch of descendents. Both AddObject() methods have an addChildren parameter. The viewer will complete this (if passed) indicating if children (contained within the one just sent) are worth adding. Recycling TBuffer3D; Once add AddObject() has been called, the contents are copied to the viewer internally. You are free to destroy this object, or recycle it for the next object if suitable. ; Definition at line 33 of file TVirtualViewer3D.h. Public Member Functions; virtual ~TVirtualViewer3D ();  ; virtual void AddCompositeOp (UInt_t operation)=0;  ; virtual Int_t AddObject (const TBuffer3D &b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:10901,efficient,efficient,10901,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['efficient'],['efficient']
Energy Efficiency,"esents the first, second, or third order derivative of any RooAbsReal as calculated (numerically)...Definition RooDerivative.h:30; RooFitResultRooFitResult is a container class to hold the input and output of a PDF fit to a dataset.Definition RooFitResult.h:40; RooFit::Detail::CodeSquashContextA class to maintain the context for squashing of RooFit models into code.Definition CodeSquashContext.h:42; RooFit::EvalContextDefinition EvalContext.h:84; RooFunctorLightweight interface adaptor that exports a RooAbsPdf as a functor.Definition RooFunctor.h:25; RooLinkedListCollection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list...Definition RooLinkedList.h:44; RooNumIntConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumIntConfig.h:25; RooPlotPlot frame and a container for graphics objects within that frame.Definition RooPlot.h:45; RooRealBindingLightweight interface adaptor that binds a RooAbsReal object to a subset of its servers and present i...Definition RooRealBinding.h:30; RooRealSumFuncDefinition RooRealSumFunc.h:26; RooRealSumPdfImplements a PDF constructed from a sum of functions:Definition RooRealSumPdf.h:24; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; RooStringViewThe RooStringView is a wrapper around a C-style string that can also be constructed from a std::strin...Definition RooStringView.h:27; RooVectorDataStoreUses std::vector to store data columns.Definition RooVectorDataStore.h:41; TF11-Dim function classDefinition TF1.h:233; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TH3F3-D histogram with a float per channel (see TH1 documentation)Definition TH3.h:317; TListA doubly linked list.Definition TList.h:38; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:56785,adapt,adaptor,56785,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['adapt'],['adaptor']
Energy Efficiency,"eset the method, as if it had just been instantiated (forget all training etc.). ; Reimplemented from TMVA::MethodBase.; Definition at line 108 of file MethodCrossValidation.cxx. ◆ Streamer(). virtual void TMVA::MethodCrossValidation::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodCrossValidation::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 120 of file MethodCrossValidation.h. ◆ Train(). void TMVA::MethodCrossValidation::Train ; (; void ; ). virtual . Call the Optimizer with the set of parameters and ranges that are meant to be tuned. ; Set the tuning parameters according to the argument. training. ; Implements TMVA::MethodBase.; Definition at line 146 of file MethodCrossValidation.cxx. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodCrossValidation::WriteMonitoringHistosToFile ; (; void ; ); const. virtual . write special monitoring histograms to file dummy implementation here --------------— ; Reimplemented from TMVA::MethodBase.; Definition at line 359 of file MethodCrossValidation.cxx. Member Data Documentation. ◆ CrossValidation. friend TMVA::MethodCrossValidation::CrossValidation. private . Definition at line 40 of file MethodCrossValidation.h. ◆ fEncapsulatedMethodName. TString TMVA::MethodCrossValidation::fEncapsulatedMethodName. private . Definition at line 101 of file MethodCrossValidation.h. ◆ fEncapsulatedMethods. std::vector<MethodBase *> TMVA::MethodCrossValidation::fEncapsulatedMethods. private . Definition at line 112 of file MethodCrossValidation.h. ◆ fEncapsulatedMethodTypeName. TString TMVA::MethodCrossValidation::fEncapsulatedMethodTypeName. private . Definition at line 102 of file MethodCrossValidation.h. ◆ fEventToFoldMapping. std::map<const TMVA::Event *, UInt_t> TMVA::MethodCrossValidation::fEventToFoldMapping. private . Definition at line 117 of file MethodCrossValidation.h. ◆ fMulticlassValues. std::vector<Float_t> TMVA::Meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCrossValidation.html:35935,monitor,monitoring,35935,doc/master/classTMVA_1_1MethodCrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCrossValidation.html,1,['monitor'],['monitoring']
Energy Efficiency,"est, which depends smoothly; on the observable quantities ; , which we'll denote by; ; . Given a training sample of tuples of the form,; (TMultiDimFit::AddRow); . where ; are independent; variables, is the known, quantity dependent at ; ,; and is the square error in , the class; TMultiDimFit; will; try to find the parameterization; . (1). such that; . (2). is minimal. Here ; are monomials, or Chebyshev or Legendre; polynomials, labelled ; , in each variable; , ; .; ; So what TMultiDimFit does, is to determine the number of; terms , and then terms (or functions) , and the ; coefficients , so that is minimal; (TMultiDimFit::FindParameterization).; ; Of course it's more than a little unlikely that will ever become; exact zero as a result of the procedure outlined below. Therefore, the; user is asked to provide a minimum relative error ; (TMultiDimFit::SetMinRelativeError), and ; will be considered minimized when; . Optionally, the user may impose a functional expression by specifying; the powers of each variable in specified functions ; (TMultiDimFit::SetPowers). In that case, only the; coefficients is calculated by the class.; . Limiting the Number of Terms; . As always when dealing with fits, there's a real chance of; over fitting. As is well-known, it's always possible to fit an; polynomial in to points with ; , but; the polynomial is not likely to fit new data at all; [1]. Therefore, the user is asked to provide an upper; limit, to the number of terms in ; (TMultiDimFit::SetMaxTerms).; ; However, since there's an infinite number of to choose from, the; user is asked to give the maximum power. , of each variable; to be considered in the minimization of ; (TMultiDimFit::SetMaxPowers).; ; One way of obtaining values for the maximum power in variable , is; to perform a regular fit to the dependent quantity , using a; polynomial only in . The maximum power is is then the; power that does not significantly improve the one-dimensional; least-square fit over to [5].; ; Ther",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:3291,power,powers,3291,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,6,['power'],['powers']
Energy Efficiency,"est[0] = fX; dest[1] = fY; dest[2] = fZ; dest[3] = fM; }. void SetCoordinates(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar px, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar py, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar pz, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar m). Set internal data based on 4 Scalar numbers. void GetCoordinates(ROOT::Math::PxPyPzM4D<Double32_t>::Scalar& px, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar& py, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar& pz, ROOT::Math::PxPyPzM4D<Double32_t>::Scalar& m) const. get internal data into 4 Scalar numbers. { px=fX; py=fY; pz=fZ; m=fM;}. Scalar Px() const; --------- Coordinates and Coordinate-like Scalar properties -------------; cartesian (Minkowski)coordinate accessors. { return fX;}. Scalar Py() const; { return fY;}. Scalar Pz() const; { return fZ;}. Scalar M() const; { return fM; }. Scalar X() const; { return fX;}. Scalar Y() const; { return fY;}. Scalar Z() const; { return fZ;}. Scalar E() const; other coordinate representation. Energy. { return std::sqrt(E2() ); }. Scalar T() const; { return E();}. Scalar P2() const. squared magnitude of spatial components. { return fX*fX + fY*fY + fZ*fZ; }. Scalar P() const. magnitude of spatial components (magnitude of 3-momentum). { return std::sqrt(P2()); }. Scalar R() const; { return P(); }. Scalar M2() const. vector magnitude squared (or mass squared); In case of negative mass (spacelike particles return negative values). Scalar Mag2() const; { return M2(); }. Scalar Mag() const; { return M(); }. Scalar E2() const. energy squared. Scalar Pt2() const. transverse spatial component squared. { return fX*fX + fY*fY;}. Scalar Perp2() const; { return Pt2();}. Scalar Pt() const. Transverse spatial component (P_perp or rho). { return std::sqrt(Perp2());}. Scalar Perp() const; { return Pt();}. Scalar Rho() const; { return Pt();}. Scalar Mt2() const. transverse mass squared. { return E2() - fZ*fZ; }. Scalar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__PxPyPzM4D_Double32_t_.html:5935,Energy,Energy,5935,root/html532/ROOT__Math__PxPyPzM4D_Double32_t_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__PxPyPzM4D_Double32_t_.html,2,['Energy'],['Energy']
Energy Efficiency,"estructor Documentation. ◆ TProofPlayerRemote(). TProofPlayerRemote::TProofPlayerRemote ; (; TProof * ; proof = 0). inline . Definition at line 313 of file TProofPlayer.h. ◆ ~TProofPlayerRemote(). TProofPlayerRemote::~TProofPlayerRemote ; (; ). override . Destructor. ; Definition at line 1899 of file TProofPlayer.cxx. Member Function Documentation. ◆ AddOutput(). void TProofPlayerRemote::AddOutput ; (; TList * ; out). overridevirtual . Incorporate the content of the received output list 'out' into the final output list fOutput. ; The latter is created if not existing. This method short cuts 'StoreOutput + MergeOutput' limiting the memory consumption. ; Reimplemented from TProofPlayer.; Definition at line 3507 of file TProofPlayer.cxx. ◆ AddOutputObject(). Int_t TProofPlayerRemote::AddOutputObject ; (; TObject * ; obj). overridevirtual . Incorporate the received object 'obj' into the output list fOutput. ; The latter is created if not existing. This method short cuts 'StoreOutput + MergeOutput' optimizing the memory consumption. Returns -1 in case of error, 1 if the object has been merged into another one (so that its ownership has not been taken and can be deleted), and 0 otherwise. ; Reimplemented from TProofPlayer.; Definition at line 3344 of file TProofPlayer.cxx. ◆ Class(). static TClass * TProofPlayerRemote::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofPlayerRemote::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofPlayerRemote::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 366 of file TProofPlayer.h. ◆ DeclFileName(). static const char * TProofPlayerRemote::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 366 of file TProofPlayer.h. ◆ DrawSelect(). Long64_t TProofPlayerRemote::DrawSelect ; (; TDSet * ; set, . const char * ; varexp, .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:26625,consumption,consumption,26625,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['consumption'],['consumption']
Energy Efficiency,"estvirtual Double_t Chi2Test(const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) consttest for comparing weighted and unweighted histograms.Definition TH1.cxx:2008; TH1::GetMaximumStoredvirtual Double_t GetMaximumStored() constDefinition TH1.h:289; TH1::DoFillNvirtual void DoFillN(Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1)Internal method to fill histogram content from a vector called directly by TH1::BufferEmpty.Definition TH1.cxx:3473; TH1::GetMinimumAndMaximumvirtual void GetMinimumAndMaximum(Double_t &min, Double_t &max) constRetrieve the minimum and maximum values in the histogram.Definition TH1.cxx:8731; TH1::kNstat@ kNstatSize of statistics data (up to TProfile3D)Definition TH1.h:184; TH1::GetSumw2virtual const TArrayD * GetSumw2() constDefinition TH1.h:314; TH1::GetMaximumBinvirtual Int_t GetMaximumBin() constReturn location of bin with maximum value in the range.Definition TH1.cxx:8577; TH1::AutoP2GetBinsstatic Int_t AutoP2GetBins(Int_t n)Auxiliary function to get the next power of 2 integer value larger then n.Definition TH1.cxx:1321; TH1::fEntriesDouble_t fEntriesNumber of entries.Definition TH1.h:95; TH1::Mergevirtual Long64_t Merge(TCollection *list)Definition TH1.h:345; TH1::SetColorsvirtual void SetColors(Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1)Shortcut to set the three histogram colors with a single call.Definition TH1.cxx:4467; TH1::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute action corresponding to one event.Definition TH1.cxx:3240; TH1::GetIntegralvirtual Double_t * GetIntegral()Return a pointer to the array of bins integral.Definition TH1.cxx:2586; TH1::fZaxisTAxis fZaxisZ axis descriptor.Definition TH1.h:92; TH1::fStatOverflowsEStatOverflows fStatOverflowsPer object flag to use under/overflows in statistics.Definition TH1.h:114; TH1::FillNvirtual void FillN(Int_t ntimes, const Double_t *x, const Double_t *w, Int_t stride=1)Fill this histogram with an ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:76012,power,power,76012,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,1,['power'],['power']
Energy Efficiency,"et of boxes, size of box is proportional to bin content. ""GLBOX1""; The same as ""glbox"", but spheres are drawn instead of boxes. TH3 as iso-surface(s); The supported option is:. ""GLISO"" ; TH3 is drawn using iso-surfaces. TF3 (implicit function); The supported option is:. ""GLTF3"" ; Draw a TF3. Parametric surfaces; $ROOTSYS/tutorials/gl/glparametric.C shows how to create parametric; equations and visualize the surface.; Interaction with the plots; All the interactions are implemented via standard methods; DistancetoPrimitive() and ExecuteEvent(). That's why all the; interactions with the OpenGL plots are possible only when the mouse cursor is; in the plot's area (the plot's area is the part of a the pad occupied by; gl-produced picture). If the mouse cursor is not above gl-picture, the standard; pad interaction is performed.; Selectable parts; Different parts of the plot can be selected:. xoz, yoz, xoy back planes:; When such a plane selected, it's highlighted in green if the; dynamic slicing by this plane is supported, and it's; highlighted in red, if the dynamic slicing is not supported.; The plot itself:; On surfaces, the selected surface is outlined in red. (TF3 and; ISO are not outlined). On lego plots, the selected bin is; highlighted. The bin number and content are displayed in pad's; status bar. In box plots, the box or sphere is highlighted and; the bin info is displayed in pad's status bar. Rotation and zooming. Rotation:; When the plot is selected, it can be rotated by pressing and; holding the left mouse button and move the cursor.; Zoom/Unzoom:; Mouse wheel or 'j', 'J', 'k', 'K' keys. Panning; The selected plot can be moved in a pad's area by pressing and; holding the left mouse button and the shift key.; Box cut; Surface, iso, box, TF3 and parametric painters support box cut by; pressing the 'c' or 'C' key when the mouse cursor is in a plot's; area. That will display a transparent box, cutting away part of the; surface (or boxes) in order to show internal ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THistPainter.html:81174,green,green,81174,root/html604/THistPainter.html,https://root.cern,https://root.cern/root/html604/THistPainter.html,2,['green'],['green']
Energy Efficiency,"et& vars) -- Only retain the listed observables in the output dataset; Cut(const char* expression) -- Only retain event surviving the given cut expression; Cut(const RooFormulaVar& expr) -- Only retain event surviving the given cut formula; CutRange(const char* name) -- Only retain events inside range with given name. Multiple CutRange; arguments may be given to select multiple ranges; EventRange(int lo, int hi) -- Only retain events with given sequential event numbers; Name(const char* name) -- Give specified name to output dataset; Title(const char* name) -- Give specified title to output dataset. RooAbsData* reduce(const char* cut); Create a subset of the data set by applying the given cut on the data points.; The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points.; The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. RooAbsData* reduce(const RooArgSet& varSubset, const char* cut = 0); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. Double_t weightError(RooAbsData::ErrorType etype = Poisson) const; Return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsData.html:16106,reduce,reduce,16106,root/html528/RooAbsData.html,https://root.cern,https://root.cern/root/html528/RooAbsData.html,9,['reduce'],['reduce']
Energy Efficiency,"et& vars) -- Only retain the listed observables in the output dataset; Cut(const char* expression) -- Only retain event surviving the given cut expression; Cut(const RooFormulaVar& expr) -- Only retain event surviving the given cut formula; CutRange(const char* name) -- Only retain events inside range with given name. Multiple CutRange; arguments may be given to select multiple ranges; EventRange(int lo, int hi) -- Only retain events with given sequential event numbers; Name(const char* name) -- Give specified name to output dataset; Title(const char* name) -- Give specified title to output dataset. RooAbsData* reduce(const char* cut); Create a subset of the data set by applying the given cut on the data points.; The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points.; The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. RooAbsData* reduce(const RooArgSet& varSubset, const char* cut); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. Double_t weightError(RooAbsData::ErrorType etype = Poisson) const; Return erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsData.html:16008,reduce,reduce,16008,root/html526/RooAbsData.html,https://root.cern,https://root.cern/root/html526/RooAbsData.html,1,['reduce'],['reduce']
Energy Efficiency,"et; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TMutex*fAMtxTo protect async msg queue; list<TXSockBuf*>fAQuelist of asynchronous messages; TSemaphorefASemControl access to conn async msg queue; TSemaphorefAsynProcControl actions while processing async messages; TXSockBuf*fBufCurcurrent read buffer; TStringfBufferContainer for exchanging information; Int_tfByteCurcurrent position in the first buffer; Int_tfByteLeftbytes left in the first buffer; XrdProofConn*fConninstance of the underlying connection module; Bool_tfDontTimeoutIf true wait forever for incoming messages; TXHandler*fHandlerHandler of asynchronous events (input, error); TStringfHostRemote host; Bool_tfIForwardWheter the interrupt should be propagated; intfILevHighest received interrupt; TMutex*fIMtxTo protect interrupt queue; Int_tfLogLevelLog level to be transmitted to servers; charfMode'e' (def) or 'i' (internal - proofsrv); Int_tfPid; Int_tfPortRemote port; Bool_tfRDInterruptTo interrupt waiting for messages; TObject*fReferenceGeneric object reference of this socket; intfSendOptOptions for sending messages; Short_tfSessionIDproofsrv: remote ID of connected session; TStringfUserUsername used for login; Int_tfXrdProofdVersion; static Bool_tfgInitDoneAvoid initializing more than once; static TStringfgLocLocation string; static TXSockPipefgPipePipe for input monitoring; static TMutexfgSMtxTo protect spare list; static list<TXSockBuf*>fgSQuelist of spare buffers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t PickUpReady(); Manage asynchronous message. TXSockBuf * PopUpSpare(Int_t sz). void PushBackSpare(). void PostMsg(Int_t type, const char* msg = 0); Post a message into the queue for asynchronous processi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXSocket.html:11946,monitor,monitoring,11946,root/html528/TXSocket.html,https://root.cern,https://root.cern/root/html528/TXSocket.html,1,['monitor'],['monitoring']
Energy Efficiency,"etN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t * GetP() const; GetP() returns the pointer to the float point array; of points if available; The number of the available celss can be found via; GetN() method.; GetN() > 0 shows how many cells. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; GetXYZ(Float_t *xyz,Int_t idx,Int_t num=1) fills the buffer supplied; by the calling code with the points information. Input parameters:. Float_t *xyz - an external user supplied floating point array.; Int_t num - the total number of the points to be copied; the dimension of that array the size of the; array is num*sizeof(Float_t) at least; Int_t idx - The index of the first copy to be taken. Return: The pointer to the buffer array supplied. virtual ~TPoints3DABC(); {;}. Int_t DistancetoPrimitive(Int_t px, Int_t py). Int_t GetLastPosition() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t GetX(Int_t idx) const. Float_t GetY(Int_t idx) const. Float_t GetZ(Int_t idx) const. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const. Option_t * GetOption() const. void PaintPoints(Int_t n, Float_t* p, Option_t* option = """"). Int_t SetLastPosition(Int_t idx). void SetOption(Option_t* option = """"). Int_t SetPoint(Int_t point, Float_t x, Float_t y, Float_t z). Int_t SetPoints(Int_t n, Float_t* p = 0, Option_t* option = """"). Int_t Size() const. » Author: Valery Fine(fine@mail.cern.ch) 24/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TPoints3DABC.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPoints3DABC.html:8401,allocate,allocated,8401,root/html528/TPoints3DABC.html,https://root.cern,https://root.cern/root/html528/TPoints3DABC.html,1,['allocate'],['allocated']
Energy Efficiency,"etN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t * GetP() const; GetP() returns the pointer to the float point array; of points if available; The number of the available celss can be found via; GetN() method.; GetN() > 0 shows how many cells. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; GetXYZ(Float_t *xyz,Int_t idx,Int_t num=1) fills the buffer supplied; by the calling code with the points information. Input parameters:. Float_t *xyz - an external user supplied floating point array.; Int_t num - the total number of the points to be copied; the dimension of that array the size of the; array is num*sizeof(Float_t) at least; Int_t idx - The index of the first copy to be taken. Return: The pointer to the buffer array supplied. virtual ~TPoints3DABC(); {;}. Int_t DistancetoPrimitive(Int_t px, Int_t py). Int_t GetLastPosition() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t GetX(Int_t idx) const. Float_t GetY(Int_t idx) const. Float_t GetZ(Int_t idx) const. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const. Option_t * GetOption() const. void PaintPoints(Int_t n, Float_t* p, Option_t* option = """"). Int_t SetLastPosition(Int_t idx). void SetOption(Option_t* option = """"). Int_t SetPoint(Int_t point, Float_t x, Float_t y, Float_t z). Int_t SetPoints(Int_t n, Float_t* p = 0, Option_t* option = """"). Int_t Size() const. » Author: Valery Fine(fine@mail.cern.ch) 24/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TPoints3DABC.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPoints3DABC.html:8470,allocate,allocated,8470,root/html530/TPoints3DABC.html,https://root.cern,https://root.cern/root/html530/TPoints3DABC.html,1,['allocate'],['allocated']
Energy Efficiency,"etN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t * GetP() const; GetP() returns the pointer to the float point array; of points if available; The number of the available celss can be found via; GetN() method.; GetN() > 0 shows how many cells. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; GetXYZ(Float_t *xyz,Int_t idx,Int_t num=1) fills the buffer supplied; by the calling code with the points information. Input parameters:. Float_t *xyz - an external user supplied floating point array.; Int_t num - the total number of the points to be copied; the dimension of that array the size of the; array is num*sizeof(Float_t) at least; Int_t idx - The index of the first copy to be taken. Return: The pointer to the buffer array supplied. virtual ~TPoints3DABC(); {;}. Int_t DistancetoPrimitive(Int_t px, Int_t py). Int_t GetLastPosition() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t GetX(Int_t idx) const. Float_t GetY(Int_t idx) const. Float_t GetZ(Int_t idx) const. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const. Option_t * GetOption() const. void PaintPoints(Int_t n, Float_t* p, Option_t* option = """"). Int_t SetLastPosition(Int_t idx). void SetOption(Option_t* option = """"). Int_t SetPoint(Int_t point, Float_t x, Float_t y, Float_t z). Int_t SetPoints(Int_t n, Float_t* p = 0, Option_t* option = """"). Int_t Size() const. » Author: Valery Fine(fine@mail.cern.ch) 24/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TPoints3DABC.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPoints3DABC.html:8470,allocate,allocated,8470,root/html532/TPoints3DABC.html,https://root.cern,https://root.cern/root/html532/TPoints3DABC.html,2,['allocate'],['allocated']
Energy Efficiency,"ete;  ; TGLLightSet & operator= (const TGLLightSet &)=delete;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TGLLightSet.h>. Inheritance diagram for TGLLightSet:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ELight. enum TGLLightSet::ELight. EnumeratorkLightFront ; kLightTop ; kLightBottom ; kLightLeft ; kLightRight ; kLightMask ; kLightSpecular . Definition at line 24 of file TGLLightSet.h. Constructor & Destructor Documentation. ◆ TGLLightSet() [1/2]. TGLLightSet::TGLLightSet ; (; const TGLLightSet & ; ). privatedelete . ◆ TGLLightSet() [2/2]. TGLLightSet::TGLLightSet ; (; ). power of specular lamp ; Definition at line 26 of file TGLLightSet.cxx. ◆ ~TGLLightSet(). TGLLightSet::~TGLLightSet ; (; ). inlineoverride . Definition at line 45 of file TGLLightSet.h. Member Function Documentation. ◆ Class(). static TClass * TGLLightSet::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLLightSet::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLLightSet::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 64 of file TGLLightSet.h. ◆ DeclFileName(). static const char * TGLLightSet::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 64 of file TGLLightSet.h. ◆ GetFrontPower(). Float_t TGLLightSet::GetFrontPower ; (; ); const. inline . Definition at line 54 of file TGLLightSet.h. ◆ GetLightState(). UInt_t TGLLightSet::GetLightState ; (; ). inline . Definition at line 49 of file TGLLightSet.h. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLLightSet.html:11689,power,power,11689,doc/master/classTGLLightSet.html,https://root.cern,https://root.cern/doc/master/classTGLLightSet.html,1,['power'],['power']
Energy Efficiency,"eter for 2D peaks (relative amplitude of tail), for details see html manual and references; Double_tfTyCalccalculated value of t parameter for 1D ridges in y direction; Double_tfTyErrerror value of t parameter for 1D ridges in y direction; Double_tfTyInitinitial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references; Double_t*fVolume[fNPeaks] array of calculated volumes of 2D peaks, output parameters; Double_t*fVolumeErr[fNPeaks] array of volumes errors of 2D peaks, output parameters; Int_tfXmaxlast fitted channel in x direction; Int_tfXminfirst fitted channel in x direction; Int_tfYmaxlast fitted channel in y direction; Int_tfYminfirst fitted channel in y direction. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum2Fit. Function documentation; TSpectrum2Fit(); default constructor. TSpectrum2Fit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks contains the two-dimensional symmetrical Gaussian two one-dimensional; symmetrical Gaussian ridges as well as nonsymmetrical terms and background. ~TSpectrum2Fit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Ourpowl(Double_t a, Int_t pw); power function. void StiefelInversion(Double_t** a, Int_t size). AUXILIARY FUNCTION. This function calculates solution of the system of linear equations.; The matrix a should have a dimension size*(size+4); The calling function should fill in the matrix, the column size should; contain vector y (right side of the system of equations).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2Fit.html:23242,allocate,allocates,23242,root/html602/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html602/TSpectrum2Fit.html,4,['allocate'],['allocates']
Energy Efficiency,"eters that are not marked of interest, as well as any parameters that have been marked by the ""np"" attribute. ;  ; xRooNode obs () const;  List of observables (global and regular) of this node. ;  ; TObject * operator-> () const;  ; xRooNode & operator= (const TObject &o);  ; std::shared_ptr< xRooNode > operator[] (const std::string &name);  ; std::shared_ptr< xRooNode > operator[] (size_t idx);  ; std::shared_ptr< xRooNode > parentPdf () const;  like a parent but only for use by getObject ;  ; xRooNode pars () const;  List of parameters (non-observables) of this node. ;  ; xRooNode poi () const;  List of parameters of interest: parameters marked as ""of interest"" These parameters have the ""poi"" attribute. ;  ; xRooNode pp () const;  List of prespecified parameters: non-floatable parameters. ;  ; void Print (Option_t *opt="""") const override;  Print TNamed name and title. ;  ; xRooNode reduced (const std::string &range="""", bool invert=false) const;  ; xRooNode Remove (const xRooNode &child);  ; xRooNode Replace (const xRooNode &node);  ; xRooNode robs () const;  List of regular observables of this node. ;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Save this object in the file specified by filename. ;  ; bool SetBinContent (int bin, double value, const char *par=nullptr, double parVal=1);  ; bool SetBinData (int bin, double value, const xRooNode &data=""obsData"");  ; bool SetBinError (int bin, double value);  ; void SetChecked (bool val=true);  ; bool SetContent (double value);  ; bool SetContent (double value, const char *par, double parVal=1);  ; bool SetContents (const TObject &obj);  ; bool SetContents (const TObject &obj, const char *par, double parVal);  ; bool SetData (const TObject &obj, const xRooNode &data=""obsData"");  ; void SetFitResult (const RooFitResult *fr=nullptr);  ; void SetFitResult (const std::shared_ptr< const RooFitResult > &fr);  ; void SetFitResult (const xRooNode &fr);  ; void SetHidden (bool set=true);  ; vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:5922,reduce,reduced,5922,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,1,['reduce'],['reduced']
Energy Efficiency,"ethod invocation environment for a specific class, method; described by the callfunc. TMethodCall(TClass* cl, const char* method, const char* params); Create a method invocation environment for a specific class, method and; parameters. The parameter string has the form: ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(object,...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). TMethodCall(const char* function, const char* params); Create a global function invocation environment. The parameter; string has the form: ""\""aap\"", 3, 4,35"". To execute the; function call TMethodCall::Execute(...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). TMethodCall(TFunction* func); Create a global function invocation environment base on a TFunction object.; To execute the function call TMethodCall::Execute(...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). TMethodCall(const TMethodCall& org); Copy ctor. TMethodCall & operator=(const TMethodCall& rhs); Assignement operator. ~TMethodCall(); TMethodCall dtor. TObject * Clone(const char* newname = """") const; Return an exact copy of this object. void Init(TClass* cl, CallFunc_t* func, Long_t offset = 0); Initialize the method invocation environment based on; the CallFunc object and the TClass describing the function context. void Init(TFunction* func); Initialize the method invocation environment based on; the TFunction object. void Init(TClass* cl, const char* method, const char* params, Bool_t objectIsConst = kFALSE); Initialize the method invocation environment. Necessary input; information: the class, method name and the parameter string; of the form ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(object,...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMethodCall.html:9691,efficient,efficient,9691,root/html602/TMethodCall.html,https://root.cern,https://root.cern/root/html602/TMethodCall.html,4,['efficient'],['efficient']
Energy Efficiency,"ethods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TVirtualCollectionProxy(); virtual void*Allocate(UInt_t n, Bool_t forceDelete); virtual void*At(UInt_t idx); virtual voidClear(const char* opt = """"); virtual voidCommit(void*); virtual voidDeleteArray(void* p, Bool_t dtorOnly = kFALSE) const; virtual voidDestructor(void* p, Bool_t dtorOnly = kFALSE) const; virtual TVirtualCollectionProxy*Generate() const; virtual TClass*GetCollectionClass() const; virtual Int_tGetCollectionType() const; virtual TStreamerInfoActions::TActionSequence*GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); virtual TVirtualCollectionProxy::CopyIterator_tGetFunctionCopyIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::CreateIterators_tGetFunctionCreateIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteIterator_tGetFunctionDeleteIterator(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::DeleteTwoIterators_tGetFunctionDeleteTwoIterators(Bool_t read = kTRUE); virtual TVirtualCollectionProxy::Next_tGetFunctionNext(Bool_t read = kTRUE); virtual ULong_tGetIncrement() const; virtual Int_tGetProperties() const; virtual TStreamerInfoActions::TActionSequence*GetReadMemberWiseActions(Int_t version); virtual EDataTypeGetType() const; virtual TClass*GetValueClass() const; virtual TStreamerInfoActions::TActionSequence*GetWriteMemberWiseActions(); virtual Bool_tHasPointers() const; virtual void*New() const; virtual void*New(void* arena) const; virtual void*NewArray(Int_t nElements) const; virtual void*NewArray(Int_t nElements, void* arena) const; char*operator[](UInt_t idx) const; virtual voidPopProxy(); virtual voidPushProxy(void* objectstart); virtual UInt_tSize() const; virtual UInt_tSizeof() const. protected:. virtual voidSetValueClass(TClass* newcl). private:. TVirtualCollectionProxy&operator=(const TVirtualCollectionProxy&). Data Members; pu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualCollectionProxy.html:783,Allocate,Allocate,783,root/html534/TVirtualCollectionProxy.html,https://root.cern,https://root.cern/root/html534/TVirtualCollectionProxy.html,1,['Allocate'],['Allocate']
Energy Efficiency,"etric approach"") ; TMVA::MethodMLP Multi-layer perceptron implemented specifically for TMVA; TMVA::MethodPDEFoam Analysis of PDEFoam discriminant (PDEFoam or Mahalanobis approach) ; TMVA::MethodPDERS Multi-dimensional probability density estimator range search (PDERS) method; TMVA::MethodRuleFit Friedman's RuleFit method; TMVA::MethodSVM Support Vector Machine; TMVA::MethodSeedDistance Function Discriminant Analysis; TMVA::MethodTMlpANN Implementation of interface for TMultiLayerPerceptron; TMVA::MetricEuler calculates the ""distance"" between two points; TMVA::MetricManhattan calculates the ""distance"" between two points; TMVA::MinuitFitter Fitter using a Genetic Algorithm; TMVA::MinuitWrapper Wrapper around TMinuit; TMVA::MisClassificationError Implementation of the MisClassificationError as separation criterion; TMVA::MsgLogger Ostringstream derivative to redirect and format logging output ; TMVA::Node Node for the BinarySearch or Decision Trees; TMVA::PDEFoam General purpose self-adapting binning; TMVA::PDEFoamCell Single cell of FOAM; TMVA::PDEFoamIntegrand n-dimensional real positive integrand of FOAM; TMVA::PDEFoamMaxwt Controlling of the MC weight (maximum weight); TMVA::PDEFoamVect n-dimensional vector with dynamical allocation; TMVA::PDF PDF wrapper for histograms; TMVA::Ranking Method-specific ranking for input variables ; TMVA::Reader Interpret the trained MVAs in an analysis context; TMVA::RegressionVariance Interface to different separation critiera used in training algorithms; TMVA::RootFinder Root finding using Brents algorithm; TMVA::RuleFit Calculations for Friedman's RuleFit method; TMVA::RuleFitAPI Friedman's RuleFit method; TMVA::SVEvent Event for SVM; TMVA::SdivSqrtSplusB Implementation of the SdivSqrtSplusB as separation criterion; TMVA::SeedDistance ; TMVA::SeparationBase Interface to different separation critiera used in training algorithms; TMVA::SimulatedAnnealing Base class for Simulated Annealing fitting; TMVA::SimulatedAnnealingFitter Fitte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:96626,adapt,adapting,96626,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['adapt'],['adapting']
Energy Efficiency,ets that are still being used by the monitor. ; Definition at line 515 of file TMonitor.cxx. ◆ GetSender(). void * TMonitor::GetSender ; (; ). inlineoverrideprivatevirtual . Reimplemented from TQObject.; Definition at line 51 of file TMonitor.h. ◆ Interrupt(). void TMonitor::Interrupt ; (; ). inline . Definition at line 71 of file TMonitor.h. ◆ IsA(). TClass * TMonitor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 85 of file TMonitor.h. ◆ IsActive(). Bool_t TMonitor::IsActive ; (; TSocket * ; sock); const. Check if socket 's' is in the active list. ; Avoids the duplication of active list via TMonitor::GetListOfActives(). ; Definition at line 482 of file TMonitor.cxx. ◆ Ready(). void TMonitor::Ready ; (; TSocket * ; sock). virtual . Emit signal when some socket is ready. ; Definition at line 530 of file TMonitor.cxx. ◆ Remove(). void TMonitor::Remove ; (; TSocket * ; sock). virtual . Remove a socket from the monitor. ; Definition at line 214 of file TMonitor.cxx. ◆ RemoveAll(). void TMonitor::RemoveAll ; (; ). virtual . Remove all sockets from the monitor. ; Definition at line 241 of file TMonitor.cxx. ◆ ResetInterrupt(). void TMonitor::ResetInterrupt ; (; ). inline . Definition at line 72 of file TMonitor.h. ◆ Select() [1/3]. TSocket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt(),MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMonitor.html:21147,monitor,monitor,21147,doc/master/classTMonitor.html,https://root.cern,https://root.cern/doc/master/classTMonitor.html,1,['monitor'],['monitor']
Energy Efficiency,"ette is used.; if ncolors = 67 and colors=0, an Aurora palette is used.; if ncolors = 68 and colors=0, an Avocado palette is used.; if ncolors = 69 and colors=0, a Beach palette is used.; if ncolors = 70 and colors=0, a Black Body palette is used.; if ncolors = 71 and colors=0, a Blue Green Yellow palette is used.; if ncolors = 72 and colors=0, a Brown Cyan palette is used.; if ncolors = 73 and colors=0, a CMYK palette is used.; if ncolors = 74 and colors=0, a Candy palette is used.; if ncolors = 75 and colors=0, a Cherry palette is used.; if ncolors = 76 and colors=0, a Coffee palette is used.; if ncolors = 77 and colors=0, a Dark Rain Bow palette is used.; if ncolors = 78 and colors=0, a Dark Terrain palette is used.; if ncolors = 79 and colors=0, a Fall palette is used.; if ncolors = 80 and colors=0, a Fruit Punch palette is used.; if ncolors = 81 and colors=0, a Fuchsia palette is used.; if ncolors = 82 and colors=0, a Grey Yellow palette is used.; if ncolors = 83 and colors=0, a Green Brown Terrain palette is used.; if ncolors = 84 and colors=0, a Green Pink palette is used.; if ncolors = 85 and colors=0, an Island palette is used.; if ncolors = 86 and colors=0, a Lake palette is used.; if ncolors = 87 and colors=0, a Light Temperature palette is used.; if ncolors = 88 and colors=0, a Light Terrain palette is used.; if ncolors = 89 and colors=0, a Mint palette is used.; if ncolors = 90 and colors=0, a Neon palette is used.; if ncolors = 91 and colors=0, a Pastel palette is used.; if ncolors = 92 and colors=0, a Pearl palette is used.; if ncolors = 93 and colors=0, a Pigeon palette is used.; if ncolors = 94 and colors=0, a Plum palette is used.; if ncolors = 95 and colors=0, a Red Blue palette is used.; if ncolors = 96 and colors=0, a Rose palette is used.; if ncolors = 97 and colors=0, a Rust palette is used.; if ncolors = 98 and colors=0, a Sandy Terrain palette is used.; if ncolors = 99 and colors=0, a Sienna palette is used.; if ncolors = 100 and colors=0, a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TColor.html:30496,Green,Green,30496,root/html604/TColor.html,https://root.cern,https://root.cern/root/html604/TColor.html,1,['Green'],['Green']
Energy Efficiency,"eturn E(); }. Scalar Px() const; other coordinate representation. { return fPt*cos(fPhi);}. Scalar X() const; { return Px(); }. Scalar Py() const; { return fPt*sin(fPhi);}. Scalar Y() const; { return Py(); }. Scalar Pz() const. Scalar Z() const; { return Pz(); }. Scalar P() const. magnitude of momentum. Scalar R() const; { return P(); }. Scalar P2() const. squared magnitude of spatial components (momentum squared). { Scalar p = P(); return p*p; }. Scalar M2() const. vector magnitude squared (or mass squared). { Scalar p = P(); return fE*fE - p*p; }. Scalar Mag2() const; { return M2(); }. Scalar M() const. invariant mass. Scalar Mag() const; { return M(); }. Scalar Pt2() const. transverse spatial component squared. { return fPt*fPt;}. Scalar Perp2() const; { return Pt2(); }. Scalar Mt2() const. transverse mass squared. { Scalar pz = Pz(); return fE*fE - pz*pz; }. Scalar Mt() const. transverse mass. Scalar Et() const. transverse energy. transverse energy. Scalar Et2() const. transverse energy squared. { Scalar et = Et(); return et*et; }. Scalar pi(); { return M_PI; }. void Restrict(). Scalar Theta() const. polar angle. void SetPt(ROOT::Math::PtEtaPhiE4D<Double32_t>::Scalar pt); --------- Set Coordinates of this system ---------------. set Pt value. void SetEta(ROOT::Math::PtEtaPhiE4D<Double32_t>::Scalar eta). set eta value. void SetPhi(ROOT::Math::PtEtaPhiE4D<Double32_t>::Scalar phi). set phi value. void SetE(ROOT::Math::PtEtaPhiE4D<Double32_t>::Scalar e). set E value. void SetPxPyPzE(ROOT::Math::PtEtaPhiE4D<Double32_t>::Scalar px, ROOT::Math::PtEtaPhiE4D<Double32_t>::Scalar py, ROOT::Math::PtEtaPhiE4D<Double32_t>::Scalar pz, ROOT::Math::PtEtaPhiE4D<Double32_t>::Scalar e). set values using cartesian coordinate system. void Negate(); ------ Manipulations -------------. negate the 4-vector. void Scale(ROOT::Math::PtEtaPhiE4D<Double32_t>::Scalar a). Scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility secition ==================; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PtEtaPhiE4D_Double32_t_.html:7066,energy,energy,7066,root/html526/ROOT__Math__PtEtaPhiE4D_Double32_t_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PtEtaPhiE4D_Double32_t_.html,7,['energy'],['energy']
Energy Efficiency,"eturn E(); }. Scalar Px() const; other coordinate representation. { return fPt*cos(fPhi);}. Scalar X() const; { return Px(); }. Scalar Py() const; { return fPt*sin(fPhi);}. Scalar Y() const; { return Py(); }. Scalar Pz() const. Scalar Z() const; { return Pz(); }. Scalar P() const. magnitude of momentum. Scalar R() const; { return P(); }. Scalar P2() const. squared magnitude of spatial components (momentum squared). { Scalar p = P(); return p*p; }. Scalar M2() const. vector magnitude squared (or mass squared). { Scalar p = P(); return fE*fE - p*p; }. Scalar Mag2() const; { return M2(); }. Scalar M() const. invariant mass. Scalar Mag() const; { return M(); }. Scalar Pt2() const. transverse spatial component squared. { return fPt*fPt;}. Scalar Perp2() const; { return Pt2(); }. Scalar Mt2() const. transverse mass squared. { Scalar pz = Pz(); return fE*fE - pz*pz; }. Scalar Mt() const. transverse mass. Scalar Et() const. transverse energy. transverse energy. Scalar Et2() const. transverse energy squared. { Scalar et = Et(); return et*et; }. Scalar pi(); { return M_PI; }. void Restrict(). Scalar Theta() const. polar angle. void SetPt(ROOT::Math::PtEtaPhiE4D<double>::Scalar pt); --------- Set Coordinates of this system ---------------. set Pt value. void SetEta(ROOT::Math::PtEtaPhiE4D<double>::Scalar eta). set eta value. void SetPhi(ROOT::Math::PtEtaPhiE4D<double>::Scalar phi). set phi value. void SetE(ROOT::Math::PtEtaPhiE4D<double>::Scalar e). set E value. void SetPxPyPzE(ROOT::Math::PtEtaPhiE4D<double>::Scalar px, ROOT::Math::PtEtaPhiE4D<double>::Scalar py, ROOT::Math::PtEtaPhiE4D<double>::Scalar pz, ROOT::Math::PtEtaPhiE4D<double>::Scalar e). set values using cartesian coordinate system. void Negate(); ------ Manipulations -------------. negate the 4-vector. void Scale(ROOT::Math::PtEtaPhiE4D<double>::Scalar a). Scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility secition ==================; The following make this coordinate sy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PtEtaPhiE4D_double_.html:6710,energy,energy,6710,root/html526/ROOT__Math__PtEtaPhiE4D_double_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PtEtaPhiE4D_double_.html,7,['energy'],['energy']
Energy Efficiency,"eturn chunk->fSumw2->GetAt(linidx);; 782}; 783 ; 784 ; 785////////////////////////////////////////////////////////////////////////////////; 786/// Return the index for fCurrentBinIndex.; 787/// If it doesn't exist then return -1, or allocate a new bin if allocate is set; 788 ; 789Long64_t THnSparse::GetBinIndexForCurrentBin(Bool_t allocate); 790{; 791 THnSparseCompactBinCoord* cc = GetCompactCoord();; 792 ULong64_t hash = cc->GetHash();; 793 if (fBinContent.GetSize() && !fBins.GetSize()); 794 FillExMap();; 795 Long64_t linidx = (Long64_t) fBins.GetValue(hash);; 796 while (linidx) {; 797 // fBins stores index + 1!; 798 THnSparseArrayChunk* chunk = GetChunk((linidx - 1)/ fChunkSize);; 799 if (chunk->Matches((linidx - 1) % fChunkSize, cc->GetBuffer())); 800 return linidx - 1; // we store idx+1, 0 is ""TExMap: not found""; 801 ; 802 Long64_t nextlinidx = fBinsContinued.GetValue(linidx);; 803 if (!nextlinidx) break;; 804 ; 805 linidx = nextlinidx;; 806 }; 807 if (!allocate) return -1;; 808 ; 809 ++fFilledBins;; 810 ; 811 // allocate bin in chunk; 812 THnSparseArrayChunk *chunk = (THnSparseArrayChunk*) fBinContent.Last();; 813 Long64_t newidx = chunk ? ((Long64_t) chunk->GetEntries()) : -1;; 814 if (!chunk || newidx == (Long64_t)fChunkSize) {; 815 chunk = AddChunk();; 816 newidx = 0;; 817 }; 818 chunk->AddBin(newidx, cc->GetBuffer());; 819 ; 820 // store translation between hash and bin; 821 newidx += (fBinContent.GetEntriesFast() - 1) * fChunkSize;; 822 if (!linidx) {; 823 // fBins didn't find it; 824 if (2 * GetNbins() > fBins.Capacity()); 825 fBins.Expand(3 * GetNbins());; 826 fBins.Add(hash, newidx + 1);; 827 } else {; 828 // fBins contains one, but it's the wrong one;; 829 // add entry to fBinsContinued.; 830 fBinsContinued.Add(linidx, newidx + 1);; 831 }; 832 return newidx;; 833}; 834 ; 835////////////////////////////////////////////////////////////////////////////////; 836/// Return THnSparseCompactBinCoord object.; 837 ; 838THnSparseCompactBinCoord* THnSparse::GetCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:30261,allocate,allocate,30261,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,2,['allocate'],['allocate']
Energy Efficiency,"eturn fVz; }. Double_t T() const; { return fVt; }. Double_t R() const; { return TMath::Sqrt(fVx*fVx+fVy*fVy); }. Double_t Rho() const; { return TMath::Sqrt(fVx*fVx+fVy*fVy+fVz*fVz); }. Double_t Px() const; { return fPx; }. Double_t Py() const; { return fPy; }. Double_t Pz() const; { return fPz; }. Double_t P() const; { return TMath::Sqrt(fPx*fPx+fPy*fPy+fPz*fPz); }. Double_t Pt() const; { return TMath::Sqrt(fPx*fPx+fPy*fPy); }. Double_t Energy() const; { return fE; }. Double_t Eta() const. Double_t Y() const. Double_t Phi() const; { return TMath::Pi()+TMath::ATan2(-fPy,-fPx); }. Double_t Theta() const; { return (fPz==0)?TMath::PiOver2():TMath::ACos(fPz/P()); }. void SetFirstMother(int code); setters. { fMother[0] = code ; }. void SetMother(int i, int code); { fMother[i] = code ; }. void SetLastMother(int code); { fMother[1] = code ; }. void SetFirstDaughter(int code); { fDaughter[0] = code ; }. void SetDaughter(int i, int code); { fDaughter[i] = code ; }. void SetLastDaughter(int code); { fDaughter[1] = code ; }. void SetCalcMass(Double_t mass); { fCalcMass=mass;}. void SetPolarisation(Double_t polx, Double_t poly, Double_t polz). void SetStatusCode(int status); {fStatusCode = status;}. void SetWeight(Float_t weight = 1); {fWeight = weight; }. void SetMomentum(Double_t px, Double_t py, Double_t pz, Double_t e); {fPx=px; fPy=py; fPz=pz; fE=e;}. void SetMomentum(const TLorentzVector& p); {SetMomentum(p.Px(),p.Py(),p.Pz(),p.Energy());}. void SetProductionVertex(Double_t vx, Double_t vy, Double_t vz, Double_t t); {fVx=vx; fVy=vy; fVz=vz; fVt=t;}. void SetProductionVertex(const TLorentzVector& v); {SetProductionVertex(v.X(),v.Y(),v.Z(),v.T());}. » Author: Rene Brun , Federico Carminati 26/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/eg:$Id$ » Last generated: 2015-03-14 16:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TParticle.html:14651,Energy,Energy,14651,root/html534/TParticle.html,https://root.cern,https://root.cern/root/html534/TParticle.html,1,['Energy'],['Energy']
Energy Efficiency,"eturn fVz; }. Double_t T() const; { return fVt; }. Double_t R() const; { return TMath::Sqrt(fVx*fVx+fVy*fVy); }. Double_t Rho() const; { return TMath::Sqrt(fVx*fVx+fVy*fVy+fVz*fVz); }. Double_t Px() const; { return fPx; }. Double_t Py() const; { return fPy; }. Double_t Pz() const; { return fPz; }. Double_t P() const; { return TMath::Sqrt(fPx*fPx+fPy*fPy+fPz*fPz); }. Double_t Pt() const; { return TMath::Sqrt(fPx*fPx+fPy*fPy); }. Double_t Energy() const; { return fE; }. Double_t Eta() const. Double_t Y() const. Double_t Phi() const; { return TMath::Pi()+TMath::ATan2(-fPy,-fPx); }. Double_t Theta() const; { return (fPz==0)?TMath::PiOver2():TMath::ACos(fPz/P()); }. void SetFirstMother(int code); setters. { fMother[0] = code ; }. void SetMother(int i, int code); { fMother[i] = code ; }. void SetLastMother(int code); { fMother[1] = code ; }. void SetFirstDaughter(int code); { fDaughter[0] = code ; }. void SetDaughter(int i, int code); { fDaughter[i] = code ; }. void SetLastDaughter(int code); { fDaughter[1] = code ; }. void SetCalcMass(Double_t mass); { fCalcMass=mass;}. void SetPolarisation(Double_t polx, Double_t poly, Double_t polz). void SetStatusCode(int status); {fStatusCode = status;}. void SetWeight(Float_t weight = 1); {fWeight = weight; }. void SetMomentum(Double_t px, Double_t py, Double_t pz, Double_t e); {fPx=px; fPy=py; fPz=pz; fE=e;}. void SetMomentum(const TLorentzVector& p); {SetMomentum(p.Px(),p.Py(),p.Pz(),p.Energy());}. void SetProductionVertex(Double_t vx, Double_t vy, Double_t vz, Double_t t); {fVx=vx; fVy=vy; fVz=vz; fVt=t;}. void SetProductionVertex(const TLorentzVector& v); {SetProductionVertex(v.X(),v.Y(),v.Z(),v.T());}. » Author: Rene Brun , Federico Carminati 26/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/eg:$Id$ » Last generated: 2015-06-02 16:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TParticle.html:15112,Energy,Energy,15112,root/html604/TParticle.html,https://root.cern,https://root.cern/root/html604/TParticle.html,1,['Energy'],['Energy']
Energy Efficiency,"eturn fVz; }. Double_t T() const; { return fVt; }. Double_t R() const; { return TMath::Sqrt(fVx*fVx+fVy*fVy); }. Double_t Rho() const; { return TMath::Sqrt(fVx*fVx+fVy*fVy+fVz*fVz); }. Double_t Px() const; { return fPx; }. Double_t Py() const; { return fPy; }. Double_t Pz() const; { return fPz; }. Double_t P() const; { return TMath::Sqrt(fPx*fPx+fPy*fPy+fPz*fPz); }. Double_t Pt() const; { return TMath::Sqrt(fPx*fPx+fPy*fPy); }. Double_t Energy() const; { return fE; }. Double_t Eta() const. Double_t Y() const. Double_t Phi() const; { return TMath::Pi()+TMath::ATan2(-fPy,-fPx); }. Double_t Theta() const; { return (fPz==0)?TMath::PiOver2():TMath::ACos(fPz/P()); }. void SetFirstMother(int code); setters. { fMother[0] = code ; }. void SetMother(int i, int code); { fMother[i] = code ; }. void SetLastMother(int code); { fMother[1] = code ; }. void SetFirstDaughter(int code); { fDaughter[0] = code ; }. void SetDaughter(int i, int code); { fDaughter[i] = code ; }. void SetLastDaughter(int code); { fDaughter[1] = code ; }. void SetCalcMass(Double_t mass); { fCalcMass=mass;}. void SetPolarisation(Double_t polx, Double_t poly, Double_t polz). void SetStatusCode(int status); {fStatusCode = status;}. void SetWeight(Float_t weight = 1); {fWeight = weight; }. void SetMomentum(Double_t px, Double_t py, Double_t pz, Double_t e); {fPx=px; fPy=py; fPz=pz; fE=e;}. void SetMomentum(const TLorentzVector& p); {SetMomentum(p.Px(),p.Py(),p.Pz(),p.Energy());}. void SetProductionVertex(Double_t vx, Double_t vy, Double_t vz, Double_t t); {fVx=vx; fVy=vy; fVz=vz; fVt=t;}. void SetProductionVertex(const TLorentzVector& v); {SetProductionVertex(v.X(),v.Y(),v.Z(),v.T());}. » Author: Rene Brun , Federico Carminati 26/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/eg:$Id$ » Last generated: 2015-06-30 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParticle.html:15112,Energy,Energy,15112,root/html602/TParticle.html,https://root.cern,https://root.cern/root/html602/TParticle.html,1,['Energy'],['Energy']
Energy Efficiency,"eturns true, because we have overrided method Compare. ;  ; bool IsVisible () const;  Returns true if node is visible. ;  ; void SetAllMembersCount (ULong_t count);  Sets numbers of all members to ""number"". ;  ; void SetCollapsed (Bool_t collapsed);  Sets collapsing of node to ""collapse"". ;  ; void SetHeight (Float_t h);  Sets width of outlining box to ""w"". ;  ; void SetMaxLevel (UInt_t level);  Sets maximum number of leves displayed when the node is top node on scene. ;  ; void SetMaxObjects (UInt_t max);  Sets maximum number of objects displayed when the node is top node on scene. ;  ; void SetMembers (TList *list);  Sets list of dauther nodes to ""list"". ;  ; void SetMembersCount (ULong_t count);  Sets number of members to ""number"". ;  ; void SetNodeType (ENodeType type);  Sets type of node to ""type"". ;  ; void SetPointer (void *pointer);  Sets main pointer to ""pointer"". ;  ; void SetSize (ULong_t size);  Sets size of node to ""size"". ;  ; void SetTotalSize (ULong_t size);  Sets total size of allocated memory in bytes to value ""size"". ;  ; void SetVisible (bool visible);  Sets visibility of node to ""visible"". ;  ; void SetWidth (Float_t w);  Sets width of outlining box to ""w"". ;  ; void SetX (Float_t x);  Sets X coordinate to ""x"". ;  ; void SetY (Float_t y);  Sets Y coordinate to ""y"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructNode.html:3815,allocate,allocated,3815,doc/master/classTStructNode.html,https://root.cern,https://root.cern/doc/master/classTStructNode.html,1,['allocate'],['allocated']
Energy Efficiency,"euralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::factorWeightDecaydouble factorWeightDecay() constget the weight-decay factorDefinition NeuralNet.h:769; TMVA::DNN::Settings::maxConvergenceCountsize_t maxConvergenceCount() constreturns the max convergence count so farDefinition NeuralNet.h:828; TMVA::DNN::Settings::padsvoid pads(int numPads)preparation for monitoringDefinition NeuralNet.h:818; TMVA::DNN::Settings::batchSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::startTestCyclevirtual void startTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:804; TMVA::DNN::Steepest::m_repetitionssize_t m_repetitionsDefinition NeuralNet.h:337; TMVA::DNN::Steepest::m_betadouble m_betainternal parameter (momentum)Definition NeuralNet.h:372; TMVA::DNN::Steepest::m_localGradientsstd::vector< double > m_localGradientslocal gradients for reuse in thread.Definition NeuralNet.h:376; TMVA::DN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:69117,monitor,monitoringDefinition,69117,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['monitor'],['monitoringDefinition']
Energy Efficiency,"eval). add multi-dim coordinate data with both error in coordinates and value. const double * Coords(unsigned int ipoint) const. return a pointer to the coordinates data for the given fit point. double Value(unsigned int ipoint) const. return the value for the given fit point. double Error(unsigned int ipoint) const. return error on the value for the given fit point; Safe (but slower) method returning correctly the error on the value; in case of asymm errors return the average 0.5(eu + el). double InvError(unsigned int ipoint) const. Return the inverse of error on the value for the given fit point; useful when error in the coordinates are not stored and then this is used directly this as the weight in; the least square function. const double * CoordErrors(unsigned int ipoint) const. Return a pointer to the errors in the coordinates for the given fit point. const double * GetPoint(unsigned int ipoint, double& value) const. retrieve at the same time a pointer to the coordinate data and the fit value; More efficient than calling Coords(i) and Value(i). const double * GetPoint(unsigned int ipoint, double& value, double& invError) const. retrieve in a single call a pointer to the coordinate data, value and inverse error for; the given fit point.; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned; for the error. const double * GetPointError(unsigned int ipoint, double& errvalue) const. Retrieve the errors on the point (coordinate and value) for the given fit point; It must be called only when the coordinate errors are stored otherwise it will produce an; assert. const double * GetPointError(unsigned int ipoint, double& errlow, double& errhigh) const. Get errors on the point (coordinate errors and asymmetric value errors) for the; given fit point.; It must be called only when the coordinate errors and asymmetric errors are stored; otherwise it will produce an assert. void Resize(unsigned int npoints). resize the vector to the ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__BinData.html:10159,efficient,efficient,10159,root/html526/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__BinData.html,1,['efficient'],['efficient']
Energy Efficiency,"evel can be set with the method TFile::SetCompressionLevel. The experience with this algorithm shows that a compression level of 1.3 for raw data files and around two on most DST files is the optimum. The choice of one for the default is a compromise between the time it takes to read and write the object vs. the disk space savings.; To specify no compression, set the level to zero.; We recommend using compression when the time spent in I/O is small compared to the total processing time. If the I/O operation is increased by a factor of 5 it is still a small percentage of the total time and it may compress the data by a factor of 10. On the other hand if the time spend on I/O is large, compression may have a large impact on the program’s performance.; The compression factor, i.e. the savings of disk space, varies with the type of data. A buffer with a same value array is compressed so that the value is only written once. For example, a track has the mass of a pion that it is always the same, and the charge of the pion that is either positive or negative. For 1000 pions, the mass will be written only once, and the charge only twice (positive and negative). When the data is sparse, i.e. when there are many zeros, the compression factor is also high. Compression level; Bytes; Write Time (sec); Read Time (sec.). 0; 1,004,998; 4.77; 0.07. 1; 438,366; 6.67; 0.05. 5; 429,871; 7.03; 0.06. 9; 426,899; 8.47; 0.05. The time to uncompress an object is small compared to the compression time and is independent of the selected compression level. Note that the compression level may be changed at any time, but the new compression level will only apply to newly written objects. Consequently, a ROOT file may contain objects with different compression levels. This table shows four runs of the demo script that creates 15 histograms with different compression parameters. To make the numbers more significant, the macro was modified to create 1000 histograms. We have included two more exampl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:513705,charge,charge,513705,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['charge'],['charge']
Energy Efficiency,"evel); auto branch = tree.Branch(branchname, className, &p_object, bufsize, splitlevel). p_object is a pointer to an object.; If className is not specified, Branch uses the type of p_object to determine the type of the object.; If className is used to specify explicitly the object type, the className must be of a type related to the one pointed to by the pointer. It should be either a parent or derived class. Note: The pointer whose address is passed to TTree::Branch must not be destroyed (i.e. go out of scope) until the TTree is deleted or TTree::ResetBranchAddress is called.; Note: The pointer p_object must be initialized before calling TTree::Branch; Do either: MyDataClass* p_object = nullptr;; tree.Branch(branchname, &p_object);. Or: auto p_object = new MyDataClass;; tree.Branch(branchname, &p_object);; Whether the pointer is set to zero or not, the ownership of the object is not taken over by the TTree. I.e. even though an object will be allocated by TTree::Branch if the pointer p_object is zero, the object will not be deleted when the TTree is deleted. Add a column holding TClonesArray instances; It is recommended to use STL containers instead of TClonesArrays*.; // clonesarray is the address of a pointer to a TClonesArray.; auto branch = tree.Branch(branchname,clonesarray, bufsize, splitlevel); The TClonesArray is a direct access list of objects of the same class. For example, if the TClonesArray is an array of TTrack objects, this function will create one subbranch for each data member of the object TTrack. Fill the Tree; A TTree instance is filled with the invocation of the TTree::Fill method: tree.Fill(); Upon its invocation, a loop on all defined branches takes place that for each branch invokes the TBranch::Fill method. Add a column to an already existing Tree; You may want to add a branch to an existing tree. For example, if one variable in the tree was computed with a certain algorithm, you may want to try another algorithm and compare the results. One",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:8420,allocate,allocated,8420,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['allocate'],['allocated']
Energy Efficiency,"evel, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TVirtualMCStack(); {}. void PushTrack(Int_t toBeDone, Int_t parent, Int_t pdg, Double_t px, Double_t py, Double_t pz, Double_t e, Double_t vx, Double_t vy, Double_t vz, Double_t tof, Double_t polx, Double_t poly, Double_t polz, TMCProcess mech, Int_t& ntr, Double_t weight, Int_t is). Methods for stacking. Create a new particle and push into stack;; toBeDone - 1 if particles should go to tracking, 0 otherwise; parent - number of the parent track, -1 if track is primary; pdg - PDG encoding; px, py, pz - particle momentum [GeV/c]; e - total energy [GeV]; vx, vy, vz - position [cm]; tof - time of flight [s]; polx, poly, polz - polarization; mech - creator process VMC code; ntr - track number (is filled by the stack; weight - particle weight; is - generation status code. TParticle* PopPrimaryForTracking(Int_t i); The stack has to provide two pop mechanisms:; The first pop mechanism required.; Pop all particles with toBeDone = 1, both primaries and seconadies; The second pop mechanism required.; Pop only primary particles with toBeDone = 1, stacking of secondaries; is done by MC. void SetCurrentTrack(Int_t trackNumber). Set methods. Set the current track number. Int_t GetNtrack() const. Get methods. Total number of tracks. Int_t GetNprimary() const; Total number of primary tracks. TParticle* GetCurrentTrack() const; Current track particle. Int_t GetCurrentTrackNumber() const; Current track number. Int_t GetCurrentParentTrackNumber() const; Number of the parent of the current track. » Last changed: root/vmc:$Id$ » Last gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualMCStack.html:6491,energy,energy,6491,root/html534/TVirtualMCStack.html,https://root.cern,https://root.cern/root/html534/TVirtualMCStack.html,2,['energy'],['energy']
Energy Efficiency,"evel, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TVirtualMCStack(); {}. void PushTrack(Int_t toBeDone, Int_t parent, Int_t pdg, Double_t px, Double_t py, Double_t pz, Double_t e, Double_t vx, Double_t vy, Double_t vz, Double_t tof, Double_t polx, Double_t poly, Double_t polz, TMCProcess mech, Int_t& ntr, Double_t weight, Int_t is). Methods for stacking. Create a new particle and push into stack;; toBeDone - 1 if particles should go to tracking, 0 otherwise; parent - number of the parent track, -1 if track is primary; pdg - PDG encoding; px, py, pz - particle momentum [GeV/c]; e - total energy [GeV]; vx, vy, vz - position [cm]; tof - time of flight [s]; polx, poly, polz - polarization; mech - creator process VMC code; ntr - track number (is filled by the stack; weight - particle weight; is - generation status code. TParticle* PopPrimaryForTracking(Int_t i); The stack has to provide two pop mechanisms:; The first pop mechanism required.; Pop all particles with toBeDone = 1, both primaries and seconadies; The second pop mechanism required.; Pop only primary particles with toBeDone = 1, stacking of secondaries; is done by MC. void SetCurrentTrack(Int_t trackNumber). Set methods. Set the current track number. Int_t GetNtrack() const. Get methods. Total number of tracks. Int_t GetNprimary() const; Total number of primary tracks. TParticle* GetCurrentTrack() const; Current track particle. Int_t GetCurrentTrackNumber() const; Current track number. Int_t GetCurrentParentTrackNumber() const; Number of the parent of the current track. » Last changed: root/vmc:$Id: TVirtualMC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMCStack.html:6403,energy,energy,6403,root/html528/TVirtualMCStack.html,https://root.cern,https://root.cern/root/html528/TVirtualMCStack.html,4,['energy'],['energy']
Energy Efficiency,event selection list (if one) ;  ; Long64_t fEstimate;  Number of entries to estimate histogram limits. ;  ; TEventList * fEventList;  ! Pointer to event selection list (if one) ;  ; TList * fExternalFriends;  ! List of TFriendsElement pointing to us and need to be notified of LoadTree. Content not owned. ;  ; Int_t fFileNumber;  ! current file number (if file extensions) ;  ; Long64_t fFlushedBytes;  Number of auto-flushed bytes. ;  ; UInt_t fFriendLockStatus;  ! Record which method is locking the friend recursion ;  ; TList * fFriends;  pointer to list of friend elements ;  ; bool fIMTEnabled;  ! true if implicit multi-threading is enabled for this tree ;  ; TArrayI fIndex;  Index of sorted values. ;  ; TArrayD fIndexValues;  Sorted index values. ;  ; TIOFeatures fIOFeatures {0};  IO features to define for newly-written baskets and branches. ;  ; TObjArray fLeaves;  Direct pointers to individual branch leaves. ;  ; Int_t fMakeClass;  ! not zero when processing code generated by MakeClass ;  ; Int_t fMaxClusterRange;  ! Memory allocated for the cluster range. ;  ; Long64_t fMaxEntries;  Maximum number of entries in case of circular buffers. ;  ; Long64_t fMaxEntryLoop;  Maximum number of entries to process. ;  ; Long64_t fMaxVirtualSize;  Maximum total size of buffers kept in memory. ;  ; Int_t fNClusterRange;  Number of Cluster range in addition to the one defined by 'AutoFlush'. ;  ; UInt_t fNEntriesSinceSorting;  ! Number of entries processed since the last re-sorting of branches ;  ; Int_t fNfill;  ! Local for EntryLoop ;  ; TObject * fNotify;  Object to be notified when loading a Tree. ;  ; Int_t fPacketSize;  ! Number of entries in one packet for parallel root ;  ; TVirtualPerfStats * fPerfStats;  ! pointer to the current perf stats object ;  ; TVirtualTreePlayer * fPlayer;  ! Pointer to current Tree player ;  ; Long64_t fReadEntry;  ! Number of the entry being processed ;  ; Long64_t fSavedBytes;  Number of autosaved bytes. ;  ; Int_t fScanField;  Number of r,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:49066,allocate,allocated,49066,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,9,['allocate'],['allocated']
Energy Efficiency,"events inside range with given name. Multiple CutRange; arguments may be given to select multiple ranges; EventRange(int lo, int hi) -- Only retain events with given sequential event numbers; Name(const char* name) -- Give specified name to output dataset; Title(const char* name) -- Give specified title to output dataset. RooAbsData* reduce(const char* cut); Create a subset of the data set by applying the given cut on the data points.; The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points.; The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. RooAbsData* reduce(const RooArgSet& varSubset, const char* cut); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. Double_t weightError(RooAbsData::ErrorType etype = Poisson) const; Return error on current weight (dummy implementation returning zero). void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; Return asymmetric error on weight. (Dummy implementation returning zero). RooPlot* plotOn(RooPlot* frame, const RooCmdArg& arg1 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsData.html:16258,reduce,reduce,16258,root/html526/RooAbsData.html,https://root.cern,https://root.cern/root/html526/RooAbsData.html,1,['reduce'],['reduce']
Energy Efficiency,"ew filename, const ColumnNames_t &columnList, const RSnapshotOptions &options=RSnapshotOptions())Save selected columns to disk, in a new TTree treename in file filename.Definition RInterface.hxx:1317; ROOT::RDF::RInterface::AggregateRResultPtr< U > Aggregate(AccFun aggregator, MergeFun merger, std::string_view columnName="""")Execute a user-defined accumulation operation on the processed column values in each processing slot.Definition RInterface.hxx:2913; ROOT::RDF::RInterface::DefineSlotEntryRInterface< Proxied, DS_t > DefineSlotEntry(std::string_view name, F expression, const ColumnNames_t &columns={})Define a new column with a value dependent on the processing slot and the current entry.Definition RInterface.hxx:500; ROOT::RDF::RInterface::MinRResultPtr< RDFDetail::MinReturnType_t< T > > Min(std::string_view columnName="""")Return the minimum of processed column values (lazy action).Definition RInterface.hxx:2640; ROOT::RDF::RInterface::ReduceRResultPtr< T > Reduce(F f, std::string_view columnName="""")Execute a user-defined reduce operation on the values of a column.Definition RInterface.hxx:1688; ROOT::RDF::RInterface::Foreachvoid Foreach(F f, const ColumnNames_t &columns={})Execute a user-defined function on each entry (instant action).Definition RInterface.hxx:1611; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RJittedFilter, DS_t > Filter(std::string_view expression, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:288; ROOT::RDF::RInterface::Profile2DRResultPtr<::TProfile2D > Profile2D(const TProfile2DModel &model)Fill and return a two-dimensional profile (lazy action).Definition RInterface.hxx:2496; ROOT::RDF::RInterface::FilterRInterface< RDFDetail::RFilter< F, Proxied >, DS_t > Filter(F f, const ColumnNames_t &columns={}, std::string_view name="""")Append a filter to the call graph.Definition RInterface.hxx:219; ROOT::RDF::RInterface::AggregateRResultPtr< U > Aggregate(AccFun aggregator, MergeFun merger, std::string_vie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:213558,reduce,reduce,213558,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['reduce'],['reduce']
Energy Efficiency,"ewValue; ; Definition at line 123 of file GeneticAlgorithm.cxx. ◆ SetMakeCopies(). void TMVA::GeneticAlgorithm::SetMakeCopies ; (; Bool_t ; s). inline . Definition at line 72 of file GeneticAlgorithm.h. ◆ SetSpread(). void TMVA::GeneticAlgorithm::SetSpread ; (; Double_t ; s). inline . Definition at line 70 of file GeneticAlgorithm.h. ◆ SpreadControl(). Double_t TMVA::GeneticAlgorithm::SpreadControl ; (; Int_t ; ofSteps, . Int_t ; successSteps, . Double_t ; factor . ). virtual . this function provides the ability to change the stepSize of a mutation according to the success of the last generations. ; Parameters:. int ofSteps : = if OF the number of STEPS given in this variable (ofSteps); int successSteps : >sucessSteps Generations could improve the result; double factor : than multiply the stepSize ( spread ) by this factor. (if ofSteps == successSteps nothing is changed, if ofSteps < successSteps, the spread is divided by the factor); using this function one can increase the stepSize of the mutation when we have good success (to pass fast through the easy phase-space) and reduce the stepSize if we are in a difficult ""territory"" of the phase-space. ; Definition at line 217 of file GeneticAlgorithm.cxx. ◆ Streamer(). virtual void TMVA::GeneticAlgorithm::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::GeneticAlgorithm::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 104 of file GeneticAlgorithm.h. Member Data Documentation. ◆ fBestFitness. Double_t TMVA::GeneticAlgorithm::fBestFitness. protected . Definition at line 99 of file GeneticAlgorithm.h. ◆ fConvCounter. Int_t TMVA::GeneticAlgorithm::fConvCounter. Definition at line 75 of file GeneticAlgorithm.h. ◆ fConvValue. Double_t TMVA::GeneticAlgorithm::fConvValue. protected . Definition at line 81 of file GeneticAlgorithm.h. ◆ fFirstTime. Bool_t TMVA::GeneticAlgorithm::fFirstTime. protected . Definition at line 91 of file GeneticAlgorithm.h. ◆ fFitterTar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:8086,reduce,reduce,8086,doc/master/classTMVA_1_1GeneticAlgorithm.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html,1,['reduce'],['reduce']
Energy Efficiency,"ex category; // and can thus not be integrated.; // In other words: Since the PDF doesn't know the number of events in the different; // category states, it doesn't know how much of each component it has to project out.; // This information is read from the data.; simPdf.plotOn(frame1, Slice(sample, ""physics""), ProjWData(sample, combData));; simPdf.plotOn(frame1, Slice(sample, ""physics""), Components(""px""), ProjWData(sample, combData), LineStyle(kDashed));; ; // The same plot for the control sample slice. We do this with a different; // approach this time, for illustration purposes. Here, we are slicing the; // dataset and then use the data slice for the projection, because then the; // RooFit::Slice() becomes unnecessary. This approach is more general,; // because you can plot sums of slices by using logical or in the Cut(); // command.; RooPlot *frame2 = x.frame(Bins(30), Title(""Control sample""));; std::unique_ptr<RooAbsData> slicedData{combData.reduce(Cut(""sample==sample::control""))};; slicedData->plotOn(frame2);; simPdf.plotOn(frame2, ProjWData(sample, *slicedData));; simPdf.plotOn(frame2, Components(""px_ctl""), ProjWData(sample, *slicedData), LineStyle(kDashed));; ; // The same plot for all the phase space. Here, we can just use the original; // combined dataset.; RooPlot *frame3 = x.frame(Title(""Both samples""));; combData.plotOn(frame3);; simPdf.plotOn(frame3, ProjWData(sample, combData));; simPdf.plotOn(frame3, Components(""px,px_ctl""), ProjWData(sample, combData),; LineStyle(kDashed));; ; TCanvas *c = new TCanvas(""rf501_simultaneouspdf"", ""rf403_simultaneouspdf"", 1200, 400);; c->Divide(3);; auto draw = [&](int i, RooPlot & frame) {; c->cd(i);; gPad->SetLeftMargin(0.15);; frame.GetYaxis()->SetTitleOffset(1.4);; frame.Draw();; };; draw(1, *frame1);; draw(2, *frame2);; draw(3, *frame3);; }; f#define f(i)Definition RSha256.hxx:104; c#define c(i)Definition RSha256.hxx:101; RooAddPdf.h; RooCategory.h; RooChebychev.h; RooDataSet.h; RooGaussian.h; RooPlot.h; RooRealVar.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf501__simultaneouspdf_8C.html:5050,reduce,reduce,5050,doc/master/rf501__simultaneouspdf_8C.html,https://root.cern,https://root.cern/doc/master/rf501__simultaneouspdf_8C.html,1,['reduce'],['reduce']
Energy Efficiency,"ex for the n dimensional tuple addressed by ""name"", allocate one if it doesn't exist yet and ""allocate"" is true. ; Implements THnBase.; Definition at line 718 of file THnSparse.cxx. ◆ GetBin() [3/6]. Long64_t THnSparse::GetBin ; (; const Double_t * ; x); const. inlineoverridevirtual . Implements THnBase.; Definition at line 97 of file THnSparse.h. ◆ GetBin() [4/6]. Long64_t THnSparse::GetBin ; (; const Double_t * ; x, . Bool_t ; allocate = kTRUE . ). overridevirtual . Get the bin index for the n dimensional tuple x, allocate one if it doesn't exist yet and ""allocate"" is true. ; Implements THnBase.; Definition at line 702 of file THnSparse.cxx. ◆ GetBin() [5/6]. Long64_t THnSparse::GetBin ; (; const Int_t * ; idx); const. inlineoverridevirtual . Implements THnBase.; Definition at line 96 of file THnSparse.h. ◆ GetBin() [6/6]. Long64_t THnSparse::GetBin ; (; const Int_t * ; idx, . Bool_t ; allocate = kTRUE . ). overridevirtual . Get the bin index for the n dimensional coordinates coord, allocate one if it doesn't exist yet and ""allocate"" is true. ; Implements THnBase.; Definition at line 733 of file THnSparse.cxx. ◆ GetBinContent() [1/2]. Double_t THnSparse::GetBinContent ; (; const Int_t * ; idx); const. inline . Forwards to THnBase::GetBinContent() overload. ; Non-virtual, CINT-compatible replacement of a using declaration. ; Definition at line 121 of file THnSparse.h. ◆ GetBinContent() [2/2]. Double_t THnSparse::GetBinContent ; (; Long64_t ; idx, . Int_t * ; coord = nullptr . ); const. overridevirtual . Return the content of the filled bin number ""idx"". ; If coord is non-null, it will contain the bin's coordinates for each axis that correspond to the bin. ; Implements THnBase.; Definition at line 744 of file THnSparse.cxx. ◆ GetBinError2(). Double_t THnSparse::GetBinError2 ; (; Long64_t ; linidx); const. overridevirtual . Get square of the error of bin addressed by linidx as \(\sum weight^{2}\) If errors are not enabled (via Sumw2() or CalculateErrors()) return con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:34298,allocate,allocate,34298,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,2,['allocate'],['allocate']
Energy Efficiency,"ex; doubleTMatrixTBase<double>::fTolsqrt(epsilon); epsilon is smallest number number so that 1+epsilon > 1; static TMatrixTBase<double>::(anonymous)TMatrixTBase<double>::kSizeMax; static TMatrixTBase<double>::EMatrixStatusBitsTMatrixTBase<double>::kStatus; static TMatrixTBase<double>::(anonymous)TMatrixTBase<double>::kWorkMax. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TMatrixTSym<Element> Delete_m(Int_t size, double*& ); delete data pointer m, if it was assigned on the heap. Element* TMatrixTSym<Element> New_m(Int_t size); return data pointer . if requested size <= kSizeMax, assign pointer; to the stack space. Int_t TMatrixTSym<Element> Memcpy_m(double* newp, const double* oldp, Int_t copySize, Int_t newSize, Int_t oldSize); copy copySize doubles from *oldp to *newp . However take care of the; situation where both pointers are assigned to the same stack space. void TMatrixTSym<Element> Allocate(Int_t nrows, Int_t ncols, Int_t row_lwb = 0, Int_t col_lwb = 0, Int_t init = 0, Int_t = -1); Allocate new matrix. Arguments are number of rows, columns, row; lowerbound (0 default) and column lowerbound (0 default). void TMatrixTSym<Element> Plus(const TMatrixTSym<double>& a, const TMatrixTSym<double>& b); Symmetric matrix summation. Create a matrix C such that C = A + B. void TMatrixTSym<Element> Minus(const TMatrixTSym<double>& a, const TMatrixTSym<double>& b); Symmetric matrix summation. Create a matrix C such that C = A + B. void TMatrixTSym<Element> TMult(const TMatrixT<Element> &a); Create a matrix C such that C = A' * A. In other words,; c[i,j] = SUM{ a[k,i] * a[k,j] }. void TMatrixTSym<Element> TMult(const TMatrixTSym<Element> &a); Matrix multiplication, with A symmetric; Create a matrix C such that C = A' * A = A * A = A * A'. TMatrixTSym<Element> &TMatrixTSym<Element> Use(Int_t row_lwb, Int_t row_upb, double* data). TMatrixTSym<Element> &TMatrixTSym<Element> GetSub(Int_t row_lwb, Int_t row_upb, TMatrixTSym<double>",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTSym_double_.html:14882,Allocate,Allocate,14882,root/html602/TMatrixTSym_double_.html,https://root.cern,https://root.cern/root/html602/TMatrixTSym_double_.html,4,['Allocate'],['Allocate']
Energy Efficiency,"exact zero as a result of the procedure outlined below. Therefore, the user is asked to provide a minimum relative error \( \epsilon\) (TMultiDimFit::SetMinRelativeError), and \( S\) will be considered minimized when. \[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the numb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:4509,power,power,4509,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['power'],['power']
Energy Efficiency,"example, the following code is equivalent in PyROOT:; 96\code{.py}; 97# Directly passing a RooCmdArg:; 98params.printLatex(ROOT.RooFit.Sibling(initParams), ROOT.RooFit.Columns(2)); 99 ; 100# With keyword arguments:; 101params.printLatex(Sibling=initParams, Columns =2); 102\endcode; 103 ; 104\anchor _rooabscollection_printlatex; 105### RooAbsCollection.printLatex; 106The RooAbsCollection::printLatex() function is pythonized with the command argument pythonization.; 107The keywords must correspond to the CmdArgs of the function.; 108 ; 109\see RooAbsCollection::printLatex(const RooCmdArg& arg1, const RooCmdArg& arg2, const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5, const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8) const; 110 ; 111\anchor _rooabsdata; 112## RooAbsData; 113\see RooAbsData; 114 ; 115Some member functions of RooAbsData that take a RooCmdArg as argument also support keyword arguments.; 116This applies to RooAbsData::plotOn, RooAbsData::createHistogram, RooAbsData::reduce, RooAbsData::statOn.; 117For example, the following code is equivalent in PyROOT:; 118\code{.py}; 119# Directly passing a RooCmdArg:; 120data.plotOn(frame, ROOT.RooFit.CutRange(""r1"")); 121 ; 122# With keyword arguments:; 123data.plotOn(frame, CutRange=""r1""); 124\endcode; 125 ; 126\anchor _rooabsdata_createhistogram; 127### RooAbsData.createHistogram; 128The RooAbsData::createHistogram() function is pythonized with the command argument pythonization.; 129The keywords must correspond to the CmdArgs of the function.; 130 ; 131\see RooAbsData::createHistogram(const char *name, const RooAbsRealLValue& xvar, const RooCmdArg& arg1, const RooCmdArg& arg2, const RooCmdArg& arg3, const RooCmdArg& arg4, const RooCmdArg& arg5, const RooCmdArg& arg6, const RooCmdArg& arg7, const RooCmdArg& arg8) const; 132 ; 133\anchor _rooabsdata_ploton; 134### RooAbsData.plotOn; 135The RooAbsData::plotOn() function is pythonized with the command argument pythonization.; 136The ke",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/__roofit_8pyzdoc_source.html:5420,reduce,reduce,5420,doc/master/__roofit_8pyzdoc_source.html,https://root.cern,https://root.cern/doc/master/__roofit_8pyzdoc_source.html,1,['reduce'],['reduce']
Energy Efficiency,"exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(const Int_t* idx) const; Get content of bin with coordinates ""coord"". Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError(const Int_t* idx) const; Get error of bin with coordinates ""coord"" as. If errors are not enabled (via Sumw2() or CalculateErrors()); return sqrt(contents). Double_t GetBinError(Long64_t linidx) const; Get error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return sqrt(contents). Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. void GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Generate an n-dimensional random tuple based on the histogrammed; distribution. If subBinRandom, the returned tuple will be additionally; randomly distributed within the randomized bin, using a flat; distribution. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. Bool_t IsInRange(Int_t* coord) const; Check whether bin coord is in range, as defined by TAxis::SetRange().; Currently, TAxis::SetRange() does not allow to select all but over- and; underflow bins (it instead resets the axis to ""no range selected"").; Instead, simply call; TAxis* axis12 = hsparse.GetAxis(12);; axis12->SetRange(1, axis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:17762,allocate,allocate,17762,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,8,['allocate'],['allocate']
Energy Efficiency,"expr Double_t PiOver2 ();  \( \frac{\pi}{2} \) ;  ; constexpr Double_t PiOver4 ();  \( \frac{\pi}{4} \) ;  ; Double_t Poisson (Double_t x, Double_t par);  Computes the Poisson distribution function for (x,par). ;  ; Double_t PoissonI (Double_t x, Double_t par);  Computes the Discrete Poisson distribution function for (x,par). ;  ; Double_t Power (Double_t x, Double_t y);  Returns x raised to the power y. ;  ; Double_t Power (Double_t x, Int_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (Long64_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, Long64_t y);  Returns x raised to the power y. ;  ; LongDouble_t Power (LongDouble_t x, LongDouble_t y);  Returns x raised to the power y. ;  ; Double_t Prob (Double_t chi2, Int_t ndf);  Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ;  ; constexpr Double_t Qe ();  Elementary charge in \( C \) . ;  ; constexpr Double_t QeUncertainty ();  Elementary charge uncertainty. ;  ; void Quantiles (Int_t n, Int_t nprob, Double_t *x, Double_t *quantiles, Double_t *prob, Bool_t isSorted=kTRUE, Int_t *index=nullptr, Int_t type=7);  Computes sample quantiles, corresponding to the given probabilities. ;  ; Double_t QuietNaN ();  Returns a quiet NaN as defined by IEEE 754. ;  ; constexpr Double_t R ();  Universal gas constant ( \( Na K \)) in \( J K^{-1} mol^{-1} \) ;  ; constexpr Double_t RadToDeg ();  Conversion from radian to degree: \( \frac{180}{\pi} \). ;  ; Double_t Range (Double_t lb, Double_t ub, Double_t x);  Returns x if lb < x < up, lb if x < lb and ub if x > ub. ;  ; Int_t Range (Int_t lb, Int_t ub, Int_t x);  Returns x if lb < x < up, lb if x < lb and ub if x > ub. ;  ; Long_t Range (Long_t lb, Long_t ub, Long_t x);  Returns x if lb < x < up, lb if x < lb and ub if x > ub. ;  ; Short_t Range (Short_t lb, Short_t ub, Short_t x);  Returns x if lb < x < up, lb if x < lb and ub if x > ub. ;  ; ULong_t Range (ULong_t l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:17688,charge,charge,17688,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['charge'],['charge']
Energy Efficiency,"ext::fTextAlignText alignment; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; TStringfValueFormatVform numeric format for the value; Double_tfXX coordinate of the pie centre; Double_tfYY coordinate of the pie centre. private:. TLegend*fLegend!Legend for this piechart; Float_t*fSlices!Subdivisions of the slices; Float_tfSum!Sum for the slice values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPie(); Default constructor. TPie(const char* , const char* , Int_t ); This constructor creates a pie chart when only the number of; the slices is known. The number of slices is fixed. TPie(const char* , const char* , Int_t , Double_t* , Int_t* cols = 0, const char*[] lbls = 0); Normal constructor. The 1st and 2nd parameters are the name of the object; and its title. The number of points passed at this point is used to allocate the memory. Slices values are given as Double_t. The 4th elements is an array containing, in double precision format,; the value of each slice. It is also possible to specify the filled color; of each slice. If the color array is not specfied the slices are colored; using a color sequence in the standard palette. TPie(const char* , const char* , Int_t , Float_t* , Int_t* cols = 0, const char*[] lbls = 0); Normal constructor (Float_t). TPie(const TH1* h); Constructor from a TH1. TPie(const TPie& ); Copy constructor. ~TPie(); Destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Evaluate the distance to the chart in gPad. Int_t DistancetoSlice(Int_t , Int_t ); Returns the slice number at the pixel position (px,py).; Returns -1 if no slice is picked. Used by DistancetoPrimitive. void Draw(Option_t* option = ""l""); Draw the pie chart. The possible options are listed in the TPie::Paint() method. void DrawGhost(); This method is for internal use. It is used by E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPie.html:10541,allocate,allocate,10541,root/html602/TPie.html,https://root.cern,https://root.cern/root/html602/TPie.html,4,['allocate'],['allocate']
Energy Efficiency,"extMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_tfBeta[3]betas of decaying particle; TLorentzVectorfDecPro[18]kinematics of the generated particles; Double_tfMass[18]masses of particles; Int_tfNtnumber of decay particles; Double_tfTeCmTmtotal energy in the C.M. minus the total mass; Double_tfWtMaxmaximum weigth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t PDK(Double_t a, Double_t b, Double_t c); the PDK function. TGenPhaseSpace(const TGenPhaseSpace& gen); copy constructor. TGenPhaseSpace& operator=(const TGenPhaseSpace& gen); Assignment operator. Double_t Generate(); Generate a random final state.; The function returns the weigth of the current event.; The TLorentzVector of each decay product can be obtained using GetDecay(n). Note that Momentum, Energy units are Gev/C, GeV. TLorentzVector * GetDecay(Int_t n); return Lorentz vector corresponding to decay n. Bool_t SetDecay(TLorentzVector& P, Int_t nt, const Double_t* mass, Option_t* opt = """"); input:; TLorentzVector &P: decay particle (Momentum, Energy units are Gev/C, GeV); Int_t nt: number of decay products; Double_t *mass: array of decay product masses; Option_t *opt: default -> constant cross section; ""Fermi"" -> Fermi energy dependece; return value:; kTRUE: the decay is permitted by kinematics; kFALSE: the decay is forbidden by kinematics. TGenPhaseSpace(); {}. virtual ~TGenPhaseSpace(); {}. Int_t GetNt() const; { return fNt;}. Double_t GetWtMax() const; { return fWtMax;}. » Last changed: root/physics:$Id$ » Last generated: 2015-06-02 15:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGenPhaseSpace.html:7573,energy,energy,7573,root/html604/TGenPhaseSpace.html,https://root.cern,https://root.cern/root/html604/TGenPhaseSpace.html,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"extMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_tfBeta[3]betas of decaying particle; TLorentzVectorfDecPro[18]kinematics of the generated particles; Double_tfMass[18]masses of particles; Int_tfNtnumber of decay particles; Double_tfTeCmTmtotal energy in the C.M. minus the total mass; Double_tfWtMaxmaximum weigth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t PDK(Double_t a, Double_t b, Double_t c); the PDK function. TGenPhaseSpace(const TGenPhaseSpace& gen); copy constructor. TGenPhaseSpace& operator=(const TGenPhaseSpace& gen); Assignment operator. Double_t Generate(); Generate a random final state.; The function returns the weigth of the current event.; The TLorentzVector of each decay product can be obtained using GetDecay(n). Note that Momentum, Energy units are Gev/C, GeV. TLorentzVector * GetDecay(Int_t n); return Lorentz vector corresponding to decay n. Bool_t SetDecay(TLorentzVector& P, Int_t nt, const Double_t* mass, Option_t* opt = """"); input:; TLorentzVector &P: decay particle (Momentum, Energy units are Gev/C, GeV); Int_t nt: number of decay products; Double_t *mass: array of decay product masses; Option_t *opt: default -> constant cross section; ""Fermi"" -> Fermi energy dependece; return value:; kTRUE: the decay is permitted by kinematics; kFALSE: the decay is forbidden by kinematics. TGenPhaseSpace(); {}. virtual ~TGenPhaseSpace(); {}. Int_t GetNt() const; { return fNt;}. Double_t GetWtMax() const; { return fWtMax;}. » Last changed: root/physics:$Id$ » Last generated: 2015-06-30 14:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenPhaseSpace.html:7573,energy,energy,7573,root/html602/TGenPhaseSpace.html,https://root.cern,https://root.cern/root/html602/TGenPhaseSpace.html,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"extView, TDirectoryFile, TFile, TArc, TArrow, TAxis, TBox, TColor, TCrown, TEllipse, TF1, TFormula, TF12, TF2, TF3, ROOT::v5::TFormula, TFrame, THelix, TAxis3D, TH1, TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile3D, TLine, TMarker, TNamed, TH2Poly, TLegend, TLegendEntry, TF1Convolution, TF1NormSum, TH1K, TF1AbsComposition, TPaletteAxis, TPave, TPaveLabel, TPaveClass, TPolyLine, TPolyLine3D, TPolyMarker3D, TPolyMarker, TPieSlice, TStyle, TLatex, TMathText, TText, TWbox, and TXTRU.; Definition at line 140 of file TObject.cxx. ◆ DeclFileName(). static const char * TObject::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 243 of file TObject.h. ◆ Delete(). void TObject::Delete ; (; Option_t * ; option = """"). virtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented in TDirectory, TDirectoryFile, TFile, TSystemDirectory, TSystemFile, TTreeViewer, TGItemContext, TCanvas, TGFrame, TGTextEdit, TAxis, RooLinkedList, TExMap, TObjectTable, TProtoClass, TKeySQL, TKeyXML, TQCommand, TBtree, TClonesArray, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, TViewPubFunctions, TThread, TKey, TMVA::Results, TTree, and TCollection.; Definition at line 248 of file TObject.cxx. ◆ DistancetoPrimitive(). Int_t TObject::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). virtual . Computes distance from point (px,py) to the object. ; This member function must be implemented for each graphics primitive. This default function returns a big number (999999). ; Reimplemented in TGeoTessellated, TStyle, TGeoBBox, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:27277,allocate,allocated,27277,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['allocate'],['allocated']
Energy Efficiency,"extView, TDirectoryFile, TFile, TArc, TArrow, TAxis, TBox, TColor, TCrown, TEllipse, TF1, TFormula, TF12, TF2, TF3, ROOT::v5::TFormula, TFrame, THelix, TAxis3D, TH1, TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile3D, TLine, TMarker, TNamed, TH2Poly, TLegend, TLegendEntry, TF1Convolution, TF1NormSum, TH1K, TF1AbsComposition, TPaletteAxis, TPave, TPaveLabel, TPaveClass, TPolyLine, TPolyLine3D, TPolyMarker3D, TPolyMarker, TPieSlice, TStyle, TLatex, TMathText, TText, TWbox, and TXTRU.; Definition at line 146 of file TObject.cxx. ◆ DeclFileName(). static const char * TObject::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 243 of file TObject.h. ◆ Delete(). void TObject::Delete ; (; Option_t * ; option = """"). virtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented in TDirectory, TDirectoryFile, TFile, TSystemDirectory, TSystemFile, TTreeViewer, TGItemContext, TCanvas, TGFrame, TGTextEdit, TAxis, RooLinkedList, TExMap, TObjectTable, TProtoClass, TKeySQL, TKeyXML, TQCommand, TBtree, TClonesArray, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, TViewPubFunctions, TThread, TKey, TMVA::Results, TTree, and TCollection.; Definition at line 254 of file TObject.cxx. ◆ DistancetoPrimitive(). Int_t TObject::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). virtual . Computes distance from point (px,py) to the object. ; This member function must be implemented for each graphics primitive. This default function returns a big number (999999). ; Reimplemented in TGeoTessellated, TStyle, TGeoBBox, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:27009,allocate,allocated,27009,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['allocate'],['allocated']
Energy Efficiency,"ey and the key is written to disk. Once written to disk the memory consumed by the buffer part is released. The key part of the TKey is kept. A diagram of a streamed TH1F in the buffer. The key consumes about 60 bytes, whereas the buffer, since it contains the object data, can be very large.; 11.3.9 Ignore Object Streamers; Your class can ignore the TObject Streamerwith the MyClass->Class::IgnoreObjectStreamer() method. When the class kIgnoreTObjectStreamerbit is set (by calling the IgnoreTObjectStreamermethod), the automatically generated Streamerwill not call TObject::Streamer, and the TObject part of the class is not streamed to the file. This is useful in case you do not use the TObject fBits and fUniqueIDdata members. You gain space on the file, and you do not loose functionality if you do not use the fBits and fUniqueID.See “The Role of TObject” on the use of fBits and fUniqueID.; 11.3.10 Streaming a TClonesArray; When writing a TClonesArray it bypasses by default the Streamerof the member class and uses a more efficient internal mechanism to write the members to the file. You can override the default and specify that the member class Streameris used by setting the TClonesArray::BypassStreamer bit to false:; TClonesArray *fTracks;; fTracks->BypassStreamer(kFALSE); // use the member Streamer; When the kBypassStreamer bit is set, the automatically generated Streamercan call directly the method TClass::WriteBuffer. Bypassing the Streamer improves the performance when writing/reading the objects in the TClonesArray. However, the drawback is when a TClonesArray is written with split=0 bypassing the Streamer, the StreamerInfoof the class in the array being optimized, one cannot later use the TClonesArray with split > 0. For example, there is a problem with the following scenario: a class Foo has a TClonesArray of Bar objects the Foo object is written with split=0 to Tree T1. In this case the StreamerInfo for the class Bar is created in optimized mode in such a way t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:476497,efficient,efficient,476497,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['efficient'],['efficient']
Energy Efficiency,"ey are constructed from. Instead they are attached to an internal; # clone of the supplied set of arguments; ; # Fill d with dummy values; for i in range(1000):; x.setVal(i / 50 - 10); y.setVal(math.sqrt(1.0 * i)); if i % 2:; c.setLabel(""Plus""); else:; c.setLabel(""Minus""); ; # We must explicitly refer to x,y, here to pass the values because; # d is not linked to them (as explained above); if i < 3:; print(x, y, c); print(type(x)); d.add({x, y, c}); ; d.Print(""v""); print(""""); ; # The get() function returns a pointer to the internal copy of the RooArgSet(x,y,c); # supplied in the constructor; row = d.get(); row.Print(""v""); print(""""); ; # Get with an argument loads a specific data point in row and returns; # a pointer to row argset. get() always returns the same pointer, unless; # an invalid row number is specified. In that case a null ptr is returned; d.get(900).Print(""v""); print(""""); ; # Reducing, appending and merging; # -------------------------------------------------------------; ; # The reduce() function returns a dataset which is a subset of the; # original; print(""\n >> d1 has only columns x,c""); d1 = d.reduce({x, c}); d1.Print(""v""); ; print(""\n >> d2 has only column y""); d2 = d.reduce({y}); d2.Print(""v""); ; print(""\n >> d3 has only the points with y>5.17""); d3 = d.reduce(""y>5.17""); d3.Print(""v""); ; print(""\n >> d4 has only columns x, for data points with y>5.17""); d4 = d.reduce({x, c}, ""y>5.17""); d4.Print(""v""); ; # The merge() function adds two data set column-wise; print(""\n >> merge d2(y) with d1(x,c) to form d1(x,c,y)""); d1.merge(d2); d1.Print(""v""); ; # The append() function adds two datasets row-wise; print(""\n >> append data points of d3 to d1""); d1.append(d3); d1.Print(""v""); ; # Operations on binned datasets; # ---------------------------------------------------------; ; # A binned dataset can be constructed empty, an unbinned dataset, or; # from a ROOT native histogram (TH1,2,3); ; print("">> construct dh (binned) from d(unbinned) but only take the x an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf402__datahandling_8py.html:2193,reduce,reduce,2193,doc/master/rf402__datahandling_8py.html,https://root.cern,https://root.cern/doc/master/rf402__datahandling_8py.html,1,['reduce'],['reduce']
Energy Efficiency,"f ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary function to get the next power of 2 integer value larger then n. ; Used by the autobin power of 2 algorithm ; Definition at line 1321 of file TH1.cxx. ◆ AutoP2GetPower2(). Double_t TH1::AutoP2GetPower2 ; (; Double_t ; x, . Bool_t ; next = kTRUE . ). inlinestaticprotected . Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ; next = kTRUE : next larger next = kFALSE : previous smaller; Used by the autobin power of 2 algorithm ; Definition at line 1308 of file TH1.cxx. ◆ AxisChoice(). Int_t TH1::AxisChoice ; (; Option_t * ; axis); const. protected . Choose an axis according to ""axis"". ; Definition at line 14 of file Haxis.cxx. ◆ Browse(). void TH1::Browse ; (; TBrowser * ; b). overridevirtual . Browse the Histogram object. ; Reimplemented from TObject.; Definition at line 762 of file TH1.cxx. ◆ BufferEmpty(). Int_t TH1::BufferEmpty ; (; Int_t ; action = 0). virtual . Fill histogram with all entries in the buffer. . action = -1 histogram is reset and refilled from the buffer (ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:81765,power,power,81765,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['power'],['power']
Energy Efficiency,"f (ele->GetOffset() == kMissing) continue;; 4978 char* eaddr = p + ele->GetOffset();; 4979 ; 4980 ; 4981 Int_t etype = ele->GetType();; 4982 ; 4983 switch(etype) {; 4984 case TStreamerInfo::kOffsetP + TStreamerInfo::kBool: DeleteBasicPointer(eaddr,ele,Bool_t); continue;; 4985 case TStreamerInfo::kOffsetP + TStreamerInfo::kChar: DeleteBasicPointer(eaddr,ele,Char_t); continue;; 4986 case TStreamerInfo::kOffsetP + TStreamerInfo::kShort: DeleteBasicPointer(eaddr,ele,Short_t); continue;; 4987 case TStreamerInfo::kOffsetP + TStreamerInfo::kInt: DeleteBasicPointer(eaddr,ele,Int_t); continue;; 4988 case TStreamerInfo::kOffsetP + TStreamerInfo::kLong: DeleteBasicPointer(eaddr,ele,Long_t); continue;; 4989 case TStreamerInfo::kOffsetP + TStreamerInfo::kLong64: DeleteBasicPointer(eaddr,ele,Long64_t); continue;; 4990 case TStreamerInfo::kOffsetP + TStreamerInfo::kFloat16:; 4991 case TStreamerInfo::kOffsetP + TStreamerInfo::kFloat: DeleteBasicPointer(eaddr,ele,Float_t); continue;; 4992 case TStreamerInfo::kOffsetP + TStreamerInfo::kDouble32:; 4993 case TStreamerInfo::kOffsetP + TStreamerInfo::kDouble: DeleteBasicPointer(eaddr,ele,Double_t); continue;; 4994 case TStreamerInfo::kOffsetP + TStreamerInfo::kUChar: DeleteBasicPointer(eaddr,ele,UChar_t); continue;; 4995 case TStreamerInfo::kOffsetP + TStreamerInfo::kUShort: DeleteBasicPointer(eaddr,ele,UShort_t); continue;; 4996 case TStreamerInfo::kOffsetP + TStreamerInfo::kUInt: DeleteBasicPointer(eaddr,ele,UInt_t); continue;; 4997 case TStreamerInfo::kOffsetP + TStreamerInfo::kULong: DeleteBasicPointer(eaddr,ele,ULong_t); continue;; 4998 case TStreamerInfo::kOffsetP + TStreamerInfo::kULong64:DeleteBasicPointer(eaddr,ele,ULong64_t); continue;; 4999 case TStreamerInfo::kCharStar: DeleteBasicPointer(eaddr,ele,Char_t); continue;; 5000 }; 5001 ; 5002 ; 5003 ; 5004 TClass* cle = ele->GetClassPointer();; 5005 if (!cle) continue;; 5006 ; 5007 ; 5008 if (etype == kObjectp || etype == kAnyp) {; 5009 // Destroy an array of pre-allocated objects.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:200221,allocate,allocated,200221,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"f (fCollProxy->GetProperties() & TVirtualCollectionProxy::kIsAssociative) {; 5256 fWriteIterators = new TVirtualCollectionIterators(fCollProxy,false);; 5257 fIterators = new TVirtualCollectionIterators(fCollProxy);; 5258 } else {; 5259 fIterators = new TVirtualCollectionIterators(GetCollectionProxy());; 5260 }; 5261 }; 5262 }; 5263 }; 5264 ; 5265 //; 5266 // Establish the semantics of fObject and fAddress.; 5267 //; 5268 // Top-level branch:; 5269 // fObject is a ptr to the object,; 5270 // fAddress is a ptr to a pointer to the object.; 5271 //; 5272 // Sub-branch:; 5273 // fObject is a ptr to the object,; 5274 // fAddress is the same as fObject.; 5275 //; 5276 //; 5277 // There are special cases for TClonesArray and STL containers.; 5278 // If there is no user-provided object, we allocate one. We must; 5279 // also initialize any STL container proxy.; 5280 //; 5281 ; 5282 if (fType == 3) {; 5283 // -- We are a TClonesArray master branch.; 5284 if (fAddress) {; 5285 // -- We have been given a non-zero address, allocate if necessary.; 5286 if (fStreamerType == TVirtualStreamerInfo::kObject) {; 5287 // -- We are *not* a top-level branch and we are *not* a pointer to a TClonesArray.; 5288 // Case of an embedded TClonesArray.; 5289 fObject = fAddress;; 5290 // Check if it has already been properly built.; 5291 TClonesArray* clones = (TClonesArray*) fObject;; 5292 if (!clones->GetClass()) {; 5293 new(fObject) TClonesArray(fClonesClass);; 5294 }; 5295 } else {; 5296 // -- We are either a top-level branch or we are a subbranch which is a pointer to a TClonesArray.; 5297 // Streamer type should be -1 (for a top-level branch) or kObject(p|P) here.; 5298 if ((fStreamerType != -1) &&; 5299 (fStreamerType != TVirtualStreamerInfo::kObjectp) &&; 5300 (fStreamerType != TVirtualStreamerInfo::kObjectP)) {; 5301 Error(""SetAddress"", ""TClonesArray with fStreamerType: %d"", fStreamerType);; 5302 } else if (fStreamerType == -1) {; 5303 // -- We are a top-level branch.; 5304 TClonesArray**",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:195137,allocate,allocate,195137,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency,"f (fN*fSize) longs; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGenericTable(const TTableDescriptor& dsc, const char* name). Create TGenericTable by TTableDescriptor pointer:. dsc - Pointer to the table descriptor; name - The name of this object. TGenericTable(const TTableDescriptor& dsc, Int_t n). Create TGenericTable by TTableDescriptor pointer:. dsc - Pointer to the table descriptor; name - ""TGenericTable""; n - The initial number of allocated rows. TGenericTable(const TTableDescriptor& dsc, const char* name, Int_t n). Create TGenericTable by TTableDescriptor pointer:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, const char* name). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, const char* name, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. ~TGenericTable(); destructor. TTableDescriptor * GetDescriptorPointer() const; { return fColDescriptors;}. void SetDescriptorPointer(TTableDescriptor* list); { fColDescriptors = list;}. void SetGenericType(); { TTable::SetType(GetDescriptorPointer()->GetName()); }. TGenericTable(); {SetType(""generic"");}. TGenericTable(const char* structName, const char* name); Create TGenericTable by C structure name provided. char * GetTable(Int_t i = 0) const; { return ((char *)GetArray())+i*GetRowSize();}. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenericTable.html:17120,allocate,allocated,17120,root/html528/TGenericTable.html,https://root.cern,https://root.cern/root/html528/TGenericTable.html,6,['allocate'],['allocated']
Energy Efficiency,"f (fN*fSize) longs; TStringTNamed::fTitleobject title; static TDataSet*TDataSet::fgMainSetpointer the main dataset;. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGenericTable(const TTableDescriptor& dsc, const char* name). Create TGenericTable by TTableDescriptor pointer:. dsc - Pointer to the table descriptor; name - The name of this object. TGenericTable(const TTableDescriptor& dsc, Int_t n). Create TGenericTable by TTableDescriptor pointer:. dsc - Pointer to the table descriptor; name - ""TGenericTable""; n - The initial number of allocated rows. TGenericTable(const TTableDescriptor& dsc, const char* name, Int_t n). Create TGenericTable by TTableDescriptor pointer:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, const char* name). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. TGenericTable(const char* structName, const char* name, Int_t n). Create TGenericTable by C structure name provided:. dsc - Pointer to the table descriptor; name - The name of this object; n - The initial number of allocated rows. ~TGenericTable(); destructor. TTableDescriptor * GetDescriptorPointer() const; { return fColDescriptors;}. void SetDescriptorPointer(TTableDescriptor* list); { fColDescriptors = list;}. void SetGenericType(); { TTable::SetType(GetDescriptorPointer()->GetName()); }. iterator & operator=(const TGenericTable& ); { fRowSize = iter.fRowSize; fCurrentRow = iter.fCurrentRow; return *this;}. TGenericTable(); {SetType(""generic"");}. TGenericTable(const char* structName, const char* name); Create TGeneric",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGenericTable.html:18616,allocate,allocated,18616,root/html602/TGenericTable.html,https://root.cern,https://root.cern/root/html602/TGenericTable.html,4,['allocate'],['allocated']
Energy Efficiency,"f (nArgs > 1) {; 93 for (auto i = 1UL; i < nArgs; i++) {; 94 if (sizes[0] == sizes[i]); 95 continue;; 96 std::string msg(id);; 97 msg += "": input RVec instances have different lengths!"";; 98 throw std::runtime_error(msg);; 99 }; 100 }; 101 return sizes[0];; 102}; 103 ; 104template <typename F, typename... RVecs>; 105auto MapImpl(F &&f, RVecs &&... vs) -> RVec<decltype(f(vs[0]...))>; 106{; 107 const auto size = GetVectorsSize(""Map"", vs...);; 108 RVec<decltype(f(vs[0]...))> ret(size);; 109 ; 110 for (auto i = 0UL; i < size; i++); 111 ret[i] = f(vs[i]...);; 112 ; 113 return ret;; 114}; 115 ; 116template <typename Tuple_t, std::size_t... Is>; 117auto MapFromTuple(Tuple_t &&t, std::index_sequence<Is...>); 118 -> decltype(MapImpl(std::get<std::tuple_size<Tuple_t>::value - 1>(t), std::get<Is>(t)...)); 119{; 120 constexpr const auto tupleSizeM1 = std::tuple_size<Tuple_t>::value - 1;; 121 return MapImpl(std::get<tupleSizeM1>(t), std::get<Is>(t)...);; 122}; 123 ; 124/// Return the next power of two (in 64-bits) that is strictly greater than A.; 125/// Return zero on overflow.; 126inline uint64_t NextPowerOf2(uint64_t A); 127{; 128 A |= (A >> 1);; 129 A |= (A >> 2);; 130 A |= (A >> 4);; 131 A |= (A >> 8);; 132 A |= (A >> 16);; 133 A |= (A >> 32);; 134 return A + 1;; 135}; 136 ; 137/// This is all the stuff common to all SmallVectors.; 138class R__CLING_PTRCHECK(off) SmallVectorBase {; 139public:; 140 // This limits the maximum size of an RVec<char> to ~4GB but we don't expect this to ever be a problem,; 141 // and we prefer the smaller Size_T to reduce the size of each RVec object.; 142 using Size_T = int32_t;; 143 ; 144protected:; 145 void *fBeginX;; 146 /// Always >= 0.; 147 // Type is signed only for consistency with fCapacity.; 148 Size_T fSize = 0;; 149 /// Always >= -1. fCapacity == -1 indicates the RVec is in ""memory adoption"" mode.; 150 Size_T fCapacity;; 151 ; 152 /// The maximum value of the Size_T used.; 153 static constexpr size_t SizeTypeMax() { return std::numeric",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:3525,power,power,3525,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,2,['power'],['power']
Energy Efficiency,"f 7 between dashes; dash(n) - dash segment lengths. void SetLineStyle(Style_t linestyle); Sets the line style. linestyle <= 1 solid; linestyle = 2 dashed; linestyle = 3 dotted; linestyle = 4 dashed-dotted. void SetLineWidth(Width_t width); Sets the line width. width - the line width in pixels. void SetMarkerColor(Color_t cindex); Sets color index ""cindex"" for markers. void SetMarkerSize(Float_t markersize); Sets marker size index. markersize - the marker scale factor. void SetMarkerStyle(Style_t markerstyle); Sets marker style. void SetOpacity(Int_t percent); Sets opacity of the current window. This image manipulation routine; works by adding to a percent amount of neutral to each pixels RGB.; Since it requires quite some additional color map entries is it; only supported on displays with more than > 8 color planes (> 256; colors). void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b); Sets color intensities the specified color index ""cindex"". cindex - color index; r, g, b - the red, green, blue intensities between 0.0 and 1.0. void SetTextAlign(Short_t talign = 11); Sets the text alignment. talign = txalh horizontal text alignment; talign = txalv vertical text alignment. void SetTextColor(Color_t cindex); Sets the color index ""cindex"" for text. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Sets text font to specified name ""fontname"".This function returns 0 if; the specified font is found, 1 if it is not. mode - loading flag; mode = 0 search if the font exist (kCheck); mode = 1 search the font and load it if it exists (kLoad). void SetTextFont(Font_t fontnumber); Sets the current text font number. void SetTextMagnitude(Float_t mgn); Sets the current text magnification factor to ""mgn"". void SetTextSize(Float_t textsize); Sets the current text size to ""textsize"". void Sync(Int_t mode); Set synchronisation on or off.; mode : synchronisation on/off; mode=1 on; mode<>0 off. void UpdateWindow(Int_t mode); Updates or synchronises client and server o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualX.html:32199,green,green,32199,root/html530/TVirtualX.html,https://root.cern,https://root.cern/root/html530/TVirtualX.html,9,['green'],['green']
Energy Efficiency,"f 7 between dashes; dash(n) - dash segment lengths. void SetLineStyle(Style_t linestyle); Sets the line style. linestyle <= 1 solid; linestyle = 2 dashed; linestyle = 3 dotted; linestyle = 4 dashed-dotted. void SetLineWidth(Width_t width); Sets the line width. width - the line width in pixels. void SetMarkerColor(Color_t cindex); Sets color index ""cindex"" for markers. void SetMarkerSize(Float_t markersize); Sets marker size index. markersize - the marker scale factor. void SetMarkerStyle(Style_t markerstyle); Sets marker style. void SetOpacity(Int_t percent); Sets opacity of the current window. This image manipulation routine; works by adding to a percent amount of neutral to each pixels RGB.; Since it requires quite some additional color map entries is it; only supported on displays with more than > 8 color planes (> 256; colors). void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b); Sets color intensities the specified color index ""cindex"". cindex - color index; r, g, b - the red, green, blue intensities between 0.0 and 1.0. void SetTextAlign(Short_t talign = 11); Sets the text alignment. talign = txalh horizontal text alignment; talign = txalv vertical text alignment. void SetTextColor(Color_t cindex); Sets the color index ""cindex"" for text. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Sets text font to specified name ""fontname"".This function returns 0 if; the specified font is found, 1 if it is not. mode - loading flag; mode = 0 search if the font exist (kCheck); mode = 1 search the font and load it if it exists (kLoad). void SetTextFont(Font_t fontnumber); Sets the current text font number. void SetTextMagnitude(Float_t mgn); Sets the current text magnification factor to ""mgn"". void SetTextSize(Float_t textsize); Sets the current text size to ""textsize"". void UpdateWindow(Int_t mode); Updates or synchronises client and server once (not permanent).; according to ""mode"".; mode = 1 update; mode = 0 sync. void Warp(Int_t ix, Int_t iy, Wind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:32100,green,green,32100,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,1,['green'],['green']
Energy Efficiency,"f GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Integration types. The possible rules are defined in the Integration::GKRule enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const char* type, int rule, double absTol, double relTol, size_t size); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used; This is used by the plug-in manager (need a char * instead of enumerations). @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule (from 1 to 6); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. virtual ~GSLIntegrator(); ~GSLIntegrator();. GSLIntegrator(const ROOT::Math::GSLIntegrator& ); disable copy ctrs. GSLIntegrator & operator=(const ROOT::Math::GSLIntegrator& ). void SetFunction(const ROOT::Math::IGenFunction& f); template met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html:6316,ADAPT,ADAPTIVE,6316,root/html602/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html,2,['ADAPT'],['ADAPTIVE']
Energy Efficiency,"f a0 parameter, which allows to fix the parameter (not to fit); axInit - initial value of ax parameter; fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); ayInit - initial value of ay parameter; fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit) . Definition at line 5652 of file TSpectrum2Fit.cxx. ◆ SetFitParameters(). void TSpectrum2Fit::SetFitParameters ; (; Int_t ; xmin, . Int_t ; xmax, . Int_t ; ymin, . Int_t ; ymax, . Int_t ; numberIterations, . Double_t ; alpha, . Int_t ; statisticType, . Int_t ; alphaOptim, . Int_t ; power, . Int_t ; fitTaylor . ). This function sets the following fitting parameters: . xmin, xmax, ymin, ymax - fitting region; numberIterations - # of desired iterations in the fit; alpha - convergence coefficient, it should be positive number and <=1, for details see references; statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. . Definition at line 5525 of file TSpectrum2Fit.cxx. ◆ SetPeakParameters(). void TSpectrum2Fit::SetPeakParameters ; (; Double_t ; sigmaX, . Bool_t ; fixSigmaX, . Double_t ; sigmaY, . Bool_t ; fixSigmaY, . Double_t ; ro, . Bool_t ; fixRo, . const Double_t * ; positionInitX, . const Bool_t * ; fixPositionX, . const Double_t * ; positionInitY, . const Bool_t * ; fixPositionY, . const Double_t * ; positionInitX1, . const Bool_t * ; fixPositionX1, . const Double_t * ; positionInitY1, . const Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:71415,power,power,71415,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['power'],['power']
Energy Efficiency,"f archive members; (sub-files), and a central directory. In theory the archive could; span multiple disks (or files) with the central directory of the; whole archive on the last disk, but this class does not support; such multi-part archives. The prefix is only used in self-extracting; executable archive files. The members are stored in the archive sequentially, each with a; local header followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global directory makes it efficient; and allows for only the reading of the desired data, one does not; have to scan through the whole file to find the desired sub-file. Once the archive has been opened, the client can query the members; and read their contents by asking the archive for an offset where; the sub-file starts. The members can be accessed in any order. Function Members (Methods); public:. TZIPFile(); TZIPFile(const char* archive, const char* member, TFile* file); virtual~TZIPFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TZIPFile.html:2010,efficient,efficient,2010,root/html528/TZIPFile.html,https://root.cern,https://root.cern/root/html528/TZIPFile.html,1,['efficient'],['efficient']
Energy Efficiency,"f archive members; (sub-files), and a central directory. In theory the archive could; span multiple disks (or files) with the central directory of the; whole archive on the last disk, but this class does not support; such multi-part archives. The prefix is only used in self-extracting; executable archive files. The members are stored in the archive sequentially, each with a; local header followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global directory makes it efficient; and allows for only the reading of the desired data, one does not; have to scan through the whole file to find the desired sub-file. Once the archive has been opened, the client can query the members; and read their contents by asking the archive for an offset where; the sub-file starts. The members can be accessed in any order. Function Members (Methods); public:. TZIPMember(); TZIPMember(const char* name); TZIPMember(const TZIPMember& member); virtual~TZIPMember(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TZIPMember.html:2018,efficient,efficient,2018,root/html528/TZIPMember.html,https://root.cern,https://root.cern/root/html528/TZIPMember.html,1,['efficient'],['efficient']
Energy Efficiency,"f archive members; (sub-files), and a central directory. In theory the archive could; span multiple disks (or files) with the central directory of the; whole archive on the last disk, but this class does not support; such multi-part archives. The prefix is only used in self-extracting; executable archive files. The members are stored in the archive sequentially, each with a; local header followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global directory makes it efficient; and allows for only the reading of the desired data, one does not; have to scan through the whole file to find the desired sub-file.; The Zip64 extensions are supported so files larger than 2GB can be; stored in archives larger than 4 GB. Once the archive has been opened, the client can query the members; and read their contents by asking the archive for an offset where; the sub-file starts. The members can be accessed in any order. Function Members (Methods); public:. TZIPFile(); TZIPFile(const char* archive, const char* member, TFile* file); virtual~TZIPFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Del",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TZIPFile.html:2010,efficient,efficient,2010,root/html530/TZIPFile.html,https://root.cern,https://root.cern/root/html530/TZIPFile.html,5,['efficient'],['efficient']
Energy Efficiency,"f archive members; (sub-files), and a central directory. In theory the archive could; span multiple disks (or files) with the central directory of the; whole archive on the last disk, but this class does not support; such multi-part archives. The prefix is only used in self-extracting; executable archive files. The members are stored in the archive sequentially, each with a; local header followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global directory makes it efficient; and allows for only the reading of the desired data, one does not; have to scan through the whole file to find the desired sub-file.; The Zip64 extensions are supported so files larger than 2GB can be; stored in archives larger than 4 GB. Once the archive has been opened, the client can query the members; and read their contents by asking the archive for an offset where; the sub-file starts. The members can be accessed in any order. Function Members (Methods); public:. TZIPMember(); TZIPMember(const char* name); TZIPMember(const TZIPMember& member); virtual~TZIPMember(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TZIPMember.html:2018,efficient,efficient,2018,root/html530/TZIPMember.html,https://root.cern,https://root.cern/root/html530/TZIPMember.html,5,['efficient'],['efficient']
Energy Efficiency,"f archive members; (sub-files), and a central directory. In theory the archive could; span multiple disks (or files) with the central directory of the; whole archive on the last disk, but this class does not support; such multi-part archives. The prefix is only used in self-extracting; executable archive files. The members are stored in the archive sequentially, each with a; local header followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global directory makes it efficient; and allows for only the reading of the desired data, one does not; have to scan through the whole file to find the desired sub-file.; The Zip64 extensions are supported so files larger than 2GB can be; stored in archives larger than 4 GB. Once the archive has been opened, the client can query the members; and read their contents by asking the archive for an offset where; the sub-file starts. The members can be accessed in any order. Function Members (Methods); public:. virtual~TZIPFile(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TZIPFile.html:2034,efficient,efficient,2034,root/html602/TZIPFile.html,https://root.cern,https://root.cern/root/html602/TZIPFile.html,4,['efficient'],['efficient']
Energy Efficiency,"f archive members; (sub-files), and a central directory. In theory the archive could; span multiple disks (or files) with the central directory of the; whole archive on the last disk, but this class does not support; such multi-part archives. The prefix is only used in self-extracting; executable archive files. The members are stored in the archive sequentially, each with a; local header followed by the (optionally) compressed data; the local; header describes the member, including its file name and compressed; and real sizes. The central directory includes the member details; again, plus allows an extra member comment to be added. The last; member in the central directory is an end marker that can contain; a comment for the whole archive. Both the local header and the; central directory can also carry extra member-specific data; the; data in the local and global parts can be different.; The fact that the archive has a global directory makes it efficient; and allows for only the reading of the desired data, one does not; have to scan through the whole file to find the desired sub-file.; The Zip64 extensions are supported so files larger than 2GB can be; stored in archives larger than 4 GB. Once the archive has been opened, the client can query the members; and read their contents by asking the archive for an offset where; the sub-file starts. The members can be accessed in any order. Function Members (Methods); public:. virtual~TZIPMember(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TZIPMember.html:2042,efficient,efficient,2042,root/html602/TZIPMember.html,https://root.cern,https://root.cern/root/html602/TZIPMember.html,4,['efficient'],['efficient']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:16733,energy,energy,16733,root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,24,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double>",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html:16733,energy,energy,16733,root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_double___.html,1,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double>",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html:15995,energy,energy,15995,root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_double___.html,1,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:17575,energy,energy,17575,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,1,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. Scalar Dot(const OtherLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:15969,energy,energy,15969,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,1,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar tolerance = 100*std::nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:14890,energy,energy,14890,root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,6,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> >::Scalar tolerance = 100 * std::nume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:14403,energy,energy,14403,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,8,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar tolerance = 100*std::nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:14890,energy,energy,14890,root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,6,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double> >::Scalar tolerance = 100 * std::nume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:14403,energy,energy,14403,root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,8,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar tolerance = 100*std::nume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:14608,energy,energy,14608,root/html528/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,6,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100 * std::numeri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:14119,energy,energy,14119,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,8,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar tolerance = 100*std::nume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:14608,energy,energy,14608,root/html528/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,6,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100 * std::numeri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:14119,energy,energy,14119,root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,8,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<Double32_t> >::Scalar& a) const; LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html:14890,energy,energy,14890,root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiE4D_Double32_t___.html,1,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t> >::Scalar& a) const; LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html:14890,energy,energy,14890,root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PtEtaPhiM4D_Double32_t___.html,1,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar& a) const; LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:14608,energy,energy,14608,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,1,['energy'],['energy']
Energy Efficiency,"f continuing, - sqrt( -M2) is returned. { return fCoordinates.M2(); }. Scalar M() const. return the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) ). { return fCoordinates.M();}. Scalar R() const; { return fCoordinates.R(); }. Scalar P() const. return the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 ). { return fCoordinates.R(); }. Scalar P2() const. return the square of the transverse spatial component ( X**2 + Y**2 ). { return P() * P(); }. Scalar Perp2() const; { return fCoordinates.Perp2();}. Scalar Pt() const. return the transverse spatial component sqrt ( X**2 + Y**2 ). { return fCoordinates.Pt(); }. Scalar Rho() const; { return fCoordinates.Pt(); }. Scalar Mt2() const. return the transverse mass squared; \f[ m_t^2 = E^2 - p{_z}^2 \f]. { return fCoordinates.Mt2(); }. Scalar Mt() const. return the transverse mass; \f[ \sqrt{ m_t^2 = E^2 - p{_z}^2} X sign(E^ - p{_z}^2) \f]. { return fCoordinates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar& a) const; LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:14608,energy,energy,14608,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,1,['energy'],['energy']
Energy Efficiency,"f f and the integral is normalized to 1. TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); Graph constructor reading input from filename.; filename is assumed to contain at least two columns of numbers.; the string format is by default ""%lg %lg"".; this is a standard c formatting for scanf. If columns of numbers should be; skipped, a ""%*lg"" or ""%*s"" for each column can be added,; e.g. ""%lg %*lg %lg"" would read x-values from the first and y-values from; the third column.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. ~TGraph(); Graph default destructor. Double_t** AllocateArrays(Int_t Narrays, Int_t arraySize); Allocate arrays. void Apply(TF1* f); Apply function f to all the data points; f may be a 1-D function TF1 or 2-d function TF2; The Y values of the graph are replaced by the new values computed; using the function. void Browse(TBrowser* b); Browse. Double_t Chisquare(TF1* f1, Option_t* option = """") const; Return the chisquare of this graph with respect to f1.; The chisquare is computed as the sum of the quantity below at each point:. where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; This method to approximate the uncertainty in y because of the errors in x, is called; ""effective variance"" method.; In case of a pure TGraph, the denominator is 1.; In case of a TGraphErrors or TGraphAsymmErrors the errors are taken; into account.; By default the range of the graph is used whatever function range.; Use option ""R"" to use the function range. Bool_t CompareArg(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point nu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraph.html:16933,Allocate,AllocateArrays,16933,root/html602/TGraph.html,https://root.cern,https://root.cern/root/html602/TGraph.html,4,['Allocate'],"['Allocate', 'AllocateArrays']"
Energy Efficiency,"f f and the integral is normalized to 1. TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); Graph constructor reading input from filename.; filename is assumed to contain at least two columns of numbers.; the string format is by default ""%lg %lg"".; this is a standard c formatting for scanf. If columns of numbers should be; skipped, a ""%*lg"" or ""%*s"" for each column can be added,; e.g. ""%lg %*lg %lg"" would read x-values from the first and y-values from; the third column.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. ~TGraph(); Graph default destructor. Double_t** AllocateArrays(Int_t Narrays, Int_t arraySize); Allocate arrays. void Apply(TF1* f); Apply function f to all the data points; f may be a 1-D function TF1 or 2-d function TF2; The Y values of the graph are replaced by the new values computed; using the function. void Browse(TBrowser* b); Browse. Double_t Chisquare(const TF1* f1) const; Return the chisquare of this graph with respect to f1.; The chisquare is computed as the sum of the quantity below at each point:. where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; This method to approximate the uncertainty in y because of the errors in x, is called; ""effective variance"" method.; In case of a pure TGraph, the denominator is 1.; In case of a TGraphErrors or TGraphAsymmErrors the errors are taken; into account. Bool_t CompareArg(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point number ""left""'s argument (angle with respect to positive; x-axis) is bigger than that of point number ""right"". Can be used by Sort",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraph.html:15937,Allocate,AllocateArrays,15937,root/html532/TGraph.html,https://root.cern,https://root.cern/root/html532/TGraph.html,2,['Allocate'],"['Allocate', 'AllocateArrays']"
Energy Efficiency,"f f and the integral is normalized to 1. TGraph(const char* filename, const char* format = ""%lg %lg"", Option_t* option = """"); Graph constructor reading input from filename.; filename is assumed to contain at least two columns of numbers.; the string format is by default ""%lg %lg"".; this is a standard c formatting for scanf. If columns of numbers should be; skipped, a ""%*lg"" or ""%*s"" for each column can be added,; e.g. ""%lg %*lg %lg"" would read x-values from the first and y-values from; the third column.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. ~TGraph(); Graph default destructor. Double_t** AllocateArrays(Int_t Narrays, Int_t arraySize); Allocate arrays. void Apply(TF1* f); Apply function f to all the data points; f may be a 1-D function TF1 or 2-d function TF2; The Y values of the graph are replaced by the new values computed; using the function. void Browse(TBrowser* b); Browse. Double_t Chisquare(const TF1* f1, Option_t* option = """") const; Return the chisquare of this graph with respect to f1.; The chisquare is computed as the sum of the quantity below at each point:. where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; This method to approximate the uncertainty in y because of the errors in x, is called; ""effective variance"" method.; In case of a pure TGraph, the denominator is 1.; In case of a TGraphErrors or TGraphAsymmErrors the errors are taken; into account.; By default the range of the graph is used whatever function range.; Use option ""R"" to use the function range. Bool_t CompareArg(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph.html:16440,Allocate,AllocateArrays,16440,root/html534/TGraph.html,https://root.cern,https://root.cern/root/html534/TGraph.html,2,['Allocate'],"['Allocate', 'AllocateArrays']"
Energy Efficiency,"f file TGeoHelix.cxx. ◆ InitPoint() [1/2]. void TGeoHelix::InitPoint ; (; Double_t * ; point). Set initial point on the helix. ; Definition at line 137 of file TGeoHelix.cxx. ◆ InitPoint() [2/2]. void TGeoHelix::InitPoint ; (; Double_t ; x0, . Double_t ; y0, . Double_t ; z0 . ). Initialize coordinates of a point on the helix. ; Definition at line 126 of file TGeoHelix.cxx. ◆ IsA(). TClass * TGeoHelix::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 73 of file TGeoHelix.h. ◆ IsRightHanded(). Bool_t TGeoHelix::IsRightHanded ; (; ); const. inline . Definition at line 55 of file TGeoHelix.h. ◆ operator=(). TGeoHelix & TGeoHelix::operator= ; (; const TGeoHelix & ; ). privatedelete . ◆ ResetStep(). void TGeoHelix::ResetStep ; (; ). Reset current point/direction to initial values. ; Definition at line 242 of file TGeoHelix.cxx. ◆ SetCharge(). void TGeoHelix::SetCharge ; (; Int_t ; charge). Positive charge means left-handed helix. ; Definition at line 195 of file TGeoHelix.cxx. ◆ SetField(). void TGeoHelix::SetField ; (; Double_t ; bx, . Double_t ; by, . Double_t ; bz, . Bool_t ; is_normalized = kTRUE . ). Initialize particle direction (tangent on the helix in initial point) ; Definition at line 211 of file TGeoHelix.cxx. ◆ SetHelixStep(). void TGeoHelix::SetHelixStep ; (; Double_t ; hstep). Set Z step of the helix on a complete turn. Positive or null. ; Definition at line 227 of file TGeoHelix.cxx. ◆ SetXYcurvature(). void TGeoHelix::SetXYcurvature ; (; Double_t ; curvature). Set XY curvature: c = 1/Rxy. ; Definition at line 178 of file TGeoHelix.cxx. ◆ Step(). void TGeoHelix::Step ; (; Double_t ; step). Make a step from current point along the helix and compute new point, direction and angle To reach a plane/ shape boundary, one has to: . Compute the safety to the plane/boundary; Define / update a helix according local field and particle state (position, direction, charge); Compute the mag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHelix.html:17488,charge,charge,17488,doc/master/classTGeoHelix.html,https://root.cern,https://root.cern/doc/master/classTGeoHelix.html,1,['charge'],['charge']
Energy Efficiency,"f length num, containing the abscissa and weight of the Gauss-Legendre; 3810/// n-point quadrature formula.; 3811///; 3812/// Gauss-Legendre:; 3813/** \f[; 3814 W(x)=1 -1<x<1 \\; 3815 (j+1)P_{j+1} = (2j+1)xP_j-jP_{j-1}; 3816 \f]; 3817**/; 3818/// num is the number of sampling points (>0); 3819/// x and w are arrays of size num; 3820/// eps is the relative precision; 3821///; 3822/// If num<=0 or eps<=0 no action is done.; 3823///; 3824/// Reference: Numerical Recipes in C, Second Edition; 3825 ; 3826void TF1::CalcGaussLegendreSamplingPoints(Int_t num, Double_t *x, Double_t *w, Double_t eps); 3827{; 3828 // This function is just kept like this for backward compatibility!; 3829 ; 3830 ROOT::Math::GaussLegendreIntegrator gli(num, eps);; 3831 gli.GetWeightVectors(x, w);; 3832 ; 3833 ; 3834}; 3835 ; 3836 ; 3837/** \class TF1Parameters; 3838TF1 Parameters class; 3839*/; 3840 ; 3841////////////////////////////////////////////////////////////////////////////////; 3842/// Returns the parameter number given a name; 3843/// not very efficient but list of parameters is typically small; 3844/// could use a map if needed; 3845 ; 3846Int_t TF1Parameters::GetParNumber(const char *name) const; 3847{; 3848 for (unsigned int i = 0; i < fParNames.size(); ++i) {; 3849 if (fParNames[i] == std::string(name)) return i;; 3850 }; 3851 return -1;; 3852}; AdaptiveIntegratorMultiDim.h; AnalyticalIntegralDouble_t AnalyticalIntegral(TF1 *f, Double_t a, Double_t b)Definition AnalyticalIntegrals.cxx:28; AnalyticalIntegrals.h; BrentMethods.h; BrentMinimizer1D.h; BrentRootFinder.h; kMouseMotion@ kMouseMotionDefinition Buttons.h:23; ChebyshevPol.h; FitResult.h; Functor.h; GaussIntegrator.h; GaussLegendreIntegrator.h; kHand@ kHandDefinition GuiTypes.h:374; IntegratorMultiDim.h; IntegratorOptions.h; Integrator.h; MinimizerOptions.h; Minimizer.h; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; g#define g(i)Definition RSha256.hxx:105; a#define a(i)Definition RSha256.hxx:9",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:145870,efficient,efficient,145870,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['efficient'],['efficient']
Energy Efficiency,"f nentries <= 0, the file is opened and the tree header read; 454/// into memory to get the number of entries.; 455///; 456/// B. If nentries > 0, the file is not opened, and nentries is assumed; 457/// to be the number of entries in the file. In this case, no check; 458/// is made that the file exists nor that the tree exists in the file,; 459/// nor that the real TTree entries match with the input argument.; 460/// This second mode is interesting in case the number of entries in; 461/// the file is already stored in a run database for example.; 462/// \warning If you pass `nentries` > `tree_entries`, this may lead to silent; 463/// data corruption in your analysis or undefined behavior in your program.; 464/// Use the other options if unsure.; 465///; 466/// C. If nentries == TTree::kMaxEntries (default), the file is not opened.; 467/// The number of entries in each file will be read only when the file; 468/// is opened to read an entry. This option is the default and very; 469/// efficient if one processes the chain sequentially. Note that in; 470/// case GetEntry(entry) is called and entry refers to an entry in the; 471/// third file, for example, this forces the tree headers in the first; 472/// and second file to be read to find the number of entries in those; 473/// files. Note that if one calls GetEntriesFast() after having created; 474/// a chain with this default, GetEntriesFast() will return TTree::kMaxEntries!; 475/// Using the GetEntries() function instead will force all of the tree; 476/// headers in the chain to be read to read the number of entries in; 477/// each tree.; 478///; 479/// D. The TChain data structure; 480/// Each TChainElement has a name equal to the tree name of this TChain; 481/// and a title equal to the file name. So, to loop over the; 482/// TFiles that have been added to this chain:; 483/// ~~~ {.cpp}; 484/// TObjArray *fileElements=chain->GetListOfFiles();; 485/// TIter next(fileElements);; 486/// TChainElement *chEl=0;; 487/// wh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:18878,efficient,efficient,18878,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['efficient'],['efficient']
Energy Efficiency,"f several elements. They are represented by the class TGeoMixture, deriving from TGeoMaterial and defined by their number of components and the density:; TGeoMixture(const char *name,Int_t nel,Double_t rho);; TGeoMixtureMixtures of elements.Definition TGeoMaterial.h:159; Elements have to be further defined one by one:; void TGeoMixture::DefineElement(Int_t iel,Double_t a,Double_t z,; Double_t weigth);; void TGeoMixture::DefineElement(Int_t iel, TGeoElement *elem,; Double_t weight);; void TGeoMixture::DefineElement(Int_t iel, Int_t z, Int_t natoms);; TGeoMixture::DefineElementvoid DefineElement(Int_t iel, Double_t a, Double_t z, Double_t weight)Definition TGeoMaterial.h:226; or:; void AddElement(TGeoMaterial* mat, Double_t weight);; void AddElement(TGeoElement* elem, Double_t weight);; void AddElement(TGeoElement* elem, Int_t natoms);; void AddElement(Double_t a, Double_t z, Double_t weight). iel: index of the element[0,nel-1]; a and z: the atomic mass and charge; weight: proportion by mass of the elements; natoms: number of atoms of the element in the molecule making the mixture. The radiation length is automatically computed when all elements are defined. Since tracking MC provide several other ways to create materials/mixtures, the materials classes are likely to evolve as the interfaces to these engines are being developed. Generally in the process of tracking material properties are not enough and more specific media properties have to be defined. These highly depend on the MC performing tracking and sometimes allow the definition of different media properties (e.g. energy or range cuts) for the same material. Radionuclides; A new class TGeoElementRN was introduced in this version to provide support for radioactive nuclides and their decays. A database of 3162 radionuclides can be loaded on demand via the table of elements (TGeoElementTable class). One can make then materials/mixtures based on these radionuclides and use them in a geometry; root[] TGeoManager *g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Materials__classes.html:5495,charge,charge,5495,doc/master/group__Materials__classes.html,https://root.cern,https://root.cern/doc/master/group__Materials__classes.html,1,['charge'],['charge']
Energy Efficiency,"f the Configurations ;  CTConfiguredAction;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  ►Nvdt;  ►Ndetails;  Cieee754Used to switch between different type of interpretations of the data (64 bits) ;  ►Nwriter;  Cwriter;  C_root_std_complex;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  CBaseSelectionRule;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClassSelectionRule;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions adapter needed by UNURAN for multidimensional cont distribution ;  CMYSQL_BIND;  CMYSQL_STMT;  CNuMuToNuE_Oscillation;  ►CParamHistFunc;  CCacheElem;  CPassiveKeyGrab;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:72510,adapt,adapter,72510,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['adapt'],['adapter']
Energy Efficiency,"f the Decision Tree, it specifies parent and daughters, as; well as ""which variable is used"" in the selection of this node,; including the respective cut value. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~Node(); virtual voidAddAttributesToNode(void* node) const; virtual voidAddContentToNode(stringstream& s) const; void*AddXMLTo(void* parent) const; static TClass*Class(); Int_tCountMeAndAllDaughters() const; virtual TMVA::Node*CreateNode() const; intGetCount(); UInt_tGetDepth() const; virtual TMVA::Node*GetLeft() const; virtual TMVA::Node*GetParent() const; virtual TMVA::BinaryTree*GetParentTree() const; charGetPos() const; virtual TMVA::Node*GetRight() const; virtual Bool_tGoesLeft(const TMVA::Event&) const; virtual Bool_tGoesRight(const TMVA::Event&) const; virtual TClass*IsA() const; TMVA::Node&operator=(const TMVA::Node&); virtual voidPrint(ostream& os) const; virtual voidPrintRec(ostream& os) const; virtual voidReadAttributes(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); virtual voidReadContent(stringstream& s); virtual Bool_tReadDataRecord(istream&, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); voidReadXML(void* node, UInt_t tmva_Version_Code = TMVA_VERSION_CODE); voidSetDepth(UInt_t d); virtual voidSetLeft(TMVA::Node* l); virtual voidSetParent(TMVA::Node* p); virtual voidSetParentTree(TMVA::BinaryTree* t); voidSetPos(char s); virtual voidSetRight(TMVA::Node* r); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. UInt_tfDepthdepth of the node within the tree (seen from root node); TMVA::Node*fLeftpointers to the two ""daughter"" nodes; TMVA::Node*fParentthe previous (parent) node; TMVA::BinaryTree*fParentTreepointer to the parent tree to which the Node belongs ; charfPosposition, i.e. it is a left (l) or right ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Node.html:1172,charGe,charGetPos,1172,root/html534/TMVA__Node.html,https://root.cern,https://root.cern/root/html534/TMVA__Node.html,1,['charGe'],['charGetPos']
Energy Efficiency,"f the file.; 829///; 830/// - The buffer is written to the file.; 831///; 832/// Bufsize can be given to force a given buffer size to write this object.; 833/// By default, the buffersize will be taken from the average buffer size; 834/// of all objects written to the current file so far.; 835///; 836/// If a name is specified, it will be the name of the key.; 837/// If name is not given, the name of the key will be the name as returned; 838/// by GetName().; 839///; 840/// The option can be a combination of: kSingleKey, kOverwrite or kWriteDelete; 841/// Using the kOverwrite option a previous key with the same name is; 842/// overwritten. The previous key is deleted before writing the new object.; 843/// Using the kWriteDelete option a previous key with the same name is; 844/// deleted only after the new object has been written. This option; 845/// is safer than kOverwrite but it is slower.; 846/// NOTE: Neither kOverwrite nor kWriteDelete reduces the size of a TFile--; 847/// the space is simply freed up to be overwritten; in the case of a TTree,; 848/// it is more complicated. If one opens a TTree, appends some entries,; 849/// then writes it out, the behaviour is effectively the same. If, however,; 850/// one creates a new TTree and writes it out in this way,; 851/// only the metadata is replaced, effectively making the old data invisible; 852/// without deleting it. TTree::Delete() can be used to mark all disk space; 853/// occupied by a TTree as free before overwriting its metadata this way.; 854/// The kSingleKey option is only used by TCollection::Write() to write; 855/// a container with a single key instead of each object in the container; 856/// with its own key.; 857///; 858/// An object is read from the file into memory via TKey::Read() or; 859/// via TObject::Read().; 860///; 861/// The function returns the total number of bytes written to the file.; 862/// It returns 0 if the object cannot be written.; 863 ; 864Int_t TObject::Write(const char *name, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:30834,reduce,reduces,30834,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['reduce'],['reduces']
Energy Efficiency,"f the particle in units of e; Double_tfPDGDecayWidthLife time of the particle in sec.; Double_tfPDGMassMass of the particle in GeV/c2; Bool_tfPDGStableLogical indicator, if TRUE the particle can not decay; TStringfParticleTypeText indicator for the particle family. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TAttParticle(). Particle definition default constructor. TAttParticle(const char* name, const char* title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* Type, Int_t MCnumber, Int_t granularity = 90, Double_t LowerCutOff = 1.0000000000000001E-5, Double_t HighCutOff = 1.0E+4). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does have no meaning and can be set to; any value. The parameters granularity, LowerCutOff and HighCutOff are; used for the construction of the mean free path look up tables. The; granularity will be the number of logwise energy points for which the; mean free path will be calculated. ~TAttParticle(). Particle destructor. Int_t ConvertISAtoPDG(Int_t isaNumber). Converts the ISAJET Particle number into the PDG MC number. void DefinePDG(). Defines particles according to the Particle Data Group. For questions regarding distribution or content of the MC particle; codes, contact; Gary Wagman (GSWagman@LBL.BITNET, LBL::GSWagman, or GSWagman@LBL.GOV).; (510)486-6610. TAttParticle* GetParticle(const char* name). Get a pointer to the particle object according to the name given. TAttParticle* GetParticle(Int_t mcnumber). Get a pointer to the particle object according to the MC code number. void Print(Option_t* option = """") const. Print the entire information of this kind of particle. Double_t SampleMass() const. Samples a mass according to the Breit-Wigner resonance distribution. Double_t SampleMass(Double_t widthcut) const. Samples a mass in the interval:. fPDGMass-widthcut*fPDGDecayWidtht - fPDGMass+widthcut*fPDGDecayW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAttParticle.html:8099,energy,energy,8099,root/html602/TAttParticle.html,https://root.cern,https://root.cern/root/html602/TAttParticle.html,4,['energy'],['energy']
Energy Efficiency,"f traces remaining to print; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Int_tRooAbsPdf::_valueCacheIntOrderInterpolation order for numeric integral value cache; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; RooListProxy_x; Double_t_z; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const RooArgList& mu, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const RooFitResult& fr, Bool_t reduceToConditional = kTRUE). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TVectorD& mu, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const char* name, const char* title, const RooArgList& xvec, const TMatrixDSym& covMatrix). RooMultiVarGaussian(const RooMultiVarGaussian& other, const char* name = 0). void syncMuVec() const. Double_t evaluate() const; Represent observables as vector. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Analytical integral known over all observables. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Handle full integral here. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Special case: generate all observables. void initGenerator(Int_t code); Clear the GenData cache as its content is not invariant under changes in; the mu vector. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMultiVarGaussian.html:42883,reduce,reduceToConditional,42883,root/html532/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html532/RooMultiVarGaussian.html,2,['reduce'],['reduceToConditional']
Energy Efficiency,"f, const TString& trfName); standard constructor. ~VariableTransformBase(). void SelectInput(const TString& inputVariables, Bool_t putIntoVariables = kFALSE); select the variables/targets/spectators which serve as input to the transformation. Bool_t GetInput(const TMVA::Event* event, vector<Float_t>& input, vector<Char_t>& mask, Bool_t backTransform = kFALSE) const; select the values from the event. void SetOutput(TMVA::Event* event, vector<Float_t>& output, vector<Char_t>& mask, const TMVA::Event* oldEvent = 0, Bool_t backTransform = kFALSE) const; select the values from the event. void CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; count variables, targets and spectators. void CalcNorm(const vector<const TMVA::Event*>& ); TODO --> adapt to variable,target,spectator selection; method to calculate minimum, maximum, mean, and RMS for all; variables used in the MVA. std::vector<TString>* GetTransformationStrings(Int_t cls) const; TODO --> adapt to variable,target,spectator selection; default transformation output; --> only indicate that transformation occurred. void UpdateNorm(Int_t ivar, Double_t x); TODO --> adapt to variable,target,spectator selection; update min and max of a given variable (target) and a given transformation method. void AttachXMLTo(void* parent); create XML description the transformation (write out info of selected variables). void ReadFromXML(void* trfnode); Read the input variables from the XML node. void MakeFunction(ostream& fout, const TString& fncName, Int_t part, UInt_t trCounter, Int_t cls); getinput and setoutput equivalent. VariableTransformBase(TMVA::DataSetInfo& dsi, TMVA::Types::EVariableTransform tf, const TString& trfName). void Initialize(). Bool_t PrepareTransformation(const vector<TMVA::Event*>& ). const Event* Transform(const TMVA::Event*const , Int_t cls) const. const Event* InverseTransform(const TMVA::Event*const , Int_t cls) const. void SetEnabled(Bool_t e); accessors. { fEnabled = e; }. void SetNorm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableTransformBase.html:10668,adapt,adapt,10668,root/html602/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableTransformBase.html,4,['adapt'],['adapt']
Energy Efficiency,"f:. At least one vertex of a positioned volume mesh is contained (having a safety bigger than the accepted maximum value) by other positioned volume inside the same container. The check is performed also by inverting the candidates. The code is highly optimized to avoid checking candidates that are far away in space by performing a fast check on their bounding boxes. Once the checking tool is fired-up inside a volume or at top level, the list of overlaps (visible as Illegal overlaps inside a TBrowser) held by the manager class will be filled with TGeoOverlap objects containing a full description of the detected overlaps. The list is sorted in the decreasing order of the overlapping distance, extrusions coming first. An overlap object name represents the full description of the overlap, containing both candidate node names and a letter (x-extrusion, o-overlap) representing the type. Double-clicking an overlap item in a TBrowser produces a picture of the overlap containing only the two overlapping nodes (one in blue and one in green) and having the critical vertices represented by red points. The picture can be rotated/zoomed or drawn in X3d as any other view. Calling gGeoManager->PrintOverlaps() prints the list of overlaps. Graphical Checking Methods. Safety computation checking; In order to check a given point, CheckPoint(x,y,z) method of TGeoManager draws the daughters of the volume containing the point one level down, printing the path to the deepest physical node holding this point. It also computes the closest distance to any boundary. Random points; A method to check the validity of a given geometry is shooting random points. This can be called with the method TGeoVolume::RandomPoints() and it draws a volume with the current visualization settings. Random points are generated in the bounding box of the drawn volume. The points are drawn with the color of their deepest container. Only points inside visible nodes are drawn. Random rays; A ray tracing method can be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:104312,green,green,104312,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['green'],['green']
Energy Efficiency,"f:. At least one vertex of a positioned volume mesh is contained (having a safety bigger than the accepted maximum value) by other positioned volume inside the same container. The check is performed also by inverting the candidates. The code is highly optimized to avoid checking candidates that are far away in space by performing a fast check on their bounding boxes. Once the checking tool is fired-up inside a volume or at top level, the list of overlaps (visible as Illegal overlaps inside a TBrowser) held by the manager class will be filled with TGeoOverlap objects containing a full description of the detected overlaps. The list is sorted in the decreasing order of the overlapping distance, extrusions coming first. An overlap object name represents the full description of the overlap, containing both candidate node names and a letter (x-extrusion, o-overlap) representing the type. Double-clicking an overlap item in a TBrowser produces a picture of the overlap containing only the two overlapping nodes (one in blue and one in green) and having the critical vertices represented by red points. The picture can be rotated/zoomed or drawn in X3d as any other view. Calling gGeoManager->PrintOverlaps() prints the list of overlaps.; 18.6.2 Graphical Checking Methods. Safety computation checking. In order to check a given point, CheckPoint(x,y,z) method of TGeoManager draws the daughters of the volume containing the point one level down, printing the path to the deepest physical node holding this point. It also computes the closest distance to any boundary. Random points. A method to check the validity of a given geometry is shooting random points. This can be called with the method TGeoVolume::RandomPoints() and it draws a volume with the current visualization settings. Random points are generated in the bounding box of the drawn volume. The points are drawn with the color of their deepest container. Only points inside visible nodes are drawn. Random rays. A ray tracing metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1003137,green,green,1003137,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['green'],['green']
Energy Efficiency,"f::Init ; (; const char * ; masterurl, . const char * ; conffile, . const char * ; confdir, . Int_t ; loglevel, . const char * ; alias = 0 . ). protected . Start the PROOF environment. ; Starting PROOF involves either connecting to a master server, which in turn will start a set of slave servers, or directly starting as master server (if master = """"). For a description of the arguments see the TProof ctor. Returns the number of started master or slave servers, returns 0 in case of error, in which case fValid remains false. ; Definition at line 757 of file TProof.cxx. ◆ InitMembers(). void TProof::InitMembers ; (; ). protected . Default initializations. ; Definition at line 527 of file TProof.cxx. ◆ Interrupt(). void TProof::Interrupt ; (; EUrgent ; type, . ESlaves ; list = kActive . ). private . Send interrupt to master or slave servers. ; Definition at line 2276 of file TProof.cxx. ◆ InterruptCurrentMonitor(). void TProof::InterruptCurrentMonitor ; (; ). private . If in active in a monitor set ready state. ; Definition at line 11335 of file TProof.cxx. ◆ IsA(). TClass * TProof::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Reimplemented in TProofCondor, TProofLite, and TProofSuperMaster.; Definition at line 1073 of file TProof.h. ◆ IsDataReady(). Bool_t TProof::IsDataReady ; (; Long64_t & ; totalbytes, . Long64_t & ; bytesready . ). See if the data is ready to be analyzed. ; Definition at line 2240 of file TProof.cxx. ◆ IsEndMaster(). Bool_t TProof::IsEndMaster ; (; ); const. inlineprivate . Definition at line 664 of file TProof.h. ◆ IsFolder(). Bool_t TProof::IsFolder ; (; ); const. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ; Reimplemented from TObject.; Definition at line 935 of file TProof.h. ◆ IsIdle(). Bool_t TProof::IsIdle ; (; ); const. inline . Definition at line 940 of file TProof.h. ◆ IsLite(). Bool_t TProof:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:111999,monitor,monitor,111999,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['monitor'],['monitor']
Energy Efficiency,"fGDValidEveFrac. private . GD path: fraction of subsamples used for the fitting. ; Definition at line 195 of file MethodRuleFit.h. ◆ fLinQuantile. Double_t TMVA::MethodRuleFit::fLinQuantile. private . quantile cut to remove outliers - see RuleEnsemble ; Definition at line 208 of file MethodRuleFit.h. ◆ fMaxFracNEve. Double_t TMVA::MethodRuleFit::fMaxFracNEve. private . ditto max ; Definition at line 185 of file MethodRuleFit.h. ◆ fMinFracNEve. Double_t TMVA::MethodRuleFit::fMinFracNEve. private . min fraction of number events ; Definition at line 184 of file MethodRuleFit.h. ◆ fMinimp. Double_t TMVA::MethodRuleFit::fMinimp. private . rule/linear: minimum importance ; Definition at line 204 of file MethodRuleFit.h. ◆ fModelTypeS. TString TMVA::MethodRuleFit::fModelTypeS. private . rule ensemble: which model (rule,linear or both) ; Definition at line 206 of file MethodRuleFit.h. ◆ fMonitorNtuple. TTree* TMVA::MethodRuleFit::fMonitorNtuple. private . pointer to monitor rule ntuple ; Definition at line 160 of file MethodRuleFit.h. ◆ fNCuts. Int_t TMVA::MethodRuleFit::fNCuts. private . grid used in cut applied in node splitting ; Definition at line 186 of file MethodRuleFit.h. ◆ fNTCoefficient. Double_t TMVA::MethodRuleFit::fNTCoefficient. private . ntuple: rule coefficient ; Definition at line 162 of file MethodRuleFit.h. ◆ fNTImportance. Double_t TMVA::MethodRuleFit::fNTImportance. private . ntuple: rule importance ; Definition at line 161 of file MethodRuleFit.h. ◆ fNTNcuts. Int_t TMVA::MethodRuleFit::fNTNcuts. private . ntuple: rule number of cuts ; Definition at line 164 of file MethodRuleFit.h. ◆ fNTNvars. Int_t TMVA::MethodRuleFit::fNTNvars. private . ntuple: rule number of vars ; Definition at line 165 of file MethodRuleFit.h. ◆ fNTPbb. Double_t TMVA::MethodRuleFit::fNTPbb. private . ntuple: rule P(tag b, true b) ; Definition at line 170 of file MethodRuleFit.h. ◆ fNTPbs. Double_t TMVA::MethodRuleFit::fNTPbs. private . ntuple: rule P(tag b, true s) ; Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRuleFit.html:47534,monitor,monitor,47534,doc/master/classTMVA_1_1MethodRuleFit.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRuleFit.html,1,['monitor'],['monitor']
Energy Efficiency,"fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_factorWeightDecay;; 841 ; 842 size_t count_E;; 843 size_t count_dE;; 844 size_t count_mb_E;; 845 size_t count_mb_dE;; 846 ; 847 EnumRegularization m_regularization;; 848 ; 849 double m_dropRepetitions;; 850 std::vector<double> m_dropOut;; 851 ; 852 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:31603,monitor,monitoring,31603,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['monitor'],['monitoring']
Energy Efficiency,"fPDGChargeCharge of the particle in units of e; Double_tfPDGDecayWidthLife time of the particle in sec.; Double_tfPDGMassMass of the particle in GeV/c2; Bool_tfPDGStableLogical indicator, if TRUE the particle can not decay; TStringfParticleTypeText indicator for the particle family. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TAttParticle(). Particle definition default constructor. TAttParticle(const char* name, const char* title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* Type, Int_t MCnumber, Int_t granularity = 90, Double_t LowerCutOff = 1.e-5, Double_t HighCutOff = 1.e4). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does have no meaning and can be set to; any value. The parameters granularity, LowerCutOff and HighCutOff are; used for the construction of the mean free path look up tables. The; granularity will be the number of logwise energy points for which the; mean free path will be calculated. ~TAttParticle(). Particle destructor. Int_t ConvertISAtoPDG(Int_t isaNumber). Converts the ISAJET Particle number into the PDG MC number. void DefinePDG(). Defines particles according to the Particle Data Group. For questions regarding distribution or content of the MC particle; codes, contact; Gary Wagman (GSWagman@LBL.BITNET, LBL::GSWagman, or GSWagman@LBL.GOV).; (510)486-6610. TAttParticle* GetParticle(const char *name). Get a pointer to the particle object according to the name given. TAttParticle* GetParticle(Int_t mcnumber). Get a pointer to the particle object according to the MC code number. void Print(Option_t* option = """") const. Print the entire information of this kind of particle. Double_t SampleMass() const. Samples a mass according to the Breit-Wigner resonance distribution. Double_t SampleMass(Double_t widthcut) const. Samples a mass in the interval:. fPDGMass-widthcut*fPDGDecayWidtht - fPDGMass+widthcut*fPDGDecayW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttParticle.html:7537,energy,energy,7537,root/html526/TAttParticle.html,https://root.cern,https://root.cern/root/html526/TAttParticle.html,1,['energy'],['energy']
Energy Efficiency,"fPDGChargeCharge of the particle in units of e; Double_tfPDGDecayWidthLife time of the particle in sec.; Double_tfPDGMassMass of the particle in GeV/c2; Bool_tfPDGStableLogical indicator, if TRUE the particle can not decay; TStringfParticleTypeText indicator for the particle family. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TAttParticle(). Particle definition default constructor. TAttParticle(const char* name, const char* title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* Type, Int_t MCnumber, Int_t granularity = 90, Double_t LowerCutOff = 1.e-5, Double_t HighCutOff = 1.e4). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does have no meaning and can be set to; any value. The parameters granularity, LowerCutOff and HighCutOff are; used for the construction of the mean free path look up tables. The; granularity will be the number of logwise energy points for which the; mean free path will be calculated. ~TAttParticle(). Particle destructor. Int_t ConvertISAtoPDG(Int_t isaNumber). Converts the ISAJET Particle number into the PDG MC number. void DefinePDG(). Defines particles according to the Particle Data Group. For questions regarding distribution or content of the MC particle; codes, contact; Gary Wagman (GSWagman@LBL.BITNET, LBL::GSWagman, or GSWagman@LBL.GOV).; (510)486-6610. TAttParticle* GetParticle(const char* name). Get a pointer to the particle object according to the name given. TAttParticle* GetParticle(Int_t mcnumber). Get a pointer to the particle object according to the MC code number. void Print(Option_t* option = """") const. Print the entire information of this kind of particle. Double_t SampleMass() const. Samples a mass according to the Breit-Wigner resonance distribution. Double_t SampleMass(Double_t widthcut) const. Samples a mass in the interval:. fPDGMass-widthcut*fPDGDecayWidtht - fPDGMass+widthcut*fPDGDecayW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TAttParticle.html:7523,energy,energy,7523,root/html528/TAttParticle.html,https://root.cern,https://root.cern/root/html528/TAttParticle.html,6,['energy'],['energy']
Energy Efficiency,"fPainter = nullptr;; 625 fUserHisto = kFALSE;; 626 ; 627 if (TH1::AddDirectoryStatus()) {; 628 fDirectory = gDirectory;; 629 if (fDirectory) {; 630 fDirectory->Append(this, kTRUE);; 631 }; 632 }; 633}; 634 ; 635////////////////////////////////////////////////////////////////////////////////; 636/// Performs the operation: `z = z + c1*f(x,y,z)`; 637/// Errors are not recalculated.; 638///; 639/// \param f may be a 2-D function TF2 or 3-d function TF3; 640/// \param c1 a scaling factor, 1 by default; 641 ; 642void TGraph2D::Add(TF2 *f, Double_t c1); 643{; 644 //if (fHistogram) SetBit(kResetHisto);; 645 ; 646 for (Int_t i = 0; i < fNpoints; i++) {; 647 fZ[i] += c1*f->Eval(fX[i], fY[i], fZ[i]);; 648 }; 649 if (gPad) gPad->Modified();; 650}; 651 ; 652////////////////////////////////////////////////////////////////////////////////; 653/// Apply function f to all the data points; 654/// f may be a 2-D function TF2 or 3-d function TF3; 655/// The Z values of the 2D graph are replaced by the new values computed; 656/// using the function; 657 ; 658void TGraph2D::Apply(TF2 *f); 659{; 660 //if (fHistogram) SetBit(kResetHisto);; 661 ; 662 for (Int_t i = 0; i < fNpoints; i++) {; 663 fZ[i] = f->Eval(fX[i], fY[i], fZ[i]);; 664 }; 665 if (gPad) gPad->Modified();; 666}; 667 ; 668////////////////////////////////////////////////////////////////////////////////; 669/// Browse; 670 ; 671void TGraph2D::Browse(TBrowser *); 672{; 673 Draw(""p0"");; 674 gPad->Update();; 675}; 676 ; 677 ; 678////////////////////////////////////////////////////////////////////////////////; 679/// Free all memory allocated by this object.; 680 ; 681void TGraph2D::Clear(Option_t * /*option = """" */); 682{; 683 if (fX) delete [] fX;; 684 fX = nullptr;; 685 if (fY) delete [] fY;; 686 fY = nullptr;; 687 if (fZ) delete [] fZ;; 688 fZ = nullptr;; 689 fSize = fNpoints = 0;; 690 if (fHistogram && !fUserHisto) {; 691 delete fHistogram;; 692 fHistogram = nullptr;; 693 fDelaunay = nullptr;; 694 }; 695 if (fFunctions) {; 696 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:21981,allocate,allocated,21981,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"fPlayer.cxx. ◆ JoinProcess(). Bool_t TProofPlayerRemote::JoinProcess ; (; TList * ; workers). overridevirtual . Prepares the given list of new workers to join a progressing process. ; Returns kTRUE on success, kFALSE otherwise. ; Reimplemented from TProofPlayer.; Definition at line 2533 of file TProofPlayer.cxx. ◆ MergeFeedback(). TList * TProofPlayerRemote::MergeFeedback ; (; ). protected . Merge feedback lists. ; Definition at line 3926 of file TProofPlayer.cxx. ◆ MergeOutput(). void TProofPlayerRemote::MergeOutput ; (; Bool_t ; savememvalues = kFALSE). overridevirtual . Merge objects in output the lists. ; Reimplemented from TProofPlayer.; Definition at line 3114 of file TProofPlayer.cxx. ◆ MergeOutputFiles(). Bool_t TProofPlayerRemote::MergeOutputFiles ; (; ). protected . Merge output in files. ; Definition at line 2582 of file TProofPlayer.cxx. ◆ NotifyMemory(). void TProofPlayerRemote::NotifyMemory ; (; TObject * ; obj). protected . Printout the memory record after merging object 'obj' This record is used by the memory monitor. ; Definition at line 3593 of file TProofPlayer.cxx. ◆ Process() [1/2]. Long64_t TProofPlayerRemote::Process ; (; TDSet * ; dset, . const char * ; selector_file, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). overridevirtual . Process specified TDSet on PROOF. ; This method is called on client and on the PROOF master. The return value is -1 in case of an error and TSelector::GetStatus() in in case of success. ; Reimplemented from TProofPlayer.; Reimplemented in TProofPlayerSuperMaster.; Definition at line 2174 of file TProofPlayer.cxx. ◆ Process() [2/2]. Long64_t TProofPlayerRemote::Process ; (; TDSet * ; dset, . TSelector * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). overridevirtual . Process specified TDSet on PROOF. ; This method is called on client and on the PROOF master. The return value is -1 in case of an error and TSelector::GetStatus() in in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:32477,monitor,monitor,32477,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['monitor'],['monitor']
Energy Efficiency,"fRowLwblower bound of the row index; static TVectorT<float>::(anonymous)kSizeMax; static TVectorT<float>::EVectorStatusBitskStatus; static TVectorT<float>::(anonymous)kWorkMax. Class Charts. Inheritance Chart:. TObject. ←; TVectorT<float>. Function documentation; void TVectorT<Element> Delete_m(Int_t size, float*& ); Delete data pointer m, if it was assigned on the heap. Element* TVectorT<Element> New_m(Int_t size); Return data pointer . if requested size <= kSizeMax, assign pointer; to the stack space. void TVectorT<Element> Add(const TVectorT<float>& v); Add vector v to this vector. void TVectorT<Element> Add(const TVectorT<float>& v1, const TVectorT<float>& v2); Set this vector to v1+v2. Int_t TVectorT<Element> Memcpy_m(float* newp, const float* oldp, Int_t copySize, Int_t newSize, Int_t oldSize); Copy copySize doubles from *oldp to *newp . However take care of the; situation where both pointers are assigned to the same stack space. void TVectorT<Element> Allocate(Int_t nrows, Int_t row_lwb = 0, Int_t init = 0); Allocate new vector. Arguments are number of rows and row; lowerbound (0 default). TVectorT<Element> &TVectorT<Element> ResizeTo(Int_t lwb, Int_t upb); Resize the vector to [lwb:upb] .; New dynamic elemenst are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. TVectorT<Element> &TVectorT<Element> Use(Int_t lwb, Int_t upb, float* data); Use the array data to fill the vector lwb..upb]. TVectorT<Element> &TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, TVectorT<float>& target, Option_t* option = ""S"") const; Get subvector [row_lwb..row_upb]; The indexing range of the; returned vector depends on the argument option:. option == ""S"" : return [0..row_upb-row_lwb+1] (default); else : return [row_lwb..row_upb]. TVectorT<Element> &TVectorT<Element> SetSub(Int_t row_lwb, const TVectorT<float>& source); Insert vector source starting at [row_lwb], thereby overwriting the part; [row_lwb..row_lwb+nr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVectorT_float_.html:11030,Allocate,Allocate,11030,root/html602/TVectorT_float_.html,https://root.cern,https://root.cern/root/html602/TVectorT_float_.html,4,['Allocate'],['Allocate']
Energy Efficiency,"fSizey-basic dimensions of source and dest spectra. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example 1 - script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform. Energy of the transformed data is concentrated around the beginning of the coordinate system; Script:; Example to illustrate Transform function (class TSpectrumTransform2). To execute this example, do; root > .x Transform2.C; void Transform2() {; Int_t i, j;; Int_t nbinsx = 256;; Int_t nbinsy = 256;; Int_t xmin = 0;; Int_t xmax = nbinsx;; Int_t ymin = 0;; Int_t ymax = nbinsy;; Double_t ** source = new Double_t *[nbinsx];; Double_t ** dest = new Double_t *[nbinsx];; for (i=0;i<nbinsx;i++); source[i]=newDouble_t[nbinsy];; for (i=0;i<nbinsx;i++); dest[i]=newDouble_t[nbinsy];; TH2F *trans = newTH2F(""trans"",""Background estimation"",nbinsx,xmin,xmax,n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Transform.html:31711,adapt,adaptive,31711,doc/master/classTSpectrum2Transform.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html,1,['adapt'],['adaptive']
Energy Efficiency,"fTracks.fPx[2];; double; is executed by one of the method of the skeleton, somepx will be updated with the current value of fPx of the 3rd track.; Both macrofilename and the optional cutfilename are expected to be the name of source files which contain at least a free standing function with the signature: x_t macrofilename(); // i.e function with the same name as the file; and y_t cutfilename(); // i.e function with the same name as the file; x_t and y_t needs to be types that can convert respectively to a double and a bool (because the skeleton uses: if (cutfilename()) htemp->Fill(macrofilename());; This 2 functions are run in a context such that the branch names are available as local variables of the correct (read-only) type.; Note that if you use the same 'variable' twice, it is more efficient to 'cache' the value. For example Int_t n = fEventNumber; // Read fEventNumber; if (n<10 || n>10) { ... }; int; nconst Int_t nDefinition legend1.C:16; is more efficient than if (fEventNumber<10 || fEventNumber>10); Access to TClonesArray.; If a branch (or member) is a TClonesArray (let's say fTracks), you can access the TClonesArray itself by using ->: fTracks->GetLast();; However this will load the full TClonesArray object and its content. To quickly read the size of the TClonesArray use (note the dot): fTracks.GetEntries();; This will read only the size from disk if the TClonesArray has been split. To access the content of the TClonesArray, use the [] operator: float px = fTracks[i].fPx; // fPx of the i-th track; Warning:; The variable actually use for access are 'wrapper' around the real data type (to add autoload for example) and hence getting to the data involves the implicit call to a C++ conversion operator. This conversion is automatic in most case. However it is not invoked in a few cases, in particular in variadic function (like printf). So when using printf you should either explicitly cast the value or use any intermediary variable: fprintf(stdout,""trs[%d].a = %",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePlayer.html:33727,efficient,efficient,33727,doc/master/classTTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html,1,['efficient'],['efficient']
Energy Efficiency,"fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; vector<pair<Float_t,Float_t> >*fDeviationsFromTargetsdeviation from the targets, event weight; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; Float_tfWeightRangesuppress outliers for the estimator calculation; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodMLP.html:23955,monitor,monitoring,23955,root/html602/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodMLP.html,4,['monitor'],['monitoring']
Energy Efficiency,"fZ;}. Scalar T() const; { return fT;}. Scalar P2() const; other coordinate representation. squared magnitude of spatial components. { return fX*fX + fY*fY + fZ*fZ; }. Scalar P() const. magnitude of spatial components (magnitude of 3-momentum). { return std::sqrt(P2()); }. Scalar R() const; { return P(); }. Scalar M2() const. vector magnitude squared (or mass squared). { return fT*fT - fX*fX - fY*fY - fZ*fZ;}. Scalar Mag2() const; { return M2(); }. Scalar M() const. invariant mass. Scalar Mag() const; { return M(); }. Scalar Pt2() const. transverse spatial component squared. { return fX*fX + fY*fY;}. Scalar Perp2() const; { return Pt2();}. Scalar Pt() const. Transverse spatial component (P_perp or rho). { return std::sqrt(Perp2());}. Scalar Perp() const; { return Pt();}. Scalar Rho() const; { return Pt();}. Scalar Mt2() const. transverse mass squared. { return fT*fT - fZ*fZ; }. Scalar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzE4D<Double32_t>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzE4D<Double32_t>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzE4D<Double32_t>::Scalar pz). set Z value. void SetE(ROOT::Math::PxPyPzE4D<Double32_t>::Scalar e). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzE4D<Double32_t>::Scalar px, ROOT::Math::PxPyPzE4D<Double32_t>::Scalar py, ROOT::Math::PxPyPzE4D<Double32_t>::Scalar pz, ROOT::Math::PxPyPzE4D<Double32_t>::Scalar e). set all values using cartesian coordinates. void Negate(); ------ Manipulations -------------. negate the 4-vector. { fX = -fX; fY = -fY; fZ = -fZ; fT = -fT;}. void Scale(const ROOT::Math::PxPyPzE4D<Double32_t>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PxPyPzE4D_Double32_t_.html:6722,energy,energy,6722,root/html526/ROOT__Math__PxPyPzE4D_Double32_t_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PxPyPzE4D_Double32_t_.html,7,['energy'],['energy']
Energy Efficiency,"fZ;}. Scalar T() const; { return fT;}. Scalar P2() const; other coordinate representation. squared magnitude of spatial components. { return fX*fX + fY*fY + fZ*fZ; }. Scalar P() const. magnitude of spatial components (magnitude of 3-momentum). { return std::sqrt(P2()); }. Scalar R() const; { return P(); }. Scalar M2() const. vector magnitude squared (or mass squared). { return fT*fT - fX*fX - fY*fY - fZ*fZ;}. Scalar Mag2() const; { return M2(); }. Scalar M() const. invariant mass. Scalar Mag() const; { return M(); }. Scalar Pt2() const. transverse spatial component squared. { return fX*fX + fY*fY;}. Scalar Perp2() const; { return Pt2();}. Scalar Pt() const. Transverse spatial component (P_perp or rho). { return std::sqrt(Perp2());}. Scalar Perp() const; { return Pt();}. Scalar Rho() const; { return Pt();}. Scalar Mt2() const. transverse mass squared. { return fT*fT - fZ*fZ; }. Scalar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzE4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzE4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzE4D<double>::Scalar pz). set Z value. void SetE(ROOT::Math::PxPyPzE4D<double>::Scalar e). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzE4D<double>::Scalar px, ROOT::Math::PxPyPzE4D<double>::Scalar py, ROOT::Math::PxPyPzE4D<double>::Scalar pz, ROOT::Math::PxPyPzE4D<double>::Scalar e). set all values using cartesian coordinates. void Negate(); ------ Manipulations -------------. negate the 4-vector. { fX = -fX; fY = -fY; fZ = -fZ; fT = -fT;}. void Scale(const ROOT::Math::PxPyPzE4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordina",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PxPyPzE4D_double_.html:6370,energy,energy,6370,root/html526/ROOT__Math__PxPyPzE4D_double_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PxPyPzE4D_double_.html,15,['energy'],['energy']
Energy Efficiency,"features in this enum.; 63};; 64 ; 65 ; 66} // namespace Experimental; 67 ; 68 ; 69class TIOFeatures {; 70friend class ::TTree;; 71friend class ::TBranch;; 72friend class ::TBasket;; 73 ; 74public:; 75 TIOFeatures() {}; 76 ; 77 void Clear(EIOFeatures bits);; 78 void Clear(Experimental::EIOUnsupportedFeatures bits);; 79 void Clear(Experimental::EIOFeatures bits);; 80 bool Set(EIOFeatures bits);; 81 bool Set(Experimental::EIOFeatures bits);; 82 bool Set(const std::string &);; 83 bool Test(EIOFeatures bits) const;; 84 bool Test(Experimental::EIOFeatures bits) const;; 85 bool Test(Experimental::EIOUnsupportedFeatures bits) const;; 86 void Print() const;; 87 ; 88 // The number of known, defined IO features (supported / unsupported / experimental).; 89 static constexpr int kIOFeatureCount = 1;; 90 ; 91private:; 92 // These methods allow access to the raw bitset underlying; 93 // this object, breaking type safety. They are necessary for; 94 // efficient interaction with TTree / TBranch / TBasket, but left; 95 // private to prevent users from interacting with the raw bits.; 96 TIOFeatures(UChar_t IOBits) : fIOBits(IOBits) {}; 97 UChar_t GetFeatures() const;; 98 void Set(UChar_t newBits) {fIOBits = newBits;}; 99 ; 100 UChar_t fIOBits{0};; 101};; 102 ; 103} // namespace ROOT; 104 ; 105#endif // ROOT_TIO_FEATURES; UChar_tunsigned char UChar_tDefinition RtypesCore.h:38; Rtypes.h; BIT#define BIT(n)Definition Rtypes.h:85; ROOT::TIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TT...Definition TIOFeatures.hxx:69; ROOT::TIOFeatures::GetFeaturesUChar_t GetFeatures() constDefinition TIOFeatures.cxx:250; ROOT::TIOFeatures::TIOFeaturesTIOFeatures(UChar_t IOBits)Definition TIOFeatures.hxx:96; ROOT::TIOFeatures::Testbool Test(Experimental::EIOUnsupportedFeatures bits) const; ROOT::TIOFeatures::Printvoid Print() constPrint a human-readable representation of the TIOFeatures to stdout.Definition TIOFeatures.cxx:197; ROOT::TIOFeature",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TIOFeatures_8hxx_source.html:3385,efficient,efficient,3385,doc/v632/TIOFeatures_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/TIOFeatures_8hxx_source.html,1,['efficient'],['efficient']
Energy Efficiency,"features in this enum.; 63};; 64 ; 65 ; 66} // namespace Experimental; 67 ; 68 ; 69class TIOFeatures {; 70friend class ::TTree;; 71friend class ::TBranch;; 72friend class ::TBasket;; 73 ; 74public:; 75 TIOFeatures() {}; 76 ; 77 void Clear(EIOFeatures bits);; 78 void Clear(Experimental::EIOUnsupportedFeatures bits);; 79 void Clear(Experimental::EIOFeatures bits);; 80 bool Set(EIOFeatures bits);; 81 bool Set(Experimental::EIOFeatures bits);; 82 bool Set(const std::string &);; 83 bool Test(EIOFeatures bits) const;; 84 bool Test(Experimental::EIOFeatures bits) const;; 85 bool Test(Experimental::EIOUnsupportedFeatures bits) const;; 86 void Print() const;; 87 ; 88 // The number of known, defined IO features (supported / unsupported / experimental).; 89 static constexpr int kIOFeatureCount = 1;; 90 ; 91private:; 92 // These methods allow access to the raw bitset underlying; 93 // this object, breaking type safety. They are necessary for; 94 // efficient interaction with TTree / TBranch / TBasket, but left; 95 // private to prevent users from interacting with the raw bits.; 96 TIOFeatures(UChar_t IOBits) : fIOBits(IOBits) {}; 97 UChar_t GetFeatures() const;; 98 void Set(UChar_t newBits) {fIOBits = newBits;}; 99 ; 100 UChar_t fIOBits{0};; 101};; 102 ; 103} // namespace ROOT; 104 ; 105#endif // ROOT_TIO_FEATURES; UChar_tunsigned char UChar_tDefinition RtypesCore.h:38; Rtypes.h; BIT#define BIT(n)Definition Rtypes.h:90; ROOT::TIOFeaturesTIOFeatures provides the end-user with the ability to change the IO behavior of data written via a TT...Definition TIOFeatures.hxx:69; ROOT::TIOFeatures::GetFeaturesUChar_t GetFeatures() constDefinition TIOFeatures.cxx:250; ROOT::TIOFeatures::TIOFeaturesTIOFeatures(UChar_t IOBits)Definition TIOFeatures.hxx:96; ROOT::TIOFeatures::Testbool Test(Experimental::EIOUnsupportedFeatures bits) const; ROOT::TIOFeatures::Printvoid Print() constPrint a human-readable representation of the TIOFeatures to stdout.Definition TIOFeatures.cxx:197; ROOT::TIOFeature",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TIOFeatures_8hxx_source.html:3386,efficient,efficient,3386,doc/master/TIOFeatures_8hxx_source.html,https://root.cern,https://root.cern/doc/master/TIOFeatures_8hxx_source.html,1,['efficient'],['efficient']
Energy Efficiency,"fer and return class object. void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only be done after the CINT dictionary has; been fully populated and can not be delayed efficiently. Long_t Property() const; Set TObject::fBits and fStreamerType to cache information about the; class. The bits are; kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; The value of fStreamerType are; kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulated: the class is missing its shared library. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClass.html:34499,efficient,efficiently,34499,root/html526/TClass.html,https://root.cern,https://root.cern/root/html526/TClass.html,7,['efficient'],['efficiently']
Energy Efficiency,"fer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**Allocate(Int_t size); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidCopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tCopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tCtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tDoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidFillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidSwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. enum TGraph::[unnamed] { kClipFrame; kNotEditable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*fEX[fNpoints] array of X errors; Double_t*fEY[fNpoints] array of Y errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPoint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphErrors.html:12830,Allocate,Allocate,12830,root/html534/TGraphErrors.html,https://root.cern,https://root.cern/root/html534/TGraphErrors.html,2,['Allocate'],"['Allocate', 'AllocateArrays']"
Energy Efficiency,"fer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**Allocate(Int_t size); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidCopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tCopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tCtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tDoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidFillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidSwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. enum TGraph::[unnamed] { kClipFrame; kNotEditable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*fEXhigh[fNpoints] array of X high errors; Double_t*fEXhighd[fNpoints] array of X high displacements; Double_t*fEXlow[fNpoints] array of X low errors; Double_t*fEXlowd[fNpoints] array of X low displacements; Double_t*fEYhigh[fNpoints] array of Y high errors; Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphBentErrors.html:13272,Allocate,Allocate,13272,root/html534/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html534/TGraphBentErrors.html,2,['Allocate'],"['Allocate', 'AllocateArrays']"
Energy Efficiency,"fer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGraph::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTGraph::Zero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations). protected:. virtual Double_t**Allocate(Int_t size); Double_t**TGraph::AllocateArrays(Int_t Narrays, Int_t arraySize); virtual voidCopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); virtual Bool_tCopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Bool_tCtorAllocate(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tDoMerge(const TGraph* g); Double_t**TGraph::ExpandAndCopy(Int_t size, Int_t iend); virtual voidFillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); voidTObject::MakeZombie(); Double_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidSwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. enum TGraph::[unnamed] { kClipFrame; kNotEditable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*fEXhigh[fNpoints] array of X high errors; Double_t*fEXlow[fNpoints] array of X low errors; Double_t*fEYhigh[fNpoints] array of Y high errors; Double_t*fEYlow[fNpoints] array of Y low errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStyl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphAsymmErrors.html:13599,Allocate,Allocate,13599,root/html534/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html534/TGraphAsymmErrors.html,2,['Allocate'],"['Allocate', 'AllocateArrays']"
Energy Efficiency,"fer, even if empty(). ;  ; pointer data () noexcept;  Return a pointer to the vector's buffer, even if empty(). ;  ; bool empty () const;  ; const_iterator end () const noexcept;  ; iterator end () noexcept;  ; reference front ();  ; const_reference front () const;  ; size_type max_size () const noexcept;  ; const_reverse_iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:5051,allocate,allocated,5051,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,2,['allocate'],['allocated']
Energy Efficiency,"ference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 122 of file Derivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::Derivator::EvalBackward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 105 of file Derivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::Derivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 114 of file Derivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::Derivator::EvalCentral ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 97 of file Derivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::Derivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h = 1E-8 . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself ; Definition at line 118 of file Derivator.cxx. ◆ EvalForward() [2/2]. double ROOT::Math::Derivator::EvalForward ; (; double ; x, . double ; h = 1E-8 . ); const. Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 101 of file Derivator.cxx. ◆ operator=(). Derivator & ROOT::Math::Derivator::operator= ; (; const Derivator & ; rhs). private . Definition at line 76 of file Derivator.cxx. ◆ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:8715,adapt,adaptive,8715,doc/master/classROOT_1_1Math_1_1Derivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html,1,['adapt'],['adaptive']
Energy Efficiency,"ffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TImagePalette(); TImagePalette(const TImagePalette& palette); TImagePalette(UInt_t numPoints); TImagePalette(Int_t ncolors, Int_t* colors); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. UShort_t*fColorAlpha[fNumPoints] alpha at each anchor point; UShort_t*fColorBlue[fNumPoints] blue color at each anchor point; UShort_t*fColorGreen[fNumPoints] green color at each anchor point; UShort_t*fColorRed[fNumPoints] red color at each anchor point; UInt_tfNumPointsnumber of anchor points; Double_t*fPoints[fNumPoints] value of each anchor point [0..1]; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TImagePalette.html:7542,green,green,7542,root/html602/TImagePalette.html,https://root.cern,https://root.cern/root/html602/TImagePalette.html,4,['green'],['green']
Energy Efficiency,fferSQL.; Definition at line 265 of file TBufferFile.h. ◆ operator=(). void TBufferFile::operator= ; (; const TBufferFile & ; ). protecteddelete . not implemented . ◆ ReadArray() [1/13]. Int_t TBufferFile::ReadArray ; (; Bool_t *& ; b). overridevirtual . Read array of bools from the I/O buffer. ; Returns the number of bools read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 730 of file TBufferFile.cxx. ◆ ReadArray() [2/13]. Int_t TBufferFile::ReadArray ; (; Char_t *& ; c). overridevirtual . Read array of characters from the I/O buffer. ; Returns the number of characters read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 758 of file TBufferFile.cxx. ◆ ReadArray() [3/13]. Int_t TBufferFile::ReadArray ; (; Double_t *& ; d). overridevirtual . Read array of doubles from the I/O buffer. ; Returns the number of doubles read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 934 of file TBufferFile.cxx. ◆ ReadArray() [4/13]. Int_t TBufferFile::ReadArray ; (; Float_t *& ; f). overridevirtual . Read array of floats from the I/O buffer. ; Returns the number of floats read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 901 of file TBufferFile.cxx. ◆ ReadArray() [5/13]. Int_t TBufferFile::ReadArray ; (; Int_t *& ; ii). overridevirtual . Read array of ints from the I/O buffer. ; Returns the number of ints read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 814 of file TBufferFile.cxx. ◆ ReadArray() [6/13]. Int_t TBufferFile::ReadArray ; (; Long64_t *& ; ll). overridevirtual . Read array of long longs from the I/O buffer. ; Returns the number of long longs read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:46795,allocate,allocated,46795,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['allocate'],['allocated']
Energy Efficiency,"fferent sequences..); 137 Bool_t color = kFALSE;; 138 Bool_t drawProgressBar = kFALSE;; 139#else; 140 Bool_t color = !gROOT->IsBatch();; 141 Bool_t drawProgressBar = kTRUE;; 142#endif; 143 DeclareOptionRef(fVerbose, ""V"", ""Verbose flag"");; 144 DeclareOptionRef(fVerboseLevel = TString(""Info""), ""VerboseLevel"", ""VerboseLevel (Debug/Verbose/Info)"");; 145 AddPreDefVal(TString(""Debug""));; 146 AddPreDefVal(TString(""Verbose""));; 147 AddPreDefVal(TString(""Info""));; 148 DeclareOptionRef(color, ""Color"", ""Flag for coloured screen output (default: True, if in batch mode: False)"");; 149 DeclareOptionRef(; 150 fTransformations, ""Transformations"",; 151 ""List of transformations to test; formatting example: \""Transformations=I;D;P;U;G,D\"", for identity, ""; 152 ""decorrelation, PCA, Uniform and Gaussianisation followed by decorrelation transformations"");; 153 DeclareOptionRef(fCorrelations, ""Correlations"", ""boolean to show correlation in output"");; 154 DeclareOptionRef(fROC, ""ROC"", ""boolean to show ROC in output"");; 155 DeclareOptionRef(silent, ""Silent"",; 156 ""Batch mode: boolean silent flag inhibiting any output from TMVA after the creation of the factory ""; 157 ""class object (default: False)"");; 158 DeclareOptionRef(drawProgressBar, ""DrawProgressBar"",; 159 ""Draw progress bar to display training, testing and evaluation schedule (default: True)"");; 160 DeclareOptionRef(fModelPersistence, ""ModelPersistence"",; 161 ""Option to save the trained model in xml file or using serialization"");; 162 ; 163 TString analysisType(""Auto"");; 164 DeclareOptionRef(analysisType, ""AnalysisType"",; 165 ""Set the analysis type (Classification, Regression, Multiclass, Auto) (default: Auto)"");; 166 AddPreDefVal(TString(""Classification""));; 167 AddPreDefVal(TString(""Regression""));; 168 AddPreDefVal(TString(""Multiclass""));; 169 AddPreDefVal(TString(""Auto""));; 170 ; 171 ParseOptions();; 172 CheckForUnusedOptions();; 173 ; 174 if (Verbose()); 175 fLogger->SetMinType(kVERBOSE);; 176 if (fVerboseLevel.CompareTo(""Debug"") ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:6382,schedul,schedule,6382,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['schedul'],['schedule']
Energy Efficiency,"fferent sequences..); 227 Bool_t color = kFALSE;; 228 Bool_t drawProgressBar = kFALSE;; 229#else; 230 Bool_t color = !gROOT->IsBatch();; 231 Bool_t drawProgressBar = kTRUE;; 232#endif; 233 DeclareOptionRef(fVerbose, ""V"", ""Verbose flag"");; 234 DeclareOptionRef(fVerboseLevel = TString(""Info""), ""VerboseLevel"", ""VerboseLevel (Debug/Verbose/Info)"");; 235 AddPreDefVal(TString(""Debug""));; 236 AddPreDefVal(TString(""Verbose""));; 237 AddPreDefVal(TString(""Info""));; 238 DeclareOptionRef(color, ""Color"", ""Flag for coloured screen output (default: True, if in batch mode: False)"");; 239 DeclareOptionRef(; 240 fTransformations, ""Transformations"",; 241 ""List of transformations to test; formatting example: \""Transformations=I;D;P;U;G,D\"", for identity, ""; 242 ""decorrelation, PCA, Uniform and Gaussianisation followed by decorrelation transformations"");; 243 DeclareOptionRef(fCorrelations, ""Correlations"", ""boolean to show correlation in output"");; 244 DeclareOptionRef(fROC, ""ROC"", ""boolean to show ROC in output"");; 245 DeclareOptionRef(silent, ""Silent"",; 246 ""Batch mode: boolean silent flag inhibiting any output from TMVA after the creation of the factory ""; 247 ""class object (default: False)"");; 248 DeclareOptionRef(drawProgressBar, ""DrawProgressBar"",; 249 ""Draw progress bar to display training, testing and evaluation schedule (default: True)"");; 250 DeclareOptionRef(fModelPersistence, ""ModelPersistence"",; 251 ""Option to save the trained model in xml file or using serialization"");; 252 ; 253 TString analysisType(""Auto"");; 254 DeclareOptionRef(analysisType, ""AnalysisType"",; 255 ""Set the analysis type (Classification, Regression, Multiclass, Auto) (default: Auto)"");; 256 AddPreDefVal(TString(""Classification""));; 257 AddPreDefVal(TString(""Regression""));; 258 AddPreDefVal(TString(""Multiclass""));; 259 AddPreDefVal(TString(""Auto""));; 260 ; 261 ParseOptions();; 262 CheckForUnusedOptions();; 263 ; 264 if (Verbose()); 265 fLogger->SetMinType(kVERBOSE);; 266 if (fVerboseLevel.CompareTo(""Debug"") ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:10292,schedul,schedule,10292,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['schedul'],['schedule']
Energy Efficiency,"ffers are deleted.; Entries, max and min are reset. void ResetAddress(); Set branch address to zero and free all allocated memory. void ResetDeleteObject(); -- Release ownership of any allocated objects. Note: This interface was added so that clone trees could; be told they do not own the allocated objects. void SetAddress(void* addobj); -- Point this branch at an object. For a sub-branch, addr is a pointer to the branch object. For a top-level branch the meaning of addr is as follows:. If addr is zero, then we allocate a branch object; internally and the branch is the owner of the allocated; object, not the caller. However the caller may obtain; a pointer to the branch object with GetObject(). Example:. branch->SetAddress(0);; Event* event = branch->GetObject();; ... Do some work. If addr is not zero, but the pointer addr points at is; zero, then we allocate a branch object and set the passed; pointer to point at the allocated object. The caller; owns the allocated object and is responsible for deleting; it when it is no longer needed. Example:. Event* event = 0;; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. If addr is not zero and the pointer addr points at is; also not zero, then the caller has allocated a branch; object and is asking us to use it. The caller owns it; and must delete it when it is no longer needed. Example:. Event* event = new Event();; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. These rules affect users of TTree::Branch(),; TTree::SetBranchAddress(), and TChain::SetBranchAddress(); as well because those routines call this one. An example of a tree with branches with objects allocated; and owned by us:. TFile* f1 = new TFile(""myfile_original.root"");; TTree* t1 = (TTree*) f->Get(""MyTree"");; TFile* f2 = new TFile(""myfile_copy.root"", ""recreate"");; TTree* t2 = t1->Clone(0);; for (Int_t i = 0; i < 10; ++i) {; t1->GetEntry(i);; t2->Fill();; }; t2->Write(); delete f2;; f2 = 0;; delete f1;; f1 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchElement.html:24351,allocate,allocated,24351,root/html526/TBranchElement.html,https://root.cern,https://root.cern/root/html526/TBranchElement.html,3,['allocate'],['allocated']
Energy Efficiency,"fficients.; destVector-pointer to the vector of dest data, its length should be size except for direct FOURIER, FOUR-WALSH, FOUR-HAAR. These need 2*size length to store real and imaginary coefficients. Transform methods; Goal: to analyse experimental data using orthogonal transforms. orthogonal transforms can be successfully used for the processing of nuclear spectra (not only); they can be used to remove high frequency noise, to increase signal-to-background ratio as well as to enhance low intensity components [1], to carry out e.g. Fourier analysis etc.; we have implemented the function for the calculation of the commonly used orthogonal transforms as well as functions for the filtration and enhancement of experimental data. References:; [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-284.; [2] Morhac; M., Matouoek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; [3] Morhac; M., Matouoek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac; M., Matouoek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. Example - script Transform.c:. Fig. 1 Original gamma-ray spectrum. Fig. 2 Transformed spectrum from Fig. 1 using Cosine transform; Script:; Example to illustrate Transform function (class TSpectrumTransform). To execute this example, do:; root > .x Transform.C; #include <TSpectrum>; #include <TSpectrumTransform>; void Transform() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Transformed spectrum using Cosine transform"",nbins,xmin,xmax);; TFile *f = new TFile(""spectra/TSpectrum.root"");; h=(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumTransform.html:30696,adapt,adaptive,30696,doc/master/classTSpectrumTransform.html,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html,1,['adapt'],['adaptive']
Energy Efficiency,"ffset added to object pointer before method invocation; TStringfParamsargument string; TStringfProtoprototype string; TMethodCall::EReturnTypefRetTypemethod return type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMethodCall(); Default TMethodCall ctor. Use Init() to initialize the method call; environment. TMethodCall(TClass* cl, const char* method, const char* params); Create a method invocation environment for a specific class, method and; parameters. The parameter string has the form: ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(object,...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). TMethodCall(const char* function, const char* params); Create a global function invocation environment. The parameter; string has the form: ""\""aap\"", 3, 4,35"". To execute the; function call TMethodCall::Execute(...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). TMethodCall(const TMethodCall& org); Copy ctor. TMethodCall & operator=(const TMethodCall& rhs); Assignement operator. ~TMethodCall(); TMethodCall dtor. TObject * Clone(const char* newname = """") const; Return an exact copy of this object. void Init(TClass* cl, const char* method, const char* params); Initialize the method invocation environment. Necessary input; information: the class, method name and the parameter string; of the form ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(object,...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). void Init(const char* function, const char* params); Initialize the function invocation environment. Necessary input; information: the function name and the parameter string of; the form ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(...).; This two step method is much more efficient than ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMethodCall.html:8193,efficient,efficient,8193,root/html528/TMethodCall.html,https://root.cern,https://root.cern/root/html528/TMethodCall.html,6,['efficient'],['efficient']
Energy Efficiency,"file TH2.h. ◆ KolmogorovTest(). Double_t TH2::KolmogorovTest ; (; const TH1 * ; h2, . Option_t * ; option = """" . ); const. overridevirtual . Statistical test of compatibility in shape between THIS histogram and h2, using Kolmogorov test. ; Default: Ignore under- and overflow bins in comparison; option is a character string to specify options; ""U"" include Underflows in test; ""O"" include Overflows; ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob. The returned function value is the probability of test (much less than one means NOT compatible); The KS test uses the distance between the pseudo-CDF's obtained from the histogram. Since in 2D the order for generating the pseudo-CDF is arbitrary, two pairs of pseudo-CDF are used, one starting from the x axis the other from the y axis and the maximum distance is the average of the two maximum distances obtained.; Code adapted by Rene Brun from original HBOOK routine HDIFF ; Reimplemented from TH1.; Definition at line 1470 of file TH2.cxx. ◆ operator=(). TH2 & TH2::operator= ; (; const TH2 & ; ). privatedelete . ◆ ProfileX(). TProfile * TH2::ProfileX ; (; const char * ; name = ""_pfx"", . Int_t ; firstybin = 1, . Int_t ; lastybin = -1, . Option_t * ; option = """" . ); const. Project a 2-D histogram into a profile histogram along X. ; The projection is made from the channels along the Y axis ranging from firstybin to lastybin included. By default, bins 1 to ny are included When all bins are included, the number of entries in the projection is set to the number of entries of the 2-D histogram, otherwise the number of entries is incremented by 1 for all non empty cells.; if option ""d"" is specified, the profile is drawn in the current pad.; if option ""o"" original axis range of the target axes will be kept, but only bins inside the selected range will be filled.; The option can also be used to specify the projected profile error type. Values wh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2.html:92342,adapt,adapted,92342,doc/master/classTH2.html,https://root.cern,https://root.cern/doc/master/classTH2.html,1,['adapt'],['adapted']
Energy Efficiency,"file TMatrixTSparse.h. ◆ EMatrixCreatorsOp2. template<class Element > . enum TMatrixTSparse::EMatrixCreatorsOp2. EnumeratorkMult ; kMultTranspose ; kPlus ; kMinus . Definition at line 81 of file TMatrixTSparse.h. Constructor & Destructor Documentation. ◆ TMatrixTSparse() [1/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; ). inline . Definition at line 83 of file TMatrixTSparse.h. ◆ TMatrixTSparse() [2/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; Int_t ; nrows, . Int_t ; ncols . ). Space is allocated for row/column indices and data, but the sparse structure information has still to be set ! ; Definition at line 107 of file TMatrixTSparse.cxx. ◆ TMatrixTSparse() [3/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; Int_t ; row_lwb, . Int_t ; row_upb, . Int_t ; col_lwb, . Int_t ; col_upb, . Int_t ; nr_nonzeros = 0 . ). Space is allocated for row/column indices and data, but the sparse structure information has still to be set ! ; Definition at line 117 of file TMatrixTSparse.cxx. ◆ TMatrixTSparse() [4/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; Int_t ; row_lwb, . Int_t ; row_upb, . Int_t ; col_lwb, . Int_t ; col_upb, . Int_t ; nr, . Int_t * ; row, . Int_t * ; col, . Element * ; data . ). Space is allocated for row/column indices and data. ; Sparse row/column index structure together with data is coming from the arrays, row, col and data, resp. Here row, col and data are arrays of length nr (number of nonzero elements), i.e. the matrix is stored in COO (coordinate) format. Note that the input arrays are not passed as const since they will be modified ! ; Definition at line 130 of file TMatrixTSparse.cxx. ◆ TMatrixTSparse() [5/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; Int_t ; row_lwb, . Int_t ; row_upb, . Int_t ; col_lwb, . Int_t ; col_upb, . Int_t * ; rowptr, . Int_t * ; col, . Element * ; data . ). Space is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSparse.html:29355,allocate,allocated,29355,doc/master/classTMatrixTSparse.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html,1,['allocate'],['allocated']
Energy Efficiency,"file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrumTransform. class TSpectrumTransform: public TNamed. THIS CLASS CONTAINS ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. TSpectrumTransform(); TSpectrumTransform(Int_t size); TSpectrumTransform(const TSpectrumTransform&); virtual~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumTransform.html:1099,adapt,adaptive,1099,root/html528/TSpectrumTransform.html,https://root.cern,https://root.cern/root/html528/TSpectrumTransform.html,6,['adapt'],['adaptive']
Energy Efficiency,"filled bins is returned by THnSparse::GetNbins(); the bin content for each (linear) bin number can be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord). After the call, coord will contain the bin coordinate of each axis for the bin with linear index linidx. A possible call would be; std::cout << hs.GetBinContent(0, coord); std::cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << std::endl;. @subsection autotoc_md369 Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins"" starting with a TH3 with 30 bins per dimension. Using a THnSparse for a one-dimensional histogram is only reasonable if it has a huge number of bins. Projections; The dimensionality of a THnSparse can be reduced by projecting it to 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or a THnSparse. See the Projection() members. To only project parts of the histogram, call THnSparse::GetAxis(12)->SetRange(from_bin, to_bin);; ; Internal Representation; An entry for a filled bin consists of its n-dimensional coordinates and its bin content. The coordinates are compacted to use as few bits as possible; e.g. a histogram with 10 bins in x and 20 bins in y will only use 4 bits for the x representation and 5 bits for the y representation. This is handled by the internal class THnSparseCompactBinCoord. Bin data (content and coordinates) are allocated in chunks of size fChunkSize; this parameter can be set when constructing a THnSparse. Each chunk is represented by an object of class THnSparseArrayChunk.; Translation from an n-dimensional bin coordinate to the linear index within the chunks is done by GetBin(). It creates a hash from the compacted bin coordinates (the hash of a bin coordinate is the compac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:3144,reduce,reduced,3144,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,1,['reduce'],['reduced']
Energy Efficiency,"final matrix is symmetric . ; Definition at line 1099 of file TMatrixTSym.cxx. ◆ Similarity() [2/3]. template<class Element > . TMatrixTSym< Element > & TMatrixTSym< Element >::Similarity ; (; const TMatrixTSym< Element > & ; b). Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb) This is a similarity transform when B is orthogonal . ; It is more efficient than applying the actual multiplication because this routine realizes that the final matrix is symmetric . ; Definition at line 1190 of file TMatrixTSym.cxx. ◆ Similarity() [3/3]. template<class Element > . Element TMatrixTSym< Element >::Similarity ; (; const TVectorT< Element > & ; v); const. Calculate scalar v * (*this) * v^T. ; Definition at line 1292 of file TMatrixTSym.cxx. ◆ SimilarityT(). template<class Element > . TMatrixTSym< Element > & TMatrixTSym< Element >::SimilarityT ; (; const TMatrixT< Element > & ; n). Calculate B^T * (*this) * B , final matrix will be (ncolsb x ncolsb) It is more efficient than applying the actual multiplication because this routine realizes that the final matrix is symmetric . ; Definition at line 1327 of file TMatrixTSym.cxx. ◆ Streamer(). template<class Element > . void TMatrixTSym< Element >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TMatrixTSym. ; Reimplemented from TMatrixTBase< Element >.; Definition at line 2037 of file TMatrixTSym.cxx. ◆ StreamerNVirtual(). template<class Element > . void TMatrixTSym< Element >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 180 of file TMatrixTSym.h. ◆ T(). template<class Element > . TMatrixTSym< Element > & TMatrixTSym< Element >::T ; (; ). inline . Definition at line 131 of file TMatrixTSym.h. ◆ TMult() [1/2]. template<class Element > . void TMatrixTSym< Element >::TMult ; (; const TMatrixT< Element > & ; a). Replace this matrix with C such that C = A' * A. ; In other words, c[i,j] = SUM{ a[k,i] * a[k,j] }. ; Definition at line 381 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSym.html:44468,efficient,efficient,44468,doc/master/classTMatrixTSym.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSym.html,1,['efficient'],['efficient']
Energy Efficiency,"finition RGeomData.hxx:189; ROOT::RGeomNodeVisibilityCustom settings for physical Node visibility.Definition RGeomData.hxx:199; ROOT::RGeomNodeVisibility::RGeomNodeVisibilityRGeomNodeVisibility(const std::vector< int > &_stack, bool _visible)Definition RGeomData.hxx:203; ROOT::RGeomNodeVisibility::visiblebool visiblevisible flagDefinition RGeomData.hxx:202; ROOT::RGeomNodeVisibility::stackstd::vector< int > stackpath to the nodeDefinition RGeomData.hxx:201; ROOT::RGeomNodeFull node description including matrices and other attributes.Definition RGeomData.hxx:71; ROOT::RGeomNode::opacityfloat opacity! opacity of the colorDefinition RGeomData.hxx:78; ROOT::RGeomNode::idshiftint idshift! used to jump over then scan all geom hierarchyDefinition RGeomData.hxx:76; ROOT::RGeomNode::voldouble vol! volume estimationDefinition RGeomData.hxx:74; ROOT::RGeomNode::useflagbool useflag! extra flag, used for selectionDefinition RGeomData.hxx:77; ROOT::RGeomNode::matrstd::vector< float > matrmatrix for the node, can have reduced number of elementsDefinition RGeomData.hxx:73; ROOT::RGeomNode::RGeomNodeRGeomNode(int _id=0)Definition RGeomData.hxx:80; ROOT::RGeomNode::nfacesint nfaces! number of shape facesDefinition RGeomData.hxx:75; ROOT::RGeomNode::CanDisplaybool CanDisplay() constTrue when there is shape and it can be displayed.Definition RGeomData.hxx:83; ROOT::RGeomRawRenderInfoRender info with raw data.Definition RGeomData.hxx:127; ROOT::RGeomRawRenderInfo::idxstd::vector< int > idxvertex indexes, always trianglesDefinition RGeomData.hxx:130; ROOT::RGeomRawRenderInfo::rawstd::vector< unsigned char > rawfloat vertices as raw data, JSON_base64Definition RGeomData.hxx:129; ROOT::RGeomRawRenderInfo::~RGeomRawRenderInfo~RGeomRawRenderInfo() override=default; ROOT::RGeomRenderInfoBase class for render info block.Definition RGeomData.hxx:120; ROOT::RGeomRenderInfo::~RGeomRenderInfovirtual ~RGeomRenderInfo()=defaultvirtual destructor required for the I/O; ROOT::RGeomShapeRenderInfoRender ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:40583,reduce,reduced,40583,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,2,['reduce'],['reduced']
Energy Efficiency,"finition at line 321 of file TClonesArray.cxx. ◆ CanBypassStreamer(). Bool_t TClonesArray::CanBypassStreamer ; (; ); const. inline . Definition at line 64 of file TClonesArray.h. ◆ Class(). static TClass * TClonesArray::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TClonesArray::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TClonesArray::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 83 of file TClonesArray.h. ◆ Clear(). void TClonesArray::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear the clones array. ; Only use this routine when your objects don't allocate memory since it will not call the object dtors. However, if the class in the TClonesArray implements the function Clear(Option_t *option) and if option = ""C"" the function Clear() is called for all objects in the array. In the function Clear(), one can delete objects or dynamic arrays allocated in the class. This procedure is much faster than calling TClonesArray::Delete(). When the option starts with ""C+"", eg ""C+xyz"" the objects in the array are in turn cleared with the option ""xyz"" ; Implements TCollection.; Definition at line 420 of file TClonesArray.cxx. ◆ Compress(). void TClonesArray::Compress ; (; ). overridevirtual . Remove empty slots from array. ; Reimplemented from TObjArray.; Definition at line 332 of file TClonesArray.cxx. ◆ ConstructedAt() [1/2]. TObject * TClonesArray::ConstructedAt ; (; Int_t ; idx). Get an object at index 'idx' that is guaranteed to have been constructed. ; It might be either a freshly allocated object or one that had already been allocated (and assumingly used). In the later case, it is the callers responsibility to insure that the object is returned to a known state, usually by calling the Clear method on the TClonesArray.; Tests to see if the destructor has been called on the object. If so, or if the object ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:33503,allocate,allocated,33503,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['allocate'],['allocated']
Energy Efficiency,"finition at line 38 of file TGWin32VirtualXProxy.h. ◆ TGWin32VirtualXProxy() [2/2]. TGWin32VirtualXProxy::TGWin32VirtualXProxy ; (; const char * ; name, . const char * ; title . ). inline . Definition at line 39 of file TGWin32VirtualXProxy.h. ◆ ~TGWin32VirtualXProxy(). TGWin32VirtualXProxy::~TGWin32VirtualXProxy ; (; ). inlineoverride . Definition at line 40 of file TGWin32VirtualXProxy.h. Member Function Documentation. ◆ AddWindow(). Int_t TGWin32VirtualXProxy::AddWindow ; (; ULongptr_t ; qwid, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Registers a window created by Qt as a ROOT window. ; Parameters. [in]qwidwindow identifier ; [in]w,hthe width and height, which define the window size . Reimplemented from TVirtualX. ◆ AllocColor(). Bool_t TGWin32VirtualXProxy::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Allocates a read-only colormap entry corresponding to the closest RGB value supported by the hardware. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE.; The pixel value is set to default. Let system think we could allocate color.; Parameters. [in]cmapthe colormap ; [in]colorspecifies and returns the values actually used in the cmap . Reimplemented from TVirtualX. ◆ Bell(). void TGWin32VirtualXProxy::Bell ; (; Int_t ; percent). overridevirtual . Sets the sound bell. Percent is loudness from -100% to 100%. ; Reimplemented from TVirtualX. ◆ ChangeActivePointerGrab(). void TGWin32VirtualXProxy::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; , . Cursor_t ;  . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ; Reimplemented from TVirtualX. ◆ ChangeGC(). void TGWin32VirtualXProxy::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overridevirtual . Changes the components specified by the mask in gval for the specified ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:53060,allocate,allocated,53060,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['allocate'],['allocated']
Energy Efficiency,"finition at line 383 of file RColor.cxx. ◆ Clear(). void ROOT::Experimental::RColor::Clear ; (; ). inline . Definition at line 171 of file RColor.hxx. ◆ ConvertNameToRGB(). std::vector< uint8_t > RColor::ConvertNameToRGB ; (; const std::string & ; name). staticprivate . Converts string name of color in RGB value - when possible. ; Definition at line 156 of file RColor.cxx. ◆ GetAlpha(). uint8_t ROOT::Experimental::RColor::GetAlpha ; (; ); const. inline . Returns color alpha (opacity) as uint8_t 0..255. ; Definition at line 130 of file RColor.hxx. ◆ GetAlphaFloat(). float ROOT::Experimental::RColor::GetAlphaFloat ; (; ); const. inline . Returns color alpha (opacity) as float from 0..1. ; Definition at line 137 of file RColor.hxx. ◆ GetBlue(). uint8_t ROOT::Experimental::RColor::GetBlue ; (; ); const. inline . Returns blue color component 0..255. ; Definition at line 123 of file RColor.hxx. ◆ GetGreen(). uint8_t ROOT::Experimental::RColor::GetGreen ; (; ); const. inline . Returns green color component 0..255. ; Definition at line 116 of file RColor.hxx. ◆ GetHLS(). bool RColor::GetHLS ; (; float & ; hue, . float & ; light, . float & ; satur . ); const. Return the Hue, Light, Saturation (HLS) definition of this RColor. ; Returns the Hue, Light, Saturation (HLS) definition of this RColor If color was not specified as hex, method returns false. ; Definition at line 304 of file RColor.cxx. ◆ GetOrdinal(). float RColor::GetOrdinal ; (; ); const. Return ordinal value, which was set before with SetOrdinal() call. ; Definition at line 124 of file RColor.cxx. ◆ GetRed(). uint8_t ROOT::Experimental::RColor::GetRed ; (; ); const. inline . Returns red color component 0..255. ; Definition at line 109 of file RColor.hxx. ◆ HasAlpha(). bool ROOT::Experimental::RColor::HasAlpha ; (; ); const. inline . Returns true if color alpha (opacity) was specified. ; Definition at line 103 of file RColor.hxx. ◆ IsAuto(). bool RColor::IsAuto ; (; ); const. Returns true if color specified as auto c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RColor.html:9169,green,green,9169,doc/master/classROOT_1_1Experimental_1_1RColor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RColor.html,1,['green'],['green']
Energy Efficiency,"first 10 entries *that pass the; 543preceding filter*.; 544 ; 545Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their `end` value of; 546processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations.; 547 ; 548\anchor custom-columns; 549### Custom columns; 550Custom columns are created by invoking `Define(name, f, columnList)`. As usual, `f` can be any callable object; 551(function, lambda expression, functor class...); it takes the values of the columns listed in `columnList` (a list of; 552strings) as parameters, in the same order as they are listed in `columnList`. `f` must return the value that will be; 553assigned to the temporary column.; 554 ; 555A new variable is created called `name`, accessible as if it was contained in the dataset from subsequent; 556transformations/actions.; 557 ; 558Use cases include:; 559- caching the results of complex calculations for easy and efficient multiple access; 560- extraction of quantities of interest from complex objects; 561- branch aliasing, i.e. changing the name of a branch; 562 ; 563An exception is thrown if the `name` of the new column/branch is already in use for another branch in the TTree.; 564 ; 565It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method; 566`Define(name, expression)`. For example this invocation; 567 ; 568~~~{.cpp}; 569df.Define(""pt"", ""sqrt(px*px + py*py)"");; 570~~~; 571 ; 572will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system; 573builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches; 574from the names of the variables specified by the user.; 575 ; 576#### Custom columns as function of slot and entry number; 577 ; 578It is possible to create custom columns also as a function of the processing slot and en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:34350,efficient,efficient,34350,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['efficient'],['efficient']
Energy Efficiency,"first 10 entries *that pass the; 583preceding filter*.; 584 ; 585Ranges allow ""early quitting"": if all branches of execution of a functional graph reached their `end` value of; 586processed entries, the event-loop is immediately interrupted. This is useful for debugging and quick data explorations.; 587 ; 588\anchor custom-columns; 589### Custom columns; 590Custom columns are created by invoking `Define(name, f, columnList)`. As usual, `f` can be any callable object; 591(function, lambda expression, functor class...); it takes the values of the columns listed in `columnList` (a list of; 592strings) as parameters, in the same order as they are listed in `columnList`. `f` must return the value that will be; 593assigned to the temporary column.; 594 ; 595A new variable is created called `name`, accessible as if it was contained in the dataset from subsequent; 596transformations/actions.; 597 ; 598Use cases include:; 599- caching the results of complex calculations for easy and efficient multiple access; 600- extraction of quantities of interest from complex objects; 601- branch aliasing, i.e. changing the name of a branch; 602 ; 603An exception is thrown if the `name` of the new column/branch is already in use for another branch in the TTree.; 604 ; 605It is also possible to specify the quantity to be stored in the new temporary column as a C++ expression with the method; 606`Define(name, expression)`. For example this invocation; 607 ; 608~~~{.cpp}; 609df.Define(""pt"", ""sqrt(px*px + py*py)"");; 610~~~; 611 ; 612will create a new column called ""pt"" the value of which is calculated starting from the columns px and py. The system; 613builds a just-in-time compiled function starting from the expression after having deduced the list of necessary branches; 614from the names of the variables specified by the user.; 615 ; 616#### Custom columns as function of slot and entry number; 617 ; 618It is possible to create custom columns also as a function of the processing slot and en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:35990,efficient,efficient,35990,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['efficient'],['efficient']
Energy Efficiency,"first' from; 5927/// TObject.; 5928 ; 5929Bool_t TClass::IsStartingWithTObject() const; 5930{; 5931 if (fProperty==(-1)) Property();; 5932 return TestBit(kStartWithTObject);; 5933}; 5934 ; 5935////////////////////////////////////////////////////////////////////////////////; 5936/// Return kTRUE is the class inherits from TObject.; 5937 ; 5938Bool_t TClass::IsTObject() const; 5939{; 5940 if (fProperty==(-1)) Property();; 5941 return TestBit(kIsTObject);; 5942}; 5943 ; 5944////////////////////////////////////////////////////////////////////////////////; 5945/// Return kTRUE is the class is Foreign (the class does not have a Streamer method).; 5946 ; 5947Bool_t TClass::IsForeign() const; 5948{; 5949 if (fProperty==(-1)) Property();; 5950 // If the property are not set and the class is a pair, hard code that; 5951 // it is a unversioned/Foreign class.; 5952 return TestBit(kIsForeign);; 5953}; 5954 ; 5955////////////////////////////////////////////////////////////////////////////////; 5956/// Do the initialization that can only be done after the CINT dictionary has; 5957/// been fully populated and can not be delayed efficiently.; 5958 ; 5959void TClass::PostLoadCheck(); 5960{; 5961 // In the case of a Foreign class (loaded class without a Streamer function); 5962 // we reset fClassVersion to be -1 so that the current TVirtualStreamerInfo will not; 5963 // be confused with a previously loaded streamerInfo.; 5964 ; 5965 if (IsLoaded() && HasInterpreterInfo() && fClassVersion==1 /*&& fStreamerInfo; 5966 && fStreamerInfo->At(1)*/ && IsForeign() ); 5967 {; 5968 SetClassVersion(-1);; 5969 }; 5970 // Note: We are careful to check the class version first because checking; 5971 // for foreign can trigger an AutoParse.; 5972 else if (IsLoaded() && HasDataMemberInfo() && fStreamerInfo && ((fClassVersion > 1) || !IsForeign())); 5973 {; 5974 R__LOCKGUARD(gInterpreterMutex);; 5975 ; 5976 TVirtualStreamerInfo *info = (TVirtualStreamerInfo*)(fStreamerInfo->At(fClassVersion));; 5977 // H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:228331,efficient,efficiently,228331,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['efficient'],['efficiently']
Energy Efficiency,"first' from; 5994/// TObject.; 5995 ; 5996Bool_t TClass::IsStartingWithTObject() const; 5997{; 5998 if (fProperty==(-1)) Property();; 5999 return TestBit(kStartWithTObject);; 6000}; 6001 ; 6002////////////////////////////////////////////////////////////////////////////////; 6003/// Return kTRUE is the class inherits from TObject.; 6004 ; 6005Bool_t TClass::IsTObject() const; 6006{; 6007 if (fProperty==(-1)) Property();; 6008 return TestBit(kIsTObject);; 6009}; 6010 ; 6011////////////////////////////////////////////////////////////////////////////////; 6012/// Return kTRUE is the class is Foreign (the class does not have a Streamer method).; 6013 ; 6014Bool_t TClass::IsForeign() const; 6015{; 6016 if (fProperty==(-1)) Property();; 6017 // If the property are not set and the class is a pair, hard code that; 6018 // it is a unversioned/Foreign class.; 6019 return TestBit(kIsForeign);; 6020}; 6021 ; 6022////////////////////////////////////////////////////////////////////////////////; 6023/// Do the initialization that can only be done after the CINT dictionary has; 6024/// been fully populated and can not be delayed efficiently.; 6025 ; 6026void TClass::PostLoadCheck(); 6027{; 6028 // In the case of a Foreign class (loaded class without a Streamer function); 6029 // we reset fClassVersion to be -1 so that the current TVirtualStreamerInfo will not; 6030 // be confused with a previously loaded streamerInfo.; 6031 ; 6032 if (IsLoaded() && HasInterpreterInfo() && fClassVersion==1 /*&& fStreamerInfo; 6033 && fStreamerInfo->At(1)*/ && IsForeign() ); 6034 {; 6035 SetClassVersion(-1);; 6036 }; 6037 // Note: We are careful to check the class version first because checking; 6038 // for foreign can trigger an AutoParse.; 6039 else if (IsLoaded() && HasDataMemberInfo() && fStreamerInfo && ((fClassVersion > 1) || !IsForeign())); 6040 {; 6041 R__LOCKGUARD(gInterpreterMutex);; 6042 ; 6043 TVirtualStreamerInfo *info = (TVirtualStreamerInfo*)(fStreamerInfo->At(fClassVersion));; 6044 // H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:231082,efficient,efficiently,231082,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['efficient'],['efficiently']
Energy Efficiency,"fitting; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; r[""x""]<<TVectorD(n, x);; r[""y""]<<TVectorD(n, y);; //creating a R data frame; r<<""ds<-data.frame(x=x,y=y)"";; //fitting x and y to X^power using Nonlinear Least Squares; r<<""m <- nls(y ~ I(x^power),data = ds, start = list(power = 1),trace = T)"";; //getting the fitted value (power); Double_t power;; r[""summary(m)$coefficients[1]""]>>power;; ; TF1 *f_fitted=new TF1(""f_fitted"",""pow(x,[0])"",0,1);; f_fitted->SetParameter(0,power);; //plotting the fitted function; TGraph *gr3 = new TGraph(f_fitted);; gr3->SetMarkerColor(kGreen);; gr3->SetMarkerStyle(8);; gr3->SetMarkerSize(1);; ; mg->Add(gr3);; mg->Draw(""ap"");; ; //displaying basic results; TPaveText *pt = new TPaveText(0.1,0.6,0.5,0.9,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Fitting x^power "");; pt->AddText("" \""Blue\"" Points with gaussian noise to be fitted"");; pt->AddText("" \""Red\"" Known function x^3"");; TString fmsg;; fmsg.Form("" \""Green\"" Fitted function with power=%.4lf"",power);; pt->AddText(fmsg);; pt->Draw();; c1->Update();; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TVectorDTVectorT< Double_t > TVectorDDefinition TVectorDfwd.h:23; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:3144,power,power,3144,doc/master/classROOT_1_1R_1_1TRInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html,1,['power'],['power']
Energy Efficiency,"flate_state.next_out =; 12682 inflated + inflate_buf_size_old;; 12683 ret = inflate(&conn->websocket_inflate_state,; 12684 Z_SYNC_FLUSH);; 12685 if (ret == Z_NEED_DICT || ret == Z_DATA_ERROR; 12686 || ret == Z_MEM_ERROR) {; 12687 mg_cry_internal(; 12688 conn,; 12689 ""ZLIB inflate error: %i %s"",; 12690 ret,; 12691 (conn->websocket_inflate_state.msg; 12692 ? conn->websocket_inflate_state.msg; 12693 : ""<no error message>""));; 12694 exit_by_callback = 1;; 12695 break;; 12696 }; 12697 inflate_buf_size_old = inflate_buf_size;; 12698 ; 12699 } while (conn->websocket_inflate_state.avail_out; 12700 == 0);; 12701 inflate_buf_size -=; 12702 conn->websocket_inflate_state.avail_out;; 12703 if (!ws_data_handler(conn,; 12704 mop,; 12705 (char *)inflated,; 12706 inflate_buf_size,; 12707 callback_data)) {; 12708 exit_by_callback = 1;; 12709 }; 12710 mg_free(inflated);; 12711 }; 12712 } else; 12713#endif; 12714 if (!ws_data_handler(conn,; 12715 mop,; 12716 (char *)data,; 12717 (size_t)data_len,; 12718 callback_data)) {; 12719 exit_by_callback = 1;; 12720 }; 12721 }; 12722 }; 12723 ; 12724 /* It a buffer has been allocated, free it again */; 12725 if (data != mem) {; 12726 mg_free(data);; 12727 }; 12728 ; 12729 if (exit_by_callback) {; 12730 DEBUG_TRACE(""Callback requests to close connection from %s:%u"",; 12731 conn->request_info.remote_addr,; 12732 conn->request_info.remote_port);; 12733 break;; 12734 }; 12735 if ((mop & 0xf) == MG_WEBSOCKET_OPCODE_CONNECTION_CLOSE) {; 12736 /* Opcode == 8, connection close */; 12737 DEBUG_TRACE(""Message requests to close connection from %s:%u"",; 12738 conn->request_info.remote_addr,; 12739 conn->request_info.remote_port);; 12740 break;; 12741 }; 12742 ; 12743 /* Not breaking the loop, process next websocket frame. */; 12744 } else {; 12745 /* Read from the socket into the next available location in the; 12746 * message queue. */; 12747 n = pull_inner(NULL,; 12748 conn,; 12749 conn->buf + conn->data_len,; 12750 conn->buf_size - conn->data_len,; 12751 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:369698,allocate,allocated,369698,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['allocate'],['allocated']
Energy Efficiency,"flate_state.next_out =; 12683 inflated + inflate_buf_size_old;; 12684 ret = inflate(&conn->websocket_inflate_state,; 12685 Z_SYNC_FLUSH);; 12686 if (ret == Z_NEED_DICT || ret == Z_DATA_ERROR; 12687 || ret == Z_MEM_ERROR) {; 12688 mg_cry_internal(; 12689 conn,; 12690 ""ZLIB inflate error: %i %s"",; 12691 ret,; 12692 (conn->websocket_inflate_state.msg; 12693 ? conn->websocket_inflate_state.msg; 12694 : ""<no error message>""));; 12695 exit_by_callback = 1;; 12696 break;; 12697 }; 12698 inflate_buf_size_old = inflate_buf_size;; 12699 ; 12700 } while (conn->websocket_inflate_state.avail_out; 12701 == 0);; 12702 inflate_buf_size -=; 12703 conn->websocket_inflate_state.avail_out;; 12704 if (!ws_data_handler(conn,; 12705 mop,; 12706 (char *)inflated,; 12707 inflate_buf_size,; 12708 callback_data)) {; 12709 exit_by_callback = 1;; 12710 }; 12711 mg_free(inflated);; 12712 }; 12713 } else; 12714#endif; 12715 if (!ws_data_handler(conn,; 12716 mop,; 12717 (char *)data,; 12718 (size_t)data_len,; 12719 callback_data)) {; 12720 exit_by_callback = 1;; 12721 }; 12722 }; 12723 }; 12724 ; 12725 /* It a buffer has been allocated, free it again */; 12726 if (data != mem) {; 12727 mg_free(data);; 12728 }; 12729 ; 12730 if (exit_by_callback) {; 12731 DEBUG_TRACE(""Callback requests to close connection from %s:%u"",; 12732 conn->request_info.remote_addr,; 12733 conn->request_info.remote_port);; 12734 break;; 12735 }; 12736 if ((mop & 0xf) == MG_WEBSOCKET_OPCODE_CONNECTION_CLOSE) {; 12737 /* Opcode == 8, connection close */; 12738 DEBUG_TRACE(""Message requests to close connection from %s:%u"",; 12739 conn->request_info.remote_addr,; 12740 conn->request_info.remote_port);; 12741 break;; 12742 }; 12743 ; 12744 /* Not breaking the loop, process next websocket frame. */; 12745 } else {; 12746 /* Read from the socket into the next available location in the; 12747 * message queue. */; 12748 n = pull_inner(NULL,; 12749 conn,; 12750 conn->buf + conn->data_len,; 12751 conn->buf_size - conn->data_len,; 12752 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:369731,allocate,allocated,369731,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['allocate'],['allocated']
Energy Efficiency,"fo(""TTree::~TTree"", ""For tree %s, allocation count is %u."", GetName(), fAllocationCount.load());; 928#ifdef R__TRACK_BASKET_ALLOC_TIME; 929 Info(""TTree::~TTree"", ""For tree %s, allocation time is %lluus."", GetName(), fAllocationTime.load());; 930#endif; 931 }; 932 ; 933 if (fDirectory) {; 934 // We are in a directory, which may possibly be a file.; 935 if (fDirectory->GetList()) {; 936 // Remove us from the directory listing.; 937 fDirectory->Remove(this);; 938 }; 939 //delete the file cache if it points to this Tree; 940 TFile *file = fDirectory->GetFile();; 941 MoveReadCache(file,nullptr);; 942 }; 943 ; 944 // Remove the TTree from any list (linked to to the list of Cleanups) to avoid the unnecessary call to; 945 // this RecursiveRemove while we delete our content.; 946 ROOT::CallRecursiveRemoveIfNeeded(*this);; 947 ResetBit(kMustCleanup); // Don't redo it.; 948 ; 949 // We don't own the leaves in fLeaves, the branches do.; 950 fLeaves.Clear();; 951 // I'm ready to destroy any objects allocated by; 952 // SetAddress() by my branches. If I have clones,; 953 // tell them to zero their pointers to this shared; 954 // memory.; 955 if (fClones && fClones->GetEntries()) {; 956 // I have clones.; 957 // I am about to delete the objects created by; 958 // SetAddress() which we are sharing, so tell; 959 // the clones to release their pointers to them.; 960 for (TObjLink* lnk = fClones->FirstLink(); lnk; lnk = lnk->Next()) {; 961 TTree* clone = (TTree*) lnk->GetObject();; 962 // clone->ResetBranchAddresses();; 963 ; 964 // Reset only the branch we have set the address of.; 965 CopyAddresses(clone,true);; 966 }; 967 }; 968 // Get rid of our branches, note that this will also release; 969 // any memory allocated by TBranchElement::SetAddress().; 970 fBranches.Delete();; 971 ; 972 // The TBranch destructor is using fDirectory to detect whether it; 973 // owns the TFile that contains its data (See TBranch::~TBranch); 974 fDirectory = nullptr;; 975 ; 976 // FIXME: We must consider",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:34396,allocate,allocated,34396,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; double Error () const;  return the estimate of the absolute error of the last derivative calculation ;  ; static double Eval (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x. ;  ; static double EvalCentral (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ;  ; static double EvalForward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive forward difference algorithm with a step size h. ;  ; static double EvalBackward (const IGenFunction &f, double x, double h=1E-8);  Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ;  ; static double Eval (const IMultiGenFunction &f, const double *x, unsigned int icoord=0, double h=1E-8);  Evaluate the partial derivative of a multi-dim function with respect coordinate x_icoord at the point x[]. ;  ; static double Eval (IParamFunction &f, double x, const double *p, unsigned int ipar=0, double h=1E-8);  Evaluate the derivative with respect a parameter for one-dim parameteric function at the point ( x,p[]) with respect the parameter p_ipar. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:2934,adapt,adaptive,2934,doc/master/classROOT_1_1Math_1_1Derivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html,1,['adapt'],['adaptive']
Energy Efficiency,"for given cut sampleDefinition MethodCuts.cxx:1050; TMVA::MethodCuts::AddWeightsXMLTovoid AddWeightsXMLTo(void *parent) constcreate XML description for LD classification and regression (for arbitrary number of output classes/t...Definition MethodCuts.cxx:1287; TMVA::MethodCuts::Initvoid Init(void)default initialisation called by all constructorsDefinition MethodCuts.cxx:220; TMVA::MethodCuts::GetTrainingEfficiencyDouble_t GetTrainingEfficiency(const TString &)Overloaded function to create background efficiency (rejection) versus signal efficiency plot (first ...Definition MethodCuts.cxx:1442; TMVA::MethodCuts::HasAnalysisTypevirtual Bool_t HasAnalysisType(Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)Cuts can only handle classification with 2 classes.Definition MethodCuts.cxx:211; TMVA::MethodCuts::ProcessOptionsvoid ProcessOptions()process user options.Definition MethodCuts.cxx:363; TMVA::MethodCuts::WriteMonitoringHistosToFilevoid WriteMonitoringHistosToFile(void) constwrite histograms and PDFs to file for monitoring purposesDefinition MethodCuts.cxx:1411; TMVA::MethodCuts::EEffMethodEEffMethodDefinition MethodCuts.h:157; TMVA::MethodCuts::MatchParsToCutsvoid MatchParsToCuts(const std::vector< Double_t > &, Double_t *, Double_t *)translates parameters into cutsDefinition MethodCuts.cxx:974; TMVA::MethodCuts::~MethodCutsvirtual ~MethodCuts(void)destructorDefinition MethodCuts.cxx:270; TMVA::MethodCuts::TestClassificationvoid TestClassification()nothing to testDefinition MethodCuts.cxx:827; TMVA::MethodCuts::EFitMethodTypeEFitMethodTypeDefinition MethodCuts.h:146; TMVA::MethodCuts::ReadWeightsFromXMLvoid ReadWeightsFromXML(void *wghtnode)read coefficients from xml weight fileDefinition MethodCuts.cxx:1327; TMVA::MethodCuts::GetEffsfromPDFsvoid GetEffsfromPDFs(Double_t *cutMin, Double_t *cutMax, Double_t &effS, Double_t &effB)compute signal and background efficiencies from PDFs for given cut sampleDefinition MethodCuts.cxx:1023; TMVA::MethodCut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:81572,monitor,monitoring,81572,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['monitor'],['monitoring']
Energy Efficiency,"for given cut sampleDefinition MethodCuts.cxx:1050; TMVA::MethodCuts::AddWeightsXMLTovoid AddWeightsXMLTo(void *parent) constcreate XML description for LD classification and regression (for arbitrary number of output classes/t...Definition MethodCuts.cxx:1287; TMVA::MethodCuts::Initvoid Init(void)default initialisation called by all constructorsDefinition MethodCuts.cxx:220; TMVA::MethodCuts::GetTrainingEfficiencyDouble_t GetTrainingEfficiency(const TString &)Overloaded function to create background efficiency (rejection) versus signal efficiency plot (first ...Definition MethodCuts.cxx:1442; TMVA::MethodCuts::HasAnalysisTypevirtual Bool_t HasAnalysisType(Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)Cuts can only handle classification with 2 classes.Definition MethodCuts.cxx:211; TMVA::MethodCuts::ProcessOptionsvoid ProcessOptions()process user options.Definition MethodCuts.cxx:363; TMVA::MethodCuts::WriteMonitoringHistosToFilevoid WriteMonitoringHistosToFile(void) constwrite histograms and PDFs to file for monitoring purposesDefinition MethodCuts.cxx:1411; TMVA::MethodCuts::EEffMethodEEffMethodDefinition MethodCuts.h:157; TMVA::MethodCuts::kUsePDFs@ kUsePDFsDefinition MethodCuts.h:158; TMVA::MethodCuts::kUseEventSelection@ kUseEventSelectionDefinition MethodCuts.h:157; TMVA::MethodCuts::CheckSetupvoid CheckSetup()check may be overridden by derived class (sometimes, eg, fitters are used which can only be implement...Definition MethodCuts.h:133; TMVA::MethodCuts::MatchParsToCutsvoid MatchParsToCuts(const std::vector< Double_t > &, Double_t *, Double_t *)translates parameters into cutsDefinition MethodCuts.cxx:974; TMVA::MethodCuts::~MethodCutsvirtual ~MethodCuts(void)destructorDefinition MethodCuts.cxx:270; TMVA::MethodCuts::TestClassificationvoid TestClassification()nothing to testDefinition MethodCuts.cxx:827; TMVA::MethodCuts::EFitMethodTypeEFitMethodTypeDefinition MethodCuts.h:146; TMVA::MethodCuts::kUseMinuit@ kUseMinuitDefinition MethodC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8h_source.html:18416,monitor,monitoring,18416,doc/master/MethodCuts_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html,1,['monitor'],['monitoring']
Energy Efficiency,"for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:72596,monitor,monitoring,72596,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['monitor'],['monitoring']
Energy Efficiency,"for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparse.html:17818,allocate,allocate,17818,root/html534/THnSparse.html,https://root.cern,https://root.cern/root/html534/THnSparse.html,6,['allocate'],['allocate']
Energy Efficiency,"frame position centered vertically (with horizontal containers only). kLHintsBottom; specifies the frame position to the bottom of the container frame, above any laid out frames with the same hint. kLHintsExpandX; specifies the frame to be expanded up to the width of the container frame. If the container frame is a vertical frame - it will fit the whole width. If it is a horizontal frame - after the positioning of all frames the available “free” width space is shared between the frames having this hint. kLHintsExpandY; specifies the frame to be expanded up to the height of the container frame. If the container frame is a horizontal frame - it will fit the whole height. If the container frame is a vertical frame - after the arrangement of all frames the available “free” height space is shared between the frames having this hint. kLHintsNormal; = kLHintsLeft | kLHintsTop - default hints. Layout policy:; Child frames never modify their container frame. The container frame can (or cannot) adapt its size in the layout process. It can show all or a part of its frames. Every TGFrame object has a default minimum size (1, 1) assured by TGWindow.; 25.7 Event Processing: Signals and Slots; Event handling covers the interaction between different objects and between the user and the objects in an application. There are two general ways for the user to interact with an application: the keyboard and the mouse. The Graphical User Interface is as a bridge between the user and the program - it provides methods to detect the user actions and instruments that do something as a reaction of these actions. The user communicates with an application through the window system. The window system reports interaction events to the application. The application in turn forwards them to the currently active window. The objects/widgets receive the events and react to them according to the application functionality. The signals/slot communication mechanism is an advanced object communication concept",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1162281,adapt,adapt,1162281,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['adapt'],['adapt']
Energy Efficiency,"frame tutorials. Detailed Description; Show how to work with non-flat data models, e.g. ; vectors of tracks.; This tutorial shows the possibility to use data models which are more complex than flat ntuples with RDataFrame.; ; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using FourVectorRVec = ROOT::VecOps::RVec<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);; ; auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; ; int df002_dataModel(); {; ; // We prepare an input tree to run on; auto fileName = ""df002_dataModel.root"";; auto treeName = ""myTree"";; fill_tree(fileName, treeName);; ; // We read the tree from the file and create a RDataFrame, a class that; // allows us to interact with the data contained in the tree.; ROOT::RDataFrame d(treeName, fileName, {""tracks""});; ; // ## Operating on branches which are collections of objects; // Here we deal with the simplest of the cuts: we decide to accept the event; // only if the number of tracks is greater than 8.; auto n_cut = [](const FourVectorRVec &tracks) { return tracks.size() > 8; };; auto nentries = d.Filter(n_cut, {""tracks""}).Count();; ; std::cout << *nentries ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df002__dataModel_8C.html:1210,energy,energy,1210,doc/master/df002__dataModel_8C.html,https://root.cern,https://root.cern/doc/master/df002__dataModel_8C.html,1,['energy'],['energy']
Energy Efficiency,"from TMVA::MethodCompositeBase. ◆ StreamerNVirtual(). void TMVA::MethodBoost::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 202 of file MethodBoost.h. ◆ TestClassification(). void TMVA::MethodBoost::TestClassification ; (; ). privatevirtual . initialization ; Reimplemented from TMVA::MethodBase.; Definition at line 609 of file MethodBoost.cxx. ◆ Train(). void TMVA::MethodBoost::Train ; (; void ; ). virtual . Implements TMVA::MethodCompositeBase.; Definition at line 351 of file MethodBoost.cxx. ◆ WriteEvaluationHistosToFile(). void TMVA::MethodBoost::WriteEvaluationHistosToFile ; (; Types::ETreeType ; treetype). privatevirtual . writes all MVA evaluation histograms to file ; Reimplemented from TMVA::MethodBase.; Definition at line 637 of file MethodBoost.cxx. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodBoost::WriteMonitoringHistosToFile ; (; void ; ); const. privatevirtual . write special monitoring histograms to file dummy implementation here --------------— ; Reimplemented from TMVA::MethodBase.; Definition at line 579 of file MethodBoost.cxx. Friends And Related Symbol Documentation. ◆ Experimental::Classification. friend class Experimental::Classification. friend . Definition at line 61 of file MethodBoost.h. ◆ Factory. friend class Factory. friend . Definition at line 59 of file MethodBoost.h. ◆ Reader. friend class Reader. friend . Definition at line 60 of file MethodBoost.h. Member Data Documentation. ◆ fAdaBoostBeta. Double_t TMVA::MethodBoost::fAdaBoostBeta. private . ADA boost parameter, default is 1. ; Definition at line 159 of file MethodBoost.h. ◆ fBaggedSampleFraction. Double_t TMVA::MethodBoost::fBaggedSampleFraction. private . rel.Size of bagged sample ; Definition at line 161 of file MethodBoost.h. ◆ fBoostedMethodName. TString TMVA::MethodBoost::fBoostedMethodName. private . details of the boosted classifier ; Definition at line 163 of file MethodBoost.h. ◆ fBoostedMethodOptions. TString TMVA::Metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:41414,monitor,monitoring,41414,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['monitor'],['monitoring']
Energy Efficiency,"from TObject to a tree by encapsulating it in a TObject descending class as is the case in EventHeader and Event.; class EventHeader {; private:; Int_t fEvtNum;; Int_t fRun;; Int_t fDate;; // ... list of methods; ClassDef(EventHeader,1) //Event Header; };; 12.17.3 The Track Class; The Track class descends from TObject since tracks are in a TClonesArray (i.e. a ROOT collection class) and contains a selection of basic types and an array of vertices. Its TObject inheritance enables Track to be in a collection and in Event is a TClonesArray of Tracks.; class Track : public TObject {; private:; Float_t fPx; //X component of the momentum; Float_t fPy; //Y component of the momentum; Float_t fPz; //Z component of the momentum; Float_t fRandom; //A random track quantity; Float_t fMass2; //The mass square of this particle; Float_t fBx; //X intercept at the vertex; Float_t fBy; //Y intercept at the vertex; Float_t fMeanCharge; //Mean charge deposition of all hits; Float_t fXfirst; //X coordinate of the first point; Float_t fXlast; //X coordinate of the last point; Float_t fYfirst; //Y coordinate of the first point; Float_t fYlast; //Y coordinate of the last point; Float_t fZfirst; //Z coordinate of the first point; Float_t fZlast; //Z coordinate of the last point; Float_t fCharge; //Charge of this track; Float_t fVertex[3]; //Track vertex position; Int_t fNpoint; //Number of points for this track; Short_t fValid; //Validity criterion. // method definitions ...; ClassDef(Track,1) //A track segment; };; 12.17.4 Writing the Tree; We create a simple tree with two branches both holding Event objects. One is split and the other is not. We also create a pointer to an Event object (event).; void tree4w() {; // check to see if the event class is in the dictionary; // if it is not load the definition in libEvent.so; if (!TClassTable::GetDict(""Event"")) {; gSystem->Load(""$ROOTSYS/test/libEvent.so"");; }; // create a Tree file tree4.root; TFile f(""tree4.root"",""RECREATE"");; // create a ROOT ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:577962,charge,charge,577962,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,3,"['Charge', 'charge']","['Charge', 'charge']"
Energy Efficiency,"from array. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete(). void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly).; This is a simplified version of ExpandCreate used in the TTree mechanism. TObject * RemoveAt(Int_t idx); Remove object at index idx. TObject * Remove(TObject* obj); Remove object from array. void RemoveRange(Int_t idx1, Int_t idx2); Remove objects from index idx1 to idx2 included. void SetClass(const TClass *cl, Int_t s); Create an array ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TClonesArray.html:15306,allocate,allocated,15306,root/html526/TClonesArray.html,https://root.cern,https://root.cern/root/html526/TClonesArray.html,1,['allocate'],['allocated']
Energy Efficiency,"from file: Higgs_trained_model.h5; PyKeras : [dataset] : Evaluation of PyKeras on training sample (14000 events); : Elapsed time for evaluation of 14000 events: 0.275 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_PyKeras.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_PyKeras.class.C␛[0m; Factory : Training finished; : ; : Ranking input variables (method specific)...; Likelihood : Ranking result (top variable is best ranked); : -------------------------------------; : Rank : Variable : Delta Separation; : -------------------------------------; : 1 : m_bb : 3.688e-02; : 2 : m_wbb : 3.307e-02; : 3 : m_wwbb : 2.885e-02; : 4 : m_jjj : -1.155e-03; : 5 : m_jj : -1.436e-03; : 6 : m_lv : -5.963e-03; : 7 : m_jlv : -9.884e-03; : -------------------------------------; Fisher : Ranking result (top variable is best ranked); : ---------------------------------; : Rank : Variable : Discr. power; : ---------------------------------; : 1 : m_bb : 1.279e-02; : 2 : m_wwbb : 9.131e-03; : 3 : m_wbb : 2.668e-03; : 4 : m_jlv : 9.145e-04; : 5 : m_jjj : 1.769e-04; : 6 : m_lv : 6.617e-05; : 7 : m_jj : 6.707e-06; : ---------------------------------; BDT : Ranking result (top variable is best ranked); : ----------------------------------------; : Rank : Variable : Variable Importance; : ----------------------------------------; : 1 : m_bb : 2.089e-01; : 2 : m_wwbb : 1.673e-01; : 3 : m_wbb : 1.568e-01; : 4 : m_jlv : 1.560e-01; : 5 : m_jjj : 1.421e-01; : 6 : m_jj : 1.052e-01; : 7 : m_lv : 6.369e-02; : ----------------------------------------; : No variable ranking supplied by classifier: DNN_CPU; : No variable ranking supplied by classifier: PyKeras; TH1.Print Name = TrainingHistory_DNN_CPU_trainingError, Entries= 0, Total sum= 15.0519; TH1.Print Name = TrainingHistory_DNN_CPU_valError, Entries= 0, Total sum= 15.7615; TH1.Print Name = TrainingHistory_PyKeras_'accuracy', Entries= 0, Total sum= 13.4202; TH1.Print N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:47805,power,power,47805,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['power'],['power']
Energy Efficiency,"from the variable name, binning name and the bin number. If no binning name; # is specified the default binning is mapped; ; x.setBins(10, ""coarse""); xBins = ROOT.RooBinningCategory(""xBins"", ""coarse bins in x"", x, ""coarse""); ; # Use binning function for tabulation and plotting; # -----------------------------------------------------------------------------------------------; ; # Print table of xBins state multiplicity. Note that xBins does not need to be an observable in data; # it can be a function of observables in data as well; xbtable = data.table(xBins); xbtable.Print(""v""); ; # Add values of xBins function to dataset so that it can be used as; # observable; xb = data.addColumn(xBins); ; # Define range ""alt"" as including bins 1,3,5,7,9; xb.setRange(""alt"", ""x_coarse_bin1,x_coarse_bin3,x_coarse_bin5,x_coarse_bin7,x_coarse_bin9""); ; # Construct subset of data matching range ""alt"" but only for the first; # 5000 events and plot it on the frame; dataSel = data.reduce(CutRange=""alt"", EventRange=(0, 5000)); dataSel.plotOn(xframe, MarkerColor=""g"", LineColor=""g""); ; c = ROOT.TCanvas(""rf405_realtocatfuncs"", ""rf405_realtocatfuncs"", 600, 600); xframe.SetMinimum(0.01); ROOT.gPad.SetLeftMargin(0.15); xframe.GetYaxis().SetTitleOffset(1.4); xframe.Draw(); ; c.SaveAs(""rf405_realtocatfuncs.png""); [#1] INFO:Plotting -- RooTreeData::plotOn: plotting 2748 events out of 10000 total events; ; Table xBins : aData; +---------------+------+; | x_coarse_bin0 | 105 |; | x_coarse_bin1 | 329 |; | x_coarse_bin2 | 499 |; | x_coarse_bin3 | 739 |; | x_coarse_bin4 | 934 |; | x_coarse_bin5 | 1218 |; | x_coarse_bin6 | 1450 |; | x_coarse_bin7 | 1675 |; | x_coarse_bin8 | 1767 |; | x_coarse_bin9 | 1284 |; +---------------+------+; ; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 2627 will supersede previous event count of 10000 for normalization of PDF projections; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf405_realtocatfuncs.py",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf405__realtocatfuncs_8py.html:3357,reduce,reduce,3357,doc/master/rf405__realtocatfuncs_8py.html,https://root.cern,https://root.cern/doc/master/rf405__realtocatfuncs_8py.html,1,['reduce'],['reduce']
Energy Efficiency,"fs to this class)ROOT::Math::IMultiGradFunction, ROOT::Fit::Fitter::BaseGradFunc, ROOT::Math::IParametricGradFunctionMultiDim::BaseGradFunc, ROOT::Math::GradFunctor::Impl. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionMultiDim&operator=(const ROOT::Math::IGradientFunctionMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionMultiDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id: IFunction.h 24482 2008-06-23 15:33:08Z moneta $ » Last generated: 2010-09-23 19:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IGradientFunctionMultiDim.html:2248,efficient,efficient,2248,root/html528/ROOT__Math__IGradientFunctionMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IGradientFunctionMultiDim.html,2,['efficient'],['efficient']
Energy Efficiency,"fs to this class)ROOT::Math::IMultiGradFunction, ROOT::Fit::Fitter::BaseGradFunc, ROOT::Math::IParametricGradFunctionMultiDim::BaseGradFunc, ROOT::Math::GradFunctor::Impl. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionMultiDim&operator=(const ROOT::Math::IGradientFunctionMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionMultiDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id: IFunction.h 24482 2008-06-23 15:33:08Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IGradientFunctionMultiDim.html:2250,efficient,efficient,2250,root/html532/ROOT__Math__IGradientFunctionMultiDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IGradientFunctionMultiDim.html,4,['efficient'],['efficient']
Energy Efficiency,"fs to this class)ROOT::Math::IParametricGradFunctionMultiDim::BaseGradFunc, ROOT::Fit::Fitter::BaseGradFunc, ROOT::Math::IMultiGradFunction, ROOT::Math::GradFunctor::Impl. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionMultiDim&operator=(const ROOT::Math::IGradientFunctionMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionMultiDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id: IFunction.h 24482 2008-06-23 15:33:08Z moneta $ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IGradientFunctionMultiDim.html:2248,efficient,efficient,2248,root/html526/ROOT__Math__IGradientFunctionMultiDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IGradientFunctionMultiDim.html,2,['efficient'],['efficient']
Energy Efficiency,"fs to this class)ROOT::Math::IParametricGradFunctionMultiDim::BaseGradFunc, ROOT::Fit::Fitter::BaseGradFunc, ROOT::Math::IMultiGradFunction, ROOT::Math::GradFunctor::Impl. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionMultiDim&operator=(const ROOT::Math::IGradientFunctionMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionMultiDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id: IFunction.h 24482 2008-06-23 15:33:08Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__IGradientFunctionMultiDim.html:2250,efficient,efficient,2250,root/html530/ROOT__Math__IGradientFunctionMultiDim.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__IGradientFunctionMultiDim.html,2,['efficient'],['efficient']
Energy Efficiency,"fset=%3d, len=%d, method=%ld%s"",; 4754 j,element->GetName(),fCompFull[j]->fType,fCompFull[j]->fOffset,fCompFull[j]->fLength,fCompFull[j]->fMethod,; 4755 sequenceType.Data());; 4756 ++j;; 4757 done = j >= fNfulldata || ( (i+1 < fNdata) && fCompOpt[i+1]->fElem == fCompFull[j+1]->fElem );; 4758 } while (!done);; 4759 ; 4760 }; 4761 }; 4762 }; 4763}; 4764 ; 4765////////////////////////////////////////////////////////////////////////////////; 4766/// An emulated object is created at address obj, if obj is null we; 4767/// allocate memory for the object.; 4768 ; 4769void* TStreamerInfo::New(void *obj); 4770{; 4771 //???FIX ME: What about varying length array elements?; 4772 ; 4773 char* p = (char*) obj;; 4774 ; 4775 TIter next(fElements);; 4776 ; 4777 if (!p) {; 4778 // Allocate and initialize the memory block.; 4779 p = new char[fSize];; 4780 memset(p, 0, fSize);; 4781 }; 4782 ; 4783 next.Reset();; 4784 TStreamerElement* element = (TStreamerElement*) next();; 4785 ; 4786 for (; element; element = (TStreamerElement*) next()) {; 4787 ; 4788 // Skip elements which have not been allocated memory.; 4789 if (element->GetOffset() == kMissing) {; 4790 continue;; 4791 }; 4792 ; 4793 // Skip elements for which we do not have any class; 4794 // information. FIXME: Document how this could happen.; 4795 TClass* cle = element->GetClassPointer();; 4796 if (!cle) {; 4797 continue;; 4798 }; 4799 ; 4800 char* eaddr = p + element->GetOffset();; 4801 Int_t etype = element->GetType();; 4802 ; 4803 //cle->GetStreamerInfo(); //necessary in case ""->"" is not specified; 4804 ; 4805 switch (etype) {; 4806 ; 4807 case kAnyP:; 4808 case kObjectP:; 4809 case kSTLp:; 4810 {; 4811 // Initialize array of pointers with null pointers.; 4812 char** r = (char**) eaddr;; 4813 Int_t len = element->GetArrayLength();; 4814 for (Int_t i = 0; i < len; ++i) {; 4815 r[i] = 0;; 4816 }; 4817 }; 4818 break;; 4819 ; 4820 case kObjectp:; 4821 case kAnyp:; 4822 {; 4823 // If the option ""->"" is given in the data member com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:192849,allocate,allocated,192849,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"fsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TGeoBranchArray(Int_t level); TGeoBranchArray(const TGeoBranchArray&). Data Members; public:. enum EGeoBATypes { kBASelfAlloc; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TGeoNode**fArray![fMaxLevel+1] Array of nodes; Int_tfLevelBranch depth; TGeoHMatrixfMatrixGlobal matrix (owned); Int_tfMaxLevelArray length; TGeoNode*fRealArray[1]Beginning address of the array of nodes. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoBranchArray(Int_t level); Constructor. Alocates the array with a size given by level. TGeoBranchArray * MakeInstance(size_t maxlevel); Make an instance of the class which allocates the node array. To be; released using ReleaseInstance. If addr is non-zero, the user promised that; addr contains at least that many bytes: size_t needed = SizeOf(maxlevel);. TGeoBranchArray * MakeInstanceAt(size_t maxlevel, void* addr); Make an instance of the class which allocates the node array. To be; released using ReleaseInstance. If addr is non-zero, the user promised that; addr contains at least that many bytes: size_t needed = SizeOf(maxlevel);. TGeoBranchArray * MakeCopy(const TGeoBranchArray& other); Make a copy of a branch array at the location (if indicated). TGeoBranchArray * MakeCopyAt(const TGeoBranchArray& other, void* addr); Make a copy of a branch array at the location (if indicated). void CopyTo(TGeoBranchArray* dest); Raw memcpy of the branch array content to an existing destination. void ReleaseInstance(TGeoBranchArray* obj); Releases the space allocated for the object. void UpdateArray(size_t nobj); Updates the internal add",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoBranchArray.html:7518,allocate,allocates,7518,root/html534/TGeoBranchArray.html,https://root.cern,https://root.cern/root/html534/TGeoBranchArray.html,2,['allocate'],['allocates']
Energy Efficiency,"functions given a list of input parameter names ;  CClassFacIFace;  CRooCmdArgRooCmdArg is a named container for two doubles, two integers two object points and three string pointers that can be passed as generic named arguments to a variety of RooFit end user methods ;  CRooCmdConfigClass RooCmdConfig is a configurable parser for RooCmdArg named arguments ;  CRooComplexClass RooComplex is a simple container class for complex values ;  CRooCompositeDataStoreRooCompositeDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CRooConstraintSumRooConstraintSum calculates the sum of the -(log) likelihoods of a set of RooAbsPfs that represent constraint functions ;  CRooConstVarRooConstVar represent a constant real-valued object ;  CRooConvCoefVarRooConvCoefVar is an auxilary class that represents the coefficient of a RooAbsAnaConvPdf implementation as a separate RooAbsReal object to be able to interface these coefficient terms with the generic RooRealIntegral integration mechanism ;  CRooConvGenContextRooConvGenContext is an efficient implementation of the generator context specific for RooAbsAnaConvPdf objects ;  CRooConvIntegrandBindingImplementation of RooAbsFunc that represent the the integrand of a generic (numeric) convolution A (x) B so that it can be passed to a numeric integrator ;  CRooCurveA RooCurve is a one-dimensional graphical representation of a real-valued function ;  ►CRooCustomizer;  CCustIFace;  CRooDataHistRooDataSet is a container class to hold N-dimensional binned data ;  CRooDataHistSliceIterRooDataHistSliceIter iterates over all bins in a RooDataHist that occur in a slice defined by the bin coordinates of the input sliceSet ;  CRooDataProjBindingAdaptor that projects a real function via summation of states provided in a dataset ;  CRooDataSetRooDataSet is a container class to hold unbinned data ;  CRooDataWeightedAverageClass RooDataWeightedAverage calculate a weighted average of a function or p.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:86764,efficient,efficient,86764,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['efficient'],['efficient']
Energy Efficiency,"g * TMVA::MethodPDERS::CreateRanking ; (; ). inlineprotectedvirtual . Implements TMVA::MethodBase.; Definition at line 130 of file MethodPDERS.h. ◆ CRScalc(). Double_t TMVA::MethodPDERS::CRScalc ; (; const Event & ; e). private . Definition at line 778 of file MethodPDERS.cxx. ◆ DeclareOptions(). void TMVA::MethodPDERS::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string. ; know options:; VolumeRangeMode <string> Method to determine volume range available values are:; MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function available values are:; Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator . Implements TMVA::MethodBase.; Definition at line 252 of file MethodPDERS.cxx. ◆ DeclFileName(). static const char * TMVA::MethodPDERS::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 221 of file MethodPDERS.h. ◆ GetBinaryTree(). BinarySearchTree * TMVA::MethodPDERS::GetBinaryTree ; (; void ; ); const. inlineprotected . Definition at line 116 of file MethodPDERS.h. ◆ GetError(). Float_t TMVA::MethodPDERS::GetError ; (; Float_t ; countS, . Float_t ; countB, . Float_t ; sumW2S, . Float_t ; sumW2B . ); const. private . statistical error estimate for RS estimator ; Definition at line 1080 of file MethodPDERS.cxx. ◆ GetHelpMessage(). void TMVA::MethodPDERS::GetHelpMessage ; (; ); const. protectedvirtual . g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:37128,adapt,adaptive,37128,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,4,['adapt'],['adaptive']
Energy Efficiency,"g ;  ; TMatrixD readMatrixFromFile (const char *fname);  read a matrix from a text file ;  ; TMatrixD readMatrixFromStream (std::istream &stream);  read a matrix from a stream ;  ; void readParameters (TDirectory *f);  read the parameters from the input file ;  ; bool selfNormalized () const;  ; void setCacheAndTrackHints (RooArgSet &) override;  Retrieve the matrix of coefficients. ;  ; void setFlag (const char *name, double value);  set one flag to a specific value ;  ; void setParameter (const char *name, double value);  set one parameter to a specific value ;  ; void setParameter (const char *name, double value, double min, double max);  set one parameter to a specific value and range ;  ; void setParameter (const char *name, double value, double min, double max, double error);  set one parameter to a specific value and range ;  ; void setParameterConstant (const char *paramname, bool constant) const;  call setConstant with the boolean argument provided on the parameter with the given name ;  ; void setParameters (const char *foldername);  set the morphing parameters to those supplied in the sample with the given name ;  ; void setParameters (const ParamSet &params);  retrieve a set of couplings (-?-) ;  ; void setParameters (const RooArgList *list);  set the morphing parameters to those supplied in the list with the given name ;  ; void setParameters (TH1 *paramhist);  set the morphing parameters to those supplied in the given param hist ;  ; void setScale (double val);  set energy scale of the EFT expansion ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool updateCoefficients ();  Retrieve the new physics objects and update the weights in the morphing function. ;  ; bool useCoefficients (const char *filename);  ; bool useCoefficients (const TMatrixD &inverse);  setup the morphing function with a predefined inverse matrix call this function before any other afte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:12568,energy,energy,12568,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['energy'],['energy']
Energy Efficiency,"g ;  ; std::vector< Double_t > fHighBkgCut;  ; std::vector< Double_t > fHighSigCut;  ; Bool_t fHistoricBool;  ; Double_t fHuberQuantile;  the option string determining the quantile for the Huber Loss Function in BDT regression. ;  ; Bool_t fInverseBoostNegWeights;  boost ev. with neg. weights with 1/boostweight rather than boostweight ;  ; std::vector< Bool_t > fIsHighBkgCut;  ; std::vector< Bool_t > fIsHighSigCut;  ; std::vector< Bool_t > fIsLowBkgCut;  ; std::vector< Bool_t > fIsLowSigCut;  ; Int_t fITree;  ntuple var: ith tree ;  ; std::map< const TMVA::Event *, LossFunctionEventInfo > fLossFunctionEventInfo;  map event to true value, predicted value, and weight used by different loss functions for BDT regression ;  ; std::vector< Double_t > fLowBkgCut;  ; std::vector< Double_t > fLowSigCut;  ; UInt_t fMaxDepth;  max depth ;  ; Double_t fMinLinCorrForFisher;  the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ;  ; Int_t fMinNodeEvents;  min number of events in node ;  ; Float_t fMinNodeSize;  min percentage of training events in node ;  ; TString fMinNodeSizeS;  string containing min percentage of training events in node ;  ; TTree * fMonitorNtuple;  monitoring ntuple ;  ; Int_t fNCuts;  grid used in cut applied in node splitting ;  ; TString fNegWeightTreatment;  variable that holds the option of how to treat negative event weights in training ;  ; UInt_t fNNodesMax;  max # of nodes ;  ; Double_t fNodePurityLimit;  purity limit for sig/bkg nodes ;  ; Bool_t fNoNegWeightsInTraining;  ignore negative event weights in the training ;  ; Int_t fNTrees;  number of decision trees requested ;  ; Bool_t fPairNegWeightsGlobal;  pair ev. with neg. and pos. weights in training sample and ""annihilate"" them ;  ; DecisionTree::EPruneMethod fPruneMethod;  method used for pruning ;  ; TString fPruneMethodS;  prune method option String ;  ; Double_t fPruneStrength;  a parameter to set the ""amount"" of pruning..needs to be ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:36493,monitor,monitoring,36493,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['monitor'],['monitoring']
Energy Efficiency,"g of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.E-9, double relTol = 1E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::VirtualIntegratorMultiDim&ROOT::Math::VirtualIntegratorMultiDim::operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned int n); voidSetMinPts(unsigned int n); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidSetRelTolerance(double relTol); voidSetSize(unsigned int size); virtual intStatus() const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html:3081,Adapt,AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim,3081,root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['Adapt'],['AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim']
Energy Efficiency,"g the bias by integrating the pdf in each bin. So if; // you know your per-bin bias variations are small or performance is an; // issue, this approach can be sufficient.; enableBinIntegrator(powerlaw, x.numBins());; std::unique_ptr<RooFitResult> fit4{powerlaw.fitTo(*powerlawData, Save(), PrintLevel(-1), SumW2Error(false))};; fit4->Print();; disableBinIntegrator(powerlaw);; ; // To get rid of the binning effects in the general case, one can use the; // IntegrateBins() command argument. Now, the pdf is not evaluated at the; // bin centers, but numerically integrated over each bin and divided by the; // bin width. The parameter for IntegrateBins() is the required precision; // for the numeric integrals. This is computationally expensive, but the; // bias is now not a problem anymore.; std::unique_ptr<RooFitResult> fit5{; powerlaw.fitTo(*powerlawData, IntegrateBins(1e-3), Save(), PrintLevel(-1), SumW2Error(false))};; fit5->Print();; ; // Improving numerical stability; // -----------------------------; ; // There is one more problem with binned fits that is related to the binning; // effects because often, a binned fit is affected by both problems.; //; // The issue is numerical stability for fits with a greatly different number; // of events in each bin. For each bin, you have a term \f[n\log(p)\f] in; // the NLL, where \f[n\f] is the number of observations in the bin, and; // \f[p\f] the predicted probability to have an event in that bin. The; // difference in the logarithms for each bin is small, but the difference in; // \f[n\f] can be orders of magnitudes! Therefore, when summing these terms,; // lots of numerical precision is lost for the bins with less events.; ; // We can study this with the example of an exponential plus a Gaussian. The; // Gaussian is only a faint signal in the tail of the exponential where; // there are not so many events. And we can't afford any precision loss for; // these bins, otherwise we can't fit the Gaussian.; ; x.setBins(100); // It's",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html:5742,power,powerlawData,5742,doc/master/rf614__binned__fit__problems_8C.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html,1,['power'],['powerlawData']
Energy Efficiency,"g the training. Training of a decision tree is the; process to define the ""cut criteria"" for each node. The training; starts with the root node. Here one takes the full training event; sample and selects the variable and corresponding cut value that gives; the best separation between signal and background at this stage. Using; this cut criterion, the sample is then divided into two subsamples, a; signal-like (right) and a background-like (left) sample. Two new nodes; are then created for each of the two sub-samples and they are; constructed using the same mechanism as described for the root; node. The devision is stopped once a certain node has reached either a; minimum number of events, or a minimum or maximum signal purity. These; leave nodes are then called ""signal"" or ""background"" if they contain; more signal respective background events from the training sample. Boosting:. The idea behind adaptive boosting (AdaBoost) is, that signal events; from the training sample, that end up in a background node; (and vice versa) are given a larger weight than events that are in; the correct leave node. This results in a re-weighed training event; sample, with which then a new decision tree can be developed.; The boosting can be applied several times (typically 100-500 times); and one ends up with a set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBDT.html:2131,adapt,adaptive,2131,root/html528/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBDT.html,10,['adapt'],['adaptive']
Energy Efficiency,"g to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-experiments nEXPT is by default 1000, and it can be changed by specifying the option as ""X=number"", for example ""X=10000"" for 10000 toys. The function returns the probability. (thanks to Ben Kilminster to submit this procedure). Note that this option ""X"" is much slower. The returned function value is the probability of test (much less than one means NOT compatible); Code adapted by Rene Brun from original HBOOK routine HDIFF; NOTE1 A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; NOTE2 see also alternative function TH1::Chi2Test The Kolmogorov test is assumed to give better results than Chi2Test in case of histograms with low statistics.; NOTE3 (Jan Conrad, Fred James) ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; dependi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:184532,adapt,adapted,184532,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['adapt'],['adapted']
Energy Efficiency,"g"", ""signal fraction"", 0.1, 0.0, 1.0); model = ROOT.RooAddPdf(""model"", ""model"", [sig, bkg], [fsig]); ; # Generate large dataset; data = model.generate({x, y, z}, 200000); ; # Parallel fitting; # -------------------------------; ; # In parallel mode the likelihood calculation is split in N pieces,; # that are calculated in parallel and added a posteriori before passing; # it back to MINUIT.; ; # Use four processes and time results both in wall time and CPU time; model.fitTo(data, NumCPU=4, Timer=True, PrintLevel=-1); ; # Parallel MC projections; # ----------------------------------------------; ; # Construct signal, likelihood projection on (y,z) observables and; # likelihood ratio; sigyz = sig.createProjection({x}); totyz = model.createProjection({x}); llratio_func = ROOT.RooFormulaVar(""llratio"", ""log10(@0)-log10(@1)"", [sigyz, totyz]); ; # Calculate likelihood ratio for each event, subset of events with high; # signal likelihood; data.addColumn(llratio_func); dataSel = data.reduce(Cut=""llratio>0.7""); ; # Make plot frame and plot data; frame = x.frame(Title=""Projection on X with LLratio(y,z)>0.7"", Bins=40); dataSel.plotOn(frame); ; # Perform parallel projection using MC integration of pdf using given input dataSet.; # In self mode the data-weighted average of the pdf is calculated by splitting the; # input dataset in N equal pieces and calculating in parallel the weighted average; # one each subset. The N results of those calculations are then weighted into the; # final result; ; # Use four processes; model.plotOn(frame, ProjWData=dataSel, NumCPU=4); ; c = ROOT.TCanvas(""rf603_multicpu"", ""rf603_multicpu"", 600, 600); ROOT.gPad.SetLeftMargin(0.15); frame.GetYaxis().SetTitleOffset(1.6); frame.Draw(); ; c.SaveAs(""rf603_multicpu.png""); [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf603__multicpu_8py.html:2114,reduce,reduce,2114,doc/master/rf603__multicpu_8py.html,https://root.cern,https://root.cern/doc/master/rf603__multicpu_8py.html,1,['reduce'],['reduce']
Energy Efficiency,"g& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summation rule which has the useful property of not evaluating the; integrand at either of its endpoints but requires more function; evaluations than the trapezoidal rule. This rule can be used with; a suitable change of variables to estimate improper integrals. Double_t addTrapezoids(Int_t n); Calculate the n-th stage of refinement of the extended trapezoidal; summation rule. This is the most efficient rule for a well behaved; integrand that can be evaluated over its entire range, including the; endpoints. void extrapolate(Int_t n); Extrapolate result to final value. RooIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Mon Dec 7 13:48:03 2009 » Last generated: 2009-12-07 13:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegrator1D.html:10396,efficient,efficient,10396,root/html526/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html526/RooIntegrator1D.html,1,['efficient'],['efficient']
Energy Efficiency,"g& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summation rule which has the useful property of not evaluating the; integrand at either of its endpoints but requires more function; evaluations than the trapezoidal rule. This rule can be used with; a suitable change of variables to estimate improper integrals. Double_t addTrapezoids(Int_t n); Calculate the n-th stage of refinement of the extended trapezoidal; summation rule. This is the most efficient rule for a well behaved; integrand that can be evaluated over its entire range, including the; endpoints. void extrapolate(Int_t n); Extrapolate result to final value. RooIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Mon Jul 4 15:23:08 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooIntegrator1D.html:10504,efficient,efficient,10504,root/html530/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooIntegrator1D.html,1,['efficient'],['efficient']
Energy Efficiency,"g& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summation rule which has the useful property of not evaluating the; integrand at either of its endpoints but requires more function; evaluations than the trapezoidal rule. This rule can be used with; a suitable change of variables to estimate improper integrals. Double_t addTrapezoids(Int_t n); Calculate the n-th stage of refinement of the extended trapezoidal; summation rule. This is the most efficient rule for a well behaved; integrand that can be evaluated over its entire range, including the; endpoints. void extrapolate(Int_t n); Extrapolate result to final value. RooIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Sat Oct 9 06:58:30 2010 » Last generated: 2010-10-09 06:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegrator1D.html:10412,efficient,efficient,10412,root/html528/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html528/RooIntegrator1D.html,1,['efficient'],['efficient']
Energy Efficiency,"g& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summation rule which has the useful property of not evaluating the; integrand at either of its endpoints but requires more function; evaluations than the trapezoidal rule. This rule can be used with; a suitable change of variables to estimate improper integrals. Double_t addTrapezoids(Int_t n); Calculate the n-th stage of refinement of the extended trapezoidal; summation rule. This is the most efficient rule for a well behaved; integrand that can be evaluated over its entire range, including the; endpoints. void extrapolate(Int_t n); Extrapolate result to final value. RooIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Thu Nov 3 20:08:26 2011 » Last generated: 2011-11-03 20:08; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooIntegrator1D.html:10504,efficient,efficient,10504,root/html532/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html532/RooIntegrator1D.html,2,['efficient'],['efficient']
Energy Efficiency,"g& config) const; Clone integrator with new function binding and configuration. Needed by RooNumIntFactory. Bool_t initialize(); Initialize the integrator. ~RooIntegrator1D(); Destructor. Bool_t setLimits(Double_t* xmin, Double_t* xmax); Change our integration limits. Return kTRUE if the new limits are; ok, or otherwise kFALSE. Always returns kFALSE and does nothing; if this object was constructed to always use our integrand's limits. Bool_t checkLimits() const; Check that our integration range is finite and otherwise return kFALSE.; Update the limits from the integrand if requested. Double_t integral(const Double_t* yvec = 0); Calculate numeric integral at given set of function binding parameters. Double_t addMidpoints(Int_t n); Calculate the n-th stage of refinement of the Second Euler-Maclaurin; summation rule which has the useful property of not evaluating the; integrand at either of its endpoints but requires more function; evaluations than the trapezoidal rule. This rule can be used with; a suitable change of variables to estimate improper integrals. Double_t addTrapezoids(Int_t n); Calculate the n-th stage of refinement of the extended trapezoidal; summation rule. This is the most efficient rule for a well behaved; integrand that can be evaluated over its entire range, including the; endpoints. void extrapolate(Int_t n); Extrapolate result to final value. RooIntegrator1D(). Bool_t setUseIntegrandLimits(Bool_t flag); {_useIntegrandLimits = flag ; return kTRUE ; }. Bool_t canIntegrate1D() const; { return kTRUE ; }. Bool_t canIntegrate2D() const; { return kFALSE ; }. Bool_t canIntegrateND() const; { return kFALSE ; }. Bool_t canIntegrateOpenEnded() const; { return kFALSE ; }. Double_t* xvec(Double_t& xx); { _x[0] = xx ; return _x ; }. » Last changed: Tue Jun 2 15:31:38 2015 » Last generated: 2015-06-02 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooIntegrator1D.html:11060,efficient,efficient,11060,root/html604/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html604/RooIntegrator1D.html,2,['efficient'],['efficient']
Energy Efficiency,"g(""fsig"", ""signal fraction"", 0.1, 0., 1.);; RooAddPdf model(""model"", ""model"", RooArgList(sig, bkg), fsig);; ; // Generate large dataset; std::unique_ptr<RooDataSet> data{model.generate({x, y, z}, 200000)};; ; // P a r a l l e l f i t t i n g; // -------------------------------; ; // In parallel mode the likelihood calculation is split in N pieces,; // that are calculated in parallel and added a posteriori before passing; // it back to MINUIT.; ; // Use four processes and time results both in wall time and CPU time; model.fitTo(*data, NumCPU(4), Timer(true), PrintLevel(-1));; ; // P a r a l l e l M C p r o j e c t i o n s; // ----------------------------------------------; ; // Construct signal, total likelihood projection on (y,z) observables and likelihood ratio; RooAbsPdf *sigyz = sig.createProjection(x);; RooAbsPdf *totyz = model.createProjection(x);; RooFormulaVar llratio_func(""llratio"", ""log10(@0)-log10(@1)"", RooArgList(*sigyz, *totyz));; ; // Calculate likelihood ratio for each event, define subset of events with high signal likelihood; data->addColumn(llratio_func);; std::unique_ptr<RooAbsData> dataSel{data->reduce(Cut(""llratio>0.7""))};; ; // Make plot frame and plot data; RooPlot *frame = x.frame(Title(""Projection on X with LLratio(y,z)>0.7""), Bins(40));; dataSel->plotOn(frame);; ; // Perform parallel projection using MC integration of pdf using given input dataSet.; // In this mode the data-weighted average of the pdf is calculated by splitting the; // input dataset in N equal pieces and calculating in parallel the weighted average; // one each subset. The N results of those calculations are then weighted into the; // final result; ; // Use four processes; model.plotOn(frame, ProjWData(*dataSel), NumCPU(4));; ; new TCanvas(""rf603_multicpu"", ""rf603_multicpu"", 600, 600);; gPad->SetLeftMargin(0.15);; frame->GetYaxis()->SetTitleOffset(1.6);; frame->Draw();; }; RooAddPdf.h; RooDataSet.h; RooGaussian.h; RooPlot.h; RooPolynomial.h; RooProdPdf.h; RooRealVar.h; TAxi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf603__multicpu_8C.html:2474,reduce,reduce,2474,doc/master/rf603__multicpu_8C.html,https://root.cern,https://root.cern/doc/master/rf603__multicpu_8C.html,1,['reduce'],['reduce']
Energy Efficiency,"g* CreateRanking(). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); return boosted MVA response. Double_t GetBoostROCIntegral(Bool_t , TMVA::Types::ETreeType , Bool_t CalcOverlapIntergral = kFALSE); Calculate the ROC integral of a single classifier or even the; whole boosted classifier. The tree type (training or testing; sample) is specified by 'eTT'. If tree type kTraining is set, the original training sample is; used to compute the ROC integral (original weights). - singleMethod - if kTRUE, return ROC integral of single (last; trained) classifier; if kFALSE, return ROC; integral of full classifier. - eTT - tree type (Types::kTraining / Types::kTesting). - CalcOverlapIntergral - if kTRUE, the overlap integral of the; signal/background MVA distributions; is calculated and stored in; 'fOverlap_integral'. void CalcMVAValues(); Calculate MVA values of current method fMethods.back() on; training sample. void SetBoostedMethodName(TString methodName); { fBoostedMethodName = methodName; }. Int_t GetBoostNum(); { return fBoostNum; }. TH1* GetMonitoringHist(Int_t histInd); gives the monitoring historgram from the vector according to index of the; histrogram added in the MonitorBoost function. { return (*fMonitorHist)[fDefaultHistNum+histInd]; }. void AddMonitoringHist(TH1* hist); { return fMonitorHist->push_back(hist); }. Types::EBoostStage GetBoostStage(); { return fBoostStage; }. void ClearAll(); clean up. void PrintResults(const TString& , vector<Double_t>& , const Double_t ) const; print fit results. MethodBoost* SetStage(TMVA::Types::EBoostStage stage); { fBoostStage = stage; return this; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Or Cohen » Copyright (c) 2005: *; » Last changed: root/tmva $Id: MethodBoost.h 36966 2010-11-26 09:50:13Z evt $ » Last generated: 2010-12-10 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBoost.html:20317,monitor,monitoring,20317,root/html528/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBoost.html,1,['monitor'],['monitoring']
Energy Efficiency,"g, Double_t tol, Double_t& d1, Double_t& d2); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual const TMatrixDBase&GetDecompMatrix() const; Int_tTDecompBase::Hager(Double_t& est, Int_t iter = 5); voidTObject::MakeZombie(); voidTDecompBase::ResetStatus(). Data Members; public:. enum TDecompBase::EMatrixDecompStat { kInit; kPatternSet; kValuesSet; kMatrixSet; kDecomposed; kDetermined; kCondition; kSingular; };; enum TDecompBase::[unnamed] { kWorkMax; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTDecompBase::fColLwbColumn lower bound of decomposed matrix; Double_tTDecompBase::fConditionmatrix condition number; Double_tTDecompBase::fDet1determinant mantissa; Double_tTDecompBase::fDet2determinant exponent for powers of 2; Int_tTDecompBase::fRowLwbRow lower bound of decomposed matrix; Double_tTDecompBase::fTolsqrt(epsilon); epsilon is smallest number number so that 1+epsilon > 1; TMatrixDfUdecomposed matrix fU so that a = fU^T fU. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDecompChol(Int_t nrows); Constructor for (nrows x nrows) matrix. TDecompChol(Int_t row_lwb, Int_t row_upb); Constructor for ([row_lwb..row_upb] x [row_lwb..row_upb]) matrix. TDecompChol(const TMatrixDSym& a, Double_t tol = 0.0); Constructor for symmetric matrix A . Matrix should be positive definite. TDecompChol(const TMatrixD& a, Double_t tol = 0.0); Constructor for general matrix A . Matrix should be symmetric positive definite. TDecompChol(const TDecompChol& another); Copy constructor. Bool_t Decompose(); Matrix A is decomposed in component U so that A = U^T * U; If the decomposition succeeds, bit kDecomposed is set , otherwise kSingular. const TMatrixDSym GetMatrix(); Rec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDecompChol.html:7184,power,powers,7184,root/html534/TDecompChol.html,https://root.cern,https://root.cern/root/html534/TDecompChol.html,2,['power'],['powers']
Energy Efficiency,"g, Double_t tol, Double_t& d1, Double_t& d2); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual const TMatrixDBase&GetDecompMatrix() const; Int_tTDecompBase::Hager(Double_t& est, Int_t iter = 5); voidTObject::MakeZombie(); voidTDecompBase::ResetStatus(). Data Members; public:. enum TDecompBase::EMatrixDecompStat { kInit; kPatternSet; kValuesSet; kMatrixSet; kDecomposed; kDetermined; kCondition; kSingular; };; enum TDecompBase::[unnamed] { kWorkMax; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTDecompBase::fColLwbColumn lower bound of decomposed matrix; Double_tTDecompBase::fConditionmatrix condition number; Double_tTDecompBase::fDet1determinant mantissa; Double_tTDecompBase::fDet2determinant exponent for powers of 2; Int_tTDecompBase::fRowLwbRow lower bound of decomposed matrix; Double_tTDecompBase::fTolsqrt(epsilon); epsilon is smallest number number so that 1+epsilon > 1; TMatrixDfUdecomposed matrix fU so that a = fU^T fU. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDecompChol(Int_t nrows); Constructor for (nrows x nrows) matrix. TDecompChol(Int_t row_lwb, Int_t row_upb); Constructor for ([row_lwb..row_upb] x [row_lwb..row_upb]) matrix. TDecompChol(const TMatrixDSym& a, Double_t tol = 0.0); Constructor for symmetric matrix A . Matrix should be positive definite. TDecompChol(const TMatrixD& a, Double_t tol = 0.0); Constructor for general matrix A . Matrix should be symmetric positive definite. TDecompChol(const TDecompChol& another); Copy constructor. Bool_t Decompose(); Matrix A is decomposed in component U so that A = U^T*U^T; If the decomposition succeeds, bit kDecomposed is set , otherwise kSingular. const TMatrixDSym GetMatrix(); Rec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompChol.html:7096,power,powers,7096,root/html528/TDecompChol.html,https://root.cern,https://root.cern/root/html528/TDecompChol.html,4,['power'],['powers']
Energy Efficiency,"g...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TImagePalette Class ReferenceGraphics » 2D Graphics » Basic graphics. ; A class to define a conversion from pixel values to pixel color. ; A Palette is defined by some anchor points. Each anchor point has a value between 0 and 1 and a color. An image has to be normalized and the values between the anchor points are interpolated. All member variables are public and can be directly manipulated. In most cases the default operator will be used to create a TImagePalette. In this case the member arrays have to be allocated by an application and will be deleted in the destructor of this class.; We provide few predefined palettes:. gHistImagePalette - palette used in TH2::Draw(""col""); gWebImagePalette The web palette is a set of 216 colors that will not dither or shift on PCs or Macs. Browsers use this built-in palette when they need to render colors on monitors with only 256 colors (also called 8-bit color monitors). The 6x6x6 web palette provides very quick color index lookup and can be used for good quality conversion of images into 2-D histograms.; TImagePalette(Int_t ncolors, Int_t *colors) if ncolors <= 0 a default palette (see below) of 50 colors is defined. if ncolors == 1 && colors == 0, then a Rainbow Palette is created.; if ncolors > 50 and colors=0, the DeepSea palette is used. (see TStyle::CreateGradientColorTable for more details); if ncolors > 0 and colors = 0, the default palette is used with a maximum of ncolors.; The default palette defines:; index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors . Definition at line 33 of file TAttImage.h. Public Member Functions;  TImagePalette ();  Default constructor, sets all pointers to 0. ;  ;  TImagePalette (const TImagePalette &palette);  Copy constructor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImagePalette.html:1105,monitor,monitors,1105,doc/master/classTImagePalette.html,https://root.cern,https://root.cern/doc/master/classTImagePalette.html,2,['monitor'],['monitors']
Energy Efficiency,"g.add(projDataVars) ;; 2323 ; 2324 const RooAbsReal *posProj = funcPos->createPlotProjection(depPos, &projectedVars, posProjCompList, o.projectionRangeName) ;; 2325 const RooAbsReal *negProj = funcNeg->createPlotProjection(depNeg, &projectedVars, negProjCompList, o.projectionRangeName) ;; 2326 if (!posProj || !negProj) {; 2327 coutE(Plotting) << ""RooAbsReal::plotAsymOn("" << GetName() << "") Unable to create projections, abort"" << std::endl ;; 2328 return frame ;; 2329 }; 2330 ; 2331 // Create a RooFormulaVar representing the asymmetry; 2332 TString asymName(GetName()) ;; 2333 asymName.Append(""_Asym["") ;; 2334 asymName.Append(asymCat.GetName()) ;; 2335 asymName.Append(""]"") ;; 2336 TString asymTitle(asymCat.GetName()) ;; 2337 asymTitle.Append("" Asymmetry of "") ;; 2338 asymTitle.Append(GetTitle()) ;; 2339 RooFormulaVar funcAsym{asymName,asymTitle,""(@0-@1)/(@0+@1)"",RooArgSet(*posProj,*negProj)};; 2340 ; 2341 if (o.projData) {; 2342 ; 2343 // If data set contains more rows than needed, make reduced copy first; 2344 RooAbsData* projDataSel = const_cast<RooAbsData*>(o.projData);; 2345 std::unique_ptr<RooAbsData> projDataSelOwned;; 2346 if (projDataNeededVars && projDataNeededVars->size() < o.projData->get()->size()) {; 2347 ; 2348 // Determine if there are any slice variables in the projection set; 2349 RooArgSet sliceDataSet;; 2350 sliceSet.selectCommon(*o.projData->get(), sliceDataSet);; 2351 TString cutString ;; 2352 if (!sliceDataSet.empty()) {; 2353 bool first(true) ;; 2354 for(RooAbsArg * sliceVar : sliceDataSet) {; 2355 if (!first) {; 2356 cutString.Append(""&&"") ;; 2357 } else {; 2358 first=false ;; 2359 }; 2360 ; 2361 RooAbsRealLValue* real ;; 2362 RooAbsCategoryLValue* cat ;; 2363 if ((real = dynamic_cast<RooAbsRealLValue*>(sliceVar))) {; 2364 cutString.Append(Form(""%s==%f"",real->GetName(),real->getVal())) ;; 2365 } else if ((cat = dynamic_cast<RooAbsCategoryLValue*>(sliceVar))) {; 2366 cutString.Append(Form(""%s==%d"",cat->GetName(),cat->getCurrentIndex())) ;; 2367 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:102908,reduce,reduced,102908,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['reduce'],['reduced']
Energy Efficiency,"g3 = RooCmdArg(), RooCmdArg arg4 = RooCmdArg(), RooCmdArg arg5 = RooCmdArg(), RooCmdArg arg6 = RooCmdArg(), RooCmdArg arg7 = RooCmdArg(), RooCmdArg arg8 = RooCmdArg()); Create a reduced copy of this dataset. The caller takes ownership of the returned dataset. The following optional named arguments are accepted. SelectVars(const RooArgSet& vars) -- Only retain the listed observables in the output dataset; Cut(const char* expression) -- Only retain event surviving the given cut expression; Cut(const RooFormulaVar& expr) -- Only retain event surviving the given cut formula; CutRange(const char* name) -- Only retain events inside range with given name. Multiple CutRange; arguments may be given to select multiple ranges; EventRange(int lo, int hi) -- Only retain events with given sequential event numbers; Name(const char* name) -- Give specified name to output dataset; Title(const char* name) -- Give specified title to output dataset. RooAbsData* reduce(const char* cut); Create a subset of the data set by applying the given cut on the data points.; The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points.; The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. RooAbsData* reduce(const RooArgSet& varSubset, const char* cut); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooArgSet& varSubset, const RooFormulaVar& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsData.html:15677,reduce,reduce,15677,root/html526/RooAbsData.html,https://root.cern,https://root.cern/root/html526/RooAbsData.html,1,['reduce'],['reduce']
Energy Efficiency,"g64(Int_t npar); Return field value as unsigned 64-bit integer. Double_t GetDouble(Int_t npar); Return field value as double. const char * GetString(Int_t npar); Return field value as string. Bool_t GetBinary(Int_t npar, void*& mem, Long_t& size); Return field value as binary array. Bool_t GetDate(Int_t npar, Int_t& year, Int_t& month, Int_t& day); Return field value as date. Bool_t GetTime(Int_t npar, Int_t& hour, Int_t& min, Int_t& sec); Return field value as time. Bool_t GetDatime(Int_t npar, Int_t& year, Int_t& month, Int_t& day, Int_t& hour, Int_t& min, Int_t& sec); Return field value as date & time. Bool_t GetTimestamp(Int_t npar, Int_t& year, Int_t& month, Int_t& day, Int_t& hour, Int_t& min, Int_t& sec, Int_t& ); Return field value as time stamp. Bool_t SetSQLParamType(Int_t npar, int sqltype, bool sig, unsigned long sqlsize = 0); Set parameter type to be used as buffer.; Used in both setting data to database and retriving data from data base.; Initialize proper MYSQL_BIND structure and allocate required buffers. void * BeforeSet(const char* method, Int_t npar, Int_t sqltype, Bool_t sig = kTRUE, unsigned long size = 0); Check boundary condition before setting value of parameter.; Return address of parameter buffer. Bool_t SetNull(Int_t npar); Set NULL as parameter value.; If NULL should be set for statement parameter during first iteration,; one should call before proper Set... method to identify type of argument for; the future. For instance, if one suppose to have double as type of parameter,; code should look like:; stmt->SetDouble(2, 0.);; stmt->SetNull(2);. Bool_t SetInt(Int_t npar, Int_t value); Set parameter value as integer. Bool_t SetUInt(Int_t npar, UInt_t value); Set parameter value as unsigned integer. Bool_t SetLong(Int_t npar, Long_t value); Set parameter value as long integer. Bool_t SetLong64(Int_t npar, Long64_t value); Set parameter value as 64-bit integer. Bool_t SetULong64(Int_t npar, ULong64_t value); Set parameter value as unsigned 64-bi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMySQLStatement.html:11485,allocate,allocate,11485,root/html528/TMySQLStatement.html,https://root.cern,https://root.cern/root/html528/TMySQLStatement.html,4,['allocate'],['allocate']
Energy Efficiency,"g> . template<class ForeignVector > . DisplacementVector3D & ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::operator= ; (; const ForeignVector & ; v). inline . Assignment from a foreign 3D vector type, for example, Hep3Vector Precondition: v must implement methods x(), y() and z() ; Definition at line 155 of file DisplacementVector3D.h. ◆ operator=() [4/5]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords , class OtherTag > . DisplacementVector3D & ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::operator= ; (; const PositionVector3D< OtherCoords, OtherTag > & ; ). private . ◆ operator=() [5/5]. template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . template<class OtherCoords > . DisplacementVector3D & ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::operator= ; (; const PositionVector3D< OtherCoords, Tag > & ; rhs). inline . Assignment operator from a position vector (not necessarily efficient unless one or the other is Cartesian) ; Definition at line 143 of file DisplacementVector3D.h. ◆ operator==(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . bool ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::operator== ; (; const DisplacementVector3D< CoordSystem, Tag > & ; rhs); const. inline . Exact equality. ; Definition at line 261 of file DisplacementVector3D.h. ◆ Perp2(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::Perp2 ; (; ); const. inline . Transverse component squared (rho^2 in cylindrical coordinates. ; Definition at line 328 of file DisplacementVector3D.h. ◆ perp2(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar ROOT::Math::DisplacementVector3D< CoordSystem, Tag >::perp2 ; (; ); const. inline . Definition at line 529 of file DisplacementVector3D.h. ◆ Phi(). template<class CoordSystem , class Tag = DefaultCoordinateSystemTag> . Scalar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html:24256,efficient,efficient,24256,doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DisplacementVector3D.html,1,['efficient'],['efficient']
Energy Efficiency,"gCws->fDrawing on the window gCws->fWindow; if the double buffer is on. void Warp(Int_t ix, Int_t iy, Window_t id = 0); Set pointer position.; ix : New X coordinate of pointer; iy : New Y coordinate of pointer; Coordinates are relative to the origin of the window id; or to the origin of the current window if id == 0. void WritePixmap(Int_t wid, UInt_t w, UInt_t h, char* pxname); Write the pixmap wid in the bitmap file pxname.; wid : Pixmap address; w,h : Width and height of the pixmap.; lenname : pixmap name length; pxname : pixmap name. void ImgPickPalette(XImage* image, Int_t& ncol, Int_t*& R, Int_t*& G, Int_t*& B); Returns in R G B the ncol colors of the palette used by the image.; The image pixels are changed to index values in these R G B arrays.; This produces a colormap with only the used colors (so even on displays; with more than 8 planes we will be able to create GIF's when the image; contains no more than 256 different colors). If it does contain more; colors we will have to use GIFquantize to reduce the number of colors.; The R G B arrays must be deleted by the caller. Int_t WriteGIF(char* name); Writes the current window into GIF file. Returns 1 in case of success,; 0 otherwise. void PutImage(Int_t offset, Int_t itran, Int_t x0, Int_t y0, Int_t nx, Int_t ny, Int_t xmin, Int_t ymin, Int_t xmax, Int_t ymax, UChar_t* image, Drawable_t id); Draw image. Pixmap_t ReadGIF(Int_t x0, Int_t y0, const char* file, Window_t id = 0); If id is NULL - loads the specified gif file at position [x0,y0] in the; current window. Otherwise creates pixmap from gif file. unsigned char * GetColorBits(Drawable_t wid, Int_t x = 0, Int_t y = 0, UInt_t w = 0, UInt_t h = 0); Returns an array of pixels created from a part of drawable (defined by x, y, w, h); in format:; b1, g1, r1, 0, b2, g2, r2, 0 ... bn, gn, rn, 0 .. Pixels are numbered from left to right and from top to bottom.; By default all pixels from the whole drawable are returned. Note that return array is 32-bit aligned. Pi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:36879,reduce,reduce,36879,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,6,['reduce'],['reduce']
Energy Efficiency,"gDefaultSmooth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveLine(Int_t n_points = 0, TEvePointSelectorConsumer::ETreeVarType_e tv_type = kTVT_XYZ); Constructor. TEveLine(const char* name, Int_t n_points = 0, TEvePointSelectorConsumer::ETreeVarType_e tv_type = kTVT_XYZ); Constructor. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Returns list-tree icon for TEveLine. void SetMarkerColor(Color_t col); Set marker color. Propagate to projected lines. void SetLineStyle(Style_t lstyle); Set line-style of the line.; The style is propagated to projecteds. void SetLineWidth(Width_t lwidth); Set line-style of the line.; The style is propagated to projecteds. void SetRnrLine(Bool_t r); Set rendering of line. Propagate to projected lines. void SetRnrPoints(Bool_t r); Set rendering of points. Propagate to projected lines. void SetSmooth(Bool_t r); Set smooth rendering. Propagate to projected lines. void ReduceSegmentLengths(Float_t max); Make sure that no segment is longer than max.; Per point references and integer ids are lost. Float_t CalculateLineLength() const; Sum-up lengths of individual segments. TEveVector GetLineStart() const; Return the first point of the line.; If there are no points (0,0,0) is returned. TEveVector GetLineEnd() const; Return the last point of the line.; If there are no points (0,0,0) is returned. void CopyVizParams(const TEveElement* el); Copy visualization parameters from element el. void WriteVizParams(ostream& out, const TString& var); Write visualization parameters. TClass* ProjectedClass(const TEveProjection* p) const; Virtual from TEveProjectable, returns TEvePointSetProjected class. Bool_t GetDefaultSmooth(); Get default value for smooth-line drawing flag.; Static function. void SetDefaultSmooth(Bool_t r); Set default value for smooth-line drawing flag (default kFALSE).; Static function. TEveLine(const TEveLine& ). TEveLine& operator=(const TEveLine& ). virtual ~TEveLine(); {}. void Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveLine.html:29169,Reduce,ReduceSegmentLengths,29169,root/html534/TEveLine.html,https://root.cern,https://root.cern/root/html534/TEveLine.html,1,['Reduce'],['ReduceSegmentLengths']
Energy Efficiency,"gDefaultSmooth. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveLine(Int_t n_points = 0, TEvePointSelectorConsumer::ETreeVarType_e tv_type = kTVT_XYZ); Constructor. TEveLine(const char* name, Int_t n_points = 0, TEvePointSelectorConsumer::ETreeVarType_e tv_type = kTVT_XYZ); Constructor. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Returns list-tree icon for TEveLine. void SetMarkerColor(Color_t col); Set marker color. Propagate to projected lines. void SetLineStyle(Style_t lstyle); Set line-style of the line.; The style is propagated to projecteds. void SetLineWidth(Width_t lwidth); Set line-style of the line.; The style is propagated to projecteds. void SetRnrLine(Bool_t r); Set rendering of line. Propagate to projected lines. void SetRnrPoints(Bool_t r); Set rendering of points. Propagate to projected lines. void SetSmooth(Bool_t r); Set smooth rendering. Propagate to projected lines. void ReduceSegmentLengths(Float_t max); Make sure that no segment is longer than max.; Per point references and integer ids are lost. TEveVector GetLineStart() const; Return the first point of the line.; If there are no points (0,0,0) is returned. TEveVector GetLineEnd() const; Return the last point of the line.; If there are no points (0,0,0) is returned. void CopyVizParams(const TEveElement* el); Copy visualization parameters from element el. void WriteVizParams(ostream& out, const TString& var); Write visualization parameters. TClass* ProjectedClass(const TEveProjection* p) const; Virtual from TEveProjectable, returns TEvePointSetProjected class. Bool_t GetDefaultSmooth(); Get default value for smooth-line drawing flag.; Static function. void SetDefaultSmooth(Bool_t r); Set default value for smooth-line drawing flag (default kFALSE).; Static function. TEveLine(const TEveLine& ). TEveLine& operator=(const TEveLine& ). virtual ~TEveLine(); {}. void SetLineColor(Color_t col); { SetMainColor(col); }. Bool_t GetRnrLine() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveLine.html:28903,Reduce,ReduceSegmentLengths,28903,root/html532/TEveLine.html,https://root.cern,https://root.cern/root/html532/TEveLine.html,1,['Reduce'],['ReduceSegmentLengths']
Energy Efficiency,"gTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualX(const char* name, const char* title); Ctor of ABC. TVirtualX *& Instance(); Returns gVirtualX global. void GetWindowAttributes(Window_t id, WindowAttributes_t& attr); The WindowAttributes_t structure is set to default. Bool_t ParseColor(Colormap_t cmap, const char* cname, ColorStruct_t& color); Looks up the string name of a color ""cname"" with respect to the screen; associated with the specified colormap. It returns the exact color value.; If the color name is not in the Host Portable Character Encoding,; the result is implementation dependent. cmap - the colormap; cname - the color name string; use of uppercase or lowercase; does not matter; color - returns the exact color value for later use. The ColorStruct_t structure is set to default. Let system think we; could parse color. Bool_t AllocColor(Colormap_t cmap, ColorStruct_t& color); Allocates a read-only colormap entry corresponding to the closest RGB; value supported by the hardware. If no cell could be allocated it; returns kFALSE, otherwise kTRUE. The pixel value is set to default. Let system think we could allocate; color. cmap - the colormap; color - specifies and returns the values actually used in the cmap. void QueryColor(Colormap_t cmap, ColorStruct_t& color); Returns the current RGB value for the pixel in the ""color"" structure. The color components are set to default. cmap - the colormap; color - specifies and returns the RGB values for the pixel specified; in the structure. void NextEvent(Event_t& event); The ""event"" is set to default event.; This method however, should never be called. void GetPasteBuffer(Window_t id, Atom_t atom, TString& text, Int_t& nchar, Bool_t del); Gets contents of the paste buffer ""atom"" into the string ""text"".; (nchar = number of characters) If ""del"" is true deletes the paste; buffer afterwards. Bool_t Init(void* display = 0); Initializes the X sys",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVirtualX.html:22239,Allocate,Allocates,22239,root/html532/TVirtualX.html,https://root.cern,https://root.cern/root/html532/TVirtualX.html,2,['Allocate'],['Allocates']
Energy Efficiency,"gainst possible overflows. ; Definition at line 535 of file TMath.cxx. ◆ Normalize() [2/2]. Float_t TMath::Normalize ; (; Float_t ; v[3]). Normalize a vector v in place. ; Returns the norm of the original vector. ; Definition at line 518 of file TMath.cxx. ◆ NormCross(). template<typename T > . T TMath::NormCross ; (; const T ; v1[3], . const T ; v2[3], . T ; out[3] . ). inline . Calculates the Normalized Cross Product of two vectors. ; Definition at line 951 of file TMath.h. ◆ NormQuantile(). Double_t TMath::NormQuantile ; (; Double_t ; p). Computes quantiles for standard normal distribution N(0, 1) at probability p. ; ALGORITHM AS241 APPL. STATIST. (1988) VOL. 37, NO. 3, 477-484. ; Definition at line 2456 of file TMath.cxx. ◆ Odd(). Bool_t TMath::Odd ; (; Long_t ; a). inline . Returns true if a is odd. ; Definition at line 117 of file TMathBase.h. ◆ Permute(). Bool_t TMath::Permute ; (; Int_t ; n, . Int_t * ; a . ). Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinct adapted from CERNLIB routine PERMU. ; The input array has to be initialised with a non descending sequence. The method returns kFALSE when all combinations are exhausted. ; Definition at line 2557 of file TMath.cxx. ◆ Pi(). constexpr Double_t TMath::Pi ; (; ). constexpr . \( \pi\) ; Definition at line 37 of file TMath.h. ◆ PiOver2(). constexpr Double_t TMath::PiOver2 ; (; ). constexpr . \( \frac{\pi}{2} \) ; Definition at line 51 of file TMath.h. ◆ PiOver4(). constexpr Double_t TMath::PiOver4 ; (; ). constexpr . \( \frac{\pi}{4} \) ; Definition at line 58 of file TMath.h. ◆ Poisson(). Double_t TMath::Poisson ; (; Double_t ; x, . Double_t ; par . ). Computes the Poisson distribution function for (x,par). ; The Poisson PDF is implemented by means of Euler's Gamma-function (for the factorial), so for any x integer argument it is the correct Poisson distribution. BUT for non-integer x values, it IS NOT equal to the Poisson distribution !. Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:70497,adapt,adapted,70497,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['adapt'],['adapted']
Energy Efficiency,"gator::LineToVertex ; (; TEveVectorD & ; v). protected . Propagate neutral particle to vertex v. ; Definition at line 808 of file TEveTrackPropagator.cxx. ◆ LoopToBounds(). void TEveTrackPropagator::LoopToBounds ; (; TEveVectorD & ; p). protected . Propagate charged particle with momentum p to bounds. ; It is expected that Update() with full-update was called before. ; Definition at line 547 of file TEveTrackPropagator.cxx. ◆ LoopToLineSegment(). Bool_t TEveTrackPropagator::LoopToLineSegment ; (; const TEveVectorD & ; s, . const TEveVectorD & ; r, . TEveVectorD & ; p . ). protected . Propagate charged particle with momentum p to line segment with point s and vector r to the second point. ; It is expected that Update() with full-update was called before. Returns kFALSE if hits bounds. ; Definition at line 687 of file TEveTrackPropagator.cxx. ◆ LoopToVertex(). Bool_t TEveTrackPropagator::LoopToVertex ; (; TEveVectorD & ; v, . TEveVectorD & ; p . ). protected . Propagate charged particle with momentum p to vertex v. ; It is expected that Update() with full-update was called before. ; Definition at line 610 of file TEveTrackPropagator.cxx. ◆ OnZeroRefCount(). void TEveTrackPropagator::OnZeroRefCount ; (; ). overridevirtual . Virtual from TEveRefBackPtr - track reference count has reached zero. ; Reimplemented from TEveRefCnt.; Definition at line 286 of file TEveTrackPropagator.cxx. ◆ operator=(). TEveTrackPropagator & TEveTrackPropagator::operator= ; (; const TEveTrackPropagator & ; ). private . ◆ PointOverVertex(). Bool_t TEveTrackPropagator::PointOverVertex ; (; const TEveVector4D & ; v0, . const TEveVector4D & ; v, . Double_t * ; p = nullptr . ). inlineprotected . Definition at line 364 of file TEveTrackPropagator.h. ◆ PrintMagField(). void TEveTrackPropagator::PrintMagField ; (; Double_t ; x, . Double_t ; y, . Double_t ; z . ); const. Definition at line 1055 of file TEveTrackPropagator.cxx. ◆ RebuildTracks(). void TEveTrackPropagator::RebuildTracks ; (; ). protected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTrackPropagator.html:55745,charge,charged,55745,doc/master/classTEveTrackPropagator.html,https://root.cern,https://root.cern/doc/master/classTEveTrackPropagator.html,1,['charge'],['charged']
Energy Efficiency,"gcDefinition TGWin32VirtualXProxy.cxx:130; textOption_t Option_t TPoint TPoint const char textDefinition TGWin32VirtualXProxy.cxx:68; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; PutBytestatic void PutByte(Byte_t b)Put byte b in output stream.Definition TGWin32.cxx:4312; KeySymunsigned long KeySymDefinition TGWin32.h:50; XRotTextExtentsXPoint * XRotTextExtents(Display *, XFontStruct *, float, int, int, char *, int)Calculate the bounding box some text will have when painted.Definition Rotated.cxx:1335; gFillHollowstatic Int_t gFillHollowDefinition TGX11.cxx:101; gMarkerJoinStylestatic int gMarkerJoinStyleDefinition TGX11.cxx:128; gOutstatic FILE * gOutDefinition TGX11.cxx:3293; gMarkerLineStylestatic int gMarkerLineStyleDefinition TGX11.cxx:126; XRotVersionfloat XRotVersion(char *, int)Return version/copyright information.Definition Rotated.cxx:232; GIFquantizeint GIFquantize(UInt_t width, UInt_t height, Int_t *ncol, Byte_t *red, Byte_t *green, Byte_t *blue, Byte_t *outputBuf, Byte_t *outputCmap); gKeybdMaskstatic ULong_t gKeybdMaskDefinition TGX11.cxx:149; XRotSetMagnificationvoid XRotSetMagnification(float)Set the font magnification factor for all subsequent operations.Definition Rotated.cxx:242; gFontstatic struct @56 gFont[kMAXFONT]; gCapStylestatic int gCapStyleDefinition TGX11.cxx:135; gGCfillstatic GC * gGCfillDefinition TGX11.cxx:93; gGCechostatic GC gGCechoDefinition TGX11.cxx:99; idXFontStruct * idDefinition TGX11.cxx:109; gGCinvtstatic GC * gGCinvtDefinition TGX11.cxx:95; GetPixelstatic void GetPixel(int y, int width, Byte_t *scline)Get pixels in line y and put in array scline.Definition TGX11.cxx:3308; gFillPatternstatic Pixmap gFillPatternDefinition TGX11.cxx:102; gNullCursorstatic Cursor gNullCursorDefinition TGX11.cxx:159; namechar name[80]Definition TGX11.cxx:110; gTwsstatic XWindow_t * gTwsDefinition TGX11.cxx:82; gMarkerstatic struct @57 gMarker; kMAXGCconst int kMAXGCDefinition TGX11.cxx:89; GIFdecodeint GI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:136047,green,green,136047,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"ge [first, first+len). ;  ; TClass * IsA () const override;  ; bool isWeighted () const override;  ; void loadValues (const RooAbsDataStore *tds, const RooFormulaVar *select=nullptr, const char *rangeName=nullptr, std::size_t nStart=0, std::size_t nStop=std::numeric_limits< std::size_t >::max()) override;  ; RooAbsDataStore * merge (const RooArgSet &allvars, std::list< RooAbsDataStore * > dstoreList) override;  Merge columns of supplied data set(s) with this data set. ;  ; Int_t numEntries () const override;  ; std::vector< RealFullVector * > & realfStoreList ();  ; std::vector< RealVector * > & realStoreList ();  ; void recalculateCache (const RooArgSet *, Int_t firstEvent, Int_t lastEvent, Int_t stepSize, bool skipZeroWeights) override;  ; std::unique_ptr< RooAbsDataStore > reduce (RooStringView name, RooStringView title, const RooArgSet &vars, const RooFormulaVar *cutVar, const char *cutRange, std::size_t nStart, std::size_t nStop) override;  ; void reset () override;  ; void resetBuffers () override;  ; void resetCache () override;  ; const RooArgSet & row ();  ; void setArgStatus (const RooArgSet &set, bool active) override;  Disabling of branches is (intentionally) not implemented in vector data stores (as the doesn't result in a net saving of time) ;  ; void setDirtyProp (bool flag) override;  ; void setExternalWeightArray (const double *arrayWgt, const double *arrayWgtErrLo, const double *arrayWgtErrHi, const double *arraySumW2) override;  ; std::size_t size () const;  Get size of stored dataset. ;  ; void Streamer (TBuffer &) override;  Stream an object of class RooVectorDataStore. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double sumEntries () const override;  ; double weight () const override;  Return the weight of the last-retrieved data point. ;  ; virtual double weight () const=0;  ; double weight (Int_t index) const;  ; void weightError (double &lo, double &hi, RooAbsData::ErrorType etype=RooAbsData::Poisson) const override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:4837,reduce,reduce,4837,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,1,['reduce'],['reduce']
Energy Efficiency,"ge satisfy diff <=maxdiff; the bin with the smallest difference is returned in binx.; In all cases the function returns the smallest difference. NOTE1: if firstx <= 0, firstx is set to bin 1; if (lastx < firstx then firstx is set to the number of bins; ie if firstx=0 and lastx=0 (default) the search is on all bins.; NOTE2: if maxdiff=0 (default), the first bin with content=c is returned. TAxis * GetXaxis() const; return a pointer to the X axis object. TAxis * GetYaxis() const; return a pointer to the Y axis object. TAxis * GetZaxis() const; return a pointer to the Z axis object. Double_t Interpolate(Double_t x); Given a point x, approximates the value via linear interpolation; based on the two nearest bin centers; Andy Mastbaum 10/21/08. Double_t Interpolate(Double_t x, Double_t y). Double_t Interpolate(Double_t x, Double_t y, Double_t z). Bool_t IsBinOverflow(Int_t bin) const. Bool_t IsBinUnderflow(Int_t bin) const. void LabelsDeflate(Option_t* axis = ""X""); Reduce the number of bins for the axis passed in the option to the number of bins having a label.; The method will remove only the extra bins existing after the last ""labeled"" bin.; Note that if there are ""un-labeled"" bins present between ""labeled"" bins they will not be removed. void LabelsInflate(Option_t* axis = ""X""); Double the number of bins for axis.; Refill histogram; This function is called by TAxis::FindBin(const char *label). void LabelsOption(Option_t* option = ""h"", Option_t* axis = ""X""); Set option(s) to draw axis with labels; option = ""a"" sort by alphabetic order; = "">"" sort by decreasing values; = ""<"" sort by increasing values; = ""h"" draw labels horizontal; = ""v"" draw labels vertical; = ""u"" draw labels up (end of label right adjusted); = ""d"" draw labels down (start of label left adjusted). Bool_t SameLimitsAndNBins(const TAxis& axis1, const TAxis& axis2); Same limits and bins. Bool_t RecomputeAxisLimits(TAxis& destAxis, const TAxis& anAxis); Finds new limits for the axis for the Merge function.; ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:92225,Reduce,Reduce,92225,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,2,['Reduce'],['Reduce']
Energy Efficiency,"ge() const; virtual voidProcessOptions(); virtual voidReadWeightsFromStream(istream&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTrain(); virtual voidWriteMonitoringHistosToFile() const. protected:. virtual voidGetHelpMessage() const; virtual voidMakeClassSpecific(ostream&, const TString&) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IMethod(); default constructur. {}. virtual ~IMethod(); default destructur. {}. const char * GetName() const; ------- virtual member functions to be implemented by each MVA method; the name of the method. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the MVA value - some methods may return a per-event error estimate (unless: *err = -1). void Train( void ); training method. void ReadWeightsFromStream(istream& ); read weights from output stream. void WriteMonitoringHistosToFile( void ); write method specific monitoring histograms to target file. void MakeClass(const TString& classFileName = TString("""")) const; make ROOT-independent C++ class for classifier response. const Ranking* CreateRanking(); create ranking. void PrintHelpMessage() const; print help message. void Init(). void DeclareOptions(). void ProcessOptions(). Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets). void MakeClassSpecific(ostream& , const TString& ) const; make ROOT-independent C++ class for classifier response (classifier-specific implementation). void GetHelpMessage() const; get specific help message from classifer. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 13:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__IMethod.html:2086,monitor,monitoring,2086,root/html602/TMVA__IMethod.html,https://root.cern,https://root.cern/root/html602/TMVA__IMethod.html,2,['monitor'],['monitoring']
Energy Efficiency,"ge() const; virtual voidProcessOptions(); virtual voidReadWeightsFromStream(istream&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTrain(); virtual voidWriteMonitoringHistosToFile() const. protected:. virtual voidGetHelpMessage() const; virtual voidMakeClassSpecific(ostream&, const TString&) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IMethod(); default constructur. {}. virtual ~IMethod(); default destructur. {}. const char * GetName() const; ------- virtual member functions to be implemented by each MVA method; the name of the method. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the MVA value - some methods may return a per-event error estimate (unless: *err = -1). void Train( void ); training method. void ReadWeightsFromStream(istream& ); read weights from output stream. void WriteMonitoringHistosToFile( void ); write method specific monitoring histograms to target file. void MakeClass(const TString& classFileName = TString("""")) const; make ROOT-independent C++ class for classifier response. const Ranking* CreateRanking(); create ranking. void PrintHelpMessage() const; print help message. void Init(). void DeclareOptions(). void ProcessOptions(). Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets). void MakeClassSpecific(ostream& , const TString& ) const; make ROOT-independent C++ class for classifier response (classifier-specific implementation). void GetHelpMessage() const; get specific help message from classifer. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__IMethod.html:2094,monitor,monitoring,2094,root/html604/TMVA__IMethod.html,https://root.cern,https://root.cern/root/html604/TMVA__IMethod.html,2,['monitor'],['monitoring']
Energy Efficiency,"geComponentdouble GetBinUpEdgeComponent(unsigned int ipoint, unsigned int icoord) constreturns a single coordinate error component of a point.Definition BinData.h:502; ROOT::Fit::BinData::HasBinEdgesbool HasBinEdges() constquery if the data store the bin edges instead of the centerDefinition BinData.h:545; ROOT::Fit::BinData::fCoordErrorsPtrstd::vector< const double * > fCoordErrorsPtrDefinition BinData.h:616; ROOT::Fit::BinData::Appendvoid Append(unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError)Equivalent to Initialize()Definition BinData.cxx:320; ROOT::Fit::BinData::GetPointErrorconst double * GetPointError(unsigned int ipoint, double &errvalue) constRetrieve the errors on the point (coordinate and value) for the given fit point It must be called onl...Definition BinData.h:462; ROOT::Fit::BinData::fDataErrorLowstd::vector< double > fDataErrorLowDefinition BinData.h:622; ROOT::Fit::BinData::GetPointconst double * GetPoint(unsigned int ipoint, double &value) constretrieve at the same time a pointer to the coordinate data and the fit value More efficient than call...Definition BinData.h:381; ROOT::Fit::BinData::AddBinUpEdgevoid AddBinUpEdge(const double *xup)add the bin width data, a pointer to an array with the bin upper edge information.Definition BinData.cxx:613; ROOT::Fit::BinData::BinUpEdgeconst double * BinUpEdge(unsigned int ipoint) constreturn an array containing the upper edge of the bin for coordinate i In case of empty bin they could...Definition BinData.h:519; ROOT::Fit::BinData::fDataErrorLowPtrconst double * fDataErrorLowPtrDefinition BinData.h:625; ROOT::Fit::BinData::fDataErrorHighstd::vector< double > fDataErrorHighDefinition BinData.h:621; ROOT::Fit::BinData::InvErrordouble InvError(unsigned int ipoint) constReturn the inverse of error on the value for the given fit point useful when error in the coordinates...Definition BinData.h:325; ROOT::Fit::BinData::LogTransformBinData & LogTransform()apply a Log transformation of the data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:25144,efficient,efficient,25144,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['efficient'],['efficient']
Energy Efficiency,"genceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::factorWeightDecaydouble factorWeightDecay() constget the weight-decay factorDefinition NeuralNet.h:769; TMVA::DNN::Settings::maxConvergenceCountsize_t maxConvergenceCount() constreturns the max convergence count so farDefinition NeuralNet.h:828; TMVA::DNN::Settings::padsvoid pads(int numPads)preparation for monitoringDefinition NeuralNet.h:818; TMVA::DNN:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:68192,monitor,monitoringDefinition,68192,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['monitor'],['monitoringDefinition']
Energy Efficiency,"gile, inefficient, and limiting.; CINT is not relevant, I use PyROOT; 	For calling into C++, PyROOT relies on CINT's reflection data from ROOT (which is why it's so fantastic compared to static SWIG-based approaches). And ROOT relies on CINT for I/O, both the dictionaries and the interpreter. I.e. you use CINT much, much more than you think: it's not just the prompt, it in the core of most of ROOT.;  ; So we need to do something. C++ interpreters are extremely rare. Instead of rewriting a C++ interpreter we decided to reuse existing code. Code that we can still influence, but that's nevertheless production-grade. We expected that this will solve the maintenance and correctness issues. And because it's correct we don't need Reflex, but can instead use one central, fast (compiler!) reflection database.; So yes, this is a major overhaul of ROOT and the dictionaries. We will signal that with a new major ROOT version number. But we expect it to solve the correctness, stability, memory and CPU-consumption as well as the maintenance issues we currently have. The current implementation of cling (which is not yet complete) uses a mere 5000 lines of custom code developed by HEP; everything else is provided through LLVM and clang.; And regarding PyROOT: I am sure Wim will make good use of the new JIT power that comes with cling! Just like we expect the JIT to leave traces e.g. in TFormula, and the real reflection database in the I/O, THtml etc. It gets us unstuck, flexible and future-safe in many central areas of ROOT. O the places you'll go!; Cheers,. Axel Naumann's blog. Comments. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:48 Permalink . Other Python bindings . I noticed that there are multiple other ways to call C++ code from Python, one of them being included in the Boost library. What would it do to the complexity (and dependencies) to use an interface that doesn't build on top of CINT/Reflex?. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:4652,consumption,consumption,4652,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['consumption'],['consumption']
Energy Efficiency,"ging all the regions with empty bins for betetr performance efficiency. Since the THnSparse is not drawn no graphics options are passed; Here is the list of possible options. = ""I"" Use integral of function in bin instead of value at bin center; = ""X"" Use chi2 method (default is log-likelihood method); = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" Use this option when you want to fix one or more parameters; and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; = ""M"" More. Improve fit results; = ""R"" Use the Range specified in the function range. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(const Int_t* idx) const; Get content of bin with coordinates ""coord"". Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError(const Int_t* idx) const; Get error of bin with coordinates ""coord"" as. If errors are not enabled (via Sumw2() or CalculateErrors()); return sqrt(contents). Double_t GetBinError(Long64_t linidx) const; Get error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return sqrt(contents). Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:16640,allocate,allocate,16640,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,12,['allocate'],['allocate']
Energy Efficiency,"gnal, TClass* receiver_class, void* receiver, const char* slot); virtual void*GetSender(); virtual const char*GetSenderClassName() const. private:. TQObject(const TQObject& tqo); TQObject&operator=(const TQObject& tqo). Data Members; protected:. TList*fListOfConnections! list of connections to this object; TList*fListOfSignals! list of signals from this object; Bool_tfSignalsBlocked! flag used for suppression of signals; static Bool_tfgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Checking of consitency of sender/receiver methods/arguments.; Returns -1 on error, otherwise number or arguments of signal function.; Static method. TQObject(); TQObject Constructor.; Comment:; - In order to minimize memory allocation fListOfSignals and; fListOfConnections are allocated only if it is neccesary; - When fListOfSignals/fListOfConnections are empty they will; be deleted. ~TQObject(); TQObject Destructor.; - delete all connections and signal list. TList * GetListOfClassSignals() const; Returns pointer to list of signals of this class. void CollectClassSignalLists(TList& list, TClass* cls); Collect class signal lists from class cls and all its; base-classes. The recursive traversal is not performed for classes not; deriving from TQClass. void HighPriority(const char* signal_name, const char* slot_name = 0); 1. If slot_name = 0 => makes signal defined by the signal_name; to be the first in the fListOfSignals, this decreases; the time for lookup.; 2. If slot_name != 0 => makes slot defined by the slot_name; to be executed first when signal_name is emitted.; Signal name is not compressed. void LowPriority(const char* signal_name, const char* slot_name = 0); 1. If slot_name = 0 => makes signal defined by the signal_name; to be the last in the fListOfSignals",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQObject.html:5155,allocate,allocated,5155,root/html528/TQObject.html,https://root.cern,https://root.cern/root/html528/TQObject.html,6,['allocate'],['allocated']
Energy Efficiency,"gnal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TGWidget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void AllocColors ();  Try to allocate first a palette of 64 colors. ;  ; void CreateDitheredImage (Pixmap_t image, Int_t which);  Create a dithered version of the color map and lightness images for display modes with reduced number of colors. ;  ; void CreateImages ();  Create colormap and color slider images. ;  ; void DoRedraw () override;  Redraw the color pick widget. ;  ; void DrawHScursor (Int_t onoff);  Draw hue / saturation cursor. ;  ; void DrawLcursor (Int_t onoff);  Draw lightness slider cursor. ;  ; void FreeColors ();  Free allocated colors. ;  ; void InitImages ();  Initialize color palette and slider images. ;  ; void SetHScursor (Int_t x, Int_t y);  Set hue / saturation cursor position. ;  ; void SetLcursor (Int_t z);  Set lightness slider cursor position. ;  ; void SetSliderColor ();  Set slider colors. ;  ; void UpdateCurrentColor ();  Assign the current cursor position as currently selected color. ;  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorPick.html:22738,allocate,allocate,22738,doc/master/classTGColorPick.html,https://root.cern,https://root.cern/doc/master/classTGColorPick.html,1,['allocate'],['allocate']
Energy Efficiency,"gnored. It is up to the implementation of the NLL creation method if the data is cloned or not. . Offset(std::string const& mode) Likelihood offsetting mode. Can be either: . Mode Description . none - default No offsetting. . initial Offset likelihood by initial value (so that starting value of FCN in minuit is zero). This can improve numeric stability in simultaneous fits with components with large likelihood values. . bin Offset likelihood bin-by-bin with a template histogram model based on the obersved data. This results in per-bin values that are all in the same order of magnitude, which reduces precision loss in the sum, which can drastically improve numeric stability. Furthermore, \(2\cdot \text{NLL}\) defined like this is approximately chi-square distributed, allowing for goodness-of-fit tests. . IntegrateBins(double precision) In binned fits, integrate the PDF over the bins instead of using the probability density at the bin centre. This can reduce the bias observed when fitting functions with high curvature to binned data.; precision > 0: Activate bin integration everywhere. Use precision between 0.01 and 1.E-6, depending on binning. Note that a low precision such as 0.01 might yield identical results to 1.E-4, since the integrator might reach 1.E-4 already in its first integration step. If lower precision is desired (more speed), a RooBinSamplingPdf has to be created manually, and its integrator has to be manipulated directly.; precision = 0: Activate bin integration only for continuous PDFs fit to a RooDataHist.; precision < 0: Deactivate. See alsoRooBinSamplingPdf . ModularL(bool flag) Enable or disable modular likelihoods, which will become the default in a future release. This does not change any user-facing code, but only enables a different likelihood class in the back-end. Note that this should be set to true for parallel minimization of likelihoods! Note that it is currently not recommended to use Modular likelihoods without any parallelization enab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:95061,reduce,reduce,95061,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['reduce'],['reduce']
Energy Efficiency,"gral of function in bin instead of value at bin center; = ""X"" Use chi2 method (default is log-likelihood method); = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""E"" Perform better Errors estimation using Minos technique; = ""B"" Use this option when you want to fix one or more parameters; and the fitting function is like ""gaus"", ""expo"", ""poln"", ""landau"".; = ""M"" More. Improve fit results; = ""R"" Use the Range specified in the function range. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(const Int_t* idx) const; Get content of bin with coordinates ""coord"". Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError(const Int_t* idx) const; Get error of bin with coordinates ""coord"" as. If errors are not enabled (via Sumw2() or CalculateErrors()); return sqrt(contents). Double_t GetBinError(Long64_t linidx) const; Get error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return sqrt(contents). Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:16835,allocate,allocate,16835,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,12,['allocate'],['allocate']
Energy Efficiency,"gral(a,b);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. ROOT::Math::IntegratorMultiDim ig2(ROOT::Math::IntegrationMultiDim::kVEGAS);; ig2.SetFunction(wf);; val = ig2.Integral(a,b);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. ROOT::Math::IntegratorMultiDim ig3(wf,ROOT::Math::IntegrationMultiDim::kPLAIN);; val = ig3.Integral(a,b);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. ROOT::Math::IntegratorMultiDim ig4(wf,ROOT::Math::IntegrationMultiDim::kMISER);; val = ig4.Integral(a,b);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. return status;; }; 13.8.3.2 Multi-dimensions Integration Algorithms; Here is the types, that can be specified as enumeration and the corresponding classes. Enumeration name; Integrator class. ROOT::Math::IntegratorMultiDim::kADAPTIVE; ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::IntegratorMultiDim::kVEGAS; ROOT::Math:::GSLMCIntegrator. ROOT::Math::IntegratorMultiDim::kMISER; ROOT::Math:::GSLMCIntegrator. ROOT::Math::IntegratorMultiDim::kPLAIN; ROOT::Math:::GSLMCIntegrator. The control parameters for the integration algorithms can be specified using the ROOT::Math::IntegratorMultiDimOptions class. Static methods are provided to change the default values. It is possible to print the list of default control parameters using the ROOT::Math::IntegratorMultiDimOptions::Print function. Example:; ROOT::Math::IntegratorMultiDimOptions opt;; opt.Print();; Integrator Type : ADAPTIVE; Absolute tolerance : 1e-09; Relative tolerance : 1e-09; Workspace size : 100000; (max) function calls : 100000; Depending on the algorithm, some of the control parameters might have no effect.; 13.8.3.3 ROOT::Math::AdaptiveIntegratorMultiDim; This class implements an adaptive quadrature integration method for multi dimensional functions. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:711236,Adapt,AdaptiveIntegratorMultiDim,711236,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Adapt'],['AdaptiveIntegratorMultiDim']
Energy Efficiency,"gratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IMultiGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDim.html:2740,adapt,adaptive,2740,root/html602/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorMultiDim.html,4,['adapt'],['adaptive']
Energy Efficiency,"gressLimits ; (; double ; minProgress = 0, . double ; maxProgress = 100 . ). inlinevirtual . Parameters. maxProgressfor monitoring and logging (set the current ""progress"" limits for the display of the progress); minProgressminimum value; maxProgressmaximum value . Definition at line 790 of file NeuralNet.h. ◆ startTestCycle(). virtual void TMVA::DNN::Settings::startTestCycle ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 804 of file NeuralNet.h. ◆ startTrainCycle(). virtual void TMVA::DNN::Settings::startTrainCycle ; (; ). inlinevirtual . Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 782 of file NeuralNet.h. ◆ startTraining(). virtual void TMVA::DNN::Settings::startTraining ; (; ). inlinevirtual . Definition at line 795 of file NeuralNet.h. ◆ testIteration(). virtual void TMVA::DNN::Settings::testIteration ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 806 of file NeuralNet.h. ◆ testRepetitions(). size_t TMVA::DNN::Settings::testRepetitions ; (; ); const. inline . how often is the test data tested ; Definition at line 768 of file NeuralNet.h. ◆ testSample(). virtual void TMVA::DNN::Settings::testSample ; (; double ; , . double ; , . double ; , . double ;  . ). inlinevirtual . virtual function to be used for monitoring (callback) ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 781 of file NeuralNet.h. ◆ useMultithreading(). bool TMVA::DNN::Settings::useMultithreading ; (; ); const. inline . is multithreading turned on? ; Definition at line 815 of file NeuralNet.h. Member Data Documentation. ◆ count_dE. size_t TMVA::DNN::Settings::count_dE. Definition at line 843 of file NeuralNet.h. ◆ count_E. size_t TMVA::DNN::Settings::count_E. Definition at line 842 of file NeuralNet.h. ◆ count_mb_dE. size_t TMVA::DNN::Settings::count_mb_dE. Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:12320,monitor,monitoring,12320,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['monitor'],['monitoring']
Energy Efficiency,"gy; tree->Branch(""event"",&e);; ; // fill some events with random numbers; Int_t nevent=10000;; for (Int_t iev=0;iev<nevent;iev++) {; if (iev%1000==0) cout<<""Processing event ""<<iev<<""...""<<endl;; ; Float_t ea,eb;; gRandom->Rannor(ea,eb); // the two energies follow a gaus distribution; e->a.e=ea;; e->b.e=eb;; e->a.t=gRandom->Rndm(); // random; e->b.t=e->a.t + gRandom->Gaus(0.,.1); // identical to a.t but a gaussian; // 'resolution' was added with sigma .1; ; tree->Fill(); // fill the tree with the current event; }; ; // start the viewer; // here you can investigate the structure of your Event class; tree->StartViewer();; ; //gROOT->SetStyle(""Plain""); // uncomment to set a different style; ; // now draw some tree variables; TCanvas *c1 = new TCanvas();; c1->Divide(2,2);; c1->cd(1);; tree->Draw(""a.e""); //energy of det a; tree->Draw(""a.e"",""3*(-.2<b.e && b.e<.2)"",""same""); // same but with condition on energy b; scaled by 3; c1->cd(2);; tree->Draw(""b.e:a.e"","""",""colz""); // one energy against the other; c1->cd(3);; tree->Draw(""b.t"","""",""e""); // time of b with errorbars; tree->Draw(""a.t"","""",""same""); // overlay time of detector a; c1->cd(4);; tree->Draw(""b.t:a.t""); // plot time b again time a; ; cout<<endl;; cout<<""You can now examine the structure of your tree in the TreeViewer""<<endl;; cout<<endl;; }; ; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; Riostream.h; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; ClassImp#define ClassImp(name)Definition Rtypes.h:382; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; TCanvas.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; TTree.h; TCanvasThe Canvas class.Definition TCanvas.h:23; TObjectMother of all ROOT objects.Definition TObject.h:41; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree0_8C.html:2606,energy,energy,2606,doc/master/tree0_8C.html,https://root.cern,https://root.cern/doc/master/tree0_8C.html,1,['energy'],['energy']
Energy Efficiency,"h errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGraphErrors.html:20700,Allocate,Allocate,20700,root/html604/TGraphErrors.html,https://root.cern,https://root.cern/root/html604/TGraphErrors.html,1,['Allocate'],['Allocate']
Energy Efficiency,"h errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:20700,Allocate,Allocate,20700,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,1,['Allocate'],['Allocate']
Energy Efficiency,"h the current value of fPx of the 3rd track.; Both macrofilename and the optional cutfilename are expected to be the name of source files which contain at least a free standing function with the signature: x_t macrofilename(); // i.e function with the same name as the file; and y_t cutfilename(); // i.e function with the same name as the file; x_t and y_t needs to be types that can convert respectively to a double and a bool (because the skeleton uses: if (cutfilename()) htemp->Fill(macrofilename());; These two functions are run in a context such that the branch names are available as local variables of the correct (read-only) type.; Note that if you use the same 'variable' twice, it is more efficient to 'cache' the value. For example: Int_t n = fEventNumber; // Read fEventNumber; if (n<10 || n>10) { ... }; nconst Int_t nDefinition legend1.C:16; is more efficient than if (fEventNumber<10 || fEventNumber>10); Also, optionally, the generated selector will also call methods named macrofilename_methodname in each of 6 main selector methods if the method macrofilename_methodname exist (Where macrofilename is stripped of its extension).; Concretely, with the script named h1analysisProxy.C,. The method calls the method (if it exist); Begin -> void h1analysisProxy_Begin(TTree*);; SlaveBegin -> void h1analysisProxy_SlaveBegin(TTree*);; Notify -> bool h1analysisProxy_Notify();; Process -> bool h1analysisProxy_Process(Long64_t);; SlaveTerminate -> void h1analysisProxy_SlaveTerminate();; Terminate -> void h1analysisProxy_Terminate();. If a file name macrofilename.h (or .hh, .hpp, .hxx, .hPP, .hXX) exist it is included before the declaration of the proxy class. This can be used in particular to insure that the include files needed by the macro file are properly loaded.; The default histogram is accessible via the variable named 'htemp'.; If the library of the classes describing the data in the branch is loaded, the skeleton will add the needed include statements and give the abi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:177443,efficient,efficient,177443,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['efficient'],['efficient']
Energy Efficiency,"h""; 18 ; 19#include <mutex>; 20#include <map>; 21#include <string>; 22#include <memory>; 23#include <queue>; 24#include <thread>; 25#include <vector>; 26 ; 27class THttpEngine;; 28class THttpTimer;; 29class TRootSniffer;; 30 ; 31class THttpServer : public TNamed {; 32 ; 33protected:; 34 TList fEngines; ///<! engines which runs http server; 35 std::unique_ptr<THttpTimer> fTimer; ///<! timer used to access main thread; 36 std::unique_ptr<TRootSniffer> fSniffer; ///<! sniffer provides access to ROOT objects hierarchy; 37 Bool_t fTerminated{kFALSE}; ///<! termination flag, disables all requests processing; 38 Long_t fMainThrdId{0}; ///<! id of the thread for processing requests; 39 Long_t fProcessingThrdId{0}; ///<! id of the thread where events are recently processing; 40 Bool_t fOwnThread{kFALSE}; ///<! true when specialized thread allocated for processing requests; 41 std::thread fThrd; ///<! own thread; 42 Bool_t fWSOnly{kFALSE}; ///<! when true, handle only websockets / longpoll engine; 43 ; 44 TString fJSROOTSYS; ///<! location of local JSROOT files; 45 TString fTopName{""ROOT""}; ///<! name of top folder, default - ""ROOT""; 46 TString fJSROOT; ///<! location of external JSROOT files; 47 ; 48 std::map<std::string, std::string> fLocations; //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8h_source.html:1583,allocate,allocated,1583,doc/master/THttpServer_8h_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8h_source.html,1,['allocate'],['allocated']
Energy Efficiency,"h) the scene (via a TPad repaint at present), and thus collect these objects if the internal viewer state changes. It does this presently by forcing a repaint on the attached TPad object - hence the reason for putting all publishing to the viewer in the attached pad objects Paint() method. We will likely remove this requirement in the future, indicating the rebuild request via a normal ROOT signal, which the client can detect. Physical IDs; TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const TBuffer3D & buffer, Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; bool; unsigned int; If you use the first (simple) case a viewer using logical/physical pairs SetSectionsValid(TBuffer3D::kBoundingBox); will generate IDs for each physical object internally. In the second you can specify a unique identifier from the client, which allows the viewer to be more efficient. It can now cache both logical and physical objects, and only discard physical objects no longer of interest as part of scene rebuilds. Child Objects; In many geometries there is a rigid containment hierarchy, and so if the viewer is not interested in a certain object due to limits/size then it will also not be interest in any of the contained branch of descendents. Both AddObject() methods have an addChildren parameter. The viewer will complete this (if passed) indicating if children (contained within the one just sent) are worth adding. Recycling TBuffer3D; Once add AddObject() has been called, the contents are copied to the viewer internally. You are free to destroy this object, or recycle it for the next object if suitable. ; Definition at line 17 of file TBuffer3D.h. Public Types; enum  EBoolOpCode { kCSUnion; , kCSIntersection; , kCSDifference; , kCSNoOp; };  ; enum  ESection { ;   kNone = (1ULL << ( 0 )); , kCore = (1ULL <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:8694,efficient,efficient,8694,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,1,['efficient'],['efficient']
Energy Efficiency,"h, unsigned int modifiers, Reflex::Type::TYPE_MODIFICATION operation = REPLACE); static Reflex::Type_IteratorType_Begin(); static Reflex::Type_IteratorType_End(); static Reflex::Reverse_Type_IteratorType_RBegin(); static Reflex::Reverse_Type_IteratorType_REnd(); static Reflex::TypeTypeAt(size_t nth); const type_info&TypeInfo() const; static size_tTypeSize(); Reflex::TYPETypeType() const; stringTypeTypeAsString() const; voidUnload() const; voidUpdateMembers() const. Data Members; public:. enum TYPE_MODIFICATION { REPLACE; APPEND; MASK; };. private:. unsigned intfModifiers; const Reflex::TypeName*fTypeName. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RepresType() const. operator bool() const. inline Type(const Reflex::TypeName* typName = 0, unsigned int modifiers = 0). inline Type(const Reflex::Type& rh). inline Type(const Reflex::Type& rh, unsigned int modifiers, Reflex::Type::TYPE_MODIFICATION operation = REPLACE). inline ~Type(). Allocate() const. BaseSize() const. Base_Begin() const. Base_End() const. Base_RBegin() const. Base_REnd() const. DataMemberSize(Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. DataMember_Begin(Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. DataMember_End(Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. DataMember_RBegin(Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. DataMember_REnd(Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. Deallocate(void* instance) const. DeclaringScope() const. Destruct(void* instance, bool dealloc = true) const. FunctionMemberSize(Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. FunctionMember_Begin(Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. FunctionMember_End(Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. FunctionMember_RBegin(Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. FunctionMember_REnd(Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Reflex__Type.html:9078,Allocate,Allocate,9078,root/html534/Reflex__Type.html,https://root.cern,https://root.cern/root/html534/Reflex__Type.html,1,['Allocate'],['Allocate']
Energy Efficiency,"h->GetBinContent(i + 1);; s->Background(source,nbins,4,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d1->SetBinContent(i + 1,source[i]);; d1->SetLineColor(kRed);; d1->Draw(""SAME L"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,6,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d2->SetBinContent(i + 1,source[i]);; d2->SetLineColor(kBlue);; d2->Draw(""SAME L"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,8,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d3->SetBinContent(i + 1,source[i]);; d3->SetLineColor(kGreen);; d3->Draw(""SAME L"");; }. Example 4 script Background_width2.c:. another example for very complex spectrum is given in Figure 4. Figure 4 Example of the influence of clipping window width on the estimated; background for numberIterations=10 (red line), 20 (blue line), 30 (green line); and 40 (magenta line) using decreasing clipping window algorithm. Script:. // Example to illustrate the influence of the clipping window width on the; // estimated background. To execute this example, do:; // root > .x Background_width2.C; #include ; void Background_width2() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = (Double_t)4096;; Float_t * source = new float[nbins];; TH1F *h = new TH1F(""h"","""",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""back2;1"");; TCanvas *background = gROOT->GetListOfCanvases()->FindObject(""background"");; if (!background) background = new TCanvas(""background"",; ""Influence of clipping window width on the estimated background"",; 10,10,1000,700);; h->SetAxisRange(0,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum.html:20515,green,green,20515,root/html528/TSpectrum.html,https://root.cern,https://root.cern/root/html528/TSpectrum.html,6,['green'],['green']
Energy Efficiency,"h->GetBinContent(i + 1);; s->Background(source,nbins,4,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d1->SetBinContent(i + 1,source[i]);; d1->SetLineColor(kRed);; d1->Draw(""SAME L"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,6,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d2->SetBinContent(i + 1,source[i]);; d2->SetLineColor(kBlue);; d2->Draw(""SAME L"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,8,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d3->SetBinContent(i + 1,source[i]);; d3->SetLineColor(kGreen);; d3->Draw(""SAME L"");; }. Example 4 script Background_width2.c:. another example for very complex spectrum is given in Figure 4. Figure 4 Example of the influence of clipping window width on the estimated; background for numberIterations=10 (red line), 20 (blue line), 30 (green line); and 40 (magenta line) using decreasing clipping window algorithm. Script:. // Example to illustrate the influence of the clipping window width on the; // estimated background. To execute this example, do:; // root > .x Background_width2.C; #include ; void Background_width2() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = 4096;; Double_t * source = new Double_t[nbins];; TH1F *h = new TH1F(""h"","""",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""back2;1"");; TCanvas *background = gROOT->GetListOfCanvases()->FindObject(""background"");; if (!background) background = new TCanvas(""background"",; ""Influence of clipping window width on the estimated background"",; 10,10,1000,700);; h->SetAxisRange(0,1000);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum.html:21696,green,green,21696,root/html602/TSpectrum.html,https://root.cern,https://root.cern/root/html602/TSpectrum.html,4,['green'],['green']
Energy Efficiency,"h. Constructor & Destructor Documentation. ◆ TMonitor() [1/2]. TMonitor::TMonitor ; (; Bool_t ; mainloop = kTRUE). Create a monitor object. ; If mainloop is true the monitoring will be done in the main event loop. ; Definition at line 109 of file TMonitor.cxx. ◆ TMonitor() [2/2]. TMonitor::TMonitor ; (; const TMonitor & ; m). Copy constructor. ; Definition at line 123 of file TMonitor.cxx. ◆ ~TMonitor(). TMonitor::~TMonitor ; (; ). virtual . Cleanup the monitor object. Does not delete sockets being monitored. ; Definition at line 153 of file TMonitor.cxx. Member Function Documentation. ◆ Activate(). void TMonitor::Activate ; (; TSocket * ; sock). virtual . Activate a de-activated socket. ; Definition at line 250 of file TMonitor.cxx. ◆ ActivateAll(). void TMonitor::ActivateAll ; (; ). virtual . Activate all de-activated sockets. ; Definition at line 268 of file TMonitor.cxx. ◆ Add(). void TMonitor::Add ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Add socket to the monitor's active list. ; If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 168 of file TMonitor.cxx. ◆ Class(). static TClass * TMonitor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMonitor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMonitor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 85 of file TMonitor.h. ◆ DeActivate(). void TMonitor::DeActivate ; (; TSocket * ; sock). virtual . De-activate a socket. ; Definition at line 284 of file TMonitor.cxx. ◆ DeActivateAll(). void TMonitor::DeActivateAll ; (; ). virtual . De-activate all activated sockets. ; Definition at line 302 of file TMonitor.cxx. ◆ DeclFileName(). static const char * TMonitor::De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMonitor.html:17759,monitor,monitor,17759,doc/master/classTMonitor.html,https://root.cern,https://root.cern/doc/master/classTMonitor.html,1,['monitor'],['monitor']
Energy Efficiency,"h. ◆ getAnalyticalIntegralWN(). Int_t RooBinSamplingPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. inlineoverridevirtual . Forwards to the PDF's implementation. ; Reimplemented from RooAbsReal.; Definition at line 46 of file RooBinSamplingPdf.h. ◆ getGenerator(). Int_t RooBinSamplingPdf::getGenerator ; (; const RooArgSet & ; directVars, . RooArgSet & ; generateVars, . bool ; staticInitOK = true . ); const. inlineoverridevirtual . Forwards to the PDF's implementation. ; Reimplemented from RooAbsPdf.; Definition at line 83 of file RooBinSamplingPdf.h. ◆ getMaxVal(). Int_t RooBinSamplingPdf::getMaxVal ; (; const RooArgSet & ; vars); const. inlineoverridevirtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented from RooAbsReal.; Definition at line 95 of file RooBinSamplingPdf.h. ◆ initGenerator(). void RooBinSamplingPdf::initGenerator ; (; Int_t ; code). inlineoverridevirtual . Forwards to the PDF's implementation. ; Reimplemented from RooAbsPdf.; Definition at line 87 of file RooBinSamplingPdf.h. ◆ integrate(). double RooBinSamplingPdf::integrate ; (; const RooArgSet * ; normSet, . double ; low, . double ; high . ); const. private . Integrate the wrapped PDF using our current integrator, with given norm set and limits. ; Definition at line 302 of file RooBinSamplingPdf.cxx. ◆ integrator(). std::unique_ptr< ROOT::Math::IntegratorOneDim > & RooBinSamplingPdf::integrator ; (; ); const. Direct access to the unique_ptr holding the integrator that's used to sample the bins. ; This can be used to change options such as sampling accuracy or to entirely exchange the integrator.; Example: Use ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:85838,efficient,efficiently,85838,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,1,['efficient'],['efficiently']
Energy Efficiency,"h2D (Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with three vectors of doubles as input. ;  ;  TGraph2D (Int_t n, Float_t *x, Float_t *y, Float_t *z);  Graph2D constructor with three vectors of floats as input. ;  ;  TGraph2D (Int_t n, Int_t *x, Int_t *y, Int_t *z);  Graph2D constructor with three vectors of ints as input. ;  ;  TGraph2D (TH2 *h2);  Graph2D constructor with a TH2 (h2) as input. ;  ;  ~TGraph2D () override;  TGraph2D destructor. ;  ; virtual void Add (TF2 *f, Double_t c1=1);  Performs the operation: z = z + c1*f(x,y,z) Errors are not recalculated. ;  ; virtual void AddPoint (Double_t x, Double_t y, Double_t z);  Append a new point to the graph. ;  ; virtual void Apply (TF2 *f);  Apply function f to all the data points f may be a 2-D function TF2 or 3-d function TF3 The Z values of the 2D graph are replaced by the new values computed using the function. ;  ; void Browse (TBrowser *) override;  Browse. ;  ; void Clear (Option_t *option="""") override;  Free all memory allocated by this object. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the graph to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Computes distance from point px,py to a graph. ;  ; void Draw (Option_t *option=""P0"") override;  Specific drawing options can be used to paint a TGraph2D: ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Executes action corresponding to one event. ;  ; TObject * FindObject (const char *name) const override;  search object named name in the list of functions ;  ; TObject * FindObject (const TObject *obj) const override;  search object obj in the list of functions ;  ; virtual TFitResultPtr Fit (const char *formula, Option_t *option="""", Option_t *goption="""");  Fits this graph with function with name fname Predefined functions such as gaus, expo and poln are automatically created by ROOT. ;  ; virtual TFitResultPtr Fit (TF2 *f2, Option_t *option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2D.html:12700,allocate,allocated,12700,doc/master/classTGraph2D.html,https://root.cern,https://root.cern/doc/master/classTGraph2D.html,3,['allocate'],['allocated']
Energy Efficiency,"h::Derivator::GSLFuncPointer& f, void* p = 0). Construct using a GSL function pointer type; @param f : free function pointer of the GSL required type; @param p : pointer to the object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Derivator.html:3446,adapt,adaptive,3446,root/html526/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Derivator.html,7,['adapt'],['adaptive']
Energy Efficiency,"h::IBaseFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::BinData. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::SparseData. ROOT::Fit::UnBinData. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>←. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::BinData>; ←. ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>; ←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>. ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>←. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::BinData>; ←. ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>; ←. ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>. ROOT::Math::BasicMinimizer←. ROOT::Math::GSLMinimizer. ROOT::Math::GSLNLSMinimizer. ROOT::Math::GSLSimAnMinimizer. ROOT::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ClassHierarchy.html:1385,Adapt,AdaptiveIntegratorMultiDim,1385,root/html604/ClassHierarchy.html,https://root.cern,https://root.cern/root/html604/ClassHierarchy.html,1,['Adapt'],['AdaptiveIntegratorMultiDim']
Energy Efficiency,"hSizesize_t batchSize() constmini-batch sizeDefinition NeuralNet.h:767; TMVA::DNN::Settings::computeResultvirtual void computeResult(const Net &, std::vector< double > &)callback for monitoring and loggingDefinition NeuralNet.h:809; TMVA::DNN::Settings::fMonitoringstd::shared_ptr< Monitoring > fMonitoringDefinition NeuralNet.h:865; TMVA::DNN::Settings::dropRepetitionssize_t dropRepetitions() constDefinition NeuralNet.h:761; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max)for monitoringDefinition NeuralNet.h:819; TMVA::DNN::Settings::fRepetitionsint fRepetitionsDefinition NeuralNet.h:854; TMVA::DNN::Settings::minErrorsize_t minError() constreturns the smallest error so farDefinition NeuralNet.h:829; TMVA::DNN::Settings::startTrainingvirtual void startTraining()Definition NeuralNet.h:795; TMVA::DNN::Settings::m_maxConvergenceCountsize_t m_maxConvergenceCountDefinition NeuralNet.h:858; TMVA::DNN::Settings::startTestCyclevirtual void startTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:804; TMVA::DNN::SteepestSteepest Gradient Descent algorithm (SGD)Definition NeuralNet.h:334; TMVA::DNN::Steepest::m_repetitionssize_t m_repetitionsDefinition NeuralNet.h:337; TMVA::DNN::Steepest::m_betadouble m_betainternal parameter (momentum)Definition NeuralNet.h:372; TMVA::DNN::Steepest::m_localGradientsstd::vector< double > m_localGradientslocal gradients for reuse in thread.Definition NeuralNet.h:376; TMVA::DNN::Steepest::m_prevGradientsstd::vector< double > m_prevGradientsvector remembers the gradients of the previous stepDefinition NeuralNet.h:373; TMVA::DNN::Steepest::m_alphadouble m_alphainternal parameter (learningRate)Definition NeuralNet.h:371; TMVA::DNN::Steepest::m_localWeightsstd::vector< double > m_localWeightslocal weights for reuse in thread.Definition NeuralNet.h:375; TMVA::DNN::Steepest::operator()double operator()(Function &fitnessFunction, Weights &weights, PassThrough &passThrough)operator to call",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:78152,monitor,monitoring,78152,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['monitor'],['monitoring']
Energy Efficiency,"ha = 1.); Perform a rank 1 operation on the matrix:; A += alpha * v * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixT<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixTSym<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . Element TMatrixTSym<Element> Similarity(const TVectorT<float>& v) const; Calculate scalar v * (*this) * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> SimilarityT(const TMatrixT<float>& n); Calculate B^T * (*this) * B , final matrix will be (ncolsb x ncolsb); It is more efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> operator=(const TMatrixTSym<Element> &source). TMatrixTSym<Element> &TMatrixTSym<Element> operator=(const TMatrixTSymLazy<Element> &lazy_constructor). TMatrixTSym<Element> &TMatrixTSym<Element> operator=(Element val); Assign val to every element of the matrix. TMatrixTSym<Element> &TMatrixTSym<Element> operator+=(Element val); Add val to every element of the matrix. TMatrixTSym<Element> &TMatrixTSym<Element> operator-=(Element val); Subtract val from every element of the matrix. TMatrixTSym<Element> &TMatrixTSym<Element> operator*=(float val); Multiply every element of the matrix with val. TMatrixTSym<Element> &TMatrixTSym<Element> operator+=(const TMatrixTSym<Element> &source); Add the source matrix. TMatrixTSym<Element> &TMatrixTSym<Element> operator-=(const TMatrixTSym<Element> &source); Subtract the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTSym_float_.html:19435,efficient,efficient,19435,root/html602/TMatrixTSym_float_.html,https://root.cern,https://root.cern/root/html602/TMatrixTSym_float_.html,4,['efficient'],['efficient']
Energy Efficiency,"har *, TVirtualObject *)Definition TSchemaRule.h:40; ROOT::TSchemaRule::ReadRawFuncPtr_tvoid(* ReadRawFuncPtr_t)(char *, TBuffer &)Definition TSchemaRule.h:41; TBufferFileThe concrete implementation of TBuffer for writing/reading to/from a ROOT file or socket.Definition TBufferFile.h:47; TBufferFile::kStreamedMemberWise@ kStreamedMemberWiseDefinition TBufferFile.h:69; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43; TClassTClass instances represent classes, structs and namespaces in the ROOT type system.Definition TClass.h:81; TClass::Streamervoid Streamer(void *obj, TBuffer &b, const TClass *onfile_class=nullptr) constDefinition TClass.h:607; TClass::NewArrayvoid * NewArray(Long_t nElements, ENewType defConstructor=kClassNew) constReturn a pointer to a newly allocated array of objects of this class.Definition TClass.cxx:5260; TClass::GetStateEState GetState() constDefinition TClass.h:488; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TClass::IsStartingWithTObjectBool_t IsStartingWithTObject() constReturns true if this class inherits from TObject and if the start of the TObject parts is at the very...Definition TClass.cxx:5996; TClass::SizeInt_t Size() constReturn size of object of this class.Definition TClass.cxx:5771; TClass::DeleteArrayvoid DeleteArray(void *ary, Bool_t dtorOnly=kFALSE)Explicitly call operator delete[] for an array.Definition TClass.cxx:5596; TClass::GetStreamerInfoTVirtualStreamerInfo * GetStreamerInfo(Int_t version=0, Bool_t isTransient=kFALSE) constreturns a pointer to the TVirtualStreamerInfo object for version If the object does not exist,...Definition TClass.cxx:4666; TClass::GetCollectionProxyTVirtualCollectionProxy * GetCollectionProxy() constReturn the proxy describing the collection (if any).Definition TClass.cxx:2964; TClass::GetConversionStreamerInfoTVirtualStreamerInfo * GetConversio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoReadBuffer_8cxx_source.html:78100,allocate,allocated,78100,doc/master/TStreamerInfoReadBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoReadBuffer_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"har *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; TProof * GetProof () const;  ; Bool_t HandleTimer (TTimer *timer) override;  Send feedback objects to client. ;  ; Int_t InitPacketizer (TDSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector's data members: find the mapping of data members to otuput list entries in the output list and apply it. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects. ;  ; void StopFeedback () override;  Stop reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayer; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bool_t &w80r, Bool_t &w80v, TString &wmsg);  Check the memory usage, if requested. ;  ; virtual Int_t DrawCanvas (TObject *obj);  Draw the object if it is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:19891,monitor,monitor,19891,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['monitor'],['monitor']
Energy Efficiency,"har* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. boolfAdaptiveSamplingcontrols use of adaptive sampling algorithm; RooStats::ConfidenceBelt*fConfBelt; boolfCreateBeltcontrols use if ConfidenceBelt should be saved to a TFile; RooAbsData*fDatadata set ; Double_tfLeftSideFraction; RooArgSetfNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSetfPOIRooArgSet specifying parameters of interest for interval; RooAbsPdf*fPdfcommon PDF; RooAbsData*fPointsToTest; boolfSaveBeltToFilecontrols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::TestStatSampler*fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NeymanConstruction(); default constructor; fWS = new RooWorkspace();; fOwnsWorkspace = true;; fDataName = """";; fPdfName = """";. void SetModel(const RooStats::ModelConfig& ); set the model. ~NeymanConstruction(); default constructor; if(fOwnsWorkspace && fWS) delete fWS;; if(fConfBelt) delete fConfBelt;. ConfInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::SetInterval. TList* GenSamplingDistribution(const char* asciiFilePat = 0) const; This method generates the sampling distribution for each point of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__NeymanConstruction.html:8700,adapt,adaptive,8700,root/html526/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html526/RooStats__NeymanConstruction.html,1,['adapt'],['adaptive']
Energy Efficiency,"har* name, const char* title, RooDataHist* h, const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange, Int_t nStart, Int_t nStop, Bool_t copyCache); Constructor of a data hist from (part of) an existing data hist. The dimensions; of the data set are defined by the 'vars' RooArgSet, which can be identical; to 'dset' dimensions, or a subset thereof. Reduced dimensions will be projected; in the output data hist. The optional 'cutVar' formula variable can used to; select the subset of bins to be copied. For most uses the RooAbsData::reduce() wrapper function, which uses this constructor,; is the most convenient way to create a subset of an existing data. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0); Construct a clone of this dataset that contains only the cached variables. RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE); Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ~RooDataHist(); Destructor. Int_t getIndex(const RooArgSet& coord). Int_t calcTreeIndex() const; Calculate the index for the weights array corresponding to; to the bin enclosing the current coordinates of the internal argset. void dump2(); Debug stuff, should go... RooPlot * plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; Back end function to plotting functionality. Plot RooDataHist on given; frame in mode specified by plot options 'o'. The main purpose of; this function is to match the specified binning on 'o' to the; internal binning of the plot observable in this RooDataHist. Double_t weight(const RooArgSet& bin, Int_t intOrder = 1, Bool_t correctForBinSize = kFALSE, Bool_t cdfBoundaries = kFALSE); Return the weight at given coordinates with optional; interpolation. If intOrder is zero, the weight; for the bin enclosing the coordinates; contained",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataHist.html:25748,reduce,reduceEng,25748,root/html526/RooDataHist.html,https://root.cern,https://root.cern/root/html526/RooDataHist.html,4,['reduce'],"['reduce', 'reduceEng']"
Energy Efficiency,"har* name, const char* title, RooDataHist* h, const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange, Int_t nStart, Int_t nStop, Bool_t copyCache); Constructor of a data hist from (part of) an existing data hist. The dimensions; of the data set are defined by the 'vars' RooArgSet, which can be identical; to 'dset' dimensions, or a subset thereof. Reduced dimensions will be projected; in the output data hist. The optional 'cutVar' formula variable can used to; select the subset of bins to be copied. For most uses the RooAbsData::reduce() wrapper function, which uses this constructor,; is the most convenient way to create a subset of an existing data. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0); Construct a clone of this dataset that contains only the cached variables. RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE); Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ~RooDataHist(); Destructor. Int_t getIndex(const RooArgSet& coord). Int_t calcTreeIndex() const; Calculate the index for the weights array corresponding to; to the bin enclosing the current coordinates of the internal argset. void dump2(); Debug stuff, should go... RooPlot * plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; Back end function to plotting functionality. Plot RooDataHist on given; frame in mode specified by plot options 'o'. The main purpose of; this function is to match the specified binning on 'o' to the; internal binning of the plot observable in this RooDataHist. Double_t weight(const RooArgSet& bin, Int_t intOrder = 1, Bool_t correctForBinSize = kFALSE, Bool_t cdfBoundaries = kFALSE, Bool_t oneSafe = kFALSE); Return the weight at given coordinates with optional; interpolation. If intOrder is zero, the weight; for the bin enclosing t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDataHist.html:27002,reduce,reduceEng,27002,root/html530/RooDataHist.html,https://root.cern,https://root.cern/root/html530/RooDataHist.html,6,['reduce'],"['reduce', 'reduceEng']"
Energy Efficiency,"har* name, const char* title, RooDataHist* h, const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange, Int_t nStart, Int_t nStop, Bool_t copyCache); Constructor of a data hist from (part of) an existing data hist. The dimensions; of the data set are defined by the 'vars' RooArgSet, which can be identical; to 'dset' dimensions, or a subset thereof. Reduced dimensions will be projected; in the output data hist. The optional 'cutVar' formula variable can used to; select the subset of bins to be copied. For most uses the RooAbsData::reduce() wrapper function, which uses this constructor,; is the most convenient way to create a subset of an existing data. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0); Construct a clone of this dataset that contains only the cached variables. RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE); Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ~RooDataHist(); Destructor. Int_t getIndex(const RooArgSet& coord, Bool_t fast = kFALSE). Int_t calcTreeIndex() const; Calculate the index for the weights array corresponding to; to the bin enclosing the current coordinates of the internal argset. void dump2(); Debug stuff, should go... RooPlot * plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; Back end function to plotting functionality. Plot RooDataHist on given; frame in mode specified by plot options 'o'. The main purpose of; this function is to match the specified binning on 'o' to the; internal binning of the plot observable in this RooDataHist. Double_t weightSquared() const. Double_t weight(const RooArgSet& bin, Int_t intOrder = 1, Bool_t correctForBinSize = kFALSE, Bool_t cdfBoundaries = kFALSE, Bool_t oneSafe = kFALSE); Return the weight at given coordinates with optional; interpolation. If",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataHist.html:28017,reduce,reduceEng,28017,root/html534/RooDataHist.html,https://root.cern,https://root.cern/root/html534/RooDataHist.html,12,['reduce'],"['reduce', 'reduceEng']"
Energy Efficiency,"haracter string to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure:; make pseudoexperiments based on random values from the parent; distribution and compare the KS distance of the pseudoexperiment; to the parent distribution. Bin the KS distances in a histogram,; and then take the integral of all the KS values above the value; obtained from the original data to Monte Carlo distribution.; The number of pseudo-experiments nEXPT is currently fixed at 1000.; The function returns the integral.; (thanks to Ben Kilminster to submit this procedure). Note that; this option ""X"" is much slower. The returned function value is the probability of test; (much less than one means NOT compatible). Code adapted by Rene Brun from original HBOOK routine HDIFF. NOTE1; A good description of the Kolmogorov test can be seen at:; http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm. NOTE2; see also alternative function TH1::Chi2Test; The Kolmogorov test is assumed to give better results than Chi2Test; in case of histograms with low statistics. NOTE3 (Jan Conrad, Fred James); ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; depending on ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:108418,adapt,adapted,108418,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,10,['adapt'],['adapted']
Energy Efficiency,"has the same address as the derived class. The streamer; offsets need to be added to the address of the base class; subobject which is not the same as the address of the; derived class for the non-leftmost direct base classes. Bool_t IsFolder() const; -- Return kTRUE if more than one leaf, kFALSE otherwise. Bool_t IsMissingCollection() const; -- Detect a collection written using a zero pointer in old versions of root.; In versions of ROOT older than 4.00/03, if a collection (TClonesArray; or STL container) was split but the pointer to the collection was zeroed; out, nothing was saved. Hence there is no __easy__ way to detect the; case. In newer versions, a zero is written so that a 'missing' collection; appears to be an empty collection. void Print(Option_t* option = """") const; Print branch parameters. void PrintValue(Int_t i) const; -- Prints values of leaves. void ReadLeaves(TBuffer& b); -- Read leaves into i/o buffers for this branch. void ReleaseObject(); -- Delete any object we may have allocated on a previous call to SetAddress. void Reset(Option_t* option = """"); -- Reset a Branch. Existing i/o buffers are deleted.; Entries, max and min are reset. void ResetAddress(); Set branch address to zero and free all allocated memory. void ResetDeleteObject(); -- Release ownership of any allocated objects. Note: This interface was added so that clone trees could; be told they do not own the allocated objects. void SetAddress(void* addobj); -- Point this branch at an object. For a sub-branch, addr is a pointer to the branch object. For a top-level branch the meaning of addr is as follows:. If addr is zero, then we allocate a branch object; internally and the branch is the owner of the allocated; object, not the caller. However the caller may obtain; a pointer to the branch object with GetObject(). Example:. branch->SetAddress(0);; Event* event = branch->GetObject();; ... Do some work. If addr is not zero, but the pointer addr points at is; zero, then we allocate a branch ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchElement.html:23267,allocate,allocated,23267,root/html526/TBranchElement.html,https://root.cern,https://root.cern/root/html526/TBranchElement.html,1,['allocate'],['allocated']
Energy Efficiency,"has the side-effect of allowing the extension of the concept ‘base class that prevent its derived class from being split’ to any user class. This fixes [ROOT-7972].; Reduce autoparse occasions by autoloading libraries also based on their type_info-derived name, instead of only their normalized name.; Improve TClassEdit’s handling of STL’s default allocator, in particular for std::map ROOT-8048. Dictionaries. Add the -noIncludePaths and –noIncludePaths to rootcling and genereflex respectively to avoid storing in the dictionaries the include paths passed with the “-I” switch. ROOT will rely on ROOT_INCLUDE_PATH only at runtime to find headers. I/O. Resolve an issue when space is freed in a large ROOT file and a TDirectory is updated and stored the lower (less than 2GB) freed portion of the file [ROOT-8055]. TTree. Do not automatically setup read cache during TTree::Fill(). This fixes [ROOT-8031]. Fast Cloning. Added a cache specifically for the fast option of the TTreeCloner to significantly reduce the run-time when fast-cloning remote files to address [ROOT-5078].; The new cache can be controlled from the TTreeCloner, TTree::CopyEntries or hadd interfaces.; The new cache is enabled by default.; To update the size of the cache or disable it:; From TTreeCloner use: TTreeCloner::SetCacheSize; From TTree::CopyEntries add to the option string ""cachesize=SIZE""; From hadd, use the command line option -cachesize SIZE; SIZE should be given in number bytes and can be expressed in ‘human readable form’ (number followed by size unit like MB, MiB, GB or GiB, etc. or SIZE can be set zero to disable the cache. Release 6.04/18; Published on 2016-06-22.; Core. Fix the validity of TRef after the first ProcessID is full. TTree. Properly handle the last element of arrays in the TTreeFormula functions MinIf and MaxIf ROOT-7258. Bugs and issues fixed. [ROOT-6923] - Memory leak with circular TTree; [ROOT-7258] - MinIf and MaxIf TTreeFormula functions ignore last element; [ROOT-7867] - memp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:38756,reduce,reduce,38756,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['reduce'],['reduce']
Energy Efficiency,"hastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the Polak-Ribiere updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Conjugate gradients with the Fletcher-Reeves updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Broyden, Fletcher, Goldfarb, Shanno (BFGS) method:; Implies the computation of a NxN matrix computation, but seems more powerful at least for less than 300 weights. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent. How to use it...; TMLP is build from 3 classes: TNeuron, TSynapse and TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used explicitly by the user.; TMultiLayerPerceptron will take examples from a TTree given in the constructor. The network is described by a simple string: The input/output layers are defined by giving the expression for each neuron, separated by comas. Hidden layers are just described by the number of neurons. The layers are separated by colons. In addition, input/output layer formulas can be preceded by '@' (e.g ""@out"") if one wants to also normalize the data from the TTree. Input and outputs are taken from the TTree given as second argument. Expressions are evaluated as for TTree::Draw(), arrays are expended in distinct neurons, one for each index. This can only be d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:5841,power,powerful,5841,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['power'],['powerful']
Energy Efficiency,"hat dimension, the entire line will be ignored. A warning message is printed in each case, unless the Q verbose option is given. The number of events read and skipped is always summarized at the end.; If no further information is given a label name 'fileNNN' will be assigned to each event, where NNN is the sequential number of the source file in fileList.; Alternatively, it is possible to override the default label names of the index category by specifying them in the fileList string: When instead of file1.txt,file2.txt the string file1.txt:FOO,file2.txt:BAR is specified, a state named ""FOO"" is assigned to the index category for each event originating from file1.txt. The labels FOO,BAR may be predefined in the index category via defineType(), but don't have to be.; Finally, one can also assign the same label to multiple files, either by specifying file1.txt:FOO,file2,txt:FOO,file3.txt:BAR or file1.txt,file2.txt:FOO,file3.txt:BAR. ; Definition at line 1372 of file RooDataSet.cxx. ◆ reduceEng(). std::unique_ptr< RooAbsData > RooDataSet::reduceEng ; (; const RooArgSet & ; varSubset, . const RooFormulaVar * ; cutVar, . const char * ; cutRange = nullptr, . std::size_t ; nStart = 0, . std::size_t ; nStop = std::numeric_limits<std::size_t>::max() . ); const. overrideprotectedvirtual . Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ; Implements RooAbsData.; Definition at line 684 of file RooDataSet.cxx. ◆ SetName(). void RooDataSet::SetName ; (; const char * ; name). overridevirtual . Change the name of this dataset into the given name. ; Reimplemented from RooAbsData.; Definition at line 1647 of file RooDataSet.cxx. ◆ SetNameTitle(). void RooDataSet::SetNameTitle ; (; const char * ; name, . const char * ; title . ). overridevirtual . Change the title of this dataset into the given name. ; Reimplemented from RooAbsData.; Definition at line 1659 of file RooDataSet.cxx. ◆ Streamer(). void RooDataSet::Streamer ; (; TBuffer & ; R__b). o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:56038,reduce,reduceEng,56038,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['reduce'],['reduceEng']
Energy Efficiency,"he Minuit2 interface for TMinuit2-like objective functions; TFeldmanCousins calculate the CL upper limit using the Feldman-Cousins method; TFile ROOT file; TFileCacheRead TFile cache when reading; TFileCacheWrite TFile cache when writing; TFileCollection Collection of TFileInfo objects; TFileDrawMap Draw a 2-d map of the objects in a file; TFileHandler Handles events on file descriptors; TFileInfo Describes generic file info including meta data information; TFileInfoMeta Describes TFileInfo meta data; TFileIter TFile class iterator; TFileMerger File copying and merging services; TFileSet TDataSet class to read the native file system directory structure in; TFileStager ABC defining interface to a stager; TFitEditor Fit Panel interface; TFitParametersDialog Fit function parameters dialog; TFitter The ROOT standard fitter based on TMinuit; TFitterFumili Fitter based on new Fumili method (Fumili2); TFitterMinuit The ROOT fitter based on new Minuit (Minuit2); TFoam General purpose self-adapting Monte Carlo event generator; TFoamCell Single cell of FOAM; TFoamIntegrand n-dimensional real positive integrand of FOAM; TFoamMaxwt Controlling of the MC weight (maximum weight); TFoamVect n-dimensional vector with dynamical allocation; TFolder Describe a folder: a list of objects and folders; TFormula The formula base class f(x,y,z,par); TFormulaPrimitive The primitive formula ; TFractionFitter Fits MC fractions to data histogram; TFrame Pad graphics frame; TFrameEditor editor of TFrame objects; TFree Description of free segments on a file; TFriendElement A friend element of another TTree; TFumili The FUMILI Minimization package; TFumiliMinimizer Implementation of Minimizer interface using TFumili ; TFunction Dictionary for global function; TFunctionParametersDialog Function parameters dialog; TG16ColorSelector 16 color cells; TG4RootNavMgr Class crreating a G4Navigator based on ROOT geometry; TGApplication GUI application singleton; TGButton Button widget abstract base class; TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:66697,adapt,adapting,66697,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['adapt'],['adapting']
Energy Efficiency,"he actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxiliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen | kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDataSetManager.html:15494,monitor,monitoring,15494,root/html602/TDataSetManager.html,https://root.cern,https://root.cern/root/html602/TDataSetManager.html,4,['monitor'],['monitoring']
Energy Efficiency,"he arguments objlen and keylen are returned only; if maxbytes >=16; Note: This was adapted from TFile... so some things dont apply. void ResetCache(); This will delete the list of buffers that are in the unzipping cache; and will reset certain values in the cache.; This name is ambiguos because the method doesn't reset the whole cache,; only the part related to the unzipping; Note: This method is completely different from TTreeCache::ResetCache(),; in that method we were cleaning the prefetching buffer while here we; delete the information about the unzipped buffers. Int_t GetUnzipBuffer(char** buf, Long64_t pos, Int_t len, Bool_t* free); We try to read a buffer that has already been unzipped; Returns -1 in case of read failure, 0 in case it's not in the; cache and n>0 in case read from cache (number of bytes copied).; pos and len are the original values as were passed to ReadBuffer; but instead we will return the inflated buffer.; Note!! : If *buf == 0 we will allocate the buffer and it will be the; responsability of the caller to free it... it is useful for example; to pass it to the creator of TBuffer. void SetUnzipRelBufferSize(Float_t relbufferSize); static function: Sets the unzip relatibe buffer size; FABRIZIO: PLEASE DOCUMENT and also in TTree::Set... void SetUnzipBufferSize(Long64_t bufferSize); Sets the size for the unzipping cache... by default it should be; two times the size of the prefetching cache. Int_t UnzipBuffer(char** dest, char* src); UNzips a ROOT specific buffer... by reading the header at the beginning.; returns the size of the inflated buffer or -1 if error; Note!! : If *dest == 0 we will allocate the buffer and it will be the; responsability of the caller to free it... it is useful for example; to pass it to the creator of TBuffer; src is the original buffer with the record (header+compressed data); *dest is the inflated buffer (including the header). Int_t UnzipCache(Int_t& startindex, Int_t& locbuffsz, char*& locbuff); This inflates all t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCacheUnzip.html:16849,allocate,allocate,16849,root/html528/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html528/TTreeCacheUnzip.html,10,['allocate'],['allocate']
Energy Efficiency,"he clip current to see the effect.; 9.13.2.6 Manipulators; Manipulators are GUI ‘widgets’ or controls attached to a 3D object in the viewer, allowing a direct manipulation of the object’s geometry. There are three manipulators for the three basic geometries transformations. In each case, the manipulator consists of three components, one for each local axis of the object, shown in standard colors: red (X), green (Y) and blue (Z). GL Viewer object manipulators. Activate the manipulator by moving the mouse over one of these components (which turns yellow to indicate active state). Click with left mouse and drag this active component to perform the manipulation. Toggle between the manipulator types using the ‘x’, ‘c’, ‘v’ keys while the mouse cursor is above the manipulator. Note: Manipulators cannot be controlled via the API at present.; 9.13.2.7 Guides; Guides are visual aids drawn into the viewer world. Controls for these are under the “Guides” tab:; Viewer Controls Pane Guides Tab; Axes show the world (global) frame coordinatedirections: X (red), Y (green) and Z (blue). The negative portion of the axis line is shown in dark color, the positive in bright. The axis name and minimum / maximum values are labeled in the same color. There are three options for axes drawing - selected by radio buttons:. None - not drawn (default).; Edge - draw axes on the (minimum) edge of the scene extents box.; Origin - drawn axes through the origin. For edge axes, the zero value for each axis is marked on the axis line with a colored sphere. For origin axes, a single white sphere is shown at the origin.; Edge axes are depth clipped - i.e. are obscured by 3D objects in front of them. Origin axes (which generally pass through the middle of the 3D scene) are not depth clipped - so always visible.; A single orange sphere of fixed view port (window) size can be shown at any arbitrary position. Enable / disable the drawing with ‘Show’ checkbox. Enter X/Y/Z position in the edit boxes to set pos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:396852,green,green,396852,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['green'],['green']
Energy Efficiency,"he equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points.; The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. RooAbsData* reduce(const RooArgSet& varSubset, const char* cut = 0); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. Double_t weightError(RooAbsData::ErrorType etype = Poisson) const; Return error on current weight (dummy implementation returning zero). void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; Return asymmetric error on weight. (Dummy implementation returning zero). RooPlot* plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()) const; Plot dataset on specified frame. By default an unbinned dataset will use the default binning of; the target frame. A binned dataset will by default retain its intrinsic binning. The following optional named arguments can be used to modify the default be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsData.html:17058,reduce,reduced,17058,root/html528/RooAbsData.html,https://root.cern,https://root.cern/root/html528/RooAbsData.html,9,['reduce'],['reduced']
Energy Efficiency,"he file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(const char* paths, UChar_t* info); Retrieve status of a '\n'-separated list of files in 'paths'.; The information is returned as one UChar_t per file in 'info';; 'info' must be allocated by the caller. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. Int_t Locate(const char* path, TString& endurl); Get end-point url of a file. Info is returned in eurl.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. XrdClientAdmin * GetClientAdmin(const char* url); Checks if an admin for 'url' exists already.; Avoid duplications. TString GetKey(const char* url); Build from uu a unique ID key used in hash tables. void * GetDirPtr() const; { return fDirp; }. TXNetSystem(Bool_t owner = kTRUE). virtual ~TXNetSystem(); { }. » Author: Frank Winklmeier, Fabrizio Furano » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TXNetSystem.html:23720,allocate,allocated,23720,root/html604/TXNetSystem.html,https://root.cern,https://root.cern/root/html604/TXNetSystem.html,2,['allocate'],['allocated']
Energy Efficiency,"he file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(const char* paths, UChar_t* info); Retrieve status of a '\n'-separated list of files in 'paths'.; The information is returned as one UChar_t per file in 'info';; 'info' must be allocated by the caller. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. Int_t Locate(const char* path, TString& endurl); Get end-point url of a file. Info is returned in eurl.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. XrdClientAdmin * GetClientAdmin(const char* url); Checks if an admin for 'url' exists already.; Avoid duplications. TString GetKey(const char* url); Build from uu a unique ID key used in hash tables. void * GetDirPtr() const; { return fDirp; }. TXNetSystem(Bool_t owner = kTRUE). virtual ~TXNetSystem(); { }. » Author: Frank Winklmeier, Fabrizio Furano » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetSystem.html:23720,allocate,allocated,23720,root/html602/TXNetSystem.html,https://root.cern,https://root.cern/root/html602/TXNetSystem.html,2,['allocate'],['allocated']
Energy Efficiency,"he file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(const char* paths, UChar_t* info); Retrieve status of a '\n'-separated list of files in 'paths'.; The information is returned as one UChar_t per file in 'info';; 'info' must be allocated by the caller. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. Int_t Locate(const char* path, TString& endurl); Get end-point url of a file. Info is returned in eurl.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. XrdClientAdmin * GetClientAdmin(const char* url); Checks if an admin for 'url' exists already.; Avoid duplications. TString GetKey(const char* url); Build from uu a unique ID key used in hash tables. void * GetDirPtr() const; { return fDirp; }. virtual ~TXNetSystem(); { }. » Author: Frank Winklmeier, Fabrizio Furano » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mai",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXNetSystem.html:23081,allocate,allocated,23081,root/html534/TXNetSystem.html,https://root.cern,https://root.cern/root/html534/TXNetSystem.html,2,['allocate'],['allocated']
Energy Efficiency,"he file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(const char* paths, UChar_t* info); Retrieve status of a '\n'-separated list of files in 'paths'.; The information is returned as one UChar_t per file in 'info';; 'info' must be allocated by the caller. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. Int_t Locate(const char* path, TString& endurl); Get end-point url of a file. Info is returned in eurl.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. XrdClientAdmin * GetClientAdmin(const char* url); Checks if an admin for 'url' exists already.; Avoid duplications. TString GetKey(const char* url); Build from uu a unique ID key used in hash tables. void * GetDirPtr() const; { return fDirp; }. virtual ~TXNetSystem(); { }. » Author: Frank Winklmeier, Fabrizio Furano » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id: TXNetSystem.h 30170 2009-09-15 13:35:35Z rdm $ » Last generated: 2010-10-08 16:04; This page has been automatically generated. For comments or suggestions regarding the doc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXNetSystem.html:22773,allocate,allocated,22773,root/html528/TXNetSystem.html,https://root.cern,https://root.cern/root/html528/TXNetSystem.html,1,['allocate'],['allocated']
Energy Efficiency,"he file or directory).; Mode is the same as for the Unix access(2) function.; Attention, bizarre convention of return value!!. int Unlink(const char* path); Unlink 'path' on the remote server system.; Returns 0 on success, -1 otherwise. Bool_t IsOnline(const char* path); Check if the file defined by 'path' is ready to be used. Bool_t Prepare(const char* path, UChar_t opt = 8, UChar_t prio = 0); Issue a prepare request for file defined by 'path'. Int_t Prepare(TCollection* paths, UChar_t opt = 8, UChar_t prio = 0, TString* buf = 0); Issue a prepare request for a list of files defined by 'paths', which must; be of one of the following types: TFileInfo, TUrl, TObjString.; On output, bufout, if defined, points to a buffer form that can be used; with GetPathsInfo.; Return the number of paths found or -1 if any error occured. Bool_t GetPathsInfo(const char* paths, UChar_t* info); Retrieve status of a '\n'-separated list of files in 'paths'.; The information is returned as one UChar_t per file in 'info';; 'info' must be allocated by the caller. Bool_t IsPathLocal(const char* path); Returns TRUE if the url in 'path' points to the local file system.; This is used to avoid going through the NIC card for local operations. Int_t Locate(const char* path, TString& endurl); Get end-point url of a file. Info is returned in eurl.; The function returns 0 in case of success and 1 if the file could; not be stat'ed. XrdClientAdmin * GetClientAdmin(const char* url); Checks if an admin for 'url' exists already.; Avoid duplications. TString GetKey(const char* url); Build from uu a unique ID key used in hash tables. void * GetDirPtr() const; { return fDirp; }. virtual ~TXNetSystem(); { }. » Author: Frank Winklmeier, Fabrizio Furano » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id: TXNetSystem.h 30170 2009-09-15 13:35:35Z rdm $ » Last generated: 2011-07-04 15:39; This page has been automatically generated. For comments or suggestions regarding the doc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TXNetSystem.html:22901,allocate,allocated,22901,root/html530/TXNetSystem.html,https://root.cern,https://root.cern/root/html530/TXNetSystem.html,1,['allocate'],['allocated']
Energy Efficiency,"he gradient of a; 158 multi-dimensional function.; 159 Three methods are provided:; 160 - Gradient(const double *x, double * grad) evaluate the full gradient vector at the vector value x; 161 - Derivative(const double * x, int icoord) evaluate the partial derivative for the icoord coordinate; 162 - FdF(const double *x, double &f, double * g) evaluate at the same time gradient and function/; 163 ; 164 @ingroup GenFunc; 165 */; 166 ; 167 template <class T>; 168 class IGradientFunctionMultiDimTempl : virtual public IBaseFunctionMultiDimTempl<T> {; 169 ; 170 public:; 171 typedef IBaseFunctionMultiDimTempl<T> BaseFunc;; 172 typedef IGradientFunctionMultiDimTempl<T> BaseGrad;; 173 ; 174 ; 175 /// Evaluate all the vector of function derivatives (gradient) at a point x.; 176 /// Derived classes must re-implement it if more efficient than evaluating one at a time; 177 virtual void Gradient(const T *x, T *grad) const; 178 {; 179 unsigned int ndim = NDim();; 180 for (unsigned int icoord = 0; icoord < ndim; ++icoord) {; 181 grad[icoord] = Derivative(x, icoord);; 182 }; 183 }; 184 ; 185 /// In some cases, the gradient algorithm will use information from the previous step, these can be passed; 186 /// in with this overload. The `previous_*` arrays can also be used to return second derivative and step size; 187 /// so that these can be passed forward again as well at the call site, if necessary.; 188 virtual void GradientWithPrevResult(const T *x, T *grad, T *previous_grad, T *previous_g2, T *previous_gstep) const; 189 {; 190 unsigned int ndim = NDim();; 191 for (unsigned int icoord = 0; icoord < ndim; ++icoord) {; 192 grad[icoord] = Derivative(x, icoord, previous_grad, previous_g2, previous_gstep);; 193 }; 194 }; 195 ; 196 using BaseFunc::NDim;; 197 ; 198 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 199 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 200 /// Deri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/IFunction_8h_source.html:7205,efficient,efficient,7205,doc/master/IFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html,1,['efficient'],['efficient']
Energy Efficiency,"he histogram parameters; # These ensure that the bin contents of the histograms are only allowed to vary within; # the statistical uncertainty of the Monte Carlo.; hc_sig = ROOT.RooHistConstraint(""hc_sig"", ""hc_sig"", p_ph_sig1); hc_bkg = ROOT.RooHistConstraint(""hc_bkg"", ""hc_bkg"", p_ph_bkg1); ; # Construct the joint model with template PDFs and constraints; model1 = ROOT.RooProdPdf(""model1"", ""model1"", {hc_sig, hc_bkg}, Conditional=(model_tmp, x)); ; ; # Case 2 - 'Barlow Beeston' light (one parameter per bin for all samples); ; # Construct the histogram shapes, using the same parameters for signal and background; # This requires passing the first histogram to the second, so that their common parameters; # can be re-used.; # The first ParamHistFunc will create one parameter per bin, such as `p_ph_sig2_gamma_bin_0`.; # This allows bin 0 to fluctuate up and down.; # Then, the SAME parameters are connected to the background histogram, so the bins fluctuate; # synchronously. This reduces the number of parameters.; p_ph_sig2 = ROOT.RooParamHistFunc(""p_ph_sig2"", ""p_ph_sig2"", dh_sig, x); p_ph_bkg2 = ROOT.RooParamHistFunc(""p_ph_bkg2"", ""p_ph_bkg2"", dh_bkg, x, p_ph_sig2, True); ; Asig2 = ROOT.RooRealVar(""Asig"", ""Asig"", 1, 0.01, 5000); Abkg2 = ROOT.RooRealVar(""Abkg"", ""Abkg"", 1, 0.01, 5000); ; # As before, construct the sum of signal2 and background2; model2_tmp = ROOT.RooRealSumPdf(""sp_ph"", ""sp_ph"", [p_ph_sig2, p_ph_bkg2], [Asig2, Abkg2], True); ; # Construct the subsidiary poisson measurements constraining the statistical fluctuations; hc_sigbkg = ROOT.RooHistConstraint(""hc_sigbkg"", ""hc_sigbkg"", {p_ph_sig2, p_ph_bkg2}); ; # Construct the joint model; model2 = ROOT.RooProdPdf(""model2"", ""model2"", hc_sigbkg, Conditional=(model2_tmp, x)); ; ; # ************ Fit all models to data and plot *********************; ; result0 = model0.fitTo(sumData, PrintLevel=0, Save=True); result1 = model1.fitTo(sumData, PrintLevel=0, Save=True); result2 = model2.fitTo(sumData, PrintLevel=0, Save=True); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html:3317,reduce,reduces,3317,doc/master/rf709__BarlowBeeston_8py.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8py.html,1,['reduce'],['reduces']
Energy Efficiency,"he hyperbolic cosine of x. ;  ; template<typename T > ; T * TMath::Cross (const T v1[3], const T v2[3], T out[3]);  Calculates the Cross Product of two vectors: out = [v1 x v2]. ;  ; constexpr Double_t TMath::CUncertainty ();  Speed of light uncertainty. ;  ; constexpr Double_t TMath::DegToRad ();  Conversion from degree to radian: \( \frac{\pi}{180} \). ;  ; Double_t TMath::DiLog (Double_t x);  Modified Struve functions of order 1. ;  ; constexpr Double_t TMath::E ();  Base of natural log: \( e \). ;  ; Double_t TMath::Erf (Double_t x);  Computation of the error function erf(x). ;  ; Double_t TMath::Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t TMath::ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t TMath::ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t TMath::EulerGamma ();  Euler-Mascheroni Constant. ;  ; Double_t TMath::Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t TMath::Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t TMath::FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t TMath::FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t TMath::Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t TMath::Finite (Float_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Double_t TMath::Floor (Double_t x);  Rounds x downward, returning the largest integral value that is not greater than x. ;  ; Int_t TMath::FloorNint (Double_t x);  Returns the nearest integer of TMath::Floor(x). ;  ; Double_t TMath::Freq (Double_t x);  Computation ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h.html:5959,power,power,5959,doc/master/TMath_8h.html,https://root.cern,https://root.cern/doc/master/TMath_8h.html,1,['power'],['power']
Energy Efficiency,"he key references a; 425/// folder in which case we don't want to re-read the folder object; 426/// since it might contain new objects not yet saved.; 427 ; 428void TKey::Browse(TBrowser *b); 429{; 430 if (fMotherDir==0) return;; 431 ; 432 TClass *objcl = TClass::GetClass(GetClassName());; 433 ; 434 void* obj = fMotherDir->GetList()->FindObject(GetName());; 435 if (obj && objcl->IsTObject()) {; 436 TObject *tobj = (TObject*) objcl->DynamicCast(TObject::Class(), obj);; 437 if (!tobj->IsFolder()) {; 438 if (tobj->InheritsFrom(TCollection::Class())); 439 tobj->Delete(); // delete also collection elements; 440 delete tobj;; 441 obj = 0;; 442 }; 443 }; 444 ; 445 if (!obj); 446 obj = ReadObj();; 447 ; 448 if (b && obj) {; 449 objcl->Browse(obj,b);; 450 b->SetRefreshFlag(kTRUE);; 451 }; 452}; 453 ; 454////////////////////////////////////////////////////////////////////////////////; 455/// Create a TKey object of specified size.; 456///; 457/// If externFile!=0, key will be allocated in specified file, otherwise file; 458/// of mother directory will be used.; 459 ; 460void TKey::Create(Int_t nbytes, TFile* externFile); 461{; 462 keyAbsNumber++; SetUniqueID(keyAbsNumber);; 463 ; 464 TFile *f = externFile;; 465 if (!f) f = GetFile();; 466 if (!f) {; 467 Error(""Create"",""Cannot create key without file"");; 468 return;; 469 }; 470 ; 471 Int_t nsize = nbytes + fKeylen;; 472 TList *lfree = f->GetListOfFree();; 473 TFree *f1 = (TFree*)lfree->First();; 474//*-*-------------------find free segment; 475//*-* =================; 476 TFree *bestfree = f1->GetBestFree(lfree,nsize);; 477 if (bestfree == 0) {; 478 Error(""Create"",""Cannot allocate %d bytes for ID = %s Title = %s"",; 479 nsize,GetName(),GetTitle());; 480 return;; 481 }; 482 ; 483 if (f->TestBit(TFile::kReproducible)); 484 SetBit(TKey::kReproducible);; 485 ; 486 fDatime.Set();; 487 fSeekKey = bestfree->GetFirst();; 488//*-*----------------- Case Add at the end of the file; 489 if (fSeekKey >= f->GetEND()) {; 490 f->SetEND(fSeekKe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:16489,allocate,allocated,16489,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"he left. ; alphaRLocation of transition to a power law on the right, in standard deviations away from the mean. ; nRExponent of power-law tail on the right. . Definition at line 73 of file RooCrystalBall.cxx. ◆ RooCrystalBall() [3/5]. RooCrystalBall::RooCrystalBall ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . RooAbsReal & ; x0, . RooAbsReal & ; sigmaLR, . RooAbsReal & ; alphaL, . RooAbsReal & ; nL, . RooAbsReal & ; alphaR, . RooAbsReal & ; nR . ). Create a crystal ball shape with symmetric Gaussian core and asymmetric tails (just like RooDSCBShape). ; Parameters. nameName that identifies the PDF in computations. ; titleTitle for plotting. ; xThe variable of the PDF. ; x0Location parameter of the Gaussian component. ; sigmaLRWidth parameter of the Gaussian component. ; alphaLLocation of transition to a power law on the left, in standard deviations away from the mean. ; nLExponent of power-law tail on the left. ; alphaRLocation of transition to a power law on the right, in standard deviations away from the mean. ; nRExponent of power-law tail on the right. . Definition at line 102 of file RooCrystalBall.cxx. ◆ RooCrystalBall() [4/5]. RooCrystalBall::RooCrystalBall ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . RooAbsReal & ; x0, . RooAbsReal & ; sigmaLR, . RooAbsReal & ; alpha, . RooAbsReal & ; n, . bool ; doubleSided = false . ). Create a crystal ball shape with symmetric Gaussian core and only a tail on one side (just like RooCBShape) or two symmetric tails (like RooSDSCBShape). ; Parameters. nameName that identifies the PDF in computations. ; titleTitle for plotting. ; xThe variable of the PDF. ; x0Location parameter of the Gaussian component. ; sigmaLRWidth parameter of the Gaussian component. ; alphaLocation of transition to a power law, in standard deviations away from the mean. ; nExponent of power-law tail. ; doubleSidedWhether the tail is only on one side or on both sides . Definition at line 129 of file RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCrystalBall.html:77169,power,power,77169,doc/master/classRooCrystalBall.html,https://root.cern,https://root.cern/doc/master/classRooCrystalBall.html,1,['power'],['power']
Energy Efficiency,"he name of the column to redefine. ; [in]expressionFunction, lambda expression, functor class or any other callable object producing the defined value. Returns the value that will be assigned to the defined column. ; [in]columnsNames of the columns/branches in input to the producer function (excluding slot and entry). . Returnsthe first node of the computation graph for which the new quantity is defined.; The old value of the column can be used as an input for the expression. An exception is thrown in case the column to re-define does not already exist.; See DefineSlotEntry() for more information. ; Definition at line 598 of file RInterface.hxx. ◆ Reduce() [1/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName, . const T & ; redIdentity . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. ; [in]redIdentityThe reduced object of each thread is initialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:119325,reduce,reduce,119325,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['reduce'],['reduce']
Energy Efficiency,"he normalization integral for the pdf the same way, i.e.,; // summing the values of the unnormalized pdf at the bin centers. Like this; // the bias cancels out. You can achieve this by customizing the way how the; // pdf is integrated (see also the rf901_numintconfig tutorial).; enableBinIntegrator(expo, x.numBins());; std::unique_ptr<RooFitResult> fit2{expo.fitTo(*expoData, Save(), PrintLevel(-1), SumW2Error(false))};; fit2->Print();; disableBinIntegrator(expo);; ; // Power law example; // -----------------; ; // Let's not look at another example: a power law \f[x^a\f].; RooRealVar a{""a"", ""a"", -0.3, -5.0, 5.0};; RooPowerSum powerlaw{""powerlaw"", ""powerlaw"", x, RooConst(1.0), a};; std::unique_ptr<RooAbsData> powerlawData{generateBinnedAsimov(powerlaw, x, 10000)};; ; // Again, if you do a vanilla fit, you'll get a bias; std::unique_ptr<RooFitResult> fit3{powerlaw.fitTo(*powerlawData, Save(), PrintLevel(-1), SumW2Error(false))};; fit3->Print();; ; // This time, the bias is not the same factor in each bin! This means our; // trick by sampling the integral in the same way doesn't cancel out the; // bias completely. The average bias is canceled, but there are per-bin; // biases that remain. Still, this method has some value: it is cheaper than; // rigurously correcting the bias by integrating the pdf in each bin. So if; // you know your per-bin bias variations are small or performance is an; // issue, this approach can be sufficient.; enableBinIntegrator(powerlaw, x.numBins());; std::unique_ptr<RooFitResult> fit4{powerlaw.fitTo(*powerlawData, Save(), PrintLevel(-1), SumW2Error(false))};; fit4->Print();; disableBinIntegrator(powerlaw);; ; // To get rid of the binning effects in the general case, one can use the; // IntegrateBins() command argument. Now, the pdf is not evaluated at the; // bin centers, but numerically integrated over each bin and divided by the; // bin width. The parameter for IntegrateBins() is the required precision; // for the numeric integrals. This is c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html:4495,power,powerlawData,4495,doc/master/rf614__binned__fit__problems_8C.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html,1,['power'],['powerlawData']
Energy Efficiency,"he object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive cen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Derivator.html:3644,adapt,adaptive,3644,root/html602/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Derivator.html,4,['adapt'],['adaptive']
Energy Efficiency,"he plugin manager. ; Definition at line 12470 of file TProof.cxx. ◆ MakePlayer(). TVirtualProofPlayer * TProof::MakePlayer ; (; const char * ; player = 0, . TSocket * ; s = 0 . ). protectedvirtual . Construct a TProofPlayer object. ; The player string specifies which player should be created: remote, slave, sm (supermaster) or base. Default is remote. Socket is needed in case a slave player is created. ; Reimplemented in TProofSuperMaster.; Definition at line 10211 of file TProof.cxx. ◆ MarkBad() [1/2]. void TProof::MarkBad ; (; TSlave * ; wrk, . const char * ; reason = 0 . ). private . Add a bad slave server to the bad slave list and remove it from the active list and from the two monitor objects. ; Assume that the work done by this worker was lost and ask packerizer to reassign it. ; Definition at line 4521 of file TProof.cxx. ◆ MarkBad() [2/2]. void TProof::MarkBad ; (; TSocket * ; s, . const char * ; reason = 0 . ). private . Add slave with socket s to the bad slave list and remove if from the active list and from the two monitor objects. ; Definition at line 4682 of file TProof.cxx. ◆ Mgr(). TProofMgr * TProof::Mgr ; (; const char * ; url). static . Get instance of the effective manager for 'url' Return 0 on failure. ; Definition at line 11724 of file TProof.cxx. ◆ ModifyWorkerLists(). Int_t TProof::ModifyWorkerLists ; (; const char * ; ord, . Bool_t ; add, . Bool_t ; save . ). private . Modify the worker active/inactive list by making the worker identified by the ordinal number 'ord' active (add == TRUE) or inactive (add == FALSE). ; The string 'ord' can also be a comma-separated list of ordinal numbers the status of which will be modified at once. If needed, the request will be forwarded to the master in direct contact with the worker. The end-master will move the worker from one list to the other active and rebuild the list of unique active workers. Use ord = ""*"" to deactivate all active workers. If save is TRUE the current active list is saved before any mod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:116898,monitor,monitor,116898,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['monitor'],['monitor']
Energy Efficiency,"he product using any other LorentzVector implementing the x(), y() , y() and t() member functions ; Parameters. qany LorentzVector implementing the x(), y() , z() and t() member functions . Returnsthe result of v.q of type according to the base scalar type of v ; Definition at line 387 of file LorentzVector.h. ◆ E(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::E ; (; ); const. inline . return 4-th component (time, or energy for a 4-momentum vector) ; Definition at line 294 of file LorentzVector.h. ◆ e(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::e ; (; ); const. inline . Definition at line 649 of file LorentzVector.h. ◆ energy(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::energy ; (; ); const. inline . Definition at line 664 of file LorentzVector.h. ◆ Et(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et ; (; ); const. inline . return the transverse energy . \[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \]. Definition at line 349 of file LorentzVector.h. ◆ Et2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Et2 ; (; ); const. inline . return the transverse energy squared . \[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \]. Definition at line 343 of file LorentzVector.h. ◆ Eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Eta ; (; ); const. inline . pseudorapidity . \[ \eta = - \ln { \tan { \frac { \theta} {2} } } \]. Definition at line 365 of file LorentzVector.h. ◆ eta(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::eta ; (; ); const. inline . Definition at line 654 of file LorentzVector.h. ◆ Gamma(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Gamma ; (; ); const. inline . Return Gamma scalar value. ; Definition at line 617 of file LorentzVector.h. ◆ GetCoordinates() [1/4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:15381,energy,energy,15381,doc/master/classROOT_1_1Math_1_1LorentzVector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html,1,['energy'],['energy']
Energy Efficiency,"he row index; doubleTMatrixTBase<double>::fTolsqrt(epsilon); epsilon is smallest number number so that 1+epsilon > 1; static TMatrixTBase<double>::(anonymous)TMatrixTBase<double>::kSizeMax; static TMatrixTBase<double>::EMatrixStatusBitsTMatrixTBase<double>::kStatus; static TMatrixTBase<double>::(anonymous)TMatrixTBase<double>::kWorkMax. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TMatrixT<Element> Delete_m(Int_t size, double*& ); Delete data pointer m, if it was assigned on the heap. Element* TMatrixT<Element> New_m(Int_t size); Return data pointer . if requested size <= kSizeMax, assign pointer; to the stack space. Int_t TMatrixT<Element> Memcpy_m(double* newp, const double* oldp, Int_t copySize, Int_t newSize, Int_t oldSize); Copy copySize doubles from *oldp to *newp . However take care of the; situation where both pointers are assigned to the same stack space. void TMatrixT<Element> Allocate(Int_t nrows, Int_t ncols, Int_t row_lwb = 0, Int_t col_lwb = 0, Int_t init = 0, Int_t = -1); Allocate new matrix. Arguments are number of rows, columns, row; lowerbound (0 default) and column lowerbound (0 default). void TMatrixT<Element> Plus(const TMatrixT<Element> &a,const TMatrixT<Element> &b); General matrix summation. Create a matrix C such that C = A + B. void TMatrixT<Element> Plus(const TMatrixT<Element> &a,const TMatrixTSym<Element> &b); General matrix summation. Create a matrix C such that C = A + B. void TMatrixT<Element> Minus(const TMatrixT<Element> &a,const TMatrixT<Element> &b); General matrix summation. Create a matrix C such that C = A - B. void TMatrixT<Element> Minus(const TMatrixT<Element> &a,const TMatrixTSym<Element> &b); General matrix summation. Create a matrix C such that C = A - B. void TMatrixT<Element> Mult(const TMatrixT<Element> &a,const TMatrixT<Element> &b); General matrix multiplication. Create a matrix C such that C = A * B. void TMatrixT<Element> Mult(const TMatrixTSym<Element> &a,const TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixT_double_.html:16953,Allocate,Allocate,16953,root/html602/TMatrixT_double_.html,https://root.cern,https://root.cern/root/html602/TMatrixT_double_.html,4,['Allocate'],['Allocate']
Energy Efficiency,"he same as in Derivative() function. If a paramter is fixed, the gradient on this parameter = 0. void InitArgs(const Double_t* x, const Double_t* params); Initialize parameters addresses. void InitStandardFunctions(); Create the basic function objects. Double_t Integral(Double_t a, Double_t b, Double_t epsrel = 9.9999999999999998E-13); use IntegralOneDim. Double_t IntegralOneDim(Double_t a, Double_t b, Double_t epsrel, Double_t epsabs, Double_t& err); Return Integral of function between a and b using the given parameter values and; relative and absolute tolerance.; The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; If ROOT contains the MathMore library the default integrator is set to be; the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; ROOT::Math::GaussIntegrator is used; See the reference documentation of these classes for more information about the; integration algorithms; To change integration algorithm just do :; ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; Valid integrator names are:; - Gauss : for ROOT::Math::GaussIntegrator; - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG). In order to use the GSL integrators one needs to have the MathMore library installed. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. Note 2:; Instead of TF1::Integral, you may want to use the combination of; TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; See an example with the following script:. void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:53265,adapt,adaptive,53265,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,10,"['Adapt', 'adapt']","['Adaptive', 'AdaptiveSingular', 'adaptive']"
Energy Efficiency,"he size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolors, Int_t *colors); if ncolors <= 0 a default palette (see below) of 50 colors; is defined. if ncolors == 1 && colors == 0, then; a Pretty Palette with a Spectrum Violet->Red is created. if ncolors > 50 and colors=0, the DeepSea palette is used.; (see TStyle::CreateGradientColorTable for more details). if ncolors > 0 and colors = 0, the default palette is used; with a maximum of ncolors. The default palette defines:; index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors. TPaletteEditor. This class provides a way to edit the palette via a GUI. Function Members (Methods); public:. TAttImage(); TAttImage(const TAttImage&); TAttImage(TAttIm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAttImage.html:1739,monitor,monitors,1739,root/html526/TAttImage.html,https://root.cern,https://root.cern/root/html526/TAttImage.html,14,['monitor'],['monitors']
Energy Efficiency,"he size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolors, Int_t *colors); if ncolors <= 0 a default palette (see below) of 50 colors; is defined. if ncolors == 1 && colors == 0, then; a Pretty Palette with a Spectrum Violet->Red is created. if ncolors > 50 and colors=0, the DeepSea palette is used.; (see TStyle::CreateGradientColorTable for more details). if ncolors > 0 and colors = 0, the default palette is used; with a maximum of ncolors. The default palette defines:; index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors. TPaletteEditor. This class provides a way to edit the palette via a GUI. Function Members (Methods); public:. TImagePalette(); TImagePalette(const TImagePalette& palett",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TImagePalette.html:1767,monitor,monitors,1767,root/html528/TImagePalette.html,https://root.cern,https://root.cern/root/html528/TImagePalette.html,12,['monitor'],['monitors']
Energy Efficiency,"he size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolors, Int_t *colors); if ncolors <= 0 a default palette (see below) of 50 colors; is defined. if ncolors == 1 && colors == 0, then; a Pretty Palette with a Spectrum Violet->Red is created. if ncolors > 50 and colors=0, the DeepSea palette is used.; (see TStyle::CreateGradientColorTable for more details). if ncolors > 0 and colors = 0, the default palette is used; with a maximum of ncolors. The default palette defines:; index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors. TPaletteEditor. This class provides a way to edit the palette via a GUI. Function Members (Methods); public:. TPaletteEditor(const TPaletteEditor&); TPaletteEditor(TAtt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPaletteEditor.html:1754,monitor,monitors,1754,root/html528/TPaletteEditor.html,https://root.cern,https://root.cern/root/html528/TPaletteEditor.html,12,['monitor'],['monitors']
Energy Efficiency,"he size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolors, Int_t *colors); if ncolors <= 0 a default palette (see below) of 50 colors; is defined. if ncolors == 1 && colors == 0, then; a Pretty Palette with a Spectrum Violet->Red is created. if ncolors > 50 and colors=0, the DeepSea palette is used.; (see TStyle::CreateGradientColorTable for more details). if ncolors > 0 and colors = 0, the default palette is used; with a maximum of ncolors. The default palette defines:; index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors. TPaletteEditor. This class provides a way to edit the palette via a GUI. Function Members (Methods); public:. virtual~TAttImage(); static TClass*Class(); voidCopy(TAttI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAttImage.html:1739,monitor,monitors,1739,root/html602/TAttImage.html,https://root.cern,https://root.cern/root/html602/TAttImage.html,8,['monitor'],['monitors']
Energy Efficiency,"he size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolors, Int_t *colors); if ncolors <= 0 a default palette (see below) of 50 colors; is defined. if ncolors == 1 && colors == 0, then; a Pretty Palette with a Spectrum Violet->Red is created. if ncolors > 50 and colors=0, the DeepSea palette is used.; (see TStyle::CreateGradientColorTable for more details). if ncolors > 0 and colors = 0, the default palette is used; with a maximum of ncolors. The default palette defines:; index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors. TPaletteEditor. This class provides a way to edit the palette via a GUI. Function Members (Methods); public:. virtual~TImagePalette(); voidTObject::AbstractMethod(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TImagePalette.html:1767,monitor,monitors,1767,root/html602/TImagePalette.html,https://root.cern,https://root.cern/root/html602/TImagePalette.html,8,['monitor'],['monitors']
Energy Efficiency,"he size of the pad; Palette: Defines the conversion from a pixel value to the; screen color. This class is used (in general by secondary inheritance); by some other classes (image display). TImagePalette. A class to define a conversion from pixel values to pixel color.; A Palette is defined by some anchor points. Each anchor point has; a value between 0 and 1 and a color. An image has to be normalized; and the values between the anchor points are interpolated.; All member variables are public and can be directly manipulated.; In most cases the default operator will be used to create a; TImagePalette. In this case the member arrays have to be allocated; by an application and will be deleted in the destructor of this; class. We provide few predifined palettes:. o gHistImagePalette - palette used in TH2::Draw(""col""). o gWebImagePalette; The web palette is a set of 216 colors that will not dither or; shift on PCs or Macs. Browsers use this built-in palette when; they need to render colors on monitors with only 256 colors; (also called 8-bit color monitors).; The 6x6x6 web palette provides very quick color index lookup; and can be used for good quality convertion of images into; 2-D histograms. o TImagePalette(Int_t ncolors, Int_t *colors); if ncolors <= 0 a default palette (see below) of 50 colors; is defined. if ncolors == 1 && colors == 0, then; a Pretty Palette with a Spectrum Violet->Red is created. if ncolors > 50 and colors=0, the DeepSea palette is used.; (see TStyle::CreateGradientColorTable for more details). if ncolors > 0 and colors = 0, the default palette is used; with a maximum of ncolors. The default palette defines:; index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors. TPaletteEditor. This class provides a way to edit the palette via a GUI. Function Members (Methods); public:. virtual~TPaletteEditor(); static TClass*Class(); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPaletteEditor.html:1754,monitor,monitors,1754,root/html602/TPaletteEditor.html,https://root.cern,https://root.cern/root/html602/TPaletteEditor.html,8,['monitor'],['monitors']
Energy Efficiency,"he; Handbook of Mathematical Functions by Abramowitz and Stegun, formula 6.5.1 on page 260 .; Its normalization is such that TMath::Gamma(a,+infinity) = 1 . --- Nve 14-nov-1998 UU-SAP Utrecht. Double_t BreitWigner(Double_t x, Double_t mean = 0, Double_t gamma = 1); Calculate a Breit Wigner function with mean and gamma. Double_t Gaus(Double_t x, Double_t mean = 0, Double_t sigma = 1, Bool_t norm = kFALSE); Calculate a gaussian function with mean and sigma.; If norm=kTRUE (default is kFALSE) the result is divided; by sqrt(2*Pi)*sigma. Double_t Landau(Double_t x, Double_t mpv = 0, Double_t sigma = 1, Bool_t norm = kFALSE); The LANDAU function.; mu is a location parameter and correspond approximatly to the most probable value; and sigma is a scale parameter (not the sigma of the full distribution which is not defined); Note that for mu=0 and sigma=1 (default values) the exact location of the maximum of the distribution; (most proble value) is at x = -0.22278; This function has been adapted from the CERNLIB routine G110 denlan.; If norm=kTRUE (default is kFALSE) the result is divided by sigma. Double_t LnGamma(Double_t z); Computation of ln[gamma(z)] for all z. C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86. The accuracy of the result is better than 2e-10. --- Nve 14-nov-1998 UU-SAP Utrecht. Float_t Normalize(Float_t v[3]); Normalize a vector v in place.; Returns the norm of the original vector. Double_t Normalize(Double_t v[3]); Normalize a vector v in place.; Returns the norm of the original vector.; This implementation (thanks Kevin Lynch <krlynch@bu.edu>) is protected; against possible overflows. Double_t Poisson(Double_t x, Double_t par); compute the Poisson distribution function for (x,par); The Poisson PDF is implemented by means of Euler's Gamma-function; (for the factorial), so for any x integer argument it is correct.; BUT for non-integer x values, it IS NOT equal to the Poisson distribution.; see TMath::PoissonI to get a non-smooth function.; Note ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMath.html:14583,adapt,adapted,14583,root/html534/TMath.html,https://root.cern,https://root.cern/root/html534/TMath.html,6,['adapt'],['adapted']
Energy Efficiency,"he; difference between consecutive ""Stops"" values gives the fraction of; space in the whole table that should be used for the interval between; the corresponding color values.; ; Normally the first element of Stops should be 0 and the last should be 1.; If this is not true, fewer than NColors will be used in proportion with; the total interval between the first and last elements of Stops.; ; This definition is similar to the povray-definition of gradient; color tables.; ; For instance:; ; UInt_t Number = 3;; Double_t Red[3] = { 0.0, 1.0, 1.0 };; Double_t Green[3] = { 0.0, 0.0, 1.0 };; Double_t Blue[3] = { 1.0, 0.0, 1.0 };; Double_t Stops[3] = { 0.0, 0.4, 1.0 };; ; This defines a table in which there are three color end points:; RGB = {0, 0, 1}, {1, 0, 0}, and {1, 1, 1} = blue, red, white; The first 40% of the table is used to go linearly from blue to red.; The remaining 60% of the table is used to go linearly from red to white.; ; If you define a very short interval such that less than one color fits; in it, no colors at all will be allocated. If this occurs for all; intervals, ROOT will revert to the default palette.; ; Original code by Andreas Zoglauer (zog@mpe.mpg.de); ; . void SetPalette(Int_t ncolors, Int_t* colors). Static function.; The color palette is used by the histogram classes; (see TH1::Draw options).; For example TH1::Draw(""col"") draws a 2-D histogram with cells; represented by a box filled with a color CI function of the cell content.; if the cell content is N, the color CI used will be the color number; in colors[N],etc. If the maximum cell content is > ncolors, all; cell contents are scaled to ncolors.; ; if ncolors <= 0 a default palette (see below) of 50 colors is; defined. The colors defined in this palette are OK for coloring pads, labels.; ; if ncolors == 1 && colors == 0, then a Pretty Palette with a; Spectrum Violet->Red is created. It is recommended to use this Pretty; palette when drawing legos, surfaces or contours.; ; if ncolors > 50 and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TColor.html:24578,allocate,allocated,24578,root/html528/TColor.html,https://root.cern,https://root.cern/root/html528/TColor.html,4,['allocate'],['allocated']
Energy Efficiency,"he; difference between consecutive ""Stops"" values gives the fraction of; space in the whole table that should be used for the interval between; the corresponding color values.; ; Normally the first element of Stops should be 0 and the last should be 1.; If this is not true, fewer than NColors will be used in proportion with; the total interval between the first and last elements of Stops.; ; This definition is similar to the povray-definition of gradient; color tables.; ; For instance:; ; UInt_t Number = 3;; Double_t Red[3] = { 0.0, 1.0, 1.0 };; Double_t Green[3] = { 0.0, 0.0, 1.0 };; Double_t Blue[3] = { 1.0, 0.0, 1.0 };; Double_t Stops[3] = { 0.0, 0.4, 1.0 };; ; This defines a table in which there are three color end points:; RGB = {0, 0, 1}, {1, 0, 0}, and {1, 1, 1} = blue, red, white; The first 40% of the table is used to go linearly from blue to red.; The remaining 60% of the table is used to go linearly from red to white.; ; If you define a very short interval such that less than one color fits; in it, no colors at all will be allocated. If this occurs for all; intervals, ROOT will revert to the default palette.; ; Original code by Andreas Zoglauer (zog@mpe.mpg.de); ; . void SetPalette(Int_t ncolors, Int_t* colors, Float_t alpha = 1.). Static function.; The color palette is used by the histogram classes; (see TH1::Draw options).; For example TH1::Draw(""col"") draws a 2-D histogram with cells; represented by a box filled with a color CI function of the cell content.; if the cell content is N, the color CI used will be the color number; in colors[N],etc. If the maximum cell content is > ncolors, all; cell contents are scaled to ncolors.; ; if ncolors <= 0 a default palette (see below) of 50 colors is; defined. The colors defined in this palette are OK for coloring pads, labels.; . index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors; . if ncolo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColor.html:26638,allocate,allocated,26638,root/html534/TColor.html,https://root.cern,https://root.cern/root/html534/TColor.html,6,['allocate'],['allocated']
Energy Efficiency,"hen the hashtable will be resized and refilled to reduce the collision rate to about 1. The higher the collision rate, i.e. the longer the linked lists, the longer lookup will take. If rehashlevel=0 the table will NOT automatically be rehashed. Use Rehash() for manual rehashing. ; Definition at line 43 of file THashTable.cxx. ◆ ~THashTable(). THashTable::~THashTable ; (; ). virtual . Delete a hashtable. ; Objects are not deleted unless the THashTable is the owner (set via SetOwner()). ; Definition at line 65 of file THashTable.cxx. Member Function Documentation. ◆ Add(). void THashTable::Add ; (; TObject * ; obj). overridevirtual . Add object to the hash table. ; Its position in the table will be determined by the value returned by its Hash() function. ; Implements TCollection.; Definition at line 92 of file THashTable.cxx. ◆ AddAll(). void THashTable::AddAll ; (; const TCollection * ; col). overridevirtual . Add all objects from collection col to this collection. ; Implemented for more efficient rehashing. ; Reimplemented from TCollection.; Definition at line 138 of file THashTable.cxx. ◆ AddBefore(). void THashTable::AddBefore ; (; const TObject * ; before, . TObject * ; obj . ). Add object to the hash table. ; Its position in the table will be determined by the value returned by its Hash() function. If and only if 'before' is in the same bucket as obj, obj is added in front of 'before' within the bucket's list. ; Definition at line 112 of file THashTable.cxx. ◆ AddImpl(). void THashTable::AddImpl ; (; Int_t ; slot, . TObject * ; obj . ). inlineprivate . Helper function doing the actual add to the table give a slot and object. ; This does not take any lock. ; Definition at line 78 of file THashTable.cxx. ◆ AverageCollisions(). Float_t THashTable::AverageCollisions ; (; ); const. inline . Definition at line 85 of file THashTable.h. ◆ Class(). static TClass * THashTable::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashTable.html:17672,efficient,efficient,17672,doc/master/classTHashTable.html,https://root.cern,https://root.cern/doc/master/classTHashTable.html,1,['efficient'],['efficient']
Energy Efficiency,"herLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<double> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.The",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html:19088,energy,energy,19088,root/html528/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzE4D_double___.html,6,['energy'],['energy']
Energy Efficiency,"herLorentzVector & q); ------ Operations combining two Lorentz vectors ------. scalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+); Enable the product using any other LorentzVector implementing; the x(), y() , y() and t() member functions; \param q any LorentzVector implementing the x(), y() , z() and t(); member functions; \return the result of v.q of type according to the base scalar type of v. return operator*( Scalar(-1) ); LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<double> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect(); TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { return fCoordinates.Px(); }. Scalar py() const; { return fCoordinates.Py(); }. Scalar pz() const; { return fCoordinates.Pz(); }. Scalar e() const; { return fCoordinates.E(); }. Scalar theta() const; { return fCoordinates.The",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html:17482,energy,energy,17482,root/html528/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__LorentzVector_-p1PxPyPzM4D_double___.html,6,['energy'],['energy']
Energy Efficiency,"herited from RooPrintable; static Int_t _nameLength;  . #include <RooCompositeDataStore.h>. Inheritance diagram for RooCompositeDataStore:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooCompositeDataStore() [1/4]. RooCompositeDataStore::RooCompositeDataStore ; (; ). Definition at line 49 of file RooCompositeDataStore.cxx. ◆ RooCompositeDataStore() [2/4]. RooCompositeDataStore::RooCompositeDataStore ; (; RooStringView ; name, . RooStringView ; title, . const RooArgSet & ; vars, . RooCategory & ; indexCat, . std::map< std::string, RooAbsDataStore * > const & ; inputData . ). Convert map by label to map by index for more efficient internal use. ; Definition at line 59 of file RooCompositeDataStore.cxx. ◆ RooCompositeDataStore() [3/4]. RooCompositeDataStore::RooCompositeDataStore ; (; const RooCompositeDataStore & ; other, . const char * ; newname = nullptr . ). Convert map by label to map by index for more efficient internal use. ; Definition at line 75 of file RooCompositeDataStore.cxx. ◆ RooCompositeDataStore() [4/4]. RooCompositeDataStore::RooCompositeDataStore ; (; const RooCompositeDataStore & ; other, . const RooArgSet & ; vars, . const char * ; newname = nullptr . ). Update index category pointer, if it is contained in input argument vars. ; Definition at line 89 of file RooCompositeDataStore.cxx. ◆ ~RooCompositeDataStore(). RooCompositeDataStore::~RooCompositeDataStore ; (; ). override . Destructor. ; Definition at line 111 of file RooCompositeDataStore.cxx. Member Function Documentation. ◆ addColumn(). RooAbsArg * RooCompositeDataStore::addColumn ; (; RooAbsArg & ; var, . bool ; adjustRange = true . ). overridevirtual . WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all arguments, but only does for the first one here... ; Implements RooAbsDataStore.; Definition at line 320 of file RooCompositeDataStore.cxx. ◆ append(). void RooCompositeData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCompositeDataStore.html:20709,efficient,efficient,20709,doc/master/classRooCompositeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooCompositeDataStore.html,1,['efficient'],['efficient']
Energy Efficiency,"herits from a class with name ""classname"".; note that the function returns kTRUE in case classname is the class itself. Bool_t InheritsFrom(const TClass* cl) const; Return kTRUE if this class inherits from class cl.; note that the function returns KTRUE in case cl is the class itself. void * DynamicCast(const TClass* base, void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). const void * DynamicCast(const TClass* base, const void* obj, Bool_t up = kTRUE); Cast obj of this class type up to baseclass cl if up is true.; Cast obj of this class type down from baseclass cl if up is false.; If this class is not a baseclass of cl return 0, else the pointer; to the cl part of this (up) or to this (down). void * New(TClass::ENewType defConstructor = kClassNew, Bool_t quiet = kFALSE) const; Return a pointer to a newly allocated object of this class.; The class must have a default constructor. For meaning of; defConstructor, see TClass::IsCallingNew(). If quiet is true, do no issue a message via Error on case; of problems, just return 0. The constructor actually called here can be customized by; using the rootcint pragma:; #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass,; this method will called the first of the following 3; constructors which exists and is public:; MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. When more than one pragma ioctortype is used, the first seen as priority; For example with:; #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order:; MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:48759,allocate,allocated,48759,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,4,['allocate'],['allocated']
Energy Efficiency,"hes. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TFFTReal Class Reference. ; One of the interface classes to the FFTW package, can be used directly or via the TVirtualFFT class. ; Only the basic interface of FFTW is implemented.; Computes transforms called r2r in FFTW manual:; transforms of real input and output in ""halfcomplex"" format i.e. real and imaginary parts for a transform of size n stored as (r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1); discrete Hartley transform; sine and cosine transforms (DCT-I,II,III,IV and DST-I,II,III,IV) For the detailed information on the computed transforms please refer to the FFTW manual, chapter ""What FFTW really computes"". How to use it:; Create an instance of TFFTReal - this will allocate input and output arrays (unless an in-place transform is specified); Run the Init() function with the desired flags and settings (see function comments for possible kind parameters); Set the data (via SetPoints()or SetPoint() functions); Run the Transform() function; Get the output (via GetPoints() or GetPoint() functions); Repeat steps 3)-5) as needed. For a transform of the same size, but of different kind (or with different flags), rerun the Init() function and continue with steps 3)-5); NOTE:; running Init() function will overwrite the input array! Don't set any data before running the Init() function!; FFTW computes unnormalized transform, so doing a transform followed by its inverse will lead to the original array scaled BY:; transform size (N) for R2HC, HC2R, DHT transforms; 2*(N-1) for DCT-I (REDFT00); 2*(N+1) for DST-I (RODFT00); 2*N for the remaining transforms. Transform inverses:; R2HC<-->HC2R; DHT<-->DHT; DCT-I<-->DCT-I; DCT-II<-->DCT-III; DCT-IV<-->DCT-IV; DST-I<-->DST-I; DST-II<-->DST-III; DST-IV<-->DST-IV . Definition at line 20 of file TFFTReal.h. Public Member Functions;  TFFTReal ();  default ;  ;  TFFTReal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFFTReal.html:958,allocate,allocate,958,doc/master/classTFFTReal.html,https://root.cern,https://root.cern/doc/master/classTFFTReal.html,1,['allocate'],['allocate']
Energy Efficiency,"hex format ;  ; int id {0};  node id, index in array ;  ; std::string material;  name of the material ;  ; std::string name;  node name ;  ; bool nochlds {false};  how far in hierarchy depth should be scanned ;  ; int sortid {0};  ! place in sorted array, to check cuts, or id of original node when used search structures ;  ; int vis {0};  visibility flag, 0 - off, 1 - only when level==0, 99 - always ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeomNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeomNode(). ROOT::RGeomNode::RGeomNode ; (; int ; _id = 0). inline . Definition at line 80 of file RGeomData.hxx. Member Function Documentation. ◆ CanDisplay(). bool ROOT::RGeomNode::CanDisplay ; (; ); const. inline . True when there is shape and it can be displayed. ; Definition at line 83 of file RGeomData.hxx. Member Data Documentation. ◆ idshift. int ROOT::RGeomNode::idshift {-1}. ! used to jump over then scan all geom hierarchy ; Definition at line 76 of file RGeomData.hxx. ◆ matr. std::vector<float> ROOT::RGeomNode::matr. matrix for the node, can have reduced number of elements ; Definition at line 73 of file RGeomData.hxx. ◆ nfaces. int ROOT::RGeomNode::nfaces {0}. ! number of shape faces ; Definition at line 75 of file RGeomData.hxx. ◆ opacity. float ROOT::RGeomNode::opacity {1.}. ! opacity of the color ; Definition at line 78 of file RGeomData.hxx. ◆ useflag. bool ROOT::RGeomNode::useflag {false}. ! extra flag, used for selection ; Definition at line 77 of file RGeomData.hxx. ◆ vol. double ROOT::RGeomNode::vol {0}. ! volume estimation ; Definition at line 74 of file RGeomData.hxx. Libraries for ROOT::RGeomNode:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeomNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeomNode.html:2382,reduce,reduced,2382,doc/master/classROOT_1_1RGeomNode.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeomNode.html,1,['reduce'],['reduced']
Energy Efficiency,"hi/3;; 1150 pis3 = TMath::Pi()/3;; 1151 c1 = TMath::Cos(phis3);; 1152 c2 = TMath::Cos(pis3 + phis3);; 1153 c3 = TMath::Cos(pis3 - phis3);; 1154 tmp = TMath::Sqrt(ps3);; 1155 y1 = 2*tmp*c1;; 1156 y2 = -2*tmp*c2;; 1157 y3 = -2*tmp*c3;; 1158 tmp = r/3;; 1159 a = y1 - tmp;; 1160 b = y2 - tmp;; 1161 c = y3 - tmp;; 1162 }; 1163 return complex;; 1164}; 1165 ; 1166////////////////////////////////////////////////////////////////////////////////; 1167///Computes sample quantiles, corresponding to the given probabilities; 1168///; 1169/// \param[in] x the data sample; 1170/// \param[in] n its size; 1171/// \param[out] quantiles computed quantiles are returned in there; 1172/// \param[in] prob probabilities where to compute quantiles; 1173/// \param[in] nprob size of prob array; 1174/// \param[in] isSorted is the input array x sorted ?; 1175/// \param[in] index parameter index; 1176/// \param[in] type method to compute (from 1 to 9).; 1177///; 1178/// #### NOTE:; 1179/// When the input is not sorted, an array of integers of size n needs; 1180/// to be allocated. It can be passed by the user in parameter index,; 1181/// or, if not passed, it will be allocated inside the function; 1182///; 1183/// ### Following types are provided:; 1184/// - Discontinuous:; 1185/// - type=1 - inverse of the empirical distribution function; 1186/// - type=2 - like type 1, but with averaging at discontinuities; 1187/// - type=3 - SAS definition: nearest even order statistic; 1188/// - Piecewise linear continuous:; 1189/// - In this case, sample quantiles can be obtained by linear interpolation; 1190/// between the k-th order statistic and p(k).; 1191/// -type=4 - linear interpolation of empirical cdf, p(k)=k/n;; 1192/// - type=5 - a very popular definition, p(k) = (k-0.5)/n;; 1193/// - type=6 - used by Minitab and SPSS, p(k) = k/(n+1);; 1194/// - type=7 - used by S-Plus and R, p(k) = (k-1)/(n-1);; 1195/// - type=8 - resulting sample quantiles are approximately median unbiased; 1196/// regardless of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:38648,allocate,allocated,38648,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,hich share our addresses; Long64_t*TTree::fClusterRangeEnd[fNClusterRange] Last entry of a cluster range.; Long64_t*TTree::fClusterSize[fNClusterRange] Number of entries in each cluster for a given range.; Int_tTTree::fDebug! Debug level; Long64_tTTree::fDebugMax! Last entry number to debug; Long64_tTTree::fDebugMin! First entry number to debug; Int_tTTree::fDefaultEntryOffsetLenInitial Length of fEntryOffset table in the basket buffers; TDirectory*TTree::fDirectory! Pointer to directory holding this tree; Long64_tTTree::fEntriesNumber of entries; TEntryList*TTree::fEntryList! Pointer to event selection list (if one); Long64_tTTree::fEstimateNumber of entries to estimate histogram limits; TEventList*TTree::fEventList! Pointer to event selection list (if one); THbookFile*fFilepointer to Hbook file; Int_tTTree::fFileNumber! current file number (if file extensions); Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Long64_tTTree::fFlushedBytesNumber of autoflushed bytes; UInt_tTTree::fFriendLockStatus! Record which method is locking the friend recursion; TList*TTree::fFriendspointer to list of friend elements; Int_tfIDHbook identifier; TArrayITTree::fIndexIndex of sorted values; TArrayDTTree::fIndexValuesSorted index values; Bool_tfInitflag to know if branches computed; TObjArrayTTree::fLeavesDirect pointers to individual branch leaves; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_tTTree::fMakeClass! not zero when processing code generated by MakeClass; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTTree::fMaxClusterRange! Memory allocated for the cluster range.; Long64_tTTree::fMaxEntriesMaximum number of entries in case of circular buffers; Long64_tTTree::fMaxEntryLoopMaximum number of entries to process; Long64_tTTree::fMaxVirtualSizeMaximum total size of buf,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/THbookTree.html:23885,allocate,allocated,23885,root/html530/THbookTree.html,https://root.cern,https://root.cern/root/html530/THbookTree.html,9,['allocate'],['allocated']
Energy Efficiency,"hin- (Wij); and a between-class (Bij) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, Fi, are then given by . where in TMVA is set NS=NB, so that the factor; in front of the sum simplifies to ½.; The Fisher discriminant then reads. The offset F0 centers the sample mean of xFi; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. with resulting xMa that are very similar to the; xFi. ; TMVA provides two outputs for the ranking of the input variables:. Fisher test: the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: Bii/Wii.; ; Discrimination power: the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar; . The corresponding numbers are printed on standard output.; ; . Function Members (Methods); public:. virtual~MethodFisher(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodFisher.html:2368,power,power,2368,root/html528/TMVA__MethodFisher.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodFisher.html,20,['power'],['power']
Energy Efficiency,"hing...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Fit::BinData Class ReferenceMath » MathCore » Fitting and Parameter Estimation » Fit Data Classes. ; Class describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: . only coordinates and values (for binned likelihood fits) : kNoError; coordinate, values and error on values (for normal least square fits) : kValueError; coordinate, values, error on values and coordinates (for effective least square fits) : kCoordError; coordinate, values, error on coordinates and asymmetric error on values : kAsymError. In addition there is the option to construct Bindata copying the data in (using the DataVector class) or using pointer to external data (DataWrapper) class. In general is found to be more efficient to copy the data. In case of really large data sets for limiting memory consumption then the other option can be used Specialized constructor exists for data up to 3 dimensions.; When the data are copying in the number of points can be set later (or re-set) using Initialize and the data are inserted one by one using the Add method. It is mandatory to set the size before using the Add method. ; Definition at line 52 of file BinData.h. Public Types; enum  ErrorType { kNoError; , kValueError; , kCoordError; , kAsymError; };  . Public Member Functions;  BinData (const BinData &rhs);  copy constructors ;  ;  BinData (const DataOptions &opt, const DataRange &range, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from options and range default is 1D and value errors ;  ;  BinData (const DataOptions &opt, unsigned int maxpoints=0, unsigned int dim=1, ErrorType err=kValueError);  constructor from option and default range ;  ;  BinData (unsigned",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:1107,efficient,efficient,1107,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['efficient'],['efficient']
Energy Efficiency,"hird are the function parameters.; Since the Beta distribution is bounded on both sides, it's often; used to represent processes with natural lower and upper limits. Double_t BetaDistI(Double_t x, Double_t p, Double_t q); Computes the distribution function of the Beta distribution.; The first argument is the point, where the function will be; computed, second and third are the function parameters.; Since the Beta distribution is bounded on both sides, it's often; used to represent processes with natural lower and upper limits. Double_t BetaIncomplete(Double_t x, Double_t a, Double_t b); Calculates the incomplete Beta-function. Double_t Binomial(Int_t n, Int_t k); Calculate the binomial coefficient n over k. Double_t BinomialI(Double_t p, Int_t n, Int_t k); Suppose an event occurs with probability _p_ per trial; Then the probability P of its occuring _k_ or more times; in _n_ trials is termed a cumulative binomial probability; the formula is P = sum_from_j=k_to_n(TMath::Binomial(n, j)*; *TMath::Power(p, j)*TMath::Power(1-p, n-j); For _n_ larger than 12 BetaIncomplete is a much better way; to evaluate the sum than would be the straightforward sum calculation; for _n_ smaller than 12 either method is acceptable; (""Numerical Recipes""); --implementation by Anna Kreshuk. Double_t CauchyDist(Double_t x, Double_t t = 0, Double_t s = 1); Computes the density of Cauchy distribution at point x; by default, standard Cauchy distribution is used (t=0, s=1); t is the location parameter; s is the scale parameter; The Cauchy distribution, also called Lorentzian distribution,; is a continuous distribution describing resonance behavior; The mean and standard deviation of the Cauchy distribution are undefined.; The practical meaning of this is that collecting 1,000 data points gives; no more accurate an estimate of the mean and standard deviation than; does a single point.; The formula was taken from ""Engineering Statistics Handbook"" on site; http://www.itl.nist.gov/div898/handbook/eda/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMath.html:28634,Power,Power,28634,root/html532/TMath.html,https://root.cern,https://root.cern/root/html532/TMath.html,8,['Power'],['Power']
Energy Efficiency,"his problem is to call BypassStreamer(kFALSE); for the TClonesArray. In this case, the normal Bar::Streamer function; will be called. The Bar::Streamer function works OK independently; if the Bar StreamerInfo had been generated in optimized mode or not. void Compress(); Remove empty slots from array. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use this routine when your objects allocate; memory (e.g. objects inheriting from TNamed or containing TStrings; allocate memory). If not you better use Clear() since if is faster. void Expand(Int_t newSize); Expand or shrink the array to newSize elements. void ExpandCreate(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked and the allocated space is freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). void ExpandCreateFast(Int_t n); Expand or shrink the array to n elements and create the clone; objects by calling their default ctor. If n is less than the current size; the array is shrinked but the allocated space is _not_ freed.; This routine is typically used to create a clonesarray into which; one can directly copy object data without going via the; """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:17656,allocate,allocate,17656,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,2,['allocate'],['allocate']
Energy Efficiency,"his routine when your objects don't allocate memory since it will not call the object dtors. However, if the class in the TClonesArray implements the function Clear(Option_t *option) and if option = ""C"" the function Clear() is called for all objects in the array. In the function Clear(), one can delete objects or dynamic arrays allocated in the class. This procedure is much faster than calling TClonesArray::Delete(). When the option starts with ""C+"", eg ""C+xyz"" the objects in the array are in turn cleared with the option ""xyz"" ; Implements TCollection.; Definition at line 420 of file TClonesArray.cxx. ◆ Compress(). void TClonesArray::Compress ; (; ). overridevirtual . Remove empty slots from array. ; Reimplemented from TObjArray.; Definition at line 332 of file TClonesArray.cxx. ◆ ConstructedAt() [1/2]. TObject * TClonesArray::ConstructedAt ; (; Int_t ; idx). Get an object at index 'idx' that is guaranteed to have been constructed. ; It might be either a freshly allocated object or one that had already been allocated (and assumingly used). In the later case, it is the callers responsibility to insure that the object is returned to a known state, usually by calling the Clear method on the TClonesArray.; Tests to see if the destructor has been called on the object. If so, or if the object has never been constructed the class constructor is called using New(). If not, return a pointer to the correct memory location. This explicitly to deal with TObject classes that allocate memory which will be reset (but not deallocated) in their Clear() functions. ; Definition at line 377 of file TClonesArray.cxx. ◆ ConstructedAt() [2/2]. TObject * TClonesArray::ConstructedAt ; (; Int_t ; idx, . Option_t * ; clear_options . ). Get an object at index 'idx' that is guaranteed to have been constructed. ; It might be either a freshly allocated object or one that had already been allocated (and assumingly used). In the later case, the function Clear will be called and passed the value of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:34150,allocate,allocated,34150,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,2,['allocate'],['allocated']
Energy Efficiency,"his two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). void Init(const char* function, const char* params); Initialize the function invocation environment. Necessary input; information: the function name and the parameter string of; the form ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). void InitImplementation(const char* methodname, const char* params, const char* proto, TClass* cl, const ClassInfo_t* cinfo); This function implements Init and InitWithPrototype. void InitWithPrototype(TClass* cl, const char* method, const char* proto); Initialize the method invocation environment. Necessary input; information: the class, method name and the prototype string of; the form: ""char*,int,float"".; To execute the method call TMethodCall::Execute(object,...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). void InitWithPrototype(const char* function, const char* proto); Initialize the function invocation environment. Necessary input; information: the function name and the prototype string of; the form: ""char*,int,float"".; To execute the method call TMethodCall::Execute(...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). Bool_t IsValid() const; Return true if the method call has been properly initialized and is; usable. TFunction * GetMethod(); Returns the TMethod describing the method to be executed. This takes; all overriding and overloading into account (call TClass::GetMethod()).; Since finding the method is expensive the result is cached. void Execute(void* object); Execute the method (with preset arguments) for the specified object. void Execute(void* object, const char* params); Execute the method for the specified object and argument values. void Execute(void* obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMethodCall.html:9773,efficient,efficient,9773,root/html528/TMethodCall.html,https://root.cern,https://root.cern/root/html528/TMethodCall.html,6,['efficient'],['efficient']
Energy Efficiency,"his, `AddBin()` calls the; 124`AddBinToPartition()` method.; 125This method adds the input bin to the partitioning matrix.; 126 ; 127The number of partition cells per axis can be specified in the constructor.; 128If it is not specified, the default value of 25 along each axis will be; 129assigned. This value was chosen because it is small enough to avoid slowing; 130down AddBin(), while being large enough to enhance Fill() by a considerable; 131amount. Regardless of how it is initialized at construction time, it can be; 132changed later with the `ChangePartition()` method.; 133`ChangePartition()` deletes the; 134old partition matrix and generates a new one with the specified number of cells; 135on each axis.; 136 ; 137The optimum number of partition cells per axis changes with the number of; 138times `Fill()` will be called. Although partitioning greatly speeds up; 139filling, it also adds a constant time delay into the code. When `Fill()`; 140is to be called many times, it is more efficient to divide the histogram into; 141a large number cells. However, if the histogram is to be filled only a few; 142times, it is better to divide into a small number of cells.; 143*/; 144 ; 145////////////////////////////////////////////////////////////////////////////////; 146/// Default Constructor. No boundaries specified.; 147 ; 148TH2Poly::TH2Poly(); 149{; 150 Initialize(0., 0., 0., 0., 25, 25);; 151 SetName(""NoName"");; 152 SetTitle(""NoTitle"");; 153 SetFloat();; 154}; 155 ; 156////////////////////////////////////////////////////////////////////////////////; 157/// Constructor with specified name and boundaries,; 158/// but no partition cell number.; 159 ; 160TH2Poly::TH2Poly(const char *name,const char *title, Double_t xlow,Double_t xup; 161 , Double_t ylow,Double_t yup); 162{; 163 Initialize(xlow, xup, ylow, yup, 25, 25);; 164 SetName(name);; 165 SetTitle(title);; 166 SetFloat(kFALSE);; 167}; 168 ; 169////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:6461,efficient,efficient,6461,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['efficient'],['efficient']
Energy Efficiency,"hisPDERSthis pointer (required by root finder); Int_tfkNNMaxmax number of events in kNN tree; Int_tfkNNMinmin number of events in kNN tree. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); construct MethodPDERS through from file. Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets); PDERS can handle classification with 2 classes and regression with one or more regression-targets. void Init( void ); default initialisation routine called by all constructors. ~MethodPDERS( void ); destructor. void DeclareOptions(); define the options (their key words) that can be set in the option string; know options:; VolumeRangeMode <string> Method to determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; tra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MethodPDERS.html:21335,Adapt,Adaptive,21335,root/html532/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html532/TMVA__MethodPDERS.html,2,['Adapt'],['Adaptive']
Energy Efficiency,"hist/exec2.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. exec2.C File ReferenceTutorials » Histograms tutorials. Detailed Description; Echo object at mouse position and show a graphics line. ; Example of macro called when a mouse event occurs in a pad.; Example: TFile::Open(""hsimple.root"");; hpxpy->Draw(""colz"");; gPad->AddExec(""ex2"", "".x exec2.C"");; gPad#define gPadDefinition TVirtualPad.h:308; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; When moving the mouse in the canvas, a second canvas shows the projection along X of the bin corresponding to the Y position of the mouse. The resulting histogram is fitted with a gaussian. A ""dynamic"" line shows the current bin position in Y. This more elaborated example can be used as a starting point to develop more powerful interactive applications exploiting CLING as a development engine.; ; void exec2(); {; if (!gPad) {; Error(""exec2"", ""gPad is null, you are not supposed to run this macro"");; return;; }; ; int px = gPad->GetEventX();; int py = gPad->GetEventY();; float uxmin = gPad->GetUxmin();; float uxmax = gPad->GetUxmax();; int pxmin = gPad->XtoAbsPixel(uxmin);; int pxmax = gPad->XtoAbsPixel(uxmax);; TObject *select = gPad->GetSelected();; TCanvas *c2 = (TCanvas*)gROOT->GetListOfCanvases()->FindObject(""c2"");; ; gPad->GetCanvas()->FeedbackMode(kTRUE);; ; int pyold = gPad->GetUniqueID(); // misuse of pad unique for last draw position; ; if (pyold && c2) {; // erase line at old position; gVirtualX->DrawLine(pxmin, pyold, pxmax, pyold);; gPad->SetUniqueID(0);; }; ; TH2 *h = dynamic_cast<TH2 *>(select);; if(!h) return;; ; //erase old position and draw a line at current position; gVirtualX->DrawLine(pxmin, py, pxmax, py);; gPad->SetUniqueID(py);; ; Float_t upy = gPad->AbsPixeltoY(py);; Float_t y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/exec2_8C.html:1020,power,powerful,1020,doc/master/exec2_8C.html,https://root.cern,https://root.cern/doc/master/exec2_8C.html,1,['power'],['powerful']
Energy Efficiency,"histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. vector<Float_t>fAverageRMSaverage RMS of signal and background; TMVA::BinarySearchTree*fBinaryTreebinary tree; vector<Float_t>*fDeltasize of volume; Float_tfDeltaFracfraction of RMS; Double_tfGaussSigmasize of Gauss in adaptive volume ; Double_tfGaussSigmaNormsize of Gauss in adaptive volume (normalised to dimensions); Float_tfInitialScaleinitial scale for adaptive volume; Bool_tfInitializedVolumeEleis volume element initialized ?; TMVA::MethodPDERS::EKernelEstimatorfKernelEstimator; TStringfKernelStringoption kernel estimator; Float_tfMaxVIterationsmaximum number of iterations to adapt volume size; Double_tfMax_distancemaximum distance; Float_tfNEventsMaxmaximum number of events in adaptive volume; Float_tfNEventsMinminimum number of events in adaptive volume; Double_tfNRegOutnumber of output dimensions for regression; Bool_tfNormTreebinary-search tree is normalised; Bool_tfPrintedprint; Float_tfScaleBweight for background events; Float_tfScaleSweight for signal events; vector<Float_t>*fShiftvolume center; TMVA::MethodPDERS::EVolumeRangeModefVRangeMode; TStringfVolumeRangeoption volume range; static TMVA::MethodPDERS*fgThisPDERSthis pointer (required by root finder); Int_tfkNNMaxmax number of events in kNN tree; Int_tfkNNMinmin number of events in kNN tree. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodPDERS(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption, TDirectory* theTargetDir = 0); standard constructor for the PDERS method. MethodPDERS(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodPDERS.html:19313,adapt,adaptive,19313,root/html530/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodPDERS.html,30,['adapt'],"['adapt', 'adaptive']"
Energy Efficiency,"hod&); virtual voidPrintHelpMessage() const; virtual voidProcessOptions(); virtual voidReadWeightsFromStream(istream&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTrain(); virtual voidWriteMonitoringHistosToFile() const. protected:. virtual voidGetHelpMessage() const; virtual voidMakeClassSpecific(ostream&, const TString&) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IMethod(); default destructur. {}. const char * GetName() const; ------- virtual member functions to be implemented by each MVA method; the name of the method. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the MVA value - some methods may return a per-event error estimate (unless: *err = -1). void Train( void ); training method. void ReadWeightsFromStream(istream& ); read weights from output stream. void WriteMonitoringHistosToFile( void ); write method specific monitoring histograms to target file. void MakeClass(const TString& classFileName = TString("""")) const; make ROOT-independent C++ class for classifier response. const Ranking* CreateRanking(); create ranking. void PrintHelpMessage() const; print help message. Bool_t MonitorBoost(TMVA::MethodBoost* boost); perfrom extra actions during the boosting at different stages. void Init(). void DeclareOptions(). void ProcessOptions(). Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets). void MakeClassSpecific(ostream& , const TString& ) const; make ROOT-independent C++ class for classifier response (classifier-specific implementation). void GetHelpMessage() const; get specific help message from classifer. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: IMethod.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__IMethod.html:2006,monitor,monitoring,2006,root/html530/TMVA__IMethod.html,https://root.cern,https://root.cern/root/html530/TMVA__IMethod.html,1,['monitor'],['monitoring']
Energy Efficiency,"hod&); virtual voidPrintHelpMessage() const; virtual voidProcessOptions(); virtual voidReadWeightsFromStream(istream&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTrain(); virtual voidWriteMonitoringHistosToFile() const. protected:. virtual voidGetHelpMessage() const; virtual voidMakeClassSpecific(ostream&, const TString&) const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IMethod(); default destructur. {}. const char * GetName() const; ------- virtual member functions to be implemented by each MVA method; the name of the method. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); calculate the MVA value - some methods may return a per-event error estimate (unless: *err = -1). void Train( void ); training method. void ReadWeightsFromStream(istream& ); read weights from output stream. void WriteMonitoringHistosToFile( void ); write method specific monitoring histograms to target file. void MakeClass(const TString& classFileName = TString("""")) const; make ROOT-independent C++ class for classifier response. const Ranking* CreateRanking(); create ranking. void PrintHelpMessage() const; print help message. Bool_t MonitorBoost(TMVA::MethodBoost* boost); perfrom extra actions during the boosting at different stages. void Init(). void DeclareOptions(). void ProcessOptions(). Bool_t HasAnalysisType(TMVA::Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets). void MakeClassSpecific(ostream& , const TString& ) const; make ROOT-independent C++ class for classifier response (classifier-specific implementation). void GetHelpMessage() const; get specific help message from classifer. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: IMethod.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automaticall",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__IMethod.html:2006,monitor,monitoring,2006,root/html532/TMVA__IMethod.html,https://root.cern,https://root.cern/root/html532/TMVA__IMethod.html,2,['monitor'],['monitoring']
Energy Efficiency,"hod, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. Int_tfActWorkersNumebr of workers still active; Long64_tfBytesReadNumber of bytes read; Float_tfEffSessionsNumber of effective sessions running on the machines allocated to this session; Float_tfEvtRateIInstantaneous event rate; Float_tfInitTimeTime for initialization; Float_tfMBRateIInstantaneous byte read rate; Float_tfProcTimeTime for processing; Long64_tfProcessedNumber of events processed; Int_tfTotSessionsNumebr of PROOF sessions running currently on the clusters; Long64_tfTotalTotal number of events to process; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressInfo(Long64_t tot = 0, Long64_t proc = 0, Long64_t bytes = 0, Float_t initt = -1., Float_t proct = -1., Float_t evts = -1., Float_t mbs = -1., Int_t actw = 0, Int_t tsess = 0, Float_t esess = 0.); { }. virtual ~TProofProgressInfo(); { }. TProofInterruptHandler& opera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofProgressInfo.html:5486,allocate,allocated,5486,root/html602/TProofProgressInfo.html,https://root.cern,https://root.cern/root/html602/TProofProgressInfo.html,4,['allocate'],['allocated']
Energy Efficiency,"host byte order; TInetAddress::AliasList_tfAliaseslist of aliases; Int_tfFamilyaddress family; TStringfHostnamefully qualified hostname; Int_tfPortport through which we are connected. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInetAddress(); Default ctor. Used in case of unknown host. Not a valid address. TInetAddress(const char* host, UInt_t addr, Int_t family, Int_t port = -1); Create TInetAddress. Private ctor. TInetAddress objects can only; be created via the friend classes TSystem, TServerSocket and TSocket.; Use the IsValid() method to check the validity of a TInetAddress. TInetAddress(const TInetAddress& adr); TInetAddress copy ctor. TInetAddress& operator=(const TInetAddress& rhs); TInetAddress assignment operator. UChar_t * GetAddressBytes() const; Returns the raw IP address in host byte order. The highest; order byte position is in addr[0]. To be prepared for 64-bit; IP addresses an array of bytes is returned.; User must delete allocated memory. const char * GetHostAddress(UInt_t addr); Returns the IP address string ""%d.%d.%d.%d"", use it to convert; alternative addresses obtained via GetAddresses().; Copy string immediately, it will be reused. Static function. const char * GetHostAddress() const; Returns the IP address string ""%d.%d.%d.%d"".; Copy string immediately, it will be reused. void Print(Option_t* option = """") const; Print internet address as string. void AddAddress(UInt_t addr); Add alternative address to list of addresses. void AddAlias(const char* alias); Add alias to list of aliases. void Streamer(TBuffer& ); Stream an object of class TInetAddress. virtual ~TInetAddress(); { }. UInt_t GetAddress() const; { return fAddresses[0]; }. const char * GetHostName() const; { return (const char *) fHostname; }. Int_t GetFamily() const; { return fFamily; }. Int_t GetPort() const; { return fPort; }. const AddressList_t & GetAddresses() const; { return fAddresses; }. const AliasList_t & GetAliases() const; { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInetAddress.html:7195,allocate,allocated,7195,root/html602/TInetAddress.html,https://root.cern,https://root.cern/root/html602/TInetAddress.html,4,['allocate'],['allocated']
Energy Efficiency,"hours). Sidereal time is most; accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; they are by default), the optional argument UT1Offset can be supplied (in; milliseconds). If UT1Offset is not supplied, conversion has maximum error; of 1s. If offset is supplied error can be reduced to us level. Values for; UT1Offset can be found in IERS Bulletin B:; ftp://ftp.iers.org/products/eop/bulletinb/format_2009; Equation of the equinoxes is given by USNO:; http://aa.usno.navy.mil/faq/docs/GAST.php. Double_t AsLMST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local mean sidereal time (LMST) in hour-angle, given a longitude; in degrees. Return value will always be between 0 and 24 (hours).; Sidereal time is most accurately calculated from UT1. If fSec and; fNanoSec are in UTC (which they are by default), the optional argument; UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. Double_t AsLAST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local apparant sidereal time (LAST) in hour-angle, given a; longitude in degrees. Return value will always be between 0 and 24; (hours). Sidereal time is most accurately calculated from UT1. If fSec; and fNanoSec are in UTC (which they are by default), the optional; argument UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. const Char_t * AsString(Option_t* option = """") const; Return the date & time as a string. Result is pointer to a statically allocated string.; User should copy this into their own buffer before calling; this method again. Option ""l""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTimeStamp.html:6945,reduce,reduced,6945,root/html534/TTimeStamp.html,https://root.cern,https://root.cern/root/html534/TTimeStamp.html,2,['reduce'],['reduced']
Energy Efficiency,"hours). Sidereal time is most; accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; they are by default), the optional argument UT1Offset can be supplied (in; milliseconds). If UT1Offset is not supplied, conversion has maximum error; of 1s. If offset is supplied error can be reduced to us level. Values for; UT1Offset can be found in IERS Bulletin B:; ftp://ftp.iers.org/products/eop/bulletinb/format_2009; Equation of the equinoxes is given by USNO:; http://aa.usno.navy.mil/faq/docs/GAST.php. Double_t AsLMST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local mean sidereal time (LMST) in hour-angle, given a longitude; in degrees. Return value will always be between 0 and 24 (hours).; Sidereal time is most accurately calculated from UT1. If fSec and; fNanoSec are in UTC (which they are by default), the optional argument; UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. Double_t AsLAST(Double_t Longitude, Double_t UT1Offset = 0) const; Return local apparant sidereal time (LAST) in hour-angle, given a; longitude in degrees. Return value will always be between 0 and 24; (hours). Sidereal time is most accurately calculated from UT1. If fSec; and fNanoSec are in UTC (which they are by default), the optional; argument UT1Offset can be supplied (in milliseconds). If UT1Offset is not; supplied, conversion has maximum error of 1s. If offset is supplied error; can be reduced to us level. Values for UT1Offset can be found in IERS; Bulletin B: ftp://ftp.iers.org/products/eop/bulletinb/format_2009. const Char_t * AsString(const Option_t* option = """") const; Return the date & time as a string. Result is pointer to a statically allocated string.; User should copy this into their own buffer before calling; this method again. Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTimeStamp.html:6971,reduce,reduced,6971,root/html604/TTimeStamp.html,https://root.cern,https://root.cern/root/html604/TTimeStamp.html,2,['reduce'],['reduced']
Energy Efficiency,"howMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidUnbind(); voidUnbindTexture(). protected:. UInt_tCreateAndAttachColorTexture(); UInt_tCreateAndAttachRenderBuffer(Int_t format, Int_t type); voidInitMultiSample(); voidInitStandard(). private:. TGLFBO(const TGLFBO&); TGLFBO&operator=(const TGLFBO&). Data Members; protected:. UInt_tfColorTexture; UInt_tfDepthBuffer; UInt_tfFrameBuffer; Int_tfH; Float_tfHScale; Bool_tfIsRescaled; UInt_tfMSColorBuffer; Int_tfMSCoverageSamples; UInt_tfMSFrameBuffer; Int_tfMSSamples; Int_tfReqH; Int_tfReqW; Int_tfW; Float_tfWScale; static Bool_tfgMultiSampleNAWarned; static Bool_tfgRescaleToPow2. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLFBO(); Constructor. ~TGLFBO(); Destructor. void Init(int w, int h, int ms_samples = 0); Acquire GL resources for given width, height and number of; multi-sampling samples. void Release(); Release the allocated GL resources. void Bind(); Bind the frame-buffer object. void Unbind(); Unbind the frame-buffer object. void BindTexture(); Bind texture. void UnbindTexture(); Unbind texture. void SetAsReadBuffer(). void InitStandard(). void InitMultiSample(). UInt_t CreateAndAttachRenderBuffer(Int_t format, Int_t type). UInt_t CreateAndAttachColorTexture(); Initialize color-texture and attach it to current FB. Bool_t GetRescaleToPow2(); Return state of fgRescaleToPow2 static member. void SetRescaleToPow2(Bool_t r); Set state of fgRescaleToPow2 static member.; Default is kTRUE as this works better on older hardware, especially ATI. TGLFBO(const TGLFBO& ). TGLFBO& operator=(const TGLFBO& ). Int_t GetW() const; { return fW; }. Int_t GetH() const; { return fH; }. Int_t GetReqW() const; { return fReqW; }. Int_t GetReqH() const; { return fReqH; }. Int_t GetMSSamples() const; { return fMSSamples; }. Int_t GetMSCoverageSamples() const; { return fMSCoverageSamples; }. Float_t GetWScale() const; {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLFBO.html:2021,allocate,allocated,2021,root/html534/TGLFBO.html,https://root.cern,https://root.cern/root/html534/TGLFBO.html,2,['allocate'],['allocated']
Energy Efficiency,"hreads actually created depends on the ""num_threads""; 461 * configuration parameter, but this is the upper limit. */; 462#if !defined(MAX_WORKER_THREADS); 463#define MAX_WORKER_THREADS (1024 * 64) /* in threads (count) */; 464#endif; 465 ; 466/* Timeout interval for select/poll calls.; 467 * The timeouts depend on ""*_timeout_ms"" configuration values, but long; 468 * timeouts are split into timouts as small as SOCKET_TIMEOUT_QUANTUM.; 469 * This reduces the time required to stop the server. */; 470#if !defined(SOCKET_TIMEOUT_QUANTUM); 471#define SOCKET_TIMEOUT_QUANTUM (2000) /* in ms */; 472#endif; 473 ; 474/* Do not try to compress files smaller than this limit. */; 475#if !defined(MG_FILE_COMPRESSION_SIZE_LIMIT); 476#define MG_FILE_COMPRESSION_SIZE_LIMIT (1024) /* in bytes */; 477#endif; 478 ; 479#if !defined(PASSWORDS_FILE_NAME); 480#define PASSWORDS_FILE_NAME "".htpasswd""; 481#endif; 482 ; 483/* Initial buffer size for all CGI environment variables. In case there is; 484 * not enough space, another block is allocated. */; 485#if !defined(CGI_ENVIRONMENT_SIZE); 486#define CGI_ENVIRONMENT_SIZE (4096) /* in bytes */; 487#endif; 488 ; 489/* Maximum number of environment variables. */; 490#if !defined(MAX_CGI_ENVIR_VARS); 491#define MAX_CGI_ENVIR_VARS (256) /* in variables (count) */; 492#endif; 493 ; 494/* General purpose buffer size. */; 495#if !defined(MG_BUF_LEN) /* in bytes */; 496#define MG_BUF_LEN (1024 * 8); 497#endif; 498 ; 499 ; 500/********************************************************************/; 501 ; 502/* Helper makros */; 503#if !defined(ARRAY_SIZE); 504#define ARRAY_SIZE(array) (sizeof(array) / sizeof(array[0])); 505#endif; 506 ; 507#include <stdint.h>; 508 ; 509/* Standard defines */; 510#if !defined(INT64_MAX); 511#define INT64_MAX (9223372036854775807); 512#endif; 513 ; 514#define SHUTDOWN_RD (0); 515#define SHUTDOWN_WR (1); 516#define SHUTDOWN_BOTH (2); 517 ; 518mg_static_assert(MAX_WORKER_THREADS >= 1,; 519 ""worker threads must be a positive n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:17237,allocate,allocated,17237,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['allocate'],['allocated']
Energy Efficiency,"href=""http://en.wikipedia.org/wiki/Box_plot"">A Candle plot</a> (also known as; 1282a ""box plot"" or ""whisker plot"") was invented in 1977 by John Tukey. It is a convenient; 1283way to describe graphically a data distribution (D) with only five numbers:; 1284 ; 1285 1. The minimum value of the distribution D (bottom or left whisker).; 1286 2. The lower quartile (Q1): 25% of the data points in D are less than Q1 (bottom of the box).; 1287 3. The median (M): 50% of the data points in D are less than M.; 1288 4. The upper quartile (Q3): 75% of the data points in D are less than Q3 (top of the box).; 1289 5. The maximum value of the distribution D (top or right whisker).; 1290 ; 1291In this implementation a TH2 is considered as a collection of TH1 along; 1292X (option `CANDLE` or `CANDLEX`) or Y (option `CANDLEY`).; 1293Each TH1 is represented as one candle.; 1294 ; 1295Begin_Macro(source); 1296../../../tutorials/hist/candleplotwhiskers.C; 1297End_Macro; 1298 ; 1299The candle reduces the information coming from a whole distribution into few values.; 1300Independently from the number of entries or the significance of the underlying distribution; 1301a candle will always look like a candle. So candle plots should be used carefully in; 1302particular with unknown distributions. The definition of a candle is based on; 1303__unbinned data__. Here, candles are created from binned data. Because of this, the; 1304deviation is connected to the bin width used. The calculation of the quantiles; 1305normally done on unbinned data also. Because data are binned, this will; 1306only work the best possible way within the resolution of one bin; 1307 ; 1308Because of all these facts one should take care that:; 1309 ; 1310 - there are enough points per candle; 1311 - the bin width is small enough (more bins will increase the maximum; 1312 available resolution of the quantiles although there will be some; 1313 bins with no entries); 1314 - never make a candle-plot if the underlying distributio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:53079,reduce,reduces,53079,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['reduce'],['reduces']
Energy Efficiency,"hval). add multi-dim coordinate data with both error in coordinates and value. const double * Coords(unsigned int ipoint) const. return a pointer to the coordinates data for the given fit point. double Value(unsigned int ipoint) const. return the value for the given fit point. double Error(unsigned int ipoint) const. return error on the value for the given fit point; Safe (but slower) method returning correctly the error on the value; in case of asymm errors return the average 0.5(eu + el). double InvError(unsigned int ipoint) const. Return the inverse of error on the value for the given fit point; useful when error in the coordinates are not stored and then this is used directly this as the weight in; the least square function. const double * CoordErrors(unsigned int ipoint) const. Return a pointer to the errors in the coordinates for the given fit point. const double * GetPoint(unsigned int ipoint, double& value) const. retrieve at the same time a pointer to the coordinate data and the fit value; More efficient than calling Coords(i) and Value(i). const double * GetPoint(unsigned int ipoint, double& value, double& invError) const. retrieve in a single call a pointer to the coordinate data, value and inverse error for; the given fit point.; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned; for the error. const double * GetPointError(unsigned int ipoint, double& errvalue) const. Retrieve the errors on the point (coordinate and value) for the given fit point; It must be called only when the coordinate errors are stored otherwise it will produce an; assert. const double * GetPointError(unsigned int ipoint, double& errlow, double& errhigh) const. Get errors on the point (coordinate errors and asymmetric value errors) for the; given fit point.; It must be called only when the coordinate errors and asymmetric errors are stored; otherwise it will produce an assert. void Resize(unsigned int npoints). resize the vector to the ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__BinData.html:10426,efficient,efficient,10426,root/html528/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__BinData.html,10,['efficient'],['efficient']
Energy Efficiency,"hypotheses that two histograms; 1763/// represent identical distributions. To make a decision p-value should; 1764/// be calculated. The hypotheses of identity is rejected if the p-value is; 1765/// lower then some significance level. Traditionally significance levels; 1766/// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; 1767/// analysis of the residuals which is often helpful in identifying the; 1768/// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; 1769/// Residuals are the difference between bin contents and expected bin; 1770/// contents. Most convenient for analysis are the normalized residuals. If; 1771/// hypotheses of identity are valid then normalized residuals are; 1772/// approximately independent and identically distributed random variables; 1773/// having N(0,1) distribution. Analysis of residuals expect test of above; 1774/// mentioned properties of residuals. Notice that indirectly the analysis; 1775/// of residuals increase the power of \f$ \chi^{2} \f$ test.; 1776///; 1777/// #### Methods of comparison:; 1778///; 1779/// \f$ \chi^{2} \f$ test for comparison two (unweighted) histograms:; 1780/// Let us consider two histograms with the same binning and the number; 1781/// of bins equal to r. Let us denote the number of events in the ith bin; 1782/// in the first histogram as ni and as mi in the second one. The total; 1783/// number of events in the first histogram is equal to:; 1784/// \f[; 1785/// N = \sum_{i=1}^{r} n_{i}; 1786/// \f]; 1787/// and; 1788/// \f[; 1789/// M = \sum_{i=1}^{r} m_{i}; 1790/// \f]; 1791/// in the second histogram. The hypothesis of identity (homogeneity) [3]; 1792/// is that the two histograms represent random values with identical; 1793/// distributions. It is equivalent that there exist r constants p1,...,pr,; 1794/// such that; 1795/// \f[; 1796///\sum_{i=1}^{r} p_{i}=1; 1797/// \f]; 1798/// and the probability of belonging to the ith bin for some measured valu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:69504,power,power,69504,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['power'],['power']
Energy Efficiency,"hys_ctx;; 18855 int thread_index;; 18856 struct mg_workerTLS tls;; 18857 ; 18858 mg_set_thread_name(""worker"");; 18859 ; 18860 tls.is_master = 0;; 18861 tls.thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);; 18862#if defined(_WIN32); 18863 tls.pthread_cond_helper_mutex = CreateEvent(NULL, FALSE, FALSE, NULL);; 18864#endif; 18865 ; 18866 /* Initialize thread local storage before calling any callback */; 18867 pthread_setspecific(sTlsKey, &tls);; 18868 ; 18869 /* Check if there is a user callback */; 18870 if (ctx->callbacks.init_thread) {; 18871 /* call init_thread for a worker thread (type 1), and store the; 18872 * return value */; 18873 tls.user_ptr = ctx->callbacks.init_thread(ctx, 1);; 18874 } else {; 18875 /* No callback: set user pointer to NULL */; 18876 tls.user_ptr = NULL;; 18877 }; 18878 ; 18879 /* Connection structure has been pre-allocated */; 18880 thread_index = (int)(conn - ctx->worker_connections);; 18881 if ((thread_index < 0); 18882 || ((unsigned)thread_index >= (unsigned)ctx->cfg_worker_threads)) {; 18883 mg_cry_ctx_internal(ctx,; 18884 ""Internal error: Invalid worker index %i"",; 18885 thread_index);; 18886 return;; 18887 }; 18888 ; 18889 /* Request buffers are not pre-allocated. They are private to the; 18890 * request and do not contain any state information that might be; 18891 * of interest to anyone observing a server status. */; 18892 conn->buf = (char *)mg_malloc_ctx(ctx->max_request_size, conn->phys_ctx);; 18893 if (conn->buf == NULL) {; 18894 mg_cry_ctx_internal(; 18895 ctx,; 18896 ""Out of memory: Cannot allocate buffer for worker %i"",; 18897 thread_index);; 18898 return;; 18899 }; 18900 conn->buf_size = (int)ctx->max_request_size;; 18901 ; 18902 conn->dom_ctx = &(ctx->dd); /* Use default domain and default host */; 18903 ; 18904 conn->tls_user_ptr = tls.user_ptr; /* store ptr for quick access */; 18905 ; 18906 conn->request_info.user_data = ctx->user_data;; 18907 /* Allocate a mutex for this connection to allow communication both; 189",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:561217,allocate,allocated,561217,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['allocate'],['allocated']
Energy Efficiency,"hys_ctx;; 18856 int thread_index;; 18857 struct mg_workerTLS tls;; 18858 ; 18859 mg_set_thread_name(""worker"");; 18860 ; 18861 tls.is_master = 0;; 18862 tls.thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);; 18863#if defined(_WIN32); 18864 tls.pthread_cond_helper_mutex = CreateEvent(NULL, FALSE, FALSE, NULL);; 18865#endif; 18866 ; 18867 /* Initialize thread local storage before calling any callback */; 18868 pthread_setspecific(sTlsKey, &tls);; 18869 ; 18870 /* Check if there is a user callback */; 18871 if (ctx->callbacks.init_thread) {; 18872 /* call init_thread for a worker thread (type 1), and store the; 18873 * return value */; 18874 tls.user_ptr = ctx->callbacks.init_thread(ctx, 1);; 18875 } else {; 18876 /* No callback: set user pointer to NULL */; 18877 tls.user_ptr = NULL;; 18878 }; 18879 ; 18880 /* Connection structure has been pre-allocated */; 18881 thread_index = (int)(conn - ctx->worker_connections);; 18882 if ((thread_index < 0); 18883 || ((unsigned)thread_index >= (unsigned)ctx->cfg_worker_threads)) {; 18884 mg_cry_ctx_internal(ctx,; 18885 ""Internal error: Invalid worker index %i"",; 18886 thread_index);; 18887 return;; 18888 }; 18889 ; 18890 /* Request buffers are not pre-allocated. They are private to the; 18891 * request and do not contain any state information that might be; 18892 * of interest to anyone observing a server status. */; 18893 conn->buf = (char *)mg_malloc_ctx(ctx->max_request_size, conn->phys_ctx);; 18894 if (conn->buf == NULL) {; 18895 mg_cry_ctx_internal(; 18896 ctx,; 18897 ""Out of memory: Cannot allocate buffer for worker %i"",; 18898 thread_index);; 18899 return;; 18900 }; 18901 conn->buf_size = (int)ctx->max_request_size;; 18902 ; 18903 conn->dom_ctx = &(ctx->dd); /* Use default domain and default host */; 18904 ; 18905 conn->tls_user_ptr = tls.user_ptr; /* store ptr for quick access */; 18906 ; 18907 conn->request_info.user_data = ctx->user_data;; 18908 /* Allocate a mutex for this connection to allow communication both; 189",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:561250,allocate,allocated,561250,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['allocate'],['allocated']
Energy Efficiency,"i); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging). void StoreOut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofPlayerRemote.html:18159,monitor,monitor,18159,root/html530/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html530/TProofPlayerRemote.html,1,['monitor'],['monitor']
Energy Efficiency,"i); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj); Low statistic histograms need a special treatment when using autobin. void StoreOutput(TList* out); Store received output list. TList * MergeFeedback(); Merge feedback lists. void StoreFeedback(TObject* slave, TList* out); Store feedback results from the specif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayerRemote.html:17931,monitor,monitor,17931,root/html528/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html528/TProofPlayerRemote.html,1,['monitor'],['monitor']
Energy Efficiency,"i); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* obj); Set the message to be notified in case of exception. Int_t Incorporate(TObject* obj, TList* out, Bool_t& merged); Incorporate object 'newobj' in the list 'outlist'.; The object is merged with an object of the same name already existing in; the list, or just added.; The boolean merged is set to kFALSE when the object is just added to 'outlist';; this happens if the Merge() method does not exist or if a object named as 'obj'; is not already in the list. If the obj is not 'merged' than it should not be; deleted, unless outlist is not owner of its objects.; Return 0 on success, -1 on error. TObject * HandleHistogram(TObject* obj, Bool_t& merged); Low statistic histograms need a special treatment when using autobin. Bool_t HistoSameAxis(TH1* h0, TH1* h1); Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges; on the axis (i.e. if they can be just Add-ed for merging",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofPlayerRemote.html:18175,monitor,monitor,18175,root/html532/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html532/TProofPlayerRemote.html,8,['monitor'],['monitor']
Energy Efficiency,"i<hist->numEntries() ; i++) {; - hist->get(i) ;; - hist->set(hist->weight() / sum);; + hist->set(i, hist->weight(i) / sum, 0.);; }. More const correctness. calcTreeIndex() doesn’t rely on side effects, any more. Instead of overwriting the internal coordinates with new values:. // In a RooDataHist subclass:; _vars = externalCoordinates;; auto index = calcTreeIndex();. // Or from the outside:; auto index = dataHist.getIndex(externalCoordinates); // Side effect: Active bin is now `index`.; coordinates are now passed into calcTreeIndex without side effects:; // In a subclass:; auto index = calcTreeIndex(externalCoordinates, fast=<true/false>); // No side effect. // From the outside:; auto index = dataHist.getIndex(externalCoordinates); // No side effect; This will allow for marking more functions const, or for lying less about const correctness. RooDataHist now supports fits with RooFit’s faster BatchMode().; Lower memory footprint. If weight errors are not needed, RooDataHist now allocates only 40% of the memory that the old implementation used. Fix bin volume correction logic in RooDataHist::sum(); The public member function RooDataHist::sum() has three overloads. Two of these overloads accept a sumSet parameter to not sum over all variables. These two overloads previously behaved inconsistently when the correctForBinSize or inverseBinCor flags were set. If you use the RooDataHist::sum() function in you own classes, please check that it can still be used with its new logic. The new and corrected bin correction behaviour is:. correctForBinSize: multiply counts in each bin by the bin volume corresponding to the variables in sumSet; inverseBinCor: divide counts in each bin by the bin volume corresponding to the variables not in sumSet. New fully parametrised Crystal Ball shape class; So far, the Crystal Ball distribution has been represented in RooFit only by the RooCBShape class, which has a Gaussian core and a single power-law tail on one side. This release introduces ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:24658,allocate,allocates,24658,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['allocate'],['allocates']
Energy Efficiency,"i];; bin = 1 + Int_t(a + 0.5);; fPositionX[i] = h->GetBinCenter(bin);; fPositionY[i] = h->GetBinContent(bin);; }; TPolyMarker * pm = (TPolyMarker*)h->GetListOfFunctions()->FindObject(""TPolyMarker"");; if (pm) {; h->GetListOfFunctions()->Remove(pm);; delete pm;; }; pm = new TPolyMarker(nfound, fPositionX, fPositionY);; h->GetListOfFunctions()->Add(pm);; pm->SetMarkerStyle(23);; pm->SetMarkerColor(kRed);; pm->SetMarkerSize(1.3);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,dest[i]);; d->SetLineColor(kRed);; d->Draw(""SAME"");; printf(""Found %d candidate peaks\n"",nfound);; for(i=0;i; ; Example 16 - script SearchHR3.c:; ; ; Peak # Position Sigma ; 1 118 26 ; 2 162 41 ; 3 310 4 ; 4 330 8 ; 5 482 22 ; 6 491 26 ; 7 740 21 ; 8 852 15 ; 9 954 12 ; 10 989 13 ; ; ; Table 4 Positions and sigma of peaks in the following examples.; ; ; ; Fig. 30 Influence of number of iterations (3-red, 10-blue, 100- green,; 1000-magenta), sigma=8, smoothing width=3.; ; ; ; Fig. 31 Influence of sigma (3-red, 8-blue, 20- green, 43-magenta),; num. iter.=10, sm. width=3.; ; ; ; Fig. 32 Influence smoothing width (0-red, 3-blue, 7- green, 20-magenta), num.; iter.=10, sigma=8.; ; Script:; ; // Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum).; // To execute this example, do; // root > .x SearchHR3.C; #include ; void SearchHR3() {; Double_t fPositionX[100];; Double_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; Double_t nbins = 1024,a;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Influence of # of iterations in deconvolution in peak searching"",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum.html:56408,green,green,56408,root/html602/TSpectrum.html,https://root.cern,https://root.cern/root/html602/TSpectrum.html,4,['green'],['green']
Energy Efficiency,"i];; bin = 1 + Int_t(a + 0.5);; fPositionX[i] = h->GetBinCenter(bin);; fPositionY[i] = h->GetBinContent(bin);; }; TPolyMarker * pm = (TPolyMarker*)h->GetListOfFunctions()->FindObject(""TPolyMarker"");; if (pm) {; h->GetListOfFunctions()->Remove(pm);; delete pm;; }; pm = new TPolyMarker(nfound, fPositionX, fPositionY);; h->GetListOfFunctions()->Add(pm);; pm->SetMarkerStyle(23);; pm->SetMarkerColor(kRed);; pm->SetMarkerSize(1.3);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,dest[i]);; d->SetLineColor(kRed);; d->Draw(""SAME"");; printf(""Found %d candidate peaks\n"",nfound);; for(i=0;i; ; Example 16 - script SearchHR3.c:; ; ; Peak # Position Sigma ; 1 118 26 ; 2 162 41 ; 3 310 4 ; 4 330 8 ; 5 482 22 ; 6 491 26 ; 7 740 21 ; 8 852 15 ; 9 954 12 ; 10 989 13 ; ; ; Table 4 Positions and sigma of peaks in the following examples.; ; ; ; Fig. 30 Influence of number of iterations (3-red, 10-blue, 100- green,; 1000-magenta), sigma=8, smoothing width=3.; ; ; ; Fig. 31 Influence of sigma (3-red, 8-blue, 20- green, 43-magenta),; num. iter.=10, sm. width=3.; ; ; ; Fig. 32 Influence smoothing width (0-red, 3-blue, 7- green, 20-magenta), num.; iter.=10, sigma=8.; ; Script:; ; // Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum).; // To execute this example, do; // root > .x SearchHR3.C; #include ; void SearchHR3() {; Float_t fPositionX[100];; Float_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; Double_t nbins = 1024,a;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Float_t * source = new float[nbins];; Float_t * dest = new float[nbins];; TH1F *h = new TH1F(""h"",""Influence of # of iterations in deconvolution in peak searching"",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum.html:55246,green,green,55246,root/html528/TSpectrum.html,https://root.cern,https://root.cern/root/html528/TSpectrum.html,6,['green'],['green']
Energy Efficiency,"i`.; 1919 ; 1920void TGraphMultiErrors::SetPointEY(Int_t i, Int_t e, Double_t eyL, Double_t eyH); 1921{; 1922 SetPointEYlow(i, e, eyL);; 1923 SetPointEYhigh(i, e, eyH);; 1924}; 1925 ; 1926////////////////////////////////////////////////////////////////////////////////; 1927/// Set error e eyL value for point `i`.; 1928 ; 1929void TGraphMultiErrors::SetPointEYlow(Int_t i, Int_t e, Double_t eyL); 1930{; 1931 if (i < 0 || e < 0); 1932 return;; 1933 ; 1934 if (i >= fNpoints); 1935 // re-allocate the object; 1936 TGraphMultiErrors::SetPoint(i, 0., 0.);; 1937 ; 1938 while (e >= fNYErrors); 1939 AddYError(fNpoints);; 1940 ; 1941 fEyL[e][i] = eyL;; 1942 if (fEyLSum); 1943 fEyLSum[i] = GetErrorYlow(i);; 1944 else; 1945 CalcYErrorsSum();; 1946}; 1947 ; 1948////////////////////////////////////////////////////////////////////////////////; 1949/// Set error e eyH value for point `i`.; 1950 ; 1951void TGraphMultiErrors::SetPointEYhigh(Int_t i, Int_t e, Double_t eyH); 1952{; 1953 if (i < 0 || e < 0); 1954 return;; 1955 ; 1956 if (i >= fNpoints); 1957 // re-allocate the object; 1958 TGraphMultiErrors::SetPoint(i, 0., 0.);; 1959 ; 1960 while (e >= fNYErrors); 1961 AddYError(fNpoints);; 1962 ; 1963 fEyH[e][i] = eyH;; 1964 if (fEyHSum); 1965 fEyHSum[i] = GetErrorYhigh(i);; 1966 else; 1967 CalcYErrorsSum();; 1968}; 1969 ; 1970////////////////////////////////////////////////////////////////////////////////; 1971/// Set error e ey values.; 1972 ; 1973void TGraphMultiErrors::SetEY(Int_t e, Int_t np, const Double_t *eyL, const Double_t *eyH); 1974{; 1975 SetEYlow(e, np, eyL);; 1976 SetEYhigh(e, np, eyH);; 1977}; 1978 ; 1979////////////////////////////////////////////////////////////////////////////////; 1980/// Set error e eyL values.; 1981 ; 1982void TGraphMultiErrors::SetEYlow(Int_t e, Int_t np, const Double_t *eyL); 1983{; 1984 for (Int_t i = 0; i < fNpoints; i++) {; 1985 if (i < np); 1986 SetPointEYlow(i, e, eyL[i]);; 1987 else; 1988 SetPointEYlow(i, e, 0.);; 1989 }; 1990}; 1991 ; 1992",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:66003,allocate,allocate,66003,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency,"ia Number2Pixel() or via TColor::GetPixel()) to a hexadecimal string.; This string can be directly passed to, for example,; TGClient::GetColorByName(). String will be reused so copy immediately; if needed.; ; . void SaveColor(ostream& out, Int_t ci). Save a color with index > 228 as a C++ statement(s) on output stream out.; ; . Bool_t IsGrayscale(). Return whether all colors return grayscale values.; ; . void SetGrayscale(Bool_t set = kTRUE). Set whether all colors should return grayscale values.; ; . Int_t CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.). Static function creating a color table with several connected linear gradients.; ; Number: The number of end point colors that will form the gradients.; Must be at least 2.; Stops: Where in the whole table the end point colors should lie.; Each entry must be on [0, 1], each entry must be greater than; the previous entry.; Red, Green, Blue: The end point color values.; Each entry must be on [0, 1]; NColors: Total number of colors in the table. Must be at least 1.; ; Returns a positive value on success and -1 on error.; ; The table is constructed by tracing lines between the given points in; RGB space. Each color value may have a value between 0 and 1. The; difference between consecutive ""Stops"" values gives the fraction of; space in the whole table that should be used for the interval between; the corresponding color values.; ; Normally the first element of Stops should be 0 and the last should be 1.; If this is not true, fewer than NColors will be used in proportion with; the total interval between the first and last elements of Stops.; ; This definition is similar to the povray-definition of gradient; color tables.; ; For instance:; ; UInt_t Number = 3;; Double_t Red[3] = { 0.0, 1.0, 1.0 };; Double_t Green[3] = { 0.0, 0.0, 1.0 };; Double_t Blue[3] = { 1.0, 0.0, 1.0 };; Double_t Stops[3] = { 0.0, 0.4, 1.0 };; ; This defines ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColor.html:25258,Green,Green,25258,root/html534/TColor.html,https://root.cern,https://root.cern/root/html534/TColor.html,3,['Green'],['Green']
Energy Efficiency,"ia TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. Don't use if size is larger; than old size, use ReAlloc(void *, size_t, size_t) instead. void * ReAlloc(void* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) block of memory. Checks if current size is; equal to oldsize. If not memory was overwritten. char * ReAllocChar(char* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of chars. Size and oldsize are; in number of chars. Int_t * ReAllocInt(Int_t* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of integers. Size and oldsize are; number of integers (not number of bytes). void * ObjectAlloc(size_t size); Used to allocate a TObject on the heap (via TObject::operator new()).; Directly after this routine one can call (in the TObject ctor); TStorage::FilledByObjectAlloc() to find out if the just created object is on; the heap. void * ObjectAlloc(size_t size, void* vp); Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)); in position vp. vp is already allocated (maybe on heap, maybe on; stack) so just return. void ObjectDealloc(void* vp); Used to deallocate a TObject on the heap (via TObject::operator delete()). void ObjectDealloc(void* vp, void* ptr); Used to deallocate a TObject on the heap (via TObject::operator delete(void*,void*)). void SetFreeHook(FreeHookFun_t func, void* data); Set a free handler. void SetReAllocHooks(ReAllocFun_t func1, ReAllocCFun_t func2); Set a custom ReAlloc handlers. This function is typically; called via a static object in the ROOT libNew.so shared library. void PrintStatistics(); Print memory usage statistics. void EnableStatistics(int size = -1, int ix = -1); Enable memory usage statistics gathering. Size is the size of the memory; block that should be trapped and ix is after how many such allocations; the trap should happen. ULong_t GetHeapBegin(). ULong_t GetHeapEnd(). void * GetFreeHookData(); return static free ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStorage.html:4685,allocate,allocate,4685,root/html534/TStorage.html,https://root.cern,https://root.cern/root/html534/TStorage.html,4,['allocate'],['allocate']
Energy Efficiency,"iableTypesAreCountedtrue if variable types have been counted already; vector<TMVA::VariableInfo>fVariablesevent variables [saved to weight file]. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~VariableTransformBase(). void SelectInput(const TString& inputVariables, Bool_t putIntoVariables = kFALSE); select the variables/targets/spectators which serve as input to the transformation. Bool_t GetInput(const TMVA::Event* event, vector<Float_t>& input, vector<Char_t>& mask, Bool_t backTransform = kFALSE) const; select the values from the event. void SetOutput(TMVA::Event* event, vector<Float_t>& output, vector<Char_t>& mask, const TMVA::Event* oldEvent = 0, Bool_t backTransform = kFALSE) const; select the values from the event. void CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; count variables, targets and spectators. void CalcNorm(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ); TODO --> adapt to variable,target,spectator selection; method to calculate minimum, maximum, mean, and RMS for all; variables used in the MVA. std::vector<TString>* GetTransformationStrings(Int_t cls) const; TODO --> adapt to variable,target,spectator selection; default transformation output; --> only indicate that transformation occurred. void UpdateNorm(Int_t ivar, Double_t x); TODO --> adapt to variable,target,spectator selection; update min and max of a given variable (target) and a given transformation method. void AttachXMLTo(void* parent); create XML description the transformation (write out info of selected variables). void ReadFromXML(void* trfnode); Read the input variables from the XML node. void MakeFunction(ostream& fout, const TString& fncName, Int_t part, UInt_t trCounter, Int_t cls); getinput and setoutput equivalent. void Initialize(). Bool_t PrepareTransformation(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ). const Event* Transform(const TMVA::Event *const , Int_t cls) const. const Event* Inver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__VariableTransformBase.html:9669,adapt,adapt,9669,root/html530/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html530/TMVA__VariableTransformBase.html,3,['adapt'],['adapt']
Energy Efficiency,"ial a_j}; \frac{\partial f(i,a^{(t)})}{\partial a_k}; \Delta a_j^{(t)} \]. in gamma-ray spectra we have to fit together tens, hundreds of peaks simultaneously that sometimes represent thousands of parameters.; the calculation of the inversion matrix of such a size is practically impossible.; the awmi method is based on the assumption that the off-diagonal terms in the matrix A are equal to zero. \[; \Delta a_{k}^{(t+1)} = \alpha^{(t)}; \frac{; \sum_{i=1}^{N} \frac{e_{i}^{(t)}}{y_i}\frac{\partial f(i,a^{(t)})}{\partial a_k}; }{; \sum_{i=1}^{N} \left[ \frac{\partial f(i,a^{(t)})}{\partial a_k}\right]^2\frac{1}{y_i}; }; \]; where the error in the channel i is \(e_{i}^{(t)} = y_i-f(i,a^{(t)}); k=1,2,...,M\) and \(\alpha^{(t)}=1\) if the process is convergent or \(\alpha^{(t)}=0.5 \alpha^{(t-1)}\) if it is divergent. Another possibility is to optimize this coefficient.; The error of k-th parameter estimate is; \[; \Delta a_k^{(e)}=; \sqrt{\frac; {\sum_{i=1}^{N}\frac{e_i^2}{y_i}}; {\sum_{i=1}^{N} \left[ \frac{\partial f(i,a^{(t)})}{\partial a_k}\right]^2\frac{1}{y_i}}; }; \]; Algorithm with higher powers w=1,2,3...:; \[; \Delta a_{k,w}^{(t+1)}=; \alpha^{(t)}; \frac; {\sum_{i=1}^{N} \frac{e_i}{y_i}\left[ \frac{\partial f(i,a^{(t)})}{\partial a_k}\right]^{2w-1}}; {\sum_{i=1}^{N} \left[ \frac{\partial f(i,a^{(t)})}{\partial a_k}\right]^{2w}\frac{1}{y_i}}; \]; We have implemented the non-symmetrical semi-empirical peak shape function. It contains the symmetrical Gaussian as well as non-symmetrical terms:; \[; f(i,a) =; \sum_{i=1}^{M} A(j); \left\{; exp\left[\frac{-(i-p(j))^2}{2\sigma^2}\right]; +\frac{1}{2}T.exp\left[\frac{(i-p(j))}{B\sigma}\right]; .erfc\left[\frac{(i-p(j))}{\sigma}+\frac{1}{2B}\right]; +\frac{1}{2}S.erfc\left[\frac{(i-p(j))}{\sigma}\right]; \right\}; \]; where T, S are relative amplitudes and B is a slope.; Detailed description of the algorithm is given in [13].; The fitting function implementing the algorithm without matrix inversion has the form of; char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:37656,power,powers,37656,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,2,['power'],['powers']
Energy Efficiency,"ialized to this value. . Returnsthe reduced quantity wrapped in a RResultPtr. Example usage:; auto sumOfIntColWithOffset = d.Reduce([](int x, int y) { return x + y; }, ""intCol"", 42);; See the description of the first Reduce overload for more information. ; Definition at line 1711 of file RInterface.hxx. ◆ Reduce() [2/2]. template<typename Proxied , typename DataSource = void> . template<typename F , typename T = typename TTraits::CallableTraits<F>::ret_type> . RResultPtr< T > ROOT::RDF::RInterface< Proxied, DataSource >::Reduce ; (; F ; f, . std::string_view ; columnName = """" . ). inline . Execute a user-defined reduce operation on the values of a column. ; Template Parameters. FThe type of the reduce callable. Automatically deduced. ; TThe type of the column to apply the reduction to. Automatically deduced. . Parameters. [in]fA callable with signature T(T,T) ; [in]columnNameThe column to be reduced. If omitted, the first default column is used instead. . Returnsthe reduced quantity wrapped in a ROOT::RDF:RResultPtr.; A reduction takes two values of a column and merges them into one (e.g. by summing them, taking the maximum, etc). This action performs the specified reduction operation on all processed column values, returning a single value of the same type. The callable f must satisfy the general requirements of a processing function besides having signature T(T,T) where T is the type of column columnName.; The returned reduced value of each thread (e.g. the initial value of a sum) is initialized to a default-constructed T object. This is commonly expected to be the neutral/identity element for the specific reduction operation f (e.g. 0 for a sum, 1 for a product). If a default-constructed T does not satisfy this requirement, users should explicitly specify an initialization value for T by calling the appropriate Reduce overload. Example usage:; auto sumOfIntCol = d.Reduce([](int x, int y) { return x + y; }, ""intCol"");; This action is lazy: upon invocation of this m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:120712,reduce,reduced,120712,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['reduce'],['reduced']
Energy Efficiency,"ibing marker shape. if n == 0 marker is a single point; if TYPE == 0 marker is hollow circle of diameter N; if TYPE == 1 marker is filled circle of diameter N; if TYPE == 2 marker is a hollow polygon describe by line XY; if TYPE == 3 marker is a filled polygon describe by line XY; if TYPE == 4 marker is described by segmented line XY; e.g. TYPE=4,N=4,XY=(-3,0,3,0,0,-3,0,3) sets a plus shape of 7x7 pixels. void SetMarkerStyle(Style_t markerstyle); Set marker style. void SetOpacity(Int_t percent); Set opacity of a window. This image manipulation routine works; by adding to a percent amount of neutral to each pixels RGB.; Since it requires quite some additional color map entries is it; only supported on displays with more than > 8 color planes (> 256; colors). void CollectImageColors(ULong_t pixel, ULong_t*& orgcolors, Int_t& ncolors, Int_t& maxcolors); Collect in orgcolors all different original image colors. void MakeOpaqueColors(Int_t percent, ULong_t* orgcolors, Int_t ncolors); Get RGB values for orgcolors, add percent neutral to the RGB and; allocate fNewColors. Int_t FindColor(ULong_t pixel, ULong_t* orgcolors, Int_t ncolors); Returns index in orgcolors (and fNewColors) for pixel. void SetRGB(Int_t cindex, Float_t r, Float_t g, Float_t b); Set color intensities for given color index.; cindex : color index; r,g,b : red, green, blue intensities between 0.0 and 1.0. void SetTextAlign(Short_t talign = 11); Set text alignment.; txalh : horizontal text alignment; txalv : vertical text alignment. void SetTextColor(Color_t cindex); Set color index for text. Int_t SetTextFont(char* fontname, TVirtualX::ETextSetMode mode); Set text font to specified name.; mode : loading flag; mode=0 : search if the font exist (kCheck); mode=1 : search the font and load it if it exists (kLoad); font : font name. Set text font to specified name. This function returns 0 if; the specified font is found, 1 if not. void SetTextFont(Font_t fontnumber); Set current text font number. void SetTextS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:34617,allocate,allocate,34617,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,10,['allocate'],['allocate']
Energy Efficiency,"ibraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.E-6, double relTol = 1E-6, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-6, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html:4001,Adapt,AdaptiveIntegratorMultiDim,4001,root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['Adapt'],['AdaptiveIntegratorMultiDim']
Energy Efficiency,"ibraries. Function documentation; AdaptiveIntegratorMultiDim(double absTol = 1.E-9, double relTol = 1E-9, unsigned int maxpts = 100000, unsigned int size = 0). construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array.; The size of working array represents the number of sub-division used for calculating the integral.; Higher the dimension, larger sizes are required for getting the same accuracy.; The size must be larger than >= (2N + 3) * (1 + MAXPTS/(2**N + 2N(N + 1) + 1))/2). For smaller value passed, the; minimum allowed will be used. AdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-9, unsigned int maxcall = 100000, unsigned int size = 0). Construct with a reference to the integrand function and given optionally; tolerance (absolute and relative), maximum number of function evaluation (maxpts) and; size of the working array. virtual ~AdaptiveIntegratorMultiDim(). destructor (no operations). {}. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously given function between xmin[] and xmax[]. return DoIntegral(const double* xmin, const double* xmax, bool absVal = false). double Integral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); evaluate the integral passing a new function. void SetFunction(const ROOT::Math::IMultiGenFunction& f); set the integration function (must implement multi-dim function interface: IBaseFunctionMultiDim). double Result() const; return result of integration. { return fResult; }. double Error() const; return integration error. { return fError; }. double RelError() const; return relative error. { return fRelError; }. int Status() const; return status of integration. { return fStatus; }. int NEval() const; return number of function evaluations in calculating the integral. { return fNEval; }. void SetRelTolerance(double relTol); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html:5931,Adapt,AdaptiveIntegratorMultiDim,5931,root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,1,['Adapt'],['AdaptiveIntegratorMultiDim']
Energy Efficiency,"ibution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovAccurate,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers,; <A HREF=""http://dx.doi.org/10.1016/0010-4655(74)90091-5"">Computer Phys. Comm. 7 (1974) 215-224</A>,; which has been implemented in; <A HREF=""http://wwwasdoc.web.cern.ch/wwwasdoc/shortwrupsdir/g116/top.html"">; CERNLIB (G116)</A>. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__VavilovAccurate.html:1377,charge,charged,1377,root/html528/ROOT__Math__VavilovAccurate.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__VavilovAccurate.html,10,['charge'],['charged']
Energy Efficiency,"ic Int_tRooPrintable::_nameLength; map<std::string,RooAbsData*>RooAbsData::_ownedComponentsOwned external components; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool ; RooArgSetRooAbsData::_varsDimensions of this data set; RooArgSet_varsNoWgtVars without weight variable ; RooRealVar*_wgtVarPointer to weight variable (if set) ; static RooAbsData::StorageTypeRooAbsData::defaultStorageType; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooDataSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooDataSet(); Default constructor for persistence. RooDataSet(const char* name, const char* title, const RooArgSet& vars, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Construct an unbinned dataset from a RooArgSet defining the dimensions of the data space. Optionally, data; can be imported at the time of construction. This constructor takes the following optional arguments. Import(TTree*) -- Import contents of given TTree. Only braches of the TTree that have names; corresponding to those of the RooAbsArgs that define the RooDataSet are; imported.; ImportFromFile(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataSet.html:18378,allocate,allocates,18378,root/html534/RooDataSet.html,https://root.cern,https://root.cern/root/html534/RooDataSet.html,2,['allocate'],['allocates']
Energy Efficiency,"ic Public Member Functions; static size_t GetNWorkItems (size_t nelements);  ; static const AFloat * GetOnePointer ();  ; static size_t GetOnePointerSize ();  ; static Executor & GetThreadExecutor ();  ; static void InitializeOneVector (size_t n);  . Public Attributes; TCpuBuffer< AFloat > fBuffer;  The buffer holding the matrix elements in column-major format. ;  . Private Member Functions; void Initialize ();  . Private Attributes; size_t fNCols;  ; size_t fNRows;  . Static Private Attributes; static std::vector< AFloat > fOnes {};  Vector filled with ones used for BLAS calls. ;  . #include <TMVA/DNN/Architectures/Cpu/CpuMatrix.h>; Constructor & Destructor Documentation. ◆ TCpuMatrix() [1/6]. template<typename AFloat > . TMVA::DNN::TCpuMatrix< AFloat >::TCpuMatrix ; (; ). inline . Definition at line 116 of file CpuMatrix.h. ◆ TCpuMatrix() [2/6]. template<typename AReal > . TMVA::DNN::TCpuMatrix< AReal >::TCpuMatrix ; (; size_t ; nRows, . size_t ; nCols . ). Construct matrix and allocate space for its elements. ; Definition at line 23 of file CpuMatrix.cxx. ◆ TCpuMatrix() [3/6]. template<typename AFloat > . TMVA::DNN::TCpuMatrix< AFloat >::TCpuMatrix ; (; const TMatrixT< AFloat > & ; ). Construct a TCpuMatrix object by (deeply) copying from a TMatrixT<Double_t> matrix. . ◆ TCpuMatrix() [4/6]. template<typename AFloat > . TMVA::DNN::TCpuMatrix< AFloat >::TCpuMatrix ; (; const TCpuBuffer< AFloat > & ; buffer, . size_t ; m, . size_t ; n . ). Construct a m-times-n matrix from the given buffer. ; The size must of course match. . ◆ TCpuMatrix() [5/6]. template<typename AFloat > . TMVA::DNN::TCpuMatrix< AFloat >::TCpuMatrix ; (; const TCpuMatrix< AFloat > & ; ). default . ◆ TCpuMatrix() [6/6]. template<typename AFloat > . TMVA::DNN::TCpuMatrix< AFloat >::TCpuMatrix ; (; TCpuMatrix< AFloat > && ; ). default . ◆ ~TCpuMatrix(). template<typename AFloat > . TMVA::DNN::TCpuMatrix< AFloat >::~TCpuMatrix ; (; ). default . Member Function Documentation. ◆ GetBuffer() [1/2]. templ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html:4014,allocate,allocate,4014,doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,1,['allocate'],['allocate']
Energy Efficiency,"icconstexpr . ReturnsVersion of this class ; Definition at line 203 of file RooFitResult.h. ◆ clone(). virtual TObject * RooFitResult::clone ; (; ); const. inlinevirtual . Definition at line 51 of file RooFitResult.h. ◆ Clone(). TObject * RooFitResult::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Definition at line 46 of file RooFitResult.h. ◆ conditionalCovarianceMatrix(). TMatrixDSym RooFitResult::conditionalCovarianceMatrix ; (; const RooArgList & ; params); const. Return a reduced covariance matrix, which is calculated as. . \[; V_\mathrm{red} = \bar{V_{22}} = V_{11} - V_{12} \cdot V_{22}^{-1} \cdot V_{21},; \]. where \( V_{11},V_{12},V_{21},V_{22} \) represent a block decomposition of the covariance matrix into observables that are propagated (labeled by index '1') and that are not propagated (labeled by index '2'), and \( \bar{V_{22}} \) is the Shur complement of \( V_{22} \), calculated as shown above.; (Note that \( V_\mathrm{red} \) is not a simple sub-matrix of \( V \)) ; Definition at line 1170 of file RooFitResult.cxx. ◆ constPars(). const RooArgList & RooFitResult::constPars ; (; ); const. inline . Return list of constant parameters. ; Definition at line 103 of file RooFitResult.h. ◆ correlation() [1/5]. const RooArgList * RooFitResult::correlation ; (; const char * ; parname); const. Return the set of correlation coefficients of parameter 'par' with all other floating parameters. ; Definition at line 411 of file RooFitResult.cxx. ◆ correlation() [2/5]. double RooF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:23543,reduce,reduced,23543,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,1,['reduce'],['reduced']
Energy Efficiency,"ich happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; // assuming df1 and df2 are separate computation graphs, do:; auto h1 = df1.Histo1D(""x"");; auto h2 = df2.Histo1D(""y"");; h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; h2->Draw(""SAME"");; ; // do not:; auto h1 = df1.Histo1D(""x"");; h1->Draw(); // we just-in-time compile here; auto h2 = df2.Histo1D(""y"");; h2->Draw(""SAME""); // we just-in-time compile again here, as the second Histo1D call is new. More features; Here is a list of the mos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:51494,allocate,allocate,51494,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['allocate'],['allocate']
Energy Efficiency,"ics-sensitive background treatment for the quantitative analysis of PIXE spectra in geoscience applications. NIM, B34 (1988), 396-402.; [3] D. D. Burgess, R. J. Tervo: Background estimation for gamma-ray spectroscopy. NIM 214 (1983), 431-434.; [4] M. Morháč, J. Kliman, V. Matoušek, M. Veselský, I. Turzo.:Identification of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; [5] M.A. Mariscotti: A method for identification of peaks in the presence of background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [6] Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376 (1996), 451.; [7] P. Bandžuch, M. Morháč, J. Krištiak: Study of the VanCitter and Gold iterative methods of deconvolutionand their application in the deconvolution of experimental spectra of positron annihilation, NIM A 384 (1997) 506-515.; [8] M. Morháč, J. Kliman, V. Matoušek, M. Veselský, I. Turzo.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. NIM, A401 (1997) 385-408.; [9] I. A. Slavic: Nonlinear least-squares fitting without matrix inversion applied to complex Gaussian spectra analysis. NIM 134 (1976) 285-289.; [10] B. Mihaila: Analysis of complex gamma spectra, Rom. Jorn. Phys., Vol. 39, No. 2, (1994), 139-148.; [11] T. Awaya: A new method for curve fitting to the data with low statistics not using chi-square method. NIM 165 (1979) 317-323.; [12] T. Hauschild, M. Jentschel: Comparison of maximum likelihood estimation and chi-square statistics applied to counting experiments. NIM A 457 (2001) 384-401.; [13] M. Morháč, J. Kliman, M. Jandel, Ľ. Krupa, V. Matoušek: Study of fitting algorithms applied to simultaneous analysis of large number of peaks in \(\gamma\)-ray spectra. Applied spectroscopy, Accepted for publication.; [14] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy. NIM A353 (1994) 280-2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:77383,Efficient,Efficient,77383,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['Efficient'],['Efficient']
Energy Efficiency,"id *&dest, const void *source); Copy the iterator source, into dest. ; dest should contain should contain the location of memory arena of size fgIteratorSize. If the collection iterator are of that size or less, the iterator will be constructed in place in this location (new with placement) Otherwise the iterator will be allocated via a regular new and its address returned by modifying the value of dest. ; Implements TVirtualCollectionProxy.; Definition at line 1642 of file TGenCollectionProxy.cxx. ◆ GetFunctionCreateIterators(). TVirtualCollectionProxy::CreateIterators_t TGenCollectionProxy::GetFunctionCreateIterators ; (; Bool_t ; read = kTRUE). overridevirtual . See typedef void (*CreateIterators_t)(void *collection, void *&begin_arena, void *&end_arena); begin_arena and end_arena should contain the location of memory arena of size fgIteratorSize. ; If the collection iterator are of that size or less, the iterators will be constructed in place in those location (new with placement) Otherwise the iterators will be allocated via a regular new and their address returned by modifying the value of begin_arena and end_arena. ; Implements TVirtualCollectionProxy.; Definition at line 1607 of file TGenCollectionProxy.cxx. ◆ GetFunctionDeleteIterator(). TVirtualCollectionProxy::DeleteIterator_t TGenCollectionProxy::GetFunctionDeleteIterator ; (; Bool_t ; read = kTRUE). overridevirtual . See typedef void (*DeleteIterator_t)(void *iter); If the sizeof iterator is greater than fgIteratorArenaSize, call delete on the addresses, Otherwise just call the iterator's destructor. ; Implements TVirtualCollectionProxy.; Definition at line 1696 of file TGenCollectionProxy.cxx. ◆ GetFunctionDeleteTwoIterators(). TVirtualCollectionProxy::DeleteTwoIterators_t TGenCollectionProxy::GetFunctionDeleteTwoIterators ; (; Bool_t ; read = kTRUE). overridevirtual . See typedef void (*DeleteTwoIterators_t)(void *begin, void *end); If the sizeof iterator is greater than fgIteratorArenaSize, call delet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:19460,allocate,allocated,19460,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,1,['allocate'],['allocated']
Energy Efficiency,"id TMatrixTSparse< Element >::Clear ; (; Option_t * ; = """"). inlineoverridevirtual . Implements TMatrixTBase< Element >.; Definition at line 130 of file TMatrixTSparse.h. ◆ ColNorm(). template<class Element > . Element TMatrixTSparse< Element >::ColNorm. overridevirtual . Column matrix norm, MAX{ SUM{ |M(i,j)|, over i}, over j}. ; The norm is induced by the 1 vector norm. ; Reimplemented from TMatrixTBase< Element >.; Definition at line 2341 of file TMatrixTSparse.cxx. ◆ conservative_sparse_sparse_product_impl(). template<class Element > . void TMatrixTSparse< Element >::conservative_sparse_sparse_product_impl ; (; const TMatrixTSparse< Element > & ; lhs, . const TMatrixTSparse< Element > & ; rhs, . Int_t ; constr = 0 . ). protected . General Sparse Matrix Multiplication (SpMM). ; This code is an adaptation of Eigen SpMM implementation. This product is conservative, meaning that it preserves the symbolic non zeros. Given lhs, rhs, it computes this = rhs * lhs. Note, result matrix is only allocated when constr=1. ; Definition at line 552 of file TMatrixTSparse.cxx. ◆ DeclFileName(). template<class Element > . static const char * TMatrixTSparse< Element >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 215 of file TMatrixTSparse.h. ◆ ExtractRow(). template<class Element > . void TMatrixTSparse< Element >::ExtractRow ; (; Int_t ; row, . Int_t ; col, . Element * ; v, . Int_t ; n = -1 . ); const. overridevirtual . Store in array v, n matrix elements of row rown starting at column coln. ; Reimplemented from TMatrixTBase< Element >.; Definition at line 509 of file TMatrixTSparse.cxx. ◆ GetColIndexArray() [1/2]. template<class Element > . const Int_t * TMatrixTSparse< Element >::GetColIndexArray. inlineoverridevirtual . Implements TMatrixTBase< Element >.; Definition at line 231 of file TMatrixTSparse.h. ◆ GetColIndexArray() [2/2]. template<class Element > . Int_t * TMatrixTSparse< Element >::GetColIndexArray",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSparse.html:39086,allocate,allocated,39086,doc/master/classTMatrixTSparse.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html,1,['allocate'],['allocated']
Energy Efficiency,"id UnZoom(); Restore the image original size. (See TASImage::UnZoom). {}. void Zoom(UInt_t , UInt_t , UInt_t , UInt_t ); Zoom the image. (See TASImage::Zoom). {}. void Flip(Int_t = 180); Flip the image by a multiple of 90 degrees. (See TASImage::Flip). {}. void Gray(Bool_t = kTRUE); Converts image to Gray. (See TASImage::Gray). {}. Bool_t IsGray() const; { return kFALSE; }. void Mirror(Bool_t = kTRUE); Mirror the image. (See TASImage::Mirror). {}. void Scale(UInt_t , UInt_t ); Scale the image. (See TASImage::Scale). {}. void Slice(UInt_t , UInt_t , UInt_t , UInt_t , UInt_t , UInt_t ); Slice the image. (See TASImage::Slice). {}. void Crop(Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); Tile the image. (See TASImage::Tile); Crop the image. (See TASImage::Crop). {}. void Pad(const char* = ""#FFFFFFFF"", UInt_t = 0, UInt_t = 0, UInt_t = 0, UInt_t = 0); Enlarge image. (See TASImage::Pad). { }. Double_t * Vectorize(UInt_t = 256, UInt_t = 4, Int_t = 0); Gaussian blurr. (See TASImage::Blur); Reduces colordepth of an image. (See TASImage::Vectorize). { return 0; }. void HSV(UInt_t = 0, UInt_t = 360, Int_t = 0, Int_t = 0, Int_t = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0); (See TASImage::HSV). {}. void Merge(const TImage* , const char* = ""alphablend"", Int_t = 0, Int_t = 0); Render multipoint gradient inside a rectangle. (See TASImage::Gradient); Merge two images. (See TASImage::Merge). {}. void Append(const TImage* , const char* = ""+"", const char* = ""#00000000""); Append image. (See TASImage::Append). {}. void Bevel(Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0, const char* = ""#ffdddddd"", const char* = ""#ff555555"", UShort_t = 1, Bool_t = kFALSE); Bevel effect. (See TASImage::Bevel). {}. void EndPaint(); {}. void DrawLine(UInt_t , UInt_t , UInt_t , UInt_t , const char* = ""#000000"", UInt_t = 1); {}. void DrawBox(Int_t , Int_t , Int_t , Int_t , const char* = ""#000000"", UInt_t = 1, Int_t = 0); {}. void FillRectangle(const char* = 0, Int_t = 0, Int_t = 0, UInt_t = 0, UInt_t = 0);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TImage.html:16375,Reduce,Reduces,16375,root/html532/TImage.html,https://root.cern,https://root.cern/root/html532/TImage.html,4,['Reduce'],['Reduces']
Energy Efficiency,"id* p = 0); voidSetIntegrationRule(ROOT::Math::Integration::GKRule); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double relTolerance); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const. protected:. boolCheckFunction(). private:. ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::GSLIntegrator&); ROOT::Math::GSLIntegrator&operator=(const ROOT::Math::GSLIntegrator&). Data Members; private:. doublefAbsTol; doublefError; ROOT::Math::GSLFunctionWrapper*fFunction; size_tfMaxIntervals; intfNEval; doublefRelTol; doublefResult; ROOT::Math::Integration::GKRulefRule; size_tfSize; intfStatus; ROOT::Math::IntegrationOneDim::TypefType; ROOT::Math::GSLIntegrationWorkspace*fWorkspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); constructors; Default constructor of GSL Integrator for Adaptive Singular integration. @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); constructor of GSL Integrator. In the case of Adaptive integration the Gauss-Krond rule of 31 points is used. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. GSLIntegrator(const Integration::Type type, const Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000). generic constructor for GSL Integrator. @param type type of integration. The possible types are defined in the Integration::Type enumeration; @param rule Gauss-Kronrod rule. It is used only for ADAPTIVE::Inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLIntegrator.html:4788,Adapt,Adaptive,4788,root/html532/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLIntegrator.html,2,['Adapt'],['Adaptive']
Energy Efficiency,"id> is the process ID of the ROOT process. Example of use for Process Monitoring:; new TMonaLisaWriter(""BATCH_ANALYSIS"",""AnalysisLoop-00001"",""lxplus050.cern.ch"");; Once when you create an analysis task, execute; gMonitoringWriter->SendInfoUser(""myname"");; gMonitoringWriter->SendInfoDescription(""My first Higgs analysis"");; gMonitoringWriter->SendInfoTime();; gMonitoringWriter->SendInfoStatus(""Submitted"");. On each node executing a subtask, you can set the status of this subtask:; gMonitoringWriter->SendProcessingStatus(""Started"");; During the processing of your analysis you can send progress updates:; gMonitoringWriter->SendProcessProgress(100,1000000); <= 100 events, 1MB processed. gMonitoringWriter-SendProcessingStatus(""Finished"");; delete gMonitoringWriter; gMonitoringWriter=0;. Example of use for any Generic Monitoring information:; TList *valuelist = new TList();; valuelist->SetOwner(kTRUE);; // append a text object; TMonaLisaText *valtext = new TMonaLisaText(""decaychannel"",""K->eeg"");; valuelist->Add(valtext);; // append a double value; TMonaLisaValue* valdouble = new TMonaLisaValue(""n-gamma"",5);; valuelist->Add(valdouble);; Bool_t success = SendParameters(valuelist);; delete valuelist;. option:; ""global"": gMonitoringWriter is initialized with this instance. ~TMonaLisaWriter(); Cleanup. Bool_t SendInfoStatus(const char* status); Sends a <status> text to MonaLisa following the process scheme:; <site> --> <jobid> --> 'status' = <status>; Used to set a global status for a groupjob, e.g.; a master-job or the general status of PROOF processing. Bool_t SendInfoUser(const char* user = 0); Sends the <user> text to MonaLisa following the process scheme:; <site> --> <jobid> --> 'user' = <user>. Bool_t SendInfoDescription(const char* jobtag); Sends the description <jobtag> following the processing scheme:; <site> --> <jobid> --> 'jobname' = <jobtag>. Bool_t SendInfoTime(); Sends the current time to MonaLisa following the processing scheme; <site> --> <jobid> --> 'time' = >u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMonaLisaWriter.html:12494,Monitor,Monitoring,12494,root/html532/TMonaLisaWriter.html,https://root.cern,https://root.cern/root/html532/TMonaLisaWriter.html,1,['Monitor'],['Monitoring']
Energy Efficiency,"idTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. THnSparseArrayChunk(const THnSparseArrayChunk&); THnSparseArrayChunk&operator=(const THnSparseArrayChunk&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TArray*fContentbin content; Int_tfCoordinateAllocationSize! size of the allocated coordinate buffer; -1 means none or fCoordinatesSize; Char_t*fCoordinates[fCoordinatesSize] compact bin coordinate buffer; Int_tfCoordinatesSizesize of the bin coordinate buffer; Int_tfSingleCoordinateSizesize of a single bin coordinate; TArrayD*fSumw2bin errors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; and create an ArrayF for errors if ""errors"" is true. ~THnSparseArrayChunk(); Destructor. void AddBin(Int_t idx, const Char_t* idxbuf); Create a new bin in this chunk. void Sumw2(); Turn on support of errors. THnSparseArrayChunk(const THnSparseArrayChunk& ). THnSparseArrayChunk& operator=(const THnSparseArrayChunk& ). THnSparseArrayChunk(); {}. void AddBinContent(Int_t idx, Double_t v = 1.). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Bool_t Matches(Int_t idx, const Char_t* idxbuf) const; Check whether bin at idx batches idxbuf.; If we don",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparseArrayChunk.html:5803,allocate,allocated,5803,root/html528/THnSparseArrayChunk.html,https://root.cern,https://root.cern/root/html528/THnSparseArrayChunk.html,6,['allocate'],['allocated']
Energy Efficiency,"ideReturn the last object in the list. Returns 0 when list is empty.Definition TList.cxx:691; TList::FirstTObject * First() const overrideReturn the first object in the list. Returns 0 when list is empty.Definition TList.cxx:657; TList::FirstLinkvirtual TObjLink * FirstLink() constDefinition TList.h:104; TList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition TList.cxx:468; TList::RemoveLastvoid RemoveLast() overrideRemove the last object of the list.Definition TList.cxx:907; TMakeProject::GenerateMissingStreamerInfosstatic void GenerateMissingStreamerInfos(TList *extrainfos, TStreamerElement *element)Generate an empty StreamerInfo for types that are used in templates parameters but are not known in t...Definition TMakeProject.cxx:413; TMakeProject::UpdateAssociativeToVectorstatic TString UpdateAssociativeToVector(const char *name)Definition TMakeProject.cxx:659; TMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval ...Definition TMap.h:40; TMap::Addvoid Add(TObject *obj) overrideThis function may not be used (but we need to provide it since it is a pure virtual in TCollection).Definition TMap.cxx:54; TMap::RemoveTObject * Remove(TObject *key) overrideRemove the (key,value) pair with key from the map.Definition TMap.cxx:296; TMap::GetValueTObject * GetValue(const char *keyname) constReturns a pointer to the value associated with keyname as name of the key.Definition TMap.cxx:236; TNamed::FillBuffervirtual void FillBuffer(char *&buffer)Encode TNamed into output buffer.Definition TNamed.cxx:104; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::fTitleTString fTitleDefinition T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:235034,efficient,efficient,235034,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['efficient'],['efficient']
Energy Efficiency,"idevirtual . Clear internal structures and variables. ; Reimplemented from TObject.; Definition at line 789 of file TMultiDimFit.cxx. ◆ DeclFileName(). static const char * TMultiDimFit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 207 of file TMultiDimFit.h. ◆ Draw(). void TMultiDimFit::Draw ; (; Option_t * ; option = ""d""). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Definition at line 134 of file TMultiDimFit.h. ◆ Eval(). Double_t TMultiDimFit::Eval ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 876 of file TMultiDimFit.cxx. ◆ EvalControl(). Double_t TMultiDimFit::EvalControl ; (; const Int_t * ; powers); const. protectedvirtual . PRIVATE METHOD: Calculate the control parameter from the passed powers. ; Definition at line 937 of file TMultiDimFit.cxx. ◆ EvalError(). Double_t TMultiDimFit::EvalError ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization error at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 904 of file TMultiDimFit.cxx. ◆ EvalFactor(). Double_t TMultiDimFit::EvalFactor ; (; Int_t ; p, . Double_t ; x . ); const. protectedvirtual . PRIVATE METHOD: Evaluate function with power p at variable value x. ; Definition at line 952 of file TMultiDimFit.cxx. ◆ FindParameterization(). void TMultiDimFit::FindParameterization ; (; Option_t * ; option = """"). virtual . Find the parameterization. ; Options: None so far; For detailed description of what this entails, please refer to the class description ; Definition at line 994 of file TMultiDimFit.cxx. ◆ Fit(). void TMultiDimFit::Fit ; (; Option_t *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:42786,power,powers,42786,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['power'],['powers']
Energy Efficiency,"idevirtual . Sets decoration style. ; Reimplemented from TVirtualX. ◆ SetOpacity(). void TGWin32VirtualXProxy::SetOpacity ; (; Int_t ; percent). overridevirtual . Sets opacity of the current window. ; This image manipulation routine works by adding to a percent amount of neutral to each pixels RGB. Since it requires quite some additional color map entries is it only supported on displays with more than > 8 color planes (> 256 colors). ; Reimplemented from TVirtualX. ◆ SetPrimarySelectionOwner(). void TGWin32VirtualXProxy::SetPrimarySelectionOwner ; (; Window_t ; id). overridevirtual . Makes the window ""id"" the current owner of the primary selection. ; That is the window in which, for example some text is selected. ; Reimplemented from TVirtualX. ◆ SetRGB(). void TGWin32VirtualXProxy::SetRGB ; (; Int_t ; cindex, . Float_t ; r, . Float_t ; g, . Float_t ; b . ). overridevirtual . Sets color intensities the specified color index ""cindex"". ; Parameters. [in]cindexcolor index ; [in]r,g,bthe red, green, blue intensities between 0.0 and 1.0 . Reimplemented from TVirtualX. ◆ SetSelectionOwner(). Bool_t TGWin32VirtualXProxy::SetSelectionOwner ; (; Window_t ; , . Atom_t & ;  . ). overridevirtual . Changes the owner and last-change time for the specified selection. ; Reimplemented from TVirtualX. ◆ SetTextAlign(). void TGWin32VirtualXProxy::SetTextAlign ; (; Short_t ; align = 11). overridevirtual . Set the text alignment. ; Reimplemented from TAttText. ◆ SetTextAngle(). void TGWin32VirtualXProxy::SetTextAngle ; (; Float_t ; tangle = 0). overridevirtual . Set the text angle. ; Reimplemented from TAttText. ◆ SetTextAttributes(). void TGWin32VirtualXProxy::SetTextAttributes ; (; ). overridevirtual . Invoke the DialogCanvas Text attributes. ; Reimplemented from TAttText. ◆ SetTextColor(). void TGWin32VirtualXProxy::SetTextColor ; (; Color_t ; tcolor = 1). overridevirtual . Set the text color. ; Reimplemented from TAttText. ◆ SetTextFont() [1/2]. Int_t TGWin32VirtualXProxy::SetTextFo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:115553,green,green,115553,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['green'],['green']
Energy Efficiency,"id SetCreated (Bool_t c=kTRUE);  ; void SetName (const TString &c);  ; void SetNVariables (UInt_t i);  ; std::vector< TMVA::VariableInfo > & Spectators ();  ; std::vector< TMVA::VariableInfo > & Targets ();  ; std::vector< TMVA::VariableInfo > & Variables ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Event * fBackTransformedEvent;  holds the current back-transformed event ;  ; DataSetInfo & fDsi;  ; DataSetInfo * fDsiOutput;  ; VectorOfCharAndInt fGet;  get variables/targets/spectators ;  ; MsgLogger * fLogger;  ! message logger ;  ; VectorOfCharAndInt fPut;  put variables/targets/spectators ;  ; TMVAVersion_t fTMVAVersion;  ; Event * fTransformedEvent;  holds the current transformed event ;  . Private Member Functions; void UpdateNorm (Int_t ivar, Double_t x);  TODO --> adapt to variable,target,spectator selection update min and max of a given variable (target) and a given transformation method. ;  . Private Attributes; Bool_t fCreated;  has been created ;  ; Bool_t fEnabled;  has been enabled ;  ; Bool_t fNormalise;  normalise input variables ;  ; UInt_t fNSpectators;  number of spectators to be transformed ;  ; UInt_t fNTargets;  number of targets to be transformed ;  ; UInt_t fNVariables;  number of variables to be transformed ;  ; UInt_t fNVars;  number of variables ;  ; Bool_t fSortGet;  if true, sort the variables into the order as defined by the user at the var definition if false, sort the variables according to the order given for the var transformation ;  ; std::vector< TMVA::VariableInfo > fSpectators;  event spectators [saved to weight file --> TODO ] ;  ; std::vector< TMVA::VariableInfo > fTargets;  event targets [saved to weight file --> TODO ] ;  ; TString fTransformName;  name of transformation ;  ; Bool_t fUseSignalTransform;  true if transformation bases on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html:13802,adapt,adapt,13802,doc/master/classTMVA_1_1VariableTransformBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html,1,['adapt'],['adapt']
Energy Efficiency,"ient window. ; Reimplemented from TVirtualX.; Definition at line 6482 of file TGWin32.cxx. ◆ HasTTFonts(). Bool_t TGWin32::HasTTFonts ; (; ); const. inlineoverridevirtual . Returns True when TrueType fonts are used. ; Reimplemented from TVirtualX.; Definition at line 185 of file TGWin32.h. ◆ IconifyWindow(). void TGWin32::IconifyWindow ; (; Window_t ; id). overridevirtual . Iconify the window. ; Reimplemented from TVirtualX.; Definition at line 4760 of file TGWin32.cxx. ◆ ImgPickPalette(). void TGWin32::ImgPickPalette ; (; GdkImage * ; image, . Int_t & ; ncol, . Int_t *& ; R, . Int_t *& ; G, . Int_t *& ; B . ). private . Returns in R G B the ncol colors of the palette used by the image. ; The image pixels are changed to index values in these R G B arrays. This produces a colormap with only the used colors (so even on displays with more than 8 planes we will be able to create GIF's when the image contains no more than 256 different colors). If it does contain more colors we will have to use GIFquantize to reduce the number of colors. The R G B arrays must be deleted by the caller. ; Definition at line 4326 of file TGWin32.cxx. ◆ Init(). Bool_t TGWin32::Init ; (; void * ; display = 0). overridevirtual . Initialize Win32 system. Returns kFALSE in case of failure. ; Reimplemented from TVirtualX.; Definition at line 954 of file TGWin32.cxx. ◆ InitWindow(). Int_t TGWin32::InitWindow ; (; ULongptr_t ; win). overridevirtual . Open window and return window number. ; Return -1 if window initialization fails. ; Reimplemented from TVirtualX.; Definition at line 2158 of file TGWin32.cxx. ◆ InternAtom(). Atom_t TGWin32::InternAtom ; (; const char * ; atom_name, . Bool_t ; only_if_exist . ). overridevirtual . Return atom handle for atom_name. ; If it does not exist create it if only_if_exist is false. Atoms are used to communicate between different programs (i.e. window manager) via the X server. ; Reimplemented from TVirtualX.; Definition at line 5353 of file TGWin32.cxx. ◆ Inters",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:85477,reduce,reduce,85477,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['reduce'],['reduce']
Energy Efficiency,"ient(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. voidCheckDestroy(). Data Members; protected:. TGLFontManager*fFontManagerFreeType font manager. private:. Int_tfClientCnt; Int_tfCnt; list<TGLContext*>fCtxs; list<pair<unsigned int,int> >fDLTrash; static TGLContextIdentity*fgDefaultIdentity. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLContextIdentity(); Constructor. ~TGLContextIdentity(); Destructor. void AddRef(TGLContext* ctx); Add context ctx to the list of references. void Release(TGLContext* ctx); Remove context ctx from the list of references. void RegisterDLNameRangeToWipe(UInt_t base, Int_t size); Remember dl range for deletion in next MakeCurrent or dtor execution. void DeleteGLResources(); Delete GL resources registered for destruction. TGLContextIdentity* GetCurrent(); Find identitfy of current context. Static. TGLContextIdentity* GetDefaultIdentity(); Get identity of a default Gl context. Static. TGLContext* GetDefaultContextAny(); Get the first GL context with the default identity.; Can return zero, but that's OK, too. Static. TGLFontManager* GetFontManager(); Get the free-type font-manager associated with this context-identity. void CheckDestroy(); Private function called when reference count is reduced. Bool_t IsValid() const; { return fValid; }. TGLContextIdentity(). void AddClientRef(); { ++fClientCnt; }. void ReleaseClient(); { --fClientCnt; CheckDestroy(); }. Int_t GetRefCnt() const; { return fCnt; }. Int_t GetClientRefCnt() const; { return fClientCnt; }. » Author: Timur Pocheptsov, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLContext.h 36675 2010-11-15 20:33:58Z matevz $ » Last generated: 2010-11-16 10:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLContextIdentity.html:2461,reduce,reduced,2461,root/html528/TGLContextIdentity.html,https://root.cern,https://root.cern/root/html528/TGLContextIdentity.html,1,['reduce'],['reduced']
Energy Efficiency,"ient(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. voidCheckDestroy(). Data Members; protected:. TGLFontManager*fFontManagerFreeType font manager. private:. Int_tfClientCnt; Int_tfCnt; list<TGLContext*>fCtxs; list<pair<unsigned int,int> >fDLTrash; static TGLContextIdentity*fgDefaultIdentity. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLContextIdentity(); Constructor. ~TGLContextIdentity(); Destructor. void AddRef(TGLContext* ctx); Add context ctx to the list of references. void Release(TGLContext* ctx); Remove context ctx from the list of references. void RegisterDLNameRangeToWipe(UInt_t base, Int_t size); Remember dl range for deletion in next MakeCurrent or dtor execution. void DeleteGLResources(); Delete GL resources registered for destruction. TGLContextIdentity* GetCurrent(); Find identitfy of current context. Static. TGLContextIdentity* GetDefaultIdentity(); Get identity of a default Gl context. Static. TGLContext* GetDefaultContextAny(); Get the first GL context with the default identity.; Can return zero, but that's OK, too. Static. TGLFontManager* GetFontManager(); Get the free-type font-manager associated with this context-identity. void CheckDestroy(); Private function called when reference count is reduced. Bool_t IsValid() const; { return fValid; }. TGLContextIdentity(). void AddClientRef(); { ++fClientCnt; }. void ReleaseClient(); { --fClientCnt; CheckDestroy(); }. Int_t GetRefCnt() const; { return fCnt; }. Int_t GetClientRefCnt() const; { return fClientCnt; }. » Author: Timur Pocheptsov, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLContext.h 36675 2010-11-15 20:33:58Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLContextIdentity.html:2461,reduce,reduced,2461,root/html530/TGLContextIdentity.html,https://root.cern,https://root.cern/root/html530/TGLContextIdentity.html,1,['reduce'],['reduced']
Energy Efficiency,"ient(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. voidCheckDestroy(). Data Members; protected:. TGLFontManager*fFontManagerFreeType font manager. private:. Int_tfClientCnt; Int_tfCnt; list<TGLContext*>fCtxs; list<pair<unsigned int,int> >fDLTrash; static TGLContextIdentity*fgDefaultIdentity. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLContextIdentity(); Constructor. ~TGLContextIdentity(); Destructor. void AddRef(TGLContext* ctx); Add context ctx to the list of references. void Release(TGLContext* ctx); Remove context ctx from the list of references. void RegisterDLNameRangeToWipe(UInt_t base, Int_t size); Remember dl range for deletion in next MakeCurrent or dtor execution. void DeleteGLResources(); Delete GL resources registered for destruction. TGLContextIdentity* GetCurrent(); Find identitfy of current context. Static. TGLContextIdentity* GetDefaultIdentity(); Get identity of a default Gl context. Static. TGLContext* GetDefaultContextAny(); Get the first GL context with the default identity.; Can return zero, but that's OK, too. Static. TGLFontManager* GetFontManager(); Get the free-type font-manager associated with this context-identity. void CheckDestroy(); Private function called when reference count is reduced. Bool_t IsValid() const; { return fValid; }. TGLContextIdentity(). void AddClientRef(); { ++fClientCnt; }. void ReleaseClient(); { --fClientCnt; CheckDestroy(); }. Int_t GetRefCnt() const; { return fCnt; }. Int_t GetClientRefCnt() const; { return fClientCnt; }. » Author: Timur Pocheptsov, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLContext.h 36675 2010-11-15 20:33:58Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLContextIdentity.html:2461,reduce,reduced,2461,root/html532/TGLContextIdentity.html,https://root.cern,https://root.cern/root/html532/TGLContextIdentity.html,2,['reduce'],['reduced']
Energy Efficiency,"ies, TTreeReader now ends the event loop when the entries in the main TTree are exhausted, consistently with other interfaces. See #6518 for more details.; TTreeProcessorMT::SetMaxTasksPerFilePerWorker is now deprecated in favor of the more flexible and newly introduced TTreeProcessorMT::SetTasksPerWorkerHint. See the relevant entries in our reference guide for more information.; The name of the sub-branches of a split collection no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging, define the following variable before creating the RDataFrame object: auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);.; With ROOT-10023 fixed, RDataFrame can now read and write certain branches containing unsplit objects, i.e. TBranchObjects. More information is available at ROOT-10022.; CSV files can now be opened and processed from remote HTTP(S) locations; RDataFrame results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by ROOT::Detail::RDF::RMergeableValue, introduced in #5552. A feature orig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:7023,efficient,efficient,7023,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['efficient'],['efficient']
Energy Efficiency,"ieve request for the query specified by ref. ;  ; Int_t Retrieve (Int_t query, const char *path=0);  Send retrieve request for the qry-th query in fQueries. ;  ; Int_t SavePerfTree (const char *pf=0, const char *qref=0);  Save performance information from TPerfStats to file 'pf'. ;  ; void SendDataSetStatus (const char *msg, UInt_t n, UInt_t tot, Bool_t st);  Send or notify data set status. ;  ; Bool_t SendingLogToWindow () const;  ; void SendLogToWindow (Bool_t mode);  ; void SetActive (Bool_t=kTRUE);  ; virtual void SetAlias (const char *alias="""");  Set an alias for this session. ;  ; void SetDataPoolUrl (const char *url);  ; void SetDrawFeedbackOption (TDrawFeedback *f, Option_t *opt);  Set draw feedback option. ;  ; void SetInputDataFile (const char *datafile);  Set the file to be used to optimally distribute the input data objects. ;  ; void SetLogLevel (Int_t level, UInt_t mask=TProofDebug::kAll);  Set server logging level. ;  ; void SetManager (TProofMgr *mgr);  Set manager and schedule its destruction after this for clean operations. ;  ; void SetMaxDrawQueries (Int_t max);  Set max number of draw queries whose results are saved. ;  ; Int_t SetParallel (Int_t nodes=-1, Bool_t random=kFALSE);  Tell PROOF how many slaves to use in parallel. ;  ; void SetParameter (const char *par, const char *value);  Set input list parameter. ;  ; void SetParameter (const char *par, Double_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Int_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long64_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long_t value);  Set an input list parameter. ;  ; void SetPerfTree (const char *pf=""perftree.root"", Bool_t withWrks=kFALSE);  Enable/Disable saving of the performance tree. ;  ; void SetPrintProgress (PrintProgress_t pp);  ; void SetProgressDialog (Bool_t on=kTRUE);  Enable/Disable the graphic progress dialog. ;  ; void SetQueryMode (EQueryM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:17082,schedul,schedule,17082,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['schedul'],['schedule']
Energy Efficiency,"iewer3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualViewer3D Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract 3D shapes viewer. ; The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing client to test preferences, add objects, control the viewer via scripting (to be added) etc. -TBuffer3D class hierarchy: Used to describe 3D objects (""shapes""); filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow our simple x3d viewer, and considerably more sophisticated OpenGL one to both work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again ... repeat 3/4/5 as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always bound to a TPad object at present [This may be removed as a restriction in the future] . You should perform the publishing to the viewer described below in the Paint() method of the object you attach to the pad (via Draw()) TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; v@ vDefinition rootcling_impl.cxx:3699; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or Pad ""pad"" (default). The view",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:1081,efficient,efficiently,1081,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['efficient'],['efficiently']
Energy Efficiency,"if (mom); 545 result = mom->GetDirectory(slash+1,printError,funcname);; 546 delete [] path; return result;; 547 }; 548 GetObject(subdir,obj);; 549 if (!obj) {; 550 if (printError) Error(funcname,""Unknown directory %s"", subdir.Data());; 551 delete [] path; return nullptr;; 552 }; 553 ; 554 result = ((TDirectory*)obj)->GetDirectory(slash+1,printError,funcname);; 555 delete [] path; return result;; 556}; 557 ; 558////////////////////////////////////////////////////////////////////////////////; 559/// Delete all objects from memory and directory structure itself.; 560 ; 561void TDirectoryFile::Close(Option_t *option); 562{; 563 if (!fList || !fSeekDir) {; 564 return;; 565 }; 566 ; 567 // Save the directory key list and header; 568 Save();; 569 ; 570 Bool_t nodelete = option ? (!strcmp(option, ""nodelete"") ? kTRUE : kFALSE) : kFALSE;; 571 ; 572 if (!nodelete) {; 573 Bool_t fast = kTRUE;; 574 TObjLink *lnk = fList->FirstLink();; 575 while (lnk) {; 576 if (lnk->GetObject()->IsA() == TDirectoryFile::Class()) {fast = kFALSE;break;}; 577 lnk = lnk->Next();; 578 }; 579 // Delete objects from directory list, this in turn, recursively closes all; 580 // sub-directories (that were allocated on the heap); 581 // if this dir contains subdirs, we must use the slow option for Delete!; 582 // we must avoid ""slow"" as much as possible, in particular Delete(""slow""); 583 // with a large number of objects (eg >10^5) would take for ever.; 584 {; 585 if (fast) fList->Delete();; 586 else fList->Delete(""slow"");; 587 }; 588 }; 589 ; 590 // Delete keys from key list (but don't delete the list header); 591 if (fKeys) {; 592 fKeys->Delete(""slow"");; 593 }; 594 ; 595 TDirectoryFile::CleanTargets();; 596}; 597 ; 598////////////////////////////////////////////////////////////////////////////////; 599/// Delete Objects or/and keys in a directory; 600///; 601/// Properties of the namecycle string:; 602/// - namecycle has the format name;cycle; 603/// - namecycle = """" is same as namecycle =""T*""; 604/// - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:18948,allocate,allocated,18948,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"if object is referenced by a TRef or TRefArrayDefinition TObject.h:65; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TObject::Readvirtual Int_t Read(const char *name)Read contents of object with specified name from the current directory.Definition TObject.cxx:654; TObject::AddToTObjectTablestatic void AddToTObjectTable(TObject *)Private helper function which will dispatch to TObjectTable::AddObj.Definition TObject.cxx:181; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TObject::Obsoletevoid Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constUse this method to declare a method obsolete.Definition TObject.cxx:1055; TStorage::UpdateIsOnHeapstatic void UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits)Definition TStorage.h:123; TStorage::ObjectAllocArraystatic void * ObjectAllocArray(size_t size)Used to allocate array of TObject on the heap (via TObject::operator new[]()).Definition TStorage.cxx:303; TStorage::ObjectAllocstatic void * ObjectAlloc(size_t size)Used to allocate a TObject on the heap (via TObject::operator new()).Definition TStorage.cxx:291; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; bool; int; unsigned int; ROOT::Detail::HasBeenDeletedR__ALWAYS_INLINE bool HasBeenDeleted(const TObject *obj)Check if the TObject's memory has been deleted.Definition TObject.h:402; ROOT::Internal::DeleteChangesMemorybool DeleteChangesMemory()Definition TObject.cxx:133; ROOT::Internal::DeleteChangesMemoryImplbool DeleteChangesMemoryImpl()Definition TObject.cxx:76; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; Drawth1 Draw(). corebaseincTObject.h. ROOT master - Reference Guide Generated on Tue No",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:32491,allocate,allocate,32491,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['allocate'],['allocate']
Energy Efficiency,"if the size of fSortedBranches is different from the; 5159 // size of the list of branches before triggering the initialisation of the fSortedBranches; 5160 // container to cover two cases:; 5161 // 1. This is the first time we flush. fSortedBranches is empty and we need to fill it.; 5162 // 2. We flushed at least once already but a branch has been be added to the tree since then; 5163 if (fSortedBranches.size() != unsigned(nb)) { const_cast<TTree*>(this)->InitializeBranchLists(false); }; 5164 ; 5165 BoolRAIIToggle sentry(fIMTFlush);; 5166 fIMTZipBytes.store(0);; 5167 fIMTTotBytes.store(0);; 5168 std::atomic<Int_t> nerrpar(0);; 5169 std::atomic<Int_t> nbpar(0);; 5170 std::atomic<Int_t> pos(0);; 5171 ; 5172 auto mapFunction = [&]() {; 5173 // The branch to process is obtained when the task starts to run.; 5174 // This way, since branches are sorted, we make sure that branches; 5175 // leading to big tasks are processed first. If we assigned the; 5176 // branch at task creation time, the scheduler would not necessarily; 5177 // respect our sorting.; 5178 Int_t j = pos.fetch_add(1);; 5179 ; 5180 auto branch = fSortedBranches[j].second;; 5181 if (R__unlikely(!branch)) { return; }; 5182 ; 5183 if (R__unlikely(gDebug > 0)) {; 5184 std::stringstream ss;; 5185 ss << std::this_thread::get_id();; 5186 Info(""FlushBaskets"", ""[IMT] Thread %s"", ss.str().c_str());; 5187 Info(""FlushBaskets"", ""[IMT] Running task for branch #%d: %s"", j, branch->GetName());; 5188 }; 5189 ; 5190 Int_t nbtask = branch->FlushBaskets();; 5191 ; 5192 if (nbtask < 0) { nerrpar++; }; 5193 else { nbpar += nbtask; }; 5194 };; 5195 ; 5196 ROOT::TThreadExecutor pool;; 5197 pool.Foreach(mapFunction, nb);; 5198 ; 5199 fIMTFlush = false;; 5200 const_cast<TTree*>(this)->AddTotBytes(fIMTTotBytes);; 5201 const_cast<TTree*>(this)->AddZipBytes(fIMTZipBytes);; 5202 ; 5203 return nerrpar ? -1 : nbpar.load();; 5204 }; 5205#endif; 5206 for (Int_t j = 0; j < nb; j++) {; 5207 TBranch* branch = (TBranch*) lb->UncheckedAt(j);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:207607,schedul,scheduler,207607,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['schedul'],['scheduler']
Energy Efficiency,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v626/namespaceROOT.html:26431,power,power,26431,doc/v626/namespaceROOT.html,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html,1,['power'],['power']
Energy Efficiency,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 493 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 660 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 665 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 667 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:28322,power,power,28322,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,1,['power'],['power']
Energy Efficiency,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 494 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/namespaceROOT.html:23231,power,power,23231,doc/v624/namespaceROOT.html,https://root.cern,https://root.cern/doc/v624/namespaceROOT.html,1,['power'],['power']
Energy Efficiency,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 495 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 659 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 666 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 658 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v622/namespaceROOT.html:23192,power,power,23192,doc/v622/namespaceROOT.html,https://root.cern,https://root.cern/doc/v622/namespaceROOT.html,1,['power'],['power']
Energy Efficiency,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 669 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 671 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 663 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v630/namespaceROOT.html:35549,power,power,35549,doc/v630/namespaceROOT.html,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html,1,['power'],['power']
Energy Efficiency,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 548 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 50 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 609 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 614 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 616 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 608 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v618/namespaceROOT.html:22502,power,power,22502,doc/v618/namespaceROOT.html,https://root.cern,https://root.cern/doc/v618/namespaceROOT.html,1,['power'],['power']
Energy Efficiency,"ifferent threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 549 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize() [1/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; ROOT::Internal::TStringView ; str, . T & ; value . ). Definition at line 158 of file StringConv.hxx. ◆ FromHumanReadableSize() [2/2]. template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 609 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 614 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 616 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 608 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v620/namespaceROOT.html:22594,power,power,22594,doc/v620/namespaceROOT.html,https://root.cern,https://root.cern/doc/v620/namespaceROOT.html,1,['power'],['power']
Energy Efficiency,"ificationSettings::endTestCycle ; (; ). virtual . action to be done when the training cycle is ended (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 326 of file NeuralNet.cxx. ◆ endTrainCycle(). void TMVA::DNN::ClassificationSettings::endTrainCycle ; (; double ; ). virtual . action to be done when the training cycle is ended (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 296 of file NeuralNet.cxx. ◆ setResultComputation(). void TMVA::DNN::ClassificationSettings::setResultComputation ; (; std::string ; _fileNameNetConfig, . std::string ; _fileNameResult, . std::vector< Pattern > * ; _resultPatternContainer . ). preparation for monitoring output ; Definition at line 520 of file NeuralNet.cxx. ◆ setWeightSums(). void TMVA::DNN::ClassificationSettings::setWeightSums ; (; double ; sumOfSigWeights, . double ; sumOfBkgWeights . ). set the weight sums to be scaled to (preparations for monitoring output) ; Definition at line 512 of file NeuralNet.cxx. ◆ startTestCycle(). void TMVA::DNN::ClassificationSettings::startTestCycle ; (; ). virtual . action to be done when the test cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 316 of file NeuralNet.cxx. ◆ startTrainCycle(). void TMVA::DNN::ClassificationSettings::startTrainCycle ; (; ). virtual . action to be done when the training cycle is started (e.g. ; update some monitoring output) ; Reimplemented from TMVA::DNN::Settings.; Definition at line 281 of file NeuralNet.cxx. ◆ testIteration(). void TMVA::DNN::ClassificationSettings::testIteration ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented from TMVA::DNN::Settings.; Definition at line 930 of file NeuralNet.h. ◆ testSample(). void TMVA::DNN::ClassificationSettings::testSample ; (; double ; error, . double ; output, . double ; target, . double ; weight . ). virtual . action to b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:8346,monitor,monitoring,8346,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,1,['monitor'],['monitoring']
Energy Efficiency,"ify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TAttParticle&operator=(const TAttParticle&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tSampleMass() const; virtual Double_tSampleMass(Double_t widthcut) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TAttParticle(); TAttParticle(const TAttParticle&); TAttParticle(const char* name, const char* title, Double_t Mass, Bool_t Stable, Double_t DecayWidth, Double_t Charge, const char* Type, Int_t MCnumber, Int_t granularity = 90, Double_t LowerCutOff = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAttParticle.html:5323,Charge,Charge,5323,root/html602/TAttParticle.html,https://root.cern,https://root.cern/root/html602/TAttParticle.html,2,['Charge'],['Charge']
Energy Efficiency,"ig, bkg), fsig);; ; std::unique_ptr<RooDataSet> data{model.generate({x, y, z}, 20000)};; ; // P r o j e c t p d f a n d d a t a o n x; // -------------------------------------------------; ; // Make plain projection of data and pdf on x observable; RooPlot *frame = x.frame(Title(""Projection of 3D data and pdf on X""), Bins(40));; data->plotOn(frame);; model.plotOn(frame);; ; // D e f i n e p r o j e c t e d s i g n a l l i k e l i h o o d r a t i o; // ----------------------------------------------------------------------------------; ; // Calculate projection of signal and total likelihood on (y,z) observables; // i.e. integrate signal and composite model over x; RooAbsPdf *sigyz = sig.createProjection(x);; RooAbsPdf *totyz = model.createProjection(x);; ; // Construct the log of the signal / signal+background probability; RooFormulaVar llratio_func(""llratio"", ""log10(@0)-log10(@1)"", RooArgList(*sigyz, *totyz));; ; // P l o t d a t a w i t h a L L r a t i o c u t; // -------------------------------------------------------; ; // Calculate the llratio value for each event in the dataset; data->addColumn(llratio_func);; ; // Extract the subset of data with large signal likelihood; std::unique_ptr<RooAbsData> dataSel{data->reduce(Cut(""llratio>0.7""))};; ; // Make plot frame; RooPlot *frame2 = x.frame(Title(""Same projection on X with LLratio(y,z)>0.7""), Bins(40));; ; // Plot select data on frame; dataSel->plotOn(frame2);; ; // M a k e M C p r o j e c t i o n o f p d f w i t h s a m e L L r a t i o c u t; // ---------------------------------------------------------------------------------------------; ; // Generate large number of events for MC integration of pdf projection; std::unique_ptr<RooDataSet> mcprojData{model.generate({x, y, z}, 10000)};; ; // Calculate LL ratio for each generated event and select MC events with llratio)0.7; mcprojData->addColumn(llratio_func);; std::unique_ptr<RooAbsData> mcprojDataSel{mcprojData->reduce(Cut(""llratio>0.7""))};; ; // Project model on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf316__llratioplot_8C.html:2726,reduce,reduce,2726,doc/master/rf316__llratioplot_8C.html,https://root.cern,https://root.cern/doc/master/rf316__llratioplot_8C.html,1,['reduce'],['reduce']
Energy Efficiency,"ightBegin, ItWeight itWeightEnd) constDefinition NeuralNet.icc:1321; TMVA::DNN::Net::setOutputSizevoid setOutputSize(size_t sizeOutput)set the output size of the DNNDefinition NeuralNet.h:1093; TMVA::DNN::Net::forwardPatternvoid forwardPattern(const LayerContainer &_layers, std::vector< LayerData > &layerData) constDefinition NeuralNet.icc:1221; TMVA::DNN::Net::backPropagatevoid backPropagate(std::vector< std::vector< LayerData > > &layerPatternData, const Settings &settings, size_t trainFromLayer, size_t totalNumWeights) constDefinition NeuralNet.icc:1355; TMVA::DNN::SettingsSettings for the training of the neural net.Definition NeuralNet.h:730; TMVA::DNN::Settings::m_batchSizesize_t m_batchSizemini-batch sizeDefinition NeuralNet.h:838; TMVA::DNN::Settings::setDropOutvoid setDropOut(Iterator begin, Iterator end, size_t _dropRepetitions)set the drop-out configuration (layer-wise)Definition NeuralNet.h:759; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max, int bins2, double min2, double max2)for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:71582,monitor,monitoringDefinition,71582,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['monitor'],['monitoringDefinition']
Energy Efficiency,"ignal and background were known, this method contains the entire; physical information, and is therefore optimal. Usually, kernel estimation; methods are used to approximate the PDFs using the events from the; training sample. ; A very simple probability density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MethodPDERS.html:1468,Adapt,Adaptive,1468,root/html532/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html532/TMVA__MethodPDERS.html,4,['Adapt'],['Adaptive']
Energy Efficiency,"igned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (uns",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:5792,efficient,efficient,5792,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['efficient'],['efficient']
Energy Efficiency,"igned to each point.; set<TEveElement::TEveListTreeInfo,less<TEveElement::TEveListTreeInfo>,allocator<TEveElement::TEveListTreeInfo> >TEveElement::fItems! Set of list-tree-items.; Int_tTPolyMarker3D::fLastPointThe index of the last filled point; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; TEveProjectionManager*TEveProjected::fManagermanager; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTPolyMarker3D::fNNumber of allocated points; TStringTPolyMarker3D::fNameName of polymarker; Int_tTEveElement::fNumChildren!; TStringTPolyMarker3D::fOptionOptions; Bool_tTPointSet3D::fOwnIdsFlag specifying id-objects are owned by the point-set; Float_t*TPolyMarker3D::fP[3*fN] Array of X,Y,Z coordinates; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; list<TEveElement*>TEveElement::fParentsList of parents.; Bool_tTEveElement::fPickable; TEveProjectable*TEveProjected::fProjectablelink to original object; list<TEveProjected*>TEveProjectable::fProjectedListreferences to projected instances.; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tTEveLine::fRnrLine; Bool_tTEveLine::fRnrPoints; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTEveLine::fSmooth; TRefTEveElement::fSourceExternal object that is represented by this element.; TEvePointSelectorConsumer::ETreeVarType_eTEvePointSelectorConsumer::fSourceCSCoordinate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveLineProjected.html:27444,allocate,allocated,27444,root/html534/TEveLineProjected.html,https://root.cern,https://root.cern/root/html534/TEveLineProjected.html,2,['allocate'],['allocated']
Energy Efficiency,igurationBase class of the Configurations for the member wise looping routines ;  ►Nwriter;  Cwriter;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CApplicationWindowMain Qt&Root Application Window: ;  CBalancerInfo;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CClusterD;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CData;  CDebuggingSamplerDebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging ;  CDebuggingTestStatDebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging ;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CDUMMY;  CEditor;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  CFUMILI2;  Cfuncptr_and_voidptr_t;  CGaussFunction;  CGcCache_t;  CGCValues_t;  Cgroup;  CGSL_BFGS;  CGSL_BFGS2;  CGSL_FR;  CGSL_NLS;  CGSL_PR;  Ch1analysis;  Ch1analysisTreeReader;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CLINEAR;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMINUIT2;  CMultiDistFree functions adapter needed by UNURAN for multidimensional cont distribution ;  CMYSQL_BIND;  CMYSQL_STMT;  CNuMuToNuE_Oscillation;  ►CParamHistFunc;  CCacheElem;  CPassiveKeyGrab;  Cpasswd;  CPattern;  CPgSQL_Stmt_t;  CPictureAttributes_t;  ►CPiece,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:81418,adapt,adapter,81418,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['adapt'],['adapter']
Energy Efficiency,"iki). globus; OFF; Globus authentication support, requires Globus toolkit. gminimal; OFF; Do not automatically search for support libraries, but include X11. gnuinstall; OFF; Perform installation following the GNU guidelines. gsl_shared; OFF; Enable linking against shared libraries for GSL (default no). gviz; ON; Graphs visualization support, requires graphviz. hdfs; ON; HDFS support; requires libhdfs from HDFS >= 0.19.1. http; *; HTTP Server support. imt; ON; Enable ROOT Multithreading Capabilities (default ON from version 6.10). jemalloc; OFF; Using the jemalloc allocator. krb5; ON; Kerberos5 support, requires Kerberos libs. ldap; ON; LDAP support, requires (Open)LDAP libs. mathmore; ON; Build the new libMathMore extended math library, requires GSL (vers. >= 1.8). memstat; *; A memory statistics utility, helps to detect memory leaks. minimal; OFF; Do not automatically search for support libraries. minuit2; *; Build the new libMinuit2 minimizer library. monalisa; ON; Monalisa monitoring support, requires libapmoncpp. mt; OFF; Multi-threading support (deprecated and unused since ROOT v6.12). mysql; ON; MySQL support, requires libmysqlclient. odbc; ON; ODBC support, requires libiodbc or libodbc. opengl; ON; OpenGL support, requires libGL and libGLU. oracle; ON; Oracle support, requires libocci. pgsql; ON; PostgreSQL support, requires libpq. pythia6; ON; Pythia6 EG support, requires libPythia6. pythia6_nolink; OFF; Delayed linking of Pythia6 library. pythia8; ON; Pythia8 EG support, requires libPythia8. python; ON; Python ROOT bindings, requires python >= 2.2. qt. Qt graphics backend, requires libqt >= 4.8. qtgsi; *; GSI's Qt integration, requires libqt >= 4.8. roofit; *; Build the libRooFit advanced fitting package. root7; OFF; ROOT 7 support (read more). roottest; OFF; Include roottest in the test suit, if roottest exists in root or if it is a sibling directory. ruby; OFF; Ruby ROOT bindings, requires ruby >= 1.8. r; OFF; R ROOT bindings, requires R, Rcpp and RInside",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:10820,monitor,monitoring,10820,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['monitor'],['monitoring']
Energy Efficiency,"ile NeuralNet.h. ◆ maxConvergenceCount(). size_t TMVA::DNN::Settings::maxConvergenceCount ; (; ); const. inline . returns the max convergence count so far ; Definition at line 828 of file NeuralNet.h. ◆ minError(). size_t TMVA::DNN::Settings::minError ; (; ); const. inline . returns the smallest error so far ; Definition at line 829 of file NeuralNet.h. ◆ minimizerType(). MinimizerType TMVA::DNN::Settings::minimizerType ; (; ); const. inline . which minimizer shall be used (e.g. SGD) ; Definition at line 774 of file NeuralNet.h. ◆ momentum(). double TMVA::DNN::Settings::momentum ; (; ); const. inline . get the momentum (e.g. for SGD) ; Definition at line 772 of file NeuralNet.h. ◆ pads(). void TMVA::DNN::Settings::pads ; (; int ; numPads). inline . preparation for monitoring ; Definition at line 818 of file NeuralNet.h. ◆ plot(). void TMVA::DNN::Settings::plot ; (; std::string ; histoName, . std::string ; options, . int ; pad, . EColor ; color . ). inline . for monitoring ; Definition at line 823 of file NeuralNet.h. ◆ regularization(). EnumRegularization TMVA::DNN::Settings::regularization ; (; ); const. inline . some regularization of the DNN is turned on? ; Definition at line 813 of file NeuralNet.h. ◆ repetitions(). int TMVA::DNN::Settings::repetitions ; (; ); const. inline . how many steps have to be gone until the batch is changed ; Definition at line 773 of file NeuralNet.h. ◆ setDropOut(). template<typename Iterator > . void TMVA::DNN::Settings::setDropOut ; (; Iterator ; begin, . Iterator ; end, . size_t ; _dropRepetitions . ). inline . set the drop-out configuration (layer-wise) ; Parameters. beginbegin of an array or vector denoting the drop-out probabilities for each layer ; endend of an array or vector denoting the drop-out probabilities for each layer ; _dropRepetitionsdenotes after how many repetitions the drop-out setting (which nodes are dropped out exactly) is changed . Definition at line 759 of file NeuralNet.h. ◆ setMonitoring(). void TMVA::DNN::S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:10108,monitor,monitoring,10108,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['monitor'],['monitoring']
Energy Efficiency,"ile containing the class declaration ; Definition at line 69 of file RooLinearVar.h. ◆ evaluate(). double RooLinearVar::evaluate ; (; ); const. overrideprotectedvirtual . Calculate current value of this object. ; Implements RooAbsReal.; Definition at line 113 of file RooLinearVar.cxx. ◆ getBinning() [1/2]. const RooAbsBinning & RooLinearVar::getBinning ; (; const char * ; name = nullptr, . bool ; verbose = true, . bool ; createOnTheFly = false . ); const. overridevirtual . Const version of getBinning() ; Implements RooAbsRealLValue.; Definition at line 238 of file RooLinearVar.cxx. ◆ getBinning() [2/2]. RooAbsBinning & RooLinearVar::getBinning ; (; const char * ; name = nullptr, . bool ; verbose = true, . bool ; createOnTheFly = false . ). overridevirtual . Retrieve binning of this linear transformation. ; A RooLinearVar does not have its own binnings but uses linearly transformed binnings of the input variable. If a given binning exists on the input variable, it will also exist on this linear transformation, and a binning adaptor object is created on the fly. ; Implements RooAbsRealLValue.; Definition at line 206 of file RooLinearVar.cxx. ◆ getBinningNames(). std::list< std::string > RooLinearVar::getBinningNames ; (; ); const. overridevirtual . Get a list of all binning names. ; An empty name implies the default binning. A 0 pointer should be passed to getBinning in this case. ; Implements RooAbsLValue.; Definition at line 247 of file RooLinearVar.cxx. ◆ hasBinning(). bool RooLinearVar::hasBinning ; (; const char * ; name); const. overridevirtual . Returns true if binning with given name exists.If a given binning exists on the input variable, it will also exists on this linear transformation. ; Implements RooAbsRealLValue.; Definition at line 263 of file RooLinearVar.cxx. ◆ IsA(). TClass * RooLinearVar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsRealLValue.; Definition at line 69 of file RooLinearVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearVar.html:71747,adapt,adaptor,71747,doc/master/classRooLinearVar.html,https://root.cern,https://root.cern/doc/master/classRooLinearVar.html,1,['adapt'],['adaptor']
Energy Efficiency,"ile f(""tree2.root"",""recreate"");. //create the file, the Tree; TTree t2(""t2"",""a Tree with data from a fake Geant3"");; // declare a variable of the C structure type; Gctrak_t gstep;. // add the branches for a subset of gstep; t2.Branch(""vect"",gstep.vect,""vect[7]/F"");; t2.Branch(""getot"",&gstep.getot,""getot/F"");; t2.Branch(""gekin"",&gstep.gekin,""gekin/F"");; t2.Branch(""nmec"",&gstep.nmec,""nmec/I"");; t2.Branch(""lmec"",gstep.lmec,""lmec[nmec]/I"");; t2.Branch(""destep"",&gstep.destep,""destep/F"");; t2.Branch(""pid"",&gstep.pid,""pid/I"");. //Initialize particle parameters at first point; Float_t px,py,pz,p,charge=0;; Float_t vout[7];; Float_t mass = 0.137;; Bool_t newParticle = kTRUE;; gstep.step = 0.1;; gstep.destep = 0;; gstep.nmec = 0;; gstep.pid = 0;. //transport particles; for (Int_t i=0; i<10000; i++) {; //generate a new particle if necessary (Geant3 emulation); if (newParticle) {; px = gRandom->Gaus(0,.02);; py = gRandom->Gaus(0,.02);; pz = gRandom->Gaus(0,.02);; p = TMath::Sqrt(px*px+py*py+pz*pz);; charge = 1;; if (gRandom->Rndm() < 0.5) charge = -1;; gstep.pid += 1;; gstep.vect[0] = 0;; gstep.vect[1] = 0;; gstep.vect[2] = 0;; gstep.vect[3] = px/p;; gstep.vect[4] = py/p;; gstep.vect[5] = pz/p;; gstep.vect[6] = p*charge;; gstep.getot = TMath::Sqrt(p*p + mass*mass);; gstep.gekin = gstep.getot - mass;; newParticle = kFALSE;; }; // fill the Tree with current step parameters; t2.Fill();. //transport particle in magnetic field (Geant3 emulation); helixStep(gstep.step, gstep.vect, vout);; //make one step; //apply energy loss; gstep.destep = gstep.step*gRandom->Gaus(0.0002,0.00001);; gstep.gekin -= gstep.destep;; gstep.getot = gstep.gekin + mass;; gstep.vect[6]= charge*TMath::Sqrt(gstep.getot*gstep.getot; - mass*mass);; gstep.vect[0] = vout[0];; gstep.vect[1] = vout[1];; gstep.vect[2] = vout[2];; gstep.vect[3] = vout[3];; gstep.vect[4] = vout[4];; gstep.vect[5] = vout[5];; gstep.nmec = (Int_t)(5*gRandom->Rndm());; for (Int_t l=0; l<gstep.nmec; l++) gstep.lmec[l] = l;; if (gstep.gekin ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:563658,charge,charge,563658,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['charge'],['charge']
Energy Efficiency,"ile info 'table'; TStringTNamed::fNameobject identifier; Int_tTProofMonSender::fSummaryVrsVersion of the summary 'table'; TStringTNamed::fTitleobject title; static TProofMonSender::EConfigBitsTProofMonSender::kSendDataSetInfo; static TProofMonSender::EConfigBitsTProofMonSender::kSendFileInfo; static TProofMonSender::EConfigBitsTProofMonSender::kSendSummary. private:. TStringfDSetSendOptsOpts for posting dataset table; TStringfFilesSendOptsOpts for posting files table; TVirtualMonitoringWriter*fWriterWriter instance connect to backend. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofMonSenderSQL(const char* serv, const char* user, const char* pass, const char* table = ""proof.proofquerylog"", const char* dstab = 0, const char* filestab = 0); Main constructor. ~TProofMonSenderSQL(); Destructor. Int_t SendSummary(TList* , const char* ); Send 'summary' record for the table 'proofquerylog'. There are three versions of this record, corresponding the evolution; in time of the monitoring requirements. The default version 2 corresponds to the table created with the following command:. CREATE TABLE proofquerylog (; id int(11) NOT NULL auto_increment,; proofuser varchar(32) NOT NULL,; proofgroup varchar(32) default NULL,; querybegin datetime default NULL,; queryend datetime default NULL,; walltime int(11) default NULL,; cputime float default NULL,; bytesread bigint(20) default NULL,; events bigint(20) default NULL,; totevents bigint(20) default NULL,; workers int(11) default NULL,; querytag varchar(64) NOT NULL,; vmemmxw bigint(20) default NULL,; rmemmxw bigint(20) default NULL,; vmemmxm bigint(20) default NULL,; rmemmxm bigint(20) default NULL,; numfiles int(11) default NULL,; missfiles int(11) default NULL,; status int(11) default NULL,; rootver varchar(32) NOT NULL,; PRIMARY KEY (id) );. Version 1 corresponds to the table created with the following command:; ('user','begin','end' instead of 'proofuser', 'querybegin', 'queryend'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofMonSenderSQL.html:7541,monitor,monitoring,7541,root/html602/TProofMonSenderSQL.html,https://root.cern,https://root.cern/root/html602/TProofMonSenderSQL.html,4,['monitor'],['monitoring']
Energy Efficiency,"ile::GetCompressionFactorFloat_t GetCompressionFactor()Return the file compression factor.Definition TFile.cxx:1202; TFile::SysWritevirtual Int_t SysWrite(Int_t fd, const void *buf, Int_t len)Interface to system write. All arguments like in POSIX write().Definition TFile.cxx:4514; TFile::GetFileReadCallsstatic Int_t GetFileReadCalls()Static function returning the total number of read calls from all files.Definition TFile.cxx:4591; TFile::GetCacheReadTFileCacheRead * GetCacheRead(const TObject *tree=nullptr) constReturn a pointer to the current read cache.Definition TFile.cxx:1262; TFile::GetOptionOption_t * GetOption() const overrideDefinition TFile.h:240; TFile::fgAsyncOpenRequestsstatic TList * fgAsyncOpenRequestsDefinition TFile.h:122; TFreeService class for TFile.Definition TFree.h:27; TKeyBook space in a file, create I/O buffers, to fill them, (un)compress them.Definition TKey.h:28; TListA doubly linked list.Definition TList.h:38; TMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval ...Definition TMap.h:40; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::MayNotUsevoid MayNotUse(const char *method) constUse this method to signal that a method (defined in a base class) may not be called in a derived clas...Definition TObject.cxx:1046; TProcessIDA TProcessID identifies a ROOT job in a unique way in time and space.Definition TProcessID.h:74; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TUrlThis class represents a WWW compatible URL.Definition TUrl.h:33; bool; double; int; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOTtbb::task_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8h_source.html:50045,efficient,efficient,50045,doc/master/TFile_8h_source.html,https://root.cern,https://root.cern/doc/master/TFile_8h_source.html,1,['efficient'],['efficient']
Energy Efficiency,"ileMerger (const TFileMerger &)=delete;  ; TFileMerger & operator= (const TFileMerger &)=delete;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TFileMerger.h>. Inheritance diagram for TFileMerger:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ TIOFeatures. using TFileMerger::TIOFeatures = ROOT::TIOFeatures. private . Definition at line 32 of file TFileMerger.h. Member Enumeration Documentation. ◆ EPartialMergeType. enum TFileMerger::EPartialMergeType. Type of the partial merge. . EnumeratorkRegular Normal merge, overwriting the output file. . kIncremental Merge the input file with the content of the output file (if already existing). . kResetable Only the objects with a MergeAfterReset member function. . kNonResetable Only the objects without a MergeAfterReset member function. . kDelayWrite Delay the TFile write (to reduce the number of write when reusing the file) . kAll Merge all type of objects (default) . kAllIncremental Merge incrementally all type of objects. . kOnlyListed Only the objects specified in fObjectNames list. . kSkipListed Skip objects specified in fObjectNames list. . kKeepCompression Keep compression level unchanged for each input files. . Definition at line 69 of file TFileMerger.h. Constructor & Destructor Documentation. ◆ TFileMerger() [1/2]. TFileMerger::TFileMerger ; (; const TFileMerger & ; ). privatedelete . ◆ TFileMerger() [2/2]. TFileMerger::TFileMerger ; (; Bool_t ; isLocal = kTRUE, . Bool_t ; histoOneGo = kTRUE . ). Create file merger object. ; Definition at line 93 of file TFileMerger.cxx. ◆ ~TFileMerger(). TFileMerger::~TFileMerger ; (; ). override . Cleanup. ; Definition at line 107 of file TFileMerger.cxx. Member Function Documentation. ◆ AddAdoptFile(). Bool_t TFileMerger::AddAdoptFile ; (; TFile * ; source, . Bool_t ; cpProgress = kTRUE . ). virtual . Add the TFile t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileMerger.html:16508,reduce,reduce,16508,doc/master/classTFileMerger.html,https://root.cern,https://root.cern/doc/master/classTFileMerger.html,1,['reduce'],['reduce']
Energy Efficiency,"ils see html manual and references; Double_tfSigmaCalccalculated value of sigma parameter; Double_tfSigmaErrerror value of sigma parameter; Double_tfSigmaInitinitial value of sigma parameter; Int_tfStatisticTypetype of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; Double_tfTCalccalculated value of t parameter; Double_tfTErrerror value of t parameter; Double_tfTInitinitial value of t parameter (relative amplitude of tail), for details see html manual and references; TStringTNamed::fTitleobject title; Int_tfXmaxlast fitted channel; Int_tfXminfirst fitted channel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSpectrumFit(); default constructor. TSpectrumFit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks is .  ;  ;  ;  ;  ;  ;  ;  . where a represents vector of; fitted parameters (positions p(j), amplitudes A(j), sigma, relative amplitudes; T, S and slope B).;  . ~TSpectrumFit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Deramp(Double_t i, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of peak shape function (see manual); according to amplitude of peak.; Function parameters:; -i-channel; -i0-position of peak; -sigma-sigma of peak; -t, s-relative amplitudes; -b-slope. Double_t Deri0(Double_t i, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumFit.html:13274,allocate,allocates,13274,root/html528/TSpectrumFit.html,https://root.cern,https://root.cern/root/html528/TSpectrumFit.html,6,['allocate'],['allocates']
Energy Efficiency,"imating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumTransform.html:1794,adapt,adaptive,1794,doc/master/classTSpectrumTransform.html,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html,1,['adapt'],['adaptive']
Energy Efficiency,"imator: public TObject. TRobustEstimator. Minimum Covariance Determinant Estimator - a Fast Algorithm; invented by Peter J.Rousseeuw and Katrien Van Dreissen; ""A Fast Algorithm for the Minimum covariance Determinant Estimator""; Technometrics, August 1999, Vol.41, NO.3. What are robust estimators?; ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recongize them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected.""; R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz; ""Data Analysis Techniques for High-Energy Physics"", 2nd edition. What does this algorithm do?; It computes a highly robust estimator of multivariate location and scatter.; Then, it takes those estimates to compute robust distances of all the; data vectors. Those with large robust distances are considered outliers.; Robust distances can then be plotted for better visualization of the data. How does this algorithm do it?; The MCD objective is to find h observations(out of n) whose classical; covariance matrix has the lowest determinant. The MCD estimator of location; is then the average of those h points and the MCD estimate of scatter; is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2; so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers.; The algorithm also allows for exact fit situations - that is, when h or more; observations lie on a hyperplane. Then the algorithm still yields the MCD location T; and scatter matrix S, the latter being singular as it should b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TRobustEstimator.html:1294,Energy,Energy,1294,root/html532/TRobustEstimator.html,https://root.cern,https://root.cern/root/html532/TRobustEstimator.html,4,['Energy'],['Energy']
Energy Efficiency,"imeT >;  Record wall time and CPU time between construction and destruction. More...;  ; class  ROOT::Experimental::RNTupleView< T >;  An RNTupleView for a known type. More...;  ; class  ROOT::Experimental::RNTupleViewBase< T >;  An RNTupleView provides read-only access to a single field of the ntuple. More...;  ; class  ROOT::Experimental::RNTupleWriteOptions;  Common user-tunable settings for storing ntuples. More...;  ; class  ROOT::Experimental::RNTupleWriteOptionsDaos;  DAOS-specific user-tunable settings for storing ntuples. More...;  ; class  ROOT::Experimental::RNTupleWriter;  An RNTuple that gets filled with entries (data) and writes them to storage. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROOT::Experimental::Internal::ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  ROOT::Experimental::Internal::RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  ROOT::Experimental::Internal::RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  ROOT::Experimental::Internal::RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  ROOT::Experimental::Internal::RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  ROOT::Experimental::Internal::RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  ROOT::Experimental::Internal::RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  ROOT::Experimental::RClusterDescriptor::RPageRange;  Records the partition of data into pages for a particular column in a particular cluster. More...;  ; class  ROOT::Experimental::Internal::RPag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__NTuple.html:11523,allocate,allocated,11523,doc/master/group__NTuple.html,https://root.cern,https://root.cern/doc/master/group__NTuple.html,1,['allocate'],['allocated']
Energy Efficiency,"imensional probability density estimator; // here are the options strings for the MinMax and RMS methods, respectively:; //; // ""!H:!V:VolumeRangeMode=MinMax:DeltaFrac=0.2:KernelEstimator=Gauss:GaussSigma=0.3"" );; // ""!H:!V:VolumeRangeMode=RMS:DeltaFrac=3:KernelEstimator=Gauss:GaussSigma=0.3"" );; if (Use[""PDERS""]); factory->BookMethod( dataloader, TMVA::Types::kPDERS, ""PDERS"",; ""!H:!V:NormTree=T:VolumeRangeMode=Adaptive:KernelEstimator=Gauss:GaussSigma=0.3:NEventsMin=400:NEventsMax=600"" );; ; if (Use[""PDERSD""]); factory->BookMethod( dataloader, TMVA::Types::kPDERS, ""PDERSD"",; ""!H:!V:VolumeRangeMode=Adaptive:KernelEstimator=Gauss:GaussSigma=0.3:NEventsMin=400:NEventsMax=600:VarTransform=Decorrelate"" );; ; if (Use[""PDERSPCA""]); factory->BookMethod( dataloader, TMVA::Types::kPDERS, ""PDERSPCA"",; ""!H:!V:VolumeRangeMode=Adaptive:KernelEstimator=Gauss:GaussSigma=0.3:NEventsMin=400:NEventsMax=600:VarTransform=PCA"" );; ; // Multi-dimensional likelihood estimator using self-adapting phase-space binning; if (Use[""PDEFoam""]); factory->BookMethod( dataloader, TMVA::Types::kPDEFoam, ""PDEFoam"",; ""!H:!V:SigBgSeparate=F:TailCut=0.001:VolFrac=0.0666:nActiveCells=500:nSampl=2000:nBin=5:Nmin=100:Kernel=None:Compress=T"" );; ; if (Use[""PDEFoamBoost""]); factory->BookMethod( dataloader, TMVA::Types::kPDEFoam, ""PDEFoamBoost"",; ""!H:!V:Boost_Num=30:Boost_Transform=linear:SigBgSeparate=F:MaxDepth=4:UseYesNoCell=T:DTLogic=MisClassificationError:FillFoamWithOrigWeights=F:TailCut=0:nActiveCells=500:nBin=20:Nmin=400:Kernel=None:Compress=T"" );; ; // K-Nearest Neighbour classifier (KNN); if (Use[""KNN""]); factory->BookMethod( dataloader, TMVA::Types::kKNN, ""KNN"",; ""H:nkNN=20:ScaleFrac=0.8:SigmaFact=1.0:Kernel=Gaus:UseKernel=F:UseWeight=T:!Trim"" );; ; // H-Matrix (chi2-squared) method; if (Use[""HMatrix""]); factory->BookMethod( dataloader, TMVA::Types::kHMatrix, ""HMatrix"", ""!H:!V:VarTransform=None"" );; ; // Linear discriminant (same as Fisher discriminant); if (Use[""LD""]); factory->BookMethod( dataloade",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:95377,adapt,adapting,95377,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['adapt'],['adapting']
Energy Efficiency,"imental spectrum (with background), we obtain the result shown in Figure 5.5. Now the fitted function corresponds much better to the experimental values. Fit of the original experimental spectrum (with background). We have also implemented the fitting function with matrix inversion based on Stiefel-Hestens method of the solution of the system of linear equations. The form of the function is as follows:; char *Fit1Stiefel(float *source,; TSpectrumOneDimFit* p,; int size);; This function fits the source spectrum. The calling program should fill in the input parameters of the one_dim_fit structure. The fitted parameters are written into structure pointed by one_dim_fit structure pointer and fitted data are written into source spectrum.; Function parameters:. source: pointer to the vector of the source spectrum; p: pointer to the one_dim_fit structure pointer; size: length of the source spectrum. The structure one_dim_fit is the same as in awmi function. The parameters power, fit_taylor, are not applicable for this function.; The results for small number of fitted parameters are the same as with awmi function. However, it converges faster. The example for data given in Figure 5.1 is given in the following table:. # of iterations; Chi awmi; Chi-Stiefel. 1; 924; 89.042. 5; 773.15; 0.96242. 10; 38.13; 0.77041. 50; 0.90293; 0.76873. 100; 0.76886; 0.76873. 500; 0.76873; 0.76873. 5.2 2-DIMENSIONAL SPECTRA; It is straightforward that for two-dimensional spectra one can write; \[; \Delta a_k^{(t+1)}=\alpha^{(t)}; \frac; {\sum_{i_1=1}^{N_1}\sum_{i_2=1}^{N_2}\frac{e_{i_1,i_2}^{(t)}}{y_{i_1,i_2}}; \frac{\partial f(i_1,i_2,a^{(t)})}{\partial a_k}}; {\sum_{i_1=1}^{N_1}\sum_{i_2=1}^{N_2}; \left[\frac{\partial f(i_1,i_2,a^{(t)})}{\partial a_k} \right]^2; \frac{1}{y_{i_1,i_2}}}; \]; In a similar way, for two-dimensional peaks we have chosen the peak shape function of the following form:; \[; f(i_1,i_2,a) = \sum_{j=1}^{M}\left\{; \begin{array}{l}; A_{xy}(j) exp\left\{-\frac{1}{2(1-\rho^",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:44052,power,power,44052,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,2,['power'],['power']
Energy Efficiency,"imized mode or not. void Compress(); Remove empty slots from array. TObject * ConstructedAt(Int_t idx); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:18698,allocate,allocated,18698,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,16,['allocate'],['allocated']
Energy Efficiency,"impleField< T >, ROOT::Experimental::RSimpleField< bool >, ROOT::Experimental::RSimpleField< char >, ROOT::Experimental::RSimpleField< double >, ROOT::Experimental::RSimpleField< float >, and ROOT::Experimental::Internal::RArraySizeField.; Definition at line 325 of file RFieldBase.hxx. ◆ GenerateColumnsImpl() [1/3]. template<typename... ColumnCppTs> . void ROOT::Experimental::RFieldBase::GenerateColumnsImpl ; (; ). inlineprotected . For writing, use the currently set column representative. ; Definition at line 281 of file RFieldBase.hxx. ◆ GenerateColumnsImpl() [2/3]. template<std::uint32_t ColumnIndexT, typename HeadT , typename... TailTs> . void ROOT::Experimental::RFieldBase::GenerateColumnsImpl ; (; const ColumnRepresentation_t & ; representation, . std::uint16_t ; representationIndex . ). inlineprotected . Helpers for generating columns. ; We use the fact that most fields have the same C++/memory types for all their column representations. Where possible, we call the helpers not from the header to reduce compilation time. ; Definition at line 259 of file RFieldBase.hxx. ◆ GenerateColumnsImpl() [3/3]. template<typename... ColumnCppTs> . void ROOT::Experimental::RFieldBase::GenerateColumnsImpl ; (; const RNTupleDescriptor & ; desc). inlineprotected . For reading, use the on-disk column list. ; Definition at line 297 of file RFieldBase.hxx. ◆ GetAlignment(). virtual size_t ROOT::Experimental::RFieldBase::GetAlignment ; (; ); const. pure virtual . As a rule of thumb, the alignment is equal to the size of the type. ; There are, however, various exceptions to this rule depending on OS and CPU architecture. So enforce the alignment to be explicitly spelled out. ; Implemented in ROOT::Experimental::Internal::RRDFCardinalityField, ROOT::Experimental::Internal::RArraySizeField, ROOT::Experimental::RFieldZero, ROOT::Experimental::RInvalidField, ROOT::Experimental::RClassField, ROOT::Experimental::RStreamerField, ROOT::Experimental::REnumField, ROOT::Experimental::RSimpleF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:36433,reduce,reduce,36433,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,1,['reduce'],['reduce']
Energy Efficiency,"implemented from TEveProjected.; Definition at line 86 of file TEvePolygonSetProjected.h. ◆ IsA(). TClass * TEvePolygonSetProjected::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 93 of file TEvePolygonSetProjected.h. ◆ IsFirstIdxHead(). Bool_t TEvePolygonSetProjected::IsFirstIdxHead ; (; Int_t ; s0, . Int_t ; s1 . ). private . Compare the two segments and check if the first index of first segment is starting. ; Definition at line 120 of file TEvePolygonSetProjected.cxx. ◆ MakePolygonsFromBP(). Float_t TEvePolygonSetProjected::MakePolygonsFromBP ; (; Int_t * ; idxMap). private . Build polygons from list of buffer polygons. ; Definition at line 264 of file TEvePolygonSetProjected.cxx. ◆ MakePolygonsFromBS(). Float_t TEvePolygonSetProjected::MakePolygonsFromBS ; (; Int_t * ; idxMap). private . Build polygons from the set of buffer segments. ; First creates a segment pool according to reduced and projected points and then build polygons from the pool. ; Definition at line 322 of file TEvePolygonSetProjected.cxx. ◆ operator=(). TEvePolygonSetProjected & TEvePolygonSetProjected::operator= ; (; const TEvePolygonSetProjected & ; ). privatedelete . ◆ PolygonSurfaceXY(). Float_t TEvePolygonSetProjected::PolygonSurfaceXY ; (; const Polygon_t & ; poly); const. protected . Calculate XY surface of a polygon. ; Definition at line 437 of file TEvePolygonSetProjected.cxx. ◆ ProjectAndReducePoints(). Int_t * TEvePolygonSetProjected::ProjectAndReducePoints ; (; ). private . Project and reduce buffer points. ; Definition at line 131 of file TEvePolygonSetProjected.cxx. ◆ ProjectBuffer3D(). void TEvePolygonSetProjected::ProjectBuffer3D ; (; ). Project current buffer. ; Definition at line 390 of file TEvePolygonSetProjected.cxx. ◆ SetDepthLocal(). void TEvePolygonSetProjected::SetDepthLocal ; (; Float_t ; d). overrideprotectedvirtual . Set depth (z-coordinate) of the projected points. ; Reimple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePolygonSetProjected.html:44365,reduce,reduced,44365,doc/master/classTEvePolygonSetProjected.html,https://root.cern,https://root.cern/doc/master/classTEvePolygonSetProjected.html,1,['reduce'],['reduced']
Energy Efficiency,"imum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epsrel : Specified relative accuracy.; epsabs : Specified absolute accuracy.; The integration algorithm will attempt to reach either the relative or the absolute accuracy.; In case the maximum funcion called is reached the algorithm will stop earlier without having reached; the desired accuracy. Output parameters:. relerr : Contains, on exit, an estimation of the relative accuracy of the result.; nfnevl : number of function evaluations performed.; ifail :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. The defult method used is the Genz-Mallik adaptive multidimensional algorithm; using the class ROOT::Math::AdaptiveIntegratorMultiDim; (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); to different integrators.; Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; Possible methods are : Vegas, Miser or Plain; IN case of MC integration the accuracy is determined by the number of function calls, one should be; careful not to use a too large value of maxpts. Bool_t IsValid() const; Return kTRUE if the function is valid. void Print(Option_t* option = """") const. void Paint(Option_t* option = """"); Paint this function with its current attributes.; The function is going to be converted in an histogram and the corresponding; histogram is painted.; The painted histogram can be retrieved calling afterwards the method TF1::GetHistogram(). TH1 * DoCreateHistogram(Double_t xmin, Double_t xmax, Bool_t recreate = kFALSE); create histogram with bin content equal to function value; computed at the bin center; This his",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1.html:53499,adapt,adaptive,53499,root/html604/TF1.html,https://root.cern,https://root.cern/root/html604/TF1.html,3,"['Adapt', 'adapt']","['AdaptiveIntegratorMultiDim', 'adaptive']"
Energy Efficiency,"in $ROOTSYS/test/Event.h:; TRef fWebHistogram; //EXEC:GetWebHistogram; When calling fWebHistogram.GetObject(), the function GetObject will automatically invoke the script GetWebHistogram.C via the interpreter. An example of a GetWebHistogram.C script is shown below:; void GetWebHistogram() {; TFile *f=TFile::Open(""http://root.cern.ch/files/pippa.root"");; f->cd(""DM/CJ"");; TH1 *h6 = (TH1*)gDirectory->Get(""h6"");; h6->SetDirectory(0);; delete f;; TRef::SetObject(h6);; }; In the above example, a call to fWebHistogram.GetObject() executes the script with the function GetWebHistogram. This script connects a file with histograms: pippa.root on the ROOT Web site and returns the object h6 to TRef::GetObject.; TRef fWebHistogram; //EXEC:GetWebHistogram(); Note that if the definition of the TRef fWebHistogram had been changed the compiled or interpreted function GetWebHistogram() would have been called instead of the Cling script GetWebHistogram.C.; 11.4.6 Array of TRef; When storing multiple TRefs, it is more efficient to use a TRefArray. The efficiency is due to having a single pointer fPID for all TRefs in the array. It has a dynamic compact table of fUniqueIDs. We recommend that you use a TRefArray rather then a collection of TRefs.; Example:. Suppose a TObjArray *mytracks containing a list of Track objects.; Suppose a TRefArray *pions containing pointers to the pion tracks in mytracks. This list is created with statements like: pions->Add(track);; Suppose a TRefArray *muons containing pointers to the muon tracks in mytracks. The 3 arrays mytracks,pions and muons may be written separately.; 11.5 Schema Evolution; Schema evolution is a problem faced by long-lived data. When a schema changes, existing persistent data can become inaccessible unless the system provides a mechanism to access data created with previous versions of the schema. In the lifetime of collaboration, the class definitions (i.e. the schema) are likely to change frequently. Not only can the class itself ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:488742,efficient,efficient,488742,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['efficient'],['efficient']
Energy Efficiency,"in Bow; 3245 case 77:; 3246 {; 3247 Double_t red[9] = { 43./255., 44./255., 50./255., 66./255., 125./255., 172./255., 178./255., 155./255., 157./255.};; 3248 Double_t green[9] = { 63./255., 63./255., 85./255., 101./255., 138./255., 163./255., 122./255., 51./255., 39./255.};; 3249 Double_t blue[9] = { 121./255., 101./255., 58./255., 44./255., 47./255., 55./255., 57./255., 44./255., 43./255.};; 3250 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3251 }; 3252 break;; 3253 ; 3254 // Dark Terrain; 3255 case 78:; 3256 {; 3257 Double_t red[9] = { 0./255., 41./255., 62./255., 79./255., 90./255., 87./255., 99./255., 140./255., 228./255.};; 3258 Double_t green[9] = { 0./255., 57./255., 81./255., 93./255., 85./255., 70./255., 71./255., 125./255., 228./255.};; 3259 Double_t blue[9] = { 95./255., 91./255., 91./255., 82./255., 60./255., 43./255., 44./255., 112./255., 228./255.};; 3260 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3261 }; 3262 break;; 3263 ; 3264 // Fall; 3265 case 79:; 3266 {; 3267 Double_t red[9] = { 49./255., 59./255., 72./255., 88./255., 114./255., 141./255., 176./255., 205./255., 222./255.};; 3268 Double_t green[9] = { 78./255., 72./255., 66./255., 57./255., 59./255., 75./255., 106./255., 142./255., 173./255.};; 3269 Double_t blue[9] = { 78./255., 55./255., 46./255., 40./255., 39./255., 39./255., 40./255., 41./255., 47./255.};; 3270 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3271 }; 3272 break;; 3273 ; 3274 // Fruit Punch; 3275 case 80:; 3276 {; 3277 Double_t red[9] = { 243./255., 222./255., 201./255., 185./255., 165./255., 158./255., 166./255., 187./255., 219./255.};; 3278 Double_t green[9] = { 94./255., 108./255., 132./255., 135./255., 125./255., 96./255., 68./255., 51./255., 61./255.};; 3279 Double_t blue[9] = { 7./255., 9./255., 12./255., 19./255., 45./255., 89./255., 118./255., 146./255., 118./255.};; 3280 Idx = TColor::CreateGradientColorTable(9, st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:126035,green,green,126035,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"in \(\mbox{MIGRAD}\), and positive–definiteness; 6.7 Additional trouble–shooting. 7 A complete example; 7.1 The user’s \(\mbox{FCN}\); 7.1.1 GaussFunction.h; 7.1.2 GaussFcn.h; 7.1.3 GaussFcn.cpp. 7.2 The user’s main program. Minuit 2; *** Fred JAMES and Matthias WINKLER CERN, Geneva ***; 1 Foreword; 1.1 What M is intended to do; M is conceived as a tool to find the minimum value of a multi-parameter function (the “\(\mbox{FCN}\)”) and analyze the shape of the function around the minimum. The principal application is foreseen for statistical analysis, working on chisquare or log-likelihood functions, to compute the best-fit parameter values and uncertainties, including correlations between the parameters. It is especially suited to handle difficult problems, including those which may require guidance in order to find the correct solution.; 1.2 What M is not intended to do; Although M will of course solve easy problems faster than complicated ones, it is not intended for the repeated solution of identically parametrized problems (such as track fitting in a detector) where a specialized program will in general be much more efficient.; 1.3 Further remarks; M was initially written in Fortran around 1975-1980 at CERN by Fred James @bib-MINUIT. Its main field of usage is statistical data analysis of experimental data recorded at CERN, but it is also used by people doing data analysis outside CERN or outside high energy physics (HEP). In 2002 Fred James started a project aiming to re-implement M in an object-oriented way using .; More information about recent developments, releases and installation can be obtained from the M homepage @bib-C++MINUIT.; The names of M applications are written in capital letters (e.g. \(\mbox{MIGRAD}\), \(\mbox{MINOS}\), \(\mbox{CONTOURS}\)), the corresponding names of the classes are written using sans-serif font type (MnMigrad, MnMinos, MnContours).; 2 Introduction: M basic concepts; [sec:intro]; 2.1 The organization of M; The M package acts o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:6418,efficient,efficient,6418,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['efficient'],['efficient']
Energy Efficiency,"in colormap. private:. TExMap*fColorsHash list of colors; unsigned longfCursors[19]List of cursors; Int_tfMaxNumberOfWindowsMaximum number of windows; XWindow_t*fWindowsList of windows; XEvent*fXEventCurrent native (X11) event. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGX11(); Default constructor. TGX11(const char* name, const char* title); Normal Constructor. TGX11(const TGX11& org); Copy constructor. Currently only used by TGX11TTF. ~TGX11(); Destructor. Bool_t Init(void* display); Initialize X11 system. Returns kFALSE in case of failure. Bool_t AllocColor(unsigned long cmap, XColor* color); Allocate color in colormap. If we are on an <= 8 plane machine; we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane; true color machine we will calculate the pixel value using:; for 15 and 16 bit true colors have 6 bits precision per color however; only the 5 most significant bits are used in the color index.; Except for 16 bits where green uses all 6 bits. I.e.:; 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits. Since all colors are set with a max of 65535 (16 bits) per r, g, b; we just right shift them by 10, 11 and 10 bits for 16 planes, and; (10, 10, 10 for 15 planes) and by 8 bits for 24 planes.; Returns kFALSE in case color allocation failed. void QueryColors(unsigned long cmap, XColor* colors, Int_t ncolors); Returns the current RGB value for the pixel in the XColor structure. void ClearPixmap(unsigned long* pix); Clear the pixmap pix. void ClearWindow(); Clear current window. void ClosePixmap(); Delete current pixmap. void CloseWindow(); Delete current window. void CloseWindow1(); Delete current window. void CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); Copy the pixmap wid at the position xpos, ypos in the current window. void CopyWindowtoPixmap(unsigned long* pix, Int_t xpos, Int_t ypos); Copy area of current window in the pixmap pix. void DrawB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:25144,green,green,25144,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,6,['green'],['green']
Energy Efficiency,"in index for the n dimensional tuple x,; 700/// allocate one if it doesn't exist yet and ""allocate"" is true.; 701 ; 702Long64_t THnSparse::GetBin(const Double_t* x, Bool_t allocate /* = kTRUE */); 703{; 704 THnSparseCompactBinCoord* cc = GetCompactCoord();; 705 Int_t *coord = cc->GetCoord();; 706 for (Int_t i = 0; i < fNdimensions; ++i); 707 coord[i] = GetAxis(i)->FindBin(x[i]);; 708 cc->UpdateCoord();; 709 ; 710 return GetBinIndexForCurrentBin(allocate);; 711}; 712 ; 713 ; 714////////////////////////////////////////////////////////////////////////////////; 715/// Get the bin index for the n dimensional tuple addressed by ""name"",; 716/// allocate one if it doesn't exist yet and ""allocate"" is true.; 717 ; 718Long64_t THnSparse::GetBin(const char* name[], Bool_t allocate /* = kTRUE */); 719{; 720 THnSparseCompactBinCoord* cc = GetCompactCoord();; 721 Int_t *coord = cc->GetCoord();; 722 for (Int_t i = 0; i < fNdimensions; ++i); 723 coord[i] = GetAxis(i)->FindBin(name[i]);; 724 cc->UpdateCoord();; 725 ; 726 return GetBinIndexForCurrentBin(allocate);; 727}; 728 ; 729////////////////////////////////////////////////////////////////////////////////; 730/// Get the bin index for the n dimensional coordinates coord,; 731/// allocate one if it doesn't exist yet and ""allocate"" is true.; 732 ; 733Long64_t THnSparse::GetBin(const Int_t* coord, Bool_t allocate /*= kTRUE*/); 734{; 735 GetCompactCoord()->SetCoord(coord);; 736 return GetBinIndexForCurrentBin(allocate);; 737}; 738 ; 739////////////////////////////////////////////////////////////////////////////////; 740/// Return the content of the filled bin number ""idx"".; 741/// If coord is non-null, it will contain the bin's coordinates for each axis; 742/// that correspond to the bin.; 743 ; 744Double_t THnSparse::GetBinContent(Long64_t idx, Int_t* coord /* = 0 */) const; 745{; 746 if (idx >= 0) {; 747 THnSparseArrayChunk* chunk = GetChunk(idx / fChunkSize);; 748 idx %= fChunkSize;; 749 if (chunk && chunk->fContent->GetSize() > id",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:27068,allocate,allocate,27068,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,4,['allocate'],['allocate']
Energy Efficiency,"in initial point) ; Definition at line 145 of file TGeoHelix.cxx. ◆ InitPoint() [1/2]. void TGeoHelix::InitPoint ; (; Double_t * ; point). Set initial point on the helix. ; Definition at line 137 of file TGeoHelix.cxx. ◆ InitPoint() [2/2]. void TGeoHelix::InitPoint ; (; Double_t ; x0, . Double_t ; y0, . Double_t ; z0 . ). Initialize coordinates of a point on the helix. ; Definition at line 126 of file TGeoHelix.cxx. ◆ IsA(). TClass * TGeoHelix::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 73 of file TGeoHelix.h. ◆ IsRightHanded(). Bool_t TGeoHelix::IsRightHanded ; (; ); const. inline . Definition at line 55 of file TGeoHelix.h. ◆ operator=(). TGeoHelix & TGeoHelix::operator= ; (; const TGeoHelix & ; ). privatedelete . ◆ ResetStep(). void TGeoHelix::ResetStep ; (; ). Reset current point/direction to initial values. ; Definition at line 242 of file TGeoHelix.cxx. ◆ SetCharge(). void TGeoHelix::SetCharge ; (; Int_t ; charge). Positive charge means left-handed helix. ; Definition at line 195 of file TGeoHelix.cxx. ◆ SetField(). void TGeoHelix::SetField ; (; Double_t ; bx, . Double_t ; by, . Double_t ; bz, . Bool_t ; is_normalized = kTRUE . ). Initialize particle direction (tangent on the helix in initial point) ; Definition at line 211 of file TGeoHelix.cxx. ◆ SetHelixStep(). void TGeoHelix::SetHelixStep ; (; Double_t ; hstep). Set Z step of the helix on a complete turn. Positive or null. ; Definition at line 227 of file TGeoHelix.cxx. ◆ SetXYcurvature(). void TGeoHelix::SetXYcurvature ; (; Double_t ; curvature). Set XY curvature: c = 1/Rxy. ; Definition at line 178 of file TGeoHelix.cxx. ◆ Step(). void TGeoHelix::Step ; (; Double_t ; step). Make a step from current point along the helix and compute new point, direction and angle To reach a plane/ shape boundary, one has to: . Compute the safety to the plane/boundary; Define / update a helix according local field and particle state (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHelix.html:17470,charge,charge,17470,doc/master/classTGeoHelix.html,https://root.cern,https://root.cern/doc/master/classTGeoHelix.html,1,['charge'],['charge']
Energy Efficiency,in the tree. ; Definition at line 52 of file TTreePerfStats.h. ◆ fPave. TPaveText* TTreePerfStats::fPave. protected . Pointer to annotation pavetext. ; Definition at line 71 of file TTreePerfStats.h. ◆ fReadaheadSize. Int_t TTreePerfStats::fReadaheadSize. protected . Read-ahead cache size. ; Definition at line 54 of file TTreePerfStats.h. ◆ fReadCalls. Int_t TTreePerfStats::fReadCalls. protected . Number of read calls. ; Definition at line 53 of file TTreePerfStats.h. ◆ fRealNorm. Double_t TTreePerfStats::fRealNorm. protected . Real time scale factor for fGraphTime. ; Definition at line 57 of file TTreePerfStats.h. ◆ fRealTime. Double_t TTreePerfStats::fRealTime. protected . Real time. ; Definition at line 58 of file TTreePerfStats.h. ◆ fRealTimeAxis. TGaxis* TTreePerfStats::fRealTimeAxis. protected . Pointer to TGaxis object showing real-time. ; Definition at line 73 of file TTreePerfStats.h. ◆ fTree. TTree* TTreePerfStats::fTree. protected . ! Pointer to the Tree being monitored ; Definition at line 68 of file TTreePerfStats.h. ◆ fTreeCacheSize. Int_t TTreePerfStats::fTreeCacheSize. protected . TTreeCache buffer size. ; Definition at line 51 of file TTreePerfStats.h. ◆ fUnzipInputSize. Long64_t TTreePerfStats::fUnzipInputSize. protected . Compressed bytes seen by the decompressor. ; Definition at line 62 of file TTreePerfStats.h. ◆ fUnzipObjSize. Long64_t TTreePerfStats::fUnzipObjSize. protected . Uncompressed bytes produced by the decompressor. ; Definition at line 63 of file TTreePerfStats.h. ◆ fUnzipTime. Double_t TTreePerfStats::fUnzipTime. protected . Time spent uncompressing the data. ; Definition at line 61 of file TTreePerfStats.h. ◆ fWatch. TStopwatch* TTreePerfStats::fWatch. protected . TStopwatch pointer. ; Definition at line 72 of file TTreePerfStats.h. Libraries for TTreePerfStats:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/TTreePerfStats.h; tree/treeplayer/src/TTreePerfStats.cxx. TTreePerf,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePerfStats.html:36722,monitor,monitored,36722,doc/master/classTTreePerfStats.html,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html,1,['monitor'],['monitored']
Energy Efficiency,"in work[0,...,k-1] and all indices of the larger element in arbitrary order in work[k+1,..,n-1] work[k] will contain instead the index of the returned element.; Taken from ""Numerical Recipes in C++"" without the index array implemented by Anna Khreshuk.; See also the declarations at the top of this file ; Definition at line 1359 of file TMath.h. ◆ KUncertainty(). constexpr Double_t TMath::KUncertainty ; (; ). constexpr . Boltzmann's constant uncertainty. ; Definition at line 261 of file TMath.h. ◆ Landau(). Double_t TMath::Landau ; (; Double_t ; x, . Double_t ; mu = 0, . Double_t ; sigma = 1, . Bool_t ; norm = kFALSE . ). The LANDAU function. ; mu is a location parameter and correspond approximately to the most probable value and sigma is a scale parameter (not the sigma of the full distribution which is not defined) Note that for mu=0 and sigma=1 (default values) the exact location of the maximum of the distribution (most proper value) is at x = -0.22278 This function has been adapted from the CERNLIB routine G110 denlan. If norm=kTRUE (default is kFALSE) the result is divided by sigma ; Definition at line 492 of file TMath.cxx. ◆ LandauI(). Double_t TMath::LandauI ; (; Double_t ; x). Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ; (see ROOT::Math::landau_cdf) The algorithm was taken from the Cernlib function dislan(G110) Reference: K.S.Kolbig and B.Schorr, ""A program package for the Landau; distribution"", Computer Phys.Comm., 31(1984), 97-111 ; Definition at line 2845 of file TMath.cxx. ◆ LaplaceDist(). Double_t TMath::LaplaceDist ; (; Double_t ; x, . Double_t ; alpha = 0, . Double_t ; beta = 1 . ). Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ; By default, alpha=0, beta=1 This distribution is known under different names, most common is double exponential distribution, but it also appears as the two-tailed exponential or the bilate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:56493,adapt,adapted,56493,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['adapt'],['adapted']
Energy Efficiency,"in);; }; TPolyMarker * pm = (TPolyMarker*)h->GetListOfFunctions()->FindObject(""TPolyMarker"");; if (pm) {; h->GetListOfFunctions()->Remove(pm);; delete pm;; }; pm = new TPolyMarker(nfound, fPositionX, fPositionY);; h->GetListOfFunctions()->Add(pm);; pm->SetMarkerStyle(23);; pm->SetMarkerColor(kRed);; pm->SetMarkerSize(1.3);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,dest[i]);; d->SetLineColor(kRed);; d->Draw(""SAME"");; printf(""Found %d candidate peaks\n"",nfound);; for(i=0;i; ; Example 16 - script SearchHR3.c:; ; ; Peak # Position Sigma ; 1 118 26 ; 2 162 41 ; 3 310 4 ; 4 330 8 ; 5 482 22 ; 6 491 26 ; 7 740 21 ; 8 852 15 ; 9 954 12 ; 10 989 13 ; ; ; Table 4 Positions and sigma of peaks in the following examples.; ; ; ; Fig. 30 Influence of number of iterations (3-red, 10-blue, 100- green,; 1000-magenta), sigma=8, smoothing width=3.; ; ; ; Fig. 31 Influence of sigma (3-red, 8-blue, 20- green, 43-magenta),; num. iter.=10, sm. width=3.; ; ; ; Fig. 32 Influence smoothing width (0-red, 3-blue, 7- green, 20-magenta), num.; iter.=10, sigma=8.; ; Script:; ; // Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum).; // To execute this example, do; // root > .x SearchHR3.C; #include ; void SearchHR3() {; Double_t fPositionX[100];; Double_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; Double_t nbins = 1024,a;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Influence of # of iterations in deconvolution in peak searching"",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""search3;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; TCanvas ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum.html:56517,green,green,56517,root/html602/TSpectrum.html,https://root.cern,https://root.cern/root/html602/TSpectrum.html,4,['green'],['green']
Energy Efficiency,"in);; }; TPolyMarker * pm = (TPolyMarker*)h->GetListOfFunctions()->FindObject(""TPolyMarker"");; if (pm) {; h->GetListOfFunctions()->Remove(pm);; delete pm;; }; pm = new TPolyMarker(nfound, fPositionX, fPositionY);; h->GetListOfFunctions()->Add(pm);; pm->SetMarkerStyle(23);; pm->SetMarkerColor(kRed);; pm->SetMarkerSize(1.3);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,dest[i]);; d->SetLineColor(kRed);; d->Draw(""SAME"");; printf(""Found %d candidate peaks\n"",nfound);; for(i=0;i; ; Example 16 - script SearchHR3.c:; ; ; Peak # Position Sigma ; 1 118 26 ; 2 162 41 ; 3 310 4 ; 4 330 8 ; 5 482 22 ; 6 491 26 ; 7 740 21 ; 8 852 15 ; 9 954 12 ; 10 989 13 ; ; ; Table 4 Positions and sigma of peaks in the following examples.; ; ; ; Fig. 30 Influence of number of iterations (3-red, 10-blue, 100- green,; 1000-magenta), sigma=8, smoothing width=3.; ; ; ; Fig. 31 Influence of sigma (3-red, 8-blue, 20- green, 43-magenta),; num. iter.=10, sm. width=3.; ; ; ; Fig. 32 Influence smoothing width (0-red, 3-blue, 7- green, 20-magenta), num.; iter.=10, sigma=8.; ; Script:; ; // Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum).; // To execute this example, do; // root > .x SearchHR3.C; #include ; void SearchHR3() {; Float_t fPositionX[100];; Float_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; Double_t nbins = 1024,a;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Float_t * source = new float[nbins];; Float_t * dest = new float[nbins];; TH1F *h = new TH1F(""h"",""Influence of # of iterations in deconvolution in peak searching"",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""search3;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; TCanvas ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum.html:55355,green,green,55355,root/html528/TSpectrum.html,https://root.cern,https://root.cern/root/html528/TSpectrum.html,6,['green'],['green']
Energy Efficiency,"in; P.V. Vavilov: Ionization losses of high-energy heavy particles,; Sov. Phys. JETP 5 (1957) 749 [Zh. Eksp. Teor. Fiz. 32 (1957) 920]. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class Vavilov,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::Mean(kappa, beta2); and sqrt(Vavilov::Variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. Two subclasses are provided:; - VavilovFast uses the algorithm by; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. B47 (1990) 215-224</A>,; w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__Vavilov.html:1303,Energy,Energy,1303,root/html532/ROOT__Math__Vavilov.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__Vavilov.html,4,['Energy'],['Energy']
Energy Efficiency,"individually written and; 5100/// create an event cluster boundary (by default).; 5101///; 5102/// If the caller wishes to flush the baskets but not create an event cluster,; 5103/// then set create_cluster to false.; 5104///; 5105/// If ROOT has IMT-mode enabled, this will launch multiple TBB tasks in parallel; 5106/// via TThreadExecutor to do this operation; one per basket compression. If the; 5107/// caller utilizes TBB also, care must be taken to prevent deadlocks.; 5108///; 5109/// For example, let's say the caller holds mutex A and calls FlushBaskets; while; 5110/// TBB is waiting for the ROOT compression tasks to complete, it may decide to; 5111/// run another one of the user's tasks in this thread. If the second user task; 5112/// tries to acquire A, then a deadlock will occur. The example call sequence; 5113/// looks like this:; 5114///; 5115/// - User acquires mutex A; 5116/// - User calls FlushBaskets.; 5117/// - ROOT launches N tasks and calls wait.; 5118/// - TBB schedules another user task, T2.; 5119/// - T2 tries to acquire mutex A.; 5120///; 5121/// At this point, the thread will deadlock: the code may function with IMT-mode; 5122/// disabled if the user assumed the legacy code never would run their own TBB; 5123/// tasks.; 5124///; 5125/// SO: users of TBB who want to enable IMT-mode should carefully review their; 5126/// locking patterns and make sure they hold no coarse-grained application; 5127/// locks when they invoke ROOT.; 5128///; 5129/// Return the number of bytes written or -1 in case of write error.; 5130Int_t TTree::FlushBaskets(bool create_cluster) const; 5131{; 5132 Int_t retval = FlushBasketsImpl();; 5133 if (retval == -1) return retval;; 5134 ; 5135 if (create_cluster) const_cast<TTree *>(this)->MarkEventCluster();; 5136 return retval;; 5137}; 5138 ; 5139////////////////////////////////////////////////////////////////////////////////; 5140/// Internal implementation of the FlushBaskets algorithm.; 5141/// Unlike the public interface",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:204970,schedul,schedules,204970,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['schedul'],['schedules']
Energy Efficiency,"ine 154 of file MethodLikelihood.h. ◆ Train(). void TMVA::MethodLikelihood::Train ; (; void ; ). virtual . create reference distributions (PDFs) from signal and background events: fill histograms and smooth them; if decorrelation is required, compute corresponding square-root matrices the reference histograms require the correct boundaries. ; Since in Likelihood classification the transformations are applied using both classes, also the corresponding boundaries need to take this into account ; Implements TMVA::MethodBase.; Definition at line 335 of file MethodLikelihood.cxx. ◆ TransformLikelihoodOutput(). Double_t TMVA::MethodLikelihood::TransformLikelihoodOutput ; (; Double_t ; ps, . Double_t ; pb . ); const. private . returns transformed or non-transformed output ; Definition at line 535 of file MethodLikelihood.cxx. ◆ WriteMonitoringHistosToFile(). void TMVA::MethodLikelihood::WriteMonitoringHistosToFile ; (; void ; ); const. virtual . write histograms and PDFs to file for monitoring purposes ; Reimplemented from TMVA::MethodBase.; Definition at line 736 of file MethodLikelihood.cxx. ◆ WriteOptionsToStream(). void TMVA::MethodLikelihood::WriteOptionsToStream ; (; std::ostream & ; o, . const TString & ; prefix . ); const. virtual . write options to stream ; Definition at line 559 of file MethodLikelihood.cxx. ◆ WriteWeightsToStream(). void TMVA::MethodLikelihood::WriteWeightsToStream ; (; TFile & ; rf); const. write reference PDFs to ROOT file ; Definition at line 657 of file MethodLikelihood.cxx. Member Data Documentation. ◆ fAverageEvtPerBin. Int_t TMVA::MethodLikelihood::fAverageEvtPerBin. private . average events per bin; used to calculate fNbins ; Definition at line 145 of file MethodLikelihood.h. ◆ fAverageEvtPerBinVarB. Int_t* TMVA::MethodLikelihood::fAverageEvtPerBinVarB. private . average events per bin; used to calculate fNbins ; Definition at line 147 of file MethodLikelihood.h. ◆ fAverageEvtPerBinVarS. Int_t* TMVA::MethodLikelihood::fAverageEvtPerBinVar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodLikelihood.html:39454,monitor,monitoring,39454,doc/master/classTMVA_1_1MethodLikelihood.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodLikelihood.html,1,['monitor'],['monitoring']
Energy Efficiency,"ine 232 of file NeuralNet.cxx. ◆ ~Settings(). TMVA::DNN::Settings::~Settings ; (; ). virtual . d'tor ; Definition at line 261 of file NeuralNet.cxx. Member Function Documentation. ◆ addPoint() [1/2]. void TMVA::DNN::Settings::addPoint ; (; std::string ; histoName, . double ; x . ). inline . for monitoring ; Definition at line 821 of file NeuralNet.h. ◆ addPoint() [2/2]. void TMVA::DNN::Settings::addPoint ; (; std::string ; histoName, . double ; x, . double ; y . ). inline . for monitoring ; Definition at line 822 of file NeuralNet.h. ◆ batchSize(). size_t TMVA::DNN::Settings::batchSize ; (; ); const. inline . mini-batch size ; Definition at line 767 of file NeuralNet.h. ◆ clear(). void TMVA::DNN::Settings::clear ; (; std::string ; histoName). inline . for monitoring ; Definition at line 824 of file NeuralNet.h. ◆ computeResult(). virtual void TMVA::DNN::Settings::computeResult ; (; const Net & ; , . std::vector< double > & ;  . ). inlinevirtual . callback for monitoring and logging ; Definition at line 809 of file NeuralNet.h. ◆ convergenceCount(). size_t TMVA::DNN::Settings::convergenceCount ; (; ); const. inline . returns the current convergence count ; Definition at line 827 of file NeuralNet.h. ◆ convergenceSteps(). size_t TMVA::DNN::Settings::convergenceSteps ; (; ); const. inline . how many steps until training is deemed to have converged ; Definition at line 766 of file NeuralNet.h. ◆ create() [1/2]. void TMVA::DNN::Settings::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max . ). inline . for monitoring ; Definition at line 819 of file NeuralNet.h. ◆ create() [2/2]. void TMVA::DNN::Settings::create ; (; std::string ; histoName, . int ; bins, . double ; min, . double ; max, . int ; bins2, . double ; min2, . double ; max2 . ). inline . for monitoring ; Definition at line 820 of file NeuralNet.h. ◆ cycle(). virtual void TMVA::DNN::Settings::cycle ; (; double ; progress, . TString ; text . ). inlinevirtual . Parameters. textadvance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:6323,monitor,monitoring,6323,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['monitor'],['monitoring']
Energy Efficiency,"ine selections interactively. A selection is a set of ranges combined together. Within a selection, ranges along the same axis are combined with logical OR, and ranges on different axes with logical AND. A selection is displayed on top of the complete data set using its own color. Only the events fulfilling the selection criteria (ranges) are displayed. Ranges are defined interactively using cursors, like on the first axis on the figure. Several selections can be defined at the same time, each selection having its own color. Selections are set of ranges which can be defined interactively. Several selections can been defined. Each cluster is now clearly visible and the zone with crossing clusters is now understandable whereas, without any selection or with only a single one, it was not easy to understand. Several selections can be defined each of them having its own color. Interactive selections on Parallel Coordinates are a powerful tool because they can be defined graphically on many variables (graphical cuts in ROOT can be defined on two variables only) which allow a very accurate events filtering. Selections allow making precise events choices: a single outlying event is clearly visible when the lines are displayed as “solid” therefore it is easy to make cuts in order to eliminate one single event from a selection. Such selection (to filter one single event) on a scatter plot would be much more difficult. Selections allow to easily filter one single event. Once a selection has been defined, it is possible to use it to generate a TEntryList which is applied on the tree and used at drawing time. In our example the selection we defined allows to select exactly the two correlated “random spheres”. Output of nt->Draw(“x:y:z”) and nt->Draw(“u:v:w”) after applying the selection. Another technique has been implemented in order to show clusters when the picture is cluttered. A weight is assigned to each event. The weight value is computed as: \[; weight = \sum_{i=1}^{n} b_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:615640,power,powerful,615640,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['power'],['powerful']
Energy Efficiency,"ine(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); static RooDataSet*read(const char* filename, const RooArgList& variables, const char* opts = """", const char* commonPath = """", const char* indexCatName = 0); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(RooCmdArg arg1, RooCmdArg arg2 = RooCmdArg(), RooCmdArg arg3 = RooCmdArg(), RooCmdArg arg4 = RooCmdArg(), RooCmdArg arg5 = RooCmdArg(), RooCmdArg arg6 = RooCmdArg(), RooCmdArg arg7 = RooCmdArg(), RooCmdArg arg8 = RooCmdArg()); virtual voidRooAbsData::reset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidRooAbsData::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetName(const char* name); virtual voidSetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataSet.html:10083,reduce,reduce,10083,root/html526/RooDataSet.html,https://root.cern,https://root.cern/root/html526/RooDataSet.html,1,['reduce'],['reduce']
Energy Efficiency,"ine(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); static RooDataSet*read(const char* filename, const RooArgList& variables, const char* opts = """", const char* commonPath = """", const char* indexCatName = 0); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); virtual voidRooAbsData::reset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidRooAbsData::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetName(const char* name); virtual voidSetNameTitle(const char* name, const char* title); st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDataSet.html:10336,reduce,reduce,10336,root/html530/RooDataSet.html,https://root.cern,https://root.cern/root/html530/RooDataSet.html,1,['reduce'],['reduce']
Energy Efficiency,"ine(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); static RooDataSet*read(const char* filename, const RooArgList& variables, const char* opts = """", const char* commonPath = """", const char* indexCatName = 0); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); virtual voidRooAbsData::reset(); voidTObject::ResetBit(UInt_t f); voidRooAbsData::resetBuffers(); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; RooDataSet(); RooDataSet(const RooDataSet& other, const char* newname = 0); RooDataSet(const char* name, const char* title, const RooArgSet& vars, const char* wgtVarName = 0); RooDataSet(const char* name, const char* title, RooDataSet* data, const RooArgSet& vars, const char* cuts = 0, const char* wgtVarName = 0); RooDataSet(const char* name, const char* title, RooDataSet* data, const RooArgSet& vars, const RooFormulaVar& cutVar, const char* wgtVarName = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataSet.html:9411,reduce,reduce,9411,root/html602/RooDataSet.html,https://root.cern,https://root.cern/root/html602/RooDataSet.html,4,['reduce'],['reduce']
Energy Efficiency,"ine(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); static RooDataSet*read(const char* filename, const RooArgList& variables, const char* opts = """", const char* commonPath = """", const char* indexCatName = 0); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); virtual voidRooAbsData::reset(); voidTObject::ResetBit(UInt_t f); voidRooAbsData::resetBuffers(); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsData::setDefaultStorageType(RooAbsData::StorageType s); voidRooAbsData::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataSet.html:10527,reduce,reduce,10527,root/html534/RooDataSet.html,https://root.cern,https://root.cern/root/html534/RooDataSet.html,2,['reduce'],['reduce']
Energy Efficiency,"ine(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); static RooDataSet*read(const char* filename, const RooArgList& variables, const char* opts = """", const char* commonPath = """", const char* indexCatName = 0); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); virtual voidRooAbsData::reset(); voidTObject::ResetBit(UInt_t f); voidRooAbsData::resetBuffers(); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidRooAbsData::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetName(const char* name); virtual voidSetNameTitle(const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDataSet.html:10432,reduce,reduce,10432,root/html532/RooDataSet.html,https://root.cern,https://root.cern/root/html532/RooDataSet.html,2,['reduce'],['reduce']
Energy Efficiency,"ine(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); static RooDataSet*read(const char* filename, const RooArgList& variables, const char* opts = """", const char* commonPath = """", const char* indexCatName = 0); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); virtual voidRooAbsData::reset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidRooAbsData::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetName(const char* name); virtual voidSetNameTitle(const char* name, const char* title); static voidTObject::Se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDataSet.html:10139,reduce,reduce,10139,root/html528/RooDataSet.html,https://root.cern,https://root.cern/root/html528/RooDataSet.html,1,['reduce'],['reduce']
Energy Efficiency,"iner; float*fElements[fNrows] elements themselves; Bool_tfIsOwner!default kTRUE, when Use array kFALSE; Int_tfNrowsnumber of rows; Int_tfRowLwblower bound of the row index. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TVectorT<Element> Delete_m(Int_t size, float*& ); Delete data pointer m, if it was assigned on the heap. Element* TVectorT<Element> New_m(Int_t size); Return data pointer . if requested size <= kSizeMax, assign pointer; to the stack space. void TVectorT<Element> Add(const TVectorT<float>& v); Add vector v to this vector. void TVectorT<Element> Add(const TVectorT<float>& v1, const TVectorT<float>& v2); Set this vector to v1+v2. Int_t TVectorT<Element> Memcpy_m(float* newp, const float* oldp, Int_t copySize, Int_t newSize, Int_t oldSize); Copy copySize doubles from *oldp to *newp . However take care of the; situation where both pointers are assigned to the same stack space. void TVectorT<Element> Allocate(Int_t nrows, Int_t row_lwb = 0, Int_t init = 0); Allocate new vector. Arguments are number of rows and row; lowerbound (0 default). TVectorT<Element> &TVectorT<Element> ResizeTo(Int_t lwb, Int_t upb); Resize the vector to [lwb:upb] .; New dynamic elemenst are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleleted. TVectorT<Element> &TVectorT<Element> Use(Int_t lwb, Int_t upb, float* data); Use the array data to fill the vector lwb..upb]. TVectorT<Element> &TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, TVectorT<float>& target, Option_t* option = ""S"") const; Get subvector [row_lwb..row_upb]; The indexing range of the; returned vector depends on the argument option:. option == ""S"" : return [0..row_upb-row_lwb+1] (default); else : return [row_lwb..row_upb]. TVectorT<Element> &TVectorT<Element> SetSub(Int_t row_lwb, const TVectorT<float>& source); Insert vector source starting at [row_lwb], thereby overwriting the part; [row_lwb..row_lwb+",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVectorT_float_.html:10545,Allocate,Allocate,10545,root/html532/TVectorT_float_.html,https://root.cern,https://root.cern/root/html532/TVectorT_float_.html,2,['Allocate'],['Allocate']
Energy Efficiency,"iner; float*fElements[fNrows] elements themselves; Bool_tfIsOwner!default kTRUE, when Use array kFALSE; Int_tfNrowsnumber of rows; Int_tfRowLwblower bound of the row index. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TVectorT<Element> Delete_m(Int_t size, float*& ); Delete data pointer m, if it was assigned on the heap. Element* TVectorT<Element> New_m(Int_t size); Return data pointer . if requested size <= kSizeMax, assign pointer; to the stack space. void TVectorT<Element> Add(const TVectorT<float>& v); Add vector v to this vector. void TVectorT<Element> Add(const TVectorT<float>& v1, const TVectorT<float>& v2); Set this vector to v1+v2. Int_t TVectorT<Element> Memcpy_m(float* newp, const float* oldp, Int_t copySize, Int_t newSize, Int_t oldSize); Copy copySize doubles from *oldp to *newp . However take care of the; situation where both pointers are assigned to the same stack space. void TVectorT<Element> Allocate(Int_t nrows, Int_t row_lwb = 0, Int_t init = 0); Allocate new vector. Arguments are number of rows and row; lowerbound (0 default). TVectorT<Element> &TVectorT<Element> ResizeTo(Int_t lwb, Int_t upb); Resize the vector to [lwb:upb] .; New dynamic elemenst are created, the overlapping part of the old ones are; copied to the new structures, then the old elements are deleted. TVectorT<Element> &TVectorT<Element> Use(Int_t lwb, Int_t upb, float* data); Use the array data to fill the vector lwb..upb]. TVectorT<Element> &TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, TVectorT<float>& target, Option_t* option = ""S"") const; Get subvector [row_lwb..row_upb]; The indexing range of the; returned vector depends on the argument option:. option == ""S"" : return [0..row_upb-row_lwb+1] (default); else : return [row_lwb..row_upb]. TVectorT<Element> &TVectorT<Element> SetSub(Int_t row_lwb, const TVectorT<float>& source); Insert vector source starting at [row_lwb], thereby overwriting the part; [row_lwb..row_lwb+nr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVectorT_float_.html:10564,Allocate,Allocate,10564,root/html534/TVectorT_float_.html,https://root.cern,https://root.cern/root/html534/TVectorT_float_.html,2,['Allocate'],['Allocate']
Energy Efficiency,"info = cle->GetStreamerInfoAbstractEmulated();; 4858 if (einfo) einfo->New(eaddr);; 4859 } else {; 4860 cle->New(eaddr);; 4861 }; 4862 break;; 4863 }; 4864 case kObject:; 4865 case kAny:; 4866 case kTObject:; 4867 case kTString:; 4868 case kTNamed:; 4869 {; 4870 cle->New(eaddr);; 4871 }; 4872 break;; 4873 ; 4874 case kSTL:; 4875 {; 4876 if (strcmp(element->GetName(),""This"")==0 &&; 4877 !cle->GetCollectionProxy()) {; 4878 // missing information, avoid infinite loop; 4879 // by doing nothing ....; 4880 } else {; 4881 if (cle->GetCollectionProxy()); 4882 cle->GetCollectionProxy()->New(eaddr);; 4883 else; 4884 cle->New(eaddr);; 4885 }; 4886 }; 4887 break;; 4888 ; 4889 case kObject + kOffsetL:; 4890 case kAny + kOffsetL:; 4891 case kTObject + kOffsetL:; 4892 case kTString + kOffsetL:; 4893 case kTNamed + kOffsetL:; 4894 case kSTL + kOffsetL:; 4895 {; 4896 Int_t size = cle->Size();; 4897 char* r = eaddr;; 4898 Int_t len = element->GetArrayLength();; 4899 for (Int_t i = 0; i < len; ++i, r += size) {; 4900 cle->New(r);; 4901 }; 4902 }; 4903 break;; 4904 ; 4905 } // switch etype; 4906 } // for TIter next(fElements); 4907 ; 4908 for(int nbase = 0; nbase < fNVirtualInfoLoc; ++nbase) {; 4909 *(TStreamerInfo**)(p + fVirtualInfoLoc[nbase]) = this;; 4910 }; 4911 return p;; 4912}; 4913 ; 4914////////////////////////////////////////////////////////////////////////////////; 4915/// An array of emulated objects is created at address ary, if ary is null,; 4916/// we allocate memory for the array.; 4917 ; 4918void* TStreamerInfo::NewArray(Long_t nElements, void *ary); 4919{; 4920 if (fClass == 0) {; 4921 Error(""NewArray"", ""TClass pointer is null!"");; 4922 return 0;; 4923 }; 4924 ; 4925 Int_t size = fClass->Size();; 4926 ; 4927 char* p = (char*) ary;; 4928 ; 4929 if (!p) {; 4930 Long_t len = nElements * size + sizeof(Long_t)*2;; 4931 p = new char[len];; 4932 memset(p, 0, len);; 4933 }; 4934 ; 4935 // Store the array cookie; 4936 Long_t* r = (Long_t*) p;; 4937 r[0] = size;; 4938 r[1] = nE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:196512,allocate,allocate,196512,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency,"information from this branch.; 4828/// \param[in] recurse When true call ResetInitInfo on all subbranches.; 4829///; 4830 ; 4831void TBranchElement::ResetInitInfo(bool recurse); 4832{; 4833 fInfo = nullptr;; 4834 fInit = false;; 4835 fInitOffsets = false;; 4836 fCurrentClass = nullptr;; 4837 delete fReadActionSequence;; 4838 fReadActionSequence = nullptr;; 4839 delete fFillActionSequence;; 4840 fFillActionSequence = nullptr;; 4841 ; 4842 if (recurse) {; 4843 Int_t nbranches = fBranches.GetEntriesFast();; 4844 for (Int_t i = 0; i < nbranches; ++i) {; 4845 TBranchElement *sub = (TBranchElement*) fBranches[i];; 4846 sub->ResetInitInfo(true);; 4847 }; 4848 }; 4849}; 4850 ; 4851////////////////////////////////////////////////////////////////////////////////; 4852/// Point this branch at an object.; 4853///; 4854/// For a sub-branch, addr is a pointer to the branch object.; 4855///; 4856/// For a top-level branch the meaning of addr is as follows:; 4857///; 4858/// If addr is zero, then we allocate a branch object; 4859/// internally and the branch is the owner of the allocated; 4860/// object, not the caller. However the caller may obtain; 4861/// a pointer to the branch object with GetObject().; 4862/// The pointer is reset to zero (nullptr) when the relevant; 4863/// branch object is destroyed.; 4864///; 4865/// Example:; 4866/// ~~~ {.cpp}; 4867/// branch->SetAddress(0);; 4868/// Event* event = branch->GetObject();; 4869/// ... Do some work.; 4870/// ~~~; 4871/// If addr is not zero, but the pointer addr points at is; 4872/// zero, then we allocate a branch object and set the passed; 4873/// pointer to point at the allocated object. The caller; 4874/// owns the allocated object and is responsible for deleting; 4875/// it when it is no longer needed.; 4876///; 4877/// Example:; 4878/// ~~~ {.cpp}; 4879/// Event* event = 0;; 4880/// branch->SetAddress(&event);; 4881/// ... Do some work.; 4882/// delete event;; 4883/// event = 0;; 4884/// ~~~; 4885/// If addr is not zero",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:179635,allocate,allocate,179635,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,2,['allocate'],"['allocate', 'allocated']"
Energy Efficiency,"ing ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 4. Histogramming. What is a histogram?; Our TTree contains for instance the energy of all electrons. What we usually care about is its distribution - for instance by counting how often electrons have an energy within a certain range. Such a range is called ""bin"". Let's look at an example: draw the histogram of the momentum (""fPt"") of all electrons with an energy (""fE"") > 80 and fTriggered being true.; Binning; You can tell TTree::Draw() what the binning should be:; tree->Draw(""electrons.fE >> htemp(15, 0., 30.)"",...). will use 15 bins, where the lower bin border of the first bin is at 0. and the upper bin border of the highest is at 30.; Style; ROOT displays a few properties for the histogram in the box in the upper right. You can move things around in the graphical display (""canvas"") of the histogram. You can modify graphical properties of the canvas by showing the editor: in the menu, select ""View"", then ""Editor"". Click on the histogram to select it, then change its visual appearance to magenta line, 5 pixels width, with pink fill. Eeew. This is likely the only time in your life that you are allowed to use this color combination - enjoy! :-); . ‹ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/4-histogramming.html:2081,energy,energy,2081,d/4-histogramming.html,https://root.cern,https://root.cern/d/4-histogramming.html,1,['energy'],['energy']
Energy Efficiency,"ing a Vavilov distribution. ; The probability density function of the Vavilov distribution as function of Landau's parameter is given by: ; \[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\]. where \(\phi(s) = e^{C} e^{\psi(s)}\) with \( C = \kappa (1+\beta^2 \gamma )\) and \(\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\). \( \gamma = 0.5772156649\dots\) is Euler's constant.; For the class VavilovAccurate, Pdf returns the Vavilov distribution as function of Landau's parameter \(\lambda_L = \lambda_V/\kappa - \ln \kappa\), which is the convention used in the CERNLIB routines, and in the tables by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons: Tabulation of the Vavilov distribution, pp 187-203 in: National Research Council (U.S.), Committee on Nuclear Science: Studies in penetration of charged particles in matter, Nat. Akad. Sci. Publication 1133, Nucl. Sci. Series Report No. 39, Washington (Nat. Akad. Sci.) 1964, 388 pp. Available from Google books; Therefore, for small values of \(\kappa < 0.01\), pdf approaches the Landau distribution.; For values \(\kappa > 10\), the Gauss approximation should be used with \(\mu\) and \(\sigma\) given by Vavilov::mean(kappa, beta2) and sqrt(Vavilov::variance(kappa, beta2).; The original Vavilov pdf is obtained by v.Pdf(lambdaV/kappa-log(kappa))/kappa.; For detailed description see B. Schorr, Programs for the Landau and the Vavilov distributions and the corresponding random numbers, Computer Phys. Comm. 7 (1974) 215-224, which has been implemented in CERNLIB (G116).; The class stores coefficients needed to calculate \(p(\lambda; \kappa, \beta^2)\) for fixed values of \(\kappa\) and \(\beta^2\). Changing these values is computationally expensive.; The parameter \(\kappa\) should be in the range \(0.01 \le \kappa \le 10",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurate.html:1484,charge,charged,1484,doc/master/classROOT_1_1Math_1_1VavilovAccurate.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VavilovAccurate.html,1,['charge'],['charged']
Energy Efficiency,"ing in the Parallel ROOT Facility (PROOF).; Leandro Franco; Leo worked a Marie-Curie fellow in the ROOT team from 2005-2008. He worked on a number of widely different topics, from parallel sockets, I/O read-ahead, CINT dictionary, etc.; Maarten Ballintijn; Maarten's initial dab into ROOT was porting it to Linux in 1995. Later he worked on the PROOF system, bringing into production for the RHIC experiments in Brookhaven.; Marek Biskup; Marek worked as technical student on various aspects of PROOF, notably integrating the TChain::Draw() command into PROOF.; Masaharu Goto; Masa is the father of CINT. Without the indefatigable support by Masa we would never have succeeded with the tight integration of CINT in ROOT. Masa is now managing a large division in Agilent and cannot spend as much time on CINT as he would like.; Matevž Tadel; Matevž Tadel is the main developer of 3D graphics and event-visualization packages. He holds a Ph.D. in experimental high-energy physics, obtained in 2001 for his work on electron reconstruction in the ATLAS experiment. Before joining the ROOT team in 2005, he worked on Gled - an advanced ROOT-based system for distributed computing and dynamic visualisation.; Nenad Buncic; Nenad was one of the first people joining the initial ROOT team in 1996. He developed the first version of the HTML documentation system (THtml) and worked on the first version of the 3D graphics system. Nenad left in 1997.; Paul Russo; Paul joined the ROOT team at Fermilab in 2005 and has been focusing on support and developing CINT.; Pere Mato; Pere Mato was the project leader from 2014 to 2017. He was the driving force behind ROOT's migration to CMake and has contributed to PyROOT.; Richard Maunder; Richard worked as project associate on the 3D graphics OpenGL based system.; Susan Panacek; Susan wrote the first ROOT User's Guide and developed a number of ROOT tutorials.; Timur Pocheptsov; Timur worked as a project associate on many different aspects of ROOT, but mostly o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/previous-developers.html:5012,energy,energy,5012,d/previous-developers.html,https://root.cern,https://root.cern/d/previous-developers.html,1,['energy'],['energy']
Energy Efficiency,"ing on the context, using TSpectrum2Transform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Transform.html:1649,adapt,adaptive,1649,doc/master/classTSpectrum2Transform.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html,1,['adapt'],['adaptive']
Energy Efficiency,"ing to specify options; 720/// ""D"" Put out a line of ""Debug"" printout; 721/// ""M"" Return the Maximum Kolmogorov distance instead of prob; 722///; 723/// ### Output:; 724/// The returned value prob is a calculated confidence level which gives a; 725/// statistical test for compatibility of a and b.; 726/// Values of prob close to zero are taken as indicating a small probability; 727/// of compatibility. For two point sets drawn randomly from the same parent; 728/// distribution, the value of prob should be uniformly distributed between; 729/// zero and one.; 730/// in case of error the function return -1; 731/// If the 2 sets have a different number of points, the minimum of; 732/// the two sets is used.; 733///; 734/// ### Method:; 735/// The Kolmogorov test is used. The test statistic is the maximum deviation; 736/// between the two integrated distribution functions, multiplied by the; 737/// normalizing factor (rdmax*sqrt(na*nb/(na+nb)).; 738///; 739/// Code adapted by Rene Brun from CERNLIB routine TKOLMO (Fred James); 740/// (W.T. Eadie, D. Drijard, F.E. James, M. Roos and B. Sadoulet,; 741/// Statistical Methods in Experimental Physics, (North-Holland,; 742/// Amsterdam 1971) 269-271); 743///; 744/// ### Method Improvement by Jason A Detwiler (JADetwiler@lbl.gov); 745///; 746/// The nuts-and-bolts of the TMath::KolmogorovTest() algorithm is a for-loop; 747/// over the two sorted arrays a and b representing empirical distribution; 748/// functions. The for-loop handles 3 cases: when the next points to be; 749/// evaluated satisfy a>b, a<b, or a=b:; 750///; 751/// ~~~ {.cpp}; 752/// for (Int_t i=0;i<na+nb;i++) {; 753/// if (a[ia-1] < b[ib-1]) {; 754/// rdiff -= sa;; 755/// ia++;; 756/// if (ia > na) {ok = kTRUE; break;}; 757/// } else if (a[ia-1] > b[ib-1]) {; 758/// rdiff += sb;; 759/// ib++;; 760/// if (ib > nb) {ok = kTRUE; break;}; 761/// } else {; 762/// rdiff += sb - sa;; 763/// ia++;; 764/// ib++;; 765/// if (ia > na) {ok = kTRUE; break;}; 766/// if (ib > n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:24265,adapt,adapted,24265,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['adapt'],['adapted']
Energy Efficiency,"ing with f ...; }. The function returns the total number of files connected. Int_t AddFile(const char* name, Long64_t nentries = kBigNumber, const char* tname = """"); -- Add a new file to this chain. If tname is specified, the chain will load the tree named tname; from the file, otherwise the original treename specified in the; TChain constructor will be used. A. If nentries <= 0, the file is opened and the tree header read; into memory to get the number of entries. B. If nentries > 0, the file is not opened, and nentries is assumed; to be the number of entries in the file. In this case, no check; is made that the file exists nor that the tree exists in the file.; This second mode is interesting in case the number of entries in; the file is already stored in a run database for example. C. If nentries == kBigNumber (default), the file is not opened.; The number of entries in each file will be read only when the file; is opened to read an entry. This option is the default and very; efficient if one processes the chain sequentially. Note that in; case GetEntry(entry) is called and entry refers to an entry in the; third file, for example, this forces the tree headers in the first; and second file to be read to find the number of entries in those; files. Note that if one calls GetEntriesFast() after having created; a chain with this default, GetEntriesFast() will return kBigNumber!; Using the GetEntries() function instead will force all of the tree; headers in the chain to be read to read the number of entries in; each tree. D. The TChain data structure; Each TChainElement has a name equal to the tree name of this TChain; and a title equal to the file name. So, to loop over the; TFiles that have been added to this chain:. TObjArray *fileElements=chain->GetListOfFiles();; TIter next(fileElements);; TChainElement *chEl=0;; while (( chEl=(TChainElement*)next() )) {; TFile f(chEl->GetTitle());; ... do something with f ...; }. The function returns 1 if the file is successfully",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TChain.html:29078,efficient,efficient,29078,root/html526/TChain.html,https://root.cern,https://root.cern/root/html526/TChain.html,3,['efficient'],['efficient']
Energy Efficiency,"ing->pads (numPads); } ///< preparation for monitoring; 819 void create (std::string histoName, int bins, double min, double max) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } ///< returns the smallest error so far; 830 ; 831 public:; 832 Timer m_timer; ///< timer for monitoring; 833 double m_minProgress; ///< current limits for the progress bar; 834 double m_maxProgress; ///< current limits for the progress bar; 835 ; 836 ; 837 size_t m_convergenceSteps; ///< number of steps without improvement to consider the DNN to have converged; 838 size_t m_batchSize; ///< mini-batch size; 839 size_t m_testRepetitions;; 840 double m_factorWeightDecay;; 841 ; 842 size_t count_E;; 843 size_t count_dE;; 844 size_t count_mb_E;; 845 size_t count_mb_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:31467,monitor,monitoring,31467,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['monitor'],['monitoring']
Energy Efficiency,"ing.h:704; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TSystem::PrependPathNamevirtual const char * PrependPathName(const char *dir, TString &name)Concatenate a directory and a file name.Definition TSystem.cxx:1081; TVirtualGeoPainter::DrawBatemanSolvirtual void DrawBatemanSol(TGeoBatemanSol *sol, Option_t *option="""")=0; bool; double; int; unsigned int; lineTLine * lineDefinition entrylistblock_figure1.C:235; nconst Int_t nDefinition legend1.C:16; TGeant4Unit::alpha_rcl2static constexpr double alpha_rcl2Definition TGeant4PhysicalConstants.h:95; TGeant4Unit::fine_structure_conststatic constexpr double fine_structure_constDefinition TGeant4PhysicalConstants.h:90; TGeoUnit::fine_structure_conststatic constexpr double fine_structure_constDefinition TGeoPhysicalConstants.h:90; TGeoUnit::alpha_rcl2static constexpr double alpha_rcl2Definition TGeoPhysicalConstants.h:95; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::Naconstexpr Double_t Na()Avogadro constant (Avogadro's Number) in .Definition TMath.h:284; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; TGeoBatemanSol::BtCoef_tDefinition TGeoElement.h:288; TGeoBatemanSol::BtCoef_t::cnDouble_t cnDefinition TGeoElement.h:289; TGeoBatemanSol::BtCoef_t::lambdaDouble_t lambdaDefinition TGeoElement.h:290. geomgeomsrcTGeoElement.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoElement_8cxx_source.html:80037,power,power,80037,doc/master/TGeoElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoElement_8cxx_source.html,1,['power'],['power']
Energy Efficiency,"ing; TStorage::ReAlloc(). void Dealloc(void* ptr); De-allocate block of memory, that was allocated via TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. void * ReAlloc(void* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) block of memory. Checks if current size is; equal to oldsize. If not memory was overwritten. char * ReAllocChar(char* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of chars. Size and oldsize are; in number of chars. Int_t * ReAllocInt(Int_t* vp, size_t size, size_t oldsize); Reallocate (i.e. resize) array of integers. Size and oldsize are; number of integers (not number of bytes). void * ObjectAlloc(size_t size); Used to allocate a TObject on the heap (via TObject::operator new()).; Directly after this routine one can call (in the TObject ctor); TStorage::IsOnHeap() to find out if the just created object is on; the heap. void * ObjectAlloc(size_t size, void* vp); Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)); in position vp. vp is already allocated (maybe on heap, maybe on; stack) so just return. void ObjectDealloc(void* vp); Used to deallocate a TObject on the heap (via TObject::operator delete()). void ObjectDealloc(void* vp, void* ptr); Used to deallocate a TObject on the heap (via TObject::operator delete(void*,void*)). void SetFreeHook(FreeHookFun_t func, void* data); Set a free handler. void SetReAllocHooks(ReAllocFun_t func1, ReAllocCFun_t func2); Set a custom ReAlloc handlers. This function is typically; called via a static object in the ROOT libNew.so shared library. void PrintStatistics(); Print memory usage statistics. void EnableStatistics(int size = -1, int ix = -1); Enable memory usage statistics gathering. Size is the size of the memory; block that should be trapped and ix is after how many such allocations; the trap should happen. ULong_t GetHeapBegin(); return begin of heap. ULong_t GetHeapEnd(); return end of heap. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStorage.html:4567,allocate,allocate,4567,root/html528/TStorage.html,https://root.cern,https://root.cern/root/html528/TStorage.html,4,['allocate'],['allocate']
Energy Efficiency,ings::m_batchSize. mini-batch size ; Definition at line 838 of file NeuralNet.h. ◆ m_convergenceCount. size_t TMVA::DNN::Settings::m_convergenceCount. Definition at line 857 of file NeuralNet.h. ◆ m_convergenceSteps. size_t TMVA::DNN::Settings::m_convergenceSteps. number of steps without improvement to consider the DNN to have converged ; Definition at line 837 of file NeuralNet.h. ◆ m_dropOut. std::vector<double> TMVA::DNN::Settings::m_dropOut. Definition at line 850 of file NeuralNet.h. ◆ m_dropRepetitions. double TMVA::DNN::Settings::m_dropRepetitions. Definition at line 849 of file NeuralNet.h. ◆ m_factorWeightDecay. double TMVA::DNN::Settings::m_factorWeightDecay. Definition at line 840 of file NeuralNet.h. ◆ m_maxConvergenceCount. size_t TMVA::DNN::Settings::m_maxConvergenceCount. Definition at line 858 of file NeuralNet.h. ◆ m_maxProgress. double TMVA::DNN::Settings::m_maxProgress. current limits for the progress bar ; Definition at line 834 of file NeuralNet.h. ◆ m_minError. double TMVA::DNN::Settings::m_minError. Definition at line 859 of file NeuralNet.h. ◆ m_minProgress. double TMVA::DNN::Settings::m_minProgress. current limits for the progress bar ; Definition at line 833 of file NeuralNet.h. ◆ m_regularization. EnumRegularization TMVA::DNN::Settings::m_regularization. Definition at line 847 of file NeuralNet.h. ◆ m_testRepetitions. size_t TMVA::DNN::Settings::m_testRepetitions. Definition at line 839 of file NeuralNet.h. ◆ m_timer. Timer TMVA::DNN::Settings::m_timer. timer for monitoring ; Definition at line 832 of file NeuralNet.h. ◆ m_useMultithreading. bool TMVA::DNN::Settings::m_useMultithreading. protected . Definition at line 863 of file NeuralNet.h. Libraries for TMVA::DNN::Settings:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/NeuralNet.h; tmva/tmva/src/NeuralNet.cxx. TMVADNNSettings. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:15575,monitor,monitoring,15575,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['monitor'],['monitoring']
Energy Efficiency,"inition at line 203 of file TChainIndex.cxx. Member Function Documentation. ◆ Append(). void TChainIndex::Append ; (; const TVirtualIndex * ; index, . bool ; delaySort = false . ). overridevirtual . Add an index to this chain. ; if delaySort is false (default) check if the indices of different trees are in order. ; Implements TVirtualIndex.; Definition at line 157 of file TChainIndex.cxx. ◆ Class(). static TClass * TChainIndex::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TChainIndex::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TChainIndex::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 100 of file TChainIndex.h. ◆ Clone(). TObject * TChainIndex::Clone ; (; const char * ; newname = """"); const. overridevirtual . Create a deep copy of the TChainIndex. ; Parameters. [in]newnameA new name for the index. The new index is allocated on the heap without being managed. Also, it is not attached to any tree. It is the responsibility of the caller to manage its lifetime and attach it to a tree if necessary. ; Reimplemented from TObject.; Definition at line 437 of file TChainIndex.cxx. ◆ DeclFileName(). static const char * TChainIndex::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 100 of file TChainIndex.h. ◆ DeleteIndices(). void TChainIndex::DeleteIndices ; (; ). protected . Delete all the indices which were built by this object. ; Definition at line 187 of file TChainIndex.cxx. ◆ GetEntryNumberFriend(). Long64_t TChainIndex::GetEntryNumberFriend ; (; const TTree * ; parent). overridevirtual . See TTreeIndex::GetEntryNumberFriend for description. ; Implements TVirtualIndex.; Definition at line 280 of file TChainIndex.cxx. ◆ GetEntryNumberWithBestIndex(). Long64_t TChainIndex::GetEntryNumberWithBestIndex ; (; Long64_t ; major, . Long64_t ; minor . ); cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChainIndex.html:16329,allocate,allocated,16329,doc/master/classTChainIndex.html,https://root.cern,https://root.cern/doc/master/classTChainIndex.html,1,['allocate'],['allocated']
Energy Efficiency,"inition at line 2424 of file RooLagrangianMorphFunc.cxx. ◆ getParameterSet(). const RooArgSet * RooLagrangianMorphFunc::getParameterSet ; (; ); const. get the set of parameters ; Definition at line 2705 of file RooLagrangianMorphFunc.cxx. ◆ getParameterValue(). double RooLagrangianMorphFunc::getParameterValue ; (; const char * ; name); const. set one parameter to a specific value ; Definition at line 2462 of file RooLagrangianMorphFunc.cxx. ◆ getSamples(). std::vector< std::string > RooLagrangianMorphFunc::getSamples ; (; ); const. return the vector of sample names, used to build the morph func ; Definition at line 2176 of file RooLagrangianMorphFunc.cxx. ◆ getSampleWeight(). RooAbsReal * RooLagrangianMorphFunc::getSampleWeight ; (; const char * ; name). retrieve the weight (prefactor) of a sample with the given name ; Definition at line 2184 of file RooLagrangianMorphFunc.cxx. ◆ getScale(). double RooLagrangianMorphFunc::getScale ; (; ). get energy scale of the EFT expansion ; Definition at line 1977 of file RooLagrangianMorphFunc.cxx. ◆ getSumElement(). RooProduct * RooLagrangianMorphFunc::getSumElement ; (; const char * ; name); const. return the RooProduct that is the element of the RooRealSumPdfi corresponding to the given sample name ; Definition at line 2150 of file RooLagrangianMorphFunc.cxx. ◆ hasCache(). bool RooLagrangianMorphFunc::hasCache ; (; ); const. private . return true if a cache object is present, false otherwise ; Definition at line 2347 of file RooLagrangianMorphFunc.cxx. ◆ hasParameter(). bool RooLagrangianMorphFunc::hasParameter ; (; const char * ; paramname); const. check if a parameter of the given name is contained in the list of known parameters ; Definition at line 2442 of file RooLagrangianMorphFunc.cxx. ◆ init(). void RooLagrangianMorphFunc::init ; (; ). private . initialise inputs required for the morphing function ; Definition at line 1910 of file RooLagrangianMorphFunc.cxx. ◆ insert(). void RooLagrangianMorphFunc::insert ; (; RooWor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:84003,energy,energy,84003,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['energy'],['energy']
Energy Efficiency,"inition at line 58 of file TMath.h. ◆ Poisson(). Double_t TMath::Poisson ; (; Double_t ; x, . Double_t ; par . ). Computes the Poisson distribution function for (x,par). ; The Poisson PDF is implemented by means of Euler's Gamma-function (for the factorial), so for any x integer argument it is the correct Poisson distribution. BUT for non-integer x values, it IS NOT equal to the Poisson distribution !. Definition at line 587 of file TMath.cxx. ◆ PoissonI(). Double_t TMath::PoissonI ; (; Double_t ; x, . Double_t ; par . ). Computes the Discrete Poisson distribution function for (x,par). ; This is a discrete and a non-smooth function. This function is equivalent to ROOT::Math::poisson_pdf. Definition at line 615 of file TMath.cxx. ◆ Power() [1/5]. Double_t TMath::Power ; (; Double_t ; x, . Double_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 739 of file TMath.h. ◆ Power() [2/5]. Double_t TMath::Power ; (; Double_t ; x, . Int_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 745 of file TMath.h. ◆ Power() [3/5]. LongDouble_t TMath::Power ; (; Long64_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 733 of file TMath.h. ◆ Power() [4/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . Long64_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 727 of file TMath.h. ◆ Power() [5/5]. LongDouble_t TMath::Power ; (; LongDouble_t ; x, . LongDouble_t ; y . ). inline . Returns x raised to the power y. ; Definition at line 721 of file TMath.h. ◆ Prob(). Double_t TMath::Prob ; (; Double_t ; chi2, . Int_t ; ndf . ). Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf). ; Calculations are based on the incomplete gamma function P(a,x), where a=ndf/2 and x=chi2/2.; P(a,x) represents the probability that the observed Chi-squared for a correct model should be less than the value chi2.; The returned probability corresponds to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:72049,power,power,72049,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['power'],['power']
Energy Efficiency,"inition; // in a real-valued input observable observables to state names. The state names are automatically; // constructed from the variable name, the binning name and the bin number. If no binning name; // is specified the default binning is mapped; ; x.setBins(10, ""coarse"");; RooBinningCategory xBins(""xBins"", ""coarse bins in x"", x, ""coarse"");; ; // U s e b i n n i n g f u n c t i o n f o r t a b u l a t i o n a n d p l o t t i n g; // -----------------------------------------------------------------------------------------------; ; // Print table of xBins state multiplicity. Note that xBins does not need to be an observable in data; // it can be a function of observables in data as well; Roo1DTable *xbtable = data->table(xBins);; xbtable->Print(""v"");; ; // Add values of xBins function to dataset so that it can be used as observable; RooCategory *xb = (RooCategory *)data->addColumn(xBins);; ; // Define range ""alt"" as including bins 1,3,5,7,9; xb->setRange(""alt"", ""x_coarse_bin1,x_coarse_bin3,x_coarse_bin5,x_coarse_bin7,x_coarse_bin9"");; ; // Construct subset of data matching range ""alt"" but only for the first 5000 events and plot it on the frame; std::unique_ptr<RooAbsData> dataSel{data->reduce(CutRange(""alt""), EventRange(0, 5000))};; dataSel->plotOn(xframe, MarkerColor(kGreen), LineColor(kGreen));; ; new TCanvas(""rf405_realtocatfuncs"", ""rf405_realtocatfuncs"", 600, 600);; xframe->SetMinimum(0.01);; gPad->SetLeftMargin(0.15);; xframe->GetYaxis()->SetTitleOffset(1.4);; xframe->Draw();; }; a#define a(i)Definition RSha256.hxx:99; Roo1DTable.h; RooArgusBG.h; RooBinningCategory.h; RooCategory.h; RooDataSet.h; RooGaussian.h; RooPlot.h; RooRealVar.h; RooThresholdCategory.h; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; TAxis.h; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; gPad#de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf405__realtocatfuncs_8C.html:3981,reduce,reduce,3981,doc/master/rf405__realtocatfuncs_8C.html,https://root.cern,https://root.cern/doc/master/rf405__realtocatfuncs_8C.html,1,['reduce'],['reduce']
Energy Efficiency,"inline . Definition at line 83 of file TMatrixTSparse.h. ◆ TMatrixTSparse() [2/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; Int_t ; nrows, . Int_t ; ncols . ). Space is allocated for row/column indices and data, but the sparse structure information has still to be set ! ; Definition at line 107 of file TMatrixTSparse.cxx. ◆ TMatrixTSparse() [3/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; Int_t ; row_lwb, . Int_t ; row_upb, . Int_t ; col_lwb, . Int_t ; col_upb, . Int_t ; nr_nonzeros = 0 . ). Space is allocated for row/column indices and data, but the sparse structure information has still to be set ! ; Definition at line 117 of file TMatrixTSparse.cxx. ◆ TMatrixTSparse() [4/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; Int_t ; row_lwb, . Int_t ; row_upb, . Int_t ; col_lwb, . Int_t ; col_upb, . Int_t ; nr, . Int_t * ; row, . Int_t * ; col, . Element * ; data . ). Space is allocated for row/column indices and data. ; Sparse row/column index structure together with data is coming from the arrays, row, col and data, resp. Here row, col and data are arrays of length nr (number of nonzero elements), i.e. the matrix is stored in COO (coordinate) format. Note that the input arrays are not passed as const since they will be modified ! ; Definition at line 130 of file TMatrixTSparse.cxx. ◆ TMatrixTSparse() [5/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; Int_t ; row_lwb, . Int_t ; row_upb, . Int_t ; col_lwb, . Int_t ; col_upb, . Int_t * ; rowptr, . Int_t * ; col, . Element * ; data . ). Space is allocated for row/column indices and data. ; Sparsity pattern is given by column indices and row pointers from arrays col and rowptr, resp, while matrix entries come from the array data. Arrays col and data are assumed to have length nr (number of nonzero elements), while array rowptr has length (n+1), where n=row_upb-row_lwb+1 is the number of rows. ; D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSparse.html:29766,allocate,allocated,29766,doc/master/classTMatrixTSparse.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html,1,['allocate'],['allocated']
Energy Efficiency,"inning tab has two different layouts. One is for a histogram that is not drawn from an ntuple; the other one is available for a histogram, which is drawn from an ntuple. In this case, the rebin algorithm can create a rebinned histogram from the original data i.e. the ntuple. To see the differences do for example:; TFile f (""hsimple.root"");; hpxpy->Draw(""Lego2""); // non ntuple histogram; ntuple->Draw(""px:py"","""",""Lego2""); // ntuple histogram; 3.21.2.5 Non-ntuple histogram:; Rebin with sliders (one for the x, one for the y-axis) and the number of bins (shown in the field below them can be changed to any number, which divides the number of bins of the original histogram. Selecting the Apply button will delete the origin histogram and will replace it by the rebinned one on the screen. Selecting the Ignore the origin histogram will be restored. 3.21.2.6 Histogram drawn from an ntuple; 3.21.2.6.1 Rebin; with the sliders the number of bins can be enlarged by a factor of 2,3,4,5 (moving to the right) or reduced by a factor of \(\frac{1}{2}\), \(\frac{1}{3}\), \(\frac{1}{4}\), \(\frac{1}{5}\).; 3.21.2.6.2 BinOffset; with the BinOffset slider the origin of the histogram can be changed within one binwidth. Using this slider the effect of binning the data into bins can be made visible (=> statistical fluctuations).; 3.21.2.6.3 Axis Range; with a double slider that gives the possibility for zooming. It is also possible to set the upper and lower limit in fields below the slider.; 3.21.2.6.4 Delayed drawing; all the binning sliders can be set to delay draw mode. Then the changes on the histogram are only updated, when the Slider is released. This should be activated if the redrawing of the histogram is too time consuming.; 4 Graphs; A graph is a graphics object made of two arrays X and Y, holding the x,y coordinates of n points. There are several graph classes; they are TGraph, TGraphErrors, TGraphAsymmErrors, and TMultiGraph.; 4.1 TGraph; The TGraph class supports the general case",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:140700,reduce,reduced,140700,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['reduce'],['reduced']
Energy Efficiency,"insnumber of filled bins. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~THnSparse(); Destruct a THnSparse. void AddBinContent(Long64_t bin, Double_t v = 1.); Add ""v"" to the content of bin with index ""bin"". THnSparseArrayChunk* AddChunk(); Create a new chunk of bin content. void InitStorage(Int_t* nbins, Int_t chunkSize); Initialize the storage of a histogram created via Init(). void FillExMap(); We have been streamed; set up fBins. void Reserve(Long64_t nbins); Initialize storage for nbins. Long64_t GetBin(const Double_t* x, Bool_t allocate = kTRUE); Get the bin index for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approxi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparse.html:17242,allocate,allocate,17242,root/html534/THnSparse.html,https://root.cern,https://root.cern/root/html534/THnSparse.html,6,['allocate'],['allocate']
Energy Efficiency,"int == -2) return;; 1319 ; 1320 fEXlow[ipoint] = exl;; 1321 fEYlow[ipoint] = eyl;; 1322 fEXhigh[ipoint] = exh;; 1323 fEYhigh[ipoint] = eyh;; 1324 gPad->Modified();; 1325}; 1326 ; 1327 ; 1328////////////////////////////////////////////////////////////////////////////////; 1329/// Set ex and ey values for point number i.; 1330 ; 1331void TGraphAsymmErrors::SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); 1332{; 1333 if (i < 0) return;; 1334 if (i >= fNpoints) {; 1335 // re-allocate the object; 1336 TGraphAsymmErrors::SetPoint(i,0,0);; 1337 }; 1338 fEXlow[i] = exl;; 1339 fEYlow[i] = eyl;; 1340 fEXhigh[i] = exh;; 1341 fEYhigh[i] = eyh;; 1342}; 1343 ; 1344 ; 1345////////////////////////////////////////////////////////////////////////////////; 1346/// Set EXlow for point `i`.; 1347 ; 1348void TGraphAsymmErrors::SetPointEXlow(Int_t i, Double_t exl); 1349{; 1350 if (i < 0) return;; 1351 if (i >= fNpoints) {; 1352 // re-allocate the object; 1353 TGraphAsymmErrors::SetPoint(i,0,0);; 1354 }; 1355 fEXlow[i] = exl;; 1356}; 1357 ; 1358 ; 1359////////////////////////////////////////////////////////////////////////////////; 1360/// Set EXhigh for point `i`.; 1361 ; 1362void TGraphAsymmErrors::SetPointEXhigh(Int_t i, Double_t exh); 1363{; 1364 if (i < 0) return;; 1365 if (i >= fNpoints) {; 1366 // re-allocate the object; 1367 TGraphAsymmErrors::SetPoint(i,0,0);; 1368 }; 1369 fEXhigh[i] = exh;; 1370}; 1371 ; 1372 ; 1373////////////////////////////////////////////////////////////////////////////////; 1374/// Set EYlow for point `i`.; 1375 ; 1376void TGraphAsymmErrors::SetPointEYlow(Int_t i, Double_t eyl); 1377{; 1378 if (i < 0) return;; 1379 if (i >= fNpoints) {; 1380 // re-allocate the object; 1381 TGraphAsymmErrors::SetPoint(i,0,0);; 1382 }; 1383 fEYlow[i] = eyl;; 1384}; 1385 ; 1386 ; 1387////////////////////////////////////////////////////////////////////////////////; 1388/// Set EYhigh for point `i`.; 1389 ; 1390void TGraphAsymmErrors::SetPointEYhigh(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:46686,allocate,allocate,46686,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency,"int TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TF11-Dim function classDefinition TF1.h:233; TF1::GetRandomvirtual Double_t GetRandom(TRandom *rng=nullptr, Option_t *opt=nullptr)Return a random number following this function shape.Definition TF1.cxx:2192; f1TF1 * f1Definition legend1.C:11; or you can use the UNURAN package. You need in this case to initialize UNURAN to the function you would like to generate. TUnuran u;; u.Init(TUnuranDistrCont(f1));; double r = u.Sample();; TUnuranTUnuran class.Definition TUnuran.h:79; TUnuran::Initbool Init(const std::string &distr, const std::string &method)Initialize with Unuran string API interface.Definition TUnuran.cxx:62; TUnuran::Sampledouble Sample()Sample 1D distribution.Definition TUnuran.cxx:414; The techniques of using directly a TF1,2 or 3 function is powerful and can be used to generate numbers in the defined range of the function. Getting a number from a TF1,2,3 function is also quite fast. UNURAN is a powerful and flexible tool which contains various methods for generate random numbers for continuous distributions of one and multi-dimension. It requires some set-up (initialization) phase and can be very fast when the distribution parameters are not changed for every call.; The following table shows some timings (in nanosecond/call) for basic functions, TF1 functions and using UNURAN obtained running the tutorial math/testrandom.C Numbers have been obtained on an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running Linux SLC4 64 bit and compiled with gcc 3.4; Distribution nanoseconds/call; TRandom TRandom1 TRandom2 TRandom3; Rndm.............. 5.000 105.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau............ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom.html:6666,power,powerful,6666,doc/master/classTRandom.html,https://root.cern,https://root.cern/doc/master/classTRandom.html,1,['power'],['powerful']
Energy Efficiency,"int x, with location parameter alpha and shape parameter beta. ; By default, alpha=0, beta=1 This distribution is known under different names, most common is double exponential distribution, but it also appears as the two-tailed exponential or the bilateral exponential distribution ; Definition at line 2364 of file TMath.cxx. ◆ LaplaceDistI(). Double_t TMath::LaplaceDistI ; (; Double_t ; x, . Double_t ; alpha = 0, . Double_t ; beta = 1 . ). Computes the cumulative distribution function (lower tail integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ; By default, alpha=0, beta=1 This distribution is known under different names, most common is double exponential distribution, but it also appears as the two-tailed exponential or the bilateral exponential distribution ; Definition at line 2380 of file TMath.cxx. ◆ Ldexp(). Double_t TMath::Ldexp ; (; Double_t ; x, . Int_t ; exp . ). inline . Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ; Definition at line 715 of file TMath.h. ◆ Ln10(). constexpr Double_t TMath::Ln10 ; (; ). constexpr . Natural log of 10 (to convert log to ln) ; Definition at line 100 of file TMath.h. ◆ LnGamma(). Double_t TMath::LnGamma ; (; Double_t ; z). Computation of ln[gamma(z)] for all z. ; C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86.; The accuracy of the result is better than 2e-10.; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 509 of file TMath.cxx. ◆ LocMax() [1/2]. template<typename Iterator > . Iterator TMath::LocMax ; (; Iterator ; first, . Iterator ; last . ). Returns index of array with the maximum element. ; If more than one element is maximum returns first found. ; Definition at line 1030 of file TMath.h. ◆ LocMax() [2/2]. template<typename T > . Long64_t TMath::LocMax ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the maximum element. ; If more than one element is maximum returns fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:58270,power,power,58270,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['power'],['power']
Energy Efficiency,"int; UInt_tfNumPointsnumber of anchor points; Double_t*fPoints[fNumPoints] value of each anchor point [0..1]; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImagePalette(); Default constructor, sets all pointers to 0. TImagePalette(UInt_t numPoints); Constructor for a palette with numPoints anchor points.; It allocates the memory but does not set any colors. TImagePalette(const TImagePalette& palette); Copy constructor. TImagePalette(Int_t ncolors, Int_t* colors); Creates palette in the same way as TStyle::SetPalette. ~TImagePalette(); Destructor. TImagePalette & operator=(const TImagePalette& palette); Assignment operator. Int_t FindColor(UShort_t r, UShort_t g, UShort_t b); returns an index of the closest color. Int_t * GetRootColors(); Returns a list of ROOT colors. Could be used to set histogram palette.; See also http://root.cern.ch/root/htmldoc/TStyle.html#TStyle:SetPalette. » Author: Reiner Rohlfs 24/03/02 » Copyright (C) 2001-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root/graf:$Id$ » Last generated: 2015-06-02 16:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TImagePalette.html:8721,allocate,allocates,8721,root/html604/TImagePalette.html,https://root.cern,https://root.cern/root/html604/TImagePalette.html,2,['allocate'],['allocates']
Energy Efficiency,"int; UInt_tfNumPointsnumber of anchor points; Double_t*fPoints[fNumPoints] value of each anchor point [0..1]; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TImagePalette(); Default constructor, sets all pointers to 0. TImagePalette(UInt_t numPoints); Constructor for a palette with numPoints anchor points.; It allocates the memory but does not set any colors. TImagePalette(const TImagePalette& palette); Copy constructor. TImagePalette(Int_t ncolors, Int_t* colors); Creates palette in the same way as TStyle::SetPalette. ~TImagePalette(); Destructor. TImagePalette & operator=(const TImagePalette& palette); Assignment operator. Int_t FindColor(UShort_t r, UShort_t g, UShort_t b); returns an index of the closest color. Int_t * GetRootColors(); Returns a list of ROOT colors. Could be used to set histogram palette.; See also http://root.cern.ch/root/htmldoc/TStyle.html#TStyle:SetPalette. » Author: Reiner Rohlfs 24/03/02 » Copyright (C) 2001-2002, Rene Brun, Fons Rademakers and Reiner Rohlfs *; » Last changed: root/graf:$Id$ » Last generated: 2015-06-30 15:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TImagePalette.html:8721,allocate,allocates,8721,root/html602/TImagePalette.html,https://root.cern,https://root.cern/root/html602/TImagePalette.html,2,['allocate'],['allocates']
Energy Efficiency,"intArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); static RooDataSet*read(const char* filename, const RooArgList& variables, const char* opts = """", const char* commonPath = """", const char* indexCatName = 0); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(RooCmdArg arg1, RooCmdArg arg2 = RooCmdArg(), RooCmdArg arg3 = RooCmdArg(), RooCmdArg arg4 = RooCmdArg(), RooCmdArg arg5 = RooCmdArg(), RooCmdArg arg6 = RooCmdArg(), RooCmdArg arg7 = RooCmdArg(), RooCmdArg arg8 = RooCmdArg()); virtual voidRooAbsData::reset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidRooAbsData::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataSet.html:9915,reduce,reduce,9915,root/html526/RooDataSet.html,https://root.cern,https://root.cern/root/html526/RooDataSet.html,1,['reduce'],['reduce']
Energy Efficiency,"intArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); static RooDataSet*read(const char* filename, const RooArgList& variables, const char* opts = """", const char* commonPath = """", const char* indexCatName = 0); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); virtual voidRooAbsData::reset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidRooAbsData::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDataSet.html:10168,reduce,reduce,10168,root/html530/RooDataSet.html,https://root.cern,https://root.cern/root/html530/RooDataSet.html,1,['reduce'],['reduce']
Energy Efficiency,"intArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); static RooDataSet*read(const char* filename, const RooArgList& variables, const char* opts = """", const char* commonPath = """", const char* indexCatName = 0); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); virtual voidRooAbsData::reset(); voidTObject::ResetBit(UInt_t f); voidRooAbsData::resetBuffers(); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; RooDataSet(); RooDataSet(const RooDataSet& other, const char* newname = 0); RooDataSet(const char* name, const char* title, const RooArgSet& vars, const char* wgtVarName = 0); RooDataSet(const char* name, const char* title, RooDataSet* data, const RooArgSet& vars, const char* cuts = 0, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataSet.html:9243,reduce,reduce,9243,root/html602/RooDataSet.html,https://root.cern,https://root.cern/root/html602/RooDataSet.html,4,['reduce'],['reduce']
Energy Efficiency,"intArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); static RooDataSet*read(const char* filename, const RooArgList& variables, const char* opts = """", const char* commonPath = """", const char* indexCatName = 0); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); virtual voidRooAbsData::reset(); voidTObject::ResetBit(UInt_t f); voidRooAbsData::resetBuffers(); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidRooAbsData::setDefaultStorageType(RooAbsData",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataSet.html:10359,reduce,reduce,10359,root/html534/RooDataSet.html,https://root.cern,https://root.cern/root/html534/RooDataSet.html,2,['reduce'],['reduce']
Energy Efficiency,"intArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); static RooDataSet*read(const char* filename, const RooArgList& variables, const char* opts = """", const char* commonPath = """", const char* indexCatName = 0); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); virtual voidRooAbsData::reset(); voidTObject::ResetBit(UInt_t f); voidRooAbsData::resetBuffers(); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidRooAbsData::setDirtyProp(Bool_t flag); virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDataSet.html:10264,reduce,reduce,10264,root/html532/RooDataSet.html,https://root.cern,https://root.cern/root/html532/RooDataSet.html,2,['reduce'],['reduce']
Energy Efficiency,"intArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); static RooDataSet*read(const char* filename, const RooArgList& variables, const char* opts = """", const char* commonPath = """", const char* indexCatName = 0); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); virtual voidRooAbsData::reset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidRooAbsData::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDataSet.html:9971,reduce,reduce,9971,root/html528/RooDataSet.html,https://root.cern,https://root.cern/root/html528/RooDataSet.html,1,['reduce'],['reduce']
Energy Efficiency,"intName ; (; std::ostream & ; os); const. inlineoverridevirtual . Print name of dataset. ; Reimplemented from RooPrintable.; Definition at line 112 of file RooAbsDataStore.h. ◆ printTitle(). void RooAbsDataStore::printTitle ; (; std::ostream & ; os); const. inlineoverridevirtual . Print title of dataset. ; Reimplemented from RooPrintable.; Definition at line 114 of file RooAbsDataStore.h. ◆ printValue(). void RooAbsDataStore::printValue ; (; std::ostream & ; os); const. inlineoverridevirtual . Print value of the dataset, i.e. the sum of weights contained in the dataset. ; Reimplemented from RooPrintable.; Definition at line 118 of file RooAbsDataStore.h. ◆ recalculateCache(). virtual void RooAbsDataStore::recalculateCache ; (; const RooArgSet * ; , . Int_t ; , . Int_t ; , . Int_t ; , . bool ;  . ). inlinevirtual . Reimplemented in RooVectorDataStore, and RooCompositeDataStore.; Definition at line 132 of file RooAbsDataStore.h. ◆ reduce(). virtual std::unique_ptr< RooAbsDataStore > RooAbsDataStore::reduce ; (; RooStringView ; name, . RooStringView ; title, . const RooArgSet & ; vars, . const RooFormulaVar * ; cutVar, . const char * ; cutRange, . std::size_t ; nStart, . std::size_t ; nStop . ). pure virtual . Implemented in RooCompositeDataStore, RooTreeDataStore, and RooVectorDataStore. ◆ reset(). virtual void RooAbsDataStore::reset ; (; ). pure virtual . Implemented in RooCompositeDataStore, RooTreeDataStore, and RooVectorDataStore. ◆ resetBuffers(). virtual void RooAbsDataStore::resetBuffers ; (; ). pure virtual . Implemented in RooCompositeDataStore, RooTreeDataStore, and RooVectorDataStore. ◆ resetCache(). virtual void RooAbsDataStore::resetCache ; (; ). pure virtual . Implemented in RooCompositeDataStore, RooTreeDataStore, and RooVectorDataStore. ◆ setArgStatus(). virtual void RooAbsDataStore::setArgStatus ; (; const RooArgSet & ; set, . bool ; active . ). pure virtual . Implemented in RooCompositeDataStore, RooTreeDataStore, and RooVectorDataStore. ◆ setDirtyPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsDataStore.html:26630,reduce,reduce,26630,doc/master/classRooAbsDataStore.html,https://root.cern,https://root.cern/doc/master/classRooAbsDataStore.html,1,['reduce'],['reduce']
Energy Efficiency,"interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Transform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Transform.html:1456,adapt,adaptive,1456,doc/master/classTSpectrum2Transform.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html,1,['adapt'],['adaptive']
Energy Efficiency,"inter ; f, . void * ; p . ). evaluate the Integral of a function f over the infinite interval (-inf,+inf) passing a free function pointer ; Definition at line 362 of file GSLIntegrator.cxx. ◆ Integral() [8/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . const std::vector< double > & ; pts . ). evaluate the Integral of a function f with knows singular points over the over a defined interval passing a free function pointer ; Definition at line 380 of file GSLIntegrator.cxx. ◆ Integral() [9/9]. double ROOT::Math::GSLIntegrator::Integral ; (; GSLFuncPointer ; f, . void * ; p, . double ; a, . double ; b . ). signature for function pointers used by GSL ; evaluate the Integral of of a function f over the defined interval (a,b) passing a free function pointer The integration function must be a free function and have a signature consistent with GSL functions:; double my_function ( double x, void * p ) { ...... } ; This method is the most efficient since no internal adapter to GSL function is created. Parameters. fpointer to the integration function ; ppointer to the Parameters of the function ; alower value of the integration interval ; bupper value of the integration interval . Definition at line 356 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [1/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; const IGenFunction & ; f, . double ; a, . double ; b, . double ; c . ). evaluate the Cauchy principal value of the integral of a function f over the defined interval (a,b) with a singularity at c ; Parameters. fintegration function. The function type must implement the mathlib::IGenFunction interface ; alower interval value ; blower interval value ; csingular value of f . Definition at line 241 of file GSLIntegrator.cxx. ◆ IntegralCauchy() [2/2]. double ROOT::Math::GSLIntegrator::IntegralCauchy ; (; double ; a, . double ; b, . double ; c . ). overridevirtual . evaluate the Cauchy principal value of the integral of a previously define",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html:14715,efficient,efficient,14715,doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLIntegrator.html,2,"['adapt', 'efficient']","['adapter', 'efficient']"
Energy Efficiency,"intf (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html). Usage: the following statement produce the same output, namely ""1111"" std::cout << TString::Itoa(15,2) ;; std::cout << TString::Itoa(0xF,2) ; /// 0x prefix to handle hex; std::cout << TString::Itoa(017,2) ; /// 0 prefix to handle oct; TString::Itoastatic TString Itoa(Int_t value, Int_t base)Converts an Int_t to a TString with respect to the base specified (2-36).Definition TString.cxx:2092; In case of error returns the ""!"" string. ; Definition at line 2092 of file TString.cxx. ◆ Last(). Ssiz_t TString::Last ; (; char ; c); const. Find last occurrence of a character c. ; Definition at line 931 of file TString.cxx. ◆ Length(). Ssiz_t TString::Length ; (; ); const. inline . Definition at line 417 of file TString.h. ◆ LLtoa(). TString TString::LLtoa ; (; Long64_t ; value, . Int_t ; base . ). static . Converts a Long64_t to a TString with respect to the base specified (2-36). ; Thus it is an enhanced version of sprintf (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html). In case of error returns the ""!"" string. ; Definition at line 2144 of file TString.cxx. ◆ MaxSize(). static Ssiz_t TString::MaxSize ; (; ). inlinestaticprivate . Definition at line 261 of file TString.h. ◆ MaxWaste(). Ssiz_t TString::MaxWaste ; (; Ssiz_t ; mw = 15). static . Set maximum space that may be wasted in a string before doing a resize. ; Default is 15. ; Definition at line 1612 of file TString.cxx. ◆ MaybeRegexp(). Bool_t TString::MaybeRegexp ; (; ); const. Returns true if string contains one of the regexp characters ""^$.[]*+?"". ; Definition at line 952 of file TString.cxx. ◆ MaybeWildcard(). Bool_t TString::MaybeWildcard ; (; ); const. Returns true if string contains one of the wildcard characters ""[]*?"". ; Definition at line 964 of file TString.cxx. ◆ MD5(). TString TString::MD5 ; (; ); const. Return the MD5 digest for this string, in a string representation. ; Definition at line 940 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTString.html:42421,adapt,adapted,42421,doc/v632/classTString.html,https://root.cern,https://root.cern/doc/v632/classTString.html,2,['adapt'],['adapted']
Energy Efficiency,"involving other variables, such as intermediate formula objects, use the equivalent reduce method specifying the as a RooFormulVar reference. ; Definition at line 500 of file RooAbsData.cxx. ◆ reduce() [3/5]. RooFit::OwningPtr< RooAbsData > RooAbsData::reduce ; (; const RooArgSet & ; varSubset, . const RooFormulaVar & ; cutVar . ); const. Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ; The 'cutVar' formula variable is used to select the subset of data points to be retained in the reduced data collection. ; Definition at line 530 of file RooAbsData.cxx. ◆ reduce() [4/5]. RooFit::OwningPtr< RooAbsData > RooAbsData::reduce ; (; const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create a reduced copy of this dataset. ; The caller takes ownership of the returned dataset; The following optional named arguments are accepted . SelectVars(const RooArgSet& vars) Only retain the listed observables in the output dataset . Cut(const char* expression) Only retain event surviving the given cut expression. . Cut(const RooFormulaVar& expr) Only retain event surviving the given cut formula. . CutRange(const char* name) Only retain events inside range with given name. Multiple CutRange arguments may be given to select multiple ranges. Note that this will also consider the variables that are not selected by SelectVars(). . EventRange(int lo, int hi) Only retain events with given sequential event numbers . Name(const char* name) Give specified name to output dataset . Title(const char* name) Give specified title to output dataset . Definition at line 399 of file RooAbsData.cxx. ◆ reduce() [5/5]. RooFit::OwningPtr< RooAbsData > RooAbsData::reduce ; (; const RooFormulaVar & ; cutVar); const. Creat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:63704,reduce,reduced,63704,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['reduce'],['reduced']
Energy Efficiency,"ioButton A radio button widget; TGRecorder GUI class of the event recorder.; TGRectMap Rectangle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTableHeader Header for use in TGTable.; TGTableHeaderFrame A frame used internally by TGTable.; TGTableLayout Table layout manager; TGTableLayoutHints Class describing GUI table layout hints; TGText Text used by TGTextEdit; TGTextBuffer Text buffer used by widgets like TGTextEntry, etc.; TGTextButton A text button widget; TGTextEdit Text edit widget; TGTextEditor Simple text editor using TGTextEdit widget; TGTextEntry The TGTextEntry widget is a simple line editor for inputting text; TGTextLBEntry Text listbox entry; TGTextLayout Keep track of string measurement information.; TGTextLine Line in TGText; TGTextView Non-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:83327,meter,meter,83327,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['meter'],['meter']
Energy Efficiency,"ion (See TClass and TTree::Merge) . Definition at line 97 of file TObject.h. ◆ EDeprecatedStatusBits. enum TObject::EDeprecatedStatusBits. EnumeratorkObjInCanvas for backward compatibility only, use kMustCleanup . Definition at line 75 of file TObject.h. ◆ EStatusBits. enum TObject::EStatusBits. EnumeratorkCanDelete if object in a list can be deleted . kMustCleanup if object destructor must call RecursiveRemove() . kIsReferenced if object is referenced by a TRef or TRefArray . kHasUUID if object has a TUUID (its fUniqueID=UUIDNumber) . kCannotPick if object in a pad cannot be picked . kNoContextMenu if object does not want context menu . kInvalidObject if object ctor succeeded but object should not be used . Definition at line 61 of file TObject.h. Constructor & Destructor Documentation. ◆ TObject() [1/2]. TObject::TObject ; (; ). inline . TObject constructor. ; It sets the two data words of TObject to their initial values. The unique ID is set to 0 and the status word is set depending if the object is created on the stack or allocated on the heap. Depending on the ROOT environment variable ""Root.ObjStat"" (see TEnv) the object is added to the global TObjectTable for bookkeeping. ; Definition at line 254 of file TObject.h. ◆ TObject() [2/2]. TObject::TObject ; (; const TObject & ; object). inline . TObject copy ctor. ; Definition at line 272 of file TObject.h. ◆ ~TObject(). TObject::~TObject ; (; ). virtual . TObject destructor. ; Removes object from all canvases and object browsers if observer bit is on and remove from the global object table. ; Definition at line 158 of file TObject.cxx. Member Function Documentation. ◆ AbstractMethod(). void TObject::AbstractMethod ; (; const char * ; method); const. Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ; Definition at line 1029 of file TObject.cxx. ◆ AddToTObjectTable(). void TObject::AddToTObjectTable ; (; TObject * ; op). staticprivate . Private helper function which wil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:18980,allocate,allocated,18980,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['allocate'],['allocated']
Energy Efficiency,"ion (See TClass and TTree::Merge) . Definition at line 97 of file TObject.h. ◆ EDeprecatedStatusBits. enum TObject::EDeprecatedStatusBits. EnumeratorkObjInCanvas for backward compatibility only, use kMustCleanup . Definition at line 75 of file TObject.h. ◆ EStatusBits. enum TObject::EStatusBits. EnumeratorkCanDelete if object in a list can be deleted . kMustCleanup if object destructor must call RecursiveRemove() . kIsReferenced if object is referenced by a TRef or TRefArray . kHasUUID if object has a TUUID (its fUniqueID=UUIDNumber) . kCannotPick if object in a pad cannot be picked . kNoContextMenu if object does not want context menu . kInvalidObject if object ctor succeeded but object should not be used . Definition at line 61 of file TObject.h. Constructor & Destructor Documentation. ◆ TObject() [1/2]. TObject::TObject ; (; ). inline . TObject constructor. ; It sets the two data words of TObject to their initial values. The unique ID is set to 0 and the status word is set depending if the object is created on the stack or allocated on the heap. Depending on the ROOT environment variable ""Root.ObjStat"" (see TEnv) the object is added to the global TObjectTable for bookkeeping. ; Definition at line 254 of file TObject.h. ◆ TObject() [2/2]. TObject::TObject ; (; const TObject & ; object). inline . TObject copy ctor. ; Definition at line 272 of file TObject.h. ◆ ~TObject(). TObject::~TObject ; (; ). virtual . TObject destructor. ; Removes object from all canvases and object browsers if observer bit is on and remove from the global object table. ; Definition at line 164 of file TObject.cxx. Member Function Documentation. ◆ AbstractMethod(). void TObject::AbstractMethod ; (; const char * ; method); const. Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ; Definition at line 1035 of file TObject.cxx. ◆ AddToTObjectTable(). void TObject::AddToTObjectTable ; (; TObject * ; op). staticprivate . Private helper function which wil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:18981,allocate,allocated,18981,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['allocate'],['allocated']
Energy Efficiency,"ion = 0, Int_t bufsize = 0) const; voidzeroEvalCount(). protected:. voidapplyCovarianceMatrix(TMatrixDSym& V); voidbackProp(); voidclearPdfParamAsymErr(Int_t index); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Int_tgetNPar() const; Double_tgetPdfParamErr(Int_t index); Double_tgetPdfParamVal(Int_t index); ofstream*logfile() const; voidTObject::MakeZombie(); Double_t&maxFCN(); voidprofileStart(); voidprofileStop(); voidsaveStatus(const char* label, Int_t status); voidsetPdfParamErr(Int_t index, Double_t value); voidsetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); virtual Bool_tsetPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Bool_tsynchronize(Bool_t verbose). private:. RooMinuit(const RooMinuit&). Data Members; public:. enum Strategy { Speed; Balance; Robustness; };; enum PrintLevel { None; Reduced; Normal; ExtraForProblem; Maximum; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. RooArgList*_constParamList; TStopwatch_cumulTimer; Bool_t_doEvalErrorWall; Int_t_evalCounter; TMatrixDSym*_extV; RooArgList*_floatParamList; RooAbsReal*_func; Bool_t_handleLocalErrors; RooArgList*_initConstParamList; RooArgList*_initFloatParamList; ofstream*_logfile; Int_t_maxEvalMult; Double_t_maxFCN; Int_t_nPar; Int_t_numBadNLL; Int_t_optConst; Int_t_printEvalErrors; Int_t_printLevel; Bool_t_profile; Int_t_status; vector<std::pair<std::string,int> >_statusHistory; static TVirtualFitter*_theFitter; TStopwatch_timer; Bool_t_verbose; Int_t_warnLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinui",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:7234,Reduce,Reduced,7234,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,1,['Reduce'],['Reduced']
Energy Efficiency,"ion BoostX.h:48; ROOT::Math::BoostX::kLZX@ kLZXDefinition BoostX.h:48; ROOT::Math::BoostX::kLYY@ kLYYDefinition BoostX.h:47; ROOT::Math::BoostX::kLZY@ kLZYDefinition BoostX.h:48; ROOT::Math::BoostX::kLYZ@ kLYZDefinition BoostX.h:47; ROOT::Math::BoostX::BoostXBoostX()Default constructor (identity transformation)Definition BoostX.cxx:31; ROOT::Math::BoostX::BetaVectorXYZVector BetaVector() constDefinition BoostX.cxx:51; ROOT::Math::BoostX::fGammaScalar fGammaDefinition BoostX.h:195; ROOT::Math::BoostX::GetLorentzRotationvoid GetLorentzRotation(Scalar r[]) constGet elements of internal 4x4 symmetric representation, into a data array suitable for direct use as t...Definition BoostX.cxx:56; ROOT::Math::BoostX::Rectifyvoid Rectify()Re-adjust components to eliminate small deviations from a perfect orthosyplectic matrix.Definition BoostX.cxx:64; ROOT::Math::DisplacementVector3DClass describing a generic displacement vector in 3 dimensions.Definition DisplacementVector3D.h:58; ROOT::Math::LorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system ...Definition LorentzVector.h:59; ROOT::Math::PxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors...Definition PxPyPzE4D.h:44; double; ROOT::Math::betadouble beta(double x, double y)Calculates the beta function.Definition SpecFuncMathCore.cxx:111; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::GenVector::Throwvoid Throw(const char *)function throwing exception, by creating internally a GenVector_exception only when neededDefinition GenVector_exception.h:80; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699. mathgenvectorsrcBoostX.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BoostX_8cxx_source.html:6558,energy,energy,6558,doc/master/BoostX_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BoostX_8cxx_source.html,1,['energy'],['energy']
Energy Efficiency,"ion ID. The parameter monserver specifies the server to whom to send the; monitoring UDP packets. If not specified, the hostname (the port is; a default one) is specified in the environment variable APMON_CONFIG. To use TMonaLisaWriter, libMonaLisa.so has to be loaded. According to the fact, that the deepness of the MonaLisa naming scheme; is only 3 (<farm><node><value>), a special naming scheme is used for; process monitoring. There is a high-level method to send progress; information of Tree analysis (# of events, datasize).; To distinguish individual nodes running the processing, part of the; information is kept in the <value> parameter of ML.; <value> is named as:; <site-name>:<host-name>:<pid>:<valuetag>; <site-name> is taken from an environment variable in the following order:; - PROOF_SITE; - GRID_SITE; - ALIEN_SITE; - default 'none'; <host-name> is taken from gSystem->Hostname(); <pid> is the process ID of the ROOT process. Example of use for Process Monitoring:; new TMonaLisaWriter(""BATCH_ANALYSIS"",""AnalysisLoop-00001"",""lxplus050.cern.ch"");; Once when you create an analysis task, execute; gMonitoringWriter->SendInfoUser(""myname"");; gMonitoringWriter->SendInfoDescription(""My first Higgs analysis"");; gMonitoringWriter->SendInfoTime();; gMonitoringWriter->SendInfoStatus(""Submitted"");. On each node executing a subtask, you can set the status of this subtask:; gMonitoringWriter->SendProcessingStatus(""Started"");; During the processing of your analysis you can send progress updates:; gMonitoringWriter->SendProcessProgress(100,1000000); <= 100 events, 1MB processed. gMonitoringWriter-SendProcessingStatus(""Finished"");; delete gMonitoringWriter; gMonitoringWriter=0;. Example of use for any Generic Monitoring information:; TList *valuelist = new TList();; valuelist->SetOwner(kTRUE);; // append a text object; TMonaLisaText *valtext = new TMonaLisaText(""decaychannel"",""K->eeg"");; valuelist->Add(valtext);; // append a double value; TMonaLisaValue* valdouble = new TMonaLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMonaLisaWriter.html:11741,Monitor,Monitoring,11741,root/html532/TMonaLisaWriter.html,https://root.cern,https://root.cern/root/html532/TMonaLisaWriter.html,1,['Monitor'],['Monitoring']
Energy Efficiency,"ion LorentzVector.h:645; ROOT::Math::LorentzVector::ThetaScalar Theta() constpolar AngleDefinition LorentzVector.h:359; ROOT::Math::LorentzVector::BoostToCMBetaVector BoostToCM(const Other4Vector &v) constThe beta vector for the boost that would bring this vector into its center of mass frame (zero moment...Definition LorentzVector.h:577; ROOT::Math::LorentzVector::operator=LorentzVector & operator=(const LorentzVector< OtherCoords > &v)Assignment operator from a lorentz vector of arbitrary type.Definition LorentzVector.h:130; ROOT::Math::LorentzVector::fCoordinatesCoordSystem fCoordinatesDefinition LorentzVector.h:685; ROOT::Math::LorentzVector::SetCoordinatesLorentzVector< CoordSystem > & SetCoordinates(Scalar a, Scalar b, Scalar c, Scalar d)Set internal data based on 4 Scalar numbers.Definition LorentzVector.h:185; ROOT::Math::LorentzVector::SetPhiLorentzVector< CoordSystem > & SetPhi(Scalar a)Definition LorentzVector.h:677; ROOT::Math::PxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors...Definition PxPyPzE4D.h:44; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; MathNamespace for new Math classes and functions.; ROOT::Math::GenVector::Throwvoid Throw(const char *)function throwing exception, by creating internally a GenVector_exception only when neededDefinition GenVector_exception.h:80; ROOT::Math::detail::get_manipchar_t get_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m)Definition GenVectorIO.h:54; ROOT::Math::detail::require_delimstd::basic_istream< char_t, traits_t > & require_delim(std::basic_istream< char_t, traits_t > &is, manip_t m)Definition GenVectorIO.h:113; ROOT::Math::detail::set_manipvoid set_manip(std::basic_ios< char_t, traits_t > &ios, manip_t m, char_t ch)Definition GenVectorIO.h:74; ROOT::Math::detail::open@ openDefinition GenVectorIO.h:35; ROOT::Math::detail::sep@ sepDefinition GenVectorIO.h:35; ROOT::Math::detail::close@ closeDefinition GenVec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html:39087,energy,energy,39087,doc/master/GenVector_2LorentzVector_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html,1,['energy'],['energy']
Energy Efficiency,"ion TPaveText.cxx:242; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; TRandom::Uniformvirtual Double_t Uniform(Double_t x1=1)Returns a uniform deviate on the interval (0, x1).Definition TRandom.cxx:682; TStringBasic string class.Definition TString.h:139; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; double; int; ptTPaveText * ptDefinition entrylist_figure1.C:7; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; Users Guide ; https://oproject.org/pages/ROOT R Users Guide. Definition at line 136 of file TRInterface.h. Classes; class  Binding;  . Public Member Functions;  ~TRInterface ();  ; template<typename T > ; void Assign (const T &var, const TString &name);  Template method to assign C++ variables into R environment. ;  ; void Assign (const TRDataFrame &df, const TString &name);  Method to assign TRDataFrame in R's environment. ;  ; void Assign (const TRFunctionExport &fun, const TString &name);  Method to assign TRFunctionExport in R's environment. ;  ; TRObject Eval (const TString &code);  Method to eval R code and you get the result in a TRObject. ;  ; Int_t Eval (const TString &code, TRObject &ans);  Method to eval R code and you get the result in a reference to TRObject. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given paramet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:6576,power,power,6576,doc/master/classROOT_1_1R_1_1TRInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html,1,['power'],['power']
Energy Efficiency,"ion TQpProbDens.cxx:172; TQpResidualThe Residuals class calculates and stores the quantities that appear on the right-hand side of the li...Definition TQpResidual.h:62; TQpVarClass containing the variables for the general QP formulation.Definition TQpVar.h:60; TQpVar::fXTVectorD fXDefinition TQpVar.h:91; TROOT::GetTutorialDirstatic const TString & GetTutorialDir()Get the tutorials directory in the installation. Static utility function.Definition TROOT.cxx:3119; TStringBasic string class.Definition TString.h:139; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::GetBranchvirtual TBranch * GetBranch(const char *name)Return pointer to the branch with the given name in this tree or its friends.Definition TTree.cxx:5294; TTree::SetBranchAddressvirtual Int_t SetBranchAddress(const char *bname, void *add, TBranch **ptr=nullptr)Change branch address, dealing with clone trees properly.Definition TTree.cxx:8385; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TVectorT< Double_t >; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; TMath::Cconstexpr Double_t C()Velocity of light in .Definition TMath.h:114; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; AuthorEddy Offermann ; Definition in file portfolio.C. tutorialsquadpportfolio.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/portfolio_8C.html:20241,power,power,20241,doc/master/portfolio_8C.html,https://root.cern,https://root.cern/doc/master/portfolio_8C.html,1,['power'],['power']
Energy Efficiency,"ion coefficients is kept at the nominal convolutions observable range (instead of interpreting coefficients; in the widened range including the buffer). void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. void calcParams(); (Re)calculate effective parameters of this p.d.f. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); calcParams() ;. RooFFTConvPdf(); coverity[UNINIT_CTOR]. TObject* clone(const char* newname) const; { return new RooFFTConvPdf(*this,newname); }. void setShift(Double_t val1, Double_t val2); { _shift1 = val1 ; _shift2 = val2 ; }. void setCacheObservables(const RooArgSet& obs); { _cacheObs.removeAll() ; _cacheObs.add(obs) ; }. const RooArgSet& cacheObservables() const; { return _cacheObs ; }. Double_t bufferFraction() const; Return value of buffer fraction applied in FFT calculation array beyond either; end of the observable domain to reduce cyclical effects. BufStrat bufferStrategy() const; Return the strategy currently used to fill the buffer:; 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range; 'Flat' means that the buffer is filled with the p.d.f. value at the boundary of the observable range; 'Mirror' means that the buffer is filled with a mirror image of the p.d.f. around the convolution observable boundary. Int_t getMaxVal(const RooArgSet& vars) const; Propagate maximum value estimate of pdf1 as convolution can only result in lower max values. { return _pdf1.arg().getMaxVal(vars) ; }. Double_t maxVal(Int_t code) const; { return _pdf1.arg().maxVal(code) ; }. Double_t evaluate() const; { RooArgSet dummy(_x.arg()) ; return getVal(&dummy) ; }. PdfCacheElem* createCache(const RooArgSet* nset) const. » Last changed: Mon Jul 4 15:22:48 2011 » Last generated: 2011-07-04 15:22; This page has been automa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooFFTConvPdf.html:52926,reduce,reduce,52926,root/html530/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html530/RooFFTConvPdf.html,1,['reduce'],['reduce']
Energy Efficiency,"ion coefficients is kept at the nominal convolutions observable range (instead of interpreting coefficients; in the widened range including the buffer). void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. void calcParams(); (Re)calculate effective parameters of this p.d.f. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); calcParams() ;. RooFFTConvPdf(); coverity[UNINIT_CTOR]. TObject* clone(const char* newname) const; { return new RooFFTConvPdf(*this,newname); }. void setShift(Double_t val1, Double_t val2); { _shift1 = val1 ; _shift2 = val2 ; }. void setCacheObservables(const RooArgSet& obs); { _cacheObs.removeAll() ; _cacheObs.add(obs) ; }. const RooArgSet& cacheObservables() const; { return _cacheObs ; }. Double_t bufferFraction() const; Return value of buffer fraction applied in FFT calculation array beyond either; end of the observable domain to reduce cyclical effects. BufStrat bufferStrategy() const; Return the strategy currently used to fill the buffer:; 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range; 'Flat' means that the buffer is filled with the p.d.f. value at the boundary of the observable range; 'Mirror' means that the buffer is filled with a mirror image of the p.d.f. around the convolution observable boundary. Int_t getMaxVal(const RooArgSet& vars) const; Propagate maximum value estimate of pdf1 as convolution can only result in lower max values. { return _pdf1.arg().getMaxVal(vars) ; }. Double_t maxVal(Int_t code) const; { return _pdf1.arg().maxVal(code) ; }. Double_t evaluate() const; { RooArgSet dummy(_x.arg()) ; return getVal(&dummy) ; }. PdfCacheElem* createCache(const RooArgSet* nset) const. » Last changed: Sat Oct 9 20:48:29 2010 » Last generated: 2010-10-09 20:48; This page has been automa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooFFTConvPdf.html:52366,reduce,reduce,52366,root/html528/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html528/RooFFTConvPdf.html,1,['reduce'],['reduce']
Energy Efficiency,"ion coefficients is kept at the nominal convolutions observable range (instead of interpreting coefficients; in the widened range including the buffer). void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. void calcParams(); (Re)calculate effective parameters of this p.d.f. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); calcParams() ;. RooFFTConvPdf(); coverity[UNINIT_CTOR]. TObject* clone(const char* newname) const; { return new RooFFTConvPdf(*this,newname); }. void setShift(Double_t val1, Double_t val2); { _shift1 = val1 ; _shift2 = val2 ; }. void setCacheObservables(const RooArgSet& obs); { _cacheObs.removeAll() ; _cacheObs.add(obs) ; }. const RooArgSet& cacheObservables() const; { return _cacheObs ; }. Double_t bufferFraction() const; Return value of buffer fraction applied in FFT calculation array beyond either; end of the observable domain to reduce cyclical effects. BufStrat bufferStrategy() const; Return the strategy currently used to fill the buffer:; 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range; 'Flat' means that the buffer is filled with the p.d.f. value at the boundary of the observable range; 'Mirror' means that the buffer is filled with a mirror image of the p.d.f. around the convolution observable boundary. Int_t getMaxVal(const RooArgSet& vars) const; Propagate maximum value estimate of pdf1 as convolution can only result in lower max values. { return _pdf1.arg().getMaxVal(vars) ; }. Double_t maxVal(Int_t code) const; { return _pdf1.arg().maxVal(code) ; }. Double_t evaluate() const; { RooArgSet dummy(_x.arg()) ; return getVal(&dummy) ; }. PdfCacheElem* createCache(const RooArgSet* nset) const. » Last changed: Thu Nov 3 20:08:06 2011 » Last generated: 2011-11-03 20:08; This page has been automa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFFTConvPdf.html:53333,reduce,reduce,53333,root/html532/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html532/RooFFTConvPdf.html,2,['reduce'],['reduce']
Energy Efficiency,"ion coefficients is kept at the nominal convolutions observable range (instead of interpreting coefficients; in the widened range including the buffer). void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. void calcParams(); (Re)calculate effective parameters of this p.d.f. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); calcParams() ;. RooFFTConvPdf(); coverity[UNINIT_CTOR]. TObject* clone(const char* newname) const; { return new RooFFTConvPdf(*this,newname); }. void setShift(Double_t val1, Double_t val2); { _shift1 = val1 ; _shift2 = val2 ; }. void setCacheObservables(const RooArgSet& obs); { _cacheObs.removeAll() ; _cacheObs.add(obs) ; }. const RooArgSet& cacheObservables() const; { return _cacheObs ; }. Double_t bufferFraction() const; Return value of buffer fraction applied in FFT calculation array beyond either; end of the observable domain to reduce cyclical effects. BufStrat bufferStrategy() const; Return the strategy currently used to fill the buffer:; 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range; 'Flat' means that the buffer is filled with the p.d.f. value at the boundary of the observable range; 'Mirror' means that the buffer is filled with a mirror image of the p.d.f. around the convolution observable boundary. Int_t getMaxVal(const RooArgSet& vars) const; Propagate maximum value estimate of pdf1 as convolution can only result in lower max values. { return _pdf1.arg().getMaxVal(vars) ; }. Double_t maxVal(Int_t code) const; { return _pdf1.arg().maxVal(code) ; }. Double_t evaluate() const; { RooArgSet dummy(_x.arg()) ; return getVal(&dummy) ; }. PdfCacheElem* createCache(const RooArgSet* nset) const. » Last changed: Tue Jun 2 15:30:46 2015 » Last generated: 2015-06-02 15:30; This page has been automa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooFFTConvPdf.html:57430,reduce,reduce,57430,root/html604/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html604/RooFFTConvPdf.html,2,['reduce'],['reduce']
Energy Efficiency,"ion coefficients is kept at the nominal convolutions observable range (instead of interpreting coefficients; in the widened range including the buffer). void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. void calcParams(); (Re)calculate effective parameters of this p.d.f. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); calcParams() ;. RooFFTConvPdf(); coverity[UNINIT_CTOR]. TObject* clone(const char* newname) const; { return new RooFFTConvPdf(*this,newname); }. void setShift(Double_t val1, Double_t val2); { _shift1 = val1 ; _shift2 = val2 ; }. void setCacheObservables(const RooArgSet& obs); { _cacheObs.removeAll() ; _cacheObs.add(obs) ; }. const RooArgSet& cacheObservables() const; { return _cacheObs ; }. Double_t bufferFraction() const; Return value of buffer fraction applied in FFT calculation array beyond either; end of the observable domain to reduce cyclical effects. BufStrat bufferStrategy() const; Return the strategy currently used to fill the buffer:; 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range; 'Flat' means that the buffer is filled with the p.d.f. value at the boundary of the observable range; 'Mirror' means that the buffer is filled with a mirror image of the p.d.f. around the convolution observable boundary. Int_t getMaxVal(const RooArgSet& vars) const; Propagate maximum value estimate of pdf1 as convolution can only result in lower max values. { return _pdf1.arg().getMaxVal(vars) ; }. Double_t maxVal(Int_t code) const; { return _pdf1.arg().maxVal(code) ; }. Double_t evaluate() const; { RooArgSet dummy(_x.arg()) ; return getVal(&dummy) ; }. PdfCacheElem* createCache(const RooArgSet* nset) const. » Last changed: Tue Jun 30 14:32:52 2015 » Last generated: 2015-06-30 14:32; This page has been autom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFFTConvPdf.html:57430,reduce,reduce,57430,root/html602/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html602/RooFFTConvPdf.html,2,['reduce'],['reduce']
Energy Efficiency,"ion coefficients is kept at the nominal convolutions observable range (instead of interpreting coefficients; in the widened range including the buffer). void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooNumConvPdf to more intuitively reflect the contents of the; product operator construction. void calcParams(); (Re)calculate effective parameters of this p.d.f. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); calcParams() ;. RooFFTConvPdf(); coverity[UNINIT_CTOR]. TObject* clone(const char* newname) const; { return new RooFFTConvPdf(*this,newname); }. void setShift(Double_t val1, Double_t val2); { _shift1 = val1 ; _shift2 = val2 ; }. void setCacheObservables(const RooArgSet& obs); { _cacheObs.removeAll() ; _cacheObs.add(obs) ; }. const RooArgSet& cacheObservables() const; { return _cacheObs ; }. Double_t bufferFraction() const; Return value of buffer fraction applied in FFT calculation array beyond either; end of the observable domain to reduce cyclical effects. BufStrat bufferStrategy() const; Return the strategy currently used to fill the buffer:; 'Extend' means is that the input p.d.f convolution observable range is widened to include the buffer range; 'Flat' means that the buffer is filled with the p.d.f. value at the boundary of the observable range; 'Mirror' means that the buffer is filled with a mirror image of the p.d.f. around the convolution observable boundary. Int_t getMaxVal(const RooArgSet& vars) const; Propagate maximum value estimate of pdf1 as convolution can only result in lower max values. { return _pdf1.arg().getMaxVal(vars) ; }. Double_t maxVal(Int_t code) const; { return _pdf1.arg().maxVal(code) ; }. Double_t evaluate() const; { RooArgSet dummy(_x.arg()) ; return getVal(&dummy) ; }. PdfCacheElem* createCache(const RooArgSet* nset) const. » Last changed: Tue Mar 10 17:16:43 2015 » Last generated: 2015-03-10 17:16; This page has been autom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFFTConvPdf.html:55684,reduce,reduce,55684,root/html534/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html534/RooFFTConvPdf.html,2,['reduce'],['reduce']
Energy Efficiency,"ion documentation; ~VariableTransformBase(). void SelectInput(const TString& inputVariables, Bool_t putIntoVariables = kFALSE); select the variables/targets/spectators which serve as input to the transformation. Bool_t GetInput(const TMVA::Event* event, vector<Float_t>& input, vector<Char_t>& mask, Bool_t backTransform = kFALSE) const; select the values from the event. void SetOutput(TMVA::Event* event, vector<Float_t>& output, vector<Char_t>& mask, const TMVA::Event* oldEvent = 0, Bool_t backTransform = kFALSE) const; select the values from the event. void CountVariableTypes(UInt_t& nvars, UInt_t& ntgts, UInt_t& nspcts) const; count variables, targets and spectators. void CalcNorm(const vector<const TMVA::Event*,allocator<const TMVA::Event*> >& ); TODO --> adapt to variable,target,spectator selection; method to calculate minimum, maximum, mean, and RMS for all; variables used in the MVA. std::vector<TString>* GetTransformationStrings(Int_t cls) const; TODO --> adapt to variable,target,spectator selection; default transformation output; --> only indicate that transformation occurred. void UpdateNorm(Int_t ivar, Double_t x); TODO --> adapt to variable,target,spectator selection; update min and max of a given variable (target) and a given transformation method. void AttachXMLTo(void* parent); create XML description the transformation (write out info of selected variables). void ReadFromXML(void* trfnode); Read the input variables from the XML node. void MakeFunction(ostream& fout, const TString& fncName, Int_t part, UInt_t trCounter, Int_t cls); getinput and setoutput equivalent. void Initialize(). Bool_t PrepareTransformation(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ). const Event* Transform(const TMVA::Event *const , Int_t cls) const. const Event* InverseTransform(const TMVA::Event *const , Int_t cls) const. void SetEnabled(Bool_t e); accessors. { fEnabled = e; }. void SetNormalise(Bool_t n); { fNormalise = n; }. Bool_t IsEnabled() const; { return fEnable",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__VariableTransformBase.html:9920,adapt,adapt,9920,root/html534/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html534/TMVA__VariableTransformBase.html,2,['adapt'],['adapt']
Energy Efficiency,"ion histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfAverageEvtPerBinaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarBaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarSaverage events per bin; used to calculate fNbins; TStringfBorderMethodStringthe method to take care about ""border"" effects (string); TMVA::PDF*fDefaultPDFLikpdf that contains default definitions; Int_tfDropVariablefor ranking test; Double_tfEpsilonminimum number of likelihood (to avoid zero); vector<TH1*>*fHistBgdbackground PDFs (histograms); vector<TH1*>*fHistBgd_smoothbackground PDFs (smoothed histograms); vector<TH1*>*fHistSigsignal PDFs (histograms); vector<TH1*>*fHistSig_smoothsignal PDFs (smoothed histograms); TString*fInterpolateStringwhich interpolation method used for reference histograms (individual for each variable); Float_tfKDEfineFactorfine tuning factor for Adaptive KDE; TStringfKDEiterStringNumber of iterations (string); TStringfKDEtypeStringKernel type to use for KDE (string); Int_tfNsmoothnumber of smooth passes; Int_t*fNsmoothVarBnumber of smooth passes; Int_t*fNsmoothVarSnumber of smooth passes; vector<PDF*>*fPDFBgdlist of PDFs (background); vector<PDF*>*fPDFSiglist of PDFs (signal) ; Bool_tfTransformLikelihoodOutputlikelihood output is sigmoid-transformed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodLikelihood(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MethodLikelihood.html:19251,Adapt,Adaptive,19251,root/html532/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html532/TMVA__MethodLikelihood.html,2,['Adapt'],['Adaptive']
Energy Efficiency,"ion is primary optimized for process/job monitoring,; although all other generic MonaLisa ApMon functionality can be exploited; through the ApMon class directly (gMonitoringWriter->GetApMon()). Monitoring information in MonaLisa is structured in the following tree; structure:; <farmname>; |; ---> <nodename1>; |; ---> <key1> - <value1>; ---> <key2> - <value2>; ---> <nodename2>; |; ---> <key3> - <value3>; ---> <key4> - <value4>. The parameter monid is equivalent to the MonaLisa node name, for the; case of process monitoring it can be just an identifier to classify; the type of jobs e.g. ""PROOF_PROCESSING"".; If monid is not specified, TMonaLisaWriter tries to set it in this order; from environement variables:; - PROOF_JOB_ID; - GRID_JOB_ID; - LCG_JOB_ID; - ALIEN_MASTERJOB_ID; - ALIEN_PROC_ID. The parameter montag is equivalent to the MonaLisa farm name, for the; case of process monitoring it can be a process identifier e.g. a PROOF; session ID. The parameter monserver specifies the server to whom to send the; monitoring UDP packets. If not specified, the hostname (the port is; a default one) is specified in the environment variable APMON_CONFIG. To use TMonaLisaWriter, libMonaLisa.so has to be loaded. According to the fact, that the deepness of the MonaLisa naming scheme; is only 3 (<farm><node><value>), a special naming scheme is used for; process monitoring. There is a high-level method to send progress; information of Tree analysis (# of events, datasize).; To distinguish individual nodes running the processing, part of the; information is kept in the <value> parameter of ML.; <value> is named as:; <site-name>:<host-name>:<pid>:<valuetag>; <site-name> is taken from an environment variable in the following order:; - PROOF_SITE; - GRID_SITE; - ALIEN_SITE; - default 'none'; <host-name> is taken from gSystem->Hostname(); <pid> is the process ID of the ROOT process. Example of use for Process Monitoring:; new TMonaLisaWriter(""BATCH_ANALYSIS"",""AnalysisLoop-00001"",""lxplus0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMonaLisaWriter.html:10842,monitor,monitoring,10842,root/html530/TMonaLisaWriter.html,https://root.cern,https://root.cern/root/html530/TMonaLisaWriter.html,3,['monitor'],['monitoring']
Energy Efficiency,"ion is required, compute; corresponding square-root matrices; the reference histograms require the correct boundaries. Since in Likelihood classification; the transformations are applied using both classes, also the corresponding boundaries; need to take this into account. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); returns the likelihood estimator for signal; fill a new Likelihood branch into the testTree. Double_t TransformLikelihoodOutput(Double_t ps, Double_t pb) const; returns transformed or non-transformed output. void WriteOptionsToStream(ostream& o, const TString& prefix) const; write options to stream. void AddWeightsXMLTo(void* parent) const; write weights to XML. const TMVA::Ranking* CreateRanking(); computes ranking of input variables. void WriteWeightsToStream(TFile& rf) const; write reference PDFs to ROOT file. void ReadWeightsFromXML(void* wghtnode); read weights from XML. void ReadWeightsFromStream(istream& istr); read weight info from file; nothing to do for this method. void ReadWeightsFromStream(TFile& istr); read reference PDF from ROOT file. void WriteMonitoringHistosToFile( void ); write histograms and PDFs to file for monitoring purposes. void MakeClassSpecificHeader(ostream& , const TString& = """") const; write specific header of the classifier (mostly include files). void MakeClassSpecific(ostream& , const TString& ) const; write specific classifier response. void GetHelpMessage() const; get help message text. typical length of text line:; ""|--------------------------------------------------------------|"". » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss, Peter Speckmayer, Eckhard von Toerne, Jan Therhaag » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id: MethodLikelihood.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MethodLikelihood.html:21923,monitor,monitoring,21923,root/html532/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html532/TMVA__MethodLikelihood.html,2,['monitor'],['monitoring']
Energy Efficiency,"ion is specified, the equivalent expression must be computed when calling GetEntryWithIndex(). To build an index with only majorname, specify minorname=""0"" (default).; Note that once the index is built, it can be saved with the TTree object with:; tree.Write(); //if the file has been open in ""update"" mode; The most convenient place to create the index is at the end of the filling process just before saving the tree header. If a previous index was computed, it is redefined by this new call.; Note that this function can also be applied to a TChain. The return value is the number of entries in the Index (< 0 indicates failure).; 12.8 Branches; The organization of branches allows the designer to optimize the data for the anticipated use. The class for a branch is called TBranch. If two variables are independent, and the designer knows the variables will not be used together, they should be placed on separate branches. If, however, the variables are related, such as the coordinates of a point, it is most efficient to create one branch with both coordinates on it. A variable on a TBranch is called a leaf (yes - TLeaf). Another point to keep in mind when designing trees is that branches of the same TTree can be written to separate files. To add a TBranch to a TTree we call the method TTree::Branch(). Note that we DO NOT use the TBranch constructor.; The TTree::Branch method has several signatures. The branch type differs by what is stored in it. A branch can hold an entire object, a list of simple variables, contents of a folder, contents of a TList, or an array of objects. Let’s see some examples. To follow along you will need the shared library libEvent.so. First, check if it is in $ROOTSYS/test. If it is, copy it to your own area. If it is not there, you have to build it by typing make in $ROOTSYS/test.; 12.9 Adding a Branch to Hold a List of Variables; As in the very first example (cernstaff.root.root) the data we want to save is a list of simple variables, such as inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:536746,efficient,efficient,536746,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['efficient'],['efficient']
Energy Efficiency,"ion k is all other dims collapsed !!!; 399 ; 400 size_t offset = (GetLayout() == MemoryLayout::RowMajor) ?; 401 i * fStrides[0] + j * fStrides[1] + k :; 402 i * fStrides[2] + k * fStrides[1] + j;; 403 ; 404 AFloat * elementPointer = fElementBuffer.data() + offset;; 405 ; 406 return TCudaDeviceReference<AFloat>(elementPointer);; 407 }; 408 ; 409 TCudaDeviceReference<AFloat> operator()(size_t i, size_t j, size_t k, size_t l) const; 410 {; 411 // for row wise; 412 //assert(GetLayout() == MemoryLayout::RowMajor);; 413 assert( fNDim == 4); // || ( k==0 && fNDim == 2 ) );; 414 ; 415 size_t offset = (GetLayout() == MemoryLayout::RowMajor) ?; 416 i * fStrides[0] + j * fStrides[1] + k * fStrides[2] + l:; 417 l * fStrides[3] + k * fStrides[2] + j * fStrides[1] + i;; 418 ; 419 AFloat * elementPointer = fElementBuffer.data() + offset;; 420 ; 421 return TCudaDeviceReference<AFloat>(elementPointer);; 422 }; 423 ; 424private:; 425 ; 426 /** Initializes all shared devices resource and makes sure that a sufficient; 427 * number of curand states are allocated on the device and initialized as; 428 * well as that the one-vector for the summation over columns has the right; 429 * size. */; 430 void InitializeCuda();; 431 void InitializeCurandStates();; 432 ; 433};; 434 ; 435 ; 436 ; 437 ; 438} // namespace DNN; 439} // namespace TMVA; 440 ; 441#endif; CudaBuffers.h; CudaMatrix.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/CudaTensor_8h_source.html:16641,allocate,allocated,16641,doc/master/CudaTensor_8h_source.html,https://root.cern,https://root.cern/doc/master/CudaTensor_8h_source.html,1,['allocate'],['allocated']
Energy Efficiency,"ion operator PDF. ; This class can convolve any PDF with any other PDF This class should not be used blindly as numeric convolution is computing intensive and prone to stability fitting problems. If an analytic convolution can be calculated, you should use that or implement it if not available. RooNumConvolution implements reasonable defaults that should convolve most functions reasonably well, but results strongly depend on the shape of your input PDFS so always check your result.; The default integration engine for the numeric convolution is the adaptive Gauss-Kronrod method, which empirically seems the most robust for this task. You can override the convolution integration settings via the RooNumIntConfig object reference returned by the convIntConfig() member function By default the numeric convolution is integrated from -infinity to +infinity through a x -> 1/x coordinate transformation of the tails. For convolution with a very small bandwidth it may be advantageous (for both CPU consumption and stability) if the integration domain is limited to a finite range. The function setConvolutionWindow(mean,width,scale) allows to set a sliding window around the x value to be calculated taking a RooAbsReal expression for an offset and a width to be taken around the x value. These input expression can be RooFormulaVars or other function objects although the 3d 'scale' argument 'scale' multiplies the width RooAbsReal expression given in the 2nd argument, allowing for an appropriate window definition for most cases without need for a RooFormulaVar object: e.g. a Gaussian resolution PDF do setConvolutionWindow(gaussMean,gaussSigma,5) Note that for a 'wide' Gaussian the -inf to +inf integration may converge more quickly than that over a finite range! The default numeric precision is 1e-7, i.e. the global default for numeric integration but you should experiment with this value to see if it is sufficient for example by studying the number of function calls that MINUIT needs t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvolution.html:1382,consumption,consumption,1382,doc/master/classRooNumConvolution.html,https://root.cern,https://root.cern/doc/master/classRooNumConvolution.html,1,['consumption'],['consumption']
Energy Efficiency,"ion parser (see TRegexp). TKey(const void* obj, const TClass* cl, const char* name, Int_t bufsize, TDirectory* motherDir = 0); Create a TKey object for any object obj of class cl d and fill; output buffer. WARNING: in name avoid special characters like '^','$','.' that are used; by the regular expression parser (see TRegexp). void Build(TDirectory* motherDir, const char* classname, Long64_t filepos); method used in all TKey constructor to initialize basic data fields; filepos is used to calculate correct version number of key; if filepos==-1, end of file position is used. void Browse(TBrowser* b); Read object from disk and call its Browse() method.; If object with same name already exist in memory delete it (like; TDirectoryFile::Get() is doing), except when the key references a; folder in which case we don't want to re-read the folder object; since it might contain new objects not yet saved. void Create(Int_t nbytes, TFile* f = 0); Create a TKey object of specified size; if externFile!=0, key will be allocated in specified file,; otherwise file of mother directory will be used. ~TKey(); TKey default destructor. void Delete(Option_t* option = """"); Delete an object from the file.; Note: the key is not deleted. You still have to call ""delete key"".; This is different from the behaviour of TObject::Delete()!. void DeleteBuffer(); Delete key buffer(s). Short_t GetCycle() const; Return cycle number associated to this key. TFile * GetFile() const; Returns file to which key belong. Short_t GetKeep() const; Returns the ""KEEP"" status. void FillBuffer(char*& buffer); Encode key header into output buffer. ULong_t Hash() const; This Hash function should redefine the default from TNamed. void IncrementPidOffset(UShort_t offset); Increment fPidOffset by 'offset'.; This offset is used when a key (or basket) is transfered from one file to; the other. In this case the TRef and TObject might have stored a pid; index (to retrieve TProcessIDs) which refered to their order on the; origin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TKey.html:11082,allocate,allocated,11082,root/html528/TKey.html,https://root.cern,https://root.cern/root/html528/TKey.html,6,['allocate'],['allocated']
Energy Efficiency,"ion regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:72827,monitor,monitoringDefinition,72827,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['monitor'],['monitoringDefinition']
Energy Efficiency,"ion right. ; Usually, when comparing a fit to data, one should first plot the data, and then the PDF. In this case, the PDF is automatically normalised to match the number of data events in the plot. However, when plotting only a sub-range, when e.g. a signal region has to be blinded, one has to exclude the blinded region from the computation of the normalisation.; In this tutorial, we show how to explicitly choose the normalisation when plotting using NormRange(). ; import ROOT; ; # Make a fit model; x = ROOT.RooRealVar(""x"", ""The observable"", 1, 30); tau = ROOT.RooRealVar(""tau"", ""The exponent"", -0.1337, -10.0, -0.1); expo = ROOT.RooExponential(""expo"", ""A falling exponential function"", x, tau); ; # Define the sidebands (e.g. background regions); x.setRange(""full"", 1, 30); x.setRange(""left"", 1, 10); x.setRange(""right"", 20, 30); ; # Generate toy data, and cut out the blinded region.; data = expo.generate(x, 1000); blindedData = data.reduce(CutRange=""left,right""); ; # Kick tau a bit, and run an unbinned fit where the blinded data are missing.; # ----------------------------------------------------------------------------------------------------------; # The fit should be done only in the unblinded regions, otherwise it would try; # to make the model adapt to the empty bins in the blinded region.; tau.setVal(-2.0); expo.fitTo(blindedData, Range=""left,right"", PrintLevel=-1); ; # Clear the ""fitrange"" attribute of the PDF. Otherwise, the fitrange would be; # automatically taken as the NormRange() for plotting. We want to avoid this,; # because the point of this tutorial is to show what can go wrong when the; # NormRange() is not specified.; expo.removeStringAttribute(""fitrange""); ; ; # Here we will plot the results; canvas = ROOT.TCanvas(""canvas"", ""canvas"", 800, 600); canvas.Divide(2, 1); ; ; # Wrong:; # ----------------------------------------------------------------------------------------------------------; # Plotting each slice on its own normalises the PDF over its pl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8py.html:1265,reduce,reduce,1265,doc/master/rf212__plottingInRanges__blinding_8py.html,https://root.cern,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8py.html,1,['reduce'],['reduce']
Energy Efficiency,"ion that is stored in the JSON config file of the RDataFrame; // The metadata contained in the JSON file is accessible within a `DefinePerSample` call, through the `RSampleInfo`; // class; auto df_analysis =; df.DefinePerSample(""xsecs"", [](unsigned int slot, const RSampleInfo &id) { return id.GetD(""xsecs""); }); .DefinePerSample(""lumi"", [](unsigned int slot, const RSampleInfo &id) { return id.GetD(""lumi""); }); .DefinePerSample(""sumws"", [](unsigned int slot, const RSampleInfo &id) { return id.GetD(""sumws""); }); .DefinePerSample(""sample_category"",; [](unsigned int slot, const RSampleInfo &id) { return id.GetS(""sample_category""); }); // Apply an MC correction for the ZZ decay due to missing gg->ZZ process; .DefinePerSample(""scale"",; [](unsigned int slot, const ROOT::RDF::RSampleInfo &id) {; return id.Contains(""mc_363490.llll.4lep.root"") ? 1.3f : 1.0f;; }); // Select electron or muon trigger; .Filter(""trigE || trigM""); // Select events with exactly four good leptons conserving charge and lepton numbers; // Note that all collections are RVecs and good_lep is the mask for the good leptons.; // The lepton types are PDG numbers and set to 11 or 13 for an electron or muon; // irrespective of the charge.; .Define(""good_lep"",; ""abs(lep_eta) < 2.5 && lep_pt > 5000 && lep_ptcone30 / lep_pt < 0.3 && lep_etcone20 / lep_pt < 0.3""); .Filter(""Sum(good_lep) == 4""); .Filter(""Sum(lep_charge[good_lep]) == 0""); .Define(""goodlep_sumtypes"", ""Sum(lep_type[good_lep])""); .Filter(""goodlep_sumtypes == 44 || goodlep_sumtypes == 52 || goodlep_sumtypes == 48""); // Apply additional cuts depending on lepton flavour; .Filter(; ""GoodElectronsAndMuons(lep_type[good_lep], lep_pt[good_lep], lep_eta[good_lep], lep_phi[good_lep], ""; ""lep_E[good_lep], lep_trackd0pvunbiased[good_lep], lep_tracksigd0pvunbiased[good_lep], lep_z0[good_lep])""); // Create new columns with the kinematics of good leptons; .Define(""goodlep_pt"", ""lep_pt[good_lep]""); .Define(""goodlep_eta"", ""lep_eta[good_lep]""); .Define(""goodlep_phi"", ""le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html:5185,charge,charge,5185,doc/master/df106__HiggsToFourLeptons_8C.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html,1,['charge'],['charge']
Energy Efficiency,"ion used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3322 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3309 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3386 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 406 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSet & ; nset = {} . ); const. Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ; Estimates the uncertainty \(\sigma_f(x;\theta)\) on a function \(f(x;\theta)\) represented by this RooAbsReal. Here, \(\theta\) is a vector of parameters with uncertainties \(\sigma_\theta\), and \(x\) are usually observables. The uncertainty is estimated by linearly propagating the parameter uncertainties using the correlation matrix from a fit result.; The square of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:110739,efficient,efficiently,110739,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['efficient'],['efficiently']
Energy Efficiency,"ion used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 404 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSet & ; nset = {} . ); const. Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ; Estimates the uncertainty \(\sigma_f(x;\theta)\) on a function \(f(x;\theta)\) represented by this RooAbsReal. Here, \(\theta\) is a vector of parameters with uncertainties \(\sigma_\theta\), and \(x\) are usually observables. The uncertainty is estimated by linearly propagating the parameter uncertainties using the correlation matrix from a fit result.; The square of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:111998,efficient,efficiently,111998,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['efficient'],['efficiently']
Energy Efficiency,"ion { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedListRooAbsCollection::_listActual object store; TStringRooAbsCollection::_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_tRooAbsCollection::_ownContFlag to identify a list that owns its contents.; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooArgSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooArgSet(); Default constructor. RooArgSet(const RooArgList& list); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const RooArgList& list, const RooAbsArg* var1); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const char *name); Empty set constructor. RooArgSet(const RooArgSet& set1, const RooArgSet& set2, const char *name); Construct a set from two existing sets. RooArgSet(const RooAbsArg& var1,		 const char *name); Constructor for set containing 1 initial object. RooArgSet(const RooAbsArg& var1, const RooAbsArg& var2,		 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgSet.html:14046,allocate,allocates,14046,root/html526/RooArgSet.html,https://root.cern,https://root.cern/root/html526/RooArgSet.html,1,['allocate'],['allocates']
Energy Efficiency,"ion { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. RooLinkedListRooAbsCollection::_listActual object store; TStringRooAbsCollection::_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_tRooAbsCollection::_ownContFlag to identify a list that owns its contents.; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooArgSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooArgSet(); Default constructor. RooArgSet(const RooArgList& list); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const RooArgList& list, const RooAbsArg* var1); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const char* name); Empty set constructor. RooArgSet(const RooArgSet& set1, const RooArgSet& set2, const char* name = """"); Construct a set from two existing sets. RooArgSet(const RooAbsArg& var1, const char* name = """"); Constructor for set containing 1 initial object. RooArgSet(const RooAbsArg& var1, const RooAbsArg& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooArgSet.html:14072,allocate,allocates,14072,root/html528/RooArgSet.html,https://root.cern,https://root.cern/root/html528/RooArgSet.html,2,['allocate'],['allocates']
Energy Efficiency,"ion(ROOT::Math::GSLFuncPointer f, void* params, double xmin, double xlow, double xup); virtual intStatus() const; static intTestInterval(double xlow, double xup, double epsAbs, double epsRel); virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::GSLMinimizer1DGSLMinimizer1D(const ROOT::Math::GSLMinimizer1D&); ROOT::Math::GSLMinimizer1D&operator=(const ROOT::Math::GSLMinimizer1D&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunction; boolfIsSet; intfIter; doublefLow; doublefMin; ROOT::Math::GSL1DMinimizerWrapper*fMinimizer; intfStatusstatus of last minimization (==0 ok =1 failed); doublefUp; doublefXlow; doublefXmin; doublefXup. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; explicit GSLMinimizer1D(Minim1D::Type type=Minim1D::kBRENT). Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. virtual ~GSLMinimizer1D(). Destructor: free allocated resources. GSLMinimizer1D(const GSLMinimizer1D &); usually copying is non trivial, so we make this unaccessible. void SetFunction( const UserFunc & f, double xmin, double xlow, double xup). Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLMinimizer1D.html:2328,allocate,allocated,2328,root/html528/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLMinimizer1D.html,10,['allocate'],['allocated']
Energy Efficiency,"ion(const ROOT::Math::IMultiGenFunction & func); Set the objective function to be minimized, by passing a function object implement the; basic multi-dim Function interface. In this case the derivatives will be; calculated by Minuit; Here a TMinuit instance is created since only at this point we know the number of parameters. void SetFunction(const ROOT::Math::IMultiGradFunction & func); Set the objective function to be minimized, by passing a function object implement the; multi-dim gradient Function interface. In this case the function derivatives are provided; by the user via this interface and there not calculated by Minuit. void Fcn(int& , double* , double& f, double* , int ); implementation of FCN static function used internally by TMinuit.; Adapt IMultiGenFunction interface to TMinuit FCN static function. void FcnGrad(int& , double* g, double& f, double* , int ); implementation of FCN static function used internally by TMinuit.; Adapt IMultiGradFunction interface to TMinuit FCN static function in the case of user; provided gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a free variable. bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set a limited variable. bool CheckMinuitInstance() const; check instance of fMinuit. bool CheckVarIndex(unsigned int ivar) const; check index of Variable (assume fMinuit exists). bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a lower limited variable; since is not supported in TMinuit , just use a artificial large value. bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a upper limited variable; since is not supported in TMinuit , just use a artificial large negative value. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool SetVariableValue(unsigned int , double )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMinuitMinimizer.html:8023,Adapt,Adapt,8023,root/html534/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html534/TMinuitMinimizer.html,1,['Adapt'],['Adapt']
Energy Efficiency,"ion(const ROOT::Math::IMultiGenFunction & func); Set the objective function to be minimized, by passing a function object implement the; basic multi-dim Function interface. In this case the derivatives will be; calculated by Minuit; Here a TMinuit instance is created since only at this point we know the number of parameters. void SetFunction(const ROOT::Math::IMultiGradFunction & func); Set the objective function to be minimized, by passing a function object implement the; multi-dim gradient Function interface. In this case the function derivatives are provided; by the user via this interface and there not calculated by Minuit. void Fcn(int& , double* , double& f, double* , int ); implementation of FCN static function used internally by TMinuit.; Adapt IMultiGenFunction interface to TMinuit FCN static function. void FcnGrad(int& , double* g, double& f, double* , int ); implementation of FCN static function used internally by TMinuit.; Adapt IMultiGradFunction interface to TMinuit FCN static function in the case of user; provided gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a free variable. bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set a limited variable. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool SetVariableValue(unsigned int , double ); set the value of an existing variable; parameter must exist or return false. std::string VariableName(unsigned int ivar) const; return the variable name. int VariableIndex(const string& name) const; return variable index. bool Minimize(); perform the minimization using the algorithm chosen previously by the user; By default Migrad is used.; Return true if the found minimum is valid and update internal chached values of; minimum values, errors and covariance matrix.; Status of minimizer is set to:; migradResult + 10*minosResult + 100*hesseResult + 1000*improveResult. void Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMinuitMinimizer.html:7635,Adapt,Adapt,7635,root/html532/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html532/TMinuitMinimizer.html,1,['Adapt'],['Adapt']
Energy Efficiency,"ion(const ROOT::Math::IMultiGenFunction & func); Set the objective function to be minimized, by passing a function object implement the; basic multi-dim Function interface. In this case the derivatives will be; calculated by Minuit; Here a TMinuit instance is created since only at this point we know the number of parameters. void SetFunction(const ROOT::Math::IMultiGradFunction & func); Set the objective function to be minimized, by passing a function object implement the; multi-dim gradient Function interface. In this case the function derivatives are provided; by the user via this interface and there not calculated by Minuit. void Fcn(int& , double* , double& f, double* , int ); implementation of FCN static function used internally by TMinuit.; Adapt IMultiGenFunction interface to TMinuit FCN static function. void FcnGrad(int& , double* g, double& f, double* , int ); implementation of FCN static function used internally by TMinuit.; Adapt IMultiGradFunction interface to TMinuit FCN static function in the case of user; provided gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a free variable. bool SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double , double ); set a limited variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a lower limited variable; since is not supported in TMinuit , just use a artificial large value. bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, double step, double upper); set a upper limited variable; since is not supported in TMinuit , just use a artificial large negative value. bool CheckMinuitInstance() const; check instance of fMinuit. bool CheckVarIndex(unsigned int ivar) const; check index of Variable (assume fMinuit exists). bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool SetVariableValue(unsigned int , double )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuitMinimizer.html:8086,Adapt,Adapt,8086,root/html602/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html602/TMinuitMinimizer.html,2,['Adapt'],['Adapt']
Energy Efficiency,"ion;  CTIDNode;  CTLoopConfigurationBase class of the Configurations for the member wise looping routines ;  CTNestedIDs;  ►Nvecgeom;  ►Nwriter;  Cwriter;  C_x3d_data_;  C_x3d_sizeof_;  CAnyCollectionProxy;  CAnyCollectionStreamer;  CBalancerInfo;  Cbasic_string_view;  ►CBidirMMapPipeBidirMMapPipe creates a bidirectional channel between the current process and a child it forks ;  CPollEntryFor poll() interface ;  CBinaryOpPolicy;  CBinomialNeymanInterval;  CBinomialProbHelper;  CColorStruct_t;  CCompareAsc;  CcompareBAasc;  CcompareBAdesc;  CCompareDesc;  CContDistFree functions adapter needed by UNURAN for onedimensional continuous distributions ;  CContextSmall helper to keep current directory context ;  CCpuInfo_t;  CDebuggingSamplerDebuggingSampler is a simple implementation of the DistributionCreator interface used for debugging ;  CDebuggingTestStatDebuggingTestStat is a simple implementation of the DistributionCreator interface used for debugging ;  CDiscrDistFree functions adapter needed by UNURAN for one-dimensional discrete distribution ;  CEvent_t;  CExceptionContext_t;  CFeldmanCousinsBinomialInterval;  CFeldmanCousinsSorter;  CFileStat_t;  CFontAttributes_t;  CFontMetrics_t;  CFoption_t;  Cfuncptr_and_voidptr_t;  CGcCache_t;  CGCValues_t;  Cgroup;  Ch1analysis;  Ch1analysisTreeReader;  Chash< std::experimental::basic_string_view< _CharT, _Traits > >;  CHelperOps;  CHEPEVT_DEFHEPEVT common block ;  CHit;  CHoption_tHistogram option structure ;  CHparam_tHistogram parameters structure ;  CJet;  CJetEvent;  CMemInfo_t;  Cmg_callbacks;  Cmg_client_options;  Cmg_form_data_handler;  Cmg_option;  ►Cmg_request_info;  Cmg_header;  Cmg_server_ports;  CMultiDistFree functions adapter needed by UNURAN for multidimensional cont distribution ;  CMYSQL_BIND;  CMYSQL_STMT;  CNuMuToNuE_Oscillation;  ►CParamHistFunc;  CCacheElem;  CPassiveKeyGrab;  Cpasswd;  CPattern;  CPgSQL_Stmt_t;  CPictureAttributes_t;  ►CPiecewiseInterpolation;  CCacheElem;  CPoint_t;  CProcInfo_t; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:88637,adapt,adapter,88637,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['adapt'],['adapter']
Energy Efficiency,"ional to bin content. . ""GLBOX1"" The same as ""glbox"", but spheres are drawn instead of boxes. . TH3 as iso-surface(s); The supported option is:. Option Description . ""GLISO"" TH3 is drawn using iso-surfaces. . TF3 (implicit function); The supported option is:. Option Description . ""GL"" Draw a TF3. . Parametric surfaces; $ROOTSYS/tutorials/gl/glparametric.C shows how to create parametric equations and visualize the surface.; Interaction with the plots; All the interactions are implemented via standard methods DistancetoPrimitive() and ExecuteEvent(). That's why all the interactions with the OpenGL plots are possible only when the mouse cursor is in the plot's area (the plot's area is the part of a the pad occupied by gl-produced picture). If the mouse cursor is not above gl-picture, the standard pad interaction is performed.; Selectable parts; Different parts of the plot can be selected:. xoz, yoz, xoy back planes: When such a plane selected, it's highlighted in green if the dynamic slicing by this plane is supported, and it's highlighted in red, if the dynamic slicing is not supported.; The plot itself: On surfaces, the selected surface is outlined in red. (TF3 and ISO are not outlined). On lego plots, the selected bin is highlighted. The bin number and content are displayed in pad's status bar. In box plots, the box or sphere is highlighted and the bin info is displayed in pad's status bar. Rotation and zooming. Rotation: When the plot is selected, it can be rotated by pressing and holding the left mouse button and move the cursor.; Zoom/Unzoom: Mouse wheel or 'j', 'J', 'k', 'K' keys. Panning; The selected plot can be moved in a pad's area by pressing and holding the left mouse button and the shift key.; Box cut; Surface, iso, box, TF3 and parametric painters support box cut by pressing the 'c' or 'C' key when the mouse cursor is in a plot's area. That will display a transparent box, cutting away part of the surface (or boxes) in order to show internal part of plot.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:126122,green,green,126122,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['green'],['green']
Energy Efficiency,"ionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction and Error Analysis for the Physical Sciences. McGraw-Hill, 2 edition, 1992.; R. Brun et al. Long writeup DD/75-23, CERN, 1980.; Gene H. Golub and Charles F. van Loan. Matrix Computations. John Hopkins University Press, Baltimore, 3 edition, 1996.; F. James. Minuit. Long writeup D506, CERN, 1998.; H. Wind. Function parameterization. Proceedings of the 1972 CERN Computing and Data Processing School, volume 72-21 of Yellow report. CERN, 1972.; H. Wind. 1. principal component analysis, 2. pattern recognition for track finding, 3. interpolation and functional representation. Yellow report EP/81-12, CERN, 1981. . Definition at line 15 of file TMultiDimFit.h. Public Types; enum  EMDFPolyType { kMonomials; , kChebyshev; , kLegendre; };  ;  Public Type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:16821,reduce,reduced,16821,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,2,['reduce'],['reduced']
Energy Efficiency,"ionally, the user may impose a functional expression by specifying; the powers of each variable in specified functions ; (TMultiDimFit::SetPowers). In that case, only the; coefficients is calculated by the class.; . Limiting the Number of Terms; . As always when dealing with fits, there's a real chance of; over fitting. As is well-known, it's always possible to fit an; polynomial in to points with ; , but; the polynomial is not likely to fit new data at all; [1]. Therefore, the user is asked to provide an upper; limit, to the number of terms in ; (TMultiDimFit::SetMaxTerms).; ; However, since there's an infinite number of to choose from, the; user is asked to give the maximum power. , of each variable; to be considered in the minimization of ; (TMultiDimFit::SetMaxPowers).; ; One way of obtaining values for the maximum power in variable , is; to perform a regular fit to the dependent quantity , using a; polynomial only in . The maximum power is is then the; power that does not significantly improve the one-dimensional; least-square fit over to [5].; ; There are still a huge amount of possible choices for ; in fact; there are ; possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a power control limit, ; (TMultiDimFit::SetPowerLimit), and a function; is only accepted if; . where is the leading power of variable in function; . (TMultiDimFit::MakeCandidates). So the number of; functions increase with (1, 2 is fine, 5 is way out).; . Gram-Schmidt Orthogonalisation. To further reduce the number of functions in the final expression,; only those functions that significantly reduce is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see 2.3).; ; The functions are generally not orthogonal, which means one will; have to evaluate all possible 's over all data-points before; finding the most significant [1]. We can, however, do; better then that. By applying the modified Gram-Schmidt; orthogonalisation ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:4169,power,power,4169,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,12,['power'],['power']
Energy Efficiency,"ions is an OR of the EFrameTypes. ; Reimplemented in TGCompositeFrame.; Definition at line 321 of file TGFrame.cxx. ◆ Class(). static TClass * TGFrame::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 283 of file TGFrame.h. ◆ Contains(). Bool_t TGFrame::Contains ; (; Int_t ; x, . Int_t ; y . ); const. inline . Definition at line 238 of file TGFrame.h. ◆ DeclFileName(). static const char * TGFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 283 of file TGFrame.h. ◆ Delete(). void TGFrame::Delete ; (; Option_t * ; option = """"). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Reimplemented in TTreeViewer, and TGTextEdit.; Definition at line 260 of file TGFrame.h. ◆ DeleteWindow(). void TGFrame::DeleteWindow ; (; ). virtual . Delete window. ; Use single shot timer to call final delete method. We use this indirect way since deleting the window in its own execution ""thread"" can cause side effects because frame methods can still be called while the window object has already been deleted. ; Reimplemented in TGTextEditor.; Definition at line 276 of file TGFrame.cxx. ◆ DoRedraw(). void TGFrame::DoRedraw ; (; ). overrideprotectedvirtual . Redraw the frame. ; Reimplemented from TGWindow.; Reimplemented in TGLPShapeObjEditor, TGLWidget, TGTextButton, TGPictureButton, TGRadioButton, TGSplitButton, TGGroupFrame, TGTreeLBEntry, TGIcon, TGLabel, TGLBEntry, TGTextLBEntry, TGLineLBEntry, TGIconLBEntry, TGLBContainer, TGLVEntry, TGMdiTitleIcon, TGPopupMenu, TGMenuTitle, TGHProgressBar, TGVProgressBar, TGSh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFrame.html:29666,allocate,allocated,29666,doc/master/classTGFrame.html,https://root.cern,https://root.cern/doc/master/classTGFrame.html,1,['allocate'],['allocated']
Energy Efficiency,"ions::TActionSequence * GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); MemberWise actions. TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions(Int_t version). TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions(). CreateIterators_t GetFunctionCreateIterators(Bool_t read = kTRUE); begin_arena and end_arena should contain the location of a memory arena of size fgIteratorSize.; If the collection iterator are of that size or less, the iterators will be constructed in place in those location (new with placement); Otherwise the iterators will be allocated via a regular new and their address returned by modifying the value of begin_arena and end_arena. CopyIterator_t GetFunctionCopyIterator(Bool_t read = kTRUE); Copy the iterator source, into dest. dest should contain the location of a memory arena of size fgIteratorSize.; If the collection iterator is of that size or less, the iterator will be constructed in place in this location (new with placement); Otherwise the iterator will be allocated via a regular new and its address returned by modifying the value of dest. Next_t GetFunctionNext(Bool_t read = kTRUE); iter and end should be pointers to respectively an iterator to be incremented and the result of collection.end(); If the iterator has not reached the end of the collection, 'Next' increment the iterator 'iter' and return 0 if; the iterator reached the end.; If the end was not reached, 'Next' returns the address of the content pointed to by the iterator before the; incrementation ; if the collection contains pointers, 'Next' will return the value of the pointer. DeleteIterator_t GetFunctionDeleteIterator(Bool_t read = kTRUE). DeleteTwoIterators_t GetFunctionDeleteTwoIterators(Bool_t read = kTRUE); If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses,; Otherwise just call the iterator's destructor. » Author: Philippe Canal 20/08/2003 » Copyright (C) 1995-2003, Rene Brun, Fons Rad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualCollectionProxy.html:5861,allocate,allocated,5861,root/html528/TVirtualCollectionProxy.html,https://root.cern,https://root.cern/root/html528/TVirtualCollectionProxy.html,4,['allocate'],['allocated']
Energy Efficiency,"ious; initialization constants. TMD5(const UChar_t* digest); Create finalized TMD5 object containing passed in 16 byte digest. TMD5(const TMD5& md5); MD5 copy ctor. Special copy ctor avoids copying unnecessary; temp arrays when finalized. TMD5 & operator=(const TMD5& rhs); MD5 assignment operator. Special assignment operator avoids; copying unnecessary temp arrays when finalized. void Update(const UChar_t* buf, UInt_t len); Update TMD5 object to reflect the concatenation of another buffer full; of bytes. void Final(UChar_t* digest); MD5 finalization, ends an MD5 message-digest operation, writing the; the message digest and zeroizing the context.; Returns digest. void Final(); MD5 finalization, ends an MD5 message-digest operation, writing the; the message digest and zeroizing the context. void Print() const; Print digest in ascii hex form. const char * AsString() const; Return message digest as string. Returns """" in case Final() has; not yet been called. Copy result because it points to a statically; allocated string. void Encode(UChar_t* out, const UInt_t* in, UInt_t len); Encodes input into output. Assumes len is a multiple of 4. void Decode(UInt_t* out, const UChar_t* in, UInt_t len); Decodes input into output. Assumes len is a multiple of 4. void Transform(UInt_t* buf, const UChar_t* in); The core of the MD5 algorithm, this alters an existing MD5 hash to; reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 in case the file cannot be opened or in case of; error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMD5.html:3146,allocate,allocated,3146,root/html528/TMD5.html,https://root.cern,https://root.cern/root/html528/TMD5.html,4,['allocate'],['allocated']
Energy Efficiency,"ipt user interface.; 95Any registered object can be requested and displayed in the browser.; 96There are many benefits of such approach:; 97 ; 981. standard http interface to ROOT application; 992. no any temporary ROOT files when access data; 1003. user interface running in all browsers; 101 ; 102To start http server simply create instance; 103of the THttpServer class like:; 104 ; 105 serv = new THttpServer(""http:8080"");; 106 ; 107This will starts civetweb-based http server with http port 8080.; 108Than one should be able to open address ""http://localhost:8080""; 109in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects,; 110created in ROOT application. By default, server can access files,; 111canvases and histograms via `gROOT` pointer. All such objects; 112can be displayed with JSROOT graphics.; 113 ; 114At any time one could register other objects with the command:; 115 ; 116 TGraph* gr = new TGraph(10);; 117 gr->SetName(""gr1"");; 118 serv->Register(""graphs/subfolder"", gr);; 119 ; 120If objects content is changing in the application, one could; 121enable monitoring flag in the browser - than objects view; 122will be regularly updated.; 123 ; 124More information: https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html; 125*/; 126 ; 127ClassImp(THttpServer);; 128 ; 129////////////////////////////////////////////////////////////////////////////////; 130/// constructor; 131///; 132/// As argument, one specifies engine kind which should be; 133/// created like ""http:8080"". One could specify several engines; 134/// at once, separating them with semicolon ("";""). Following engines are supported:; 135///; 136/// http - TCivetweb, civetweb-based implementation of http protocol; 137/// fastcgi - TFastCgi, special protocol for communicating with web servers; 138///; 139/// For each created engine one should provide socket port number like ""http:8080"" or ""fastcgi:9000"".; 140/// Additional engine-specific options can be supplied with URL syntax like ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THttpServer_8cxx_source.html:3578,monitor,monitoring,3578,doc/master/THttpServer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THttpServer_8cxx_source.html,1,['monitor'],['monitoring']
Energy Efficiency,"ir! Associated directory; RooAbsDataStore*RooAbsData::_dstoreData storage implementation; TIterator*RooAbsData::_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; map<string,RooAbsData*>RooAbsData::_ownedComponentsOwned external components; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool; RooArgSetRooAbsData::_varsDimensions of this data set; RooArgSet_varsNoWgtVars without weight variable; RooRealVar*_wgtVarPointer to weight variable (if set); static RooAbsData::StorageTypeRooAbsData::defaultStorageType; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooDataSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooDataSet(); Default constructor for persistence. RooDataSet(const char* name, const char* title, const RooArgSet& vars, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Construct an unbinned dataset from a RooArgSet defining the dimensions of the data space. Optionally, data; can be imported at the time of construction. This constructor takes the following optional arguments. Import(TTree*) -- Import contents of given T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataSet.html:19462,allocate,allocated,19462,root/html602/RooDataSet.html,https://root.cern,https://root.cern/root/html602/RooDataSet.html,4,['allocate'],['allocated']
Energy Efficiency,"ire opposite charge; df_2mu = df.Filter(""nMuon == 2"", ""Events with exactly two muons""); df_os = df_2mu.Filter(""Muon_charge[0] != Muon_charge[1]"", ""Muons with opposite charge""); ; # Compute invariant mass of the dimuon system; df_mass = df_os.Define(""Dimuon_mass"", ""InvariantMass(Muon_pt, Muon_eta, Muon_phi, Muon_mass)""); ; # Make histogram of dimuon mass spectrum. Note how we can set titles and axis labels in one go.; h = df_mass.Histo1D((""Dimuon_mass"", ""Dimuon mass;m_{#mu#mu} (GeV);N_{Events}"", 30000, 0.25, 300), ""Dimuon_mass""); ; # Request cut-flow report; report = df_mass.Report(); ; # Produce plot; ROOT.gStyle.SetOptStat(0); ROOT.gStyle.SetTextFont(42); c = ROOT.TCanvas(""c"", """", 800, 700); c.SetLogx(); c.SetLogy(); ; h.SetTitle(""""); h.GetXaxis().SetTitleSize(0.04); h.GetYaxis().SetTitleSize(0.04); h.Draw(); ; label = ROOT.TLatex(); label.SetNDC(True); label.DrawLatex(0.175, 0.740, ""#eta""); label.DrawLatex(0.205, 0.775, ""#rho,#omega""); label.DrawLatex(0.270, 0.740, ""#phi""); label.DrawLatex(0.400, 0.800, ""J/#psi""); label.DrawLatex(0.415, 0.670, ""#psi'""); label.DrawLatex(0.485, 0.700, ""Y(1,2,3S)""); label.DrawLatex(0.755, 0.680, ""Z""); label.SetTextSize(0.040); label.DrawLatex(0.100, 0.920, ""#bf{CMS Open Data}""); label.SetTextSize(0.030); label.DrawLatex(0.630, 0.920, ""#sqrt{s} = 8 TeV, L_{int} = 11.6 fb^{-1}""); ; c.SaveAs(""dimuon_spectrum.pdf""); ; # Print cut-flow report; report.Print(); ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %; Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %; DateApril 2019 ; AuthorStefan Wunsch (KIT, CERN) ; Definition in file df102_NanoAODDimuonAnalysis.py. tutorialsdataframedf102_NanoAODDimuonAnalysis.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8py.html:2886,charge,charge,2886,doc/master/df102__NanoAODDimuonAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8py.html,1,['charge'],['charge']
Energy Efficiency,"irectory (Option_t *cmd="""") const;  List remote directory. ;  ; void ls (Option_t *cmd="""") const override;  The ls function lists the contents of a class on stdout. ;  ; Int_t MakeDirectory (const char *dir, Bool_t print=kFALSE) const;  Make a remote directory. ;  ; void mkdir (const char *dir) const;  ; void mv (const char *file1, const char *file2) const;  ; Bool_t OpenDirectory (const char *name, Bool_t print=kFALSE);  Open a directory via rootd. ;  ; void Print (Option_t *opt="""") const override;  Print some info about the FTP connection. ;  ; Int_t PrintDirectory () const;  Print path of remote working directory. ;  ; void put (const char *file, const char *remoteName=nullptr);  ; Long64_t PutFile (const char *file, const char *remoteName=nullptr);  Transfer file to remote host. ;  ; void pwd () const;  ; Int_t RenameFile (const char *file1, const char *file2) const;  Rename a remote file. ;  ; void rm (const char *file) const;  ; void rmdir (const char *dir) const;  ; void SetBlockSize (Int_t blockSize);  Make sure the block size is a power of two, with a minimum of 32768. ;  ; void SetRestartAt (Long64_t at);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:3826,power,power,3826,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,1,['power'],['power']
Energy Efficiency,"irtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. voidAllocate(); static Float_tHLStoRGB1(Float_t rn1, Float_t rn2, Float_t huei). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; Int_tfNumberColor number identifier; TStringTNamed::fTitleobject title. private:. Float_tfAlphaAlpha (transparency); Float_tfBlueFraction of Blue; Float_tfGreenFraction of Green; Float_tfHueHue; Float_tfLightLight; Float_tfRedFraction of Red; Float_tfSaturationSaturation; static Bool_tfgGrayscaleModeif set, GetColor will return grayscale; static Bool_tfgInitDonekTRUE once ROOT colors have been initialized; static TArrayIfgPaletteColor palette. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TColor(). Default constructor.; ; . TColor(Int_t color, Float_t r, Float_t g, Float_t b, const char* name = """", Float_t a = 1). Normal color constructor. Initialize a color structure.; Compute the RGB and HLS color components.; ; . ~TColor(). Color destructor.; ; . TColor(const TColor& color). Color copy constructor.; ; . void InitializeColors(). Initialize colors used by the TCanvas based graphics (via TColor objects).; This method should be called before the ApplicationImp is created (which; initializes the GUI colors).; ; . const char * AsHexString() const. Return color as hexadecimal string. This string can be directly passed; to, for example, TGClient::GetColorByName(). String will be reused so; copy immediatel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColor.html:17224,Green,Green,17224,root/html534/TColor.html,https://root.cern,https://root.cern/root/html534/TColor.html,1,['Green'],['Green']
Energy Efficiency,"irtual TClass*TEveLine::ProjectedClass(const TEveProjection* p) const; virtual voidTEveProjectable::PropagateMainColor(Color_t color, Color_t old_color); virtual voidTEveElement::PropagateMainColorToProjecteds(Color_t color, Color_t old_color); virtual voidTEveProjectable::PropagateMainTransparency(Char_t t, Char_t old_t); virtual voidTEveElement::PropagateMainTransparencyToProjecteds(Char_t t, Char_t old_t); virtual voidTEveProjectable::PropagateRenderState(Bool_t rnr_self, Bool_t rnr_children); virtual voidTEveElement::PropagateRnrStateToProjecteds(); virtual voidTEveProjectable::PropagateVizParams(TEveElement* el = 0); virtual voidTEveElement::PropagateVizParamsToElements(TEveElement* el = 0); virtual voidTEveElement::PropagateVizParamsToProjecteds(); virtual TEveTrans*TEveElement::PtrMainTrans(Bool_t create = kTRUE); virtual Int_tTObject::Read(const char* name); voidTEveElement::RecheckImpliedSelections(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTEveLine::ReduceSegmentLengths(Float_t max); const TEveElement::List_t&TEveElement::RefChildren() const; virtual TEveTrans&TEveElement::RefMainTrans(); virtual voidTEveElement::RemoveElement(TEveElement* el); virtual voidTEveElement::RemoveElementLocal(TEveElement* el); virtual voidTEveElement::RemoveElements(); virtual voidTEveElement::RemoveElementsLocal(); virtual Bool_tTEveElement::RemoveFromListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual Int_tTEveElement::RemoveFromListTrees(TEveElement* parent); virtual voidTEveElement::RemoveParent(TEveElement* re); virtual voidTEveProjectable::RemoveProjected(TEveProjected* p); voidTEvePointSet::Reset(Int_t n_points = 0, Int_t n_int_ids = 0); voidTEveElement::ResetAllCSCBits(); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); virtual voidTAttMarker::ResetAttMarker(Option_t* toption = """"); voidTAttBBox::ResetBBox(); voidTObject::ResetBit(UInt_t f); voidTEveElement::ResetCSCBits(UChar_t f); virtual voidTObject::SaveAs(const char* filename =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveLineProjected.html:16579,Reduce,ReduceSegmentLengths,16579,root/html532/TEveLineProjected.html,https://root.cern,https://root.cern/root/html532/TEveLineProjected.html,4,['Reduce'],['ReduceSegmentLengths']
Energy Efficiency,"irtual void SetTextAngle(Float_t tangle=0)Set the text angle.Definition TAttText.h:43; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TF11-Dim function classDefinition TF1.h:233; TH1I1-D histogram with an int per channel (see TH1 documentation)Definition TH1.h:540; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH2I2-D histogram with an int per channel (see TH1 documentation)Definition TH2.h:225; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TTextBase class for several text objects.Definition TText.h:22; TText::DrawTextvirtual TText * DrawText(Double_t x, Double_t y, const char *text)Draw this text with new coordinates.Definition TText.cxx:176; . The candle reduces the information coming from a whole distribution into few values. Independently from the number of entries or the significance of the underlying distribution a candle will always look like a candle. So candle plots should be used carefully in particular with unknown distributions. The definition of a candle is based on unbinned data. Here, candles are created from binned data. Because of this, the deviation is connected to the bin width used. The calculation of the quantiles normally done on unbinned data also. Because data are binned, this will only work the best possible way within the resolution of one bin; Because of all these facts one should take care that:. there are enough points per candle; the bin width is small enough (more bins will increase the maximum available resolution of the quantiles although there will be some bins with no entries); never make a candle-plot if the underlying distribution is double-distributed; only create candles of distributions that are more-or-less gaussian (the MPV sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:56483,reduce,reduces,56483,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['reduce'],['reduces']
Energy Efficiency,"irtualStreamerInfo * ; info). overridevirtual . Increment level. ; Implements TBuffer.; Definition at line 121 of file TBufferFile.cxx. ◆ IsA(). TClass * TBufferFile::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TBuffer.; Reimplemented in TMessage, and TBufferSQL.; Definition at line 265 of file TBufferFile.h. ◆ operator=(). void TBufferFile::operator= ; (; const TBufferFile & ; ). protecteddelete . not implemented . ◆ ReadArray() [1/13]. Int_t TBufferFile::ReadArray ; (; Bool_t *& ; b). overridevirtual . Read array of bools from the I/O buffer. ; Returns the number of bools read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 730 of file TBufferFile.cxx. ◆ ReadArray() [2/13]. Int_t TBufferFile::ReadArray ; (; Char_t *& ; c). overridevirtual . Read array of characters from the I/O buffer. ; Returns the number of characters read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 758 of file TBufferFile.cxx. ◆ ReadArray() [3/13]. Int_t TBufferFile::ReadArray ; (; Double_t *& ; d). overridevirtual . Read array of doubles from the I/O buffer. ; Returns the number of doubles read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 934 of file TBufferFile.cxx. ◆ ReadArray() [4/13]. Int_t TBufferFile::ReadArray ; (; Float_t *& ; f). overridevirtual . Read array of floats from the I/O buffer. ; Returns the number of floats read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 901 of file TBufferFile.cxx. ◆ ReadArray() [5/13]. Int_t TBufferFile::ReadArray ; (; Int_t *& ; ii). overridevirtual . Read array of ints from the I/O buffer. ; Returns the number of ints read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:46480,allocate,allocated,46480,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['allocate'],['allocated']
Energy Efficiency,"is TBuffer3D, or recycle it for the next object if suitable.; 9.13.4.12 Examples; For an example of a simple geometry, working in master reference frame examine the code under $ROOTSYS/g3d. For a more complex example, which works in both master and local frames, and uses logical/physical division of shape geometry and placement, examine the code under $ROOTSYS/geom - in particular TGeoShape hierarchy, and the painter object TGeoPainter (under geopainter) where the negotiation with the viewer is performed.; 10 Folders and Tasks; 10.1 Folders. A TFolder is a collection of objects visible and expandable in the ROOT object browser. Folders have a name and a title and are identified in the folder hierarchy by an “UNIX-like” naming convention. The base of all folders is //root. It is visible at the top of the left panel in the browser. The browser shows several folders under //root.; New folders can be added and removed to/from a folder.; 10.2 Why Use Folders?; One reason to use folders is to reduce class dependencies and improve modularity. Each set of data has a producer class and one or many consumer classes. When using folders, the producer class places a pointer to the data into a folder, and the consumer class retrieves a reference to the folder.; The consumer can access the objects in a folder by specifying the path name of the folder.; Here is an example of a folder’s path name:; //root/Event/Hits/TCP; One does not have to specify the full path name. If the partial path name is unique, it will find it; otherwise it will return the first occurrence of the path.; The first diagram shows a system without folders. The objects have pointers to each other to access each other’s data. Pointers are an efficient way to share data between classes. However, a direct pointer creates a direct coupling between classes. This design can become a very tangled web of dependencies in a system with a large number of classes. In the second diagram, a reference to the data is in the fol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:418834,reduce,reduce,418834,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['reduce'],['reduce']
Energy Efficiency,"is is the top volume of the geometry. ;  ; Bool_t IsValid () const;  ; Bool_t IsVisContainers () const;  ; Bool_t IsVisibleDaughters () const;  ; Bool_t IsVisLeaves () const;  ; Bool_t IsVisOnly () const;  ; virtual Bool_t IsVolumeMulti () const;  ; Bool_t IsXYZVoxels () const;  ; TH2F * LegoPlot (Int_t ntheta=20, Double_t themin=0., Double_t themax=180., Int_t nphi=60, Double_t phimin=0., Double_t phimax=360., Double_t rmin=0., Double_t rmax=9999999, Option_t *option="""");  Generate a lego plot fot the top volume, according to option. ;  ; void MakeCopyNodes (const TGeoVolume *other);  make a new list of nodes and copy all nodes of other volume inside ;  ; virtual TGeoVolume * MakeCopyVolume (TGeoShape *newshape);  make a copy of this volume build a volume with same name, shape and medium ;  ; TGeoVolume * MakeReflectedVolume (const char *newname="""") const;  Make a copy of this volume which is reflected with respect to XY plane. ;  ; Bool_t OptimizeVoxels ();  Perform an extensive sampling to find which type of voxelization is most efficient. ;  ; void Paint (Option_t *option="""") override;  paint volume ;  ; void Print (Option_t *option="""") const override;  Print volume info. ;  ; void PrintNodes () const;  print nodes ;  ; void PrintVoxels () const;  Print the voxels for this volume. ;  ; void RandomPoints (Int_t npoints=1000000, Option_t *option="""");  Draw random points in the bounding box of this volume. ;  ; void RandomRays (Int_t nrays=10000, Double_t startx=0, Double_t starty=0, Double_t startz=0, const char *target_vol=nullptr, Bool_t check_norm=kFALSE);  Random raytracing method. ;  ; void Raytrace (Bool_t flag=kTRUE);  Draw this volume with current settings and perform raytracing in the pad. ;  ; void RegisterYourself (Option_t *option="""");  Register the volume and all materials/media/matrices/shapes to the manager. ;  ; void Release ();  ; void RemoveNode (TGeoNode *node);  Remove an existing daughter. ;  ; TGeoNode * ReplaceNode (TGeoNode *nodeorig, TGeoS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolumeAssembly.html:8918,efficient,efficient,8918,doc/master/classTGeoVolumeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoVolumeAssembly.html,1,['efficient'],['efficient']
Energy Efficiency,"is means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, they had to be removed without deprecation. Please adapt your code if necessary.; Renaming of some RooFit classes; The RooPower was renamed to RooPowerSum, and RooExpPoly was renamed to RooLegacyExpPoly.; This was a necessary change, because the names of these classes introduced in ROOT 6.28 collided with some classes in CMS combine, which were around already long before. Therefore, the classes had to be renamed to not cause any problems for CMS.; In the unlikeliy case where you should have used these new classes for analysis already, please adapt your code to the new names and re-create your workspaces.; RDataFrame. The RDataFrame constructors that take in input one or more file names (or globs thereof) will now infer the format of the dataset, either TTree or RNTuple, that is stored in the first input file. When multiple files are specified, it is assumed that all other files contain a coherent dataset of the same format and with the same schema, exactly as it used to happen with TChain. This automatic inference further contributes towards a zero-code-change experience when moving from processing a TTree to processing an RNTuple dataset while using an RDataFrame. It also introduces a backwards-incompatible behaviour, i.e. now the constructor needs to open one file in order to infer the dataset type. This means that if the file does not exist, the constructor will throw an exception. Previously, an exception would be thrown only at a JIT-ting time, before the start of the computations.; Distributed RDataF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:14825,adapt,adapt,14825,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['adapt'],['adapt']
Energy Efficiency,"is non equal to 0 and if text size directly set on the TLegend object is 0, then the gStyle value is used to draw the legend text. If the text size directly set on the TLegend object is not null, then it is used to draw the legend text. TTexDump. The hollow fill style was not rendered correctly. (see https://sft.its.cern.ch/jira/browse/ROOT-6841); Better line width matching with screen and pdf output.; Text color was ignored. It was always black.; Text color was ignored. It was always black.; The underscore _ produced an error outside the TeX math context.; Fix an issue with transparent pads.; Implement transparent colors using TiKZ “opacity”.; Implement TStyle::SetLineScalePS() to control le global basic line width.; Offer 0 as line width option. Useful to make a line invisible. TPostScript. Small fix for fill patterns 1, 2 and 3.; With TMathtext, only the fonts really used are now loaded in the PostScript file. Typically it reduces the file size by a factor 10 (compare to the previous implementation) for normal plots with math formulae and greek characters.; Offer 0 as line width option. Useful to make a line invisible. TPDF. When a text size was equal or smaller than 0 the PDF file was corrupted.; Small fix for fill patterns 1, 2 and 3.; When printing a coloured 2D histograms (with option COLZ) into a PDF or PostScript file, the preview on screen using many standard PDF previewer tools showed very thin white lines between the bins as well as in the color palette. This made very ugly the final output. This problem is due to bad implementation of anti-aliasing in these previewers. A way to bypass this issue was to turn off the anti-aliasing in the previewer but then the rest of the document does not look nice. This problem is now bypassed with a fix in both PDF and PostScript output.; Offer 0 as line width option. Useful to make a line invisible. TSVG. Use float numbers instead of integer to describe graphics paths to avoid rounding problems.; Implement missing math",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:22147,reduce,reduces,22147,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['reduce'],['reduces']
Energy Efficiency,"is now compared with the curve’s average values within a given bin by default, ensuring that residual and pull distributions are valid for strongly curved distributions. The old default behaviour was to interpolate the curve at the bin centres, which can still be enabled by setting the useAverage parameter of RooPlot::residHist or RooPlot::pullHist to false.; Improved recovery from invalid parameters; When a function in RooFit is undefined (Poisson with negative mean, PDF with negative values, etc), RooFit can now pass information about the “badness” of the violation to the minimiser. The minimiser can use this to compute a gradient to find its way out of the undefined region. This can drastically improve its ability to recover when unstable fit models are used, for example RooPolynomial.; For details, see the RooFit tutorial rf612_recoverFromInvalidParameters.C and arxiv:2012.02746.; Modernised RooDataHist; RooDataHist was partially modernised to improve const-correctness, to reduce side effects as well as its memory footprint, and to make it ready for RooFit’s faster batch evaluations. Derived classes that directly access protected members might need to be updated. This holds especially for direct accesses to _curWeight, _curWeightErrLo, etc, which have been removed. (It doesn’t make sense to write to these members from const functions when the same information can be retrieved using an index access operator of an array.) All similar accesses in derived classes should be replaced by the getters get_curWeight() or better get_wgt(i), which were also supported in ROOT <v6.24. More details on what happened:. Reduced side effects. This code produces undefined behaviour because the side effect of get(i), i.e., loading the new weight into _curWeight is not guaranteed to happen before weight() is called:. processEvent(dataHist.get(i), dataHist.weight()); // Dangerous! Order of evaluation is not guaranteed.; With the modernised interface, one would use:; processEvent(dataH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:22296,reduce,reduce,22296,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['reduce'],['reduce']
Energy Efficiency,"is object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMonitor.h>. Inheritance diagram for TMonitor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EInterest. enum TMonitor::EInterest. EnumeratorkRead ; kWrite . Definition at line 54 of file TMonitor.h. Constructor & Destructor Documentation. ◆ TMonitor() [1/2]. TMonitor::TMonitor ; (; Bool_t ; mainloop = kTRUE). Create a monitor object. ; If mainloop is true the monitoring will be done in the main event loop. ; Definition at line 109 of file TMonitor.cxx. ◆ TMonitor() [2/2]. TMonitor::TMonitor ; (; const TMonitor & ; m). Copy constructor. ; Definition at line 123 of file TMonitor.cxx. ◆ ~TMonitor(). TMonitor::~TMonitor ; (; ). virtual . Cleanup the monitor object. Does not delete sockets being monitored. ; Definition at line 153 of file TMonitor.cxx. Member Function Documentation. ◆ Activate(). void TMonitor::Activate ; (; TSocket * ; sock). virtual . Activate a de-activated socket. ; Definition at line 250 of file TMonitor.cxx. ◆ ActivateAll(). void TMonitor::ActivateAll ; (; ). virtual . Activate all de-activated sockets. ; Definition at line 268 of file TMonitor.cxx. ◆ Add(). void TMonitor::Add ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Add socket to the monitor's active list. ; If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 168 of file TMonitor.cxx. ◆ Class(). static TClass * TMonitor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMonitor::Class_Name ; (; ). static . Retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMonitor.html:17218,monitor,monitor,17218,doc/master/classTMonitor.html,https://root.cern,https://root.cern/doc/master/classTMonitor.html,1,['monitor'],['monitor']
Energy Efficiency,"is requested. The; function should copy the subset of dependents it can analytically; integrate to anaIntSet and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. Double_t analyticalIntegral(Int_t code). Implements the actual analytical integral(s) advertised by; getAnalyticalIntegral. This functions will only be called with; codes returned by getAnalyticalIntegral, except code zero. The integration range for real each dependent to be integrated can; be obtained from the dependents' proxy functions min() and; max(). Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g. in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. [Direct generation of observables]. Any PDF dependent can be generated with the accept/reject method,; but for certain PDFs more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars) and; void generateEvent(Int_t code). The first function advertises observables that can be generated,; similar to the way analytical integrals are advertised. The second; function implements the generator for the advertised observables. The generated dependent values should be store in the proxy; objects. For this the assignment operator can be used (i.e. xProxy; = 3.0 ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. Function Members (Methods); public:. virtual~GenSpec(); static TClass*Class(); RooAbsPdf::GenSpecGenSpec(); virtual TClass*IsA() const; RooAbsPdf::GenSpec&ope",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsPdf__GenSpec.html:3501,efficient,efficient,3501,root/html530/RooAbsPdf__GenSpec.html,https://root.cern,https://root.cern/root/html530/RooAbsPdf__GenSpec.html,8,['efficient'],['efficient']
Energy Efficiency,"is requested. The; function should copy the subset of dependents it can analytically; integrate to anaIntSet and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. Double_t analyticalIntegral(Int_t code). Implements the actual analytical integral(s) advertised by; getAnalyticalIntegral. This functions will only be called with; codes returned by getAnalyticalIntegral, except code zero. The integration range for real each dependent to be integrated can; be obtained from the dependents' proxy functions min() and; max(). Never call these proxy functions for any proxy not known to; be a dependent via the integration code. Doing so may be; ill-defined, e.g. in case the proxy holds a function, and will; trigger an assert. Integrated category dependents should always be; summed over all of their states. [Direct generation of observables]. Any PDF dependent can be generated with the accept/reject method,; but for certain PDFs more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars) and; void generateEvent(Int_t code). The first function advertises observables that can be generated,; similar to the way analytical integrals are advertised. The second; function implements the generator for the advertised observables. The generated dependent values should be store in the proxy; objects. For this the assignment operator can be used (i.e. xProxy; = 3.0 ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:3493,efficient,efficient,3493,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,10,['efficient'],['efficient']
Energy Efficiency,"is the equivalence of ""."" and ""->"". Not only is this wrong, this egregiously ignores performance concerns that come with dereferencing. It also ensures that people using ROOT/Cling while learning C++ will have trouble compiling their programs using actual compilers. It implies that you intend to keep the (at best) insane class hierarchy TF1 <- TF2 <- TF3 and so on. This example shows some of the major design flaws in ROOT -- a 2-dimensional function IS a 1-dimensional function? There is no abstract base class? No templates? It implies that you plan to keep the pointless T in front of all the names of ROOT, even though you will have access to namespaces (finally) and thus can move past the 1970's C practice of avoiding name collisions by a sort of weird Hungarian notation. It implies that you plan to maintain the outdated interfaces which make no use of templates. Templates are one of the most powerful features of C++, are more relevant to performance critical tasks than inheritance, and help ensure the type-safety of code (thereby ensuring the accuracy of data by helping to prevent accidental narrowing etc). It implies that you intend to continue to encourage the use of bare new and delete operators, instead of relying on the more efficient, reliable, and safe method of using RAII. Why? This begs the obvious question: why bother migrating at all? You wish to migrate to the modern and superior C++11 in order to not take advantage of its features? Why not just simply maintain ROOT5 and CINT, and just refuse to upgrade? ROOT is not a particularly good framework that is written in a language that isn't quite C++. If you are going to break away and make/use/write cling, then fix the poor design decisions: cling will probably break compatibility anyways despite your best efforts, so you might as well take the time and effort to refactor and clean up the code base. A simple example, taken from this website: """""" TFFTComplex One of the interface classes to the FFTW package, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:9740,power,powerful,9740,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['power'],['powerful']
Energy Efficiency,"is:; 2952 ; 2953| Option | Description |; 2954|----------|-------------------------------------------------------------------|; 2955| ""GL"" | Draw a TF3.|; 2956 ; 2957 ; 2958 ; 2959\anchor HP29e; 2960#### Parametric surfaces; 2961 ; 2962`$ROOTSYS/tutorials/gl/glparametric.C` shows how to create parametric; 2963equations and visualize the surface.; 2964 ; 2965\anchor HP29f; 2966#### Interaction with the plots; 2967 ; 2968All the interactions are implemented via standard methods; 2969`DistancetoPrimitive()` and `ExecuteEvent()`. That's why all the; 2970interactions with the OpenGL plots are possible only when the mouse cursor is; 2971in the plot's area (the plot's area is the part of a the pad occupied by; 2972gl-produced picture). If the mouse cursor is not above gl-picture, the standard; 2973pad interaction is performed.; 2974 ; 2975\anchor HP29g; 2976#### Selectable parts; 2977 ; 2978Different parts of the plot can be selected:; 2979 ; 2980- xoz, yoz, xoy back planes: When such a plane selected, it's highlighted in green; 2981 if the dynamic slicing by this plane is supported, and it's highlighted in red,; 2982 if the dynamic slicing is not supported.; 2983- The plot itself:; 2984 On surfaces, the selected surface is outlined in red. (TF3 and; 2985 ISO are not outlined). On lego plots, the selected bin is; 2986 highlighted. The bin number and content are displayed in pad's; 2987 status bar. In box plots, the box or sphere is highlighted and; 2988 the bin info is displayed in pad's status bar.; 2989 ; 2990 ; 2991\anchor HP29h; 2992#### Rotation and zooming; 2993 ; 2994 ; 2995- Rotation:; 2996 When the plot is selected, it can be rotated by pressing and; 2997 holding the left mouse button and move the cursor.; 2998- Zoom/Unzoom:; 2999 Mouse wheel or 'j', 'J', 'k', 'K' keys.; 3000 ; 3001 ; 3002\anchor HP29i; 3003#### Panning; 3004 ; 3005The selected plot can be moved in a pad's area by pressing and; 3006holding the left mouse button and the shift key.; 3007 ; 3008\anch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:118014,green,green,118014,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"isUTC = kTRUE, Int_t secOffset = 0); Create a TTimeStamp and set it to the specified year, month,; day, time, hour, minute, second and nanosec.; If !isUTC then it is assumed to be the standard local time zone. If local time is PST then one can use; TTimeStamp(year,month,day,hour,min,sec,nsec,kFALSE,0);; or; Int_t secOffset = 8*60*60;; TTimeStamp(year,month,day,hour,min,sec,nsec,kTRUE,8*60*60);. TTimeStamp(UInt_t date, UInt_t time, UInt_t nsec, Bool_t isUTC = kTRUE, Int_t secOffset = 0); Create a TTimeStamp and set it to the specified date, time, nanosec.; If !isUTC then it is assumed to be the standard local time zone. TTimeStamp(UInt_t tloc, Bool_t isUTC = kTRUE, Int_t secOffset = 0, Bool_t dosDate = kFALSE); Create a TTimeStamp and set it to tloc which must be a time_t value; returned by time(). This value is the number of seconds since the EPOCH; (i.e. 00:00:00 on Jan 1m 1970). If dosDate is true then the input; is a dosDate value. Double_t AsGMST(Double_t UT1Offset = 0) const; Return Greenwich mean sidereal time (GMST) in hour-angle. Return value; will always be between 0 and 24 (hours). Sidereal time is most accurately; calculated from UT1. If fSec and fNanoSec are in UTC (which they are by; default), the optional argument UT1Offset can be supplied (in; milliseconds). If UT1Offset is not supplied, conversion has maximum error; of 1s. If offset is supplied error can be reduced to us level. Values for; UT1Offset can be found in IERS Bulletin B:; ftp://ftp.iers.org/products/eop/bulletinb/format_2009; The conversion to sidereal time used here is given by; Aoki et. al. Astron. Astrophys. 105, 359-362 (1982); http://adsabs.harvard.edu/abs/1982A%26A...105..359A. Double_t AsGAST(Double_t UT1Offset = 0) const; Return Greenwich apparant sidereal time (GAST) in hour-angle. Return; value will always be between 0 and 24 (hours). Sidereal time is most; accurately calculated from UT1. If fSec and fNanoSec are in UTC (which; they are by default), the optional argument UT1Offset",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTimeStamp.html:5094,Green,Greenwich,5094,root/html534/TTimeStamp.html,https://root.cern,https://root.cern/root/html534/TTimeStamp.html,2,['Green'],['Greenwich']
Energy Efficiency,"ise construction of an RNTupleDescriptor. More...;  ; class  RNTupleFileWriter;  Write RNTuple data blocks in a TFile or a bare file container. More...;  ; class  RNTupleImtTaskScheduler;  ; class  RNTupleIndex;  Builds an index on one or several fields of an RNTuple so it can be joined onto other RNTuples. More...;  ; struct  RNTupleMergeData;  ; struct  RNTupleMergeOptions;  ; class  RNTupleMerger;  Given a set of RPageSources merge them into an RPageSink, optionally changing their compression. More...;  ; class  RNTupleModelChangeset;  The incremental changes to a RNTupleModel More...;  ; class  RNTupleSerializer;  A helper class for serializing and deserialization of the RNTuple binary format. More...;  ; class  RNTupleWriteOptionsManip;  ; class  ROnDiskPage;  A page as being stored on disk, that is packed and compressed. More...;  ; class  ROnDiskPageMap;  A memory region that contains packed and compressed pages. More...;  ; class  ROnDiskPageMapHeap;  An ROnDiskPageMap that is used for an fMemory allocated as an array of unsigned char. More...;  ; class  RPage;  A page is a slice of a column that is mapped into memory. More...;  ; class  RPageAllocator;  Abstract interface to allocate and release pages. More...;  ; class  RPageAllocatorHeap;  Uses standard C++ memory allocation for the column data pages. More...;  ; class  RPageNullSink;  Dummy sink that discards all pages. More...;  ; class  RPagePersistentSink;  Base class for a sink with a physical storage backend. More...;  ; class  RPagePool;  A thread-safe cache of pages loaded from the page source. More...;  ; class  RPageRef;  Reference to a page stored in the page pool. More...;  ; class  RPageSink;  Abstract interface to write data into an ntuple. More...;  ; class  RPageSinkBuf;  Wrapper sink that coalesces cluster column page writes. More...;  ; class  RPageSinkDaos;  Storage provider that writes ntuple pages to into a DAOS container. More...;  ; class  RPageSinkFile;  Storage provider that write",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html:7644,allocate,allocated,7644,doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental_1_1Internal.html,1,['allocate'],['allocated']
Energy Efficiency,"ise) ;  ; void setMonitoring (std::shared_ptr< Monitoring > ptrMonitoring);  prepared for monitoring ;  ; virtual void setProgressLimits (double minProgress=0, double maxProgress=100);  ; virtual void startTraining ();  ; size_t testRepetitions () const;  how often is the test data tested ;  ; bool useMultithreading () const;  is multithreading turned on? ;  . Public Attributes; std::vector< double > m_ams;  ; double m_cutValue;  ; std::string m_fileNameNetConfig;  ; std::string m_fileNameResult;  ; std::vector< double > m_input;  ; std::vector< double > m_output;  ; std::vector< Pattern > * m_pResultPatternContainer;  ; size_t m_scaleToNumEvents;  ; std::vector< double > m_significances;  ; double m_sumOfBkgWeights;  ; double m_sumOfSigWeights;  ; std::vector< double > m_targets;  ; std::vector< double > m_weights;  ;  Public Attributes inherited from TMVA::DNN::Settings; size_t count_dE;  ; size_t count_E;  ; size_t count_mb_dE;  ; size_t count_mb_E;  ; double fLearningRate;  ; MinimizerType fMinimizerType;  ; double fMomentum;  ; int fRepetitions;  ; size_t m_batchSize;  mini-batch size ;  ; size_t m_convergenceCount;  ; size_t m_convergenceSteps;  number of steps without improvement to consider the DNN to have converged ;  ; std::vector< double > m_dropOut;  ; double m_dropRepetitions;  ; double m_factorWeightDecay;  ; size_t m_maxConvergenceCount;  ; double m_maxProgress;  current limits for the progress bar ;  ; double m_minError;  ; double m_minProgress;  current limits for the progress bar ;  ; EnumRegularization m_regularization;  ; size_t m_testRepetitions;  ; Timer m_timer;  timer for monitoring ;  . Additional Inherited Members;  Protected Attributes inherited from TMVA::DNN::Settings; std::shared_ptr< Monitoring > fMonitoring;  ; bool m_useMultithreading;  . #include <TMVA/NeuralNet.h>. Inheritance diagram for TMVA::DNN::ClassificationSettings:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:6111,monitor,monitoring,6111,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,1,['monitor'],['monitoring']
Energy Efficiency,"isplays; 3326/// with more than 8 planes we will be able to create GIF's when the image; 3327/// contains no more than 256 different colors). If it does contain more; 3328/// colors we will have to use GIFquantize to reduce the number of colors.; 3329/// The R G B arrays must be deleted by the caller.; 3330 ; 3331void TGX11::ImgPickPalette(RXImage *image, Int_t &ncol, Int_t *&R, Int_t *&G, Int_t *&B); 3332{; 3333 ULong_t *orgcolors = nullptr;; 3334 Int_t maxcolors = 0, ncolors = 0;; 3335 ; 3336 // collect different image colors; 3337 int x, y;; 3338 for (x = 0; x < (int) gCws->fWidth; x++) {; 3339 for (y = 0; y < (int) gCws->fHeight; y++) {; 3340 ULong_t pixel = XGetPixel(image, x, y);; 3341 CollectImageColors(pixel, orgcolors, ncolors, maxcolors);; 3342 }; 3343 }; 3344 ; 3345 // get RGB values belonging to pixels; 3346 RXColor *xcol = new RXColor[ncolors];; 3347 ; 3348 int i;; 3349 for (i = 0; i < ncolors; i++) {; 3350 xcol[i].pixel = orgcolors[i];; 3351 xcol[i].red = xcol[i].green = xcol[i].blue = 0;; 3352 xcol[i].flags = DoRed | DoGreen | DoBlue;; 3353 }; 3354 QueryColors(fColormap, xcol, ncolors);; 3355 ; 3356 // create RGB arrays and store RGB's for each color and set number of colors; 3357 // (space must be delete by caller); 3358 R = new Int_t[ncolors];; 3359 G = new Int_t[ncolors];; 3360 B = new Int_t[ncolors];; 3361 ; 3362 for (i = 0; i < ncolors; i++) {; 3363 R[i] = xcol[i].red;; 3364 G[i] = xcol[i].green;; 3365 B[i] = xcol[i].blue;; 3366 }; 3367 ncol = ncolors;; 3368 ; 3369 // update image with indices (pixels) into the new RGB colormap; 3370 for (x = 0; x < (int) gCws->fWidth; x++) {; 3371 for (y = 0; y < (int) gCws->fHeight; y++) {; 3372 ULong_t pixel = XGetPixel(image, x, y);; 3373 Int_t idx = FindColor(pixel, orgcolors, ncolors);; 3374 XPutPixel(image, x, y, idx);; 3375 }; 3376 }; 3377 ; 3378 // cleanup; 3379 delete [] xcol;; 3380 ::operator delete(orgcolors);; 3381}; 3382 ; 3383/////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:111298,green,green,111298,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"ist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ; file  statsEditing.C;   Edit statistics box. ;  ; file  testSmooth.C;   Histogram smoothing. ;  ; file  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ; file  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ; file  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ; file  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ; file  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ; file  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ; file  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  tprofile2polyRealistic.C;   Different charges depending on region ;  ; file  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ; file  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ; file  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ; file  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ; file  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__hist.html:6517,charge,charges,6517,doc/master/group__tutorial__hist.html,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html,1,['charge'],['charges']
Energy Efficiency,"ist;; 64class TEntryList;; 65class TSQLResult;; 66class TSelector;; 67class TPrincipal;; 68class TFriendElement;; 69class TCut;; 70class TVirtualIndex;; 71class TBranchRef;; 72class TBasket;; 73class TStreamerInfo;; 74class TTreeCache;; 75class TTreeCloner;; 76class TFileMergeInfo;; 77class TVirtualPerfStats;; 78 ; 79class TTree : public TNamed, public TAttLine, public TAttFill, public TAttMarker {; 80 ; 81 using TIOFeatures = ROOT::TIOFeatures;; 82 ; 83protected:; 84 Long64_t fEntries; ///< Number of entries; 85// NOTE: cannot use std::atomic for these counters as it cannot be serialized.; 86 Long64_t fTotBytes; ///< Total number of bytes in all branches before compression; 87 Long64_t fZipBytes; ///< Total number of bytes in all branches after compression; 88 Long64_t fSavedBytes; ///< Number of autosaved bytes; 89 Long64_t fFlushedBytes; ///< Number of auto-flushed bytes; 90 Double_t fWeight; ///< Tree weight (see TTree::SetWeight); 91 Int_t fTimerInterval; ///< Timer interval in milliseconds; 92 Int_t fScanField; ///< Number of runs before prompting in Scan; 93 Int_t fUpdate; ///< Update frequency for EntryLoop; 94 Int_t fDefaultEntryOffsetLen; ///< Initial Length of fEntryOffset table in the basket buffers; 95 Int_t fNClusterRange; ///< Number of Cluster range in addition to the one defined by 'AutoFlush'; 96 Int_t fMaxClusterRange; ///<! Memory allocated for the cluster range.; 97 Long64_t fMaxEntries; ///< Maximum number of entries in case of circular buffers; 98 Long64_t fMaxEntryLoop; ///< Maximum number of entries to process; 99 Long64_t fMaxVirtualSize; ///< Maximum total size of buffers kept in memory; 100 Long64_t fAutoSave; ///< Autosave tree when fAutoSave entries written or -fAutoSave (compressed) bytes produced; 101 Long64_t fAutoFlush; ///< Auto-flush tree when fAutoFlush entries written or -fAutoFlush (compressed) bytes produced; 102 Long64_t fEstimate; ///< Number of entries to estimate histogram limits; 103 Long64_t *fClusterRangeEnd; ///<[fNClus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:3303,allocate,allocated,3303,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['allocate'],['allocated']
Energy Efficiency,"istFunc::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 135 of file RooHistFunc.h. ◆ isBinnedDistribution(). bool RooHistFunc::isBinnedDistribution ; (; const RooArgSet & ; ); const. inlineoverridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 95 of file RooHistFunc.h. ◆ maxVal(). double RooHistFunc::maxVal ; (; Int_t ; code); const. overridevirtual . Return maximum value for set of observables identified by code assigned in getMaxVal. ; Reimplemented from RooAbsReal.; Definition at line 250 of file RooHistFunc.cxx. ◆ plotSamplingHint(). std::list< double > * RooHistFunc::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ; Reimplemented from RooAbsReal.; Definition at line 336 of file RooHistFunc.cxx. ◆ setCdfBoundaries(). void RooHistFunc::setCdfBoundaries ; (; bool ; flag). inline . Set use of special boundary conditions for c.d.f.s. ; Definition at line 80 of file RooHistFunc.h. ◆ setInterpolationOrder(). void RooHistFunc::setInterpolationOrder ; (; Int_t ; order). inline . Set histogram interpolation order. ; Definition at line 63 of file RooHistFunc.h. ◆ Streamer(). void RooHistFunc::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class RooHistFunc. ; Reimplemented from RooAbsReal.; Definition at line 516 of file RooHistFunc.cxx. ◆ StreamerNVirtual(). void RooHistFunc::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 135 of file RooHistFunc.h. ◆ totVolume(). double RooHistFunc::totVolume ; (; ); const. Get total bin volume span",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:72612,efficient,efficiently,72612,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,1,['efficient'],['efficiently']
Energy Efficiency,"istograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfAverageEvtPerBinaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarBaverage events per bin; used to calculate fNbins; Int_t*fAverageEvtPerBinVarSaverage events per bin; used to calculate fNbins; TStringfBorderMethodStringthe method to take care about ""border"" effects (string); TMVA::PDF*fDefaultPDFLikpdf that contains default definitions; Int_tfDropVariablefor ranking test; Double_tfEpsilonminimum number of likelihood (to avoid zero); vector<TH1*>*fHistBgdbackground PDFs (histograms); vector<TH1*>*fHistBgd_smoothbackground PDFs (smoothed histograms); vector<TH1*>*fHistSigsignal PDFs (histograms); vector<TH1*>*fHistSig_smoothsignal PDFs (smoothed histograms); TString*fInterpolateStringwhich interpolation method used for reference histograms (individual for each variable); Float_tfKDEfineFactorfine tuning factor for Adaptive KDE; TStringfKDEiterStringNumber of iterations (string); TStringfKDEtypeStringKernel type to use for KDE (string); Int_tfNsmoothnumber of smooth passes; Int_t*fNsmoothVarBnumber of smooth passes; Int_t*fNsmoothVarSnumber of smooth passes; vector<TMVA::PDF*>*fPDFBgdlist of PDFs (background); vector<TMVA::PDF*>*fPDFSiglist of PDFs (signal); Bool_tfTransformLikelihoodOutputlikelihood output is sigmoid-transformed. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodLikelihood(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); standard constructor. MethodLikelihood(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodLikelihood.html:20514,Adapt,Adaptive,20514,root/html602/TMVA__MethodLikelihood.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodLikelihood.html,2,['Adapt'],['Adaptive']
Energy Efficiency,"istribution. The probability density function of the Vavilov distribution; as function of Landau's parameter is given by:; \f[ p(\lambda_L; \kappa, \beta^2) =; \frac{1}{2 \pi i}\int_{c-i\infty}^{c+i\infty} \phi(s) e^{\lambda_L s} ds\f]; where \f$\phi(s) = e^{C} e^{\psi(s)}\f$; with \f$ C = \kappa (1+\beta^2 \gamma )\f$; and \f$\psi(s)= s \ln \kappa + (s+\beta^2 \kappa); \cdot \left ( \int \limits_{0}^{1}; \frac{1 - e^{\frac{-st}{\kappa}}}{t} \,d t- \gamma \right ); - \kappa \, e^{\frac{-s}{\kappa}}\f$.; \f$ \gamma = 0.5772156649\dots\f$ is Euler's constant. For the class VavilovFast,; Pdf returns the Vavilov distribution as function of Landau's parameter; \f$\lambda_L = \lambda_V/\kappa - \ln \kappa\f$,; which is the convention used in the CERNLIB routines, and in the tables; by S.M. Seltzer and M.J. Berger: Energy loss stragglin of protons and mesons:; Tabulation of the Vavilov distribution, pp 187-203; in: National Research Council (U.S.), Committee on Nuclear Science:; Studies in penetration of charged particles in matter,; Nat. Akad. Sci. Publication 1133,; Nucl. Sci. Series Report No. 39,; Washington (Nat. Akad. Sci.) 1964, 388 pp.; Available from; <A HREF=""http://books.google.de/books?id=kmMrAAAAYAAJ&lpg=PP9&pg=PA187#v=onepage&q&f=false"">Google books</A>. Therefore, for small values of \f$\kappa < 0.01\f$,; pdf approaches the Landau distribution. For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). For values \f$\kappa > 10\f$, the Gauss approximation should be used; with \f$\mu\f$ and \f$\sigma\f$ given by Vavilov::mean(kappa, beta2); and sqrt(Vavilov::variance(kappa, beta2). The original Vavilov pdf is obtained by; v.Pdf(lambdaV/kappa-log(kappa))/kappa. For detailed description see; A. Rotondi and P. Montagna, Fast calculation of Vavilov distribution,; <A HREF=""http://dx.doi.org/10.1016/0168-583X(90)90749-K"">Nucl. Instr. and Meth. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__VavilovFast.html:1361,charge,charged,1361,root/html528/ROOT__Math__VavilovFast.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__VavilovFast.html,10,['charge'],['charged']
Energy Efficiency,"ists at a slot becomes longer than; rehashlevel then the hashtable will be resized and refilled to reduce; the collision rate to about 1. The higher the collision rate, i.e. the; longer the linked lists, the longer lookup will take. If rehashlevel=0; the table will NOT automatically be rehashed. Use Rehash() for manual; rehashing. ~THashTable(); Delete a hashtable. Objects are not deleted unless the THashTable is the; owner (set via SetOwner()). void Add(TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function. void AddBefore(const TObject* before, TObject* obj); Add object to the hash table. Its position in the table will be; determined by the value returned by its Hash() function.; If and only if 'before' is in the same bucket as obj, obj is added; in front of 'before' within the bucket's list. void AddAll(const TCollection* col); Add all objects from collection col to this collection.; Implemented for more efficient rehashing. void Clear(Option_t* option = """"); Remove all objects from the table. Does not delete the objects; unless the THashTable is the owner (set via SetOwner()). Int_t Collisions(const char* name) const; Returns the number of collisions for an object with a certain name; (i.e. number of objects in same slot in the hash table, i.e. length; of linked list). Int_t Collisions(TObject* obj) const; Returns the number of collisions for an object (i.e. number of objects; in same slot in the hash table, i.e. length of linked list). void Delete(Option_t* option = """"); Remove all objects from the table AND delete all heap based objects. TObject * FindObject(const char* name) const; Find object using its name. Uses the hash value returned by the; TString::Hash() after converting name to a TString. TObject * FindObject(const TObject* obj) const; Find object using its hash value (returned by its Hash() member). TList * GetListForObject(const char* name) const; Return the TList corres",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THashTable.html:9820,efficient,efficient,9820,root/html534/THashTable.html,https://root.cern,https://root.cern/root/html534/THashTable.html,6,['efficient'],['efficient']
Energy Efficiency,"it(const char* monserver, const char* montag, const char* monid, const char* monsubid, const char* option); Creates a TMonaLisaWriter object to send monitoring information to a; MonaLisa server using the MonaLisa ApMon package (libapmoncpp.so/UDP; packets). The MonaLisa ApMon library for C++ can be downloaded at; http://monalisa.cacr.caltech.edu/monalisa__Download__ApMon.html,; current version:; http://monalisa.cacr.caltech.edu/download/apmon/ApMon_cpp-2.0.6.tar.gz. The ROOT implementation is primary optimized for process/job monitoring,; although all other generic MonaLisa ApMon functionality can be exploited; through the ApMon class directly (gMonitoringWriter->GetApMon()). Monitoring information in MonaLisa is structured in the following tree; structure:; <farmname>; |; ---> <nodename1>; |; ---> <key1> - <value1>; ---> <key2> - <value2>; ---> <nodename2>; |; ---> <key3> - <value3>; ---> <key4> - <value4>. The parameter monid is equivalent to the MonaLisa node name, for the; case of process monitoring it can be just an identifier to classify; the type of jobs e.g. ""PROOF_PROCESSING"".; If monid is not specified, TMonaLisaWriter tries to set it in this order; from environement variables:; - PROOF_JOB_ID; - GRID_JOB_ID; - LCG_JOB_ID; - ALIEN_MASTERJOB_ID; - ALIEN_PROC_ID. The parameter montag is equivalent to the MonaLisa farm name, for the; case of process monitoring it can be a process identifier e.g. a PROOF; session ID. The parameter monserver specifies the server to whom to send the; monitoring UDP packets. If not specified, the hostname (the port is; a default one) is specified in the environment variable APMON_CONFIG. To use TMonaLisaWriter, libMonaLisa.so has to be loaded. According to the fact, that the deepness of the MonaLisa naming scheme; is only 3 (<farm><node><value>), a special naming scheme is used for; process monitoring. There is a high-level method to send progress; information of Tree analysis (# of events, datasize).; To distinguish individual no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMonaLisaWriter.html:10337,monitor,monitoring,10337,root/html530/TMonaLisaWriter.html,https://root.cern,https://root.cern/root/html530/TMonaLisaWriter.html,3,['monitor'],['monitoring']
Energy Efficiency,"itTrans(); Reset matrix to unity. void ZeroTrans(Double_t w = 1.); Reset matrix to zero, only the perspective scaling is set to w; (1 by default). void UnitRot(); Reset rotation part of the matrix to unity. void SetTrans(const TEveTrans& t, Bool_t copyAngles = kTRUE); Set matrix from another,. void SetFromArray(const Double_t arr[16]); Set matrix from Double_t array. void SetFromArray(const Float_t arr[16]); Set matrix from Float_t array. void SetupRotation(Int_t i, Int_t j, Double_t f); Setup the matrix as an elementary rotation.; Optimized versions of left/right multiplication with an elementary; rotation matrix are implemented in RotatePF/RotateLF.; Expects identity matrix. void SetupFromToVec(const TEveVector& from, const TEveVector& to); A function for creating a rotation matrix that rotates a vector called; ""from"" into another vector called ""to"".; Input : from[3], to[3] which both must be *normalized* non-zero vectors; Output: mtx[3][3] -- a 3x3 matrix in colum-major form; Authors: Tomas M�ller, John Hughes; ""Efficiently Building a Matrix to Rotate One Vector to Another""; Journal of Graphics Tools, 4(4):1-4, 1999. void MultLeft(const TEveTrans& t); Multiply from left: this = t * this. void MultRight(const TEveTrans& t); Multiply from right: this = this * t. TEveTrans operator*(const TEveTrans& t); Copy, multiply from right and return product.; Avoid unless necessary. void TransposeRotationPart(); Transpose 3x3 rotation sub-matrix. void MoveLF(Int_t ai, Double_t amount); Move in local-frame along axis with index ai. void Move3LF(Double_t x, Double_t y, Double_t z); General move in local-frame. void RotateLF(Int_t i1, Int_t i2, Double_t amount); Rotate in local frame. Does optimised version of MultRight. void MovePF(Int_t ai, Double_t amount); Move in parent-frame along axis index ai. void Move3PF(Double_t x, Double_t y, Double_t z); General move in parent-frame. void RotatePF(Int_t i1, Int_t i2, Double_t amount); Rotate in parent frame. Does optimised version of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTrans.html:11370,Efficient,Efficiently,11370,root/html602/TEveTrans.html,https://root.cern,https://root.cern/root/html602/TEveTrans.html,2,['Efficient'],['Efficiently']
Energy Efficiency,"ite this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void CalcNorm (const std::vector< const Event * > &);  TODO --> adapt to variable,target,spectator selection method to calculate minimum, maximum, mean, and RMS for all variables used in the MVA. ;  ; Int_t GetNClasses () const;  ; UInt_t GetNSpectators () const;  ; UInt_t GetNTargets () const;  ; UInt_t GetNVariables () const;  ; void SetCreated (Bool_t c=kTRUE);  ; void SetName (const TString &c);  ; void SetNVariables (UInt_t i);  ; std::vector< TMVA::VariableInfo > & Spectators ();  ; std::vector< TMVA::VariableInfo > & Targets ();  ; std::vector< TMVA::VariableInfo > & Variables ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Event * fBackTransformedEvent;  holds the current back-transformed event ;  ; DataSetInfo & fDsi;  ; DataSetInfo * fDsiOutput;  ; VectorOfCharAndInt fGet;  get variables/targets/spectators ;  ; MsgLogger * fLogger;  ! message logger ;  ; VectorOfCharAn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html:12555,adapt,adapt,12555,doc/master/classTMVA_1_1VariableTransformBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html,1,['adapt'],['adapt']
Energy Efficiency,"iterator rbegin () const noexcept;  ; reverse_iterator rbegin () noexcept;  ; const_reverse_iterator rend () const noexcept;  ; reverse_iterator rend () noexcept;  ; size_t size () const;  ; size_type size_in_bytes () const;  ;  Public Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase; size_t capacity () const noexcept;  ; bool empty () const;  ; void set_size (size_t N);  Set the array size to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using SuperClass = Internal::VecOps::SmallVectorTemplateBase< T >;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:5440,allocate,allocated,5440,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,1,['allocate'],['allocated']
Energy Efficiency,"ithin <td>..</td> or <th>..</th>; intfInTrTrue if within <tr>..</tr>; TGHtmlListStart*fInnerListThe inner most <OL> or <UL>; intfInputIdxUnique input index; SHtmlIndex_tfInsThe insertion cursor position; intfInsIndexIndex in pInsBlock of the cursor; intfInsOffTimeHow long it is off (milliseconds); intfInsOnTimeHow long the cursor states one (millisec); intfInsStatusIs it visible?; TTimer*fInsTimerTimer used to flash the insertion cursor; TGHtmlBlock*fLastBlockLast TGHtmlBlock in the list; intfLastGCIndex of recently used GC; TGHtmlInput*fLastInputLast <INPUT> element; TGHtmlElement*fLastSizedLast HTML element that has been sized; const char*fLastUriUsed in HandleMotion; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGHtmlLayoutContextfLayoutContext; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TGHtmlElement*fLoEndPtrHow far AddStyle has gone to; TGHtmlForm*fLoFormStartFor AddStyle; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; TGInsetsfMarginsdocument margins (separation between the; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; intfMaxX; intfMaxYMaximum extent of any ""paint"" that appears; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TGLongPositionTGView::fMousePosposition of mouse; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); intfNAllocSpace allocated for zText; intfNCompleteHow much of zText has actually been; intfNFormThe number of <FORM> elements; intfNInputThe number of <INPUT> elements; intfNTextNumber of characters in zText; intfNTokenNumber of HTML tokens on the list.; TStringTGWindow::fNamename of the window used in SavePrimitiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHtml.html:27843,allocate,allocated,27843,root/html528/TGHtml.html,https://root.cern,https://root.cern/root/html528/TGHtml.html,6,['allocate'],['allocated']
Energy Efficiency,"ithm). GSLSimAnFunc(). derived classes might need to re-define completely the class. {}. virtual ~GSLSimAnFunc(); virtual distructor (no operations). { }. GSLSimAnFunc & FastCopy(const ROOT::Math::GSLSimAnFunc& f). fast copy method called by GSL simuated annealing internally; copy only the things which have been changed; must be re-implemented by derived classes if needed. GSLSimAnFunc * Clone() const. clone method. Needs to be re-implemented by the derived classes for deep copying. return new GSLSimAnFunc(const ROOT::Math::GSLSimAnFunc& ). double Energy() const. evaluate the energy ( objective function value); re-implement by derived classes if needed to be modified. void Step(const ROOT::Math::GSLRandomEngine& r, double maxstep). change the x[i] value using a random value urndm generated between [0,1]; up to a maximum value maxstep; re-implement by derived classes if needed to be modified. double Distance(const ROOT::Math::GSLSimAnFunc& func) const. calculate the distance (metric) between this one and another configuration; Presently a cartesian metric is used.; re-implement by derived classes if needed to be modified. void Print(). print the position in the standard output std::ostream; GSL prints in addition n iteration, n function calls, temperature and energy; re-implement by derived classes if necessary. void SetX(const double* x). change the x values (used by sim annealing to take a step). void SetX(unsigned int i, double x). unsigned int NDim() const; { return fX.size(); }. double X(unsigned int i) const; { return fX[i]; }. const std::vector<double> & X() const; { return fX; }. double Scale(unsigned int i) const; { return fScale[i]; }. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-06-30 14:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLSimAnFunc.html:3600,energy,energy,3600,root/html602/ROOT__Math__GSLSimAnFunc.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLSimAnFunc.html,2,['energy'],['energy']
Energy Efficiency,"ithm). GSLSimAnFunc(). derived classes might need to re-define completely the class. {}. virtual ~GSLSimAnFunc(); virtual distructor (no operations). { }. GSLSimAnFunc & FastCopy(const ROOT::Math::GSLSimAnFunc& f). fast copy method called by GSL simuated annealing internally; copy only the things which have been changed; must be re-implemented by derived classes if needed. GSLSimAnFunc * Clone() const. clone method. Needs to be re-implemented by the derived classes for deep copying. return new GSLSimAnFunc(const ROOT::Math::GSLSimAnFunc& ). double Energy() const. evaluate the energy ( objective function value); re-implement by derived classes if needed to be modified. void Step(const ROOT::Math::GSLRandomEngine& r, double maxstep). change the x[i] value using a random value urndm generated between [0,1]; up to a maximum value maxstep; re-implement by derived classes if needed to be modified. double Distance(const ROOT::Math::GSLSimAnFunc& func) const. calculate the distance (metric) between this one and another configuration; Presently a cartesian metric is used.; re-implement by derived classes if needed to be modified. void Print(). print the position in the standard output std::ostream; GSL prints in addition n iteration, n function calls, temperature and energy; re-implement by derived classes if necessary. void SetX(const double* x). change the x values (used by sim annealing to take a step). void SetX(unsigned int i, double x). unsigned int NDim() const; { return fX.size(); }. double X(unsigned int i) const; { return fX[i]; }. const std::vector<double> & X() const; { return fX; }. double Scale(unsigned int i) const; { return fScale[i]; }. » Author: L. Moneta Thu Jan 25 11:13:48 2007 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html:3600,energy,energy,3600,root/html604/ROOT__Math__GSLSimAnFunc.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__GSLSimAnFunc.html,2,['energy'],['energy']
Energy Efficiency,"ithms. ; Definition at line 68 of file GSLDerivator.h. ◆ ~GSLDerivator(). virtual ROOT::Math::GSLDerivator::~GSLDerivator ; (; ). inlinevirtual . destructor (no operations) ; Definition at line 71 of file GSLDerivator.h. Member Function Documentation. ◆ Error(). double ROOT::Math::GSLDerivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 111 of file GSLDerivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 99 of file GSLDerivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 47 of file GSLDerivator.cxx. ◆ EvalForward() [1/2]. double ROOT::Math::GSLDerivator::EvalForward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive forward diff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:3836,adapt,adaptive,3836,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html,1,['adapt'],['adaptive']
Energy Efficiency,"itial token is non-numeric, a RooCategory will be created, and the args are interpreted; as either state names or 'name=id' assignments. Otherwise a RooRealvar is created and the; arg list is interpreted as follows:; If list has two args, these are interpreted as xmin,xmax; If list has three args, these are interpreted as xinit,xmin,xmax; If list has one arg, this is interpreted as xinit and the variable is set as constant. string processCreateArg(string& func, vector<string>& args); Glue function between high-level syntax and low-level factory call to createArg:; Process a parsed call to create a p.d.f named func. The func arg is interpreted as ClassName::ObjectName and the arglist is passed; verbatim to createArg. The received arglist is expected to be fully reduced (i.e.; all inline object creations must have been compiled). std::string processMetaArg(string& func, vector<string>& args); Concatenate list of args into comma separated string. vector<string> splitFunctionArgs(const char* funcExpr); Allocate and fill work buffer. Bool_t checkSyntax(const char* arg); Perform basic syntax on given factory expression. If function returns; true syntax errors are found. void checkIndex(UInt_t index). RooAbsArg& asARG(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. RooAbsReal& asFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsReal reference found in workspace. RooAbsRealLValue& asVARLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsRealLValue reference found in workspace. RooRealVar& asVAR(const char* ); CINT constructor interface, return constructor string argument #idx as RooRealVar reference found in workspace. RooAbsPdf& asPDF(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsPdf reference found in workspace. RooResolutionModel& asRMODEL(const char* ); CINT co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFactoryWSTool.html:20470,Allocate,Allocate,20470,root/html602/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html602/RooFactoryWSTool.html,2,['Allocate'],['Allocate']
Energy Efficiency,"ition RColor.hxx:183; ROOT::Experimental::RColor::kBlackstatic R__DLLEXPORT constexpr RGB_t kBlackDefinition RColor.hxx:178; ROOT::Experimental::RColor::IsNamebool IsName() constReturns true if color specified as name.Definition RColor.cxx:75; ROOT::Experimental::RColor::kTealstatic R__DLLEXPORT constexpr RGB_t kTealDefinition RColor.hxx:187; ROOT::Experimental::RColor::kAquastatic R__DLLEXPORT constexpr RGB_t kAquaDefinition RColor.hxx:181; ROOT::Experimental::RColor::RColorRColor(uint8_t r, uint8_t g, uint8_t b)Construct color with provided r,g,b values.Definition RColor.hxx:53; ROOT::Experimental::RColor::SetColorvoid SetColor(const std::string &col)Set color as string.Definition RColor.hxx:160; ROOT::Experimental::RColor::kTransparentstatic R__DLLEXPORT constexpr float kTransparentDefinition RColor.hxx:194; ROOT::Experimental::RColor::AsStringconst std::string & AsString() constReturns color as it stored as string.Definition RColor.hxx:157; ROOT::Experimental::RColor::GetGreenuint8_t GetGreen() constReturns green color component 0..255.Definition RColor.hxx:116; ROOT::Experimental::RColor::GetAlphauint8_t GetAlpha() constReturns color alpha (opacity) as uint8_t 0..255.Definition RColor.hxx:130; ROOT::Experimental::RColor::kBluestatic R__DLLEXPORT constexpr RGB_t kBlueDefinition RColor.hxx:186; ROOT::Experimental::RColor::RColorRColor()=default; ROOT::Experimental::RColor::kNavystatic R__DLLEXPORT constexpr RGB_t kNavyDefinition RColor.hxx:185; ROOT::Experimental::RColor::AsHexstd::string AsHex(bool with_alpha=false) constReturns color value in hex format like ""66FF66"" - without any prefix Alpha parameter can be optionall...Definition RColor.cxx:275; ROOT::Experimental::RColor::Clearvoid Clear()Definition RColor.hxx:171; ROOT::Experimental::RColor::kOlivestatic R__DLLEXPORT constexpr RGB_t kOliveDefinition RColor.hxx:188; ROOT::Experimental::RColor::GetOrdinalfloat GetOrdinal() constReturn ordinal value, which was set before with SetOrdinal() call.Definition RColo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RColor_8hxx_source.html:12543,green,green,12543,doc/master/RColor_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RColor_8hxx_source.html,1,['green'],['green']
Energy Efficiency,"ition TLegend.cxx:320; TLegend::Drawvoid Draw(Option_t *option="""") overrideDraw this legend with its current attributes.Definition TLegend.cxx:425; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObject::DrawClonevirtual TObject * DrawClone(Option_t *option="""") constDraw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1).Definition TObject.cxx:305; TPad::Dividevoid Divide(Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) overrideAutomatic pad generation by division.Definition TPad.cxx:1249; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TStringBasic string class.Definition TString.h:139; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; TVirtualFitter::SetDefaultFitterstatic void SetDefaultFitter(const char *name="""")static: set name of default fitterDefinition TVirtualFitter.cxx:245; c1return c1Definition legend1.C:41; grTGraphErrors * grDefinition legend1.C:25; h1TH1F * h1Definition legend1.C:5; PyTorch_Generate_CNN_Model.fitfit(model, train_loader, val_loader, num_epochs, batch_size, optimizer, criterion, save_best, scheduler)Definition PyTorch_Generate_CNN_Model.py:34; ROOT::Fit::FillDatavoid FillData(BinData &dv, const TH1 *hist, TF1 *func=nullptr)fill the data vector from a TH1.Definition HFitInterface.cxx:107; AuthorRene Brun ; Definition in file TestBinomial.C. tutorialsfitTestBinomial.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TestBinomial_8C.html:63089,schedul,scheduler,63089,doc/master/TestBinomial_8C.html,https://root.cern,https://root.cern/doc/master/TestBinomial_8C.html,1,['schedul'],['scheduler']
Energy Efficiency,"itle to stringy,etc. TGraph2D(Int_t n); Graph2D constructor. The arrays fX, fY and fZ should be filled via; calls to SetPoint. TGraph2D(const char* filename, const char* format = ""%lg %lg %lg"", Option_t* option = """"); Graph2D constructor reading input from filename; filename is assumed to contain at least three columns of numbers.; For files separated by a specific delimiter different from ' ' and '\t' (e.g. ';' in csv files); you can avoid using %*s to bypass this delimiter by explicitly specify the ""option"" argument,; e.g. option="" \t,;"" for columns of figures separated by any of these characters (' ', '\t', ',', ';'); used once (e.g. ""1;1"") or in a combined way ("" 1;,;; 1"").; Note in that case, the instanciation is about 2 times slower. TGraph2D(const TGraph2D& ); Graph2D copy constructor. ~TGraph2D(); TGraph2D destructor. TGraph2D& operator=(const TGraph2D& ); Graph2D operator ""="". void Build(Int_t n); Creates the 2D graph basic data structure. void Clear(Option_t* option = """"); Free all memory allocated by this object. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the graph to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); Computes distance from point px,py to a graph. void Draw(Option_t* option = """"); Specific drawing options can be used to paint a TGraph2D:. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraph2D.html:19441,allocate,allocated,19441,root/html532/TGraph2D.html,https://root.cern,https://root.cern/root/html532/TGraph2D.html,2,['allocate'],['allocated']
Energy Efficiency,"itle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. TIterator*RooAbsDataStore::_cacheIter! Iterator over cached variables; RooArgSetRooAbsDataStore::_cachedVars; Int_t_curIndex! Index associated with current event; RooAbsDataStore*_curStore! Datastore associated with current event; map<Int_t,RooAbsDataStore*>_dataMap; Bool_tRooAbsDataStore::_doDirtyPropSwitch do (de)activate dirty state propagation when loading a data point; RooCategory*_indexCat; TIterator*RooAbsDataStore::_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; Bool_t_ownComps! ; RooArgSetRooAbsDataStore::_vars; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooCompositeDataStore(). RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); Convert map by label to map by index for more efficient internal use. RooCompositeDataStore(const RooCompositeDataStore& other, const char* newname = 0); Convert map by label to map by index for more efficient internal use. RooCompositeDataStore(const RooCompositeDataStore& other, const RooArgSet& vars, const char* newname = 0); Update index category pointer, if it is contained in input argument vars. ~RooCompositeDataStore(); Destructor. Bool_t valid() const; Return true if currently loaded coordinate is considered valid within; the current range definitions of all observables. Int_t fill(); Forward fill request to appropriate subset. Double_t sumEntries() const; Forward fill request to appropriate subset. const RooArgSet* get(Int_t index) const; Load the n-th data point (n='idx') in memory; and return a pointer to the internal RooArgSet; holding its coordinates. Double_t weight() const. Double_t weight(Int_t index) const. Double_t weightError(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCompositeDataStore.html:10041,efficient,efficient,10041,root/html532/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html532/RooCompositeDataStore.html,2,['efficient'],['efficient']
Energy Efficiency,"itle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. TIterator*RooAbsDataStore::_cacheIter! Iterator over cached variables; RooArgSetRooAbsDataStore::_cachedVars; Int_t_curIndex! Index associated with current event; RooAbsDataStore*_curStore! Datastore associated with current event; map<Int_t,RooAbsDataStore*>_dataMap; Bool_tRooAbsDataStore::_doDirtyPropSwitch do (de)activate dirty state propagation when loading a data point; RooCategory*_indexCat; TIterator*RooAbsDataStore::_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; Bool_t_ownComps! ; RooArgSetRooAbsDataStore::_vars; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooCompositeDataStore(). RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); Convert map by label to map by index for more efficient internal use. RooCompositeDataStore(const RooCompositeDataStore& other, const char* newname = 0); Convert map by label to map by index for more efficient internal use. RooCompositeDataStore(const RooCompositeDataStore& other, const RooArgSet& vars, const char* newname = 0); Update index category pointer, if it is contained in input argument vars. ~RooCompositeDataStore(); Destructor. Bool_t valid() const; Return true if currently loaded coordinate is considered valid within; the current range definitions of all observables. void recalculateCache(const RooArgSet* , Int_t , Int_t , Int_t , Bool_t ); Forward recalculate request to all subsets. Bool_t hasFilledCache() const. void forceCacheUpdate(). Int_t fill(); Forward fill request to appropriate subset. Double_t sumEntries() const; Forward fill request to appropriate subset. const RooArgSet* get(Int_t index) const; Load the n-th data point (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCompositeDataStore.html:10144,efficient,efficient,10144,root/html534/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html534/RooCompositeDataStore.html,2,['efficient'],['efficient']
Energy Efficiency,"itoring; the accuracy. Each derived class has always the following methods available:. Condition() :; In an iterative scheme the condition number for matrix inversion is; calculated . This number is of interest for estimating the accuracy; of x in the equation Ax=b; For example:; A is a (10x10) Hilbert matrix which looks deceivingly innocent; and simple, A(i,j) = 1/(i+j+1); b(i) = Sum_j A(i,j), so a sum of a row in A. the solution is x(i) = 1. i=0,.,9. However,; TMatrixD m....; TVectorD b.....; TDecompLU lu(m); lu.SetTol(1.0e-12); lu.Solve(b); b.Print(); gives,. {1.000,1.000,1.000,1.000,0.998,1.000,0.993,1.001,0.996,1.000}. Looking at the condition number, this is in line with expected the; accuracy . The condition number is 3.957e+12 . As a simple rule of; thumb, a condition number of 1.0e+n means that you lose up to n; digits of accuracy in a solution . Since doubles are stored with 15; digits, we can expect the accuracy to be as small as 3 digits . Det(Double_t &d1,Double_t &d2); The determinant is d1*TMath::Power(2.,d2); Expressing the determinant this way makes under/over-flow very; unlikely . Decompose(); Here the actually decomposition is performed . One can change the; matrix A after the decomposition constructor has been called; without effecting the decomposition result. Solve(TVectorD &b); Solve A x = b . x is supplied through the argument and replaced with; the solution . TransSolve(TVectorD &b); Solve A^T x = b . x is supplied through the argument and replaced; with the solution . MultiSolve(TMatrixD &B); Solve A X = B . where X and are now matrices . X is supplied through; the argument and replaced with the solution . Invert(TMatrixD &inv); This is of course just a call to MultiSolve with as input argument; the unit matrix . Note that for a matrix a(m,n) with m > n a; pseudo-inverse is calculated . Tolerances and Scaling. The tolerance parameter (which is a member of this base class) plays; a crucial role in all operations of the decomposition classes ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TDecompBase.html:1569,Power,Power,1569,root/html532/TDecompBase.html,https://root.cern,https://root.cern/root/html532/TDecompBase.html,4,['Power'],['Power']
Energy Efficiency,"its last element. Int_t DistancetoLine(Int_t px, Int_t py, Float_t x1, Float_t y1, Float_t x2, Float_t y2, Int_t lineWidth = 1); Compute distance from point px,py to an axis of the band defined.; by pair points (x1,y1),(x2,y2) where lineWidth is the width of the band. Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units. Algorithm:. A(x1,y1) P B(x2,y2). I; I; I; I; M(x,y). Let us call a = distance AM a2=a**2; b = distance BM b2=b**2; c = distance AB c2=c**2; d = distance PM d2=d**2; u = distance AP u2=u**2; v = distance BP v2=v**2 c = u + v. d2 = a2 - u2; d2 = b2 - v2 = b2 -(c-u)**2; ==> u = (a2 -b2 +c2)/2c. Float_t x1 = gPad->XtoAbsPixel(xp1);; Float_t y1 = gPad->YtoAbsPixel(yp1);; Float_t x2 = gPad->XtoAbsPixel(xp2);; Float_t y2 = gPad->YtoAbsPixel(yp2);. Int_t SetNextPoint(Float_t x, Float_t y, Float_t z); Add one 3D point defined by x,y,z to the array of the points; as its last element. Int_t GetN() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t * GetP() const; GetP() returns the pointer to the float point array; of points if available; The number of the available celss can be found via; GetN() method.; GetN() > 0 shows how many cells. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; GetXYZ(Float_t *xyz,Int_t idx,Int_t num=1) fills the buffer supplied; by the calling code with the points information. Input parameters:. Float_t *xyz - an external user supplied floating point array.; Int_t num - the total number of the points to be copied; the dimension of that array the size of the; array is num*sizeof(Float_t) at least; Int_t idx - The index of the first copy to be taken. Return: The pointer to the buffer array supplied. TPoints3DABC(); {;}. virtual ~TPoints3DABC(); {;}. Int_t DistancetoPrimitive(Int_t px, Int_t py). Int_t GetLastPosition() const; GetN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPoints3DABC.html:8010,allocate,allocated,8010,root/html602/TPoints3DABC.html,https://root.cern,https://root.cern/root/html602/TPoints3DABC.html,4,['allocate'],['allocated']
Energy Efficiency,"its last element. Int_t DistancetoLine(Int_t px, Int_t py, Float_t x1, Float_t y1, Float_t x2, Float_t y2, Int_t lineWidth = 1); Compute distance from point px,py to an axis of the band defined.; by pair points (x1,y1),(x2,y2) where lineWidth is the width of the band. Compute the closest distance of approach from point px,py to this line.; The distance is computed in pixels units. Algorithm:. A(x1,y1) P B(x2,y2). I; I; I; I; M(x,y). Let us call a = distance AM a2=a**2; b = distance BM b2=b**2; c = distance AB c2=c**2; d = distance PM d2=d**2; u = distance AP u2=u**2; v = distance BP v2=v**2 c = u + v. d2 = a2 - u2; d2 = b2 - v2 = b2 -(c-u)**2; ==> u = (a2 -b2 +c2)/2c. Float_t x1 = gPad->XtoAbsPixel(xp1);; Float_t y1 = gPad->YtoAbsPixel(yp1);; Float_t x2 = gPad->XtoAbsPixel(xp2);; Float_t y2 = gPad->YtoAbsPixel(yp2);. Int_t SetNextPoint(Float_t x, Float_t y, Float_t z); Add one 3D point defined by x,y,z to the array of the points; as its last element. Int_t GetN() const; GetN() returns the number of allocated cells if any.; GetN() > 0 shows how many cells; can be available via GetP() method.; GetN() == 0 then GetP() must return 0 as well. Float_t * GetP() const; GetP() returns the pointer to the float point array; of points if available; The number of the available celss can be found via; GetN() method.; GetN() > 0 shows how many cells. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; GetXYZ(Float_t *xyz,Int_t idx,Int_t num=1) fills the buffer supplied; by the calling code with the points information. Input parameters:. Float_t *xyz - an external user supplied floating point array.; Int_t num - the total number of the points to be copied; the dimension of that array the size of the; array is num*sizeof(Float_t) at least; Int_t idx - The index of the first copy to be taken. Return: The pointer to the buffer array supplied. virtual ~TPoints3DABC(); {;}. Int_t DistancetoPrimitive(Int_t px, Int_t py). Int_t GetLastPosition() const; GetN() returns the number",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPoints3DABC.html:7410,allocate,allocated,7410,root/html528/TPoints3DABC.html,https://root.cern,https://root.cern/root/html528/TPoints3DABC.html,6,['allocate'],['allocated']
Energy Efficiency,"its { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Long64_tfBytesRead!track bytes read of main file; TH2D*fCpuTimeHist!histogram of cpu time spent processing packets; TDSet*fDSet!Saved pointer to the TDSet object; TStringfDataSet!Dataset string; Int_tfDataSetLen!Maximum size of the dataset string fDataSet ; Int_tfDataSetSize!# of files in the dataset ; Bool_tfDoHist!Fill histos; Bool_tfDoQuota!Save stats on SQL server for quota management; Bool_tfDoSlaveTrace!Full tracing in workers; Bool_tfDoTrace!Trace details in master; Bool_tfDoTraceRate!Trace processing rate in master; TH1D*fEventsHist!histogram of events processed per slave; TH2D*fLatencyHist!histogram of latency due to packet requests; TObjArrayfMonSenders!Monitoring engines; Bool_tfMonitorPerPacket!Whether to send the full entry per each packet ; TH1D*fNodeHist!histogram of slaves per file serving node; Long64_tfNumEvents!total number of events to be processed; TList*fOutput!Saved pointer to the output list ; TH1D*fPacketsHist!histogram of packets processed per slave; TPerfEvent*fPerfEvent!TPerfEvent used to fill tree; TH2D*fProcTimeHist!histogram of real time spent processing packets; Int_tfSlaves!number of active slaves; Long64_tfTotBytesRead!total bytes read on all slaves; Double_tfTotCpuTime!total cpu time of all slaves; Long64_tfTotEvents!total number of events processed; TTree*fTrace!TTree with trace events; TTimeStampfTzero!start time of this run; static Long_tfgResMemMax! Max resident memory used by this process; static Long_tfgVirtMemMax! Max virtual memory used by this process. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPerfStats(TList* input, TList* output); Normal constructor. ~TPerfStats(); Destructor. void SimpleEvent(TVirtualPerfStats::EEventType type); Simple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPerfStats.html:7189,Monitor,Monitoring,7189,root/html532/TPerfStats.html,https://root.cern,https://root.cern/root/html532/TPerfStats.html,1,['Monitor'],['Monitoring']
Energy Efficiency,"its. IMPORTANT NOTEs. --NOTE 1; Lets assume an original variable double x:; When using the format [0,0,8] (ie range not specified) you get the best; relative precision when storing and reading back the truncated x, say xt.; The variance of (x-xt)/x will be better than when specifying a range; for the same number of bits. However the precision relative to the; range (x-xt)/(xmax-xmin) will be worst, and vice-versa.; The format [0,0,8] is also interesting when the range of x is infinite; or unknown. --NOTE 2; It is important to understand the difference with the meaning of nbits; -in case of [-1,1,nbits], nbits is the total number of bits used to make; the conversion from a double to an integer; -in case of [0,0,nbits], nbits is the number of bits used for the mantissa. see example of use of the Double32_t data type in tutorial double32.C. /*; ; */. Int_t ReadArray(Bool_t *&b); Read array of bools from the I/O buffer. Returns the number of; bools read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Char_t *&c); Read array of characters from the I/O buffer. Returns the number of; characters read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Short_t *&h); Read array of shorts from the I/O buffer. Returns the number of shorts; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Int_t *&ii); Read array of ints from the I/O buffer. Returns the number of ints; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long_t *&ll); Read array of longs from the I/O buffer. Returns the number of longs; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long64_t *&ll); Read array of long longs from the I/O buffer. Returns the number of; long longs read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Float_t *&f); Read array of floats fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferFile.html:25477,allocate,allocated,25477,root/html526/TBufferFile.html,https://root.cern,https://root.cern/root/html526/TBufferFile.html,1,['allocate'],['allocated']
Energy Efficiency,"its. IMPORTANT NOTEs. --NOTE 1; Lets assume an original variable double x:; When using the format [0,0,8] (ie range not specified) you get the best; relative precision when storing and reading back the truncated x, say xt.; The variance of (x-xt)/x will be better than when specifying a range; for the same number of bits. However the precision relative to the; range (x-xt)/(xmax-xmin) will be worst, and vice-versa.; The format [0,0,8] is also interesting when the range of x is infinite; or unknown. --NOTE 2; It is important to understand the difference with the meaning of nbits; -in case of [-1,1,nbits], nbits is the total number of bits used to make; the conversion from a double to an integer; -in case of [0,0,nbits], nbits is the number of bits used for the mantissa. see example of use of the Double32_t data type in tutorial double32.C. /*; ; */. Int_t ReadArray(Bool_t*& b); Read array of bools from the I/O buffer. Returns the number of; bools read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Char_t*& c); Read array of characters from the I/O buffer. Returns the number of; characters read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Short_t*& h); Read array of shorts from the I/O buffer. Returns the number of shorts; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Int_t*& i); Read array of ints from the I/O buffer. Returns the number of ints; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long_t*& l); Read array of longs from the I/O buffer. Returns the number of longs; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long64_t*& l); Read array of long longs from the I/O buffer. Returns the number of; long longs read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Float_t*& f); Read array of floats from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBufferFile.html:26774,allocate,allocated,26774,root/html528/TBufferFile.html,https://root.cern,https://root.cern/root/html528/TBufferFile.html,10,['allocate'],['allocated']
Energy Efficiency,"itude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2 (we use -,-,-,+ metric)Definition LorentzVector.h:300; ROOT::Math::LorentzVector::rScalar r() constDefinition LorentzVector.h:650; ROOT::Math::LorentzVector::CoordinateTypeCoordSystem CoordinateTypeDefinition LorentzVector.h:66; ROOT::Math::LorentzVector::DotScalar Dot(const OtherLorentzVector &q) constscalar (Dot) product of two LorentzVector vectors (metric is -,-,-,+) Enable the product using any ot...Definition LorentzVector.h:387; ROOT::Math::LorentzVector::GetCoordinatesvoid GetCoordinates(Scalar &a, Scalar &b, Scalar &c, Scalar &d) constget internal data into 4 Scalar numbersDefinition LorentzVector.h:205; ROOT::Math::LorentzVector::GammaScalar Gamma() constReturn Gamma scalar value.Definition LorentzVector.h:617; ROOT::Math::LorentzVector::XScalar X() constDefinition LorentzVector.h:280; ROOT::Math::LorentzVector::mt2Scalar mt2() constDefinition LorentzVector.h:660; ROOT::Math::LorentzVector::isSpacelikebool isSpacelike() constDetermine if momentum-energy is spacelike, and represents a tachyon.Definition LorentzVector.h:545; ROOT::Math::LorentzVector::zScalar z() constDefinition LorentzVector.h:644; ROOT::Math::LorentzVector::RScalar R() constreturn the spatial (3D) magnitude ( sqrt(X**2 + Y**2 + Z**2) )Definition LorentzVector.h:310; ROOT::Math::LorentzVector::ScalarCoordSystem::Scalar ScalarDefinition LorentzVector.h:65; ROOT::Math::LorentzVector::P2Scalar P2() constreturn the square of the spatial (3D) magnitude ( X**2 + Y**2 + Z**2 )Definition LorentzVector.h:315; ROOT::Math::LorentzVector::Et2Scalar Et2() constreturn the transverse energy squaredDefinition LorentzVector.h:343; ROOT::Math::LorentzVector::mag2Scalar mag2() constDefinition LorentzVector.h:657; ROOT::Math::LorentzVector::LorentzVectorLorentzVector()default constructor of an empty vector (Px = Py = Pz = E = 0 )Definition LorentzVector.h:71; ROOT::Math::LorentzVector::energyScalar energy() constDefinition LorentzVector.h:664; ROOT::Math::Lore",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html:34837,energy,energy,34837,doc/master/GenVector_2LorentzVector_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2LorentzVector_8h_source.html,1,['energy'],['energy']
Energy Efficiency,"itude of the numbers being accumulated. Therefore, in rare cases, the accumulation result can change in dependence of N, even when the data are identical. The magnitude of such differences is well below the precision of the floating point type, and will therefore mostly show in the compensation sum(see Carry()). Increasing the number of accumulators therefore only makes sense to speed up the accumulation, but not to increase precision.; Parameters. TThe type of the values to be accumulated. ; NNumber of accumulators. Defaults to 1. Ideal values are the widths of a vector register on the relevant architecture. Depending on the instruction set, good values are:; AVX2-float: 8; AVX2-double: 4; AVX512-float: 16; AVX512-double: 8. Examples; std::vector<double> numbers(1000);; for (std::size_t i=0; i<1000; ++i) {; numbers[i] = rand();; }; ; ROOT::Math::KahanSum<double, 4> k;; k.Add(numbers.begin(), numbers.end());; // or; k.Add(numbers);; ROOT::Math::KahanSumThe Kahan summation is a compensated summation algorithm, which significantly reduces numerical error...Definition Util.h:122; ROOT::Math::KahanSum::Addvoid Add(T x)Single-element accumulation. Will not vectorise.Definition Util.h:165; double offset = 10.;; auto result = ROOT::Math::KahanSum<double, 4>::Accumulate(numbers.begin(), numbers.end(), offset);; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html:2348,reduce,reduces,2348,doc/master/classROOT_1_1Math_1_1KahanSum.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KahanSum.html,1,['reduce'],['reduces']
Energy Efficiency,"ity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_subpads.cxx;  draw_th1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxx;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:165205,allocate,allocate,165205,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['allocate'],['allocate']
Energy Efficiency,"ity density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodPDERS.html:1758,adapt,adaptive,1758,root/html602/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodPDERS.html,4,['adapt'],['adaptive']
Energy Efficiency,"ity density estimator (PDE) has been suggested; in hep-ex/0211019. The; PDE for a given test event is obtained from counting the (normalized); number of signal and background (training) events that occur in the; ""vicinity"" of the test event. The volume that describes ""vicinity"" is; user-defined. A search; method based on binary-trees is used to effectively reduce the; selection time for the range search. Three different volume definitions; are optional: . MinMax:; the volume is defined in each dimension with respect; to the full variable range found in the training sample. ; RMS:; the volume is defined in each dimensions with respect; to the RMS estimated from the training sample. ; Adaptive:; a volume element is defined in each dimensions with; respect to the RMS estimated from the training sample. The overall; scale of the volume element is then determined for each event so; that the total number of events confined in the volume be within; a user-defined range. The adaptive range search is used by default.; . Function Members (Methods); public:. virtual~MethodPDERS(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; TMVA::DataSet*TMVA::MethodBase::Dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDERS.html:1758,adapt,adaptive,1758,root/html528/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDERS.html,6,['adapt'],['adaptive']
Energy Efficiency,"ity. The ; : linearity property of this classifier is reflected in the ; : metric with which ""far apart"" and ""close vicinity"" are ; : determined: the covariance matrix of the discriminating; : variable space.); : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : Optimal performance for Fisher discriminants is obtained for ; : linearly correlated Gaussian-distributed variables. Any deviation; : from this ideal reduces the achievable separation power. In ; : particular, no discrimination at all is achieved for a variable; : that has the same sample mean for signal and background, even if ; : the shapes of the distributions are very different. Thus, Fisher ; : discriminants often benefit from suitable transformations of the ; : input variables. For example, if a variable x in [-1,1] has a ; : a parabolic signal distributions, and a uniform background; : distributions, their mean value is zero in both cases, leading ; : to no separation. The simple transformation x -> |x| renders this ; : variable powerful for the use in a Fisher discriminant.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : <None>; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; Fisher : Results for Fisher coefficients:; : -----------------------; : Variable: Coefficient:; : -----------------------; : m_jj: -0.051; : m_jjj: +0.192; : m_lv: +0.045; : m_jlv: +0.059; : m_bb: -0.211; : m_wbb: +0.549; : m_wwbb: -0.778; : (offset): +0.136; : -----------------------; : Elapsed time for training with 14000 events: 0.0105 sec ; Fisher : [dataset] : Evaluation of Fisher on training sample (14000 events); : Elapsed time for evaluation of 14000 events: 0.0038 sec ; : <CreateMVAPdfs> Separation from histogram (PDF): 0.090 (0.000); : Dataset[dataset] : Evaluation of Fisher on training sample; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_Fisher.weights.xml␛[0m; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:20213,power,powerful,20213,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['power'],['powerful']
Energy Efficiency,"ity. The ; : linearity property of this classifier is reflected in the ; : metric with which ""far apart"" and ""close vicinity"" are ; : determined: the covariance matrix of the discriminating; : variable space.); : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : Optimal performance for Fisher discriminants is obtained for ; : linearly correlated Gaussian-distributed variables. Any deviation; : from this ideal reduces the achievable separation power. In ; : particular, no discrimination at all is achieved for a variable; : that has the same sample mean for signal and background, even if ; : the shapes of the distributions are very different. Thus, Fisher ; : discriminants often benefit from suitable transformations of the ; : input variables. For example, if a variable x in [-1,1] has a ; : a parabolic signal distributions, and a uniform background; : distributions, their mean value is zero in both cases, leading ; : to no separation. The simple transformation x -> |x| renders this ; : variable powerful for the use in a Fisher discriminant.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : <None>; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; Fisher : Results for Fisher coefficients:; : -----------------------; : Variable: Coefficient:; : -----------------------; : m_jj: -0.051; : m_jjj: +0.192; : m_lv: +0.045; : m_jlv: +0.059; : m_bb: -0.211; : m_wbb: +0.549; : m_wwbb: -0.778; : (offset): +0.136; : -----------------------; : Elapsed time for training with 14000 events: 0.0116 sec ; Fisher : [dataset] : Evaluation of Fisher on training sample (14000 events); : Elapsed time for evaluation of 14000 events: 0.00388 sec ; : <CreateMVAPdfs> Separation from histogram (PDF): 0.090 (0.000); : Dataset[dataset] : Evaluation of Fisher on training sample; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_Higgs_Classification_Fisher.weights.xml␛[0m;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:20150,power,powerful,20150,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['power'],['powerful']
Energy Efficiency,ivate . initial scale for adaptive volume ; Definition at line 195 of file MethodPDERS.h. ◆ fKernelEstimator. enum TMVA::MethodPDERS::EKernelEstimator TMVA::MethodPDERS::fKernelEstimator. private . ◆ fKernelString. TString TMVA::MethodPDERS::fKernelString. private . Definition at line 149 of file MethodPDERS.h. ◆ fkNNMax. Int_t TMVA::MethodPDERS::fkNNMax. private . max number of events in kNN tree ; Definition at line 200 of file MethodPDERS.h. ◆ fkNNMin. Int_t TMVA::MethodPDERS::fkNNMin. private . min number of events in kNN tree ; Definition at line 199 of file MethodPDERS.h. ◆ fMax_distance. Double_t TMVA::MethodPDERS::fMax_distance. private . maximum distance ; Definition at line 202 of file MethodPDERS.h. ◆ fMaxVIterations. Float_t TMVA::MethodPDERS::fMaxVIterations. private . maximum number of iterations to adapt volume size ; Definition at line 194 of file MethodPDERS.h. ◆ fNEventsMax. Float_t TMVA::MethodPDERS::fNEventsMax. private . maximum number of events in adaptive volume ; Definition at line 193 of file MethodPDERS.h. ◆ fNEventsMin. Float_t TMVA::MethodPDERS::fNEventsMin. private . minimum number of events in adaptive volume ; Definition at line 192 of file MethodPDERS.h. ◆ fNormTree. Bool_t TMVA::MethodPDERS::fNormTree. private . binary-search tree is normalised ; Definition at line 204 of file MethodPDERS.h. ◆ fNRegOut. Double_t TMVA::MethodPDERS::fNRegOut. private . Definition at line 189 of file MethodPDERS.h. ◆ fPrinted. Bool_t TMVA::MethodPDERS::fPrinted. private . print ; Definition at line 203 of file MethodPDERS.h. ◆ fScaleB. Float_t TMVA::MethodPDERS::fScaleB. private . weight for background events ; Definition at line 184 of file MethodPDERS.h. ◆ fScaleS. Float_t TMVA::MethodPDERS::fScaleS. private . weight for signal events ; Definition at line 183 of file MethodPDERS.h. ◆ fShift. std::vector<Float_t>* TMVA::MethodPDERS::fShift. private . volume center ; Definition at line 180 of file MethodPDERS.h. ◆ fVolumeRange. TString TMVA::MethodPDERS,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:46727,adapt,adaptive,46727,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,1,['adapt'],['adaptive']
Energy Efficiency,"ive , gauss, nonadaptive; multidim:; ADAPTIVE, adaptive numerical integration; The parameter numIters (settable with SetNumIters) is the max number of function calls.; It can be reduced to make teh integration faster but it will be difficult to reach the required tolerance; VEGAS MC integration method based on importance sampling - numIters is number of function calls; Extra Vegas parameter can be set using IntegratorMultiDimOptions class; MISER MC integration method based on stratified sampling; See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters). Extra integration types are:. TOYMC:; evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; integration, where the function is sampled according to the nuisance. It is convenient to use when all; the nuisance are uncorrelated and it is efficient to generate them; The toy are generated by default for each poi values; (this method has been proposed and provided by J.P Chou); 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; each poi value. It can be convenient when the generation time is much larger than the evaluation time,; otherwise it is recoomended to re-generate the toy for each poi scanned point of the posterior function. ROOFIT:; use roofit default integration methods which will produce a nested integral (not reccomended for more; than 1 nuisance parameters). if type = 0 use default specified via class IntegratorMultiDimOptions::SetDefaultIntegrator. SimpleInterval* GetInterval() const; Compute the interval. By Default a central interval is computed; and the result is a SimpleInterval object.; Using the method (to be called before SetInterval) SetLeftSideTailFraction the user can choose the type of interval.; By default the returned interval is a central interval with the confidence l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:13399,efficient,efficient,13399,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,9,['efficient'],['efficient']
Energy Efficiency,ive GUI application environment; TRootAuth client auth interface; TRootBrowser New ROOT Browser; TRootBrowserLite ROOT native GUI version of browser; TRootCanvas ROOT native GUI version of main window with menubar and drawing area; TRootContextMenu ROOT native GUI context sensitive popup menu; TRootControlBar ROOT native GUI implementation of TControlBar; TRootDialog Native GUI method argument prompt dialog box; TRootEmbeddedCanvas A ROOT TCanvas that can be embedded in a TGFrame; TRootGuiBuilder ROOT GUI Builder; TRootGuiFactory Factory for ROOT GUI components; TRootHelpDialog Dialog to display help text; TRootSecContext Class providing host specific authentication information; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TRuby Ruby/ROOT interface; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLColumnInfo Summury information about column from SQL table; TSQLMonitoringWriter Sending monitoring data to a SQL DB; TSQLResult SQL query result; TSQLRow One row of an SQL query result; TSQLServer Connection to SQL server; TSQLStatement SQL statement; TSQLTableInfo Summury information about SQL table; TSVG SVG driver; TSecContext Class providing host specific authentication information; TSecContextCleanup Update the remote authentication table; TSelector A utility class for tree and object processing; TSelectorCint A utility class for tree and object processing (interpreted version); TSelectorDraw A specialized TSelector for TTree::Draw; TSelectorEntries A specialized TSelector for TTree::GetEntries(selection); TSelectorList Special TList used in the TSelector; TSelectorScalar Mergable scalar; TSemaphore Counting semaphore class; TSeqCollection Sequenceable collection ABC; TServerSocket This class implements server sockets; TSessionDescription Session description; TSessionFrame Session frame; TSessionInputFrame Input frame; TSessionLogView PROOF progress dialog; TSessionOutputF,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:117592,monitor,monitoring,117592,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['monitor'],['monitoring']
Energy Efficiency,"ive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information ;  CTProofOutputFileClass to steer the merging of files produced on the workers ;  CTProofOutputListDerivation of TList with an overload of ls() and Print() allowing to filter out some of the variables ;  CTProofPerfAnalysisSet of tools to analyse the performance tree ;  ►CTProofPlayerInternal class steering processing in PROOF ;  CTCleanup;  CTProofPlayerLiteVersion of TProofPlayerRemote merges the functionality needed by clients and masters ;  CTProofPlayer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:178507,monitor,monitor,178507,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,4,['monitor'],['monitor']
Energy Efficiency,"ived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Double_tfADABoostBetaADA boost parameter, default is 1 ; vector<TH1*>fBTrainBgdMVAHist; vector<TH1*>fBTrainSigMVAHist; Int_tfBoostNumNumber of times the classifier is boosted; TMVA::Types::EBoostStagefBoostStagestage of the boosting ; TStringfBoostTypestring specifying the boost type ; Double_tfBoostWeightthe weight used to boost the next classifier ; TStringfBoostedMethodNamedetails of the boosted classifier; TStringfBoostedMethodOptionsoptions; TStringfBoostedMethodTitletitle ; TMVA::DataSetManager*fDataSetManagerDSMTEST; Int_tfDefaultHistNumnumber of histogram filled for every type of boosted classifier ; Bool_tfDetailedMonitoringproduce detailed monitoring histograms (boost-wise); vector<Float_t>*fMVAvaluesmva values for the last trained method; Double_tfMethodErrorestimation of the level error of the classifier ; TStringfMethodWeightTypestring specifying the boost type; Bool_tfMonitorBoostedMethodmonitor the MVA response of every classifier; vector<TH1*>*fMonitorHisthistograms to monitor values during the boosting ; TTree*fMonitorTreetree to monitor values during the boosting ; Double_tfOrigMethodErrorestimation of the level error of the classifier ; Double_tfOverlap_integral; Double_tfROC_trainingroc integral of last trained method (on training sample); UInt_tfRandomSeedseed for random number generator used for bagging; Bool_tfRecalculateMVACutwhether to recalculate the MVA cut at every boosting step ; vector<TH1*>fTestBgdMVAHist; vector<TH1*>fTestSigMVAHist; vector<TH1*>fTrainBgdMVAHist; vector<TH1*>fTrainSigMVAHist; TStringfTransformStringmin and max values for the classifier response . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodBoost(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodBoost.html:18109,monitor,monitoring,18109,root/html530/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodBoost.html,9,['monitor'],"['monitor', 'monitoring']"
Energy Efficiency,"iven color index.; 3031///; 3032/// \param [in] cindex : color index; 3033/// \param [in] r,g,b : red, green, blue intensities between 0.0 and 1.0; 3034 ; 3035void TGX11::SetRGB(int cindex, float r, float g, float b); 3036{; 3037 if (fColormap) {; 3038 RXColor xcol;; 3039 xcol.red = (UShort_t)(r * kBIGGEST_RGB_VALUE);; 3040 xcol.green = (UShort_t)(g * kBIGGEST_RGB_VALUE);; 3041 xcol.blue = (UShort_t)(b * kBIGGEST_RGB_VALUE);; 3042 xcol.flags = DoRed | DoGreen | DoBlue;; 3043 XColor_t &col = GetColor(cindex);; 3044 if (col.fDefined) {; 3045 // if color is already defined with same rgb just return; 3046 if (col.fRed == xcol.red && col.fGreen == xcol.green &&; 3047 col.fBlue == xcol.blue); 3048 return;; 3049 col.fDefined = kFALSE;; 3050 if (fRedDiv == -1); 3051 XFreeColors((Display*)fDisplay, fColormap, &col.fPixel, 1, 0);; 3052 }; 3053 if (AllocColor(fColormap, &xcol)) {; 3054 col.fDefined = kTRUE;; 3055 col.fPixel = xcol.pixel;; 3056 col.fRed = xcol.red;; 3057 col.fGreen = xcol.green;; 3058 col.fBlue = xcol.blue;; 3059 }; 3060 }; 3061}; 3062 ; 3063////////////////////////////////////////////////////////////////////////////////; 3064/// Set text alignment.; 3065///; 3066/// \param [in] talign text alignment; 3067 ; 3068void TGX11::SetTextAlign(Short_t talign); 3069{; 3070 Int_t txalh = talign/10;; 3071 Int_t txalv = talign%10;; 3072 fTextAlignH = txalh;; 3073 fTextAlignV = txalv;; 3074 ; 3075 switch (txalh) {; 3076 ; 3077 case 0 :; 3078 case 1 :; 3079 switch (txalv) { //left; 3080 case 1 :; 3081 fTextAlign = 7; //bottom; 3082 break;; 3083 case 2 :; 3084 fTextAlign = 4; //center; 3085 break;; 3086 case 3 :; 3087 fTextAlign = 1; //top; 3088 break;; 3089 }; 3090 break;; 3091 case 2 :; 3092 switch (txalv) { //center; 3093 case 1 :; 3094 fTextAlign = 8; //bottom; 3095 break;; 3096 case 2 :; 3097 fTextAlign = 5; //center; 3098 break;; 3099 case 3 :; 3100 fTextAlign = 2; //top; 3101 break;; 3102 }; 3103 break;; 3104 case 3 :; 3105 switch (txalv) { //right; 3106 case 1 :; 3107",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:102029,green,green,102029,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"ixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; Double_t[nbinsy];;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2Transform.html:17618,adapt,adaptive,17618,root/html602/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html602/TSpectrum2Transform.html,4,['adapt'],['adaptive']
Energy Efficiency,"ixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Float_t ** source = new float *[nbinsx];�� ; �� Float_t ** dest = new; float *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; float[nbinsy];; �� for (i=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Transform.html:16433,adapt,adaptive,16433,root/html528/TSpectrum2Transform.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Transform.html,6,['adapt'],['adaptive']
Energy Efficiency,"ixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new TH1F(""h"",""Transformed; spectrum using Cosine transform"",nbins,xmin,xmax);; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrumTransform.html:15783,adapt,adaptive,15783,root/html602/TSpectrumTransform.html,https://root.cern,https://root.cern/root/html602/TSpectrumTransform.html,4,['adapt'],['adaptive']
Energy Efficiency,"ixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Float_t * source = new float[nbins];; �� Float_t * dest = new; float[nbins];�� ; �� TH1F *h = new TH1F(""h"",""Transformed; spectrum using Cosine transform"",nbins,xmin,xmax);; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumTransform.html:14569,adapt,adaptive,14569,root/html528/TSpectrumTransform.html,https://root.cern,https://root.cern/root/html528/TSpectrumTransform.html,6,['adapt'],['adaptive']
Energy Efficiency,"ixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. Int_tfColormap[64][3]colormap; Pixel_tfPixel[64]pixel values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGColorPick(const TGWindow* p = 0, Int_t w = 1, Int_t h = 1, Int_t id = -1); TGColorPick constructor.; TGColorPick is a widget which allows a color to be picked from HLS space.; It consists of two elements: a color map window from where the user can; select the hue and saturation level of a color, and a slider to select; color's lightness. ~TGColorPick(); TGColorPick destructor. Bool_t HandleButton(Event_t* event); Handle mouse button events in color pick widget. Bool_t HandleMotion(Event_t* event); Handle mouse motion events in color pick widget. void CreateImages(); Create colormap and color slider images. void AllocColors(); Try to allocate first a palette of 64 colors. Used by the dithered; version of the color maps. void FreeColors(); Free allocated colors. void CreateDitheredImage(Pixmap_t image, Int_t which); Create a dithered version of the color map and lightness images for; display modes with reduced number of colors. The Floyd-Steinberg error; diffusion dithering algorithm is used.; This routine is called in PseudoColor modes only. void InitImages(); Initialize color palette and slider images. void SetSliderColor(); Set slider colors. void SetColor(Pixel_t color); Position the slider cursor on right color position. void UpdateCurrentColor(); Assign the current cursor position as currently selected color. void DoRedraw(); Redraw the color pick widget. void SetHScursor(Int_t x, Int_t y); Set hue / saturation cursor position. void SetLcursor(Int_t z); Set lightness slider cursor position. void DrawHScursor(Int_t onoff); Draw hue / saturation cursor. void DrawLcursor(Int_t onoff); Draw lightness slider cursor. TGColorPalette& operator=(const TGColorPick& ). Pixel_t GetCurrentColor() const. void ColorSelected(Pixel_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGColorPick.html:20632,allocate,allocated,20632,root/html602/TGColorPick.html,https://root.cern,https://root.cern/root/html602/TGColorPick.html,4,['allocate'],['allocated']
Energy Efficiency,"ization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivatives) ;  CGSLMultiRootDerivFunctionWrapperWrapper to a multi-dim function with derivatives for multi roots algorithm ;  CGSLMultiRootDerivSolverGSLMultiRootDerivSolver, internal class for implementing GSL multi-root finders using derivatives ;  CGSLMultiRootFinderClass for Multidimensional root finding algorithms bassed on GSL ;  CGSLMultiRootFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiRoot Algorithm The templated C++ function class must implement: ;  CGSLMultiRootFunctionWrapperWrapper to a multi-dim function without derivatives for multi roots algorithm ;  CGSLMultiRootSolverGSLMultiRootSolver, internal class for implementing GSL multi-root finders not using derivatives ;  CGSLNLSMinimizerGSLNLSMinimizer class for Non Linear Least Square fitting It Uses the Levemberg-Marquardt algorithm from GSL Non Linear Least Square fitting ;  CGSLPlainIntegrationWorkspace;  CGSLQRngNiederreiter2Niederreiter generator gsl_qrng_niederreiter_2 from here ;  CGSLQRngSobolSobol generator gsl_qrng_sobol from here ;  CGSLQRngWrapperGSLQRngWrapper class to wrap gsl_qrng structure ;  CGSLQuasiRandomEngineGSLQuasiRandomEngine Base class for all GSL quasi random engines, normally user instantiate the derived classes which creates internally the generator and uses the class ROOT::Math::QuasiRandom ;  CGSLRandomEngineGSLRandomEn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:33054,adapt,adapting,33054,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,8,['adapt'],['adapting']
Energy Efficiency,"ize to N, which the current array must have enough capacity for. ;  ; size_t size () const;  . Protected Member Functions;  RVecImpl (unsigned N);  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >;  SmallVectorTemplateBase (size_t Size);  ; void grow (size_t MinSize=0);  Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateCommon< T >;  SmallVectorTemplateCommon (size_t Size);  ; void grow_pod (size_t MinSize, size_t TSize);  ; bool isSmall () const;  Return true if this is a smallvector which has not had dynamic memory allocated for it. ;  ; void resetToSmall ();  Put this vector in a state of being small. ;  ;  Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorBase;  SmallVectorBase ()=delete;  ;  SmallVectorBase (void *FirstEl, size_t TotalCapacity);  ; void grow_pod (void *FirstEl, size_t MinSize, size_t TSize);  This is an implementation of the grow() method which only works on POD-like data types and is out of line to reduce code duplication. ;  ; bool Owns () const;  If false, the RVec is in ""memory adoption"" mode, i.e. it is acting as a view on a memory buffer it does not own. ;  . Private Types; using SuperClass = Internal::VecOps::SmallVectorTemplateBase< T >;  . Additional Inherited Members;  Static Protected Member Functions inherited from ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >; static void destroy_range (T *S, T *E);  ; template<typename It1 , typename It2 > ; static void uninitialized_copy (It1 I, It1 E, It2 Dest);  Copy the range [I, E) onto the uninitialized memory starting with ""Dest"", constructing elements as needed. ;  ; template<typename It1 , typename It2 > ; static void uninitialized_move (It1 I, It1 E, It2 Dest);  Move the range [I, E) into the uninitialized memory starting with ""Dest"", constructing ele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html:5879,reduce,reduce,5879,doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1VecOps_1_1RVecImpl.html,1,['reduce'],['reduce']
Energy Efficiency,"izeDefinition NeuralNet.h:838; TMVA::DNN::Settings::setDropOutvoid setDropOut(Iterator begin, Iterator end, size_t _dropRepetitions)set the drop-out configuration (layer-wise)Definition NeuralNet.h:759; TMVA::DNN::Settings::createvoid create(std::string histoName, int bins, double min, double max, int bins2, double min2, double max2)for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:72257,monitor,monitoringDefinition,72257,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['monitor'],['monitoringDefinition']
Energy Efficiency,"izer1D ();  . Static Public Member Functions; static int TestInterval (double xlow, double xup, double epsAbs, double epsRel);  Test convergence of the interval. ;  . Private Attributes; GSLFunctionWrapper * fFunction;  ; bool fIsSet;  ; int fIter;  ; double fLow;  ; double fMin;  ; GSL1DMinimizerWrapper * fMinimizer;  ; int fStatus;  ; double fUp;  ; double fXlow;  ; double fXmin;  ; double fXup;  . #include <Math/GSLMinimizer1D.h>. Inheritance diagram for ROOT::Math::GSLMinimizer1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GSLMinimizer1D() [1/3]. ROOT::Math::GSLMinimizer1D::GSLMinimizer1D ; (; Minim1D::Type ; type = Minim1D::kBRENT). explicit . Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. ; Definition at line 51 of file GSLMinimizer1D.cxx. ◆ ~GSLMinimizer1D(). ROOT::Math::GSLMinimizer1D::~GSLMinimizer1D ; (; ). override . Destructor: free allocated resources. ; Definition at line 78 of file GSLMinimizer1D.cxx. ◆ GSLMinimizer1D() [2/3]. ROOT::Math::GSLMinimizer1D::GSLMinimizer1D ; (; const GSLMinimizer1D & ; ). delete . ◆ GSLMinimizer1D() [3/3]. ROOT::Math::GSLMinimizer1D::GSLMinimizer1D ; (; GSLMinimizer1D && ; ). delete . Member Function Documentation. ◆ FValLower(). double ROOT::Math::GSLMinimizer1D::FValLower ; (; ); const. overridevirtual . Return function value at current lower bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 149 of file GSLMinimizer1D.cxx. ◆ FValMinimum(). double ROOT::Math::GSLMinimizer1D::FValMinimum ; (; ); const. overridevirtual . Return function value at current estimate of the minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 144 of file GSLMinimizer1D.cxx. ◆ FValUpper(). double ROOT::Math::GSLMinimizer1D::FValUpper ; (; ); const. overridevirtual . Return function value at current upper bound of the minimization interval. ; Imple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:4392,allocate,allocated,4392,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,1,['allocate'],['allocated']
Energy Efficiency,"izing_t fResize;  Container accessors: resize container. ;  ; Method fSize;  Container accessors: size of container. ;  ; Staged_t fStaged;  Optimization: Keep staged array once they were created. ;  ; int fSTL_type;  STL container type. ;  ; Info_t fTypeinfo;  Type information. ;  ; Value * fVal;  Descriptor of the Value_type. ;  ; int fValDiff;  Offset between two consecutive value_types (memory layout). ;  ; int fValOffset;  Offset from key to value (in maps) ;  ; std::atomic< Value * > fValue;  Descriptor of the container value type. ;  ; TStreamerInfoActions::TActionSequence * fWriteMemberWise;  ;  Protected Attributes inherited from TVirtualCollectionProxy; TClassRef fClass;  ; UInt_t fProperties;  . Private Member Functions;  TGenCollectionProxy ();  ; TGenCollectionProxy & operator= (const TGenCollectionProxy &);  . Friends; class TCollectionProxyFactory;  . Additional Inherited Members;  Static Public Attributes inherited from TVirtualCollectionProxy; static const Int_t fgIteratorArenaSize = 16;  The size of a small buffer that can be allocated on the stack to store iterator-specific information. ;  . #include <TGenCollectionProxy.h>. Inheritance diagram for TGenCollectionProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ ArrIterfunc_t. typedef void *(* TGenCollectionProxy::ArrIterfunc_t) (void *from, size_t size). protected . Definition at line 297 of file TGenCollectionProxy.h. ◆ Collectfunc_t. typedef void *(* TGenCollectionProxy::Collectfunc_t) (void *from, void *to). protected . Definition at line 296 of file TGenCollectionProxy.h. ◆ Env_t. typedef ROOT::Detail::TCollectionProxyInfo::Environ<char[64]> TGenCollectionProxy::Env_t. protected . Definition at line 287 of file TGenCollectionProxy.h. ◆ EnvironBase_t. typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase TGenCollectionProxy::EnvironBase_t. protected . Definition at line 288 of file TGenCollectionProxy.h. ◆ F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:12437,allocate,allocated,12437,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,1,['allocate'],['allocated']
Energy Efficiency,"ject later. ""SAME"" will be added to the options if they are not already present. The caller transfers ownership of the object with this call, and the object will be deleted when its containing plot object is destroyed. ; Definition at line 385 of file RooPlot.cxx. ◆ Browse(). void RooPlot::Browse ; (; TBrowser * ; b). overridevirtual . Plot RooPlot when double-clicked in browser. ; Reimplemented from TObject.; Definition at line 1346 of file RooPlot.cxx. ◆ BuildLegend(). std::unique_ptr< TLegend > RooPlot::BuildLegend ; (; ); const. Build a legend that contains all objects that have been drawn on the plot. ; Definition at line 1412 of file RooPlot.cxx. ◆ chiSquare() [1/2]. double RooPlot::chiSquare ; (; const char * ; curvename, . const char * ; histname, . int ; nFitParam = 0 . ); const. Calculate and return reduced chi-squared between a curve and a histogram. ; Parameters. [in]curvenameName of the curve or nullptr for last curve ; [in]histnameName of the histogram to compare to or nullptr for last added histogram ; [in]nFitParamIf non-zero, reduce the number of degrees of freedom by this number. This means that the curve was fitted to the data with nFitParam floating parameters, which needs to be reflected in the calculation of \(\chi^2 / \mathrm{ndf}\). Returns\( \chi^2 / \mathrm{ndf} \) between the plotted curve and the data.; NoteThe \( \chi^2 \) is calculated between a plot of the original distribution and the data. It therefore has more rounding errors than directly calculating the \( \chi^2 \) from a PDF or function. To do this, use RooAbsReal::createChi2(RooDataHist&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&). ; Definition at line 1068 of file RooPlot.cxx. ◆ chiSquare() [2/2]. double RooPlot::chiSquare ; (; int ; nFitParam = 0); const. inline . Shortcut for RooPlot::chiSquare(const char* pdfname, const char* histname, int nFitParam=nullptr) ; Definition at l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPlot.html:32691,reduce,reduce,32691,doc/master/classRooPlot.html,https://root.cern,https://root.cern/doc/master/classRooPlot.html,1,['reduce'],['reduce']
Energy Efficiency,"ject to the constraints 2 <= r <= 5. [1] J. Humlicek, JQSRT, 21, 437 (1982).; [2] R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its; Derivatives"" JQSRT 62 (1999), pp 29-48.; http://www-atm.physics.ox.ac.uk/user/wells/voigt.html. Bool_t RootsCubic(const Double_t[4] coef, Double_t& a, Double_t& b, Double_t& c); Calculates roots of polynomial of 3rd order a*x^3 + b*x^2 + c*x + d, where; a == coef[3], b == coef[2], c == coef[1], d == coef[0]; coef[3] must be different from 0; If the boolean returned by the method is false:; ==> there are 3 real roots a,b,c; If the boolean returned by the method is true:; ==> there is one real root a and 2 complex conjugates roots (b+i*c,b-i*c); Author: Francois-Xavier Gentit. void Quantiles(Int_t n, Int_t nprob, Double_t* x, Double_t* quantiles, Double_t* prob, Bool_t isSorted = kTRUE, Int_t* index = 0, Int_t type = 7); Computes sample quantiles, corresponding to the given probabilities; Parameters:; x -the data sample; n - its size; quantiles - computed quantiles are returned in there; prob - probabilities where to compute quantiles; nprob - size of prob array; isSorted - is the input array x sorted?; NOTE, that when the input is not sorted, an array of integers of size n needs; to be allocated. It can be passed by the user in parameter index,; or, if not passed, it will be allocated inside the function. type - method to compute (from 1 to 9). Following types are provided:; Discontinuous:; type=1 - inverse of the empirical distribution function; type=2 - like type 1, but with averaging at discontinuities; type=3 - SAS definition: nearest even order statistic; Piecwise linear continuous:; In this case, sample quantiles can be obtained by linear interpolation; between the k-th order statistic and p(k).; type=4 - linear interpolation of empirical cdf, p(k)=k/n;; type=5 - a very popular definition, p(k) = (k-0.5)/n;; type=6 - used by Minitab and SPSS, p(k) = k/(n+1);; type=7 - used by S-Plus and R, p(k) = (k-1)/(n-1);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMath.html:17215,allocate,allocated,17215,root/html602/TMath.html,https://root.cern,https://root.cern/root/html602/TMath.html,4,['allocate'],['allocated']
Energy Efficiency,"ject we may have allocated on a previous call to SetAddress. void Reset(Option_t* option = """"); -- Reset a Branch. Existing i/o buffers are deleted.; Entries, max and min are reset. void ResetAddress(); Set branch address to zero and free all allocated memory. void ResetDeleteObject(); -- Release ownership of any allocated objects. Note: This interface was added so that clone trees could; be told they do not own the allocated objects. void SetAddress(void* addobj); -- Point this branch at an object. For a sub-branch, addr is a pointer to the branch object. For a top-level branch the meaning of addr is as follows:. If addr is zero, then we allocate a branch object; internally and the branch is the owner of the allocated; object, not the caller. However the caller may obtain; a pointer to the branch object with GetObject(). Example:. branch->SetAddress(0);; Event* event = branch->GetObject();; ... Do some work. If addr is not zero, but the pointer addr points at is; zero, then we allocate a branch object and set the passed; pointer to point at the allocated object. The caller; owns the allocated object and is responsible for deleting; it when it is no longer needed. Example:. Event* event = 0;; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. If addr is not zero and the pointer addr points at is; also not zero, then the caller has allocated a branch; object and is asking us to use it. The caller owns it; and must delete it when it is no longer needed. Example:. Event* event = new Event();; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;. These rules affect users of TTree::Branch(),; TTree::SetBranchAddress(), and TChain::SetBranchAddress(); as well because those routines call this one. An example of a tree with branches with objects allocated; and owned by us:. TFile* f1 = new TFile(""myfile_original.root"");; TTree* t1 = (TTree*) f->Get(""MyTree"");; TFile* f2 = new TFile(""myfile_copy.root"", ""recreate"");; TTree* t2 = t1-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBranchElement.html:24243,allocate,allocate,24243,root/html526/TBranchElement.html,https://root.cern,https://root.cern/root/html526/TBranchElement.html,6,['allocate'],"['allocate', 'allocated']"
Energy Efficiency,"ject(key->GetName());; 1349 if (thing) { delete thing; }; 1350 key->ReadObj();; 1351 }; 1352}; 1353 ; 1354////////////////////////////////////////////////////////////////////////////////; 1355/// Read the linked list of keys.; 1356///; 1357/// Every directory has a linked list (fKeys). This linked list has been; 1358/// written on the file via WriteKeys as a single data record.; 1359///; 1360/// It is interesting to call this function in the following situation.; 1361/// Assume another process1 is connecting this directory in Update mode; 1362/// - Process1 is adding/updating objects in this directory; 1363/// - You want to see the latest status from process1.; 1364/// Example Process1:; 1365/// ~~~{.cpp}; 1366/// obj1.Write();; 1367/// obj2.Write();; 1368/// gDirectory->SaveSelf();; 1369/// ~~~; 1370///; 1371/// Example Process2:; 1372/// ~~~{.cpp}; 1373/// gDirectory->ReadKeys();; 1374/// obj1->Draw();; 1375/// ~~~; 1376/// This is an efficient way (without opening/closing files) to view; 1377/// the latest updates of a file being modified by another process; 1378/// as it is typically the case in a data acquisition system.; 1379 ; 1380Int_t TDirectoryFile::ReadKeys(Bool_t forceRead); 1381{; 1382 if (!fFile || !fKeys) return 0;; 1383 ; 1384 if (!fFile->IsBinary()); 1385 return fFile->DirReadKeys(this);; 1386 ; 1387 TDirectory::TContext ctxt(this);; 1388 ; 1389 char *buffer;; 1390 if (forceRead) {; 1391 fKeys->Delete();; 1392 //In case directory was updated by another process, read new; 1393 //position for the keys; 1394 Int_t nbytes = fNbytesName + TDirectoryFile::Sizeof();; 1395 char *header = new char[nbytes];; 1396 buffer = header;; 1397 fFile->Seek(fSeekDir);; 1398 if ( fFile->ReadBuffer(buffer,nbytes) ) {; 1399 // ReadBuffer return kTRUE in case of failure.; 1400 delete [] header;; 1401 return 0;; 1402 }; 1403 buffer += fNbytesName;; 1404 Version_t versiondir;; 1405 frombuf(buffer,&versiondir);; 1406 fDatimeC.ReadBuffer(buffer);; 1407 fDatimeM.ReadBuffer(buff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:46729,efficient,efficient,46729,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['efficient'],['efficient']
Energy Efficiency,"ject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TList*fActivelist of sockets to monitor; TList*fDeActivelist of (temporary) disabled sockets; Bool_tfInterruptflags an interrupt to Select; Bool_tfMainLooptrue if monitoring sockets within the main event loop; TSocket*fReadysocket which is ready to be read or written. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMonitor(Bool_t mainloop = kTRUE); Create a monitor object. If mainloop is true the monitoring will be; done in the main event loop. TMonitor(const TMonitor& m); Copy constructor. ~TMonitor(); Cleanup the monitor object. Does not delete sockets being monitored. void Add(TSocket* sock, Int_t interest = kRead); Add socket to the monitor's active list. If interest=kRead then we; want to monitor the socket for read readiness, if interest=kWrite; then we monitor the socket for write readiness, if interest=kRead|kWrite; then we monitor both read and write readiness. void SetInterest(TSocket* sock, Int_t interest = kRead); Set interest mask for socket sock to interest. If the socket is not; in the active list move it or add it there.; If interest=kRead then we want to monitor the socket for read readiness,; if interest=kWrite then we monitor the socket for write readiness,; if interest=kRead|kWrite then we monitor both read and write readiness. void Remove(TSocket* sock); Remove a socket from the monitor. void RemoveAll(); Remove all sockets from the monitor. void Activate(TSocket* sock); Activate a de-activated socket. void ActivateAll(); Activate all de-activated sockets. void DeActivate(TSocket* sock); De-activate a socket. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMonitor.html:10886,monitor,monitored,10886,root/html602/TMonitor.html,https://root.cern,https://root.cern/root/html602/TMonitor.html,4,['monitor'],['monitored']
Energy Efficiency,"ject::(anonymous)TObject::kWriteDelete; static TVirtualX::EDrawModeTVirtualX::kXor; static TObject::(anonymous)TObject::kZombie. protected:. ULong_tfBlackPixelValue of black pixel in colormap; Int_tfBlueDivBlue value divider; Int_tfBlueShiftBits to left shift blue; Float_tfCharacterUpXCharacter Up vector along X; Float_tfCharacterUpYCharacter Up vector along Y; ColormapfColormapDefault colormap, 0 if b/w; Int_tfDepthNumber of color planes; void*fDisplayPointer to display; TVirtualX::EDrawModeTVirtualX::fDrawModeDrawing mode; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Int_tfGreenDivGreen value divider; Int_tfGreenShiftBits to left shift green; Bool_tfHasTTFontsTrue when TrueType fonts are used; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; TStringTNamed::fNameobject identifier; Int_tfRedDivRed value divider, -1 if no TrueColor visual; Int_tfRedShiftBits to left shift red, -1 if no TrueColor visual; DrawablefRootWinRoot window used as parent of all windows; Int_tfScreenNumberScreen number; Int_tfTextAlignText alignment (set in SetTextAlign); Short_tTAttText::fTextAlignText alignment; Int_tfTextAlignHText Alignment Horizontal; Int_tfTextAlignVText Alignment Vertical; Float_tTAttText::fTextAngleText angle; Color_tTAttText::fTextColorText color index; Font_tTAttText::fTextFontText font number; Float_tfTextMagnitudeText Magnitude; Float_tTAttText::fTextSizeText size; TStringTNamed::fTitleobject title; DrawablefVisRootWinRoot window with fVisual to be used to create GC's and XImages; RVisual*fVisualPointer to visual used by all windows; ULong_tfWhitePixelValue of white pixel in colormap. private:. TExMap*fColorsHash list of colors; CursorfCursors[19]List of cursors; Int_tfMaxNumberOfWindowsMaximum number of windows; XWindow_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGX11.html:24893,green,green,24893,root/html602/TGX11.html,https://root.cern,https://root.cern/root/html602/TGX11.html,2,['green'],['green']
Energy Efficiency,"ject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual const TMatrixDBase&GetDecompMatrix() const; Int_tTDecompBase::Hager(Double_t& est, Int_t iter = 5); voidTObject::MakeZombie(); voidTDecompBase::ResetStatus(). Data Members; public:. enum TDecompBase::EMatrixDecompStat { kInit; kPatternSet; kValuesSet; kMatrixSet; kDecomposed; kDetermined; kCondition; kSingular; };; enum TDecompBase::[unnamed] { kWorkMax; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tTDecompBase::fColLwbColumn lower bound of decomposed matrix; Double_tTDecompBase::fConditionmatrix condition number; Double_tTDecompBase::fDet1determinant mantissa; Double_tTDecompBase::fDet2determinant exponent for powers of 2; Int_tfImplicitPivotcontrol to determine implicit row scale before; Int_t*fIndex[fNIndex] row permutation index; TMatrixDfLUdecomposed matrix so that a = l u where; Int_tfNIndexsize of row permutation index; Int_tTDecompBase::fRowLwbRow lower bound of decomposed matrix; Double_tfSign= +/- 1 reflecting even/odd row permutations, resp.; Double_tTDecompBase::fTolsqrt(epsilon); epsilon is smallest number number so that 1+epsilon > 1. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDecompLU(); Default constructor. TDecompLU(Int_t nrows); Constructor for (nrows x nrows) matrix. TDecompLU(Int_t row_lwb, Int_t row_upb); Constructor for ([row_lwb..row_upb] x [row_lwb..row_upb]) matrix. TDecompLU(const TMatrixD& m, Double_t tol = 0.0, Int_t implicit = 1); Constructor for matrix a. TDecompLU(const TDecompLU& another); Copy constructor. Bool_t Decompose(); Matrix A is decomposed in components U and L so that P * A = U * L; If the decomposition succeeds, bit kDecomposed is set , otherwise kSingular. const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDecompLU.html:7725,power,powers,7725,root/html528/TDecompLU.html,https://root.cern,https://root.cern/root/html528/TDecompLU.html,6,['power'],['powers']
Energy Efficiency,"ject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TFileHandler::(anonymous)TFileHandler::kRead; static TObject::(anonymous)TObject::kSingleKey; static TFileHandler::(anonymous)TFileHandler::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. intTFileHandler::fFileNumFile descriptor; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; intTFileHandler::fMaskEvent interest mask, either bit 1 (read), 2 (write) or both can be set; intTFileHandler::fReadyMaskReadiness mask, either bit 1 (read), 2 (write) or both can be set; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TFileHandler*fHandlerHandler associated to the input socket; TSocket*fInputSockInput socket from client or master; static TXSocketHandler*fgSocketHandlerInput socket handler. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TSysEvtHandler. ←; TFileHandler. ←; TXSocketHandler. Function documentation; Bool_t Notify(); Set readiness on the monitor. TXSocketHandler * GetSocketHandler(TFileHandler* h = 0, TSocket* s = 0); Get an instance of the input socket handler with 'h' as handler,; connected to socket 's'.; Create the instance, if not already existing. void SetHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. TXSocketHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. virtual ~TXSocketHandler(); { }. Bool_t ReadNotify(); { return Notify(); }. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TXSocketHandler.html:11157,monitor,monitor,11157,root/html604/TXSocketHandler.html,https://root.cern,https://root.cern/root/html604/TXSocketHandler.html,2,['monitor'],['monitor']
Energy Efficiency,"ject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TFileHandler::(anonymous)TFileHandler::kRead; static TObject::(anonymous)TObject::kSingleKey; static TFileHandler::(anonymous)TFileHandler::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. intTFileHandler::fFileNumFile descriptor; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; intTFileHandler::fMaskEvent interest mask, either bit 1 (read), 2 (write) or both can be set; intTFileHandler::fReadyMaskReadiness mask, either bit 1 (read), 2 (write) or both can be set; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TFileHandler*fHandlerHandler associated to the input socket; TSocket*fInputSockInput socket from client or master; static TXSocketHandler*fgSocketHandlerInput socket handler. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TSysEvtHandler. ←; TFileHandler. ←; TXSocketHandler. Function documentation; Bool_t Notify(); Set readiness on the monitor. TXSocketHandler * GetSocketHandler(TFileHandler* h = 0, TSocket* s = 0); Get an instance of the input socket handler with 'h' as handler,; connected to socket 's'.; Create the instance, if not already existing. void SetHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. TXSocketHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. virtual ~TXSocketHandler(); { }. Bool_t ReadNotify(); { return Notify(); }. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXSocketHandler.html:11157,monitor,monitor,11157,root/html602/TXSocketHandler.html,https://root.cern,https://root.cern/root/html602/TXSocketHandler.html,2,['monitor'],['monitor']
Energy Efficiency,"ject::Paint(Option_t* option = """"); virtual RooPlot*plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; virtual voidTObject::Pop(); virtual voidRooAbsData::Print(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidprintArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(RooCmdArg arg1, RooCmdArg arg2 = RooCmdArg(), RooCmdArg arg3 = RooCmdArg(), RooCmdArg arg4 = RooCmdArg(), RooCmdArg arg5 = RooCmdArg(), RooCmdArg arg6 = RooCmdArg(), RooCmdArg arg7 = RooCmdArg(), RooCmdArg arg8 = RooCmdArg()); voidremoveSelfFromDir(); virtual voidreset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidset(Double_t weight, Double_t wgtErr = -1); voidset(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataHist.html:9035,reduce,reduce,9035,root/html526/RooDataHist.html,https://root.cern,https://root.cern/root/html526/RooDataHist.html,1,['reduce'],['reduce']
Energy Efficiency,"ject::Paint(Option_t* option = """"); virtual RooPlot*plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; virtual voidTObject::Pop(); virtual voidRooAbsData::Print(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidprintArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); voidremoveSelfFromDir(); virtual voidreset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidset(Double_t weight, Double_t wgtErr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDataHist.html:9410,reduce,reduce,9410,root/html530/RooDataHist.html,https://root.cern,https://root.cern/root/html530/RooDataHist.html,1,['reduce'],['reduce']
Energy Efficiency,"ject::Paint(Option_t* option = """"); virtual RooPlot*plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; virtual voidTObject::Pop(); virtual voidRooAbsData::Print(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidprintArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); voidremoveSelfFromDir(); virtual voidreset(); voidTObject::ResetBit(UInt_t f); voidRooAbsData::resetBuffers(); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; RooDataHist(); RooDataHist(const RooDataHist& other, const char* newname = 0); RooDataHist(const char* name, const char* title, const RooArgSet& vars, const char* binningN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataHist.html:8499,reduce,reduce,8499,root/html602/RooDataHist.html,https://root.cern,https://root.cern/root/html602/RooDataHist.html,4,['reduce'],['reduce']
Energy Efficiency,"ject::Paint(Option_t* option = """"); virtual RooPlot*plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; virtual voidTObject::Pop(); virtual voidRooAbsData::Print(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidprintArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); voidremoveSelfFromDir(); virtual voidreset(); voidTObject::ResetBit(UInt_t f); voidRooAbsData::resetBuffers(); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidset(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDataHist.html:9506,reduce,reduce,9506,root/html532/RooDataHist.html,https://root.cern,https://root.cern/root/html532/RooDataHist.html,4,['reduce'],['reduce']
Energy Efficiency,"ject::Paint(Option_t* option = """"); virtual RooPlot*plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; virtual voidTObject::Pop(); virtual voidRooAbsData::Print(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidprintArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); voidremoveSelfFromDir(); virtual voidreset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidset(Double_t weight, Double_t wgtErr = -1); voidset(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDataHist.html:9091,reduce,reduce,9091,root/html528/RooDataHist.html,https://root.cern,https://root.cern/root/html528/RooDataHist.html,1,['reduce'],['reduce']
Energy Efficiency,"ject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. UChar_t*fAllBits[fNbytes] array of UChars; UInt_tfNbitsHighest bit set + 1; UInt_tfNbytesNumber of UChars in fAllBits. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits(UInt_t nbits = 8); TBits constructor. All bits set to 0. TBits(const TBits& ); TBits copy constructor. TBits& operator=(const TBits& ); TBits assignment operator. ~TBits(); TBits destructor. void Clear(Option_t* option = """"); Clear the value. void Compact(); Reduce the storage used by the object to a minimun. UInt_t CountBits(UInt_t startBit = 0) const; Return number of bits set to 1 starting at bit startBit. void DoAndEqual(const TBits& rhs); Execute (*this) &= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoOrEqual(const TBits& rhs); Execute (*this) &= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoXorEqual(const TBits& rhs); Execute (*this) ^= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoFlip(); Execute ~(*this). void DoLeftShift(UInt_t shift); Execute the left shift operation. void DoRightShift(UInt_t shift); Execute the left shift operation. UInt_t FirstNullBit(UInt_t startBit = 0) const; Return position of first null bit (starting from position 0 and up). UInt_t LastNullBit(UInt_t startBit = 999999999) const; Return position of first null bit (starting from position 0 and up). UInt_t FirstSetBit(UInt_t startBit = 0) const; Retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBits.html:8168,Reduce,Reduce,8168,root/html602/TBits.html,https://root.cern,https://root.cern/root/html602/TBits.html,2,['Reduce'],['Reduce']
Energy Efficiency,"k all operations *for all RDataFrame computation graphs*; 1003before the first event loop is triggered: just-in-time compilation will happen once for all code required to be generated up to that point, also across different computation graphs.; 1004 ; 1005Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See [Activating RDataFrame execution logs](\ref rdf-logging).; 1006 ; 1007### Memory usage; 1008 ; 1009There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; 1010 ; 1011Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; 1012 ; 1013~~~{.cpp}; 1014// assuming df1 and df2 are separate computation graphs, do:;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:58211,consumption,consumption,58211,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['consumption'],['consumption']
Energy Efficiency,"k(); voidRefit(); voidReset(Int_t atom_size, Int_t chunk_size); Int_tS() const; virtual voidShowMembers(TMemberInspector&); Int_tSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Int_tVecSize() const. protected:. voidReleaseChunks(). private:. TEveChunkManager(const TEveChunkManager&); TEveChunkManager&operator=(const TEveChunkManager&). Data Members; protected:. Int_tfCapacityAvailable capacity within the chunks; vector<TArrayC*>fChunksMemory blocks; Int_tfNNumber of atoms in a chunk; Int_tfSSize of atom; Int_tfSizeSize of container, number of atoms; Int_tfVecSizeNumber of allocated chunks. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ReleaseChunks(); Release all memory chunks. TEveChunkManager(); Default constructor.; Call reset for initialization. TEveChunkManager(Int_t atom_size, Int_t chunk_size); Constructor. ~TEveChunkManager(); Destructor. void Reset(Int_t atom_size, Int_t chunk_size); Empty the container and reset it with given atom and chunk sizes. void Refit(); Refit the container so that all current data fits into a single; chunk. Char_t* NewChunk(); Allocate a new memory chunk and register it. Char_t* NewAtom(). TEveChunkManager(const TEveChunkManager& ). TEveChunkManager& operator=(const TEveChunkManager& ). Int_t S() const; { return fS; }. Int_t N() const; { return fN; }. Int_t Size() const; { return fSize; }. Int_t VecSize() const; { return fVecSize; }. Int_t Capacity() const; { return fCapacity; }. Char_t* Atom(Int_t idx) const; { return fChunks[idx/fN]->fArray + idx%fN*fS; }. Char_t* Chunk(Int_t chk) const; { return fChunks[chk]->fArray; }. Int_t NAtoms(Int_t chk) const; { return (chk < fVecSize-1) ? fN : (fSize-1)%fN + 1; }. » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveChunkManager.html:2167,Allocate,Allocate,2167,root/html534/TEveChunkManager.html,https://root.cern,https://root.cern/root/html534/TEveChunkManager.html,1,['Allocate'],['Allocate']
Energy Efficiency,"k. The text; is held in one of the markup argv[] fields of the <a> markup. Bool_t HandleHtmlInput(TGHtmlInput* pr, Event_t* event); Handle html input (button, checkbox, ...) event. Bool_t HandleRadioButton(TGHtmlInput* p); Handle radio button event. void ButtonClicked(const char* name, const char* val); Emit ButtonClicked() signal. void CheckToggled(const char* name, Bool_t on, const char* val); Emit CheckToggled() signal. void RadioChanged(const char* name, const char* val); Emit RadioChanged() signal. void InputSelected(const char* name, const char* val); Emit Selected() signal. void SubmitClicked(const char* val); Emit SubmitClicked() signal. Bool_t HandleButton(Event_t* event); Handle mouse button event. Bool_t HandleMotion(Event_t* event); handle mouse motion events. TGFont * GetFont(int iFont); The rendering and layout routines should call this routine in order to; get a font structure. The iFont parameter specifies which of the N_FONT; fonts should be obtained. The font is allocated if necessary. int InArea(TGHtmlMapArea* p, int left, int top, int x, int y); Only support rect and circles for now. TGHtmlElement * GetMap(const char* name); Returns html map element. float ColorDistance(ColorStruct_t* pA, ColorStruct_t* pB); Compute the squared distance between two colors. int GetColorByName(const char* zColor); This routine returns an index between 0 and N_COLOR-1 which indicates; which ColorStruct_t structure in the fApColor[] array should be used to describe; the color specified by the given name. int IsDarkColor(ColorStruct_t* p); Check to see if the given color is too dark to be easily distinguished; from black. int GetDarkShadowColor(int iBgColor); Given that the background color is iBgColor, figure out an; appropriate color for the dark part of a 3D shadow. int IsLightColor(ColorStruct_t* p); Check to see if the given color is too light to be easily distinguished; from white. int GetLightShadowColor(int iBgColor); Given that the background color is iBgColo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHtml.html:36443,allocate,allocated,36443,root/html528/TGHtml.html,https://root.cern,https://root.cern/root/html528/TGHtml.html,10,['allocate'],['allocated']
Energy Efficiency,"k; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TStringfBorderMethodString; Bool_tfCheckHistcheck of source histogram; Float_tfFineFactorfine tuning factor for Adaptive KDE; TGraph*fGraph! needed to create PDF from histogram; TH1*fHistcopy of input histogram; Int_tfHistAvgEvtPerBinavg event per source hist bin; Int_tfHistDefinedNBinssource hist bin num set by user; TH1*fHistOriginalthe input histogram; TF1*fIGetValintegration interface; TMVA::PDF::EInterpolateMethodfInterpolMethodinterpolation method; TStringfInterpolateString; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects (string); TMVA::KDEKernel::EKernelIterfKDEiterNumber of iterations (adaptive or not); TStringfKDEiterString; TMVA::KDEKernel::EKernelTypefKDEtypeKernel type to use for KDE; TStringfKDEtypeStringstrings used to read definitions; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxNsmoothMax number of smoothing iterations; Int_tfMinNsmoothMin number of smoothing iterations; TH1*fNSmoothHistnumber of smooth for each bin; Bool_tfNormalizenormalize histogram (false for cumulative distribution used in GaussTranform); Int_tfNsmoothMin number of smoothing iterations; TH1*fPDFHistthe high-binned histogram corresponding to the PDF; TStringfPDFNamefor output; UInt_tfReadingVersionthe TMVA version of the weight file; TSpline*fSpline! the used spline type; TStringfSuffix! the suffix for options; Bool_tfUseHistogramspline0 uses histogram as reference; static const Double_tfgEpsilonminimum PDF return; static const Bool_tfgManualIntegrationmanual integration (sum over bins) or DGAUSS; static const Int_tfgNbin_PdfHistnumber of bins in high-binned reference histogram; static TMVA::PDF*fgThisPDFthis PDF pointer . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDF(const TString& name, Bool_t norm = kTRUE); default constructor ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDF.html:8396,adapt,adaptive,8396,root/html528/TMVA__PDF.html,https://root.cern,https://root.cern/root/html528/TMVA__PDF.html,8,"['Adapt', 'adapt']","['Adaptive', 'adaptive']"
Energy Efficiency,"k;; 5663 nbytes += nb;; 5664 }; 5665 };; 5666 ; 5667#ifdef R__USE_IMT; 5668 if (nbranches > 1 && ROOT::IsImplicitMTEnabled() && fIMTEnabled && !TTreeCacheUnzip::IsParallelUnzip()) {; 5669 if (fSortedBranches.empty()); 5670 InitializeBranchLists(true);; 5671 ; 5672 // Count branches are processed first and sequentially; 5673 for (auto branch : fSeqBranches) {; 5674 nb = branch->GetEntry(entry, getall);; 5675 if (nb < 0) break;; 5676 nbytes += nb;; 5677 }; 5678 if (nb < 0) return nb;; 5679 ; 5680 // Enable this IMT use case (activate its locks); 5681 ROOT::Internal::TParBranchProcessingRAII pbpRAII;; 5682 ; 5683 Int_t errnb = 0;; 5684 std::atomic<Int_t> pos(0);; 5685 std::atomic<Int_t> nbpar(0);; 5686 ; 5687 auto mapFunction = [&]() {; 5688 // The branch to process is obtained when the task starts to run.; 5689 // This way, since branches are sorted, we make sure that branches; 5690 // leading to big tasks are processed first. If we assigned the; 5691 // branch at task creation time, the scheduler would not necessarily; 5692 // respect our sorting.; 5693 Int_t j = pos.fetch_add(1);; 5694 ; 5695 Int_t nbtask = 0;; 5696 auto branch = fSortedBranches[j].second;; 5697 ; 5698 if (gDebug > 0) {; 5699 std::stringstream ss;; 5700 ss << std::this_thread::get_id();; 5701 Info(""GetEntry"", ""[IMT] Thread %s"", ss.str().c_str());; 5702 Info(""GetEntry"", ""[IMT] Running task for branch #%d: %s"", j, branch->GetName());; 5703 }; 5704 ; 5705 std::chrono::time_point<std::chrono::system_clock> start, end;; 5706 ; 5707 start = std::chrono::system_clock::now();; 5708 nbtask = branch->GetEntry(entry, getall);; 5709 end = std::chrono::system_clock::now();; 5710 ; 5711 Long64_t tasktime = (Long64_t)std::chrono::duration_cast<std::chrono::microseconds>(end - start).count();; 5712 fSortedBranches[j].first += tasktime;; 5713 ; 5714 if (nbtask < 0) errnb = nbtask;; 5715 else nbpar += nbtask;; 5716 };; 5717 ; 5718 ROOT::TThreadExecutor pool;; 5719 pool.Foreach(mapFunction, fSortedBranches.size());; 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:225031,schedul,scheduler,225031,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['schedul'],['scheduler']
Energy Efficiency,"kAllLabel = 3; , kLabelAndNewLimits = 4; , kAutoP2HaveLimits = 5; , kAutoP2NeedLimits = 6. };  . Public Member Functions;  TH1Merger (TH1 &h, TCollection &l, Option_t *opt="""");  ;  ~TH1Merger ();  ; Bool_t operator() ();  Function performing the actual merge. ;  . Static Public Member Functions; static Bool_t AxesHaveLimits (const TH1 *h);  ; static Int_t CheckForDuplicateLabels (const TH1 *hist);  Check if histogram has duplicate labels Return an integer with bit set correponding on the axis that has duplicate labels e.g. ;  ; static Int_t FindBinNumber (Int_t ibin, const TAxis &inAxis, TAxis &outAxis);  ; static Int_t FindFixBinNumber (Int_t ibin, const TAxis &inAxis, const TAxis &outAxis);  ; static Bool_t HasDuplicateLabels (const THashList *labels);  Find a duplicate labels in an axis label list. ;  ; static Bool_t IsBinEmpty (const TH1 *hist, Int_t bin);  helper function for merging ;  . Private Member Functions; Bool_t AutoP2BufferMerge ();  ; Bool_t AutoP2BuildAxes (TH1 *);  Determine final boundaries and number of bins for histograms created in power-of-2 autobin mode. ;  ; Bool_t AutoP2Merge ();  ; Bool_t BufferMerge ();  ; void CopyBuffer (TH1 *hsrc, TH1 *hdes);  ; void DefineNewAxes ();  Function to define new histogram axis when merging It is call only in case of merging with different axis or with the buffer (kHasNewLimits) ;  ; Bool_t DifferentAxesMerge ();  Merged histogram when axis can be different. ;  ; EMergerType ExamineHistograms ();  Examine the list of histograms to find out which type of Merge we need to do Pass the input list containing the histogram to merge and h0 which is the initial histogram on which all the histogram of the list will be merged This are the possible cases: ;  ; Bool_t LabelMerge (bool newLimits=false);  Merge histograms with labels and if newLimits is set support the case that one of the axis can set new limits, if the axes are compatible. ;  ; void MergeBin (const TH1 *hist, Int_t inbin, Int_t outbin);  ; void MergeBi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Merger.html:1556,power,power-of-,1556,doc/master/classTH1Merger.html,https://root.cern,https://root.cern/doc/master/classTH1Merger.html,1,['power'],['power-of-']
Energy Efficiency,"kCurrentCheckSum) constCall GetCheckSum with validity check.Definition TClass.cxx:6572; TClass::IsSyntheticPairBool_t IsSyntheticPair() constDefinition TClass.h:521; TClass::GetDataMemberTDataMember * GetDataMember(const char *datamember) constReturn pointer to datamember object with name ""datamember"".Definition TClass.cxx:3506; TClass::GetStateEState GetState() constDefinition TClass.h:488; TClass::GetCollectionTypeROOT::ESTLType GetCollectionType() constReturn the 'type' of the STL the TClass is representing.Definition TClass.cxx:2953; TClass::RemoveStreamerInfovoid RemoveStreamerInfo(Int_t slot)Remove and delete the StreamerInfo in the given slot.Definition TClass.cxx:7387; TClass::GetStreamerInfoAbstractEmulatedTVirtualStreamerInfo * GetStreamerInfoAbstractEmulated(Int_t version=0) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4776; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TClass::HasDataMemberInfoBool_t HasDataMemberInfo() constDefinition TClass.h:407; TClass::CopyCollectionProxyvoid CopyCollectionProxy(const TVirtualCollectionProxy &)Replaces the collection proxy for this class.Definition TClass.cxx:2537; TClass::fIsSyntheticPairBool_t fIsSyntheticPairIndicates whether this class can be split or not. Values are -1, 0, 1, 2.Definition TClass.h:250; TClass::Destructorvoid Destructor(void *obj, Bool_t dtorOnly=kFALSE)Explicitly call destructor for object.Definition TClass.cxx:5467; TClass::RegisterStreamerInfovoid RegisterStreamerInfo(TVirtualStreamerInfo *info)Register the StreamerInfo in the given slot, change the State of the TClass as appropriate.Definition TClass.cxx:7363; TClass::CallShowMembersBool_t CallShowMembers(const void *obj, TMemberInspector &insp, Bool_t isTransient=kFALSE) constCall ShowMembers() on the obj of this class type, passing i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:249977,allocate,allocated,249977,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"kFALSE;  ; Bool_t fNoLabelMerge = kFALSE;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/hist/hist/src/TH1Merger.h>; Member Enumeration Documentation. ◆ EMergerType. enum TH1Merger::EMergerType. EnumeratorkNotCompatible ; kAllSameAxes ; kAllNoLimits ; kHasNewLimits ; kAllLabel ; kLabelAndNewLimits ; kAutoP2HaveLimits ; kAutoP2NeedLimits . Definition at line 23 of file TH1Merger.h. Constructor & Destructor Documentation. ◆ TH1Merger(). TH1Merger::TH1Merger ; (; TH1 & ; h, . TCollection & ; l, . Option_t * ; opt = """" . ). inline . Definition at line 64 of file TH1Merger.h. ◆ ~TH1Merger(). TH1Merger::~TH1Merger ; (; ). inline . Definition at line 91 of file TH1Merger.h. Member Function Documentation. ◆ AutoP2BufferMerge(). Bool_t TH1Merger::AutoP2BufferMerge ; (; ). private . Definition at line 588 of file TH1Merger.cxx. ◆ AutoP2BuildAxes(). Bool_t TH1Merger::AutoP2BuildAxes ; (; TH1 * ; h). private . Determine final boundaries and number of bins for histograms created in power-of-2 autobin mode. ; Return kTRUE if compatible, updating fNewXaxis accordingly; return kFALSE if something wrong.; The histograms are not merge-compatible if 1. have different variable-size bins; 2. larger bin size is not an integer multiple of the smaller one; 3. the final estimated range is smalle then the bin size. Definition at line 80 of file TH1Merger.cxx. ◆ AutoP2Merge(). Bool_t TH1Merger::AutoP2Merge ; (; ). private . Definition at line 631 of file TH1Merger.cxx. ◆ AxesHaveLimits(). Bool_t TH1Merger::AxesHaveLimits ; (; const TH1 * ; h). static . Definition at line 19 of file TH1Merger.cxx. ◆ BufferMerge(). Bool_t TH1Merger::BufferMerge ; (; ). private . Definition at line 729 of file TH1Merger.cxx. ◆ CheckForDuplicateLabels(). Int_t TH1Merger::CheckForDuplicateLabels ; (; const TH1 * ; hist). static . Check if histogram has duplicate labels Return an integer with bit set correponding on the axis that has duplicate labels e.g. ; duplicate labels o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1Merger.html:4232,power,power-of-,4232,doc/master/classTH1Merger.html,https://root.cern,https://root.cern/doc/master/classTH1Merger.html,1,['power'],['power-of-']
Energy Efficiency,"kGenericLooper:; 3326 default:; 3327 // For now TBufferXML would force use to allocate the data buffer each time and copy into the real thing.; 3328 readSequence->AddAction(GetConvertCollectionReadAction<GenericLooper>(oldClass->GetCollectionProxy()->GetType(), newClass->GetCollectionProxy()->GetType(), new TConfigSTL(this,i,compinfo,compinfo->fOffset,1,oldClass,newClass,element->GetTypeName(),isSTLbase)));; 3329 break;; 3330 }; 3331 }; 3332 }; 3333 } else {; 3334 if (element->GetStreamer()) {; 3335 readSequence->AddAction(ReadSTL<ReadSTLMemberWiseSameClass,ReadSTLObjectWiseStreamer>, new TConfigSTL(this,i,compinfo,compinfo->fOffset,1,oldClass,element->GetStreamer(),element->GetTypeName(),isSTLbase));; 3336 } else if (oldClass) {; 3337 if (oldClass->GetCollectionProxy() == 0 || oldClass->GetCollectionProxy()->GetValueClass() || oldClass->GetCollectionProxy()->HasPointers() ) {; 3338 readSequence->AddAction(ReadSTL<ReadSTLMemberWiseSameClass,ReadSTLObjectWiseFastArray>, new TConfigSTL(this,i,compinfo,compinfo->fOffset,1,oldClass,element->GetTypeName(),isSTLbase));; 3339 } else {; 3340 switch (SelectLooper(*oldClass->GetCollectionProxy())) {; 3341 case kVectorLooper:; 3342 readSequence->AddAction(GetNumericCollectionReadAction<VectorLooper>(oldClass->GetCollectionProxy()->GetType(), new TConfigSTL(this,i,compinfo,compinfo->fOffset,1,oldClass,element->GetTypeName(),isSTLbase)));; 3343 break;; 3344 case kAssociativeLooper:; 3345 readSequence->AddAction(GetNumericCollectionReadAction<AssociativeLooper>(oldClass->GetCollectionProxy()->GetType(), new TConfigSTL(this,i,compinfo,compinfo->fOffset,1,oldClass,element->GetTypeName(),isSTLbase)));; 3346 break;; 3347 case kVectorPtrLooper:; 3348 case kGenericLooper:; 3349 default:; 3350 // For now TBufferXML would force use to allocate the data buffer each time and copy into the real thing.; 3351 readSequence->AddAction(GetNumericCollectionReadAction<GenericLooper>(oldClass->GetCollectionProxy()->GetType(), new TConfigSTL(this,i,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:150857,allocate,allocate,150857,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency,"kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TList*fActivelist of sockets to monitor; TList*fDeActivelist of (temporary) disabled sockets; Bool_tfInterruptflags an interrupt to Select; Bool_tfMainLooptrue if monitoring sockets within the main event loop; TSocket*fReadysocket which is ready to be read or written. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMonitor(Bool_t mainloop = kTRUE); Create a monitor object. If mainloop is true the monitoring will be; done in the main event loop. TMonitor(const TMonitor& m); Copy constructor. ~TMonitor(); Cleanup the monitor object. Does not delete sockets being monitored. void Add(TSocket* sock, Int_t interest = kRead); Add socket to the monitor's active list. If interest=kRead then we; want to monitor the socket for read readiness, if interest=kWrite; then we monitor the socket for write readiness, if interest=kRead|kWrite; then we monitor both read and write readiness. void SetInterest(TSocket* sock, Int_t interest = kRead); Set interest mask for socket sock to interest. If the socket is not; in the active list move it or add it there.; If interest=kRead then we want to monitor the socket for read readiness,; if interest=kWrite then we monitor the socket for write readiness,; if interest=kRead|kWrite then we monitor both read and write readiness. void Remove(TSocket* sock); Remove a socket from the monitor. void RemoveAll(); Remove all sockets from the monitor. void Activate(TSocket* sock); Activate a de-activated socket. void ActivateAll(); Activate all de-activated sockets. void DeActivate(TSocket* sock); De-activate a socket. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMonitor.html:10291,monitor,monitored,10291,root/html528/TMonitor.html,https://root.cern,https://root.cern/root/html528/TMonitor.html,6,['monitor'],['monitored']
Energy Efficiency,"kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from THnBase; enum  { kNoInt; , kValidInt; , kInvalidInt; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from THnSparse;  THnSparse ();  Construct an empty THnSparse. ;  ;  THnSparse (const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin, const Double_t *xmax, Int_t chunksize);  Construct a THnSparse with ""dim"" dimensions, with chunksize as the size of the chunks. ;  ; THnSparseArrayChunk * AddChunk ();  Create a new chunk of bin content. ;  ; void FillBin (Long64_t bin, Double_t w) override;  Increment the bin content of ""bin"" by ""w"", return the bin index. ;  ; void FillExMap ();  We have been streamed; set up fBins. ;  ; Long64_t GetBinIndexForCurrentBin (Bool_t allocate);  Return the index for fCurrentBinIndex. ;  ; THnSparseArrayChunk * GetChunk (Int_t idx) const;  ; THnSparseCompactBinCoord * GetCompactCoord () const;  Return THnSparseCompactBinCoord object. ;  ; void InitStorage (Int_t *nbins, Int_t chunkSize) override;  Initialize the storage of a histogram created via Init() ;  ; void Reserve (Long64_t nbins) override;  Initialize storage for nbins. ;  ;  Protected Member Functions inherited from THnBase;  THnBase ();  ;  THnBase (const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin, const Double_t *xmax);  Construct a THnBase with ""dim"" dimensions, ""nbins"" holds the number of bins for each dimension; ""xmin"" and ""xmax"" the minimal and maximal value for each dimension. ;  ;  THnBase (const char *name, const char *title, Int_t dim, const Int_t *nbins, const std::vector< std::vector< double > > &xbins);  ;  THnBase (const THnBase &other);  ;  THnBase (THnBase &&other);  ; void AddInternal (const THnBase *h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseT.html:21625,allocate,allocate,21625,doc/master/classTHnSparseT.html,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html,1,['allocate'],['allocate']
Energy Efficiency,"kLTXDefinition BoostZ.h:49; ROOT::Math::BoostZ::kLTZ@ kLTZDefinition BoostZ.h:49; ROOT::Math::BoostZ::kLZT@ kLZTDefinition BoostZ.h:48; ROOT::Math::BoostZ::kLYY@ kLYYDefinition BoostZ.h:47; ROOT::Math::BoostZ::kLTY@ kLTYDefinition BoostZ.h:49; ROOT::Math::BoostZ::kLZZ@ kLZZDefinition BoostZ.h:48; ROOT::Math::BoostZ::kLTT@ kLTTDefinition BoostZ.h:49; ROOT::Math::BoostZ::kLXX@ kLXXDefinition BoostZ.h:46; ROOT::Math::BoostZ::kLYT@ kLYTDefinition BoostZ.h:47; ROOT::Math::BoostZ::kLZX@ kLZXDefinition BoostZ.h:48; ROOT::Math::BoostZ::kLZY@ kLZYDefinition BoostZ.h:48; ROOT::Math::BoostZ::kLXY@ kLXYDefinition BoostZ.h:46; ROOT::Math::BoostZ::kLXT@ kLXTDefinition BoostZ.h:46; ROOT::Math::BoostZ::kLYX@ kLYXDefinition BoostZ.h:47; ROOT::Math::BoostZ::kLYZ@ kLYZDefinition BoostZ.h:47; ROOT::Math::BoostZ::BoostZBoostZ()Default constructor (identity transformation)Definition BoostZ.cxx:30; ROOT::Math::DisplacementVector3DClass describing a generic displacement vector in 3 dimensions.Definition DisplacementVector3D.h:58; ROOT::Math::LorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system ...Definition LorentzVector.h:59; ROOT::Math::PxPyPzE4DClass describing a 4D cartesian coordinate system (x, y, z, t coordinates) or momentum-energy vectors...Definition PxPyPzE4D.h:44; double; ROOT::Math::betadouble beta(double x, double y)Calculates the beta function.Definition SpecFuncMathCore.cxx:111; MathNamespace for new Math classes and functions.; ROOT::Math::GenVector::Throwvoid Throw(const char *)function throwing exception, by creating internally a GenVector_exception only when neededDefinition GenVector_exception.h:80; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699. mathgenvectorsrcBoostZ.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BoostZ_8cxx_source.html:6558,energy,energy,6558,doc/master/BoostZ_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BoostZ_8cxx_source.html,1,['energy'],['energy']
Energy Efficiency,kMonomials; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfBinVarXNumber of bin in independent variables; Int_tfBinVarYNumber of bin in dependent variables; Double_tfChi2Chi square of fit; TVectorDfCoefficientsVector of the final coefficients; TVectorDfCoefficientsRMSVector of RMS of coefficients; Double_tfCorrelationCoeffMulti Correlation coefficient; TMatrixDfCorrelationMatrixCorrelation matrix; Double_tfErrorError from parameterization; TVirtualFitter*fFitter! Fit object (MINUIT); Int_t*fFunctionCodes[fMaxFunctions] acceptance code; TMatrixDfFunctionsFunctions evaluated over sample; Byte_tfHistogramMaskBit pattern of hisograms used; TList*fHistogramsList of histograms; Bool_tfIsUserFunctionFlag for user defined function; Bool_tfIsVerbose; Double_tfMaxAngleMax angle for acepting new function; Int_tfMaxFuncNVfMaxFunctions*fNVariables; Int_tfMaxFunctionsmax number of functions; Int_t*fMaxPowers[fNVariables] maximum powers; Int_t*fMaxPowersFinal[fNVariables] maximum powers from fit;; Double_tfMaxQuantityMax value of dependent quantity; Double_tfMaxResidualMax redsidual value; Int_tfMaxResidualRowRow giving max residual; Int_tfMaxStudymax functions to study; Int_tfMaxTermsMax terms expected in final expr.; TVectorDfMaxVariablesmax value of independent variables; Double_tfMeanQuantityMean of dependent quantity; TVectorDfMeanVariablesmean value of independent variables; Double_tfMinAngleMin angle for acepting new function; Double_tfMinQuantityMin value of dependent quantity; Double_tfMinRelativeErrorMin relative error accepted; Double_tfMinResidualMin redsidual value; Int_tfMinResidualRowRow giving min residual; T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMultiDimFit.html:23370,power,powers,23370,root/html602/TMultiDimFit.html,https://root.cern,https://root.cern/root/html602/TMultiDimFit.html,8,['power'],['powers']
Energy Efficiency,"kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_t*fColIndex[fNelems] column index; Int_tTMatrixTBase<float>::fColLwblower bound of the col index; float*fElements[fNelems]; Bool_tTMatrixTBase<float>::fIsOwner!default kTRUE, when Use array kFALSE; Int_tTMatrixTBase<float>::fNcolsnumber of columns; Int_tTMatrixTBase<float>::fNelemsnumber of elements in matrix; Int_tTMatrixTBase<float>::fNrowIndexlength of row index array (= fNrows+1) wich is only used for sparse matrices; Int_tTMatrixTBase<float>::fNrowsnumber of rows; Int_t*fRowIndex[fNrowIndex] row index; Int_tTMatrixTBase<float>::fRowLwblower bound of the row index; floatTMatrixTBase<float>::fTolsqrt(epsilon); epsilon is smallest number number so that 1+epsilon > 1. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TMatrixTSparse<Element> Allocate(Int_t nrows, Int_t ncols, Int_t row_lwb = 0, Int_t col_lwb = 0, Int_t init = 0, Int_t nr_nonzeros = 0); Allocate new matrix. Arguments are number of rows, columns, row lowerbound (0 default); and column lowerbound (0 default), 0 initialization flag and number of non-zero; elements (only relevant for sparse format). TMatrixTBase<Element> &TMatrixTSparse<Element> InsertRow(Int_t row, Int_t col, const float* v, Int_t n = -1); Insert in row rown, n elements of array v at column coln. void TMatrixTSparse<Element> ExtractRow(Int_t row, Int_t col, float* v, Int_t n = -1) const; Store in array v, n matrix elements of row rown starting at column coln. void TMatrixTSparse<Element> AMultBt(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr); General matrix multiplication. Create a matrix C such that C = A * B'.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMultBt(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr); General matrix multiplication. Creat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMatrixTSparse_float_.html:16853,Allocate,Allocate,16853,root/html532/TMatrixTSparse_float_.html,https://root.cern,https://root.cern/root/html532/TMatrixTSparse_float_.html,4,['Allocate'],['Allocate']
Energy Efficiency,"kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TBranch*fBranchPointer to the basket support branch; char*TKey::fBufferObject buffer; TBuffer*TKey::fBufferRefPointer to the TBuffer object; Int_tfBufferSizefBuffer length in bytes; TStringTKey::fClassNameObject Class name; char*fCompressedBuffer!Temporary place holder for the compressed buffer if needed.; Int_tfCompressedSize!Size of the allocated memroy in fCompressedBuffer; Short_tTKey::fCycleCycle number; TDatimeTKey::fDatimeDate/Time of insertion in file; Int_t*fDisplacement![fNevBuf] Displacement of entries in fBuffer(TKey); Int_t*fEntryOffset[fNevBuf] Offset of entries in fBuffer(TKey); Bool_tfHeaderOnlyTrue when only the basket header must be read/written; Short_tTKey::fKeylenNumber of bytes for the key itself; Int_tfLastPointer to last used byte in basket; Int_tTKey::fLeftNumber of bytes left in current segment; TDirectory*TKey::fMotherDir! pointer to mother directory; TStringTNamed::fNameobject identifier; Int_tTKey::fNbytesNumber of bytes for the object on file; Int_tfNevBufNumber of entries in basket; Int_tfNevBufSizeLength in Int_t of fEntryOffset OR fixed length of each entry if fEntryOffset is null!; Int_tTKey::fObjlenLength of uncompressed object in bytes; UShort_tTKey::fPidOffset! Offset to be added to the pid index in this key/buffer. This is actually saved in the high bits of fSeekPdir; Long64_tTKey::fSeekKeyLocation of object on file; Long64_tTKey::fSeekPdirLocation of parent directory on file; TStringTNamed::fTitleobject title; Int_tTKey::fVersionKey version identifier. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBasket(); Default contructor. TBasket(TDirectory* motherDir); Constructor used during reading. TBasket(const char* name, const char* title, TBranch* branch); Basket normal construct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBasket.html:7842,allocate,allocated,7842,root/html528/TBasket.html,https://root.cern,https://root.cern/root/html528/TBasket.html,1,['allocate'],['allocated']
Energy Efficiency,"kPointers); voidInit(); static voidMacAllocHook(void* ptr, size_t size); static voidMacFreeHook(void* ptr); voidTObject::MakeZombie(). private:. (unknown)(); memstat::TMemStatMngTMemStatMng(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_tfBeginTimetime when monitoring starts; Int_tfBtIDback trace identifier; Int_t*fBufBtIDback trace identifier; Int_tfBufNcurrent number of alloc or free in the buffer; Int_t*fBufNBytesnumber of bytes allocated/freed; ULong64_t*fBufPosposition in memory where alloc/free happens; Int_t*fBufTimems10000*(current time - begin time); Int_tfBufferSizemax number of malloc/free to keep in the buffer; TFile*fDumpFile!file to dump current information; TTree*fDumpTree!tree to dump information; Int_t*fIndexarray to sort fBufPos; Int_tfMaxCallsmax number of malloc/frees to register in the output Tree; Bool_t*fMustWriteflag to write or not the entry; Int_tfNBytesnumber of bytes allocated/freed; ULong64_tfPosposition in memory where alloc/free happens; void*fPreviousFreeHook!old free function; void*fPreviousMallocHook!old malloc function; TTimeStampfTimeStamp; Int_tfTimems10000*(current time - begin time); Bool_tfUseGNUBuiltinBacktrace; static memstat::TMemStatMng*fgInstancepointer to instance; static void*fgStackTopstack top pointer. private:. memstat::TMemStatMng::CRCSet_tfBTChecksums; Int_tfBTCount; UInt_tfBTIDCount; memstat::TMemStatFAddrContainerfFAddrs; TObjArray*fFAddrsList; TH1I*fHbtids; TNamed*fSysInfo. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMemStatMng(); Default constructor. void Init(); Initialize MemStat manager - used only by instance method. TMemStatMng* GetInstance(); GetInstance - a static function; Initialize a singleton of MemStat mana",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/memstat__TMemStatMng.html:5664,monitor,monitoring,5664,root/html528/memstat__TMemStatMng.html,https://root.cern,https://root.cern/root/html528/memstat__TMemStatMng.html,15,"['allocate', 'monitor']","['allocated', 'monitoring']"
Energy Efficiency,"kPropagatevoid backPropagate(std::vector< std::vector< LayerData > > &layerPatternData, const Settings &settings, size_t trainFromLayer, size_t totalNumWeights) constDefinition NeuralNet.icc:1355; TMVA::DNN::SettingsSettings for the training of the neural net.Definition NeuralNet.h:730; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:67573,monitor,monitoring,67573,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['monitor'],['monitoring']
Energy Efficiency,"kSTLp)) {; 5366 Error(""SetAddress"",; 5367 ""Branch %s is a split STL container (fStreamerType is: %d), the address can not be set directly."",; 5368 GetName(), fStreamerType);; 5369 } else if (fStreamerType == -1) {; 5370 // -- We are a top-level branch.; 5371 void** pp = (void**) fAddress;; 5372 if (!*pp) {; 5373 // -- Caller wants us to allocate the STL container, but they will own it.; 5374 *pp = proxy->New();; 5375 if (!(*pp)) {; 5376 Error(""SetAddress"", ""Failed to allocate STL container for branch '%s'"", GetName());; 5377 // FIXME: Should we do this? Lots of other code wants; 5378 // fAddress to be zero if no fObject, but is; 5379 // that a good thing?; 5380 fAddress = nullptr;; 5381 ResetBit(kAddressSet);; 5382 }; 5383 }; 5384 fObject = (char*) *pp;; 5385 } else {; 5386 // -- We are a pointer to an STL container.; 5387 // Note: We do this so that the default constructor,; 5388 // or the i/o constructor can be lazy.; 5389 void** pp = (void**) fAddress;; 5390 if (!*pp) {; 5391 // -- Caller wants us to allocate the STL container, but they will own it.; 5392 *pp = proxy->New();; 5393 if (!(*pp)) {; 5394 Error(""SetAddress"", ""Failed to allocate STL container for branch '%s'"", GetName());; 5395 // FIXME: Should we do this? Lots of other code wants; 5396 // fAddress to be zero if no fObject, but is; 5397 // that a good thing?; 5398 fAddress = nullptr;; 5399 ResetBit(kAddressSet);; 5400 }; 5401 }; 5402 fObject = (char*) *pp;; 5403 }; 5404 }; 5405 } else {; 5406 // -- We have been given a zero address, allocate for top-level only.; 5407 if ((fStreamerType == TVirtualStreamerInfo::kObject) ||; 5408 (fStreamerType == TVirtualStreamerInfo::kAny) ||; 5409 (fStreamerType == TVirtualStreamerInfo::kSTL)) {; 5410 // We are *not* a top-level branch and we are *not* a pointer to an STL container.; 5411 // Case of an embedded STL container.; 5412 // Note: We test for the kObject and kAny types to support; 5413 // the (unwise) choice of inheriting from an STL container.; 5414 Error(""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:200062,allocate,allocate,200062,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency,"kTRUE if TH1::Sumw2 must be called when creating new histograms.; 4415/// see TH1::SetDefaultSumw2.; 4416 ; 4417Bool_t TH1::GetDefaultSumw2(); 4418{; 4419 return fgDefaultSumw2;; 4420}; 4421 ; 4422////////////////////////////////////////////////////////////////////////////////; 4423/// Return the current number of entries.; 4424 ; 4425Double_t TH1::GetEntries() const; 4426{; 4427 if (fBuffer) {; 4428 Int_t nentries = (Int_t) fBuffer[0];; 4429 if (nentries > 0) return nentries;; 4430 }; 4431 ; 4432 return fEntries;; 4433}; 4434 ; 4435////////////////////////////////////////////////////////////////////////////////; 4436/// Number of effective entries of the histogram.; 4437///; 4438/// \f[; 4439/// neff = \frac{(\sum Weights )^2}{(\sum Weight^2 )}; 4440/// \f]; 4441///; 4442/// In case of an unweighted histogram this number is equivalent to the; 4443/// number of entries of the histogram.; 4444/// For a weighted histogram, this number corresponds to the hypothetical number of unweighted entries; 4445/// a histogram would need to have the same statistical power as this weighted histogram.; 4446/// Note: The underflow/overflow are included if one has set the TH1::StatOverFlows flag; 4447/// and if the statistics has been computed at filling time.; 4448/// If a range is set in the histogram the number is computed from the given range.; 4449 ; 4450Double_t TH1::GetEffectiveEntries() const; 4451{; 4452 Stat_t s[kNstat];; 4453 this->GetStats(s);// s[1] sum of squares of weights, s[0] sum of weights; 4454 return (s[1] ? s[0]*s[0]/s[1] : TMath::Abs(s[0]) );; 4455}; 4456 ; 4457////////////////////////////////////////////////////////////////////////////////; 4458/// Shortcut to set the three histogram colors with a single call.; 4459///; 4460/// By default: linecolor = markercolor = fillcolor = -1; 4461/// If a color is < 0 this method does not change the corresponding color if positive or null it set the color.; 4462///; 4463/// For instance:; 4464/// ~~~ {.cpp}; 4465/// h->Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:183326,power,power,183326,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['power'],['power']
Energy Efficiency,"kTRUE, 3, kTRUE, 3);; Float_t *xpeaks = s->GetPositionX();; for (i = 0; i < nfound; i++) {; a=xpeaks[i];; bin = 1 + Int_t(a + 0.5);; fPositionX[i] = h->GetBinCenter(bin);; fPositionY[i] = h->GetBinContent(bin);; }; TPolyMarker * pm = (TPolyMarker*)h->GetListOfFunctions()->FindObject(""TPolyMarker"");; if (pm) {; h->GetListOfFunctions()->Remove(pm);; delete pm;; }; pm = new TPolyMarker(nfound, fPositionX, fPositionY);; h->GetListOfFunctions()->Add(pm);; pm->SetMarkerStyle(23);; pm->SetMarkerColor(kRed);; pm->SetMarkerSize(1.3);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,dest[i]);; d->SetLineColor(kRed);; d->Draw(""SAME"");; printf(""Found %d candidate peaks\n"",nfound);; for(i=0;i; ; Example 16 - script SearchHR3.c:; ; ; Peak # Position Sigma ; 1 118 26 ; 2 162 41 ; 3 310 4 ; 4 330 8 ; 5 482 22 ; 6 491 26 ; 7 740 21 ; 8 852 15 ; 9 954 12 ; 10 989 13 ; ; ; Table 4 Positions and sigma of peaks in the following examples.; ; ; ; Fig. 30 Influence of number of iterations (3-red, 10-blue, 100- green,; 1000-magenta), sigma=8, smoothing width=3.; ; ; ; Fig. 31 Influence of sigma (3-red, 8-blue, 20- green, 43-magenta),; num. iter.=10, sm. width=3.; ; ; ; Fig. 32 Influence smoothing width (0-red, 3-blue, 7- green, 20-magenta), num.; iter.=10, sigma=8.; ; Script:; ; // Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum).; // To execute this example, do; // root > .x SearchHR3.C; #include ; void SearchHR3() {; Float_t fPositionX[100];; Float_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; Double_t nbins = 1024,a;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Float_t * source = new float[nbins];; Float_t * dest = new float[nbins];; TH1F *h = new TH1F(""h"",""Influence of # of iterations in deconvolution in peak searching"",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum.html:55141,green,green,55141,root/html528/TSpectrum.html,https://root.cern,https://root.cern/root/html528/TSpectrum.html,6,['green'],['green']
Energy Efficiency,"kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. TClass*fClasspointer to the class info; Bool_tfDtorOnlycall only dtor and not delete when calling ~xxx; CallFunc_t*fFuncCINT method invocation environment; TFunction*fMetPtrpointer to the method or function info; TStringfMethodmethod name; Long_tfOffsetoffset added to object pointer before method invocation; TStringfParamsargument string; TStringfProtoprototype string; TMethodCall::EReturnTypefRetTypemethod return type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMethodCall(); Default TMethodCall ctor. Use Init() to initialize the method call; environment. TMethodCall(TClass* cl, const char* method, const char* params); Create a method invocation environment for a specific class, method and; parameters. The parameter string has the form: ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(object,...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). TMethodCall(const char* function, const char* params); Create a global function invocation environment. The parameter; string has the form: ""\""aap\"", 3, 4,35"". To execute the; function call TMethodCall::Execute(...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). TMethodCall(const TMethodCall& org); Copy ctor. TMethodCall & operator=(const TMethodCall& rhs); Assignement operator. ~TMethodCall(); TMethodCall dtor. TObject * Clone(const char* newname = """") const; Return an exact copy of this object. void Init(TClass* cl, const char* method, const char* params); Initialize the method invocation environment. Necessary input; information: the class, method name and the parameter string; of the form ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(object,...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Exe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMethodCall.html:7868,efficient,efficient,7868,root/html528/TMethodCall.html,https://root.cern,https://root.cern/root/html528/TMethodCall.html,6,['efficient'],['efficient']
Energy Efficiency,"keTubs(""VNAME"",ptrMed,rmin,rmax,; dz,phi1,phi2);. // See class TGeoManager for the rest of shapes.; // Making a volume with a given shape with a unique prototype; TGeoVolume *vol = gGeoManager->Volume(""VNAME"",""XXXX"",nmed,upar,; npar);. // Where XXXX stands for the first 4 letters of the specific shape; // classes, nmed is the medium number, upar is an Double_t * array; // of the shape parameters and npar is the number of parameters.; // This prototype allows (npar = 0) to define volumes with shape; // defined only at positioning time (volumes defined in this way; // need to be positioned using TGeoManager::Node() method); 18.4.2.3 Positioned Volumes (Nodes); Geometrical modeling is a difficult task when the number of different geometrical objects is 106-108. This is more or less the case for detector geometries of complex experiments, where a ‘flat’ CSG model description cannot scale with the current CPU performances. This is the reason why models like GEANT [1] introduced an additional dimension (depth) in order to reduce the complexity of the problem. This concept is also preserved by the ROOT modeller and introduces a pure geometrical constraint between objects (volumes in our case) - containment. This means in fact that any positioned volume has to be contained by another. Now what means contained and positioned?. We will say that a volume contains a point if this is inside the shape associated to the volume. For instance, a volume having a box shape will contain all points P=(X,Y,Z) verifying the conditions: Abs(Pi)dXi. The points on the shape boundaries are considered as inside the volume. The volume contains a daughter if it contains all the points contained by the daughter.; The definition of containment works of course only with points defined in the local coordinate system of the considered volume. Positioning a volume inside another have to introduce a geometrical transformation between the two. If M defines this transformation, any point in the daughter ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:936977,reduce,reduce,936977,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['reduce'],['reduce']
Energy Efficiency,"ken - use lowest color value from both images; diff - use absolute value of the color difference between two images; dissipate - randomly alpha-blend images; hue - hue bottom image same as top image; lighten - use highest color value from both images; overlay - some weird image overlaying(see GIMP); saturate - saturate bottom image same as top image; screen - another weird image overlaying(see GIMP); sub - color substraction with saturation; tint - tinting image with image; value - value bottom image same as top image. void Blur(Double_t hr = 3, Double_t vr = 3); Perform Gaussian blurr of the image (usefull for drop shadows).; hr - horizontal radius of the blurr; vr - vertical radius of the blurr. TObject * Clone(const char* newname) const; Clone image. Double_t * Vectorize(UInt_t max_colors = 256, UInt_t dither = 4, Int_t opaque_threshold = 1); Reduce colordepth of an image and fills vector of ""scientific data""; [0...1]. Colors are reduced by allocating colorcells to most used colors first,; and then approximating other colors with those allocated.; max_colors - maximum size of the colormap.; dither - number of bits to strip off the color data ( 0...7 ); opaque_threshold - alpha channel threshold at which pixel should be; treated as opaque. void HSV(UInt_t hue = 0, UInt_t radius = 360, Int_t H = 0, Int_t S = 0, Int_t V = 0, Int_t x = 0, Int_t y = 0, UInt_t width = 0, UInt_t height = 0); This function will tile original image to specified size with offsets; requested, and then it will go though it and adjust hue, saturation and; value of those pixels that have specific hue, set by affected_hue; affected_radius parameters. When affected_radius is greater then 180; entire image will be adjusted. Note that since grayscale colors have; no hue - the will not get adjusted. Only saturation and value will be; adjusted in gray pixels.; Hue is measured as an angle on a 360 degree circle, The following is; relationship of hue values to regular color names :; red - 0; yellow - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TASImage.html:33800,reduce,reduced,33800,root/html534/TASImage.html,https://root.cern,https://root.cern/root/html534/TASImage.html,12,"['allocate', 'reduce']","['allocated', 'reduced']"
Energy Efficiency,"ken - use lowest color value from both images; diff - use absolute value of the color difference between two images; dissipate - randomly alpha-blend images; hue - hue bottom image same as top image; lighten - use highest color value from both images; overlay - some wierd image overlaying(see GIMP); saturate - saturate bottom image same as top image; screen - another wierd image overlaying(see GIMP); sub - color substraction with saturation; tint - tinting image with image; value - value bottom image same as top image. void Blur(Double_t hr = 3, Double_t vr = 3); Perform Gaussian blurr of the image (usefull for drop shadows).; hr - horizontal radius of the blurr; vr - vertical radius of the blurr. TObject * Clone(const char* newname) const; Clone image. Double_t * Vectorize(UInt_t max_colors = 256, UInt_t dither = 4, Int_t opaque_threshold = 1); Reduce colordepth of an image and fills vector of ""scientific data""; [0...1]. Colors are reduced by allocating colorcells to most used colors first,; and then approximating other colors with those allocated.; max_colors - maximum size of the colormap.; dither - number of bits to strip off the color data ( 0...7 ); opaque_threshold - alpha channel threshold at which pixel should be; treated as opaque. void HSV(UInt_t hue = 0, UInt_t radius = 360, Int_t H = 0, Int_t S = 0, Int_t V = 0, Int_t x = 0, Int_t y = 0, UInt_t width = 0, UInt_t height = 0); This function will tile original image to specified size with offsets; requested, and then it will go though it and adjust hue, saturation and; value of those pixels that have specific hue, set by affected_hue; affected_radius parameters. When affected_radius is greater then 180; entire image will be adjusted. Note that since grayscale colors have; no hue - the will not get adjusted. Only saturation and value will be; adjusted in gray pixels.; Hue is measured as an angle on a 360 degree circle, The following is; relationship of hue values to regular color names :; red - 0; yellow - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TASImage.html:32558,reduce,reduced,32558,root/html526/TASImage.html,https://root.cern,https://root.cern/root/html526/TASImage.html,10,"['allocate', 'reduce']","['allocated', 'reduced']"
Energy Efficiency,"kernel_size=(3, 3), kernel_initializer=""TruncatedNormal"", activation=""relu"", padding=""same"")); # stride for maxpool is equal to pool size; model.add(MaxPooling2D(pool_size=(2, 2))); model.add(Flatten()); model.add(Dense(64, activation=""tanh"")); # model.add(Dropout(0.2)); model.add(Dense(2, activation=""sigmoid"")); model.compile(loss=""binary_crossentropy"", optimizer=Adam(learning_rate=0.001), weighted_metrics=[""accuracy""]); model.save(""model_cnn.h5""); model.summary(); ; if not os.path.exists(""model_cnn.h5""):; raise FileNotFoundError(""Error creating Keras model file - skip using Keras""); else:; # book PyKeras method only if Keras model could be created; ROOT.Info(""TMVA_CNN_Classification"", ""Booking convolutional keras model""); factory.BookMethod(; loader,; TMVA.Types.kPyKeras,; ""PyKeras"",; H=True,; V=False,; VarTransform=None,; FilenameModel=""model_cnn.h5"",; FilenameTrainedModel=""trained_model_cnn.h5"",; NumEpochs=max_epochs,; BatchSize=100,; GpuOptions=""allow_growth=True"",; ) # needed for RTX NVidia card and to avoid TF allocates all GPU memory; ; ; ; ## Train Methods; ; factory.TrainAllMethods(); ; ## Test and Evaluate Methods; ; factory.TestAllMethods(); ; factory.EvaluateAllMethods(); ; ## Plot ROC Curve; ; c1 = factory.GetROCCurve(loader); c1.Draw(); ; # close outputfile to save output file; outputFile.Close(); lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html:15708,allocate,allocates,15708,doc/master/TMVA__CNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8py.html,1,['allocate'],['allocates']
Energy Efficiency,"ket* s); voidSetHandler(TFileHandler* h, TSocket* s). Data Members; public:. enum TFileHandler::[unnamed] { kRead; kWrite; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. intTFileHandler::fFileNumFile descriptor; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; intTFileHandler::fMaskEvent interest mask, either bit 1 (read), 2 (write) or both can be set; intTFileHandler::fReadyMaskReadiness mask, either bit 1 (read), 2 (write) or both can be set; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TFileHandler*fHandlerHandler associated to the input socket; TSocket*fInputSockInput socket from client or master; static TXSocketHandler*fgSocketHandlerInput socket handler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Notify(); Set readiness on the monitor. TXSocketHandler * GetSocketHandler(TFileHandler* h = 0, TSocket* s = 0); Get an instance of the input socket handler with 'h' as handler,; connected to socket 's'.; Create the instance, if not already existing. void SetHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. TXSocketHandler(TFileHandler* h, TSocket* s); { fHandler = h; fInputSock = s; }. virtual ~TXSocketHandler(); { }. Bool_t ReadNotify(); { return Notify(); }. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-03-15 16:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXSocketHandler.html:10503,monitor,monitor,10503,root/html534/TXSocketHandler.html,https://root.cern,https://root.cern/root/html534/TXSocketHandler.html,2,['monitor'],['monitor']
Energy Efficiency,"kets with; something to read and/or write are also returned. void SetReady(TSocket* sock); Called by TSocketHandler::Notify() to signal which socket is ready; to be read or written. User should not call this routine. The ready; socket will be returned via the Select() user function.; The Ready(TSocket *sock) signal is emitted. Int_t GetActive(Long_t timeout = -1) const; Return number of sockets in the active list. If timeout > 0, remove from; the list those sockets which did not have any activity since timeout; millisecs. If timeout = 0, then reset activity timestamp on all active; sockets. This time out is typically used if GetActive() is used to see; how many remotes still need to send something. If they pass the timeout; they will be skipped and GetActive() will return 0 and the loop can be; exited. Int_t GetDeActive() const; Return number of sockets in the de-active list. Bool_t IsActive(TSocket* s) const; Check if socket 's' is in the active list. Avoids the duplication; of active list via TMonitor::GetListOfActives(). TList * GetListOfActives() const; Returns a list with all active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. TList * GetListOfDeActives() const; Returns a list with all de-active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. void Ready(TSocket* sock); Emit signal when some socket is ready. void * GetSender(); { return this; }. void Interrupt(); { fInterrupt = kTRUE; }. void ResetInterrupt(); { fInterrupt = kFALSE; }. » Author: Fons Rademakers 09/01/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-03-14 16:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMonitor.html:13620,monitor,monitor,13620,root/html534/TMonitor.html,https://root.cern,https://root.cern/root/html534/TMonitor.html,4,['monitor'],['monitor']
Energy Efficiency,"kets with; something to read and/or write are also returned. void SetReady(TSocket* sock); Called by TSocketHandler::Notify() to signal which socket is ready; to be read or written. User should not call this routine. The ready; socket will be returned via the Select() user function.; The Ready(TSocket *sock) signal is emitted. Int_t GetActive(Long_t timeout = -1) const; Return number of sockets in the active list. If timeout > 0, remove from; the list those sockets which did not have any activity since timeout; millisecs. If timeout = 0, then reset activity timestamp on all active; sockets. This time out is typically used if GetActive() is used to see; how many remotes still need to send something. If they pass the timeout; they will be skipped and GetActive() will return 0 and the loop can be; exited. Int_t GetDeActive() const; Return number of sockets in the de-active list. Bool_t IsActive(TSocket* s) const; Check if socket 's' is in the active list. Avoids the duplication; of active list via TMonitor::GetListOfActives(). TList * GetListOfActives() const; Returns a list with all active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. TList * GetListOfDeActives() const; Returns a list with all de-active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. void Ready(TSocket* sock); Emit signal when some socket is ready. void * GetSender(); { return this; }. void Interrupt(); { fInterrupt = kTRUE; }. void ResetInterrupt(); { fInterrupt = kFALSE; }. » Author: Fons Rademakers 09/01/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMonitor.html:14127,monitor,monitor,14127,root/html604/TMonitor.html,https://root.cern,https://root.cern/root/html604/TMonitor.html,4,['monitor'],['monitor']
Energy Efficiency,"kets with; something to read and/or write are also returned. void SetReady(TSocket* sock); Called by TSocketHandler::Notify() to signal which socket is ready; to be read or written. User should not call this routine. The ready; socket will be returned via the Select() user function.; The Ready(TSocket *sock) signal is emitted. Int_t GetActive(Long_t timeout = -1) const; Return number of sockets in the active list. If timeout > 0, remove from; the list those sockets which did not have any activity since timeout; millisecs. If timeout = 0, then reset activity timestamp on all active; sockets. This time out is typically used if GetActive() is used to see; how many remotes still need to send something. If they pass the timeout; they will be skipped and GetActive() will return 0 and the loop can be; exited. Int_t GetDeActive() const; Return number of sockets in the de-active list. Bool_t IsActive(TSocket* s) const; Check if socket 's' is in the active list. Avoids the duplication; of active list via TMonitor::GetListOfActives(). TList * GetListOfActives() const; Returns a list with all active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. TList * GetListOfDeActives() const; Returns a list with all de-active sockets. This list must be deleted; by the user. DO NOT call Delete() on this list as it will delete; the sockets that are still being used by the monitor. void Ready(TSocket* sock); Emit signal when some socket is ready. void * GetSender(); { return this; }. void Interrupt(); { fInterrupt = kTRUE; }. void ResetInterrupt(); { fInterrupt = kFALSE; }. » Author: Fons Rademakers 09/01/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-30 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMonitor.html:14127,monitor,monitor,14127,root/html602/TMonitor.html,https://root.cern,https://root.cern/root/html602/TMonitor.html,4,['monitor'],['monitor']
Energy Efficiency,"kground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGLabel*fLabeltext entry label; TGTextButton*fOkok button; char*fRetStraddress to store return string; TGTextEntry*fTEtext entry widget. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGInputDialog(const TGWindow* p = 0, const TGWindow* main = 0, const char* prompt = 0, const char* defval = 0, char* retstr = 0, UInt_t options = kVerticalFrame); Create simple input dialog. It is important to know that the case where the constructor in; which all the variables are initialized to their default values is; only used for the TBrowser to inspect on the classes. For normal; use the only variable that should be free is options. Variables prompt, defval are the content of the input dialog while; retstr has to be initialized to a char[256]. In case these are not; initialized, they will show default values while retstr will be; automatically allocated by the dialog. However this will make; impossible to retrieve the value entered by the dialog. To see TGInputDialog in use see:; $ROOTSYS/tutorials/testInputDialog.cxx. ~TGInputDialog(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TGInputDialog(const TGInputDialog& ). TGInputDialog & operator=(const TGInputDialog& ). » Author: David Gonzalez Maline 19/07/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGInputDialog.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGInputDialog.html:22588,allocate,allocated,22588,root/html528/TGInputDialog.html,https://root.cern,https://root.cern/root/html528/TGInputDialog.html,1,['allocate'],['allocated']
Energy Efficiency,"kground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGLabel*fLabeltext entry label; TGTextButton*fOkok button; char*fRetStraddress to store return string; TGTextEntry*fTEtext entry widget. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGInputDialog(const TGWindow* p = 0, const TGWindow* main = 0, const char* prompt = 0, const char* defval = 0, char* retstr = 0, UInt_t options = kVerticalFrame); Create simple input dialog. It is important to know that the case where the constructor in; which all the variables are initialized to their default values is; only used for the TBrowser to inspect on the classes. For normal; use the only variable that should be free is options. Variables prompt, defval are the content of the input dialog while; retstr has to be initialized to a char[256]. In case these are not; initialized, they will show default values while retstr will be; automatically allocated by the dialog. However this will make; impossible to retrieve the value entered by the dialog. To see TGInputDialog in use see:; $ROOTSYS/tutorials/testInputDialog.cxx. ~TGInputDialog(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TGInputDialog(const TGInputDialog& ). TGInputDialog & operator=(const TGInputDialog& ). » Author: David Gonzalez Maline 19/07/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGInputDialog.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGInputDialog.html:22741,allocate,allocated,22741,root/html530/TGInputDialog.html,https://root.cern,https://root.cern/root/html530/TGInputDialog.html,1,['allocate'],['allocated']
Energy Efficiency,"kground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGLabel*fLabeltext entry label; TGTextButton*fOkok button; char*fRetStraddress to store return string; TGTextEntry*fTEtext entry widget. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGInputDialog(const TGWindow* p = 0, const TGWindow* main = 0, const char* prompt = 0, const char* defval = 0, char* retstr = 0, UInt_t options = kVerticalFrame); Create simple input dialog. It is important to know that the case where the constructor in; which all the variables are initialized to their default values is; only used for the TBrowser to inspect on the classes. For normal; use the only variable that should be free is options. Variables prompt, defval are the content of the input dialog while; retstr has to be initialized to a char[256]. In case these are not; initialized, they will show default values while retstr will be; automatically allocated by the dialog. However this will make; impossible to retrieve the value entered by the dialog. To see TGInputDialog in use see:; $ROOTSYS/tutorials/testInputDialog.cxx. ~TGInputDialog(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TGInputDialog(const TGInputDialog& ). TGInputDialog & operator=(const TGInputDialog& ). » Author: David Gonzalez Maline 19/07/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGInputDialog.h 23115 2008-04-10 13:35:37Z rdm $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGInputDialog.html:22741,allocate,allocated,22741,root/html532/TGInputDialog.html,https://root.cern,https://root.cern/root/html532/TGInputDialog.html,2,['allocate'],['allocated']
Energy Efficiency,"ks for geometry, but they describe real objects having well defined properties. In fact, there are just two of them: the material they are made from and their geometrical shape. These have to be created before creating the volume itself, so we will describe the bits and pieces needed for making the geometry before moving to an architectural point of view.; As far as materials are concerned, they represent the physical properties of the solid from which a volume is made. Materials are just a support for the data that has to be provided to the tracking engine that uses this geometry package. Due to this fact, the TGeoMaterial class is more like a thin data structure needed for building the corresponding native materials of the Monte-Carlo tracking code that uses TGeo.; 18.2.1 Elements, Materials and Mixtures; In order to make easier material and mixture creation, one can use the pre-built table of elements owned by TGeoManager class:; TGeoElementTable *table = gGeoManager->GetElementTable();; TGeoElement *element1 = table->GetElement(Int_t Z);; TGeoElement *element2 = table->FindElement(""Copper"");; Materials made of single elements can be defined by their atomic mass (A), charge (Z) and density (rho). One can also create a material by specifying the element that it is made of. Optionally the radiation and absorption lengths can be also provided; otherwise they can be computed on-demand [G3]. The class representing them is TGeoMaterial:; TGeoMaterial(const char *name,Double_t a,Double_t z,; Double_t density, Double_t radlen=0,Double_t intlen=0);; TGeoMaterial(const char *name, TGeoElement *elem,; Double_t density);; TGeoMaterial(const char* name, Double_t a, Double_t z,; Double_t rho,; TGeoMaterial::EGeoMaterialState state,; Double_t temperature = STP_temperature,; Double_t pressure = STP_pressure); Any material or derived class is automatically indexed after creation. The assigned index is corresponding to the last entry in the list of materials owned by TGeoManager cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:888115,charge,charge,888115,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['charge'],['charge']
Energy Efficiency,"l . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Definition at line 63 of file RooWrapperPdf.h. ◆ getAnalyticalIntegralWN(). Int_t RooWrapperPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. inlineoverridevirtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented from RooAbsReal.; Definition at line 59 of file RooWrapperPdf.h. ◆ getMaxVal(). Int_t RooWrapperPdf::getMaxVal ; (; const RooArgSet & ; vars); const. inlineoverridevirtual . Get specialised generator. Since the underlying function is not a PDF, this will always return zero. ; Reimplemented from RooAbsReal.; Definition at line 86 of file RooWrapperPdf.h. ◆ IsA(). TClass * RooWrapperPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 117 of file RooWrapperPdf.h. ◆ isBinnedDistribution(). bool RooWrapperPdf::isBinnedDistribution ; (; const RooArgSet & ; ); const. inlineoverridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 97 of file RooWrapperPdf.h. ◆ maxVal(). double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWrapperPdf.html:79009,efficient,efficient,79009,doc/master/classRooWrapperPdf.html,https://root.cern,https://root.cern/doc/master/classRooWrapperPdf.html,1,['efficient'],['efficient']
Energy Efficiency,"l Bool_tTestFunction(Double_t squareResidual, Double_t dResidur). Data Members; public:. enum EMDFPolyType { kMonomials; kChebyshev; kLegendre; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Int_tfBinVarXNumber of bin in independent variables; Int_tfBinVarYNumber of bin in dependent variables; Double_tfChi2Chi square of fit; TVectorDfCoefficientsVector of the final coefficients; TVectorDfCoefficientsRMSVector of RMS of coefficients; Double_tfCorrelationCoeffMulti Correlation coefficient; TMatrixDfCorrelationMatrixCorrelation matrix; Double_tfErrorError from parameterization; TVirtualFitter*fFitter! Fit object (MINUIT); Int_t*fFunctionCodes[fMaxFunctions] acceptance code; TMatrixDfFunctionsFunctions evaluated over sample; unsigned charfHistogramMaskBit pattern of hisograms used; TList*fHistogramsList of histograms; Bool_tfIsUserFunctionFlag for user defined function; Bool_tfIsVerbose; Double_tfMaxAngleMax angle for acepting new function; Int_tfMaxFuncNVfMaxFunctions*fNVariables; Int_tfMaxFunctionsmax number of functions; Int_t*fMaxPowers[fNVariables] maximum powers; Int_t*fMaxPowersFinal[fNVariables] maximum powers from fit;; Double_tfMaxQuantityMax value of dependent quantity; Double_tfMaxResidualMax redsidual value; Int_tfMaxResidualRowRow giving max residual; Int_tfMaxStudymax functions to study; Int_tfMaxTermsMax terms expected in final expr.; TVectorDfMaxVariablesmax value of independent variables; Double_tfMeanQuantityMean of dependent quantity; TVectorDfMeanVariablesmean value of independent variables; Double_tfMinAngleMin angle for acepting new function; Double_tfMinQuantityMin value of dependent quantity; Double_tfMinRelativeErrorMin relative error accepted; Double_tfMinResidualMin redsidual value; Int_tfMinResidualRowRow giving min residual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMultiDimFit.html:22564,power,powers,22564,root/html530/TMultiDimFit.html,https://root.cern,https://root.cern/root/html530/TMultiDimFit.html,2,['power'],['powers']
Energy Efficiency,"l curves. ;  ; void shiftCurveToZero ();  Find lowest point in curve and move all points in curve so that lowest point will go exactly through zero. ;  ;  Protected Member Functions inherited from TGraph; virtual Double_t ** Allocate (Int_t newsize);  Allocate internal data structures for newsize points. ;  ; Double_t ** AllocateArrays (Int_t Narrays, Int_t arraySize);  Allocate arrays. ;  ; virtual void CopyAndRelease (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin);  Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin != iend. ;  ; virtual Bool_t CopyPoints (Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin);  Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin != iend. ;  ; Bool_t CtorAllocate ();  In constructors set fNpoints than call this method. ;  ; virtual Bool_t DoMerge (const TGraph *g);  protected function to perform the merge operation of a graph ;  ; Double_t ** ExpandAndCopy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; virtual void FillZero (Int_t begin, Int_t end, Bool_t from_ctor=kTRUE);  Set zero values for point arrays in the range [begin, end) Should be redefined in descendant classes. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ; virtual void SwapPoints (Int_t pos1, Int_t pos2);  Swap points. ;  ; virtual void UpdateArrays (const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low);  Upda",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:36638,allocate,allocate,36638,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,1,['allocate'],['allocate']
Energy Efficiency,"l cutfilename are expected to be; 6699/// the name of source files which contain at least a free standing; 6700/// function with the signature:; 6701/// ~~~ {.cpp}; 6702/// x_t macrofilename(); // i.e function with the same name as the file; 6703/// ~~~; 6704/// and; 6705/// ~~~ {.cpp}; 6706/// y_t cutfilename(); // i.e function with the same name as the file; 6707/// ~~~; 6708/// x_t and y_t needs to be types that can convert respectively to a double; 6709/// and a bool (because the skeleton uses:; 6710///; 6711/// if (cutfilename()) htemp->Fill(macrofilename());; 6712///; 6713/// These two functions are run in a context such that the branch names are; 6714/// available as local variables of the correct (read-only) type.; 6715///; 6716/// Note that if you use the same 'variable' twice, it is more efficient; 6717/// to 'cache' the value. For example:; 6718/// ~~~ {.cpp}; 6719/// Int_t n = fEventNumber; // Read fEventNumber; 6720/// if (n<10 || n>10) { ... }; 6721/// ~~~; 6722/// is more efficient than; 6723/// ~~~ {.cpp}; 6724/// if (fEventNumber<10 || fEventNumber>10); 6725/// ~~~; 6726/// Also, optionally, the generated selector will also call methods named; 6727/// macrofilename_methodname in each of 6 main selector methods if the method; 6728/// macrofilename_methodname exist (Where macrofilename is stripped of its; 6729/// extension).; 6730///; 6731/// Concretely, with the script named h1analysisProxy.C,; 6732///; 6733/// - The method calls the method (if it exist); 6734/// - Begin -> void h1analysisProxy_Begin(TTree*);; 6735/// - SlaveBegin -> void h1analysisProxy_SlaveBegin(TTree*);; 6736/// - Notify -> bool h1analysisProxy_Notify();; 6737/// - Process -> bool h1analysisProxy_Process(Long64_t);; 6738/// - SlaveTerminate -> void h1analysisProxy_SlaveTerminate();; 6739/// - Terminate -> void h1analysisProxy_Terminate();; 6740///; 6741/// If a file name macrofilename.h (or .hh, .hpp, .hxx, .hPP, .hXX) exist; 6742/// it is included before the declaration of the pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:262706,efficient,efficient,262706,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['efficient'],['efficient']
Energy Efficiency,"l fragment. eg.; root://machine/path/file_name.root?query#tree_name. If tree_name is given as a part of the file name it is used to; as the name of the tree to load from the file. Otherwise if tname; argument is specified the chain will load the tree named tname from; the file, otherwise the original treename specified in the TChain; constructor will be used. A. If nentries <= 0, the file is opened and the tree header read; into memory to get the number of entries. B. If nentries > 0, the file is not opened, and nentries is assumed; to be the number of entries in the file. In this case, no check; is made that the file exists nor that the tree exists in the file.; This second mode is interesting in case the number of entries in; the file is already stored in a run database for example. C. If nentries == kBigNumber (default), the file is not opened.; The number of entries in each file will be read only when the file; is opened to read an entry. This option is the default and very; efficient if one processes the chain sequentially. Note that in; case GetEntry(entry) is called and entry refers to an entry in the; third file, for example, this forces the tree headers in the first; and second file to be read to find the number of entries in those; files. Note that if one calls GetEntriesFast() after having created; a chain with this default, GetEntriesFast() will return kBigNumber!; Using the GetEntries() function instead will force all of the tree; headers in the chain to be read to read the number of entries in; each tree. D. The TChain data structure; Each TChainElement has a name equal to the tree name of this TChain; and a title equal to the file name. So, to loop over the; TFiles that have been added to this chain:. TObjArray *fileElements=chain->GetListOfFiles();; TIter next(fileElements);; TChainElement *chEl=0;; while (( chEl=(TChainElement*)next() )) {; TFile f(chEl->GetTitle());; ... do something with f ...; }. The function returns 1 if the file is successfully",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TChain.html:33512,efficient,efficient,33512,root/html534/TChain.html,https://root.cern,https://root.cern/root/html534/TChain.html,6,['efficient'],['efficient']
Energy Efficiency,"l helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  CTFutureImpl;  CTRangeStaticCastTRangeStaticCast is an adaptater class that allows the typed iteration through a TCollection ;  ►CTSchemaRuleSet;  CTMatches;  ►CTStatusBitsChecker;  CRegistry;  CTTypedIterTTypedIter is a typed version of TIter ;  ►NExecutorUtilsThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CTArgsMenuItem;  CTCheckedMenuItem;  CTHistBinIterIterates over the bins of a THist or THistImpl ;  CTHistBinPtrPoints to a histogram bin (or actually a THistBinRef) ;  CTHistBinRefRepresents a bin reference ;  CTHistBinStatConst view on a bin's statistical data ;  CTHistDataA THistImplBase's data, provides accessors to all its statistics ;  CTHistImpl;  CTHistImplBaseInterface class for THistImpl ;  CTHistImplPrecisionAgnosticBaseBase class for THistImplBase that abstracts out the histogram's PRECISION ;  CTMenuArgument;  CTMenuItemClass contains info for producing menu item on the JS side ;  CTPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:12411,adapt,adaptater,12411,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,1,['adapt'],['adaptater']
Energy Efficiency,"l helper to implement the function to create,access and destroy iterators ;  CIterators< Cont_t, true >;  CIterators< std::vector< T >, false >;  CIteratorValueSmall helper to encapsulate whether to return the value pointed to by the iterator or its address ;  CIteratorValue< Cont_t, value_ptr * >;  CMapInsertSmall helper to encapsulate all necessary data accesses for containers like set, multiset etc ;  CPairHolder;  CPushbackSmall helper to encapsulate all necessary data accesses for containers like vector, list, deque ;  CPushback< Internal::TStdBitsetHelper< Bitset_t > >;  CPushback< std::vector< bool > >;  CPushfrontSmall helper to encapsulate all necessary data accesses for containers like forward_list ;  CSfinaeHelper;  CTypeSmall helper to encapsulate basic data accesses for all STL continers ;  ►CType< Internal::TStdBitsetHelper< Bitset_t > >;  ►CIterators;  CPtrSize_t;  ►CType< std::vector< Bool_t > >;  CIterators;  CTFutureImpl;  CTRangeStaticCastTRangeStaticCast is an adaptater class that allows the typed iteration through a TCollection ;  ►CTSchemaRuleSet;  CTMatches;  ►CTStatusBitsChecker;  CRegistry;  CTTypedIterTTypedIter is a typed version of TIter ;  ►NExecutorUtilsThis namespace contains pre-defined functions to be used in conjuction with TExecutor::Map and TExecutor::MapReduce ;  CReduceObjectsMerge collection of TObjects ;  ►NExperimental;  ►NDetail;  CTArgsMenuItem;  CTCheckedMenuItem;  CTHistBinIterIterates over the bins of a THist or THistImpl ;  CTHistBinPtrPoints to a histogram bin (or actually a THistBinRef) ;  CTHistBinRefRepresents a bin reference ;  CTHistBinStatConst view on a bin's statistical data ;  CTHistDataA THistImplBase's data, provides accessors to all its statistics ;  CTHistImpl;  CTHistImplBaseInterface class for THistImpl ;  CTHistImplPrecisionAgnosticBaseBase class for THistImplBase that abstracts out the histogram's PRECISION ;  CTMenuArgument;  CTMenuItemClass contains info for producing menu item on the JS side ;  ►NHi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:15439,adapt,adaptater,15439,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['adapt'],['adaptater']
Energy Efficiency,"l not available for %s - with number %d compute numerical integral"", GetName(), GetNumber());; 2544 }; 2545 return IntegralOneDim(a, b, epsrel, epsrel, error);; 2546}; 2547 ; 2548////////////////////////////////////////////////////////////////////////////////; 2549/// Return Integral of function between a and b using the given parameter values and; 2550/// relative and absolute tolerance.; 2551///; 2552/// The default integrator defined in ROOT::Math::IntegratorOneDimOptions::DefaultIntegrator() is used; 2553/// If ROOT contains the MathMore library the default integrator is set to be; 2554/// the adaptive ROOT::Math::GSLIntegrator (based on QUADPACK) or otherwise the; 2555/// ROOT::Math::GaussIntegrator is used; 2556/// See the reference documentation of these classes for more information about the; 2557/// integration algorithms; 2558/// To change integration algorithm just do :; 2559/// ROOT::Math::IntegratorOneDimOptions::SetDefaultIntegrator(IntegratorName);; 2560/// Valid integrator names are:; 2561/// - Gauss : for ROOT::Math::GaussIntegrator; 2562/// - GaussLegendre : for ROOT::Math::GaussLegendreIntegrator; 2563/// - Adaptive : for ROOT::Math::GSLIntegrator adaptive method (QAG); 2564/// - AdaptiveSingular : for ROOT::Math::GSLIntegrator adaptive singular method (QAGS); 2565/// - NonAdaptive : for ROOT::Math::GSLIntegrator non adaptive (QNG); 2566///; 2567/// In order to use the GSL integrators one needs to have the MathMore library installed; 2568///; 2569/// Note 1:; 2570///; 2571/// Values of the function f(x) at the interval end-points A and B are not; 2572/// required. The subprogram may therefore be used when these values are; 2573/// undefined.; 2574///; 2575/// Note 2:; 2576///; 2577/// Instead of TF1::Integral, you may want to use the combination of; 2578/// TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; 2579/// See an example with the following script:; 2580///; 2581/// ~~~ {.cpp}; 2582/// void gint() {; 2583/// TF1 *g = new TF1(""g"",",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:93901,adapt,adaptive,93901,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,4,['adapt'],['adaptive']
Energy Efficiency,"l out the; // bias completely. The average bias is canceled, but there are per-bin; // biases that remain. Still, this method has some value: it is cheaper than; // rigurously correcting the bias by integrating the pdf in each bin. So if; // you know your per-bin bias variations are small or performance is an; // issue, this approach can be sufficient.; enableBinIntegrator(powerlaw, x.numBins());; std::unique_ptr<RooFitResult> fit4{powerlaw.fitTo(*powerlawData, Save(), PrintLevel(-1), SumW2Error(false))};; fit4->Print();; disableBinIntegrator(powerlaw);; ; // To get rid of the binning effects in the general case, one can use the; // IntegrateBins() command argument. Now, the pdf is not evaluated at the; // bin centers, but numerically integrated over each bin and divided by the; // bin width. The parameter for IntegrateBins() is the required precision; // for the numeric integrals. This is computationally expensive, but the; // bias is now not a problem anymore.; std::unique_ptr<RooFitResult> fit5{; powerlaw.fitTo(*powerlawData, IntegrateBins(1e-3), Save(), PrintLevel(-1), SumW2Error(false))};; fit5->Print();; ; // Improving numerical stability; // -----------------------------; ; // There is one more problem with binned fits that is related to the binning; // effects because often, a binned fit is affected by both problems.; //; // The issue is numerical stability for fits with a greatly different number; // of events in each bin. For each bin, you have a term \f[n\log(p)\f] in; // the NLL, where \f[n\f] is the number of observations in the bin, and; // \f[p\f] the predicted probability to have an event in that bin. The; // difference in the logarithms for each bin is small, but the difference in; // \f[n\f] can be orders of magnitudes! Therefore, when summing these terms,; // lots of numerical precision is lost for the bins with less events.; ; // We can study this with the example of an exponential plus a Gaussian. The; // Gaussian is only a faint signal in the t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html:5726,power,powerlaw,5726,doc/master/rf614__binned__fit__problems_8C.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8C.html,1,['power'],['powerlaw']
Energy Efficiency,"l voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); UInt_tMapFlag(Option_t* flag). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Option_t*fFlagstransform flags; void*fIninput array; Int_t*fNtransform sizes in each dimension; Int_tfNdimnumber of dimensions; void*fOutoutput array; void*fPlanfftw plan (the plan how to compute the transform); Int_tfTotalSizetotal size of the transform; static TStringTVirtualFFT::fgDefaultdefault transformer; static TVirtualFFT*TVirtualFFT::fgFFTcurrent transformer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFFTComplexReal(); default. TFFTComplexReal(Int_t n, Bool_t inPlace); For 1d transforms; Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. TFFTComplexReal(Int_t ndim, Int_t* n, Bool_t inPlace); For ndim-dimensional transforms; Second argurment contains sizes of the transform in each dimension. ~TFFTComplexReal(); Destroys the data arrays and the plan. However, some plan information stays around; until the root session is over, and is reused if other plans of the same size are; created. void Init(Option_t* flags, Int_t , const Int_t* ); Creates the fftw-plan. NOTE: input and output arrays are overwritten during initialisation,; so don't set any points, before running this function!!!!!. Arguments sign and kind are dummy and not need to be specified; Possible flag_options:; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal; performanc; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFFTComplexReal.html:8820,Allocate,Allocates,8820,root/html532/TFFTComplexReal.html,https://root.cern,https://root.cern/root/html532/TFFTComplexReal.html,2,['Allocate'],['Allocates']
Energy Efficiency,"l voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); UInt_tMapFlag(Option_t* flag). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Option_t*fFlagstransform flags; void*fIninput array; Int_t*fNtransform sizes in each dimension; Int_tfNdimnumber of dimensions; void*fOutoutput array; void*fPlanfftw plan (the plan how to compute the transform); Int_tfTotalSizetotal size of the transform; static TStringTVirtualFFT::fgDefaultdefault transformer; static TVirtualFFT*TVirtualFFT::fgFFTcurrent transformer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFFTRealComplex(); default. TFFTRealComplex(Int_t n, Bool_t inPlace); For 1d transforms; Allocates memory for the input array, and, if inPlace = kFALSE, for the output array. TFFTRealComplex(Int_t ndim, Int_t* n, Bool_t inPlace); For ndim-dimensional transforms; Second argurment contains sizes of the transform in each dimension. ~TFFTRealComplex(); Destroys the data arrays and the plan. However, some plan information stays around; until the root session is over, and is reused if other plans of the same size are; created. void Init(Option_t* flags, Int_t , const Int_t* ); Creates the fftw-plan. NOTE: input and output arrays are overwritten during initialisation,; so don't set any points, before running this function!!!!!. Arguments sign and kind are dummy and not need to be specified; Possible flag_options:; ""ES"" (from ""estimate"") - no time in preparing the transform, but probably sub-optimal; performanc; ""M"" (from ""measure"") - some time spend in finding the optimal way to do the transform; ""P"" (from ""patient"") - more time spend in finding the optimal way to do the transform; ""EX"" (fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFFTRealComplex.html:8778,Allocate,Allocates,8778,root/html532/TFFTRealComplex.html,https://root.cern,https://root.cern/root/html532/TFFTRealComplex.html,2,['Allocate'],['Allocates']
Energy Efficiency,"l(). Int_t RooLegendre::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. overridevirtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 165 of file RooLegendre.cxx. ◆ getMaxVal(). Int_t RooLegendre::getMaxVal ; (; const RooArgSet & ; vars); const. overridevirtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 205 of file RooLegendre.cxx. ◆ IsA(). TClass * RooLegendre::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 46 of file RooLegendre.h. ◆ maxVal(). double RooLegendre::maxVal ; (; Int_t ; code); const. overridevirtual . Return maximum value for set of observables identified by code assigned in getMaxVal. ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic.; Definition at line 225 of file RooLegendre.cxx. ◆ Streamer(). void RooLegendre::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal.; Reimplemented in RooSpHarmonic. ◆ StreamerNVirtual(). void RooLegendre::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLegendre.html:63763,efficient,efficiently,63763,doc/master/classRooLegendre.html,https://root.cern,https://root.cern/doc/master/classRooLegendre.html,1,['efficient'],['efficiently']
Energy Efficiency,"l(const RooArgSet& vars) const; Only handle case of maximum in all variables. Double_t maxVal(Int_t code) const. Double_t totVolume() const; Return the total volume spanned by the observables of the RooDataHist. Int_t getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const; Determine integration scenario. If no interpolation is used,; RooHistFunc can perform all integrals over its dependents; analytically via partial or complete summation of the input; histogram. If interpolation is used, only the integral; over all RooHistPdf observables is implemented. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Return integral identified by 'code'. The actual integration; is deferred to RooDataHist::sum() which implements partial; or complete summation over the histograms contents. list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. Bool_t importWorkspaceHook(RooWorkspace& ws); Check if our datahist is already in the workspace. Bool_t areIdentical(const RooDataHist& dh1, const RooDataHist& dh2). void Streamer(TBuffer& ); Stream an object of class RooHistFunc. void ioStreamerPass2(); Schema evolution: if histObsList wasn't filled from persistence (v1); then fill it here. Can't be done in regular schema evolution in LinkDef; as _depList content is not guaranteed to be initialized there. TObject* clone(const char* newname) const; { return new RooHistFunc(*this,newname); }. R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHistFunc.html:39257,efficient,efficiently,39257,root/html534/RooHistFunc.html,https://root.cern,https://root.cern/root/html534/RooHistFunc.html,6,['efficient'],['efficiently']
Energy Efficiency,"l, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IGenFunction>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:4685,adapt,adaptive,4685,root/html602/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html,4,['adapt'],['adaptive']
Energy Efficiency,"l.; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 637 of file TMath.cxx. ◆ Qe(). constexpr Double_t TMath::Qe ; (; ). constexpr . Elementary charge in \( C \) . ; Definition at line 339 of file TMath.h. ◆ QeUncertainty(). constexpr Double_t TMath::QeUncertainty ; (; ). constexpr . Elementary charge uncertainty. ; Definition at line 346 of file TMath.h. ◆ Quantiles(). void TMath::Quantiles ; (; Int_t ; n, . Int_t ; nprob, . Double_t * ; x, . Double_t * ; quantiles, . Double_t * ; prob, . Bool_t ; isSorted = kTRUE, . Int_t * ; index = nullptr, . Int_t ; type = 7 . ). Computes sample quantiles, corresponding to the given probabilities. ; Parameters. [in]xthe data sample ; [in]nits size ; [out]quantilescomputed quantiles are returned in there ; [in]probprobabilities where to compute quantiles ; [in]nprobsize of prob array ; [in]isSortedis the input array x sorted ? ; [in]indexparameter index ; [in]typemethod to compute (from 1 to 9). NOTE:; When the input is not sorted, an array of integers of size n needs to be allocated. It can be passed by the user in parameter index, or, if not passed, it will be allocated inside the function. Following types are provided:. Discontinuous:; type=1 - inverse of the empirical distribution function; type=2 - like type 1, but with averaging at discontinuities; type=3 - SAS definition: nearest even order statistic. Piecewise linear continuous:; In this case, sample quantiles can be obtained by linear interpolation between the k-th order statistic and p(k). -type=4 - linear interpolation of empirical cdf, p(k)=k/n;; type=5 - a very popular definition, p(k) = (k-0.5)/n;; type=6 - used by Minitab and SPSS, p(k) = k/(n+1);; type=7 - used by S-Plus and R, p(k) = (k-1)/(n-1);; type=8 - resulting sample quantiles are approximately median unbiased regardless of the distribution of x. p(k) = (k-1/3)/(n+1/3);; type=9 - resulting sample quantiles are approximately unbiased, when the sample comes from Normal distribution. p(k)=(k-3/8)/(n+1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:74204,allocate,allocated,74204,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['allocate'],['allocated']
Energy Efficiency,"l; 3565 case 109:; 3566 {; 3567 Double_t red[9] = { 33./255., 31./255., 42./255., 68./255., 86./255., 111./255., 141./255., 172./255., 227./255.};; 3568 Double_t green[9] = { 255./255., 175./255., 145./255., 106./255., 88./255., 55./255., 15./255., 0./255., 0./255.};; 3569 Double_t blue[9] = { 255./255., 205./255., 202./255., 203./255., 208./255., 205./255., 203./255., 206./255., 231./255.};; 3570 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3571 }; 3572 break;; 3573 ; 3574 // Copper; 3575 case 110:; 3576 {; 3577 Double_t red[9] = { 0./255., 25./255., 50./255., 79./255., 110./255., 145./255., 181./255., 201./255., 254./255.};; 3578 Double_t green[9] = { 0./255., 16./255., 30./255., 46./255., 63./255., 82./255., 101./255., 124./255., 179./255.};; 3579 Double_t blue[9] = { 0./255., 12./255., 21./255., 29./255., 39./255., 49./255., 61./255., 74./255., 103./255.};; 3580 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3581 }; 3582 break;; 3583 ; 3584 // Gist Earth; 3585 case 111:; 3586 {; 3587 Double_t red[9] = { 0./255., 13./255., 30./255., 44./255., 72./255., 120./255., 156./255., 200./255., 247./255.};; 3588 Double_t green[9] = { 0./255., 36./255., 84./255., 117./255., 141./255., 153./255., 151./255., 158./255., 247./255.};; 3589 Double_t blue[9] = { 0./255., 94./255., 100./255., 82./255., 56./255., 66./255., 76./255., 131./255., 247./255.};; 3590 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3591 }; 3592 break;; 3593 ; 3594 // Viridis; 3595 case 112:; 3596 {; 3597 Double_t red[9] = { 26./255., 51./255., 43./255., 33./255., 28./255., 35./255., 74./255., 144./255., 246./255.};; 3598 Double_t green[9] = { 9./255., 24./255., 55./255., 87./255., 118./255., 150./255., 180./255., 200./255., 222./255.};; 3599 Double_t blue[9] = { 30./255., 96./255., 112./255., 114./255., 112./255., 101./255., 72./255., 35./255., 0./255.};; 3600 Idx = TColor::CreateGradientColorTable(9, stop",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:142799,green,green,142799,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"l=-1, SumW2Error=False); fit1.Print(); ; # In the case of an exponential function, the bias that you get by; # evaluating the pdf only at the bin centers is a constant scale factor in; # each bin. Here, we can do a trick to get rid of the bias: we also; # evaluate the normalization integral for the pdf the same way, i.e.,; # summing the values of the unnormalized pdf at the bin centers. Like this; # the bias cancels out. You can achieve this by customizing the way how the; # pdf is integrated (see also the rf901_numintconfig tutorial).; enableBinIntegrator(expo, x.numBins()); fit2 = expo.fitTo(expo_data, Save=True, PrintLevel=-1, SumW2Error=False); fit2.Print(); disableBinIntegrator(expo); ; # Power law example; # -----------------; ; # Let's not look at another example: a power law \f[x^a\f].; a = ROOT.RooRealVar(""a"", ""a"", -0.3, -5.0, 5.0); powerlaw = ROOT.RooPowerSum(""powerlaw"", ""powerlaw"", x, ROOT.RooFit.RooConst(1.0), a); powerlaw_data = generateBinnedAsimov(powerlaw, x, 10000); ; # Again, if you do a vanilla fit, you'll get a bias; fit3 = powerlaw.fitTo(powerlaw_data, Save=True, PrintLevel=-1, SumW2Error=False); fit3.Print(); ; # This time, the bias is not the same factor in each bin! This means our; # trick by sampling the integral in the same way doesn't cancel out the; # bias completely. The average bias is canceled, but there are per-bin; # biases that remain. Still, this method has some value: it is cheaper than; # rigurously correcting the bias by integrating the pdf in each bin. So if; # you know your per-bin bias variations are small or performance is an; # issue, this approach can be sufficient.; enableBinIntegrator(powerlaw, x.numBins()); fit4 = powerlaw.fitTo(powerlaw_data, Save=True, PrintLevel=-1, SumW2Error=False); fit4.Print(); disableBinIntegrator(powerlaw); ; # To get rid of the binning effects in the general case, one can use the; # IntegrateBins() command argument. Now, the pdf is not evaluated at the; # bin centers, but numerically integrated",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html:4129,power,powerlaw,4129,doc/master/rf614__binned__fit__problems_8py.html,https://root.cern,https://root.cern/doc/master/rf614__binned__fit__problems_8py.html,2,['power'],['powerlaw']
Energy Efficiency,"lFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void MakeTableOfCoSin () const override;  Make table of sine and cosine. ;  ; void SetPoints (Double_t *points) const override;  Create TUBS points. ;  ;  Protected Member Functions inherited from TTUBE;  TTUBE (const TTUBE &);  Table of cos(fPhi1) .... cos(fPhil+fDphi1) ;  ; TTUBE & operator= (const TTUBE &);  assignment operator ;  ; virtual void SetSegsAndPols (TBuffer3D &buffer) const;  Set segments and polygons. ;  ;  Protected Member Functions inherited from TShape; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Float_t fPhi1;  ; Float_t fPhi2;  ;  Protected Attributes inherited from TTUBE; Float_t fAspectRatio;  ; Double_t * fCoTab;  Table of sin(fPhi1) .... sin(fPhil+fDphi1) ;  ; Float_t fDz;  ; Int_t fNdiv;  ; Float_t fRmax;  ; Float_t fRmin;  ; Double_t * fSiTab;  ;  Protected Attributes inherited from TShape; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTUBS.html:17133,allocate,allocate,17133,doc/master/classTTUBS.html,https://root.cern,https://root.cern/doc/master/classTTUBS.html,1,['allocate'],['allocate']
Energy Efficiency,"lFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void CalcNormalizationParams (const std::vector< Event * > &events);  compute offset and scale from min and max ;  . Private Attributes; VectorOfFloatVectors fMax;  ! Max of source range ;  ; VectorOfFloatVectors fMin;  ! Min of source range ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::VariableTransformBase; void CalcNorm (const std::vector< const Event * > &);  TODO --> adapt to variable,target,spectator selection method to calculate minimum, maximum, mean, and RMS for all variables used in the MVA. ;  ; Int_t GetNClasses () const;  ; UInt_t GetNSpectators () const;  ; UInt_t GetNTargets () const;  ; UInt_t GetNVariables () const;  ; void SetCreated (Bool_t c=kTRUE);  ; void SetName (const TString &c);  ; void SetNVariables (UInt_t i);  ; std::vector< TMVA::VariableInfo > & Spectators ();  ; std::vector< TMVA::VariableInfo > & Targets ();  ; std::vector< TMVA::VariableInfo > & Variables ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::VariableTransformBase; Event * fBackTransformedEvent;  holds the current back-transformed event ;  ; DataSetInfo & fDsi;  ; DataSetInfo * fDsiOutput; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableNormalizeTransform.html:13987,adapt,adapt,13987,doc/master/classTMVA_1_1VariableNormalizeTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableNormalizeTransform.html,1,['adapt'],['adapt']
Energy Efficiency,"lName. const char* VolDaughterName(const char* volName, Int_t i) const; Return the name of i-th daughter of the volume specified by volName. Int_t VolDaughterCopyNo(const char* volName, Int_t i) const; Return the copyNo of i-th daughter of the volume specified by volName. Bool_t SetCut(const char* cutName, Double_t cutValue). methods for physics management. set methods. Set transport cuts for particles. Bool_t SetProcess(const char* flagName, Int_t flagValue); Set process control. Bool_t DefineParticle(Int_t pdg, const char* name, TMCParticleType mcType, Double_t mass, Double_t charge, Double_t lifetime); Set a user defined particle; Function is ignored if particle with specified pdg; already exists and error report is printed.; pdg PDG encoding; name particle name; mcType VMC Particle type; mass mass [GeV]; charge charge [eplus]; lifetime time of life [s]; pType particle type as in Geant4; width width [GeV]; iSpin spin; iParity parity; iConjugation conjugation; iIsospin isospin; iIsospinZ isospin - #rd component; gParity gParity; lepton lepton number; baryon baryon number; stable stability; shortlived is shorlived?; subType particle subType as in Geant4; antiEncoding anti encoding; magMoment magnetic moment; excitation excitation energy [GeV]. Bool_t DefineIon(const char* name, Int_t Z, Int_t A, Int_t Q, Double_t excEnergy, Double_t mass = 0.); Set a user defined particle; Function is ignored if particle with specified pdg; already exists and error report is printed.; pdg PDG encoding; name particle name; mcType VMC Particle type; mass mass [GeV]; charge charge [eplus]; lifetime time of life [s]; pType particle type as in Geant4; width width [GeV]; iSpin spin; iParity parity; iConjugation conjugation; iIsospin isospin; iIsospinZ isospin - #rd component; gParity gParity; lepton lepton number; baryon baryon number; stable stability; shortlived is shorlived?; subType particle subType as in Geant4; antiEncoding anti encoding; magMoment magnetic moment; excitation excita",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMC.html:28392,charge,charge,28392,root/html528/TVirtualMC.html,https://root.cern,https://root.cern/root/html528/TVirtualMC.html,30,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"lPS.; Definition at line 1402 of file TSVG.cxx. ◆ DrawPS() [2/2]. void TSVG::DrawPS ; (; Int_t ; n, . Float_t * ; xw, . Float_t * ; yw . ). overridevirtual . Not needed in SVG case. ; Implements TVirtualPS.; Definition at line 2064 of file TSVG.cxx. ◆ Initialize(). void TSVG::Initialize ; (; ). Initialize the SVG file. ; The main task of the function is to output the SVG header file which consist in <title>, <desc> and <defs>. The HeaderPS provided by the user program is written in the <defs> part. ; Definition at line 1508 of file TSVG.cxx. ◆ IsA(). TClass * TSVG::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 80 of file TSVG.h. ◆ MovePS(). void TSVG::MovePS ; (; Double_t ; ix, . Double_t ; iy . ). Move to a new position (ix, iy). ; The move is done in relative coordinates which allows to have short numbers which decrease the size of the file. This function use the full power of the SVG's paths by using the horizontal and vertical move whenever it is possible. ; Definition at line 1543 of file TSVG.cxx. ◆ NewPage(). void TSVG::NewPage ; (; ). overridevirtual . Start the SVG page. ; This function initialize the pad conversion coefficients and output the <svg> directive which is close later in the the function Close. ; Implements TVirtualPS.; Definition at line 1564 of file TSVG.cxx. ◆ Off(). void TSVG::Off ; (; ). Deactivate an already open SVG file. ; Definition at line 203 of file TSVG.cxx. ◆ On(). void TSVG::On ; (; ). Activate an already open SVG file. ; Definition at line 187 of file TSVG.cxx. ◆ Open(). void TSVG::Open ; (; const char * ; filename, . Int_t ; type = -111 . ). overridevirtual . Open a SVG file. ; Implements TVirtualPS.; Definition at line 113 of file TSVG.cxx. ◆ Range(). void TSVG::Range ; (; Float_t ; xrange, . Float_t ; yrange . ). Set the range for the paper in centimetres. ; Definition at line 1596 of file TSVG.cxx. ◆ SetColor() [1/2]. void TSVG::SetColor ; (;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSVG.html:31041,power,power,31041,doc/master/classTSVG.html,https://root.cern,https://root.cern/doc/master/classTSVG.html,1,['power'],['power']
Energy Efficiency,"lX.; Definition at line 1954 of file GX11Gui.cxx. ◆ SetOpacity(). void TGX11::SetOpacity ; (; Int_t ; percent). overridevirtual . Set opacity of a window. ; This image manipulation routine works by adding to a percent amount of neutral to each pixels RGB. Since it requires quite some additional color map entries is it only supported on displays with more than > 8 color planes (> 256 colors). ; Reimplemented from TVirtualX.; Definition at line 2884 of file TGX11.cxx. ◆ SetPrimarySelectionOwner(). void TGX11::SetPrimarySelectionOwner ; (; Window_t ; id). overridevirtual . Makes the window id the current owner of the primary selection. ; That is the window in which, for example some text is selected. ; Reimplemented from TVirtualX.; Definition at line 2249 of file GX11Gui.cxx. ◆ SetRGB(). void TGX11::SetRGB ; (; Int_t ; cindex, . Float_t ; r, . Float_t ; g, . Float_t ; b . ). overridevirtual . Set color intensities for given color index. ; Parameters. [in]cindex: color index ; [in]r,g,b: red, green, blue intensities between 0.0 and 1.0 . Reimplemented from TVirtualX.; Definition at line 3035 of file TGX11.cxx. ◆ SetSelectionOwner(). Bool_t TGX11::SetSelectionOwner ; (; Window_t ; owner, . Atom_t & ; sel . ). overridevirtual . Changes the owner and last-change time for the specified selection. ; Reimplemented from TVirtualX.; Definition at line 2741 of file GX11Gui.cxx. ◆ SetTextAlign(). void TGX11::SetTextAlign ; (; Short_t ; talign = 11). overridevirtual . Set text alignment. ; Parameters. [in]taligntext alignment . Reimplemented from TAttText.; Definition at line 3068 of file TGX11.cxx. ◆ SetTextColor(). void TGX11::SetTextColor ; (; Color_t ; cindex). overridevirtual . Set color index for text. ; Reimplemented from TAttText.; Definition at line 3125 of file TGX11.cxx. ◆ SetTextFont() [1/2]. Int_t TGX11::SetTextFont ; (; char * ; fontname, . ETextSetMode ; mode . ). overridevirtual . Set text font to specified name. ; Parameters. [in]fontnamefont name ; [in]modeloadin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:113319,green,green,113319,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['green'],['green']
Energy Efficiency,"lXProxy.cxx:104; xDouble_t x[n]Definition legend1.C:17; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; In case you create a RooFit dataset directly by calling its constructor, you can also pass the global observables in a command argument instead of calling RooAbsData::setGlobalObservables() later: RooDataSet data{""dataset"", ""dataset"", x, RooFit::GlobalObservables(g1, g2)};; RooDataSetContainer class to hold unbinned data.Definition RooDataSet.h:33; RooFit::GlobalObservablesRooCmdArg GlobalObservables(Args_t &&... argsOrArgSet)Definition RooGlobalFunc.h:306; To access the set of global observables stored in a RooAbsData, call RooAbsData::getGlobalObservables(). It returns a nullptr if no global observable snapshots are stored in the dataset. PyROOT; Some member functions of RooAbsData that take a RooCmdArg as argument also support keyword arguments. This applies to RooAbsData::plotOn, RooAbsData::createHistogram, RooAbsData::reduce, RooAbsData::statOn. For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; data.plotOn(frame, ROOT.RooFit.CutRange(""r1"")); ; # With keyword arguments:; data.plotOn(frame, CutRange=""r1""). Definition at line 57 of file RooAbsData.h. Classes; struct  PlotOpt;  . Public Types; using CategorySpans = std::map< RooFit::Detail::DataKey, std::span< const RooAbsCategory::value_type > >;  ; enum  ErrorType { ;   Poisson; , SumW2; , None; , Auto; , ;   Expected. };  ; using RealSpans = std::map< RooFit::Detail::DataKey, std::span< const double > >;  ; enum  StorageType { Tree; , Vector; , Composite; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:4002,reduce,reduce,4002,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['reduce'],['reduce']
Energy Efficiency,"lXProxy.cxx:168; TF11-Dim function classDefinition TF1.h:233; TF1::GetRandomvirtual Double_t GetRandom(TRandom *rng=nullptr, Option_t *opt=nullptr)Return a random number following this function shape.Definition TF1.cxx:2192; f1TF1 * f1Definition legend1.C:11; or you can use the UNURAN package. You need in this case to initialize UNURAN to the function you would like to generate. TUnuran u;; u.Init(TUnuranDistrCont(f1));; double r = u.Sample();; TUnuranTUnuran class.Definition TUnuran.h:79; TUnuran::Initbool Init(const std::string &distr, const std::string &method)Initialize with Unuran string API interface.Definition TUnuran.cxx:62; TUnuran::Sampledouble Sample()Sample 1D distribution.Definition TUnuran.cxx:414; The techniques of using directly a TF1,2 or 3 function is powerful and can be used to generate numbers in the defined range of the function. Getting a number from a TF1,2,3 function is also quite fast. UNURAN is a powerful and flexible tool which contains various methods for generate random numbers for continuous distributions of one and multi-dimension. It requires some set-up (initialization) phase and can be very fast when the distribution parameters are not changed for every call.; The following table shows some timings (in nanosecond/call) for basic functions, TF1 functions and using UNURAN obtained running the tutorial math/testrandom.C Numbers have been obtained on an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running Linux SLC4 64 bit and compiled with gcc 3.4; Distribution nanoseconds/call; TRandom TRandom1 TRandom2 TRandom3; Rndm.............. 5.000 105.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau............ 22.000 123.000 26.000 31.000; Exponential....... 93.000 198.000 98.000 104.000; Binomial(5,0.5)... 30.000 548.000 46.000 65.000; Binomial(15,0.5).. 75.000 1615.000 125.000 178.000; Poisson(3)........ 96.000 494.00",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom.html:6822,power,powerful,6822,doc/master/classTRandom.html,https://root.cern,https://root.cern/doc/master/classTRandom.html,1,['power'],['powerful']
Energy Efficiency,"l_t quiet=kFALSE) const;  Return a pointer to a newly allocated object of this class. ;  ; void * New (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; void * NewArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; void * NewArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObject (ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) const;  ; ObjectPtr NewObject (void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated array of objects of this class. ;  ; ObjectPtr NewObjectArray (Long_t nElements, void *arena, ENewType defConstructor=kClassNew) const;  Return a pointer to a newly allocated object of this class. ;  ; virtual void PostLoadCheck ();  Do the initialization that can only be done after the CINT dictionary has been fully populated and can not be delayed efficiently. ;  ; Long_t Property () const override;  Returns the properties of the TClass as a bit field stored as a Long_t value. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; Int_t ReadBuffer (TBuffer &b, void *pointer, Int_t version, UInt_t start, UInt_t count);  Function called by the Streamer functions to deserialize information from buffer b into object at p. ;  ; void RegisterStreamerInfo (TVirtualStreamerInfo *info);  Register the StreamerInfo in the given slot, change the State of the TClass as appropriate. ;  ; void RemoveStreamerInfo (Int_t slot);  Remove and delete the StreamerInfo in the given slot. ;  ; void ReplaceWith (TClass",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:21024,allocate,allocated,21024,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,3,['allocate'],['allocated']
Energy Efficiency,"laced into brackets):. opt=px:py::(pz>5?2:1). It is possible to “dump” content of any branch (by default - first 10 entries):. item=ntuple/px&opt=dump. Or one could dump values produced with draw expression (also first 10 entries by default):. opt=px:py::pz>>dump. Working with array indexes is supported. By default, all elements in array are used for the drawing. One could specify index for any array dimension (-1 means last element in the array). For instance, dump last element from event.fTracks array:. opt=event.fTracks[-1].fBits>>dump. For any array or collection kind one could extract its size with expression:. opt=event.fTracks.@size. At the end of expression one can add several parameters with the syntax:; <draw_expession>;par1name:par1value;par2name:par2value; Following parameters are supported: - “first” - id of the first entry to process - “entries” - number of entries to process - “monitor” - periodically show intermediate draw results (interval in milliseconds) - “maxrange” - maximal number of ranges in single HTTP request - “accum” - number of accumulated values before creating histogram - “htype” - last letter in histogram type like “I”, “F”, “D”, “S”, “L”, “C” - “hbins” - number of bins on each histogram axis - “drawopt” - drawing option for produced histogram - “graph” - draw into TGraph object; Example - opt=event.fTracks[].fTriggerBits;entries:1000;first:200;maxrange:25; 1.6 Geometry viewer; JSROOT implements display of TGeo objects like:. file=rootgeom.root&item=simple1; file=building.root&item=geom&opt=z. Following classes are supported by geometry viewer: - TGeoVolume - TGeoNode - TGeoManager (master volume will be displayed) - TEveGeoShapeExtract (used in EVE); Following draw options could be specified (separated by semicolon or ‘;’): - axis - draw axis coordinates - z - set z axis direction up (normally y axis is up and x looks in user direction) - clipx/clipy/clipz - enable correspondent clipping panel - clip or clipxyz - enable all three clip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:10496,monitor,monitor,10496,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,2,['monitor'],['monitor']
Energy Efficiency,"lang's) is scheduled before; 311 // those in libCore so we need to schedule the call to the TROOT; 312 // destructor before that *but* we want to make sure the memory; 313 // stay around until libCore itself is unloaded so that code; 314 // using gROOT can 'properly' check for validity.; 315 //; 316 // The order of loading for is:; 317 // libCore.so; 318 // libRint.so; 319 // ... anything other library hard linked to the executable ...; 320 // ... for example libEvent; 321 // libCling.so; 322 // ... other libraries like libTree for example ....; 323 // and the destruction order is (of course) the reverse.; 324 // By default the unloading of the dictionary, does use; 325 // the service of the interpreter ... which of course; 326 // fails if libCling is already unloaded by that information; 327 // has not been registered per se.; 328 //; 329 // To solve this problem, we now schedule the destruction; 330 // of the TROOT object to happen _just_ before the; 331 // unloading/destruction of libCling so that we can; 332 // maximize the amount of clean-up we can do correctly; 333 // and we can still allocate the TROOT object's memory; 334 // statically.; 335 //; 336 union {; 337 TROOT fObj;; 338 char fHolder[sizeof(TROOT)];; 339 };; 340 public:; 341 TROOTAllocator(): fObj(""root"", ""The ROOT of EVERYTHING""); 342 {}; 343 ; 344 ~TROOTAllocator() {; 345 if (gROOTLocal) {; 346 gROOTLocal->~TROOT();; 347 }; 348 }; 349 };; 350 ; 351 // The global gROOT is defined to be a function (ROOT::GetROOT()); 352 // which itself is dereferencing a function pointer.; 353 ; 354 // Initially this function pointer's value is & GetROOT1 whose role is to; 355 // create and initialize the TROOT object itself.; 356 // At the very end of the TROOT constructor the value of the function pointer; 357 // is switch to & GetROOT2 whose role is to initialize the interpreter.; 358 ; 359 // This mechanism was primarily intended to fix the issues with order in which; 360 // global TROOT and LLVM globals are init",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:11258,schedul,schedule,11258,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,4,"['allocate', 'schedul']","['allocate', 'schedule']"
Energy Efficiency,"lar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<double>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(double pt); ====== Set member functions for coordinates in other systems =======. void SetEta(double eta). void SetPhi(double phi). void SetE(double energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: 464c29f33a8bbd8462a3e15b7e4c30c6f5b74a30 $ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For commen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__PxPyPzM4D_double_.html:7520,energy,energy,7520,root/html534/ROOT__Math__PxPyPzM4D_double_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__PxPyPzM4D_double_.html,2,['energy'],['energy']
Energy Efficiency,"lar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<double>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(double pt); ====== Set member functions for coordinates in other systems =======. void SetEta(double eta). void SetPhi(double phi). void SetE(double energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h 30568 2009-10-06 07:17:59Z moneta $ » Last generated: 2009-12-07 13:44; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PxPyPzM4D_double_.html:7518,energy,energy,7518,root/html526/ROOT__Math__PxPyPzM4D_double_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PxPyPzM4D_double_.html,1,['energy'],['energy']
Energy Efficiency,"lar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<double>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(double pt); ====== Set member functions for coordinates in other systems =======. void SetEta(double eta). void SetPhi(double phi). void SetE(double energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h 31938 2009-12-18 14:49:38Z moneta $ » Last generated: 2010-09-23 19:56; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__PxPyPzM4D_double_.html:7518,energy,energy,7518,root/html528/ROOT__Math__PxPyPzM4D_double_.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__PxPyPzM4D_double_.html,1,['energy'],['energy']
Energy Efficiency,"lar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<double>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(double pt); ====== Set member functions for coordinates in other systems =======. void SetEta(double eta). void SetPhi(double phi). void SetE(double energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h 31938 2009-12-18 14:49:38Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__PxPyPzM4D_double_.html:7520,energy,energy,7520,root/html530/ROOT__Math__PxPyPzM4D_double_.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__PxPyPzM4D_double_.html,1,['energy'],['energy']
Energy Efficiency,"lar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<double>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(double pt); ====== Set member functions for coordinates in other systems =======. void SetEta(double eta). void SetPhi(double phi). void SetE(double energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h 31938 2009-12-18 14:49:38Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__PxPyPzM4D_double_.html:7520,energy,energy,7520,root/html532/ROOT__Math__PxPyPzM4D_double_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__PxPyPzM4D_double_.html,2,['energy'],['energy']
Energy Efficiency,"lar ; m . ). inline . Constructor from x, y , z , m values. ; Definition at line 67 of file PxPyPzM4D.h. ◆ PxPyPzM4D() [3/4]. template<class ScalarType = double> . template<class CoordSystem > . constexpr ROOT::Math::PxPyPzM4D< ScalarType >::PxPyPzM4D ; (; const CoordSystem & ; v). inlineexplicitconstexpr . construct from any 4D coordinate system class implementing X(), Y(), X() and M() ; Definition at line 78 of file PxPyPzM4D.h. ◆ PxPyPzM4D() [4/4]. template<class ScalarType = double> . ROOT::Math::PxPyPzM4D< ScalarType >::PxPyPzM4D ; (; const PxPyPzM4D< ScalarType > & ; v). inline . copy constructor ; Definition at line 87 of file PxPyPzM4D.h. Member Function Documentation. ◆ E(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::E ; (; ); const. inline . Energy. ; Definition at line 160 of file PxPyPzM4D.h. ◆ E2(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::E2 ; (; ); const. inline . energy squared ; Definition at line 189 of file PxPyPzM4D.h. ◆ Et(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::Et ; (; ); const. inline . transverse energy ; Definition at line 241 of file PxPyPzM4D.h. ◆ Et2(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::Et2 ; (; ); const. inline . transverse energy squared ; Definition at line 232 of file PxPyPzM4D.h. ◆ Eta(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzM4D< ScalarType >::Eta ; (; ); const. inline . pseudorapidity ; Definition at line 260 of file PxPyPzM4D.h. ◆ GetCoordinates() [1/2]. template<class ScalarType = double> . void ROOT::Math::PxPyPzM4D< ScalarType >::GetCoordinates ; (; Scalar & ; px, . Scalar & ; py, . Scalar & ; pz, . Scalar & ; m . ); const. inline . get internal data into 4 Scalar numbers ; Definition at line 140 of file PxPyPzM4D.h. ◆ GetCoordinates() [2/2]. template<class ScalarType = double> . void ROOT::Math::PxPyPzM4D< ScalarType >::GetCoordinate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html:5861,energy,energy,5861,doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html,1,['energy'],['energy']
Energy Efficiency,"lass * IsA () const override;  ; bool isWeighted () const override;  ; void loadValues (const RooAbsDataStore *tds, const RooFormulaVar *select=nullptr, const char *rangeName=nullptr, std::size_t nStart=0, std::size_t nStop=std::numeric_limits< std::size_t >::max()) override;  Load values from dataset 't' into this data collection, optionally selecting events using 'select' RooFormulaVar. ;  ; void loadValues (const TTree *t, const RooFormulaVar *select=nullptr, const char *rangeName=nullptr, Int_t nStart=0, Int_t nStop=2000000000);  Load values from tree 't' into this data collection, optionally selecting events using the RooFormulaVar 'select'. ;  ; RooAbsDataStore * merge (const RooArgSet &allvars, std::list< RooAbsDataStore * > dstoreList) override;  Merge columns of supplied data set(s) with this data set. ;  ; Int_t numEntries () const override;  ; std::unique_ptr< RooAbsDataStore > reduce (RooStringView name, RooStringView title, const RooArgSet &vars, const RooFormulaVar *cutVar, const char *cutRange, std::size_t nStart, std::size_t nStop) override;  ; void reset () override;  ; void Reset (Option_t *option=nullptr);  Interface function to TTree::Reset. ;  ; void resetBuffers () override;  ; void resetCache () override;  Remove tree with values of cached observables and clear list of cached observables. ;  ; void restoreAlternateBuffers ();  ; const RooArgSet & row ();  ; void setArgStatus (const RooArgSet &set, bool active) override;  Activate or deactivate the branch status of the TTree branch associated with the given set of dataset observables. ;  ; void setExternalWeightArray (const double *arrayWgt, const double *arrayWgtErrLo, const double *arrayWgtErrHi, const double *arraySumW2) override;  ; void Streamer (TBuffer &) override;  Stream an object of class RooTreeDataStore. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; double sumEntries () const override;  ; TTree & tree ();  ; const TTree * tree () const override;  ; double weig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeDataStore.html:5614,reduce,reduce,5614,doc/master/classRooTreeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooTreeDataStore.html,1,['reduce'],['reduce']
Energy Efficiency,"lass Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegrator",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html:1024,ADAPT,ADAPTIVE,1024,root/html602/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html,2,['ADAPT'],['ADAPTIVE']
Energy Efficiency,"lass Index; Class Hierarchy. Search. Source:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHMORE; » ROOT::Math::GSLIntegrator. class ROOT::Math::GSLIntegrator: public ROOT::Math::VirtualIntegratorOneDim. Class for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLIntegrator.html:1024,ADAPT,ADAPTIVE,1024,root/html532/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLIntegrator.html,2,['ADAPT'],['ADAPTIVE']
Energy Efficiency,"lass for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, double absTol = 1.0000000000000001E-9, double relTol = 9.9999999999999995E-7, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::Integration::Type type, const ROOT::Math::Integration::GKRule rule, double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html:1321,ADAPT,ADAPTIVESINGULAR,1321,root/html602/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLIntegrator.html,2,['ADAPT'],['ADAPTIVESINGULAR']
Energy Efficiency,"lass for performing numerical integration of a function in one dimension.; It uses the numerical integration algorithms of GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/html_node/Numerical-Integration.html"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~GSLIntegrator(); virtual doubleError() const; ROOT::Math::IntegrationOneDim::TypeGetType() const; const char*GetTypeName() const; ROOT::Math::GSLIntegratorGSLIntegrator(double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1000); ROOT::Math::GSLIntegratorGSLIntegrator(const ROOT::Math::IntegrationOneDim::Type type, const ROOT::Math::Integration::GKRule rule, double absTol = 1.E-9, double relTol = 1E-6, size_t size = 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLIntegrator.html:1321,ADAPT,ADAPTIVESINGULAR,1321,root/html532/ROOT__Math__GSLIntegrator.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLIntegrator.html,2,['ADAPT'],['ADAPTIVESINGULAR']
Energy Efficiency,"lass is also known as (typedefs to this class)ROOT::Math::IParametricGradFunctionMultiDim::BaseGradFunc, ROOT::Fit::Fitter::BaseGradFunc, ROOT::Math::MinimTransformFunction::BaseGradFunc, ROOT::Math::IMultiGradFunction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*ROOT::Math::IBaseFunctionMultiDim::Clone() const; doubleROOT::Math::IGradientMultiDim::Derivative(const double* x, unsigned int icoord = 0) const; virtual voidFdF(const double* x, double& f, double* df) const; virtual voidGradient(const double* x, double* grad) const; virtual unsigned intROOT::Math::IBaseFunctionMultiDim::NDim() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionMultiDim&operator=(const ROOT::Math::IGradientFunctionMultiDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Gradient(const double* x, double* grad) const. Evaluate all the vector of function derivatives (gradient) at a point x.; Derived classes must re-implement if it is more efficient than evaluting one at a time. void FdF(const double* x, double& f, double* df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; Derived class should implement this method if performances play an important role and if it is faster to; evaluate value and derivative at the same time. virtual ~IGradientFunctionMultiDim(). Virtual Destructor (no operations). {}. » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__IGradientFunctionMultiDim.html:2269,efficient,efficient,2269,root/html534/ROOT__Math__IGradientFunctionMultiDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__IGradientFunctionMultiDim.html,4,['efficient'],['efficient']
Energy Efficiency,"lass  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. More...;  ; class  GSLMultiFitFunctionAdapter;  Class for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: More...;  ; class  GSLMultiFitFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinDerivFunctionWrapper;  Wrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm. More...;  ; struct  GSLMultiMinFunctionAdapter;  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms. More...;  ; class  GSLMultiMinFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm More...;  ; class  GSLMultiMinimizer;  GSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives. More...;  ; class  GSLMultiRootBaseSolver;  GSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:10423,adapt,adapting,10423,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['adapt'],['adapting']
Energy Efficiency,"lass, users do not need to delete it. RooAbsPdf* GetPosteriorPdf() const; Build and return the posterior pdf (i.e posterior function normalized to all range of poi); Note that an extra integration in the POI is required for the normalization; NOTE: user must delete the returned object. RooPlot* GetPosteriorPlot(bool norm = false, double precision = 0.01) const; return a RooPlot with the posterior and the credibility region; NOTE: User takes ownership of the returned object. void SetIntegrationType(const char* type); set the integration type (possible type are) :; 1D integration ( used when only one nuisance and when the posterior is scanned):; adaptive , gauss, nonadaptive; multidim:; ADAPTIVE, adaptive numerical integration; The parameter numIters (settable with SetNumIters) is the max number of function calls.; It can be reduced to make teh integration faster but it will be difficult to reach the required tolerance; VEGAS MC integration method based on importance sampling - numIters is number of function calls; Extra Vegas parameter can be set using IntegratorMultiDimOptions class; MISER MC integration method based on stratified sampling; See also http://en.wikipedia.org/wiki/Monte_Carlo_integration for VEGAS and MISER description; PLAIN simple MC integration method, where the max number of calls can be specified using SetNumIters(numIters). Extra integration types are:. TOYMC:; evaluate posterior by generating toy MC for the nuisance parameters. It is a MC; integration, where the function is sampled according to the nuisance. It is convenient to use when all; the nuisance are uncorrelated and it is efficient to generate them; The toy are generated by default for each poi values; (this method has been proposed and provided by J.P Chou); 1-TOYMC : same method as before but in this case the toys are generated only one time and then used for; each poi value. It can be convenient when the generation time is much larger than the evaluation time,; otherwise it is recoome",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:12605,reduce,reduced,12605,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,9,['reduce'],['reduced']
Energy Efficiency,"lass. In particular the TClass object can create a new; 884/// object of the class type it describes. This new object now calls its; 885/// Streamer function to rebuilt itself.; 886///; 887/// ### Note; 888/// This function is called only internally by ROOT classes.; 889/// Although being public it is not supposed to be used outside ROOT.; 890/// If used, you must make sure that the bufferRead is large enough to; 891/// accomodate the object being read.; 892 ; 893TObject *TKey::ReadObjWithBuffer(char *bufferRead); 894{; 895 ; 896 TClass *cl = TClass::GetClass(fClassName.Data());; 897 if (!cl) {; 898 Error(""ReadObjWithBuffer"", ""Unknown class %s"", fClassName.Data());; 899 return 0;; 900 }; 901 if (!cl->IsTObject()) {; 902 // in principle user should call TKey::ReadObjectAny!; 903 return (TObject*)ReadObjectAny(0);; 904 }; 905 ; 906 TBufferFile bufferRef(TBuffer::kRead, fObjlen+fKeylen);; 907 if (!bufferRef.Buffer()) {; 908 Error(""ReadObjWithBuffer"", ""Cannot allocate buffer: fObjlen = %d"", fObjlen);; 909 return 0;; 910 }; 911 if (GetFile()==0) return 0;; 912 bufferRef.SetParent(GetFile());; 913 bufferRef.SetPidOffset(fPidOffset);; 914 ; 915 auto storeBuffer = fBuffer;; 916 if (fObjlen > fNbytes-fKeylen) {; 917 fBuffer = bufferRead;; 918 memcpy(bufferRef.Buffer(),fBuffer,fKeylen);; 919 } else {; 920 fBuffer = bufferRef.Buffer();; 921 ReadFile(); //Read object structure from file; 922 }; 923 fBuffer = storeBuffer;; 924 ; 925 // get version of key; 926 bufferRef.SetBufferOffset(sizeof(fNbytes));; 927 Version_t kvers = bufferRef.ReadVersion();; 928 ; 929 bufferRef.SetBufferOffset(fKeylen);; 930 TObject *tobj = 0;; 931 // Create an instance of this class; 932 ; 933 char *pobj = (char*)cl->New();; 934 if (!pobj) {; 935 Error(""ReadObjWithBuffer"", ""Cannot create new object of class %s"", fClassName.Data());; 936 return 0;; 937 }; 938 Int_t baseOffset = cl->GetBaseClassOffset(TObject::Class());; 939 if (baseOffset==-1) {; 940 // cl does not inherit from TObject.; 941 // Since th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:32375,allocate,allocate,32375,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency,"lassDef_StreamerNVirtual_b). inline . Definition at line 211 of file TASImage.h. ◆ Tile(). void TASImage::Tile ; (; UInt_t ; width, . UInt_t ; height . ). overridevirtual . Tile the original image. ; Reimplemented from TImage.; Definition at line 1987 of file TASImage.cxx. ◆ TypeFromMagicNumber(). const char * TASImage::TypeFromMagicNumber ; (; const char * ; file). private . Guess the file type from the first byte of file. ; Definition at line 402 of file TASImage.cxx. ◆ UnZoom(). void TASImage::UnZoom ; (; ). overridevirtual . Un-zoom the image to original size. ; UnZoom() - performs undo for Zoom,Crop,Scale actions ; Reimplemented from TImage.; Definition at line 2049 of file TASImage.cxx. ◆ Vectorize(). Double_t * TASImage::Vectorize ; (; UInt_t ; max_colors = 256, . UInt_t ; dither = 4, . Int_t ; opaque_threshold = 1 . ). overridevirtual . Reduce color-depth of an image and fills vector of ""scientific data"" [0...1]. ; Colors are reduced by allocating color cells to most used colors first, and then approximating other colors with those allocated.; Parameters. [in]max_colors- maximum size of the colormap. ; [in]dither- number of bits to strip off the color data ( 0...7 ) ; [in]opaque_threshold- alpha channel threshold at which pixel should be treated as opaque . Reimplemented from TImage.; Definition at line 2832 of file TASImage.cxx. ◆ WriteImage(). void TASImage::WriteImage ; (; const char * ; file, . EImageFileTypes ; type = TImage::kUnknown . ). overridevirtual . Write image to specified file. ; If there is no file extension or if the file extension is unknown, the type argument will be used to determine the file type. The quality and compression is derived from the TAttImage values.; It's possible to write image into an animated GIF file by specifying file name as ""myfile.gif+"" or ""myfile.gif+NN"", where NN is the delay of displaying subimages during animation in 10ms seconds units. NN is not restricted to two digits. If NN is omitted the delay between subima",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:78250,reduce,reduced,78250,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,2,"['allocate', 'reduce']","['allocated', 'reduced']"
Energy Efficiency,"lasses like ROOT::Math::GSLMCIntegrator. More...;  ; class  ROOT::Math::VirtualIntegratorOneDim;  Interface (abstract) class for 1D numerical integration It must be implemented by the concrete Integrator classes like ROOT::Math::GSLIntegrator. More...;  . Enumerations; enum  ROOT::Math::Integration::GKRule { ;   ROOT::Math::Integration::kGAUSS15 = 1; , ROOT::Math::Integration::kGAUSS21 = 2; , ROOT::Math::Integration::kGAUSS31 = 3; , ROOT::Math::Integration::kGAUSS41 = 4; , ;   ROOT::Math::Integration::kGAUSS51 = 5; , ROOT::Math::Integration::kGAUSS61 = 6. };  enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type More...;  ; enum  ROOT::Math::IntegrationOneDim::Type { ;   ROOT::Math::IntegrationOneDim::kDEFAULT = -1; , ROOT::Math::IntegrationOneDim::kGAUSS; , ROOT::Math::IntegrationOneDim::kLEGENDRE; , ROOT::Math::IntegrationOneDim::kADAPTIVE; , ;   ROOT::Math::IntegrationOneDim::kADAPTIVESINGULAR; , ROOT::Math::IntegrationOneDim::kNONADAPTIVE. };  enumeration specifying the integration types. More...;  . Enumeration Type Documentation. ◆ GKRule. enum ROOT::Math::Integration::GKRule. enumeration specifying the Gauss-KronRod integration rule for ADAPTIVE integration type . EnumeratorkGAUSS15 ; kGAUSS21 ; kGAUSS31 ; kGAUSS41 ; kGAUSS51 ; kGAUSS61 . Definition at line 58 of file IntegrationTypes.h. ◆ Type. enum ROOT::Math::IntegrationOneDim::Type. enumeration specifying the integration types. . EnumeratorkDEFAULT default type specified in the static options . kGAUSS simple Gauss integration method with fixed rule . kLEGENDRE Gauss-Legendre integration. . kADAPTIVE to be used for general functions without singularities . kADAPTIVESINGULAR default adaptive integration type which can be used in the case of the presence of singularities. . kNONADAPTIVE to be used for smooth functions . Definition at line 32 of file AllIntegrationTypes.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Integration.html:4366,adapt,adaptive,4366,doc/master/group__Integration.html,https://root.cern,https://root.cern/doc/master/group__Integration.html,1,['adapt'],['adaptive']
Energy Efficiency,"last element (the NULL string one) in the table if strKey was not equal to any of the string keys in the table. ; Definition at line 2205 of file TGFont.cxx. ◆ FindStateString(). const char * TGFontPool::FindStateString ; (; const FontStateMap_t * ; map, . int ; numKey . ). protected . Given a lookup table, map a number to a string in the table. ; If numKey was equal to the numeric key of one of the elements in the table, returns the string key of that element. Returns NULL if numKey was not equal to any of the numeric keys in the table ; Definition at line 2228 of file TGFont.cxx. ◆ FreeAttributeInfo(). void TGFontPool::FreeAttributeInfo ; (; char ** ; info). Free attributes info. ; Definition at line 1859 of file TGFont.cxx. ◆ FreeFont(). void TGFontPool::FreeFont ; (; const TGFont * ; font). Free font. If ref count is 0 delete font. ; Definition at line 1718 of file TGFont.cxx. ◆ FreeFontFamilies(). void TGFontPool::FreeFontFamilies ; (; char ** ; f). Delete an array of families allocated GetFontFamilies() method. ; Definition at line 2333 of file TGFont.cxx. ◆ GetAttributeInfo(). char ** TGFontPool::GetAttributeInfo ; (; const FontAttributes_t * ; fa). Return information about the font attributes as an array of strings. ; An array of FONT_NUMFIELDS strings is returned holding the value of the font attributes in the following order: family size weight slant underline overstrike ; Definition at line 1805 of file TGFont.cxx. ◆ GetFont() [1/4]. TGFont * TGFontPool::GetFont ; (; const char * ; family, . Int_t ; ptsize, . Int_t ; weight, . Int_t ; slant . ). Returns font specified bay family, pixel/point size, weight and slant negative value of ptsize means size in pixels positive value of ptsize means size in points. ; For example: TGFont *font = fpool->GetFont(""helvetica"", -9, kFontWeightNormal, kFontSlantRoman); font->Print(); ; Definition at line 1696 of file TGFont.cxx. ◆ GetFont() [2/4]. TGFont * TGFontPool::GetFont ; (; const char * ; font, . Bool_t ; fixedDefa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFontPool.html:17191,allocate,allocated,17191,doc/master/classTGFontPool.html,https://root.cern,https://root.cern/doc/master/classTGFontPool.html,1,['allocate'],['allocated']
Energy Efficiency,"lat data models, e.g. ; vectors of tracks.; This tutorial shows the possibility to use data models which are more complex than flat ntuples with RDataFrame.; ; import ROOT; ; # A simple helper function to fill a test tree: this makes the example stand-alone.; fill_tree_code = '''; using FourVector = ROOT::Math::XYZTVector;; using FourVectorVec = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *filename, const char *treeName); {; const double M = 0.13957; // set pi+ mass; TRandom3 R(1);; ; auto genTracks = [&](){; FourVectorVec tracks;; const auto nPart = R.Poisson(15);; tracks.reserve(nPart);; for (int j = 0; j < nPart; ++j) {; const auto px = R.Gaus(0, 10);; const auto py = R.Gaus(0, 10);; const auto pt = sqrt(px * px + py * py);; const auto eta = R.Uniform(-3, 3);; const auto phi = R.Uniform(0.0, 2 * TMath::Pi());; CylFourVector vcyl(pt, eta, phi);; // set energy; auto E = sqrt(vcyl.R() * vcyl.R() + M * M);; // fill track vector; tracks.emplace_back(vcyl.X(), vcyl.Y(), vcyl.Z(), E);; }; return tracks;; };; ; ROOT::RDataFrame d(64);; d.Define(""tracks"", genTracks).Snapshot<FourVectorVec>(treeName, filename, {""tracks""});; }; '''; ; # We prepare an input tree to run on; fileName = ""df002_dataModel_py.root""; treeName = ""myTree""; ROOT.gInterpreter.Declare(fill_tree_code); ROOT.fill_tree(fileName, treeName); ; # We read the tree from the file and create a RDataFrame, a class that; # allows us to interact with the data contained in the tree.; d = ROOT.RDataFrame(treeName, fileName); ; # Operating on branches which are collections of objects; # Here we deal with the simplest of the cuts: we decide to accept the event; # only if the number of tracks is greater than 8.; n_cut = 'tracks.size() > 8'; nentries = d.Filter(n_cut).Count();; ; print(""%s events passed all filters"" % nentries.GetValue()); ; # Another possibility consists i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df002__dataModel_8py.html:1291,energy,energy,1291,doc/master/df002__dataModel_8py.html,https://root.cern,https://root.cern/doc/master/df002__dataModel_8py.html,1,['energy'],['energy']
Energy Efficiency,"later can be resized using TStorage::ReAlloc(). ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void Dealloc (void *ptr);  De-allocate block of memory, that was allocated via TStorage::Alloc(). ;  ; static const char * DeclFileName ();  ; static void EnableStatistics (int size=-1, int ix=-1);  Enable memory usage statistics gathering. ;  ; static void EnterStat (size_t size, void *p);  Register a memory allocation operation. ;  ; static Bool_t FilledByObjectAlloc (volatile const UInt_t *const member);  ; static FreeHookFun_t GetFreeHook ();  ; static void * GetFreeHookData ();  return static free hook data ;  ; static size_t GetMaxBlockSize ();  ; static Bool_t HasCustomNewDelete ();  return the has custom delete flag ;  ; static void * ObjectAlloc (size_t size);  Used to allocate a TObject on the heap (via TObject::operator new()). ;  ; static void * ObjectAlloc (size_t size, void *vp);  Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)) in position vp. ;  ; static void * ObjectAllocArray (size_t size);  Used to allocate array of TObject on the heap (via TObject::operator new[]()). ;  ; static void ObjectDealloc (void *vp);  Used to deallocate a TObject on the heap (via TObject::operator delete()). ;  ; static void ObjectDealloc (void *vp, void *ptr);  Used to deallocate a TObject on the heap (via TObject::operator delete(void*,void*)). ;  ; static void PrintStatistics ();  Print memory usage statistics. ;  ; static void * ReAlloc (void *vp, size_t size, size_t oldsize);  Reallocate (i.e. ;  ; static char * ReAllocChar (char *vp, size_t size, size_t oldsize);  Reallocate (i.e. ;  ; static Int_t * ReAllocInt (Int_t *vp, size_t size, size_t oldsize);  Reallocate (i.e. ;  ; static void RemoveStat (void *p);  Register a memory free operation. ;  ; static void SetCustomNewDelete ();  set the has custom delete flag ;  ; static void SetFreeHook (FreeHookFun_t func,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStorage.html:2549,allocate,allocate,2549,doc/master/classTStorage.html,https://root.cern,https://root.cern/doc/master/classTStorage.html,1,['allocate'],['allocate']
Energy Efficiency,"lation label; Int_tfLastPMIdx!Last path-mark index tried in track-propagation.; Int_tTPolyMarker3D::fLastPointThe index of the last filled point; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tfLockPointsLock points that are currently in - do nothing in MakeTrack().; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTPolyMarker3D::fNNumber of allocated points; TStringTPolyMarker3D::fNameName of polymarker; Int_tTEveElement::fNumChildren!; TStringTPolyMarker3D::fOptionOptions; Bool_tTPointSet3D::fOwnIdsFlag specifying id-objects are owned by the point-set; TEveVectorDfPStarting momentum; Float_t*TPolyMarker3D::fP[3*fN] Array of X,Y,Z coordinates; TEveVectorDfPEndMomentum at the last point of extrapolation; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; TEveElement::List_tTEveElement::fParentsList of parents.; TEveTrack::vPathMark_tfPathMarksTEveVector of known points along the track; Int_tfPdgPDG code; Bool_tTEveElement::fPickable; TEveProjectable::ProjList_tTEveProjectable::fProjectedListreferences to projected instances.; TEveTrackPropagator*fPropagatorPointer to shared render-style; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tTEveLine::fRnrLine; Bool_tTEveLine::fRnrPoints; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTEveLine::fSmooth; TRefTEveElement::fSourceExternal object that is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTrack.html:28898,allocate,allocated,28898,root/html602/TEveTrack.html,https://root.cern,https://root.cern/root/html602/TEveTrack.html,4,['allocate'],['allocated']
Energy Efficiency,"lation label; Int_tfLastPMIdx!Last path-mark index tried in track-propagation.; Int_tTPolyMarker3D::fLastPointThe index of the last filled point; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tfLockPointsLock points that are currently in - do nothing in MakeTrack().; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTPolyMarker3D::fNNumber of allocated points; TStringTPolyMarker3D::fNameName of polymarker; Int_tTEveElement::fNumChildren!; TStringTPolyMarker3D::fOptionOptions; Bool_tTPointSet3D::fOwnIdsFlag specifying id-objects are owned by the point-set; TEveVectorDfPStarting momentum; Float_t*TPolyMarker3D::fP[3*fN] Array of X,Y,Z coordinates; TEveVectorDfPEndMomentum at the last point of extrapolation; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; list<TEveElement*>TEveElement::fParentsList of parents.; vector<TEvePathMarkT<double> >fPathMarksTEveVector of known points along the track; Int_tfPdgPDG code; Bool_tTEveElement::fPickable; list<TEveProjected*>TEveProjectable::fProjectedListreferences to projected instances.; TEveTrackPropagator*fPropagatorPointer to shared render-style; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tTEveLine::fRnrLine; Bool_tTEveLine::fRnrPoints; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTEveLine::fSmooth; TRefTEveElement::fSourceExternal object that is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveTrack.html:28716,allocate,allocated,28716,root/html534/TEveTrack.html,https://root.cern,https://root.cern/root/html534/TEveTrack.html,2,['allocate'],['allocated']
Energy Efficiency,"lav) state combinations; Roo1DTable *bttable = data->table(RooArgSet(tagCat, b0flav));; bttable->Print(""v"");; ; // Retrieve number of events from table; // Number can be non-integer if source dataset has weighed events; double nb0 = btable->get(""B0"");; std::cout << ""Number of events with B0 flavor is "" << nb0 << std::endl;; ; // Retrieve fraction of events with ""Lepton"" tag; double fracLep = ttable->getFrac(""Lepton"");; std::cout << ""Fraction of events tagged with Lepton tag is "" << fracLep << std::endl;; ; // D e f i n i n g r a n g e s f o r p l o t t i n g , f i t t i n g o n c a t e g o r i e s; // ------------------------------------------------------------------------------------------------------; ; // Define named range as comma separated list of labels; tagCat.setRange(""good"", ""Lepton,Kaon"");; ; // Or add state names one by one; tagCat.addToRange(""soso"", ""NetTagger-1"");; tagCat.addToRange(""soso"", ""NetTagger-2"");; ; // Use category range in dataset reduction specification; std::unique_ptr<RooAbsData> goodData{data->reduce(CutRange(""good""))};; static_cast<RooDataSet&>(*goodData).table(tagCat)->Print(""v"");; }; Roo1DTable.h; RooCategory.h; RooDataSet.h; RooGaussian.h; RooPlot.h; RooPolynomial.h; RooRealVar.h; TAxis.h; TCanvas.h; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; Roo1DTableOne-dimensional table.Definition Roo1DTable.h:23; Roo1DTable::getdouble get(const char *label, bool silent=false) constReturn the table entry named 'label'.Definition Roo1DTable.cxx:245; Roo1DTable::getFracdouble getFrac(const char *label, bool silent=false) constReturn the fraction of entries in the table contained in the slot named 'label'.Definition Roo1DTable.cxx:302; Roo1DTable::Printvoid Print(Option_t *options=nullptr) const overrideThis method must be overridden when a class wants to print itself.Definition Roo1DTable.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf404__categories_8C.html:4583,reduce,reduce,4583,doc/master/rf404__categories_8C.html,https://root.cern,https://root.cern/doc/master/rf404__categories_8C.html,1,['reduce'],['reduce']
Energy Efficiency,"lay help text; TRootIOCtor ; TRootSecContext Class providing host specific authentication information; TRootSniffer Sniffer of ROOT objects; TRootSnifferScanRec Scan record for objects sniffer; TRootSnifferStore structure for results store of objects sniffer; TRootSnifferStoreJson json results store of objects sniffer; TRootSnifferStoreXml xml results store of objects sniffer; TRotMatrix Rotation Matrix for 3-D geometry objects; TRotation Rotations of TVector3 objects; TS3HTTPRequest Create generic HTTP request for Amazon S3 and Google Storage services; TS3WebFile Read a ROOT file from a S3 server; TSAXParser SAX Parser; TSPHE SPHE shape; TSPlot class to disentangle signal from background; TSQLClassColumnInfo Keeps information about single column in class table; TSQLClassInfo Keeps the table information relevant for one class ; TSQLColumnData Single SQL column data.; TSQLColumnInfo Summury information about column from SQL table; TSQLFile ROOT TFile interface to SQL database; TSQLMonitoringWriter Sending monitoring data to a SQL DB; TSQLObjectData Keeps the data requested from the SQL server for an object.; TSQLObjectDataPool XML object keeper class ; TSQLObjectInfo Info (classname, version) about object in database ; TSQLResult SQL query result; TSQLRow One row of an SQL query result; TSQLServer Connection to SQL server; TSQLStatement SQL statement; TSQLStructure Table/structure description used internally by YBufferSQL.; TSQLTableData Collection of columns data for single SQL table; TSQLTableInfo Summury information about SQL table; TSSLSocket SSL wrapped socket; TSVDUnfold Data unfolding using Singular Value Decomposition (hep-ph/9509307) ; TSVG SVG driver; TSecContext Class providing host specific authentication information; TSecContextCleanup Update the remote authentication table; TSelVerifyDataSet PROOF selector for parallel dataset verification; TSelector A utility class for tree and object processing; TSelectorCint A utility class for tree and object process",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:130019,monitor,monitoring,130019,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,2,['monitor'],['monitoring']
Energy Efficiency,"lbufferSize). static . static function: Sets the unzip relative buffer size ; Definition at line 830 of file TTreeCacheUnzip.cxx. ◆ StopLearningPhase(). void TTreeCacheUnzip::StopLearningPhase ; (; ). overridevirtual . It's the same as TTreeCache::StopLearningPhase but we guarantee that we start the unzipping just after getting the buffers. ; Reimplemented from TTreeCache.; Definition at line 384 of file TTreeCacheUnzip.cxx. ◆ Streamer(). void TTreeCacheUnzip::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TTreeCache. ◆ StreamerNVirtual(). void TTreeCacheUnzip::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 159 of file TTreeCacheUnzip.h. ◆ UnzipBuffer(). Int_t TTreeCacheUnzip::UnzipBuffer ; (; char ** ; dest, . char * ; src . ). Unzips a ROOT specific buffer... by reading the header at the beginning. ; returns the size of the inflated buffer or -1 if error Note!! : If *dest == 0 we will allocate the buffer and it will be the responsibility of the caller to free it... it is useful for example to pass it to the creator of TBuffer src is the original buffer with the record (header+compressed data) *dest is the inflated buffer (including the header) ; Definition at line 853 of file TTreeCacheUnzip.cxx. ◆ UnzipCache(). Int_t TTreeCacheUnzip::UnzipCache ; (; Int_t ; index). This inflates a basket in the cache. ; . passing the data to a new buffer that will only wait there to be read... This function is responsible to update corresponding elements in fUnzipStatus, fUnzipChunks and fUnzipLen. Since we use atomic variables in fUnzipStatus to exclusively unzip the basket, we must update fUnzipStatus after fUnzipChunks and fUnzipLen and make sure fUnzipChunks and fUnzipLen are ready before main thread fetch the data. ; Definition at line 526 of file TTreeCacheUnzip.cxx. ◆ UpdateBranches(). void TTreeCacheUnzip::UpdateBranches ; (; TTree * ; tree). overridevirtual . update p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:37575,allocate,allocate,37575,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,1,['allocate'],['allocate']
Energy Efficiency,"lbufferSize). static . static function: Sets the unzip relative buffer size ; Definition at line 831 of file TTreeCacheUnzip.cxx. ◆ StopLearningPhase(). void TTreeCacheUnzip::StopLearningPhase ; (; ). overridevirtual . It's the same as TTreeCache::StopLearningPhase but we guarantee that we start the unzipping just after getting the buffers. ; Reimplemented from TTreeCache.; Definition at line 385 of file TTreeCacheUnzip.cxx. ◆ Streamer(). void TTreeCacheUnzip::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TTreeCache. ◆ StreamerNVirtual(). void TTreeCacheUnzip::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 159 of file TTreeCacheUnzip.h. ◆ UnzipBuffer(). Int_t TTreeCacheUnzip::UnzipBuffer ; (; char ** ; dest, . char * ; src . ). Unzips a ROOT specific buffer... by reading the header at the beginning. ; returns the size of the inflated buffer or -1 if error Note!! : If *dest == 0 we will allocate the buffer and it will be the responsibility of the caller to free it... it is useful for example to pass it to the creator of TBuffer src is the original buffer with the record (header+compressed data) *dest is the inflated buffer (including the header) ; Definition at line 854 of file TTreeCacheUnzip.cxx. ◆ UnzipCache(). Int_t TTreeCacheUnzip::UnzipCache ; (; Int_t ; index). This inflates a basket in the cache. ; . passing the data to a new buffer that will only wait there to be read... This function is responsible to update corresponding elements in fUnzipStatus, fUnzipChunks and fUnzipLen. Since we use atomic variables in fUnzipStatus to exclusively unzip the basket, we must update fUnzipStatus after fUnzipChunks and fUnzipLen and make sure fUnzipChunks and fUnzipLen are ready before main thread fetch the data. ; Definition at line 527 of file TTreeCacheUnzip.cxx. ◆ UpdateBranches(). void TTreeCacheUnzip::UpdateBranches ; (; TTree * ; tree). overridevirtual . update p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:37649,allocate,allocate,37649,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,1,['allocate'],['allocate']
Energy Efficiency,"ld be used as last resort as numeric convolution calculated this way is computationally intensive and prone to stability fitting problems. The preferred way to compute numeric convolutions is RooFFTConvPdf, which calculates convolutions using Fourier Transforms (requires external free FFTW3 package) RooNumConvPdf implements reasonable defaults that should convolve most functions reasonably well, but results strongly depend on the shape of your input PDFS so always check your result. The default integration engine for the numeric convolution is the adaptive Gauss-Kronrod method, which empirically seems the most robust for this task. You can override the convolution integration settings via the RooNumIntConfig object reference returned by the convIntConfig() member function By default the numeric convolution is integrated from -infinity to +infinity through a x -> 1/x coordinate transformation of the tails. For convolution with a very small bandwidth it may be advantageous (for both CPU consumption and stability) if the integration domain is limited to a finite range. The function setConvolutionWindow(mean,width,scale) allows to set a sliding window around the x value to be calculated taking a RooAbsReal expression for an offset and a width to be taken around the x value. These input expression can be RooFormulaVars or other function objects although the 3d 'scale' argument 'scale' multiplies the width RooAbsReal expression given in the 2nd argument, allowing for an appropriate window definition for most cases without need for a RooFormulaVar object: e.g. a Gaussian resolution PDF do setConvolutionWindow(gaussMean,gaussSigma,5) Note that for a 'wide' Gaussian the -inf to +inf integration may converge more quickly than that over a finite range! The default numeric precision is 1e-7, i.e. the global default for numeric integration but you should experiment with this value to see if it is sufficient for example by studying the number of function calls that MINUIT needs t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:1532,consumption,consumption,1532,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['consumption'],['consumption']
Energy Efficiency,"le = data.table(tagCat, ""x>8.23""); ttable.Print(); ttable.Print(""v""); ; # Create table for all (tagCat x b0flav) state combinations; bttable = data.table({tagCat, b0flav}); bttable.Print(""v""); ; # Retrieve number of events from table; # Number can be non-integer if source dataset has weighed events; nb0 = btable.get(""B0""); print(""Number of events with B0 flavor is "", nb0); ; # Retrieve fraction of events with ""Lepton"" tag; fracLep = ttable.getFrac(""Lepton""); print(""Fraction of events tagged with Lepton tag is "", fracLep); ; # Defining ranges for plotting, fitting on categories; # ------------------------------------------------------------------------------------------------------; ; # Define named range as comma separated list of labels; tagCat.setRange(""good"", ""Lepton,Kaon""); ; # Or add state names one by one; tagCat.addToRange(""soso"", ""NetTagger-1""); tagCat.addToRange(""soso"", ""NetTagger-2""); ; # Use category range in dataset reduction specification; goodData = data.reduce(CutRange=""good""); goodData.table(tagCat).Print(""v""); Printvoid Print(GNN_Data &d, std::string txt="""")Definition TMVA_SOFIE_GNN_Application.C:59; RooCategory::tagCat = Lepton(idx = 0); ; RooCategory::b0flav = B0(idx = -1); ; Roo1DTable::b0flav = (B0=5040,B0bar=4960); ; Table b0flav : pData; +-------+------+; | B0 | 5040 |; | B0bar | 4960 |; +-------+------+; ; Roo1DTable::tagCat = (Lepton=487,Kaon=433,NetTagger-1=439,NetTagger-2=406); ; Table tagCat : pData(x>8.23); +-------------+-----+; | Lepton | 487 |; | Kaon | 433 |; | NetTagger-1 | 439 |; | NetTagger-2 | 406 |; +-------------+-----+; ; ; Table (tagCat x b0flav) : pData; +---------------------+------+; | {Lepton;B0} | 1281 |; | {Kaon;B0} | 1253 |; | {NetTagger-1;B0} | 1234 |; | {NetTagger-2;B0} | 1272 |; | {Lepton;B0bar} | 1269 |; | {Kaon;B0bar} | 1255 |; | {NetTagger-1;B0bar} | 1219 |; | {NetTagger-2;B0bar} | 1217 |; +---------------------+------+; ; ; Table tagCat : pData; +-------------+------+; | Lepton | 2550 |; | Kaon | 2508 |; | NetTa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf404__categories_8py.html:2483,reduce,reduce,2483,doc/master/rf404__categories_8py.html,https://root.cern,https://root.cern/doc/master/rf404__categories_8py.html,1,['reduce'],['reduce']
Energy Efficiency,"le Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); 117 Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); 118 lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; 119 ; 120 NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 121 */; 122 explicit; 123 IntegratorOneDim(IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, unsigned int rule = 0) :; 124 fIntegrator(nullptr), fFunc(nullptr); 125 {; 126 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 127 }; 128 ; 129 /**; 130 Constructor of one dimensional Integrator passing a function interface; 131 ; 132 @param f integration function (1D interface). It is copied inside; 133 @param type integration type (adaptive, non-adaptive, etc..); 134 @param absTol desired absolute tolerance. The algorithm will stop when either the absolute OR the relative tolerance are satisfied.; 135 @param relTol desired relative tolerance; 136 @param size maximum number of sub-intervals; 137 @param rule Gauss-Kronrod integration rule (only for GSL ADAPTIVE type); 138 ; 139 NOTE: When no values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions; 140 */; 141 explicit; 142 IntegratorOneDim(const IGenFunction &f, IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = -1, double relTol = -1, unsigned int size = 0, int rule = 0) :; 143 fIntegrator(nullptr), fFunc(nullptr); 144 {; 145 fIntegrator = CreateIntegrator(type, absTol, relTol, size, rule);; 146 SetFunction(f,true);; 147 }; 148 ; 149 /**; 150 Template Constructor of one dimensional Integrator passing a generic function object; 151 ; 152 @param f integration function (any C+",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Integrator_8h_source.html:5173,adapt,adaptive,5173,doc/master/Integrator_8h_source.html,https://root.cern,https://root.cern/doc/master/Integrator_8h_source.html,2,['adapt'],['adaptive']
Energy Efficiency,le MethodPDERS.cxx. ◆ WriteWeightsToStream(). void TMVA::MethodPDERS::WriteWeightsToStream ; (; TFile & ; rf); const. write training sample (TTree) to file ; Definition at line 1168 of file MethodPDERS.cxx. Member Data Documentation. ◆ fAverageRMS. std::vector<Float_t> TMVA::MethodPDERS::fAverageRMS. private . average RMS of signal and background ; Definition at line 181 of file MethodPDERS.h. ◆ fBinaryTree. BinarySearchTree* TMVA::MethodPDERS::fBinaryTree. private . binary tree ; Definition at line 177 of file MethodPDERS.h. ◆ fDelta. std::vector<Float_t>* TMVA::MethodPDERS::fDelta. private . size of volume ; Definition at line 179 of file MethodPDERS.h. ◆ fDeltaFrac. Float_t TMVA::MethodPDERS::fDeltaFrac. private . fraction of RMS ; Definition at line 185 of file MethodPDERS.h. ◆ fFcnCall. Int_t TMVA::MethodPDERS::fFcnCall. protected . Definition at line 113 of file MethodPDERS.h. ◆ fGaussSigma. Double_t TMVA::MethodPDERS::fGaussSigma. private . size of Gauss in adaptive volume ; Definition at line 186 of file MethodPDERS.h. ◆ fGaussSigmaNorm. Double_t TMVA::MethodPDERS::fGaussSigmaNorm. private . size of Gauss in adaptive volume (normalised to dimensions) ; Definition at line 187 of file MethodPDERS.h. ◆ fHelpVolume. Volume* TMVA::MethodPDERS::fHelpVolume. protected . Definition at line 112 of file MethodPDERS.h. ◆ fInitializedVolumeEle. Bool_t TMVA::MethodPDERS::fInitializedVolumeEle. private . is volume element initialized ? ; Definition at line 197 of file MethodPDERS.h. ◆ fInitialScale. Float_t TMVA::MethodPDERS::fInitialScale. private . initial scale for adaptive volume ; Definition at line 195 of file MethodPDERS.h. ◆ fKernelEstimator. enum TMVA::MethodPDERS::EKernelEstimator TMVA::MethodPDERS::fKernelEstimator. private . ◆ fKernelString. TString TMVA::MethodPDERS::fKernelString. private . Definition at line 149 of file MethodPDERS.h. ◆ fkNNMax. Int_t TMVA::MethodPDERS::fkNNMax. private . max number of events in kNN tree ; Definition at line 200 of file Meth,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:45159,adapt,adaptive,45159,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,1,['adapt'],['adaptive']
Energy Efficiency,"le Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf707_kernelestimation.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Special pdf's: using non-parametric (multi-dimensional) kernel estimation pdfs . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooPolynomial.h""; #include ""RooKeysPdf.h""; #include ""RooNDKeysPdf.h""; #include ""RooProdPdf.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""TH1.h""; #include ""RooPlot.h""; using namespace RooFit;; ; void rf707_kernelestimation(); {; // C r e a t e l o w s t a t s 1 - D d a t a s e t; // -------------------------------------------------------; ; // Create a toy pdf for sampling; RooRealVar x(""x"", ""x"", 0, 20);; RooPolynomial p(""p"", ""p"", x, RooArgList(0.01, -0.01, 0.0004));; ; // Sample 500 events from p; std::unique_ptr<RooDataSet> data1{p.generate(x, 200)};; ; // C r e a t e 1 - D k e r n e l e s t i m a t i o n p d f; // ---------------------------------------------------------------; ; // Create adaptive kernel estimation pdf. In this configuration the input data; // is mirrored over the boundaries to minimize edge effects in distribution; // that do not fall to zero towards the edges; RooKeysPdf kest1(""kest1"", ""kest1"", x, *data1, RooKeysPdf::MirrorBoth);; ; // An adaptive kernel estimation pdf on the same data without mirroring option; // for comparison; RooKeysPdf kest2(""kest2"", ""kest2"", x, *data1, RooKeysPdf::NoMirror);; ; // Adaptive kernel estimation pdf with increased bandwidth scale factor; // (promotes smoothness over detail preservation); RooKeysPdf kest3(""kest1"", ""kest1"", x, *data1, RooKeysPdf::MirrorBoth, 2);; ; // Plot kernel estimation pdfs with and without mirroring over data; RooPlot *frame = x.frame(Title(""Adaptive kernel estimation pdf with and w/o mirroring""), Bins(20));; data1->plotOn(frame);; kest1.plotOn(frame);; kest2.plotOn(frame, LineStyle(kDashed), LineColor(kRed));; ; // Plot kernel esti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf707__kernelestimation_8C.html:1118,adapt,adaptive,1118,doc/master/rf707__kernelestimation_8C.html,https://root.cern,https://root.cern/doc/master/rf707__kernelestimation_8C.html,1,['adapt'],['adaptive']
Energy Efficiency,"le RooAbsReal.cxx. ◆ binBoundaries(). std::list< double > * RooAbsReal::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3560 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 2980 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsReal.html:66394,adapt,adaptor,66394,doc/master/classRooAbsReal.html,https://root.cern,https://root.cern/doc/master/classRooAbsReal.html,1,['adapt'],['adaptor']
Energy Efficiency,"le RooAbsReal.cxx. ◆ binBoundaries(). std::list< double > * RooAbsReal::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3640 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 3065 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:67662,adapt,adaptor,67662,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['adapt'],['adaptor']
Energy Efficiency,"le above, but replacing the creation of a ROOT::Math::GaussIntegrator object with ROOT::Math::GaussLegendreIntegrator.; 13.8.2.3 ROOT::Math::GSLIntegrator; This is a wrapper for the QUADPACK integrator implemented in the GSL library. It supports several integration methods that can be chosen in construction time. The default type is adaptive integration with singularity applying a Gauss-Kronrod 21-point integration rule. For a detail description of the GSL methods visit the GSL user guide This class implements the best algorithms for numerical integration for one dimensional functions. We encourage the use it as the main option, bearing in mind that it uses code from the GSL library, wich is provided in the MathMore library of ROOT.; The interface to use is the same as above. We have now the possibility to specify a different integration algorithm in the constructor of the ROOT::Math::GSLIntegrator class.; // create the adaptive integrator with the 51 point rule; ROOT::Math::GSLIntegrator ig(ROOT::Math::Integration::kADAPTIVE, ROOT::Math::Integration::kGAUSS51);; ig.SetRelTolerance(1.E-6); // set relative tolerance; ig.SetAbsTolerance(1.E-6); // set absoulte tolerance; The algorithm is controlled by the given absolute and relative tolerance. The iterations are continued until the following condition is satisfied \[; absErr <= max ( epsAbs, epsRel * Integral); \] Where absErr is an estimate of the absolute error (it can be retrieved with GSLIntegrator::Error()) and Integral is the estimate of the function integral (it can be obtained with GSLIntegrator::Result()); The possible integration algorithm types to use with the GSLIntegrator are the following. More information is provided in the GSL users documentation. * ROOT::Math::Integration::kNONADAPTIVE : based on gsl_integration_qng. It is a non-adaptive procedure which uses fixed Gauss-Kronrod-Patterson abscissae to sample the integrand at a maximum of 87 points. It is provided for fast integration of smooth functions",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:706542,adapt,adaptive,706542,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['adapt'],['adaptive']
Energy Efficiency,"le means, xS(B),i,; and total covariance matrix Tij. The covariance matrix; can be decomposed into the sum of a within- (Wij); and a between-class (Bij) class matrix. They describe; the dispersion of events relative to the means of their own class (within-class; matrix), and relative to the overall sample means (between-class matrix).; The Fisher coefficients, Fi, are then given by . where in TMVA is set NS=NB, so that the factor; in front of the sum simplifies to ½.; The Fisher discriminant then reads. The offset F0 centers the sample mean of xFi; at zero. Instead of using the within-class matrix, the Mahalanobis variant; determines the Fisher coefficients as follows:. with resulting xMa that are very similar to the; xFi. ; TMVA provides two outputs for the ranking of the input variables:. Fisher test: the Fisher analysis aims at simultaneously maximising; the between-class separation, while minimising the within-class dispersion.; A useful measure of the discrimination power of a variable is hence given; by the diagonal quantity: Bii/Wii.; ; Discrimination power: the value of the Fisher coefficient is a; measure of the discriminating power of a variable. The discrimination power; of set of input variables can therefore be measured by the scalar; . The corresponding numbers are printed on standard output.; ; . Function Members (Methods); public:. virtual~MethodFisher(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidTMVA::MethodBase::CheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodFisher.html:2279,power,power,2279,root/html528/TMVA__MethodFisher.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodFisher.html,10,['power'],['power']
Energy Efficiency,"le relTol, unsigned int ncall);  . Private Member Functions;  IntegratorMultiDim (const IntegratorMultiDim &);  ; IntegratorMultiDim & operator= (const IntegratorMultiDim &);  . Private Attributes; std::unique_ptr< IMultiGenFunction > fFunc;  pointer to owned function ;  ; VirtualIntegratorMultiDim * fIntegrator;  pointer to multi-dimensional integrator base class ;  . #include <Math/IntegratorMultiDim.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationMultiDim::Type ROOT::Math::IntegratorMultiDim::Type. Definition at line 51 of file IntegratorMultiDim.h. Constructor & Destructor Documentation. ◆ IntegratorMultiDim() [1/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic constructor of multi dimensional Integrator. ; By default uses the Adaptive integration method; Parameters. typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods). In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used ; Definition at line 64 of file IntegratorMultiDim.h. ◆ IntegratorMultiDim() [2/3]. ROOT::Math::IntegratorMultiDim::IntegratorMultiDim ; (; const IMultiGenFunction & ; f, . IntegrationMultiDim::Type ; type = IntegrationMultiDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; ncall = 0 . ). inlineexplicit . Generic Constructor of multi dimensional Integrator passing a function. ; By default uses the adaptive integration method; Parameters. fintegration function (multi-dim interface) ; typeintegration type (adaptive, MC methods, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; ncallnumber of function calls (apply only to MC integration methods) . Definition at line 79 of file Integra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html:4295,adapt,adaptive,4295,doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDim.html,1,['adapt'],['adaptive']
Energy Efficiency,"le relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. auto_ptr<ROOT::Math::IBaseFunctionOneDim>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule = 0). Constructor of one dimensional Integrator passing a functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html:4704,adapt,adaptive,4704,root/html528/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorOneDim.html,12,['adapt'],['adaptive']
Energy Efficiency,"le. 1// @(#)root/mathcore:$Id$; 2// Authors: L. Moneta 11/2006; 3 ; 4/**********************************************************************; 5 * *; 6 * Copyright (c) 2006 , LCG ROOT MathLib Team *; 7 * *; 8 * *; 9 **********************************************************************/; 10 ; 11// Header file for function interfaces; 12//; 13// Generic Interfaces for one or multi-dimensional functions; 14//; 15// Created by: Lorenzo Moneta : Wed Nov 13 2006; 16//; 17//; 18#ifndef ROOT_Math_IFunction; 19#define ROOT_Math_IFunction; 20 ; 21/**; 22@defgroup CppFunctions Function Classes and Interfaces; 23 ; 24 Interfaces (abstract classes) and Base classes used in MathCore and MathMore numerical methods; 25 for describing function classes. They define function and gradient evaluation and as well the; 26 functionality for dealing with parameters in the case of parametric functions which are used for; 27 fitting and data modeling.; 28 Included are also adapter classes, such as functors, to wrap generic callable C++ objects; 29 in the desired interface.; 30 ; 31@ingroup MathCore; 32*/; 33 ; 34#include ""Math/IFunctionfwd.h""; 35 ; 36 ; 37namespace ROOT {; 38 namespace Math {; 39 ; 40 /**; 41 @defgroup GenFunc Generic Function Evaluation Interfaces; 42 Interface classes for evaluation of function object classes in one or multi-dimensions.; 43 @ingroup CppFunctions; 44 */; 45 ; 46//___________________________________________________________________________________; 47 /**; 48 Documentation for the abstract class IBaseFunctionMultiDim.; 49 Interface (abstract class) for generic functions objects of multi-dimension; 50 Provides a method to evaluate the function given a vector of coordinate values,; 51 by implementing operator() (const double *).; 52 In addition it defines the interface for copying functions via the pure virtual method Clone(); 53 and the interface for getting the function dimension via the NDim() method.; 54 Derived classes must implement the pure private virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/IFunction_8h_source.html:1145,adapt,adapter,1145,doc/master/IFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html,1,['adapt'],['adapter']
Energy Efficiency,"le. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  ;  Static Public Member Functions inherited from RooDirItem; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void initialize (const char *wgtVarName);  Initialize the dataset. ;  ; std::unique_ptr< RooAbsData > reduceEng (const RooArgSet &varSubset, const RooFormulaVar *cutVar, const char *cutRange=nullptr, std::size_t nStart=0, std::size_t nStop=std::numeric_limits< std::size_t >::max()) const override;  Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ;  ;  Protected Member Functions inherited from RooAbsData; bool allClientsCached (RooAbsArg *, const RooArgSet &);  Utility function that determines if all clients of object 'var' appear in given list of cached nodes. ;  ; virtual void attachCache (const RooAbsArg *newOwner, const RooArgSet &cachedVars);  Internal method – Attach dataset copied with cache contents to copied instances of functions. ;  ; virtual void cacheArgs (const RooAbsArg *owner, RooArgSet &varSet, const RooArgSet *nset=nullptr, bool skipZeroWeights=false);  Internal method – Cache given set of functions with data. ;  ; double corrcov (const RooRealVar &x, const RooRealVar &y, const char *cutSpec, const char *cutRange, bool corr) const;  Internal method to calculate single correlation and covariance elements. ;  ; RooFit::OwningPtr< TMatrixDSym > corrcovMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:30487,reduce,reduceEng,30487,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,2,['reduce'],"['reduce', 'reduceEng']"
Energy Efficiency,"le.; This function use the full power of the SVG's paths by using the; horizontal and vertical move whenever it is possible. void NewPage(); Start the SVG page. This function initialize the pad conversion; coefficients and ouput the <svg> directive which is close later in the; the function Close. void Range(Float_t xrange, Float_t yrange); Set the range for the paper in centimetres. void SetFillColor(Color_t cindex = 1); Set color index for fill areas. void SetLineColor(Color_t cindex = 1); Set color index for lines. void SetLineStyle(Style_t linestyle = 1); Change the line style. linestyle = 2 dashed; = 3 dotted; = 4 dash-dotted; = else solid (1 in is used most of the time). void SetLineWidth(Width_t linewidth = 1); Set the lines width. void SetMarkerColor(Color_t cindex = 1); Set color index for markers. void SetColor(Int_t color = 1); Set color with its color index. void SetColor(Float_t r, Float_t g, Float_t b); Set color with its R G B components. r: % of red in [0,1]; g: % of green in [0,1]; b: % of blue in [0,1]. void SetTextColor(Color_t cindex = 1); Set color index for text. void Text(Double_t x, Double_t y, const char* string); Draw text. xx: x position of the text; yy: y position of the text; chars: text to be drawn. void TextNDC(Double_t u, Double_t v, const char* string); Write a string of characters in NDC. Int_t UtoSVG(Double_t u); Convert U from NDC coordinate to SVG. Int_t VtoSVG(Double_t v); Convert V from NDC coordinate to SVG. Int_t XtoSVG(Double_t x); Convert X from world coordinate to SVG. Int_t YtoSVG(Double_t y); Convert Y from world coordinate to SVG. void CellArrayBegin(Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2); Begin the Cell Array painting. void CellArrayFill(Int_t r, Int_t g, Int_t b); Paint the Cell Array. void CellArrayEnd(); End the Cell Array painting. void DrawPS(Int_t n, Float_t* xw, Float_t* yw); Not needed in SVG case. Int_t CMtoSVG(Double_t u); {return Int_t(0.5 + 72*u/2.54);}. void SetLineScale(Float_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSVG.html:15465,green,green,15465,root/html528/TSVG.html,https://root.cern,https://root.cern/root/html528/TSVG.html,4,['green'],['green']
Energy Efficiency,"le::Open. TFile::Open will recognize that you are trying to open an XML file and return a TXMLFile object. When a XML file is open in write mode, one can use the normal TObject::Write to write an object in the file.; // example of a session saving a histogram to a XML file; TFile *f = TFile::Open(""Example.xml"",""recreate"");; TH1F *h = new TH1F(""h"",""test"",1000,-2,2); h->FillRandom(""gaus"");; h->Write();; delete f;; // example of a session saving a histogram to a XML file; TFile *f = TFile::Open(""Example.xml"");; TH1F *h = (TH1F*)f->Get(""h"");; h->Draw();; The canvas can be saved as a XML file format via File menu / Save or Save As menu entries. One can do also:; canvas->Print(""Example.xml"");; 12 Trees; 12.1 Why Should You Use a Tree?; In the “Input/Output” chapter, we saw how objects can be saved in ROOT files. In case you want to store large quantities of same-class objects, ROOT has designed the TTree and TNtuple classes specifically for that purpose. The TTree class is optimized to reduce disk space and enhance access speed. A TNtuple is a TTree that is limited to only hold floating-point numbers; a TTree on the other hand can hold all kind of data, such as objects or arrays in addition to all the simple types.; When using a TTree, we fill its branch buffers with leaf data and the buffers are written to disk when it is full. Branches, buffers, and leafs, are explained a little later in this chapter, but for now, it is important to realize that each object is not written individually, but rather collected and written a bunch at a time.; This is where the TTree takes advantage of compression and will produce a much smaller file than if the objects were written individually. Since the unit to be compressed is a buffer, and the TTree contains many same-class objects, the header of the objects can be compressed.; The TTree reduces the header of each object, but it still contains the class name. Using compression, the class name of each same-class object has a good chance o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:519676,reduce,reduce,519676,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['reduce'],['reduce']
Energy Efficiency,"lePDG*fAntiParticlepointer to antiparticle; Int_tfBeauty; Double_tfChargecharge in units of |e|/3; Int_tfCharm1 or -1 for C-particles,; TObjArray*fDecayListarray of decay channels; Double_tfI3i3; Double_tfIsospinisospin; Double_tfLifetimeproper lifetime in seconds; Double_tfMassparticle mass in GeV; TStringTNamed::fNameobject identifier; Int_tfParity; TStringfParticleClasslepton, meson etc; Int_tfPdgCodePDG code of the particle; Double_tfSpin; Int_tfStable1 if stable, 0 otherwise; Int_tfStrangenessflavours are defined if i3 != -1; TStringTNamed::fTitleobject title; Int_tfTop; Int_tfTrackingCodeG3 tracking code of the particle; Double_tfWidthtotal width in GeV; Int_tfX; Int_tfYX,Y: quantum numbers for the 4-th generation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TParticlePDG(); default constructor. TParticlePDG(Int_t ); empty for the time being. TParticlePDG(const char* Name, const char* Title, Double_t Mass, Bool_t Stable, Double_t Width, Double_t Charge, const char* ParticleClass, Int_t PdgCode, Int_t Anti, Int_t TrackingCode). TParticlePDG(const TParticlePDG& ); copy constructor. TParticlePDG& operator=(const TParticlePDG& ); assignement operator. ~TParticlePDG(); destructor. Int_t AddDecayChannel(Int_t Type, Double_t BranchingRatio, Int_t NDaughters, Int_t* DaughterPdgCode); add new decay channel, Particle owns those... TDecayChannel* DecayChannel(Int_t i); return pointer to decay channel object at index i. void PrintDecayChannel(TDecayChannel* dc, Option_t* opt = """") const; print the list of decays. void Print(Option_t* opt = """") const. Print the entire information of this kind of particle. Int_t PdgCode() const; ****** access methods. { return fPdgCode; }. Double_t Mass() const; { return fMass; }. Double_t Charge() const; { return fCharge; }. Double_t Lifetime() const; { return fLifetime; }. Double_t Width() const; { return fWidth; }. Int_t Parity() const; { return fParity; }. Double_t Spin() const; { return fSp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TParticlePDG.html:8283,Charge,Charge,8283,root/html532/TParticlePDG.html,https://root.cern,https://root.cern/root/html532/TParticlePDG.html,2,['Charge'],['Charge']
Energy Efficiency,"le_t *CalcPositions =; new Double_t[nfound];����� ; �� Double_t *CalcAmplitudes = new; Double_t[nfound];�������� ; �� CalcPositions=pfit->GetPositions();; ��; CalcAmplitudes=pfit->GetAmplitudes();�� ; �� for (i = 0; i < nbins;; i++) d->SetBinContent(i + 1,source[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");� ; �� for (i = 0; i < nfound;; i++) {; �� ������������ ������������������������������� a=CalcPositions[i];; ������� bin = 1 + Int_t(a +; 0.5);�� ������������ ; ������� PosX[i] =; d->GetBinCenter(bin);; ������� PosY[i] =; d->GetBinContent(bin);; �� }; �� TPolyMarker * pm =; (TPolyMarker*)h->GetListOfFunctions()->FindObject(""TPolyMarker"");; �� if (pm) {; �����; h->GetListOfFunctions()->Remove(pm);; ����� delete pm;; �� }; �� pm = new; TPolyMarker(nfound, PosX, PosY);; ��; h->GetListOfFunctions()->Add(pm);; �� pm->SetMarkerStyle(23);; ��; pm->SetMarkerColor(kRed);; �� pm->SetMarkerSize(1);��. }. void SetFitParameters(Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor). SETTER FUNCTION. This function sets the following fitting parameters:; -xmin, xmax - fitting region; -numberIterations - # of desired iterations in the fit; -alpha - convergence coefficient, it should be positive number and <=1, for details see references; -statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; -alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; -power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigma, Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumFit.html:34694,power,power,34694,root/html528/TSpectrumFit.html,https://root.cern,https://root.cern/root/html528/TSpectrumFit.html,10,['power'],['power']
Energy Efficiency,"le_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fgNVariables]; are initialized, and assumed to exist. The class declaration is assumed to be in <classname>.h and assumed to be provided by the user.; See alsoTMultiDimFit::MakeRealCode for a list of options; The minimal class definition is: class <classname> {; public:; Int_t <classname>::fgNVariables; // Number of variables; Int_t <classname>::fgNCoefficients; // Number of terms; Double_t <classname>::fgDMean; // Mean from training sample; Double_t <classname>::fgXMean[]; // Mean from training sample; Double_t <classname>::fgXMin[]; // Min from training sample; Double_t <classname>::fgXMax[]; // Max from training sample; Double_t <classname>::fgCoefficient[]; // Coefficients; Int_t <classname>::fgPower[]; // Function powers; ; Double_t Eval(Double_t *x);; };; TMultiDimFit::Evalvirtual Double_t Eval(const Double_t *x, const Double_t *coeff=nullptr) constEvaluate parameterization at point x.Definition TMultiDimFit.cxx:876; double; xDouble_t x[n]Definition legend1.C:17; Whether the method <classname>::Eval should be static or not, is up to the user. ; Definition at line 1744 of file TMultiDimFit.cxx. ◆ MakeNormalized(). void TMultiDimFit::MakeNormalized ; (; ). protectedvirtual . PRIVATE METHOD: Normalize data to the interval [-1;1]. ; This is needed for the classes method to work. ; Definition at line 1756 of file TMultiDimFit.cxx. ◆ MakeParameterization(). void TMultiDimFit::MakeParameterization ; (; ). protectedvirtual . PRIVATE METHOD: Find the parameterization over the training sample. ; A full acc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:55315,power,powers,55315,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['power'],['powers']
Energy Efficiency,"le_t *xp, Double_t *yp, Int_t np, Int_t kernel, Double_t bw);  Smooth data with specified kernel. ;  ; static void BDRsmooth (Int_t n, Double_t *x, Double_t *y, Double_t *w, Double_t span, Int_t iper, Double_t vsmlsq, Double_t *smo, Double_t *acvr);  Function for super smoother Based on R function supsmu: Translated to C++ by C. ;  ; static void BDRsupsmu (Int_t n, Double_t *x, Double_t *y, Double_t *w, Int_t iper, Double_t span, Double_t alpha, Double_t *smo, Double_t *sc);  Friedmanns super smoother (Friedman, 1984). ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Lowest (Double_t *x, Double_t *y, Int_t n, Double_t &xs, Double_t &ys, Int_t nleft, Int_t nright, Double_t *w, Bool_t userw, Double_t *rw, Bool_t &ok);  Fit value at x[i] Based on R function lowest: Translated to C++ by C. ;  ; static void Psort (Double_t *x, Int_t n, Int_t k);  Static function based on R function rPsort: adapted to C++ by Christian Stratowa (R source file: R_sort.c by R Development Core Team (C) 1999-2001) ;  ; static void Rank (Int_t n, Double_t *a, Int_t *index, Int_t *rank, Bool_t down=kTRUE);  static function ;  ; static Int_t Rcmp (Double_t x, Double_t y);  Static function if (ISNAN(x)) return 1; if (ISNAN(y)) return -1;. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphSmooth.html:11694,adapt,adapted,11694,doc/master/classTGraphSmooth.html,https://root.cern,https://root.cern/doc/master/classTGraphSmooth.html,1,['adapt'],['adapted']
Energy Efficiency,"le_t b, Double_t c). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfBeta[3]betas of decaying particle; TLorentzVectorfDecPro[18]kinematics of the generated particles ; Double_tfMass[18]masses of particles; Int_tfNtnumber of decay particles; Double_tfTeCmTmtotal energy in the C.M. minus the total mass; Double_tfWtMaxmaximum weigth . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t PDK(Double_t a, Double_t b, Double_t c); the PDK function. TGenPhaseSpace(const TGenPhaseSpace& gen); copy constructor. TGenPhaseSpace& operator=(const TGenPhaseSpace& gen); Assignment operator. Double_t Generate(); Generate a random final state.; The function returns the weigth of the current event.; The TLorentzVector of each decay product can be obtained using GetDecay(n). Note that Momentum, Energy units are Gev/C, GeV. TLorentzVector * GetDecay(Int_t n); return Lorentz vector corresponding to decay n. Bool_t SetDecay(TLorentzVector& P, Int_t nt, const Double_t* mass, Option_t* opt = """"); input:; TLorentzVector &P: decay particle (Momentum, Energy units are Gev/C, GeV); Int_t nt: number of decay products; Double_t *mass: array of decay product masses; Option_t *opt: default -> constant cross section; ""Fermi"" -> Fermi energy dependece; return value:; kTRUE: the decay is permitted by kinematics; kFALSE: the decay is forbidden by kinematics. TGenPhaseSpace(); {}. virtual ~TGenPhaseSpace(); {}. Int_t GetNt() const; { return fNt;}. Double_t GetWtMax() const; { return fWtMax;}. » Last changed: root/physics:$Id$ » Last generated: 2015-03-14 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGenPhaseSpace.html:7114,energy,energy,7114,root/html534/TGenPhaseSpace.html,https://root.cern,https://root.cern/root/html534/TGenPhaseSpace.html,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"le_t p5 = 0, Double_t p6 = 0, Double_t p7 = 0, Double_t p8 = 0, Double_t p9 = 0, Double_t p10 = 0); voidSetParName(Int_t iparam, const char* name); voidSetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10""); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TF1Parameters(); TF1Parameters(Int_t npar); TF1Parameters(const TF1Parameters& rhs). private:. boolCheckIndex(Int_t i) const. Data Members; private:. vector<string>fParNamesparameter names; vector<Double_t>fParametersparameter values. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Int_t GetParNumber(const char* name) const; return the parameter number given a name; not very efficient but list of parameters is typically small; could use a map if needed. void SetParameters(Double_t p0, Double_t p1, Double_t p2 = 0, Double_t p3 = 0, Double_t p4 = 0, Double_t p5 = 0, Double_t p6 = 0, Double_t p7 = 0, Double_t p8 = 0, Double_t p9 = 0, Double_t p10 = 0); set parameter values. void SetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10""); set parameter names. TF1Parameters(); {}. TF1Parameters(Int_t npar). TF1Parameters(const TF1Parameters& rhs); copy constructor. {}. TF1Parameters & operator=(const TF1Parameters& rhs); assignment. virtual ~TF1Parameters(); {}. Double_t GetParameter(Int_t iparam) const; getter methods. Double_t GetParameter(const char* name) const. const Double_t * GetParameters() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1Parameters.html:6919,efficient,efficient,6919,root/html604/TF1Parameters.html,https://root.cern,https://root.cern/root/html604/TF1Parameters.html,2,['efficient'],['efficient']
Energy Efficiency,"le_t);  Returns the hyperbolic cosine of x. ;  ; template<typename T > ; T * Cross (const T v1[3], const T v2[3], T out[3]);  Calculates the Cross Product of two vectors: out = [v1 x v2]. ;  ; constexpr Double_t CUncertainty ();  Speed of light uncertainty. ;  ; constexpr Double_t DegToRad ();  Conversion from degree to radian: \( \frac{\pi}{180} \). ;  ; Double_t DiLog (Double_t x);  Modified Struve functions of order 1. ;  ; constexpr Double_t E ();  Base of natural log: \( e \). ;  ; Double_t Erf (Double_t x);  Computation of the error function erf(x). ;  ; Double_t Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t EulerGamma ();  Euler-Mascheroni Constant. ;  ; Bool_t Even (Long_t a);  Returns true if a is even. ;  ; Double_t Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t Finite (Float_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Double_t Floor (Double_t x);  Rounds x downward, returning the largest integral value that is not greater than x. ;  ; Int_t FloorNint (Double_t x);  Returns the nearest integer of TMath::Floor(x). ;  ; Double_t Freq (Double_t x);  Computation of the normal frequency function freq(x). ;  ; constexpr Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:6469,power,power,6469,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['power'],['power']
Energy Efficiency,"le_tPDK(Double_t a, Double_t b, Double_t c). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfBeta[3]betas of decaying particle; TLorentzVectorfDecPro[18]kinematics of the generated particles ; Double_tfMass[18]masses of particles; Int_tfNtnumber of decay particles; Double_tfTeCmTmtotal energy in the C.M. minus the total mass; Double_tfWtMaxmaximum weigth . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t PDK(Double_t a, Double_t b, Double_t c); the PDK function. TGenPhaseSpace(const TGenPhaseSpace& gen); copy constructor. Double_t Generate(); Generate a random final state.; The function returns the weigth of the current event.; The TLorentzVector of each decay product can be obtained using GetDecay(n). Note that Momentum, Energy units are Gev/C, GeV. TLorentzVector * GetDecay(Int_t n); return Lorentz vector corresponding to decay n. Bool_t SetDecay(TLorentzVector& P, Int_t nt, const Double_t* mass, Option_t* opt = """"); input:; TLorentzVector &P: decay particle (Momentum, Energy units are Gev/C, GeV); Int_t nt: number of decay products; Double_t *mass: array of decay product masses; Option_t *opt: default -> constant cross section; ""Fermi"" -> Fermi energy dependece; return value:; kTRUE: the decay is permitted by kinematics; kFALSE: the decay is forbidden by kinematics. TGenPhaseSpace(); {}. virtual ~TGenPhaseSpace(); {}. Int_t GetNt() const; { return fNt;}. Double_t GetWtMax() const; { return fWtMax;}. » Last changed: root/physics:$Id: TGenPhaseSpace.h 38051 2011-02-11 14:30:29Z brun $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGenPhaseSpace.html:7016,energy,energy,7016,root/html530/TGenPhaseSpace.html,https://root.cern,https://root.cern/root/html530/TGenPhaseSpace.html,1,['energy'],['energy']
Energy Efficiency,"le_tPDK(Double_t a, Double_t b, Double_t c). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfBeta[3]betas of decaying particle; TLorentzVectorfDecPro[18]kinematics of the generated particles ; Double_tfMass[18]masses of particles; Int_tfNtnumber of decay particles; Double_tfTeCmTmtotal energy in the C.M. minus the total mass; Double_tfWtMaxmaximum weigth . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t PDK(Double_t a, Double_t b, Double_t c); the PDK function. TGenPhaseSpace(const TGenPhaseSpace& gen); copy constructor. Double_t Generate(); Generate a random final state.; The function returns the weigth of the current event.; The TLorentzVector of each decay product can be obtained using GetDecay(n). Note that Momentum, Energy units are Gev/C, GeV. TLorentzVector * GetDecay(Int_t n); return Lorentz vector corresponding to decay n. Bool_t SetDecay(TLorentzVector& P, Int_t nt, const Double_t* mass, Option_t* opt = """"); input:; TLorentzVector &P: decay particle (Momentum, Energy units are Gev/C, GeV); Int_t nt: number of decay products; Double_t *mass: array of decay product masses; Option_t *opt: default -> constant cross section; ""Fermi"" -> Fermi energy dependece; return value:; kTRUE: the decay is permitted by kinematics; kFALSE: the decay is forbidden by kinematics. TGenPhaseSpace(); {}. virtual ~TGenPhaseSpace(); {}. Int_t GetNt() const; { return fNt;}. Double_t GetWtMax() const; { return fWtMax;}. » Last changed: root/physics:$Id: TGenPhaseSpace.h 38051 2011-02-11 14:30:29Z brun $ » Last generated: 2011-11-03 20:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGenPhaseSpace.html:7016,energy,energy,7016,root/html532/TGenPhaseSpace.html,https://root.cern,https://root.cern/root/html532/TGenPhaseSpace.html,4,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"le_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& b); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before kRaw can be filled. Int_t GetBasicColor() const; Get basic solor. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Stub to avoid forcing implementation at this stage. void SetName(const char* name); { }. TMaterial * GetMaterial() const; {return fMaterial;}. Int_t GetNumber() const; {return fNumber;}. Int_t GetVisibility() const; {return fVisibility;}. void SetVisibility(Int_t vis); {fVisibility = vis;}. » Author: Nenad Buncic 17/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TShape.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TShape.html:8547,allocate,allocate,8547,root/html528/TShape.html,https://root.cern,https://root.cern/root/html528/TShape.html,1,['allocate'],['allocate']
Energy Efficiency,"le_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& b); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before kRaw can be filled. Int_t GetBasicColor() const; Get basic solor. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Stub to avoid forcing implementation at this stage. void SetName(const char* name); { }. TMaterial * GetMaterial() const; {return fMaterial;}. Int_t GetNumber() const; {return fNumber;}. Int_t GetVisibility() const; {return fVisibility;}. void SetVisibility(Int_t vis); {fVisibility = vis;}. » Author: Nenad Buncic 17/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TShape.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TShape.html:8616,allocate,allocate,8616,root/html530/TShape.html,https://root.cern,https://root.cern/root/html530/TShape.html,1,['allocate'],['allocate']
Energy Efficiency,"le_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& b); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before kRaw can be filled. Int_t GetBasicColor() const; Get basic solor. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Stub to avoid forcing implementation at this stage. void SetName(const char* name); { }. TMaterial * GetMaterial() const; {return fMaterial;}. Int_t GetNumber() const; {return fNumber;}. Int_t GetVisibility() const; {return fVisibility;}. void SetVisibility(Int_t vis); {fVisibility = vis;}. » Author: Nenad Buncic 17/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id: TShape.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TShape.html:8616,allocate,allocate,8616,root/html532/TShape.html,https://root.cern,https://root.cern/root/html532/TShape.html,2,['allocate'],['allocate']
Energy Efficiency,"le_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←. TBRIK; ←. TGTRA. TPARA. TTRAP. TTRD1. TTRD2. TPCON; ←. TPGON. TPolyLineShape. TSPHE.  [more...]. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& ); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before kRaw can be filled. Int_t GetBasicColor() const; Get basic solor. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Stub to avoid forcing implementation at this stage. void SetName(const char* name); { }. TMaterial * GetMaterial() const; {return fMaterial;}. Int_t GetNumber() const; {return fNumber;}. Int_t GetVisibility() const; {return fVisibility;}. void SetVisibility(Int_t vis); {fVisibility = vis;}. » Author: Nenad Buncic 17/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TShape.html:9391,allocate,allocate,9391,root/html604/TShape.html,https://root.cern,https://root.cern/root/html604/TShape.html,2,['allocate'],['allocate']
Energy Efficiency,"le_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←. TBRIK; ←. TGTRA. TPARA. TTRAP. TTRD1. TTRD2. TPCON; ←. TPGON. TPolyLineShape. TSPHE.  [more...]. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& ); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before kRaw can be filled. Int_t GetBasicColor() const; Get basic solor. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Stub to avoid forcing implementation at this stage. void SetName(const char* name); { }. TMaterial * GetMaterial() const; {return fMaterial;}. Int_t GetNumber() const; {return fNumber;}. Int_t GetVisibility() const; {return fVisibility;}. void SetVisibility(Int_t vis); {fVisibility = vis;}. » Author: Nenad Buncic 17/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-30 15:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TShape.html:9391,allocate,allocate,9391,root/html602/TShape.html,https://root.cern,https://root.cern/root/html602/TShape.html,2,['allocate'],['allocate']
Energy Efficiency,"leared with the option ""xyz"" ; Implements TCollection.; Definition at line 420 of file TClonesArray.cxx. ◆ Compress(). void TClonesArray::Compress ; (; ). overridevirtual . Remove empty slots from array. ; Reimplemented from TObjArray.; Definition at line 332 of file TClonesArray.cxx. ◆ ConstructedAt() [1/2]. TObject * TClonesArray::ConstructedAt ; (; Int_t ; idx). Get an object at index 'idx' that is guaranteed to have been constructed. ; It might be either a freshly allocated object or one that had already been allocated (and assumingly used). In the later case, it is the callers responsibility to insure that the object is returned to a known state, usually by calling the Clear method on the TClonesArray.; Tests to see if the destructor has been called on the object. If so, or if the object has never been constructed the class constructor is called using New(). If not, return a pointer to the correct memory location. This explicitly to deal with TObject classes that allocate memory which will be reset (but not deallocated) in their Clear() functions. ; Definition at line 377 of file TClonesArray.cxx. ◆ ConstructedAt() [2/2]. TObject * TClonesArray::ConstructedAt ; (; Int_t ; idx, . Option_t * ; clear_options . ). Get an object at index 'idx' that is guaranteed to have been constructed. ; It might be either a freshly allocated object or one that had already been allocated (and assumingly used). In the later case, the function Clear will be called and passed the value of 'clear_options'; Tests to see if the destructor has been called on the object. If so, or if the object has never been constructed the class constructor is called using New(). If not, return a pointer to the correct memory location. This explicitly to deal with TObject classes that allocate memory which will be reset (but not deallocated) in their Clear() functions. ; Definition at line 399 of file TClonesArray.cxx. ◆ DeclFileName(). static const char * TClonesArray::DeclFileName ; (; ). inlinestatic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:34660,allocate,allocate,34660,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['allocate'],['allocate']
Energy Efficiency,"leaseObject ; (; ). protected . Delete any object we may have allocated on a previous call to SetAddress. ; Definition at line 4672 of file TBranchElement.cxx. ◆ Reset(). void TBranchElement::Reset ; (; Option_t * ; option = """"). overridevirtual . Reset a Branch. ; Existing i/o buffers are deleted. Entries, max and min are reset. ; Reimplemented from TBranch.; Definition at line 4752 of file TBranchElement.cxx. ◆ ResetAddress(). void TBranchElement::ResetAddress ; (; ). overridevirtual . Set branch address to zero and free all allocated memory. ; Reimplemented from TBranch.; Definition at line 4780 of file TBranchElement.cxx. ◆ ResetAfterMerge(). void TBranchElement::ResetAfterMerge ; (; TFileMergeInfo * ; info). overridevirtual . Reset a Branch after a Merge operation (drop data but keep customizations) ; Reimplemented from TBranch.; Definition at line 4767 of file TBranchElement.cxx. ◆ ResetDeleteObject(). void TBranchElement::ResetDeleteObject ; (; ). virtual . Release ownership of any allocated objects. ; Note: This interface was added so that clone trees could be told they do not own the allocated objects. ; Definition at line 4814 of file TBranchElement.cxx. ◆ ResetInitInfo(). void TBranchElement::ResetInitInfo ; (; bool ; recurse). virtual . Reset offset and StreamerInfo information from this branch. ; Parameters. [in]recurseWhen true call ResetInitInfo on all subbranches. . Definition at line 4831 of file TBranchElement.cxx. ◆ SetActionSequence(). void TBranchElement::SetActionSequence ; (; TClass * ; originalClass, . TStreamerInfo * ; localInfo, . TStreamerInfoActions::TActionSequence::SequenceGetter_t ; create, . TStreamerInfoActions::TActionSequence *& ; actionSequence . ). protected . Set the sequence of actions needed to read the data out of the buffer. ; Definition at line 5628 of file TBranchElement.cxx. ◆ SetAddress(). void TBranchElement::SetAddress ; (; void * ; addr). overridevirtual . Point this branch at an object. ; For a sub-branch, addr is a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchElement.html:65296,allocate,allocated,65296,doc/master/classTBranchElement.html,https://root.cern,https://root.cern/doc/master/classTBranchElement.html,1,['allocate'],['allocated']
Energy Efficiency,"lecte via the the ""option"" given; in the constructor. The return value is the boosting weight. Double_t AdaBoost(vector<TMVA::Event*> , TMVA::DecisionTree* dt); the AdaBoost implementation.; a new training sample is generated by weighting; events that are misclassified by the decision tree. The weight; applied is w = (1-err)/err or more general:; w = ((1-err)/err)^beta; where err is the fraction of misclassified events in the tree ( <0.5 assuming; demanding the that previous selection was better than random guessing); and ""beta"" being a free parameter (standard: beta = 1) that modifies the; boosting. Double_t Bagging(vector<TMVA::Event*> , Int_t iTree); call it boot-strapping, re-sampling or whatever you like, in the end it is nothing; else but applying ""random"" weights to each event. Double_t RegBoost(vector<TMVA::Event*> , TMVA::DecisionTree* dt); a special boosting only for Regression ...; maybe I'll implement it later... Double_t AdaBoostR2(vector<TMVA::Event*> , TMVA::DecisionTree* dt); adaption of the AdaBoost to regression problems (see H.Drucker 1997). void AddWeightsXMLTo(void* parent) const; write weights to XML. void ReadWeightsFromXML(void* parent); reads the BDT from the xml file. void ReadWeightsFromStream(istream& istr); read the weights (BDT coefficients). Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0). Double_t GetMvaValue(Double_t* err, Double_t* errUpper, UInt_t useNTrees); Return the MVA value (range [-1;1]) that classifies the; event according to the majority vote from the total number of; decision trees. const std::vector<Float_t>& GetMulticlassValues(); get the multiclass MVA response for the BDT classifier. const std::vector<Float_t> & GetRegressionValues(); get the regression value generated by the BDTs. void WriteMonitoringHistosToFile( void ); Here we could write some histograms created during the processing; to the output file. vector< Double_t > GetVariableImportance(); Return the relative variable importance, normalized",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBDT.html:29910,adapt,adaption,29910,root/html528/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBDT.html,1,['adapt'],['adaption']
Energy Efficiency,"led by the GenerateEvent method. If the event generator does; not use the HEPEVT common block, This routine has to be overloaded by; the subclasses.; The function loops on the generated particles and store them in; the TClonesArray pointed by the argument particles.; The default action is to store only the stable particles (ISTHEP = 1); This can be demanded explicitly by setting the option = ""Final""; If the option = ""All"", all the particles are stored. void Initialize(const char* frame, const char* beam, const char* target, float win); Calls PyInit with the same parameters after performing some checking,; sets correct title. This method should preferably be called instead of PyInit.; PURPOSE: to initialize the generation procedure.; ARGUMENTS: See documentation for details.; frame: - specifies the frame of the experiment:; ""CMS"",""FIXT"",""USER"",""FOUR"",""FIVE"",""NONE""; beam,; target: - beam and target particles (with additionaly cahrges, tildes or ""bar"":; e,nu_e,mu,nu_mu,tau,nu_tau,gamma,pi,n,p,Lambda,Sigma,Xi,Omega,; pomeron,reggeon; win: - related to energy system:; for frame==""CMS"" - total energy of system; for frame==""FIXT"" - momentum of beam particle; for frame==""USER"" - dummy - see documentation. void Pyinit(char* frame, char* beam, char* target, double wint); Calls Pyinit with the same parameters after performing some checking,; sets correct title. This method should preferably be called instead of PyInit.; PURPOSE: to initialize the generation procedure.; ARGUMENTS: See documentation for details.; frame: - specifies the frame of the experiment:; ""CMS"",""FIXT"",""USER"",""FOUR"",""FIVE"",""NONE""; beam,; target: - beam and target particles (with additionaly charges,; tildes or ""bar"":; e,nu_e,mu,nu_mu,tau,nu_tau,gamma,pi,n,p,Lambda,Sigma,Xi,Omega,; pomeron,reggeon; win: - related to energy system:; for frame==""CMS"" - total energy of system; for frame==""FIXT"" - momentum of beam particle; for frame==""USER"" - dummy - see documentation. int Pycomp(int kf); interface with fortran",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPythia6.html:14503,energy,energy,14503,root/html528/TPythia6.html,https://root.cern,https://root.cern/root/html528/TPythia6.html,8,['energy'],['energy']
Energy Efficiency,"led when either TCanvas::UseCurrentStyle...Definition TGraph.cxx:2623; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::GetYDouble_t * GetY() constDefinition TGraph.h:140; TGraph::Mergevirtual Int_t Merge(TCollection *list)Adds all graphs from the collection to this graph.Definition TGraph.cxx:2658; TGraph::fMaxSizeInt_t fMaxSize!Current dimension of arrays fX and fYDefinition TGraph.h:45; TGraph::SaveHistogramAndFunctionsvoid SaveHistogramAndFunctions(std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option)Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes.Definition TGraph.cxx:2199; TGraph::fOptionTString fOptionOptions used for drawing the graph.Definition TGraph.h:53; TGraph::~TGraph~TGraph() overrideGraph default destructor.Definition TGraph.cxx:566; TGraph::ShrinkAndCopyDouble_t ** ShrinkAndCopy(Int_t size, Int_t iend)if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend).Definition TGraph.cxx:2453; TGraph::GetRMSvirtual Double_t GetRMS(Int_t axis=1) constReturn RMS of X (axis=1) or Y (axis=2)Definition TGraph.cxx:1339; TGraph::GetEXhighdvirtual Double_t * GetEXhighd() constDefinition TGraph.h:148; TGraph::IsEditablevirtual Bool_t IsEditable() constDefinition TGraph.h:166; TGraph::fHistogramTH1F * fHistogramPointer to histogram used for drawing axis.Definition TGraph.h:50; TGraph::Paintvoid Paint(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:1977; TGraph::EStatusBitsEStatusBitsDefinition TGraph.h:74; TGraph::kNotEditable@ kNotEditableBit set if graph is non editable.Definition TGraph.h:78; TGraph::kIsHighlight@ kIsHighlightBit set if graph is highlight.Definition TGraph.h:80; TGraph::kIsSortedX@ kIsSortedXGraph is sorted in X points.Definition TGraph.h:79; TGraph::kClipFrame@ kClipFrameClip to the frame boundary.Definition TGrap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8h_source.html:16045,allocate,allocate,16045,doc/master/TGraph_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8h_source.html,1,['allocate'],['allocate']
Energy Efficiency,"led when either TCanvas::UseCurrentStyle...Definition TGraph.cxx:2623; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::GetYDouble_t * GetY() constDefinition TGraph.h:140; TGraph::Mergevirtual Int_t Merge(TCollection *list)Adds all graphs from the collection to this graph.Definition TGraph.cxx:2658; TGraph::fMaxSizeInt_t fMaxSize!Current dimension of arrays fX and fYDefinition TGraph.h:45; TGraph::SaveHistogramAndFunctionsvoid SaveHistogramAndFunctions(std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option)Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes.Definition TGraph.cxx:2199; TGraph::fOptionTString fOptionOptions used for drawing the graph.Definition TGraph.h:53; TGraph::~TGraph~TGraph() overrideGraph default destructor.Definition TGraph.cxx:566; TGraph::ShrinkAndCopyDouble_t ** ShrinkAndCopy(Int_t size, Int_t iend)if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend).Definition TGraph.cxx:2453; TGraph::GetRMSvirtual Double_t GetRMS(Int_t axis=1) constReturn RMS of X (axis=1) or Y (axis=2)Definition TGraph.cxx:1339; TGraph::fHistogramTH1F * fHistogramPointer to histogram used for drawing axis.Definition TGraph.h:50; TGraph::Paintvoid Paint(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:1977; TGraph::kNotEditable@ kNotEditableBit set if graph is non editable.Definition TGraph.h:78; TGraph::kIsHighlight@ kIsHighlightBit set if graph is highlight.Definition TGraph.h:80; TGraph::kIsSortedX@ kIsSortedXGraph is sorted in X points.Definition TGraph.h:79; TGraph::kClipFrame@ kClipFrameClip to the frame boundary.Definition TGraph.h:76; TGraph::kResetHisto@ kResetHistofHistogram must be reset in GetHistogramDefinition TGraph.h:77; TGraph::kNoStats@ kNoStatsDon't draw stats box.Definition TGraph.h:75; TGraph::GetErrorXlowvirtual Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:114165,allocate,allocate,114165,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency,"lement constructors during insertions, swaps or other operations will be propagated potentially leaving the RVec object in an invalid state. RVec methods (e.g. at or size) follow the STL naming convention instead of the ROOT naming convention in order to make RVec a drop-in replacement for std::vector. Table of Contents. Example; Arithmetic operations, logical operations and mathematical functions; Owning and adopting memory; Sorting and manipulation of indices; Usage in combination with RDataFrame; Reference for the RVec class; Reference for RVec helper functions. Example; Suppose to have an event featuring a collection of muons with a certain pseudorapidity, momentum and charge, e.g.: std::vector<short> mu_charge {1, 1, -1, -1, -1, 1, 1, -1};; std::vector<float> mu_pt {56, 45, 32, 24, 12, 8, 7, 6.2};; std::vector<float> mu_eta {3.1, -.2, -1.1, 1, 4.1, 1.6, 2.4, -.5};; Suppose you want to extract the transverse momenta of the muons satisfying certain criteria, for example consider only negatively charged muons with a pseudorapidity smaller or equal to 2 and with a transverse momentum greater than 10 GeV. Such a selection would require, among the other things, the management of an explicit loop, for example: std::vector<float> goodMuons_pt;; const auto size = mu_charge.size();; for (size_t i=0; i < size; ++i) {; if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; goodMuons_pt.emplace_back(mu_pt[i]);; }; }; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::VecOps::absRVec< PromoteType< T > > abs(const RVec< T > &v)Definition RVec.hxx:1832; These operations become straightforward with RVec - we just need to write what we mean: auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; Now the clean collection of transverse momenta can be used within the rest of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:2324,charge,charged,2324,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,2,['charge'],['charged']
Energy Efficiency,"lement> &b,Int_t constr); General matrix addition. Create a matrix C such that C = A + B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> APlusB(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr); General matrix addition. Create a matrix C such that C = A + B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr); General matrix subtraction. Create a matrix C such that C = A - B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr); General matrix subtraction. Create a matrix C such that C = A - B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixT<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr); General matrix subtraction. Create a matrix C such that C = A - B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> GetMatrix2Array(double* data, Option_t* = """") const; Copy matrix data to array . It is assumed that array is of size >= fNelems. TMatrixTBase<Element> &TMatrixTSparse<Element> SetMatrixArray(Int_t nr_nonzeros, Int_t* irow, Int_t* icol, double* data); Copy nr elements from row/col index and data array to matrix . It is assumed; that arrays are of size >= nr. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndex(Int_t nelem_new); Increase/decrease the number of non-zero elements to nelems_new. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndex(const TMatrixTBase<double>& another); Use non-zero data of matrix source to set the sparse structure. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndexAB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b); Set the row/column indices to the ""sum"" of matrices a and b; It is checked that enough space has been allocated. TMatrixTSparse<Element> &TMat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSparse_double_.html:19319,allocate,allocated,19319,root/html528/TMatrixTSparse_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSparse_double_.html,1,['allocate'],['allocated']
Energy Efficiency,"lement> &b,Int_t constr); General matrix addition. Create a matrix C such that C = A + B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> APlusB(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr); General matrix addition. Create a matrix C such that C = A + B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr); General matrix subtraction. Create a matrix C such that C = A - B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr); General matrix subtraction. Create a matrix C such that C = A - B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixT<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr); General matrix subtraction. Create a matrix C such that C = A - B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> GetMatrix2Array(double* data, Option_t* = """") const; Copy matrix data to array . It is assumed that array is of size >= fNelems. TMatrixTBase<Element> &TMatrixTSparse<Element> SetMatrixArray(Int_t nr_nonzeros, Int_t* irow, Int_t* icol, double* data); Copy nr elements from row/col index and data array to matrix . It is assumed; that arrays are of size >= nr; Note that the input arrays are not passed as const since they will be modified !. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndex(Int_t nelem_new); Increase/decrease the number of non-zero elements to nelems_new. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndex(const TMatrixTBase<double>& another); Use non-zero data of matrix source to set the sparse structure. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndexAB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b); Set the row/column indices to the ""sum"" of matrices a and b;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMatrixTSparse_double_.html:19504,allocate,allocated,19504,root/html530/TMatrixTSparse_double_.html,https://root.cern,https://root.cern/root/html530/TMatrixTSparse_double_.html,9,['allocate'],['allocated']
Energy Efficiency,"lement> &b,Int_t constr); General matrix addition. Create a matrix C such that C = A + B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> APlusB(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr); General matrix addition. Create a matrix C such that C = A + B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr); General matrix subtraction. Create a matrix C such that C = A - B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr); General matrix subtraction. Create a matrix C such that C = A - B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixT<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr); General matrix subtraction. Create a matrix C such that C = A - B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> GetMatrix2Array(float* data, Option_t* = """") const; Copy matrix data to array . It is assumed that array is of size >= fNelems. TMatrixTBase<Element> &TMatrixTSparse<Element> SetMatrixArray(Int_t nr_nonzeros, Int_t* irow, Int_t* icol, float* data); Copy nr elements from row/col index and data array to matrix . It is assumed; that arrays are of size >= nr. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndex(Int_t nelem_new); Increase/decrease the number of non-zero elements to nelems_new. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndex(const TMatrixTBase<float>& another); Use non-zero data of matrix source to set the sparse structure. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndexAB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b); Set the row/column indices to the ""sum"" of matrices a and b; It is checked that enough space has been allocated. TMatrixTSparse<Element> &TMatrix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSparse_float_.html:19102,allocate,allocated,19102,root/html528/TMatrixTSparse_float_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSparse_float_.html,1,['allocate'],['allocated']
Energy Efficiency,"lement> &b,Int_t constr); General matrix addition. Create a matrix C such that C = A + B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> APlusB(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr); General matrix addition. Create a matrix C such that C = A + B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr); General matrix subtraction. Create a matrix C such that C = A - B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr); General matrix subtraction. Create a matrix C such that C = A - B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixT<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr); General matrix subtraction. Create a matrix C such that C = A - B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> GetMatrix2Array(float* data, Option_t* = """") const; Copy matrix data to array . It is assumed that array is of size >= fNelems. TMatrixTBase<Element> &TMatrixTSparse<Element> SetMatrixArray(Int_t nr_nonzeros, Int_t* irow, Int_t* icol, float* data); Copy nr elements from row/col index and data array to matrix . It is assumed; that arrays are of size >= nr; Note that the input arrays are not passed as const since they will be modified !. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndex(Int_t nelem_new); Increase/decrease the number of non-zero elements to nelems_new. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndex(const TMatrixTBase<float>& another); Use non-zero data of matrix source to set the sparse structure. TMatrixTSparse<Element> &TMatrixTSparse<Element> SetSparseIndexAB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b); Set the row/column indices to the ""sum"" of matrices a and b; It",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMatrixTSparse_float_.html:19287,allocate,allocated,19287,root/html530/TMatrixTSparse_float_.html,https://root.cern,https://root.cern/root/html530/TMatrixTSparse_float_.html,9,['allocate'],['allocated']
Energy Efficiency,"lementation class ROOT::Math::GSLDerivator; This class does not support copying ; Definition at line 61 of file Derivator.h. Public Types; typedef double(* GSLFuncPointer) (double, void *);  signature for function pointers used by GSL ;  . Public Member Functions;  Derivator ();  Empty Construct for a Derivator class Need to set the function afterwards with Derivator::SetFunction. ;  ;  Derivator (const GSLFuncPointer &f, void *p=nullptr);  Construct using a GSL function pointer type. ;  ;  Derivator (const IGenFunction &f);  Construct using a ROOT::Math::IGenFunction interface. ;  ; virtual ~Derivator ();  destructor ;  ; double Eval (double x, double h=1E-8) const;  Computes the numerical derivative of a function f at a point x. ;  ; double EvalBackward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ;  ; double EvalCentral (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive central difference algorithm with a step size h. ;  ; double EvalForward (double x, double h=1E-8) const;  Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ;  ; void SetFunction (const GSLFuncPointer &f, void *p=nullptr);  Set the function f for evaluating the derivative using a GSL function pointer type. ;  ; void SetFunction (const IGenFunction &f);  Set the function for calculating the derivatives. ;  . Private Member Functions;  Derivator (const Derivator &);  ; Derivator & operator= (const Derivator &);  . — Static methods —; This methods don't require to use a Derivator object, and are designed to be used in fast calculation.; Error and status code cannot be retrieved in this case . GSLDerivator * fDerivator;  ; int Status () const;  return the error status of the last derivative calculation ;  ; double Result () const;  return the result of the last derivative calculation ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html:1569,adapt,adaptive,1569,doc/master/classROOT_1_1Math_1_1Derivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Derivator.html,1,['adapt'],['adaptive']
Energy Efficiency,"lementation of the Qt object communication //; 18// mechanism (see also https://doc.qt.io/qt-5/metaobjects.html) //; 19// //; 20// Signals and slots are used for communication between objects. //; 21// When an object has changed in some way that might be interesting //; 22// for the outside world, it emits a signal to tell whoever is //; 23// listening. All slots that are connected to this signal will be //; 24// activated (called). It is even possible to connect a signal //; 25// directly to another signal (this will emit the second signal //; 26// immediately whenever the first is emitted.) There is no limitation //; 27// on the number of slots that can be connected to a signal. //; 28// The slots will be activated in the order they were connected //; 29// to the signal. This mechanism allows objects to be easily reused, //; 30// because the object that emits a signal does not need to know //; 31// to what the signals are connected to. //; 32// Together, signals and slots make up a powerful component //; 33// programming mechanism. //; 34// //; 35// This implementation is provided by //; 36// Valeriy Onuchin (onuchin@sirius.ihep.su). //; 37// //; 38//////////////////////////////////////////////////////////////////////////; 39 ; 40#include ""TList.h""; 41#include ""TString.h""; 42#include ""TVirtualQConnection.h""; 43 ; 44class TClass;; 45 ; 46R__EXTERN void *gTQSender; // the latest sender object; 47 ; 48class TQObject {; 49 ; 50protected:; 51 TList *fListOfSignals; //! list of signals from this object; 52 TList *fListOfConnections; //! list of connections to this object; 53 Bool_t fSignalsBlocked; //! flag used for suppression of signals; 54 ; 55 static Bool_t fgAllSignalsBlocked; // flag used for suppression of all signals; 56 ; 57 virtual void *GetSender() { return this; }; 58 virtual const char *GetSenderClassName() const { return """"; }; 59 ; 60 ; 61 static Bool_t ConnectToClass(TQObject *sender,; 62 const char *signal,; 63 TClass *receiver_class,; 64 void *receiver",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TQObject_8h_source.html:1806,power,powerful,1806,doc/master/TQObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TQObject_8h_source.html,1,['power'],['powerful']
Energy Efficiency,"lements container objects at the address given by arena ;  ; virtual TClass::ObjectPtr NewObject () const;  Construct a new container object and return its address. ;  ; virtual TClass::ObjectPtr NewObject (void *arena) const;  Construct a new container object at the address given by arena ;  ; virtual TClass::ObjectPtr NewObjectArray (Int_t nElements) const;  Construct an array of nElements container objects and return the base address of the array. ;  ; virtual TClass::ObjectPtr NewObjectArray (Int_t nElements, void *arena) const;  Construct an array of nElements container objects at the address given by arena ;  ; char * operator[] (UInt_t idx) const;  Return the address of the value at index idx ;  . Protected Types; typedef void *(* ArrIterfunc_t) (void *from, size_t size);  ; typedef void *(* Collectfunc_t) (void *from, void *to);  ; typedef ROOT::Detail::TCollectionProxyInfo::Environ< char[64]> Env_t;  ; typedef ROOT::Detail::TCollectionProxyInfo::EnvironBase EnvironBase_t;  ; typedef void *(* Feedfunc_t) (void *from, void *to, size_t size);  ; typedef std::vector< EnvironBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  . Protected Member Functions; void CheckFunctions () const;  Check existence of function pointers. ;  ; virtual void DeleteItem (Bool_t force, void *ptr) const;  Call to delete/destruct individual item. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  . Protected Attributes; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:9474,allocate,allocated,9474,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,1,['allocate'],['allocated']
Energy Efficiency,"lements the algorithms used in the QUADPACK, a numerical integration package written in Fortran.; Plain MC, MISER and VEGAS integration algorithms are supported for integration over finite (hypercubic) ranges.; GSL Manual.; It implements also the interface ROOT::Math::VirtualIntegratorMultiDim so it can be instantiate using the plugin manager (plugin name is ""GSLMCIntegrator"") . Classes; class  ROOT::Math::GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; struct  ROOT::Math::MiserParameters;  Structure collecting parameters for MISER multidimensional integration. More...;  ; struct  ROOT::Math::VegasParameters;  Structures collecting parameters for VEGAS multidimensional integration For implementation of default parameters see file mathmore/src/GSLMCIntegrationWorkspace.h. More...;  . Typedefs; typedef double(* ROOT::Math::GSLMonteFuncPointer) (double *, size_t, void *);  Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ;  . Enumerations; enum  ROOT::Math::IntegrationMultiDim::Type { ;   ROOT::Math::IntegrationMultiDim::kDEFAULT = -1; , ROOT::Math::IntegrationMultiDim::kADAPTIVE; , ROOT::Math::IntegrationMultiDim::kVEGAS; , ROOT::Math::IntegrationMultiDim::kMISER; , ;   ROOT::Math::IntegrationMultiDim::kPLAIN. };  enumeration specifying the integration types. More...;  . Typedef Documentation. ◆ GSLMonteFuncPointer. typedef double(* ROOT::Math::GSLMonteFuncPointer)(double *, size_t, void *). Class for adapting any multi-dimension C++ functor class to C function pointers used by GSL MonteCarlo integration algorithms. ; The templated C++ function class must implement:; double operator( const double * x); This class defines static methods with will be used to fill the gsl_monte_function used by GSL. See for examples the GSL online manual ; Definition at line 56 of file GSLMonteFunctionAdapter.h. E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__MCIntegration.html:1485,adapt,adapting,1485,doc/master/group__MCIntegration.html,https://root.cern,https://root.cern/doc/master/group__MCIntegration.html,1,['adapt'],['adapting']
Energy Efficiency,lete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Double_tfAdaptiveBandwidthFactorGeometric mean of the kernel density estimation from the data for adaptive iteration; TF1*fApproximateBiasOutput Kernel Density Estimation approximate bias; Bool_tfAsymLeft; Bool_tfAsymRight; vector<Double_t>fBinCountNumber of events per bin for binned data option; TKDE::EBinningfBinning; vector<Double_t>fCanonicalBandwidths; vector<Double_t>fDataData events; vector<Double_t>fEventWeightsOriginal data weights; vector<Double_t>fEventsOriginal data storage; TGraphErrors*fGraphGraph with the errors; TKDE::EIterationfIteration; TKDE::TKernel*fKernel; TKDE::KernelFunction_PtrfKernelFunction; vector<Double_t>fKernelSigmas2; TKDE::EKernelTypefKernelType; TF1*fLowerPDFOutput Kernel Density Estimation lower confidence interval PDF function; Double_tfMeanData mean; TKDE::EMirrorfMirror; Bool_tfMirrorLeft; Bool_tfMirrorRight; UInt_tfNBinsNumber of bins for binned data option; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); Double_tfSumOfCountsData sum of weights; TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TKDE(); Class destructor. void Instantiate(TKDE::Kern,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TKDE.html:10567,adapt,adaptive,10567,root/html604/TKDE.html,https://root.cern,https://root.cern/root/html604/TKDE.html,2,['adapt'],['adaptive']
Energy Efficiency,"letion of contents. gFile and gPad default to nullptr, as it is for single-thread programs.; The ROOT graphics subsystem is not made thread-safe by this method. In particular drawing or printing different canvases from different threads (and analogous operations such as invoking Draw on a TObject) is not thread-safe.; Note that there is no DisableThreadSafety(). ROOT's thread-safety features cannot be disabled once activated. ; Definition at line 501 of file TROOT.cxx. ◆ FindEndSymbol(). static std::string::size_type ROOT::FindEndSymbol ; (; std::string & ; command). static . Definition at line 62 of file RConversionRuleParser.cxx. ◆ FromHumanReadableSize(). template<typename T > . EFromHumanReadableSize ROOT::FromHumanReadableSize ; (; std::string_view ; str, . T & ; value . ). Convert strings like the following into byte counts 5MB, 5 MB, 5M, 3.7GB, 123b, 456kB, 3.7GiB, 5MiB with some amount of forgiveness baked into the parsing. ; For this routine we use the official SI unit where the [i] is reserved for the 'legacy' power of two units. 1KB = 1000 bytes, 1KiB = 1024 bytes. Parameters. strthe string to be parsed ; valuewill be updated with the result if and only if the parse is successful and does not overflow for the type of value. . Returnsreturn a EFromHumanReadableSize enum value indicating the success or failure of the parse. ; Definition at line 86 of file StringConv.hxx. ◆ GetClass() [1/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T * ; ). Definition at line 664 of file TClass.h. ◆ GetClass() [2/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T ** ; ). Definition at line 669 of file TClass.h. ◆ GetClass() [3/5]. template<typename T > . TClass * ROOT::GetClass ; (; const T *const * ; ). Definition at line 671 of file TClass.h. ◆ GetClass() [4/5]. template<typename T > . TClass * ROOT::GetClass ; (; T * ; ). Definition at line 663 of file TClass.h. ◆ GetClass() [5/5]. template<typename T > . TClass * ROOT::GetClass ; (; T ** ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT.html:35117,power,power,35117,doc/master/namespaceROOT.html,https://root.cern,https://root.cern/doc/master/namespaceROOT.html,2,['power'],['power']
Energy Efficiency,"lette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; To define more a complex palette with a continuous gradient of color, one; should use the static function TColor::CreateGradientColorTable().; The following example demonstrates how to proceed:. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; TF2 *f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; UInt_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->Draw(""surf1z"");; return c2;; }; The function TColor::CreateGradientColorTable() automatically ; calls gStyle->SetPalette(), so there is not need to add one. After a call to TColor::CreateGradientColorTable() it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch between several user define palettes.; To store a palette in an array it is enough to do:. Int_t MyPalette[100];; Double_t r[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t g[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t b[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t stop[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, stop, r, g, b, 100);; for (int i=0;i<100;i++) MyPalette[i] = FI+i;. Later on to reuse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TColor.html:4863,Green,Green,4863,root/html532/TColor.html,https://root.cern,https://root.cern/root/html532/TColor.html,1,['Green'],['Green']
Energy Efficiency,"lette"" is set using:. gStyle->SetPalette(...);. This function has two parameters: the number of colors in the palette and an; array of containing the indices of colors in the palette. The following small; example demonstrates how to define and use the color palette:. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",0,0,600,400);; TF2 *f1 = new TF2(""f1"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; Int_t palette[5];; palette[0] = 15;; palette[1] = 20;; palette[2] = 23;; palette[3] = 30;; palette[4] = 32;; gStyle->SetPalette(5,palette);; f1->Draw(""colz"");; return c1;; }; To define more a complex palette with a continuous gradient of color, one; should use the static function TColor::CreateGradientColorTable().; The following example demonstrates how to proceed:. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",0,0,600,400);; TF2 *f2 = new TF2(""f2"",""0.1+(1-(x-2)*(x-2))*(1-(y-2)*(y-2))"",1,3,1,3);; UInt_t Number = 3;; Double_t Red[Number] = { 1.00, 0.00, 0.00};; Double_t Green[Number] = { 0.00, 1.00, 0.00};; Double_t Blue[Number] = { 1.00, 0.00, 1.00};; Double_t Length[Number] = { 0.00, 0.50, 1.00 };; Int_t nb=50;; TColor::CreateGradientColorTable(Number,Length,Red,Green,Blue,nb);; f2->SetContour(nb);; f2->SetLineWidth(1);; f2->SetLineColor(kBlack);; f2->Draw(""surf1z"");; return c2;; }; The function TColor::CreateGradientColorTable() automatically; calls gStyle->SetPalette(), so there is not need to add one. After a call to TColor::CreateGradientColorTable() it is sometimes; useful to store the newly create palette for further use. In particular, it is; recommended to do if one wants to switch between several user define palettes.; To store a palette in an array it is enough to do:. Int_t MyPalette[100];; Double_t r[] = {0., 0.0, 1.0, 1.0, 1.0};; Double_t g[] = {0., 0.0, 0.0, 1.0, 1.0};; Double_t b[] = {0., 1.0, 0.0, 0.0, 1.0};; Double_t stop[] = {0., .25, .50, .75, 1.0};; Int_t FI = TColor::CreateGradientColorTable(5, stop, r, g, b, 100);; for (int i=0;i<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TColor.html:4883,Green,Green,4883,root/html534/TColor.html,https://root.cern,https://root.cern/root/html534/TColor.html,1,['Green'],['Green']
Energy Efficiency,"lettes with 255 colors are available when colors == 0. The following value of ncolors give access to:; if ncolors = 51 and colors=0, a Deep Sea palette is used.; if ncolors = 52 and colors=0, a Grey Scale palette is used.; if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; if ncolors = 54 and colors=0, a two-color hue palette palette is used.(dark blue through neutral gray to bright yellow); if ncolors = 55 and colors=0, a Rain Bow palette is used.; if ncolors = 56 and colors=0, an inverted Dark Body Radiator palette is used.; If ncolors > 0 && colors == 0, the default palette is used with a maximum of ncolors.; The default palette defines:. index 0 to 9 : shades of grey; index 10 to 19 : shades of brown; index 20 to 29 : shades of blue; index 30 to 39 : shades of red; index 40 to 49 : basic colors. The color numbers specified in the palette can be viewed by selecting the item colors in the VIEW menu of the canvas tool bar. The red, green, and blue components of a color can be changed thanks to TColor::SetRGB().; SinceROOT version 6.19/01; As default labels and ticks are drawn by TGAxis at equidistant (lin or log) points as controlled by SetNdivisions. If option ""CJUST"" is given labels and ticks are justified at the color boundaries defined by the contour levels. For more details see TPaletteAxis. Drawing a sub-range of a 2D histogram; the [cutg] option; Using a TCutG object, it is possible to draw a sub-range of a 2D histogram. One must create a graphical cut (mouse or C++) and specify the name of the cut between [] in the Draw() option. For example (fit2a.C), with a TCutG named cutg, one can call: myhist->Draw(""surf1 [cutg]"");; To invert the cut, it is enough to put a - in front of its name: myhist->Draw(""surf1 [-cutg]"");; It is possible to apply several cuts (, means logical AND): myhist->Draw(""surf1 [cutg1,cutg2]"");; ; #include ""TF2.h""; #include ""TH2.h""; #include ""TCutG.h""; #include ""TMath.h""; #include ""TCanvas.h""; #include ""TStyle.h""; ; double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:110602,green,green,110602,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['green'],['green']
Energy Efficiency,"lgorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegral<double>(double& f, const vector<double>& pts); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f, double a, do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html:1496,ADAPT,ADAPTIVE,1496,root/html602/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__IntegratorOneDim.html,2,['ADAPT'],['ADAPTIVE']
Energy Efficiency,"lgorithms from GSL, which reimplements the; algorithms used in the QUADPACK, a numerical integration package written in Fortran. Various types of adaptive and non-adaptive integration are supported. These include; integration over infinite and semi-infinite ranges and singular integrals. The integration type is selected using the Integration::type enumeration; in the class constructor.; The default type is adaptive integration with singularity; (ADAPTIVESINGULAR or QAGS in the QUADPACK convention) applying a Gauss-Kronrod 21-point integration rule.; In the case of ADAPTIVE type, the integration rule can also be specified via the; Integration::GKRule. The default rule is 31 points. In the case of integration over infinite and semi-infinite ranges, the type used is always; ADAPTIVESINGULAR applying a transformation from the original interval into (0,1). The ADAPTIVESINGULAR type is the most sophicticated type. When performances are; important, it is then recommened to use the NONADAPTIVE type in case of smooth functions or; ADAPTIVE with a lower Gauss-Kronrod rule. For detailed description on GSL integration algorithms see the; <A HREF=""http://www.gnu.org/software/gsl/manual/gsl-ref_16.html#SEC248"">GSL Manual</A>. @ingroup Integration. This class is also known as (typedefs to this class)ROOT::Math::Integrator. Function Members (Methods); public:. virtual~IntegratorOneDim(); doubleError() const; ROOT::Math::VirtualIntegratorOneDim*GetIntegrator(); static stringGetName(ROOT::Math::IntegrationOneDim::Type); static ROOT::Math::IntegrationOneDim::TypeGetType(const char* name); doubleIntegral(); doubleIntegral(const ROOT::Math::IGenFunction& f); doubleIntegral(const vector<double>& pts); doubleIntegral(const ROOT::Math::IGenFunction& f, const vector<double>& pts); doubleIntegral(double a, double b); doubleIntegral(const ROOT::Math::IGenFunction& f, double a, double b); doubleIntegralCauchy(double a, double b, double c); doubleIntegralCauchy(const ROOT::Math::IGenFunction& f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html:1496,ADAPT,ADAPTIVE,1496,root/html532/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IntegratorOneDim.html,2,['ADAPT'],['ADAPTIVE']
Energy Efficiency,"lgorithms provided by GSL (see GSL Online Manual ) ;  CGSLFunctionAdapterClass for adapting any C++ functor class to C function pointers used by GSL ;  CGSLFunctionDerivWrapperClass to wrap a gsl_function_fdf (with derivatives) ;  CGSLFunctionWrapperWrapper class to the gsl_function C structure ;  CGSLIntegrationWorkspace;  CGSLIntegratorClass for performing numerical integration of a function in one dimension ;  CGSLInterpolatorInterpolation class based on GSL interpolation functions ;  CGSLMCIntegrationWorkspace;  CGSLMCIntegrator;  CGSLMinimizerGSLMinimizer class ;  CGSLMinimizer1DMinimizer for arbitrary one dimensional functions ;  CGSLMiserIntegrationWorkspaceWorkspace for MISER ;  CGSLMonteFunctionAdapter;  CGSLMonteFunctionWrapperWrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm ;  CGSLMultiFitGSLMultiFit, internal class for implementing GSL non linear least square GSL fitting ;  CGSLMultiFitFunctionAdapterClass for adapting a C++ functor class to C function pointers used by GSL MultiFit Algorithm The templated C++ function class must implement: ;  CGSLMultiFitFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinDerivFunctionWrapperWrapper for a multi-dimensional function with derivatives used in GSL multidim minimization algorithm ;  CGSLMultiMinFunctionAdapterClass for adapting any multi-dimension C++ functor class to C function pointers used by GSL MultiMin algorithms ;  CGSLMultiMinFunctionWrapperWrapper to a multi-dim function withtout derivatives for multi-dimensional minimization algorithm ;  CGSLMultiMinimizerGSLMultiMinimizer class , for minimizing multi-dimensional function using derivatives ;  CGSLMultiRootBaseSolverGSLMultiRootBaseSolver, internal class for implementing GSL multi-root finders This is the base class for GSLMultiRootSolver (solver not using derivatives) and GSLMUltiRootDerivSolver (solver using derivat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:31679,adapt,adapting,31679,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,8,['adapt'],['adapting']
Energy Efficiency,"libNew.so) and usage statistics is gathered. Using the resource (in .rootrc): Root.MemStat one can toggle statistics gathering on or off. More specifically on can trap the allocation of a block of memory of a certain size. This can be specified using the resource: Root.MemStat.size, using the resource Root.MemStat.cnt one can specify after how many allocations of this size the trap should occur.; Set the compile option R__NOSTATS to de-activate all memory checking and statistics gathering in the system. ; Definition at line 33 of file TStorage.h. Public Member Functions; virtual ~TStorage ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void * Alloc (size_t size);  Allocate a block of memory, that later can be resized using TStorage::ReAlloc(). ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void Dealloc (void *ptr);  De-allocate block of memory, that was allocated via TStorage::Alloc(). ;  ; static const char * DeclFileName ();  ; static void EnableStatistics (int size=-1, int ix=-1);  Enable memory usage statistics gathering. ;  ; static void EnterStat (size_t size, void *p);  Register a memory allocation operation. ;  ; static Bool_t FilledByObjectAlloc (volatile const UInt_t *const member);  ; static FreeHookFun_t GetFreeHook ();  ; static void * GetFreeHookData ();  return static free hook data ;  ; static size_t GetMaxBlockSize ();  ; static Bool_t HasCustomNewDelete ();  return the has custom delete flag ;  ; static void * ObjectAlloc (size_t size);  Used to allocate a TObject on the heap (via TObject::operator new()). ;  ; static void * ObjectAlloc (size_t size, void *vp);  Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)) in position vp. ;  ; static void * ObjectAllocArray (size_t size);  Used to allocate array of TObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStorage.html:1765,allocate,allocate,1765,doc/master/classTStorage.html,https://root.cern,https://root.cern/doc/master/classTStorage.html,2,['allocate'],"['allocate', 'allocated']"
Energy Efficiency,"lic Member Functions; virtual ~TStorage ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void * Alloc (size_t size);  Allocate a block of memory, that later can be resized using TStorage::ReAlloc(). ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void Dealloc (void *ptr);  De-allocate block of memory, that was allocated via TStorage::Alloc(). ;  ; static const char * DeclFileName ();  ; static void EnableStatistics (int size=-1, int ix=-1);  Enable memory usage statistics gathering. ;  ; static void EnterStat (size_t size, void *p);  Register a memory allocation operation. ;  ; static Bool_t FilledByObjectAlloc (volatile const UInt_t *const member);  ; static FreeHookFun_t GetFreeHook ();  ; static void * GetFreeHookData ();  return static free hook data ;  ; static size_t GetMaxBlockSize ();  ; static Bool_t HasCustomNewDelete ();  return the has custom delete flag ;  ; static void * ObjectAlloc (size_t size);  Used to allocate a TObject on the heap (via TObject::operator new()). ;  ; static void * ObjectAlloc (size_t size, void *vp);  Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)) in position vp. ;  ; static void * ObjectAllocArray (size_t size);  Used to allocate array of TObject on the heap (via TObject::operator new[]()). ;  ; static void ObjectDealloc (void *vp);  Used to deallocate a TObject on the heap (via TObject::operator delete()). ;  ; static void ObjectDealloc (void *vp, void *ptr);  Used to deallocate a TObject on the heap (via TObject::operator delete(void*,void*)). ;  ; static void PrintStatistics ();  Print memory usage statistics. ;  ; static void * ReAlloc (void *vp, size_t size, size_t oldsize);  Reallocate (i.e. ;  ; static char * ReAllocChar (char *vp, size_t size, size_t oldsize);  Reallocate (i.e. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStorage.html:2422,allocate,allocate,2422,doc/master/classTStorage.html,https://root.cern,https://root.cern/doc/master/classTStorage.html,1,['allocate'],['allocate']
Energy Efficiency,"lidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TList*fActivelist of sockets to monitor; TList*fDeActivelist of (temporary) disabled sockets; Bool_tfInterruptflags an interrupt to Select; Bool_tfMainLooptrue if monitoring sockets within the main event loop; TSocket*fReadysocket which is ready to be read or written. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMonitor(Bool_t mainloop = kTRUE); Create a monitor object. If mainloop is true the monitoring will be; done in the main event loop. TMonitor(const TMonitor& m); Copy constructor. ~TMonitor(); Cleanup the monitor object. Does not delete sockets being monitored. void Add(TSocket* sock, Int_t interest = kRead); Add socket to the monitor's active list. If interest=kRead then we; want to monitor the socket for read readiness, if interest=kWrite; then we monitor the socket for write readiness, if interest=kRead|kWrite; then we monitor both read and write readiness. void SetInterest(TSocket* sock, Int_t interest = kRead); Set interest mask for socket sock to interest. If the socket is not; in the active list move it or add it there.; If interest=kRead then we want to monitor the socket for read readiness,; if interest=kWrite then we monitor the socket for write readiness,; if interest=kRead|kWrite then we monitor both read and write readiness. void Remove(TSocket* sock); Remove a socket from the monitor. void RemoveAll(); Remove all sockets from the monitor. void Activate(TSocket* sock); Activate a de-activated socket. void ActivateAll(); Activate all de-activated sockets. void DeActivat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMonitor.html:10245,monitor,monitor,10245,root/html528/TMonitor.html,https://root.cern,https://root.cern/root/html528/TMonitor.html,6,['monitor'],['monitor']
Energy Efficiency,"line 1085 of file TLegend.cxx. ◆ SetMargin(). void TLegend::SetMargin ; (; Float_t ; margin). inline . Definition at line 69 of file TLegend.h. ◆ SetNColumns(). void TLegend::SetNColumns ; (; Int_t ; nColumns). Set the number of columns for the legend. ; The header, if set, is given its own row. After that, every nColumns entries are inserted into the same row. For example, if one calls legend.SetNColumns(2), and there is no header, then the first two TObjects added to the legend will be in the first row, the next two will appear in the second row, and so on. ; Definition at line 606 of file TLegend.cxx. ◆ Streamer(). void TLegend::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TBox. ; Reimplemented from TBox. ◆ StreamerNVirtual(). void TLegend::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 82 of file TLegend.h. Member Data Documentation. ◆ fColumnSeparation. Float_t TLegend::fColumnSeparation. protected . Separation between columns, as a fraction of The space allowed to one column. ; Definition at line 79 of file TLegend.h. ◆ fEntrySeparation. Float_t TLegend::fEntrySeparation. protected . Separation between entries, as a fraction of The space allocated to one entry. ; Typical value is 0.1. ; Definition at line 74 of file TLegend.h. ◆ fMargin. Float_t TLegend::fMargin. protected . Fraction of total width used for symbol. ; Definition at line 77 of file TLegend.h. ◆ fNColumns. Int_t TLegend::fNColumns. protected . Number of columns in the legend. ; Definition at line 78 of file TLegend.h. ◆ fPrimitives. TList* TLegend::fPrimitives {nullptr}. protected . List of TLegendEntries. ; Definition at line 73 of file TLegend.h. Libraries for TLegend:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TLegend.h; graf2d/graf/src/TLegend.cxx. TLegend. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:55 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend.html:44195,allocate,allocated,44195,doc/master/classTLegend.html,https://root.cern,https://root.cern/doc/master/classTLegend.html,1,['allocate'],['allocated']
Energy Efficiency,"line, to access the previous and next command. The commands are recorded in the history file $HOME/.root_hist. It is a text file, and you can edit, cut, and paste from it. You can specify the history file in the system.rootrc file, by setting the Rint.Historyoption. You can also turn off the command logging in the system.rootrc file with the option: Rint.History: -; The number of history lines to be kept can be set also in .rootrc by:; Rint.HistSize: 500; Rint.HistSave: 400; The first value defines the maximum of lines kept; once it is reached all, the last HistSave lines will be removed. One can set HistSize to 0 to disable history line management. There is also implemented an environment variable called ROOT_HIST. By setting ROOT_HIST=300:200 the above values can be overriden - the first value corresponds to HistSize, the (optional) second one to HistSave. You can set ROOT_HIST=0 to disable the history.; 2.7.3 Tracking Memory Leaks; You can track memory usage and detect leaks by monitoring the number of objects that are created and deleted (see TObjectTable). To use this facility, edit the file $ROOTSYS/etc/system.rootrc or .rootrc if you have this file and add the two following lines:; Root.ObjectStat: 1; In your code or on the command line you can type the line:; gObjectTable->Print();; This line will print the list of all active classes and the number of instances for each class. By comparing consecutive print outs, you can see objects that you forgot to delete. Note that this method cannot show leaks coming from the allocation of non-objects or classes unknown to ROOT.; 2.8 Converting from PAW to ROOT; The web page at: http://root.cern.ch/root/HowtoConvertFromPAW.html#TABLE gives the “translation” table of some commonly used PAW commands into ROOT. If you move the mouse cursor over the picture at: http://root.cern.ch/root/HowtoConvertFromPAW.html#SET, you will get the corresponding ROOT commands as tooltips.; 2.8.1 Converting HBOOK/PAW Files; ROOT has a utility",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:66419,monitor,monitoring,66419,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['monitor'],['monitoring']
Energy Efficiency,"linestatic . Definition at line 131 of file TStorage.h. ◆ HasCustomNewDelete(). Bool_t TStorage::HasCustomNewDelete ; (; ). static . return the has custom delete flag ; Definition at line 434 of file TStorage.cxx. ◆ IsA(). virtual TClass * TStorage::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 85 of file TStorage.h. ◆ ObjectAlloc() [1/2]. void * TStorage::ObjectAlloc ; (; size_t ; sz). static . Used to allocate a TObject on the heap (via TObject::operator new()). ; Directly after this routine one can call (in the TObject ctor) TStorage::FilledByObjectAlloc() to find out if the just created object is on the heap. This technique is necessary as there is one stack per thread and we can not rely on comparison with the current stack memory position. ; Definition at line 291 of file TStorage.cxx. ◆ ObjectAlloc() [2/2]. void * TStorage::ObjectAlloc ; (; size_t ; size, . void * ; vp . ). static . Used to allocate a TObject on the heap (via TObject::operator new(size_t,void*)) in position vp. ; vp is already allocated (maybe on heap, maybe on stack) so just return. ; Definition at line 314 of file TStorage.cxx. ◆ ObjectAllocArray(). void * TStorage::ObjectAllocArray ; (; size_t ; sz). static . Used to allocate array of TObject on the heap (via TObject::operator new[]()). ; Unlike the 'singular' ObjectAlloc, we do not mark those object has being allocated on the heap as they can not be individually deleted. ; Definition at line 303 of file TStorage.cxx. ◆ ObjectDealloc() [1/2]. void TStorage::ObjectDealloc ; (; void * ; vp). static . Used to deallocate a TObject on the heap (via TObject::operator delete()). ; Definition at line 322 of file TStorage.cxx. ◆ ObjectDealloc() [2/2]. void TStorage::ObjectDealloc ; (; void * ; vp, . void * ; ptr . ). static . Used to deallocate a TObject on the heap (via TObject::operator delete(void*,void*)). ; Definition at line 331 of file TStorage.cxx. ◆ PrintStatistics(). void TStorage::PrintSta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStorage.html:7623,allocate,allocate,7623,doc/master/classTStorage.html,https://root.cern,https://root.cern/doc/master/classTStorage.html,1,['allocate'],['allocate']
Energy Efficiency,"list va) const; voidDoFlip(); voidDoLeftShift(UInt_t shift); voidDoOrEqual(const TBits& rhs); voidDoRightShift(UInt_t shift); voidDoXorEqual(const TBits& rhs); voidTObject::MakeZombie(); voidReserveBytes(UInt_t nbytes). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. UChar_t*fAllBits[fNbytes] array of UChars; UInt_tfNbitsHighest bit set + 1; UInt_tfNbytesNumber of UChars in fAllBits. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits(UInt_t nbits = 8); TBits constructor. All bits set to 0. TBits(const TBits& ); TBits copy constructor. TBits& operator=(const TBits& ); TBits assignment operator. ~TBits(); TBits destructor. void Clear(Option_t* option = """"); Clear the value. void Compact(); Reduce the storage used by the object to a minimun. UInt_t CountBits(UInt_t startBit = 0) const; Return number of bits set to 1 starting at bit startBit. void DoAndEqual(const TBits& rhs); Execute (*this) &= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoOrEqual(const TBits& rhs); Execute (*this) &= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoXorEqual(const TBits& rhs); Execute (*this) ^= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoFlip(); Execute ~(*this). void DoLeftShift(UInt_t shift); Execute the left shift operation. void DoRightShift(UInt_t shift); Execute the left shift operation. UInt_t FirstNullBit(UInt_t startBit = 0) const; Return position of first null bit (starting from position 0 and up). UInt_t FirstSetBit(UInt_t startBit = 0) const; Return position of first non null bit (starting from position 0 and up). void Output(ostream& ) const; Print the value to the ost",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBits.html:7581,Reduce,Reduce,7581,root/html532/TBits.html,https://root.cern,https://root.cern/root/html532/TBits.html,1,['Reduce'],['Reduce']
Energy Efficiency,"list va) const; voidDoFlip(); voidDoLeftShift(UInt_t shift); voidDoOrEqual(const TBits& rhs); voidDoRightShift(UInt_t shift); voidDoXorEqual(const TBits& rhs); voidTObject::MakeZombie(); voidReserveBytes(UInt_t nbytes). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. UChar_t*fAllBits[fNbytes] array of UChars; UInt_tfNbitsHighest bit set + 1; UInt_tfNbytesNumber of UChars in fAllBits. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBits(UInt_t nbits = 8); TBits constructor. All bits set to 0. TBits(const TBits& ); TBits copy constructor. TBits& operator=(const TBits& ); TBits assignment operator. ~TBits(); TBits destructor. void Clear(Option_t* option = """"); Clear the value. void Compact(); Reduce the storage used by the object to a minimun. UInt_t CountBits(UInt_t startBit = 0) const; Return number of bits set to 1 starting at bit startBit. void DoAndEqual(const TBits& rhs); Execute (*this) &= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoOrEqual(const TBits& rhs); Execute (*this) &= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoXorEqual(const TBits& rhs); Execute (*this) ^= rhs;; Extra bits in rhs are ignored; Missing bits in rhs are assumed to be zero. void DoFlip(); Execute ~(*this). void DoLeftShift(UInt_t shift); Execute the left shift operation. void DoRightShift(UInt_t shift); Execute the left shift operation. UInt_t FirstNullBit(UInt_t startBit = 0) const; Return position of first null bit (starting from position 0 and up). UInt_t LastNullBit(UInt_t startBit = 999999999) const; Return position of first null bit (starting from position 0 and up). UInt_t FirstSetBit(UInt_t startBit = 0) const; Retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBits.html:7707,Reduce,Reduce,7707,root/html534/TBits.html,https://root.cern,https://root.cern/root/html534/TBits.html,1,['Reduce'],['Reduce']
Energy Efficiency,"list. Once the customizable version is done, one can remove or add elements. ; Definition at line 4283 of file TClass.cxx. ◆ MatchLegacyCheckSum(). Bool_t TClass::MatchLegacyCheckSum ; (; UInt_t ; checksum); const. Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ; Definition at line 6494 of file TClass.cxx. ◆ Move(). void TClass::Move ; (; void * ; arenaFrom, . void * ; arenaTo . ); const. Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ; Definition at line 4327 of file TClass.cxx. ◆ MoveAddressInRepository(). void TClass::MoveAddressInRepository ; (; const char * ; where, . void * ; oldadd, . void * ; newadd, . const TClass * ; what . ); const. private . Definition at line 337 of file TClass.cxx. ◆ New() [1/2]. void * TClass::New ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew().; If quiet is true, do no issue a message via Error on case of problems, just return 0.; The constructor actually called here can be customized by using the rootcint pragma: #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass, this method will called the first of the following 3 constructors which exists and is public: MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted.; TRootIOCtorDefinition TRootIOCtor.h:33; When more than one pragma ioctortype is used, the first seen as priority For example with: #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order: MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:105173,allocate,allocated,105173,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['allocate'],['allocated']
Energy Efficiency,"list. Once the customizable version is done, one can remove or add elements. ; Definition at line 4350 of file TClass.cxx. ◆ MatchLegacyCheckSum(). Bool_t TClass::MatchLegacyCheckSum ; (; UInt_t ; checksum); const. Return true if the checksum passed as argument is one of the checksum value produced by the older checksum calculation algorithm. ; Definition at line 6561 of file TClass.cxx. ◆ Move(). void TClass::Move ; (; void * ; arenaFrom, . void * ; arenaTo . ); const. Register the fact that an object was moved from the memory location 'arenaFrom' to the memory location 'arenaTo'. ; Definition at line 4394 of file TClass.cxx. ◆ MoveAddressInRepository(). void TClass::MoveAddressInRepository ; (; const char * ; where, . void * ; oldadd, . void * ; newadd, . const TClass * ; what . ); const. private . Definition at line 337 of file TClass.cxx. ◆ New() [1/2]. void * TClass::New ; (; ENewType ; defConstructor = kClassNew, . Bool_t ; quiet = kFALSE . ); const. Return a pointer to a newly allocated object of this class. ; The class must have a default constructor. For meaning of defConstructor, see TClass::IsCallingNew().; If quiet is true, do no issue a message via Error on case of problems, just return 0.; The constructor actually called here can be customized by using the rootcint pragma: #pragma link C++ ioctortype UserClass;; For example, with this pragma and a class named MyClass, this method will called the first of the following 3 constructors which exists and is public: MyClass(UserClass*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted.; TRootIOCtorDefinition TRootIOCtor.h:33; When more than one pragma ioctortype is used, the first seen as priority For example with: #pragma link C++ ioctortype UserClass1;; #pragma link C++ ioctortype UserClass2;; We look in the following order: MyClass(UserClass1*);; MyClass(UserClass2*);; MyClass(TRootIOCtor*);; MyClass(); // Or a constructor with all its arguments defaulted. Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:105174,allocate,allocated,105174,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['allocate'],['allocated']
Energy Efficiency,"lity. Main limitation here - user should interactively select files for reading. There is button “…” on the main JSROOT page, which starts file selection dialog. If valid ROOT file is selected, JSROOT will be able to normally read content of such file.; 1.9 JSROOT with THttpServer; THttpServer provides http access to objects from running ROOT application. JSROOT is used to implement the user interface in the web browsers.; The layout of the main page coming from THttpServer is very similar to normal JSROOT page. One could browse existing items and display them. A snapshot of running server can be seen on the demo page.; One could also specify similar URL parameters to configure the displayed items and drawing options.; It is also possible to display one single item from the THttpServer server like:; https://root.cern/js/latest/httpserver.C/Files/job1.root/hpxpy/draw.htm?opt=colz; 1.10 Data monitoring with JSROOT; 1.10.1 Monitoring with http server; The best possibility to organize the monitoring of data from a running application is to use THttpServer. In such case the client can always access the latest changes and request only the items currently displayed in the browser. To enable monitoring, one should activate the appropriate checkbox or provide monitoring parameter in the URL string like:; https://root.cern/js/latest/httpserver.C/Files/job1.root/hprof/draw.htm?monitoring=1000; The parameter value is the update interval in milliseconds.; 1.10.2 JSON file-based monitoring; Solid file-based monitoring (without integration of THttpServer into application) can be implemented in JSON format. There is the TBufferJSON class, which is capable to convert any (beside TTree) ROOT object into JSON. Any ROOT application can use such class to create JSON files for selected objects and write such files in a directory, which can be accessed via web server. Then one can use JSROOT to read such files and display objects in a web browser.; There is a demonstration page showing su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:19394,monitor,monitoring,19394,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,3,"['Monitor', 'monitor']","['Monitoring', 'monitoring']"
Energy Efficiency,"lize data to the interval [-1;1]. This is needed for the; classes method to work. void MakeParameterization(); PRIVATE METHOD:; Find the parameterization over the training sample. A full account; of the algorithm is given in the; class description. void MakeRealCode(const char* filename, const char* classname, Option_t* option = """"); PRIVATE METHOD:; This is the method that actually generates the code for the; evaluation the parameterization on some point.; It's called by TMultiDimFit::MakeCode and TMultiDimFit::MakeMethod. The options are: NONE so far. void Print(Option_t* option = ""ps"") const; Print statistics etc.; Options are; P Parameters; S Statistics; C Coefficients; R Result of parameterisation; F Result of fit; K Correlation Matrix; M Pretty print formula. Bool_t Select(const Int_t* iv); Selection method. User can override this method for specialized; selection of acceptable functions in fit. Default is to select; all. This message is sent during the build-up of the function; candidates table once for each set of powers in; variables. Notice, that the argument array contains the powers; PLUS ONE. For example, to De select the function; f = x1^2 * x2^4 * x3^5,; this method should return kFALSE if given the argument; { 3, 4, 6 }. void SetMaxAngle(Double_t angle = 0); Set the max angle (in degrees) between the initial data vector to; be fitted, and the new candidate function to be included in the; fit. By default it is 0, which automatically chooses another; selection criteria. See also; class description. void SetMinAngle(Double_t angle = 1); Set the min angle (in degrees) between a new candidate function; and the subspace spanned by the previously accepted; functions. See also; class description. void SetPowers(const Int_t* powers, Int_t terms); Define a user function. The input array must be of the form; (p11, ..., p1N, ... ,pL1, ..., pLN); Where N is the dimension of the data sample, L is the number of; terms (given in terms) and the first number, labels t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:32779,power,powers,32779,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,10,['power'],['powers']
Energy Efficiency,"lize the function invocation environment. Necessary input; information: the function name and the parameter string of; the form ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). void InitImplementation(const char* methodname, const char* params, const char* proto, Bool_t objectIsConst, TClass* cl, const ClassInfo_t* cinfo, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch); This function implements Init and InitWithPrototype. void InitWithPrototype(TClass* cl, const char* method, const char* proto, Bool_t objectIsConst = kFALSE, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch); Initialize the method invocation environment. Necessary input; information: the class, method name and the prototype string of; the form: ""char*,int,float"".; To execute the method call TMethodCall::Execute(object,...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). void InitWithPrototype(const char* function, const char* proto, ROOT::EFunctionMatchMode mode = ROOT::kConversionMatch); Initialize the function invocation environment. Necessary input; information: the function name and the prototype string of; the form: ""char*,int,float"".; To execute the method call TMethodCall::Execute(...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). Bool_t IsValid() const; Return true if the method call has been properly initialized and is; usable. TFunction * GetMethod(); Returns the TMethod describing the method to be executed. This takes; all overriding and overloading into account (call TClass::GetMethod()).; Since finding the method is expensive the result is cached. void Execute(void* object); Execute the method (with preset arguments) for the specified object. void Execute(void* object, const char* params); Execute the method for the spec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMethodCall.html:11755,efficient,efficient,11755,root/html602/TMethodCall.html,https://root.cern,https://root.cern/root/html602/TMethodCall.html,4,['efficient'],['efficient']
Energy Efficiency,"ll MathCore classes is available in the Doxygen online reference documentation.; 13.2 MathMore Library; The MathMore library provides an advanced collection of functions and C++ classes for numerical computing. This is an extension of the functionality provided by the MathCore library. The MathMore library is implemented wrapping in C++ the GNU Scientific Library (GSL). The current set, provided in the ROOT::Math namespace include:. Special mathematical functions (like Bessel functions, Legendre polynomials, etc.. ); Additional mathematical functions used in statistics such as probability density functions, cumulative distributions functions and their inverse which are not in MathCore but present in the GSL library.; Numerical algorithms for one dimensional functions based on implementation of the GNU Scientific Library (GSL):; Numerical integration classes implementing the interface ROOT::Math::Integrator which is based on the Adaptive integration algorithms of QUADPACK; Numerical differentiation via ROOT::Math::GSLDerivator; Root finder implementing the ROOT::Math::RootFinder interface, using different solver algorithms from GSL; one-dimensional Minimization implementing the interfaceROOT::Math::IMinimizer1D; Interpolation via ROOT::Math::Interpolation. All the GSL interpolation types are supported; Function approximation based on Chebyshev polynomials via the class ROOT::Math::Chebyshev; Random number generators and distributions based on GSL using the ROOT::Math::Random<Engine_type> class.; Polynomial evaluation and root solvers. The mathematical functions are implemented as a set of free functions in the namespace ROOT::Math. The naming used for the special functions is the same proposed for the C++ standard (see C++ standard extension proposal document).The MathMore library is implemented wrapping in C++ the GNU Scientific Library ( ). Building MathMore requires a version of GSL larger or equal 1.8. The source code of MathMore is distributed under the GNU Gene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:658960,Adapt,Adaptive,658960,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Adapt'],['Adaptive']
Energy Efficiency,"ll as usual Pearson's test for; comparison two usual (unweighted) histograms. Overview:. Comparison of two histograms expect hypotheses that two histograms; represent identical distributions. To make a decision p-value should; be calculated. The hypotheses of identity is rejected if the p-value is; lower then some significance level. Traditionally significance levels; 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; analysis of the residuals which is often helpful in identifying the; bins of histograms responsible for a significant overall value.; Residuals are the difference between bin contents and expected bin; contents. Most convenient for analysis are the normalized residuals. If; hypotheses of identity are valid then normalized residuals are; approximately independent and identically distributed random variables; having N(0,1) distribution. Analysis of residuals expect test of above; mentioned properties of residuals. Notice that indirectly the analysis; of residuals increase the power of test. Methods of comparison:. test for comparison two (unweighted) histograms:; Let us consider two histograms with the same binning and the number; of bins equal to r. Let us denote the number of events in the ith bin; in the first histogram as ni and as mi in the second one. The total; number of events in the first histogram is equal to:. and. in the second histogram. The hypothesis of identity (homogeneity) [3]; is that the two histograms represent random values with identical; distributions. It is equivalent that there exist r constants p1,...,pr,; such that. and the probability of belonging to the ith bin for some measured value; in both experiments is equal to pi. The number of events in the ith; bin is a random variable with a distribution approximated by a Poisson; probability distribution. for the first histogram and with distribution. for the second histogram. If the hypothesis of homogeneity is valid,; then the maximum likelihood estimator o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:46028,power,power,46028,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,10,['power'],['power']
Energy Efficiency,"ll members ; TMonitor Class Reference. . Definition at line 36 of file TMonitor.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMonitor.html:1296,monitor,monitored,1296,doc/master/classTMonitor.html,https://root.cern,https://root.cern/doc/master/classTMonitor.html,1,['monitor'],['monitored']
Energy Efficiency,"ll to be set ! ; Definition at line 117 of file TMatrixTSparse.cxx. ◆ TMatrixTSparse() [4/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; Int_t ; row_lwb, . Int_t ; row_upb, . Int_t ; col_lwb, . Int_t ; col_upb, . Int_t ; nr, . Int_t * ; row, . Int_t * ; col, . Element * ; data . ). Space is allocated for row/column indices and data. ; Sparse row/column index structure together with data is coming from the arrays, row, col and data, resp. Here row, col and data are arrays of length nr (number of nonzero elements), i.e. the matrix is stored in COO (coordinate) format. Note that the input arrays are not passed as const since they will be modified ! ; Definition at line 130 of file TMatrixTSparse.cxx. ◆ TMatrixTSparse() [5/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; Int_t ; row_lwb, . Int_t ; row_upb, . Int_t ; col_lwb, . Int_t ; col_upb, . Int_t * ; rowptr, . Int_t * ; col, . Element * ; data . ). Space is allocated for row/column indices and data. ; Sparsity pattern is given by column indices and row pointers from arrays col and rowptr, resp, while matrix entries come from the array data. Arrays col and data are assumed to have length nr (number of nonzero elements), while array rowptr has length (n+1), where n=row_upb-row_lwb+1 is the number of rows. ; Definition at line 174 of file TMatrixTSparse.cxx. ◆ TMatrixTSparse() [6/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; const TMatrixTSparse< Element > & ; another). Definition at line 211 of file TMatrixTSparse.cxx. ◆ TMatrixTSparse() [7/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; const TMatrixT< Element > & ; another). Definition at line 224 of file TMatrixTSparse.cxx. ◆ TMatrixTSparse() [8/11]. template<class Element > . TMatrixTSparse< Element >::TMatrixTSparse ; (; EMatrixCreatorsOp1 ; op, . const TMatrixTSparse< Element > & ; prototype . ). Create a matrix applying a specific opera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSparse.html:30426,allocate,allocated,30426,doc/master/classTMatrixTSparse.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html,1,['allocate'],['allocated']
Energy Efficiency,"llAxes() constReturns true if all axes are extendable.Definition TH1.cxx:6636; TH1::fDirectoryTDirectory * fDirectory! Pointer to directory holding this histogramDefinition TH1.h:109; TH1::Resetvirtual void Reset(Option_t *option="""")Reset this histogram: contents, errors, etc.Definition TH1.cxx:7103; TH1::SetNameTitlevoid SetNameTitle(const char *name, const char *title) overrideChange the name and title of this histogram.Definition TH1.cxx:8974; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetBinXYZvirtual void GetBinXYZ(Int_t binglobal, Int_t &binx, Int_t &biny, Int_t &binz) constReturn binx, biny, binz corresponding to the global bin number globalbin see TH1::GetBin function abo...Definition TH1.cxx:4974; TH1::GetCumulativeTH1 * GetCumulative(Bool_t forward=kTRUE, const char *suffix=""_cumulative"") constReturn a pointer to a histogram containing the cumulative content.Definition TH1.cxx:2616; TH1::AutoP2GetPower2static Double_t AutoP2GetPower2(Double_t x, Bool_t next=kTRUE)Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x.Definition TH1.cxx:1308; TH1::GetNcellsvirtual Int_t GetNcells() constDefinition TH1.h:300; TH1::ShowPeaksvirtual Int_t ShowPeaks(Double_t sigma=2, Option_t *option="""", Double_t threshold=0.05)Interface to TSpectrum::Search.Definition TH1.cxx:9301; TH1::RecomputeAxisLimitsstatic Bool_t RecomputeAxisLimits(TAxis &destAxis, const TAxis &anAxis)Finds new limits for the axis for the Merge function.Definition TH1.cxx:5908; TH1::PutStatsvirtual void PutStats(Double_t *stats)Replace current statistics with the values in array stats.Definition TH1.cxx:7884; TH1::GetPainterTVirtualHistPainter * GetPainter(Option_t *option="""")Return pointer to painter.Definition TH1.cxx:4511; TH1::FindObjectTObject * FindObject(const char *name) const overrideSearch object named name in the list of functions.Definition TH1.cxx:3857; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:441532,power,power,441532,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['power'],['power']
Energy Efficiency,"ll] / L[alt]) where L is the likelihood ;  CSPlotThis class calculates sWeights used to create an sPlot ;  CTestStatisticTestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class ;  CTestStatSamplerTestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions ;  CToyMCImportanceSamplerToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling ;  CToyMCPayload;  CToyMCSamplerToyMCSampler is an implementation of the TestStatSampler interface ;  CToyMCStudyToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling ;  CUniformProposalUniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm ;  CUpperLimitMCSModuleThis class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated ;  ►NROOTNamespace for new ROOT classes and functions ;  ►NDetail;  ►NRDF;  CRCustomColumn;  CRCustomColumnBase;  CRFilter;  CRFilterBase;  CRJittedFilterA wrapper around a concrete RFilter, which forwards all calls to it RJittedFilter is the type of the node returned by jitted Filter calls: the concrete filter can be created and set at a later time, from jitted code ;  ►CRLoopManager;  CTCallback;  CTOneTimeCallback;  CRRange;  CRRangeBase;  ►NVecOps;  ►CRAdoptAllocatorRAdoptAllocator can provide a view on already allocated memory ;  Crebind;  ►CRAdoptAllocator< bool >;  Crebind;  C__integer_sequence;  C__make;  C__make< 0 >;  C__make< 1 >;  C__make< 2 >;  C__make< 3 >;  C__make< 4 >;  C__make< 5 >;  C__make< 6 >;  C__make< 7 >;  C__parity;  ►C__parity< 0 >;  C__pmake;  ►C__parity< 1 >;  C__pmake;  ►C__parity< 2 >;  C__pmake;  ►C__parity< 3 >;  C__pmake;  ►C__parity< 4 >;  C__pmake;  ►C__parity< 5 >;  C__pmake;  ►C__parity< 6 >;  C__pmake;  ►C__parity< 7 >;  C__pmake;  C__repeat;  C__repeat< __integer_sequence< _Tp, _Np.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/annotated.html:12769,allocate,allocated,12769,doc/v614/annotated.html,https://root.cern,https://root.cern/doc/v614/annotated.html,1,['allocate'],['allocated']
Energy Efficiency,"lloc(size_t size, void* vp); static voidObjectDealloc(void* vp); static voidObjectDealloc(void* vp, void* ptr); TStorage&operator=(const TStorage&); static voidPrintStatistics(); static void*ReAlloc(void* vp, size_t size); static void*ReAlloc(void* vp, size_t size, size_t oldsize); static char*ReAllocChar(char* vp, size_t size, size_t oldsize); static Int_t*ReAllocInt(Int_t* vp, size_t size, size_t oldsize); static voidRemoveStat(void* p); static voidSetCustomNewDelete(); static voidSetFreeHook(FreeHookFun_t func, void* data); static voidSetMaxBlockSize(size_t size); static voidSetReAllocHooks(ReAllocFun_t func1, ReAllocCFun_t func2); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. static FreeHookFun_tfgFreeHookfunction called on free; static void*fgFreeHookDatadata used by this function; static Bool_tfgHasCustomNewDeletetrue if using ROOT's new/delete; static ULong_tfgHeapBeginbegin address of heap; static ULong_tfgHeapEndend address of heap; static size_tfgMaxBlockSizelargest block allocated; static ReAllocCFun_tfgReAllocCHookcustom ReAlloc with length check; static ReAllocFun_tfgReAllocHookcustom ReAlloc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void EnterStat(size_t size, void* p); Register a memory allocation operation. If desired one can trap an; allocation of a certain size in case one tries to find a memory; leak of that particular size. This function is only called via; the ROOT custom new operators. void RemoveStat(void* p); Register a memory free operation. This function is only called via; the custom ROOT delete operator. void * Alloc(size_t size); Allocate a block of memory, that later can be resized using; TStorage::ReAlloc(). void Dealloc(void* ptr); De-allocate block of memory, that was allocated via TStorage::Alloc(). void * ReAlloc(void* vp, size_t size); Reallocate (i.e. resize) block of memory. void * ReAll",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStorage.html:2891,allocate,allocated,2891,root/html528/TStorage.html,https://root.cern,https://root.cern/root/html528/TStorage.html,4,['allocate'],['allocated']
Energy Efficiency,"llocated I/O buffers.; 978 if (fOnfileObject && TestBit(kOwnOnfileObj)) {; 979 delete fOnfileObject;; 980 fOnfileObject = nullptr;; 981 }; 982 ResetAddress();; 983 ; 984 delete[] fBranchOffset;; 985 fBranchOffset = nullptr;; 986 ; 987 fInfo = nullptr;; 988 fBranchCount2 = nullptr;; 989 fBranchCount = nullptr;; 990 ; 991 if (fType == 4 || fType == 0) {; 992 // Only the top level TBranchElement containing an STL container,; 993 // owns the collectionproxy.; 994 delete fCollProxy;; 995 }; 996 fCollProxy = nullptr;; 997 ; 998 delete fReadActionSequence;; 999 delete fFillActionSequence;; 1000 delete fIterators;; 1001 delete fWriteIterators;; 1002 delete fPtrIterators;; 1003}; 1004 ; 1005//; 1006// This function is located here to allow inlining by the optimizer.; 1007//; 1008////////////////////////////////////////////////////////////////////////////////; 1009/// Get streamer info for the branch class.; 1010 ; 1011inline TStreamerInfo* TBranchElement::GetInfoImp() const; 1012{; 1013 // Note: we need to find a way to reduce the complexity of; 1014 // this often executed condition.; 1015 if (!fInfo || (fInfo && (!fInit || !fInfo->IsCompiled()))) {; 1016 const_cast<TBranchElement*>(this)->InitInfo();; 1017 }; 1018 return fInfo;; 1019}; 1020 ; 1021////////////////////////////////////////////////////////////////////////////////; 1022/// Get streamer info for the branch class.; 1023 ; 1024TStreamerInfo* TBranchElement::GetInfo() const; 1025{; 1026 return GetInfoImp();; 1027}; 1028 ; 1029////////////////////////////////////////////////////////////////////////////////; 1030/// Browse the branch content.; 1031 ; 1032void TBranchElement::Browse(TBrowser* b); 1033{; 1034 Int_t nbranches = fBranches.GetEntriesFast();; 1035 if (nbranches > 0) {; 1036 TList persistentBranches;; 1037 TBranch* branch=nullptr;; 1038 TIter iB(&fBranches);; 1039 while((branch=(TBranch*)iB())) {; 1040 if (branch->IsFolder()) persistentBranches.Add(branch);; 1041 else {; 1042 // only show branches correspondi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:35601,reduce,reduce,35601,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['reduce'],['reduce']
Energy Efficiency,"llocated by us, but owned by the caller: TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = 0;; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; TBranchElementA Branch for the case of an object.Definition TBranchElement.h:39; TBranch::TTreefriend class TTreeDefinition TBranch.h:99; TBranch::FillInt_t Fill()Definition TBranch.h:205; forfor(Int_t i=0;i< n;i++)Definition legend1.C:18; Notice that the only difference between this example and the following example is that the event pointer is zero when the branch is created.; An example of a branch with an object allocated and owned by the caller: TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = new Event();; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;; If AutoDelete is on (see TBranch::SetAutoDelete), the top level objet will be deleted and recreate each time an entry is read, whether or not the TTree owns the object. ; Reimplemented from TBranch.; Definition at line 4962 of file TBranchElement.cxx. ◆ SetAddressImpl(). void TBranchElement::SetAddressImpl ; (; void * ; addr, . bool ; implied . ). overrideprotectedvirtual . See TBranchElement::SetAddress. ; If implied is true, we do not over-ride existing address for sub-branches. ; Reimplemented from TBranch.; Definition at line 4970 of file TBranchElement.cxx. ◆ SetBasketSize(). void TBranchElement::SetBasketSize ; (; Int_t ; buffsize).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchElement.html:69739,allocate,allocated,69739,doc/master/classTBranchElement.html,https://root.cern,https://root.cern/doc/master/classTBranchElement.html,1,['allocate'],['allocated']
Energy Efficiency,"lly, the square error in; the dependent quantity, to the test sample to be used for the; test of the parameterization.; This sample needn't be representive of the problem at hand.; Please note, that if no error is given Poisson statistics is; assumed and the square error is set to the value of dependent; quantity. See also the; class description. void Browse(TBrowser* b); Browse the TMultiDimFit object in the TBrowser. void Clear(Option_t* option = """"); Clear internal structures and variables. Double_t Eval(const Double_t* x, const Double_t* coeff = 0) const; Evaluate parameterization at point x. Optional argument coeff is; a vector of coefficients for the parameterisation, fNCoefficients; elements long. Double_t EvalError(const Double_t* x, const Double_t* coeff = 0) const; Evaluate parameterization error at point x. Optional argument coeff is; a vector of coefficients for the parameterisation, fNCoefficients; elements long. Double_t EvalControl(const Int_t* powers) const; PRIVATE METHOD:; Calculate the control parameter from the passed powers. Double_t EvalFactor(Int_t p, Double_t x) const; PRIVATE METHOD:; Evaluate function with power p at variable value x. void FindParameterization(Option_t* option = """"); Find the parameterization. Options:; None so far. For detailed description of what this entails, please refer to the; class description. void Fit(Option_t* option = """"); Try to fit the found parameterisation to the test sample. Options; M use Minuit to improve coefficients. Also, refer to; class description. TMultiDimFit* Instance(); Return the static instance. void MakeCandidates(); PRIVATE METHOD:; Create list of candidate functions for the parameterisation. See; also; class description. Double_t MakeChi2(const Double_t* coeff = 0); Calculate Chi square over either the test sample. The optional; argument coeff is a vector of coefficients to use in the; evaluation of the parameterisation. If coeff == 0, then the found; coefficients is used.; Used my MINUIT for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:27120,power,powers,27120,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,20,['power'],['powers']
Energy Efficiency,"load . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome About ROOT. ROOT is a framework for data processing, born at CERN, at the heart of the research on high-energy physics. Every day, thousands of physicists use ROOT applications to analyze their data or to perform simulations. With ROOT you can:. Save data You can save your data (and any C++ object) in a compressed binary form in a ROOT file. The object format is also saved in the same file: the ROOT files are self-descriptive. Even in the case the source files describing the data model are not available, the information contained in a ROOT file is be always readable. ROOT provides a data structure, the tree, that is extremely powerful for fast access of huge amounts of data - orders of magnitude faster than accessing a normal file.; Access data Data saved into one or several ROOT files can be accessed from your PC, from the web and from large-scale file delivery systems used e.g. in the GRID. ROOT trees spread over several files can be chained and accessed as a unique object, allowing for loops over huge amounts of data.; Mine data Powerful mathemat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/about-root.html:1949,energy,energy,1949,d/about-root.html,https://root.cern,https://root.cern/d/about-root.html,1,['energy'],['energy']
Energy Efficiency,"loaded function ;  CTListOfFunctionsIterIterator for TListOfFunctions ;  CTListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfTypesA collection of TDataType designed to hold the typedef information and numerical type information ;  CTLockFileA scoped lock based on files ;  CTLockGuard;  CTLockPathPath locking class allowing shared and exclusive locks ;  CTLockPathGuard;  ►CTLorentzRotationDescribes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ;  CTLorentzRotationRow;  CTLorentzVectorTLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E) ;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries) ;  CTMapFileThis class implements a shared memory region mapped to a file ;  CTMapIterIterator of map ;  CTMapRecKeep track of an object in the mapped file ;  CTMarkerManages Markers ;  CTMarker3DBoxA special 3-D marker designed for event display ;  CTMaterialManages a detector material ;  CTMathTextTo draw TeX Mathematical Formula ;  CTMatrixDEigenTMatrixDEigen ;  CTMatrixDSymEigenTMatrixDSymEigen ;  CTMatrixTTMatrixT ;  CTMatrixTBaseLinear Algebra Package ;  CTMatrixTColumn;  CTMatrixTColumn_const;  CTMatrixTDiag;  CTMatrixTDiag_const;  CTMatrixTFlat;  CTMatrixTFlat_const;  CTMatrixTLazyTemplates of Lazy Matrix classes ;  CTMatrixTRow;  CTMatrixTRow_const;  CTMatrixTSparseTMatrixTSparse ;  CTMatrixTSparseDiag;  CTMatrixTSparseDiag_const;  CTMatrixTSparseRow;  CTMatrixTSparseRow_const;  CTMatrixTSub;  CTMatrixTSub_const;  CTMatrixTSymTMatrixTSym ;  CTMatrixTSymLazy;  CTMCImpMutexAutoLockRealization of TMCTempla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:177173,efficient,efficient,177173,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,4,['efficient'],['efficient']
Energy Efficiency,"loaded function ;  CTListOfFunctionsIterIterator for TListOfFunctions ;  CTListOfFunctionTemplatesA collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function ;  CTListOfTypesA collection of TDataType designed to hold the typedef information and numerical type information ;  CTLockFileA scoped lock based on files ;  CTLockGuard;  CTLockPathPath locking class allowing shared and exclusive locks ;  CTLockPathGuard;  ►CTLorentzRotationDescribes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ;  CTLorentzRotationRow;  CTLorentzVectorTLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E) ;  CTMacOSXSystem;  CTMacroClass supporting a collection of lines with C++ code ;  CTMakeProject;  CTMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries) ;  CTMapFileThis class implements a shared memory region mapped to a file ;  CTMapIterIterator of map ;  CTMapRecKeep track of an object in the mapped file ;  CTMarkerManages Markers ;  CTMarker3DBoxA special 3-D marker designed for event display ;  CTMaterialManages a detector material ;  CTMathTextTo draw TeX Mathematical Formula ;  CTMatrixDEigenTMatrixDEigen ;  CTMatrixDSymEigenTMatrixDSymEigen ;  CTMatrixTTMatrixT ;  CTMatrixTBaseLinear Algebra Package ;  CTMatrixTColumn;  CTMatrixTColumn_const;  CTMatrixTDiag;  CTMatrixTDiag_const;  CTMatrixTFlat;  CTMatrixTFlat_const;  CTMatrixTLazyTemplates of Lazy Matrix classes ;  CTMatrixTRow;  CTMatrixTRow_const;  CTMatrixTSparseTMatrixTSparse ;  CTMatrixTSparseDiag;  CTMatrixTSparseDiag_const;  CTMatrixTSparseRow;  CTMatrixTSparseRow_const;  CTMatrixTSub;  CTMatrixTSub_const;  CTMatrixTSymTMatrixTSym ;  CTMatrixTSymLazy;  CTMCParticleThis class serves as a data stor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:168648,efficient,efficient,168648,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['efficient'],['efficient']
Energy Efficiency,"loat_t GetMargin() const { return fMargin; }; 52 Int_t GetNColumns() const { return fNColumns; }; 53 Int_t GetNRows() const;; 54 virtual void InsertEntry( const char* objectName = """",const char* label = """",; 55 Option_t* option = ""lpf"" ); // *MENU*; 56 void Paint( Option_t* option = """" ) override;; 57 virtual void PaintPrimitives();; 58 void Print( Option_t* option = """" ) const override;; 59 void RecursiveRemove(TObject *obj) override;; 60 void SavePrimitive(std::ostream &out, Option_t *option = """") override;; 61 void SetDefaults() { fEntrySeparation = 0.1f; fMargin = 0.25f; fNColumns = 1; fColumnSeparation = 0.0f; }; 62 void SetColumnSeparation( Float_t columnSeparation ); 63 { fColumnSeparation = columnSeparation; } // *MENU*; 64 virtual void SetEntryLabel( const char* label ); // *MENU*; 65 virtual void SetEntryOption( Option_t* option ); // *MENU*; 66 void SetEntrySeparation( Float_t entryseparation ); 67 { fEntrySeparation = entryseparation; } // *MENU*; 68 virtual void SetHeader( const char *header = """", Option_t *option = """" ); // *MENU*; 69 void SetMargin( Float_t margin ) { fMargin = margin; } // *MENU*; 70 void SetNColumns( Int_t nColumns ); // *MENU*; 71 ; 72protected:; 73 TList *fPrimitives{nullptr}; ///< List of TLegendEntries; 74 Float_t fEntrySeparation; ///< Separation between entries, as a fraction of; 75 ///< The space allocated to one entry.; 76 ///< Typical value is 0.1.; 77 Float_t fMargin; ///< Fraction of total width used for symbol; 78 Int_t fNColumns; ///< Number of columns in the legend; 79 Float_t fColumnSeparation; ///< Separation between columns, as a fraction of; 80 ///< The space allowed to one column; 81 ; 82 ClassDefOverride(TLegend,3) // Legend of markers/lines/boxes to represent obj's; 83};; 84 ; 85#endif; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassDefOverride#define ClassDefOverride(nam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLegend_8h_source.html:3474,allocate,allocated,3474,doc/master/TLegend_8h_source.html,https://root.cern,https://root.cern/doc/master/TLegend_8h_source.html,1,['allocate'],['allocated']
Energy Efficiency,"loat_t>): bin content held by a Float_t,; THnL (typedef for THnT<Long64_t>): bin content held by a Long64_t,; THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; THnC (typedef for THnT<Char_t>): bin content held by a Char_t,; They take name and title, the number of dimensions, and for each dimension the number of bins, the minimal, and the maximal value on the dimension's axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnF hn(""hn"", ""hn"", 2, bins, xmin, xmax);; ; Filling; A THn is filled just like a regular histogram, using THn::Fill(x, weight), where x is a n-dimensional Double_t value. To take errors into account, Sumw2() must be called before filling the histogram. Storage is allocated when the first bin content is stored. Projections; The dimensionality of a THn can be reduced by projecting it to 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or a THn. See the Projection() members. To only project parts of the histogram, call hn->GetAxis(12)->SetRange(from_bin, to_bin);; ; Conversion from other histogram classes; The static factory function THn::CreateHn() can be used to create a THn from a TH1, TH2, TH3, THnSparse and (for copying) even from a THn. The created THn will have compatble storage type, i.e. calling CreateHn() on a TH2F will create a THnF. ; Definition at line 30 of file THn.h. Public Member Functions;  ~THn () override;  Destruct a THn. ;  ; void AddBinContent (const Int_t *idx, Double_t v=1.);  Forwards to THnBase::SetBinContent(). ;  ; void AddBinContent (Long64_t bin, Double_t v=1.) override;  ; void AddBinError2 (Long64_t bin, Double_t e2) override;  ; ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectAxisRange) const override;  Create an iterator over all bins. Public interface is THnIter. ;  ; void FillBin (Long64_t bin, Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHn.html:1876,reduce,reduced,1876,doc/master/classTHn.html,https://root.cern,https://root.cern/doc/master/classTHn.html,1,['reduce'],['reduced']
Energy Efficiency,"locates the array with a size given by level. TGeoBranchArray * MakeInstance(size_t maxlevel); Make an instance of the class which allocates the node array. To be; released using ReleaseInstance. If addr is non-zero, the user promised that; addr contains at least that many bytes: size_t needed = SizeOf(maxlevel);. TGeoBranchArray * MakeInstanceAt(size_t maxlevel, void* addr); Make an instance of the class which allocates the node array. To be; released using ReleaseInstance. If addr is non-zero, the user promised that; addr contains at least that many bytes: size_t needed = SizeOf(maxlevel);. TGeoBranchArray * MakeCopy(const TGeoBranchArray& other); Make a copy of a branch array at the location (if indicated). TGeoBranchArray * MakeCopyAt(const TGeoBranchArray& other, void* addr); Make a copy of a branch array at the location (if indicated). void CopyTo(TGeoBranchArray* dest); Raw memcpy of the branch array content to an existing destination. void ReleaseInstance(TGeoBranchArray* obj); Releases the space allocated for the object. void UpdateArray(size_t nobj); Updates the internal addresses for n contiguous objects which have the same; fMaxLevel; Updates the internal addresses for n contiguous objects which have the same fMaxLevel. TGeoBranchArray(const TGeoBranchArray& ); Copy constructor. Not callable anymore. Use TGeoBranchArray::MakeCopy instead. TGeoBranchArray& operator=(const TGeoBranchArray& ); Assignment. Not valid anymore. Use TGeoBranchArray::MakeCopy instead. void AddLevel(Int_t dindex); Add and extra daughter to the current path array. No validity check performed !. Long64_t BinarySearch(Long64_t n, const TGeoBranchArray** array, TGeoBranchArray* value); Binary search in an array of n pointers to branch arrays, to locate value.; Returns element index or index of nearest element smaller than value. Int_t Compare(const TObject* obj) const; Compare with other object of same type. Returns -1 if this is smaller (first; smaller array value prevails), 0 if equa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoBranchArray.html:8407,allocate,allocated,8407,root/html534/TGeoBranchArray.html,https://root.cern,https://root.cern/root/html534/TGeoBranchArray.html,4,['allocate'],['allocated']
Energy Efficiency,"lon > 1. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void TMatrixTSparse<Element> Allocate(Int_t nrows, Int_t ncols, Int_t row_lwb = 0, Int_t col_lwb = 0, Int_t init = 0, Int_t nr_nonzeros = 0); Allocate new matrix. Arguments are number of rows, columns, row lowerbound (0 default); and column lowerbound (0 default), 0 initialization flag and number of non-zero; elements (only relevant for sparse format). TMatrixTBase<Element> &TMatrixTSparse<Element> InsertRow(Int_t row, Int_t col, const double* v, Int_t n = -1); Insert in row rown, n elements of array v at column coln. void TMatrixTSparse<Element> ExtractRow(Int_t row, Int_t col, double* v, Int_t n = -1) const; Store in array v, n matrix elements of row rown starting at column coln. void TMatrixTSparse<Element> AMultBt(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr); General matrix multiplication. Create a matrix C such that C = A * B'.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMultBt(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr); General matrix multiplication. Create a matrix C such that C = A * B'.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMultBt(const TMatrixT<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr); General matrix multiplication. Create a matrix C such that C = A * B'.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> APlusB(const TMatrixTSparse<Element> &a,const TMatrixTSparse<Element> &b,Int_t constr); General matrix addition. Create a matrix C such that C = A + B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> APlusB(const TMatrixTSparse<Element> &a,const TMatrixT<Element> &b,Int_t constr); General matrix addition. Create a matrix C such that C = A + B.; Note, matrix C is allocated for constr=1. void TMatrixTSparse<Element> AMinusB(const TMatrixTSparse<Element> &a,const TMatrixT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSparse_double_.html:17753,allocate,allocated,17753,root/html528/TMatrixTSparse_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSparse_double_.html,6,['allocate'],['allocated']
Energy Efficiency,"lon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:4680,power,power,4680,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['power'],['power']
Energy Efficiency,"lone (identical) objects.Definition TClonesArray.h:29; To reduce the number of call to the constructor (especially useful if the user class requires memory allocation), the object can be added (and constructed when needed) using ConstructedAt which only calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; Note: the only supported way to add objects to a TClonesArray is via the new with placement method or the ConstructedAt method. The other Add() methods ofTObjArray and its base classes are not allowed.; Considering that a new/delete costs about 70 mus on a 300 MHz HP, O(10^9) new/deletes will save about 19 hours. NOTE 1; C/C++ offers the possibility of allocating and deleting memory. Forgetting to delete allocated memory is a programming error called a ""memory leak"", i.e. the memory of your process grows and eventually your program crashes. Even if you always delete the allocated memory, the recovered space may not be efficiently reused. The process knows that there are portions of free memory, but when you allocate it again, a fresh piece of memory is grabbed. Your program is free from semantic errors, but the total memory of your process still grows, because your program's memory is full of ""holes"" which reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in terms of CPU time.; Without entering into technical details, TClonesArray allows you to ""reuse"" the same portion of memory for new/delete avoiding memory fragmentation and memory growth and improving the performance by orders of magnitude. Every time the memory of the TClonesArray has to be reused, the Clear() method is used. To provide its benefits, each TClonesArray must be a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:2425,allocate,allocated,2425,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['allocate'],['allocated']
Energy Efficiency,lones! List of cloned trees which share our addresses; Long64_t*TTree::fClusterRangeEnd[fNClusterRange] Last entry of a cluster range.; Long64_t*TTree::fClusterSize[fNClusterRange] Number of entries in each cluster for a given range.; Int_tfCurrentEntry; TStringfDB; Int_tTTree::fDebug! Debug level; Long64_tTTree::fDebugMax! Last entry number to debug; Long64_tTTree::fDebugMin! First entry number to debug; Int_tTTree::fDefaultEntryOffsetLenInitial Length of fEntryOffset table in the basket buffers; TDirectory*TTree::fDirectory! Pointer to directory holding this tree; Long64_tTTree::fEntriesNumber of entries; TEntryList*TTree::fEntryList! Pointer to event selection list (if one); Long64_tTTree::fEstimateNumber of entries to estimate histogram limits; TEventList*TTree::fEventList! Pointer to event selection list (if one); Int_tTTree::fFileNumber! current file number (if file extensions); Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Long64_tTTree::fFlushedBytesNumber of autoflushed bytes; UInt_tTTree::fFriendLockStatus! Record which method is locking the friend recursion; TList*TTree::fFriendspointer to list of friend elements; TArrayITTree::fIndexIndex of sorted values; TArrayDTTree::fIndexValuesSorted index values; TStringfInsertQuery; TObjArrayTTree::fLeavesDirect pointers to individual branch leaves; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_tTTree::fMakeClass! not zero when processing code generated by MakeClass; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTTree::fMaxClusterRange! Memory allocated for the cluster range.; Long64_tTTree::fMaxEntriesMaximum number of entries in case of circular buffers; Long64_tTTree::fMaxEntryLoopMaximum number of entries to process; Long64_tTTree::fMaxVirtualSizeMaximum total size of buffers kept in memory; Int_tTTr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeSQL.html:22579,allocate,allocated,22579,root/html530/TTreeSQL.html,https://root.cern,https://root.cern/root/html530/TTreeSQL.html,9,['allocate'],['allocated']
Energy Efficiency,"loop by parallelizing over clusters of entries; TTree::GetEntry reads multiple branches in parallel; TTree::FlushBaskets writes multiple baskets to disk in parallel; TTreeCacheUnzip decompresses the baskets contained in a TTreeCache in parallel; THx::Fit performs in parallel the evaluation of the objective function over the data; TMVA::DNN trains the deep neural networks in parallel; TMVA::BDT trains the classifier in parallel and multiclass BDTs are evaluated in parallel. EnableImplicitMT calls in turn EnableThreadSafety. The 'numthreads' parameter allows to control the number of threads to be used by the implicit multi-threading. However, this parameter is just a hint for ROOT: it will try to satisfy the request if the execution scenario allows it. For example, if ROOT is configured to use an external scheduler, setting a value for 'numthreads' might not have any effect. The maximum number of threads can be influenced by the environment variable ROOT_MAX_THREADS: export ROOT_MAX_THREADS=2 will try to set the maximum number of active threads to 2, if the scheduling library (such as tbb) ""permits"".; NoteUse DisableImplicitMT() to disable multi-threading (some locks will remain in place as described in EnableThreadSafety()). EnableImplicitMT(1) creates a thread-pool of size 1. ; Definition at line 539 of file TROOT.cxx. ◆ EnableThreadSafety(). void ROOT::EnableThreadSafety ; (; ). Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ; Enables the global mutex to make ROOT thread safe/aware.; The following becomes safe:; concurrent construction and destruction of TObjects, including the ones registered in ROOT's global lists (e.g. gROOT->GetListOfCleanups(), gROOT->GetListOfFiles()); concurrent usage of different ROOT objects from different threads, including ones with global state (e.g. TFile, TTree, TChain) with the exception of graphics classes (e.g. TCanvas); concurrent calls to ROOT's type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT.html:32845,schedul,scheduling,32845,doc/master/namespaceROOT.html,https://root.cern,https://root.cern/doc/master/namespaceROOT.html,3,['schedul'],['scheduling']
Energy Efficiency,"lor %hd, %hd, %hd"",; 3003 xcol[i].red, xcol[i].green, xcol[i].blue);; 3004 // assumes that in case of failure xcol[i].pixel is not changed; 3005 }; 3006 ; 3007 gCws->fNewColors = new ULong_t[ncolors];; 3008 gCws->fNcolors = ncolors;; 3009 ; 3010 for (i = 0; i < ncolors; i++); 3011 gCws->fNewColors[i] = xcol[i].pixel;; 3012 ; 3013 delete [] xcol;; 3014}; 3015 ; 3016////////////////////////////////////////////////////////////////////////////////; 3017/// Returns index in orgcolors (and fNewColors) for pixel.; 3018 ; 3019Int_t TGX11::FindColor(ULong_t pixel, ULong_t *orgcolors, Int_t ncolors); 3020{; 3021 for (int i = 0; i < ncolors; i++); 3022 if (pixel == orgcolors[i]) return i;; 3023 ; 3024 Error(""FindColor"", ""did not find color, should never happen!"");; 3025 ; 3026 return 0;; 3027}; 3028 ; 3029////////////////////////////////////////////////////////////////////////////////; 3030/// Set color intensities for given color index.; 3031///; 3032/// \param [in] cindex : color index; 3033/// \param [in] r,g,b : red, green, blue intensities between 0.0 and 1.0; 3034 ; 3035void TGX11::SetRGB(int cindex, float r, float g, float b); 3036{; 3037 if (fColormap) {; 3038 RXColor xcol;; 3039 xcol.red = (UShort_t)(r * kBIGGEST_RGB_VALUE);; 3040 xcol.green = (UShort_t)(g * kBIGGEST_RGB_VALUE);; 3041 xcol.blue = (UShort_t)(b * kBIGGEST_RGB_VALUE);; 3042 xcol.flags = DoRed | DoGreen | DoBlue;; 3043 XColor_t &col = GetColor(cindex);; 3044 if (col.fDefined) {; 3045 // if color is already defined with same rgb just return; 3046 if (col.fRed == xcol.red && col.fGreen == xcol.green &&; 3047 col.fBlue == xcol.blue); 3048 return;; 3049 col.fDefined = kFALSE;; 3050 if (fRedDiv == -1); 3051 XFreeColors((Display*)fDisplay, fColormap, &col.fPixel, 1, 0);; 3052 }; 3053 if (AllocColor(fColormap, &xcol)) {; 3054 col.fDefined = kTRUE;; 3055 col.fPixel = xcol.pixel;; 3056 col.fRed = xcol.red;; 3057 col.fGreen = xcol.green;; 3058 col.fBlue = xcol.blue;; 3059 }; 3060 }; 3061}; 3062 ; 3063//////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:101140,green,green,101140,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"lors[8].blue = 15;; 75 colors[ 9].red = 20; colors[ 9].green = 184; colors[9].blue = 20;; 76 colors[10].red = 71; colors[10].green = 235; colors[10].blue = 71;; 77 colors[11].red = 117; colors[11].green = 240; colors[11].blue = 117;; 78 colors[12].red = 15; colors[12].green = 15; colors[12].blue = 138;; 79 colors[13].red = 20; colors[13].green = 20; colors[13].blue = 184;; 80 colors[14].red = 71; colors[14].green = 71; colors[14].blue = 235;; 81 colors[15].red = 117; colors[15].green = 117; colors[15].blue = 240;; 82 colors[16].red = 138; colors[16].green = 138; colors[16].blue = 15;; 83 colors[17].red = 184; colors[17].green = 184; colors[17].blue = 20;; 84 colors[18].red = 235; colors[18].green = 235; colors[18].blue = 71;; 85 colors[19].red = 240; colors[19].green = 240; colors[19].blue = 117;; 86 colors[20].red = 138; colors[20].green = 15; colors[20].blue = 138;; 87 colors[21].red = 184; colors[21].green = 20; colors[21].blue = 184;; 88 colors[22].red = 235; colors[22].green = 71; colors[22].blue = 235;; 89 colors[23].red = 240; colors[23].green = 117; colors[23].blue = 240;; 90 colors[24].red = 15; colors[24].green = 138; colors[24].blue = 138;; 91 colors[25].red = 20; colors[25].green = 184; colors[25].blue = 184;; 92 colors[26].red = 71; colors[26].green = 235; colors[26].blue = 235;; 93 colors[27].red = 117; colors[27].green = 240; colors[27].blue = 240;; 94 }; 95 ; 96 ; 97 /*; 98 * Allocate memory for segments; 99 */; 100 ; 101 if (gSize3D.numSegs) {; 102 segs = (segment *) calloc (gSize3D.numSegs, sizeof (segment));; 103 if (!segs) {; 104 puts (""Unable to allocate memory for segments !"");; 105 ret = 0;; 106 }; 107 }; 108 ; 109 ; 110 /*; 111 * Allocate memory for polygons; 112 */; 113 ; 114 if (gSize3D.numPolys) {; 115 polys = (polygon *) calloc(gSize3D.numPolys, sizeof (polygon));; 116 if (!polys) {; 117 puts (""Unable to allocate memory for polygons !"");; 118 ret = 0;; 119 }; 120 }; 121 ; 122 /*; 123 * In case of error, free allocated memory; 124 */; 125 ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/X3DBuffer_8c_source.html:3264,green,green,3264,doc/master/X3DBuffer_8c_source.html,https://root.cern,https://root.cern/doc/master/X3DBuffer_8c_source.html,1,['green'],['green']
Energy Efficiency,"lot*plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; virtual voidTObject::Pop(); virtual voidRooAbsData::Print(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidprintArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(RooCmdArg arg1, RooCmdArg arg2 = RooCmdArg(), RooCmdArg arg3 = RooCmdArg(), RooCmdArg arg4 = RooCmdArg(), RooCmdArg arg5 = RooCmdArg(), RooCmdArg arg6 = RooCmdArg(), RooCmdArg arg7 = RooCmdArg(), RooCmdArg arg8 = RooCmdArg()); voidremoveSelfFromDir(); virtual voidreset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidset(Double_t weight, Double_t wgtErr = -1); voidset(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1); voidset(const RooArgSet& row, Double_t weight,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataHist.html:9083,reduce,reduce,9083,root/html526/RooDataHist.html,https://root.cern,https://root.cern/root/html526/RooDataHist.html,1,['reduce'],['reduce']
Energy Efficiency,"lot*plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; virtual voidTObject::Pop(); virtual voidRooAbsData::Print(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidprintArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); voidremoveSelfFromDir(); virtual voidreset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidset(Double_t weight, Double_t wgtErr = -1); voidset(const RooArgSet& row, Double_t w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooDataHist.html:9458,reduce,reduce,9458,root/html530/RooDataHist.html,https://root.cern,https://root.cern/root/html530/RooDataHist.html,1,['reduce'],['reduce']
Energy Efficiency,"lot*plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; virtual voidTObject::Pop(); virtual voidRooAbsData::Print(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidprintArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); voidremoveSelfFromDir(); virtual voidreset(); voidTObject::ResetBit(UInt_t f); voidRooAbsData::resetBuffers(); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; RooDataHist(); RooDataHist(const RooDataHist& other, const char* newname = 0); RooDataHist(const char* name, const char* title, const RooArgSet& vars, const char* binningName = 0); RooDataHist(const char* name, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataHist.html:8547,reduce,reduce,8547,root/html602/RooDataHist.html,https://root.cern,https://root.cern/root/html602/RooDataHist.html,4,['reduce'],['reduce']
Energy Efficiency,"lot*plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; virtual voidTObject::Pop(); virtual voidRooAbsData::Print(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidprintArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); static Bool_tRooAbsData::releaseVars(RooAbsData*); voidremoveSelfFromDir(); virtual voidreset(); voidTObject::ResetBit(UInt_t f); voidRooAbsData::resetBuffers(); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidset(Double_t weight, Double_t wgtErr = -1); voidset(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDataHist.html:9554,reduce,reduce,9554,root/html532/RooDataHist.html,https://root.cern,https://root.cern/root/html532/RooDataHist.html,4,['reduce'],['reduce']
Energy Efficiency,"lot*plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; virtual voidTObject::Pop(); virtual voidRooAbsData::Print(Option_t* options = 0) const; virtual voidRooPrintable::printAddress(ostream& os) const; virtual voidprintArgs(ostream& os) const; virtual voidRooAbsData::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsData::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsData::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidprintValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooAbsData*RooAbsData::reduce(const char* cut); RooAbsData*RooAbsData::reduce(const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const char* cut = 0); RooAbsData*RooAbsData::reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); RooAbsData*RooAbsData::reduce(const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); voidremoveSelfFromDir(); virtual voidreset(); voidTObject::ResetBit(UInt_t f); RooRealVar*RooAbsData::rmsVar(RooRealVar& var, const char* cutSpec = 0, const char* cutRange = 0) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidset(Double_t weight, Double_t wgtErr = -1); voidset(const RooArgSet& row, Double_t weight, Double_t wgtE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDataHist.html:9139,reduce,reduce,9139,root/html528/RooDataHist.html,https://root.cern,https://root.cern/root/html528/RooDataHist.html,1,['reduce'],['reduce']
Energy Efficiency,"low and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms . Definition at line 8062 of file TH1.cxx. ◆ AutoP2FindLimits(). Int_t TH1::AutoP2FindLimits ; (; Double_t ; xmi, . Double_t ; xma . ). protectedvirtual . Buffer-based estimate of the histogram range using the power of 2 algorithm. ; Used by the autobin power of 2 algorithm.; Works on arguments (min and max from fBuffer) and internal inputs: fXmin, fXmax, NBinsX (from fXaxis), ... Result save internally in fXaxis.; Overloaded by TH2 and TH3.; Return -1 if internal inputs are inconsistent, 0 otherwise. ; Definition at line 1343 of file TH1.cxx. ◆ AutoP2GetBins(). Int_t TH1::AutoP2GetBins ; (; Int_t ; n). inlinestaticprotected . Auxiliary function to get the next power of 2 integer value larger then n. ; Used by the autobin power of 2 algorithm ; Definition at line 1321 of file TH1.cxx. ◆ AutoP2GetPower2(). Double_t TH1::AutoP2GetPower2 ; (; Double_t ; x, . Bool_t ; next = kTRUE . ). inlinestaticprotected . Auxiliary function to get the power of 2 next (larger) or previous (smaller) a given x. ; next = kTRUE : next larger next = kFALSE : previous smaller; Used by the autobin power of 2 algorithm ; Definition at line 1308 of file TH1.cxx. ◆ AxisChoice(). Int_t TH1::AxisChoice ; (; Option_t * ; axis); const. protected . Choose an axis according to ""axis"". ; Definition at line 14 of file Haxis.cxx. ◆ Browse(). void TH1::Browse ; (; TBrowser * ; b). overridevirtual . Browse the Histogram object. ; Reimplemented from TObject.; Definition at line 762 of file TH1.cxx. ◆ BufferEmpty(). Int_t TH1::BufferEmpty ; (; Int_t ; action = 0). virtual . Fill histogram with all entries in the buffer. . action = -1 histogram is reset and refilled from the buffer (called by THistPainter::Paint); action = 0 histogram is reset and filled from th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:81827,power,power,81827,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['power'],['power']
Energy Efficiency,"lowing table shows some timings (in nanoseconds/call); for the random numbers obtained using an Intel Pentium 3.0 GHz running Linux; and using the gcc 3.2.3 compiler. TRandom 34 ns/call (BAD Generator); TRandom1 242 ns/call; TRandom2 37 ns/call; TRandom3 45 ns/call. The following basic Random distributions are provided:. -Exp(tau); -Integer(imax); -Gaus(mean,sigma); -Rndm(); -Uniform(x1); -Landau(mpv,sigma); -Poisson(mean); -Binomial(ntot,prob). Random numbers distributed according to 1-d, 2-d or 3-d distributions. contained in TF1, TF2 or TF3 objects.; For example, to get a random number distributed following abs(sin(x)/x)*sqrt(x); you can do :; TF1 *f1 = new TF1(""f1"",""abs(sin(x)/x)*sqrt(x)"",0,10);; double r = f1->GetRandom();; or you can use the UNURAN package. You need in this case to initialize UNURAN; to the function you would like to generate.; TUnuran u;; u.Init(TUnuranDistrCont(f1));; double r = u.Sample();. The techniques of using directly a TF1,2 or 3 function is powerful and; can be used to generate numbers in the defined range of the function.; Getting a number from a TF1,2,3 function is also quite fast.; UNURAN is a powerful and flexible tool which containes various methods for; generate random numbers for continuous distributions of one and multi-dimension.; It requires some set-up (initialization) phase and can be very fast when the distribution; parameters are not changed for every call. The following table shows some timings (in nanosecond/call); for basic functions, TF1 functions and using UNURAN obtained running; the tutorial math/testrandom.C; Numbers have been obtained on an Intel Xeon Quad-core Harpertown (E5410) 2.33 GHz running; Linux SLC4 64 bit and compiled with gcc 3.4. Distribution nanoseconds/call; TRandom TRandom1 TRandom2 TRandom3; Rndm.............. 5.000 105.000 7.000 10.000; RndmArray......... 4.000 104.000 6.000 9.000; Gaus.............. 36.000 180.000 40.000 48.000; Rannor............ 118.000 220.000 120.000 124.000; Landau.......",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRandom.html:2098,power,powerful,2098,root/html528/TRandom.html,https://root.cern,https://root.cern/root/html528/TRandom.html,10,['power'],['powerful']
Energy Efficiency,"lready constructed page sink; 44std::unique_ptr<RNTupleWriter>; 45CreateRNTupleWriter(std::unique_ptr<RNTupleModel> model, std::unique_ptr<Internal::RPageSink> sink);; 46} // namespace Internal; 47 ; 48// clang-format off; 49/**; 50\class ROOT::Experimental::RNTupleWriter; 51\ingroup NTuple; 52\brief An RNTuple that gets filled with entries (data) and writes them to storage; 53 ; 54An output ntuple can be filled with entries. The caller has to make sure that the data that gets filled into an ntuple; 55is not modified for the time of the Fill() call. The fill call serializes the C++ object into the column format and; 56writes data into the corresponding column page buffers. Writing of the buffers to storage is deferred and can be; 57triggered by FlushCluster() or by destructing the writer. On I/O errors, an exception is thrown.; 58*/; 59// clang-format on; 60class RNTupleWriter {; 61 friend RNTupleModel::RUpdater;; 62 friend std::unique_ptr<RNTupleWriter>; 63 Internal::CreateRNTupleWriter(std::unique_ptr<RNTupleModel>, std::unique_ptr<Internal::RPageSink>);; 64 ; 65private:; 66 /// The page sink's parallel page compression scheduler if IMT is on.; 67 /// Needs to be destructed after the page sink (in the fill context) is destructed and so declared before.; 68 std::unique_ptr<Internal::RPageStorage::RTaskScheduler> fZipTasks;; 69 RNTupleFillContext fFillContext;; 70 Detail::RNTupleMetrics fMetrics;; 71 ; 72 NTupleSize_t fLastCommittedClusterGroup = 0;; 73 ; 74 RNTupleWriter(std::unique_ptr<RNTupleModel> model, std::unique_ptr<Internal::RPageSink> sink);; 75 ; 76 RNTupleModel &GetUpdatableModel() { return *fFillContext.fModel; }; 77 Internal::RPageSink &GetSink() { return *fFillContext.fSink; }; 78 ; 79 // Helper function that is called from CommitCluster() when necessary; 80 void CommitClusterGroup();; 81 ; 82 /// Create a writer, potentially wrapping the sink in a RPageSinkBuf.; 83 static std::unique_ptr<RNTupleWriter> Create(std::unique_ptr<RNTupleModel> model,; 84 s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html:2726,schedul,scheduler,2726,doc/master/RNTupleWriter_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8hxx_source.html,1,['schedul'],['scheduler']
Energy Efficiency,"ls for an array of n points x. ; stride1 indicates the stride in the coordinate space while stride2 the stride in dimension space. For 1-dim points : stride1=1, stride2=1 for multi-dim points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n for multi-dim points arranged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1; the confidence interval are returned in the array ci cl is the desired confidence interval value norm is a flag to control if the intervals need to be normalized to the chi2/ndf value The intervals can be corrected optionally using the chi2/ndf value of the fit if a chi2 fit is performed. This has changed since ROOT 6.14, before the interval were corrected by default. ; Definition at line 506 of file FitResult.cxx. ◆ GetCorrelationMatrix(). template<class Matrix > . void ROOT::Fit::FitResult::GetCorrelationMatrix ; (; Matrix & ; mat); const. inline . fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 249 of file FitResult.h. ◆ GetCovarianceMatrix(). template<class Matrix > . void ROOT::Fit::FitResult::GetCovarianceMatrix ; (; Matrix & ; mat); const. inline . fill covariance matrix elements using a generic matrix class implementing operator(i,j) the matrix must be previously allocates with right size (npar * npar) ; Definition at line 235 of file FitResult.h. ◆ GetErrors(). const double * ROOT::Fit::FitResult::GetErrors ; (; ); const. inline . parameter errors (return const pointer) ; Definition at line 164 of file FitResult.h. ◆ GetParameterName(). std::string ROOT::Fit::FitResult::GetParameterName ; (; unsigned int ; ipar); const. inline . get name of parameter (deprecated) ; Definition at line 327 of file FitResult.h. ◆ GetParams(). const double * ROOT::Fit::FitResult::GetParams ; (; ); const. inline . parameter values (return const pointer) ; Definition at line 169 of file FitResult.h. ◆ GlobalC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html:16272,allocate,allocates,16272,doc/master/classROOT_1_1Fit_1_1FitResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitResult.html,1,['allocate'],['allocates']
Energy Efficiency,"ls:; 468/// macros exec1.C and exec2.C.; 469///; 470/// ### Example1 of use of exec1.C; 471///; 472/// ~~~ {.cpp}; 473/// Root > TFile f(""hsimple.root""); 474/// Root > hpx.Draw(); 475/// Root > c1.AddExec(""ex1"","".x exec1.C""); 476/// ~~~; 477///; 478/// At this point you can use the mouse to click on the contour of; 479/// the histogram hpx. When the mouse is clicked, the bin number and its; 480/// contents are printed.; 481///; 482/// ### Example2 of use of exec1.C; 483///; 484/// ~~~ {.cpp}; 485/// Root > TFile f(""hsimple.root""); 486/// Root > hpxpy.Draw(); 487/// Root > c1.AddExec(""ex2"","".x exec2.C""); 488/// ~~~; 489///; 490/// When moving the mouse in the canvas, a second canvas shows the; 491/// projection along X of the bin corresponding to the Y position; 492/// of the mouse. The resulting histogram is fitted with a gaussian.; 493/// A ""dynamic"" line shows the current bin position in Y.; 494/// This more elaborated example can be used as a starting point; 495/// to develop more powerful interactive applications exploiting the C++; 496/// interpreter as a development engine.; 497 ; 498void TPad::AddExec(const char *name, const char *command); 499{; 500 if (!fExecs) fExecs = new TList;; 501 TExec *ex = new TExec(name,command);; 502 fExecs->Add(ex);; 503}; 504 ; 505////////////////////////////////////////////////////////////////////////////////; 506/// Execute the list of Execs when a pad event occurs.; 507 ; 508void TPad::AutoExec(); 509{; 510 if (GetCrosshair()); 511 DrawCrosshair();; 512 ; 513 if (!fExecs); 514 return;; 515 TIter next(fExecs);; 516 while (auto exec = (TExec*)next()); 517 exec->Exec();; 518}; 519 ; 520////////////////////////////////////////////////////////////////////////////////; 521/// Browse pad.; 522 ; 523void TPad::Browse(TBrowser *b); 524{; 525 cd();; 526 if (fPrimitives) fPrimitives->Browse(b);; 527}; 528 ; 529////////////////////////////////////////////////////////////////////////////////; 530/// Build a legend from the graphical object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:15093,power,powerful,15093,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['power'],['powerful']
Energy Efficiency,"lsoOverview of the physics vector library ; Definition at line 49 of file PxPyPzM4D.h. Public Types; typedef ScalarType Scalar;  . Public Member Functions;  PxPyPzM4D ();  Default constructor with x=y=z=m=0. ;  ; template<class CoordSystem > ; constexpr PxPyPzM4D (const CoordSystem &v);  construct from any 4D coordinate system class implementing X(), Y(), X() and M() ;  ;  PxPyPzM4D (const PxPyPzM4D &v);  copy constructor ;  ;  PxPyPzM4D (Scalar px, Scalar py, Scalar pz, Scalar m);  Constructor from x, y , z , m values. ;  ; Scalar E () const;  Energy. ;  ; Scalar E2 () const;  energy squared ;  ; Scalar Et () const;  transverse energy ;  ; Scalar Et2 () const;  transverse energy squared ;  ; Scalar Eta () const;  pseudorapidity ;  ; void GetCoordinates (Scalar &px, Scalar &py, Scalar &pz, Scalar &m) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; Scalar M () const;  ; Scalar M2 () const;  vector magnitude squared (or mass squared) In case of negative mass (spacelike particles return negative values) ;  ; Scalar Mag () const;  ; Scalar Mag2 () const;  ; Scalar Mt () const;  transverse mass ;  ; Scalar Mt2 () const;  transverse mass squared ;  ; void Negate ();  negate the 4-vector - Note that the energy cannot be negate (would need an additional data member) therefore negate will work only on the spatial components. ;  ; bool operator!= (const PxPyPzM4D &rhs) const;  ; template<class AnyCoordSystem > ; PxPyPzM4D & operator= (const AnyCoordSystem &v);  construct from any 4D coordinate system class implementing X(), Y(), X() and M() ;  ; PxPyPzM4D & operator= (const PxPyPzM4D &v);  assignment operator ;  ; bool operator== (const PxPyPzM4D &rhs) const;  Exact equality. ;  ; Scalar P () const;  magnitude of spatial components (magnitude of 3-momentum) ;  ; Scalar P2 () const;  squared magnitude of spatial components ;  ; Scalar Perp () const;  ; Scalar Perp2 () const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html:1496,energy,energy,1496,doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzM4D.html,4,['energy'],['energy']
Energy Efficiency,"lt after deconvolution. We have developed a new high resolution deconvolution algorithm. We have observed that the Gold deconvolution converges to its stable state (solution). It is useless to increase the number of iterations, the result obtained does not change. To continue decreasing the width of peaks, we have found that when the solution reaches its stable state, it is necessary to stop iterations, then to change the vector in a way and repeat again the Gold deconvolution. We have found that in order to change the particular solution we need to apply a non-linear boosting function to it. The power function proved to give the best results. At the beginning the function calculates exact solution of the Toeplitz system of linear equations.; \[ x^{(0)} = [x_e^2(0),x_e^2(1),...,x_e^2(N-1),]^T\] where \[ x_e=H^{'-1}y^{'}\]; Then it applies the Gold deconvolution algorithm to the solution and carries out preset number of iterations. Then the power function with the exponent equal to the boosting coefficient is applied to the deconvolved data. These data are then used as initial estimate of the solution of linear system of equations and again the Gold algorithm is employed. The whole procedure is repeated number_of_repetitions times.; The form of the high-resolution deconvolution function is; char *Deconvolution1HighResolution(float *source,; const float *resp,; int size,; int number_of_iterations,; int number_of_repetitions,; double boost);; This function calculates deconvolution from the source spectrum according to the response spectrum.; The result is placed in the vector pointed by the source pointer.; Function parameters:. source: pointer to the vector of the source spectrum; resp: pointer to the vector of the response spectrum; size: length of source and the response spectra; number_of_iterations: for details we refer to manual; number_of_repetitions: for details we refer to manual; boost: boosting factor, for details we refer to manual. The result obtained usin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:26752,power,power,26752,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,2,['power'],['power']
Energy Efficiency,"ltiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is chosen by the user, and will be discussed below (see 2.3).; The functions \( F_l\) are generally not orthogonal, which means one will have to evaluate all possible ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:4817,power,power,4817,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,2,['power'],['power']
Energy Efficiency,"lude <RooPowerSum.h>. Inheritance diagram for RooPowerSum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooPowerSum() [1/3]. RooPowerSum::RooPowerSum ; (; ). inline . Definition at line 22 of file RooPowerSum.h. ◆ RooPowerSum() [2/3]. RooPowerSum::RooPowerSum ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . const RooArgList & ; coefList, . const RooArgList & ; expList . ). Create a power law in the variable x. ; Parameters. [in]nameName of the PDF ; [in]titleTitle for plotting the PDF ; [in]xThe variable of the polynomial ; [in]coefListThe coefficients \( a_i \) ; [in]expListThe exponentials \( b_i \) ; \[; \sum_{i=0}^{n} a_{i} * x^{b_{i}}; \]. This means that RooPowerSum powl(""pow"", ""pow"", x, RooArgList(a1, a2), RooArgList(b1,b2)); RooArgListRooArgList is a container object that can hold multiple RooAbsArg objects.Definition RooArgList.h:22; RooPowerSumRooPowerSum implements a power law PDF of the form.Definition RooPowerSum.h:20; xDouble_t x[n]Definition legend1.C:17; computes ; \[; \mathrm{pol}(x) = a1 * x^b1 + a2 * x^b2; \]. Definition at line 56 of file RooPowerSum.cxx. ◆ RooPowerSum() [3/3]. RooPowerSum::RooPowerSum ; (; const RooPowerSum & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 75 of file RooPowerSum.cxx. Member Function Documentation. ◆ analyticalIntegral(). double RooPowerSum::analyticalIntegral ; (; int ; code, . const char * ; rangeName = nullptr . ); const. overridevirtual . Do the analytical integral according to the code that was returned by getAnalyticalIntegral(). ; Reimplemented from RooAbsReal.; Definition at line 145 of file RooPowerSum.cxx. ◆ base(). RooAbsReal const & RooPowerSum::base ; (; ); const. inline . Get the base of the exponentiated terms (aka. x variable). ; Definition at line 29 of file RooPowerSum.h. ◆ canComputeBatchWithCuda(). bool RooPowerSum::canComputeBatchWithCuda ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPowerSum.html:74506,power,power,74506,doc/master/classRooPowerSum.html,https://root.cern,https://root.cern/doc/master/classRooPowerSum.html,1,['power'],['power']
Energy Efficiency,"lue. ; This happens, for example, when the histogram is drawn and the y or z axis limits are changed; To get the minimum value of bins in the histogram regardless of whether the value has been overridden (using TH1::SetMinimum), use; h->GetBinContent(h->GetMinimumBin()); TH1::GetMinimumBin can be used to get the location of the minimum value. ; Reimplemented in TH2Poly.; Definition at line 8635 of file TH1.cxx. ◆ GetMinimumAndMaximum(). void TH1::GetMinimumAndMaximum ; (; Double_t & ; min, . Double_t & ; max . ); const. virtual . Retrieve the minimum and maximum values in the histogram. ; This will not return a cached value and will always search the histogram for the min and max values. The user can condition whether or not to call this with the GetMinimumStored() and GetMaximumStored() methods. If the cache is empty, then the value will be -1111. Users can then use the SetMinimum() or SetMaximum() methods to cache the results. For example, the following recipe will make efficient use of this method and the cached minimum and maximum values. Double_t currentMin = pHist->GetMinimumStored();; Double_t currentMax = pHist->GetMaximumStored();; if ((currentMin == -1111) || (currentMax == -1111)) {; pHist->GetMinimumAndMaximum(currentMin, currentMax);; pHist->SetMinimum(currentMin);; pHist->SetMaximum(currentMax);; }; Parameters. minreference to variable that will hold found minimum value ; maxreference to variable that will hold found maximum value . Definition at line 8731 of file TH1.cxx. ◆ GetMinimumBin() [1/2]. Int_t TH1::GetMinimumBin ; (; ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8665 of file TH1.cxx. ◆ GetMinimumBin() [2/2]. Int_t TH1::GetMinimumBin ; (; Int_t & ; locmix, . Int_t & ; locmiy, . Int_t & ; locmiz . ); const. virtual . Return location of bin with minimum value in the range. ; Definition at line 8674 of file TH1.cxx. ◆ GetMinimumStored(). virtual Double_t TH1::GetMinimumStored ; (; ); const. inlin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:164717,efficient,efficient,164717,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['efficient'],['efficient']
Energy Efficiency,lumeEle. private . is volume element initialized ? ; Definition at line 197 of file MethodPDERS.h. ◆ fInitialScale. Float_t TMVA::MethodPDERS::fInitialScale. private . initial scale for adaptive volume ; Definition at line 195 of file MethodPDERS.h. ◆ fKernelEstimator. enum TMVA::MethodPDERS::EKernelEstimator TMVA::MethodPDERS::fKernelEstimator. private . ◆ fKernelString. TString TMVA::MethodPDERS::fKernelString. private . Definition at line 149 of file MethodPDERS.h. ◆ fkNNMax. Int_t TMVA::MethodPDERS::fkNNMax. private . max number of events in kNN tree ; Definition at line 200 of file MethodPDERS.h. ◆ fkNNMin. Int_t TMVA::MethodPDERS::fkNNMin. private . min number of events in kNN tree ; Definition at line 199 of file MethodPDERS.h. ◆ fMax_distance. Double_t TMVA::MethodPDERS::fMax_distance. private . maximum distance ; Definition at line 202 of file MethodPDERS.h. ◆ fMaxVIterations. Float_t TMVA::MethodPDERS::fMaxVIterations. private . maximum number of iterations to adapt volume size ; Definition at line 194 of file MethodPDERS.h. ◆ fNEventsMax. Float_t TMVA::MethodPDERS::fNEventsMax. private . maximum number of events in adaptive volume ; Definition at line 193 of file MethodPDERS.h. ◆ fNEventsMin. Float_t TMVA::MethodPDERS::fNEventsMin. private . minimum number of events in adaptive volume ; Definition at line 192 of file MethodPDERS.h. ◆ fNormTree. Bool_t TMVA::MethodPDERS::fNormTree. private . binary-search tree is normalised ; Definition at line 204 of file MethodPDERS.h. ◆ fNRegOut. Double_t TMVA::MethodPDERS::fNRegOut. private . Definition at line 189 of file MethodPDERS.h. ◆ fPrinted. Bool_t TMVA::MethodPDERS::fPrinted. private . print ; Definition at line 203 of file MethodPDERS.h. ◆ fScaleB. Float_t TMVA::MethodPDERS::fScaleB. private . weight for background events ; Definition at line 184 of file MethodPDERS.h. ◆ fScaleS. Float_t TMVA::MethodPDERS::fScaleS. private . weight for signal events ; Definition at line 183 of file MethodPDERS.h. ◆ fShift. st,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:46568,adapt,adapt,46568,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,1,['adapt'],['adapt']
Energy Efficiency,"lun, int move); interface with fortran routine pyrget. void Pyrset(int lun, int move); interface with fortran routine pyrset. void Pystat(int flag); interface with fortran routine pystat. void Pytest(int flag); interface with fortran routine pytest. void Pytune(int itune); interface with fortran routine pytune. void Pyupda(int mupda, int lun); interface with fortran routine pyupda. double Pymass(int kf); interface with fortran routine pymass. int Pychge(int kf); interface with fortran routine pychge. void Py1ent(Int_t line, Int_t kf, Double_t pe, Double_t theta, Double_t phi); Add one entry to the event record, i.e. either a parton or a; particle. IP: normally line number for the parton/particle. There are two; exceptions:. If IP = 0: line number 1 is used and PYEXEC is called.; If IP < 0: line -IP is used, with status code K(-IP,2)=2; rather than 1; thus a parton system may be built; up by filling all but the last parton of the; system with IP < 0.; KF: parton/particle flavour code (PDG code); PE: parton/particle energy. If PE is smaller than the mass,; the parton/particle is taken to be at rest.; THETA:; PHI: polar and azimuthal angle for the momentum vector of the; parton/particle. void SetupTest(); Exemplary setup of Pythia parameters:; Switches on processes 102,123,124 (Higgs generation) and switches off; interactions, fragmentation, ISR, FSR... TPythia6& operator=(const TPythia6& ). Pyjets_t* GetPyjets(); ****** accessors; FORTRAN indexing in accessing the arrays,; indices start from 1 !!!!!; ****** access to PYTHIA6 common-blocks; ****** /PYJETS. { return fPyjets; }. int GetN(); { return fPyjets->N; }. int GetNPAD(); { return fPyjets->NPAD; }. int GetK(int ip, int i); { return fPyjets->K[i-1][ip-1]; }. double GetP(int ip, int i); { return fPyjets->P[i-1][ip-1]; }. double GetV(int ip, int i); { return fPyjets->V[i-1][ip-1]; }. void SetN(int n); { fPyjets->N = n; }. void SetNPAD(int n); { fPyjets->NPAD = n; }. void SetK(int ip, int i, int k); { fPyjets->K[i-1][",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPythia6.html:17107,energy,energy,17107,root/html528/TPythia6.html,https://root.cern,https://root.cern/root/html528/TPythia6.html,2,['energy'],['energy']
Energy Efficiency,"lways possible to fit an; polynomial in to points with ; , but; the polynomial is not likely to fit new data at all; [1]. Therefore, the user is asked to provide an upper; limit, to the number of terms in ; (TMultiDimFit::SetMaxTerms). However, since there's an infinite number of to choose from, the; user is asked to give the maximum power. , of each variable; to be considered in the minimization of ; (TMultiDimFit::SetMaxPowers). One way of obtaining values for the maximum power in variable , is; to perform a regular fit to the dependent quantity , using a; polynomial only in . The maximum power is is then the; power that does not significantly improve the one-dimensional; least-square fit over to [5]. There are still a huge amount of possible choices for ; in fact; there are ; possible; choices. Obviously we need to limit this. To this end, the user is; asked to set a power control limit, ; (TMultiDimFit::SetPowerLimit), and a function; is only accepted if. where is the leading power of variable in function; . (TMultiDimFit::MakeCandidates). So the number of; functions increase with (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation. To further reduce the number of functions in the final expression,; only those functions that significantly reduce is chosen. What; `significant' means, is chosen by the user, and will be; discussed below (see 2.3). The functions are generally not orthogonal, which means one will; have to evaluate all possible 's over all data-points before; finding the most significant [1]. We can, however, do; better then that. By applying the modified Gram-Schmidt; orthogonalisation algorithm [5] [3] to the; functions , we can evaluate the contribution to the reduction of; from each function in turn, and we may delay the actual inversion; of the curvature-matrix; (TMultiDimFit::MakeGramSchmidt). So we are let to consider an matrix ; , an; element of which is given by.    with. (3). where labels the rows in the training sample and labels; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:4509,power,power,4509,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,4,['power'],['power']
Energy Efficiency,"ly retain event surviving the given cut expression. . Cut(const RooFormulaVar& expr) Only retain event surviving the given cut formula. . CutRange(const char* name) Only retain events inside range with given name. Multiple CutRange arguments may be given to select multiple ranges. Note that this will also consider the variables that are not selected by SelectVars(). . EventRange(int lo, int hi) Only retain events with given sequential event numbers . Name(const char* name) Give specified name to output dataset . Title(const char* name) Give specified title to output dataset . Definition at line 399 of file RooAbsData.cxx. ◆ reduce() [5/5]. RooFit::OwningPtr< RooAbsData > RooAbsData::reduce ; (; const RooFormulaVar & ; cutVar); const. Create a subset of the data set by applying the given cut on the data points. ; The 'cutVar' formula variable is used to select the subset of data points to be retained in the reduced data collection. ; Definition at line 485 of file RooAbsData.cxx. ◆ reduceEng(). virtual std::unique_ptr< RooAbsData > RooAbsData::reduceEng ; (; const RooArgSet & ; varSubset, . const RooFormulaVar * ; cutVar, . const char * ; cutRange = nullptr, . std::size_t ; nStart = 0, . std::size_t ; = std::numeric_limits< std::size_t >::max() . ); const. protectedpure virtual . Implemented in RooDataHist, and RooDataSet. ◆ reset(). void RooAbsData::reset ; (; ). virtual . Reimplemented in RooDataHist.; Definition at line 330 of file RooAbsData.cxx. ◆ resetBuffers(). void RooAbsData::resetBuffers ; (; ). Definition at line 2344 of file RooAbsData.cxx. ◆ resetCache(). void RooAbsData::resetCache ; (; ). protectedvirtual . Internal method – Remove cached function values. ; Definition at line 354 of file RooAbsData.cxx. ◆ rmsVar(). RooRealVar * RooAbsData::rmsVar ; (; const RooRealVar & ; var, . const char * ; cutSpec = nullptr, . const char * ; cutRange = nullptr . ); const. Create a RooRealVar containing the RMS of observable 'var' in this dataset. ; If cutSpec and/or",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:64961,reduce,reduceEng,64961,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['reduce'],['reduceEng']
Energy Efficiency,"ly_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::SmallVectorTemplateBase ; (; size_t ; Size). inlineprotected . Definition at line 330 of file RVec.hxx. Member Function Documentation. ◆ destroy_range(). template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . static void ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::destroy_range ; (; T * ; S, . T * ; E . ). inlinestaticprotected . Definition at line 332 of file RVec.hxx. ◆ grow(). template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . void ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::grow ; (; size_t ; MinSize = 0). protected . Grow the allocated memory (without initializing new elements), doubling the size of the allocated memory. ; Guarantees space for at least one more element, or MinSize more elements if specified. . ◆ pop_back(). template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . void ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::pop_back ; (; ). inline . Definition at line 378 of file RVec.hxx. ◆ push_back() [1/2]. template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T>::value> . void ROOT::Internal::VecOps::SmallVectorTemplateBase< T, bool >::push_back ; (; const T & ; Elt). inline . Definition at line 362 of file RVec.hxx. ◆ push_back() [2/2]. template<typename T , bool = (std::is_trivially_copy_constructible<T>::value) && (std::is_trivially_move_constructible<T>::value) && std::is_trivially_destructible<T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html:6859,allocate,allocated,6859,doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1VecOps_1_1SmallVectorTemplateBase.html,2,['allocate'],['allocated']
Energy Efficiency,"lygon *polys;; 25 ; 26 ; 27int AllocateX3DBuffer (); 28{; 29/******************************************************************************; 30 Allocate memory for points, colors, segments and polygons.; 31 Returns 1 if OK, otherwise 0.; 32******************************************************************************/; 33 ; 34 int ret = 1;; 35 ; 36 points = NULL;; 37 colors = NULL;; 38 segs = NULL;; 39 polys = NULL;; 40 ; 41 /*; 42 * Allocate memory for points; 43 */; 44 ; 45 if (gSize3D.numPoints) {; 46 points = (point *) calloc(gSize3D.numPoints, sizeof (point));; 47 if (!points) {; 48 puts (""Unable to allocate memory for points !"");; 49 ret = 0;; 50 }; 51 }; 52 else return (0); /* if there are no points, return back */; 53 ; 54 ; 55 ; 56 /*; 57 * Allocate memory for colors; 58 */; 59 ; 60 colors = (Color *) calloc(28+4, sizeof (Color));; 61 if(!colors) {; 62 puts (""Unable to allocate memory for colors !"");; 63 ret = 0;; 64 }; 65 else {; 66 colors[ 0].red = 92; colors[ 0].green = 92; colors[0].blue = 92;; 67 colors[ 1].red = 122; colors[ 1].green = 122; colors[1].blue = 122;; 68 colors[ 2].red = 184; colors[ 2].green = 184; colors[2].blue = 184;; 69 colors[ 3].red = 215; colors[ 3].green = 215; colors[3].blue = 215;; 70 colors[ 4].red = 138; colors[ 4].green = 15; colors[4].blue = 15;; 71 colors[ 5].red = 184; colors[ 5].green = 20; colors[5].blue = 20;; 72 colors[ 6].red = 235; colors[ 6].green = 71; colors[6].blue = 71;; 73 colors[ 7].red = 240; colors[ 7].green = 117; colors[7].blue = 117;; 74 colors[ 8].red = 15; colors[ 8].green = 138; colors[8].blue = 15;; 75 colors[ 9].red = 20; colors[ 9].green = 184; colors[9].blue = 20;; 76 colors[10].red = 71; colors[10].green = 235; colors[10].blue = 71;; 77 colors[11].red = 117; colors[11].green = 240; colors[11].blue = 117;; 78 colors[12].red = 15; colors[12].green = 15; colors[12].blue = 138;; 79 colors[13].red = 20; colors[13].green = 20; colors[13].blue = 184;; 80 colors[14].red = 71; colors[14].green = 71; colors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/X3DBuffer_8c_source.html:1693,green,green,1693,doc/master/X3DBuffer_8c_source.html,https://root.cern,https://root.cern/doc/master/X3DBuffer_8c_source.html,1,['green'],['green']
Energy Efficiency,"m * ; PseRan, . TFoamIntegrand * ; fun . ). virtual . Basic initialization of FOAM invoked by the user. Mandatory!; This method starts the process of the cell build-up. User must invoke Initialize with two arguments or Initialize without arguments. This is done BEFORE generating first MC event and AFTER allocating FOAM object and resetting (optionally) its internal parameters/switches. The overall operational scheme of the FOAM is the following:. This method invokes several other methods:; InitCells initializes memory storage for cells and begins exploration process from the root cell. The empty cells are allocated/filled using CellFill. The procedure Grow which loops over cells, picks up the cell with the biggest `‘driver integral’', see Computer Physics Communications 152 152 (2003) 55 for explanations, with the help of PeekMax procedure. The chosen cell is split using Divide. Subsequently, the procedure Explore called by the Divide (and by InitCells for the root cell) does the most important job in the FOAM object build-up: it performs a small MC run for each newly allocated daughter cell. Explore calculates how profitable the future split of the cell will be and defines the optimal cell division geometry with the help of Carver or Varedu procedures, for maximum weight or variance optimization respectively. All essential results of the exploration are written into the explored cell object. At the very end of the foam build-up, Finally, MakeActiveList is invoked to create a list of pointers to all active cells, for the purpose of the quick access during the MC generation. The procedure Explore employs MakeAlpha to generate random coordinates inside a given cell with the uniform distribution. The above sequence of the procedure calls is depicted in the following figure:. Definition at line 307 of file TFoam.cxx. ◆ IsA(). TClass * TFoam::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFoam.html:33131,allocate,allocated,33131,doc/master/classTFoam.html,https://root.cern,https://root.cern/doc/master/classTFoam.html,1,['allocate'],['allocated']
Energy Efficiency,"m * CreateIntegrator (IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule);  . Private Member Functions;  IntegratorOneDim (const IntegratorOneDim &);  ; IntegratorOneDim & operator= (const IntegratorOneDim &);  . Private Attributes; IGenFunction * fFunc;  pointer to owned function ;  ; VirtualIntegratorOneDim * fIntegrator;  pointer to integrator interface class ;  . #include <Math/Integrator.h>; Member Typedef Documentation. ◆ Type. typedef IntegrationOneDim::Type ROOT::Math::IntegratorOneDim::Type. Definition at line 102 of file Integrator.h. Constructor & Destructor Documentation. ◆ IntegratorOneDim() [1/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, . unsigned int ; rule = 0 . ). inlineexplicit . Constructor of one dimensional Integrator, default type is adaptive. ; Parameters. typeintegration type (adaptive, non-adaptive, etc..) ; absToldesired absolute Error ; relToldesired relative Error ; sizemaximum number of sub-intervals ; ruleGauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL) Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6) lower rules are indicated for singular functions while higher for smooth functions to get better accuracies; NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions ; Definition at line 123 of file Integrator.h. ◆ IntegratorOneDim() [2/4]. ROOT::Math::IntegratorOneDim::IntegratorOneDim ; (; const IGenFunction & ; f, . IntegrationOneDim::Type ; type = IntegrationOneDim::kDEFAULT, . double ; absTol = -1, . double ; relTol = -1, . unsigned int ; size = 0, .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html:7968,adapt,adaptive,7968,doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorOneDim.html,2,['adapt'],['adaptive']
Energy Efficiency,"m = new TGeoManager(""parallel_world"", ""Showcase for prioritized physical paths"");; TGeoMaterial *matV = new TGeoMaterial(""Vac"", 0,0,0);; TGeoMedium *medV = new TGeoMedium(""MEDVAC"",1,matV);; TGeoMaterial *matAl = new TGeoMaterial(""Al"", 26.98,13,2.7);; TGeoMedium *medAl = new TGeoMedium(""MEDAL"",2,matAl);; TGeoMaterial *matSi = new TGeoMaterial(""Si"", 28.085,14,2.329);; TGeoMedium *medSi = new TGeoMedium(""MEDSI"",3,matSi);; TGeoVolume *top = gGeoManager->MakeBox(""TOP"",medV,100,400,1000);; gGeoManager->SetTopVolume(top);; ; // Shape for the support block; TGeoBBox *sblock = new TGeoBBox(""sblock"", 20,10,2);; // The volume for the support; TGeoVolume *support = new TGeoVolume(""block"",sblock, medAl);; support->SetLineColor(kGreen);; ; // Shape for the sensor to be prioritized in case of overlap; TGeoBBox *ssensor = new TGeoBBox(""sensor"", 19,9,0.2);; // The volume for the sensor; TGeoVolume *sensor = new TGeoVolume(""sensor"",ssensor, medSi);; sensor->SetLineColor(kRed);; ; // Chip assembly of support+sensor; TGeoVolumeAssembly *chip = new TGeoVolumeAssembly(""chip"");; chip->AddNode(support, 1);; chip->AddNode(sensor,1, new TGeoTranslation(0,0,-2.1));; ; // A ladder that normally sags; TGeoBBox *sladder = new TGeoBBox(""sladder"", 20,300,5);; // The volume for the ladder; TGeoVolume *ladder = new TGeoVolume(""ladder"",sladder, medAl);; ladder->SetLineColor(kBlue);; ; // Add nodes; top->AddNode(ladder,1);; for (Int_t i=0; i<10; i++); top->AddNode(chip, i+1, new TGeoTranslation(0, -225.+50.*i, 10));; ; gGeoManager->CloseGeometry();; TGeoParallelWorld *pw = nullptr;; if (usepw) pw = gGeoManager->CreateParallelWorld(""priority_sensors"");; // Align chips; align();; if (usepw) {; if (useovlp) pw->AddOverlap(ladder);; pw->CloseGeometry();; gGeoManager->SetUseParallelWorldNav(kTRUE);; }; TString cname;; cname = usepw ? ""cpw"" : ""cnopw"";; TCanvas *c = (TCanvas*)gROOT->GetListOfCanvases()->FindObject(cname);; if (c) c->cd();; else c = new TCanvas(cname, """",800,600);; top->Draw();; // top->Rando",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/parallel__world_8C.html:1963,sensor,sensor,1963,doc/master/parallel__world_8C.html,https://root.cern,https://root.cern/doc/master/parallel__world_8C.html,6,['sensor'],['sensor']
Energy Efficiency,"m > . constexpr ROOT::Math::PxPyPzE4D< ScalarType >::PxPyPzE4D ; (; const CoordSystem & ; v). inlineexplicitconstexpr . construct from any vector or coordinate system class implementing x(), y() and z() and t() ; Definition at line 71 of file PxPyPzE4D.h. ◆ PxPyPzE4D() [4/4]. template<class ScalarType = double> . ROOT::Math::PxPyPzE4D< ScalarType >::PxPyPzE4D ; (; const PxPyPzE4D< ScalarType > & ; v). inline . copy constructor ; Definition at line 79 of file PxPyPzE4D.h. Member Function Documentation. ◆ E(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzE4D< ScalarType >::E ; (; ); const. inline . Definition at line 124 of file PxPyPzE4D.h. ◆ Et(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzE4D< ScalarType >::Et ; (; ); const. inline . transverse energy ; Definition at line 214 of file PxPyPzE4D.h. ◆ Et2(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzE4D< ScalarType >::Et2 ; (; ); const. inline . transverse energy squared ; Definition at line 205 of file PxPyPzE4D.h. ◆ Eta(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzE4D< ScalarType >::Eta ; (; ); const. inline . pseudorapidity ; Definition at line 233 of file PxPyPzE4D.h. ◆ GetCoordinates() [1/2]. template<class ScalarType = double> . void ROOT::Math::PxPyPzE4D< ScalarType >::GetCoordinates ; (; Scalar & ; px, . Scalar & ; py, . Scalar & ; pz, . Scalar & ; e . ); const. inline . get internal data into 4 Scalar numbers ; Definition at line 114 of file PxPyPzE4D.h. ◆ GetCoordinates() [2/2]. template<class ScalarType = double> . void ROOT::Math::PxPyPzE4D< ScalarType >::GetCoordinates ; (; Scalar ; dest[]); const. inline . get internal data into an array of 4 Scalar numbers ; Definition at line 102 of file PxPyPzE4D.h. ◆ M(). template<class ScalarType = double> . Scalar ROOT::Math::PxPyPzE4D< ScalarType >::M ; (; ); const. inline . invariant mass ; Definition at line 153 of file PxPyPzE4D.h. ◆ M2(). template<class ScalarType = double> . Scala",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzE4D.html:5503,energy,energy,5503,doc/master/classROOT_1_1Math_1_1PxPyPzE4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PxPyPzE4D.html,1,['energy'],['energy']
Energy Efficiency,"m relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constructor since is ambigous; Template Constructor of multi dimensional Integrator passing a generic function. By default uses the adaptive integration method. @param f integration function (generic function implementin operator()(const double *); @param dim function dimension; @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). this is ambigous; template<class Function>; IntegratorMultiDim(Function & f, unsigned int dim, IntegrationMultiDim::Type type = IntegrationMultiDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int ncall = 100000) {; fIntegrator = CreateIntegrator(type, absTol, relTol, ncall);; SetFunction(f, dim);; }; destructor. IntegratorMultiDim(const ROOT::Math::IntegratorMultiDim& ); disable copy constructur and assignment operator. {}. IntegratorMultiDim & operator=(const ROOT::Math::IntegratorMultiDim& ); { return *this; }. double Integral(const double* xmin, const double* xmax). evaluate the integral with the previously g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html:3812,adapt,adaptive,3812,root/html528/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IntegratorMultiDim.html,10,['adapt'],['adaptive']
Energy Efficiency,"m the Cernlib function dislan(G110); Reference: K.S.Kolbig and B.Schorr, ""A program package for the Landau; distribution"", Computer Phys.Comm., 31(1984), 97-111. Double_t Sin(Double_t x); { return sin(x); }. Double_t Cos(Double_t x); { return cos(x); }. Double_t Tan(Double_t x); { return tan(x); }. Double_t SinH(Double_t x); { return sinh(x); }. Double_t CosH(Double_t x); { return cosh(x); }. Double_t TanH(Double_t x); { return tanh(x); }. Double_t ASin(Double_t x). Double_t ACos(Double_t x). Double_t ATan(Double_t x); { return atan(x); }. Double_t ATan2(Double_t y, Double_t x). Double_t Sqrt(Double_t x); { return sqrt(x); }. Double_t Ceil(Double_t x); { return ceil(x); }. Int_t CeilNint(Double_t x); { return TMath::Nint(ceil(x)); }. Double_t Floor(Double_t x); { return floor(x); }. Int_t FloorNint(Double_t x); { return TMath::Nint(floor(x)); }. Double_t Exp(Double_t x); { return exp(x); }. Double_t Ldexp(Double_t x, Int_t exp); { return ldexp(x, exp); }. Double_t Power(Double_t x, Double_t y); { return pow(x, y); }. Double_t Power(Double_t x, Int_t y). Double_t Log(Double_t x); { return log(x); }. Double_t Log10(Double_t x); { return log10(x); }. Int_t Finite(Double_t x); { return isfinite(x); }. Int_t IsNaN(Double_t x); from math.h. { return ::isnan(x); }. Double_t QuietNaN(); --------wrapper to numeric_limits. Double_t SignalingNaN(). Double_t Infinity(); returns an infinity as defined by the IEEE standard. template <typename T> inline T NormCross(const T v1[3],const T v2[3],T out[3]); Calculate the Normalized Cross Product of two vectors. T MinElement(Long64_t n, const T *a); Return minimum of array a of length n. T MaxElement(Long64_t n, const T *a); Return maximum of array a of length n. Long64_t LocMin(Long64_t n, const T *a); Return index of array with the minimum element.; If more than one element is minimum returns first found. Iterator LocMin(Iterator first, Iterator last); Return index of array with the minimum element.; If more than one element is minimu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMath.html:38695,Power,Power,38695,root/html532/TMath.html,https://root.cern,https://root.cern/root/html532/TMath.html,1,['Power'],['Power']
Energy Efficiency,"m with a step size h. ;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLDerivator.h>; Constructor & Destructor Documentation. ◆ GSLDerivator(). ROOT::Math::GSLDerivator::GSLDerivator ; (; ). inline . Default Constructor of a GSLDerivator class based on GSL numerical differentiation algorithms. ; Definition at line 68 of file GSLDerivator.h. ◆ ~GSLDerivator(). virtual ROOT::Math::GSLDerivator::~GSLDerivator ; (; ). inlinevirtual . destructor (no operations) ; Definition at line 71 of file GSLDerivator.h. Member Function Documentation. ◆ Error(). double ROOT::Math::GSLDerivator::Error ; (; ); const. return the estimate of the absolute error of the last derivative calculation ; Definition at line 111 of file GSLDerivator.cxx. ◆ EvalBackward() [1/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself ; Definition at line 99 of file GSLDerivator.cxx. ◆ EvalBackward() [2/2]. double ROOT::Math::GSLDerivator::EvalBackward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive backward difference algorithm with a step size h. ; The function is evaluated only at points less than x and at x itself. ; Definition at line 69 of file GSLDerivator.cxx. ◆ EvalCentral() [1/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; const IGenFunction & ; f, . double ; x, . double ; h . ). static . Computes the numerical derivative of a function f at a point x using an adaptive central difference algorithm with a step size h. ; Definition at line 81 of file GSLDerivator.cxx. ◆ EvalCentral() [2/2]. double ROOT::Math::GSLDerivator::EvalCentral ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:3495,adapt,adaptive,3495,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html,1,['adapt'],['adaptive']
Energy Efficiency,"m(const TMVA::Event *const , Int_t cls) const; apply the principal component analysis. const TMVA::Event* InverseTransform(const TMVA::Event *const , Int_t cls) const; apply the principal component analysis; TODO: implementation of inverse transformation; Log() << kFATAL << ""Inverse transformation for PCA transformation not yet implemented. Hence, this transformation cannot be applied together with regression. Please contact the authors if necessary."" << Endl;. void CalculatePrincipalComponents(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ); calculate the principal components for the signal and the background data; it uses the MakePrincipal method of ROOT's TPrincipal class. void X2P(vector<Float_t>& , const vector<Float_t>& , Int_t cls) const; Calculate the principal components from the original data vector; x, and return it in p (function extracted from TPrincipal::X2P); It's the users responsibility to make sure that both x and p are; of the right size (i.e., memory must be allocated for p). void P2X(vector<Float_t>& , const vector<Float_t>& , Int_t cls) const; Perform the back-transformation from the principal components; pc, and return x; It's the users responsibility to make sure that both x and pc are; of the right size (i.e., memory must be allocated for p). void WriteTransformationToStream(ostream& ) const; write mean values to stream. void AttachXMLTo(void* parent); create XML description of PCA transformation. void ReadFromXML(void* trfnode); Read the transformation matrices from the xml node. void ReadTransformationFromStream(istream& , const TString& ); Read mean values from input stream. void MakeFunction(ostream& fout, const TString& fncName, Int_t part, UInt_t trCounter, Int_t cls); creates C++ code fragment of the PCA transform for inclusion in standalone C++ class. VariablePCATransform( DataSetInfo& dsi ). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__VariablePCATransform.html:11085,allocate,allocated,11085,root/html534/TMVA__VariablePCATransform.html,https://root.cern,https://root.cern/root/html534/TMVA__VariablePCATransform.html,2,['allocate'],['allocated']
Energy Efficiency,"m(const TMVA::Event *const , Int_t cls) const; apply the principal component analysis. const TMVA::Event* InverseTransform(const TMVA::Event *const , Int_t cls) const; apply the principal component analysis; TODO: implementation of inverse transformation; Log() << kFATAL << ""Inverse transformation for PCA transformation not yet implemented. Hence, this transformation cannot be applied together with regression. Please contact the authors if necessary."" << Endl;. void CalculatePrincipalComponents(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ); calculate the principal components for the signal and the background data; it uses the MakePrincipal method of ROOT's TPrincipal class. void X2P(vector<Float_t>& , const vector<Float_t>& , Int_t cls) const; Calculate the principal components from the original data vector; x, and return it in p (function extracted from TPrincipal::X2P); It's the users responsibility to make sure that both x and p are; of the right size (i.e., memory must be allocated for p). void P2X(vector<Float_t>& , const vector<Float_t>& , Int_t cls) const; Perform the back-transformation from the principal components; pc, and return x; It's the users responsibility to make sure that both x and pc are; of the right size (i.e., memory must be allocated for p). void WriteTransformationToStream(ostream& ) const; write mean values to stream. void AttachXMLTo(void* parent); create XML description of PCA transformation. void ReadFromXML(void* trfnode); Read the transformation matrices from the xml node. void ReadTransformationFromStream(istream& , const TString& ); Read mean values from input stream. void MakeFunction(ostream& fout, const TString& fncName, Int_t part, UInt_t trCounter, Int_t cls); creates C++ code fragment of the PCA transform for inclusion in standalone C++ class. VariablePCATransform( DataSetInfo& dsi ). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: VariablePCATransform.h 3939",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__VariablePCATransform.html:11054,allocate,allocated,11054,root/html530/TMVA__VariablePCATransform.html,https://root.cern,https://root.cern/root/html530/TMVA__VariablePCATransform.html,1,['allocate'],['allocated']
Energy Efficiency,"m(const TMVA::Event *const , Int_t cls) const; apply the principal component analysis. const TMVA::Event* InverseTransform(const TMVA::Event *const , Int_t cls) const; apply the principal component analysis; TODO: implementation of inverse transformation; Log() << kFATAL << ""Inverse transformation for PCA transformation not yet implemented. Hence, this transformation cannot be applied together with regression. Please contact the authors if necessary."" << Endl;. void CalculatePrincipalComponents(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ); calculate the principal components for the signal and the background data; it uses the MakePrincipal method of ROOT's TPrincipal class. void X2P(vector<Float_t>& , const vector<Float_t>& , Int_t cls) const; Calculate the principal components from the original data vector; x, and return it in p (function extracted from TPrincipal::X2P); It's the users responsibility to make sure that both x and p are; of the right size (i.e., memory must be allocated for p). void P2X(vector<Float_t>& , const vector<Float_t>& , Int_t cls) const; Perform the back-transformation from the principal components; pc, and return x; It's the users responsibility to make sure that both x and pc are; of the right size (i.e., memory must be allocated for p). void WriteTransformationToStream(ostream& ) const; write mean values to stream. void AttachXMLTo(void* parent); create XML description of PCA transformation. void ReadFromXML(void* trfnode); Read the transformation matrices from the xml node. void ReadTransformationFromStream(istream& , const TString& ); Read mean values from input stream. void MakeFunction(ostream& fout, const TString& fncName, Int_t part, UInt_t trCounter, Int_t cls); creates C++ code fragment of the PCA transform for inclusion in standalone C++ class. VariablePCATransform( DataSetInfo& dsi ). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: VariablePCATransform.h 4000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__VariablePCATransform.html:11054,allocate,allocated,11054,root/html532/TMVA__VariablePCATransform.html,https://root.cern,https://root.cern/root/html532/TMVA__VariablePCATransform.html,2,['allocate'],['allocated']
Energy Efficiency,"m(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum according to the given input parameters. Transformed data are; written into dest spectrum. Before the Transform function is called the class; must be created by constructor and the type of the transform as well as some; other parameters must be set using a set of setter functions.;  ; Member variables of; TSpectrumTransform class:; �fSource-pointer; to the vector of source spectrum. Its length should be equal to the �fSize�; parameter except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transforms. These; need �2*fSize� length to supply real and imaginary coefficients. ������������������; fDest-pointer; to the vector of destination spectrum. Its length should be equal to the; �fSize� parameter except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transforms.; These need �2*fSize� length to store real and imaginary coefficients. ; ������� fSize-basic length; of the source and dest spectrum. It should be power; of 2.; fType-type of transform; ����������� Classic transforms:; ����������������������� kTransformHaar. ����������������������� kTransformWalsh. ����������������������� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartey. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrumTransform.html:14472,power,power,14472,root/html602/TSpectrumTransform.html,https://root.cern,https://root.cern/root/html602/TSpectrumTransform.html,4,['power'],['power']
Energy Efficiency,"m);; TVectorD sig = svd.GetSig(); sig.Sqr();; // Symmetric matrix EigenVector algorithm; TMatrixDSym mtm(TMatrixDBase::kAtA,m);; const TMatrixDSymEigen eigen(mtm);; const TVectorD eigenVal = eigen.GetEigenValues();; const Bool_t ok = VerifyVectorIdentity(sig,eigenVal,1,1.-e-14);; 14.8 Speed Comparisons; Speed of four matrix operations have been compared between four matrix libraries, GSL CLHEP, ROOT v3.10 and ROOT v4.0. Next figure shows the CPU time for these four operations as a function of the matrix size:. A*B The execution time is measured for the sum of A * Bsym, Bsym* A and A * B. Notice the matrix_size3 dependence of execution time. CLHEP results are hampered by a poor implementation of symmetric matrix multiplications. For instance, for general matrices of size 100x100, the time is 0.015 sec. while A * Bsym takes 0.028 sec and Bsym* A takes 0.059 sec. Both GSL and ROOT v4.0 can be setup to use the hardware-optimized multiplication routines of the BLAS libraries. It was tested on a G4 PowerPC. The improvement becomes clearly visible around sizes of (50x50) were the execution speed improvement of the Altivec processor becomes more significant than the overhead of filling its pipe. \(A^{-1}\) Here, the time is measured for an in-place matrix inversion. Except for ROOT v3.10, the algorithms are all based on an LUfactorization followed by forward/back-substitution. ROOT v3.10 is using the slower Gaussian elimination method. The numerical accuracy of the CLHEP routine is poor:. up to 6x6 the numerical imprecise Cramer multiplication is hard-coded. For instance, calculating U=H*H-1, where H is a (5x5) Hilbert matrix, results in off-diagonal elements of \(10^{-7}\) instead of the \(10^{-13}\) using an LUaccording to Crout.; scaling protection is non-existent and limits are hard-coded, as a consequence inversion of a Hilbert matrix for sizes>(12x12) fails. In order to gain speed the CLHEP algorithm stores its permutation info of the pivots points in a static array, m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:802257,Power,PowerPC,802257,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Power'],['PowerPC']
Energy Efficiency,"m*CreateIntegrator(ROOT::Math::IntegrationOneDim::Type type, double absTol, double relTol, unsigned int size, int rule). private:. ROOT::Math::IntegratorOneDimIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. ROOT::Math::IGenFunction*fFuncpointer to owned function; ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction( Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(double a, double b). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, unsigned int rule = 0); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. NOTE: When the default values are passed, the values used are taken from the default defined in ROOT::Math::IntegratorOneDimOptions. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int size = 0, int rule ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html:4636,adapt,adaptive,4636,root/html604/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html604/ROOT__Math__IntegratorOneDim.html,2,['adapt'],['adaptive']
Energy Efficiency,"m<Element> &TMatrixTSym<Element> InvertFast(Double_t* det = 0); Invert the matrix and calculate its determinant. TMatrixTSym<Element> &TMatrixTSym<Element> Transpose(const TMatrixTSym<double>& source); Transpose a matrix. TMatrixTSym<Element> &TMatrixTSym<Element> Rank1Update(const TVectorT<double>& v, double alpha = 1.); Perform a rank 1 operation on the matrix:; A += alpha * v * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixT<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> Similarity(const TMatrixTSym<Element> &b); Calculate B * (*this) * B^T , final matrix will be (nrowsb x nrowsb); This is a similarity transform when B is orthogonal . It is more; efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . Element TMatrixTSym<Element> Similarity(const TVectorT<double>& v) const; Calculate scalar v * (*this) * v^T. TMatrixTSym<Element> &TMatrixTSym<Element> SimilarityT(const TMatrixT<double>& n); Calculate B^T * (*this) * B , final matrix will be (ncolsb x ncolsb); It is more efficient than applying the actual multiplication because this; routine realizes that the final matrix is symmetric . TMatrixTSym<Element> &TMatrixTSym<Element> operator=(const TMatrixTSym<Element> &source). TMatrixTSym<Element> &TMatrixTSym<Element> operator=(const TMatrixTSymLazy<Element> &lazy_constructor). TMatrixTSym<Element> &TMatrixTSym<Element> operator=(Element val); Assign val to every element of the matrix. TMatrixTSym<Element> &TMatrixTSym<Element> operator+=(Element val); Add val to every element of the matrix. TMatrixTSym<Element> &TMatrixTSym<Element> operator-=(Element val); Subtract val from every element of the matrix. TMatrixTSym<Ele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixTSym_double_.html:19404,efficient,efficient,19404,root/html602/TMatrixTSym_double_.html,https://root.cern,https://root.cern/root/html602/TMatrixTSym_double_.html,4,['efficient'],['efficient']
Energy Efficiency,"mFit *p,; int size);; This function fits the source spectrum. The calling program should fill in the input parameters of the one_dim_fit structure. The fitted parameters are written into structure pointed by one_dim_fit structure pointer and fitted data are written into source spectrum.; Function parameters:. source: pointer to the vector of the source spectrum; p: pointer to the one_dim_fit structure pointer; size: length of the source spectrum. The one_dim_fit structure has the form of; class TSpectrumOneDimFit{. public:. int number_of_peaks; // input parameter, should be >0; int number_of_iterations; // input parameter, should be >0; int xmin; // first fitted channel; int xmax; // last fitted channel; double alpha; // convergence coefficient, input parameter, it should be a positive number and <=1; double chi; // here the function returns the resulting chi-square; int statistic_type; // type of statistics, possible values are:; // FIT1_OPTIM_CHI_COUNTS (chi square statistics with counts as weighting coefficients),; // FIT1_OPTIM_CHI_FUNC_VALUES (chi square statistics with function values as weighting coefficients); // FIT1_OPTIM_MAX_LIKELIHOOD; int alpha_optim; // optimization of convergence coefficients, possible values are:; // FIT1_ALPHA_HALVING,; // FIT1_ALPHA_OPTIMAL; int power; // possible values FIT1_FIT_POWER2,4,6,8,10,12; int fit_taylor; // order of Taylor expansion, possible values; // FIT1_TAYLOR_ORDER_FIRST, FIT1_TAYLOR_ORDER_SECOND. double position_init[MAX_NUMBER_OF_PEAKS1]; // initial values of peaks positions, input parameters; double position_calc[MAX_NUMBER_OF_PEAKS1]; // calculated values of fitted positions, output parameters; double position_err[MAX_NUMBER_OF_PEAKS1]; // position errors; bool fix_position[MAX_NUMBER_OF_PEAKS1]; // logical vector which allows to fix appropriate positions (not fit). However they are present in the estimated functional; double amp_init[MAX_NUMBER_OF_PEAKS1]; // initial values of peaks amplitudes, input parameters",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:39888,power,power,39888,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,2,['power'],['power']
Energy Efficiency,"mHistFunc.h. Classes; class  CacheElem;  ; struct  NumBins;  . Public Member Functions;  ParamHistFunc ();  ;  ParamHistFunc (const char *name, const char *title, const RooArgList &vars, const RooArgList &paramSet);  Create a function which returns binewise-values This class contains N RooAbsReals's, one for each bin from the given RooRealVar. ;  ;  ParamHistFunc (const char *name, const char *title, const RooArgList &vars, const RooArgList &paramSet, const TH1 *hist);  Create a function which returns bin-wise values. ;  ;  ParamHistFunc (const ParamHistFunc &other, const char *name=nullptr);  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by doing appropriate weighting from component integrals functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ;  ; double binVolume () const;  ; TObject * clone (const char *newname) const override;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  ; const RooArgSet * get (const RooArgSet &coord) const;  ; const RooArgSet * get (Int_t masterIdx) const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise that all integrals can be handled internally. ;  ; RooAbsReal & getParameter () const;  ; RooAbsReal & getParameter (Int_t masterIdx) const;  Get the parameter associated with the index. ;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; Int_t numBins () const;  ; c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classParamHistFunc.html:2266,efficient,efficiently,2266,doc/master/classParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classParamHistFunc.html,1,['efficient'],['efficiently']
Energy Efficiency,"mIntegratorOneDim(const ROOT::Math::IntegratorOneDim&); ROOT::Math::IntegratorOneDim&operator=(const ROOT::Math::IntegratorOneDim&). Data Members; private:. ROOT::Math::VirtualIntegratorOneDim*fIntegratorpointer to integrator interface class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetFunction(const Function & f). double Integral(const ROOT::Math::IGenFunction& f, double a, double b). double Integral(const Function & f). double IntegralLow(const ROOT::Math::IGenFunction& f, double b). double IntegralUp(const ROOT::Math::IGenFunction& f, double a). double Integral(const Function & f, const std::vector<double> & pts). double IntegralCauchy(const ROOT::Math::IGenFunction& f, double a, double b, double c). IntegratorOneDim(ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 1000, unsigned int rule = 3); constructors. Constructor of one dimensional Integrator, default type is adaptive. @param type integration type (adaptive, non-adaptive, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals; @param rule Gauss-Kronrod integration rule (only for GSL kADAPTIVE type). Possible type values are : kGAUSS (simple Gauss method), kADAPTIVE (from GSL), kADAPTIVESINGULAR (from GSL), kNONADAPTIVE (from GSL); Possible rule values are kGAUS15 (rule = 1), kGAUS21( rule = 2), kGAUS31(rule =3), kGAUS41 (rule=4), kGAUS51 (rule =5), kGAUS61(rule =6); lower rules are indicated for singular functions while higher for smooth functions to get better accuracies. IntegratorOneDim(const ROOT::Math::IGenFunction& f, ROOT::Math::IntegrationOneDim::Type type = IntegrationOneDim::kADAPTIVE, double absTol = 1.E-9, double relTol = 1E-6, unsigned int size = 1000, int rule = 3). Constructor of one dimensional Integrator passing a function interface. @param f integration function (1D interface)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html:4554,adapt,adaptive,4554,root/html526/ROOT__Math__IntegratorOneDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IntegratorOneDim.html,1,['adapt'],['adaptive']
Energy Efficiency,"mWindowtransient frame for memory plots; Long64_tfPrevProcessed; Long64_tfPrevTotal; Float_tfProcTime; TGLabel*fProcessed; TProof*fProof; TGLabel*fRate; TGraph*fRateGraph; TGTextButton*fRatePlot; TNtuple*fRatePoints; Int_tfRightInfo; Int_tfSVNRev; TGLabel*fSelector; TStringfSessionUrl; TGCheckButton*fSmoothSpeedouse smooth speedometer update; TGSpeedo*fSpeedospeedometer; Bool_tfSpeedoEnabledwhether to enable the speedometer; TTimefStartTime; TProofProgressDialog::EQueryStatusfStatus; TGTextButton*fStop; TGTextBuffer*fTextQuery; TGLabel*fTimeLab; TGLabel*fTitleLab; TGraph*fTotSGraph; TGLabel*fTotal; TGTextButton*fUpdtSpeedo; static Bool_tfgKeepDefault; static Bool_tfgLogQueryDefault; static TStringfgTextQueryDefault. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries); Create PROOF processing progress dialog. void ToggleOdometerInfos(); Toggle information displayed in Analog Meter. void ToggleThreshold(). void ResetProgressDialog(const char* sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofProgressDialog.html:3439,Meter,Meter,3439,root/html532/TProofProgressDialog.html,https://root.cern,https://root.cern/root/html532/TProofProgressDialog.html,2,['Meter'],['Meter']
Energy Efficiency,"mand via the table of elements (TGeoElementTable class). One can make then materials/mixtures based on these radionuclides and use them in a geometry; root[] TGeoManager *geom = new TGeoManager(""geom"",""radionuclides"");; root[] TGeoElementTable *table = geom->GetElementTable();; root[] TGeoElementRN *c14 = table->GetElementRN(14,6); // A,Z; root[] c14->Print();; 6-C-014 ENDF=60140; A=14; Z=6; Iso=0; Level=0[MeV]; Dmass=3.0199[MeV];; Hlife=1.81e+11[s] J/P=0+; Abund=0; Htox=5.8e-10; Itox=5.8e-10; Stat=0; Decay modes:; BetaMinus Diso: 0 BR: 100.000% Qval: 0.1565; One can make materials or mixtures from radionuclides:; root[] TGeoMaterial *mat = new TGeoMaterial(""C14"", c14, 2.0);; The following properties of radionuclides can be currently accessed via getters in the TGeoElementRN class:; Atomic number and charge (from the base class TGeoElement). Isomeric number (ISO); ENDF code - following the convention: ENDF=10000*Z+100*A+ISO; Isomeric energy level [MeV]; Mass excess [MeV]; Half life [s]; Spin/Parity - can be retrieved with: TGeoElementRN::GetTitle(); Hynalation and ingestion toxicities; List of decays - TGeoElementRN::GetDecays(). The radioactive decays of a radionuclide are represented by the class TGeoDecayChannel and they are stored in a TObjArray. Decay provides:. Decay mode; Variation of isomeric number; Q value for the decay [GeV]; Parent element; Daughter element. Radionuclides are linked one to each other via their decays, until the last element in the decay chain which must be stable. One can iterate decay chains using the iterator TGeoElemIter:; root[] TGeoElemIter next(c14);; root[] TGeoElementRN *elem;; root[] while ((elem=next())) next.Print();; 6-C-014 (100% BetaMinus) T1/2=1.81e+11; 7-N-014 stable; To create a radioactive material based on a radionuclide, one should use the constructor:; TGeoMaterial(const char *name, TGeoElement *elem, Double_t density); To create a radioactive mixture, one can use radionuclides as well as stable elements:; TGeoMixtur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:892394,energy,energy,892394,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['energy'],['energy']
Energy Efficiency,"mand which executes arbitrary string in application via ProcessLine looks like:; serv->RegisterCommand(""/Process"", ""%arg1%"");; When registering command, one could specify icon name which will be displayed with the command.; serv->RegisterCommand(""/DoSomething"", ""SomeFunction()"", ""rootsys/icons/ed_execute.png"");; In example usage of images from $ROOTSYS/icons directory is shown. One could prepend button; string to the icon name to let browser show command as extra button. In last case one could hide command element from elements list:; serv->Hide(""/DoSomething"");; One can find example of command interface usage in tutorials/http/httpcontrol.C macro.; 1.5 Customize user interface; JSROOT is used to implement UI for the THttpServer. Default webpage shows list of registered objects on the left side and drawing area on the right side - see example. JSROOT allows to configure different parameters via URL - like monitoring interval or name of displayed items item=Files/job1.root/hpxpy&opt=colz&monitoring=1000.; Some of such parameters can be configured already on the server:; serv->SetItemField(""/"", ""_monitoring"", ""1000""); // monitoring interval in ms; serv->SetItemField(""/"", ""_drawitem"", ""Files/job1.root/hpxpy""); // item to draw; serv->SetItemField(""/"", ""_drawopt"", ""colz"");; In such case URL parameters are not required - specified item will be displayed automatically when web page is opened. One also can configure to display several items at once. For that one also can configure layout of the drawing area:; serv->SetItemField(""/"", ""_layout"", ""grid2x2""); // layout for drawing area; serv->SetItemField(""/"", ""_drawitem"", ""[Files/job1.root/hpxpy,Files/job1.root/hpx]""); // items; serv->SetItemField(""/"", ""_drawopt"", ""[colz,hist]""); // options; One also can change appearance of hierarchy browser on the left side of the web page:; serv->SetItemField(""/"", ""_browser"", ""off""); // allowed ""fix"" (default), ""float"", ""no"", ""off""; serv->SetItemField(""/"", ""_toptitle"", ""Custom title""); // t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html:6348,monitor,monitoring,6348,root/htmldoc/guides/HttpServer/HttpServer.html,https://root.cern,https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html,2,['monitor'],['monitoring']
Energy Efficiency,"mands; contained in the fExecs list are executed in the order found in the list.; This facility is activated by default. It can be deactivated by using; the canvas ""Option"" menu.; The following examples of TExec commands are provided in the tutorials:; macros exec1.C and exec2.C.; Example1 of use of exec1.C. Root > TFile f(""hsimple.root""); Root > hpx.Draw(); Root > c1.AddExec(""ex1"","".x exec1.C""); At this point you can use the mouse to click on the contour of; the histogram hpx. When the mouse is clicked, the bin number and its; contents are printed.; Example2 of use of exec1.C. Root > TFile f(""hsimple.root""); Root > hpxpy.Draw(); Root > c1.AddExec(""ex2"","".x exec2.C""); When moving the mouse in the canvas, a second canvas shows the; projection along X of the bin corresponding to the Y position; of the mouse. The resulting histogram is fitted with a gaussian.; A ""dynamic"" line shows the current bin position in Y.; This more elaborated example can be used as a starting point; to develop more powerful interactive applications exploiting CINT; as a development engine. void AutoExec(); Execute the list of Execs when a pad event occurs. void Browse(TBrowser* b); Browse pad. TLegend * BuildLegend(Double_t x1 = 0.5, Double_t y1 = 0.67, Double_t x2 = 0.88, Double_t y2 = 0.88, const char* title = """"); Build a legend from the graphical objects in the pad. A simple method to build automatically a TLegend from the; primitives in a TPad. Only those deriving from TAttLine,; TAttMarker and TAttFill are added, excluding TPave and TFrame; derived classes. x1, y1, x2, y2 are the TLegend coordinates.; title is the legend title. By default it is "" "". The caller; program owns the returned TLegend. If the pad contains some TMultiGraph or THStack the individual; graphs or histograms in them are added to the TLegend. TVirtualPad * cd(Int_t subpadnumber = 0); Set Current pad.; When a canvas/pad is divided via TPad::Divide, one can directly; set the current path to one of the subdivisions.; See ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPad.html:31919,power,powerful,31919,root/html534/TPad.html,https://root.cern,https://root.cern/root/html534/TPad.html,2,['power'],['powerful']
Energy Efficiency,"mands; contained in the fExecs list are executed in the order found in the list.; This facility is activated by default. It can be deactivated by using; the canvas ""Option"" menu.; The following examples of TExec commands are provided in the tutorials:; macros exec1.C and exec2.C.; Example1 of use of exec1.C. Root > TFile f(""hsimple.root""); Root > hpx.Draw(); Root > c1.AddExec(""ex1"","".x exec1.C""); At this point you can use the mouse to click on the contour of; the histogram hpx. When the mouse is clicked, the bin number and its; contents are printed.; Example2 of use of exec1.C. Root > TFile f(""hsimple.root""); Root > hpxpy.Draw(); Root > c1.AddExec(""ex2"","".x exec2.C""); When moving the mouse in the canvas, a second canvas shows the; projection along X of the bin corresponding to the Y position; of the mouse. The resulting histogram is fitted with a gaussian.; A ""dynamic"" line shows the current bin position in Y.; This more elaborated example can be used as a starting point; to develop more powerful interactive applications exploiting CINT; as a development engine. void AutoExec(); Execute the list of Execs when a pad event occurs. void Browse(TBrowser* b); Browse pad. TLegend * BuildLegend(Double_t x1 = 0.5, Double_t y1 = 0.67, Double_t x2 = 0.88, Double_t y2 = 0.88, const char* title = """"); Build a legend from the graphical objects in the pad. A simple method to to build automatically a TLegend from the primitives in; a TPad. Only those deriving from TAttLine, TAttMarker and TAttFill are; added, excluding TPave and TFrame derived classes.; x1, y1, x2, y2 are the Tlegend coordinates.; title is the legend title. By default it is "" "". If the pad contains some TMultiGraph or THStack the individual graphs or; histograms in them are added to the TLegend. TVirtualPad * cd(Int_t subpadnumber = 0); Set Current pad.; When a canvas/pad is divided via TPad::Divide, one can directly; set the current path to one of the subdivisions.; See TPad::Divide for the convention to number su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:30555,power,powerful,30555,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,4,['power'],['powerful']
Energy Efficiency,"mands; contained in the fExecs list are executed in the order found in the list.; This facility is activated by default. It can be deactivated by using; the canvas ""Option"" menu.; The following examples of TExec commands are provided in the tutorials:; macros exec1.C and exec2.C.; Example1 of use of exec1.C. Root > TFile f(""hsimple.root""); Root > hpx.Draw(); Root > c1.AddExec(""ex1"","".x exec1.C""); At this point you can use the mouse to click on the contour of; the histogram hpx. When the mouse is clicked, the bin number and its; contents are printed.; Example2 of use of exec1.C. Root > TFile f(""hsimple.root""); Root > hpxpy.Draw(); Root > c1.AddExec(""ex2"","".x exec2.C""); When moving the mouse in the canvas, a second canvas shows the; projection along X of the bin corresponding to the Y position; of the mouse. The resulting histogram is fitted with a gaussian.; A ""dynamic"" line shows the current bin position in Y.; This more elaborated example can be used as a starting point; to develop more powerful interactive applications exploiting CINT; as a development engine. void AutoExec(); Execute the list of Execs when a pad event occurs. void Browse(TBrowser* b); Browse pad. TLegend * BuildLegend(Double_t x1 = 0.5, Double_t y1 = 0.67000000000000004, Double_t x2 = 0.88, Double_t y2 = 0.88, const char* title = """"); Build a legend from the graphical objects in the pad. A simple method to build automatically a TLegend from the; primitives in a TPad. Only those deriving from TAttLine,; TAttMarker and TAttFill are added, excluding TPave and TFrame; derived classes. x1, y1, x2, y2 are the TLegend coordinates.; title is the legend title. By default it is "" "". The caller; program owns the returned TLegend. If the pad contains some TMultiGraph or THStack the individual; graphs or histograms in them are added to the TLegend. TVirtualPad * cd(Int_t subpadnumber = 0); Set Current pad.; When a canvas/pad is divided via TPad::Divide, one can directly; set the current path to one of the subd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPad.html:32554,power,powerful,32554,root/html602/TPad.html,https://root.cern,https://root.cern/root/html602/TPad.html,4,['power'],['powerful']
Energy Efficiency,"mating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Transform.html:1799,adapt,adaptive,1799,doc/master/classTSpectrum2Transform.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html,1,['adapt'],['adaptive']
Energy Efficiency,"mation matrix for each of them. The top node corresponds to the level 0 in the stored array, while the last node will correspond to level n. For each level, the node, volume and global matrix can be retrieved using corresponding getters:; TGeoHMatrix *GetMatrix(Int_t level=-1) const; TGeoNode *GetNode(Int_t level=-1) const; TGeoShape *GetShape(Int_t level=-1) const; TGeoVolume *GetVolume(Int_t level=-1) const; By default the object at level n is retrieved (the align-able object).; Once created, a physical node can be misaligned, meaning that its positioning matrix or even the shape.:; void Align(TGeoMatrix* newmat=0, TGeoShape* newshape=0,; Bool_t check=kFALSE); The convention used is that newmat represents the new local matrix of the last node in the branch with respect to its mother volume. The Align() method will actually duplicate the corresponding branch within the logical hierarchy, creating new volumes and nodes. This is mandatory in order to avoid problems due to replicated volumes and can create exhaustive memory consumption if used abusively.; Once aligned, a physical node is ready to be tracked. The operation can be done only after the geometry was closed.; Important NOTE: Calling the Align() method for a physical node changes the node pointers for the stored node branch in the active geometry, Due to this the other defined physical nodes containing elements of this path will be invalid. Example:; TGeoPhysicalNode *pn1 =; gGeoManager->MakePhysicalNode(""/A_1/B_1/C_2"");; TGeoPhysicalNode *pn2 =; gGeoManager->MakePhysicalNode(""/A_1/B_1/C_3"");; ...; pn1->Align(...);; TGeoManager::MakePhysicalNodeTGeoPhysicalNode * MakePhysicalNode(const char *path=nullptr)Makes a physical node corresponding to a path.Definition TGeoManager.cxx:3506; TGeoPhysicalNode::AlignBool_t Align(TGeoMatrix *newmat=nullptr, TGeoShape *newshape=nullptr, Bool_t check=kFALSE, Double_t ovlp=0.001)Align a physical node with a new relative matrix/shape.Definition TGeoPhysicalNode.cxx:135; The c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:118754,consumption,consumption,118754,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['consumption'],['consumption']
Energy Efficiency,"mation matrix for each of them. The top node corresponds to the level 0 in the stored array, while the last node will correspond to level n. For each level, the node, volume and global matrix can be retrieved using corresponding getters:; TGeoHMatrix *GetMatrix(Int_t level=-1) const; TGeoNode *GetNode(Int_t level=-1) const; TGeoShape *GetShape(Int_t level=-1) const; TGeoVolume *GetVolume(Int_t level=-1) const; By default the object at level n is retrieved (the align-able object).; Once created, a physical node can be misaligned, meaning that its positioning matrix or even the shape.:; void Align(TGeoMatrix* newmat=0, TGeoShape* newshape=0,; Bool_t check=kFALSE); The convention used is that newmat represents the new local matrix of the last node in the branch with respect to its mother volume. The Align() method will actually duplicate the corresponding branch within the logical hierarchy, creating new volumes and nodes. This is mandatory in order to avoid problems due to replicated volumes and can create exhaustive memory consumption if used abusively.; Once aligned, a physical node is ready to be tracked. The operation can be done only after the geometry was closed.; Important NOTE: Calling the Align() method for a physical node changes the node pointers for the stored node branch in the active geometry, Due to this the other defined physical nodes containing elements of this path will be invalid. Example:; TGeoPhysicalNode *pn1 =; gGeoManager->MakePhysicalNode(""/A_1/B_1/C_2"");; TGeoPhysicalNode *pn2 =; gGeoManager->MakePhysicalNode(""/A_1/B_1/C_3"");; ...; pn1->Align(...);; The call to pn1->Align() will invalidate the pointer to the node B_1 in pn2 object.. The way out is to either call pn1->Align() before the creation of pn2, either to use a global method that will correct all existing physical nodes:; void RefreshPhysicalNodes(Bool_t lock = kTRUE); The method above will optionally lock the possibility of doing any further misalignment.; 18.9 Geometry I/O; Once geom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1016493,consumption,consumption,1016493,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['consumption'],['consumption']
Energy Efficiency,"max)Returns a random integer uniformly distributed on the interval [ 0, imax-1 ].Definition TRandom.cxx:361; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TUUIDThis class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDent...Definition TUUID.h:42; TUUID::GetUUIDvoid GetUUID(UChar_t uuid[16]) constReturn uuid in specified buffer (16 byte = 128 bits).Definition TUUID.cxx:695; double; int; unsigned int; ROOT::Math::landau_quantiledouble landau_quantile(double z, double xi=1)Inverse ( ) of the cumulative distribution function of the lower tail of the Landau distribution (lan...Definition QuantFuncMathCore.cxx:189; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::FloorDouble_t Floor(Double_t x)Rounds x downward, returning the largest integral value that is not greater than x.Definition TMath.h:680; TMath::PiOver2constexpr Double_t PiOver2()Definition TMath.h:51; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::LnGammaDouble_t LnGamma(Double_t z)Computation of ln[gamma(z)] for all z.Definition TMath.cxx:509; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::TanDouble_t Tan(Double_t)Returns the tangent of an angle of x radians.Definition TMath.h:600; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRandom_8cxx_source.html:35763,power,power,35763,doc/master/TRandom_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRandom_8cxx_source.html,1,['power'],['power']
Energy Efficiency,"maxIter, double absTol, double relTol); virtual const char*Name() const; voidSetFunction(ROOT::Math::GSLFuncPointer f, void* params, double xmin, double xlow, double xup); static intTestInterval(double xlow, double xup, double epsAbs, double epsRel); virtual doubleXLower() const; virtual doubleXMinimum() const; virtual doubleXUpper() const. private:. ROOT::Math::GSLMinimizer1DGSLMinimizer1D(const ROOT::Math::GSLMinimizer1D&); ROOT::Math::GSLMinimizer1D&operator=(const ROOT::Math::GSLMinimizer1D&). Data Members; private:. ROOT::Math::GSLFunctionWrapper*fFunction; boolfIsSet; intfIter; doublefLow; doublefMin; ROOT::Math::GSL1DMinimizerWrapper*fMinimizer; doublefUp; doublefXlow; doublefXmin; doublefXup. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; explicit GSLMinimizer1D(Minim1D::Type type=Minim1D::kBRENT). Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. virtual ~GSLMinimizer1D(). Destructor: free allocated resources. GSLMinimizer1D(const GSLMinimizer1D &); usually copying is non trivial, so we make this unaccessible. void SetFunction( const UserFunc & f, double xmin, double xlow, double xup). Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__GSLMinimizer1D.html:2242,allocate,allocated,2242,root/html526/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__GSLMinimizer1D.html,1,['allocate'],['allocated']
Energy Efficiency,"mber Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . #include <THashTable.h>. Inheritance diagram for THashTable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ THashTable() [1/2]. THashTable::THashTable ; (; const THashTable & ; ). privatedelete . ◆ THashTable() [2/2]. THashTable::THashTable ; (; Int_t ; capacity = TCollection::kInitHashTableCapacity, . Int_t ; rehashlevel = 0 . ). Create a THashTable object. ; Capacity is the initial hashtable capacity (i.e. number of slots), by default kInitHashTableCapacity = 17, and rehashlevel is the value at which a rehash will be triggered. I.e. when the average size of the linked lists at a slot becomes longer than rehashlevel then the hashtable will be resized and refilled to reduce the collision rate to about 1. The higher the collision rate, i.e. the longer the linked lists, the longer lookup will take. If rehashlevel=0 the table will NOT automatically be rehashed. Use Rehash() for manual rehashing. ; Definition at line 43 of file THashTable.cxx. ◆ ~THashTable(). THashTable::~THashTable ; (; ). virtual . Delete a hashtable. ; Objects are not deleted unless the THashTable is the owner (set via SetOwner()). ; Definition at line 65 of file THashTable.cxx. Member Function Documentation. ◆ Add(). void THashTable::Add ; (; TObject * ; obj). overridevirtual . Add object to the hash table. ; Its position in the table will be determined by the value returned by its Hash() function. ; Implements TCollection.; Definition at line 92 of file THashTable.cxx. ◆ AddAll(). void THashTable::AddAll ; (; const TCollection * ; col). overridevirtual . Add all objects from collection col to this collection. ; Implemented for more",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashTable.html:16720,reduce,reduce,16720,doc/master/classTHashTable.html,https://root.cern,https://root.cern/doc/master/classTHashTable.html,1,['reduce'],['reduce']
Energy Efficiency,mber of bools read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 730 of file TBufferFile.cxx. ◆ ReadArray() [2/13]. Int_t TBufferFile::ReadArray ; (; Char_t *& ; c). overridevirtual . Read array of characters from the I/O buffer. ; Returns the number of characters read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 758 of file TBufferFile.cxx. ◆ ReadArray() [3/13]. Int_t TBufferFile::ReadArray ; (; Double_t *& ; d). overridevirtual . Read array of doubles from the I/O buffer. ; Returns the number of doubles read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 934 of file TBufferFile.cxx. ◆ ReadArray() [4/13]. Int_t TBufferFile::ReadArray ; (; Float_t *& ; f). overridevirtual . Read array of floats from the I/O buffer. ; Returns the number of floats read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 901 of file TBufferFile.cxx. ◆ ReadArray() [5/13]. Int_t TBufferFile::ReadArray ; (; Int_t *& ; ii). overridevirtual . Read array of ints from the I/O buffer. ; Returns the number of ints read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 814 of file TBufferFile.cxx. ◆ ReadArray() [6/13]. Int_t TBufferFile::ReadArray ; (; Long64_t *& ; ll). overridevirtual . Read array of long longs from the I/O buffer. ; Returns the number of long longs read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; Definition at line 873 of file TBufferFile.cxx. ◆ ReadArray() [7/13]. Int_t TBufferFile::ReadArray ; (; Long_t *& ; ll). overridevirtual . Read array of longs from the I/O buffer. ; Returns the number of longs read. If argument is a 0 pointer then space will be allocated for the array. ; Implements TBuffer.; De,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:47107,allocate,allocated,47107,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['allocate'],['allocated']
Energy Efficiency,"mber of integer indices assigned to each point.; set<TEveElement::TEveListTreeInfo,less<TEveElement::TEveListTreeInfo>,allocator<TEveElement::TEveListTreeInfo> >TEveElement::fItems! Set of list-tree-items.; Int_tTPolyMarker3D::fLastPointThe index of the last filled point; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Color_t*TEveElement::fMainColorPtrPointer to main-color variable.; TEveTrans*TEveElement::fMainTransPointer to main transformation matrix.; Char_tTEveElement::fMainTransparencyMain-transparency variable.; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTPolyMarker3D::fNNumber of allocated points; TStringTPolyMarker3D::fNameName of polymarker; Int_tTEveElement::fNumChildren!; TStringTPolyMarker3D::fOptionOptions; Bool_tTPointSet3D::fOwnIdsFlag specifying id-objects are owned by the point-set; Float_t*TPolyMarker3D::fP[3*fN] Array of X,Y,Z coordinates; Int_tTEveElement::fParentIgnoreCnt! Counter for parents that are ignored in ref-counting.; list<TEveElement*>TEveElement::fParentsList of parents.; Bool_tTEveElement::fPickable; list<TEveProjected*>TEveProjectable::fProjectedListreferences to projected instances.; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tfRnrLine; Bool_tfRnrPoints; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfSmooth; TRefTEveElement::fSourceExternal object that is represented by this element.; TEvePointSelectorConsumer::ETreeVarType_eTEvePointSelectorConsumer::fSourceCSCoordinate-System of the source tree variables; TStringTEvePointSet::fTitleTitle/tooltip of the TEvePointSet.; Int_tTEveElement::fTopIt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveLine.html:26711,allocate,allocated,26711,root/html534/TEveLine.html,https://root.cern,https://root.cern/root/html534/TEveLine.html,2,['allocate'],['allocated']
Energy Efficiency,"mcError;; FoamX->GetIntegMC( mcResult, mcError); // get MC integral, should be one; std::cout << "" mcResult= "" << mcResult << "" +- "" << mcError <<std::endl;; // now hst_xy will be plotted visualizing generated distribution; TCanvas *cKanwa = new TCanvas(""cKanwa"",""Canvas for plotting"",600,600);; cKanwa->cd();; hst_xy->Draw(""lego2"");; }//kanwa; Double_t sqr(Double_t x){return x*x;};; Double_t Camel2(Int_t nDim, Double_t *Xarg){; // 2-dimensional distribution for FOAM, normalized to one (within 1e-5); Double_t x=Xarg[0];; Double_t y=Xarg[1];; Double_t GamSq= sqr(0.100e0);; Double_t Dist=exp(-(sqr(x-1./3) +sqr(y-1./3))/GamSq)/GamSq/TMath::Pi();; Dist +=exp(-(sqr(x-2./3) +sqr(y-2./3))/GamSq)/GamSq/TMath::Pi();; return 0.5*Dist;; }// Camel2; Two-dim. histogram of the MC points generated with the above program looks as follows:. . Canonical nine steering parameters of FOAM. Name | default | Description. kDim | 0 | Dimension of the integration space. Must be redefined!; nCells | 1000 | No of allocated number of cells,; nSampl | 200 | No. of MC events in the cell MC exploration; nBin | 8 | No. of bins in edge-histogram in cell exploration; OptRej | 1 | OptRej = 0, weighted; OptRej=1, wt=1 MC events; OptDrive | 2 | Maximum weight reduction, =1 for variance reduction; EvPerBin | 25 | Maximum number of the effective wt=1 events/bin,; | | EvPerBin=0 deactivates this option; Chat | 1 | =0,1,2 is the ``chat level'' in the standard output; MaxWtRej | 1.1 | Maximum weight used to get w=1 MC events. The above can be redefined before calling 'Initialize()' method,; for instance FoamObject->SetkDim(15) sets dimension of the distribution to 15.; Only kDim HAS TO BE redefined, the other parameters may be left at their defaults.; nCell may be increased up to about million cells for wildly peaked distributions.; Increasing nSampl sometimes helps, but it may cost CPU time.; MaxWtRej may need to be increased for wild a distribution, while using OptRej=0. Past versions of FOAM: August 2003, v.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFoam.html:3581,allocate,allocated,3581,root/html602/TFoam.html,https://root.cern,https://root.cern/root/html602/TFoam.html,4,['allocate'],['allocated']
Energy Efficiency,"mcResult, mcError;; FoamX->GetIntegMC( mcResult, mcError); // get MC integral, should be one; cout << "" mcResult= "" << mcResult << "" +- "" << mcError <<endl;; // now hst_xy will be plotted visualizing generated distribution; TCanvas *cKanwa = new TCanvas(""cKanwa"",""Canvas for plotting"",600,600);; cKanwa->cd();; hst_xy->Draw(""lego2"");; }//kanwa; Double_t sqr(Double_t x){return x*x;};; Double_t Camel2(Int_t nDim, Double_t *Xarg){; // 2-dimensional distribution for FOAM, normalized to one (within 1e-5); Double_t x=Xarg[0];; Double_t y=Xarg[1];; Double_t GamSq= sqr(0.100e0);; Double_t Dist=exp(-(sqr(x-1./3) +sqr(y-1./3))/GamSq)/GamSq/TMath::Pi();; Dist +=exp(-(sqr(x-2./3) +sqr(y-2./3))/GamSq)/GamSq/TMath::Pi();; return 0.5*Dist;; }// Camel2; Two-dim. histogram of the MC points generated with the above program looks as follows:. . Canonical nine steering parameters of FOAM. Name | default | Description. kDim | 0 | Dimension of the integration space. Must be redefined!; nCells | 1000 | No of allocated number of cells,; nSampl | 200 | No. of MC events in the cell MC exploration; nBin | 8 | No. of bins in edge-histogram in cell exploration; OptRej | 1 | OptRej = 0, weighted; OptRej=1, wt=1 MC events; OptDrive | 2 | Maximum weight reduction, =1 for variance reduction; EvPerBin | 25 | Maximum number of the effective wt=1 events/bin,; | | EvPerBin=0 deactivates this option; Chat | 1 | =0,1,2 is the ``chat level'' in the standard output; MaxWtRej | 1.1 | Maximum weight used to get w=1 MC events. The above can be redefined before calling 'Initialize()' method,; for instance FoamObject->SetkDim(15) sets dimension of the distribution to 15.; Only kDim HAS TO BE redefined, the other parameters may be left at their defaults.; nCell may be increased up to about million cells for wildly peaked distributions.; Increasing nSampl sometimes helps, but it may cost CPU time.; MaxWtRej may need to be increased for wild a distribution, while using OptRej=0. Past versions of FOAM: August 2003, v.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFoam.html:3561,allocate,allocated,3561,root/html528/TFoam.html,https://root.cern,https://root.cern/root/html528/TFoam.html,6,['allocate'],['allocated']
Energy Efficiency,"mcpy(fCoordinates + idx * fSingleCoordinateSize, coordbuf, fSingleCoordinateSize);; 474 fCoordinatesSize += fSingleCoordinateSize;; 475}; 476 ; 477////////////////////////////////////////////////////////////////////////////////; 478/// Turn on support of errors; 479 ; 480void THnSparseArrayChunk::Sumw2(); 481{; 482 if (!fSumw2); 483 fSumw2 = new TArrayD(fContent->GetSize());; 484 // fill the structure with the current content; 485 for (Int_t bin=0; bin < fContent->GetSize(); bin++) {; 486 fSumw2->fArray[bin] = fContent->GetAt(bin);; 487 }; 488 ; 489}; 490 ; 491 ; 492/** \class THnSparse; 493 \ingroup Hist; 494 ; 495Efficient multidimensional histogram.; 496 ; 497Use a THnSparse instead of TH1 / TH2 / TH3 / array for histogramming when; 498only a small fraction of bins is filled. A 10-dimensional histogram with 10; 499bins per dimension has 10^10 bins; in a naive implementation this will not; 500fit in memory. THnSparse only allocates memory for the bins that have; 501non-zero bin content instead, drastically reducing both the memory usage; 502and the access time.; 503 ; 504To construct a THnSparse object you must use one of its templated, derived; 505classes:; 506- THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; 507- THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; 508- THnSparseL (typedef for THnSparseT<ArrayL64>): bin content held by a Long64_t,; 509- THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; 510- THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; 511- THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,; 512 ; 513They take name and title, the number of dimensions, and for each dimension; 514the number of bins, the minimal, and the maximal value on the dimension's; 515axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; 516 ; 517 Int_t bins[2] = {10, 20};; 518 Double_t xmin[2] = {0., -5.};; 519 Double_t xmax[2] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:17716,allocate,allocates,17716,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,1,['allocate'],['allocates']
Energy Efficiency,"me class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  ;  Static Public Member Functions inherited from TGWidget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void AllocColors ();  Try to allocate first a palette of 64 colors. ;  ; void CreateDitheredImage (Pixmap_t image, Int_t which);  Create a dithered version of the color map and lightness images for display modes with reduced number of colors. ;  ; void CreateImages ();  Create colormap and color slider images. ;  ; void DoRedraw () override;  Redraw the color pick widget. ;  ; void DrawHScursor (Int_t onoff);  Draw hue / saturation cursor. ;  ; void DrawLcursor (Int_t onoff);  Draw lightness slider cursor. ;  ; void FreeColors ();  Free allocated colors. ;  ; void InitImages ();  Initialize color palette and slider images. ;  ; void SetHScursor (Int_t x, Int_t y);  Set hue / saturation cursor position. ;  ; void SetLcursor (Int_t z);  Set lightness slider cursor position. ;  ; void SetSliderColor ();  Set slider colors. ;  ; void UpdateCurrentColor ();  Assign the current cursor position as currently selected color. ;  ;  Protected Member Functions inherited from TGFrame; void DoRedraw () override;  Redraw the frame. ;  ; virtual void Draw3dRectangle (UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h);  Draw 3D rectangle on the frame bor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColorPick.html:22926,reduce,reduced,22926,doc/master/classTGColorPick.html,https://root.cern,https://root.cern/doc/master/classTGColorPick.html,1,['reduce'],['reduced']
Energy Efficiency,"me identifier id. Int_t MediumId(const char* mediumName) const; Return the unique numeric identifier for medium name mediumName. Int_t NofVolumes() const; Return total number of volumes in the geometry. Int_t VolId2Mate(Int_t id) const; Return material number for a given volume id. Int_t NofVolDaughters(const char* volName) const; Return number of daughters of the volume specified by volName. const char* VolDaughterName(const char* volName, Int_t i) const; Return the name of i-th daughter of the volume specified by volName. Int_t VolDaughterCopyNo(const char* volName, Int_t i) const; Return the copyNo of i-th daughter of the volume specified by volName. Bool_t SetCut(const char* cutName, Double_t cutValue). methods for physics management. set methods. Set transport cuts for particles. Bool_t SetProcess(const char* flagName, Int_t flagValue); Set process control. Bool_t DefineParticle(Int_t pdg, const char* name, TMCParticleType mcType, Double_t mass, Double_t charge, Double_t lifetime); Set a user defined particle; Function is ignored if particle with specified pdg; already exists and error report is printed.; pdg PDG encoding; name particle name; mcType VMC Particle type; mass mass [GeV]; charge charge [eplus]; lifetime time of life [s]; pType particle type as in Geant4; width width [GeV]; iSpin spin; iParity parity; iConjugation conjugation; iIsospin isospin; iIsospinZ isospin - #rd component; gParity gParity; lepton lepton number; baryon baryon number; stable stability; shortlived is shorlived?; subType particle subType as in Geant4; antiEncoding anti encoding; magMoment magnetic moment; excitation excitation energy [GeV]. Bool_t DefineIon(const char* name, Int_t Z, Int_t A, Int_t Q, Double_t excEnergy, Double_t mass = 0.); Set a user defined particle; Function is ignored if particle with specified pdg; already exists and error report is printed.; pdg PDG encoding; name particle name; mcType VMC Particle type; mass mass [GeV]; charge charge [eplus]; lifetime time",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMC.html:28157,charge,charge,28157,root/html528/TVirtualMC.html,https://root.cern,https://root.cern/root/html528/TVirtualMC.html,10,['charge'],['charge']
Energy Efficiency,"me to output dataset; Title(const char* name) -- Give specified title to output dataset. RooAbsData* reduce(const char* cut); Create a subset of the data set by applying the given cut on the data points.; The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points.; The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. RooAbsData* reduce(const RooArgSet& varSubset, const char* cut); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The cut expression can refer to any variable in the data set. For cuts involving; other variables, such as intermediate formula objects, use the equivalent; reduce method specifying the as a RooFormulVar reference. RooAbsData* reduce(const RooArgSet& varSubset, const RooFormulaVar& cutVar); Create a subset of the data set by applying the given cut on the data points; and reducing the dimensions to the specified set. The 'cutVar' formula variable is used to select the subset of data points to be; retained in the reduced data collection. Double_t weightError(RooAbsData::ErrorType etype = Poisson) const; Return error on current weight (dummy implementation returning zero). void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; Return asymmetric error on weight. (Dummy implementation returning zero). RooPlot* plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsData.html:16596,reduce,reduce,16596,root/html526/RooAbsData.html,https://root.cern,https://root.cern/root/html526/RooAbsData.html,1,['reduce'],['reduce']
Energy Efficiency,"me(""xframe""), Title(""Dashed Curve / No XError bars""), Bins(20));; RooPlot *frame3 = x.frame(Name(""xframe""), Title(""Filled Curve / Blue Histo""), Bins(20));; RooPlot *frame4 = x.frame(Name(""xframe""), Title(""Partial Range / Filled Bar chart""), Bins(20));; ; // D a t a p l o t t i n g s t y l e s; // ---------------------------------------; ; // Use sqrt(sum(weights^2)) error instead of Poisson errors; data->plotOn(frame1, DataError(RooAbsData::SumW2));; ; // Remove horizontal error bars; data->plotOn(frame2, XErrorSize(0));; ; // Blue markers and error bors; data->plotOn(frame3, MarkerColor(kBlue), LineColor(kBlue));; ; // Filled bar chart; data->plotOn(frame4, DrawOption(""B""), DataError(RooAbsData::None), XErrorSize(0), FillColor(kGray));; ; // F u n c t i o n p l o t t i n g s t y l e s; // -----------------------------------------------; ; // Change line color to red; gauss.plotOn(frame1, LineColor(kRed));; ; // Change line style to dashed; gauss.plotOn(frame2, LineStyle(kDashed));; ; // Filled shapes in green color; gauss.plotOn(frame3, DrawOption(""F""), FillColor(kOrange), MoveToBack());; ; //; gauss.plotOn(frame4, Range(-8, 3), LineColor(kMagenta));; ; TCanvas *c = new TCanvas(""rf107_plotstyles"", ""rf107_plotstyles"", 800, 800);; c->Divide(2, 2);; c->cd(1);; gPad->SetLeftMargin(0.15);; frame1->GetYaxis()->SetTitleOffset(1.6);; frame1->Draw();; c->cd(2);; gPad->SetLeftMargin(0.15);; frame2->GetYaxis()->SetTitleOffset(1.6);; frame2->Draw();; c->cd(3);; gPad->SetLeftMargin(0.15);; frame3->GetYaxis()->SetTitleOffset(1.6);; frame3->Draw();; c->cd(4);; gPad->SetLeftMargin(0.15);; frame4->GetYaxis()->SetTitleOffset(1.6);; frame4->Draw();; }; c#define c(i)Definition RSha256.hxx:101; RooDataSet.h; RooGaussian.h; RooPlot.h; RooRealVar.h; kGray@ kGrayDefinition Rtypes.h:65; kRed@ kRedDefinition Rtypes.h:66; kOrange@ kOrangeDefinition Rtypes.h:67; kMagenta@ kMagentaDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; kDashed@ kDashedDefinition TAttLine.h:48; TAxis.h; TCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf107__plotstyles_8C.html:2236,green,green,2236,doc/master/rf107__plotstyles_8C.html,https://root.cern,https://root.cern/doc/master/rf107__plotstyles_8C.html,1,['green'],['green']
Energy Efficiency,"me());; 4695 fObject = nullptr;; 4696 } else {; 4697 bool needDelete = proxy->GetProperties()&TVirtualCollectionProxy::kNeedDelete;; 4698 if (needDelete && fID >= 0) {; 4699 TVirtualStreamerInfo* si = GetInfoImp();; 4700 TStreamerElement* se = (TStreamerElement*) si->GetElement(fID);; 4701 needDelete = !se->TestBit(TStreamerElement::kDoNotDelete);; 4702 }; 4703 if (needDelete) {; 4704 TVirtualCollectionProxy::TPushPop helper(proxy,fObject);; 4705 proxy->Clear(""force"");; 4706 }; 4707 proxy->Destructor(fObject);; 4708 fObject = nullptr;; 4709 }; 4710 if (fStreamerType == TVirtualStreamerInfo::kSTLp) {; 4711 // -- We are a pointer to an STL container.; 4712 // We must zero the pointer in the object.; 4713 *((char**) fAddress) = nullptr;; 4714 }; 4715 } else {; 4716 // We are *not* a TClonesArray master branch and we are *not* an STL container master branch.; 4717 TClass* cl = fBranchClass.GetClass();; 4718 if (!cl) {; 4719 Warning(""ReleaseObject"", ""Cannot delete allocated object because I cannot instantiate a TClass object for its class! branch: '%s' class: '%s'"", GetName(), fBranchClass.GetClassName());; 4720 fObject = nullptr;; 4721 } else {; 4722 TVirtualCollectionProxy* proxy = cl->GetCollectionProxy();; 4723 ; 4724 if (proxy) {; 4725 if (fID >= 0) {; 4726 TVirtualStreamerInfo* si = GetInfoImp();; 4727 TStreamerElement* se = si->GetElement(fID);; 4728 if (!se->TestBit(TStreamerElement::kDoNotDelete) && proxy->GetProperties()&TVirtualCollectionProxy::kNeedDelete) {; 4729 TVirtualCollectionProxy::TPushPop helper(proxy,fObject);; 4730 proxy->Clear(""force"");; 4731 }; 4732 } else if (proxy->GetProperties()&TVirtualCollectionProxy::kNeedDelete) {; 4733 TVirtualCollectionProxy::TPushPop helper(proxy,fObject);; 4734 proxy->Clear(""force"");; 4735 }; 4736 ; 4737 }; 4738 cl->Destructor(fObject);; 4739 fObject = nullptr;; 4740 }; 4741 }; 4742 }; 4743}; 4744 ; 4745////////////////////////////////////////////////////////////////////////////////; 4746/// Reset a Branch.; 4747///; 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:174988,allocate,allocated,174988,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"me(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCancelcancel button; TGLabel*fLabeltext entry label; TGTextButton*fOkok button; char*fRetStraddress to store return string; TGTextEntry*fTEtext entry widget. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGInputDialog(const TGWindow* p = 0, const TGWindow* main = 0, const char* prompt = 0, const char* defval = 0, char* retstr = 0, UInt_t options = kVerticalFrame); Create simple input dialog. It is important to know that the case where the constructor in; which all the variables are initialized to their default values is; only used for the TBrowser to inspect on the classes. For normal; use the only variable that should be free is options. Variables prompt, defval are the content of the input dialog while; retstr has to be initialized to a char[256]. In case these are not; initialized, they will show default values while retstr will be; automatically allocated by the dialog. However this will make; impossible to retrieve the value entered by the dialog. To see TGInputDialog in use see:; $ROOTSYS/tutorials/testInputDialog.cxx. ~TGInputDialog(); Cleanup dialog. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle button and text enter events. TGInputDialog(const TGInputDialog& ). TGInputDialog & operator=(const TGInputDialog& ). » Author: David Gonzalez Maline 19/07/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-13 19:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGInputDialog.html:22760,allocate,allocated,22760,root/html534/TGInputDialog.html,https://root.cern,https://root.cern/root/html534/TGInputDialog.html,2,['allocate'],['allocated']
Energy Efficiency,"me.Data());; 2628 if (!f.good()) {; 2629 ::Error(""TColor::CreateColorPalette(const TString)"", ""%s does not exist or cannot be opened"", fileName.Data());; 2630 return -1;; 2631 }; 2632 ; 2633 Int_t nLines = 0;; 2634 Float_t r, g, b;; 2635 std::vector<Float_t> reds, greens, blues;; 2636 while (f >> r >> g >> b) {; 2637 nLines++;; 2638 if (r < 0. || r > 1.) {; 2639 ::Error(""TColor::CreateColorPalette(const TString)"", ""Red value %f outside [0,1] on line %d of %s "", r,; 2640 nLines, fileName.Data());; 2641 f.close();; 2642 return -1;; 2643 }; 2644 if (g < 0. || g > 1.) {; 2645 ::Error(""TColor::CreateColorPalette(const TString)"", ""Green value %f outside [0,1] on line %d of %s "", g,; 2646 nLines, fileName.Data());; 2647 f.close();; 2648 return -1;; 2649 }; 2650 if (b < 0. || b > 1.) {; 2651 ::Error(""TColor::CreateColorPalette(const TString)"", ""Blue value %f outside [0,1] on line %d of %s "", b,; 2652 nLines, fileName.Data());; 2653 f.close();; 2654 return -1;; 2655 }; 2656 reds.emplace_back(r);; 2657 greens.emplace_back(g);; 2658 blues.emplace_back(b);; 2659 }; 2660 f.close();; 2661 if (nLines < 2) {; 2662 ::Error(""TColor::CreateColorPalette(const TString)"", ""Found insufficient color lines (%d) on %s"", nLines,; 2663 fileName.Data());; 2664 return -1;; 2665 }; 2666 ; 2667 TColor::InitializeColors();; 2668 Int_t *palette = new Int_t[nLines];; 2669 ; 2670 for (Int_t i = 0; i < nLines; ++i) {; 2671 new TColor(reds.at(i), greens.at(i), blues.at(i), alpha);; 2672 palette[i] = gHighestColorIndex;; 2673 }; 2674 TColor::SetPalette(nLines, palette);; 2675 delete[] palette;; 2676 return gHighestColorIndex + 1 - nLines;; 2677}; 2678 ; 2679////////////////////////////////////////////////////////////////////////////////; 2680/// Static function creating a color table with several connected linear gradients.; 2681///; 2682/// - Number: The number of end point colors that will form the gradients.; 2683/// Must be at least 2.; 2684/// - Stops: Where in the whole table the end point colors s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:96480,green,greens,96480,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['greens']
Energy Efficiency,"me; TGeoHMatrix*fMatrix2positioning matrix for second volume; TStringTNamed::fNameobject identifier; Double_tfOverlapoverlap distance; TStringTNamed::fTitleobject title; TGeoVolume*fVolume1first volume; TGeoVolume*fVolume2second volume. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoOverlap(); Default ctor. TGeoOverlap(const char* name, TGeoVolume* vol1, TGeoVolume* vol2, const TGeoMatrix* matrix1, const TGeoMatrix* matrix2, Bool_t isovlp = kTRUE, Double_t ovlp = 0.01); Creates a named overlap belonging to volume VOL and having the size OVLP. ~TGeoOverlap(); Destructor. void Browse(TBrowser* b); Define double-click action. Int_t Compare(const TObject* obj) const; Method to compare this overlap with another. Returns :; -1 - this is smaller than OBJ; 0 - equal; 1 - greater. Int_t DistancetoPrimitive(Int_t px, Int_t py); Distance to primitive for an overlap. void Draw(Option_t* option = """"); Draw the overlap. One daughter will be blue, the other green,; extruding points red. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Event interception. void Paint(Option_t* option = """"); Paint the overlap. void Print(Option_t* option = """") const; Print detailed info. void PrintInfo() const; Print some info. void SetNextPoint(Double_t x, Double_t y, Double_t z); Set next overlapping point. void SampleOverlap(Int_t npoints = 1000000); Draw overlap and sample with random points the overlapping region. void Sizeof3D() const; Get 3D size of this. void Validate() const; Validate this overlap. TGeoOverlap(const TGeoOverlap& ). TGeoOverlap& operator=(const TGeoOverlap& ). TPolyMarker3D * GetPolyMarker() const; {return fMarker;}. TGeoVolume * GetFirstVolume() const; {return fVolume1;}. TGeoVolume * GetSecondVolume() const; {return fVolume2;}. TGeoHMatrix * GetFirstMatrix() const; {return fMatrix1;}. TGeoHMatrix * GetSecondMatrix() const; {return fMatrix2;}. Double_t GetOverlap() const; {return fOverlap;}. Bool_t IsExtrusion() const; {retur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoOverlap.html:8852,green,green,8852,root/html528/TGeoOverlap.html,https://root.cern,https://root.cern/root/html528/TGeoOverlap.html,10,['green'],['green']
Energy Efficiency,"me; result (i.e. can compare pointer *values* directly, without having to; call strcmp on what they point to). void ComputeVirtualSize(); Computes virtual size of html area. void ClearGcCache(); Clear the cache of GCs. void ResetLayoutContext(); Reset the main layout context in the main widget. This happens; before we redo the layout, or just before deleting the widget. void Redraw(); This routine is invoked in order to redraw all or part of the HTML; widget. This might happen because the display has changed, or in; response to an expose event. In all cases, though, this routine; is called by an idle handler. void ScheduleRedraw(); Make sure that a call to the Redraw() routine has been queued. Bool_t HandleIdleEvent(TGIdleHandler* i); Handles idle event. void RedrawArea(int left, int top, int right, int bottom); If any part of the screen needs to be redrawn, then call this routine; with the values of a box (in window coordinates) that needs to be; redrawn. This routine will schedule an idle handler to do the redraw. The box coordinates are relative to the clipping window (fCanvas). void DrawRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); Draw region defined by [x,y] [w,h]. Bool_t ItemLayout(); Layout html widget. void RedrawBlock(TGHtmlBlock* p); Redraw the TGHtmlBlock given. void RedrawEverything(); Call this routine to force the entire widget to be redrawn. void RedrawText(int y); Call this routine to cause all of the rendered HTML at the; virtual canvas coordinate of Y and beyond to be redrawn. void HClear(); Erase all data from the HTML widget. Bring it back to an empty screen. Bool_t HandleTimer(TTimer* timer); Handle timer event. void FlashCursor(); Flash the insertion cursor. GContext_t GetGC(int color, int font); Return a GC from the cache. As many as N_CACHE_GCs are kept valid; at any one time. They are replaced using an LRU algorithm. A value of FONT_Any (-1) for the font means ""don't care"". GContext_t GetAnyGC(); Retrieve any valid GC. The font and color don",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHtml.html:34150,schedul,schedule,34150,root/html528/TGHtml.html,https://root.cern,https://root.cern/root/html528/TGHtml.html,10,['schedul'],['schedule']
Energy Efficiency,"meRatio(); Returns ratio - volme of node to area taken by outlining box. Float_t GetWidth() const; Returns width of outlining box. Float_t GetX() const; Returns X coordinate. Float_t GetY() const; Returns Y coordinate. Bool_t IsCollapsed() const; Returns true if node is colllapsed. Bool_t IsSortable() const; Returns true, because we have overrided method Compare. bool IsVisible() const; Returns true if node is visible. void SetAllMembersCount(ULong_t count); Sets numbers of all members to ""number"". void SetCollapsed(Bool_t collapsed); Sets collapsing of node to ""collapse"". void SetHeight(Float_t h); Sets width of outlining box to ""w"". void SetMaxLevel(UInt_t level); Sets maximum number of leves displayed when the node is top node on scene. void SetMaxObjects(UInt_t max); Sets maximum number of objects displayed when the node is top node on scene. void SetMembers(TList* list); Sets list of dauther nodes to ""list"". void SetMembersCount(ULong_t count); Sets number of members to ""number"". void SetNodeType(ENodeType type); Sets type of node to ""type"". void SetPointer(void* pointer); Sets main pointer to ""pointer"". void SetScaleBy(EScalingType type); Sets scaling by to ""type"". void SetSize(ULong_t size); Sets size of node to ""size"". void SetTotalSize(ULong_t size); Sets total size of allocated memory in bytes to value ""size"". void SetVisible(bool visible); Sets visibility of node to ""visible"". void SetWidth(Float_t w); Sets width of outlining box to ""w"". void SetX(Float_t x); Sets X coordinate to ""x"". void SetY(Float_t y); Sets Y coordinate to ""y"". TStructNode(TString name, TString typeName, void* pointer, TStructNode* parent, ULong_t size, ENodeType type). » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id$ » Last generated: 2015-03-14 16:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStructNode.html:11804,allocate,allocated,11804,root/html534/TStructNode.html,https://root.cern,https://root.cern/root/html534/TStructNode.html,2,['allocate'],['allocated']
Energy Efficiency,"meRatio(); Returns ratio - volme of node to area taken by outlining box. Float_t GetWidth() const; Returns width of outlining box. Float_t GetX() const; Returns X coordinate. Float_t GetY() const; Returns Y coordinate. Bool_t IsCollapsed() const; Returns true if node is colllapsed. Bool_t IsSortable() const; Returns true, because we have overrided method Compare. bool IsVisible() const; Returns true if node is visible. void SetAllMembersCount(ULong_t count); Sets numbers of all members to ""number"". void SetCollapsed(Bool_t collapsed); Sets collapsing of node to ""collapse"". void SetHeight(Float_t h); Sets width of outlining box to ""w"". void SetMaxLevel(UInt_t level); Sets maximum number of leves displayed when the node is top node on scene. void SetMaxObjects(UInt_t max); Sets maximum number of objects displayed when the node is top node on scene. void SetMembers(TList* list); Sets list of dauther nodes to ""list"". void SetMembersCount(ULong_t count); Sets number of members to ""number"". void SetNodeType(ENodeType type); Sets type of node to ""type"". void SetPointer(void* pointer); Sets main pointer to ""pointer"". void SetScaleBy(EScalingType type); Sets scaling by to ""type"". void SetSize(ULong_t size); Sets size of node to ""size"". void SetTotalSize(ULong_t size); Sets total size of allocated memory in bytes to value ""size"". void SetVisible(bool visible); Sets visibility of node to ""visible"". void SetWidth(Float_t w); Sets width of outlining box to ""w"". void SetX(Float_t x); Sets X coordinate to ""x"". void SetY(Float_t y); Sets Y coordinate to ""y"". TStructNode(TString name, TString typeName, void* pointer, TStructNode* parent, ULong_t size, ENodeType type). » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id$ » Last generated: 2015-06-02 16:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TStructNode.html:12281,allocate,allocated,12281,root/html604/TStructNode.html,https://root.cern,https://root.cern/root/html604/TStructNode.html,2,['allocate'],['allocated']
Energy Efficiency,"meRatio(); Returns ratio - volme of node to area taken by outlining box. Float_t GetWidth() const; Returns width of outlining box. Float_t GetX() const; Returns X coordinate. Float_t GetY() const; Returns Y coordinate. Bool_t IsCollapsed() const; Returns true if node is colllapsed. Bool_t IsSortable() const; Returns true, because we have overrided method Compare. bool IsVisible() const; Returns true if node is visible. void SetAllMembersCount(ULong_t count); Sets numbers of all members to ""number"". void SetCollapsed(Bool_t collapsed); Sets collapsing of node to ""collapse"". void SetHeight(Float_t h); Sets width of outlining box to ""w"". void SetMaxLevel(UInt_t level); Sets maximum number of leves displayed when the node is top node on scene. void SetMaxObjects(UInt_t max); Sets maximum number of objects displayed when the node is top node on scene. void SetMembers(TList* list); Sets list of dauther nodes to ""list"". void SetMembersCount(ULong_t count); Sets number of members to ""number"". void SetNodeType(ENodeType type); Sets type of node to ""type"". void SetPointer(void* pointer); Sets main pointer to ""pointer"". void SetScaleBy(EScalingType type); Sets scaling by to ""type"". void SetSize(ULong_t size); Sets size of node to ""size"". void SetTotalSize(ULong_t size); Sets total size of allocated memory in bytes to value ""size"". void SetVisible(bool visible); Sets visibility of node to ""visible"". void SetWidth(Float_t w); Sets width of outlining box to ""w"". void SetX(Float_t x); Sets X coordinate to ""x"". void SetY(Float_t y); Sets Y coordinate to ""y"". TStructNode(TString name, TString typeName, void* pointer, TStructNode* parent, ULong_t size, ENodeType type). » Author: Tomasz Sosnicki 18/09/09 » Copyright (C) 1995-2009, Rene Brun and Fons Rademakers. *; » Last changed: root/gviz3d:$Id$ » Last generated: 2015-06-30 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStructNode.html:12281,allocate,allocated,12281,root/html602/TStructNode.html,https://root.cern,https://root.cern/root/html602/TStructNode.html,2,['allocate'],['allocated']
Energy Efficiency,"memory is allocated for a^(-1) ; Definition at line 165 of file TMatrixT.cxx. ◆ TMatrixT() [12/15]. template<class Element > . TMatrixT< Element >::TMatrixT ; (; const TMatrixT< Element > & ; a, . EMatrixCreatorsOp2 ; op, . const TMatrixTSym< Element > & ; b . ). Constructor of matrix applying a specific operation to two prototypes. ; Example: TMatrixT<Element> a(10,12), b(12,5); ...; TMatrixT<Element> c(a, TMatrixT::kMult, b); Supported operations are: kMult (a*b), kTransposeMult (a'*b), kInvMult (a^(-1)*b) ; Definition at line 227 of file TMatrixT.cxx. ◆ TMatrixT() [13/15]. template<class Element > . TMatrixT< Element >::TMatrixT ; (; const TMatrixTSym< Element > & ; a, . EMatrixCreatorsOp2 ; op, . const TMatrixT< Element > & ; b . ). Constructor of matrix applying a specific operation to two prototypes. ; Example: TMatrixT<Element> a(10,12), b(12,5); ...; TMatrixT<Element> c(a, TMatrixT::kMult, b); Supported operations are: kMult (a*b), kTransposeMult (a'*b), kInvMult (a^(-1)*b) Whenever kInvMult is invoked and b is not squared, additional memory is allocated for a^(-1) ; Definition at line 281 of file TMatrixT.cxx. ◆ TMatrixT() [14/15]. template<class Element > . TMatrixT< Element >::TMatrixT ; (; const TMatrixTSym< Element > & ; a, . EMatrixCreatorsOp2 ; op, . const TMatrixTSym< Element > & ; b . ). Constructor of matrix applying a specific operation to two prototypes. ; Example: TMatrixT<Element> a(10,12), b(12,5); ...; TMatrixT<Element> c(a, TMatrixT::kMult, b); Supported operations are: kMult (a*b), kTransposeMult (a'*b), kInvMult (a^(-1)*b) ; Definition at line 343 of file TMatrixT.cxx. ◆ TMatrixT() [15/15]. template<class Element > . TMatrixT< Element >::TMatrixT ; (; const TMatrixTLazy< Element > & ; lazy_constructor). Constructor using the TMatrixTLazy class. ; Definition at line 394 of file TMatrixT.cxx. ◆ ~TMatrixT(). template<class Element > . TMatrixT< Element >::~TMatrixT ; (; ). inlineoverride . Definition at line 84 of file TMatrixT.h. Member Funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixT.html:31799,allocate,allocated,31799,doc/master/classTMatrixT.html,https://root.cern,https://root.cern/doc/master/classTMatrixT.html,1,['allocate'],['allocated']
Energy Efficiency,"ment is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long_t*& l); Read array of longs from the I/O buffer. Returns the number of longs; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long64_t*& l); Read array of long longs from the I/O buffer. Returns the number of; long longs read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Float_t*& f); Read array of floats from the I/O buffer. Returns the number of floats; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Double_t*& d); Read array of doubles from the I/O buffer. Returns the number of doubles; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArrayFloat16(Float_t*& f, TStreamerElement* ele = 0); Read array of floats (written as truncated float) from the I/O buffer.; Returns the number of floats read.; If argument is a 0 pointer then space will be allocated for the array.; see comments about Float16_t encoding at TBufferFile::WriteFloat16. Int_t ReadArrayDouble32(Double_t*& d, TStreamerElement* ele = 0); Read array of doubles (written as float) from the I/O buffer.; Returns the number of doubles read.; If argument is a 0 pointer then space will be allocated for the array.; see comments about Double32_t encoding at TBufferFile::WriteDouble32. Int_t ReadStaticArray(Bool_t* b); Read array of bools from the I/O buffer. Returns the number of bools; read. Int_t ReadStaticArray(Char_t* c); Read array of characters from the I/O buffer. Returns the number of; characters read. Int_t ReadStaticArray(Short_t* h); Read array of shorts from the I/O buffer. Returns the number of shorts; read. Int_t ReadStaticArray(Int_t* i); Read array of ints from the I/O buffer. Returns the number of ints; read. Int_t ReadStaticArray(Long_t* l); Read array of longs from the I/O buffer. Returns the number of longs; read. Int_t ReadStaticArray(Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBufferFile.html:28287,allocate,allocated,28287,root/html528/TBufferFile.html,https://root.cern,https://root.cern/root/html528/TBufferFile.html,10,['allocate'],['allocated']
Energy Efficiency,"ment number i in StreamerInfo; -method2 len >= 0; i is the type; address of variable is directly pointer. Double_t GetValueClones(TClonesArray* clones, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. Double_t GetValueSTL(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. Double_t GetValueSTLP(TVirtualCollectionProxy* cont, Int_t i, Int_t j, Int_t k, Int_t eoffset) const; return value of element i in object number j in a TClonesArray and eventually; element k in a sub-array. void InsertArtificialElements(const TObjArray* rules); Insert new members as expressed in the array of TSchemaRule(s). void ls(Option_t* option = """") const; List the TStreamerElement list and also the precomputed tables. void* New(void* obj = 0); An emulated object is created at address obj, if obj is null we; allocate memory for the object. void* NewArray(Long_t nElements, void* ary = 0); An array of emulated objects is created at address ary, if ary is null,; we allocate memory for the array. void DestructorImpl(void* p, Bool_t dtorOnly); Internal part of the destructor.; Destruct each of the datamembers in the same order; as the implicit destructor would. void Destructor(void* p, Bool_t dtorOnly = kFALSE); Emulated destructor for this class.; An emulated object is destroyed at address p.; Destruct each of the datamembers in the same order; as the implicit destructor would. void DeleteArray(void* p, Bool_t dtorOnly = kFALSE); Destroy an array of emulated objects, with optional delete. void PrintValue(const char* name, char* pointer, Int_t i, Int_t len, Int_t lenmax = 1000) const; print value of element i in object at pointer; The function may be called in two ways:; -method1 len < 0; i is assumed to be the TStreamerElement number i in StreamerInfo; -method2 le",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStreamerInfo.html:21925,allocate,allocate,21925,root/html528/TStreamerInfo.html,https://root.cern,https://root.cern/root/html528/TStreamerInfo.html,4,['allocate'],['allocate']
Energy Efficiency,"ment::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveTrackPropagator(const char* n = ""TEveTrackPropagator"", const char* t = """", TEveMagField* field = 0, Bool_t own_field = kTRUE); Default constructor. ~TEveTrackPropagator(); Destructor. void OnZeroRefCount(); Virtual from TEveRefBackPtr - track reference count has reached zero. void CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); Check reference count - virtual from TEveElement.; Must also take into account references from TEveRefBackPtr. void ElementChanged(Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); Element-change notification.; Stamp all tracks as requiring display-list regeneration.; Virtual from TEveElement. void InitTrack(const TEveVectorD& v, Int_t charge); Initialize internal data-members for given particle parameters. void InitTrack(const TEveVectorF& v, Int_t charge); TEveVectorF wrapper. void ResetTrack(); Reset cache holding particle trajectory. Int_t GetCurrentPoint() const; Get index of current point on track. Double_t GetTrackLength(Int_t start_point = 0, Int_t end_point = -1) const; Calculate track length from start_point to end_point.; If end_point is less than 0, distance to the end is returned. Bool_t GoToVertex(TEveVectorD& v, TEveVectorD& p); Propagate particle with momentum p to vertex v. Bool_t GoToLineSegment(const TEveVectorD& s, const TEveVectorD& r, TEveVectorD& p); Propagate particle with momentum p to line with start point s and vector r to the second point. Bool_t GoToVertex(TEveVectorF& v, TEveVectorF& p); TEveVectorF wrapper. Bool_t GoToLineSegment(const TEveVectorF& s, const TEveVectorF& r, TEveVectorF& p); TEveVectorF wrapper. void GoToBounds(TEveVectorD& p); Propagate particle to bounds.; Return TRUE if hit bounds. void GoToBounds(TEveVectorF& p); TEveVectorF wrapper. void Update(const TEveVector4D& v, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTrackPropagator.html:28129,charge,charge,28129,root/html602/TEveTrackPropagator.html,https://root.cern,https://root.cern/root/html602/TEveTrackPropagator.html,4,['charge'],['charge']
Energy Efficiency,"ment::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveJetCone(const Text_t* n = ""TEveJetCone"", const Text_t* t = """"); Constructor. void ComputeBBox(); Compute bounding-box of the data. TClass* ProjectedClass(const TEveProjection* p) const; Virtual from TEveProjectable, returns TEveJetConeProjected class. Int_t AddCone(Float_t eta, Float_t phi, Float_t cone_r, Float_t length = 0); Add jet cone.; parameters are :; * (eta,phi) : of the center/leading particle; * cone_r : cone radius in eta-phi space; * length : length of the cone; * if cylinder is set and length is adapted to cylinder.; - if length is given, it will be used as scalar factor; * if cylinder is not set, length is used as length of the cone; Return 0 on sucess. Int_t AddEllipticCone(Float_t eta, Float_t phi, Float_t reta, Float_t rphi, Float_t length = 0); Add jet cone.; parameters are :; * (eta,phi) : of the center/leading particle; * (reta, rphi) : radius of cone in eta-phi space; * length : length of the cone; * if cylinder is set and length is adapted to cylinder.; - if length is given, it will be used as scalar factor; * if cylinder is not set, length is used as length of the cone; Returns 0 on sucess. TEveVector CalcEtaPhiVec(Float_t eta, Float_t phi) const; Fill TEveVector with eta and phi, magnitude 1. TEveVector CalcBaseVec(Float_t eta, Float_t phi) const; Returns point on the base of the cone with given eta and phi. TEveVector CalcBaseVec(Float_t alpha) const; Returns point on the base of the cone with internal angle alpha:; alpha = 0 -> max eta, alpha = pi/2 -> max phi, ... Bool_t IsInTransitionRegion() const; Returns true if the cone is in barrel / endcap transition region. TEveJetCone(const TEveJetCone& ). TEveJetCone& operator=(const TEveJetCone& ). virtual ~TEveJetCone(); {}. void SetApex(const TEveVector& a); { fApex = a; }. void SetCylinder(Float_t r, Float_t z); { fLimits.Set(0, r, z); fThetaC = fLimits.Theta(); }. void SetRadius(F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveJetCone.html:24810,adapt,adapted,24810,root/html602/TEveJetCone.html,https://root.cern,https://root.cern/root/html602/TEveJetCone.html,4,['adapt'],['adapted']
Energy Efficiency,"mentation for TChain::AddFile, which does not support wildcards but allows the URL name to contain a query).; The rules for tagging the name of the tree in the file are the same as in the format above. Details of the nentries parameter; Depending on the value of the parameter, the number of entries in the file is retrieved differently:; If nentries <= 0, the file is connected and the tree header read in memory to get the number of entries.; If nentries > 0, the file is not connected, nentries is assumed to be the number of entries in the file. In this case, no check is made that the file exists and that the corresponding tree exists as well. This second mode is interesting in case the number of entries in the file is already stored in a run data base for example.; If nentries == TTree::kMaxEntries (default), the file is not connected. The number of entries in each file will be read only when the file will need to be connected to read an entry. This option is the default and very efficient if one processes the chain sequentially. Note that in case TChain::GetEntry(entry) is called and entry refers to an entry in the 3rd file, for example, this forces the tree headers in the first and second file to be read to find the number of entries in these files. Note that calling TChain::GetEntriesFast after having created a chain with this default returns TTree::kMaxEntries ! Using TChain::GetEntries instead will force all the tree headers in the chain to be read to get the number of entries in each tree. The TChain data structure; Each element of the chain is a TChainElement object. It has a name equal to the tree name of this chain (or the name of the specific tree in the added file if it was explicitly tagged) and a title equal to the file name. So, to loop over the files that have been added to this chain: TObjArray *fileElements=chain->GetListOfFiles();; for (TObject *op: *fileElements) {; auto chainElement = static_cast<TChainElement *>(op);; TFile f{chainElement->GetTitl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:59172,efficient,efficient,59172,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,2,['efficient'],['efficient']
Energy Efficiency,menting numeric convolution of 2 input PDFs; RooNumConvolution Operator PDF implementing numeric convolution of 2 input functions; RooNumGenConfig Numeric (MC) Event generator configuration; RooNumGenFactory Numeric Generator factory; RooNumIntConfig Numeric Integrator configuration; RooNumIntFactory Numeric Integrator factory; RooNumRunningInt Numeric calculator for running integral of a given function; RooNumber wrapper class for portable numerics; RooObjCacheManager Cache manager for generic caches that contain RooAbsArg objects; RooParamBinning Binning specification with ranges parameterized by external RooAbsReal functions; RooParamHistFunc Your description goes here...; RooParametricStepFunction Parametric Step Function Pdf; RooPlot Plot frame and container for graphics objects; RooPlotable Abstract interface for plotable objects in a RooPlot; RooPoisson A Poisson PDF; RooPolyVar Polynomial function; RooPolynomial Polynomial PDF; RooPrintable Interface for printable objects; RooProdGenContext Context for efficient generation of a a dataset from a RooProdPdf; RooProdPdf PDF representing a product of PDFs; RooProduct Product of RooAbsReal and/or RooAbsCategory terms; RooProfileLL Real-valued function representing profile likelihood of external (likelihood) function; RooProjectedPdf Operator p.d.f calculating projection of another p.d.f; RooProofDriverSelector ; RooPullVar Calculation of pull of measurement w.r.t a truth value; RooQuasiRandomGenerator Quasi-random number generator; RooRandom Random number generator interface; RooRandomizeParamMCSModule MCStudy module to vary one or more input parameters during fit/generation cycle; RooRangeBinning Binning that only defines the total range; RooRangeBoolean Polynomial function; RooRealAnalytic Function binding to an analytical integral of a RooAbsReal; RooRealBinding Function binding to RooAbsReal object; RooRealConstant RooRealVar constants factory; RooRealIntegral Real-valued function representing an integral over,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:38714,efficient,efficient,38714,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,4,['efficient'],['efficient']
Energy Efficiency,"ments TBuffer.; Definition at line 456 of file TBufferFile.h. ◆ ReadArray() [10/13]. Int_t TBufferFile::ReadArray ; (; UInt_t *& ; i). inlineoverridevirtual . Implements TBuffer.; Definition at line 462 of file TBufferFile.h. ◆ ReadArray() [11/13]. Int_t TBufferFile::ReadArray ; (; ULong64_t *& ; l). inlineoverridevirtual . Implements TBuffer.; Definition at line 468 of file TBufferFile.h. ◆ ReadArray() [12/13]. Int_t TBufferFile::ReadArray ; (; ULong_t *& ; l). inlineoverridevirtual . Implements TBuffer.; Definition at line 465 of file TBufferFile.h. ◆ ReadArray() [13/13]. Int_t TBufferFile::ReadArray ; (; UShort_t *& ; h). inlineoverridevirtual . Implements TBuffer.; Definition at line 459 of file TBufferFile.h. ◆ ReadArrayDouble32(). Int_t TBufferFile::ReadArrayDouble32 ; (; Double_t *& ; d, . TStreamerElement * ; ele = nullptr . ). overridevirtual . Read array of doubles (written as float) from the I/O buffer. ; Returns the number of doubles read. If argument is a 0 pointer then space will be allocated for the array. see comments about Double32_t encoding at TBufferFile::WriteDouble32 ; Implements TBuffer.; Definition at line 985 of file TBufferFile.cxx. ◆ ReadArrayFloat16(). Int_t TBufferFile::ReadArrayFloat16 ; (; Float_t *& ; f, . TStreamerElement * ; ele = nullptr . ). overridevirtual . Read array of floats (written as truncated float) from the I/O buffer. ; Returns the number of floats read. If argument is a 0 pointer then space will be allocated for the array. see comments about Float16_t encoding at TBufferFile::WriteFloat16 ; Implements TBuffer.; Definition at line 963 of file TBufferFile.cxx. ◆ ReadBool(). void TBufferFile::ReadBool ; (; Bool_t & ; b). inlineoverridevirtual . Implements TBuffer.; Reimplemented in TBufferSQL.; Definition at line 369 of file TBufferFile.h. ◆ ReadBuf(). Int_t TBufferFile::ReadBuf ; (; void * ; buf, . Int_t ; max . ). overridevirtual . Read max bytes from the I/O buffer into buf. ; The function returns the actual number of b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferFile.html:49568,allocate,allocated,49568,doc/master/classTBufferFile.html,https://root.cern,https://root.cern/doc/master/classTBufferFile.html,1,['allocate'],['allocated']
Energy Efficiency,"mentum-energy 4-vector) ;  ; Scalar E2 () const;  energy squared ;  ; Scalar Et () const;  transverse energy ;  ; Scalar Et2 () const;  transverse energy squared ;  ; Scalar Eta () const;  ; void GetCoordinates (Scalar &pt, Scalar &eta, Scalar &phi, Scalar &mass) const;  get internal data into 4 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 4 Scalar numbers ;  ; Scalar M () const;  M() is the invariant mass; in this coordinate system it can be negagative if set that way. ;  ; Scalar M2 () const;  vector magnitude squared (or mass squared) In case of negative mass (spacelike particles return negative values) ;  ; Scalar Mag () const;  ; Scalar Mag2 () const;  ; Scalar Mt () const;  transverse mass - will be negative if Mt2() is negative ;  ; Scalar Mt2 () const;  transverse mass squared ;  ; void Negate ();  negate the 4-vector – Note that the energy cannot be negate (would need an additional data member) therefore negate will work only on the spatial components One would need to use negate only with vectors having the energy as data members ;  ; bool operator!= (const PtEtaPhiM4D &rhs) const;  ; template<class CoordSystem > ; PtEtaPhiM4D & operator= (const CoordSystem &c);  Assignment from a generic coordinate system implementing Pt(), Eta(), Phi() and M() ;  ; PtEtaPhiM4D & operator= (const PtEtaPhiM4D &v);  assignment operator ;  ; bool operator== (const PtEtaPhiM4D &rhs) const;  Exact equality. ;  ; Scalar P () const;  magnitude of momentum ;  ; Scalar P2 () const;  squared magnitude of spatial components (momentum squared) ;  ; Scalar Perp () const;  ; Scalar Perp2 () const;  ; Scalar Phi () const;  ; Scalar Pt () const;  ; Scalar Pt2 () const;  transverse spatial component squared ;  ; Scalar Px () const;  ; Scalar Py () const;  ; Scalar Pz () const;  ; Scalar R () const;  ; Scalar Rho () const;  ; void Scale (Scalar a);  Scale coordinate values by a scalar quantity a. ;  ; void SetCoordinates (const Scalar sr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiM4D.html:2379,energy,energy,2379,doc/master/classROOT_1_1Math_1_1PtEtaPhiM4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiM4D.html,2,['energy'],['energy']
Energy Efficiency,"meobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNonCPEigenDecay(const char* name, const char* title, RooRealVar& t, RooAbsCategory& tag, RooAbsReal& tau, RooAbsReal& dm, RooAbsReal& avgW, RooAbsReal& delW, RooAbsCategory& rhoQ, RooAbsReal& correctQ, RooAbsReal& wQ, RooAbsReal& a, RooAbsReal& C, RooAbsReal& delC, RooAbsReal& S, RooAbsReal& delS, const RooResolutionModel& model, RooNonCPEigenDecay::DecayType type = DoubleSided). RooNonCPEigenDecay(const char* name, const char* title, RooRealVar& t, RooAbsCategory& tag, RooAbsReal& tau, RooAbsReal& dm, RooAbsReal& avgW, RooAbsReal& delW, RooAbsCategory& rhoQ, RooAbsReal& correctQ, RooAbsReal& a, RooAbsReal& C, RooAbsReal& delC, RooAbsReal& S, RooAbsReal& delS, const RooResolutionModel& model, RooNonCPEigenDecay::DecayType type = DoubleSided). RooNonCPEigenDecay(const RooNonCPEigenDecay& other, const char* name = 0); Copy constructor. ~RooNonCPEigenDecay( void ); Destructor. Double_t coefficient(Int_t basisIndex) const; B0 : _tag == -1; B0bar : _tag == +1; rho+ : _rhoQ == +1; rho- : _rhoQ == -1; the charge corrrection factor ""_correctQ"" serves to implement mis-charges. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; correct for the right/wrong charge... Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const. void initGenerator(Int_t code). void generateEvent(Int_t code). inline RooNonCPEigenDecay( void ); Constructors, assignment etc. { }. TObject* clone(const char* newname) const. » Last changed: Tue Jun 30 14:34:25 2015 » Last generated: 2015-06-30 14:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNonCPEigenDecay.html:49263,charge,charge,49263,root/html602/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html602/RooNonCPEigenDecay.html,6,['charge'],"['charge', 'charges']"
Energy Efficiency,"meobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNonCPEigenDecay(const char* name, const char* title, RooRealVar& t, RooAbsCategory& tag, RooAbsReal& tau, RooAbsReal& dm, RooAbsReal& avgW, RooAbsReal& delW, RooAbsCategory& rhoQ, RooAbsReal& correctQ, RooAbsReal& wQ, RooAbsReal& a, RooAbsReal& C, RooAbsReal& delC, RooAbsReal& S, RooAbsReal& delS, const RooResolutionModel& model, RooNonCPEigenDecay::DecayType type = DoubleSided). RooNonCPEigenDecay(const char* name, const char* title, RooRealVar& t, RooAbsCategory& tag, RooAbsReal& tau, RooAbsReal& dm, RooAbsReal& avgW, RooAbsReal& delW, RooAbsCategory& rhoQ, RooAbsReal& correctQ, RooAbsReal& a, RooAbsReal& C, RooAbsReal& delC, RooAbsReal& S, RooAbsReal& delS, const RooResolutionModel& model, RooNonCPEigenDecay::DecayType type = DoubleSided). RooNonCPEigenDecay(const RooNonCPEigenDecay& other, const char* name = 0); Copy constructor. ~RooNonCPEigenDecay( void ); Destructor. Double_t coefficient(Int_t basisIndex) const; B0 : _tag == -1; B0bar : _tag == +1; rho+ : _rhoQ == +1; rho- : _rhoQ == -1; the charge corrrection factor ""_correctQ"" serves to implement mis-charges. Int_t getCoefAnalyticalIntegral(Int_t coef, RooArgSet& allVars, RooArgSet& analVars, const char* rangeName = 0) const. Double_t coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; correct for the right/wrong charge... Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const. void initGenerator(Int_t code). void generateEvent(Int_t code). inline RooNonCPEigenDecay( void ); Constructors, assignment etc. { }. TObject* clone(const char* newname) const. » Last changed: Tue Mar 10 17:18:08 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNonCPEigenDecay.html:47504,charge,charge,47504,root/html534/RooNonCPEigenDecay.html,https://root.cern,https://root.cern/root/html534/RooNonCPEigenDecay.html,6,['charge'],"['charge', 'charges']"
Energy Efficiency,"mepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TVirtualViewer3D. class TVirtualViewer3D: public TObject. TVirtualViewer3D. Abstract 3D shapes viewer. The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. ; 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing; client to test preferences, add objects, control the viewer via scripting; (to be added) etc.; TBuffer3D class hierarchy: Used to describe 3D objects; (""shapes""); - filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers; (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow; our simple x3d viewer, and considerably more sophisticated OpenGL one to both; work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again; ... repeat 3/4/5; as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always; bound to a TPad object at present [This may be removed as a restriction in; the future] . You should perform the publishing to the viewer described below; in the Paint() method of the object you attach to the pad (via Draw()); TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or; Pad ""pad"" (default). The viewer is created via the plugin manager,; attached to pad, and the interface returned.; Begin / End Scene; Objects must be added to viewer between BeginScene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualViewer3D.html:1106,efficient,efficiently,1106,root/html528/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html528/TVirtualViewer3D.html,6,['efficient'],['efficiently']
Energy Efficiency,"merInfoActions::TActionSequence::SequenceGetter_t ; create, . TStreamerInfoActions::TActionSequence *& ; actionSequence . ). protected . Set the sequence of actions needed to read the data out of the buffer. ; Definition at line 5628 of file TBranchElement.cxx. ◆ SetAddress(). void TBranchElement::SetAddress ; (; void * ; addr). overridevirtual . Point this branch at an object. ; For a sub-branch, addr is a pointer to the branch object.; For a top-level branch the meaning of addr is as follows:; If addr is zero, then we allocate a branch object internally and the branch is the owner of the allocated object, not the caller. However the caller may obtain a pointer to the branch object with GetObject(). The pointer is reset to zero (nullptr) when the relevant branch object is destroyed.; Example: branch->SetAddress(0);; Event* event = branch->GetObject();; ... Do some work.; EventDefinition collection_proxies.C:172; If addr is not zero, but the pointer addr points at is zero, then we allocate a branch object and set the passed pointer to point at the allocated object. The caller owns the allocated object and is responsible for deleting it when it is no longer needed.; Example: Event* event = 0;; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;; If addr is not zero and the pointer addr points at is also not zero, then the caller has allocated a branch object and is asking us to use it. The caller owns it and must delete it when it is no longer needed.; Example: Event* event = new Event();; branch->SetAddress(&event);; ... Do some work.; delete event;; event = 0;; These rules affect users of TTree::Branch(), TTree::SetBranchAddress(), and TChain::SetBranchAddress() as well because those routines call this one.; An example of a tree with branches with objects allocated and owned by us: TFile* f1 = new TFile(""myfile_original.root"");; TTree* t1 = (TTree*) f->Get(""MyTree"");; TFile* f2 = new TFile(""myfile_copy.root"", ""recreate"");; TTree* t2 = t1->Clone",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchElement.html:66877,allocate,allocate,66877,doc/master/classTBranchElement.html,https://root.cern,https://root.cern/doc/master/classTBranchElement.html,2,['allocate'],"['allocate', 'allocated']"
Energy Efficiency,"mes out too low, and doesn't match up with the slices in the side bands, which are normalised to ""their"" data.; ; print(""Now plotting with unique normalisation for each slice.\n""); canvas.cd(1); plotFrame = x.frame(Title=""Wrong: Each slice normalised over its plotting range""); ; # Plot only the blinded data, and then plot the PDF over the full range as well as both sidebands; blindedData.plotOn(plotFrame); expo.plotOn(plotFrame, LineColor=""r"", Range=""full""); expo.plotOn(plotFrame, LineColor=""b"", Range=""left""); expo.plotOn(plotFrame, LineColor=""g"", Range=""right""); ; plotFrame.Draw(); ; # Right:; # ----------------------------------------------------------------------------------------------------------; # Make the same plot, but normalise each piece with respect to the regions ""left"" AND ""right"". This requires setting; # a ""NormRange"", which tells RooFit over which range the PDF has to be integrated to normalise.; # This means that the normalisation of the blue and green curves is slightly different from the left plot,; # because they get a common scale factor.; ; print(""\n\nNow plotting with correct norm ranges:\n""); canvas.cd(2); plotFrameWithNormRange = x.frame(Title=""Right: All slices have common normalisation""); ; # Plot only the blinded data, and then plot the PDF over the full range as well as both sidebands; blindedData.plotOn(plotFrameWithNormRange); expo.plotOn(plotFrameWithNormRange, LineColor=""b"", Range=""left"", NormRange=""left,right""); expo.plotOn(plotFrameWithNormRange, LineColor=""g"", Range=""right"", NormRange=""left,right""); expo.plotOn(plotFrameWithNormRange, LineColor=""r"", Range=""full"", NormRange=""left,right"", LineStyle=10); ; plotFrameWithNormRange.Draw(); ; canvas.Draw(); ; canvas.SaveAs(""rf212_plottingInRanges_blinding.png""); [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'full' created with bounds [1,30]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'left' created with bounds [1,10]; [#1] INFO:Eval -- RooRealVar::setRange(x) n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8py.html:3462,green,green,3462,doc/master/rf212__plottingInRanges__blinding_8py.html,https://root.cern,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8py.html,1,['green'],['green']
Energy Efficiency,"meter beta.; By default, alpha=0, beta=1; This distribution is known under different names, most common is; double exponential distribution, but it also appears as; the two-tailed exponential or the bilateral exponential distribution. Double_t LogNormal(Double_t x, Double_t sigma, Double_t theta = 0, Double_t m = 1); Computes the density of LogNormal distribution at point x.; Variable X has lognormal distribution if Y=Ln(X) has normal distribution; sigma is the shape parameter; theta is the location parameter; m is the scale parameter; The formula was taken from ""Engineering Statistics Handbook"" on site; http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm; Implementation using ROOT::Math::lognormal_pdf. /*; ; */. Double_t NormQuantile(Double_t p); Computes quantiles for standard normal distribution N(0, 1); at probability p; ALGORITHM AS241 APPL. STATIST. (1988) VOL. 37, NO. 3, 477-484. Bool_t Permute(Int_t n, Int_t* a); Simple recursive algorithm to find the permutations of; n natural numbers, not necessarily all distinct; adapted from CERNLIB routine PERMU.; The input array has to be initialised with a non descending; sequence. The method returns kFALSE when; all combinations are exhausted. Double_t Student(Double_t T, Double_t ndf); Computes density function for Student's t- distribution; (the probability function (integral of density) is computed in StudentI). First parameter stands for x - the actual variable of the; density function p(x) and the point at which the density is calculated.; Second parameter stands for number of degrees of freedom. About Student distribution:; Student's t-distribution is used for many significance tests, for example,; for the Student's t-tests for the statistical significance of difference; between two sample means and for confidence intervals for the difference; between two population means. Example: suppose we have a random sample of size n drawn from normal; distribution with mean Mu and st.deviation Sigma. Then th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMath.html:33617,adapt,adapted,33617,root/html528/TMath.html,https://root.cern,https://root.cern/root/html528/TMath.html,10,['adapt'],['adapted']
Energy Efficiency,"method (W.W. Hager, Condition estimators, SIAM J. Sci. Stat. Comp., 5 (1984), pp. 311-316) to determine \(||A^{-1}||_{1}\) without actually having to calculate \(A^{-1}\). It is used when calling Condition().; A code example below shows the usage of the condition number. The matrix \(A\) is a (10x10) Hilbert matrix that is badly conditioned as its determinant shows. We construct a vector b by summing the matrix rows. Therefore, the components of the solution vector x should be exactly 1. Our rule of thumb to the 2.1012 condition number predicts that the solution accuracy should be around; 15 - 12 = 3; digits. Indeed, the largest deviation is 0.00055 in component 6.; TMatrixDSym H = THilbertMatrixDSym(10);; TVectorD rowsum(10);; for (Int_t irow = 0; irow < 10; irow++); for (Int_t icol = 0; icol < 10; icol++); rowsum(irow) += H(irow,icol);; TDecompLU lu(H);; Bool_t ok;; TVectorD x = lu.Solve(rowsum,ok);; Double_t d1,d2;; lu.Det(d1,d2);; cout << ""cond:"" << lu.Condition() << endl;; cout << ""det :"" << d1*TMath:Power(2.,d2) << endl;; cout << ""tol :"" << lu.GetTol() << endl;; x.Print();; cond:3.9569e+12; det :2.16439e-53; tol :2.22045e-16; Vector 10 is as follows; | 1 |; ------------------; 0 |1; 1 |1; 2 |0.999997; 3 |1.00003; 4 |0.999878; 5 |1.00033; 6 |0.999452; 7 |1.00053; 8 |0.999723; 9 |1.00006; 14.6.3 LU; Decompose an nxn matrix \(A\).; PA = LU; P permutation matrix stored in the index array fIndex: j=fIndex[i] indicates that row j and rowishould be swapped. Sign of the permutation, \(-1^n\), where n is the number of interchanges in the permutation, stored in fSign.; L is lower triangular matrix, stored in the strict lower triangular part of fLU. The diagonal elements of L are unity and are not stored.; U is upper triangular matrix, stored in the diagonal and upper triangular part of fU.; The decomposition fails if a diagonal element of fLU equals 0.; 14.6.4 Bunch-Kaufman; Decompose a real symmetric matrix \(A\); A = UDUT; D is a block diagonal matrix with 1-by-1 and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:795965,Power,Power,795965,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Power'],['Power']
Energy Efficiency,"method:. Double_t <classname>::MDF(Double_t *x). which does the same as TMultiDimFit::Eval. Please refer to this; method. Further, the public static members:. Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fgNVariables]. are initialized, and assumed to exist. The class declaration is; assumed to be in <classname>.h and assumed to be provided by the; user. See TMultiDimFit::MakeRealCode for a list of options. The minimal class definition is:. class <classname> {; public:; Int_t <classname>::fgNVariables; // Number of variables; Int_t <classname>::fgNCoefficients; // Number of terms; Double_t <classname>::fgDMean; // Mean from training sample; Double_t <classname>::fgXMean[]; // Mean from training sample; Double_t <classname>::fgXMin[]; // Min from training sample; Double_t <classname>::fgXMax[]; // Max from training sample; Double_t <classname>::fgCoefficient[]; // Coefficients; Int_t <classname>::fgPower[]; // Function powers. Double_t Eval(Double_t *x);; };. Whether the method <classname>::Eval should be static or not, is; up to the user. void MakeNormalized(); PRIVATE METHOD:; Normalize data to the interval [-1;1]. This is needed for the; classes method to work. void MakeParameterization(); PRIVATE METHOD:; Find the parameterization over the training sample. A full account; of the algorithm is given in the; class description. void MakeRealCode(const char* filename, const char* classname, Option_t* option = """"); PRIVATE METHOD:; This is the method that actually generates the code for the; evaluation the parameterization on some point.; It's called by TMultiDimFit::MakeCode and TMultiDimFit::MakeMethod. The options are: NONE so far. void Print(Option_t* option = ""p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:31573,power,powers,31573,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,10,['power'],['powers']
Energy Efficiency,"mi-interactive work with large amounts of data. They ended up re-implementing a full Totem analysis in a declarative fashion using RDataFrame and distributing their calculations over a big Spark cluster with PyRDF.; Check it out on CDS! . 30-01-2019 ; More tests, more benchmarks! ; ROOT relies on testing, including performance testing - and we need to improve both.; . 30-01-2019 ; Better argument parsing ; Use a C++ command line argument library for defining and parsing ROOT's options.; . 30-01-2019 ; Transform GNU-makefile tests to CMake ; ROOT's test suite has several crucial tests that still try on GNU-Makefile. We need to integrate them with CMake.; . 11-07-2018 ; RDataFrame session at CHEP 2018 ; Join the CHEP 2018 BOF to discuss bout the Future of ROOT Based Analysis: sign up here and visit the indico agenda.; Too much data? Too many cores? TTree analysis is tedious? Come and enjoy an intro plus discussion of RDataFrame, ROOT's current-generation way of writing super-efficient analyses! It moves all the intricacies into ROOT's responsibility, leaving you simply with a declarative formulation of the filters and computations that make up your analysis.; . 17-01-2018 ; ROOT Users' Workshop 2018 ; The ROOT team would like to invite you to the 11th ROOT Users' Workshop. This time we meet in Sarajevo, the capital of Bosnia and Herzegovina -; a buzzing melting pot of cultures since centuries.; The workshop features four days of presentations and discussions on everything ROOT:; what works for you, what doesn't and how ROOT evolves to address future challenges.; ROOT is changing; this is your chance to influence what happens and to interact with all its developers!; Our way of saying ""thank you for participating"" is to make sure that you have a great time in a unique location! . 03-08-2017 ; The ROOT Docker container (alpha version) ; Do you like Docker? Would you like to use ROOT? We provide an alpha version of the ROOT Docker container!; . 08-03-2017 ; Development r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/news.html:3165,efficient,efficient,3165,d/news.html,https://root.cern,https://root.cern/d/news.html,1,['efficient'],['efficient']
Energy Efficiency,"might be either a freshly allocated object or one that had already been allocated (and assumingly used). In the later case, the function Clear will be called and passed the value of 'clear_options'; Tests to see if the destructor has been called on the object. If so, or if the object has never been constructed the class constructor is called using New(). If not, return a pointer to the correct memory location. This explicitly to deal with TObject classes that allocate memory which will be reset (but not deallocated) in their Clear() functions. ; Definition at line 399 of file TClonesArray.cxx. ◆ DeclFileName(). static const char * TClonesArray::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 83 of file TClonesArray.h. ◆ Delete(). void TClonesArray::Delete ; (; Option_t * ; option = """"). overridevirtual . Clear the clones array. ; Use this routine when your objects allocate memory (e.g. objects inheriting from TNamed or containing TStrings allocate memory). If not you better use Clear() since if is faster. ; Implements TCollection.; Definition at line 452 of file TClonesArray.cxx. ◆ Expand(). void TClonesArray::Expand ; (; Int_t ; newSize). overridevirtual . Expand or shrink the array to newSize elements. ; Reimplemented from TObjArray.; Definition at line 480 of file TClonesArray.cxx. ◆ ExpandCreate(). void TClonesArray::ExpandCreate ; (; Int_t ; n). virtual . Expand or shrink the array to n elements and create the clone objects by calling their default ctor. ; If n is less than the current size the array is shrunk and the allocated space is freed. This routine is typically used to create a clonesarray into which one can directly copy object data without going via the ""new (arr[i]) MyObj()"" (i.e. the vtbl is already set correctly). ; Definition at line 514 of file TClonesArray.cxx. ◆ ExpandCreateFast(). void TClonesArray::ExpandCreateFast ; (; Int_t ; n). virtual . Expand or shrink the array to n elem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:36010,allocate,allocate,36010,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['allocate'],['allocate']
Energy Efficiency,"moment; excitation excitation energy [GeV]; Set a user defined ion.; name ion name; Z atomic number; A atomic mass; Q charge [eplus}; excitation excitation energy [GeV]; mass mass [GeV] (if not specified by user, approximative; mass is calculated). Double_t Xsec(char* , Double_t , Int_t , Int_t ); Set a user phase space decay for a particle; pdg particle PDG encoding; bratios the array with branching ratios (in %); mode[6][3] the array with daughters particles PDG codes for each; decay channel; Calculate X-sections; (Geant3 only); Deprecated. Int_t IdFromPDG(Int_t pdg) const. particle table usage. Return MC specific code from a PDG and pseudo ENDF code (pdg). Int_t PDGFromId(Int_t id) const; Return PDG code and pseudo ENDF code from MC specific code (id). TString ParticleName(Int_t pdg) const. get methods. Return name of the particle specified by pdg. Double_t ParticleMass(Int_t pdg) const; Return mass of the particle specified by pdg. Double_t ParticleCharge(Int_t pdg) const; Return charge (in e units) of the particle specified by pdg. Double_t ParticleLifeTime(Int_t pdg) const; Return life time of the particle specified by pdg. TMCParticleType ParticleMCType(Int_t pdg) const; Return VMC type of the particle specified by pdg. void StopTrack(). methods for step management. action methods. Stop the transport of the current particle and skip to the next. void StopEvent(); Stop simulation of the current event and skip to the next. void StopRun(); Stop simulation of the current event and set the abort run flag to true. void SetMaxStep(Double_t ). set methods. Set the maximum step allowed till the particle is in the current medium. void SetMaxNStep(Int_t ); Set the maximum number of steps till the particle is in the current medium. void SetUserDecay(Int_t pdg); Force the decays of particles to be done with Pythia; and not with the Geant routines. void ForceDecayTime(Float_t ); Force the decay time of the current particle. Int_t CurrentVolID(Int_t& copyNo) const. tracking ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualMC.html:30216,charge,charge,30216,root/html530/TVirtualMC.html,https://root.cern,https://root.cern/root/html530/TVirtualMC.html,9,['charge'],['charge']
Energy Efficiency,"mory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in; terms of CPU time. Without entering into technical details, TClonesArray allows you to; ""reuse"" the same portion of memory for new/delete avoiding memory; fragmentation and memory growth and improving the performance by; orders of magnitude. Every time the memory of the TClonesArray has; to be reused, the Clear() method is used. To provide its benefits,; each TClonesArray must be allocated *once* per process and disposed; of (deleted) *only when not needed any more*. So a job should see *only one* deletion for each TClonesArray,; which should be Clear()ed during the job several times. Deleting a; TClonesArray is a double waste. Not only you do not avoid memory; fragmentation, but you worsen it because the TClonesArray itself; is a rather heavy structure, and there is quite some code in the; destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve; program execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used; for clearing TClonesArray. When option ""C"" is specified, ROOT; automatically executes the Clear() method (by default it is; empty contained in TObject). This method must be overridden in; the relevant TClonesArray object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:3144,allocate,allocated,3144,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,8,['allocate'],['allocated']
Energy Efficiency,"mous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfBestBest Edge for division; TReffDaught0Pointer to daughter 1; TReffDaught1Pointer to daughter 2; Short_tfDimDimension of the vector space; Double_tfDriveDriver integral, only for cell build-up; Double_tfIntegralIntegral over cell (estimate from exploration); TReffParentPointer to parent cell; Double_tfPrimaryPrimary integral, only for MC generation; Int_tfSerialSerial number; Int_tfStatusStatus (active, inactive); Double_tfVolumeCartesian Volume of cell; Double_tfXdivFactor for division. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFoamCell(); Default constructor for streamer. TFoamCell(Int_t ); User constructor allocating single empty Cell. TFoamCell(TFoamCell& ); Copy constructor (not tested!). ~TFoamCell(); Destructor. TFoamCell& operator=(const TFoamCell& ); Substitution operator = (never used). void Fill(Int_t , TFoamCell* , TFoamCell* , TFoamCell* ); Fills in certain data into newly allocated cell. void GetHcub(TFoamVect& , TFoamVect& ) const; Provides size and position of the cell; These parameter are calculated by analyzing information in all parents; cells up to the root cell. It takes time but saves memory. void GetHSize(TFoamVect& ) const; Provides size of the cell; Size parameters are calculated by analyzing information in all parents; cells up to the root cell. It takes time but saves memory. void CalcVolume(void); Calculates volume of the cell using size params which are calculated. void Print(Option_t* option) const; Printout of the cell geometry parameters for the debug purpose. Double_t GetXdiv() const; Geometry. { return fXdiv;}. Int_t GetBest() const; { return fBest;}. void SetBest(Int_t Best); { fBest =Best;}. void SetXdiv(Double_t Xdiv); { fXdiv =Xdiv;}. Double_t GetVolume() const; { return fVolume;}. Double_t GetIntg() const; { return fIntegral;}. Double_t GetDriv() const; { return fDrive;}. Double_t GetPrim() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFoamCell.html:7409,allocate,allocated,7409,root/html602/TFoamCell.html,https://root.cern,https://root.cern/root/html602/TFoamCell.html,4,['allocate'],['allocated']
Energy Efficiency,"mpared to nEvents**1/5. ;  ; TKDE operator= (TKDE &kde);  ; void ReInit ();  ; void SetBinCentreData (Double_t xmin, Double_t xmax);  ; void SetBinCountData ();  ; void SetCanonicalBandwidths ();  ; void SetData (const Double_t *data, const Double_t *weights);  ; void SetDrawOptions (const Option_t *option, TString &plotOpt, TString &drawOpt);  ; void SetHistogram ();  ; void SetKernel ();  ; void SetKernelFunction (KernelFunction_Ptr kernfunc=nullptr);  ; void SetKernelSigmas2 ();  ; void SetMean ();  ; void SetMirror ();  ; void SetMirroredEvents ();  Intgernal function to mirror the data. ;  ; void SetOptions (const Option_t *option, Double_t rho);  ; void SetSigma (Double_t R);  ; void SetUseBins ();  ; void SetUserCanonicalBandwidth ();  ; void SetUserKernelSigma2 ();  ; Double_t UpperConfidenceInterval (const Double_t *x, const Double_t *p) const;  Valid if the bandwidth is small compared to nEvents**1/5. ;  . Private Attributes; Double_t fAdaptiveBandwidthFactor;  Geometric mean of the kernel density estimation from the data for adaptive iteration. ;  ; TF1 * fApproximateBias;  Output Kernel Density Estimation lower confidence interval PDF function. ;  ; Bool_t fAsymLeft;  ; Bool_t fAsymRight;  ; std::vector< Double_t > fBinCount;  Number of events per bin for binned data option. ;  ; EBinning fBinning;  ; std::vector< Double_t > fCanonicalBandwidths;  ; std::vector< Double_t > fData;  Data events. ;  ; std::vector< Double_t > fEvents;  Original data storage. ;  ; std::vector< Double_t > fEventWeights;  Original data weights. ;  ; TGraphErrors * fGraph;  Output Kernel Density Estimation approximate bias. ;  ; EIteration fIteration;  ; std::unique_ptr< TKernel > fKernel;  ! internal kernel class. Transient because it is recreated after reading from a file ;  ; KernelFunction_Ptr fKernelFunction;  ! pointer to kernel function ;  ; std::vector< Double_t > fKernelSigmas2;  ; EKernelType fKernelType;  Graph with the errors. ;  ; TF1 * fLowerPDF;  Output Kernel Den",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDE.html:18521,adapt,adaptive,18521,doc/master/classTKDE.html,https://root.cern,https://root.cern/doc/master/classTKDE.html,1,['adapt'],['adaptive']
Energy Efficiency,"mplate<class CoordSystem > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; Scalar & ; a, . Scalar & ; b, . Scalar & ; c, . Scalar & ; d . ); const. inline . get internal data into 4 Scalar numbers ; Definition at line 205 of file LorentzVector.h. ◆ GetCoordinates() [4/4]. template<class CoordSystem > . void ROOT::Math::LorentzVector< CoordSystem >::GetCoordinates ; (; Scalar ; dest[]); const. inline . get internal data into an array of 4 Scalar numbers ; Definition at line 211 of file LorentzVector.h. ◆ isLightlike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isLightlike ; (; Scalar ; tolerance = 100*std::numeric_limits<Scalar>::epsilon()); const. inline . Determine if momentum-energy can represent a massless particle. ; Definition at line 535 of file LorentzVector.h. ◆ isSpacelike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isSpacelike ; (; ); const. inline . Determine if momentum-energy is spacelike, and represents a tachyon. ; Definition at line 545 of file LorentzVector.h. ◆ isTimelike(). template<class CoordSystem > . bool ROOT::Math::LorentzVector< CoordSystem >::isTimelike ; (; ); const. inline . Determine if momentum-energy can represent a physical massive particle. ; Definition at line 528 of file LorentzVector.h. ◆ M(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::M ; (; ); const. inline . return magnitude (mass) using the (-,-,-,+) metric. ; If M2 is negative (space-like vector) a GenVector_exception is suggested and if continuing, - sqrt( -M2) is returned ; Definition at line 306 of file LorentzVector.h. ◆ M2(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::M2 ; (; ); const. inline . return magnitude (mass) squared M2 = T**2 - X**2 - Y**2 - Z**2 (we use -,-,-,+ metric) ; Definition at line 300 of file LorentzVector.h. ◆ mag(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< Coor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:17927,energy,energy,17927,doc/master/classROOT_1_1Math_1_1LorentzVector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html,1,['energy'],['energy']
Energy Efficiency,"mplement by the default constructor. I/O. Fix the issue described at ROOT-7500 : crash due to change in base class which versioned derived class. Proof. Add support for aliases ROOT-7392; Fix issue with trees in sub-directories causing stressProof test #29 to fail. Interpreter. Fix unloading of code ROOT-7290; Fix template instantiations in cling internals ROOT-7364; Forget erroneous decls in case of errors ROOT-7295; Work around binutils issue (ld crash building llvm) on MacOSX with GCC (pull requests 64-66); Work around MacOS X builds being version specific ROOT-6966; Handle relocation of ROOT and non-PCH-able glibc headers.; Fix parsing of definition for forward declared enums ROOT-7419; Pass CXXFLAGS to the PCH generator, to ensure platform consistency.; Work around linker assert when building with GCC on OS X (PR #68). PyROOT. Fix lookup of templated classes in namespace with arguments that have ‘std::’ in their name ROOT-7448; Use GetTrueTypeName() instead of GetFullTypeName(), as the latter loses namespaces; Strip down number of libraries linked to libPyROOT in order to reduce to the minimum the time needed to import the ROOT module. TFormula, TF1. Allow possibility to automatically normalize itself. If the function TF1::SetNormalized(true) is called, when evaluated, the function will return its value divided by its integral computed in the function range.; Added helper classes TF1NormSum, TF1Convolution.; Fix a bug in calling TF1::Update when changing the parameter values. Fix also the TF1Convolution.; Fix the caching of the parameters in TF1NormSum to avoid recomputing integrals for same parameter values.; Remove unwanted printout from Streamer method. RooFit. Fix for contour computations in RooMinimizer[ROOT-7290]. Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Tree. TTreeReaderArray now",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:27593,reduce,reduce,27593,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['reduce'],['reduce']
Energy Efficiency,"mponent. ; alphaLLocation of transition to a power law on the left, in standard deviations away from the mean. ; nLExponent of power-law tail on the left. ; alphaRLocation of transition to a power law on the right, in standard deviations away from the mean. ; nRExponent of power-law tail on the right. . Definition at line 73 of file RooCrystalBall.cxx. ◆ RooCrystalBall() [3/5]. RooCrystalBall::RooCrystalBall ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . RooAbsReal & ; x0, . RooAbsReal & ; sigmaLR, . RooAbsReal & ; alphaL, . RooAbsReal & ; nL, . RooAbsReal & ; alphaR, . RooAbsReal & ; nR . ). Create a crystal ball shape with symmetric Gaussian core and asymmetric tails (just like RooDSCBShape). ; Parameters. nameName that identifies the PDF in computations. ; titleTitle for plotting. ; xThe variable of the PDF. ; x0Location parameter of the Gaussian component. ; sigmaLRWidth parameter of the Gaussian component. ; alphaLLocation of transition to a power law on the left, in standard deviations away from the mean. ; nLExponent of power-law tail on the left. ; alphaRLocation of transition to a power law on the right, in standard deviations away from the mean. ; nRExponent of power-law tail on the right. . Definition at line 102 of file RooCrystalBall.cxx. ◆ RooCrystalBall() [4/5]. RooCrystalBall::RooCrystalBall ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; x, . RooAbsReal & ; x0, . RooAbsReal & ; sigmaLR, . RooAbsReal & ; alpha, . RooAbsReal & ; n, . bool ; doubleSided = false . ). Create a crystal ball shape with symmetric Gaussian core and only a tail on one side (just like RooCBShape) or two symmetric tails (like RooSDSCBShape). ; Parameters. nameName that identifies the PDF in computations. ; titleTitle for plotting. ; xThe variable of the PDF. ; x0Location parameter of the Gaussian component. ; sigmaLRWidth parameter of the Gaussian component. ; alphaLocation of transition to a power law, in standard deviations away fro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCrystalBall.html:77023,power,power,77023,doc/master/classRooCrystalBall.html,https://root.cern,https://root.cern/doc/master/classRooCrystalBall.html,1,['power'],['power']
Energy Efficiency,"ms(int nElements, TBuffer& b); voidShrink(UInt_t nCurr, UInt_t left, Bool_t force); voidWriteItems(int nElements, TBuffer& b). Data Members; public:. enum TGenCollectionProxy::[unnamed] { kBIT_ISSTRING; kBIT_ISTSTRING; kBOOL_t; };; enum TVirtualCollectionProxy::EProperty { kIsInitialized; kIsAssociative; kIsEmulated; kNeedDelete; };. public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t). protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodTGenCollectionProxy::fClearMethod cache for container accessors: clear container; TGenCollectionProxy::MethodTGenCollectionProxy::fCollectMethod to collect objects from container; void*TGenCollectionProxy::fConstructContainer accessors: block construct; map<std::string,TObjArray*>*TGenCollectionProxy::fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0TGenCollectionProxy::fCreateEnvMethod to allocate an Environment holder.; void*TGenCollectionProxy::fDestructContainer accessors: block destruct; ROOT::TCollectionProxyInfo::EnvironBase*TGenCollectionProxy::fEnvAddress of the currently proxied object; void*TGenCollectionProxy::fFeedContainer accessors: block feed; TGenCollectionProxy::MethodTGenCollectionProxy::fFirstContainer accessors: generic iteration: first; void*TGenCollectionProxy::fFunctionCreateIterators; void*TGenCollectionProxy::fFunctionDeleteTwoIterators; TGenCollectionProxy::Value*TGenCollectionProxy::fKeyDescriptor of the key_type; stringTGenCollectionProxy::fNameName of the class being proxied.; TGenCollectionProxy::MethodTGenCollectionProxy::fNextContainer accessors: generic iteration: next; TClass*TGenCollectionProxy::fOnFileClassOn file class; Bool_tTGenCollectionProxy::fPointersFlag to indicate if containee has pointers (key or value); UInt_tTVirtualCollectionProxy::fProperties; vector<ROOT::TCollectionProxyInfo::EnvironBase*,allocator<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEmulatedCollectionProxy.html:4762,allocate,allocate,4762,root/html532/TEmulatedCollectionProxy.html,https://root.cern,https://root.cern/root/html532/TEmulatedCollectionProxy.html,2,['allocate'],['allocate']
Energy Efficiency,"much, much more than you think: it's not just the prompt, it in the core of most of ROOT.;  ; So we need to do something. C++ interpreters are extremely rare. Instead of rewriting a C++ interpreter we decided to reuse existing code. Code that we can still influence, but that's nevertheless production-grade. We expected that this will solve the maintenance and correctness issues. And because it's correct we don't need Reflex, but can instead use one central, fast (compiler!) reflection database.; So yes, this is a major overhaul of ROOT and the dictionaries. We will signal that with a new major ROOT version number. But we expect it to solve the correctness, stability, memory and CPU-consumption as well as the maintenance issues we currently have. The current implementation of cling (which is not yet complete) uses a mere 5000 lines of custom code developed by HEP; everything else is provided through LLVM and clang.; And regarding PyROOT: I am sure Wim will make good use of the new JIT power that comes with cling! Just like we expect the JIT to leave traces e.g. in TFormula, and the real reflection database in the I/O, THtml etc. It gets us unstuck, flexible and future-safe in many central areas of ROOT. O the places you'll go!; Cheers,. Axel Naumann's blog. Comments. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:48 Permalink . Other Python bindings . I noticed that there are multiple other ways to call C++ code from Python, one of them being included in the Boost library. What would it do to the complexity (and dependencies) to use an interface that doesn't build on top of CINT/Reflex?. Submitted by Anonymous (not verified) on Thu, 07/23/2015 - 21:49 Permalink . Re: Other Python bindings . Hi Bram,; Thanks for your question. The main issue about the boost binding is that it is - as far as I understand - completely static and intrusive. PyROOT on the other hand is based on refection data, and it has features that e.g. the Boost binding doesn't offer (e.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html:4960,power,power,4960,d/blog/do-we-need-yet-another-custom-c-interpreter.html,https://root.cern,https://root.cern/d/blog/do-we-need-yet-another-custom-c-interpreter.html,1,['power'],['power']
Energy Efficiency,"mula. Bool_t Select(const Int_t* iv); Selection method. User can override this method for specialized; selection of acceptable functions in fit. Default is to select; all. This message is sent during the build-up of the function; candidates table once for each set of powers in; variables. Notice, that the argument array contains the powers; PLUS ONE. For example, to De select the function; f = x1^2 * x2^4 * x3^5,; this method should return kFALSE if given the argument; { 3, 4, 6 }. void SetMaxAngle(Double_t angle = 0); Set the max angle (in degrees) between the initial data vector to; be fitted, and the new candidate function to be included in the; fit. By default it is 0, which automatically chooses another; selection criteria. See also; class description. void SetMinAngle(Double_t angle = 1); Set the min angle (in degrees) between a new candidate function; and the subspace spanned by the previously accepted; functions. See also; class description. void SetPowers(const Int_t* powers, Int_t terms); Define a user function. The input array must be of the form; (p11, ..., p1N, ... ,pL1, ..., pLN); Where N is the dimension of the data sample, L is the number of; terms (given in terms) and the first number, labels the term, the; second the variable. More information is given in the; class description. void SetPowerLimit(Double_t limit = 0.001); Set the user parameter for the function selection. The bigger the; limit, the more functions are used. The meaning of this variable; is defined in the; class description. void SetMaxPowers(const Int_t* powers); Set the maximum power to be considered in the fit for each; variable. See also; class description. void SetMinRelativeError(Double_t error); Set the acceptable relative error for when sum of square; residuals is considered minimized. For a full account, refer to; the; class description. Bool_t TestFunction(Double_t squareResidual, Double_t dResidur); PRIVATE METHOD:; Test whether the currently considered function contribute",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMultiDimFit.html:34385,power,powers,34385,root/html602/TMultiDimFit.html,https://root.cern,https://root.cern/root/html602/TMultiDimFit.html,4,['power'],['powers']
Energy Efficiency,"mula. Bool_t Select(const Int_t* iv); Selection method. User can override this method for specialized; selection of acceptable functions in fit. Default is to select; all. This message is sent during the build-up of the function; candidates table once for each set of powers in; variables. Notice, that the argument array contains the powers; PLUS ONE. For example, to De select the function; f = x1^2 * x2^4 * x3^5,; this method should return kFALSE if given the argument; { 3, 4, 6 }. void SetMaxAngle(Double_t angle = 0); Set the max angle (in degrees) between the initial data vector to; be fitted, and the new candidate function to be included in the; fit. By default it is 0, which automatically chooses another; selection criteria. See also; class description. void SetMinAngle(Double_t angle = 1); Set the min angle (in degrees) between a new candidate function; and the subspace spanned by the previously accepted; functions. See also; class description. void SetPowers(const Int_t* powers, Int_t terms); Define a user function. The input array must be of the form; (p11, ..., p1N, ... ,pL1, ..., pLN); Where N is the dimension of the data sample, L is the number of; terms (given in terms) and the first number, labels the term, the; second the variable. More information is given in the; class description. void SetPowerLimit(Double_t limit = 1e-3); Set the user parameter for the function selection. The bigger the; limit, the more functions are used. The meaning of this variable; is defined in the; class description. void SetMaxPowers(const Int_t* powers); Set the maximum power to be considered in the fit for each; variable. See also; class description. void SetMinRelativeError(Double_t error); Set the acceptable relative error for when sum of square; residuals is considered minimized. For a full account, refer to; the; class description. Bool_t TestFunction(Double_t squareResidual, Double_t dResidur); PRIVATE METHOD:; Test whether the currently considered function contributes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:33503,power,powers,33503,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,6,['power'],['powers']
Energy Efficiency,"mulaVar 'select'. ; The source tree 't' is cloned to not disturb its branch structure when retrieving information from it. ; Definition at line 367 of file RooTreeDataStore.cxx. ◆ makeTreeName(). std::string RooTreeDataStore::makeTreeName ; (; ); const. private . Generate a name for the storage tree from the name and title of this instance. ; Definition at line 1185 of file RooTreeDataStore.cxx. ◆ merge(). RooAbsDataStore * RooTreeDataStore::merge ; (; const RooArgSet & ; allVars, . std::list< RooAbsDataStore * > ; dstoreList . ). overridevirtual . Merge columns of supplied data set(s) with this data set. ; All data sets must have equal number of entries. In case of duplicate columns the column of the last dataset in the list prevails ; Implements RooAbsDataStore.; Definition at line 840 of file RooTreeDataStore.cxx. ◆ numEntries(). Int_t RooTreeDataStore::numEntries ; (; ); const. overridevirtual . Implements RooAbsDataStore.; Definition at line 926 of file RooTreeDataStore.cxx. ◆ reduce(). std::unique_ptr< RooAbsDataStore > RooTreeDataStore::reduce ; (; RooStringView ; name, . RooStringView ; title, . const RooArgSet & ; vars, . const RooFormulaVar * ; cutVar, . const char * ; cutRange, . std::size_t ; nStart, . std::size_t ; nStop . ). overridevirtual . Implements RooAbsDataStore.; Definition at line 179 of file RooTreeDataStore.cxx. ◆ reset(). void RooTreeDataStore::reset ; (; ). overridevirtual . Implements RooAbsDataStore.; Definition at line 935 of file RooTreeDataStore.cxx. ◆ Reset(). void RooTreeDataStore::Reset ; (; Option_t * ; option = nullptr). Interface function to TTree::Reset. ; Definition at line 1104 of file RooTreeDataStore.cxx. ◆ resetBuffers(). void RooTreeDataStore::resetBuffers ; (; ). overridevirtual . Implements RooAbsDataStore.; Definition at line 1058 of file RooTreeDataStore.cxx. ◆ resetCache(). void RooTreeDataStore::resetCache ; (; ). overridevirtual . Remove tree with values of cached observables and clear list of cached observables. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeDataStore.html:35206,reduce,reduce,35206,doc/master/classRooTreeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooTreeDataStore.html,1,['reduce'],['reduce']
Energy Efficiency,mulatedAnnealingFitter::~SimulatedAnnealingFitter ; (; ). inlinevirtual . Definition at line 56 of file SimulatedAnnealingFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::SimulatedAnnealingFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::SimulatedAnnealingFitter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::SimulatedAnnealingFitter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 87 of file SimulatedAnnealingFitter.h. ◆ DeclareOptions(). void TMVA::SimulatedAnnealingFitter::DeclareOptions ; (; ). privatevirtual . declare SA options. . MaxCalls <int> maximum number of calls for simulated annealing; TemperatureGradient <float> temperature gradient for simulated annealing; UseAdaptiveTemperature <bool> use of adaptive temperature for simulated annealing; InitialTemperature <float> initial temperature for simulated annealing; MinTemperature <float> minimum temperature for simulated annealing; Eps <int> number of epochs for simulated annealing; NFunLoops <int> number of loops for simulated annealing; NEps <int> number of epochs for simulated annealing . Implements TMVA::FitterBase.; Definition at line 74 of file SimulatedAnnealingFitter.cxx. ◆ DeclFileName(). static const char * TMVA::SimulatedAnnealingFitter::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 87 of file SimulatedAnnealingFitter.h. ◆ IsA(). virtual TClass * TMVA::SimulatedAnnealingFitter::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::FitterBase.; Definition at line 87 of file SimulatedAnnealingFitter.h. ◆ Run(). Double_t TMVA::SimulatedAnnealingFitter::Run ; (; std::vector< Double_t > & ; pars). virtual . Execute fitting. ; Implements TMVA::FitterBase.; Definition at line 136 of file Simulated,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealingFitter.html:18005,adapt,adaptive,18005,doc/master/classTMVA_1_1SimulatedAnnealingFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealingFitter.html,1,['adapt'],['adaptive']
Energy Efficiency,"mum number of function evaluations to be allowed.; maxpts >= 2^n +2*n*(n+1) +1; if maxpts<minpts, maxpts is set to 10*minpts; epsrel : Specified relative accuracy.; epsabs : Specified absolute accuracy.; The integration algorithm will attempt to reach either the relative or the absolute accuracy.; In case the maximum funcion called is reached the algorithm will stop earlier without having reached; the desired accuracy. Output parameters:. relerr : Contains, on exit, an estimation of the relative accuracy of the result.; nfnevl : number of function evaluations performed.; ifail :; 0 Normal exit. . At least minpts and at most maxpts calls to the function were performed.; 1 maxpts is too small for the specified accuracy eps.; The result and relerr contain the values obtainable for the; specified value of maxpts.; 3 n<2 or n>15. Method:. The default method used is the Genz-Mallik adaptive multidimensional algorithm; using the class ROOT::Math::AdaptiveIntegratorMultiDim; (see the reference documentation of the class); Other methods can be used by setting ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator(); to different integrators.; Other possible integrators are MC integrators based on the ROOT::Math::GSLMCIntegrator class; Possible methods are : Vegas, Miser or Plain; IN case of MC integration the accuracy is determined by the number of function calls, one should be; careful not to use a too large value of maxpts. Bool_t IsInside(const Double_t* x) const; Return kTRUE if the point is inside the function range. void Paint(Option_t* option = """"); Paint this function with its current attributes. void Print(Option_t* option = """") const; Dump this function with its attributes. void ReleaseParameter(Int_t ipar); Release parameter number ipar If used in a fit, the parameter; can vary freely. The parameter limits are reset to 0,0. void Save(Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax); Save values of function in array fSa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF1.html:60717,adapt,adaptive,60717,root/html602/TF1.html,https://root.cern,https://root.cern/root/html602/TF1.html,3,"['Adapt', 'adapt']","['AdaptiveIntegratorMultiDim', 'adaptive']"
Energy Efficiency,"mw2THnBaseprotected; fTsumwxTHnBaseprotected; fTsumwx2THnBaseprotected; fUniqueIDTObjectprivate; GenerateArray() const =0THnSparseprotectedpure virtual; GetAxis(Int_t dim) constTHnBaseinline; GetBin(const Int_t *idx) const overrideTHnSparseinlinevirtual; GetBin(const Double_t *x) const overrideTHnSparseinlinevirtual; GetBin(const char *name[]) const overrideTHnSparseinlinevirtual; GetBin(const Int_t *idx, Bool_t allocate=kTRUE) overrideTHnSparsevirtual; GetBin(const Double_t *x, Bool_t allocate=kTRUE) overrideTHnSparsevirtual; GetBin(const char *name[], Bool_t allocate=kTRUE) overrideTHnSparsevirtual; GetBinCenter(const std::vector< Int_t > &idx) constTHnBase; GetBinContent(const Int_t *idx) constTHnSparseinline; GetBinContent(Long64_t bin, Int_t *idx=nullptr) const overrideTHnSparsevirtual; GetBinError(const Int_t *idx) constTHnBaseinline; GetBinError(Long64_t linidx) constTHnBaseinline; GetBinError2(Long64_t linidx) const overrideTHnSparsevirtual; GetBinIndexForCurrentBin(Bool_t allocate)THnSparseprotected; GetCalculateErrors() constTHnBaseinline; GetChunk(Int_t idx) constTHnSparseinlineprotected; GetChunkSize() constTHnSparseinline; GetCompactCoord() constTHnSparseprotected; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetEntries() constTHnBaseinline; GetIconName() constTObjectvirtual; GetListOfAxes()THnBaseinline; GetListOfAxes() constTHnBaseinline; GetListOfFunctions()THnBaseinline; GetName() const overrideTNamedinlinevirtual; GetNbins() const overrideTHnSparseinlinevirtual; GetNChunks() constTHnSparseinline; GetNdimensions() constTHnBaseinline; GetObjectInfo(Int_t px, Int_t py) constTObjectvirtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetRandom(Double_t *rand, Bool_t subBinRandom=kTRUE)THnBase; GetSparseFractionBins() constTHnSparse; GetSparseFractionMem() constTHnSparse; GetSumw() constTHnBaseinline; GetSumw2() constTHnBaseinline; GetSumwx(Int_t dim) constTHnBaseinline; GetSumwx2(Int_t dim) constTHnBaseinline",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse-members.html:5092,allocate,allocate,5092,doc/master/classTHnSparse-members.html,https://root.cern,https://root.cern/doc/master/classTHnSparse-members.html,1,['allocate'],['allocate']
Energy Efficiency,"n = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfEtotTotal energy in GeV; Int_tfFirstMotherIndex of the first mother particle; Int_tfGenerationGeneration flag: last gen. (0) or not (1) or ghost (2); Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_tfPartParticle id produced; Double_tfPxMomentum in x direction in GeV/c; Double_tfPyMomentum in y direction in GeV/c; Double_tfPzMomentum in z direction in GeV/c; Int_tfSecondMotherIndex of the second mother particle(if any); Double_tfTimeTime of particle production in user units; Double_tfTimeEndTime of particle destruction (always in the pp-cms!); TStringfTypeIndicator of primary type; Double_tfVxProduction vertex x position in user units; Double_tfVyProduction vertex y position in user units; Double_tfVzProduction vertex z position in user units. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPrimary(). Primary vertex particle default constructor. TPrimary(Int_t part, Int_t first, Int_t second, Int_t gener, Double_t px, Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPrimary.html:7165,energy,energy,7165,root/html602/TPrimary.html,https://root.cern,https://root.cern/root/html602/TPrimary.html,4,['energy'],['energy']
Energy Efficiency,n = 92; colors[0].blue = 92;; 67 colors[ 1].red = 122; colors[ 1].green = 122; colors[1].blue = 122;; 68 colors[ 2].red = 184; colors[ 2].green = 184; colors[2].blue = 184;; 69 colors[ 3].red = 215; colors[ 3].green = 215; colors[3].blue = 215;; 70 colors[ 4].red = 138; colors[ 4].green = 15; colors[4].blue = 15;; 71 colors[ 5].red = 184; colors[ 5].green = 20; colors[5].blue = 20;; 72 colors[ 6].red = 235; colors[ 6].green = 71; colors[6].blue = 71;; 73 colors[ 7].red = 240; colors[ 7].green = 117; colors[7].blue = 117;; 74 colors[ 8].red = 15; colors[ 8].green = 138; colors[8].blue = 15;; 75 colors[ 9].red = 20; colors[ 9].green = 184; colors[9].blue = 20;; 76 colors[10].red = 71; colors[10].green = 235; colors[10].blue = 71;; 77 colors[11].red = 117; colors[11].green = 240; colors[11].blue = 117;; 78 colors[12].red = 15; colors[12].green = 15; colors[12].blue = 138;; 79 colors[13].red = 20; colors[13].green = 20; colors[13].blue = 184;; 80 colors[14].red = 71; colors[14].green = 71; colors[14].blue = 235;; 81 colors[15].red = 117; colors[15].green = 117; colors[15].blue = 240;; 82 colors[16].red = 138; colors[16].green = 138; colors[16].blue = 15;; 83 colors[17].red = 184; colors[17].green = 184; colors[17].blue = 20;; 84 colors[18].red = 235; colors[18].green = 235; colors[18].blue = 71;; 85 colors[19].red = 240; colors[19].green = 240; colors[19].blue = 117;; 86 colors[20].red = 138; colors[20].green = 15; colors[20].blue = 138;; 87 colors[21].red = 184; colors[21].green = 20; colors[21].blue = 184;; 88 colors[22].red = 235; colors[22].green = 71; colors[22].blue = 235;; 89 colors[23].red = 240; colors[23].green = 117; colors[23].blue = 240;; 90 colors[24].red = 15; colors[24].green = 138; colors[24].blue = 138;; 91 colors[25].red = 20; colors[25].green = 184; colors[25].blue = 184;; 92 colors[26].red = 71; colors[26].green = 235; colors[26].blue = 235;; 93 colors[27].red = 117; colors[27].green = 240; colors[27].blue = 240;; 94 }; 95 ; 96 ; 97 /*; 98 * Allocate,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/X3DBuffer_8c_source.html:2686,green,green,2686,doc/master/X3DBuffer_8c_source.html,https://root.cern,https://root.cern/doc/master/X3DBuffer_8c_source.html,1,['green'],['green']
Energy Efficiency,"n > 3) && ((ptrdiff_t)in % 4) == 0) {; 12945 /* Convert in 32 bit words, if data is 4 byte aligned */; 12946 while (i < (in_len - 3)) {; 12947 *(uint32_t *)(void *)(out + i) =; 12948 *(uint32_t *)(void *)(in + i) ^ masking_key;; 12949 i += 4;; 12950 }; 12951 }; 12952 if (i != in_len) {; 12953 /* convert 1-3 remaining bytes if ((dataLen % 4) != 0)*/; 12954 while (i < in_len) {; 12955 *(uint8_t *)(void *)(out + i) =; 12956 *(uint8_t *)(void *)(in + i); 12957 ^ *(((uint8_t *)&masking_key) + (i % 4));; 12958 i++;; 12959 }; 12960 }; 12961}; 12962 ; 12963 ; 12964int; 12965mg_websocket_client_write(struct mg_connection *conn,; 12966 int opcode,; 12967 const char *data,; 12968 size_t dataLen); 12969{; 12970 int retval = -1;; 12971 char *masked_data =; 12972 (char *)mg_malloc_ctx(((dataLen + 7) / 4) * 4, conn->phys_ctx);; 12973 uint32_t masking_key = 0;; 12974 ; 12975 if (masked_data == NULL) {; 12976 /* Return -1 in an error case */; 12977 mg_cry_internal(conn,; 12978 ""%s"",; 12979 ""Cannot allocate buffer for masked websocket response: ""; 12980 ""Out of memory"");; 12981 return -1;; 12982 }; 12983 ; 12984 do {; 12985 /* Get a masking key - but not 0 */; 12986 masking_key = (uint32_t)get_random();; 12987 } while (masking_key == 0);; 12988 ; 12989 mask_data(data, dataLen, masking_key, masked_data);; 12990 ; 12991 retval = mg_websocket_write_exec(; 12992 conn, opcode, masked_data, dataLen, masking_key);; 12993 mg_free(masked_data);; 12994 ; 12995 return retval;; 12996}; 12997 ; 12998 ; 12999static void; 13000handle_websocket_request(struct mg_connection *conn,; 13001 const char *path,; 13002 int is_callback_resource,; 13003 struct mg_websocket_subprotocols *subprotocols,; 13004 mg_websocket_connect_handler ws_connect_handler,; 13005 mg_websocket_ready_handler ws_ready_handler,; 13006 mg_websocket_data_handler ws_data_handler,; 13007 mg_websocket_close_handler ws_close_handler,; 13008 void *cbData); 13009{; 13010 const char *websock_key = mg_get_header(conn, ""Sec-WebSocket-Key"");; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:377853,allocate,allocate,377853,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['allocate'],['allocate']
Energy Efficiency,"n > 3) && ((ptrdiff_t)in % 4) == 0) {; 12946 /* Convert in 32 bit words, if data is 4 byte aligned */; 12947 while (i < (in_len - 3)) {; 12948 *(uint32_t *)(void *)(out + i) =; 12949 *(uint32_t *)(void *)(in + i) ^ masking_key;; 12950 i += 4;; 12951 }; 12952 }; 12953 if (i != in_len) {; 12954 /* convert 1-3 remaining bytes if ((dataLen % 4) != 0)*/; 12955 while (i < in_len) {; 12956 *(uint8_t *)(void *)(out + i) =; 12957 *(uint8_t *)(void *)(in + i); 12958 ^ *(((uint8_t *)&masking_key) + (i % 4));; 12959 i++;; 12960 }; 12961 }; 12962}; 12963 ; 12964 ; 12965int; 12966mg_websocket_client_write(struct mg_connection *conn,; 12967 int opcode,; 12968 const char *data,; 12969 size_t dataLen); 12970{; 12971 int retval = -1;; 12972 char *masked_data =; 12973 (char *)mg_malloc_ctx(((dataLen + 7) / 4) * 4, conn->phys_ctx);; 12974 uint32_t masking_key = 0;; 12975 ; 12976 if (masked_data == NULL) {; 12977 /* Return -1 in an error case */; 12978 mg_cry_internal(conn,; 12979 ""%s"",; 12980 ""Cannot allocate buffer for masked websocket response: ""; 12981 ""Out of memory"");; 12982 return -1;; 12983 }; 12984 ; 12985 do {; 12986 /* Get a masking key - but not 0 */; 12987 masking_key = (uint32_t)get_random();; 12988 } while (masking_key == 0);; 12989 ; 12990 mask_data(data, dataLen, masking_key, masked_data);; 12991 ; 12992 retval = mg_websocket_write_exec(; 12993 conn, opcode, masked_data, dataLen, masking_key);; 12994 mg_free(masked_data);; 12995 ; 12996 return retval;; 12997}; 12998 ; 12999 ; 13000static void; 13001handle_websocket_request(struct mg_connection *conn,; 13002 const char *path,; 13003 int is_callback_resource,; 13004 struct mg_websocket_subprotocols *subprotocols,; 13005 mg_websocket_connect_handler ws_connect_handler,; 13006 mg_websocket_ready_handler ws_ready_handler,; 13007 mg_websocket_data_handler ws_data_handler,; 13008 mg_websocket_close_handler ws_close_handler,; 13009 void *cbData); 13010{; 13011 const char *websock_key = mg_get_header(conn, ""Sec-WebSocket-Key"");; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:377886,allocate,allocate,377886,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['allocate'],['allocate']
Energy Efficiency,"n Pt();}. Scalar Rho() const; { return Pt();}. Scalar Mt2() const. transverse mass squared. { return E2() - fZ*fZ; }. Scalar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<double>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(double pt); ====== Set member functions for coordinates in other systems =======. void SetEta(double eta). void SetPhi(double phi). void SetE(double energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: 464c29f33a8b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__PxPyPzM4D_double_.html:7338,energy,energy,7338,root/html534/ROOT__Math__PxPyPzM4D_double_.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__PxPyPzM4D_double_.html,2,['energy'],['energy']
Energy Efficiency,"n Pt();}. Scalar Rho() const; { return Pt();}. Scalar Mt2() const. transverse mass squared. { return E2() - fZ*fZ; }. Scalar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. Scalar Et() const. transverse energy. Scalar Phi() const. azimuthal angle. Scalar Theta() const. polar angle. Scalar Eta() const. pseudorapidity. void SetPx(ROOT::Math::PxPyPzM4D<double>::Scalar px); --------- Set Coordinates of this system ---------------. set X value. void SetPy(ROOT::Math::PxPyPzM4D<double>::Scalar py). set Y value. void SetPz(ROOT::Math::PxPyPzM4D<double>::Scalar pz). set Z value. void SetM(ROOT::Math::PxPyPzM4D<double>::Scalar m). set T value. void SetPxPyPzE(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar e). set all values. void Negate(); ------ Manipulations -------------. negate the 4-vector - Note that the energy cannot be negate (would need an additional data member); therefore negate will work only on the spatial components.; One would need to use negate only with vectors having the energy as data members. void Scale(const ROOT::Math::PxPyPzM4D<double>::Scalar& a). scale coordinate values by a scalar quantity a. Scalar x() const; ============= Compatibility section ==================; The following make this coordinate system look enough like a CLHEP; vector that an assignment member template can work with either. { return X(); }. Scalar y() const; { return Y(); }. Scalar z() const; { return Z(); }. Scalar t() const; { return E(); }. void SetPt(double pt); ====== Set member functions for coordinates in other systems =======. void SetEta(double eta). void SetPhi(double phi). void SetE(double energy). void RestrictNegMass(); restrict the value of negative mass to avoid unphysical negative E2 values; M2 must be less than P2 for the tachionic particles - otherwise use positive values. » Last changed: root/mathcore:$Id: PxPyPzM4D.h ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__PxPyPzM4D_double_.html:7336,energy,energy,7336,root/html526/ROOT__Math__PxPyPzM4D_double_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__PxPyPzM4D_double_.html,5,['energy'],['energy']
Energy Efficiency,"n TFile.cxx:950; TMVA::CrossValidationClass to perform cross validation, splitting the dataloader into folds.Definition CrossValidation.h:124; TMVA::DataLoaderDefinition DataLoader.h:50; TMVA::DataLoader::AddRegressionTreevoid AddRegressionTree(TTree *tree, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType)Definition DataLoader.h:103; TMVA::DataLoader::PrepareTrainingAndTestTreevoid PrepareTrainingAndTestTree(const TCut &cut, const TString &splitOpt)prepare the training and test trees -> same cuts for signal and backgroundDefinition DataLoader.cxx:632; TMVA::DataLoader::AddTargetvoid AddTarget(const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0)user inserts target in data set infoDefinition DataLoader.cxx:512; TMVA::DataLoader::AddVariablevoid AddVariable(const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0)user inserts discriminating variable in data set infoDefinition DataLoader.cxx:485; TMVA::Tools::Instancestatic Tools & Instance()Definition Tools.cxx:71; TMVA::Types::kBDT@ kBDTDefinition Types.h:86; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TMVA::TMVAGuivoid TMVAGui(const char *fName=""TMVA.root"", TString dataset=""""); Factory.h; AuthorKim Albertsson (adapted from code originally by Andreas Hoecker) ; Definition in file TMVACrossValidationRegression.C. tutorialstmvaTMVACrossValidationRegression.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html:22706,adapt,adapted,22706,doc/master/TMVACrossValidationRegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidationRegression_8C.html,1,['adapt'],['adapted']
Energy Efficiency,"n TObject.h:65; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TObject::Readvirtual Int_t Read(const char *name)Read contents of object with specified name from the current directory.Definition TObject.cxx:654; TObject::AddToTObjectTablestatic void AddToTObjectTable(TObject *)Private helper function which will dispatch to TObjectTable::AddObj.Definition TObject.cxx:181; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TObject::Obsoletevoid Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constUse this method to declare a method obsolete.Definition TObject.cxx:1055; TStorage::UpdateIsOnHeapstatic void UpdateIsOnHeap(volatile const UInt_t &uniqueID, volatile UInt_t &bits)Definition TStorage.h:123; TStorage::ObjectAllocArraystatic void * ObjectAllocArray(size_t size)Used to allocate array of TObject on the heap (via TObject::operator new[]()).Definition TStorage.cxx:303; TStorage::ObjectAllocstatic void * ObjectAlloc(size_t size)Used to allocate a TObject on the heap (via TObject::operator new()).Definition TStorage.cxx:291; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; bool; int; unsigned int; ROOT::Detail::HasBeenDeletedR__ALWAYS_INLINE bool HasBeenDeleted(const TObject *obj)Check if the TObject's memory has been deleted.Definition TObject.h:402; ROOT::Internal::DeleteChangesMemorybool DeleteChangesMemory()Definition TObject.cxx:133; ROOT::Internal::DeleteChangesMemoryImplbool DeleteChangesMemoryImpl()Definition TObject.cxx:76; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; Drawth1 Draw(). corebaseincTObject.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:32657,allocate,allocate,32657,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['allocate'],['allocate']
Energy Efficiency,n a TChain; TList*TTree::fClones! List of cloned trees which share our addresses; Long64_t*TTree::fClusterRangeEnd[fNClusterRange] Last entry of a cluster range.; Long64_t*TTree::fClusterSize[fNClusterRange] Number of entries in each cluster for a given range.; Int_tTTree::fDebug! Debug level; Long64_tTTree::fDebugMax! Last entry number to debug; Long64_tTTree::fDebugMin! First entry number to debug; Int_tTTree::fDefaultEntryOffsetLenInitial Length of fEntryOffset table in the basket buffers; TDirectory*TTree::fDirectory! Pointer to directory holding this tree; Long64_tTTree::fEntriesNumber of entries; TEntryList*TTree::fEntryList! Pointer to event selection list (if one); Long64_tTTree::fEstimateNumber of entries to estimate histogram limits; TEventList*TTree::fEventList! Pointer to event selection list (if one); Int_tTTree::fFileNumber! current file number (if file extensions); Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Long64_tTTree::fFlushedBytesNumber of autoflushed bytes; UInt_tTTree::fFriendLockStatus! Record which method is locking the friend recursion; TList*TTree::fFriendspointer to list of friend elements; TArrayITTree::fIndexIndex of sorted values; TArrayDTTree::fIndexValuesSorted index values; TObjArrayTTree::fLeavesDirect pointers to individual branch leaves; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Int_tTTree::fMakeClass! not zero when processing code generated by MakeClass; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTTree::fMaxClusterRange! Memory allocated for the cluster range.; Long64_tTTree::fMaxEntriesMaximum number of entries in case of circular buffers; Long64_tTTree::fMaxEntryLoopMaximum number of entries to process; Long64_tTTree::fMaxVirtualSizeMaximum total size of buffers kept in memory; Int_tTTree::fNClusterRangeNumber of,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TNtuple.html:23359,allocate,allocated,23359,root/html530/TNtuple.html,https://root.cern,https://root.cern/root/html530/TNtuple.html,18,['allocate'],['allocated']
Energy Efficiency,"n afterwards with Derivator::SetFunction. explicit Derivator(const IGenFunction &f). Construct using a ROOT::Math::IGenFunction interface. explicit Derivator(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). Construct using a GSL function pointer type; @param f : free function pointer of the GSL required type; @param p : pointer to the object carrying the function state; (for example the function object itself). virtual ~Derivator(); destructor. Derivator(const Derivator &); disable copying. void SetFunction(const ROOT::Math::IGenFunction& f). Template methods for generic functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numeric",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Derivator.html:3279,adapt,adaptive,3279,root/html526/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Derivator.html,7,['adapt'],['adaptive']
Energy Efficiency,"n array of 4 Scalar numbers. { dest[0] = fX; dest[1] = fY; dest[2] = fZ; dest[3] = fM; }. void SetCoordinates(ROOT::Math::PxPyPzM4D<double>::Scalar px, ROOT::Math::PxPyPzM4D<double>::Scalar py, ROOT::Math::PxPyPzM4D<double>::Scalar pz, ROOT::Math::PxPyPzM4D<double>::Scalar m). Set internal data based on 4 Scalar numbers. void GetCoordinates(ROOT::Math::PxPyPzM4D<double>::Scalar& px, ROOT::Math::PxPyPzM4D<double>::Scalar& py, ROOT::Math::PxPyPzM4D<double>::Scalar& pz, ROOT::Math::PxPyPzM4D<double>::Scalar& m) const. get internal data into 4 Scalar numbers. { px=fX; py=fY; pz=fZ; m=fM;}. Scalar Px() const; --------- Coordinates and Coordinate-like Scalar properties -------------; cartesian (Minkowski)coordinate accessors. { return fX;}. Scalar Py() const; { return fY;}. Scalar Pz() const; { return fZ;}. Scalar M() const; { return fM; }. Scalar X() const; { return fX;}. Scalar Y() const; { return fY;}. Scalar Z() const; { return fZ;}. Scalar E() const; other coordinate representation. Energy. { return std::sqrt(E2() ); }. Scalar T() const; { return E();}. Scalar P2() const. squared magnitude of spatial components. { return fX*fX + fY*fY + fZ*fZ; }. Scalar P() const. magnitude of spatial components (magnitude of 3-momentum). { return std::sqrt(P2()); }. Scalar R() const; { return P(); }. Scalar M2() const. vector magnitude squared (or mass squared); In case of negative mass (spacelike particles return negative values). Scalar Mag2() const; { return M2(); }. Scalar Mag() const; { return M(); }. Scalar E2() const. energy squared. Scalar Pt2() const. transverse spatial component squared. { return fX*fX + fY*fY;}. Scalar Perp2() const; { return Pt2();}. Scalar Pt() const. Transverse spatial component (P_perp or rho). { return std::sqrt(Perp2());}. Scalar Perp() const; { return Pt();}. Scalar Rho() const; { return Pt();}. Scalar Mt2() const. transverse mass squared. { return E2() - fZ*fZ; }. Scalar Mt() const. transverse mass. Scalar Et2() const. transverse energy squared. S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__PxPyPzM4D_double_.html:5579,Energy,Energy,5579,root/html532/ROOT__Math__PxPyPzM4D_double_.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__PxPyPzM4D_double_.html,2,['Energy'],['Energy']
Energy Efficiency,"n at line 158 of file TInetAddress.cxx. ◆ Class(). static TClass * TInetAddress::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TInetAddress::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TInetAddress::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 81 of file TInetAddress.h. ◆ DeclFileName(). static const char * TInetAddress::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 81 of file TInetAddress.h. ◆ GetAddress(). UInt_t TInetAddress::GetAddress ; (; ); const. inline . Definition at line 68 of file TInetAddress.h. ◆ GetAddressBytes(). UChar_t * TInetAddress::GetAddressBytes ; (; ); const. Returns the raw IP address in host byte order. ; The highest order byte position is in addr[0]. To be prepared for 64-bit IP addresses an array of bytes is returned. User must delete allocated memory. ; Definition at line 84 of file TInetAddress.cxx. ◆ GetAddresses(). const AddressList_t & TInetAddress::GetAddresses ; (; ); const. inline . Definition at line 74 of file TInetAddress.h. ◆ GetAliases(). const AliasList_t & TInetAddress::GetAliases ; (; ); const. inline . Definition at line 75 of file TInetAddress.h. ◆ GetFamily(). Int_t TInetAddress::GetFamily ; (; ); const. inline . Definition at line 72 of file TInetAddress.h. ◆ GetHostAddress() [1/2]. const char * TInetAddress::GetHostAddress ; (; ); const. Returns the IP address string ""%d.%d.%d.%d"". ; Copy string immediately, it will be reused. ; Definition at line 113 of file TInetAddress.cxx. ◆ GetHostAddress() [2/2]. const char * TInetAddress::GetHostAddress ; (; UInt_t ; addr). static . Returns the IP address string ""%d.%d.%d.%d"", use it to convert alternative addresses obtained via GetAddresses(). ; Copy string immediately, it will be reused. Static function. ; Definition at line 101 of file TInetAddress.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInetAddress.html:14095,allocate,allocated,14095,doc/master/classTInetAddress.html,https://root.cern,https://root.cern/doc/master/classTInetAddress.html,1,['allocate'],['allocated']
Energy Efficiency,"n at line 263 of file TCollection.cxx. ◆ Compare(). Int_t TCollection::Compare ; (; const TObject * ; obj); const. overridevirtual . Compare two TCollection objects. ; Returns 0 when equal, -1 when this is smaller and +1 when bigger (like strcmp()). ; Reimplemented from TObject.; Definition at line 275 of file TCollection.cxx. ◆ Contains() [1/2]. Bool_t TCollection::Contains ; (; const char * ; name); const. inline . Definition at line 171 of file TCollection.h. ◆ Contains() [2/2]. Bool_t TCollection::Contains ; (; const TObject * ; obj); const. inline . Definition at line 172 of file TCollection.h. ◆ DeclFileName(). static const char * TCollection::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 222 of file TCollection.h. ◆ Delete(). void TCollection::Delete ; (; Option_t * ; option = """"). overridepure virtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Implemented in TQCommand, TBtree, TClonesArray, THashList, THashTable, TList, TMap, TObjArray, TOrdCollection, TRefArray, TListOfDataMembers, TListOfEnums, TListOfEnumsWithLock, TListOfFunctions, TListOfFunctionTemplates, TViewPubDataMembers, and TViewPubFunctions. ◆ Draw(). void TCollection::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw all objects in this collection. ; Reimplemented from TObject.; Definition at line 284 of file TCollection.cxx. ◆ Dump(). void TCollection::Dump ; (; ); const. overridevirtual . Dump all objects in this collection. ; Reimplemented from TObject.; Definition at line 297 of file TCollection.cxx. ◆ EmptyGarbageCollection(). void TCollection::EmptyGarbageCollection ; (; ). static . Do the garbage collection. ; Definition at line 710 of file TCollection.cxx. ◆ end(). TIter TCollection::end ; (; ); const. inline . Definition at line 293 of file TCollection.h. ◆ FindObject() [1/2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCollection.html:18875,allocate,allocated,18875,doc/v632/classTCollection.html,https://root.cern,https://root.cern/doc/v632/classTCollection.html,2,['allocate'],['allocated']
Energy Efficiency,"n at line 58 of file TGLLightSet.h. ◆ SetSpecularPower(). void TGLLightSet::SetSpecularPower ; (; Float_t ; p). inline . Definition at line 59 of file TGLLightSet.h. ◆ SetUseSpecular(). void TGLLightSet::SetUseSpecular ; (; Bool_t ; s). inline . Definition at line 52 of file TGLLightSet.h. ◆ StdSetupLights(). void TGLLightSet::StdSetupLights ; (; const TGLBoundingBox & ; bbox, . const TGLCamera & ; camera, . Bool_t ; debug = kFALSE . ). Setup lights for current given bounding box and camera. ; This is called by standard GL viewer. Expects matrix-mode to be model-view. ; Definition at line 76 of file TGLLightSet.cxx. ◆ Streamer(). void TGLLightSet::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGLLightSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 64 of file TGLLightSet.h. ◆ ToggleLight(). void TGLLightSet::ToggleLight ; (; ELight ; light). Toggle light on/off. ; Definition at line 40 of file TGLLightSet.cxx. Member Data Documentation. ◆ fFrontPower. Float_t TGLLightSet::fFrontPower. protected . Definition at line 39 of file TGLLightSet.h. ◆ fLightState. UInt_t TGLLightSet::fLightState. protected . Definition at line 36 of file TGLLightSet.h. ◆ fSidePower. Float_t TGLLightSet::fSidePower. protected . power of the front lamp ; Definition at line 40 of file TGLLightSet.h. ◆ fSpecularPower. Float_t TGLLightSet::fSpecularPower. protected . power of the side lamps ; Definition at line 41 of file TGLLightSet.h. ◆ fUseSpecular. Bool_t TGLLightSet::fUseSpecular. protected . light states (on/off) mask ; Definition at line 37 of file TGLLightSet.h. Libraries for TGLLightSet:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TGLLightSet.h; graf3d/gl/src/TGLLightSet.cxx. TGLLightSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLLightSet.html:15110,power,power,15110,doc/master/classTGLLightSet.html,https://root.cern,https://root.cern/doc/master/classTGLLightSet.html,2,['power'],['power']
Energy Efficiency,"n at line 60 of file RNTupleWriter.hxx. Public Member Functions;  RNTupleWriter (const RNTupleWriter &)=delete;  ;  ~RNTupleWriter ();  ; void CommitCluster (bool commitClusterGroup=false);  Ensure that the data from the so far seen Fill calls has been written to storage. ;  ; std::unique_ptr< REntry > CreateEntry ();  ; std::unique_ptr< RNTupleModel::RUpdater > CreateModelUpdater ();  Get a RNTupleModel::RUpdater that provides limited support for incremental updates to the underlying model, e.g. ;  ; void EnableMetrics ();  ; std::size_t Fill ();  The simplest user interface if the default entry that comes with the ntuple model is used. ;  ; std::size_t Fill (REntry &entry);  Multiple entries can have been instantiated from the ntuple model. ;  ; void FillNoFlush (REntry &entry, RNTupleFillStatus &status);  Fill an entry into this ntuple, but don't commit the cluster. ;  ; void FlushCluster ();  Flush so far filled entries to storage. ;  ; void FlushColumns ();  Flush column data, preparing for CommitCluster or to reduce memory usage. ;  ; NTupleSize_t GetLastCommitted () const;  Return the entry number that was last committed in a cluster. ;  ; NTupleSize_t GetLastCommittedClusterGroup () const;  Return the entry number that was last committed in a cluster group. ;  ; NTupleSize_t GetLastFlushed () const;  Return the entry number that was last flushed in a cluster. ;  ; const Detail::RNTupleMetrics & GetMetrics () const;  ; const RNTupleModel & GetModel () const;  ; NTupleSize_t GetNEntries () const;  Return the number of entries filled so far. ;  ; RNTupleWriter & operator= (const RNTupleWriter &)=delete;  . Static Public Member Functions; static std::unique_ptr< RNTupleWriter > Append (std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, TFile &file, const RNTupleWriteOptions &options=RNTupleWriteOptions());  Throws an exception if the model is null. ;  ; static std::unique_ptr< RNTupleWriter > Recreate (std::initializer_list< std::pair< std::stri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html:1982,reduce,reduce,1982,doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleWriter.html,1,['reduce'],['reduce']
Energy Efficiency,"n at line 783 of file RooAbsData.cxx. ◆ printTitle(). void RooAbsData::printTitle ; (; std::ostream & ; os); const. overridevirtual . Print title of dataset. ; Reimplemented from RooPrintable.; Definition at line 791 of file RooAbsData.cxx. ◆ RecursiveRemove(). void RooAbsData::RecursiveRemove ; (; TObject * ; obj). overridevirtual . If one of the TObject we have a referenced to is deleted, remove the reference. ; Reimplemented from TObject.; Definition at line 2458 of file RooAbsData.cxx. ◆ reduce() [1/5]. RooFit::OwningPtr< RooAbsData > RooAbsData::reduce ; (; const char * ; cut); const. Create a subset of the data set by applying the given cut on the data points. ; The cut expression can refer to any variable in the data set. For cuts involving other variables, such as intermediate formula objects, use the equivalent reduce method specifying the as a RooFormulVar reference. ; Definition at line 472 of file RooAbsData.cxx. ◆ reduce() [2/5]. RooFit::OwningPtr< RooAbsData > RooAbsData::reduce ; (; const RooArgSet & ; varSubset, . const char * ; cut = nullptr . ); const. Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ; The cut expression can refer to any variable in the data set. For cuts involving other variables, such as intermediate formula objects, use the equivalent reduce method specifying the as a RooFormulVar reference. ; Definition at line 500 of file RooAbsData.cxx. ◆ reduce() [3/5]. RooFit::OwningPtr< RooAbsData > RooAbsData::reduce ; (; const RooArgSet & ; varSubset, . const RooFormulaVar & ; cutVar . ); const. Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ; The 'cutVar' formula variable is used to select the subset of data points to be retained in the reduced data collection. ; Definition at line 530 of file RooAbsData.cxx. ◆ reduce() [4/5]. RooFit::OwningPtr< RooAbsData > RooAbsData::reduce ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsData.html:62427,reduce,reduce,62427,doc/master/classRooAbsData.html,https://root.cern,https://root.cern/doc/master/classRooAbsData.html,1,['reduce'],['reduce']
Energy Efficiency,"n below:; ; 21.2 Script; This is the h1analsysis.C file that was generated by TTree::MakeSelector and then modified to perform the analysis.; #include ""h1analysis.h""; #include ""TH2.h""; #include ""TF1.h""; #include ""TStyle.h""; #include ""TCanvas.h""; #include ""TLine.h""; #include ""TEventList.h"". const Double_t dxbin = (0.17-0.13)/40; // Bin-width; const Double_t sigma = 0.0012;; TEventList *elist = 0;; Bool_t useList, fillList;; TH1F *hdmd;; TH2F *h2;. //_________________________________________________________; Double_t fdm5(Double_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-par[3])*(x-par[3]);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957,par[1]); + par[2]/2.5066/par[4]*TMath::Exp(-xp3/2/par[4]/par[4]));; return res;; }. //_________________________________________________________; Double_t fdm2(Double_t *xx, Double_t *par); {; Double_t x = xx[0];; if (x <= 0.13957) return 0;; Double_t xp3 = (x-0.1454)*(x-0.1454);; Double_t res = dxbin*(par[0]*TMath::Power(x-0.13957,0.25); + par[1]/2.5066/sigma*TMath::Exp(-xp3/2/sigma/sigma));; return res;; }. //_________________________________________________________; void h1analysis::Begin(TTree *tree); {; // function called before starting the event loop; // -it performs some cleanup; // -it creates histograms; // -it sets some initialization for the event list. //initialize the Tree branch addresses; Init(tree);. //print the option specified in the Process function; TString option = GetOption();; printf(""Starting h1analysis with process option: %sn"",option.Data());. //Some cleanup in case this function had already been executed; //Delete any previously generated histograms or functions; gDirectory->Delete(""hdmd"");; gDirectory->Delete(""h2*"");; delete gROOT->GetFunction(""f5"");; delete gROOT->GetFunction(""f2"");. //create histograms; hdmd = new TH1F(""hdmd"",""dm_d"",40,0.13,0.17);; h2 = new TH2F(""h2"",""ptD0 vs dm_d"",30,0.135,0.165,30,-3,6);. //process cases with event list; fillList =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1092408,Power,Power,1092408,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Power'],['Power']
Energy Efficiency,"n colormap. ; If we are on an <= 8 plane machine we will use XAllocColor. If we are on a >= 15 (15, 16 or 24) plane true color machine we will calculate the pixel value using: for 15 and 16 bit true colors have 6 bits precision per color however only the 5 most significant bits are used in the color index. Except for 16 bits where green uses all 6 bits. I.e.: 15 bits = rrrrrgggggbbbbb; 16 bits = rrrrrggggggbbbbb; for 24 bits each r, g and b are represented by 8 bits.; Since all colors are set with a max of 65535 (16 bits) per r, g, b we just right shift them by 10, 11 and 10 bits for 16 planes, and (10, 10, 10 for 15 planes) and by 8 bits for 24 planes. Returns kFALSE in case color allocation failed. ; Definition at line 366 of file TGX11.cxx. ◆ AllocColor() [2/2]. Bool_t TGX11::AllocColor ; (; Colormap_t ; cmap, . ColorStruct_t & ; color . ). overridevirtual . Find and allocate a color cell according to the color values specified in the ColorStruct_t. ; If no cell could be allocated it returns kFALSE, otherwise kTRUE. ; Reimplemented from TVirtualX.; Definition at line 1351 of file GX11Gui.cxx. ◆ Bell(). void TGX11::Bell ; (; Int_t ; percent). overridevirtual . Sound bell. Percent is loudness from -100% .. 100%. ; Reimplemented from TVirtualX.; Definition at line 1675 of file GX11Gui.cxx. ◆ ChangeActivePointerGrab(). void TGX11::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; mask, . Cursor_t ; cur . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client. ; Reimplemented from TVirtualX.; Definition at line 2718 of file GX11Gui.cxx. ◆ ChangeGC(). void TGX11::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overridevirtual . Change entries in an existing graphics context, gc, by values from gval. ; Reimplemented from TVirtualX.; Definition at line 993 of file GX11Gui.cxx. ◆ ChangeProperties(). void TGX11::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:55240,allocate,allocated,55240,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['allocate'],['allocated']
Energy Efficiency,"n destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TAtt3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; virtual void FillBuffer3D (TBuffer3D &buffer, Int_t reqSections) const;  We have to set kRawSize (unless already done) to allocate buffer space before kRaw can be filled. ;  ; Int_t GetBasicColor () const;  Get basic color. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numPoints, Int_t px, Int_t py);  Distance to primitive. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TMaterial * fMaterial;  ; Int_t fNumber;  ; Int_t fVisibility;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TObject; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTShape.html:15466,allocate,allocate,15466,doc/master/classTShape.html,https://root.cern,https://root.cern/doc/master/classTShape.html,1,['allocate'],['allocate']
Energy Efficiency,"n different class hierarchies.; enum EObjBits {; kCanDelete = BIT(0), // if can be deleted; kMustCleanup = BIT(3), // if destructor must call RecursiveRemove(); kObjInCanvas = BIT(3), // for backward compatibility only; kIsReferenced = BIT(4), // if referenced by TRef or TRefArray; kHasUUID = BIT(5), // if has a TUUID, fUniqueID=UUIDNumber; kCannotPick = BIT(6), // if cannot be picked in a pad; kNoContextMenu = BIT(8), // if does not want a context menu; kInvalidObject = BIT(13) // object ctor succeeded but the object should not be used; };; For example, the bits kMustCleanup and kCanDelete are used in TObject. See “The kCanDelete Bit” and “The kMustCleanup Bit”. They can be set by any object and should not be reused. Make sure not to overlap them in any given hierarchy. The bit 13 (kInvalidObject) is set when an object could not be read from a ROOT file. It will check this bit and will skip to the next object on the file.; The TObject constructor initializes the fBits to zero depending if the object is created on the stack or allocated on the heap. When the object is created on the stack, the kCanDelete bit is set to false to protect from deleting objects on the stack. The high 8 bits are reserved for the system usage; the low 24 bits are user settable. fUniqueID is a data member used to give a unique identification number to an object. It is initialized to zero by the TObject constructor. ROOT does not use this data member. The two data members (fBits and fUniqueID) are streamed out when writing an object to disk. If you do not use them, you can save some space and time by specifying:; MyClass::Class()->IgnoreTObjectStreamer();; This sets a bit in the TClass object. If the file is compressed, the savings are minimal since most values are zero; however, it saves some space when the file is not compressed. A call toIgnoreTObjectStreamer also prevents the creation of two additional branches when splitting the object. If left alone, two branches called fBits and fUniqu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:810916,allocate,allocated,810916,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['allocate'],['allocated']
Energy Efficiency,"n external TH1. void initialize(const char* binningName = 0, Bool_t fillTree = kTRUE); Initialization procedure: allocate weights array, calculate; multipliers needed for N-space to 1-dim array jump table,; and fill the internal tree with all bin center coordinates. void checkBinBounds() const. RooDataHist(const RooDataHist& other, const char* newname = 0); Copy constructor. RooDataHist(const char* name, const char* title, RooDataHist* h, const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange, Int_t nStart, Int_t nStop, Bool_t copyCache); Constructor of a data hist from (part of) an existing data hist. The dimensions; of the data set are defined by the 'vars' RooArgSet, which can be identical; to 'dset' dimensions, or a subset thereof. Reduced dimensions will be projected; in the output data hist. The optional 'cutVar' formula variable can used to; select the subset of bins to be copied. For most uses the RooAbsData::reduce() wrapper function, which uses this constructor,; is the most convenient way to create a subset of an existing data. RooAbsData* cacheClone(const RooAbsArg* newCacheOwner, const RooArgSet* newCacheVars, const char* newName = 0); Construct a clone of this dataset that contains only the cached variables. RooAbsData* reduceEng(const RooArgSet& varSubset, const RooFormulaVar* cutVar, const char* cutRange = 0, Int_t nStart = 0, Int_t nStop = 2000000000, Bool_t copyCache = kTRUE); Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ~RooDataHist(); Destructor. Int_t getIndex(const RooArgSet& coord, Bool_t fast = kFALSE). Int_t calcTreeIndex() const; Calculate the index for the weights array corresponding to; to the bin enclosing the current coordinates of the internal argset. void dump2(); Debug stuff, should go... RooPlot * plotOn(RooPlot* frame, RooAbsData::PlotOpt o) const; Back end function to plotting functionality. Plot RooDataHist on given; frame in mode specified by plot options 'o'. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataHist.html:27694,reduce,reduce,27694,root/html534/RooDataHist.html,https://root.cern,https://root.cern/root/html534/RooDataHist.html,6,['reduce'],['reduce']
Energy Efficiency,"n index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(const Int_t* idx) const; Get content of bin with coordinates ""coord"". Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError(const Int_t* idx) const; Get error of bin with coordinates ""coord"" as. If errors are not enabled (via Sumw2() or CalculateErrors()); return sqrt(contents). Double_t GetBinError(Long64_t linidx) const; Get error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return sqrt(contents). Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. void GetRandom(Double_t* rand, Bool_t subBinRandom = kTRUE); Generate an n-dimensional random tuple based on the histogrammed; distribution. If subBinRandom, the returned tuple will be additionally; randomly distributed within the randomized bin, using a flat; distribution. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. Bool_t IsInRange(Int_t* coord) const; Check whether bin coord is in range, as defined by TAxis::SetRange().; Currently, TAxis::SetRange() does not allow to select all but over- and; underflow bins (it instead resets the axis to ""no range selected"").;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THnSparse.html:17672,allocate,allocate,17672,root/html528/THnSparse.html,https://root.cern,https://root.cern/root/html528/THnSparse.html,4,['allocate'],['allocate']
Energy Efficiency,"n is computed.; -if spline==0 and option=""S"" a TSpline3 object is created using this graph; and the interpolated value from the spline is returned.; the internally created spline is deleted on return.; -if spline is specified, it is used to return the interpolated value. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. This member function is called when a graph is clicked with the locator. If Left button clicked on one of the line end points, this point; follows the cursor until button is released. if Middle button clicked, the line is moved parallel to itself; until the button is released. void Expand(Int_t newsize); If array sizes <= newsize, expand storage to 2*newsize. void Expand(Int_t newsize, Int_t step); If graph capacity is less than newsize points then make array sizes; equal to least multiple of step to contain newsize points.; Returns kTRUE if size was altered. Double_t ** ExpandAndCopy(Int_t size, Int_t iend); if size > fMaxSize allocate new arrays of 2*size points; and copy oend first points.; Return pointer to new arrays. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end); Should be redefined in descendant classes. TObject * FindObject(const char* name) const; Search object named name in the list of functions. TObject * FindObject(const TObject* obj) const; Search object obj in the list of functions. TFitResultPtr Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); Fit this graph with function with name fname. interface to TGraph::Fit(TF1 *f1... fname is the name of an already predefined function created by TF1 or TF2; Predefined functions such as gaus, expo and poln are automatically; created by ROOT.; fname can also be a formula, accepted by the linear fitter (linear parts divided; by ""++"" sign), for example ""x++sin(x)"" for fitting ""[0]*x+[1]*sin(x)"". TFitResultPtr Fit(TF1* f1,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:19701,allocate,allocate,19701,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,10,['allocate'],['allocate']
Energy Efficiency,"n is non-numeric, a RooCategory will be created, and the args are interpreted; as either state names or 'name=id' assignments. Otherwise a RooRealvar is created and the; arg list is interpreted as follows:; If list has two args, these are interpreted as xmin,xmax; If list has three args, these are interpreted as xinit,xmin,xmax; If list has one arg, this is interpreted as xinit and the variable is set as constant. string processCreateArg(string& func, vector<std::string>& args); Glue function between high-level syntax and low-level factory call to createArg:; Process a parsed call to create a p.d.f named func. The func arg is interpreted as ClassName::ObjectName and the arglist is passed; verbatim to createArg. The received arglist is expected to be fully reduced (i.e.; all inline object creations must have been compiled). std::string processMetaArg(string& func, vector<std::string>& args); Concatenate list of args into comma separated string. vector<string> splitFunctionArgs(const char* funcExpr); Allocate and fill work buffer. Bool_t checkSyntax(const char* arg); Perform basic syntax on given factory expression. If function returns; true syntax errors are found. void checkIndex(UInt_t index). RooAbsArg& asARG(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsArg reference found in workspace. RooAbsReal& asFUNC(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsReal reference found in workspace. RooAbsRealLValue& asVARLV(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsRealLValue reference found in workspace. RooRealVar& asVAR(const char* ); CINT constructor interface, return constructor string argument #idx as RooRealVar reference found in workspace. RooAbsPdf& asPDF(const char* ); CINT constructor interface, return constructor string argument #idx as RooAbsPdf reference found in workspace. RooResolutionModel& asRMODEL(const char* ); CINT co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFactoryWSTool.html:19489,Allocate,Allocate,19489,root/html532/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html532/RooFactoryWSTool.html,2,['Allocate'],['Allocate']
Energy Efficiency,"n member wise streaming.Definition TStreamerInfo.h:105; TStreamerInfo::GetReadObjectWiseActionsTStreamerInfoActions::TActionSequence * GetReadObjectWiseActions()Definition TStreamerInfo.h:168; TStreamerInfo::GetOldVersionVersion_t GetOldVersion() const overrideDefinition TStreamerInfo.h:181; TStreamerInfo::GetTypeInt_t GetType(Int_t id) constDefinition TStreamerInfo.h:187; TStreamerInfo::ReadBufferConvInt_t ReadBufferConv(TBuffer &b, const T &arrptr, const TCompInfo *compinfo, Int_t kase, TStreamerElement *aElement, Int_t narr, Int_t eoffset)Convert elements of a TClonesArray.Definition TStreamerInfoReadBuffer.cxx:568; TStreamerInfo::GetElemTStreamerElement * GetElem(Int_t id) const overrideDefinition TStreamerInfo.h:164; TStreamerInfo::fClassVersionInt_t fClassVersionClass version identifier.Definition TStreamerInfo.h:89; TStreamerInfo::fNdataInt_t fNdata!number of optimized elementsDefinition TStreamerInfo.h:93; TStreamerInfo::Newvoid * New(void *obj=nullptr) overrideAn emulated object is created at address obj, if obj is null we allocate memory for the object.Definition TStreamerInfo.cxx:4769; TStreamerInfo::TStreamerInfoTStreamerInfo()Status bits See TVirtualStreamerInfo::EStatusBits for the values.Definition TStreamerInfo.cxx:145; TStreamerInfo::fReadMemberWiseVecPtrTStreamerInfoActions::TActionSequence * fReadMemberWiseVecPtr! List of read action resulting from the compilation for use in member wise streaming.Definition TStreamerInfo.h:106; TStreamerInfo::fReadObjectWiseTStreamerInfoActions::TActionSequence * fReadObjectWise! List of read action resulting from the compilation.Definition TStreamerInfo.h:104; TStreamerInfo::GetElementOffsetInt_t GetElementOffset(Int_t id) const overrideDefinition TStreamerInfo.h:166; TStreamerInfo::GetLengthInt_t GetLength(Int_t id) constDefinition TStreamerInfo.h:176; TStreamerInfo::TStreamerInfoTStreamerInfo(const TStreamerInfo &)=delete; TStreamerInfo::GetActualClassTClass * GetActualClass(const void *obj) const overrideAssumi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8h_source.html:31737,allocate,allocate,31737,doc/master/TStreamerInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8h_source.html,1,['allocate'],['allocate']
Energy Efficiency,"n order to distribute the RDataFrame workload, you can connect to a Spark cluster you have access to through the official Spark API, then hook the connection instance to the distributed RDataFrame object like so:; import pyspark; import ROOT; ; # Create a SparkContext object with the right configuration for your Spark cluster; conf = SparkConf().setAppName(appName).setMaster(master); sc = SparkContext(conf=conf); ; # Point RDataFrame calls to the Spark specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; ; # The Spark RDataFrame constructor accepts an optional ""sparkcontext"" parameter; # and it will distribute the application to the connected cluster; df = RDataFrame(""mytree"", ""myfile.root"", sparkcontext = sc); If an instance of SparkContext is not provided, the default behaviour is to create one in the background for you. Connecting to a Dask cluster; Similarly, you can connect to a Dask cluster by creating your own connection object which internally operates with one of the cluster schedulers supported by Dask (more information in the Dask distributed docs):; import ROOT; from dask.distributed import Client; ; # Point RDataFrame calls to the Dask specific RDataFrame; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ; # In a Python script the Dask client needs to be initalized in a context; # Jupyter notebooks / Python session don't need this; if __name__ == ""__main__"":; # With an already setup cluster that exposes a Dask scheduler endpoint; client = Client(""dask_scheduler.domain.com:8786""); ; # The Dask RDataFrame constructor accepts the Dask Client object as an optional argument; df = RDataFrame(""mytree"",""myfile.root"", daskclient=client); # Proceed as usual; df.Define(""x"",""someoperation"").Histo1D((""name"", ""title"", 10, 0, 10), ""x""); If an instance of distributed.Client is not provided to the RDataFrame object, it will be created for you and it will run the computations in the local machine using all cores available. C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:37451,schedul,schedulers,37451,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['schedul'],['schedulers']
Energy Efficiency,"n pad's status bar. Rotation and zooming. Rotation:. When the plot is selected, it can be rotated by pressing and holding the left mouse button and move the cursor.; Zoom/Unzoom:. Mouse wheel or ‘'j’,'J','k','K'` keys.; Panning.; The selected plot can be moved in a pad's area by pressing and holding the left mouse button and the shift key. Box cut; Surface, iso, box, TF3 and parametric painters support box cut by pressing the ‘'c’or 'C'` key when the mouse cursor is in a plot's area. That will display a transparent box, cutting away part of the surface (or boxes) in order to show internal part of plot. This box can be moved inside the plot's area (the full size of the box is equal to the plot's surrounding box) by selecting one of the box cut axes and pressing the left mouse button to move it. Plot specific interactions (dynamic slicing etc.); Currently, all gl-plots support some form of slicing. When back plane is selected (and if it's highlighted in green) you can press and hold left mouse button and shift key and move this back plane inside plot's area, creating the slice. During this ""slicing"" plot becomes semi-transparent. To remove all slices (and projected curves for surfaces); double click with left mouse button in a plot's area. Surface with option ""GLSURF""; The surface profile is displayed on the slicing plane. The profile projection is drawn on the back plane by pressing ‘'p’or'P'` key.; TF3; The contour plot is drawn on the slicing plane. For TF3 the color scheme can be changed by pressing ‘'s’or'S'`.; Box; The contour plot corresponding to slice plane position is drawn in real time.; Iso; Slicing is similar to ""GLBOX"" option.; Parametric plot; No slicing. Additional keys: ‘'s’or'S'to change color scheme - about 20 color schemes supported ('s'for ""scheme"");'l'or'L'to increase number of polygons ('l'for ""level"" of details), 'w'or'W'to show outlines ('w'` for ""wireframe""). ; Definition at line 40 of file TGLHistPainter.h. Classes; struct  PlotOption_t;  . P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLHistPainter.html:4534,green,green,4534,doc/master/classTGLHistPainter.html,https://root.cern,https://root.cern/doc/master/classTGLHistPainter.html,1,['green'],['green']
Energy Efficiency,"n per defined category state; x.setBins(10);; y.setBins(10);; RooDataHist dh(""dh"", ""binned version of d"", RooArgSet(x, y), d);; dh.Print(""v"");; ; RooPlot *yframe = y.frame(Bins(10), Title(""Operations on binned datasets""));; dh.plotOn(yframe); // plot projection of 2D binned data on y; ; // Examine the statistics of a binned dataset; cout << "">> number of bins in dh : "" << dh.numEntries() << endl;; cout << "">> sum of weights in dh : "" << dh.sum(false) << endl;; cout << "">> integral over histogram: "" << dh.sum(true) << endl; // accounts for bin volume; ; // Locate a bin from a set of coordinates and retrieve its properties; x = 0.3;; y = 20.5;; cout << "">> retrieving the properties of the bin enclosing coordinate (x,y) = (0.3,20.5) "" << endl;; cout << "" bin center:"" << endl;; dh.get(RooArgSet(x, y))->Print(""v""); // load bin center coordinates in internal buffer; cout << "" weight = "" << dh.weight() << endl; // return weight of last loaded coordinates; ; // Reduce the 2-dimensional binned dataset to a 1-dimensional binned dataset; //; // All reduce() methods are interfaced in RooAbsData. All reduction techniques; // demonstrated on unbinned datasets can be applied to binned datasets as well.; cout << "">> Creating 1-dimensional projection on y of dh for bins with x>0"" << endl;; std::unique_ptr<RooAbsData> dh2{dh.reduce(y, ""x>0"")};; dh2->Print(""v"");; ; // Add dh2 to yframe and redraw; dh2->plotOn(yframe, LineColor(kRed), MarkerColor(kRed));; ; // S a v i n g a n d l o a d i n g f r o m f i l e; // -------------------------------------------------------; ; // Datasets can be persisted with ROOT I/O; cout << endl << "">> Persisting d via ROOT I/O"" << endl;; TFile f(""rf402_datahandling.root"", ""RECREATE"");; d.Write();; f.ls();; ; // To read back in future session:; // > TFile f(""rf402_datahandling.root"") ;; // > RooDataSet* d = (RooDataSet*) f.FindObject(""d"") ;; ; new TCanvas(""rf402_datahandling"", ""rf402_datahandling"", 600, 600);; gPad->SetLeftMargin(0.15);; yframe->GetYaxis()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf402__datahandling_8C.html:5123,reduce,reduce,5123,doc/master/rf402__datahandling_8C.html,https://root.cern,https://root.cern/doc/master/rf402__datahandling_8C.html,1,['reduce'],['reduce']
Energy Efficiency,"n returns size of node and dauthers, otherwise returns size of node only. ; Definition at line 212 of file TStructNode.cxx. ◆ GetRelativeVolume(). ULong_t TStructNode::GetRelativeVolume ; (; ); const. Returns size or number of members. ; If ScaleBy is set to kMembers and node is collapsed, then it returns all number of members. If node isn't collapsed it returns number of members. If Scaleby is set to kSize and node is collapsed, then it returns total size of node and daughters, else it returns size of node, otherwise it returns 0. ; Definition at line 226 of file TStructNode.cxx. ◆ GetRelativeVolumeRatio(). Float_t TStructNode::GetRelativeVolumeRatio ; (; ). Returns ratio - relative volume to area taken by utlining box. ; Definition at line 248 of file TStructNode.cxx. ◆ GetSize(). ULong_t TStructNode::GetSize ; (; ); const. Returns size of node. ; Definition at line 256 of file TStructNode.cxx. ◆ GetTotalSize(). ULong_t TStructNode::GetTotalSize ; (; ); const. Returns total size of allocated memory in bytes. ; Definition at line 264 of file TStructNode.cxx. ◆ GetTypeName(). TString TStructNode::GetTypeName ; (; ); const. Returns name of class. ; Definition at line 272 of file TStructNode.cxx. ◆ GetVolume(). ULong_t TStructNode::GetVolume ; (; ); const. Returns size or number of members. ; If ScaleBy is set to kMembers it returns all number of members. If Scaleby is set to kSize then it returns total size of node and daughters, otherwise it returns 0. ; Definition at line 281 of file TStructNode.cxx. ◆ GetVolumeRatio(). Float_t TStructNode::GetVolumeRatio ; (; ). Returns ratio - volme of node to area taken by outlining box. ; Definition at line 296 of file TStructNode.cxx. ◆ GetWidth(). Float_t TStructNode::GetWidth ; (; ); const. Returns width of outlining box. ; Definition at line 304 of file TStructNode.cxx. ◆ GetX(). Float_t TStructNode::GetX ; (; ); const. Returns X coordinate. ; Definition at line 312 of file TStructNode.cxx. ◆ GetY(). Float_t TStructNode::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructNode.html:18965,allocate,allocated,18965,doc/master/classTStructNode.html,https://root.cern,https://root.cern/doc/master/classTStructNode.html,1,['allocate'],['allocated']
Energy Efficiency,"n the structure are not supported, neither is removal of atoms.; The structure can be Refit() to occupy a single contiguous array. Function Members (Methods); public:. TEveChunkManager(); TEveChunkManager(Int_t atom_size, Int_t chunk_size); virtual~TEveChunkManager(); Char_t*Atom(Int_t idx) const; Int_tCapacity() const; Char_t*Chunk(Int_t chk) const; static TClass*Class(); virtual TClass*IsA() const; Int_tN() const; Int_tNAtoms(Int_t chk) const; Char_t*NewAtom(); Char_t*NewChunk(); voidRefit(); voidReset(Int_t atom_size, Int_t chunk_size); Int_tS() const; virtual voidShowMembers(TMemberInspector& insp); Int_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Int_tVecSize() const. protected:. voidReleaseChunks(). private:. TEveChunkManager(const TEveChunkManager&); TEveChunkManager&operator=(const TEveChunkManager&). Data Members; protected:. Int_tfCapacityAvailable capacity within the chunks; vector<TArrayC*>fChunksMemory blocks; Int_tfNNumber of atoms in a chunk; Int_tfSSize of atom; Int_tfSizeSize of container, number of atoms; Int_tfVecSizeNumber of allocated chunks. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ReleaseChunks(); Release all memory chunks. TEveChunkManager(); Default constructor.; Call reset for initialization. TEveChunkManager(Int_t atom_size, Int_t chunk_size); Constructor. ~TEveChunkManager(); Destructor. void Reset(Int_t atom_size, Int_t chunk_size); Empty the container and reset it with given atom and chunk sizes. void Refit(); Refit the container so that all current data fits into a single; chunk. Char_t* NewChunk(); Allocate a new memory chunk and register it. Char_t* NewAtom(). TEveChunkManager(const TEveChunkManager& ). TEveChunkManager& operator=(const TEveChunkManager& ). Int_t S() const; { return fS; }. Int_t N() const; { return fN; }. Int_t Size() const; { return fSize; }. Int_t VecSize() const; { return fVecSize; }. Int_t Capacity() const; { return fCapac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveChunkManager.html:1599,allocate,allocated,1599,root/html528/TEveChunkManager.html,https://root.cern,https://root.cern/root/html528/TEveChunkManager.html,4,['allocate'],['allocated']
Energy Efficiency,"n type. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMethodCall(); Default TMethodCall ctor. Use Init() to initialize the method call; environment. TMethodCall(TClass* cl, CallFunc_t* callfunc, Long_t offset = 0); Create a method invocation environment for a specific class, method; described by the callfunc. TMethodCall(TClass* cl, const char* method, const char* params); Create a method invocation environment for a specific class, method and; parameters. The parameter string has the form: ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(object,...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). TMethodCall(const char* function, const char* params); Create a global function invocation environment. The parameter; string has the form: ""\""aap\"", 3, 4,35"". To execute the; function call TMethodCall::Execute(...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). TMethodCall(TFunction* func); Create a global function invocation environment base on a TFunction object.; To execute the function call TMethodCall::Execute(...).; This two step method is much more efficient than calling for; every invocation TInterpreter::Execute(...). TMethodCall(const TMethodCall& org); Copy ctor. TMethodCall & operator=(const TMethodCall& rhs); Assignement operator. ~TMethodCall(); TMethodCall dtor. TObject * Clone(const char* newname = """") const; Return an exact copy of this object. void Init(TClass* cl, CallFunc_t* func, Long_t offset = 0); Initialize the method invocation environment based on; the CallFunc object and the TClass describing the function context. void Init(TFunction* func); Initialize the method invocation environment based on; the TFunction object. void Init(TClass* cl, const char* method, const char* params, Bool_t objectIsConst = kFALSE); Initialize the method invocation environment. Neces",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMethodCall.html:9420,efficient,efficient,9420,root/html602/TMethodCall.html,https://root.cern,https://root.cern/root/html602/TMethodCall.html,4,['efficient'],['efficient']
Energy Efficiency,"n(const LayerContainer &_layers, std::vector< LayerData > &layerData) constDefinition NeuralNet.icc:1221; TMVA::DNN::Net::backPropagatevoid backPropagate(std::vector< std::vector< LayerData > > &layerPatternData, const Settings &settings, size_t trainFromLayer, size_t totalNumWeights) constDefinition NeuralNet.icc:1355; TMVA::DNN::SettingsSettings for the training of the neural net.Definition NeuralNet.h:730; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid pl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:67447,monitor,monitoring,67447,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['monitor'],['monitoring']
Energy Efficiency,"n) {; 535 int i;; 536 int sum = 0;; 537 ; 538 for (i = 0; i < n; i++) {; 539 sum += x[i];; 540 }; 541 ; 542 return(sum);; 543}; 544 ; 545 ; 546void adkTestStat(double *adk, const std::vector<std::vector<double> > & samples, const std::vector<double> & zstar) {; 547 ; 548 int i;; 549 int j;; 550 ; 551 int nsum; /* total sample size = n_1 + ... + n_k */; 552 int k = samples.size();; 553 int l = zstar.size();; 554 ; 555 /* fij records the number of observations in the ith sample coinciding; 556 with zstar[j], where i = 1, ..., k, and j = 1, ..., l */; 557 std::vector<int> fij (k*l);; 558 /* lvec is an integer vector with length l,; 559 whose jth entry = \sum_{i=1}^{k} f_{ij}, i.e., the multiplicity; 560 of zstar[j] */; 561 std::vector<int> lvec(l);; 562 ; 563 /* for computation */; 564 double mij;; 565 double maij;; 566 double innerSum;; 567 double aInnerSum;; 568 double bj;; 569 double baj;; 570 double tmp;; 571 ; 572 /* samples is a two-dimensional double array with length k;; 573 it stores an array of k pointers to double arrays which are; 574 the k samples being compared */; 575// double **samples;; 576 ; 577 /* dynamically allocate memory */; 578 //std::vector< std::vector<double> > samples(k);; 579 std::vector<int> ns(k);; 580 nsum = 0;; 581 for (i = 0; i < k; i++) {; 582 ns[i] = samples[i].size();; 583 nsum += ns[i];; 584 }; 585 ; 586 /* fij: k*l integer matrix, where l is the length of zstar and; 587 k is the number of samples being compared; 588 lvec: integer vector of length l, records the multiplicity of; 589 each element of zstar */; 590 for (j = 0; j < l; j++) {; 591 lvec[j] = 0;; 592 for (i = 0; i < k; i++) {; 593 fij[i + j*k] = getCount(zstar[j], &samples[i][0], ns[i]);; 594 lvec[j] += fij[i + j*k];; 595 }; 596 }; 597 ; 598 // loop on samples to compute the adk's; 599 // Formula (6) and (7) of the paper; 600 adk[0] = adk[1] = 0;; 601 for (i = 0; i < k; i++) {; 602 mij = 0;; 603 maij = 0;; 604 innerSum = 0;; 605 aInnerSum = 0;; 606 ; 607 for (j = 0; j < l;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:21008,allocate,allocate,21008,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency,"n), the object can be added (and constructed when needed) using ConstructedAt which only calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; Note: the only supported way to add objects to a TClonesArray is via the new with placement method or the ConstructedAt method. The other Add() methods ofTObjArray and its base classes are not allowed.; Considering that a new/delete costs about 70 mus on a 300 MHz HP, O(10^9) new/deletes will save about 19 hours. NOTE 1; C/C++ offers the possibility of allocating and deleting memory. Forgetting to delete allocated memory is a programming error called a ""memory leak"", i.e. the memory of your process grows and eventually your program crashes. Even if you always delete the allocated memory, the recovered space may not be efficiently reused. The process knows that there are portions of free memory, but when you allocate it again, a fresh piece of memory is grabbed. Your program is free from semantic errors, but the total memory of your process still grows, because your program's memory is full of ""holes"" which reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in terms of CPU time.; Without entering into technical details, TClonesArray allows you to ""reuse"" the same portion of memory for new/delete avoiding memory fragmentation and memory growth and improving the performance by orders of magnitude. Every time the memory of the TClonesArray has to be reused, the Clear() method is used. To provide its benefits, each TClonesArray must be allocated once per process and disposed of (deleted) only when not needed any more.; So a job should see only one deletion for each TClonesArray, which should be Clear",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:2594,allocate,allocated,2594,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,2,"['allocate', 'efficient']","['allocated', 'efficiently']"
Energy Efficiency,"n, Derivative and a; 250 method to evaluate at the same time the function and the derivative FdF; 251 ; 252 @ingroup GenFunc; 253 */; 254 class IGradientFunctionOneDim : virtual public IBaseFunctionOneDim {; 255 ; 256 public:; 257 ; 258 typedef IBaseFunctionOneDim BaseFunc;; 259 typedef IGradientFunctionOneDim BaseGrad;; 260 ; 261 /// Return the derivative of the function at a point x; 262 /// Use the private method DoDerivative; 263 double Derivative(double x) const { return DoDerivative(x); }; 264 ; 265 /// Compatibility method with multi-dimensional interface for partial derivative.; 266 double Derivative(const double *x) const { return DoDerivative(*x); }; 267 ; 268 /// Compatibility method with multi-dimensional interface for Gradient.; 269 void Gradient(const double *x, double *g) const { g[0] = DoDerivative(*x); }; 270 ; 271 /// Optimized method to evaluate at the same time the function value and derivative at a point x.; 272 /// Often both value and derivatives are needed and it is often more efficient to compute them at the same time.; 273 /// Derived class should implement this method if performances play an important role and if it is faster to; 274 /// evaluate value and derivative at the same time.; 275 virtual void FdF(double x, double &f, double &df) const; 276 {; 277 f = operator()(x);; 278 df = Derivative(x);; 279 }; 280 ; 281 /// Compatibility method with multi-dimensional interface for Gradient and function evaluation.; 282 void FdF(const double *x, double &f, double *df) const { FdF(*x, f, *df); }; 283 ; 284 bool HasGradient() const override { return true; }; 285 ; 286 private:; 287 ; 288 /// Function to evaluate the derivative with respect each coordinate. To be implemented by the derived class.; 289 virtual double DoDerivative(double x) const = 0;; 290 };; 291 ; 292 ; 293 ; 294 } // namespace Math; 295} // namespace ROOT; 296 ; 297#endif /* ROOT_Math_IFunction */; IFunctionfwd.h; f#define f(i)Definition RSha256.hxx:104; g#define g(i)Definition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/IFunction_8h_source.html:12084,efficient,efficient,12084,doc/master/IFunction_8h_source.html,https://root.cern,https://root.cern/doc/master/IFunction_8h_source.html,1,['efficient'],['efficient']
Energy Efficiency,"n, blue, 255, alpha);; 3051 }; 3052 break;; 3053 ; 3054 // Cubehelix; 3055 case 58:; 3056 {; 3057 Double_t red[9] = { 0.0000, 0.0956, 0.0098, 0.2124, 0.6905, 0.9242, 0.7914, 0.7596, 1.0000};; 3058 Double_t green[9] = { 0.0000, 0.1147, 0.3616, 0.5041, 0.4577, 0.4691, 0.6905, 0.9237, 1.0000};; 3059 Double_t blue[9] = { 0.0000, 0.2669, 0.3121, 0.1318, 0.2236, 0.6741, 0.9882, 0.9593, 1.0000};; 3060 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3061 }; 3062 break;; 3063 ; 3064 // Green Red Violet; 3065 case 59:; 3066 {; 3067 Double_t red[9] = {13./255., 23./255., 25./255., 63./255., 76./255., 104./255., 137./255., 161./255., 206./255.};; 3068 Double_t green[9] = {95./255., 67./255., 37./255., 21./255., 0./255., 12./255., 35./255., 52./255., 79./255.};; 3069 Double_t blue[9] = { 4./255., 3./255., 2./255., 6./255., 11./255., 22./255., 49./255., 98./255., 208./255.};; 3070 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3071 }; 3072 break;; 3073 ; 3074 // Blue Red Yellow; 3075 case 60:; 3076 {; 3077 Double_t red[9] = {0./255., 61./255., 89./255., 122./255., 143./255., 160./255., 185./255., 204./255., 231./255.};; 3078 Double_t green[9] = {0./255., 0./255., 0./255., 0./255., 14./255., 37./255., 72./255., 132./255., 235./255.};; 3079 Double_t blue[9] = {0./255., 140./255., 224./255., 144./255., 4./255., 5./255., 6./255., 9./255., 13./255.};; 3080 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3081 }; 3082 break;; 3083 ; 3084 // Ocean; 3085 case 61:; 3086 {; 3087 Double_t red[9] = { 14./255., 7./255., 2./255., 0./255., 5./255., 11./255., 55./255., 131./255., 229./255.};; 3088 Double_t green[9] = {105./255., 56./255., 26./255., 1./255., 42./255., 74./255., 131./255., 171./255., 229./255.};; 3089 Double_t blue[9] = { 2./255., 21./255., 35./255., 60./255., 92./255., 113./255., 160./255., 185./255., 229./255.};; 3090 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:116088,green,green,116088,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"n-zero elements to nelems_new. ; Definition at line 1477 of file TMatrixTSparse.cxx. ◆ SetSparseIndexAB() [1/3]. template<class Element > . TMatrixTSparse< Element > & TMatrixTSparse< Element >::SetSparseIndexAB ; (; const TMatrixT< Element > & ; a, . const TMatrixTSparse< Element > & ; b . ). Set the row/column indices to the ""sum"" of matrices a and b It is checked that enough space has been allocated. ; Definition at line 1648 of file TMatrixTSparse.cxx. ◆ SetSparseIndexAB() [2/3]. template<class Element > . TMatrixTSparse< Element > & TMatrixTSparse< Element >::SetSparseIndexAB ; (; const TMatrixTSparse< Element > & ; a, . const TMatrixT< Element > & ; b . ). inline . Definition at line 113 of file TMatrixTSparse.h. ◆ SetSparseIndexAB() [3/3]. template<class Element > . TMatrixTSparse< Element > & TMatrixTSparse< Element >::SetSparseIndexAB ; (; const TMatrixTSparse< Element > & ; a, . const TMatrixTSparse< Element > & ; b . ). Set the row/column indices to the ""sum"" of matrices a and b It is checked that enough space has been allocated. ; Definition at line 1554 of file TMatrixTSparse.cxx. ◆ SetSub(). template<class Element > . TMatrixTBase< Element > & TMatrixTSparse< Element >::SetSub ; (; Int_t ; row_lwb, . Int_t ; col_lwb, . const TMatrixTBase< Element > & ; source . ). overridevirtual . Insert matrix source starting at [row_lwb][col_lwb], thereby overwriting the part [row_lwb..row_lwb+nrows_source-1][col_lwb..col_lwb+ncols_source-1];. ; Implements TMatrixTBase< Element >.; Definition at line 2066 of file TMatrixTSparse.cxx. ◆ Streamer(). template<class Element > . void TMatrixTSparse< Element >::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TMatrixTSparse. ; Reimplemented from TMatrixTBase< Element >.; Definition at line 2989 of file TMatrixTSparse.cxx. ◆ StreamerNVirtual(). template<class Element > . void TMatrixTSparse< Element >::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 215",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSparse.html:54026,allocate,allocated,54026,doc/master/classTMatrixTSparse.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html,1,['allocate'],['allocated']
Energy Efficiency,"n.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.0000000000000001E-9, double relTol = 1.0000000000000001E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::AdaptiveIntegratorMultiDim&operator=(const ROOT::Math::AdaptiveIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html:2762,Adapt,AdaptiveIntegratorMultiDim,2762,root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__AdaptiveIntegratorMultiDim.html,8,['Adapt'],"['AdaptiveIntegratorMultiDim', 'AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim']"
Energy Efficiency,"n.; For a more detailed description of the method see References. Notes:. 1.Multi-dimensional integration is time-consuming. For each rectangular; subregion, the routine requires function evaluations.; Careful programming of the integrand might result in substantial saving; of time.; 2.Numerical integration usually works best for smooth functions.; Some analysis or suitable transformations of the integral prior to; numerical work may contribute to numerical efficiency. References:. 1.A.C. Genz and A.A. Malik, Remarks on algorithm 006:; An adaptive algorithm for numerical integration over; an N-dimensional rectangular region, J. Comput. Appl. Math. 6 (1980) 295-302.; 2.A. van Doren and L. de Ridder, An adaptive algorithm for numerical; integration over an n-dimensional cube, J.Comput. Appl. Math. 2 (1976) 207-217. @ingroup Integration. Function Members (Methods); public:. virtual~AdaptiveIntegratorMultiDim(); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::AdaptiveIntegratorMultiDim&); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(double absTol = 1.E-9, double relTol = 1E-9, unsigned int maxpts = 100000, unsigned int size = 0); ROOT::Math::AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, double absTol = 1.E-9, double relTol = 1E-9, unsigned int maxcall = 100000, unsigned int size = 0); virtual doubleError() const; virtual doubleIntegral(const double* xmin, const double* xmax); doubleIntegral(const ROOT::Math::IMultiGenFunction& f, const double* xmin, const double* xmax); virtual intNEval() const; ROOT::Math::VirtualIntegratorMultiDim&ROOT::Math::VirtualIntegratorMultiDim::operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; doubleRelError() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double absTol); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction& f); voidSetMaxPts(unsigned ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html:2762,Adapt,AdaptiveIntegratorMultiDim,2762,root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__AdaptiveIntegratorMultiDim.html,4,['Adapt'],"['AdaptiveIntegratorMultiDim', 'AdaptiveIntegratorMultiDimAdaptiveIntegratorMultiDim']"
Energy Efficiency,"n::kCSPLINE);  Constructs an interpolator class from vector of data points \( (x_i, y_i )\) and with Interpolation::Type type. ;  ;  Interpolator (Interpolator &&)=delete;  ;  Interpolator (unsigned int ndata=0, Interpolation::Type type=Interpolation::kCSPLINE);  Constructs an interpolator class from number of data points and with Interpolation::Type type. ;  ; virtual ~Interpolator ();  ; double Deriv (double x) const;  Return the derivative of the interpolated function at point x. ;  ; double Deriv2 (double x) const;  Return the second derivative of the interpolated function at point x. ;  ; double Eval (double x) const;  Return the interpolated value at point x. ;  ; double Integ (double a, double b) const;  Return the Integral of the interpolated function over the range [a,b]. ;  ; Interpolator & operator= (const Interpolator &)=delete;  ; Interpolator & operator= (Interpolator &&)=delete;  ; bool SetData (const std::vector< double > &x, const std::vector< double > &y);  Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used in the constructor (ndata) If this is not the case a new re-initialization is performed with the new data size. ;  ; bool SetData (unsigned int ndata, const double *x, const double *y);  Set the data vector ( x[] and y[] ) To be efficient, the size of the data must be the same of the value used when constructing the class (ndata) If this is not the case a new re-initialization is performed with the new data size. ;  ; std::string Type () const;  Return the type of interpolation method. ;  ; std::string TypeGet () const;  . Private Attributes; GSLInterpolator * fInterp;  . #include <Math/Interpolator.h>; Constructor & Destructor Documentation. ◆ Interpolator() [1/4]. ROOT::Math::Interpolator::Interpolator ; (; unsigned int ; ndata = 0, . Interpolation::Type ; type = Interpolation::kCSPLINE . ). Constructs an interpolator class from number of data points and with Interpolation::Type type. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html:2145,efficient,efficient,2145,doc/master/classROOT_1_1Math_1_1Interpolator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Interpolator.html,1,['efficient'],['efficient']
Energy Efficiency,"n; 3085 case 61:; 3086 {; 3087 Double_t red[9] = { 14./255., 7./255., 2./255., 0./255., 5./255., 11./255., 55./255., 131./255., 229./255.};; 3088 Double_t green[9] = {105./255., 56./255., 26./255., 1./255., 42./255., 74./255., 131./255., 171./255., 229./255.};; 3089 Double_t blue[9] = { 2./255., 21./255., 35./255., 60./255., 92./255., 113./255., 160./255., 185./255., 229./255.};; 3090 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3091 }; 3092 break;; 3093 ; 3094 // Color Printable On Grey; 3095 case 62:; 3096 {; 3097 Double_t red[9] = { 0./255., 0./255., 0./255., 70./255., 148./255., 231./255., 235./255., 237./255., 244./255.};; 3098 Double_t green[9] = { 0./255., 0./255., 0./255., 0./255., 0./255., 69./255., 67./255., 216./255., 244./255.};; 3099 Double_t blue[9] = { 0./255., 102./255., 228./255., 231./255., 177./255., 124./255., 137./255., 20./255., 244./255.};; 3100 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3101 }; 3102 break;; 3103 ; 3104 // Alpine; 3105 case 63:; 3106 {; 3107 Double_t red[9] = { 50./255., 56./255., 63./255., 68./255., 93./255., 121./255., 165./255., 192./255., 241./255.};; 3108 Double_t green[9] = { 66./255., 81./255., 91./255., 96./255., 111./255., 128./255., 155./255., 189./255., 241./255.};; 3109 Double_t blue[9] = { 97./255., 91./255., 75./255., 65./255., 77./255., 103./255., 143./255., 167./255., 217./255.};; 3110 Idx = TColor::CreateGradientColorTable(9, stops, red, green, blue, 255, alpha);; 3111 }; 3112 break;; 3113 ; 3114 // Aquamarine; 3115 case 64:; 3116 {; 3117 Double_t red[9] = { 145./255., 166./255., 167./255., 156./255., 131./255., 114./255., 101./255., 112./255., 132./255.};; 3118 Double_t green[9] = { 158./255., 178./255., 179./255., 181./255., 163./255., 154./255., 144./255., 152./255., 159./255.};; 3119 Double_t blue[9] = { 190./255., 199./255., 201./255., 192./255., 176./255., 169./255., 160./255., 166./255., 190./255.};; 3120 Idx = TColor::CreateGradie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:117640,green,green,117640,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"n; TEvePolygonSetProjected(const char* n = ""TEvePolygonSetProjected"", const char* t = """"); Constructor. ~TEvePolygonSetProjected(); Destructor. void ComputeBBox(); Override of virtual method from TAttBBox. void SetProjection(TEveProjectionManager* mng, TEveProjectable* model); This is virtual method from base-class TEveProjected. void SetDepthLocal(Float_t d); Set depth (z-coordinate) of the projected points. void UpdateProjection(); This is virtual method from base-class TEveProjected. Bool_t IsFirstIdxHead(Int_t s0, Int_t s1); Compare the two segments and check if the first index of first segment is starting. Int_t* ProjectAndReducePoints(); Project and reduce buffer points. Float_t AddPolygon(list<Int_t,std::allocator<Int_t> >& pp, list<TEvePolygonSetProjected::Polygon_t,allocator<TEvePolygonSetProjected::Polygon_t> >& p); Check if polygon has dimensions above TEveProjection::fgEps and add it; to a list if it is not a duplicate. Float_t MakePolygonsFromBP(Int_t* idxMap); Build polygons from list of buffer polygons. Float_t MakePolygonsFromBS(Int_t* idxMap); Build polygons from the set of buffer segments.; First creates a segment pool according to reduced and projected points; and then build polygons from the pool. void ProjectBuffer3D(); Project current buffer. Float_t PolygonSurfaceXY(const TEvePolygonSetProjected::Polygon_t& poly) const; Calculate XY surface of a polygon. void DumpPolys() const; Dump information about built polygons. void DumpBuffer3D(); Dump information about currenty projected buffer. TEvePolygonSetProjected(const TEvePolygonSetProjected& ). TEvePolygonSetProjected& operator=(const TEvePolygonSetProjected& ). TEveElement* GetProjectedAsElement(); { return this; }. » Last changed: root/eve:$Id: TEvePolygonSetProjected.h 37192 2010-12-02 15:54:26Z matevz $ » Last generated: 2010-12-02 22:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePolygonSetProjected.html:24262,reduce,reduced,24262,root/html528/TEvePolygonSetProjected.html,https://root.cern,https://root.cern/root/html528/TEvePolygonSetProjected.html,1,['reduce'],['reduced']
Energy Efficiency,"n; TEvePolygonSetProjected(const char* n = ""TEvePolygonSetProjected"", const char* t = """"); Constructor. ~TEvePolygonSetProjected(); Destructor. void ComputeBBox(); Override of virtual method from TAttBBox. void SetProjection(TEveProjectionManager* mng, TEveProjectable* model); This is virtual method from base-class TEveProjected. void SetDepthLocal(Float_t d); Set depth (z-coordinate) of the projected points. void UpdateProjection(); This is virtual method from base-class TEveProjected. Bool_t IsFirstIdxHead(Int_t s0, Int_t s1); Compare the two segments and check if the first index of first segment is starting. Int_t* ProjectAndReducePoints(); Project and reduce buffer points. Float_t AddPolygon(list<Int_t,std::allocator<Int_t> >& pp, list<TEvePolygonSetProjected::Polygon_t,allocator<TEvePolygonSetProjected::Polygon_t> >& p); Check if polygon has dimensions above TEveProjection::fgEps and add it; to a list if it is not a duplicate. Float_t MakePolygonsFromBP(Int_t* idxMap); Build polygons from list of buffer polygons. Float_t MakePolygonsFromBS(Int_t* idxMap); Build polygons from the set of buffer segments.; First creates a segment pool according to reduced and projected points; and then build polygons from the pool. void ProjectBuffer3D(); Project current buffer. Float_t PolygonSurfaceXY(const TEvePolygonSetProjected::Polygon_t& poly) const; Calculate XY surface of a polygon. void DumpPolys() const; Dump information about built polygons. void DumpBuffer3D(); Dump information about currenty projected buffer. TEvePolygonSetProjected(const TEvePolygonSetProjected& ). TEvePolygonSetProjected& operator=(const TEvePolygonSetProjected& ). TEveElement* GetProjectedAsElement(); { return this; }. » Last changed: root/eve:$Id: TEvePolygonSetProjected.h 37192 2010-12-02 15:54:26Z matevz $ » Last generated: 2011-07-04 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEvePolygonSetProjected.html:24617,reduce,reduced,24617,root/html530/TEvePolygonSetProjected.html,https://root.cern,https://root.cern/root/html530/TEvePolygonSetProjected.html,1,['reduce'],['reduced']
Energy Efficiency,"n; TEvePolygonSetProjected(const char* n = ""TEvePolygonSetProjected"", const char* t = """"); Constructor. ~TEvePolygonSetProjected(); Destructor. void ComputeBBox(); Override of virtual method from TAttBBox. void SetProjection(TEveProjectionManager* mng, TEveProjectable* model); This is virtual method from base-class TEveProjected. void SetDepthLocal(Float_t d); Set depth (z-coordinate) of the projected points. void UpdateProjection(); This is virtual method from base-class TEveProjected. Bool_t IsFirstIdxHead(Int_t s0, Int_t s1); Compare the two segments and check if the first index of first segment is starting. Int_t* ProjectAndReducePoints(); Project and reduce buffer points. Float_t AddPolygon(list<Int_t,std::allocator<Int_t> >& pp, list<TEvePolygonSetProjected::Polygon_t,allocator<TEvePolygonSetProjected::Polygon_t> >& p); Check if polygon has dimensions above TEveProjection::fgEps and add it; to a list if it is not a duplicate. Float_t MakePolygonsFromBP(Int_t* idxMap); Build polygons from list of buffer polygons. Float_t MakePolygonsFromBS(Int_t* idxMap); Build polygons from the set of buffer segments.; First creates a segment pool according to reduced and projected points; and then build polygons from the pool. void ProjectBuffer3D(); Project current buffer. Float_t PolygonSurfaceXY(const TEvePolygonSetProjected::Polygon_t& poly) const; Calculate XY surface of a polygon. void DumpPolys() const; Dump information about built polygons. void DumpBuffer3D(); Dump information about currenty projected buffer. TEvePolygonSetProjected(const TEvePolygonSetProjected& ). TEvePolygonSetProjected& operator=(const TEvePolygonSetProjected& ). TEveElement* GetProjectedAsElement(); { return this; }. » Last changed: root/eve:$Id: TEvePolygonSetProjected.h 37192 2010-12-02 15:54:26Z matevz $ » Last generated: 2011-11-03 20:12; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEvePolygonSetProjected.html:24617,reduce,reduced,24617,root/html532/TEvePolygonSetProjected.html,https://root.cern,https://root.cern/root/html532/TEvePolygonSetProjected.html,2,['reduce'],['reduced']
Energy Efficiency,"n; UInt_tfNEventsData's number of events; Bool_tfNewDataflag to control when new data are given; TF1*fPDFOutput Kernel Density Estimation PDF function; Double_tfRhoAdjustment factor for sigma; vector<Bool_t>fSettedOptionsUser input options flag; Double_tfSigmaData std deviation; Double_tfSigmaRobData std deviation (robust estimation); TF1*fUpperPDFOutput Kernel Density Estimation upper confidence interval PDF function; Bool_tfUseBins; UInt_tfUseBinsNEventsIf the algorithm is allowed to use binning this is the minimum number of events to do so; Bool_tfUseMinMaxFromDataflag top control if min and max must be used from data; Bool_tfUseMirroring; Double_tfWeightSizeCaches the weight size; Double_tfXMaxData maximum value; Double_tfXMinData minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0.0, Double_t xMax = 0.0, Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0); Class constructor. ~TKDE(); Class destructor. void Instantiate(TKDE::KernelFunction_Ptr kernfunc, UInt_t events, const Double_t* data, Double_t xMin, Double_t xMax, Option_t* option, Double_t rho); Template's constructor surrogate. void SetOptions(Option_t* option, Double_t rho); Sets User defined construction options. void SetDrawOptions(Option_t* option, TString& plotOpt, TString& drawOpt); Sets User defined drawing options. void GetOptions(string optionType, string option); Gets User defined KDE construction options. void AssureOptions(); Sets missing construction options to default ones. void CheckOptions(Bool_t isUserDefinedKernel = kFALSE); Sets User global options. void SetKernelType(TKDE::EKernelType kern); Sets User option for the choice of kernel estimator. void SetIteration(TKDE::EIteration iter); Sets User option for fixed or adaptive iteration. void SetMirror(TKDE::EMirror mir); Sets User option for mirroring ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TKDE.html:11051,Adapt,Adaptive,11051,root/html532/TKDE.html,https://root.cern,https://root.cern/root/html532/TKDE.html,2,['Adapt'],['Adaptive']
Energy Efficiency,"nBase_t * > Proxies_t;  ; typedef void(* Sizing_t) (void *obj, size_t size);  ; typedef std::vector< TStaging * > Staged_t;  Collection of pre-allocated staged array for associative containers. ;  . Protected Member Functions; void CheckFunctions () const;  Check existence of function pointers. ;  ; virtual void DeleteItem (Bool_t force, void *ptr) const;  Call to delete/destruct individual item. ;  ; TGenCollectionProxy * Initialize (Bool_t silent) const;  Proxy initializer. ;  ; virtual TGenCollectionProxy * InitializeEx (Bool_t silent);  Proxy initializer. ;  . Protected Attributes; Method fClear;  Method cache for container accessors: clear container. ;  ; Collectfunc_t fCollect;  Method to collect objects from container. ;  ; ArrIterfunc_t fConstruct;  Container accessors: block construct. ;  ; std::map< std::string, TObjArray * > * fConversionReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) derived from another class. ;  ; Method0 fCreateEnv;  Method to allocate an Environment holder. ;  ; Sizing_t fDestruct;  Container accessors: block destruct. ;  ; EnvironBase_t * fEnv;  Address of the currently proxied object. ;  ; Feedfunc_t fFeed;  Container accessors: block feed. ;  ; Method fFirst;  Container accessors: generic iteration: first. ;  ; CopyIterator_t fFunctionCopyIterator;  ; CreateIterators_t fFunctionCreateIterators;  ; DeleteIterator_t fFunctionDeleteIterator;  ; DeleteTwoIterators_t fFunctionDeleteTwoIterators;  ; Next_t fFunctionNextIterator;  ; Value * fKey;  Descriptor of the key_type. ;  ; std::string fName;  Name of the class being proxied. ;  ; Method fNext;  Container accessors: generic iteration: next. ;  ; TClass * fOnFileClass;  On file class. ;  ; Bool_t fPointers;  Flag to indicate if containee has pointers (key or value) ;  ; Proxies_t fProxyKept;  Optimization: Keep proxies once they were created. ;  ; Proxies_t fProxyList;  Stack of recursive proxies. ;  ; TObjArray * fReadMemberWise;  Array of bundle of TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenCollectionProxy.html:10334,allocate,allocate,10334,doc/master/classTGenCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTGenCollectionProxy.html,1,['allocate'],['allocate']
Energy Efficiency,"nDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Long64_tfBytesRead!track bytes read of main file; TH2D*fCpuTimeHist!histogram of cpu time spent processing packets; TStringfDataSet!Dataset string; Int_tfDataSetLen!Maximum size of the dataset string fDataSet ; Int_tfDataSetSize!# of files in the dataset ; Bool_tfDoHist!Fill histos; Bool_tfDoQuota!Save stats on SQL server for quota management; Bool_tfDoSlaveTrace!Full tracing in workers; Bool_tfDoTrace!Trace details in master; Bool_tfDoTraceRate!Trace processing rate in master; TH1D*fEventsHist!histogram of events processed per slave; TH2D*fLatencyHist!histogram of latency due to packet requests; Int_tfMonitorInfo!Controls what information to monitor ; Bool_tfMonitorPerPacket!Whether to send the full entry per each packet ; TObjArrayfMonitoringWriters!Monitoring engines; TH1D*fNodeHist!histogram of slaves per file serving node; Long64_tfNumEvents!total number of events to be processed; TList*fOutput!Saved pointer to the output list ; TH1D*fPacketsHist!histogram of packets processed per slave; TPerfEvent*fPerfEvent!TPerfEvent used to fill tree; TH2D*fProcTimeHist!histogram of real time spent processing packets; Int_tfSlaves!number of active slaves; Long64_tfTotBytesRead!total bytes read on all slaves; Double_tfTotCpuTime!total cpu time of all slaves; Long64_tfTotEvents!total number of events processed; TTree*fTrace!TTree with trace events; TTimeStampfTzero!start time of this run; static Long_tfgResMemMax! Max resident memory used by this process; static Long_tfgVirtMemMax! Max virtual memory used by this process. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPerfStats(TList* input, TList* output); Normal constructor. void SimpleEvent(TVirtualPerfStats::EEventType type); Simple event. void Packe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPerfStats.html:7115,monitor,monitor,7115,root/html530/TPerfStats.html,https://root.cern,https://root.cern/root/html530/TPerfStats.html,1,['monitor'],['monitor']
Energy Efficiency,"nRGeomDescription()=default; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::fHighlightedStackstd::vector< int > fHighlightedStack! highlighted element by stackDefinition RGeomData.hxx:249; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::SetActiveItembool SetActiveItem(const std::string &itemname)Definition RGeomData.hxx:433; ROOT::RGeomDescription::GetNumNodesint GetNumNodes() constNumber of unique nodes in the geometry.Definition RGeomData.hxx:369; ROOT::RGeomDescription::SetTopVisiblevoid SetTopVisible(bool on=true)Set draw options as string for JSROOT TGeoPainter.Definition RGeomData.hxx:332; ROOT::RGeomDescription::ProduceDrawDatavoid ProduceDrawData()Collect all information required to draw geometry on the client This includes list of each visible no...Definition RGeomData.cxx:1358; ROOT::RGeomDescription::IsBuildbool IsBuild() constDefinition RGeomData.hxx:371; ROOT::RGeomDescription::SetNSegmentsvoid SetNSegments(int n=0)S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RGeomData_8hxx_source.html:28407,reduce,reduced,28407,doc/v632/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RGeomData_8hxx_source.html,1,['reduce'],['reduced']
Energy Efficiency,"nRGeomDescription()=default; ROOT::RGeomDescription::fSearchstd::string fSearch! search string in hierarchyDefinition RGeomData.hxx:255; ROOT::RGeomDescription::fSearchJsonstd::string fSearchJson! drawing json for searchDefinition RGeomData.hxx:256; ROOT::RGeomDescription::SavePrimitivevoid SavePrimitive(std::ostream &fs, const std::string &name)Save geometry configuration as C++ macro.Definition RGeomData.cxx:2143; ROOT::RGeomDescription::fHighlightedStackstd::vector< int > fHighlightedStack! highlighted element by stackDefinition RGeomData.hxx:249; ROOT::RGeomDescription::ClearAllPhysVisibilitybool ClearAllPhysVisibility()Reset all custom visibility settings.Definition RGeomData.cxx:2089; ROOT::RGeomDescription::MakeDrawingJsonstd::string MakeDrawingJson(RGeomDrawing &drawing, bool has_shapes=false)Produce JSON for the drawing If TGeoShape appears in the drawing, one has to keep typeinfo But in thi...Definition RGeomData.cxx:1826; ROOT::RGeomDescription::fActualLevelint fActualLevel! level can be reduced when selecting nodesDefinition RGeomData.hxx:259; ROOT::RGeomDescription::GetVolumeTGeoVolume * GetVolume(int nodeid)Get volume for specified nodeid If specific volume was configured, it will be returned for nodeid==0.Definition RGeomData.cxx:583; ROOT::RGeomDescription::SetActiveItembool SetActiveItem(const std::string &itemname)Definition RGeomData.hxx:435; ROOT::RGeomDescription::GetNumNodesint GetNumNodes() constNumber of unique nodes in the geometry.Definition RGeomData.hxx:371; ROOT::RGeomDescription::SetTopVisiblevoid SetTopVisible(bool on=true)Set draw options as string for JSROOT TGeoPainter.Definition RGeomData.hxx:332; ROOT::RGeomDescription::ProduceDrawDatavoid ProduceDrawData()Collect all information required to draw geometry on the client This includes list of each visible no...Definition RGeomData.cxx:1358; ROOT::RGeomDescription::IsBuildbool IsBuild() constDefinition RGeomData.hxx:373; ROOT::RGeomDescription::SetNSegmentsvoid SetNSegments(int n=0)S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:28658,reduce,reduced,28658,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,1,['reduce'],['reduced']
Energy Efficiency,"nSparseT<ArrayF>): bin content held by a Float_t,; THnSparseL (typedef for THnSparseT<ArrayL>): bin content held by a Long_t,; THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparse hs(""hs"", ""hs"", 2, bins, min, max);. * Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). * Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord).; After the call, coord will contain the bin coordinate of each axis for the bin; with linear index linidx. A possible call would be; cout << hs.GetBinContent(0, coord);; cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << endl;. * Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial hist/sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension. Using a THnSp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparse.html:1857,allocate,allocated,1857,root/html534/THnSparse.html,https://root.cern,https://root.cern/root/html534/THnSparse.html,2,['allocate'],['allocated']
Energy Efficiency,"nSparseT<ArrayF>): bin content held by a Float_t,; THnSparseL (typedef for THnSparseT<ArrayL>): bin content held by a Long_t,; THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension; the number of bins, the minimal, and the maximal value on the dimension's; axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to; Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparse hs(""hs"", ""hs"", 2, bins, min, max);. * Filling; A THnSparse is filled just like a regular histogram, using; THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value.; To take errors into account, Sumw2() must be called before filling the; histogram.; Bins are allocated as needed; the status of the allocation can be observed; by GetSparseFractionBins(), GetSparseFractionMem(). * Fast Bin Content Access; When iterating over a THnSparse one should only look at filled bins to save; processing time. The number of filled bins is returned by; THnSparse::GetNbins(); the bin content for each (linear) bin number can; be retrieved by THnSparse::GetBinContent(linidx, (Int_t*)coord).; After the call, coord will contain the bin coordinate of each axis for the bin; with linear index linidx. A possible call would be; std::cout << hs.GetBinContent(0, coord);; std::cout <<"" is the content of bin [x = "" << coord[0] ""; << "" | y = "" << coord[1] << ""]"" << std::endl;. * Efficiency; TH1 and TH2 are generally faster than THnSparse for one and two dimensional; distributions. THnSparse becomes competitive for a sparsely filled TH3; with large numbers of bins per dimension. The tutorial hist/sparsehist.C; shows the turning point. On a AMD64 with 8GB memory, THnSparse ""wins""; starting with a TH3 with 30 bins per dimension",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparse.html:1857,allocate,allocated,1857,root/html602/THnSparse.html,https://root.cern,https://root.cern/root/html602/THnSparse.html,4,['allocate'],['allocated']
Energy Efficiency,"nVector_exception;  ; class  GlobalCoordinateSystemTag;  Tag for identifying vectors based on a global coordinate system. More...;  ; class  GoFTest;  GoFTest class implementing the 1 sample and 2 sample goodness of fit tests for uni-variate distributions and data. More...;  ; class  GradFunctor;  GradFunctor class for Multidimensional gradient functions. More...;  ; class  GradFunctor1D;  GradFunctor1D class for one-dimensional gradient functions. More...;  ; class  GSL1DMinimizerWrapper;  wrapper class for gsl_min_fminimizer structure More...;  ; class  GSLChebSeries;  wrapper class for C struct gsl_cheb_series More...;  ; class  GSLDerivator;  Class for computing numerical derivative of a function based on the GSL numerical algorithm This class is implemented using the numerical derivatives algorithms provided by GSL (see GSL Online Manual ). More...;  ; class  GSLError;  class to change GSL Error handler to use ROOT one. More...;  ; class  GSLFunctionAdapter;  Class for adapting any C++ functor class to C function pointers used by GSL. More...;  ; class  GSLFunctionDerivWrapper;  class to wrap a gsl_function_fdf (with derivatives) More...;  ; class  GSLFunctionWrapper;  Wrapper class to the gsl_function C structure. More...;  ; class  GSLIntegrationWorkspace;  ; class  GSLIntegrator;  Class for performing numerical integration of a function in one dimension. More...;  ; class  GSLInterpolator;  Interpolation class based on GSL interpolation functions. More...;  ; class  GSLMCIntegrationWorkspace;  ; class  GSLMCIntegrator;  ; class  GSLMinimizer;  GSLMinimizer class. More...;  ; class  GSLMinimizer1D;  Minimizer for arbitrary one dimensional functions. More...;  ; class  GSLMiserIntegrationWorkspace;  Workspace for MISER. More...;  ; struct  GSLMonteFunctionAdapter;  ; class  GSLMonteFunctionWrapper;  wrapper to a multi-dim function withtout derivatives for Monte Carlo multi-dimensional integration algorithm More...;  ; class  GSLMultiFit;  GSLMultiFit, internal ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:9289,adapt,adapting,9289,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['adapt'],['adapting']
Energy Efficiency,"n_Code=262657);  re-create a new tree (decision tree or search tree) from XML ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::BinaryTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; Double_t SamplePurity (EventList eventSample);  calculates the purity S/(S+B) of a given event sample ;  . Private Attributes; Types::EAnalysisType fAnalysisType;  kClassification(=0=false) or kRegression(=1=true) ;  ; DataSetInfo * fDataSetInfo;  ; UInt_t fMaxDepth;  max depth ;  ; Double_t fMinLinCorrForFisher;  the minimum linear correlation between two variables demanded for use in fisher criterium in node splitting ;  ; Double_t fMinNodeSize;  min fraction of training events in node ;  ; Double_t fMinSepGain;  min number of separation gain to perform node splitting ;  ; Double_t fMinSize;  min number of events in node ;  ; TRandom3 * fMyTrandom;  random number generator for randomised trees ;  ; Int_t fNCuts;  number of grid point in variable cut scans ;  ; Int_t fNNodesBeforePruning;  remember this one (in case of pruning, it allows to monitor the before/after ;  ; Double_t fNodePurityLimit;  purity limit to decide whether a node is signal ;  ; UInt_t fNvars;  number of variables used to separate S and B ;  ; EPruneMethod fPruneMethod;  method used for pruning ;  ; Double_t fPruneStrength;  a parameter to set the ""amount"" of pruning..needs to be adjusted ;  ; Bool_t fRandomisedTree;  choose at each node splitting a random set of variables ;  ; RegressionVariance * fRegType;  the separation criteria used in Regression ;  ; SeparationBase * fSepType;  the separation criteria ;  ; UInt_t fSigClass;  class which is treated as signal when building the tree ;  ; Int_t fTreeID;  just an ID number given to the tree.. makes debugging easier as tree knows who he is. ;  ; Bool_t fUseExclusiveVars;  individual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:10835,monitor,monitor,10835,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,1,['monitor'],['monitor']
Energy Efficiency,"nadaptiveKDE, const TH1* hist = 0, Float_t lower_edge = 0., Float_t upper_edge = 1., TMVA::KDEKernel::EKernelBorder kborder = kNoTreatment, Float_t FineFactor = 1.); TMVA::KDEKernel&operator=(const TMVA::KDEKernel&); voidSetKernelType(TMVA::KDEKernel::EKernelType ktype = kGauss); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; public:. enum EKernelType { kNone; kGauss; };; enum EKernelIter { kNonadaptiveKDE; kAdaptiveKDE; };; enum EKernelBorder { kNoTreatment; kKernelRenorm; kSampleMirror; };. private:. Float_tfFineFactorfine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function; TH1F*fFirstIterHisthistogram to be filled in the hidden iteration; Bool_tfHiddenIterationDefines if whats currently running is the ; TH1F*fHistcopy of input histogram; TMVA::KDEKernel::EKernelIterfIteriteration number; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects; TF1*fKernel_integthe integral of the Kernel function; TMVA::MsgLogger*fLoggermessage logger; Float_tfLowerEdgethe lower edge of the PDF; Float_tfSigmaWidth of the Kernel function; TH1F*fSigmaHistcontains the Sigmas Widths for adaptive KDE ; Float_tfUpperEdgethe upper edge of the PDF. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; KDEKernel(TMVA::KDEKernel::EKernelIter kiter = kNonadaptiveKDE, const TH1* hist = 0, Float_t lower_edge = 0., Float_t upper_edge = 1., TMVA::KDEKernel::EKernelBorder kborder = kNoTreatment, Float_t FineFactor = 1.); constructor; sanity check. ~KDEKernel(); destructor. void SetKernelType(TMVA::KDEKernel::EKernelType ktype = kGauss); fIter == 1 ---> nonadaptive KDE; fIter == 2 ---> adaptive KDE. Float_t GetBinKernelIntegral(Float_t lowr, Float_t highr, Float_t mean, Int_t binnum); calculates the integral of the Kernel. KDEKernel(TMVA::KDEKernel::EKernel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__KDEKernel.html:1913,adapt,adaptive,1913,root/html534/TMVA__KDEKernel.html,https://root.cern,https://root.cern/root/html534/TMVA__KDEKernel.html,3,"['Adapt', 'adapt']","['Adaptive', 'adaptive']"
Energy Efficiency,"name are optional. If tree_name is missing,; the chain name will be assumed.; In the file name part (but not in preceding directories) wildcarding; notation may be used, eg. specifying ""xxx*.root"" adds all files starting; with xxx in the current file system directory.; NB. To add all the files of a TChain to a chain, use Add(TChain *chain). A- if nentries <= 0, the file is connected and the tree header read; in memory to get the number of entries. B- if (nentries > 0, the file is not connected, nentries is assumed to be; the number of entries in the file. In this case, no check is made that; the file exists and the Tree existing in the file. This second mode; is interesting in case the number of entries in the file is already stored; in a run data base for example. C- if (nentries == kBigNumber) (default), the file is not connected.; the number of entries in each file will be read only when the file; will need to be connected to read an entry.; This option is the default and very efficient if one process; the chain sequentially. Note that in case TChain::GetEntry(entry); is called and entry refers to an entry in the 3rd file, for example,; this forces the Tree headers in the first and second file; to be read to find the number of entries in these files.; Note that if one calls TChain::GetEntriesFast() after having created; a chain with this default, GetEntriesFast will return kBigNumber!; TChain::GetEntries will force of the Tree headers in the chain to be; read to read the number of entries in each Tree. D- The TChain data structure; Each TChainElement has a name equal to the tree name of this TChain; and a title equal to the file name. So, to loop over the; TFiles that have been added to this chain:. TObjArray *fileElements=chain->GetListOfFiles();; TIter next(fileElements);; TChainElement *chEl=0;; while (( chEl=(TChainElement*)next() )) {; TFile f(chEl->GetTitle());; ... do something with f ...; }. Return value:. If nentries>0 (including the default of kBigNumber",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TChain.html:29151,efficient,efficient,29151,root/html532/TChain.html,https://root.cern,https://root.cern/root/html532/TChain.html,2,['efficient'],['efficient']
Energy Efficiency,"name are optional. If tree_name is missing,; the chain name will be assumed.; In the file name part (but not in preceding directories) wildcarding; notation may be used, eg. specifying ""xxx*.root"" adds all files starting; with xxx in the current file system directory.; NB. To add all the files of a TChain to a chain, use Add(TChain *chain). A- if nentries <= 0, the file is connected and the tree header read; in memory to get the number of entries. B- if (nentries > 0, the file is not connected, nentries is assumed to be; the number of entries in the file. In this case, no check is made that; the file exists and the Tree existing in the file. This second mode; is interesting in case the number of entries in the file is already stored; in a run data base for example. C- if (nentries == kBigNumber) (default), the file is not connected.; the number of entries in each file will be read only when the file; will need to be connected to read an entry.; This option is the default and very efficient if one process; the chain sequentially. Note that in case TChain::GetEntry(entry); is called and entry refers to an entry in the 3rd file, for example,; this forces the Tree headers in the first and second file; to be read to find the number of entries in these files.; Note that if one calls TChain::GetEntriesFast() after having created; a chain with this default, GetEntriesFast will return kBigNumber!; TChain::GetEntries will force of the Tree headers in the chain to be; read to read the number of entries in each Tree. D- The TChain data structure; Each TChainElement has a name equal to the tree name of this TChain; and a title equal to the file name. So, to loop over the; TFiles that have been added to this chain:. TObjArray *fileElements=chain->GetListOfFiles();; TIter next(fileElements);; TChainElement *chEl=0;; while (( chEl=(TChainElement*)next() )) {; TFile f(chEl->GetTitle());; ... do something with f ...; }. The function returns the total number of files connected. Int_t A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TChain.html:27162,efficient,efficient,27162,root/html526/TChain.html,https://root.cern,https://root.cern/root/html526/TChain.html,3,['efficient'],['efficient']
Energy Efficiency,"name! hostname of MonaLisa server; Bool_tfInitializedtrue if initialized; TStringfJobId! job id; Double_tfLastFCloseSendTimeIn order not to flood ML servers; time_tfLastProgressTimetimestamp of the last send command for player process; Double_tfLastRWSendTimetimestamp of the last send command for file reads/writes; map<UInt_t,MonitoredTFileInfo*>*fMonInfoRepo! repo to gather per-file-instance mon info;; Int_tfPid! process id; Int_tfReportIntervalinterval after which to send the latest value; TStopwatchfStopwatchcpu and time measurement for job and proc status; TStringfSubJobId! sub job id; Bool_tfVerboseverbocity. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMonaLisaWriter(const char* monserver, const char* montag, const char* monid = 0, const char* monsubid = 0, const char* option = """"); Create MonaLisa write object. void Init(const char* monserver, const char* montag, const char* monid, const char* monsubid, const char* option); Creates a TMonaLisaWriter object to send monitoring information to a; MonaLisa server using the MonaLisa ApMon package (libapmoncpp.so/UDP; packets). The MonaLisa ApMon library for C++ can be downloaded at; http://monalisa.cacr.caltech.edu/monalisa__Download__ApMon.html,; current version:; http://monalisa.cacr.caltech.edu/download/apmon/ApMon_cpp-2.0.6.tar.gz. The ROOT implementation is primary optimized for process/job monitoring,; although all other generic MonaLisa ApMon functionality can be exploited; through the ApMon class directly (gMonitoringWriter->GetApMon()). Monitoring information in MonaLisa is structured in the following tree; structure:; <farmname>; |; ---> <nodename1>; |; ---> <key1> - <value1>; ---> <key2> - <value2>; ---> <nodename2>; |; ---> <key3> - <value3>; ---> <key4> - <value4>. The parameter monid is equivalent to the MonaLisa node name, for the; case of process monitoring it can be just an identifier to classify; the type of jobs e.g. ""PROOF_PROCESSING"".; If monid is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMonaLisaWriter.html:9478,monitor,monitoring,9478,root/html530/TMonaLisaWriter.html,https://root.cern,https://root.cern/root/html530/TMonaLisaWriter.html,3,['monitor'],['monitoring']
Energy Efficiency,"namePtr () const;  De-duplicated pointer to this object's name. ;  ; virtual Int_t numEntries () const;  Return number of entries in dataset, i.e., count unweighted entries. ;  ; RooAbsData & operator= (const RooAbsData &other);  ; void Print (Option_t *options=nullptr) const override;  This method must be overridden when a class wants to print itself. ;  ; void printClassName (std::ostream &os) const override;  Print class name of dataset. ;  ; void printName (std::ostream &os) const override;  Print name of dataset. ;  ; void printTitle (std::ostream &os) const override;  Print title of dataset. ;  ; void RecursiveRemove (TObject *obj) override;  If one of the TObject we have a referenced to is deleted, remove the reference. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const char *cut) const;  Create a subset of the data set by applying the given cut on the data points. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooArgSet &varSubset, const char *cut=nullptr) const;  Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooArgSet &varSubset, const RooFormulaVar &cutVar) const;  Create a subset of the data set by applying the given cut on the data points and reducing the dimensions to the specified set. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create a reduced copy of this dataset. ;  ; RooFit::OwningPtr< RooAbsData > reduce (const RooFormulaVar &cutVar) const;  Create a subset of the data set by applying the given cut on the data points. ;  ; void resetBuffers ();  ; RooRealVar * rmsVar (const RooRealVar &var, const char *cutSpec=nullptr, const char *cutRange=nullptr) const;  Create a RooRealVar containing the RMS of observ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataHist.html:18478,reduce,reduce,18478,doc/master/classRooDataHist.html,https://root.cern,https://root.cern/doc/master/classRooDataHist.html,1,['reduce'],['reduce']
Energy Efficiency,"namely ""1111""; std::cout << TString::Itoa(15,2) ;; std::cout << TString::Itoa(0xF,2) ; /// 0x prefix to handle hex; std::cout << TString::Itoa(017,2) ; /// 0 prefix to handle oct; In case of error returns the ""!"" string. TString UItoa(UInt_t value, Int_t base); Converts a UInt_t (twice the range of an Int_t) to a TString with respect; to the base specified (2-36). Thus it is an enhanced version of sprintf; (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html).; In case of error returns the ""!"" string. TString LLtoa(Long64_t value, Int_t base); Converts a Long64_t to a TString with respect to the base specified (2-36).; Thus it is an enhanced version of sprintf (adapted from versions 0.4 of; http://www.jb.man.ac.uk/~slowe/cpp/itoa.html).; In case of error returns the ""!"" string. TString ULLtoa(ULong64_t value, Int_t base); Converts a ULong64_t (twice the range of an Long64_t) to a TString with; respect to the base specified (2-36). Thus it is an enhanced version of; sprintf (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html).; In case of error returns the ""!"" string. TString BaseConvert(const TString& s_in, Int_t base_in, Int_t base_out); Converts string from base base_in to base base_out. Supported bases; are 2-36. At most 64 bit data can be converted. Bool_t EndsWith(const char* pat, TString::ECaseCompare cmp = kExact) const; Return true if string ends with the specified string. TObjArray * Tokenize(const TString& delim) const; This function is used to isolate sequential tokens in a TString.; These tokens are separated in the string by at least one of the; characters in delim. The returned array contains the tokens; as TObjString's. The returned array is the owner of the objects,; and must be deleted by the user. void FormImp(const char* fmt, va_list ap); Formats a string using a printf style format descriptor.; Existing string contents will be overwritten. void Form(const char *va_(fmt), ...); Formats a string using a p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TString.html:19494,adapt,adapted,19494,root/html602/TString.html,https://root.cern,https://root.cern/root/html602/TString.html,4,['adapt'],['adapted']
Energy Efficiency,"napsesarray of pointers to synapses, no structural data; boolTMVA::MethodANNBase::fUseRegulatorzjh; TRandom3*TMVA::MethodANNBase::frgenrandom number generator for various uses. private:. TMVA::MethodMLP::EBPTrainingModefBPModebackprop learning mode (sequential or batch); Int_tfBatchSizebatch size, only matters if in batch learning mode; TStringfBpModeSbackprop learning mode option string (sequential or batch); boolfCalculateErrorscompute inverse hessian matrix at the end of the training; Double_tfDecayRatedecay rate for above learning rate; Bool_tfEpochMoncreate and fill epoch-wise monitoring histograms (makes outputfile big!); Double_tfGA_SC_factorGA settings: SC_factor; Int_tfGA_SC_rateGA settings: SC_rate; Int_tfGA_SC_stepsGA settings: SC_steps; Int_tfGA_nstepsGA settings: number of steps; Int_tfGA_preCalcGA settings: number of pre-calc steps; Double_tfLastAlphaline search variable; Double_tfLearnRatelearning rate for synapse weight adjustments; Double_tfPriorzjh; vector<Double_t>fPriorDevzjh; Int_tfResetStepreset time (how often we clear hessian matrix); Float_tfSamplingEpochfraction of epochs where sampling is used; Float_tfSamplingFractionfraction of events which is sampled for training; Bool_tfSamplingTestingThe testing sample is sampled; Bool_tfSamplingTrainingThe training sample is sampled; Float_tfSamplingWeightchanging factor for event weights when sampling is turned on; Double_tfTauline search variable; Int_tfTestRatetest for overtraining performed at each #th epochs; TStringfTrainMethodStraining method option param; TMVA::MethodMLP::ETrainingMethodfTrainingMethodmethod of training, BP or GA; Int_tfUpdateLimitzjh; boolfUseRegulatorzjh; static const Bool_tfgPRINT_BATCHdebug flags; static const Int_tfgPRINT_ESTIMATOR_INCdebug flags; static const Bool_tfgPRINT_SEQdebug flags. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodMLP(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodMLP.html:20425,monitor,monitoring,20425,root/html528/TMVA__MethodMLP.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodMLP.html,1,['monitor'],['monitoring']
Energy Efficiency,"nates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar& a) const; LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<Double32_t> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect() const; TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html:15538,energy,energy,15538,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzE4D_Double32_t___.html,1,['energy'],['energy']
Energy Efficiency,"nates.Mt(); }. Scalar Et2() const. return the transverse energy squared; \f[ e_t = \frac{E^2 p_{\perp}^2 }{ |p|^2 } \f]. { return fCoordinates.Et2(); }. Scalar Et() const. return the transverse energy; \f[ e_t = \sqrt{ \frac{E^2 p_{\perp}^2 }{ |p|^2 } } X sign(E) \f]. { return fCoordinates.Et(); }. Scalar Phi() const. azimuthal Angle. { return fCoordinates.Phi();}. Scalar Theta() const. polar Angle. { return fCoordinates.Theta(); }. Scalar Eta() const. pseudorapidity; \f[ \eta = - \ln { \tan { \frac { \theta} {2} } } \f]. { return fCoordinates.Eta(); }. return operator*(const ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar& a) const; LorentzVector<CoordinateType> v(*this);; v.Negate();. Scalar Rapidity() const; ---- Relativistic Properties ----. Rapidity relative to the Z axis: .5 log [(E+Pz)/(E-Pz)]. Scalar ColinearRapidity() const. Rapidity in the direction of travel: atanh (|P|/E)=.5 log[(E+P)/(E-P)]. bool isTimelike() const. Determine if momentum-energy can represent a physical massive particle. bool isLightlike(ROOT::Math::LorentzVector<ROOT::Math::PxPyPzM4D<Double32_t> >::Scalar tolerance = 100*std::numeric_limits<Scalar>::epsilon()) const. Determine if momentum-energy can represent a massless particle. bool isSpacelike() const. Determine if momentum-energy is spacelike, and represents a tachyon. BetaVector BoostToCM() const. The beta vector for the boost that would bring this vector into; its center of mass frame (zero momentum). return - Vect() const; TODO - should attempt to Throw with msg about; boostVector computed for LorentzVector with t=0. Scalar Beta() const; beta and gamma. Return beta scalar value. Scalar Gamma() const. Return Gamma scalar value. Scalar x() const; Method providing limited backward name compatibility with CLHEP ----. { return fCoordinates.Px(); }. Scalar y() const; { return fCoordinates.Py(); }. Scalar z() const; { return fCoordinates.Pz(); }. Scalar t() const; { return fCoordinates.E(); }. Scalar px() const; { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html:15538,energy,energy,15538,root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__LorentzVector_-p1PxPyPzM4D_Double32_t___.html,1,['energy'],['energy']
Energy Efficiency,"nbins,xmin,xmax);; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; back=(TH1F*) f->Get(""back1;1"");; TCanvas *Background = gROOT->GetListOfCanvases()->FindObject(""Background"");; if (!Background) Background =; new TCanvas(""Background"",""Estimation of background with decreasing window"",; 10,10,1000,700);; back->Draw(""L"");; TSpectrum *s = new TSpectrum();; for (i = 0; i < nbins; i++) source[i]=back->GetBinContent(i + 1);; s->Background(source,nbins,6,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }. Example 3 script Background_width.c:. The question is how to choose the width of the clipping window, i.e.,; numberIterations parameter. The influence of this parameter on the estimated; background is illustrated in Figure 3. Figure 3 Example of the influence of clipping window width on the estimated; background for numberIterations=4 (red line), 6 (blue line) 8 (green line) using; decreasing clipping window algorithm. in general one should set this parameter so that the value; 2*numberIterations+1 was greater than the widths of preserved objects (peaks). Script:. // Example to illustrate the influence of the clipping window width on the; // estimated background. To execute this example, do:; // root > .x Background_width.C; #include ; void Background_width() {; Int_t i;; Double_t nbins = 256;; Double_t xmin = 0;; Double_t xmax = (Double_t)nbins;; Float_t * source = new float[nbins];; TH1F *h = new TH1F(""h"","""",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""back1;1"");; TCanvas *background = gROOT->GetListOfCanvases()->FindObject(""background"");; if (!background) background = new TCanvas(""background"",; ""Influence of clipping win",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum.html:18378,green,green,18378,root/html528/TSpectrum.html,https://root.cern,https://root.cern/root/html528/TSpectrum.html,6,['green'],['green']
Energy Efficiency,"nbins,xmin,xmax);; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; back=(TH1F*) f->Get(""back1;1"");; TCanvas *Background = gROOT->GetListOfCanvases()->FindObject(""Background"");; if (!Background) Background =; new TCanvas(""Background"",""Estimation of background with decreasing window"",; 10,10,1000,700);; back->Draw(""L"");; TSpectrum *s = new TSpectrum();; for (i = 0; i < nbins; i++) source[i]=back->GetBinContent(i + 1);; s->Background(source,nbins,6,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }. Example 3 script Background_width.c:. The question is how to choose the width of the clipping window, i.e.,; numberIterations parameter. The influence of this parameter on the estimated; background is illustrated in Figure 3. Figure 3 Example of the influence of clipping window width on the estimated; background for numberIterations=4 (red line), 6 (blue line) 8 (green line) using; decreasing clipping window algorithm. in general one should set this parameter so that the value; 2*numberIterations+1 was greater than the widths of preserved objects (peaks). Script:. // Example to illustrate the influence of the clipping window width on the; // estimated background. To execute this example, do:; // root > .x Background_width.C; #include ; void Background_width() {; Int_t i;; Double_t nbins = 256;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; TH1F *h = new TH1F(""h"","""",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""back1;1"");; TCanvas *background = gROOT->GetListOfCanvases()->FindObject(""background"");; if (!background) background = new TCanvas(""background"",; ""Influence of clipping window wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum.html:19565,green,green,19565,root/html602/TSpectrum.html,https://root.cern,https://root.cern/root/html602/TSpectrum.html,4,['green'],['green']
Energy Efficiency,"nbits], nbits is the number of bits used for the mantissa. see example of use of the Double32_t data type in tutorial double32.C. /*; ; */. Int_t ReadArray(Bool_t *&b); Read array of bools from the I/O buffer. Returns the number of; bools read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Char_t *&c); Read array of characters from the I/O buffer. Returns the number of; characters read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Short_t *&h); Read array of shorts from the I/O buffer. Returns the number of shorts; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Int_t *&ii); Read array of ints from the I/O buffer. Returns the number of ints; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long_t *&ll); Read array of longs from the I/O buffer. Returns the number of longs; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Long64_t *&ll); Read array of long longs from the I/O buffer. Returns the number of; long longs read. If argument is a 0 pointer then space will be; allocated for the array. Int_t ReadArray(Float_t *&f); Read array of floats from the I/O buffer. Returns the number of floats; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArray(Double_t *&d); Read array of doubles from the I/O buffer. Returns the number of doubles; read. If argument is a 0 pointer then space will be allocated for the; array. Int_t ReadArrayFloat16(Float_t*& f, TStreamerElement* ele = 0); Read array of floats (written as truncated float) from the I/O buffer.; Returns the number of floats read.; If argument is a 0 pointer then space will be allocated for the array.; see comments about Float16_t encoding at TBufferFile::WriteFloat16. Int_t ReadArrayDouble32(Double_t*& d, TStreamerElement* ele = 0); Read array of doubles (written a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBufferFile.html:26196,allocate,allocated,26196,root/html526/TBufferFile.html,https://root.cern,https://root.cern/root/html526/TBufferFile.html,1,['allocate'],['allocated']
Energy Efficiency,"nc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms can be used, for example sorting: RVec<double> v{6., 4., 5.};; std::sort(v.begin(), v.end());; v@ vDefinition rootcling_impl.cxx:3687; For convenience, helpers are provided too: auto sorted_v = Sort(v);; auto reversed_v = Reverse(v);; ROOT::VecOps::ReverseRVec< T > Reverse(const RVec< T > &v)Return copy of reversed vector.Definition RVec.hxx:2481; ROOT::VecOps::SortRVec< T > Sort(const RVec< T > &v)Return copy of RVec with elements sorted in ascending order.Definition RVec.hxx:2502. Manipulation of indices; It is also possible to manipulated the RVecs acting on their indices. For example, the following syntax RVecD v0 {9., 7., 8.};; auto v1 = Take(v0, {1, 2, 0});; ROOT::VecOps::TakeRVec< T > Take(const RVec< T > &v, const RVec< typename RVec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:5150,allocate,allocated,5150,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,1,['allocate'],['allocated']
Energy Efficiency,"nc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is available, the following functions can be invoked. Internally the calculations are vectorized:; fast_expf, fast_logf, fast_sinf, fast_cosf, fast_tanf, fast_asinf, fast_acosf, fast_atanf; fast_exp, fast_log, fast_sin, fast_cos, fast_tan, fast_asin, fast_acos, fast_atan. Owning and adopting memory; RVec has contiguous memory associated to it. It can own it or simply adopt it. In the latter case, it can be constructed with the address of the memory associated to it and its length. For example: std::vector<int> myStlVec {1,2,3};; RVec<int> myRVec(myStlVec.data(), myStlVec.size());; In this case, the memory associated to myStlVec and myRVec is the same, myRVec simply ""adopted it"". If any method which implies a re-allocation is called, e.g. emplace_back or resize, the adopted memory is released and new one is allocated. The previous content is copied in the new memory and preserved. Sorting and manipulation of indices. Sorting; RVec complies to the STL interfaces when it comes to iterations. As a result, standard algorithms can be used, for example sorting: RVec<double> v{6., 4., 5.};; std::sort(v.begin(), v.end());; v@ vDefinition rootcling_impl.cxx:3699; For convenience, helpers are provided too: auto sorted_v = Sort(v);; auto reversed_v = Reverse(v);; ROOT::VecOps::ReverseRVec< T > Reverse(const RVec< T > &v)Return copy of reversed vector.Definition RVec.hxx:2481; ROOT::VecOps::SortRVec< T > Sort(const RVec< T > &v)Return copy of RVec with elements sorted in ascending order.Definition RVec.hxx:2502. Manipulation of indices; It is also possible to manipulated the RVecs acting on their indices. For example, the following syntax RVecD v0 {9., 7., 8.};; auto v1 = Take(v0, {1, 2, 0});; ROOT::VecOps::TakeRVec< T > Take(const RVec< T > &v, const RVec< typename RVec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html:5151,allocate,allocated,5151,doc/master/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html,1,['allocate'],['allocated']
Energy Efficiency,"nc_t GetStreamerFunc() constGet a wrapper/accessor function around this class custom streamer (member function).Definition TClass.cxx:2939; TClass::RemoveStreamerInfovoid RemoveStreamerInfo(Int_t slot)Remove and delete the StreamerInfo in the given slot.Definition TClass.cxx:7320; TClass::SetCanSplitvoid SetCanSplit(Int_t splitmode)Set the splitability of this class:Definition TClass.cxx:5658; TClass::CreateListOfDataMembersTList * CreateListOfDataMembers(std::atomic< TListOfDataMembers * > &data, TDictionary::EMemberSelection selection, bool load)Create the list containing the TDataMembers (of actual data members or members pulled in through usin...Definition TClass.cxx:3741; TClass::GetStreamerInfoAbstractEmulatedTVirtualStreamerInfo * GetStreamerInfoAbstractEmulated(Int_t version=0) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4709; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:4978; TClass::SetMergevoid SetMerge(ROOT::MergeFunc_t mergeFunc)Install a new wrapper around 'Merge'.Definition TClass.cxx:6969; TClass::fConversionStreamerInfoConvSIMap_t fConversionStreamerInfoDefinition TClass.h:199; TClass::fDirAutoAddROOT::DirAutoAdd_t fDirAutoAddDefinition TClass.h:240; TClass::HasDataMemberInfoBool_t HasDataMemberInfo() constDefinition TClass.h:407; TClass::fRefProxyTVirtualRefProxy * fRefProxycached streamer info used in the last read.Definition TClass.h:280; TClass::GetMenuListTList * GetMenuList() constReturn the list of menu items associated with the class.Definition TClass.cxx:4341; TClass::fMergeROOT::MergeFunc_t fMergesaved info to call a IsA member functionDefinition TClass.h:233; TClass::GetMethodTMethod * GetMethod(const char *method, const char *params, Bool_t objectIsConst=kFALSE)Find the best method (if there is one) matching the parameters.Definition T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:311919,allocate,allocated,311919,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"nc_t GetStreamerFunc() constGet a wrapper/accessor function around this class custom streamer (member function).Definition TClass.cxx:3006; TClass::RemoveStreamerInfovoid RemoveStreamerInfo(Int_t slot)Remove and delete the StreamerInfo in the given slot.Definition TClass.cxx:7387; TClass::SetCanSplitvoid SetCanSplit(Int_t splitmode)Set the splitability of this class:Definition TClass.cxx:5725; TClass::CreateListOfDataMembersTList * CreateListOfDataMembers(std::atomic< TListOfDataMembers * > &data, TDictionary::EMemberSelection selection, bool load)Create the list containing the TDataMembers (of actual data members or members pulled in through usin...Definition TClass.cxx:3808; TClass::GetStreamerInfoAbstractEmulatedTVirtualStreamerInfo * GetStreamerInfoAbstractEmulated(Int_t version=0) constFor the case where the requestor class is emulated and this class is abstract, returns a pointer to t...Definition TClass.cxx:4776; TClass::Newvoid * New(ENewType defConstructor=kClassNew, Bool_t quiet=kFALSE) constReturn a pointer to a newly allocated object of this class.Definition TClass.cxx:5045; TClass::SetMergevoid SetMerge(ROOT::MergeFunc_t mergeFunc)Install a new wrapper around 'Merge'.Definition TClass.cxx:7036; TClass::fConversionStreamerInfoConvSIMap_t fConversionStreamerInfoDefinition TClass.h:199; TClass::fDirAutoAddROOT::DirAutoAdd_t fDirAutoAddDefinition TClass.h:240; TClass::HasDataMemberInfoBool_t HasDataMemberInfo() constDefinition TClass.h:407; TClass::fRefProxyTVirtualRefProxy * fRefProxycached streamer info used in the last read.Definition TClass.h:280; TClass::GetMenuListTList * GetMenuList() constReturn the list of menu items associated with the class.Definition TClass.cxx:4408; TClass::fMergeROOT::MergeFunc_t fMergesaved info to call a IsA member functionDefinition TClass.h:233; TClass::GetMethodTMethod * GetMethod(const char *method, const char *params, Bool_t objectIsConst=kFALSE)Find the best method (if there is one) matching the parameters.Definition T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:314557,allocate,allocated,314557,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"nce for all code required to be generated up to that point, also across different computation graphs.; Also make sure not to count the just-in-time compilation time (which happens once before the event loop and does not depend on the size of the dataset) as part of the event loop runtime (which scales with the size of the dataset). RDataFrame has an experimental logging feature that simplifies measuring the time spent in just-in-time compilation and in the event loop (as well as providing some more interesting information). See Activating RDataFrame execution logs. Memory usage; There are two reasons why RDataFrame may consume more memory than expected. Firstly, each result is duplicated for each worker thread, which e.g. in case of many (possibly multi-dimensional) histograms with fine binning can result in visible memory consumption during the event loop. The thread-local copies of the results are destroyed when the final result is produced. Reducing the number of threads or using coarser binning will reduce the memory usage.; Secondly, just-in-time compilation of string expressions or non-templated actions (see the previous paragraph) causes Cling, ROOT's C++ interpreter, to allocate some memory for the generated code that is only released at the end of the application. This commonly results in memory usage creep in long-running applications that create many RDataFrames one after the other. Possible mitigations include creating and running each RDataFrame event loop in a sub-process, or booking all operations for all different RDataFrame computation graphs before the first event loop is triggered, so that the interpreter is invoked only once for all computation graphs:; // assuming df1 and df2 are separate computation graphs, do:; auto h1 = df1.Histo1D(""x"");; auto h2 = df2.Histo1D(""y"");; h1->Draw(); // we just-in-time compile everything needed by df1 and df2 here; h2->Draw(""SAME"");; ; // do not:; auto h1 = df1.Histo1D(""x"");; h1->Draw(); // we just-in-time compile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:51316,reduce,reduce,51316,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,2,['reduce'],['reduce']
Energy Efficiency,"nce the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t SendObject(const TObject* obj, TProof::ESlaves list = kActive); Send object to master or slave servers. Returns number of slaves object; was sent to, -1 in case of error. Int_t SendPrint(Option_t* option = """"); Send print command to master server. Returns number of slaves message; was sent to. Returns -1 in case of error. void SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); Set server logging level. void SetRealTimeLog(Bool_t on = kTRUE); Switch ON/OFF the real-time logging facility. When this option is; ON, log messages from processing are sent back as they come, instead of; being sent back at the end in one go. This may help debugging or monitoring; in some cases, but, depending on the amount of log, it may have significant; consequencies on the load over the network, so it must be used with care. Int_t SetParallelSilent(Int_t nodes, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. If random is TRUE a random; selection is done (if nodes is less than the available nodes).; Returns the number of parallel slaves. Returns -1 in case of error. Int_t SetParallel(Int_t nodes = 9999, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. Returns the number of; parallel slaves. Returns -1 in case of error. Int_t GoParallel(Int_t nodes, Bool_t accept = kFALSE, Bool_t random = kFALSE); Go in parallel mode with at most ""nodes"" slaves. Since the fSlaves; list is sorted by slave performace the active list will contain first; the most performant nodes. Returns the number of active slaves.; If random is TRUE, and nodes is less than the number of available workers,; a random selection is done.; Returns -1 in case of error. void ShowData(); List contents of the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:57869,monitor,monitoring,57869,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,4,['monitor'],['monitoring']
Energy Efficiency,"nced objects at each Tree::Fill, the branch numbers containing the referenced objects are saved in the table of references. When the Tree header is saved (via TTree::Write for example), the branch is saved, keeping the information with the pointers to the branches having referenced objects. Enabling this optional table, allow TTree::Draw to automatically load the branches needed to dereference a TRef (or TRefArray) object.; 12.7.3 Autosave; Autosave gives the option to save all branch buffers every n byte. We recommend using Autosave for large acquisitions. If the acquisition fails to complete, you can recover the file and all the contents since the last Autosave. To set the number of bytes between Autosave you can use the TTree::SetAutosave() method. You can also call TTree::Autosave in the acquisition loop every nentry.; 12.7.4 Trees with Circular Buffers; When a TTree is memory resident, you set it up so that it retains retain only the last few entries. For example, this can be very useful for monitoring purpose.; void TTree::SetCircular(Long64_t maxEntries);; where maxEntries is the maximum number of entries to be kept in the buffers. When the number of entries exceeds this value, the first entries in the Tree are deleted and the buffers used again. An example of a script using a circular buffer is shown below:; void circular() {; gROOT->cd(); //make sure that the Tree is memory resident; TTree *T = new TTree(""T"",""test circular buffers"");; TRandom r;; Float_t px,py,pz;; Double_t random;; UShort_t i;; T->Branch(""px"",&px,""px/F"");; T->Branch(""py"",&py,""py/F"");; T->Branch(""pz"",&pz,""pz/F"");; T->Branch(""random"",&random,""random/D"");; T->Branch(""i"",&i,""i/s"");; T->SetCircular(20000);; for (i = 0; i < 65000; i++) {; r.Rannor(px,py);; pz = px*px + py*py;; random = r.Rndm();; T->Fill();; }; T->Print();; }; 12.7.5 Size of TTree in the File; When writing a TTree to a file, if the file size reaches the value stored in the TTree::GetMaxTreeSize(), the current file is closed and a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:532581,monitor,monitoring,532581,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['monitor'],['monitoring']
Energy Efficiency,"ncludes; Libraries. Function documentation; TGeoHelix(); Dummy constructor. TGeoHelix(Double_t curvature, Double_t step, Int_t charge = 1); Normal constructor. ~TGeoHelix(); Destructor. Double_t ComputeSafeStep(Double_t epsil = 1E-6) const; Compute safe linear step that can be made such that the error; between linear-helix extrapolation is less than EPSIL. void InitPoint(Double_t x0, Double_t y0, Double_t z0); Initialize coordinates of a point on the helix. void InitPoint(Double_t* point); Set initial point on the helix. void InitDirection(Double_t dirx, Double_t diry, Double_t dirz, Bool_t is_normalized = kTRUE); Initialize particle direction (tangent on the helix in initial point). void InitDirection(Double_t* dir, Bool_t is_normalized = kTRUE); Initialize particle direction (tangent on the helix in initial point). Double_t GetTotalCurvature() const; Compute helix total curvature. void SetXYcurvature(Double_t curvature); Set XY curvature: c = 1/Rxy. void SetCharge(Int_t charge); Positive charge means left-handed helix. void SetField(Double_t bx, Double_t by, Double_t bz, Bool_t is_normalized = kTRUE); Initialize particle direction (tangent on the helix in initial point). void SetHelixStep(Double_t hstep); Set Z step of the helix on a complete turn. Positive or null. void ResetStep(); Reset current point/direction to initial values. void Step(Double_t step); Make a step from current point along the helix and compute new point, direction and angle; To reach a plane/ shape boundary, one has to:; 1. Compute the safety to the plane/boundary; 2. Define / update a helix according local field and particle state (position, direction, charge); 3. Compute the magnetic safety (maximum distance for which the field can be considered constant); 4. Call TGeoHelix::Step() having as argument the minimum between 1. and 3.; 5. Repeat from 1. until the step to be made is small enough.; 6. Add to the total step the distance along a straigth line from the last point; to the plane/shape b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoHelix.html:8467,charge,charge,8467,root/html528/TGeoHelix.html,https://root.cern,https://root.cern/root/html528/TGeoHelix.html,12,['charge'],['charge']
Energy Efficiency,"ncolors); 3020{; 3021 for (int i = 0; i < ncolors; i++); 3022 if (pixel == orgcolors[i]) return i;; 3023 ; 3024 Error(""FindColor"", ""did not find color, should never happen!"");; 3025 ; 3026 return 0;; 3027}; 3028 ; 3029////////////////////////////////////////////////////////////////////////////////; 3030/// Set color intensities for given color index.; 3031///; 3032/// \param [in] cindex : color index; 3033/// \param [in] r,g,b : red, green, blue intensities between 0.0 and 1.0; 3034 ; 3035void TGX11::SetRGB(int cindex, float r, float g, float b); 3036{; 3037 if (fColormap) {; 3038 RXColor xcol;; 3039 xcol.red = (UShort_t)(r * kBIGGEST_RGB_VALUE);; 3040 xcol.green = (UShort_t)(g * kBIGGEST_RGB_VALUE);; 3041 xcol.blue = (UShort_t)(b * kBIGGEST_RGB_VALUE);; 3042 xcol.flags = DoRed | DoGreen | DoBlue;; 3043 XColor_t &col = GetColor(cindex);; 3044 if (col.fDefined) {; 3045 // if color is already defined with same rgb just return; 3046 if (col.fRed == xcol.red && col.fGreen == xcol.green &&; 3047 col.fBlue == xcol.blue); 3048 return;; 3049 col.fDefined = kFALSE;; 3050 if (fRedDiv == -1); 3051 XFreeColors((Display*)fDisplay, fColormap, &col.fPixel, 1, 0);; 3052 }; 3053 if (AllocColor(fColormap, &xcol)) {; 3054 col.fDefined = kTRUE;; 3055 col.fPixel = xcol.pixel;; 3056 col.fRed = xcol.red;; 3057 col.fGreen = xcol.green;; 3058 col.fBlue = xcol.blue;; 3059 }; 3060 }; 3061}; 3062 ; 3063////////////////////////////////////////////////////////////////////////////////; 3064/// Set text alignment.; 3065///; 3066/// \param [in] talign text alignment; 3067 ; 3068void TGX11::SetTextAlign(Short_t talign); 3069{; 3070 Int_t txalh = talign/10;; 3071 Int_t txalv = talign%10;; 3072 fTextAlignH = txalh;; 3073 fTextAlignV = txalv;; 3074 ; 3075 switch (txalh) {; 3076 ; 3077 case 0 :; 3078 case 1 :; 3079 switch (txalv) { //left; 3080 case 1 :; 3081 fTextAlign = 7; //bottom; 3082 break;; 3083 case 2 :; 3084 fTextAlign = 4; //center; 3085 break;; 3086 case 3 :; 3087 fTextAlign = 1; //top; 3088 b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:101693,green,green,101693,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"nction& f); voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); voidSetRelTolerance(double relTol); intStatus() const. protected:. ROOT::Math::VirtualIntegratorMultiDim*CreateIntegrator(ROOT::Math::IntegrationMultiDim::Type type, double absTol, double relTol, unsigned int ncall). private:. ROOT::Math::IntegratorMultiDimIntegratorMultiDim(const ROOT::Math::IntegratorMultiDim&); ROOT::Math::IntegratorMultiDim&operator=(const ROOT::Math::IntegratorMultiDim&). Data Members; private:. auto_ptr<ROOT::Math::IBaseFunctionMultiDim>fFuncpointer to owned function; ROOT::Math::VirtualIntegratorMultiDim*fIntegratorpointer to multi-dimensional integrator base class. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; IntegratorMultiDim(ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic constructor of multi dimensional Integrator. By default uses the Adaptive integration method. @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param size maximum number of sub-intervals. In case no parameter values are passed the default ones used in IntegratorMultiDimOptions are used. IntegratorMultiDim(const ROOT::Math::IMultiGenFunction& f, ROOT::Math::IntegrationMultiDim::Type type = IntegrationMultiDim::kDEFAULT, double absTol = 0, double relTol = 0, unsigned int ncall = 0); Generic Constructor of multi dimensional Integrator passing a function. By default uses the adaptive integration method. @param f integration function (multi-dim interface); @param type integration type (adaptive, MC methods, etc..); @param absTol desired absolute Error; @param relTol desired relative Error; @param ncall number of function calls (apply only to MC integratioon methods). SetFunction(const ROOT::Math::IMultiGenFunction& f). virtual ~IntegratorMultiDim(); remove template constru",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__IntegratorMultiDim.html:2685,Adapt,Adaptive,2685,root/html532/ROOT__Math__IntegratorMultiDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__IntegratorMultiDim.html,2,['Adapt'],['Adaptive']
Energy Efficiency,"nction.; The RooFFTConvPdf uses caching inherited from a RooAbsCachedPdf. If it is evaluated for a particular value of x, the FFT and convolution is calculated for all bins in the observable space for the given choice of parameters, which are also stored in the cache. Subsequent evaluations for different values of the convolution observable and identical parameters will be retrieved from the cache. If one or more of the parameters change, the cache will be updated, i.e., a new FFT runs.; The sampling density of the FFT is controlled by the binning of the the convolution observable, which can be changed using RooRealVar::setBins(N). For good results, N should be large (>=1000). Additional interpolation between the bins may improve the result if coarse binnings are chosen. These can be activated in the constructor or by calling setInterpolationOrder(). For N >> 1000, interpolation will not substantially improve the accuracy.; Additionial information on caching can be displayed by monitoring the message stream with topic ""Caching"" at the INFO level, i.e. by calling RooMsgService::instance().addStream(RooMsgService::INFO,Topic(""Caching"")) to see these message on stdout.; Multi-dimensional convolutions are not supported at the moment. Installing an external version of FFTW on Linux and compiling ROOT to use it; You have two options:; Recommended: ROOT can automatically install FFTW for itself, see builtin_fftw3 at https://root.cern/building-root; Install FFTW and let ROOT discover it. fftw3 is on by default (see https://root.cern/building-root). 1) Go to www.fftw.org and download the latest stable version (a .tar.gz file); If you have root access to your machine and want to make a system installation of FFTW; 2) Untar fftw-XXX.tar.gz in /tmp, cd into the untarred directory and type './configure' followed by 'make install'. This will install fftw in /usr/local/bin,lib etc...; 3) Start from a source installation of ROOT. ROOT should discover it. See https://root.cern/buildi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFFTConvPdf.html:3485,monitor,monitoring,3485,doc/master/classRooFFTConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooFFTConvPdf.html,1,['monitor'],['monitoring']
Energy Efficiency,"nctionDefinition NeuralNet.h:697; TMVA::DNN::Layer::LayerLayer(size_t numNodes, EnumFunction activationFunction, ModeOutputValues eModeOutputValues=ModeOutputValues::DIRECT)c'tor for defining a LayerDefinition NeuralNet.cxx:166; TMVA::DNN::Net::m_layersstd::vector< Layer > m_layerslayer-structure-dataDefinition NeuralNet.h:1272; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::numNodessize_t numNodes(size_t trainingStartLayer=0) constreturns the number of nodes in this netDefinition NeuralNet.cxx:556; TMVA::DNN::Net::fillDropContainervoid fillDropContainer(DropContainer &dropContainer, double dropFraction, size_t numNodes) constprepare the drop-out-container (select the nodes which are to be dropped out)Definition NeuralNet.cxx:572; TMVA::DNN::Net::numWeightssize_t numWeights(size_t trainingStartLayer=0) constreturns the number of weights in this netDefinition NeuralNet.cxx:540; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::SettingsSettings(TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, TMVA::DNN::EnumRegularization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true)c'torDefinition NeuralNet.cxx:232; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_minErrordouble m_minErrorDefinition NeuralNet.h:859; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:26852,monitor,monitoringDefinition,26852,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,1,['monitor'],['monitoringDefinition']
Energy Efficiency,"nctions to work on array of data (e.g. mean and RMS of arrays);; algorithms for binary search/hashing sorting;; special mathematical functions like Bessel, Erf, Gamma, etc.;; statistical functions, like common probability and cumulative (quantile) distributions; geometrical functions. For more details, see the reference documentation of TMath at <http://root.cern.ch/root/htmldoc/TMath.html>.; 13.3.1 Numerical Constants; TMath offers a wide range of constants in the form of inline functions. Notice that they are not defined as C/C++ preprocessor macros. This set of functions includes one or more definitions for the following constants:. Pi.; Base of natural logarithm.; Velocity of light.; Gravitational constant (G).; Standard acceleration of gravity (g).; Standard acceleration of Gravity.; Plank’s contant.; Boltzmann’s and Steffan-Boltzmann’s constants.; Avogadro’s number.; Universal gas constant.; Molecular weight of dry air.; Dry air gas constant.; Euler-Mascheroni Constant.; Elementary charge. 13.3.2 Elementary Functions; A set of miscellaneous elementary mathematical functions is provided along with a set of basic trigonometrical functions. Some of this functions refer to basic mathematical functions like the square root, the power to a number of the calculus of a logarithm, while others are used for number treatment, like rounding.; Although there are some functions that are not in the standard C math library (like Factorial), most of the functionality offered here is just a wrapper of the first ones. Nevertheless, some of the them also offer some security checks or a better precision, like the trigonometrical functions ASin(x), ACos(x) or ATan(x).; // Generate a vector with 10 random numbers; vector<double> v(10);; std::generate(v.begin(), v.end(), rand);. // Find the minimum value of the vector (iterator version); vector<double>::iterator it;; it = TMath::LocMin(v.begin(), v.end());; std::cout << *it << std::endl;. // The same with the old-style version; int i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:661987,charge,charge,661987,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['charge'],['charge']
Energy Efficiency,"nctions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1.0E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1.0E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1.0E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm wit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__Derivator.html:3889,adapt,adaptive,3889,root/html602/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__Derivator.html,4,['adapt'],['adaptive']
Energy Efficiency,"nd also in TTree::Set... void SetUnzipBufferSize(Long64_t bufferSize); Sets the size for the unzipping cache... by default it should be; two times the size of the prefetching cache. Int_t UnzipBuffer(char** dest, char* src); UNzips a ROOT specific buffer... by reading the header at the beginning.; returns the size of the inflated buffer or -1 if error; Note!! : If *dest == 0 we will allocate the buffer and it will be the; responsability of the caller to free it... it is useful for example; to pass it to the creator of TBuffer; src is the original buffer with the record (header+compressed data); *dest is the inflated buffer (including the header). Int_t UnzipCache(Int_t& startindex, Int_t& locbuffsz, char*& locbuff); This inflates all the buffers in the cache.. passing the data to a new; buffer that will only wait there to be read...; We can not inflate all the buffers in the cache so we will try to do; it until the cache gets full... there is a member called fUnzipBufferSize which will; tell us the max size we can allocate for this cache. note that we will unzip in the order they were put into the cache not; the order of the transference so it has to be read in that order or the; pre-unzipping will be useless. startindex is used as start index to check for blks to be unzipped. returns 0 in normal conditions or -1 if error, 1 if it would like to sleep. This func is supposed to compete among an indefinite number of threads to get a chunk to inflate; in order to accommodate multiple unzippers; Since everything is so async, we cannot use a fixed buffer, we are forced to keep; the individual chunks as separate blocks, whose summed size does not exceed the maximum; allowed. The pointers are kept globally in the array fUnzipChunks. void Print(Option_t* option = """") const. Int_t ReadBufferExt(char* buf, Long64_t pos, Int_t len, Int_t& loc). TTreeCacheUnzip(const TTreeCacheUnzip& ). TTreeCacheUnzip& operator=(const TTreeCacheUnzip& ). EParUnzipMode GetParallelUnzip(); Methods",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCacheUnzip.html:18158,allocate,allocate,18158,root/html528/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html528/TTreeCacheUnzip.html,10,['allocate'],['allocate']
Energy Efficiency,"nd its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity on the cluster ;  CTProofMgrLiteBasic TProofMgr functionality implementation in the case of Lite session ;  ►CTProofMonSenderProvides the interface for PROOF monitoring to different writers ;  CTDSetPlet;  CTProofMonSenderMLTProofMonSender implementation for the ML writer ;  CTProofMonSenderSQLTProofMonSender implementation for the SQL writers ;  CTProofNodeInfoThe purpose of this class is to provide a complete node description for masters, submasters and workers ;  CTProofNodesPROOF worker node information .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:203803,monitor,monitor,203803,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,2,['monitor'],"['monitor', 'monitoring']"
Energy Efficiency,"nd method return the pointer to the legend, otherwise return 0;. ; Definition at line 705 of file TPie.cxx. ◆ GetPercentFormat(). const char * TPie::GetPercentFormat ; (; ). inline . Definition at line 77 of file TPie.h. ◆ GetRadius(). Double_t TPie::GetRadius ; (; ). inline . Definition at line 78 of file TPie.h. ◆ GetSlice(). TPieSlice * TPie::GetSlice ; (; Int_t ; id). Return the reference to the slice of index 'id'. ; There are no controls of memory corruption, be carefull. ; Definition at line 714 of file TPie.cxx. ◆ GetValueFormat(). const char * TPie::GetValueFormat ; (; ). inline . Definition at line 80 of file TPie.h. ◆ GetX(). Double_t TPie::GetX ; (; ). inline . Definition at line 81 of file TPie.h. ◆ GetY(). Double_t TPie::GetY ; (; ). inline . Definition at line 82 of file TPie.h. ◆ Init(). void TPie::Init ; (; Int_t ; np, . Double_t ; ao, . Double_t ; x, . Double_t ; y, . Double_t ; r . ). private . Common initialization for all constructors. ; This is a private function called to allocate the memory. ; Definition at line 723 of file TPie.cxx. ◆ IsA(). TClass * TPie::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 111 of file TPie.h. ◆ MakeLegend(). TLegend * TPie::MakeLegend ; (; Double_t ; x1 = .65, . Double_t ; y1 = .65, . Double_t ; x2 = .95, . Double_t ; y2 = .95, . const char * ; leg_header = """" . ). This method create a legend that explains the contents of the slice for this pie-chart. ; The parameter passed reppresents the option passed to shown the slices, see TLegend::AddEntry() for further details.; The pointer of the TLegend is returned. ; Definition at line 770 of file TPie.cxx. ◆ MakeSlices(). void TPie::MakeSlices ; (; Bool_t ; force = kFALSE). Make the slices. ; If they already exist it does nothing unless force=kTRUE. ; Definition at line 1380 of file TPie.cxx. ◆ Paint(). void TPie::Paint ; (; Option_t * ; option). overridevirtual . Paint a Pie chart in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPie.html:29952,allocate,allocate,29952,doc/master/classTPie.html,https://root.cern,https://root.cern/doc/master/classTPie.html,1,['allocate'],['allocate']
Energy Efficiency,"nd on the same observable such as a PDF depending on x combined with another one depending on y. The composite storage will store two different datasets, {x} and {y}, but they can be passed as a single dataset to RooFit operations. A category tag will define which dataset has to be passed to which likelihood.; When iterated from start to finish, datasets will be traversed in the order of the category index. ; Definition at line 33 of file RooCompositeDataStore.h. Public Member Functions;  RooCompositeDataStore ();  ;  RooCompositeDataStore (const RooCompositeDataStore &other, const char *newname=nullptr);  Convert map by label to map by index for more efficient internal use. ;  ;  RooCompositeDataStore (const RooCompositeDataStore &other, const RooArgSet &vars, const char *newname=nullptr);  Update index category pointer, if it is contained in input argument vars. ;  ;  RooCompositeDataStore (RooStringView name, RooStringView title, const RooArgSet &vars, RooCategory &indexCat, std::map< std::string, RooAbsDataStore * > const &inputData);  Convert map by label to map by index for more efficient internal use. ;  ;  ~RooCompositeDataStore () override;  Destructor. ;  ; RooAbsArg * addColumn (RooAbsArg &var, bool adjustRange=true) override;  WVE ownership issue here!! Caller (a RooAbsData) should take ownership of all arguments, but only does for the first one here... ;  ; void append (RooAbsDataStore &other) override;  ; void attachBuffers (const RooArgSet &extObs) override;  ; void cacheArgs (const RooAbsArg *owner, RooArgSet &varSet, const RooArgSet *nset=nullptr, bool skipZeroWeights=false) override;  ; const RooAbsArg * cacheOwner () override;  ; bool changeObservableName (const char *from, const char *to) override;  Change name of internal observable named 'from' into 'to'. ;  ; RooAbsDataStore * clone (const char *newname=nullptr) const override;  ; RooAbsDataStore * clone (const RooArgSet &vars, const char *newname=nullptr) const override;  ; void dump () overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCompositeDataStore.html:1551,efficient,efficient,1551,doc/master/classRooCompositeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooCompositeDataStore.html,1,['efficient'],['efficient']
Energy Efficiency,"nd supports fundamental types and ROOT::RVec thereof.; ; import ROOT; ; # To mark a Python callable to be used from C++, you have to use the decorator; # provided by PyROOT passing the C++ types of the input arguments and the return; # value.; @ROOT.Numba.Declare(['float', 'int'], 'float'); def pypow(x, y):; return x**y; ; # The Python callable is now available from C++ in the Numba namespace.; # For example, we can use it from the interpreter.; ROOT.gInterpreter.ProcessLine('cout << ""2^3 = "" << Numba::pypow(2, 3) << endl;'); ; # Or we can use the callable as well within a RDataFrame workflow.; data = ROOT.RDataFrame(4).Define('x', '(float)rdfentry_')\; .Define('x_pow3', 'Numba::pypow(x, 3)')\; .AsNumpy(); ; print('pypow({}, 3) = {}'.format(data['x'], data['x_pow3'])); ; # ROOT uses the numba Python package to create C++ functions from python ones.; # We support as input and return types of the callable fundamental types and; # ROOT::RVec thereof. See the following callable computing the power of the; # elements in an array.; @ROOT.Numba.Declare(['RVecF', 'int'], 'RVecF'); def pypowarray(x, y):; return x**y; ; ROOT.gInterpreter.ProcessLine('''; ROOT::RVecF x = {0, 1, 2, 3};; cout << ""pypowarray("" << x << "", 3) = "" << Numba::pypowarray(x, 3) << endl;; '''); ; # and now with RDataFrame; s = ROOT.RDataFrame(1).Define('x', 'ROOT::RVecF{1,2,3}')\; .Define('x2', 'Numba::pypowarray(x, 2)')\; .Sum('x2') # 1 + 4 + 9 == 14; print('sum(pypowarray({ 1, 2, 3 }, 2)) = ', s.GetValue()); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/pyroot004__NumbaDeclare_8py.html:1495,power,power,1495,doc/master/pyroot004__NumbaDeclare_8py.html,https://root.cern,https://root.cern/doc/master/pyroot004__NumbaDeclare_8py.html,1,['power'],['power']
Energy Efficiency,"nd the headers will be removed in ROOT 6.34:. RooAbsTestStatistic; RooAbsOptTestStatistic; RooNLLVar; RooChi2Var; RooXYChi2Var. Please use the higher-level functions RooAbsPdf::createNLL() and RooAbsPdf::createChi2() if you want to create objects that represent test statistics.; Change of RooParamHistFunc; The RooParamHistFunc didn’t take any observable RooRealVar as constructor argument. It assumes as observable the internal variables in the passed RooDataHist. This means it was in most contexts unusable, because the input can’t be changed, other than loading a different bin in the dataset.; Furthermore, there was actually a constructor that took a RooAbsArg x, but it was simply ignored.; To fix all these problems, the existing constructors were replaced by a new one that takes the observable explicitly.; Since the old constructors resulted in wrong computation graphs that caused trouble with the new CPU evaluation backend, they had to be removed without deprecation. Please adapt your code if necessary.; Renaming of some RooFit classes; The RooPower was renamed to RooPowerSum, and RooExpPoly was renamed to RooLegacyExpPoly.; This was a necessary change, because the names of these classes introduced in ROOT 6.28 collided with some classes in CMS combine, which were around already long before. Therefore, the classes had to be renamed to not cause any problems for CMS.; In the unlikeliy case where you should have used these new classes for analysis already, please adapt your code to the new names and re-create your workspaces.; RDataFrame. The RDataFrame constructors that take in input one or more file names (or globs thereof) will now infer the format of the dataset, either TTree or RNTuple, that is stored in the first input file. When multiple files are specified, it is assumed that all other files contain a coherent dataset of the same format and with the same schema, exactly as it used to happen with TChain. This automatic inference further contributes towards a ze",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:14328,adapt,adapt,14328,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['adapt'],['adapt']
Energy Efficiency,"ndObject(const TObject *obj) const overrideFind object using its hash value (returned by its Hash() member).Definition TListOfFunctions.cxx:443; TListA doubly linked list.Definition TList.h:38; TList::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this list using its name.Definition TList.cxx:576; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::RemoveTObject * Remove(TObject *obj) overrideRemove object from the list.Definition TList.cxx:820; TList::AddLastvoid AddLast(TObject *obj) overrideAdd object at the end of the list.Definition TList.cxx:150; TList::FirstLinkvirtual TObjLink * FirstLink() constDefinition TList.h:104; TList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition TList.cxx:468; TList::AddFirstvoid AddFirst(TObject *obj) overrideAdd object at the beginning of the list.Definition TList.cxx:98; TMapTMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval ...Definition TMap.h:40; TMemberInspectorAbstract base class for accessing the data-members of a class.Definition TMemberInspector.h:31; TMemberInspector::Inspectvirtual void Inspect(TClass *cl, const char *parent, const char *name, const void *addr)Definition TMemberInspector.cxx:99; TMemberStreamerDefinition TMemberStreamer.h:26; TMethodArgEach ROOT method (see TMethod) has a linked list of its arguments.Definition TMethodArg.h:36; TMethodArg::GetFullTypeNameconst char * GetFullTypeName() constGet full type description of method argument, e.g.: ""class TDirectory*"".Definition TMethodArg.cxx:74; TMethodEach ROOT class (see TClass) has a linked list of methods.Definition TMethod.h:38; TMethod::GetClassTClass * GetClass() constDefinition TMethod.h:55; TMethod::IsMenuItemEMenuItemKind IsMenuItem() constDefinition TMethod.h:56; TMethod::GetListOfMethodArgsvirtual TList * GetListOfMethodArgs()Returns methodarg list and additionally upd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:359294,efficient,efficient,359294,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['efficient'],['efficient']
Energy Efficiency,"ndau; distribution"", Computer Phys.Comm., 31(1984), 97-111. Double_t Sin(Double_t x); { return sin(x); }. Double_t Cos(Double_t x); { return cos(x); }. Double_t Tan(Double_t x); { return tan(x); }. Double_t SinH(Double_t x); { return sinh(x); }. Double_t CosH(Double_t x); { return cosh(x); }. Double_t TanH(Double_t x); { return tanh(x); }. Double_t ASin(Double_t x). Double_t ACos(Double_t x). Double_t ATan(Double_t x); { return atan(x); }. Double_t ATan2(Double_t y, Double_t x). Double_t Sqrt(Double_t x); { return sqrt(x); }. Double_t Ceil(Double_t x); { return ceil(x); }. Int_t CeilNint(Double_t x); { return TMath::Nint(ceil(x)); }. Double_t Floor(Double_t x); { return floor(x); }. Int_t FloorNint(Double_t x); { return TMath::Nint(floor(x)); }. Int_t Nint(T x); Round to nearest integer. Rounds half integers to the nearest; even integer. Double_t Exp(Double_t x); { return exp(x); }. Double_t Ldexp(Double_t x, Int_t exp); { return ldexp(x, exp); }. LongDouble_t Power(LongDouble_t x, LongDouble_t y); { return std::pow(x,y); }. LongDouble_t Power(LongDouble_t x, Long64_t y); { return std::pow(x,(LongDouble_t)y); }. LongDouble_t Power(Long64_t x, Long64_t y); { return std::pow(x,y); }. Double_t Power(Double_t x, Double_t y); { return pow(x, y); }. Double_t Power(Double_t x, Int_t y). Double_t Log(Double_t x); { return log(x); }. Double_t Log10(Double_t x); { return log10(x); }. Int_t Finite(Double_t x); { return isfinite(x); }. Int_t IsNaN(Double_t x); from math.h. { return ::isnan(x); }. Double_t QuietNaN(); --------wrapper to numeric_limits. Double_t SignalingNaN(). Double_t Infinity(); returns an infinity as defined by the IEEE standard. template <typename T> inline T NormCross(const T v1[3],const T v2[3],T out[3]); Calculate the Normalized Cross Product of two vectors. T MinElement(Long64_t n, const T *a); Return minimum of array a of length n. T MaxElement(Long64_t n, const T *a); Return maximum of array a of length n. Long64_t LocMin(Long64_t n, const T *a); Return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMath.html:38962,Power,Power,38962,root/html534/TMath.html,https://root.cern,https://root.cern/root/html534/TMath.html,1,['Power'],['Power']
Energy Efficiency,"ndent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:37181,power,powers,37181,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['power'],['powers']
Energy Efficiency,"ndent. The only meta argument that is defined globally is $Alias(typeName,aliasName) to; define aliases for type names. For the definition of meta arguments in operator p.d.f.s; see the definitions below. std::string processExpression(const char* expr); Process a single high-level expression or list of; expressions. The returned string a the reduced expression where; all inline object creations have been executed and substituted; with the name of the created object. e.g. 'RooGaussian::g(x,m,s)' --> 'g'; '{x(-10,10),s} --> '{x,s}'. std::string processCompositeExpression(const char* arg); Process a single composite expression. e.g. 'A=RooGaussian::g[x,m,s]' --> 'A=g'; e.g. 'f[0,1]*RooGaussian::g[x,m,s]' --> 'f*g'; e.g. 'RooGaussian::g(x,y,s)|x' --> g|x'; e.g. '$MetaArg(RooGaussian::g[x,m,s],blah)' --> '$MetaArg(g,blah)'. std::string processSingleExpression(const char* arg); Process a single high-level expression. The returned string a the reduced; expression where all inline object creations have been executed and substituted; with the name of the created object. e.g. 'RooGaussian::g(x,m,s)' --> 'g'; e.g. 'x[-10,10]' --> 'x'. string processListExpression(const char* arg); Process a list of high-level expression. The returned string a the reduced; expression list where all inline object creations have been executed and substituted; with the name of the created object. E.g. '{x(-10,10),s} --> '{x,s}'. string processAliasExpression(const char* arg); Parse token. TClass* resolveClassName(const char* className). string varTag(string& func, vector<std::string>& args). string processCreateVar(string& func, vector<std::string>& args); Glue function between high-level syntax and low-level factory call to createVariable:; Process a parsed call to create a variable named 'func'. If initial token is non-numeric, a RooCategory will be created, and the args are interpreted; as either state names or 'name=id' assignments. Otherwise a RooRealvar is created and the; arg list is interpr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFactoryWSTool.html:17118,reduce,reduced,17118,root/html526/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html526/RooFactoryWSTool.html,7,['reduce'],['reduced']
Energy Efficiency,"ndent. The only meta argument that is defined globally is $Alias(typeName,aliasName) to; define aliases for type names. For the definition of meta arguments in operator p.d.f.s; see the definitions below. std::string processExpression(const char* expr); Process a single high-level expression or list of; expressions. The returned string a the reduced expression where; all inline object creations have been executed and substituted; with the name of the created object. e.g. 'RooGaussian::g(x,m,s)' --> 'g'; '{x(-10,10),s} --> '{x,s}'. std::string processCompositeExpression(const char* arg); Process a single composite expression. e.g. 'A=RooGaussian::g[x,m,s]' --> 'A=g'; e.g. 'f[0,1]*RooGaussian::g[x,m,s]' --> 'f*g'; e.g. 'RooGaussian::g(x,y,s)|x' --> g|x'; e.g. '$MetaArg(RooGaussian::g[x,m,s],blah)' --> '$MetaArg(g,blah)'. std::string processSingleExpression(const char* arg); Process a single high-level expression. The returned string a the reduced; expression where all inline object creations have been executed and substituted; with the name of the created object. e.g. 'RooGaussian::g(x,m,s)' --> 'g'; e.g. 'x[-10,10]' --> 'x'. string processListExpression(const char* arg); Process a list of high-level expression. The returned string a the reduced; expression list where all inline object creations have been executed and substituted; with the name of the created object. E.g. '{x(-10,10),s} --> '{x,s}'. string processAliasExpression(const char* arg); Parse token. TClass* resolveClassName(const char* className). string varTag(string& func, vector<string>& args). string processCreateVar(string& func, vector<string>& args); Glue function between high-level syntax and low-level factory call to createVariable:; Process a parsed call to create a variable named 'func'. If initial token is non-numeric, a RooCategory will be created, and the args are interpreted; as either state names or 'name=id' assignments. Otherwise a RooRealvar is created and the; arg list is interpreted as fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFactoryWSTool.html:18615,reduce,reduced,18615,root/html602/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html602/RooFactoryWSTool.html,4,['reduce'],['reduced']
Energy Efficiency,"ndex for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* option = """"); Clear the histogram. THnSparse& operator=(const THnSparse& ). THnSparseA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparse.html:17908,allocate,allocate,17908,root/html534/THnSparse.html,https://root.cern,https://root.cern/root/html534/THnSparse.html,4,['allocate'],['allocate']
Energy Efficiency,"ndex for the n dimensional tuple x,; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const char* name[], Bool_t allocate /* = kTRUE */); Get the bin index for the n dimensional tuple addressed by ""name"",; allocate one if it doesn't exist yet and ""allocate"" is true. Long64_t GetBin(const Int_t* idx, Bool_t allocate = kTRUE); Get the bin index for the n dimensional coordinates coord,; allocate one if it doesn't exist yet and ""allocate"" is true. Double_t GetBinContent(Long64_t bin, Int_t* idx = 0) const; Return the content of the filled bin number ""idx"".; If coord is non-null, it will contain the bin's coordinates for each axis; that correspond to the bin. Double_t GetBinError2(Long64_t linidx) const; Get square of the error of bin addressed by linidx as. If errors are not enabled (via Sumw2() or CalculateErrors()); return contents. Long64_t GetBinIndexForCurrentBin(Bool_t allocate); Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* option = """"); Clear the histogram. THnSparse(const THnSparse& ). THnSparse& operator=(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparse.html:19158,allocate,allocate,19158,root/html602/THnSparse.html,https://root.cern,https://root.cern/root/html602/THnSparse.html,8,['allocate'],['allocate']
Energy Efficiency,"nding on the context, using TSpectrumTransform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2; , kTransformSin =3; , ;   kTransformFourier =4; , kTransformHartley =5; , kTransformFourierWalsh =6; , kTransformFourierHaar =7; , ;   kTransformWalshHaar =8; , kTransformCosWalsh =9; , kTransformCosHaar =10; , kTransformSinWalsh =11; , ;   kTransformSinHaar =12; , kTransformForward =0; , kTransformInverse =1. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumTransform.html:1644,adapt,adaptive,1644,doc/master/classTSpectrumTransform.html,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html,1,['adapt'],['adaptive']
Energy Efficiency,"ndows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHtml(const TGWindow* p, int w, int h, int id = -1); HTML Widget constructor. ~TGHtml(); HTML widget destructor. void UpdateBackgroundStart(); Start background update. void FreeColor(ColorStruct_t* color); Free system color. ColorStruct_t * AllocColor(const char* name); Allocate system color by name. ColorStruct_t * AllocColorByValue(ColorStruct_t* color); Allocate system color by value. void Clear(Option_t* = """"); Erase all HTML from this widget and clear the screen. This is; typically done before loading a new document. int ParseText(char* text, const char* index = 0); Appends (or insert at the specified position) the given HTML text to the; end of any HTML text that may have been inserted by prior calls to this; command. Then it runs the tokenizer, parser and layout engine as far as; possible with the text that is available. The display is updated; appropriately. void SetTableRelief(int relief); Sets relief mode of html table. void SetRuleRelief(int relief); Sets relief mode of html rule. void UnderlineLinks(int onoff); Set/reset html links underline. void SetBaseUri(const char* uri); Sets base URI. int GotoAnchor(const char* name); Go to anchor position. const char * GetUid(const char* string); Given a string, this procedure returns a uniq",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHtml.html:33038,Allocate,Allocate,33038,root/html602/TGHtml.html,https://root.cern,https://root.cern/root/html602/TGHtml.html,2,['Allocate'],['Allocate']
Energy Efficiency,"nds; TStringTNamed::fTitleobject title; Long64_tTTree::fTotBytesTotal number of bytes in all branches before compression; Long64_tTTree::fTotalBuffers! Total number of bytes in branch buffers; TVirtualIndex*TTree::fTreeIndexPointer to the tree Index (if any); Int_tTTree::fUpdateUpdate frequency for EntryLoop; TList*TTree::fUserInfopointer to a list of user objects associated to this Tree; Double_tTTree::fWeightTree weight (see TTree::SetWeight); Long64_tTTree::fZipBytesTotal number of bytes in all branches after compression; static Int_tTTree::fgBranchStyleOld/New branch style; static Long64_tTTree::fgMaxTreeSizeMaximum size of a file containg a Tree. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TNtupleD(); Default constructor for Ntuple*-*-*-*-*-*-*-*-; *-* ==============================. TNtupleD(const char* name, const char* title, const char* varlist, Int_t bufsize = 32000); Create an Ntuple*-*-; *-* ================; The parameter varlist describes the list of the ntuple variables; separated by a colon:; example: ""x:y:z:energy""; For each variable in the list a separate branch is created. NOTE:; -Use TTree to create branches with variables of different data types.; -Use TTree when the number of branches is large (> 100).; -. ~TNtupleD(); Default destructor for an Ntuple*-*-*-*-*-*-; *-* ================================. void ResetBranchAddress(TBranch* ); Reset the branch addresses to the internal fArgs array. Use this; method when the addresses were changed via calls to SetBranchAddress(). void ResetBranchAddresses(); Reset the branch addresses to the internal fArgs array. Use this; method when the addresses were changed via calls to SetBranchAddress(). void Browse(TBrowser* b); Browse content. Int_t Fill(); -*-*Fill a Ntuple with current values in fArgs; *-* ==========================================; Note that this function is protected.; Currently called only by TChain::Merge. Int_t Fill(const Double_t* x); Fill a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNtupleD.html:24409,energy,energy,24409,root/html528/TNtupleD.html,https://root.cern,https://root.cern/root/html528/TNtupleD.html,1,['energy'],['energy']
Energy Efficiency,"ne 260 of file TMethodCall.cxx. ◆ InitImplementation(). void TMethodCall::InitImplementation ; (; const char * ; methodname, . const char * ; params, . const char * ; proto, . Bool_t ; objectIsConst, . TClass * ; cl, . const ClassInfo_t * ; cinfo, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). private . This function implements Init and InitWithPrototype. ; 'methodname' should NOT have any scope information in it. The scope information should be passed via the TClass or CINT ClassInfo. ; Definition at line 296 of file TMethodCall.cxx. ◆ InitWithPrototype() [1/2]. void TMethodCall::InitWithPrototype ; (; const char * ; function, . const char * ; proto, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). Initialize the function invocation environment. ; Necessary input information: the function name and the prototype string of the form: ""char*,int,float"".; To execute the method call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 363 of file TMethodCall.cxx. ◆ InitWithPrototype() [2/2]. void TMethodCall::InitWithPrototype ; (; TClass * ; cl, . const char * ; method, . const char * ; proto, . Bool_t ; objectIsConst = kFALSE, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). Initialize the method invocation environment. ; Necessary input information: the class, method name and the prototype string of the form: ""char*,int,float"".; To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 342 of file TMethodCall.cxx. ◆ IsA(). TClass * TMethodCall::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 128 of file TMethodCall.h. ◆ IsValid(). Bool_t TMethodCall::IsValid ; (; ); const. Return true if the method call has been",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodCall.html:26057,efficient,efficient,26057,doc/master/classTMethodCall.html,https://root.cern,https://root.cern/doc/master/classTMethodCall.html,1,['efficient'],['efficient']
Energy Efficiency,"ne 655 of file THnSparse.cxx. ◆ GenerateArray(). virtual TArray * THnSparse::GenerateArray ; (; ); const. protectedpure virtual . Implemented in THnSparseT< CONT >. ◆ GetBin() [1/6]. Long64_t THnSparse::GetBin ; (; const char * ; name[]); const. inlineoverridevirtual . Implements THnBase.; Definition at line 98 of file THnSparse.h. ◆ GetBin() [2/6]. Long64_t THnSparse::GetBin ; (; const char * ; name[], . Bool_t ; allocate = kTRUE . ). overridevirtual . Get the bin index for the n dimensional tuple addressed by ""name"", allocate one if it doesn't exist yet and ""allocate"" is true. ; Implements THnBase.; Definition at line 718 of file THnSparse.cxx. ◆ GetBin() [3/6]. Long64_t THnSparse::GetBin ; (; const Double_t * ; x); const. inlineoverridevirtual . Implements THnBase.; Definition at line 97 of file THnSparse.h. ◆ GetBin() [4/6]. Long64_t THnSparse::GetBin ; (; const Double_t * ; x, . Bool_t ; allocate = kTRUE . ). overridevirtual . Get the bin index for the n dimensional tuple x, allocate one if it doesn't exist yet and ""allocate"" is true. ; Implements THnBase.; Definition at line 702 of file THnSparse.cxx. ◆ GetBin() [5/6]. Long64_t THnSparse::GetBin ; (; const Int_t * ; idx); const. inlineoverridevirtual . Implements THnBase.; Definition at line 96 of file THnSparse.h. ◆ GetBin() [6/6]. Long64_t THnSparse::GetBin ; (; const Int_t * ; idx, . Bool_t ; allocate = kTRUE . ). overridevirtual . Get the bin index for the n dimensional coordinates coord, allocate one if it doesn't exist yet and ""allocate"" is true. ; Implements THnBase.; Definition at line 733 of file THnSparse.cxx. ◆ GetBinContent() [1/2]. Double_t THnSparse::GetBinContent ; (; const Int_t * ; idx); const. inline . Forwards to THnBase::GetBinContent() overload. ; Non-virtual, CINT-compatible replacement of a using declaration. ; Definition at line 121 of file THnSparse.h. ◆ GetBinContent() [2/2]. Double_t THnSparse::GetBinContent ; (; Long64_t ; idx, . Int_t * ; coord = nullptr . ); const. overridevirtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:33820,allocate,allocate,33820,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,2,['allocate'],['allocate']
Energy Efficiency,"ne completely the class ; Definition at line 70 of file GSLSimAnnealing.h. ◆ ~GSLSimAnFunc(). virtual ROOT::Math::GSLSimAnFunc::~GSLSimAnFunc ; (; ). inlinevirtual . virtual destructor (no operations) ; Definition at line 78 of file GSLSimAnnealing.h. Member Function Documentation. ◆ Clone(). virtual GSLSimAnFunc * ROOT::Math::GSLSimAnFunc::Clone ; (; ); const. inlinevirtual . clone method. ; Needs to be re-implemented by the derived classes for deep copying ; Definition at line 92 of file GSLSimAnnealing.h. ◆ Distance(). double ROOT::Math::GSLSimAnFunc::Distance ; (; const GSLSimAnFunc & ; func); const. virtual . calculate the distance (metric) between this one and another configuration Presently a cartesian metric is used. ; re-implement by derived classes if needed to be modified ; Definition at line 66 of file GSLSimAnnealing.cxx. ◆ Energy(). double ROOT::Math::GSLSimAnFunc::Energy ; (; ); const. virtual . evaluate the energy ( objective function value) re-implement by derived classes if needed to be modified ; Definition at line 50 of file GSLSimAnnealing.cxx. ◆ FastCopy(). GSLSimAnFunc & ROOT::Math::GSLSimAnFunc::FastCopy ; (; const GSLSimAnFunc & ; f). virtual . fast copy method called by GSL simulated annealing internally copy only the things which have been changed must be re-implemented by derived classes if needed ; Definition at line 96 of file GSLSimAnnealing.cxx. ◆ NDim(). unsigned int ROOT::Math::GSLSimAnFunc::NDim ; (; ); const. inline . Definition at line 135 of file GSLSimAnnealing.h. ◆ Print(). void ROOT::Math::GSLSimAnFunc::Print ; (; ). virtual . print the position in the standard output std::ostream GSL prints in addition n iteration, n function calls, temperature and energy re-implement by derived classes if necessary ; Definition at line 83 of file GSLSimAnnealing.cxx. ◆ Scale(). double ROOT::Math::GSLSimAnFunc::Scale ; (; unsigned int ; i); const. inline . Definition at line 141 of file GSLSimAnnealing.h. ◆ SetX() [1/3]. void ROOT::Math::GSL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html:4821,energy,energy,4821,doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnFunc.html,1,['energy'],['energy']
Energy Efficiency,"ne found; 1632 if (opCurlyCurly==-1) { // }{ not found; 1633 // arguments missing for \splitline; 1634 fError = ""Missing second line for #splitline"";; 1635 delete[] text;; 1636 return TLatexFormSize(0,0,0);; 1637 }; 1638 Double_t height = GetHeight()*spec.fSize/8;; 1639 if (!fShow) {; 1640 fs1 = Anal1(spec,text+opSplitLine+11,opCurlyCurly-opSplitLine-11);; 1641 fs2 = Anal1(spec,text+opCurlyCurly+2,length-opCurlyCurly-3);; 1642 Savefs(&fs1);; 1643 Savefs(&fs2);; 1644 } else {; 1645 fs2 = Readfs();; 1646 fs1 = Readfs();; 1647 Analyse(x,y+fs2.Over()-height,spec,text+opCurlyCurly+2,length-opCurlyCurly-3); // second line; 1648 Analyse(x,y-fs1.Under()-3*height,spec,text+opSplitLine+11,opCurlyCurly-opSplitLine-11); //first line; 1649 }; 1650 ; 1651 result.Set(TMath::Max(fs1.Width(),fs2.Width()),fs1.Height()+3*height,fs2.Height()-height);; 1652 ; 1653 }; 1654 else if (opSqrt>-1) { // \sqrt found; 1655 if (!fShow) {; 1656 if (opSquareCurly>-1) {; 1657 // power nth #sqrt[n]{arg}; 1658 fs1 = Anal1(specNewSize,text+opSqrt+6,opSquareCurly-opSqrt-6);; 1659 fs2 = Anal1(spec,text+opSquareCurly+1,length-opSquareCurly-1);; 1660 Savefs(&fs1);; 1661 Savefs(&fs2);; 1662 result.Set(fs2.Width()+ GetHeight()*spec.fSize/10+TMath::Max(GetHeight()*spec.fSize/2,(Double_t)fs1.Width()),; 1663 fs2.Over()+fs1.Height()+GetHeight()*spec.fSize/4,fs2.Under());; 1664 } else {; 1665 fs1 = Anal1(spec,text+opSqrt+5,length-opSqrt-5);; 1666 Savefs(&fs1);; 1667 result.Set(fs1.Width()+GetHeight()*spec.fSize/2,fs1.Over()+GetHeight()*spec.fSize/4,fs1.Under());; 1668 }; 1669 } else {; 1670 if (opSquareCurly>-1) { // ]{; 1671 fs2 = Readfs();; 1672 fs1 = Readfs();; 1673 Double_t pas = TMath::Max(GetHeight()*spec.fSize/2,(Double_t)fs1.Width());; 1674 Double_t pas2 = pas + GetHeight()*spec.fSize/10;; 1675 Double_t y1 = y-fs2.Over() ;; 1676 Double_t y2 = y+fs2.Under() ;; 1677 Double_t y3 = y1-GetHeight()*spec.fSize/4;; 1678 Analyse(x+pas2,y,spec,text+opSquareCurly+1,length-opSquareCurly-1);; 1679 Analyse(x,y-fs2.Over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLatex_8cxx_source.html:60154,power,power,60154,doc/master/TLatex_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLatex_8cxx_source.html,1,['power'],['power']
Energy Efficiency,"ne; 351/// true color machine we will calculate the pixel value using:; 352/// for 15 and 16 bit true colors have 6 bits precision per color however; 353/// only the 5 most significant bits are used in the color index.; 354/// Except for 16 bits where green uses all 6 bits. I.e.:; 355/// ~~~ {.cpp}; 356/// 15 bits = rrrrrgggggbbbbb; 357/// 16 bits = rrrrrggggggbbbbb; 358/// ~~~; 359/// for 24 bits each r, g and b are represented by 8 bits.; 360///; 361/// Since all colors are set with a max of 65535 (16 bits) per r, g, b; 362/// we just right shift them by 10, 11 and 10 bits for 16 planes, and; 363/// (10, 10, 10 for 15 planes) and by 8 bits for 24 planes.; 364/// Returns kFALSE in case color allocation failed.; 365 ; 366Bool_t TGX11::AllocColor(Colormap cmap, RXColor *color); 367{; 368 if (fRedDiv == -1) {; 369 if (XAllocColor((Display*)fDisplay, cmap, color)); 370 return kTRUE;; 371 } else {; 372 color->pixel = (color->red >> fRedDiv) << fRedShift |; 373 (color->green >> fGreenDiv) << fGreenShift |; 374 (color->blue >> fBlueDiv) << fBlueShift;; 375 return kTRUE;; 376 }; 377 return kFALSE;; 378}; 379 ; 380////////////////////////////////////////////////////////////////////////////////; 381/// Returns the current RGB value for the pixel in the XColor structure.; 382 ; 383void TGX11::QueryColors(Colormap cmap, RXColor *color, Int_t ncolors); 384{; 385 if (fRedDiv == -1) {; 386 XQueryColors((Display*)fDisplay, cmap, color, ncolors);; 387 } else {; 388 ULong_t r, g, b;; 389 for (Int_t i = 0; i < ncolors; i++) {; 390 r = (color[i].pixel & fVisual->red_mask) >> fRedShift;; 391 color[i].red = UShort_t(r*kBIGGEST_RGB_VALUE/(fVisual->red_mask >> fRedShift));; 392 ; 393 g = (color[i].pixel & fVisual->green_mask) >> fGreenShift;; 394 color[i].green = UShort_t(g*kBIGGEST_RGB_VALUE/(fVisual->green_mask >> fGreenShift));; 395 ; 396 b = (color[i].pixel & fVisual->blue_mask) >> fBlueShift;; 397 color[i].blue = UShort_t(b*kBIGGEST_RGB_VALUE/(fVisual->blue_mask >> fBlueShift));; 398 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:11992,green,green,11992,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['green'],['green']
Energy Efficiency,"nearVar is the most general form of a derived real-valued object that can be used by RooRealIntegral to integrate over ;  CRooLinkedListRooLinkedList is an collection class for internal use, storing a collection of RooAbsArg pointers in a doubly linked list ;  CRooLinkedListElemRooLinkedListElem is an link element for the RooLinkedList class ;  CRooLinkedListIterRooLinkedListIter is the TIterator implementation for RooLinkedList ;  CRooLinTransBinningRooLinTransBinning is a special binning implementation for RooLinearVar that transforms the binning of the RooLinearVar input variable in the same way that RooLinearVar does ;  CRooListA RooList is a TList with extra support for working with options that are associated with each node ;  CRooListProxyRooListProxy is the concrete proxy for RooArgList objects ;  CRooLognormalRooFit Lognormal PDF ;  CRooMapCatEntry;  ►CRooMappedCategory;  CEntry;  CRooMath;  CRooMathCoreReg;  CRooMathMoreReg;  CRooMCIntegratorRooMCIntegrator implements an adaptive multi-dimensional Monte Carlo numerical integration, following the VEGAS algorithm originally described in G ;  CRooMCStudyRooMCStudy is a help class to facilitate Monte Carlo studies such as 'goodness-of-fit' studies, that involve fitting a PDF to multiple toy Monte Carlo sets generated from the same PDF or another PDF ;  CRooMinimizerRooMinimizer is a wrapper class around ROOT::Fit:Fitter that provides a seamless interface between the minimizer functionality and the native RooFit interface ;  CRooMinimizerFcn;  CRooMinuitRooMinuit is a wrapper class around TFitter/TMinuit that provides a seamless interface between the MINUIT functionality and the native RooFit interface ;  CRooMomentRooMoment represents the first, second, or third order derivative of any RooAbsReal as calculated (numerically) by the MathCore Richardson derivator class ;  ►CRooMomentMorph;  CCacheElem;  ►CRooMomentMorphFunc;  CCacheElem;  ►CRooMomentMorphFuncND;  CCacheElem;  CDigits;  CGrid2;  ►CRooMomentMorphND;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:118823,adapt,adaptive,118823,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['adapt'],['adaptive']
Energy Efficiency,"needAddressReset = (updatedLeafCount.find(leaf->GetLeafCount()) != updatedLeafCount.end());; 3380 }; 3381 }; 3382 if (needAddressReset && leaf->GetValuePointer()) {; 3383 if (leaf->IsA() == TLeafElement::Class() && mother); 3384 mother->ResetAddress();; 3385 else; 3386 leaf->SetAddress(nullptr);; 3387 }; 3388 if (!branch->GetAddress() && !leaf->GetValuePointer()) {; 3389 // We should attempts to set the address of the branch.; 3390 // something like:; 3391 //(TBranchElement*)branch->GetMother()->SetAddress(0); 3392 //plus a few more subtleties (see TBranchElement::GetEntry).; 3393 //but for now we go the simplest route:; 3394 //; 3395 // Note: This may result in the allocation of an object.; 3396 branch->SetupAddresses();; 3397 }; 3398 if (branch->GetAddress()) {; 3399 tree->SetBranchAddress(branch->GetName(), (void*) branch->GetAddress());; 3400 TBranch* br = tree->GetBranch(branch->GetName());; 3401 if (br) {; 3402 if (br->IsA() != branch->IsA()) {; 3403 Error(; 3404 ""CopyAddresses"",; 3405 ""Branch kind mismatch between input tree '%s' and output tree '%s' for branch '%s': '%s' vs '%s'"",; 3406 tree->GetName(), br->GetTree()->GetName(), br->GetName(), branch->IsA()->GetName(),; 3407 br->IsA()->GetName());; 3408 }; 3409 // The copy does not own any object allocated by SetAddress().; 3410 // FIXME: We do too much here, br may not be a top-level branch.; 3411 if (br->InheritsFrom(TBranchElement::Class())) {; 3412 ((TBranchElement*) br)->ResetDeleteObject();; 3413 }; 3414 } else {; 3415 Warning(""CopyAddresses"", ""Could not find branch named '%s' in tree named '%s'"", branch->GetName(), tree->GetName());; 3416 }; 3417 } else {; 3418 tleaf->SetAddress(leaf->GetValuePointer());; 3419 }; 3420 }; 3421 }; 3422 ; 3423 if (undo &&; 3424 ( tree->IsA()->InheritsFrom(""TNtuple"") || tree->IsA()->InheritsFrom(""TNtupleD"") ); 3425 ) {; 3426 tree->ResetBranchAddresses();; 3427 }; 3428}; 3429 ; 3430namespace {; 3431 ; 3432 enum EOnIndexError { kDrop, kKeep, kBuild };; 3433 ; 3434 bool R__H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:135144,allocate,allocated,135144,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['allocate'],['allocated']
Energy Efficiency,"nel function sigma2. TF1* GetKDEFunction(UInt_t npx = 100, Double_t xMin = 1., Double_t xMax = 0.); Returns the estimated density. TF1* GetPDFUpperConfidenceInterval(Double_t confidenceLevel = 0.94999999999999996, UInt_t npx = 100, Double_t xMin = 1., Double_t xMax = 0.); Returns the upper estimated density. TF1* GetPDFLowerConfidenceInterval(Double_t confidenceLevel = 0.94999999999999996, UInt_t npx = 100, Double_t xMin = 1., Double_t xMax = 0.); Returns the upper estimated density. TF1* GetKDEApproximateBias(UInt_t npx = 100, Double_t xMin = 1., Double_t xMax = 0.); Returns the approximate bias. explicit TKDE(UInt_t events = 0, const Double_t* data = 0, Double_t xMin = 0., Double_t xMax = 0., const Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.). TKDE(UInt_t events, const Double_t* data, const Double_t* dataWeight, Double_t xMin = 0., Double_t xMax = 0., const Option_t* option = ""KernelType:Gaussian;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.). TKDE(const Char_t* /*name*/, const KernelFunction& kernfunc, UInt_t events, const Double_t* data, Double_t xMin = 0.0, Double_t xMax = 0.0, const Option_t* option = ""KernelType:UserDefined;Iteration:Adaptive;Mirror:noMirror;Binning:RelaxedBinning"", Double_t rho = 1.0). Double_t GetValue(Double_t x) const; { return (*this)(x); }. TF1 * GetDrawnFunction(); get the drawn object to chanage settings; These objects are managed by TKDE and should not be deleted by the user. { return fPDF;}. TF1 * GetDrawnUpperFunction(); { return fUpperPDF;}. TF1 * GetDrawnLowerFunction(); { return fLowerPDF;}. TGraphErrors * GetDrawnGraph(); { return fGraph;}. TKDE operator=(TKDE& kde). Double_t GaussianKernel(Double_t x) const; Returns the kernel evaluation at x. Double_t EpanechnikovKernel(Double_t x) const. Double_t BiweightKernel(Double_t x) const; Returns the kernel evaluation at x. Double_t CosineArchKernel(Double_t x) const; Returns the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TKDE.html:19920,Adapt,Adaptive,19920,root/html604/TKDE.html,https://root.cern,https://root.cern/root/html604/TKDE.html,1,['Adapt'],['Adaptive']
Energy Efficiency,"nelIter kiter = kNonadaptiveKDE, const TH1* hist = 0, Float_t lower_edge = 0., Float_t upper_edge = 1., TMVA::KDEKernel::EKernelBorder kborder = kNoTreatment, Float_t FineFactor = 1.); TMVA::KDEKernel&operator=(const TMVA::KDEKernel&); voidSetKernelType(TMVA::KDEKernel::EKernelType ktype = kGauss); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. TMVA::MsgLogger&Log() const. Data Members; public:. enum EKernelType { kNone; kGauss; };; enum EKernelIter { kNonadaptiveKDE; kAdaptiveKDE; };; enum EKernelBorder { kNoTreatment; kKernelRenorm; kSampleMirror; };. private:. Float_tfFineFactorfine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function; TH1F*fFirstIterHisthistogram to be filled in the hidden iteration; Bool_tfHiddenIterationDefines if whats currently running is the ; TH1F*fHistcopy of input histogram; TMVA::KDEKernel::EKernelIterfIteriteration number; TMVA::KDEKernel::EKernelBorderfKDEborderThe method to take care about ""border"" effects; TF1*fKernel_integthe integral of the Kernel function; TMVA::MsgLogger*fLoggermessage logger; Float_tfLowerEdgethe lower edge of the PDF; Float_tfSigmaWidth of the Kernel function; TH1F*fSigmaHistcontains the Sigmas Widths for adaptive KDE ; Float_tfUpperEdgethe upper edge of the PDF. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; KDEKernel(TMVA::KDEKernel::EKernelIter kiter = kNonadaptiveKDE, const TH1* hist = 0, Float_t lower_edge = 0., Float_t upper_edge = 1., TMVA::KDEKernel::EKernelBorder kborder = kNoTreatment, Float_t FineFactor = 1.); constructor; sanity check. ~KDEKernel(); destructor. void SetKernelType(TMVA::KDEKernel::EKernelType ktype = kGauss); fIter == 1 ---> nonadaptive KDE; fIter == 2 ---> adaptive KDE. Float_t GetBinKernelIntegral(Float_t lowr, Float_t highr, Float_t mean, Int_t binnum); calculates the integral of the Kernel. KDEKernel(TMVA::KDEKernel::EKernel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__KDEKernel.html:1894,adapt,adaptive,1894,root/html528/TMVA__KDEKernel.html,https://root.cern,https://root.cern/root/html528/TMVA__KDEKernel.html,5,"['Adapt', 'adapt']","['Adaptive', 'adaptive']"
Energy Efficiency,"neric functions; Set the function f for evaluating the derivative.; The function type must implement the assigment operator,; <em> double operator() ( double x ) </em>. SetFunction(const ROOT::Math::Derivator::GSLFuncPointer& f, void* p = 0). double Eval(double x, double h = 1E-8) const. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(double x, double h = 1E-8) const. Computes the numerical derivative at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(double x, double h = 1E-8) const. Computes the numerical derivative at a point x using an adaptive forward; difference algorithm with a step size h.; The function is evaluated only at points greater than x and at x itself. double EvalBackward(double x, double h = 1E-8) const. Computes the numerical derivative at a point x using an adaptive backward; difference algorithm with a step size h.; The function is evaluated only at points less than x and at x itself. double Eval(const ROOT::Math::IGenFunction& f, double x, double h = 1E-8); @name --- Static methods ---; This methods don't require to use a Derivator object, and are designed to be used in; fast calculation. Error and status code cannot be retrieved in this case. Computes the numerical derivative of a function f at a point x.; It uses Derivator::EvalCentral to compute the derivative using an; adaptive central difference algorithm with a step size h. double EvalCentral(const ROOT::Math::IGenFunction& f, double x, double h = 1E-8). Computes the numerical derivative of a function f at a point x using an adaptive central; difference algorithm with a step size h. double EvalForward(const ROOT::Math::IGenFunction& f, double x, double h = 1E-8). Computes the numerical derivative of a function f at a point x using an adaptive forward; difference algorithm with a st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Derivator.html:3857,adapt,adaptive,3857,root/html526/ROOT__Math__Derivator.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Derivator.html,7,['adapt'],['adaptive']
Energy Efficiency,"nes . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 4. Histogramming. What is a histogram?; Our TTree contains for instance the energy of all electrons. What we usually care about is its distribution - for instance by counting how often electrons have an energy within a certain range. Such a range is called ""bin"". Let's look at an example: draw the histogram of the momentum (""fPt"") of all electrons with an energy (""fE"") > 80 and fTriggered being true.; Binning; You can tell TTree::Draw() what the binning should be:; tree->Draw(""electrons.fE >> htemp(15, 0., 30.)"",...). will use 15 bins, where the lower bin border of the first bin is at 0. and the upper bin border of the highest is at 30.; Style; ROOT displays a few properties for the histogram in the box in the upper right. You can move things around in the graphical display (""canvas"") of the histogram. You can modify graphical properties of the canvas by showing the editor: in the menu, select ""View"", then ""Editor"". Click on the histogram to select it, then change its visual appearance to magenta line, 5 pixels width, with pink fill. Eeew. This is likely the only time in your life that you are allowed to use this color combination - enjoy! :-); . ‹ 2. Running code in ROOT; up; 3. Examining a TTree's data ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/4-histogramming.html:2236,energy,energy,2236,d/4-histogramming.html,https://root.cern,https://root.cern/d/4-histogramming.html,1,['energy'],['energy']
Energy Efficiency,"nesArray, which should be; ""Cleared()"" in between several times. Keep deleting a TClonesArray is a double; waste. Not only you do not avoid memory fragmentation, but you worsen it because; the TClonesArray itself is a rather heavy structure, and there is quite some; code in the destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve program; execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used for; clearing TClonesArray. When option ""C"" is specified, ROOT automatically; executes the Clear() method (by default it is empty contained in TObject).; This method must be overridden in the relevant TClonesArray object class,; implementing the reset procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the TClonesArrays; are not destroyed and created on every event.; They must only be constructed/destructed at the beginning/end of the run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidAbsorbObjects(TClonesArray* tc, Int_t idx1, Int_t idx2); voidTObject::AbstractMethod(const char* method) const; virtual voidTObjArray::Add(TObject* obj); virtual voidAddAfter(const TObject*, TObject*); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject*, Int_t); virtual voidAddAtAndExpand(TObject*, Int_t); virtual Int_tAddAtFree(TObject*); virtual voidAddBefore(const TObject*, TObject*); virtual voidAddFirst(TObject*); virtual voidAddLast(TObject*); TObject*AddrAt(Int_t idx); voidTCollection::AddVector(TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TClonesArray.html:3669,reduce,reduce,3669,root/html530/TClonesArray.html,https://root.cern,https://root.cern/root/html530/TClonesArray.html,1,['reduce'],['reduce']
Energy Efficiency,"nesArray, which should be; ""Cleared()"" in between several times. Keep deleting a TClonesArray is a double; waste. Not only you do not avoid memory fragmentation, but you worsen it because; the TClonesArray itself is a rather heavy structure, and there is quite some; code in the destructor, so you have more memory fragmentation and slower code. NOTE 2. When investigating misuse of TClonesArray, please make sure of the following:. * Use Clear() or Clear(""C"") instead of Delete(). This will improve program; execution time.; * TClonesArray object classes containing pointers allocate memory.; To avoid causing memory leaks, special Clear(""C"") must be used for; clearing TClonesArray. When option ""C"" is specified, ROOT automatically; executes the Clear() method (by default it is empty contained in TObject).; This method must be overridden in the relevant TClonesArray object class,; implementing the reset procedure for pointer objects.; * To reduce memory fragmentation, please make sure that the TClonesArrays; are not destroyed and created on every event.; They must only be constructed/destructed at the beginning/end of the run. Function Members (Methods); public:. TClonesArray(); TClonesArray(const TClonesArray& tc); TClonesArray(const char* classname, Int_t size = 1000, Bool_t call_dtor = kFALSE); TClonesArray(const TClass* cl, Int_t size = 1000, Bool_t call_dtor = kFALSE); virtual~TClonesArray(); voidAbsorbObjects(TClonesArray* tc); voidTObject::AbstractMethod(const char* method) const; virtual voidTObjArray::Add(TObject* obj); virtual voidAddAfter(const TObject*, TObject*); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject*, Int_t); virtual voidAddAtAndExpand(TObject*, Int_t); virtual Int_tAddAtFree(TObject*); virtual voidAddBefore(const TObject*, TObject*); virtual voidAddFirst(TObject*); virtual voidAddLast(TObject*); TObject*AddrAt(Int_t idx); voidTCollection::AddVector(TObject* obj1); virtual TObject*TObjArray::After(const TObject* obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:3669,reduce,reduce,3669,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,1,['reduce'],['reduce']
Energy Efficiency,"nfo::BuildForBool_t BuildFor(const TClass *cl) overrideCheck if we can build this for foreign class - do we have some rules to do that.Definition TStreamerInfo.cxx:1291; TStreamerInfo::Buildvoid Build(Bool_t isTransient=kFALSE) overrideBuild the I/O data structure for the current class version.Definition TStreamerInfo.cxx:263; TStreamerInfo::BuildOldvoid BuildOld() overriderebuild the TStreamerInfo structureDefinition TStreamerInfo.cxx:1705; TStreamerInfo::fReadMemberWiseTStreamerInfoActions::TActionSequence * fReadMemberWise! List of read action resulting from the compilation for use in member wise streaming.Definition TStreamerInfo.h:105; TStreamerInfo::GetTypeInt_t GetType(Int_t id) constDefinition TStreamerInfo.h:187; TStreamerInfo::fClassVersionInt_t fClassVersionClass version identifier.Definition TStreamerInfo.h:89; TStreamerInfo::fNdataInt_t fNdata!number of optimized elementsDefinition TStreamerInfo.h:93; TStreamerInfo::Newvoid * New(void *obj=nullptr) overrideAn emulated object is created at address obj, if obj is null we allocate memory for the object.Definition TStreamerInfo.cxx:4769; TStreamerInfo::TStreamerInfoTStreamerInfo()Status bits See TVirtualStreamerInfo::EStatusBits for the values.Definition TStreamerInfo.cxx:145; TStreamerInfo::fReadMemberWiseVecPtrTStreamerInfoActions::TActionSequence * fReadMemberWiseVecPtr! List of read action resulting from the compilation for use in member wise streaming.Definition TStreamerInfo.h:106; TStreamerInfo::fReadObjectWiseTStreamerInfoActions::TActionSequence * fReadObjectWise! List of read action resulting from the compilation.Definition TStreamerInfo.h:104; TStreamerInfo::GetActualClassTClass * GetActualClass(const void *obj) const overrideAssuming that obj points to (the part of) an object that is of the type described by this streamerInf...Definition TStreamerInfo.cxx:3255; TStreamerInfo::GetStreamerElementRealTStreamerElement * GetStreamerElementReal(Int_t i, Int_t j) constObsolete: this routine is obsolete ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:282249,allocate,allocate,282249,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['allocate'],['allocate']
Energy Efficiency,ng a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPerfAnalysis Set of tools to analyse the performance tree; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROO,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:122767,monitor,monitoring,122767,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,6,['monitor'],['monitoring']
Energy Efficiency,ng a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF-Lite control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofMonSender Interface for PROOF monitoring; TProofMonSenderML Interface for PROOF monitoring; TProofMonSenderSQL Interface for PROOF monitoring; TProofNodeInfo Class describing a PROOF node; TProofNodes Node and worker information; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofOutputList Output list specific TList derivation; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static c,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:118403,monitor,monitoring,118403,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['monitor'],['monitoring']
Energy Efficiency,"ng and logging; 808 ; 809 virtual void computeResult (const Net& /* net */, std::vector<double>& /* weights */) {} ///< callback for monitoring and logging; 810 ; 811 virtual bool hasConverged (double testError); ///< has this training converged already?; 812 ; 813 EnumRegularization regularization () const { return m_regularization; } ///< some regularization of the DNN is turned on?; 814 ; 815 bool useMultithreading () const { return m_useMultithreading; } ///< is multithreading turned on?; 816 ; 817 ; 818 void pads (int numPads) { if (fMonitoring) fMonitoring->pads (numPads); } ///< preparation for monitoring; 819 void create (std::string histoName, int bins, double min, double max) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max); } ///< for monitoring; 820 void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2) { if (fMonitoring) fMonitoring->create (histoName, bins, min, max, bins2, min2, max2); } ///< for monitoring; 821 void addPoint (std::string histoName, double x) { if (fMonitoring) fMonitoring->addPoint (histoName, x); } ///< for monitoring; 822 void addPoint (std::string histoName, double x, double y) {if (fMonitoring) fMonitoring->addPoint (histoName, x, y); } ///< for monitoring; 823 void plot (std::string histoName, std::string options, int pad, EColor color) { if (fMonitoring) fMonitoring->plot (histoName, options, pad, color); } ///< for monitoring; 824 void clear (std::string histoName) { if (fMonitoring) fMonitoring->clear (histoName); } ///< for monitoring; 825 bool exists (std::string histoName) { if (fMonitoring) return fMonitoring->exists (histoName); return false; } ///< for monitoring; 826 ; 827 size_t convergenceCount () const { return m_convergenceCount; } ///< returns the current convergence count; 828 size_t maxConvergenceCount () const { return m_maxConvergenceCount; } ///< returns the max convergence count so far; 829 size_t minError () const { return m_minError; } //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:30902,monitor,monitoring,30902,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['monitor'],['monitoring']
Energy Efficiency,"ng data from the clang pcm). void Store(TBuffer& b) const; Store class description on I/O buffer. Bool_t IsLoaded() const; Return true if the shared library of this class is currently in the a; process's memory. Return false, after the shared library has been; unloaded or if this is an 'emulated' class created from a file's StreamerInfo. Bool_t IsStartingWithTObject() const; Returns true if this class inherits from TObject and if the start of; the TObject parts is at the very beginning of the objects.; Concretly this means that the following code is proper for this class:; ThisClass *ptr;; void *void_ptr = (void)ptr;; TObject *obj = (TObject*)void_ptr;; This code would be wrong if 'ThisClass' did not inherit 'first' from; TObject. Bool_t IsTObject() const; Return kTRUE is the class inherits from TObject. Bool_t IsForeign() const; Return kTRUE is the class is Foreign (the class does not have a Streamer method). void PostLoadCheck(); Do the initialization that can only be done after the CINT dictionary has; been fully populated and can not be delayed efficiently. Long_t Property() const; Set TObject::fBits and fStreamerType to cache information about the; class. The bits are; kIsTObject : the class inherits from TObject; kStartWithTObject: TObject is the left-most class in the inheritance tree; kIsForeign : the class doe not have a Streamer method; The value of fStreamerType are; kTObject : the class inherits from TObject; kForeign : the class does not have a Streamer method; kInstrumented: the class does have a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulatedStreamer: the class is missing its shared library. void SetStreamerImpl(); Internal routine to set fStreamerImpl based on the value of; fStreamerType. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:54150,efficient,efficiently,54150,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,4,['efficient'],['efficiently']
Energy Efficiency,"ng for every invocation TInterpreter::Execute(...). ; Definition at line 281 of file TMethodCall.cxx. ◆ Init() [2/4]. void TMethodCall::Init ; (; const TFunction * ; func). Initialize the method invocation environment based on the TFunction object. ; Definition at line 226 of file TMethodCall.cxx. ◆ Init() [3/4]. void TMethodCall::Init ; (; TClass * ; cl, . CallFunc_t * ; func, . Longptr_t ; offset = 0 . ). Initialize the method invocation environment based on the CallFunc object and the TClass describing the function context. ; Definition at line 185 of file TMethodCall.cxx. ◆ Init() [4/4]. void TMethodCall::Init ; (; TClass * ; cl, . const char * ; method, . const char * ; params, . Bool_t ; objectIsConst = kFALSE . ). Initialize the method invocation environment. ; Necessary input information: the class, method name and the parameter string of the form ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 260 of file TMethodCall.cxx. ◆ InitImplementation(). void TMethodCall::InitImplementation ; (; const char * ; methodname, . const char * ; params, . const char * ; proto, . Bool_t ; objectIsConst, . TClass * ; cl, . const ClassInfo_t * ; cinfo, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). private . This function implements Init and InitWithPrototype. ; 'methodname' should NOT have any scope information in it. The scope information should be passed via the TClass or CINT ClassInfo. ; Definition at line 296 of file TMethodCall.cxx. ◆ InitWithPrototype() [1/2]. void TMethodCall::InitWithPrototype ; (; const char * ; function, . const char * ; proto, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). Initialize the function invocation environment. ; Necessary input information: the function name and the prototype string of the form: ""char*,int,float"".; To execute the method call TMe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodCall.html:24983,efficient,efficient,24983,doc/master/classTMethodCall.html,https://root.cern,https://root.cern/doc/master/classTMethodCall.html,1,['efficient'],['efficient']
Energy Efficiency,"ng processed per slave; TH2D*fProcTimeHist!histogram of real time spent processing packets; Int_tfSlaves!number of active slaves; Long64_tfTotBytesRead!total bytes read on all slaves; Double_tfTotCpuTime!total cpu time of all slaves; Long64_tfTotEvents!total number of events processed; TTree*fTrace!TTree with trace events; TTimeStampfTzero!start time of this run; static Long_tfgResMemMax! Max resident memory used by this process; static Long_tfgVirtMemMax! Max virtual memory used by this process. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPerfStats(TList* input, TList* output); Normal constructor. ~TPerfStats(); Destructor. void SimpleEvent(TVirtualPerfStats::EEventType type); Simple event. void PacketEvent(const char* slave, const char* slavename, const char* filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead); Packet event.; See WriteQueryLog for the descripition of the structure sent for monitoring; when fMonitorPerPacket is kTRUE. void FileEvent(const char* slave, const char* slavename, const char* nodename, const char* filename, Bool_t isStart); File event. void FileOpenEvent(TFile* file, const char* filename, Double_t start); Open file event. void FileReadEvent(TFile* file, Int_t len, Double_t start); Read file event. void UnzipEvent(TObject* tree, Long64_t pos, Double_t start, Int_t complen, Int_t objlen); Record TTree file unzip event.; start is the TimeStamp before unzip; pos is where in the file the compressed buffer came from; complen is the length of the compressed buffer; objlen is the length of the de-compressed buffer. void RateEvent(Double_t proctime, Double_t deltatime, Long64_t eventsprocessed, Long64_t bytesRead); Rate event. void SetBytesRead(Long64_t num); Set number of bytes read. Long64_t GetBytesRead() const; Get number of bytes read. void WriteQueryLog(); Send to the connected monitoring servers information related to this query.; The i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPerfStats.html:8697,monitor,monitoring,8697,root/html534/TPerfStats.html,https://root.cern,https://root.cern/root/html534/TPerfStats.html,6,['monitor'],['monitoring']
Energy Efficiency,"ng the; ""Householder betas"".; If the decomposition succeeds, bit kDecomposed is set , otherwise kSingular. Bool_t QRH(TMatrixD& q, TVectorD& diagR, TVectorD& up, TVectorD& w, Double_t tol); Decomposition function . void SetMatrix(const TMatrixD& a); Set matrix to be decomposed. Bool_t Solve(TVectorD& b); Solve Ax=b assuming the QR form of A is stored in fR,fQ and fW, but assume b; has *not* been transformed. Solution returned in b. Bool_t Solve(TMatrixDColumn& b); Solve Ax=b assuming the QR form of A is stored in fR,fQ and fW, but assume b; has *not* been transformed. Solution returned in b. Bool_t TransSolve(TVectorD& b); Solve A^T x=b assuming the QR form of A is stored in fR,fQ and fW, but assume b; has *not* been transformed. Solution returned in b. Bool_t TransSolve(TMatrixDColumn& b); Solve A^T x=b assuming the QR form of A is stored in fR,fQ and fW, but assume b; has *not* been transformed. Solution returned in b. void Det(Double_t& d1, Double_t& d2); This routine calculates the absolute (!) value of the determinant; |det| = d1*TMath::Power(2.,d2). Bool_t Invert(TMatrixD& inv); For a matrix A(m,n), its inverse A_inv is defined as A * A_inv = A_inv * A = unit; The user should always supply a matrix of size (m x m) !; If m > n , only the (n x m) part of the returned (pseudo inverse) matrix; should be used . TMatrixD Invert(Bool_t& status); For a matrix A(m,n), its inverse A_inv is defined as A * A_inv = A_inv * A = unit; (n x m) Ainv is returned . void Print(Option_t* opt = """") const; Print the class members. TDecompQRH & operator=(const TDecompQRH& source); Assignment operator. const TMatrixDBase & GetDecompMatrix() const; { return fR; }. TDecompQRH(); {}. virtual ~TDecompQRH(); {}. Int_t GetNrows() const; { return fQ.GetNrows(); }. Int_t GetNcols() const; { return fQ.GetNcols(); }. const TMatrixD & GetQ(). const TMatrixD & GetR(). const TVectorD & GetUp(). const TVectorD & GetW(). Bool_t Solve(TVectorD& b). Bool_t TransSolve(TVectorD& b). Bool_t Invert(TMatri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TDecompQRH.html:9732,Power,Power,9732,root/html532/TDecompQRH.html,https://root.cern,https://root.cern/root/html532/TDecompQRH.html,4,['Power'],['Power']
Energy Efficiency,"ng to do other than cleaning up.; 503 doDeletes();; 504 return;; 505 }; 506 ; 507 const ColumnNames_t cols(colsPtr, colsPtr + colsSize);; 508 ; 509 auto jittedDefine = wkJittedDefine->lock();; 510 ; 511 using Callable_t = std::decay_t<F>;; 512 using ColTypes_t = typename TTraits::CallableTraits<Callable_t>::arg_types;; 513 ; 514 auto ds = lm->GetDataSource();; 515 if (ds != nullptr); 516 AddDSColumns(cols, *lm, *ds, ColTypes_t(), *colRegister);; 517 ; 518 // will never actually be used (trumped by jittedDefine->GetTypeName()), but we set it to something meaningful; 519 // to help devs debugging; 520 const auto dummyType = ""jittedCol_t"";; 521 // use unique_ptr<RDefineBase> instead of make_unique<NewCol_t> to reduce jit/compile-times; 522 std::unique_ptr<RDefineBase> newCol{; 523 MakeDefineNode(RDefineTypeTag{}, name, dummyType, std::forward<F>(f), cols, *colRegister, *lm)};; 524 jittedDefine->SetDefine(std::move(newCol));; 525 ; 526 doDeletes();; 527}; 528 ; 529template <bool IsSingleColumn, typename F>; 530void JitVariationHelper(F &&f, const char **colsPtr, std::size_t colsSize, const char **variedCols,; 531 std::size_t variedColsSize, const char **variationTags, std::size_t variationTagsSize,; 532 std::string_view variationName, RLoopManager *lm,; 533 std::weak_ptr<RJittedVariation> *wkJittedVariation, RColumnRegister *colRegister,; 534 std::shared_ptr<RNodeBase> *prevNodeOnHeap) noexcept; 535{; 536 // a helper to delete objects allocated before jitting, so that the jitter can share data with lazily jitted code; 537 auto doDeletes = [&] {; 538 delete[] colsPtr;; 539 delete[] variedCols;; 540 delete[] variationTags;; 541 ; 542 delete wkJittedVariation;; 543 delete colRegister;; 544 delete prevNodeOnHeap;; 545 };; 546 ; 547 if (wkJittedVariation->expired()) {; 548 // The branch of the computation graph that needed this jitted variation went out of scope between the type; 549 // jitting was booked and the time jitting actually happened. Nothing to do other than cleani",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html:23674,reduce,reduce,23674,doc/master/InterfaceUtils_8hxx_source.html,https://root.cern,https://root.cern/doc/master/InterfaceUtils_8hxx_source.html,2,"['allocate', 'reduce']","['allocated', 'reduce']"
Energy Efficiency,"ng.; 2091 ; 2092TString TString::Itoa(Int_t value, Int_t base); 2093{; 2094 std::string buf;; 2095 // check that the base if valid; 2096 if (base < 2 || base > 36) {; 2097 Error(""TString::Itoa"", ""base %d is not supported. Supported bases are {2,3,...,36}."",base) ;; 2098 return (TString(""!""));; 2099 }; 2100 buf.reserve(35); // Pre-allocate enough space (35=kMaxDigits); 2101 Int_t quotient = value;; 2102 // Translating number to string with base:; 2103 do {; 2104 buf += ""0123456789abcdefghijklmnopqrstuvwxyz""[ TMath::Abs(quotient % base) ];; 2105 quotient /= base;; 2106 } while (quotient);; 2107 // Append the negative sign; 2108 if (value < 0) buf += '-';; 2109 std::reverse(buf.begin(), buf.end());; 2110 return (TString(buf.data()));; 2111}; 2112 ; 2113////////////////////////////////////////////////////////////////////////////////; 2114/// Converts a UInt_t (twice the range of an Int_t) to a TString with respect; 2115/// to the base specified (2-36). Thus it is an enhanced version of sprintf; 2116/// (adapted from versions 0.4 of http://www.jb.man.ac.uk/~slowe/cpp/itoa.html).; 2117/// In case of error returns the ""!"" string.; 2118 ; 2119TString TString::UItoa(UInt_t value, Int_t base); 2120{; 2121 std::string buf;; 2122 // check that the base if valid; 2123 if (base < 2 || base > 36) {; 2124 Error(""TString::UItoa"", ""base %d is not supported. Supported bases are {2,3,...,36}."",base);; 2125 return (TString(""!""));; 2126 }; 2127 buf.reserve(35); // Pre-allocate enough space (35=kMaxDigits); 2128 UInt_t quotient = value;; 2129 // Translating number to string with base:; 2130 do {; 2131 buf += ""0123456789abcdefghijklmnopqrstuvwxyz""[ quotient % base ];; 2132 quotient /= base;; 2133 } while (quotient);; 2134 std::reverse(buf.begin(), buf.end());; 2135 return (TString(buf.data()));; 2136}; 2137 ; 2138////////////////////////////////////////////////////////////////////////////////; 2139/// Converts a Long64_t to a TString with respect to the base specified (2-36).; 2140/// Thus ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:66519,adapt,adapted,66519,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['adapt'],['adapted']
Energy Efficiency,"ngEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void DeclareOptions ();  MethodFisher options: format and syntax of option string: ""type"" where type is ""Fisher"" or ""Mahalanobis"". ;  ; void GetCov_BetweenClass (void);  the matrix of covariance 'between class' reflects the dispersion of the events of a class relative to the global center of gravity of all the class hence the separation between classes ;  ; void GetCov_Full (void);  compute full covariance matrix from sum of within and between matrices ;  ; void GetCov_WithinClass (void);  the matrix of covariance 'within class' reflects the dispersion of the events relative to the center of gravity of their own class ;  ; void GetDiscrimPower (void);  computation of discrimination power indicator for each variable small values of ""fWith"" indicates little compactness of sig & of backgd big values of ""fBetw"" indicates large separation between sig & backgd ;  ; void GetFisherCoeff (void);  Fisher = Sum { [coeff]*[variables] }. ;  ; void GetMean (void);  compute mean values of variables in each sample, and the overall means ;  ; void Init (void);  default initialization called by all constructors ;  ; void InitMatrices (void);  initialization method; creates global matrices and vectors ;  ; void ProcessOptions ();  process user options ;  . Private Attributes; TMatrixD * fBetw;  between-class matrix ;  ; TMatrixD * fCov;  full covariance matrix ;  ; std::vector< Double_t > * fDiscrimPow;  discriminating power ;  ; Double_t fF0;  offset ;  ; std::vector< Double_t > * fFisherCoeff;  Fisher coefficients. ;  ; EFish",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFisher.html:30118,power,power,30118,doc/master/classTMVA_1_1MethodFisher.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFisher.html,1,['power'],['power']
Energy Efficiency,"ngeName = 0) const; Determine integration scenario. If no interpolation is used,; RooHistPdf can perform all integrals over its dependents; analytically via partial or complete summation of the input; histogram. If interpolation is used on the integral over; all histogram observables is supported. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Return integral identified by 'code'. The actual integration; is deferred to RooDataHist::sum() which implements partial; or complete summation over the histograms contents. list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. Int_t getMaxVal(const RooArgSet& vars) const; Only handle case of maximum in all variables. Double_t maxVal(Int_t code) const. Bool_t areIdentical(const RooDataHist& dh1, const RooDataHist& dh2). Bool_t importWorkspaceHook(RooWorkspace& ws); Check if our datahist is already in the workspace. void Streamer(TBuffer& ); Stream an object of class RooHistPdf. TObject* clone(const char* newname) const; { return new RooHistPdf(*this,newname); }. RooDataHist& dataHist(); Return RooDataHist that is represented. const RooDataHist& dataHist() const; Return RooDataHist that is represented. void setInterpolationOrder(Int_t order); Set histogram interpolation order. Int_t getInterpolationOrder() const; Return histogram interpolation order. void setCdfBoundaries(Bool_t flag); Set use of special boundary conditions for c.d.f.s. Bool_t getCdfBoundaries() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHistPdf.html:46846,efficient,efficiently,46846,root/html534/RooHistPdf.html,https://root.cern,https://root.cern/root/html534/RooHistPdf.html,6,['efficient'],['efficiently']
Energy Efficiency,"ngeName = 0) const; Determine integration scenario. If no interpolation is used,; RooHistPdf can perform all integrals over its dependents; analytically via partial or complete summation of the input; histogram. If interpolation is used on the integral over; all histogram observables is supported. Double_t analyticalIntegral(Int_t code, const char* rangeName = 0) const; Return integral identified by 'code'. The actual integration; is deferred to RooDataHist::sum() which implements partial; or complete summation over the histograms contents. list<Double_t>* plotSamplingHint(RooAbsRealLValue& obs, Double_t xlo, Double_t xhi) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const; Return sampling hint for making curves of (projections) of this function; as the recursive division strategy of RooCurve cannot deal efficiently; with the vertical lines that occur in a non-interpolated histogram. Int_t getMaxVal(const RooArgSet& vars) const; Only handle case of maximum in all variables. Double_t maxVal(Int_t code) const. Bool_t importWorkspaceHook(RooWorkspace& ws); Check if our datahist is already in the workspace. void Streamer(TBuffer& b); Stream an object of class RooHistPdf. TObject* clone(const char* newname) const; { return new RooHistPdf(*this,newname); }. RooDataHist& dataHist(); Return RooDataHist that is represented. const RooDataHist& dataHist() const; Return RooDataHist that is represented. void setInterpolationOrder(Int_t order); Set histogram interpolation order. Int_t getInterpolationOrder() const; Return histogram interpolation order. void setCdfBoundaries(Bool_t flag); Set use of special boundary conditions for c.d.f.s. Bool_t getCdfBoundaries() const; If true, special boundary conditions for c.d.f.s are used. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooHistPdf.html:45275,efficient,efficiently,45275,root/html532/RooHistPdf.html,https://root.cern,https://root.cern/root/html532/RooHistPdf.html,2,['efficient'],['efficiently']
Energy Efficiency,"ngeName = nullptr, . std::size_t ; nStart = 0, . std::size_t ; nStop = std::numeric_limits<std::size_t>::max() . ). overridevirtual . Implements RooAbsDataStore.; Definition at line 280 of file RooCompositeDataStore.cxx. ◆ merge(). RooAbsDataStore * RooCompositeDataStore::merge ; (; const RooArgSet & ; allvars, . std::list< RooAbsDataStore * > ; dstoreList . ). overridevirtual . Implements RooAbsDataStore.; Definition at line 335 of file RooCompositeDataStore.cxx. ◆ numEntries(). Int_t RooCompositeDataStore::numEntries ; (; ); const. overridevirtual . Implements RooAbsDataStore.; Definition at line 359 of file RooCompositeDataStore.cxx. ◆ recalculateCache(). void RooCompositeDataStore::recalculateCache ; (; const RooArgSet * ; proj, . Int_t ; firstEvent, . Int_t ; lastEvent, . Int_t ; stepSize, . bool ; skipZeroWeights . ). overridevirtual . Forward recalculate request to all subsets. ; Reimplemented from RooAbsDataStore.; Definition at line 149 of file RooCompositeDataStore.cxx. ◆ reduce(). std::unique_ptr< RooAbsDataStore > RooCompositeDataStore::reduce ; (; RooStringView ; name, . RooStringView ; title, . const RooArgSet & ; vars, . const RooFormulaVar * ; cutVar, . const char * ; cutRange, . std::size_t ; nStart, . std::size_t ; nStop . ). overridevirtual . Implements RooAbsDataStore.; Definition at line 122 of file RooCompositeDataStore.cxx. ◆ reset(). void RooCompositeDataStore::reset ; (; ). overridevirtual . Implements RooAbsDataStore.; Definition at line 373 of file RooCompositeDataStore.cxx. ◆ resetBuffers(). void RooCompositeDataStore::resetBuffers ; (; ). overridevirtual . Implements RooAbsDataStore.; Definition at line 447 of file RooCompositeDataStore.cxx. ◆ resetCache(). void RooCompositeDataStore::resetCache ; (; ). overridevirtual . Implements RooAbsDataStore.; Definition at line 423 of file RooCompositeDataStore.cxx. ◆ setArgStatus(). void RooCompositeDataStore::setArgStatus ; (; const RooArgSet & ; set, . bool ; active . ). overridevirtual . Imple",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCompositeDataStore.html:28053,reduce,reduce,28053,doc/master/classRooCompositeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooCompositeDataStore.html,1,['reduce'],['reduce']
Energy Efficiency,"ngle used in TMap; TGRectangle Rectangle object; TGRedirectOutputGuard Exception safe output redirection; TGRegion Describes a region; TGRegionWithId Region with id, tooltip text and popup menu; TGResourcePool Graphics resource pool; TGRowLayout Row layout manager; TGSFile Read a ROOT file from the Google Storage cloud; TGScrollBar Scrollbar widget; TGScrollBarElement Scrollbar element (head, tail, slider); TGSearchDialog Text search dialog used by TGTextEdit widget; TGSearchType ; TGSelectBox TreeView dialog widget; TGSelectedPicture Selected looking picture; TGShapedFrame Shaped composite frame; TGShutter Shutter widget; TGShutterItem Shutter widget item; TGSimpleTable A simple table that owns it's interface.; TGSimpleTableInterface Interface to data in a 2D array of Double_t; TGSlider Slider widget abstract base class; TGSpeedo Base class for analog meter widget; TGSplitButton a split button widget; TGSplitFrame Splittable composite frame; TGSplitTool Split frame tool utility; TGSplitter A frame splitter abstract base class; TGStatusBar Status bar widget; TGString Graphics string; TGTRA GTRA shape; TGTab Tab widget; TGTabElement Little tab on tab widget; TGTabLayout Layout manager for TGTab widget; TGTable A table used to visualize data from diffent sources.; TGTableCell A single cell in a TGTable.; TGTableFrame A frame used internally by TGTable.; TGTableHeader Header for use in TGTable.; TGTableHeaderFrame A frame used internally by TGTable.; TGTableLayout Table layout manager; TGTableLayoutHints Class describing GUI table layout hints; TGText Text used by TGTextEdit; TGTextBuffer Text buffer used by widgets like TGTextEntry, etc.; TGTextButton A text button widget; TGTextEdit Text edit widget; TGTextEditor Simple text editor using TGTextEdit widget; TGTextEntry The TGTextEntry widget is a simple line editor for inputting text; TGTextLBEntry Text listbox entry; TGTextLayout Keep track of string measurement information.; TGTextLine Line in TGText; TGTextView Non-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ClassIndex.html:85534,meter,meter,85534,root/html532/ClassIndex.html,https://root.cern,https://root.cern/root/html532/ClassIndex.html,1,['meter'],['meter']
Energy Efficiency,"ngleCoordinateSize;; 667 const Char_t* endbuf = buf + singleCoordSize * chunkSize;; 668 for (; buf < endbuf; buf += singleCoordSize, ++idx) {; 669 Long64_t hash = compactCoord.GetHashFromBuffer(buf);; 670 Long64_t linidx = fBins.GetValue(hash);; 671 if (linidx) {; 672 Long64_t nextidx = linidx;; 673 while (nextidx) {; 674 // must be a collision, so go to fBinsContinued.; 675 linidx = nextidx;; 676 nextidx = fBinsContinued.GetValue(linidx);; 677 }; 678 fBinsContinued.Add(linidx, idx + 1);; 679 } else {; 680 fBins.Add(hash, idx + 1);; 681 }; 682 }; 683 }; 684}; 685 ; 686////////////////////////////////////////////////////////////////////////////////; 687/// Initialize storage for nbins; 688 ; 689void THnSparse::Reserve(Long64_t nbins) {; 690 if (!fBins.GetSize() && fBinContent.GetSize()) {; 691 FillExMap();; 692 }; 693 if (2 * nbins > fBins.Capacity()) {; 694 fBins.Expand(3 * nbins);; 695 }; 696}; 697 ; 698////////////////////////////////////////////////////////////////////////////////; 699/// Get the bin index for the n dimensional tuple x,; 700/// allocate one if it doesn't exist yet and ""allocate"" is true.; 701 ; 702Long64_t THnSparse::GetBin(const Double_t* x, Bool_t allocate /* = kTRUE */); 703{; 704 THnSparseCompactBinCoord* cc = GetCompactCoord();; 705 Int_t *coord = cc->GetCoord();; 706 for (Int_t i = 0; i < fNdimensions; ++i); 707 coord[i] = GetAxis(i)->FindBin(x[i]);; 708 cc->UpdateCoord();; 709 ; 710 return GetBinIndexForCurrentBin(allocate);; 711}; 712 ; 713 ; 714////////////////////////////////////////////////////////////////////////////////; 715/// Get the bin index for the n dimensional tuple addressed by ""name"",; 716/// allocate one if it doesn't exist yet and ""allocate"" is true.; 717 ; 718Long64_t THnSparse::GetBin(const char* name[], Bool_t allocate /* = kTRUE */); 719{; 720 THnSparseCompactBinCoord* cc = GetCompactCoord();; 721 Int_t *coord = cc->GetCoord();; 722 for (Int_t i = 0; i < fNdimensions; ++i); 723 coord[i] = GetAxis(i)->FindBin(name[i]);;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:26345,allocate,allocate,26345,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,2,['allocate'],['allocate']
Energy Efficiency,"ngside it.; 285 };; 286 ; 287 std::vector<ModuleHeaderInfo_t>& GetModuleHeaderInfoBuffer() {; 288 static std::vector<ModuleHeaderInfo_t> moduleHeaderInfoBuffer;; 289 return moduleHeaderInfoBuffer;; 290 }; 291}; 292 ; 293Int_t TROOT::fgDirLevel = 0;; 294Bool_t TROOT::fgRootInit = kFALSE;; 295 ; 296static void at_exit_of_TROOT() {; 297 if (ROOT::Internal::gROOTLocal); 298 ROOT::Internal::gROOTLocal->~TROOT();; 299}; 300 ; 301// This local static object initializes the ROOT system; 302namespace ROOT {; 303namespace Internal {; 304 class TROOTAllocator {; 305 // Simple wrapper to separate, time-wise, the call to the; 306 // TROOT destructor and the actual free-ing of the memory.; 307 //; 308 // Since the interpreter implementation (currently TCling) is; 309 // loaded via dlopen by libCore, the destruction of its global; 310 // variable (i.e. in particular clang's) is scheduled before; 311 // those in libCore so we need to schedule the call to the TROOT; 312 // destructor before that *but* we want to make sure the memory; 313 // stay around until libCore itself is unloaded so that code; 314 // using gROOT can 'properly' check for validity.; 315 //; 316 // The order of loading for is:; 317 // libCore.so; 318 // libRint.so; 319 // ... anything other library hard linked to the executable ...; 320 // ... for example libEvent; 321 // libCling.so; 322 // ... other libraries like libTree for example ....; 323 // and the destruction order is (of course) the reverse.; 324 // By default the unloading of the dictionary, does use; 325 // the service of the interpreter ... which of course; 326 // fails if libCling is already unloaded by that information; 327 // has not been registered per se.; 328 //; 329 // To solve this problem, we now schedule the destruction; 330 // of the TROOT object to happen _just_ before the; 331 // unloading/destruction of libCling so that we can; 332 // maximize the amount of clean-up we can do correctly; 333 // and we can still allocate the TROOT object's ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:10384,schedul,scheduled,10384,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,4,['schedul'],"['schedule', 'scheduled']"
Energy Efficiency,"nimization, but the weights are updated after considering all the; examples, with the total derivative dEdw. The parameters for this; method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm: Weights; are set to the minimum along the line defined by the gradient. The; only parameter for this method is Tau. Lower tau = higher precision =; slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the; Polak-Ribiere updating formula: Weights are set to the; minimum along the line defined by the conjugate gradient. Parameters; are Tau and Reset, which defines the epochs where the direction is; reset to the steepes descent.; Conjugate gradients with the; Fletcher-Reeves updating formula: Weights are set to the; minimum along the line defined by the conjugate gradient. Parameters; are Tau and Reset, which defines the epochs where the direction is; reset to the steepes descent.; Broyden, Fletcher, Goldfarb, Shanno; (BFGS) method: Implies the computation of a NxN matrix; computation, but seems more powerful at least for less than 300; weights. Parameters are Tau and Reset, which defines the epochs where; the direction is reset to the steepes descent. How; to use it... TMLP is build from 3 classes: TNeuron, TSynapse and; TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used; explicitely by the user.; TMultiLayerPerceptron will take examples from a TTree; given in the constructor. The network is described by a simple; string: The input/output layers are defined by giving the expression for; each neuron, separated by comas. Hidden layers are just described; by the number of neurons. The layers are separated by colons.; In addition, input/output layer formulas can be preceded by '@' (e.g ""@out""); if one wants to also normalize the data from the TTree.; Input and outputs are taken from the TTree given as second argument.; Expressions are evaluated as for TTree::Draw(), arrays are expended in; distinct neurons, one for each index.; This",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:5879,power,powerful,5879,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,4,['power'],['powerful']
Energy Efficiency,"nimization, but the weights are updated after considering all the; examples, with the total derivative dEdw. The parameters for this; method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm: Weights; are set to the minimum along the line defined by the gradient. The; only parameter for this method is Tau. Lower tau = higher precision =; slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the; Polak-Ribiere updating formula: Weights are set to the; minimum along the line defined by the conjugate gradient. Parameters; are Tau and Reset, which defines the epochs where the direction is; reset to the steepes descent.; Conjugate gradients with the; Fletcher-Reeves updating formula: Weights are set to the; minimum along the line defined by the conjugate gradient. Parameters; are Tau and Reset, which defines the epochs where the direction is; reset to the steepes descent.; Broyden, Fletcher, Goldfarb, Shanno; (BFGS) method: Implies the computation of a NxN matrix; computation, but seems more powerful at least for less than 300; weights. Parameters are Tau and Reset, which defines the epochs where; the direction is reset to the steepes descent. How; to use it... TMLP is build from 3 classes: TNeuron, TSynapse and; TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used; explicitly by the user.; TMultiLayerPerceptron will take examples from a TTree; given in the constructor. The network is described by a simple; string: The input/output layers are defined by giving the expression for; each neuron, separated by comas. Hidden layers are just described; by the number of neurons. The layers are separated by colons.; In addition, input/output layer formulas can be preceded by '@' (e.g ""@out""); if one wants to also normalize the data from the TTree.; Input and outputs are taken from the TTree given as second argument.; Expressions are evaluated as for TTree::Draw(), arrays are expended in; distinct neurons, one for each index.; This ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiLayerPerceptron.html:5877,power,powerful,5877,root/html534/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html534/TMultiLayerPerceptron.html,6,['power'],['powerful']
Energy Efficiency,"ning message is printed in each case, unless the Q verbose option is given. The number of events read and skipped is always summarized at the end.; If no further information is given a label name 'fileNNN' will be assigned to each event, where NNN is the sequential number of the source file in fileList.; Alternatively, it is possible to override the default label names of the index category by specifying them in the fileList string: When instead of file1.txt,file2.txt the string file1.txt:FOO,file2.txt:BAR is specified, a state named ""FOO"" is assigned to the index category for each event originating from file1.txt. The labels FOO,BAR may be predefined in the index category via defineType(), but don't have to be.; Finally, one can also assign the same label to multiple files, either by specifying file1.txt:FOO,file2,txt:FOO,file3.txt:BAR or file1.txt,file2.txt:FOO,file3.txt:BAR. ; Definition at line 1372 of file RooDataSet.cxx. ◆ reduceEng(). std::unique_ptr< RooAbsData > RooDataSet::reduceEng ; (; const RooArgSet & ; varSubset, . const RooFormulaVar * ; cutVar, . const char * ; cutRange = nullptr, . std::size_t ; nStart = 0, . std::size_t ; nStop = std::numeric_limits<std::size_t>::max() . ); const. overrideprotectedvirtual . Implementation of RooAbsData virtual method that drives the RooAbsData::reduce() methods. ; Implements RooAbsData.; Definition at line 684 of file RooDataSet.cxx. ◆ SetName(). void RooDataSet::SetName ; (; const char * ; name). overridevirtual . Change the name of this dataset into the given name. ; Reimplemented from RooAbsData.; Definition at line 1647 of file RooDataSet.cxx. ◆ SetNameTitle(). void RooDataSet::SetNameTitle ; (; const char * ; name, . const char * ; title . ). overridevirtual . Change the title of this dataset into the given name. ; Reimplemented from RooAbsData.; Definition at line 1659 of file RooDataSet.cxx. ◆ Streamer(). void RooDataSet::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class RooDataSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:56093,reduce,reduceEng,56093,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['reduce'],['reduceEng']
Energy Efficiency,"nit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TDirectory*TMVA::MethodBase::MethodBaseDir() const; TMVA::MethodFDAMethodFDA(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); TMVA::MethodFDAMethodFDA(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTMVA::MethodBase::MonitorBoost(TMVA::MethodBoost*); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::IMethod&TMVA::IMethod::operator=(const TMVA::IMethod&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MethodFDA.html:8718,Monitor,MonitorBoost,8718,root/html532/TMVA__MethodFDA.html,https://root.cern,https://root.cern/root/html532/TMVA__MethodFDA.html,1,['Monitor'],['MonitorBoost']
Energy Efficiency,"nit(); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTMVA::MethodBase::IsSignalLike(); virtual Bool_tTMVA::MethodBase::IsSignalLike(Double_t mvaVal); virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; virtual voidTMVA::MethodBase::MakeClass(const TString& classFileName = TString("""")) const; voidTObject::MayNotUse(const char* method) const; TDirectory*TMVA::MethodBase::MethodBaseDir() const; TMVA::MethodSVMMethodSVM(TMVA::DataSetInfo& theData, const TString& theWeightFile, TDirectory* theTargetDir = NULL); TMVA::MethodSVMMethodSVM(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = 0); virtual Bool_tTMVA::MethodBase::MonitorBoost(TMVA::MethodBoost*); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::IMethod&TMVA::IMethod::operator=(const TMVA::IMethod&); virtual map<TString,Double_t>TMVA::MethodBase::OptimizeTuningParameters(TString fomType = ""ROCIntegral"", TString fitType = ""FitGA""); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidTMVA::MethodBase::PrintHelpMessage() const; voidTMVA:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__MethodSVM.html:8223,Monitor,MonitorBoost,8223,root/html532/TMVA__MethodSVM.html,https://root.cern,https://root.cern/root/html532/TMVA__MethodSVM.html,1,['Monitor'],['MonitorBoost']
Energy Efficiency,"nitialize internal data-members for given particle parameters. void InitTrack(const TEveVectorF& v, Int_t charge); TEveVectorF wrapper. void ResetTrack(); Reset cache holding particle trajectory. Bool_t GoToVertex(TEveVectorD& v, TEveVectorD& p); Propagate particle with momentum p to vertex v. Bool_t GoToVertex(TEveVectorF& v, TEveVectorF& p); TEveVectorF wrapper. void GoToBounds(TEveVectorD& p); Propagate particle to bounds.; Return TRUE if hit bounds. void GoToBounds(TEveVectorF& p); TEveVectorF wrapper. void Update(const TEveVector4D& v, const TEveVectorD& p, Bool_t full_update = kFALSE, Bool_t enforce_max_step = kFALSE); Update helix / B-field projection state. void Step(const TEveVector4D& v, const TEveVectorD& p, TEveVector4D& vOut, TEveVectorD& pOut); Wrapper to step helix. void LoopToBounds(TEveVectorD& p); Propagate charged particle with momentum p to bounds.; It is expected that Update() with full-update was called before. Bool_t LoopToVertex(TEveVectorD& v, TEveVectorD& p); Propagate charged particle with momentum p to vertex v.; It is expected that Update() with full-update was called before. Bool_t LineToVertex(TEveVectorD& v); Propagate neutral particle to vertex v. void LineToBounds(TEveVectorD& p); Propagatate neutral particle with momentum p to bounds. Bool_t HelixIntersectPlane(const TEveVectorD& p, const TEveVectorD& point, const TEveVectorD& normal, TEveVectorD& itsect); Intersect helix with a plane. Current position and argument p define; the helix. Bool_t LineIntersectPlane(const TEveVectorD& p, const TEveVectorD& point, const TEveVectorD& normal, TEveVectorD& itsect); Intersect line with a plane. Current position and argument p define; the line. Bool_t IntersectPlane(const TEveVectorD& p, const TEveVectorD& point, const TEveVectorD& normal, TEveVectorD& itsect); Find intersection of currently propagated track with a plane.; Current track position is used as starting point. Args:; p - track momentum to use for extrapolation; point - a point on a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveTrackPropagator.html:26876,charge,charged,26876,root/html530/TEveTrackPropagator.html,https://root.cern,https://root.cern/root/html530/TEveTrackPropagator.html,3,['charge'],['charged']
