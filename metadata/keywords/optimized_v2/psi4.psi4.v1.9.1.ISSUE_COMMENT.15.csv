quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"; 2018-12-05T15:54:19.2193957Z cachedir: .pytest_cache; 2018-12-05T15:54:19.2194153Z rootdir: D:\a\1\b\install, inifile:; 2018-12-05T15:54:19.5028575Z collecting ... collected 43 items / 21 deselected; 2018-12-05T15:54:19.5042204Z ; 2018-12-05T15:54:19.5056742Z ..\lib\psi4\tests\test_addons.py::test_gdma SKIPPED [ 4%]; 2018-12-05T15:54:19.5070445Z ..\lib\psi4\tests\test_addons.py::test_mrcc SKIPPED [ 9%]; 2018-12-05T15:54:19.5085682Z ..\lib\psi4\tests\test_addons.py::test_chemps2 SKIPPED [ 13%]; 2018-12-05T15:54:19.5098425Z ..\lib\psi4\tests\test_addons.py::test_dftd3 SKIPPED [ 18%]; 2018-12-05T15:54:19.5111431Z ..\lib\psi4\tests\test_addons.py::test_libefp SKIPPED [ 22%]; 2018-12-05T15:54:19.5124637Z ..\lib\psi4\tests\test_addons.py::test_pcmsolver SKIPPED [ 27%]; 2018-12-05T15:54:19.5137383Z ..\lib\psi4\tests\test_addons.py::test_erd SKIPPED [ 31%]; 2018-12-05T15:54:19.5159968Z ..\lib\psi4\tests\test_addons.py::test_simint SKIPPED [ 36%]; 2018-12-05T15:54:21.2422176Z ..\lib\psi4\tests\test_addons.py::test_json PASSED [ 40%]; 2018-12-05T15:54:21.2458012Z ..\lib\psi4\tests\test_addons.py::test_cfour SKIPPED [ 45%]; 2018-12-05T15:54:21.2473322Z ..\lib\psi4\tests\test_addons.py::test_v2rdm_casscf SKIPPED [ 50%]; 2018-12-05T15:54:21.2488441Z ..\lib\psi4\tests\test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; 2018-12-05T15:54:21.2503496Z ..\lib\psi4\tests\test_addons.py::test_grimme_3c SKIPPED [ 59%]; 2018-12-05T15:54:21.2517677Z ..\lib\psi4\tests\test_addons.py::test_dkh SKIPPED [ 63%]; 2018-12-05T15:54:21.2531717Z ..\lib\psi4\tests\test_addons.py::test_snsmp2 SKIPPED [ 68%]; 2018-12-05T15:54:21.2547307Z ..\lib\psi4\tests\test_addons.py::test_resp SKIPPED [ 72%]; 2018-12-05T15:54:23.0849642Z ..\lib\psi4\tests\test_psi4.py::test_psi4_basic PASSED [ 77%]; 2018-12-05T15:54:34.9658940Z ..\lib\psi4\tests\test_psi4.py::test_psi4_cc PASSED [ 81%]; 2018-12-05T15:54:39.2671697Z ..\lib\psi4\tests\test_psi4.py::test_psi4_cas PASSED [ 86%]; 2018-12-05T15:55:14.7785164Z ..\lib\psi4\tes",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:1305,test,tests,1305,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['test'],['tests']
Testability,; 206/401 Test #290: psimrcc-sp1 ...................... Passed 2.98 sec; Start 86: cepa1; 207/401 Test #84: cepa0-grad1 ...................... Passed 2.32 sec; Start 87: cepa2; 208/401 Test #85: cepa0-grad2 ...................... Passed 4.19 sec; Start 88: cepa3; 209/401 Test #9: castup2 .......................... Passed 8.52 sec; Start 89: cepa1; 210/401 Test #10: castup3 .......................... Passed 8.84 sec; Start 90: cepa-module; 211/401 Test #86: cepa1 ............................ Passed 9.10 sec; Start 93: cisd-h2o+-1; 212/401 Test #93: cisd-h2o+-1 ...................... Passed 2.99 sec; Start 94: cisd-h2o+-2; 213/401 Test #87: cepa2 ............................ Passed 10.57 sec; Start 95: cisd-h2o-clpse; 214/401 Test #95: cisd-h2o-clpse ................... Passed 1.79 sec; Start 96: cisd-opt-fd; 215/401 Test #94: cisd-h2o+-2 ...................... Passed 2.81 sec; Start 97: cisd-sp; 216/401 Test #88: cepa3 ............................ Passed 11.93 sec; Start 98: cisd-sp-2; 217/401 Test #98: cisd-sp-2 ........................ Passed 2.77 sec; Start 102: dcft-grad1; 218/401 Test #89: cepa1 ............................ Passed 13.19 sec; Start 104: dcft-grad3; 219/401 Test #97: cisd-sp .......................... Passed 5.81 sec; Start 105: dcft-grad4; 220/401 Test #1: adc1 ............................. Passed 23.47 sec; Start 107: dcft2; 221/401 Test #2: adc2 ............................. Passed 29.39 sec; Start 109: dcft4; 222/401 Test #107: dcft2 ............................ Passed 11.23 sec; Start 110: dcft5; 223/401 Test #104: dcft-grad3 ....................... Passed 15.91 sec; Start 111: dcft6; 224/401 Test #12: cbs-parser ....................... Passed 41.34 sec; Start 113: dcft8; 225/401 Test #105: dcft-grad4 ....................... Passed 24.23 sec; Start 114: dcft9; 226/401 Test #19: cbs-xtpl-wrapper ................. Passed 52.98 sec; Start 129: dfmp2-2; 227/401 Test #129: dfmp2-2 .......................... Passed 2.49 sec; Start 130: dfmp2-3; 228,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:20300,Test,Test,20300,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,; 206/411 Test #72: cc54 ............................. Passed 29.77 sec; Start 152: dfomp2p5-grad1; 207/411 Test #51: cc35 ............................. Passed 49.20 sec; Start 285: props2; 208/411 Test #286: props3 ........................... Passed 13.73 sec; Start 21: cc10; 209/411 Test #350: dft-custom ....................... Passed 14.96 sec; Start 217: mints6; 210/411 Test #138: dfmp2-grad5 ...................... Passed 17.05 sec; Start 3: casscf-fzc-sp; 211/411 Test #22: cc11 ............................. Passed 34.28 sec; Start 150: dfomp2p5-1; 212/411 Test #248: omp2-3 ........................... Passed 23.71 sec; Start 23: cc12; 213/411 Test #357: tu4-h2o-freq ..................... Passed 14.43 sec; Start 89: cepa3; 214/411 Test #49: cc33 ............................. Passed 31.01 sec; Start 50: cc34; 215/411 Test #133: dfmp2-ecp ........................ Passed 12.37 sec; Start 62: cc45; 216/411 Test #258: omp3-2 ........................... Passed 23.21 sec; Start 37: cc22; 217/411 Test #285: props2 ........................... Passed 14.24 sec; Start 128: dfccsdat1; 218/411 Test #53: cc37 ............................. Passed 20.51 sec; Start 101: cubeprop; 219/411 Test #217: mints6 ........................... Passed 13.56 sec; Start 369: dft-jk; 220/411 Test #105: dcft-grad3 ....................... Passed 21.24 sec; Start 338: scf7; 221/411 Test #3: casscf-fzc-sp .................... Passed 18.69 sec; Start 372: dft-custom-hybrid; 222/411 Test #101: cubeprop ......................... Passed 13.44 sec; Start 291: psimrcc-fd-freq1; 223/411 Test #369: dft-jk ........................... Passed 14.57 sec; Start 52: cc36; 224/411 Test #372: dft-custom-hybrid ................ Passed 12.18 sec; Start 393: python-3-index-transforms; 225/411 Test #150: dfomp2p5-1 ....................... Passed 27.17 sec; Start 268: opt2-fd; 226/411 Test #89: cepa3 ............................ Passed 24.53 sec; Start 201: fnocc3; 227/411 Test #50: cc34 ............................. Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:20356,Test,Test,20356,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,; 21/411 Test #14: cbs-xtpl-energy .................. Passed 12.98 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 13.65 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 59.21 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 35.82 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 358.15 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 80.51 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 109.54 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 109.00 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 45.45 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 31.10 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 47.18 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 255.04 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 101.66 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 311.67 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 122.44 sec; Start 31: cc16; 36/411 Test #30: cc15 ............................. Passed 120.35 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 55.67 sec; Start 33: cc18; 38/411 Test #24: cc13 ............................. Passed 310.59 sec; Start 34: cc19; 39/411 Test #18: cbs-xtpl-func .................... Passed 1426.34 sec; Start 35: cc2; 40/411 Test #28: cc13d ............................ Passed 274.84 sec; Start 36: cc21; 41/411 Test #33: cc18 ............................. Passed 46.09 sec; Start 37: cc22; 42/411 Test #31: cc16 ............................. Passed 216.03 sec; Start 38: cc23; 43/411 Test #37: cc22 ...........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:3149,Test,Test,3149,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,; 214/411 Test #62: cc45 ............................. Passed 15.77 sec; Start 50: cc34; 215/411 Test #53: cc37 ............................. Passed 12.36 sec; Start 37: cc22; 216/411 Test #176: extern1 .......................... Passed 15.70 sec; Start 52: cc36; 217/411 Test #180: fsapt-terms ...................... Passed 8.57 sec; Start 248: omp2-3; 218/411 Test #365: cubeprop-esp ..................... Passed 8.32 sec; Start 291: psimrcc-fd-freq1; 219/411 Test #126: dfccsd-t-grad1 ................... Passed 21.28 sec; Start 140: dfomp2-2; 220/411 Test #50: cc34 ............................. Passed 18.78 sec; Start 98: cisd-sp; 221/411 Test #52: cc36 ............................. Passed 18.16 sec; Start 338: scf7; 222/411 Test #291: psimrcc-fd-freq1 ................. Passed 17.80 sec; Start 158: dft-ghost; 223/411 Test #37: cc22 ............................. Passed 23.36 sec; Start 258: omp3-2; 224/411 Test #248: omp2-3 ........................... Passed 22.74 sec; Start 268: opt2-fd; 225/411 Test #98: cisd-sp .......................... Passed 8.82 sec; Start 270: opt4; 226/411 Test #158: dft-ghost ........................ Passed 7.78 sec; Start 80: cc8c; 227/411 Test #338: scf7 ............................. Passed 12.79 sec; Start 150: dfomp2p5-1; 228/411 Test #78: cc8a ............................. Passed 34.47 sec; Start 247: omp2-2; 229/411 Test #140: dfomp2-2 ......................... Passed 25.41 sec; Start 368: scf-freq1; 230/411 Test #270: opt4 ............................. Passed 8.38 sec; Start 89: cepa3; 231/411 Test #268: opt2-fd .......................... Passed 10.21 sec; Start 15: cbs-xtpl-freq; 232/411 Test #258: omp3-2 ........................... Passed 13.91 sec; Start 392: python-cc54; 233/411 Test #150: dfomp2p5-1 ....................... Passed 6.15 sec; Start 197: freq-isotope1; 234/411 Test #247: omp2-2 ........................... Passed 7.65 sec; Start 48: cc32; 235/411 Test #80: cc8c ............................. Passed 11.03 sec; Start 357: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:20945,Test,Test,20945,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,; 216/401 Test #88: cepa3 ............................ Passed 11.93 sec; Start 98: cisd-sp-2; 217/401 Test #98: cisd-sp-2 ........................ Passed 2.77 sec; Start 102: dcft-grad1; 218/401 Test #89: cepa1 ............................ Passed 13.19 sec; Start 104: dcft-grad3; 219/401 Test #97: cisd-sp .......................... Passed 5.81 sec; Start 105: dcft-grad4; 220/401 Test #1: adc1 ............................. Passed 23.47 sec; Start 107: dcft2; 221/401 Test #2: adc2 ............................. Passed 29.39 sec; Start 109: dcft4; 222/401 Test #107: dcft2 ............................ Passed 11.23 sec; Start 110: dcft5; 223/401 Test #104: dcft-grad3 ....................... Passed 15.91 sec; Start 111: dcft6; 224/401 Test #12: cbs-parser ....................... Passed 41.34 sec; Start 113: dcft8; 225/401 Test #105: dcft-grad4 ....................... Passed 24.23 sec; Start 114: dcft9; 226/401 Test #19: cbs-xtpl-wrapper ................. Passed 52.98 sec; Start 129: dfmp2-2; 227/401 Test #129: dfmp2-2 .......................... Passed 2.49 sec; Start 130: dfmp2-3; 228/401 Test #130: dfmp2-3 .......................... Passed 16.36 sec; Start 131: dfmp2-4; 229/401 Test #90: cepa-module ...................... Passed 64.78 sec; Start 134: dfmp2-grad2; 230/401 Test #17: cbs-xtpl-opt ..................... Passed 72.86 sec; Start 135: dfmp2-grad3; 231/401 Test #135: dfmp2-grad3 ...................... Passed 5.13 sec; Start 136: dfmp2-grad4; 232/401 Test #96: cisd-opt-fd ...................... Passed 63.83 sec; Start 137: dfmp2-grad5; 233/401 Test #131: dfmp2-4 .......................... Passed 8.63 sec; Start 139: dfomp2-2; 234/401 Test #134: dfmp2-grad2 ...................... Passed 8.35 sec; Start 140: dfomp2-3; 235/401 Test #136: dfmp2-grad4 ...................... Passed 5.23 sec; Start 141: dfomp2-4; 236/401 Test #140: dfomp2-3 ......................... Passed 3.31 sec; Start 142: dfomp2-grad1; 237/401 Test #18: cbs-xtpl-func .................... Passed 772.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:21206,Test,Test,21206,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,; 218/411 Test #164: dft-grad1 ........................ Passed 14.27 sec; Start 275: opt9; 219/411 Test #14: cbs-xtpl-energy .................. Passed 10.47 sec; Start 254: omp2p5-2; 220/411 Test #21: cc10 ............................. Passed 5.53 sec; Start 52: cc36; 221/411 Test #366: dft-smoke ........................ Passed 13.99 sec; Start 133: dfmp2-ecp; 222/411 Test #5: casscf-sa-sp ..................... Passed 9.71 sec; Start 83: cdomp2-1; 223/411 Test #357: tu4-h2o-freq ..................... Passed 9.81 sec; Start 217: mints6; 224/411 Test #254: omp2p5-2 ......................... Passed 6.93 sec; Start 123: dfccsd1; 225/411 Test #324: sapt8 ............................ Passed 13.00 sec; Start 128: dfccsdat1; 226/411 Test #52: cc36 ............................. Passed 6.60 sec; Start 368: scf-freq1; 227/411 Test #83: cdomp2-1 ......................... Passed 5.08 sec; Start 285: props2; 228/411 Test #123: dfccsd1 .......................... Passed 3.47 sec; Start 176: extern1; 229/411 Test #128: dfccsdat1 ........................ Passed 4.01 sec; Start 248: omp2-3; 230/411 Test #275: opt9 ............................. Passed 12.70 sec; Start 90: cepa1; 231/411 Test #133: dfmp2-ecp ........................ Passed 10.74 sec; Start 23: cc12; 232/411 Test #90: cepa1 ............................ Passed 2.88 sec; Start 369: dft-jk; 233/411 Test #248: omp2-3 ........................... Passed 4.83 sec; Start 101: cubeprop; 234/411 Test #368: scf-freq1 ........................ Passed 7.57 sec; Start 335: scf4; 235/411 Test #217: mints6 ........................... Passed 12.57 sec; Start 393: python-3-index-transforms; 236/411 Test #23: cc12 ............................. Passed 5.39 sec; Start 268: opt2-fd; 237/411 Test #285: props2 ........................... Passed 11.53 sec; Start 15: cbs-xtpl-freq; 238/411 Test #176: extern1 .......................... Passed 11.26 sec; Start 341: soscf-ref; 239/411 Test #335: scf4 ............................. Passed 7.01 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:21307,Test,Test,21307,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,; 230/411 Test #217: mints6 ........................... Passed 11.46 sec; Start 176: extern1; 231/411 Test #369: dft-jk ........................... Passed 9.92 sec; Start 285: props2; 232/411 Test #341: soscf-ref ........................ Passed 6.33 sec; Start 48: cc32; 233/411 Test #296: psithon2 ......................... Passed 11.70 sec; Start 357: tu4-h2o-freq; 234/411 Test #52: cc36 ............................. Passed 5.86 sec; Start 268: opt2-fd; 235/411 Test #48: cc32 ............................. Passed 5.60 sec; Start 101: cubeprop; 236/411 Test #357: tu4-h2o-freq ..................... Passed 9.00 sec; Start 90: cepa1; 237/411 Test #177: extern2 .......................... Passed 14.54 sec; Start 21: cc10; 238/411 Test #176: extern1 .......................... Passed 12.83 sec; Start 98: cisd-sp; 239/411 Test #285: props2 ........................... Passed 12.47 sec; Start 132: dfmp2-4; 240/411 Test #268: opt2-fd .......................... Passed 9.65 sec; Start 385: psi4numpy-fci; 241/411 Test #90: cepa1 ............................ Passed 2.86 sec; Start 124: dfccsdl1; 242/411 Test #21: cc10 ............................. Passed 4.59 sec; Start 393: python-3-index-transforms; 243/411 Test #124: dfccsdl1 ......................... Passed 2.18 sec; Start 291: psimrcc-fd-freq1; 244/411 Test #385: psi4numpy-fci .................... Passed 2.99 sec; Start 270: opt4; 245/411 Test #132: dfmp2-4 .......................... Passed 4.55 sec; Start 127: dfccsdt1; 246/411 Test #101: cubeprop ......................... Passed 10.95 sec; Start 137: dfmp2-grad4; 247/411 Test #127: dfccsdt1 ......................... Passed 2.02 sec; Start 365: cubeprop-esp; 248/411 Test #98: cisd-sp .......................... Passed 7.65 sec; Start 180: fsapt-terms; 249/411 Test #137: dfmp2-grad4 ...................... Passed 2.23 sec; Start 135: dfmp2-grad2; 250/411 Test #135: dfmp2-grad2 ...................... Passed 2.13 sec; Start 367: scf-hess1; 251/411 Test #270: opt4 ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:22343,Test,Test,22343,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,; 251/411 Test #128: dfccsdat1 ........................ Passed 3.87 sec; Start 341: soscf-ref; 252/411 Test #154: dfrasscf-sp ...................... Passed 2.76 sec; Start 143: dfomp2-grad1; 253/411 Test #117: dfcasscf-sa-sp ................... Passed 4.38 sec; Start 9: castup2; 254/411 Test #10: castup3 .......................... Passed 5.12 sec; Start 86: cepa0-grad2; 255/411 Test #335: scf4 ............................. Passed 7.46 sec; Start 179: fsapt2; 256/411 Test #109: dcft3 ............................ Passed 4.45 sec; Start 122: dfccd-grad1; 257/411 Test #192: fd-freq-energy ................... Passed 6.62 sec; Start 90: cepa1; 258/411 Test #143: dfomp2-grad1 ..................... Passed 4.96 sec; Start 171: dft2; 259/411 Test #86: cepa0-grad2 ...................... Passed 4.15 sec; Start 132: dfmp2-4; 260/411 Test #179: fsapt2 ........................... Passed 4.61 sec; Start 22: cc11; 261/411 Test #9: castup2 .......................... Passed 5.91 sec; Start 199: fnocc1; 262/411 Test #341: soscf-ref ........................ Passed 6.75 sec; Start 4: casscf-semi; 263/411 Test #122: dfccd-grad1 ...................... Passed 3.54 sec; Start 94: cisd-h2o+-1; 264/411 Test #90: cepa1 ............................ Passed 5.24 sec; Start 93: cisd-h2o+-0; 265/411 Test #171: dft2 ............................. Passed 4.80 sec; Start 187: fci-h2o-fzcv; 266/411 Test #4: casscf-semi ...................... Passed 3.12 sec; Start 99: cisd-sp-2; 267/411 Test #132: dfmp2-4 .......................... Passed 4.86 sec; Start 266: opt1-fd; 268/411 Test #199: fnocc1 ........................... Passed 3.90 sec; Start 95: cisd-h2o+-2; 269/411 Test #94: cisd-h2o+-1 ...................... Passed 4.92 sec; Start 310: rasci-c2-active; 270/411 Test #22: cc11 ............................. Passed 7.49 sec; Start 124: dfccsdl1; 271/411 Test #93: cisd-h2o+-0 ...................... Passed 4.27 sec; Start 339: scf-property; 272/411 Test #187: fci-h2o-fzcv ..................... Passed 4.52 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:24349,Test,Test,24349,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,; 252/411 Test #154: dfrasscf-sp ...................... Passed 2.76 sec; Start 143: dfomp2-grad1; 253/411 Test #117: dfcasscf-sa-sp ................... Passed 4.38 sec; Start 9: castup2; 254/411 Test #10: castup3 .......................... Passed 5.12 sec; Start 86: cepa0-grad2; 255/411 Test #335: scf4 ............................. Passed 7.46 sec; Start 179: fsapt2; 256/411 Test #109: dcft3 ............................ Passed 4.45 sec; Start 122: dfccd-grad1; 257/411 Test #192: fd-freq-energy ................... Passed 6.62 sec; Start 90: cepa1; 258/411 Test #143: dfomp2-grad1 ..................... Passed 4.96 sec; Start 171: dft2; 259/411 Test #86: cepa0-grad2 ...................... Passed 4.15 sec; Start 132: dfmp2-4; 260/411 Test #179: fsapt2 ........................... Passed 4.61 sec; Start 22: cc11; 261/411 Test #9: castup2 .......................... Passed 5.91 sec; Start 199: fnocc1; 262/411 Test #341: soscf-ref ........................ Passed 6.75 sec; Start 4: casscf-semi; 263/411 Test #122: dfccd-grad1 ...................... Passed 3.54 sec; Start 94: cisd-h2o+-1; 264/411 Test #90: cepa1 ............................ Passed 5.24 sec; Start 93: cisd-h2o+-0; 265/411 Test #171: dft2 ............................. Passed 4.80 sec; Start 187: fci-h2o-fzcv; 266/411 Test #4: casscf-semi ...................... Passed 3.12 sec; Start 99: cisd-sp-2; 267/411 Test #132: dfmp2-4 .......................... Passed 4.86 sec; Start 266: opt1-fd; 268/411 Test #199: fnocc1 ........................... Passed 3.90 sec; Start 95: cisd-h2o+-2; 269/411 Test #94: cisd-h2o+-1 ...................... Passed 4.92 sec; Start 310: rasci-c2-active; 270/411 Test #22: cc11 ............................. Passed 7.49 sec; Start 124: dfccsdl1; 271/411 Test #93: cisd-h2o+-0 ...................... Passed 4.27 sec; Start 339: scf-property; 272/411 Test #187: fci-h2o-fzcv ..................... Passed 4.52 sec; Start 294: psimrcc-sp1; 273/411 Test #99: cisd-sp-2 ........................ Passed 4.63,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:24442,Test,Test,24442,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,; 268/411 Test #268: opt2-fd .......................... Passed 14.05 sec; Start 271: opt5; 269/411 Test #271: opt5 ............................. Passed 5.38 sec; Start 272: opt6; 270/411 Test #270: opt4 ............................. Passed 10.22 sec; Start 273: opt7; 271/411 Test #259: omp3-3 ........................... Passed 131.33 sec; Start 274: opt8; 272/411 Test #272: opt6 ............................. Passed 31.19 sec; Start 275: opt9; 273/411 Test #260: omp3-4 ........................... Passed 146.57 sec; Start 276: opt11; 274/411 Test #263: omp3-grad2 ....................... Passed 115.54 sec; Start 277: opt12; 275/411 Test #274: opt8 ............................. Passed 40.84 sec; Start 279: opt14; 276/411 Test #261: omp3-5 ........................... Passed 137.13 sec; Start 280: opt-irc-1; 277/411 Test #275: opt9 ............................. Passed 20.24 sec; Start 281: opt-irc-2; 278/411 Test #273: opt7 ............................. Passed 57.59 sec; Start 282: opt-irc-3; 279/411 Test #277: opt12 ............................ Passed 23.47 sec; Start 283: opt-freeze-coords; 280/411 Test #283: opt-freeze-coords ................ Passed 8.58 sec; Start 284: props1; 281/411 Test #227: mp2-def2 ......................... Passed 413.49 sec; Start 285: props2; 282/411 Test #284: props1 ........................... Passed 6.04 sec; Start 286: props3; 283/411 Test #285: props2 ........................... Passed 13.46 sec; Start 287: psimrcc-ccsd_t-1; 284/411 Test #286: props3 ........................... Passed 13.64 sec; Start 288: psimrcc-ccsd_t-2; 285/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 3.03 sec; Start 289: psimrcc-ccsd_t-3; 286/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 3.60 sec; Start 290: psimrcc-ccsd_t-4; 287/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 3.03 sec; Start 291: psimrcc-fd-freq1; 288/411 Test #276: opt11 ............................ Passed 61.79 sec; Start 292: psimrcc-fd-freq2; 289/411 Test #282: op,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:25784,Test,Test,25784,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,; 28/411 Test #24: cc13 ............................. Passed 44.47 sec; Start 302: pywrap-cbs1; 29/411 Test #302: pywrap-cbs1 ...................... Passed 22.59 sec; Start 13: cbs-xtpl-alpha; 30/411 Test #18: cbs-xtpl-func .................... Passed 352.83 sec; Start 320: sapt6; 31/411 Test #13: cbs-xtpl-alpha ................... Passed 65.50 sec; Start 114: dcft8; 32/411 Test #114: dcft8 ............................ Passed 30.70 sec; Start 28: cc13d; 33/411 Test #112: dcft6 ............................ Passed 124.86 sec; Start 31: cc16; 34/411 Test #31: cc16 ............................. Passed 27.72 sec; Start 155: dfscf-bz2; 35/411 Test #28: cc13d ............................ Passed 36.88 sec; Start 183: isapt2; 36/411 Test #373: dft-custom-mgga .................. Passed 180.02 sec; Start 281: opt-irc-2; 37/411 Test #320: sapt6 ............................ Passed 146.10 sec; Start 44: cc29; 38/411 Test #193: fd-freq-energy-large ............. Passed 471.67 sec; Start 97: cisd-opt-fd; 39/411 Test #44: cc29 ............................. Passed 47.89 sec; Start 379: cc-module; 40/411 Test #379: cc-module ........................ Passed 19.81 sec; Start 70: cc52; 41/411 Test #281: opt-irc-2 ........................ Passed 78.54 sec; Start 347: sapt-dft2; 42/411 Test #97: cisd-opt-fd ...................... Passed 100.96 sec; Start 25: cc13a; 43/411 Test #181: fsapt-allterms ................... Passed 615.37 sec; Start 113: dcft7; 44/411 Test #155: dfscf-bz2 ........................ Passed 142.35 sec; Start 205: frac-traverse; 45/411 Test #183: isapt2 ........................... Passed 139.06 sec; Start 316: sapt2; 46/411 Test #70: cc52 ............................. Passed 58.41 sec; Start 318: sapt4; 47/411 Test #347: sapt-dft2 ........................ Passed 116.92 sec; Start 325: scf-bz2; 48/411 Test #325: scf-bz2 .......................... Passed 118.46 sec; Start 386: cookbook-rohf-orb-rot; 49/411 Test #25: cc13a ............................ Passed 209.64 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:3816,Test,Test,3816,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,; 287/411 Test #298: pubchem2 ......................... Passed 1.42 sec; Start 299: pywrap-alias; 288/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 19.59 sec; Start 300: pywrap-all; 289/411 Test #291: psimrcc-fd-freq1 ................. Passed 18.86 sec; Start 301: pywrap-basis; 290/411 Test #279: opt14 ............................ Passed 78.18 sec; Start 302: pywrap-cbs1; 291/411 Test #296: psithon2 ......................... Passed 23.99 sec; Start 303: pywrap-checkrun-convcrit; 292/411 Test #301: pywrap-basis ..................... Passed 17.91 sec; Start 304: pywrap-checkrun-rhf; 293/411 Test #303: pywrap-checkrun-convcrit ......... Passed 23.44 sec; Start 305: pywrap-checkrun-rohf; 294/411 Test #162: dft-grad-lr3 ..................... Passed 452.68 sec; Start 306: pywrap-checkrun-uhf; 295/411 Test #145: dfomp2-grad3 ..................... Passed 500.36 sec; Start 307: pywrap-db1; 296/411 Test #297: pubchem1 ......................... Passed 55.72 sec; Start 308: pywrap-db3; 297/411 Test #308: pywrap-db3 ....................... Passed 0.81 sec; Start 309: pywrap-molecule; 298/411 Test #309: pywrap-molecule .................. Passed 1.16 sec; Start 310: rasci-c2-active; 299/411 Test #280: opt-irc-1 ........................ Passed 99.47 sec; Start 311: rasci-h2o; 300/411 Test #311: rasci-h2o ........................ Passed 1.42 sec; Start 312: rasci-ne; 301/411 Test #310: rasci-c2-active .................. Passed 4.22 sec; Start 313: rasscf-sp; 302/411 Test #299: pywrap-alias ..................... Passed 60.63 sec; Start 314: sad1; 303/411 Test #292: psimrcc-fd-freq2 ................. Passed 77.97 sec; Start 315: sapt1; 304/411 Test #314: sad1 ............................. Passed 3.59 sec; Start 317: sapt3; 305/411 Test #313: rasscf-sp ........................ Passed 21.47 sec; Start 319: sapt5; 306/411 Test #315: sapt1 ............................ Passed 18.39 sec; Start 320: sapt6; 307/411 Test #307: pywrap-db1 ....................... Passed 41.68 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:27706,Test,Test,27706,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,; 288/411 Test #298: pubchem2 ......................... Passed 1.44 sec; Start 300: pywrap-all; 289/411 Test #291: psimrcc-fd-freq1 ................. Passed 25.01 sec; Start 301: pywrap-basis; 290/411 Test #295: psithon1 ......................... Passed 15.32 sec; Start 302: pywrap-cbs1; 291/411 Test #296: psithon2 ......................... Passed 26.42 sec; Start 303: pywrap-checkrun-convcrit; 292/411 Test #301: pywrap-basis ..................... Passed 18.33 sec; Start 304: pywrap-checkrun-rhf; 293/411 Test #279: opt14 ............................ Passed 79.56 sec; Start 305: pywrap-checkrun-rohf; 294/411 Test #297: pubchem1 ......................... Passed 57.25 sec; Start 306: pywrap-checkrun-uhf; 295/411 Test #303: pywrap-checkrun-convcrit ......... Passed 33.68 sec; Start 307: pywrap-db1; 296/411 Test #292: psimrcc-fd-freq2 ................. Passed 84.12 sec; Start 308: pywrap-db3; 297/411 Test #308: pywrap-db3 ....................... Passed 0.69 sec; Start 309: pywrap-molecule; 298/411 Test #309: pywrap-molecule .................. Passed 1.03 sec; Start 310: rasci-c2-active; 299/411 Test #310: rasci-c2-active .................. Passed 7.15 sec; Start 311: rasci-h2o; 300/411 Test #280: opt-irc-1 ........................ Passed 113.20 sec; Start 312: rasci-ne; 301/411 Test #311: rasci-h2o ........................ Passed 2.14 sec; Start 313: rasscf-sp; 302/411 Test #103: dcft-grad1 ....................... Passed 694.99 sec; Start 314: sad1; 303/411 Test #314: sad1 ............................. Passed 4.30 sec; Start 315: sapt1; 304/411 Test #307: pywrap-db1 ....................... Passed 43.56 sec; Start 317: sapt3; 305/411 Test #313: rasscf-sp ........................ Passed 18.30 sec; Start 319: sapt5; 306/411 Test #299: pywrap-alias ..................... Passed 96.68 sec; Start 320: sapt6; 307/411 Test #315: sapt1 ............................ Passed 18.51 sec; Start 321: sapt-dft-api; 308/411 Test #312: rasci-ne ......................... Passed 34.65 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:27827,Test,Test,27827,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,; 290/411 Test #276: opt11 ............................ Passed 34.23 sec; Start 302: pywrap-cbs1; 291/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 18.20 sec; Start 303: pywrap-checkrun-convcrit; 292/411 Test #296: psithon2 ......................... Passed 15.89 sec; Start 304: pywrap-checkrun-rhf; 293/411 Test #301: pywrap-basis ..................... Passed 14.03 sec; Start 305: pywrap-checkrun-rohf; 294/411 Test #303: pywrap-checkrun-convcrit ......... Passed 16.60 sec; Start 306: pywrap-checkrun-uhf; 295/411 Test #299: pywrap-alias ..................... Passed 38.36 sec; Start 307: pywrap-db1; 296/411 Test #297: pubchem1 ......................... Passed 51.64 sec; Start 308: pywrap-db3; 297/411 Test #280: opt-irc-1 ........................ Passed 72.08 sec; Start 309: pywrap-molecule; 298/411 Test #308: pywrap-db3 ....................... Passed 0.71 sec; Start 310: rasci-c2-active; 299/411 Test #309: pywrap-molecule .................. Passed 1.10 sec; Start 311: rasci-h2o; 300/411 Test #279: opt14 ............................ Passed 76.44 sec; Start 312: rasci-ne; 301/411 Test #311: rasci-h2o ........................ Passed 1.35 sec; Start 313: rasscf-sp; 302/411 Test #310: rasci-c2-active .................. Passed 4.30 sec; Start 314: sad1; 303/411 Test #240: ocepa-freq1 ...................... Passed 155.96 sec; Start 315: sapt1; 304/411 Test #314: sad1 ............................. Passed 2.65 sec; Start 317: sapt3; 305/411 Test #292: psimrcc-fd-freq2 ................. Passed 68.11 sec; Start 319: sapt5; 306/411 Test #313: rasscf-sp ........................ Passed 19.84 sec; Start 320: sapt6; 307/411 Test #315: sapt1 ............................ Passed 18.11 sec; Start 321: sapt-dft-api; 308/411 Test #307: pywrap-db1 ....................... Passed 40.55 sec; Start 322: sapt-dft-lrc; 309/411 Test #302: pywrap-cbs1 ...................... Passed 78.86 sec; Start 323: sapt7; 310/411 Test #312: rasci-ne ......................... Passed 35.47 sec; Start 32,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:27962,Test,Test,27962,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,; 299/411 Test #301: pywrap-basis ..................... Passed 18.55 sec; Start 303: pywrap-checkrun-convcrit; 300/411 Test #297: pubchem1 ......................... Passed 53.99 sec; Start 304: pywrap-checkrun-rhf; 301/411 Test #292: psimrcc-fd-freq2 ................. Passed 78.24 sec; Start 305: pywrap-checkrun-rohf; 302/411 Test #303: pywrap-checkrun-convcrit ......... Passed 31.23 sec; Start 306: pywrap-checkrun-uhf; 303/411 Test #299: pywrap-alias ..................... Passed 102.71 sec; Start 307: pywrap-db1; 304/411 Test #281: opt-irc-2 ........................ Passed 204.24 sec; Start 308: pywrap-db3; 305/411 Test #308: pywrap-db3 ....................... Passed 0.70 sec; Start 309: pywrap-molecule; 306/411 Test #309: pywrap-molecule .................. Passed 1.03 sec; Start 310: rasci-c2-active; 307/411 Test #307: pywrap-db1 ....................... Passed 40.74 sec; Start 311: rasci-h2o; 308/411 Test #310: rasci-c2-active .................. Passed 6.95 sec; Start 312: rasci-ne; 309/411 Test #311: rasci-h2o ........................ Passed 5.24 sec; Start 313: rasscf-sp; 310/411 Test #312: rasci-ne ......................... Passed 35.09 sec; Start 314: sad1; 311/411 Test #314: sad1 ............................. Passed 3.73 sec; Start 315: sapt1; 312/411 Test #315: sapt1 ............................ Passed 18.44 sec; Start 317: sapt3; 313/411 Test #313: rasscf-sp ........................ Passed 57.25 sec; Start 319: sapt5; 314/411 Test #240: ocepa-freq1 ...................... Passed 660.21 sec; Start 320: sapt6; 315/411 Test #302: pywrap-cbs1 ...................... Passed 205.80 sec; Start 321: sapt-dft-api; 316/411 Test #321: sapt-dft-api ..................... Passed 18.52 sec; Start 322: sapt-dft-lrc; 317/411 Test #317: sapt3 ............................ Passed 71.48 sec; Start 323: sapt7; 318/411 Test #322: sapt-dft-lrc ..................... Passed 21.17 sec; Start 324: sapt8; 319/411 Test #319: sapt5 ............................ Passed 72.33 sec; Start 326: s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:28706,Test,Test,28706,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,; 30/411 Test #155: dfscf-bz2 ........................ Passed 128.62 sec; Start 70: cc52; 31/411 Test #281: opt-irc-2 ........................ Passed 81.98 sec; Start 44: cc29; 32/411 Test #193: fd-freq-energy-large ............. Passed 433.45 sec; Start 13: cbs-xtpl-alpha; 33/411 Test #44: cc29 ............................. Passed 45.91 sec; Start 359: tu6-cp-ne2; 34/411 Test #70: cc52 ............................. Passed 61.27 sec; Start 24: cc13; 35/411 Test #359: tu6-cp-ne2 ....................... Passed 50.68 sec; Start 28: cc13d; 36/411 Test #347: sapt-dft2 ........................ Passed 108.66 sec; Start 168: dft1; 37/411 Test #183: isapt2 ........................... Passed 128.97 sec; Start 161: dft-grad-lr2; 38/411 Test #24: cc13 ............................. Passed 54.02 sec; Start 25: cc13a; 39/411 Test #181: fsapt-allterms ................... Passed 555.05 sec; Start 113: dcft7; 40/411 Test #28: cc13d ............................ Passed 32.99 sec; Start 205: frac-traverse; 41/411 Test #13: cbs-xtpl-alpha ................... Passed 97.63 sec; Start 316: sapt2; 42/411 Test #168: dft1 ............................. Passed 85.27 sec; Start 318: sapt4; 43/411 Test #161: dft-grad-lr2 ..................... Passed 86.87 sec; Start 325: scf-bz2; 44/411 Test #113: dcft7 ............................ Passed 189.57 sec; Start 97: cisd-opt-fd; 45/411 Test #325: scf-bz2 .......................... Passed 111.34 sec; Start 47: cc31; 46/411 Test #25: cc13a ............................ Passed 206.71 sec; Start 31: cc16; 47/411 Test #205: frac-traverse .................... Passed 194.22 sec; Start 371: dft-custom-dhdf; 48/411 Test #278: opt13 ............................ Passed 712.54 sec; Start 280: opt-irc-1; 49/411 Test #31: cc16 ............................. Passed 28.06 sec; Start 379: cc-module; 50/411 Test #47: cc31 ............................. Passed 54.32 sec; Start 75: cc6; 51/411 Test #379: cc-module ........................ Passed 26.01 sec; Start 386: cookbook-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:4060,Test,Test,4060,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,; 305/411 Test #301: pywrap-basis ..................... Passed 13.12 sec; Start 302: pywrap-cbs1; 306/411 Test #302: pywrap-cbs1 ...................... Passed 36.61 sec; Start 303: pywrap-checkrun-convcrit; 307/411 Test #303: pywrap-checkrun-convcrit ......... Passed 8.53 sec; Start 304: pywrap-checkrun-rhf; 308/411 Test #304: pywrap-checkrun-rhf .............. Passed 92.91 sec; Start 305: pywrap-checkrun-rohf; 309/411 Test #305: pywrap-checkrun-rohf ............. Passed 31.27 sec; Start 306: pywrap-checkrun-uhf; 310/411 Test #306: pywrap-checkrun-uhf .............. Passed 63.05 sec; Start 307: pywrap-db1; 311/411 Test #307: pywrap-db1 ....................... Passed 33.95 sec; Start 308: pywrap-db3; 312/411 Test #308: pywrap-db3 ....................... Passed 0.80 sec; Start 309: pywrap-molecule; 313/411 Test #309: pywrap-molecule .................. Passed 1.17 sec; Start 310: rasci-c2-active; 314/411 Test #310: rasci-c2-active .................. Passed 3.43 sec; Start 311: rasci-h2o; 315/411 Test #311: rasci-h2o ........................ Passed 1.02 sec; Start 312: rasci-ne; 316/411 Test #312: rasci-ne ......................... Passed 26.87 sec; Start 313: rasscf-sp; 317/411 Test #313: rasscf-sp ........................ Passed 2.99 sec; Start 314: sad1; 318/411 Test #314: sad1 ............................. Passed 2.34 sec; Start 315: sapt1; 319/411 Test #315: sapt1 ............................ Passed 15.26 sec; Start 317: sapt3; 320/411 Test #317: sapt3 ............................ Passed 65.42 sec; Start 319: sapt5; 321/411 Test #319: sapt5 ............................ Passed 59.80 sec; Start 320: sapt6; 322/411 Test #320: sapt6 ............................ Passed 124.23 sec; Start 321: sapt-dft-api; 323/411 Test #321: sapt-dft-api ..................... Passed 15.41 sec; Start 322: sapt-dft-lrc; 324/411 Test #322: sapt-dft-lrc ..................... Passed 18.05 sec; Start 323: sapt7; 325/411 Test #323: sapt7 ............................ Passed 28.88 sec; Start 324:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:28923,Test,Test,28923,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,; 31/411 Test #281: opt-irc-2 ........................ Passed 81.98 sec; Start 44: cc29; 32/411 Test #193: fd-freq-energy-large ............. Passed 433.45 sec; Start 13: cbs-xtpl-alpha; 33/411 Test #44: cc29 ............................. Passed 45.91 sec; Start 359: tu6-cp-ne2; 34/411 Test #70: cc52 ............................. Passed 61.27 sec; Start 24: cc13; 35/411 Test #359: tu6-cp-ne2 ....................... Passed 50.68 sec; Start 28: cc13d; 36/411 Test #347: sapt-dft2 ........................ Passed 108.66 sec; Start 168: dft1; 37/411 Test #183: isapt2 ........................... Passed 128.97 sec; Start 161: dft-grad-lr2; 38/411 Test #24: cc13 ............................. Passed 54.02 sec; Start 25: cc13a; 39/411 Test #181: fsapt-allterms ................... Passed 555.05 sec; Start 113: dcft7; 40/411 Test #28: cc13d ............................ Passed 32.99 sec; Start 205: frac-traverse; 41/411 Test #13: cbs-xtpl-alpha ................... Passed 97.63 sec; Start 316: sapt2; 42/411 Test #168: dft1 ............................. Passed 85.27 sec; Start 318: sapt4; 43/411 Test #161: dft-grad-lr2 ..................... Passed 86.87 sec; Start 325: scf-bz2; 44/411 Test #113: dcft7 ............................ Passed 189.57 sec; Start 97: cisd-opt-fd; 45/411 Test #325: scf-bz2 .......................... Passed 111.34 sec; Start 47: cc31; 46/411 Test #25: cc13a ............................ Passed 206.71 sec; Start 31: cc16; 47/411 Test #205: frac-traverse .................... Passed 194.22 sec; Start 371: dft-custom-dhdf; 48/411 Test #278: opt13 ............................ Passed 712.54 sec; Start 280: opt-irc-1; 49/411 Test #31: cc16 ............................. Passed 28.06 sec; Start 379: cc-module; 50/411 Test #47: cc31 ............................. Passed 54.32 sec; Start 75: cc6; 51/411 Test #379: cc-module ........................ Passed 26.01 sec; Start 386: cookbook-rohf-orb-rot; 52/411 Test #280: opt-irc-1 ........................ Passed 63.89 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:4148,Test,Test,4148,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,; 317/411 Test #329: scf-guess-read2 .................. Passed 5.42 sec; Start 332: scf-occ; 318/411 Test #331: scf1 ............................. Passed 4.19 sec; Start 333: scf2; 319/411 Test #332: scf-occ .......................... Passed 2.05 sec; Start 334: scf3; 320/411 Test #333: scf2 ............................. Passed 1.46 sec; Start 335: scf4; 321/411 Test #334: scf3 ............................. Passed 1.04 sec; Start 336: scf5; 322/411 Test #281: opt-irc-2 ........................ Passed 158.20 sec; Start 337: scf6; 323/411 Test #335: scf4 ............................. Passed 10.60 sec; Start 338: scf7; 324/411 Test #323: sapt7 ............................ Passed 35.42 sec; Start 339: scf-property; 325/411 Test #326: scf-ecp .......................... Passed 28.26 sec; Start 340: soscf-large; 326/411 Test #339: scf-property ..................... Passed 5.15 sec; Start 341: soscf-ref; 327/411 Test #341: soscf-ref ........................ Passed 7.97 sec; Start 342: soscf-dft; 328/411 Test #338: scf7 ............................. Passed 13.37 sec; Start 343: stability1; 329/411 Test #317: sapt3 ............................ Passed 78.35 sec; Start 344: dfep2-1; 330/411 Test #227: mp2-def2 ......................... Passed 415.63 sec; Start 345: dfep2-2; 331/411 Test #343: stability1 ....................... Passed 3.30 sec; Start 346: sapt-dft1; 332/411 Test #344: dfep2-1 .......................... Passed 3.47 sec; Start 347: sapt-dft2; 333/411 Test #345: dfep2-2 .......................... Passed 2.48 sec; Start 348: sapt-compare; 334/411 Test #340: soscf-large ...................... Passed 14.85 sec; Start 349: sapt-sf1; 335/411 Test #349: sapt-sf1 ......................... Passed 2.04 sec; Start 350: dft-custom; 336/411 Test #319: sapt5 ............................ Passed 74.55 sec; Start 351: dft-reference; 337/411 Test #337: scf6 ............................. Passed 34.05 sec; Start 352: stability2; 338/411 Test #336: scf5 ............................. Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:30584,Test,Test,30584,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,; 32/411 Test #114: dcft8 ............................ Passed 30.70 sec; Start 28: cc13d; 33/411 Test #112: dcft6 ............................ Passed 124.86 sec; Start 31: cc16; 34/411 Test #31: cc16 ............................. Passed 27.72 sec; Start 155: dfscf-bz2; 35/411 Test #28: cc13d ............................ Passed 36.88 sec; Start 183: isapt2; 36/411 Test #373: dft-custom-mgga .................. Passed 180.02 sec; Start 281: opt-irc-2; 37/411 Test #320: sapt6 ............................ Passed 146.10 sec; Start 44: cc29; 38/411 Test #193: fd-freq-energy-large ............. Passed 471.67 sec; Start 97: cisd-opt-fd; 39/411 Test #44: cc29 ............................. Passed 47.89 sec; Start 379: cc-module; 40/411 Test #379: cc-module ........................ Passed 19.81 sec; Start 70: cc52; 41/411 Test #281: opt-irc-2 ........................ Passed 78.54 sec; Start 347: sapt-dft2; 42/411 Test #97: cisd-opt-fd ...................... Passed 100.96 sec; Start 25: cc13a; 43/411 Test #181: fsapt-allterms ................... Passed 615.37 sec; Start 113: dcft7; 44/411 Test #155: dfscf-bz2 ........................ Passed 142.35 sec; Start 205: frac-traverse; 45/411 Test #183: isapt2 ........................... Passed 139.06 sec; Start 316: sapt2; 46/411 Test #70: cc52 ............................. Passed 58.41 sec; Start 318: sapt4; 47/411 Test #347: sapt-dft2 ........................ Passed 116.92 sec; Start 325: scf-bz2; 48/411 Test #325: scf-bz2 .......................... Passed 118.46 sec; Start 386: cookbook-rohf-orb-rot; 49/411 Test #25: cc13a ............................ Passed 209.64 sec; Start 161: dft-grad-lr2; 50/411 Test #386: cookbook-rohf-orb-rot ............ Passed 21.11 sec; Start 47: cc31; 51/411 Test #113: dcft7 ............................ Passed 211.30 sec; Start 168: dft1; 52/411 Test #205: frac-traverse .................... Passed 210.26 sec; Start 371: dft-custom-dhdf; 53/411 Test #47: cc31 ............................. Passed 35.29 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:4176,Test,Test,4176,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,; 325/411 Test #330: scf-bs ........................... Passed 2.28 sec; Start 332: scf-occ; 326/411 Test #326: scf-ecp .......................... Passed 34.58 sec; Start 333: scf2; 327/411 Test #333: scf2 ............................. Passed 1.69 sec; Start 334: scf3; 328/411 Test #332: scf-occ .......................... Passed 3.43 sec; Start 335: scf4; 329/411 Test #334: scf3 ............................. Passed 1.53 sec; Start 336: scf5; 330/411 Test #331: scf1 ............................. Passed 5.00 sec; Start 337: scf6; 331/411 Test #335: scf4 ............................. Passed 15.70 sec; Start 338: scf7; 332/411 Test #338: scf7 ............................. Passed 19.73 sec; Start 339: scf-property; 333/411 Test #339: scf-property ..................... Passed 6.13 sec; Start 340: soscf-large; 334/411 Test #336: scf5 ............................. Passed 47.10 sec; Start 341: soscf-ref; 335/411 Test #340: soscf-large ...................... Passed 14.32 sec; Start 342: soscf-dft; 336/411 Test #337: scf6 ............................. Passed 55.58 sec; Start 343: stability1; 337/411 Test #343: stability1 ....................... Passed 4.70 sec; Start 344: dfep2-1; 338/411 Test #341: soscf-ref ........................ Passed 17.33 sec; Start 345: dfep2-2; 339/411 Test #344: dfep2-1 .......................... Passed 4.28 sec; Start 346: sapt-dft1; 340/411 Test #345: dfep2-2 .......................... Passed 2.36 sec; Start 347: sapt-dft2; 341/411 Test #320: sapt6 ............................ Passed 163.62 sec; Start 348: sapt-compare; 342/411 Test #342: soscf-dft ........................ Passed 32.27 sec; Start 349: sapt-sf1; 343/411 Test #349: sapt-sf1 ......................... Passed 1.95 sec; Start 350: dft-custom; 344/411 Test #346: sapt-dft1 ........................ Passed 24.71 sec; Start 351: dft-reference; 345/411 Test #351: dft-reference .................... Passed 3.46 sec; Start 352: stability2; 346/411 Test #352: stability2 ....................... Pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:31202,Test,Test,31202,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,; 336/415 Test #275: opt1-fd .......................... Passed 23.31 sec; Start 281: opt6; 337/415 Test #278: opt3 ............................. Passed 8.51 sec; Start 282: opt7; 338/415 Test #277: opt2-fd .......................... Passed 16.33 sec; Start 283: opt8; 339/415 Test #280: opt5 ............................. Passed 5.69 sec; Start 284: opt9; 340/415 Test #279: opt4 ............................. Passed 13.08 sec; Start 285: opt11; 341/415 Test #276: opt2 ............................. Passed 34.26 sec; Start 286: opt12; 342/415 Test #284: opt9 ............................. Passed 26.51 sec; Start 288: opt14; 343/415 Test #281: opt6 ............................. Passed 30.69 sec; Start 289: opt-irc-1; 344/415 Test #286: opt12 ............................ Passed 23.11 sec; Start 290: opt-irc-2; 345/415 Test #268: omp3-3 ........................... Passed 157.73 sec; Start 291: opt-irc-3; 346/415 Test #283: opt8 ............................. Passed 41.15 sec; Start 294: props1; 347/415 Test #294: props1 ........................... Passed 6.51 sec; Start 295: props2; 348/415 Test #282: opt7 ............................. Passed 53.62 sec; Start 296: props3; 349/415 Test #295: props2 ........................... Passed 9.79 sec; Start 300: psimrcc-ccsd_t-4; 350/415 Test #296: props3 ........................... Passed 6.31 sec; Start 301: psimrcc-fd-freq1; 351/415 Test #285: opt11 ............................ Passed 62.59 sec; Start 302: psimrcc-fd-freq2; 352/415 Test #272: omp3-grad2 ....................... Passed 118.41 sec; Start 306: psithon2; 353/415 Test #300: psimrcc-ccsd_t-4 ................. Passed 10.81 sec; Start 307: pubchem1; 354/415 Test #291: opt-irc-3 ........................ Passed 34.77 sec; Start 308: pubchem2; 355/415 Test #308: pubchem2 ......................... Passed 2.65 sec; Start 311: pywrap-basis; 356/415 Test #269: omp3-4 ........................... Passed 164.96 sec; Start 313: pywrap-checkrun-convcrit; 357/415 Test #301: psimrcc-fd-fr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:32558,Test,Test,32558,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,; 337/415 Test #278: opt3 ............................. Passed 8.51 sec; Start 282: opt7; 338/415 Test #277: opt2-fd .......................... Passed 16.33 sec; Start 283: opt8; 339/415 Test #280: opt5 ............................. Passed 5.69 sec; Start 284: opt9; 340/415 Test #279: opt4 ............................. Passed 13.08 sec; Start 285: opt11; 341/415 Test #276: opt2 ............................. Passed 34.26 sec; Start 286: opt12; 342/415 Test #284: opt9 ............................. Passed 26.51 sec; Start 288: opt14; 343/415 Test #281: opt6 ............................. Passed 30.69 sec; Start 289: opt-irc-1; 344/415 Test #286: opt12 ............................ Passed 23.11 sec; Start 290: opt-irc-2; 345/415 Test #268: omp3-3 ........................... Passed 157.73 sec; Start 291: opt-irc-3; 346/415 Test #283: opt8 ............................. Passed 41.15 sec; Start 294: props1; 347/415 Test #294: props1 ........................... Passed 6.51 sec; Start 295: props2; 348/415 Test #282: opt7 ............................. Passed 53.62 sec; Start 296: props3; 349/415 Test #295: props2 ........................... Passed 9.79 sec; Start 300: psimrcc-ccsd_t-4; 350/415 Test #296: props3 ........................... Passed 6.31 sec; Start 301: psimrcc-fd-freq1; 351/415 Test #285: opt11 ............................ Passed 62.59 sec; Start 302: psimrcc-fd-freq2; 352/415 Test #272: omp3-grad2 ....................... Passed 118.41 sec; Start 306: psithon2; 353/415 Test #300: psimrcc-ccsd_t-4 ................. Passed 10.81 sec; Start 307: pubchem1; 354/415 Test #291: opt-irc-3 ........................ Passed 34.77 sec; Start 308: pubchem2; 355/415 Test #308: pubchem2 ......................... Passed 2.65 sec; Start 311: pywrap-basis; 356/415 Test #269: omp3-4 ........................... Passed 164.96 sec; Start 313: pywrap-checkrun-convcrit; 357/415 Test #301: psimrcc-fd-freq1 ................. Passed 23.50 sec; Start 314: pywrap-checkrun-rhf; 358/415 Test #270,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:32648,Test,Test,32648,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,; 35/411 Test #359: tu6-cp-ne2 ....................... Passed 50.68 sec; Start 28: cc13d; 36/411 Test #347: sapt-dft2 ........................ Passed 108.66 sec; Start 168: dft1; 37/411 Test #183: isapt2 ........................... Passed 128.97 sec; Start 161: dft-grad-lr2; 38/411 Test #24: cc13 ............................. Passed 54.02 sec; Start 25: cc13a; 39/411 Test #181: fsapt-allterms ................... Passed 555.05 sec; Start 113: dcft7; 40/411 Test #28: cc13d ............................ Passed 32.99 sec; Start 205: frac-traverse; 41/411 Test #13: cbs-xtpl-alpha ................... Passed 97.63 sec; Start 316: sapt2; 42/411 Test #168: dft1 ............................. Passed 85.27 sec; Start 318: sapt4; 43/411 Test #161: dft-grad-lr2 ..................... Passed 86.87 sec; Start 325: scf-bz2; 44/411 Test #113: dcft7 ............................ Passed 189.57 sec; Start 97: cisd-opt-fd; 45/411 Test #325: scf-bz2 .......................... Passed 111.34 sec; Start 47: cc31; 46/411 Test #25: cc13a ............................ Passed 206.71 sec; Start 31: cc16; 47/411 Test #205: frac-traverse .................... Passed 194.22 sec; Start 371: dft-custom-dhdf; 48/411 Test #278: opt13 ............................ Passed 712.54 sec; Start 280: opt-irc-1; 49/411 Test #31: cc16 ............................. Passed 28.06 sec; Start 379: cc-module; 50/411 Test #47: cc31 ............................. Passed 54.32 sec; Start 75: cc6; 51/411 Test #379: cc-module ........................ Passed 26.01 sec; Start 386: cookbook-rohf-orb-rot; 52/411 Test #280: opt-irc-1 ........................ Passed 63.89 sec; Start 279: opt14; 53/411 Test #386: cookbook-rohf-orb-rot ............ Passed 21.41 sec; Start 230: mp2-module; 54/411 Test #97: cisd-opt-fd ...................... Passed 103.47 sec; Start 302: pywrap-cbs1; 55/411 Test #371: dft-custom-dhdf .................. Passed 85.26 sec; Start 58: cc41; 56/411 Test #75: cc6 .............................. Passed 50.52 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:4511,Test,Test,4511,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['Test'],['Test']
Testability,; 36/411 Test #114: dcft8 ............................ Passed 438.46 sec; Start 44: cc29; 37/411 Test #183: isapt2 ........................... Passed 126.68 sec; Start 47: cc31; 38/411 Test #347: sapt-dft2 ........................ Passed 120.25 sec; Start 31: cc16; 39/411 Test #29: cc14 ............................. Passed 394.66 sec; Start 386: cookbook-rohf-orb-rot; 40/411 Test #281: opt-irc-2 ........................ Passed 199.50 sec; Start 24: cc13; 41/411 Test #44: cc29 ............................. Passed 195.66 sec; Start 70: cc52; 42/411 Test #47: cc31 ............................. Passed 181.89 sec; Start 28: cc13d; 43/411 Test #379: cc-module ........................ Passed 306.49 sec; Start 161: dft-grad-lr2; 44/411 Test #13: cbs-xtpl-alpha ................... Passed 354.70 sec; Start 25: cc13a; 45/411 Test #31: cc16 ............................. Passed 243.41 sec; Start 113: dcft7; 46/411 Test #161: dft-grad-lr2 ..................... Passed 104.85 sec; Start 205: frac-traverse; 47/411 Test #70: cc52 ............................. Passed 164.44 sec; Start 316: sapt2; 48/411 Test #386: cookbook-rohf-orb-rot ............ Passed 284.29 sec; Start 318: sapt4; 49/411 Test #28: cc13d ............................ Passed 209.13 sec; Start 325: scf-bz2; 50/411 Test #24: cc13 ............................. Passed 257.74 sec; Start 168: dft1; 51/411 Test #205: frac-traverse .................... Passed 211.75 sec; Start 371: dft-custom-dhdf; 52/411 Test #325: scf-bz2 .......................... Passed 122.09 sec; Start 58: cc41; 53/411 Test #168: dft1 ............................. Passed 104.02 sec; Start 75: cc6; 54/411 Test #371: dft-custom-dhdf .................. Passed 89.70 sec; Start 279: opt14; 55/411 Test #75: cc6 .............................. Passed 81.73 sec; Start 69: cc51; 56/411 Test #58: cc41 ............................. Passed 85.94 sec; Start 60: cc43; 57/411 Test #113: dcft7 ............................ Passed 343.68 sec; Start 317: sapt3; 58/411 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:4578,Test,Test,4578,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,; 362/411 Test #376: pywrap-align ..................... Passed 4.30 sec; Start 377: pywrap-align-chiral; 363/411 Test #377: pywrap-align-chiral .............. Passed 3.38 sec; Start 378: mints12; 364/411 Test #378: mints12 .......................... Passed 1.36 sec; Start 379: cc-module; 365/411 Test #305: pywrap-checkrun-rohf ............. Passed 197.70 sec; Start 380: psi4numpy-cphf; 366/411 Test #380: psi4numpy-cphf ................... Passed 1.32 sec; Start 381: psi4numpy-dfmp2; 367/411 Test #381: psi4numpy-dfmp2 .................. Passed 2.03 sec; Start 382: psi4numpy-rhf; 368/411 Test #382: psi4numpy-rhf .................... Passed 1.00 sec; Start 383: psi4numpy-rhf-gradient; 369/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.50 sec; Start 384: psi4numpy-rhf-hessian; 370/411 Test #375: pywrap-bfs ....................... Passed 25.30 sec; Start 385: psi4numpy-fci; 371/411 Test #374: dft-custom-gga ................... Passed 29.94 sec; Start 386: cookbook-rohf-orb-rot; 372/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.48 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.23 sec; Start 388: python-curve; 374/411 Test #385: psi4numpy-fci .................... Passed 5.25 sec; Start 389: python-pubchem; 375/411 Test #388: python-curve ..................... Passed 2.96 sec; Start 390: python-mints9; 376/411 Test #390: python-mints9 .................... Passed 1.96 sec; Start 391: python-mints2; 377/411 Test #391: python-mints2 .................... Passed 2.41 sec; Start 392: python-cc54; 378/411 Test #320: sapt6 ............................ Passed 164.21 sec; Start 393: python-3-index-transforms; 379/411 Test #162: dft-grad-lr3 ..................... Passed 463.80 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.91 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 397: json-v11-energy; 382/411 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:34765,Test,Test,34765,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,; 365/412 Test #289: psimrcc-ccsd_t-2 ................. Passed 3.79 sec; Start 411: skeletonsointegrals; 366/412 Test #382: psi4numpy-dfmp2 .................. Passed 2.36 sec; Start 396: python-mints13; 367/412 Test #189: fci-tdm .......................... Passed 2.50 sec; Start 221: mints-helper; 368/412 Test #391: python-mints9 .................... Passed 1.96 sec; Start 384: psi4numpy-rhf-gradient; 369/412 Test #362: x2c2 ............................. Passed 3.13 sec; Start 354: tu1-h2o-energy; 370/412 Test #331: scf-bs ........................... Passed 2.33 sec; Start 103: decontract; 371/412 Test #355: tu2-ch2-energy ................... Passed 1.51 sec; Start 288: psimrcc-ccsd_t-1; 372/412 Test #353: stability2 ....................... Passed 2.45 sec; Start 381: psi4numpy-cphf; 373/412 Test #224: molden1 .......................... Passed 14.30 sec; Start 405: json-schema-1-properties; 374/412 Test #222: mints9 ........................... Passed 1.97 sec; Start 401: json-schema-1-ghost; 375/412 Test #211: mcscf2 ........................... Passed 2.51 sec; Start 397: python-memdfjk; 376/412 Test #411: skeletonsointegrals .............. Passed 1.93 sec; Start 299: pubchem2; 377/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.52 sec; Start 388: python-energy; 378/412 Test #221: mints-helper ..................... Passed 1.67 sec; Start 399: json-v11-gradient; 379/412 Test #223: mints10 .......................... Passed 2.18 sec; Start 335: scf3; 380/412 Test #396: python-mints13 ................... Passed 1.96 sec; Start 212: mcscf3; 381/412 Test #363: x2c3 ............................. Passed 3.02 sec; Start 379: mints12; 382/412 Test #354: tu1-h2o-energy ................... Passed 1.83 sec; Start 310: pywrap-molecule; 383/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 210: mcscf1; 384/412 Test #397: python-memdfjk ................... Passed 0.98 sec; Start 217: mints5; 385/412 Test #4: casscf-semi ...................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:35302,Test,Test,35302,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,; 367/411 Test #380: psi4numpy-cphf ................... Passed 1.36 sec; Start 382: psi4numpy-rhf; 368/411 Test #382: psi4numpy-rhf .................... Passed 0.81 sec; Start 383: psi4numpy-rhf-gradient; 369/411 Test #381: psi4numpy-dfmp2 .................. Passed 2.04 sec; Start 384: psi4numpy-rhf-hessian; 370/411 Test #383: psi4numpy-rhf-gradient ........... Passed 2.43 sec; Start 385: psi4numpy-fci; 371/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.52 sec; Start 386: cookbook-rohf-orb-rot; 372/411 Test #385: psi4numpy-fci .................... Passed 4.41 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.33 sec; Start 388: python-curve; 374/411 Test #240: ocepa-freq1 ...................... Passed 431.50 sec; Start 389: python-pubchem; 375/411 Test #388: python-curve ..................... Passed 3.42 sec; Start 390: python-mints9; 376/411 Test #375: pywrap-bfs ....................... Passed 25.37 sec; Start 391: python-mints2; 377/411 Test #390: python-mints9 .................... Passed 1.87 sec; Start 392: python-cc54; 378/411 Test #391: python-mints2 .................... Passed 2.43 sec; Start 393: python-3-index-transforms; 379/411 Test #374: dft-custom-gga ................... Passed 30.91 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.82 sec; Start 396: python-memdfjk; 381/411 Test #178: fsapt1 ........................... Passed 2162.17 sec; Start 397: json-v11-energy; 382/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 398: json-v11-gradient; 383/411 Test #320: sapt6 ............................ Passed 163.49 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 2.11 sec; Start 400: json-schema-1-ghost; 385/411 Test #397: json-v11-energy .................. Passed 3.25 sec; Start 401: json-schema-1-orient; 386/411 Test #400: json-schema-1-ghost .............. Passed 1.15 sec; Start 402: j,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:35317,Test,Test,35317,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['Test'],['Test']
Testability,; 367/411 Test #380: psi4numpy-cphf ................... Passed 1.91 sec; Start 382: psi4numpy-rhf; 368/411 Test #381: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 383: psi4numpy-rhf-gradient; 369/411 Test #382: psi4numpy-rhf .................... Passed 0.93 sec; Start 384: psi4numpy-rhf-hessian; 370/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.17 sec; Start 385: psi4numpy-fci; 371/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.93 sec; Start 386: cookbook-rohf-orb-rot; 372/411 Test #385: psi4numpy-fci .................... Passed 4.28 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.39 sec; Start 388: python-curve; 374/411 Test #388: python-curve ..................... Passed 3.19 sec; Start 389: python-pubchem; 375/411 Test #375: pywrap-bfs ....................... Passed 25.67 sec; Start 390: python-mints9; 376/411 Test #305: pywrap-checkrun-rohf ............. Passed 171.95 sec; Start 391: python-mints2; 377/411 Test #390: python-mints9 .................... Passed 2.08 sec; Start 392: python-cc54; 378/411 Test #374: dft-custom-gga ................... Passed 29.34 sec; Start 393: python-3-index-transforms; 379/411 Test #391: python-mints2 .................... Passed 3.28 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.88 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.92 sec; Start 397: json-v11-energy; 382/411 Test #397: json-v11-energy .................. Passed 3.85 sec; Start 398: json-v11-gradient; 383/411 Test #393: python-3-index-transforms ........ Passed 10.30 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 3.98 sec; Start 400: json-schema-1-ghost; 385/411 Test #400: json-schema-1-ghost .............. Passed 1.26 sec; Start 401: json-schema-1-orient; 386/411 Test #399: json-schema-1-energy ............. Passed 3.33 sec; Start 402: json-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:35288,Test,Test,35288,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,; 369/412 Test #383: psi4numpy-rhf .................... Passed 1.00 sec; Start 384: psi4numpy-rhf-gradient; 370/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.97 sec; Start 385: psi4numpy-rhf-hessian; 371/412 Test #228: mp2-def2 ......................... Passed 433.82 sec; Start 386: psi4numpy-fci; 372/412 Test #385: psi4numpy-rhf-hessian ............ Passed 3.24 sec; Start 387: cookbook-rohf-orb-rot; 373/412 Test #376: pywrap-bfs ....................... Passed 26.37 sec; Start 388: python-energy; 374/412 Test #388: python-energy .................... Passed 1.62 sec; Start 389: python-curve; 375/412 Test #386: psi4numpy-fci .................... Passed 9.39 sec; Start 390: python-pubchem; 376/412 Test #375: dft-custom-gga ................... Passed 34.06 sec; Start 391: python-mints9; 377/412 Test #389: python-curve ..................... Passed 4.70 sec; Start 392: python-mints2; 378/412 Test #391: python-mints9 .................... Passed 2.13 sec; Start 393: python-cc54; 379/412 Test #392: python-mints2 .................... Passed 3.94 sec; Start 394: python-3-index-transforms; 380/412 Test #321: sapt6 ............................ Passed 171.44 sec; Start 396: python-mints13; 381/412 Test #396: python-mints13 ................... Passed 1.98 sec; Start 397: python-memdfjk; 382/412 Test #397: python-memdfjk ................... Passed 1.74 sec; Start 398: json-v11-energy; 383/412 Test #394: python-3-index-transforms ........ Passed 12.36 sec; Start 399: json-v11-gradient; 384/412 Test #399: json-v11-gradient ................ Passed 1.56 sec; Start 400: json-schema-1-energy; 385/412 Test #398: json-v11-energy .................. Passed 4.06 sec; Start 401: json-schema-1-ghost; 386/412 Test #401: json-schema-1-ghost .............. Passed 1.76 sec; Start 402: json-schema-1-orient; 387/412 Test #402: json-schema-1-orient ............. Passed 2.50 sec; Start 403: json-schema-1-throws; 388/412 Test #400: json-schema-1-energy ............. Passed 5.58 sec; Start 4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:35486,Test,Test,35486,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,; 37/401 Test #47: cc31 ............................. Passed 131.54 sec; Start 61: cc44; 38/401 Test #74: cc6 .............................. Passed 78.78 sec; Start 12: cbs-parser; 39/401 Test #200: frac-ip-fitting .................. Passed 56.76 sec; Start 255: omp3-3; 40/401 Test #343: sapt-dft2 ........................ Passed 53.47 sec; Start 60: cc43; 41/401 Test #166: dft1-alt ......................... Passed 54.05 sec; Start 163: dft-b3lyp; 42/401 Test #44: cc29 ............................. Passed 150.02 sec; Start 233: nbody-he-cluster; 43/401 Test #29: cc14 ............................. Passed 290.28 sec; Start 46: cc30; 44/401 Test #31: cc16 ............................. Passed 204.91 sec; Start 143: dfomp2-grad2; 45/401 Test #114: dcft9 ............................ Passed 101.63 sec; Start 57: cc40; 46/401 Test #366: dft-custom-dhdf .................. Passed 49.28 sec; Start 257: omp3-5; 47/401 Test #301: pywrap-checkrun-rohf ............. Passed 555.72 sec; Start 272: opt11; 48/401 Test #69: cc52 ............................. Passed 122.20 sec; Start 68: cc51; 49/401 Test #163: dft-b3lyp ........................ Passed 36.67 sec; Start 256: omp3-4; 50/401 Test #24: cc13 ............................. Passed 251.21 sec; Start 246: omp2-5; 51/401 Test #12: cbs-parser ....................... Passed 50.44 sec; Start 64: cc48; 52/401 Test #61: cc44 ............................. Passed 62.83 sec; Start 73: cc5a; 53/401 Test #233: nbody-he-cluster ................. Passed 47.19 sec; Start 240: ocepa2; 54/401 Test #58: cc41 ............................. Passed 109.69 sec; Start 333: scf6; 55/401 Test #272: opt11 ............................ Passed 51.45 sec; Start 245: omp2-4; 56/401 Test #28: cc13d ............................ Passed 217.30 sec; Start 369: dft-custom-gga; 57/401 Test #57: cc40 ............................. Passed 61.45 sec; Start 269: opt7; 58/401 Test #46: cc30 ............................. Passed 67.91 sec; Start 308: rasci-ne; 59/401 Test #255,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:5124,Test,Test,5124,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,; 371/412 Test #363: x2c3 ............................. Passed 2.61 sec; Start 355: tu2-ch2-energy; 372/412 Test #382: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 384: psi4numpy-rhf-gradient; 373/412 Test #404: json-schema-1-gradient ........... Passed 1.74 sec; Start 405: json-schema-1-properties; 374/412 Test #223: mints10 .......................... Passed 1.62 sec; Start 381: psi4numpy-cphf; 375/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 1.97 sec; Start 401: json-schema-1-ghost; 376/412 Test #411: skeletonsointegrals .............. Passed 1.40 sec; Start 399: json-v11-gradient; 377/412 Test #215: mints3 ........................... Passed 1.22 sec; Start 379: mints12; 378/412 Test #103: decontract ....................... Passed 1.68 sec; Start 397: python-memdfjk; 379/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.31 sec; Start 388: python-energy; 380/412 Test #355: tu2-ch2-energy ................... Passed 1.33 sec; Start 310: pywrap-molecule; 381/412 Test #354: tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test #221: mints-helper ..................... Passed 1.51 sec; Start 212: mcscf3; 383/412 Test #391: python-mints9 .................... Passed 2.12 sec; Start 217: mints5; 384/412 Test #396: python-mints13 ................... Passed 2.00 sec; Start 383: psi4numpy-rhf; 385/412 Test #222: mints9 ........................... Passed 2.10 sec; Start 210: mcscf1; 386/412 Test #405: json-schema-1-properties ......... Passed 1.36 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.16 sec; Start 175: docs-bases; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 213: mints1; 389/412 Test #399: json-v11-gradient ................ Passed 1.47 sec; Start 309: pywrap-db3; 390/412 Test #388: python-energy .................... Passed 1.16 sec; Start 216: mints4; 391/412 Test #240: numpy-array-interface ............ Passed 0.92 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:35863,Test,Test,35863,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,; 372/411 Test #96: cisd-h2o-clpse ................... Passed 1.11 sec; Start 411: skeletonwavefunction; 373/411 Test #229: mp2-grad2 ........................ Passed 1.37 sec; Start 220: mints-helper; 374/411 Test #298: pubchem2 ......................... Passed 1.45 sec; Start 222: mints10; 375/411 Test #380: psi4numpy-cphf ................... Passed 1.09 sec; Start 309: pywrap-molecule; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.18 sec; Start 404: json-schema-1-properties; 377/411 Test #411: skeletonwavefunction ............. Passed 0.97 sec; Start 406: skeletonaointegrals; 378/411 Test #398: json-v11-gradient ................ Passed 1.04 sec; Start 410: skeletonsointegrals; 379/411 Test #220: mints-helper ..................... Passed 1.15 sec; Start 387: python-energy; 380/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 378: mints12; 381/411 Test #309: pywrap-molecule .................. Passed 1.14 sec; Start 383: psi4numpy-rhf-gradient; 382/411 Test #404: json-schema-1-properties ......... Passed 1.17 sec; Start 353: tu1-h2o-energy; 383/411 Test #190: fci-coverage ..................... Passed 1.91 sec; Start 214: mints3; 384/411 Test #410: skeletonsointegrals .............. Passed 0.90 sec; Start 349: sapt-sf1; 385/411 Test #406: skeletonaointegrals .............. Passed 0.93 sec; Start 396: python-memdfjk; 386/411 Test #387: python-energy .................... Passed 0.72 sec; Start 352: stability2; 387/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 188: fci-tdm; 388/411 Test #396: python-memdfjk ................... Passed 0.88 sec; Start 354: tu2-ch2-energy; 389/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 382: psi4numpy-rhf; 390/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.10 sec; Start 334: scf3; 392/411 Test #353: tu1-h2o-energy ................... Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:35706,Test,Test,35706,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,; 373/411 Test #376: pywrap-align ..................... Passed 3.89 sec; Start 380: psi4numpy-cphf; 374/411 Test #377: pywrap-align-chiral .............. Passed 3.14 sec; Start 381: psi4numpy-dfmp2; 375/411 Test #380: psi4numpy-cphf ................... Passed 1.28 sec; Start 382: psi4numpy-rhf; 376/411 Test #381: psi4numpy-dfmp2 .................. Passed 1.74 sec; Start 383: psi4numpy-rhf-gradient; 377/411 Test #382: psi4numpy-rhf .................... Passed 0.90 sec; Start 384: psi4numpy-rhf-hessian; 378/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.33 sec; Start 385: psi4numpy-fci; 379/411 Test #300: pywrap-all ....................... Passed 393.32 sec; Start 386: cookbook-rohf-orb-rot; 380/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.92 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 1.22 sec; Start 388: python-curve; 382/411 Test #385: psi4numpy-fci .................... Passed 4.83 sec; Start 389: python-pubchem; 383/411 Test #375: pywrap-bfs ....................... Passed 24.54 sec; Start 390: python-mints9; 384/411 Test #388: python-curve ..................... Passed 3.58 sec; Start 391: python-mints2; 385/411 Test #390: python-mints9 .................... Passed 1.95 sec; Start 392: python-cc54; 386/411 Test #391: python-mints2 .................... Passed 2.61 sec; Start 393: python-3-index-transforms; 387/411 Test #304: pywrap-checkrun-rhf .............. Passed 379.62 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.90 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 1.11 sec; Start 397: json-v11-energy; 390/411 Test #392: python-cc54 ...................... Passed 8.91 sec; Start 398: json-v11-gradient; 391/411 Test #393: python-3-index-transforms ........ Passed 9.59 sec; Start 399: json-schema-1-energy; 392/411 Test #397: json-v11-energy .................. Passed 4.11 sec; Start 400: json-schema-1-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:35714,Test,Test,35714,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,; 375/411 Test #311: rasci-h2o ........................ Passed 1.36 sec; Start 400: json-schema-1-ghost; 376/411 Test #96: cisd-h2o-clpse ................... Passed 1.56 sec; Start 398: json-v11-gradient; 377/411 Test #404: json-schema-1-properties ......... Passed 1.09 sec; Start 405: skeleton; 378/411 Test #349: sapt-sf1 ......................... Passed 1.04 sec; Start 406: skeletonaointegrals; 379/411 Test #353: tu1-h2o-energy ................... Passed 1.12 sec; Start 396: python-memdfjk; 380/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.25 sec; Start 411: skeletonwavefunction; 381/411 Test #293: psimrcc-pt2 ...................... Passed 1.38 sec; Start 408: skeletonmointegrals; 382/411 Test #108: dcft2 ............................ Passed 2.92 sec; Start 410: skeletonsointegrals; 383/411 Test #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 352: stability2; 384/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 354: tu2-ch2-energy; 385/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 330: scf-bs; 386/411 Test #398: json-v11-gradient ................ Passed 1.38 sec; Start 382: psi4numpy-rhf; 387/411 Test #406: skeletonaointegrals .............. Passed 1.11 sec; Start 387: python-energy; 388/411 Test #411: skeletonwavefunction ............. Passed 0.91 sec; Start 209: mcscf1; 389/411 Test #408: skeletonmointegrals .............. Passed 0.89 sec; Start 188: fci-tdm; 390/411 Test #354: tu2-ch2-energy ................... Passed 0.76 sec; Start 308: pywrap-db3; 391/411 Test #352: stability2 ....................... Passed 0.85 sec; Start 211: mcscf3; 392/411 Test #410: skeletonsointegrals .............. Passed 0.91 sec; Start 334: scf3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 239: numpy-array-interface; 394/411 Test #330: scf-bs ........................... Passed 0.83 sec; Start 409: skeletonscf; 395/411 Test #387: python-energy .................... Passed 0.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:36081,Test,Test,36081,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,; 375/411 Test #380: psi4numpy-cphf ................... Passed 1.28 sec; Start 382: psi4numpy-rhf; 376/411 Test #381: psi4numpy-dfmp2 .................. Passed 1.74 sec; Start 383: psi4numpy-rhf-gradient; 377/411 Test #382: psi4numpy-rhf .................... Passed 0.90 sec; Start 384: psi4numpy-rhf-hessian; 378/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.33 sec; Start 385: psi4numpy-fci; 379/411 Test #300: pywrap-all ....................... Passed 393.32 sec; Start 386: cookbook-rohf-orb-rot; 380/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.92 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 1.22 sec; Start 388: python-curve; 382/411 Test #385: psi4numpy-fci .................... Passed 4.83 sec; Start 389: python-pubchem; 383/411 Test #375: pywrap-bfs ....................... Passed 24.54 sec; Start 390: python-mints9; 384/411 Test #388: python-curve ..................... Passed 3.58 sec; Start 391: python-mints2; 385/411 Test #390: python-mints9 .................... Passed 1.95 sec; Start 392: python-cc54; 386/411 Test #391: python-mints2 .................... Passed 2.61 sec; Start 393: python-3-index-transforms; 387/411 Test #304: pywrap-checkrun-rhf .............. Passed 379.62 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.90 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 1.11 sec; Start 397: json-v11-energy; 390/411 Test #392: python-cc54 ...................... Passed 8.91 sec; Start 398: json-v11-gradient; 391/411 Test #393: python-3-index-transforms ........ Passed 9.59 sec; Start 399: json-schema-1-energy; 392/411 Test #397: json-v11-energy .................. Passed 4.11 sec; Start 400: json-schema-1-ghost; 393/411 Test #398: json-v11-gradient ................ Passed 2.70 sec; Start 401: json-schema-1-orient; 394/411 Test #400: json-schema-1-ghost .............. Passed 1.16 sec; Start 402: json-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:35909,Test,Test,35909,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,; 375/411 Test #381: psi4numpy-dfmp2 .................. Passed 3.39 sec; Start 382: psi4numpy-rhf; 376/411 Test #382: psi4numpy-rhf .................... Passed 0.80 sec; Start 383: psi4numpy-rhf-gradient; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.82 sec; Start 384: psi4numpy-rhf-hessian; 378/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.83 sec; Start 385: psi4numpy-fci; 379/411 Test #385: psi4numpy-fci .................... Passed 10.74 sec; Start 386: cookbook-rohf-orb-rot; 380/411 Test #371: dft-custom-dhdf .................. Passed 92.73 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 2.12 sec; Start 388: python-curve; 382/411 Test #388: python-curve ..................... Passed 9.75 sec; Start 389: python-pubchem; 383/411 Test #389: python-pubchem ................... Passed 57.20 sec; Start 390: python-mints9; 384/411 Test #390: python-mints9 .................... Passed 1.93 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 3.30 sec; Start 392: python-cc54; 386/411 Test #373: dft-custom-mgga .................. Passed 177.04 sec; Start 393: python-3-index-transforms; 387/411 Test #393: python-3-index-transforms ........ Passed 10.00 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.96 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 0.99 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.99 sec; Start 398: json-v11-gradient; 391/411 Test #398: json-v11-gradient ................ Passed 1.80 sec; Start 399: json-schema-1-energy; 392/411 Test #399: json-schema-1-energy ............. Passed 6.76 sec; Start 400: json-schema-1-ghost; 393/411 Test #400: json-schema-1-ghost .............. Passed 2.03 sec; Start 401: json-schema-1-orient; 394/411 Test #401: json-schema-1-orient ............. Passed 3.12 sec; Start 402: json,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:35894,Test,Test,35894,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability,; 376/411 Test #382: psi4numpy-rhf .................... Passed 0.80 sec; Start 383: psi4numpy-rhf-gradient; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.82 sec; Start 384: psi4numpy-rhf-hessian; 378/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.83 sec; Start 385: psi4numpy-fci; 379/411 Test #385: psi4numpy-fci .................... Passed 10.74 sec; Start 386: cookbook-rohf-orb-rot; 380/411 Test #371: dft-custom-dhdf .................. Passed 92.73 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 2.12 sec; Start 388: python-curve; 382/411 Test #388: python-curve ..................... Passed 9.75 sec; Start 389: python-pubchem; 383/411 Test #389: python-pubchem ................... Passed 57.20 sec; Start 390: python-mints9; 384/411 Test #390: python-mints9 .................... Passed 1.93 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 3.30 sec; Start 392: python-cc54; 386/411 Test #373: dft-custom-mgga .................. Passed 177.04 sec; Start 393: python-3-index-transforms; 387/411 Test #393: python-3-index-transforms ........ Passed 10.00 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.96 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 0.99 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.99 sec; Start 398: json-v11-gradient; 391/411 Test #398: json-v11-gradient ................ Passed 1.80 sec; Start 399: json-schema-1-energy; 392/411 Test #399: json-schema-1-energy ............. Passed 6.76 sec; Start 400: json-schema-1-ghost; 393/411 Test #400: json-schema-1-ghost .............. Passed 2.03 sec; Start 401: json-schema-1-orient; 394/411 Test #401: json-schema-1-orient ............. Passed 3.12 sec; Start 402: json-schema-1-throws; 395/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 40,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:35989,Test,Test,35989,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability,; 376/411 Test #382: psi4numpy-rhf .................... Passed 0.85 sec; Start 383: psi4numpy-rhf-gradient; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.48 sec; Start 384: psi4numpy-rhf-hessian; 378/411 Test #384: psi4numpy-rhf-hessian ............ Passed 4.83 sec; Start 385: psi4numpy-fci; 379/411 Test #385: psi4numpy-fci .................... Passed 7.57 sec; Start 386: cookbook-rohf-orb-rot; 380/411 Test #305: pywrap-checkrun-rohf ............. Passed 589.53 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 0.86 sec; Start 388: python-curve; 382/411 Test #388: python-curve ..................... Passed 4.75 sec; Start 389: python-pubchem; 383/411 Test #359: tu6-cp-ne2 ....................... Passed 240.77 sec; Start 390: python-mints9; 384/411 Test #390: python-mints9 .................... Passed 1.89 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 2.96 sec; Start 392: python-cc54; 386/411 Test #389: python-pubchem ................... Passed 50.14 sec; Start 393: python-3-index-transforms; 387/411 Test #373: dft-custom-mgga .................. Passed 175.62 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.81 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 0.95 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.53 sec; Start 398: json-v11-gradient; 391/411 Test #393: python-3-index-transforms ........ Passed 10.54 sec; Start 399: json-schema-1-energy; 392/411 Test #398: json-v11-gradient ................ Passed 2.05 sec; Start 400: json-schema-1-ghost; 393/411 Test #400: json-schema-1-ghost .............. Passed 1.58 sec; Start 401: json-schema-1-orient; 394/411 Test #399: json-schema-1-energy ............. Passed 4.08 sec; Start 402: json-schema-1-throws; 395/411 Test #401: json-schema-1-orient ............. Passed 2.72 sec; Start 4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:36005,Test,Test,36005,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,; 384/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.03 sec; Start 384: psi4numpy-rhf-hessian; 385/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.41 sec; Start 385: psi4numpy-fci; 386/411 Test #385: psi4numpy-fci .................... Passed 2.83 sec; Start 386: cookbook-rohf-orb-rot; 387/411 Test #386: cookbook-rohf-orb-rot ............ Passed 18.93 sec; Start 387: python-energy; 388/411 Test #387: python-energy .................... Passed 0.79 sec; Start 388: python-curve; 389/411 Test #388: python-curve ..................... Passed 2.18 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 44.97 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 2.10 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.42 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 4.64 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.23 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.73 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 1.03 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 1.88 sec; Start 398: json-v11-gradient; 398/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 399: json-schema-1-energy; 399/411 Test #399: json-schema-1-energy ............. Passed 2.00 sec; Start 400: json-schema-1-ghost; 400/411 Test #400: json-schema-1-ghost .............. Passed 1.09 sec; Start 401: json-schema-1-orient; 401/411 Test #401: json-schema-1-orient ............. Passed 1.55 sec; Start 402: json-schema-1-throws; 402/411 Test #402: json-schema-1-throws ............. Passed 0.65 sec; Start 403: json-schema-1-gradient; 403/411 Test #403: json-schema-1-gradient ........... Passed 1.32 sec; Start 404: j,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:36408,Test,Test,36408,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,; 384/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.33 sec; Start 384: psi4numpy-rhf-hessian; 385/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.06 sec; Start 385: psi4numpy-fci; 386/411 Test #385: psi4numpy-fci .................... Passed 3.09 sec; Start 386: cookbook-rohf-orb-rot; 387/411 Test #386: cookbook-rohf-orb-rot ............ Passed 33.29 sec; Start 387: python-energy; 388/411 Test #387: python-energy .................... Passed 1.08 sec; Start 388: python-curve; 389/411 Test #388: python-curve ..................... Passed 2.87 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 43.85 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 1.78 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.86 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 9.47 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.40 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.93 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 0.97 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 2.02 sec; Start 398: json-v11-gradient; 398/411 Test #398: json-v11-gradient ................ Passed 1.15 sec; Start 399: json-schema-1-energy; 399/411 Test #399: json-schema-1-energy ............. Passed 1.84 sec; Start 400: json-schema-1-ghost; 400/411 Test #400: json-schema-1-ghost .............. Passed 1.05 sec; Start 401: json-schema-1-orient; 401/411 Test #401: json-schema-1-orient ............. Passed 1.49 sec; Start 402: json-schema-1-throws; 402/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 403: json-schema-1-gradient; 403/411 Test #403: json-schema-1-gradient ........... Passed 1.45 sec; Start 404: j,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:36437,Test,Test,36437,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability,; 387/411 Test #399: json-schema-1-energy ............. Passed 3.15 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.07 sec; Start 404: json-schema-1-properties; 389/411 Test #402: json-schema-1-throws ............. Passed 0.60 sec; Start 405: skeleton; 390/411 Test #404: json-schema-1-properties ......... Passed 1.09 sec; Start 406: skeletonaointegrals; 391/411 Test #403: json-schema-1-gradient ........... Passed 1.66 sec; Start 407: skeletondfmp2; 392/411 Test #405: skeleton ......................... Passed 1.22 sec; Start 408: skeletonmointegrals; 393/411 Test #406: skeletonaointegrals .............. Passed 1.35 sec; Start 409: skeletonscf; 394/411 Test #408: skeletonmointegrals .............. Passed 1.63 sec; Start 410: skeletonsointegrals; 395/411 Test #409: skeletonscf ...................... Passed 0.67 sec; Start 411: skeletonwavefunction; 396/411 Test #407: skeletondfmp2 .................... Passed 1.86 sec; 397/411 Test #410: skeletonsointegrals .............. Passed 1.57 sec; 398/411 Test #411: skeletonwavefunction ............. Passed 1.46 sec; 399/411 Test #347: sapt-dft2 ........................ Passed 125.56 sec; 400/411 Test #359: tu6-cp-ne2 ....................... Passed 116.70 sec; 401/411 Test #371: dft-custom-dhdf .................. Passed 91.12 sec; 402/411 Test #389: python-pubchem ................... Passed 52.55 sec; 403/411 Test #379: cc-module ........................ Passed 90.55 sec; 404/411 Test #386: cookbook-rohf-orb-rot ............ Passed 85.56 sec; 405/411 Test #306: pywrap-checkrun-uhf .............. Passed 281.57 sec; 406/411 Test #300: pywrap-all ....................... Passed 311.77 sec; 407/411 Test #227: mp2-def2 ......................... Passed 424.41 sec; 408/411 Test #304: pywrap-checkrun-rhf .............. Passed 308.03 sec; 409/411 Test #373: dft-custom-mgga .................. Passed 175.48 sec; 410/411 Test #318: sapt4 ............................ Passed 1936.89 sec; 4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:37253,Test,Test,37253,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,; 387/415 Test #379: scf-freq1 ........................ Passed 15.42 sec; Start 383: dft-custom-hybrid; 388/415 Test #347: scf6 ............................. Passed 55.68 sec; Start 384: dft-custom-mgga; 389/415 Test #359: sapt-compare ..................... Passed 30.51 sec; Start 385: dft-custom-gga; 390/415 Test #381: scf-coverage ..................... Passed 12.39 sec; Start 389: mints12; 391/415 Test #389: mints12 .......................... Passed 1.73 sec; Start 391: psi4numpy-cphf; 392/415 Test #358: sapt-dft2 ........................ Passed 40.15 sec; Start 396: psi4numpy-fci; 393/415 Test #391: psi4numpy-cphf ................... Passed 2.71 sec; Start 397: cookbook-rohf-orb-rot; 394/415 Test #383: dft-custom-hybrid ................ Passed 10.58 sec; Start 400: python-pubchem; 395/415 Test #396: psi4numpy-fci .................... Passed 11.41 sec; Start 409: json-v11-gradient; 396/415 Test #409: json-v11-gradient ................ Passed 2.83 sec; Start 411: json-schema-1-ghost; 397/415 Test #411: json-schema-1-ghost .............. Passed 2.10 sec; Start 412: json-schema-1-orient; 398/415 Test #412: json-schema-1-orient ............. Passed 3.64 sec; Start 413: json-schema-1-throws; 399/415 Test #385: dft-custom-gga ................... Passed 28.52 sec; Start 415: json-schema-1-properties; 400/415 Test #413: json-schema-1-throws ............. Passed 0.92 sec; 401/415 Test #415: json-schema-1-properties ......... Passed 2.25 sec; 402/415 Test #382: dft-custom-dhdf .................. Passed 37.28 sec; 403/415 Test #400: python-pubchem ................... Passed 31.88 sec; 404/415 Test #290: opt-irc-2 ........................ Passed 211.86 sec; 405/415 Test #384: dft-custom-mgga .................. Passed 56.51 sec; 406/415 Test #249: ocepa-freq1 ...................... Passed 749.07 sec; 407/415 Test #106: dcft-grad1 ....................... Passed 1347.53 sec; 408/415 Test #397: cookbook-rohf-orb-rot ............ Passed 443.85 sec; 409/415 Test #148: dfomp2-grad3 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:37371,Test,Test,37371,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,; 39/412 Test #321: sapt6 ............................ Passed 188.13 sec; Start 48: cc31; 40/412 Test #98: cisd-opt-fd ...................... Passed 161.17 sec; Start 59: cc41; 41/412 Test #159: dfscf-bz2 ........................ Passed 159.76 sec; Start 348: sapt-dft2; 42/412 Test #18: cbs-xtpl-func .................... Passed 512.57 sec; Start 61: cc43; 43/412 Test #194: fd-freq-energy-large ............. Passed 497.43 sec; Start 184: isapt2; 44/412 Test #59: cc41 ............................. Passed 78.71 sec; Start 105: dcft-grad2; 45/412 Test #61: cc43 ............................. Passed 53.47 sec; Start 155: dft-grad-lr2; 46/412 Test #48: cc31 ............................. Passed 121.57 sec; Start 169: dft1; 47/412 Test #182: fsapt-allterms ................... Passed 576.36 sec; Start 303: pywrap-cbs1; 48/412 Test #105: dcft-grad2 ....................... Passed 66.83 sec; Start 75: cc5a; 49/412 Test #348: sapt-dft2 ........................ Passed 127.69 sec; Start 26: cc13a; 50/412 Test #303: pywrap-cbs1 ...................... Passed 50.85 sec; Start 114: dcft7; 51/412 Test #184: isapt2 ........................... Passed 125.81 sec; Start 206: frac-traverse; 52/412 Test #155: dft-grad-lr2 ..................... Passed 105.50 sec; Start 317: sapt2; 53/412 Test #75: cc5a ............................. Passed 56.09 sec; Start 319: sapt4; 54/412 Test #169: dft1 ............................. Passed 104.75 sec; Start 326: scf-bz2; 55/412 Test #326: scf-bz2 .......................... Passed 135.97 sec; Start 372: dft-custom-dhdf; 56/412 Test #279: opt13 ............................ Passed 775.41 sec; Start 47: cc30; 57/412 Test #206: frac-traverse .................... Passed 219.70 sec; Start 92: cepa-module; 58/412 Test #26: cc13a ............................ Passed 269.35 sec; Start 281: opt-irc-1; 59/412 Test #47: cc30 ............................. Passed 40.10 sec; Start 280: opt14; 60/412 Test #114: dcft7 ............................ Passed 260.64 sec; Start 318:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:4832,Test,Test,4832,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,"; 390/412 Test #404: json-schema-1-gradient ........... Passed 2.22 sec; Start 406: skeleton; 391/412 Test #405: json-schema-1-properties ......... Passed 1.81 sec; Start 407: skeletonaointegrals; 392/412 Test #407: skeletonaointegrals .............. Passed 3.33 sec; Start 408: skeletondfmp2; 393/412 Test #406: skeleton ......................... Passed 3.87 sec; Start 409: skeletonmointegrals; 394/412 Test #393: python-cc54 ...................... Passed 28.49 sec; Start 410: skeletonscf; 395/412 Test #410: skeletonscf ...................... Passed 0.68 sec; Start 411: skeletonsointegrals; 396/412 Test #408: skeletondfmp2 .................... Passed 2.47 sec; Start 412: skeletonwavefunction; 397/412 Test #409: skeletonmointegrals .............. Passed 2.26 sec; 398/412 Test #411: skeletonsointegrals .............. Passed 1.98 sec; 399/412 Test #412: skeletonwavefunction ............. Passed 2.83 sec; 400/412 Test #348: sapt-dft2 ........................ Passed 127.79 sec; 401/412 Test #372: dft-custom-dhdf .................. Passed 94.42 sec; 402/412 Test #306: pywrap-checkrun-rohf ............. Passed 288.21 sec; 403/412 Test #390: python-pubchem ................... Passed 69.31 sec; 404/412 Test #360: tu6-cp-ne2 ....................... Passed 164.40 sec; 405/412 Test #380: cc-module ........................ Passed 133.41 sec; 406/412 Test #319: sapt4 ............................ Passed 2071.90 sec; 407/412 Test #387: cookbook-rohf-orb-rot ............ Passed 136.41 sec; 408/412 Test #307: pywrap-checkrun-uhf .............. Passed 359.25 sec; 409/412 Test #374: dft-custom-mgga .................. Passed 183.98 sec; 410/412 Test #301: pywrap-all ....................... Passed 395.58 sec; 411/412 Test #305: pywrap-checkrun-rhf .............. Passed 385.47 sec; 412/412 Test #179: fsapt1 ........................... Passed 2170.07 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summary:; adc = 108.50 sec*proc (2 tests); autotest = 2062.88 sec*proc (26 tests)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:37607,Test,Test,37607,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,"; 391/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 2.04 sec; 392/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 2.10 sec; 393/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 2.22 sec; 394/401 Test #290: psimrcc-sp1 ...................... Passed 3.41 sec; 395/401 Test #296: pywrap-all ....................... Passed 973.84 sec; 396/401 Test #86: cepa1 ............................ Passed 4.52 sec; 397/401 Test #391: python-vibanalysis ............... Passed 976.98 sec; 398/401 Test #360: cubeprop-esp .....................***Failed 6.53 sec; 399/401 Test #18: cbs-xtpl-func .................... Passed 1096.76 sec; 400/401 Test #370: dft-bench-ionization ............. Passed 2039.20 sec; 401/401 Test #371: dft-bench-interaction ............***Timeout 3000.03 sec. 99% tests passed, 5 tests failed out of 401. Label Time Summary:; adc = 61.70 sec*proc (2 tests); autotest = 1698.69 sec*proc (25 tests); cart = 9530.61 sec*proc (123 tests); cas = 29.65 sec*proc (1 test); casscf = 157.01 sec*proc (11 tests); cbs = 2162.96 sec*proc (10 tests); cc = 9085.75 sec*proc (64 tests); cdomp2 = 59.27 sec*proc (2 tests); cepa = 203.58 sec*proc (7 tests); ci = 83.42 sec*proc (8 tests); cisd = 109.67 sec*proc (7 tests); cookbook = 222.55 sec*proc (1 test); cubeprop = 14.38 sec*proc (2 tests); dcft = 3348.62 sec*proc (13 tests); df = 1824.24 sec*proc (38 tests); dfccd = 3.69 sec*proc (1 test); dfccd-grad = 13.83 sec*proc (1 test); dfccdl = 8.06 sec*proc (1 test); dfccsd = 4.58 sec*proc (1 test); dfccsd-grad = 43.20 sec*proc (1 test); dfccsd-t-grad = 38.87 sec*proc (1 test); dfccsdat = 20.44 sec*proc (1 test); dfccsdl = 4.62 sec*proc (1 test); dfccsdt = 10.41 sec*proc (1 test); dfep2 = 7.13 sec*proc (2 tests); dfmp2 = 121.95 sec*proc (11 tests); dfomp2 = 943.08 sec*proc (7 tests); dfomp2.5 = 233.40 sec*proc (4 tests); dfomp3 = 229.00 sec*proc (4 tests); dfscf = 28.93 sec*proc (1 test); dft = 5629.04 sec*proc (26 tests); docs = 1.78 sec*proc (2 tests); ecp = 57.50 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:37562,test,test,37562,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['test'],['test']
Testability,"; 391/412 Test #388: python-energy .................... Passed 1.27 sec; Start 410: skeletonscf; 392/412 Test #335: scf3 ............................. Passed 1.16 sec; Start 209: matrix1; 393/412 Test #379: mints12 .......................... Passed 1.51 sec; Start 176: docs-dft; 394/412 Test #212: mcscf3 ........................... Passed 1.18 sec; Start 365: options1; 395/412 Test #397: python-memdfjk ................... Passed 1.86 sec; Start 403: json-schema-1-throws; 396/412 Test #210: mcscf1 ........................... Passed 1.06 sec; Start 88: cepa1; 397/412 Test #175: docs-bases ....................... Passed 0.75 sec; 398/412 Test #240: numpy-array-interface ............ Passed 1.01 sec; 399/412 Test #217: mints5 ........................... Passed 1.36 sec; 400/412 Test #383: psi4numpy-rhf .................... Passed 1.21 sec; 401/412 Test #213: mints1 ........................... Passed 0.95 sec; 402/412 Test #309: pywrap-db3 ....................... Passed 0.84 sec; 403/412 Test #209: matrix1 .......................... Passed 0.70 sec; 404/412 Test #410: skeletonscf ...................... Passed 0.81 sec; 405/412 Test #216: mints4 ........................... Passed 0.83 sec; 406/412 Test #176: docs-dft ......................... Passed 0.72 sec; 407/412 Test #403: json-schema-1-throws ............. Passed 0.60 sec; 408/412 Test #365: options1 ......................... Passed 0.68 sec; 409/412 Test #88: cepa1 ............................ Passed 2.11 sec; 410/412 Test #179: fsapt1 ........................... Passed 2105.81 sec; 411/412 Test #18: cbs-xtpl-func .................... Passed 1523.38 sec; 412/412 Test #319: sapt4 ............................ Passed 1971.42 sec. 100% tests passed, 0 tests failed out of 412. Label Time Summary:; adc = 75.58 sec*proc (2 tests); autotest = 2463.35 sec*proc (26 tests); cart = 23370.60 sec*proc (123 tests); cas = 61.99 sec*proc (1 test); casscf = 167.92 sec*proc (11 tests); cbs = 3247.75 sec*proc (11 tests); cc = 18280.00",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:37790,Test,Test,37790,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,"; 392/413 Test #217: mints4 ........................... Passed 1.08 sec; Start 311: pywrap-molecule; 393/413 Test #214: mints1 ........................... Passed 0.71 sec; Start 310: pywrap-db3; 394/413 Test #177: docs-dft ......................... Passed 0.61 sec; Start 176: docs-bases; 395/413 Test #176: docs-bases ....................... Passed 0.54 sec; Start 162: dft-grac; 396/413 Test #310: pywrap-db3 ....................... Passed 0.68 sec; Start 210: matrix1; 397/413 Test #311: pywrap-molecule .................. Passed 1.08 sec; Start 88: cepa1; 398/413 Test #356: tu2-ch2-energy ................... Passed 3.20 sec; 399/413 Test #210: matrix1 .......................... Passed 0.66 sec; 400/413 Test #211: mcscf1 ........................... Passed 2.13 sec; 401/413 Test #212: mcscf2 ........................... Passed 3.62 sec; 402/413 Test #289: psimrcc-ccsd_t-1 ................. Passed 4.39 sec; 403/413 Test #213: mcscf3 ........................... Passed 2.91 sec; 404/413 Test #329: scf-guess-read1 .................. Passed 4.72 sec; 405/413 Test #162: dft-grac ......................... Passed 2.31 sec; 406/413 Test #330: scf-upcast-custom-basis .......... Passed 4.85 sec; 407/413 Test #8: castup1 .......................... Passed 4.98 sec; 408/413 Test #313: rasci-h2o ........................ Passed 5.23 sec; 409/413 Test #132: dfmp2-2 .......................... Passed 5.73 sec; 410/413 Test #88: cepa1 ............................ Passed 3.93 sec; 411/413 Test #18: cbs-xtpl-func .................... Passed 1465.89 sec; 412/413 Test #180: fsapt1 ........................... Passed 1916.37 sec; 413/413 Test #320: sapt4 ............................ Passed 1842.77 sec. 100% tests passed, 0 tests failed out of 413. Label Time Summary:; adc = 73.71 sec*proc (2 tests); autotest = 2032.85 sec*proc (26 tests); cart = 19618.09 sec*proc (123 tests); cas = 54.46 sec*proc (1 test); casscf = 99.80 sec*proc (11 tests); cbs = 2579.77 sec*proc (11 tests); cc = 15643.19 sec*pr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:37879,Test,Test,37879,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,"; 395/411 Test #402: json-schema-1-throws ............. Passed 0.55 sec; Start 403: json-schema-1-gradient; 396/411 Test #401: json-schema-1-orient ............. Passed 2.34 sec; Start 404: json-schema-1-properties; 397/411 Test #399: json-schema-1-energy ............. Passed 2.80 sec; Start 405: skeleton; 398/411 Test #403: json-schema-1-gradient ........... Passed 1.54 sec; Start 406: skeletonaointegrals; 399/411 Test #404: json-schema-1-properties ......... Passed 1.27 sec; Start 407: skeletondfmp2; 400/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 408: skeletonmointegrals; 401/411 Test #406: skeletonaointegrals .............. Passed 1.33 sec; Start 409: skeletonscf; 402/411 Test #407: skeletondfmp2 .................... Passed 1.53 sec; Start 410: skeletonsointegrals; 403/411 Test #409: skeletonscf ...................... Passed 0.75 sec; Start 411: skeletonwavefunction; 404/411 Test #408: skeletonmointegrals .............. Passed 1.51 sec; 405/411 Test #411: skeletonwavefunction ............. Passed 1.76 sec; 406/411 Test #410: skeletonsointegrals .............. Passed 1.81 sec; 407/411 Test #371: dft-custom-dhdf .................. Passed 84.13 sec; 408/411 Test #379: cc-module ........................ Passed 42.31 sec; 409/411 Test #386: cookbook-rohf-orb-rot ............ Passed 40.50 sec; 410/411 Test #389: python-pubchem ................... Passed 55.23 sec; 411/411 Test #373: dft-custom-mgga .................. Passed 153.16 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 69.98 sec*proc (2 tests); autotest = 2430.21 sec*proc (26 tests); cart = 17487.73 sec*proc (123 tests); cas = 66.60 sec*proc (1 test); casscf = 150.37 sec*proc (11 tests); cbs = 3292.06 sec*proc (10 tests); cc = 12872.21 sec*proc (65 tests); cdomp2 = 104.56 sec*proc (2 tests); cepa = 417.43 sec*proc (7 tests); ci = 125.33 sec*proc (8 tests); cisd = 241.44 sec*proc (7 tests); cookbook = 40.50 sec*proc (1 test); cubeprop = 21.07 sec*proc (",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:37908,Test,Test,37908,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,; 40/411 Test #305: pywrap-checkrun-rohf ............. Passed 660.05 sec; Start 149: dfomp3-grad2; 41/411 Test #144: dfomp2-grad2 ..................... Passed 71.62 sec; Start 17: cbs-xtpl-opt; 42/411 Test #46: cc30 ............................. Passed 77.21 sec; Start 158: dfscf-bz2; 43/411 Test #359: tu6-cp-ne2 ....................... Passed 249.27 sec; Start 379: cc-module; 44/411 Test #195: fd-freq-gradient-large ........... Passed 292.03 sec; Start 57: cc40; 45/411 Test #115: dcft9 ............................ Passed 93.57 sec; Start 107: dcft1; 46/411 Test #60: cc43 ............................. Passed 98.08 sec; Start 183: isapt2; 47/411 Test #149: dfomp3-grad2 ..................... Passed 73.71 sec; Start 43: cc28; 48/411 Test #97: cisd-opt-fd ...................... Passed 154.70 sec; Start 59: cc42; 49/411 Test #17: cbs-xtpl-opt ..................... Passed 90.29 sec; Start 347: sapt-dft2; 50/411 Test #373: dft-custom-mgga .................. Passed 178.76 sec; Start 26: cc13b; 51/411 Test #57: cc40 ............................. Passed 62.96 sec; Start 20: cc1; 52/411 Test #320: sapt6 ............................ Passed 163.15 sec; Start 30: cc15; 53/411 Test #107: dcft1 ............................ Passed 67.37 sec; Start 147: dfomp3-2; 54/411 Test #158: dfscf-bz2 ........................ Passed 135.99 sec; Start 74: cc5a; 55/411 Test #181: fsapt-allterms ................... Passed 571.01 sec; Start 69: cc51; 56/411 Test #386: cookbook-rohf-orb-rot ............ Passed 200.39 sec; Start 75: cc6; 57/411 Test #43: cc28 ............................. Passed 100.27 sec; Start 154: dft-grad-lr2; 58/411 Test #59: cc42 ............................. Passed 99.93 sec; Start 65: cc48; 59/411 Test #193: fd-freq-energy-large ............. Passed 499.88 sec; Start 168: dft1; 60/411 Test #183: isapt2 ........................... Passed 128.83 sec; Start 302: pywrap-cbs1; 61/411 Test #347: sapt-dft2 ........................ Passed 119.85 sec; Start 25: cc13a; 62/411 Test #14,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:5083,Test,Test,5083,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,"; 402/411 Test #216: mints5 ........................... Passed 0.57 sec; Start 402: json-schema-1-throws; 403/411 Test #308: pywrap-db3 ....................... Passed 0.69 sec; Start 87: cepa1; 404/411 Test #364: options1 ......................... Passed 0.57 sec; 405/411 Test #215: mints4 ........................... Passed 0.54 sec; 406/411 Test #174: docs-bases ....................... Passed 0.52 sec; 407/411 Test #212: mints1 ........................... Passed 0.55 sec; 408/411 Test #402: json-schema-1-throws ............. Passed 0.52 sec; 409/411 Test #409: skeletonscf ...................... Passed 0.61 sec; 410/411 Test #87: cepa1 ............................ Passed 4.49 sec; 411/411 Test #318: sapt4 ............................ Passed 1705.52 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 53.30 sec*proc (2 tests); autotest = 715.90 sec*proc (26 tests); cart = 10496.39 sec*proc (123 tests); cas = 45.67 sec*proc (1 test); casscf = 97.70 sec*proc (11 tests); cbs = 775.99 sec*proc (10 tests); cc = 3501.05 sec*proc (65 tests); cdomp2 = 18.69 sec*proc (2 tests); cepa = 70.98 sec*proc (7 tests); ci = 91.90 sec*proc (8 tests); cisd = 133.06 sec*proc (7 tests); cookbook = 21.41 sec*proc (1 test); cubeprop = 18.63 sec*proc (2 tests); dcft = 1189.36 sec*proc (13 tests); df = 705.57 sec*proc (38 tests); dfccd = 3.15 sec*proc (1 test); dfccd-grad = 13.35 sec*proc (1 test); dfccdl = 4.11 sec*proc (1 test); dfccsd = 3.18 sec*proc (1 test); dfccsd-grad = 16.34 sec*proc (1 test); dfccsd-t-grad = 13.89 sec*proc (1 test); dfccsdat = 9.43 sec*proc (1 test); dfccsdl = 10.26 sec*proc (1 test); dfccsdt = 7.70 sec*proc (1 test); dfep2 = 6.04 sec*proc (2 tests); dfmp2 = 123.48 sec*proc (11 tests); dfomp2 = 209.11 sec*proc (7 tests); dfomp2.5 = 53.70 sec*proc (4 tests); dfomp3 = 51.68 sec*proc (4 tests); dfscf = 128.62 sec*proc (1 test); dft = 1299.12 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 38.88 sec*proc (2 tests); fci = 10.23 sec*proc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:38627,test,tests,38627,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['test'],['tests']
Testability,"; 403/411 Test #379: cc-module ........................ Passed 90.55 sec; 404/411 Test #386: cookbook-rohf-orb-rot ............ Passed 85.56 sec; 405/411 Test #306: pywrap-checkrun-uhf .............. Passed 281.57 sec; 406/411 Test #300: pywrap-all ....................... Passed 311.77 sec; 407/411 Test #227: mp2-def2 ......................... Passed 424.41 sec; 408/411 Test #304: pywrap-checkrun-rhf .............. Passed 308.03 sec; 409/411 Test #373: dft-custom-mgga .................. Passed 175.48 sec; 410/411 Test #318: sapt4 ............................ Passed 1936.89 sec; 411/411 Test #178: fsapt1 ........................... Passed 1990.25 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 66.01 sec*proc (2 tests); autotest = 1146.62 sec*proc (26 tests); cart = 11753.15 sec*proc (123 tests); cas = 54.60 sec*proc (1 test); casscf = 72.55 sec*proc (11 tests); cbs = 1265.53 sec*proc (10 tests); cc = 4521.61 sec*proc (65 tests); cdomp2 = 26.59 sec*proc (2 tests); cepa = 98.25 sec*proc (7 tests); ci = 102.86 sec*proc (8 tests); cisd = 160.34 sec*proc (7 tests); cookbook = 85.56 sec*proc (1 test); cubeprop = 20.76 sec*proc (2 tests); dcft = 1432.88 sec*proc (13 tests); df = 809.76 sec*proc (38 tests); dfccd = 2.40 sec*proc (1 test); dfccd-grad = 6.44 sec*proc (1 test); dfccdl = 2.47 sec*proc (1 test); dfccsd = 4.35 sec*proc (1 test); dfccsd-grad = 18.56 sec*proc (1 test); dfccsd-t-grad = 18.88 sec*proc (1 test); dfccsdat = 9.19 sec*proc (1 test); dfccsdl = 4.13 sec*proc (1 test); dfccsdt = 6.97 sec*proc (1 test); dfep2 = 5.76 sec*proc (2 tests); dfmp2 = 129.38 sec*proc (11 tests); dfomp2 = 241.50 sec*proc (7 tests); dfomp2.5 = 75.85 sec*proc (4 tests); dfomp3 = 85.78 sec*proc (4 tests); dfscf = 142.25 sec*proc (1 test); dft = 1405.42 sec*proc (27 tests); docs = 1.27 sec*proc (2 tests); ecp = 40.70 sec*proc (2 tests); fci = 11.34 sec*proc (2 tests); fcidump = 3.32 sec*proc (1 test); findif = 855.60 sec*proc (5 tests); fnocc = 54.59 sec*proc ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:38674,test,tests,38674,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['test'],['tests']
Testability,; 42/404 Test #70: cc52 ............................. Passed 50.53 sec; Start 161: dft-grad-lr2; 43/404 Test #44: cc29 ............................. Passed 51.97 sec; Start 58: cc41; 44/404 Test #28: cc13d ............................ Passed 54.31 sec; Start 227: mp2-def2; 45/404 Test #318: sapt4 ............................ Passed 173.98 sec; Start 60: cc43; 46/404 Test #113: dcft7 ............................ Passed 236.97 sec; Start 47: cc31; 47/404 Test #31: cc16 ............................. Passed 50.21 sec; Start 91: cepa-module; 48/404 Test #58: cc41 ............................. Passed 43.96 sec; Start 279: opt14; 49/404 Test #25: cc13a ............................ Passed 312.39 sec; Start 280: opt-irc-1; 50/404 Test #60: cc43 ............................. Passed 36.52 sec; Start 104: dcft-grad2; 51/404 Test #91: cepa-module ...................... Passed 33.73 sec; Start 97: cisd-opt-fd; 52/404 Test #161: dft-grad-lr2 ..................... Passed 85.03 sec; Start 230: mp2-module; 53/404 Test #47: cc31 ............................. Passed 46.45 sec; Start 74: cc5a; 54/404 Test #18: cbs-xtpl-func .................... Passed 791.53 sec; Start 75: cc6; 55/404 Test #104: dcft-grad2 ....................... Passed 19.55 sec; Start 61: cc44; 56/404 Test #74: cc5a ............................. Passed 25.15 sec; Start 115: dcft9; 57/404 Test #280: opt-irc-1 ........................ Passed 47.52 sec; Start 260: omp3-4; 58/404 Test #97: cisd-opt-fd ...................... Passed 42.85 sec; Start 144: dfomp2-grad2; 59/404 Test #227: mp2-def2 ......................... Passed 90.23 sec; Start 261: omp3-5; 60/404 Test #230: mp2-module ....................... Passed 40.59 sec; Start 259: omp3-3; 61/404 Test #75: cc6 .............................. Passed 39.54 sec; Start 2: adc2; 62/404 Test #279: opt14 ............................ Passed 73.42 sec; Start 373: dft-custom-mgga; 63/404 Test #115: dcft9 ............................ Passed 25.38 sec; Start 320: sapt6; 64/404 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:5061,Test,Test,5061,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,; 46/412 Test #155: dft-grad-lr2 ..................... Passed 112.09 sec; Start 326: scf-bz2; 47/412 Test #360: tu6-cp-ne2 ....................... Passed 430.46 sec; Start 92: cepa-module; 48/412 Test #105: dcft-grad2 ....................... Passed 159.99 sec; Start 372: dft-custom-dhdf; 49/412 Test #169: dft1 ............................. Passed 111.48 sec; Start 31: cc15; 50/412 Test #32: cc16 ............................. Passed 283.37 sec; Start 262: omp3-5; 51/412 Test #279: opt13 ............................ Passed 767.47 sec; Start 260: omp3-3; 52/412 Test #13: cbs-xtpl-alpha ................... Passed 452.73 sec; Start 70: cc51; 53/412 Test #380: cc-module ........................ Passed 296.59 sec; Start 79: cc8a; 54/412 Test #387: cookbook-rohf-orb-rot ............ Passed 326.91 sec; Start 76: cc6; 55/412 Test #303: pywrap-cbs1 ...................... Passed 147.49 sec; Start 281: opt-irc-1; 56/412 Test #79: cc8a ............................. Passed 41.89 sec; Start 116: dcft9; 57/412 Test #31: cc15 ............................. Passed 76.78 sec; Start 280: opt14; 58/412 Test #372: dft-custom-dhdf .................. Passed 95.04 sec; Start 44: cc28; 59/412 Test #326: scf-bz2 .......................... Passed 122.51 sec; Start 320: sapt5; 60/412 Test #70: cc51 ............................. Passed 79.59 sec; Start 83: cc9a; 61/412 Test #92: cepa-module ...................... Passed 121.36 sec; Start 318: sapt3; 62/412 Test #262: omp3-5 ........................... Passed 106.83 sec; Start 231: mp2-module; 63/412 Test #260: omp3-3 ........................... Passed 115.84 sec; Start 261: omp3-4; 64/412 Test #76: cc6 .............................. Passed 90.21 sec; Start 81: cc8c; 65/412 Test #281: opt-irc-1 ........................ Passed 96.87 sec; Start 293: psimrcc-fd-freq2; 66/412 Test #83: cc9a ............................. Passed 29.92 sec; Start 145: dfomp2-grad2; 67/412 Test #44: cc28 ............................. Passed 70.63 sec; Start 17: cbs-xtpl-opt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:5641,Test,Test,5641,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,; 46/413 Test #322: sapt6 ............................ Passed 173.39 sec; Start 117: dcft9; 47/413 Test #261: omp3-3 ........................... Passed 92.84 sec; Start 304: pywrap-cbs1; 48/413 Test #27: cc13b ............................ Passed 95.94 sec; Start 381: cc-module; 49/413 Test #146: dfomp2-grad2 ..................... Passed 85.54 sec; Start 185: isapt2; 50/413 Test #31: cc15 ............................. Passed 81.05 sec; Start 58: cc40; 51/413 Test #160: dfscf-bz2 ........................ Passed 154.39 sec; Start 156: dft-grad-lr2; 52/413 Test #388: cookbook-rohf-orb-rot ............ Passed 185.01 sec; Start 151: dfomp3-grad2; 53/413 Test #251: omp2-4 ........................... Passed 93.76 sec; Start 70: cc51; 54/413 Test #44: cc28 ............................. Passed 92.11 sec; Start 60: cc42; 55/413 Test #76: cc6 .............................. Passed 100.66 sec; Start 170: dft1; 56/413 Test #117: dcft9 ............................ Passed 107.45 sec; Start 47: cc30; 57/413 Test #349: sapt-dft2 ........................ Passed 128.95 sec; Start 232: mp2-module; 58/413 Test #58: cc40 ............................. Passed 75.37 sec; Start 62: cc44; 59/413 Test #151: dfomp3-grad2 ..................... Passed 82.19 sec; Start 252: omp2-5; 60/413 Test #60: cc42 ............................. Passed 60.53 sec; Start 75: cc5a; 61/413 Test #304: pywrap-cbs1 ...................... Passed 127.97 sec; Start 244: ocepa-grad2; 62/413 Test #156: dft-grad-lr2 ..................... Passed 111.05 sec; Start 19: cbs-xtpl-nbody; 63/413 Test #185: isapt2 ........................... Passed 119.08 sec; Start 26: cc13a; 64/413 Test #70: cc51 ............................. Passed 92.88 sec; Start 115: dcft7; 65/413 Test #195: fd-freq-energy-large ............. Passed 547.93 sec; Start 207: frac-traverse; 66/413 Test #183: fsapt-allterms ................... Passed 566.39 sec; Start 318: sapt2; 67/413 Test #47: cc30 ............................. Passed 80.66 sec; Start 320: sapt4;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:5623,Test,Test,5623,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability,; 48/412 Test #71: cc52 ............................. Passed 107.19 sec; Start 293: psimrcc-fd-freq2; 49/412 Test #280: opt14 ............................ Passed 84.19 sec; Start 48: cc31; 50/412 Test #318: sapt3 ............................ Passed 85.71 sec; Start 281: opt-irc-1; 51/412 Test #29: cc13d ............................ Passed 96.43 sec; Start 28: cc13c; 52/412 Test #26: cc13a ............................ Passed 337.24 sec; Start 205: frac-ip-fitting; 53/412 Test #387: cookbook-rohf-orb-rot ............ Passed 106.36 sec; Start 32: cc16; 54/412 Test #70: cc51 ............................. Passed 74.18 sec; Start 116: dcft9; 55/412 Test #114: dcft7 ............................ Passed 326.42 sec; Start 76: cc6; 56/412 Test #168: dft-b3lyp ........................ Passed 73.09 sec; Start 75: cc5a; 57/412 Test #11: cbs-delta-energy ................. Passed 115.53 sec; Start 92: cepa-module; 58/412 Test #18: cbs-xtpl-func .................... Passed 1080.73 sec; Start 31: cc15; 59/412 Test #279: opt13 ............................ Passed 828.21 sec; Start 17: cbs-xtpl-opt; 60/412 Test #320: sapt5 ............................ Passed 79.38 sec; Start 27: cc13b; 61/412 Test #293: psimrcc-fd-freq2 ................. Passed 75.55 sec; Start 62: cc44; 62/412 Test #205: frac-ip-fitting .................. Passed 68.55 sec; Start 157: dfomp2p5-grad2; 63/412 Test #28: cc13c ............................ Passed 80.48 sec; Start 298: pubchem1; 64/412 Test #281: opt-irc-1 ........................ Passed 92.68 sec; Start 251: omp2-5; 65/412 Test #116: dcft9 ............................ Passed 80.09 sec; Start 20: cbs-xtpl-wrapper; 66/412 Test #31: cc15 ............................. Passed 63.11 sec; Start 390: python-pubchem; 67/412 Test #317: sapt2 ............................ Passed 375.81 sec; Start 47: cc30; 68/412 Test #76: cc6 .............................. Passed 78.72 sec; Start 59: cc41; 69/412 Test #75: cc5a ............................. Passed 81.00 sec; Start 105: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:5832,Test,Test,5832,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,; 5/413 Test #43: cc27 ............................. Passed 867.54 sec; Start 77: cc7; 6/413 Test #39: cc23 ............................. Passed 965.39 sec; Start 113: dcft5; 7/413 Test #25: cc13 ............................. Passed 598.94 sec; Start 242: ocepa-freq1; 8/413 Test #41: cc25 ............................. Passed 970.65 sec; Start 184: isapt1; 9/413 Test #37: cc21 ............................. Passed 984.02 sec; Start 45: cc29; 10/413 Test #42: cc26 ............................. Passed 997.98 sec; Start 61: cc43; 11/413 Test #29: cc13d ............................ Passed 374.09 sec; Start 13: cbs-xtpl-alpha; 12/413 Test #40: cc24 ............................. Passed 1131.64 sec; Start 59: cc41; 13/413 Test #36: cc2 .............................. Passed 1134.77 sec; Start 48: cc31; 14/413 Test #61: cc43 ............................. Passed 150.20 sec; Start 302: pywrap-all; 15/413 Test #45: cc29 ............................. Passed 198.44 sec; Start 306: pywrap-checkrun-rhf; 16/413 Test #396: python-vibanalysis ............... Passed 1286.48 sec; Start 114: dcft6; 17/413 Test #59: cc41 ............................. Passed 185.32 sec; Start 18: cbs-xtpl-func; 18/413 Test #184: isapt1 ........................... Passed 393.71 sec; Start 183: fsapt-allterms; 19/413 Test #113: dcft5 ............................ Passed 418.67 sec; Start 195: fd-freq-energy-large; 20/413 Test #48: cc31 ............................. Passed 260.15 sec; Start 197: fd-freq-gradient-large; 21/413 Test #116: dcft8 ............................ Passed 868.73 sec; Start 280: opt13; 22/413 Test #147: dfomp2-grad3 ..................... Passed 1426.39 sec; Start 308: pywrap-checkrun-uhf; 23/413 Test #105: dcft-grad1 ....................... Passed 1466.56 sec; Start 28: cc13c; 24/413 Test #114: dcft6 ............................ Passed 226.08 sec; Start 71: cc52; 25/413 Test #77: cc7 .............................. Passed 665.07 sec; Start 375: dft-custom-mgga; 26/413 Test #13: cbs-xtpl-alph,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:1787,Test,Test,1787,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,; 51/411 Test #205: frac-traverse .................... Passed 211.75 sec; Start 371: dft-custom-dhdf; 52/411 Test #325: scf-bz2 .......................... Passed 122.09 sec; Start 58: cc41; 53/411 Test #168: dft1 ............................. Passed 104.02 sec; Start 75: cc6; 54/411 Test #371: dft-custom-dhdf .................. Passed 89.70 sec; Start 279: opt14; 55/411 Test #75: cc6 .............................. Passed 81.73 sec; Start 69: cc51; 56/411 Test #58: cc41 ............................. Passed 85.94 sec; Start 60: cc43; 57/411 Test #113: dcft7 ............................ Passed 343.68 sec; Start 317: sapt3; 58/411 Test #25: cc13a ............................ Passed 404.79 sec; Start 91: cepa-module; 59/411 Test #316: sapt2 ............................ Passed 352.75 sec; Start 319: sapt5; 60/411 Test #279: opt14 ............................ Passed 78.21 sec; Start 302: pywrap-cbs1; 61/411 Test #69: cc51 ............................. Passed 89.27 sec; Start 292: psimrcc-fd-freq2; 62/411 Test #317: sapt3 ............................ Passed 77.12 sec; Start 280: opt-irc-1; 63/411 Test #60: cc43 ............................. Passed 117.60 sec; Start 115: dcft9; 64/411 Test #319: sapt5 ............................ Passed 77.33 sec; Start 74: cc5a; 65/411 Test #292: psimrcc-fd-freq2 ................. Passed 82.52 sec; Start 167: dft-b3lyp; 66/411 Test #280: opt-irc-1 ........................ Passed 116.92 sec; Start 204: frac-ip-fitting; 67/411 Test #91: cepa-module ...................... Passed 178.98 sec; Start 61: cc44; 68/411 Test #167: dft-b3lyp ........................ Passed 65.78 sec; Start 46: cc30; 69/411 Test #74: cc5a ............................. Passed 101.58 sec; Start 17: cbs-xtpl-opt; 70/411 Test #302: pywrap-cbs1 ...................... Passed 201.06 sec; Start 43: cc28; 71/411 Test #115: dcft9 ............................ Passed 163.68 sec; Start 104: dcft-grad2; 72/411 Test #204: frac-ip-fitting .................. Passed 73.44 sec; Start 230,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:5940,Test,Test,5940,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,; 51/413 Test #251: omp2-4 ........................... Passed 15.75 sec; Start 31: cc15; 52/413 Test #160: dfscf-bz2 ........................ Passed 140.11 sec; Start 232: mp2-module; 53/413 Test #31: cc15 ............................. Passed 15.67 sec; Start 26: cc13a; 54/413 Test #44: cc28 ............................. Passed 31.50 sec; Start 115: dcft7; 55/413 Test #76: cc6 .............................. Passed 60.85 sec; Start 207: frac-traverse; 56/413 Test #197: fd-freq-gradient-large ........... Passed 279.46 sec; Start 318: sapt2; 57/413 Test #396: python-vibanalysis ............... Passed 863.13 sec; Start 320: sapt4; 58/413 Test #349: sapt-dft2 ........................ Passed 123.13 sec; Start 327: scf-bz2; 59/413 Test #184: isapt1 ........................... Passed 425.44 sec; Start 70: cc51; 60/413 Test #185: isapt2 ........................... Passed 117.76 sec; Start 75: cc5a; 61/413 Test #232: mp2-module ....................... Passed 52.55 sec; Start 373: dft-custom-dhdf; 62/413 Test #156: dft-grad-lr2 ..................... Passed 99.01 sec; Start 62: cc44; 63/413 Test #170: dft1 ............................. Passed 98.14 sec; Start 58: cc40; 64/413 Test #58: cc40 ............................. Passed 21.73 sec; Start 252: omp2-5; 65/413 Test #75: cc5a ............................. Passed 50.54 sec; Start 151: dfomp3-grad2; 66/413 Test #70: cc51 ............................. Passed 69.56 sec; Start 19: cbs-xtpl-nbody; 67/413 Test #62: cc44 ............................. Passed 49.61 sec; Start 282: opt-irc-1; 68/413 Test #151: dfomp3-grad2 ..................... Passed 21.51 sec; Start 47: cc30; 69/413 Test #252: omp2-5 ........................... Passed 29.32 sec; Start 17: cbs-xtpl-opt; 70/413 Test #19: cbs-xtpl-nbody ................... Passed 31.04 sec; Start 244: ocepa-grad2; 71/413 Test #47: cc30 ............................. Passed 29.82 sec; Start 281: opt14; 72/413 Test #373: dft-custom-dhdf .................. Passed 91.36 sec; Start 265: omp3-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:6073,Test,Test,6073,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,; 52/412 Test #92: cepa-module ...................... Passed 134.25 sec; Start 372: dft-custom-dhdf; 53/412 Test #27: cc13b ............................ Passed 61.84 sec; Start 281: opt-irc-1; 54/412 Test #260: omp3-3 ........................... Passed 75.45 sec; Start 17: cbs-xtpl-opt; 55/412 Test #262: omp3-5 ........................... Passed 37.38 sec; Start 116: dcft9; 56/412 Test #169: dft1 ............................. Passed 111.17 sec; Start 76: cc6; 57/412 Test #116: dcft9 ............................ Passed 29.49 sec; Start 28: cc13c; 58/412 Test #17: cbs-xtpl-opt ..................... Passed 65.63 sec; Start 280: opt14; 59/412 Test #28: cc13c ............................ Passed 20.50 sec; Start 31: cc15; 60/412 Test #281: opt-irc-1 ........................ Passed 90.19 sec; Start 231: mp2-module; 61/412 Test #372: dft-custom-dhdf .................. Passed 101.66 sec; Start 70: cc51; 62/412 Test #194: fd-freq-energy-large ............. Passed 554.36 sec; Start 19: cbs-xtpl-nbody; 63/412 Test #31: cc15 ............................. Passed 28.61 sec; Start 318: sapt3; 64/412 Test #76: cc6 .............................. Passed 69.60 sec; Start 108: dcft1; 65/412 Test #326: scf-bz2 .......................... Passed 138.38 sec; Start 293: psimrcc-fd-freq2; 66/412 Test #108: dcft1 ............................ Passed 21.44 sec; Start 193: fd-freq-energy; 67/412 Test #182: fsapt-allterms ................... Passed 599.68 sec; Start 320: sapt5; 68/412 Test #19: cbs-xtpl-nbody ................... Passed 51.30 sec; Start 157: dfomp2p5-grad2; 69/412 Test #280: opt14 ............................ Passed 85.55 sec; Start 150: dfomp3-grad2; 70/412 Test #70: cc51 ............................. Passed 72.72 sec; Start 44: cc28; 71/412 Test #231: mp2-module ....................... Passed 79.59 sec; Start 245: ocepa2; 72/412 Test #206: frac-traverse .................... Passed 233.30 sec; Start 261: omp3-4; 73/412 Test #318: sapt3 ............................ Passed 83.47 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:6195,Test,Test,6195,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,; 54/411 Test #305: pywrap-checkrun-rohf ............. Passed 328.05 sec; Start 348: sapt-compare; 55/411 Test #219: mints-benchmark .................. Passed 40.12 sec; Start 38: cc23; 56/411 Test #348: sapt-compare ..................... Passed 43.18 sec; Start 131: dfmp2-3; 57/411 Test #230: mp2-module ....................... Passed 79.66 sec; Start 40: cc25; 58/411 Test #145: dfomp2-grad3 ..................... Passed 526.80 sec; Start 19: cbs-xtpl-wrapper; 59/411 Test #131: dfmp2-3 .......................... Passed 40.26 sec; Start 307: pywrap-db1; 60/411 Test #35: cc2 .............................. Passed 327.30 sec; Start 74: cc5a; 61/411 Test #307: pywrap-db1 ....................... Passed 39.70 sec; Start 17: cbs-xtpl-opt; 62/411 Test #41: cc26 ............................. Passed 280.38 sec; Start 29: cc14; 63/411 Test #19: cbs-xtpl-wrapper ................. Passed 77.77 sec; Start 42: cc27; 64/411 Test #74: cc5a ............................. Passed 97.39 sec; Start 276: opt11; 65/411 Test #318: sapt4 ............................ Passed 1909.66 sec; Start 47: cc31; 66/411 Test #276: opt11 ............................ Passed 105.52 sec; Start 273: opt7; 67/411 Test #17: cbs-xtpl-opt ..................... Passed 206.55 sec; Start 36: cc21; 68/411 Test #273: opt7 ............................. Passed 91.44 sec; Start 206: ghosts; 69/411 Test #110: dcft4 ............................ Passed 800.05 sec; Start 312: rasci-ne; 70/411 Test #206: ghosts ........................... Passed 33.57 sec; Start 359: tu6-cp-ne2; 71/411 Test #312: rasci-ne ......................... Passed 35.28 sec; Start 11: cbs-delta-energy; 72/411 Test #47: cc31 ............................. Passed 436.66 sec; Start 323: sapt7; 73/411 Test #323: sapt7 ............................ Passed 36.88 sec; Start 76: cc7; 74/411 Test #38: cc23 ............................. Passed 950.03 sec; Start 342: soscf-dft; 75/411 Test #342: soscf-dft ........................ Passed 35.67 sec; Start 129: dfmp2-1; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:6258,Test,Test,6258,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,; 55/404 Test #104: dcft-grad2 ....................... Passed 19.55 sec; Start 61: cc44; 56/404 Test #74: cc5a ............................. Passed 25.15 sec; Start 115: dcft9; 57/404 Test #280: opt-irc-1 ........................ Passed 47.52 sec; Start 260: omp3-4; 58/404 Test #97: cisd-opt-fd ...................... Passed 42.85 sec; Start 144: dfomp2-grad2; 59/404 Test #227: mp2-def2 ......................... Passed 90.23 sec; Start 261: omp3-5; 60/404 Test #230: mp2-module ....................... Passed 40.59 sec; Start 259: omp3-3; 61/404 Test #75: cc6 .............................. Passed 39.54 sec; Start 2: adc2; 62/404 Test #279: opt14 ............................ Passed 73.42 sec; Start 373: dft-custom-mgga; 63/404 Test #115: dcft9 ............................ Passed 25.38 sec; Start 320: sapt6; 64/404 Test #61: cc44 ............................. Passed 50.15 sec; Start 299: pywrap-alias; 65/404 Test #144: dfomp2-grad2 ..................... Passed 30.14 sec; Start 149: dfomp3-grad2; 66/404 Test #2: adc2 ............................. Passed 37.17 sec; Start 59: cc42; 67/404 Test #260: omp3-4 ........................... Passed 50.35 sec; Start 11: cbs-delta-energy; 68/404 Test #261: omp3-5 ........................... Passed 51.18 sec; Start 17: cbs-xtpl-opt; 69/404 Test #259: omp3-3 ........................... Passed 51.49 sec; Start 57: cc40; 70/404 Test #149: dfomp3-grad2 ..................... Passed 28.08 sec; Start 204: frac-ip-fitting; 71/404 Test #299: pywrap-alias ..................... Passed 36.56 sec; Start 250: omp2-5; 72/404 Test #59: cc42 ............................. Passed 20.06 sec; Start 242: ocepa-grad2; 73/404 Test #373: dft-custom-mgga .................. Passed 57.03 sec; Start 183: isapt2; 74/404 Test #320: sapt6 ............................ Passed 55.07 sec; Start 244: ocepa2; 75/404 Test #57: cc40 ............................. Passed 21.98 sec; Start 153: dfomp2p5-grad2; 76/404 Test #250: omp2-5 ........................... Passed 25.71 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:6237,Test,Test,6237,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,; 55/412 Test #114: dcft7 ............................ Passed 326.42 sec; Start 76: cc6; 56/412 Test #168: dft-b3lyp ........................ Passed 73.09 sec; Start 75: cc5a; 57/412 Test #11: cbs-delta-energy ................. Passed 115.53 sec; Start 92: cepa-module; 58/412 Test #18: cbs-xtpl-func .................... Passed 1080.73 sec; Start 31: cc15; 59/412 Test #279: opt13 ............................ Passed 828.21 sec; Start 17: cbs-xtpl-opt; 60/412 Test #320: sapt5 ............................ Passed 79.38 sec; Start 27: cc13b; 61/412 Test #293: psimrcc-fd-freq2 ................. Passed 75.55 sec; Start 62: cc44; 62/412 Test #205: frac-ip-fitting .................. Passed 68.55 sec; Start 157: dfomp2p5-grad2; 63/412 Test #28: cc13c ............................ Passed 80.48 sec; Start 298: pubchem1; 64/412 Test #281: opt-irc-1 ........................ Passed 92.68 sec; Start 251: omp2-5; 65/412 Test #116: dcft9 ............................ Passed 80.09 sec; Start 20: cbs-xtpl-wrapper; 66/412 Test #31: cc15 ............................. Passed 63.11 sec; Start 390: python-pubchem; 67/412 Test #317: sapt2 ............................ Passed 375.81 sec; Start 47: cc30; 68/412 Test #76: cc6 .............................. Passed 78.72 sec; Start 59: cc41; 69/412 Test #75: cc5a ............................. Passed 81.00 sec; Start 105: dcft-grad2; 70/412 Test #48: cc31 ............................. Passed 118.12 sec; Start 44: cc28; 71/412 Test #62: cc44 ............................. Passed 62.89 sec; Start 261: omp3-4; 72/412 Test #92: cepa-module ...................... Passed 94.63 sec; Start 257: omp2p5-grad2; 73/412 Test #27: cc13b ............................ Passed 76.46 sec; Start 148: dfomp3-2; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 87.77 sec; Start 58: cc40; 75/412 Test #157: dfomp2p5-grad2 ................... Passed 63.86 sec; Start 163: dft-grad-meta; 76/412 Test #298: pubchem1 ......................... Passed 62.78 sec; Start 101: ci-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:6481,Test,Test,6481,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,; 57/413 Test #146: dfomp2-grad2 ..................... Passed 88.22 sec; Start 26: cc13a; 58/413 Test #44: cc28 ............................. Passed 87.90 sec; Start 115: dcft7; 59/413 Test #31: cc15 ............................. Passed 68.36 sec; Start 207: frac-traverse; 60/413 Test #195: fd-freq-energy-large ............. Passed 510.05 sec; Start 318: sapt2; 61/413 Test #76: cc6 .............................. Passed 93.91 sec; Start 320: sapt4; 62/413 Test #185: isapt2 ........................... Passed 117.61 sec; Start 327: scf-bz2; 63/413 Test #156: dft-grad-lr2 ..................... Passed 107.86 sec; Start 252: omp2-5; 64/413 Test #232: mp2-module ....................... Passed 75.42 sec; Start 151: dfomp3-grad2; 65/413 Test #170: dft1 ............................. Passed 105.14 sec; Start 58: cc40; 66/413 Test #75: cc5a ............................. Passed 70.15 sec; Start 19: cbs-xtpl-nbody; 67/413 Test #62: cc44 ............................. Passed 56.22 sec; Start 47: cc30; 68/413 Test #70: cc51 ............................. Passed 79.80 sec; Start 244: ocepa-grad2; 69/413 Test #183: fsapt-allterms ................... Passed 566.00 sec; Start 373: dft-custom-dhdf; 70/413 Test #252: omp2-5 ........................... Passed 67.36 sec; Start 282: opt-irc-1; 71/413 Test #151: dfomp3-grad2 ..................... Passed 66.98 sec; Start 17: cbs-xtpl-opt; 72/413 Test #47: cc30 ............................. Passed 68.93 sec; Start 265: omp3-grad2; 73/413 Test #244: ocepa-grad2 ...................... Passed 64.99 sec; Start 281: opt14; 74/413 Test #58: cc40 ............................. Passed 77.29 sec; Start 20: cbs-xtpl-wrapper; 75/413 Test #19: cbs-xtpl-nbody ................... Passed 78.00 sec; Start 194: fd-freq-energy; 76/413 Test #327: scf-bz2 .......................... Passed 122.73 sec; Start 60: cc42; 77/413 Test #373: dft-custom-dhdf .................. Passed 91.90 sec; Start 246: ocepa2; 78/413 Test #282: opt-irc-1 ........................ Passed 84.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:6639,Test,Test,6639,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,; 58/412 Test #26: cc13a ............................ Passed 269.35 sec; Start 281: opt-irc-1; 59/412 Test #47: cc30 ............................. Passed 40.10 sec; Start 280: opt14; 60/412 Test #114: dcft7 ............................ Passed 260.64 sec; Start 318: sapt3; 61/412 Test #92: cepa-module ...................... Passed 48.34 sec; Start 70: cc51; 62/412 Test #372: dft-custom-dhdf .................. Passed 97.85 sec; Start 76: cc6; 63/412 Test #281: opt-irc-1 ........................ Passed 72.44 sec; Start 193: fd-freq-energy; 64/412 Test #280: opt14 ............................ Passed 89.89 sec; Start 260: omp3-3; 65/412 Test #70: cc51 ............................. Passed 73.29 sec; Start 320: sapt5; 66/412 Test #76: cc6 .............................. Passed 70.93 sec; Start 261: omp3-4; 67/412 Test #318: sapt3 ............................ Passed 90.41 sec; Start 231: mp2-module; 68/412 Test #260: omp3-3 ........................... Passed 33.57 sec; Start 17: cbs-xtpl-opt; 69/412 Test #193: fd-freq-energy ................... Passed 58.53 sec; Start 116: dcft9; 70/412 Test #317: sapt2 ............................ Passed 354.70 sec; Start 293: psimrcc-fd-freq2; 71/412 Test #261: omp3-4 ........................... Passed 31.51 sec; Start 21: cc1; 72/412 Test #116: dcft9 ............................ Passed 25.23 sec; Start 20: cbs-xtpl-wrapper; 73/412 Test #21: cc1 .............................. Passed 21.49 sec; Start 250: omp2-4; 74/412 Test #231: mp2-module ....................... Passed 55.07 sec; Start 19: cbs-xtpl-nbody; 75/412 Test #17: cbs-xtpl-opt ..................... Passed 47.15 sec; Start 251: omp2-5; 76/412 Test #250: omp2-4 ........................... Passed 22.47 sec; Start 205: frac-ip-fitting; 77/412 Test #320: sapt5 ............................ Passed 82.22 sec; Start 168: dft-b3lyp; 78/412 Test #251: omp2-5 ........................... Passed 18.07 sec; Start 62: cc44; 79/412 Test #19: cbs-xtpl-nbody ................... Passed 29.87 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:6569,Test,Test,6569,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,; 58/413 Test #27: cc13b ............................ Passed 133.63 sec; Start 244: ocepa-grad2; 59/413 Test #185: isapt2 ........................... Passed 112.43 sec; Start 64: cc46; 60/413 Test #263: omp3-5 ........................... Passed 173.45 sec; Start 232: mp2-module; 61/413 Test #35: cc19 ............................. Passed 60.37 sec; Start 170: dft1; 62/413 Test #156: dft-grad-lr2 ..................... Passed 106.35 sec; Start 246: ocepa2; 63/413 Test #149: dfomp3-2 ......................... Passed 76.72 sec; Start 80: cc8b; 64/413 Test #62: cc44 ............................. Passed 95.83 sec; Start 19: cbs-xtpl-nbody; 65/413 Test #75: cc5a ............................. Passed 94.50 sec; Start 281: opt14; 66/413 Test #307: pywrap-checkrun-rohf ............. Passed 509.19 sec; Start 109: dcft1; 67/413 Test #64: cc46 ............................. Passed 66.16 sec; Start 153: dfomp2p5-2; 68/413 Test #308: pywrap-checkrun-uhf .............. Passed 711.32 sec; Start 57: cc4; 69/413 Test #280: opt13 ............................ Passed 715.73 sec; Start 258: omp2p5-grad2; 70/413 Test #70: cc51 ............................. Passed 106.95 sec; Start 144: dfomp2-4; 71/413 Test #252: omp2-5 ........................... Passed 99.66 sec; Start 158: dfomp2p5-grad2; 72/413 Test #244: ocepa-grad2 ...................... Passed 93.25 sec; Start 21: cc1; 73/413 Test #80: cc8b ............................. Passed 77.16 sec; Start 67: cc49; 74/413 Test #246: ocepa2 ........................... Passed 81.77 sec; Start 79: cc8a; 75/413 Test #57: cc4 .............................. Passed 41.82 sec; Start 373: dft-custom-dhdf; 76/413 Test #180: fsapt1 ........................... Passed 1757.68 sec; Start 82: cc9; 77/413 Test #19: cbs-xtpl-nbody ................... Passed 91.35 sec; Start 81: cc8c; 78/413 Test #232: mp2-module ....................... Passed 103.88 sec; Start 26: cc13a; 79/413 Test #170: dft1 ............................. Passed 106.31 sec; Start 115: dcft7; 80/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:6672,Test,Test,6672,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,; 61/411 Test #114: dcft8 ............................ Passed 75.09 sec; Start 280: opt-irc-1; 62/411 Test #159: dft-grad-meta .................... Passed 54.04 sec; Start 389: python-pubchem; 63/411 Test #297: pubchem1 ......................... Passed 54.36 sec; Start 28: cc13d; 64/411 Test #24: cc13 ............................. Passed 61.45 sec; Start 58: cc41; 65/411 Test #17: cbs-xtpl-opt ..................... Passed 52.63 sec; Start 2: adc2; 66/411 Test #100: ci-property ...................... Passed 50.10 sec; Start 219: mints-benchmark; 67/411 Test #58: cc41 ............................. Passed 34.52 sec; Start 170: dft1-alt; 68/411 Test #389: python-pubchem ................... Passed 50.39 sec; Start 131: dfmp2-3; 69/411 Test #28: cc13d ............................ Passed 45.89 sec; Start 60: cc43; 70/411 Test #280: opt-irc-1 ........................ Passed 62.40 sec; Start 43: cc28; 71/411 Test #2: adc2 ............................. Passed 42.66 sec; Start 302: pywrap-cbs1; 72/411 Test #219: mints-benchmark .................. Passed 44.34 sec; Start 46: cc30; 73/411 Test #131: dfmp2-3 .......................... Passed 42.79 sec; Start 348: sapt-compare; 74/411 Test #170: dft1-alt ......................... Passed 47.57 sec; Start 307: pywrap-db1; 75/411 Test #43: cc28 ............................. Passed 42.73 sec; Start 230: mp2-module; 76/411 Test #60: cc43 ............................. Passed 51.52 sec; Start 31: cc16; 77/411 Test #46: cc30 ............................. Passed 45.99 sec; Start 129: dfmp2-1; 78/411 Test #302: pywrap-cbs1 ...................... Passed 59.67 sec; Start 386: cookbook-rohf-orb-rot; 79/411 Test #348: sapt-compare ..................... Passed 41.11 sec; Start 57: cc40; 80/411 Test #307: pywrap-db1 ....................... Passed 42.02 sec; Start 312: rasci-ne; 81/411 Test #129: dfmp2-1 .......................... Passed 32.52 sec; Start 206: ghosts; 82/411 Test #230: mp2-module ....................... Passed 61.78 sec; Start 106: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:6838,Test,Test,6838,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,2,"['Test', 'benchmark']","['Test', 'benchmark']"
Testability,; 61/415 Test #6: ao-casscf-sp ..................... Passed 5.22 sec; Start 357: sapt-dft1; 62/415 Test #377: dft-smoke ........................ Passed 22.20 sec; Start 201: freq-isotope2; 63/415 Test #252: ocepa1 ........................... Passed 8.85 sec; Start 194: fcidump; 64/415 Test #260: omp2-grad1 ....................... Passed 9.57 sec; Start 266: omp3-1; 65/415 Test #132: dfmp2-1 .......................... Passed 16.83 sec; Start 334: sapt8; 66/415 Test #194: fcidump .......................... Passed 7.22 sec; Start 226: molden1; 67/415 Test #142: dfomp2-1 ......................... Passed 12.15 sec; Start 274: opt1; 68/415 Test #103: cubeprop ......................... Passed 12.58 sec; Start 227: molden2; 69/415 Test #368: tu4-h2o-freq ..................... Passed 13.90 sec; Start 8: castup1; 70/415 Test #201: freq-isotope2 .................... Passed 11.36 sec; Start 369: tu5-sapt; 71/415 Test #172: dft-vv10 ......................... Passed 16.42 sec; Start 160: dfrasscf-sp; 72/415 Test #357: sapt-dft1 ........................ Passed 14.97 sec; Start 292: opt-freeze-coords; 73/415 Test #293: opt-full-hess-every .............. Passed 15.99 sec; Start 305: psithon1; 74/415 Test #8: castup1 .......................... Passed 4.90 sec; Start 137: dfmp2-grad1; 75/415 Test #266: omp3-1 ........................... Passed 10.08 sec; Start 376: cubeprop-esp; 76/415 Test #274: opt1 ............................. Passed 11.75 sec; Start 325: sapt1; 77/415 Test #226: molden1 .......................... Passed 14.09 sec; Start 378: scf-hess1; 78/415 Test #227: molden2 .......................... Passed 12.71 sec; Start 239: mpn-bh; 79/415 Test #292: opt-freeze-coords ................ Passed 8.13 sec; Start 234: mp2p5-grad1; 80/415 Test #334: sapt8 ............................ Passed 16.61 sec; Start 123: dfccd1; 81/415 Test #369: tu5-sapt ......................... Passed 12.10 sec; Start 120: dfcasscf-sa-sp; 82/415 Test #376: cubeprop-esp ..................... Passed 7.51,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:7039,Test,Test,7039,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,; 62/85 Test #81: cc9a ............................. Passed 5.88 sec; Start 101: decontract; 63/85 Test #101: decontract ....................... Passed 1.35 sec; Start 119: dfccd1; 64/85 Test #119: dfccd1 ........................... Passed 1.55 sec; Start 120: dfccdl1; 65/85 Test #120: dfccdl1 .......................... Passed 1.44 sec; Start 121: dfccd-grad1; 66/85 Test #121: dfccd-grad1 ...................... Passed 2.62 sec; Start 122: dfccsd1; 67/85 Test #122: dfccsd1 .......................... Passed 1.60 sec; Start 123: dfccsdl1; 68/85 Test #123: dfccsdl1 ......................... Passed 1.62 sec; Start 124: dfccsd-grad1; 69/85 Test #124: dfccsd-grad1 ..................... Passed 4.59 sec; Start 125: dfccsd-t-grad1; 70/85 Test #125: dfccsd-t-grad1 ................... Passed 3.73 sec; Start 126: dfccsdt1; 71/85 Test #126: dfccsdt1 ......................... Passed 1.92 sec; Start 127: dfccsdat1; 72/85 Test #127: dfccsdat1 ........................ Passed 2.81 sec; Start 195: fnocc1; 73/85 Test #195: fnocc1 ........................... Passed 2.46 sec; Start 196: fnocc2; 74/85 Test #196: fnocc2 ........................... Passed 11.09 sec; Start 197: fnocc3; 75/85 Test #197: fnocc3 ........................... Passed 2.62 sec; Start 198: fnocc4; 76/85 Test #198: fnocc4 ........................... Passed 5.45 sec; Start 283: psimrcc-ccsd_t-1; 77/85 Test #283: psimrcc-ccsd_t-1 ................. Passed 1.36 sec; Start 284: psimrcc-ccsd_t-2; 78/85 Test #284: psimrcc-ccsd_t-2 ................. Passed 1.44 sec; Start 285: psimrcc-ccsd_t-3; 79/85 Test #285: psimrcc-ccsd_t-3 ................. Passed 1.38 sec; Start 286: psimrcc-ccsd_t-4; 80/85 Test #286: psimrcc-ccsd_t-4 ................. Passed 7.54 sec; Start 287: psimrcc-fd-freq1; 81/85 Test #287: psimrcc-fd-freq1 ................. Passed 7.09 sec; Start 288: psimrcc-fd-freq2; 82/85 Test #288: psimrcc-fd-freq2 ................. Passed 26.72 sec; Start 289: psimrcc-pt2; 83/85 Test #289: psimrcc-pt2 ...................... ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082:6232,Test,Test,6232,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-402179082,1,['Test'],['Test']
Testability,; 65/411 Test #17: cbs-xtpl-opt ..................... Passed 52.63 sec; Start 2: adc2; 66/411 Test #100: ci-property ...................... Passed 50.10 sec; Start 219: mints-benchmark; 67/411 Test #58: cc41 ............................. Passed 34.52 sec; Start 170: dft1-alt; 68/411 Test #389: python-pubchem ................... Passed 50.39 sec; Start 131: dfmp2-3; 69/411 Test #28: cc13d ............................ Passed 45.89 sec; Start 60: cc43; 70/411 Test #280: opt-irc-1 ........................ Passed 62.40 sec; Start 43: cc28; 71/411 Test #2: adc2 ............................. Passed 42.66 sec; Start 302: pywrap-cbs1; 72/411 Test #219: mints-benchmark .................. Passed 44.34 sec; Start 46: cc30; 73/411 Test #131: dfmp2-3 .......................... Passed 42.79 sec; Start 348: sapt-compare; 74/411 Test #170: dft1-alt ......................... Passed 47.57 sec; Start 307: pywrap-db1; 75/411 Test #43: cc28 ............................. Passed 42.73 sec; Start 230: mp2-module; 76/411 Test #60: cc43 ............................. Passed 51.52 sec; Start 31: cc16; 77/411 Test #46: cc30 ............................. Passed 45.99 sec; Start 129: dfmp2-1; 78/411 Test #302: pywrap-cbs1 ...................... Passed 59.67 sec; Start 386: cookbook-rohf-orb-rot; 79/411 Test #348: sapt-compare ..................... Passed 41.11 sec; Start 57: cc40; 80/411 Test #307: pywrap-db1 ....................... Passed 42.02 sec; Start 312: rasci-ne; 81/411 Test #129: dfmp2-1 .......................... Passed 32.52 sec; Start 206: ghosts; 82/411 Test #230: mp2-module ....................... Passed 61.78 sec; Start 106: dcft-grad4; 83/411 Test #57: cc40 ............................. Passed 28.50 sec; Start 259: omp3-3; 84/411 Test #31: cc16 ............................. Passed 63.68 sec; Start 115: dcft9; 85/411 Test #312: rasci-ne ......................... Passed 35.69 sec; Start 323: sapt7; 86/411 Test #206: ghosts ........................... Passed 32.53 sec; Start 342: sosc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:7208,Test,Test,7208,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,"; 70/401 Test #22: cc11 ............................. Passed 22.05 sec; Start 203: gibbs; 71/401 Test #128: dfmp2-1 .......................... Passed 12.65 sec; Start 376: cc-module,; 72/401 Test #62: cc45 ............................. Passed 10.63 sec; Start 53: cc37; 73/401 Test #30: cc15 ............................. Passed 44.42 sec; Start 238: ocepa-grad2; 74/401 Test #361: dft-smoke ........................ Passed 12.20 sec; Start 3: casscf-fzc-sp; 75/401 Test #342: sapt-dft1 ........................ Passed 14.26 sec; Start 320: sapt8; 76/401 Test #53: cc37 ............................. Passed 10.97 sec; Start 50: cc34; 77/401 Test #203: gibbs ............................ Passed 17.11 sec; Start 103: dcft-grad2; 78/401 Test #56: cc4 .............................. Passed 21.04 sec; Start 127: dfccsdat1; 79/401 Test #320: sapt8 ............................ Passed 11.72 sec; Start 91: ci-multi; 80/401 Test #3: casscf-fzc-sp .................... Passed 14.50 sec; Start 52: cc36; 81/401 Test #295: pywrap-alias ..................... Passed 51.84 sec; Start 83: cdomp2-2; 82/401 Test #127: dfccsdat1 ........................ Passed 13.82 sec; Start 100: cubeprop; 83/401 Test #50: cc34 ............................. Passed 15.42 sec; Start 353: tu5-sapt; 84/401 Test #20: cc1 .............................. Passed 39.63 sec; Start 132: dfmp2-ecp; 85/401 Test #26: cc13b ............................ Passed 45.75 sec; Start 197: fnocc3; 86/401 Test #52: cc36 ............................. Passed 12.26 sec; Start 121: dfccd-grad1; 87/401 Test #100: cubeprop ......................... Passed 8.71 sec; Start 76: cc8; 88/401 Test #298: pywrap-cbs1 ...................... Passed 92.27 sec; Start 172: extern1; 89/401 Test #353: tu5-sapt ......................... Passed 9.35 sec; Start 196: fnocc2; 90/401 Test #91: ci-multi ......................... Passed 17.40 sec; Start 195: fnocc1; 91/401 Test #197: fnocc3 ........................... Passed 9.24 sec; Start 311: sapt1; 92/401 Test #",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:7572,Test,Test,7572,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,; 70/411 Test #75: cc6 .............................. Passed 84.41 sec; Start 379: cc-module; 71/411 Test #242: ocepa-grad2 ...................... Passed 79.99 sec; Start 91: cepa-module; 72/411 Test #100: ci-property ...................... Passed 63.75 sec; Start 61: cc44; 73/411 Test #159: dft-grad-meta .................... Passed 50.20 sec; Start 297: pubchem1; 74/411 Test #20: cc1 .............................. Passed 93.10 sec; Start 389: python-pubchem; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 92.53 sec; Start 60: cc43; 76/411 Test #74: cc5a ............................. Passed 103.50 sec; Start 200: fnocc2; 77/411 Test #17: cbs-xtpl-opt ..................... Passed 122.34 sec; Start 170: dft1-alt; 78/411 Test #107: dcft1 ............................ Passed 106.25 sec; Start 259: omp3-3; 79/411 Test #297: pubchem1 ......................... Passed 56.59 sec; Start 66: cc49; 80/411 Test #389: python-pubchem ................... Passed 58.95 sec; Start 307: pywrap-db1; 81/411 Test #61: cc44 ............................. Passed 92.56 sec; Start 131: dfmp2-3; 82/411 Test #58: cc41 ............................. Passed 142.32 sec; Start 219: mints-benchmark; 83/411 Test #170: dft1-alt ......................... Passed 52.99 sec; Start 348: sapt-compare; 84/411 Test #200: fnocc2 ........................... Passed 65.84 sec; Start 2: adc2; 85/411 Test #307: pywrap-db1 ....................... Passed 45.25 sec; Start 115: dcft9; 86/411 Test #66: cc49 ............................. Passed 56.56 sec; Start 77: cc8; 87/411 Test #131: dfmp2-3 .......................... Passed 42.31 sec; Start 273: opt7; 88/411 Test #28: cc13d ............................ Passed 229.44 sec; Start 360: x2c1; 89/411 Test #219: mints-benchmark .................. Passed 42.72 sec; Start 336: scf5; 90/411 Test #2: adc2 ............................. Passed 42.28 sec; Start 276: opt11; 91/411 Test #348: sapt-compare ..................... Passed 47.36 sec; Start 237: nbody-he-cluster; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:7849,Test,Test,7849,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,; 70/412 Test #70: cc51 ............................. Passed 90.98 sec; Start 19: cbs-xtpl-nbody; 71/412 Test #293: psimrcc-fd-freq2 ................. Passed 78.67 sec; Start 62: cc44; 72/412 Test #250: omp2-4 ........................... Passed 99.04 sec; Start 168: dft-b3lyp; 73/412 Test #20: cbs-xtpl-wrapper ................. Passed 90.74 sec; Start 245: ocepa2; 74/412 Test #205: frac-ip-fitting .................. Passed 76.80 sec; Start 243: ocepa-grad2; 75/412 Test #193: fd-freq-energy ................... Passed 98.56 sec; Start 81: cc8c; 76/412 Test #300: pywrap-alias ..................... Passed 77.65 sec; Start 261: omp3-4; 77/412 Test #257: omp2p5-grad2 ..................... Passed 88.65 sec; Start 390: python-pubchem; 78/412 Test #264: omp3-grad2 ....................... Passed 104.13 sec; Start 44: cc28; 79/412 Test #62: cc44 ............................. Passed 81.07 sec; Start 116: dcft9; 80/412 Test #19: cbs-xtpl-nbody ................... Passed 123.53 sec; Start 58: cc40; 81/412 Test #114: dcft7 ............................ Passed 416.24 sec; Start 83: cc9a; 82/412 Test #317: sapt2 ............................ Passed 390.46 sec; Start 35: cc19; 83/412 Test #81: cc8c ............................. Passed 62.89 sec; Start 251: omp2-5; 84/412 Test #168: dft-b3lyp ........................ Passed 73.00 sec; Start 69: cc50; 85/412 Test #390: python-pubchem ................... Passed 67.56 sec; Start 31: cc15; 86/412 Test #245: ocepa2 ........................... Passed 93.39 sec; Start 150: dfomp3-grad2; 87/412 Test #26: cc13a ............................ Passed 466.26 sec; Start 28: cc13c; 88/412 Test #243: ocepa-grad2 ...................... Passed 107.72 sec; Start 67: cc49; 89/412 Test #44: cc28 ............................. Passed 95.67 sec; Start 79: cc8a; 90/412 Test #261: omp3-4 ........................... Passed 118.19 sec; Start 298: pubchem1; 91/412 Test #58: cc40 ............................. Passed 78.47 sec; Start 65: cc47; 92/412 Test #83: cc9a ...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:7887,Test,Test,7887,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 92.53 sec; Start 60: cc43; 76/411 Test #74: cc5a ............................. Passed 103.50 sec; Start 200: fnocc2; 77/411 Test #17: cbs-xtpl-opt ..................... Passed 122.34 sec; Start 170: dft1-alt; 78/411 Test #107: dcft1 ............................ Passed 106.25 sec; Start 259: omp3-3; 79/411 Test #297: pubchem1 ......................... Passed 56.59 sec; Start 66: cc49; 80/411 Test #389: python-pubchem ................... Passed 58.95 sec; Start 307: pywrap-db1; 81/411 Test #61: cc44 ............................. Passed 92.56 sec; Start 131: dfmp2-3; 82/411 Test #58: cc41 ............................. Passed 142.32 sec; Start 219: mints-benchmark; 83/411 Test #170: dft1-alt ......................... Passed 52.99 sec; Start 348: sapt-compare; 84/411 Test #200: fnocc2 ........................... Passed 65.84 sec; Start 2: adc2; 85/411 Test #307: pywrap-db1 ....................... Passed 45.25 sec; Start 115: dcft9; 86/411 Test #66: cc49 ............................. Passed 56.56 sec; Start 77: cc8; 87/411 Test #131: dfmp2-3 .......................... Passed 42.31 sec; Start 273: opt7; 88/411 Test #28: cc13d ............................ Passed 229.44 sec; Start 360: x2c1; 89/411 Test #219: mints-benchmark .................. Passed 42.72 sec; Start 336: scf5; 90/411 Test #2: adc2 ............................. Passed 42.28 sec; Start 276: opt11; 91/411 Test #348: sapt-compare ..................... Passed 47.36 sec; Start 237: nbody-he-cluster; 92/411 Test #91: cepa-module ...................... Passed 168.47 sec; Start 144: dfomp2-grad2; 93/411 Test #178: fsapt1 ........................... Passed 2031.12 sec; Start 27: cc13c; 94/411 Test #60: cc43 ............................. Passed 136.23 sec; Start 260: omp3-4; 95/411 Test #259: omp3-3 ........................... Passed 123.04 sec; Start 56: cc4; 96/411 Test #386: cookbook-rohf-orb-rot ............ Passed 296.52 sec; Start 263: omp3-grad2; 97/41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:8309,Test,Test,8309,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,; 78/411 Test #107: dcft1 ............................ Passed 106.25 sec; Start 259: omp3-3; 79/411 Test #297: pubchem1 ......................... Passed 56.59 sec; Start 66: cc49; 80/411 Test #389: python-pubchem ................... Passed 58.95 sec; Start 307: pywrap-db1; 81/411 Test #61: cc44 ............................. Passed 92.56 sec; Start 131: dfmp2-3; 82/411 Test #58: cc41 ............................. Passed 142.32 sec; Start 219: mints-benchmark; 83/411 Test #170: dft1-alt ......................... Passed 52.99 sec; Start 348: sapt-compare; 84/411 Test #200: fnocc2 ........................... Passed 65.84 sec; Start 2: adc2; 85/411 Test #307: pywrap-db1 ....................... Passed 45.25 sec; Start 115: dcft9; 86/411 Test #66: cc49 ............................. Passed 56.56 sec; Start 77: cc8; 87/411 Test #131: dfmp2-3 .......................... Passed 42.31 sec; Start 273: opt7; 88/411 Test #28: cc13d ............................ Passed 229.44 sec; Start 360: x2c1; 89/411 Test #219: mints-benchmark .................. Passed 42.72 sec; Start 336: scf5; 90/411 Test #2: adc2 ............................. Passed 42.28 sec; Start 276: opt11; 91/411 Test #348: sapt-compare ..................... Passed 47.36 sec; Start 237: nbody-he-cluster; 92/411 Test #91: cepa-module ...................... Passed 168.47 sec; Start 144: dfomp2-grad2; 93/411 Test #178: fsapt1 ........................... Passed 2031.12 sec; Start 27: cc13c; 94/411 Test #60: cc43 ............................. Passed 136.23 sec; Start 260: omp3-4; 95/411 Test #259: omp3-3 ........................... Passed 123.04 sec; Start 56: cc4; 96/411 Test #386: cookbook-rohf-orb-rot ............ Passed 296.52 sec; Start 263: omp3-grad2; 97/411 Test #31: cc16 ............................. Passed 260.66 sec; Start 312: rasci-ne; 98/411 Test #273: opt7 ............................. Passed 56.86 sec; Start 261: omp3-5; 99/411 Test #336: scf5 ............................. Passed 50.23 sec; Start 46: cc30; 100,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:8570,Test,Test,8570,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,2,"['Test', 'benchmark']","['Test', 'benchmark']"
Testability,; 79/411 Test #280: opt-irc-1 ........................ Passed 105.80 sec; Start 56: cc4; 80/411 Test #151: dfomp2p5-2 ....................... Passed 32.00 sec; Start 279: opt14; 81/411 Test #261: omp3-5 ........................... Passed 71.80 sec; Start 63: cc46; 82/411 Test #230: mp2-module ....................... Passed 83.78 sec; Start 156: dfomp2p5-grad2; 83/411 Test #242: ocepa-grad2 ...................... Passed 48.77 sec; Start 249: omp2-4; 84/411 Test #81: cc9 .............................. Passed 33.45 sec; Start 292: psimrcc-fd-freq2; 85/411 Test #259: omp3-3 ........................... Passed 65.71 sec; Start 78: cc8a; 86/411 Test #56: cc4 .............................. Passed 32.87 sec; Start 142: dfomp2-4; 87/411 Test #63: cc46 ............................. Passed 37.77 sec; Start 77: cc8; 88/411 Test #19: cbs-xtpl-wrapper ................. Passed 73.55 sec; Start 260: omp3-4; 89/411 Test #142: dfomp2-4 ......................... Passed 39.17 sec; Start 256: omp2p5-grad2; 90/411 Test #205: frac-traverse .................... Passed 218.91 sec; Start 317: sapt3; 91/411 Test #78: cc8a ............................. Passed 53.44 sec; Start 79: cc8b; 92/411 Test #279: opt14 ............................ Passed 79.82 sec; Start 67: cc4a; 93/411 Test #249: omp2-4 ........................... Passed 74.23 sec; Start 55: cc39; 94/411 Test #156: dfomp2p5-grad2 ................... Passed 77.67 sec; Start 68: cc50; 95/411 Test #278: opt13 ............................ Passed 729.83 sec; Start 319: sapt5; 96/411 Test #77: cc8 .............................. Passed 55.92 sec; Start 66: cc49; 97/411 Test #292: psimrcc-fd-freq2 ................. Passed 86.60 sec; Start 64: cc47; 98/411 Test #67: cc4a ............................. Passed 47.72 sec; Start 263: omp3-grad2; 99/411 Test #79: cc8b ............................. Passed 50.66 sec; Start 244: ocepa2; 100/411 Test #55: cc39 ............................. Passed 46.75 sec; Start 167: dft-b3lyp; 101/411 Test #256: omp2p5,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:8629,Test,Test,8629,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,; 79/412 Test #19: cbs-xtpl-nbody ................... Passed 29.87 sec; Start 28: cc13c; 80/412 Test #20: cbs-xtpl-wrapper ................. Passed 52.36 sec; Start 145: dfomp2-grad2; 81/412 Test #293: psimrcc-fd-freq2 ................. Passed 76.06 sec; Start 31: cc15; 82/412 Test #28: cc13c ............................ Passed 20.22 sec; Start 44: cc28; 83/412 Test #31: cc15 ............................. Passed 30.15 sec; Start 264: omp3-grad2; 84/412 Test #145: dfomp2-grad2 ..................... Passed 33.33 sec; Start 27: cc13b; 85/412 Test #62: cc44 ............................. Passed 57.63 sec; Start 390: python-pubchem; 86/412 Test #205: frac-ip-fitting .................. Passed 71.71 sec; Start 262: omp3-5; 87/412 Test #168: dft-b3lyp ........................ Passed 75.48 sec; Start 245: ocepa2; 88/412 Test #27: cc13b ............................ Passed 23.72 sec; Start 243: ocepa-grad2; 89/412 Test #264: omp3-grad2 ....................... Passed 24.30 sec; Start 257: omp2p5-grad2; 90/412 Test #44: cc28 ............................. Passed 51.88 sec; Start 150: dfomp3-grad2; 91/412 Test #262: omp3-5 ........................... Passed 20.80 sec; Start 298: pubchem1; 92/412 Test #150: dfomp3-grad2 ..................... Passed 30.23 sec; Start 300: pywrap-alias; 93/412 Test #257: omp2p5-grad2 ..................... Passed 31.49 sec; Start 35: cc19; 94/412 Test #245: ocepa2 ........................... Passed 37.86 sec; Start 58: cc40; 95/412 Test #243: ocepa-grad2 ...................... Passed 32.33 sec; Start 69: cc50; 96/412 Test #390: python-pubchem ................... Passed 60.96 sec; Start 157: dfomp2p5-grad2; 97/412 Test #35: cc19 ............................. Passed 36.78 sec; Start 83: cc9a; 98/412 Test #157: dfomp2p5-grad2 ................... Passed 27.45 sec; Start 101: ci-property; 99/412 Test #58: cc40 ............................. Passed 42.80 sec; Start 60: cc42; 100/412 Test #300: pywrap-alias ..................... Passed 45.62 sec; Start 66: cc48,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:8501,Test,Test,8501,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,; 80/412 Test #245: ocepa2 ........................... Passed 62.18 sec; Start 58: cc40; 81/412 Test #261: omp3-4 ........................... Passed 58.04 sec; Start 65: cc47; 82/412 Test #251: omp2-5 ........................... Passed 49.94 sec; Start 168: dft-b3lyp; 83/412 Test #26: cc13a ............................ Passed 327.85 sec; Start 69: cc50; 84/412 Test #243: ocepa-grad2 ...................... Passed 63.73 sec; Start 300: pywrap-alias; 85/412 Test #20: cbs-xtpl-wrapper ................. Passed 79.22 sec; Start 390: python-pubchem; 86/412 Test #62: cc44 ............................. Passed 68.65 sec; Start 257: omp2p5-grad2; 87/412 Test #205: frac-ip-fitting .................. Passed 71.49 sec; Start 145: dfomp2-grad2; 88/412 Test #65: cc47 ............................. Passed 50.77 sec; Start 35: cc19; 89/412 Test #264: omp3-grad2 ....................... Passed 80.57 sec; Start 67: cc49; 90/412 Test #58: cc40 ............................. Passed 63.55 sec; Start 79: cc8a; 91/412 Test #250: omp2-4 ........................... Passed 85.98 sec; Start 152: dfomp2p5-2; 92/412 Test #114: dcft7 ............................ Passed 366.54 sec; Start 82: cc9; 93/412 Test #168: dft-b3lyp ........................ Passed 74.16 sec; Start 298: pubchem1; 94/412 Test #69: cc50 ............................. Passed 59.08 sec; Start 148: dfomp3-2; 95/412 Test #390: python-pubchem ................... Passed 72.12 sec; Start 141: dfomp2-2; 96/412 Test #300: pywrap-alias ..................... Passed 80.85 sec; Start 60: cc42; 97/412 Test #317: sapt2 ............................ Passed 393.02 sec; Start 66: cc48; 98/412 Test #257: omp2p5-grad2 ..................... Passed 84.55 sec; Start 78: cc8; 99/412 Test #35: cc19 ............................. Passed 69.43 sec; Start 57: cc4; 100/412 Test #67: cc49 ............................. Passed 64.19 sec; Start 101: ci-property; 101/412 Test #79: cc8a ............................. Passed 64.97 sec; Start 55: cc38; 102/412 Test #152,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:8770,Test,Test,8770,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,; 81/411 Test #261: omp3-5 ........................... Passed 71.80 sec; Start 63: cc46; 82/411 Test #230: mp2-module ....................... Passed 83.78 sec; Start 156: dfomp2p5-grad2; 83/411 Test #242: ocepa-grad2 ...................... Passed 48.77 sec; Start 249: omp2-4; 84/411 Test #81: cc9 .............................. Passed 33.45 sec; Start 292: psimrcc-fd-freq2; 85/411 Test #259: omp3-3 ........................... Passed 65.71 sec; Start 78: cc8a; 86/411 Test #56: cc4 .............................. Passed 32.87 sec; Start 142: dfomp2-4; 87/411 Test #63: cc46 ............................. Passed 37.77 sec; Start 77: cc8; 88/411 Test #19: cbs-xtpl-wrapper ................. Passed 73.55 sec; Start 260: omp3-4; 89/411 Test #142: dfomp2-4 ......................... Passed 39.17 sec; Start 256: omp2p5-grad2; 90/411 Test #205: frac-traverse .................... Passed 218.91 sec; Start 317: sapt3; 91/411 Test #78: cc8a ............................. Passed 53.44 sec; Start 79: cc8b; 92/411 Test #279: opt14 ............................ Passed 79.82 sec; Start 67: cc4a; 93/411 Test #249: omp2-4 ........................... Passed 74.23 sec; Start 55: cc39; 94/411 Test #156: dfomp2p5-grad2 ................... Passed 77.67 sec; Start 68: cc50; 95/411 Test #278: opt13 ............................ Passed 729.83 sec; Start 319: sapt5; 96/411 Test #77: cc8 .............................. Passed 55.92 sec; Start 66: cc49; 97/411 Test #292: psimrcc-fd-freq2 ................. Passed 86.60 sec; Start 64: cc47; 98/411 Test #67: cc4a ............................. Passed 47.72 sec; Start 263: omp3-grad2; 99/411 Test #79: cc8b ............................. Passed 50.66 sec; Start 244: ocepa2; 100/411 Test #55: cc39 ............................. Passed 46.75 sec; Start 167: dft-b3lyp; 101/411 Test #256: omp2p5-grad2 ..................... Passed 66.01 sec; Start 204: frac-ip-fitting; 102/411 Test #68: cc50 ............................. Passed 57.81 sec; Start 250: omp2-5; 103/411 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:8805,Test,Test,8805,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,; 82/411 Test #58: cc41 ............................. Passed 142.32 sec; Start 219: mints-benchmark; 83/411 Test #170: dft1-alt ......................... Passed 52.99 sec; Start 348: sapt-compare; 84/411 Test #200: fnocc2 ........................... Passed 65.84 sec; Start 2: adc2; 85/411 Test #307: pywrap-db1 ....................... Passed 45.25 sec; Start 115: dcft9; 86/411 Test #66: cc49 ............................. Passed 56.56 sec; Start 77: cc8; 87/411 Test #131: dfmp2-3 .......................... Passed 42.31 sec; Start 273: opt7; 88/411 Test #28: cc13d ............................ Passed 229.44 sec; Start 360: x2c1; 89/411 Test #219: mints-benchmark .................. Passed 42.72 sec; Start 336: scf5; 90/411 Test #2: adc2 ............................. Passed 42.28 sec; Start 276: opt11; 91/411 Test #348: sapt-compare ..................... Passed 47.36 sec; Start 237: nbody-he-cluster; 92/411 Test #91: cepa-module ...................... Passed 168.47 sec; Start 144: dfomp2-grad2; 93/411 Test #178: fsapt1 ........................... Passed 2031.12 sec; Start 27: cc13c; 94/411 Test #60: cc43 ............................. Passed 136.23 sec; Start 260: omp3-4; 95/411 Test #259: omp3-3 ........................... Passed 123.04 sec; Start 56: cc4; 96/411 Test #386: cookbook-rohf-orb-rot ............ Passed 296.52 sec; Start 263: omp3-grad2; 97/411 Test #31: cc16 ............................. Passed 260.66 sec; Start 312: rasci-ne; 98/411 Test #273: opt7 ............................. Passed 56.86 sec; Start 261: omp3-5; 99/411 Test #336: scf5 ............................. Passed 50.23 sec; Start 46: cc30; 100/411 Test #77: cc8 .............................. Passed 79.14 sec; Start 244: ocepa2; 101/411 Test #312: rasci-ne ......................... Passed 32.30 sec; Start 57: cc40; 102/411 Test #237: nbody-he-cluster ................. Passed 66.39 sec; Start 106: dcft-grad4; 103/411 Test #276: opt11 ............................ Passed 74.89 sec; Start 323: sapt7; 104,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:8941,Test,Test,8941,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,; 85/411 Test #86: cepa0-grad2 ...................... Passed 5.62 sec; Start 89: cepa3; 86/411 Test #87: cepa1 ............................ Passed 7.50 sec; Start 90: cepa1; 87/411 Test #88: cepa2 ............................ Passed 6.63 sec; Start 91: cepa-module; 88/411 Test #81: cc9 .............................. Passed 42.28 sec; Start 92: ci-multi; 89/411 Test #84: cdomp2-2 ......................... Passed 18.17 sec; Start 93: cisd-h2o+-0; 90/411 Test #89: cepa3 ............................ Passed 9.74 sec; Start 94: cisd-h2o+-1; 91/411 Test #74: cc5a ............................. Passed 76.04 sec; Start 95: cisd-h2o+-2; 92/411 Test #90: cepa1 ............................ Passed 9.86 sec; Start 96: cisd-h2o-clpse; 93/411 Test #82: cc9a ............................. Passed 27.69 sec; Start 97: cisd-opt-fd; 94/411 Test #93: cisd-h2o+-0 ...................... Passed 6.79 sec; Start 98: cisd-sp; 95/411 Test #96: cisd-h2o-clpse ................... Passed 1.52 sec; Start 99: cisd-sp-2; 96/411 Test #94: cisd-h2o+-1 ...................... Passed 5.32 sec; Start 100: ci-property; 97/411 Test #95: cisd-h2o+-2 ...................... Passed 4.71 sec; Start 101: cubeprop; 98/411 Test #75: cc6 .............................. Passed 79.07 sec; Start 102: decontract; 99/411 Test #102: decontract ....................... Passed 1.29 sec; Start 103: dcft-grad1; 100/411 Test #99: cisd-sp-2 ........................ Passed 5.99 sec; Start 104: dcft-grad2; 101/411 Test #98: cisd-sp .......................... Passed 9.90 sec; Start 105: dcft-grad3; 102/411 Test #70: cc52 ............................. Passed 106.20 sec; Start 106: dcft-grad4; 103/411 Test #101: cubeprop ......................... Passed 12.03 sec; Start 107: dcft1; 104/411 Test #92: ci-multi ......................... Passed 22.66 sec; Start 108: dcft2; 105/411 Test #108: dcft2 ............................ Passed 3.64 sec; Start 109: dcft3; 106/411 Test #105: dcft-grad3 ....................... Passed 13.24 sec; Start 110: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:8849,Test,Test,8849,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,; 85/412 Test #148: dfomp3-2 ......................... Passed 63.71 sec; Start 82: cc9; 86/412 Test #101: ci-property ...................... Passed 57.32 sec; Start 260: omp3-3; 87/412 Test #58: cc40 ............................. Passed 66.56 sec; Start 220: mints-benchmark; 88/412 Test #59: cc41 ............................. Passed 107.46 sec; Start 83: cc9a; 89/412 Test #105: dcft-grad2 ....................... Passed 101.83 sec; Start 19: cbs-xtpl-nbody; 90/412 Test #261: omp3-4 ........................... Passed 87.40 sec; Start 243: ocepa-grad2; 91/412 Test #171: dft1-alt ......................... Passed 53.53 sec; Start 132: dfmp2-3; 92/412 Test #264: omp3-grad2 ....................... Passed 71.89 sec; Start 262: omp3-5; 93/412 Test #220: mints-benchmark .................. Passed 42.98 sec; Start 277: opt11; 94/412 Test #145: dfomp2-grad2 ..................... Passed 91.70 sec; Start 81: cc8c; 95/412 Test #132: dfmp2-3 .......................... Passed 41.50 sec; Start 245: ocepa2; 96/412 Test #82: cc9 .............................. Passed 81.68 sec; Start 393: python-cc54; 97/412 Test #231: mp2-module ....................... Passed 115.34 sec; Start 349: sapt-compare; 98/412 Test #83: cc9a ............................. Passed 74.28 sec; Start 308: pywrap-db1; 99/412 Test #193: fd-freq-energy ................... Passed 97.88 sec; Start 361: x2c1; 100/412 Test #19: cbs-xtpl-nbody ................... Passed 102.30 sec; Start 60: cc42; 101/412 Test #260: omp3-3 ........................... Passed 112.58 sec; Start 68: cc4a; 102/412 Test #277: opt11 ............................ Passed 63.60 sec; Start 300: pywrap-alias; 103/412 Test #81: cc8c ............................. Passed 64.99 sec; Start 2: adc2; 104/412 Test #150: dfomp3-grad2 ..................... Passed 124.28 sec; Start 65: cc47; 105/412 Test #243: ocepa-grad2 ...................... Passed 114.31 sec; Start 21: cc1; 106/412 Test #61: cc43 ............................. Passed 136.20 sec; Start 35: cc19; 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:9235,Test,Test,9235,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,; 87/411 Test #131: dfmp2-3 .......................... Passed 42.31 sec; Start 273: opt7; 88/411 Test #28: cc13d ............................ Passed 229.44 sec; Start 360: x2c1; 89/411 Test #219: mints-benchmark .................. Passed 42.72 sec; Start 336: scf5; 90/411 Test #2: adc2 ............................. Passed 42.28 sec; Start 276: opt11; 91/411 Test #348: sapt-compare ..................... Passed 47.36 sec; Start 237: nbody-he-cluster; 92/411 Test #91: cepa-module ...................... Passed 168.47 sec; Start 144: dfomp2-grad2; 93/411 Test #178: fsapt1 ........................... Passed 2031.12 sec; Start 27: cc13c; 94/411 Test #60: cc43 ............................. Passed 136.23 sec; Start 260: omp3-4; 95/411 Test #259: omp3-3 ........................... Passed 123.04 sec; Start 56: cc4; 96/411 Test #386: cookbook-rohf-orb-rot ............ Passed 296.52 sec; Start 263: omp3-grad2; 97/411 Test #31: cc16 ............................. Passed 260.66 sec; Start 312: rasci-ne; 98/411 Test #273: opt7 ............................. Passed 56.86 sec; Start 261: omp3-5; 99/411 Test #336: scf5 ............................. Passed 50.23 sec; Start 46: cc30; 100/411 Test #77: cc8 .............................. Passed 79.14 sec; Start 244: ocepa2; 101/411 Test #312: rasci-ne ......................... Passed 32.30 sec; Start 57: cc40; 102/411 Test #237: nbody-he-cluster ................. Passed 66.39 sec; Start 106: dcft-grad4; 103/411 Test #276: opt11 ............................ Passed 74.89 sec; Start 323: sapt7; 104/411 Test #360: x2c1 ............................. Passed 98.07 sec; Start 250: omp2-5; 105/411 Test #56: cc4 .............................. Passed 77.71 sec; Start 84: cdomp2-2; 106/411 Test #323: sapt7 ............................ Passed 42.68 sec; Start 206: ghosts; 107/411 Test #106: dcft-grad4 ....................... Passed 50.01 sec; Start 34: cc19; 108/411 Test #115: dcft9 ............................ Passed 162.48 sec; Start 129: dfmp2-1; 109/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:9395,Test,Test,9395,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['Test'],['Test']
Testability,; 89/413 Test #64: cc46 ............................. Passed 87.60 sec; Start 153: dfomp2p5-2; 90/413 Test #207: frac-traverse .................... Passed 238.30 sec; Start 321: sapt5; 91/413 Test #258: omp2p5-grad2 ..................... Passed 77.83 sec; Start 294: psimrcc-fd-freq2; 92/413 Test #109: dcft1 ............................ Passed 84.01 sec; Start 67: cc49; 93/413 Test #144: dfomp2-4 ......................... Passed 69.24 sec; Start 79: cc8a; 94/413 Test #20: cbs-xtpl-wrapper ................. Passed 95.04 sec; Start 78: cc8; 95/413 Test #265: omp3-grad2 ....................... Passed 116.89 sec; Start 83: cc9a; 96/413 Test #153: dfomp2p5-2 ....................... Passed 53.80 sec; Start 81: cc8c; 97/413 Test #319: sapt3 ............................ Passed 78.68 sec; Start 206: frac-ip-fitting; 98/413 Test #82: cc9 .............................. Passed 72.01 sec; Start 391: python-pubchem; 99/413 Test #79: cc8a ............................. Passed 45.79 sec; Start 57: cc4; 100/413 Test #67: cc49 ............................. Passed 49.51 sec; Start 142: dfomp2-2; 101/413 Test #321: sapt5 ............................ Passed 77.16 sec; Start 247: ocepa3; 102/413 Test #294: psimrcc-fd-freq2 ................. Passed 73.49 sec; Start 169: dft-b3lyp; 103/413 Test #83: cc9a ............................. Passed 45.91 sec; Start 12: cbs-parser; 104/413 Test #78: cc8 .............................. Passed 64.94 sec; Start 34: cc18; 105/413 Test #81: cc8c ............................. Passed 40.15 sec; Start 301: pywrap-alias; 106/413 Test #57: cc4 .............................. Passed 36.68 sec; Start 69: cc50; 107/413 Test #142: dfomp2-2 ......................... Passed 57.07 sec; Start 128: dfccsd-t-grad1; 108/413 Test #391: python-pubchem ................... Passed 64.54 sec; Start 56: cc39; 109/413 Test #206: frac-ip-fitting .................. Passed 73.00 sec; Start 299: pubchem1; 110/413 Test #280: opt13 ............................ Passed 825.07 sec; Start 10,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:9547,Test,Test,9547,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability,; 9/401 Test #178: isapt1 ........................... Passed 299.95 sec; Start 35: cc2; 10/401 Test #191: fd-freq-gradient-large ........... Passed 307.91 sec; Start 223: mp2-def2; 11/401 Test #189: fd-freq-energy-large ............. Passed 319.82 sec; Start 39: cc24; 12/401 Test #13: cbs-xtpl-alpha ................... Passed 330.09 sec; Start 24: cc13; 13/401 Test #321: scf-bz2 .......................... Passed 118.24 sec; Start 17: cbs-xtpl-opt; 14/401 Test #314: sapt4 ............................ Passed 176.27 sec; Start 31: cc16; 15/401 Test #113: dcft8 ............................ Passed 344.19 sec; Start 275: opt14; 16/401 Test #354: tu6-cp-ne2 ....................... Passed 347.59 sec; Start 41: cc26; 17/401 Test #110: dcft5 ............................ Passed 355.89 sec; Start 276: opt-irc-1; 18/401 Test #112: dcft7 ............................ Passed 358.91 sec; Start 90: cepa-module; 19/401 Test #164: dft1 ............................. Passed 106.51 sec; Start 96: cisd-opt-fd; 20/401 Test #223: mp2-def2 ......................... Passed 82.85 sec; Start 28: cc13d; 21/401 Test #42: cc27 ............................. Passed 392.24 sec; Start 44: cc29; 22/401 Test #75: cc7 .............................. Passed 394.89 sec; Start 47: cc31; 23/401 Test #275: opt14 ............................ Passed 76.63 sec; Start 368: dft-custom-mgga; 24/401 Test #174: fsapt1 ........................... Passed 424.29 sec; Start 19: cbs-xtpl-wrapper; 25/401 Test #276: opt-irc-1 ........................ Passed 89.12 sec; Start 316: sapt6; 26/401 Test #17: cbs-xtpl-opt ..................... Passed 104.19 sec; Start 114: dcft9; 27/401 Test #40: cc25 ............................. Passed 450.80 sec; Start 179: isapt2; 28/401 Test #36: cc21 ............................. Passed 451.45 sec; Start 69: cc52; 29/401 Test #96: cisd-opt-fd ...................... Passed 87.68 sec; Start 74: cc6; 30/401 Test #368: dft-custom-mgga .................. Passed 62.73 sec; Start 200: frac-ip-fitting;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:2566,Test,Test,2566,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,; 90/411 Test #85: cepa0-grad1 ...................... Passed 9.87 sec; Start 86: cepa0-grad2; 91/411 Test #86: cepa0-grad2 ...................... Passed 16.10 sec; Start 87: cepa1; 92/411 Test #79: cc8b ............................. Passed 108.57 sec; Start 88: cepa2; 93/411 Test #87: cepa1 ............................ Passed 24.93 sec; Start 89: cepa3; 94/411 Test #80: cc8c ............................. Passed 110.09 sec; Start 90: cepa1; 95/411 Test #88: cepa2 ............................ Passed 26.19 sec; Start 91: cepa-module; 96/411 Test #81: cc9 .............................. Passed 109.08 sec; Start 92: ci-multi; 97/411 Test #84: cdomp2-2 ......................... Passed 82.59 sec; Start 93: cisd-h2o+-0; 98/411 Test #93: cisd-h2o+-0 ...................... Passed 6.72 sec; Start 94: cisd-h2o+-1; 99/411 Test #89: cepa3 ............................ Passed 25.94 sec; Start 95: cisd-h2o+-2; 100/411 Test #94: cisd-h2o+-1 ...................... Passed 7.09 sec; Start 96: cisd-h2o-clpse; 101/411 Test #95: cisd-h2o+-2 ...................... Passed 8.32 sec; Start 97: cisd-opt-fd; 102/411 Test #96: cisd-h2o-clpse ................... Passed 4.42 sec; Start 98: cisd-sp; 103/411 Test #82: cc9a ............................. Passed 124.72 sec; Start 99: cisd-sp-2; 104/411 Test #90: cepa1 ............................ Passed 40.93 sec; Start 100: ci-property; 105/411 Test #98: cisd-sp .......................... Passed 15.11 sec; Start 101: cubeprop; 106/411 Test #99: cisd-sp-2 ........................ Passed 9.53 sec; Start 102: decontract; 107/411 Test #102: decontract ....................... Passed 2.61 sec; Start 103: dcft-grad1; 108/411 Test #101: cubeprop ......................... Passed 12.64 sec; Start 104: dcft-grad2; 109/411 Test #92: ci-multi ......................... Passed 63.63 sec; Start 105: dcft-grad3; 110/411 Test #105: dcft-grad3 ....................... Passed 22.75 sec; Start 106: dcft-grad4; 111/411 Test #100: ci-property ...................... Passed 66.60,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:9183,Test,Test,9183,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,; 91/413 Test #82: cc9 .............................. Passed 67.08 sec; Start 34: cc18; 92/413 Test #142: dfomp2-2 ......................... Passed 51.07 sec; Start 319: sapt3; 93/413 Test #373: dft-custom-dhdf .................. Passed 90.03 sec; Start 321: sapt5; 94/413 Test #83: cc9a ............................. Passed 56.13 sec; Start 391: python-pubchem; 95/413 Test #265: omp3-grad2 ....................... Passed 78.67 sec; Start 194: fd-freq-energy; 96/413 Test #34: cc18 ............................. Passed 48.82 sec; Start 247: ocepa3; 97/413 Test #78: cc8 .............................. Passed 62.52 sec; Start 69: cc50; 98/413 Test #20: cbs-xtpl-wrapper ................. Passed 78.50 sec; Start 294: psimrcc-fd-freq2; 99/413 Test #282: opt-irc-1 ........................ Passed 94.89 sec; Start 50: cc33; 100/413 Test #327: scf-bz2 .......................... Passed 118.72 sec; Start 33: cc17; 101/413 Test #391: python-pubchem ................... Passed 60.41 sec; Start 63: cc45; 102/413 Test #319: sapt3 ............................ Passed 76.94 sec; Start 56: cc39; 103/413 Test #17: cbs-xtpl-opt ..................... Passed 105.69 sec; Start 206: frac-ip-fitting; 104/413 Test #321: sapt5 ............................ Passed 74.14 sec; Start 68: cc4a; 105/413 Test #69: cc50 ............................. Passed 50.27 sec; Start 101: ci-property; 106/413 Test #247: ocepa3 ........................... Passed 59.63 sec; Start 169: dft-b3lyp; 107/413 Test #50: cc33 ............................. Passed 44.16 sec; Start 275: opt7; 108/413 Test #63: cc45 ............................. Passed 27.72 sec; Start 150: dfomp3-grad1; 109/413 Test #33: cc17 ............................. Passed 42.65 sec; Start 49: cc32; 110/413 Test #194: fd-freq-energy ................... Passed 91.14 sec; Start 299: pubchem1; 111/413 Test #294: psimrcc-fd-freq2 ................. Passed 76.06 sec; Start 379: pywrap-align-chiral; 112/413 Test #56: cc39 ............................. Passed 54.19 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:9675,Test,Test,9675,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,; 94/413 Test #20: cbs-xtpl-wrapper ................. Passed 95.04 sec; Start 78: cc8; 95/413 Test #265: omp3-grad2 ....................... Passed 116.89 sec; Start 83: cc9a; 96/413 Test #153: dfomp2p5-2 ....................... Passed 53.80 sec; Start 81: cc8c; 97/413 Test #319: sapt3 ............................ Passed 78.68 sec; Start 206: frac-ip-fitting; 98/413 Test #82: cc9 .............................. Passed 72.01 sec; Start 391: python-pubchem; 99/413 Test #79: cc8a ............................. Passed 45.79 sec; Start 57: cc4; 100/413 Test #67: cc49 ............................. Passed 49.51 sec; Start 142: dfomp2-2; 101/413 Test #321: sapt5 ............................ Passed 77.16 sec; Start 247: ocepa3; 102/413 Test #294: psimrcc-fd-freq2 ................. Passed 73.49 sec; Start 169: dft-b3lyp; 103/413 Test #83: cc9a ............................. Passed 45.91 sec; Start 12: cbs-parser; 104/413 Test #78: cc8 .............................. Passed 64.94 sec; Start 34: cc18; 105/413 Test #81: cc8c ............................. Passed 40.15 sec; Start 301: pywrap-alias; 106/413 Test #57: cc4 .............................. Passed 36.68 sec; Start 69: cc50; 107/413 Test #142: dfomp2-2 ......................... Passed 57.07 sec; Start 128: dfccsd-t-grad1; 108/413 Test #391: python-pubchem ................... Passed 64.54 sec; Start 56: cc39; 109/413 Test #206: frac-ip-fitting .................. Passed 73.00 sec; Start 299: pubchem1; 110/413 Test #280: opt13 ............................ Passed 825.07 sec; Start 101: ci-property; 111/413 Test #318: sapt2 ............................ Passed 352.35 sec; Start 202: fnocc2; 112/413 Test #247: ocepa3 ........................... Passed 52.53 sec; Start 239: nbody-he-cluster; 113/413 Test #34: cc18 ............................. Passed 50.39 sec; Start 50: cc33; 114/413 Test #115: dcft7 ............................ Passed 394.48 sec; Start 68: cc4a; 115/413 Test #169: dft-b3lyp ........................ Passed 70.61 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:10004,Test,Test,10004,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability,; 95/412 Test #116: dcft9 ............................ Passed 122.12 sec; Start 148: dfomp3-2; 96/412 Test #67: cc49 ............................. Passed 68.52 sec; Start 152: dfomp2p5-2; 97/412 Test #251: omp2-5 ........................... Passed 118.71 sec; Start 101: ci-property; 98/412 Test #298: pubchem1 ......................... Passed 66.34 sec; Start 60: cc42; 99/412 Test #79: cc8a ............................. Passed 77.39 sec; Start 66: cc48; 100/412 Test #150: dfomp3-grad2 ..................... Passed 113.61 sec; Start 82: cc9; 101/412 Test #65: cc47 ............................. Passed 82.63 sec; Start 74: cc55; 102/412 Test #31: cc15 ............................. Passed 138.15 sec; Start 108: dcft1; 103/412 Test #141: dfomp2-2 ......................... Passed 73.14 sec; Start 85: cdomp2-2; 104/412 Test #279: opt13 ............................ Passed 845.14 sec; Start 57: cc4; 105/412 Test #148: dfomp3-2 ......................... Passed 65.50 sec; Start 238: nbody-he-cluster; 106/412 Test #152: dfomp2p5-2 ....................... Passed 56.77 sec; Start 78: cc8; 107/412 Test #28: cc13c ............................ Passed 134.32 sec; Start 274: opt7; 108/412 Test #157: dfomp2p5-grad2 ................... Passed 86.76 sec; Start 277: opt11; 109/412 Test #101: ci-property ...................... Passed 61.99 sec; Start 64: cc46; 110/412 Test #60: cc42 ............................. Passed 67.55 sec; Start 73: cc54; 111/412 Test #66: cc48 ............................. Passed 67.59 sec; Start 68: cc4a; 112/412 Test #82: cc9 .............................. Passed 58.84 sec; Start 171: dft1-alt; 113/412 Test #74: cc55 ............................. Passed 58.53 sec; Start 12: cbs-parser; 114/412 Test #85: cdomp2-2 ......................... Passed 63.06 sec; Start 55: cc38; 115/412 Test #21: cc1 .............................. Passed 135.62 sec; Start 163: dft-grad-meta; 116/412 Test #108: dcft1 ............................ Passed 81.10 sec; Start 143: dfomp2-4; 117/41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:10138,Test,Test,10138,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,; 97/411 Test #85: cepa0-grad1 ...................... Passed 1.45 sec; Start 86: cepa0-grad2; 98/411 Test #86: cepa0-grad2 ...................... Passed 2.36 sec; Start 87: cepa1; 99/411 Test #87: cepa1 ............................ Passed 2.08 sec; Start 88: cepa2; 100/411 Test #88: cepa2 ............................ Passed 2.14 sec; Start 89: cepa3; 101/411 Test #89: cepa3 ............................ Passed 5.13 sec; Start 90: cepa1; 102/411 Test #90: cepa1 ............................ Passed 3.27 sec; Start 91: cepa-module; 103/411 Test #91: cepa-module ...................... Passed 13.93 sec; Start 92: ci-multi; 104/411 Test #92: ci-multi ......................... Passed 11.39 sec; Start 93: cisd-h2o+-0; 105/411 Test #93: cisd-h2o+-0 ...................... Passed 3.75 sec; Start 94: cisd-h2o+-1; 106/411 Test #94: cisd-h2o+-1 ...................... Passed 3.80 sec; Start 95: cisd-h2o+-2; 107/411 Test #95: cisd-h2o+-2 ...................... Passed 3.93 sec; Start 96: cisd-h2o-clpse; 108/411 Test #96: cisd-h2o-clpse ................... Passed 1.28 sec; Start 97: cisd-opt-fd; 109/411 Test #97: cisd-opt-fd ...................... Passed 93.35 sec; Start 98: cisd-sp; 110/411 Test #98: cisd-sp .......................... Passed 7.29 sec; Start 99: cisd-sp-2; 111/411 Test #99: cisd-sp-2 ........................ Passed 4.05 sec; Start 100: ci-property; 112/411 Test #100: ci-property ...................... Passed 41.71 sec; Start 101: cubeprop; 113/411 Test #101: cubeprop ......................... Passed 8.48 sec; Start 102: decontract; 114/411 Test #102: decontract ....................... Passed 1.32 sec; Start 103: dcft-grad1; 115/411 Test #103: dcft-grad1 ....................... Passed 73.33 sec; Start 104: dcft-grad2; 116/411 Test #104: dcft-grad2 ....................... Passed 10.18 sec; Start 105: dcft-grad3; 117/411 Test #105: dcft-grad3 ....................... Passed 7.23 sec; Start 106: dcft-grad4; 118/411 Test #106: dcft-grad4 ....................... Passed 25.47 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:9565,Test,Test,9565,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,; 97/411 Test #85: cepa0-grad1 ...................... Passed 1.54 sec; Start 86: cepa0-grad2; 98/411 Test #86: cepa0-grad2 ...................... Passed 2.07 sec; Start 87: cepa1; 99/411 Test #87: cepa1 ............................ Passed 2.11 sec; Start 88: cepa2; 100/411 Test #88: cepa2 ............................ Passed 1.90 sec; Start 89: cepa3; 101/411 Test #89: cepa3 ............................ Passed 5.14 sec; Start 90: cepa1; 102/411 Test #90: cepa1 ............................ Passed 3.07 sec; Start 91: cepa-module; 103/411 Test #91: cepa-module ...................... Passed 19.01 sec; Start 92: ci-multi; 104/411 Test #92: ci-multi ......................... Passed 13.85 sec; Start 93: cisd-h2o+-0; 105/411 Test #93: cisd-h2o+-0 ...................... Passed 4.31 sec; Start 94: cisd-h2o+-1; 106/411 Test #94: cisd-h2o+-1 ...................... Passed 4.38 sec; Start 95: cisd-h2o+-2; 107/411 Test #95: cisd-h2o+-2 ...................... Passed 4.26 sec; Start 96: cisd-h2o-clpse; 108/411 Test #96: cisd-h2o-clpse ................... Passed 1.34 sec; Start 97: cisd-opt-fd; 109/411 Test #97: cisd-opt-fd ...................... Passed 104.83 sec; Start 98: cisd-sp; 110/411 Test #98: cisd-sp .......................... Passed 8.43 sec; Start 99: cisd-sp-2; 111/411 Test #99: cisd-sp-2 ........................ Passed 4.47 sec; Start 100: ci-property; 112/411 Test #100: ci-property ...................... Passed 42.49 sec; Start 101: cubeprop; 113/411 Test #101: cubeprop ......................... Passed 8.78 sec; Start 102: decontract; 114/411 Test #102: decontract ....................... Passed 1.30 sec; Start 103: dcft-grad1; 115/411 Test #103: dcft-grad1 ....................... Passed 210.20 sec; Start 104: dcft-grad2; 116/411 Test #104: dcft-grad2 ....................... Passed 27.58 sec; Start 105: dcft-grad3; 117/411 Test #105: dcft-grad3 ....................... Passed 17.50 sec; Start 106: dcft-grad4; 118/411 Test #106: dcft-grad4 ....................... Passed 32.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:9587,Test,Test,9587,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability,; 99/412 Test #193: fd-freq-energy ................... Passed 97.88 sec; Start 361: x2c1; 100/412 Test #19: cbs-xtpl-nbody ................... Passed 102.30 sec; Start 60: cc42; 101/412 Test #260: omp3-3 ........................... Passed 112.58 sec; Start 68: cc4a; 102/412 Test #277: opt11 ............................ Passed 63.60 sec; Start 300: pywrap-alias; 103/412 Test #81: cc8c ............................. Passed 64.99 sec; Start 2: adc2; 104/412 Test #150: dfomp3-grad2 ..................... Passed 124.28 sec; Start 65: cc47; 105/412 Test #243: ocepa-grad2 ...................... Passed 114.31 sec; Start 21: cc1; 106/412 Test #61: cc43 ............................. Passed 136.20 sec; Start 35: cc19; 107/412 Test #308: pywrap-db1 ....................... Passed 43.46 sec; Start 107: dcft-grad4; 108/412 Test #349: sapt-compare ..................... Passed 47.52 sec; Start 238: nbody-he-cluster; 109/412 Test #393: python-cc54 ...................... Passed 54.46 sec; Start 67: cc49; 110/412 Test #262: omp3-5 ........................... Passed 128.11 sec; Start 274: opt7; 111/412 Test #2: adc2 ............................. Passed 42.65 sec; Start 143: dfomp2-4; 112/412 Test #303: pywrap-cbs1 ...................... Passed 211.04 sec; Start 69: cc50; 113/412 Test #107: dcft-grad4 ....................... Passed 45.68 sec; Start 250: omp2-4; 114/412 Test #361: x2c1 ............................. Passed 82.35 sec; Start 313: rasci-ne; 115/412 Test #245: ocepa2 ........................... Passed 113.03 sec; Start 324: sapt7; 116/412 Test #68: cc4a ............................. Passed 71.90 sec; Start 134: dfmp2-ecp; 117/412 Test #238: nbody-he-cluster ................. Passed 58.29 sec; Start 130: dfmp2-1; 118/412 Test #65: cc47 ............................. Passed 69.48 sec; Start 80: cc8b; 119/412 Test #35: cc19 ............................. Passed 71.41 sec; Start 108: dcft1; 120/412 Test #60: cc42 ............................. Passed 90.67 sec; Start 338: scf6; 121/412 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:10517,Test,Test,10517,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,"; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-2> (5); > - *M* tests/dft-b3lyp/input.dat; > <https://github.com/psi4/psi4/pull/1591/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1591.patch; > - https://github.com/psi4/psi4/pull/1591.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1591>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdvDQ8k3q9iMmt3WyUH9_hci95FKbks5vdu4LgaJpZM4ceQFR>; > .;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:2674,test,testing,2674,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,4,['test'],['testing']
Testability,"; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; > and confusing option?; > - Do users want access to custom pruning, e.g. via an array to define; > grids for RadialPruneMgr::ShellPruning ?; > - Pruning enabled by default? (I would vote yes); >; > Checklist; >; > - Documentation; > - Tests added; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1591; > Commit Summary; >; > - first try of Treutler pruning. Error very large; > - testing; > - testing stage; > - adds Treutlers M4 fitting radii and new BS radii; > - adds switch for 3 different pruning schemes; > - BSrad in Angstrom works best..; > - cleaning up; > - adds smooth Becke mu of Ochsenfeld; >; > File Changes; >; > - *M* psi4/src/psi4/libfock/cubature.cc; > <https://github.com/psi4/psi4/pull/1591/files#diff-0> (235); > - *M* psi4/src/psi4/libfock/cubature.h; > <https://github.com/psi4/psi4/pull/1591/files#diff-1> (9); > - *M* psi4/src/read_options.cc; > <https://github.com/psi4/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:2236,Test,Tests,2236,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,3,"['Test', 'test']","['Tests', 'tests']"
Testability,; > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14777,test,tests,14777,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,; > - _A_ tests/fsapt1/fsapt-ref/fragA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-151 (0); > - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18114,test,tests,18114,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,; > - _A_ tests/isapt1/plot-ref/VB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-204 (0); > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23359,test,tests,23359,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,; > - _A_ tests/isapt1/plot-ref/VC.png; > https://github.com/psi4/psi4/pull/470/files#diff-205 (0); > - _A_ tests/isapt1/plot-ref/VC.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-206 (0); > - _A_ tests/isapt1/plot-ref/dDA.png; > https://github.com/psi4/psi4/pull/470/files#diff-207 (0); > - _A_ tests/isapt1/plot-ref/dDA.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-208 (0); > - _A_ tests/isapt1/plot-ref/dDB.png; > https://github.com/psi4/psi4/pull/470/files#diff-209 (0); > - _A_ tests/isapt1/plot-ref/dDB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-210 (0); > - _A_ tests/isapt1/plot-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-211 (0); > - _A_ tests/isapt1/plot-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-212 (0); > - _A_ tests/isapt1/plot-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-213 (0); > - _A_ tests/isapt1/plot-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-214 (0); > - _A_ tests/isapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-215 (0); > - _A_ tests/isapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-216 (0); > - _A_ tests/isapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-217 (0); > - _A_ tests/isapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-218 (0); > - _A_ tests/isapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-219 (0); > - _A_ tests/isapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-220 (0); > - _A_ tests/isapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-221 (0); > - _A_ tests/isapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-222 (0); > - _A_ tests/isapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-223 (0); > - _A_ tests/isapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-224 (0); > - _,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:23460,test,tests,23460,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14122,test,tests,14122,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,; Start 103: decontract; 371/412 Test #355: tu2-ch2-energy ................... Passed 1.51 sec; Start 288: psimrcc-ccsd_t-1; 372/412 Test #353: stability2 ....................... Passed 2.45 sec; Start 381: psi4numpy-cphf; 373/412 Test #224: molden1 .......................... Passed 14.30 sec; Start 405: json-schema-1-properties; 374/412 Test #222: mints9 ........................... Passed 1.97 sec; Start 401: json-schema-1-ghost; 375/412 Test #211: mcscf2 ........................... Passed 2.51 sec; Start 397: python-memdfjk; 376/412 Test #411: skeletonsointegrals .............. Passed 1.93 sec; Start 299: pubchem2; 377/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.52 sec; Start 388: python-energy; 378/412 Test #221: mints-helper ..................... Passed 1.67 sec; Start 399: json-v11-gradient; 379/412 Test #223: mints10 .......................... Passed 2.18 sec; Start 335: scf3; 380/412 Test #396: python-mints13 ................... Passed 1.96 sec; Start 212: mcscf3; 381/412 Test #363: x2c3 ............................. Passed 3.02 sec; Start 379: mints12; 382/412 Test #354: tu1-h2o-energy ................... Passed 1.83 sec; Start 310: pywrap-molecule; 383/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 210: mcscf1; 384/412 Test #397: python-memdfjk ................... Passed 0.98 sec; Start 217: mints5; 385/412 Test #4: casscf-semi ...................... Passed 15.97 sec; Start 383: psi4numpy-rhf; 386/412 Test #103: decontract ....................... Passed 1.76 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.26 sec; Start 213: mints1; 388/412 Test #405: json-schema-1-properties ......... Passed 1.52 sec; Start 175: docs-bases; 389/412 Test #388: python-energy .................... Passed 1.01 sec; Start 309: pywrap-db3; 390/412 Test #335: scf3 ............................. Passed 0.79 sec; Start 209: matrix1; 391/412 Test #212: mcscf3 ........................... Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:35868,Test,Test,35868,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,; Start 106: dcft-grad4; 120/411 Test #237: nbody-he-cluster ................. Passed 25.96 sec; Start 80: cc8c; 121/411 Test #80: cc8c ............................. Passed 6.42 sec; Start 55: cc39; 122/411 Test #219: mints-benchmark .................. Passed 41.17 sec; Start 56: cc4; 123/411 Test #64: cc47 ............................. Passed 13.48 sec; Start 71: cc53; 124/411 Test #66: cc49 ............................. Passed 19.49 sec; Start 245: ocepa3; 125/411 Test #55: cc39 ............................. Passed 10.10 sec; Start 67: cc4a; 126/411 Test #131: dfmp2-3 .......................... Passed 40.64 sec; Start 374: dft-custom-gga; 127/411 Test #71: cc53 ............................. Passed 11.17 sec; Start 78: cc8a; 128/411 Test #56: cc4 .............................. Passed 13.95 sec; Start 82: cc9a; 129/411 Test #245: ocepa3 ........................... Passed 19.83 sec; Start 37: cc22; 130/411 Test #106: dcft-grad4 ....................... Passed 32.29 sec; Start 323: sapt7; 131/411 Test #67: cc4a ............................. Passed 18.64 sec; Start 206: ghosts; 132/411 Test #78: cc8a ............................. Passed 14.25 sec; Start 273: opt7; 133/411 Test #37: cc22 ............................. Passed 7.28 sec; Start 129: dfmp2-1; 134/411 Test #82: cc9a ............................. Passed 14.69 sec; Start 54: cc38; 135/411 Test #54: cc38 ............................. Passed 6.45 sec; Start 312: rasci-ne; 136/411 Test #374: dft-custom-gga ................... Passed 27.50 sec; Start 152: dfomp2p5-grad1; 137/411 Test #152: dfomp2p5-grad1 ................... Passed 4.11 sec; Start 342: soscf-dft; 138/411 Test #323: sapt7 ............................ Passed 30.87 sec; Start 276: opt11; 139/411 Test #273: opt7 ............................. Passed 25.74 sec; Start 142: dfomp2-4; 140/411 Test #206: ghosts ........................... Passed 30.23 sec; Start 63: cc46; 141/411 Test #129: dfmp2-1 .......................... Passed 31.78 sec; Start 252: omp2-gr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:12194,Test,Test,12194,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,; Start 110: dcft4; 17/411 Test #112: dcft6 ............................ Passed 164.24 sec; Start 38: cc23; 18/411 Test #155: dfscf-bz2 ........................ Passed 143.19 sec; Start 40: cc25; 19/411 Test #183: isapt2 ........................... Passed 138.56 sec; Start 111: dcft5; 20/411 Test #39: cc24 ............................. Passed 207.49 sec; Start 36: cc21; 21/411 Test #305: pywrap-checkrun-rohf ............. Passed 233.63 sec; Start 347: sapt-dft2; 22/411 Test #40: cc25 ............................. Passed 214.72 sec; Start 35: cc2; 23/411 Test #38: cc23 ............................. Passed 217.56 sec; Start 97: cisd-opt-fd; 24/411 Test #111: dcft5 ............................ Passed 199.83 sec; Start 41: cc26; 25/411 Test #278: opt13 ............................ Passed 787.67 sec; Start 42: cc27; 26/411 Test #36: cc21 ............................. Passed 163.61 sec; Start 25: cc13a; 27/411 Test #347: sapt-dft2 ........................ Passed 123.15 sec; Start 113: dcft7; 28/411 Test #110: dcft4 ............................ Passed 362.58 sec; Start 205: frac-traverse; 29/411 Test #97: cisd-opt-fd ...................... Passed 124.14 sec; Start 316: sapt2; 30/411 Test #41: cc26 ............................. Passed 140.34 sec; Start 318: sapt4; 31/411 Test #35: cc2 .............................. Passed 155.79 sec; Start 325: scf-bz2; 32/411 Test #42: cc27 ............................. Passed 87.39 sec; Start 13: cbs-xtpl-alpha; 33/411 Test #13: cbs-xtpl-alpha ................... Passed 90.88 sec; Start 168: dft1; 34/411 Test #325: scf-bz2 .......................... Passed 124.52 sec; Start 161: dft-grad-lr2; 35/411 Test #25: cc13a ............................ Passed 245.69 sec; Start 44: cc29; 36/411 Test #113: dcft7 ............................ Passed 242.17 sec; Start 70: cc52; 37/411 Test #205: frac-traverse .................... Passed 220.26 sec; Start 371: dft-custom-dhdf; 38/411 Test #168: dft1 ............................. Passed 94.58 sec; Start 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:2822,Test,Test,2822,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['Test'],['Test']
Testability,; Start 143: dfomp2-grad2; 45/401 Test #114: dcft9 ............................ Passed 101.63 sec; Start 57: cc40; 46/401 Test #366: dft-custom-dhdf .................. Passed 49.28 sec; Start 257: omp3-5; 47/401 Test #301: pywrap-checkrun-rohf ............. Passed 555.72 sec; Start 272: opt11; 48/401 Test #69: cc52 ............................. Passed 122.20 sec; Start 68: cc51; 49/401 Test #163: dft-b3lyp ........................ Passed 36.67 sec; Start 256: omp3-4; 50/401 Test #24: cc13 ............................. Passed 251.21 sec; Start 246: omp2-5; 51/401 Test #12: cbs-parser ....................... Passed 50.44 sec; Start 64: cc48; 52/401 Test #61: cc44 ............................. Passed 62.83 sec; Start 73: cc5a; 53/401 Test #233: nbody-he-cluster ................. Passed 47.19 sec; Start 240: ocepa2; 54/401 Test #58: cc41 ............................. Passed 109.69 sec; Start 333: scf6; 55/401 Test #272: opt11 ............................ Passed 51.45 sec; Start 245: omp2-4; 56/401 Test #28: cc13d ............................ Passed 217.30 sec; Start 369: dft-custom-gga; 57/401 Test #57: cc40 ............................. Passed 61.45 sec; Start 269: opt7; 58/401 Test #46: cc30 ............................. Passed 67.91 sec; Start 308: rasci-ne; 59/401 Test #255: omp3-3 ........................... Passed 75.64 sec; Start 2: adc2; 60/401 Test #27: cc13c ............................ Passed 98.63 sec; Start 67: cc50; 61/401 Test #68: cc51 ............................. Passed 51.83 sec; Start 154: dfscf-bz2; 62/401 Test #143: dfomp2-grad2 ..................... Passed 80.96 sec; Start 259: omp3-grad2; 63/401 Test #369: dft-custom-gga ................... Passed 31.17 sec; Start 146: dfomp3-2; 64/401 Test #257: omp3-5 ........................... Passed 92.99 sec; Start 322: scf-ecp; 65/401 Test #333: scf6 ............................. Passed 42.20 sec; Start 226: mp2-module; 66/401 Test #60: cc43 ............................. Passed 101.83 sec; Start 298: pywrap,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:5831,Test,Test,5831,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,; Start 155: dft-grad-lr1; 206/413 Test #7: casscf-sp ........................ Passed 7.33 sec; Start 298: psithon2; 207/413 Test #90: cepa3 ............................ Passed 6.58 sec; Start 315: rasscf-sp; 208/413 Test #191: fci-tdm-2 ........................ Passed 24.21 sec; Start 395: python-3-index-transforms; 209/413 Test #360: tu5-sapt ......................... Passed 21.51 sec; Start 166: dft-grad1; 210/413 Test #240: nbody-intermediates .............. Passed 13.17 sec; Start 220: mints8; 211/413 Test #277: opt9 ............................. Passed 12.90 sec; Start 171: dft-vv10; 212/413 Test #178: extern1 .......................... Passed 11.25 sec; Start 293: psimrcc-fd-freq1; 213/413 Test #324: sapt-dft-lrc ..................... Passed 20.22 sec; Start 303: pywrap-basis; 214/413 Test #315: rasscf-sp ........................ Passed 4.10 sec; Start 379: pywrap-align-chiral; 215/413 Test #292: psimrcc-ccsd_t-4 ................. Passed 19.35 sec; Start 368: dft-smoke; 216/413 Test #395: python-3-index-transforms ........ Passed 10.36 sec; Start 352: dft-custom; 217/413 Test #317: sapt1 ............................ Passed 17.40 sec; Start 199: freq-isotope1; 218/413 Test #379: pywrap-align-chiral .............. Passed 7.69 sec; Start 91: cepa1; 219/413 Test #293: psimrcc-fd-freq1 ................. Passed 8.55 sec; Start 5: casscf-sa-sp; 220/413 Test #298: psithon2 ......................... Passed 13.64 sec; Start 326: sapt8; 221/413 Test #323: sapt-dft-api ..................... Passed 17.40 sec; Start 342: soscf-large; 222/413 Test #167: dft-grad2 ........................ Passed 17.15 sec; Start 340: scf7; 223/413 Test #91: cepa1 ............................ Passed 3.54 sec; Start 243: ocepa-grad1; 224/413 Test #303: pywrap-basis ..................... Passed 12.18 sec; Start 102: cubeprop; 225/413 Test #155: dft-grad-lr1 ..................... Passed 16.77 sec; Start 268: opt1-fd; 226/413 Test #166: dft-grad1 ........................ Passed 14.28 sec; Start 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:20261,Test,Test,20261,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,; Start 15: cbs-xtpl-freq; 29/411 Test #15: cbs-xtpl-freq .................... Passed 5.43 sec; Start 16: cbs-xtpl-gradient; 30/411 Test #16: cbs-xtpl-gradient ................ Passed 12.13 sec; Start 17: cbs-xtpl-opt; 31/411 Test #17: cbs-xtpl-opt ..................... Passed 32.38 sec; Start 19: cbs-xtpl-wrapper; 32/411 Test #19: cbs-xtpl-wrapper ................. Passed 37.42 sec; Start 20: cc1; 33/411 Test #20: cc1 .............................. Passed 6.42 sec; Start 21: cc10; 34/411 Test #21: cc10 ............................. Passed 3.59 sec; Start 22: cc11; 35/411 Test #22: cc11 ............................. Passed 3.22 sec; Start 23: cc12; 36/411 Test #23: cc12 ............................. Passed 3.59 sec; Start 24: cc13; 37/411 Test #24: cc13 ............................. Passed 18.49 sec; Start 26: cc13b; 38/411 Test #26: cc13b ............................ Passed 7.05 sec; Start 27: cc13c; 39/411 Test #27: cc13c ............................ Passed 9.49 sec; Start 28: cc13d; 40/411 Test #28: cc13d ............................ Passed 15.84 sec; Start 29: cc14; 41/411 Test #29: cc14 ............................. Passed 22.66 sec; Start 30: cc15; 42/411 Test #30: cc15 ............................. Passed 5.86 sec; Start 31: cc16; 43/411 Test #31: cc16 ............................. Passed 13.43 sec; Start 32: cc17; 44/411 Test #32: cc17 ............................. Passed 6.00 sec; Start 33: cc18; 45/411 Test #33: cc18 ............................. Passed 7.69 sec; Start 34: cc19; 46/411 Test #34: cc19 ............................. Passed 11.80 sec; Start 35: cc2; 47/411 Test #35: cc2 .............................. Passed 31.59 sec; Start 36: cc21; 48/411 Test #36: cc21 ............................. Passed 26.46 sec; Start 37: cc22; 49/411 Test #37: cc22 ............................. Passed 3.51 sec; Start 38: cc23; 50/411 Test #38: cc23 ............................. Passed 30.16 sec; Start 39: cc24; 51/411 Test #39: cc24 ............................. Passed ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:3686,Test,Test,3686,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,; Start 161: dft-b2plyp; 220/413 Test #90: cepa3 ............................ Passed 26.99 sec; Start 305: pywrap-checkrun-convcrit; 221/413 Test #292: psimrcc-ccsd_t-4 ................. Passed 18.56 sec; Start 110: dcft2; 222/413 Test #139: dfmp2-grad4 ...................... Passed 11.83 sec; Start 323: sapt-dft-api; 223/413 Test #167: dft-grad2 ........................ Passed 16.75 sec; Start 155: dft-grad-lr1; 224/413 Test #199: freq-isotope1 .................... Passed 17.40 sec; Start 317: sapt1; 225/413 Test #277: opt9 ............................. Passed 22.86 sec; Start 315: rasscf-sp; 226/413 Test #178: extern1 .......................... Passed 22.24 sec; Start 220: mints8; 227/413 Test #110: dcft2 ............................ Passed 15.97 sec; Start 405: json-schema-1-gradient; 228/413 Test #209: gibbs ............................ Passed 30.26 sec; Start 407: skeleton; 229/413 Test #323: sapt-dft-api ..................... Passed 16.91 sec; Start 406: json-schema-1-properties; 230/413 Test #405: json-schema-1-gradient ........... Passed 1.96 sec; Start 404: json-schema-1-throws; 231/413 Test #407: skeleton ......................... Passed 1.52 sec; Start 268: opt1-fd; 232/413 Test #406: json-schema-1-properties ......... Passed 1.40 sec; Start 124: dfccd-grad1; 233/413 Test #404: json-schema-1-throws ............. Passed 0.65 sec; Start 298: psithon2; 234/413 Test #305: pywrap-checkrun-convcrit ......... Passed 23.29 sec; Start 408: skeletonaointegrals; 235/413 Test #168: dft-psivar ....................... Passed 24.76 sec; Start 91: cepa1; 236/413 Test #155: dft-grad-lr1 ..................... Passed 17.44 sec; Start 272: opt4; 237/413 Test #408: skeletonaointegrals .............. Passed 1.56 sec; Start 163: dft-ghost; 238/413 Test #161: dft-b2plyp ....................... Passed 26.33 sec; Start 159: dfrasscf-sp; 239/413 Test #220: mints8 ........................... Passed 14.77 sec; Start 129: dfccsdt1; 240/413 Test #317: sapt1 ............................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:21715,Test,Test,21715,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['Test'],['Test']
Testability,; Start 168: dft1; 52/411 Test #205: frac-traverse .................... Passed 210.26 sec; Start 371: dft-custom-dhdf; 53/411 Test #47: cc31 ............................. Passed 35.29 sec; Start 58: cc41; 54/411 Test #58: cc41 ............................. Passed 20.82 sec; Start 149: dfomp3-grad2; 55/411 Test #149: dfomp3-grad2 ..................... Passed 7.37 sec; Start 69: cc51; 56/411 Test #161: dft-grad-lr2 ..................... Passed 89.66 sec; Start 43: cc28; 57/411 Test #278: opt13 ............................ Passed 799.10 sec; Start 27: cc13c; 58/411 Test #371: dft-custom-dhdf .................. Passed 81.14 sec; Start 319: sapt5; 59/411 Test #27: cc13c ............................ Passed 10.62 sec; Start 279: opt14; 60/411 Test #168: dft1 ............................. Passed 88.97 sec; Start 75: cc6; 61/411 Test #43: cc28 ............................. Passed 24.64 sec; Start 60: cc43; 62/411 Test #60: cc43 ............................. Passed 15.10 sec; Start 91: cepa-module; 63/411 Test #69: cc51 ............................. Passed 56.92 sec; Start 292: psimrcc-fd-freq2; 64/411 Test #91: cepa-module ...................... Passed 19.19 sec; Start 115: dcft9; 65/411 Test #75: cc6 .............................. Passed 49.07 sec; Start 259: omp3-3; 66/411 Test #316: sapt2 ............................ Passed 354.02 sec; Start 74: cc5a; 67/411 Test #115: dcft9 ............................ Passed 13.18 sec; Start 317: sapt3; 68/411 Test #319: sapt5 ............................ Passed 67.31 sec; Start 167: dft-b3lyp; 69/411 Test #259: omp3-3 ........................... Passed 18.77 sec; Start 30: cc15; 70/411 Test #279: opt14 ............................ Passed 74.61 sec; Start 153: dfomp2p5-grad2; 71/411 Test #30: cc15 ............................. Passed 12.46 sec; Start 104: dcft-grad2; 72/411 Test #153: dfomp2p5-grad2 ................... Passed 15.20 sec; Start 61: cc44; 73/411 Test #292: psimrcc-fd-freq2 ................. Passed 62.74 sec; Start 204: fra,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:5997,Test,Test,5997,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,; Start 169: dft-b3lyp; 97/413 Test #74: cc55 ............................. Passed 72.94 sec; Start 72: cc53; 98/413 Test #79: cc8a ............................. Passed 57.92 sec; Start 80: cc8b; 99/413 Test #35: cc19 ............................. Passed 59.63 sec; Start 66: cc48; 100/413 Test #149: dfomp3-2 ......................... Passed 74.46 sec; Start 65: cc47; 101/413 Test #115: dcft7 ............................ Passed 334.33 sec; Start 247: ocepa3; 102/413 Test #206: frac-ip-fitting .................. Passed 71.76 sec; Start 56: cc39; 103/413 Test #318: sapt2 ............................ Passed 348.87 sec; Start 82: cc9; 104/413 Test #153: dfomp2p5-2 ....................... Passed 81.55 sec; Start 202: fnocc2; 105/413 Test #280: opt13 ............................ Passed 770.64 sec; Start 67: cc49; 106/413 Test #83: cc9a ............................. Passed 72.51 sec; Start 144: dfomp2-4; 107/413 Test #78: cc8 .............................. Passed 90.07 sec; Start 69: cc50; 108/413 Test #169: dft-b3lyp ........................ Passed 70.59 sec; Start 391: python-pubchem; 109/413 Test #65: cc47 ............................. Passed 70.33 sec; Start 128: dfccsd-t-grad1; 110/413 Test #80: cc8b ............................. Passed 78.37 sec; Start 109: dcft1; 111/413 Test #72: cc53 ............................. Passed 95.69 sec; Start 81: cc8c; 112/413 Test #202: fnocc2 ........................... Passed 62.29 sec; Start 68: cc4a; 113/413 Test #67: cc49 ............................. Passed 60.99 sec; Start 22: cc10; 114/413 Test #66: cc48 ............................. Passed 94.02 sec; Start 394: python-cc54; 115/413 Test #247: ocepa3 ........................... Passed 92.69 sec; Start 34: cc18; 116/413 Test #56: cc39 ............................. Passed 86.96 sec; Start 150: dfomp3-grad1; 117/413 Test #69: cc50 ............................. Passed 56.64 sec; Start 275: opt7; 118/413 Test #82: cc9 .............................. Passed 87.12 sec; Start 299: pubche,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:10283,Test,Test,10283,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['Test'],['Test']
Testability,; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 57.71 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 113.77 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 53.70 sec; Start 22: cc11; 20/411 Test #21: cc10 ............................. Passed 10.30 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 23.57 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 10.89 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.82 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 221.87 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 28.09 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 42.99 sec; Start 30: cc15; 27/411 Test #25: cc13a ............................ Passed 275.86 sec; Start 31: cc16; 28/411 Test #195: fd-freq-gradient-large ........... Passed 291.59 sec; Start 32: cc17; 29/411 Test #30: cc15 ............................. Passed 40.51 sec; Start 33: cc18; 30/411 Test #113: dcft7 ............................ Passed 302.35 sec; Start 34: cc19; 31/411 Test #32: cc17 ............................. Passed 23.24 sec; Start 35: cc2; 32/411 Test #24: cc13 ............................. Passed 107.73 sec; Start 36: cc21; 33/411 Test #28: cc13d ............................ Passed 97.78 sec; Start 37: cc22; 34/411 Test #33: cc18 ............................. Passed 31.39 sec; Start 38: cc23; 35/411 Test #37: cc22 ............................. Passed 18.43 sec; Start 39: cc24; 36/411 Test #34: cc19 ............................. Passed 38.52 sec; Start 40: cc25; 37/411 Test #316: sapt2 .........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:2739,Test,Test,2739,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,; Start 178: fsapt1; Start 182: isapt1; Start 18: cbs-xtpl-func; Start 181: fsapt-allterms; Start 193: fd-freq-energy-large; Start 195: fd-freq-gradient-large; Start 278: opt13; 1/411 Test #195: fd-freq-gradient-large ........... Passed 297.78 sec; Start 162: dft-grad-lr3; 2/411 Test #182: isapt1 ........................... Passed 469.93 sec; Start 227: mp2-def2; 3/411 Test #18: cbs-xtpl-func .................... Passed 485.98 sec; Start 25: cc13a; 4/411 Test #193: fd-freq-energy-large ............. Passed 551.44 sec; Start 113: dcft7; 5/411 Test #181: fsapt-allterms ................... Passed 652.63 sec; Start 205: frac-traverse; 6/411 Test #394: python-vibanalysis ............... Passed 680.49 sec; Start 316: sapt2; 7/411 Test #25: cc13a ............................ Passed 254.82 sec; Start 318: sapt4; 8/411 Test #162: dft-grad-lr3 ..................... Passed 489.85 sec; Start 325: scf-bz2; 9/411 Test #113: dcft7 ............................ Passed 278.82 sec; Start 373: dft-custom-mgga; 10/411 Test #278: opt13 ............................ Passed 847.95 sec; Start 320: sapt6; 11/411 Test #205: frac-traverse .................... Passed 221.61 sec; Start 155: dfscf-bz2; 12/411 Test #227: mp2-def2 ......................... Passed 440.79 sec; Start 183: isapt2; 13/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 347: sapt-dft2; 14/411 Test #320: sapt6 ............................ Passed 169.47 sec; Start 112: dcft6; 15/411 Test #155: dfscf-bz2 ........................ Passed 146.26 sec; Start 97: cisd-opt-fd; 16/411 Test #373: dft-custom-mgga .................. Passed 193.16 sec; Start 281: opt-irc-2; 17/411 Test #316: sapt2 ............................ Passed 360.69 sec; Start 300: pywrap-all; 18/411 Test #347: sapt-dft2 ........................ Passed 128.97 sec; Start 161: dft-grad-lr2; 19/411 Test #183: isapt2 ........................... Passed 138.45 sec; Start 168: dft1; 20/411 Test #161: dft-grad-lr2 ..................... Passed 106.27,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:1169,Test,Test,1169,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ................... Passed 51.60 sec; Start 20: cbs-xtpl-wrapper; 18/412 Test #17: cbs-xtpl-opt ..................... Passed 74.20 sec; Start 21: cc1; 19/412 Test #206: frac-traverse .................... Passed 282.86 sec; Start 22: cc10; 20/412 Test #21: cc1 .............................. Passed 20.69 sec; Start 23: cc11; 21/412 Test #13: cbs-xtpl-alpha ................... Passed 156.06 sec; Start 24: cc12; 22/412 Test #24: cc12 ............................. Passed 18.96 sec; Start 25: cc13; 23/412 Test #22: cc10 ............................. Passed 22.32 sec; Start 27: cc13b; 24/412 Test #23: cc11 ............................. Passed 25.37 sec; Start 28: cc13c; 25/412 Test #20: cbs-xtpl-wrapper ................. Passed 66.34 sec; Start 29: cc13d; 26/412 Test #26: cc13a ............................ Passed 329.40 sec; Start 30: cc14; 27/412 Test #27: cc13b ............................ Passed 52.22 sec; Start 31: cc15; 28/412 Test #196: fd-freq-gradient-large ........... Passed 362.66 sec; Start 32: cc16; 29/412 Test #28: cc13c ............................ Passed 57.54 sec; Start 33: cc17; 30/412 Test #114: dcft7 ............................ Passed 366.03 sec; Start 34: cc18; 31/412 Test #34: cc18 ............................. Passed 33.35 sec; Start 35: cc19; 32/412 Test #317: sapt2 ............................ Passed 402.38 sec; Start 36: cc2; 33/412 Test #33: cc17 ............................. Passed 40.14 sec; Start 37: cc21; 34/412 Test #31: cc15 ............................. Passed 90.60 sec; Start 38: cc22; 35/412 Test #35: cc19 ............................. Passed 58.84 sec; Start 39: cc23; 36/412 Test #38: cc22 ............................. Passed 20.81 sec; Start 40: cc24; 37/412 Test #32: cc16 ............................. Passed 133.66 sec; Start 41: cc25; 38/412 Test #183: isapt1 .......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:2839,Test,Test,2839,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,; Start 192: fci-coverage; 292/413 Test #234: mp2p5-grad2 ...................... Passed 8.43 sec; Start 412: skeletonsointegrals; 293/413 Test #99: cisd-sp .......................... Passed 11.91 sec; Start 411: skeletonscf; 294/413 Test #411: skeletonscf ...................... Passed 0.70 sec; Start 386: psi4numpy-rhf-hessian; 295/413 Test #94: cisd-h2o+-0 ...................... Passed 7.42 sec; Start 231: mp2-grad2; 296/413 Test #96: cisd-h2o+-2 ...................... Passed 8.19 sec; Start 296: psimrcc-sp1; 297/413 Test #253: omp2-grad1 ....................... Passed 8.93 sec; Start 189: fci-h2o-fzcv; 298/413 Test #95: cisd-h2o+-1 ...................... Passed 5.65 sec; Start 413: skeletonwavefunction; 299/413 Test #255: omp2p5-1 ......................... Passed 6.73 sec; Start 182: fsapt-terms; 300/413 Test #297: psithon1 ......................... Passed 11.65 sec; Start 372: scf-coverage; 301/413 Test #412: skeletonsointegrals .............. Passed 1.54 sec; Start 187: fci-h2o; 302/413 Test #257: omp2p5-grad1 ..................... Passed 8.38 sec; Start 137: dfmp2-grad2; 303/413 Test #413: skeletonwavefunction ............. Passed 1.27 sec; Start 15: cbs-xtpl-freq; 304/413 Test #188: fci-h2o-2 ........................ Passed 6.89 sec; Start 186: fci-dipole; 305/413 Test #134: dfmp2-4 .......................... Passed 12.52 sec; Start 264: omp3-grad1; 306/413 Test #343: soscf-ref ........................ Passed 13.56 sec; Start 383: psi4numpy-dfmp2; 307/413 Test #192: fci-coverage ..................... Passed 4.23 sec; Start 205: frac; 308/413 Test #386: psi4numpy-rhf-hessian ............ Passed 3.02 sec; Start 233: mp2p5-grad1; 309/413 Test #231: mp2-grad2 ........................ Passed 3.37 sec; Start 248: omp2-1; 310/413 Test #296: psimrcc-sp1 ...................... Passed 4.43 sec; Start 226: molden2; 311/413 Test #137: dfmp2-grad2 ...................... Passed 4.25 sec; Start 193: fcidump; 312/413 Test #383: psi4numpy-dfmp2 .................. Passed 2.63 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:28480,Test,Test,28480,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['Test'],['Test']
Testability,; Start 194: fd-freq-gradient; 139/411 Test #57: cc40 ............................. Passed 252.59 sec; Start 350: dft-custom; 140/411 Test #114: dcft8 ............................ Passed 1380.21 sec; Start 366: dft-smoke; 141/411 Test #60: cc43 ............................. Passed 383.91 sec; Start 260: omp3-4; 142/411 Test #350: dft-custom ....................... Passed 20.59 sec; Start 217: mints6; 143/411 Test #366: dft-smoke ........................ Passed 21.56 sec; Start 238: nbody-intermediates; 144/411 Test #91: cepa-module ...................... Passed 508.69 sec; Start 207: gibbs; 145/411 Test #217: mints6 ........................... Passed 12.17 sec; Start 303: pywrap-checkrun-convcrit; 146/411 Test #194: fd-freq-gradient ................. Passed 51.14 sec; Start 256: omp2p5-grad2; 147/411 Test #238: nbody-intermediates .............. Passed 39.78 sec; Start 138: dfmp2-grad5; 148/411 Test #207: gibbs ............................ Passed 55.21 sec; Start 285: props2; 149/411 Test #303: pywrap-checkrun-convcrit ......... Passed 54.35 sec; Start 263: omp3-grad2; 150/411 Test #285: props2 ........................... Passed 16.97 sec; Start 12: cbs-parser; 151/411 Test #138: dfmp2-grad5 ...................... Passed 35.59 sec; Start 16: cbs-xtpl-gradient; 152/411 Test #242: ocepa-grad2 ...................... Passed 276.22 sec; Start 26: cc13b; 153/411 Test #16: cbs-xtpl-gradient ................ Passed 81.48 sec; Start 34: cc19; 154/411 Test #28: cc13d ............................ Passed 892.45 sec; Start 65: cc48; 155/411 Test #256: omp2p5-grad2 ..................... Passed 236.27 sec; Start 245: ocepa3; 156/411 Test #12: cbs-parser ....................... Passed 214.30 sec; Start 133: dfmp2-ecp; 157/411 Test #263: omp3-grad2 ....................... Passed 238.71 sec; Start 176: extern1; 158/411 Test #133: dfmp2-ecp ........................ Passed 15.59 sec; Start 261: omp3-5; 159/411 Test #34: cc19 ............................. Passed 179.49 sec; Start 67: cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:14054,Test,Test,14054,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,; Start 196: fd-freq-gradient-large; Start 279: opt13; Start 26: cc13a; Start 114: dcft7; Start 206: frac-traverse; Start 317: sapt2; Start 319: sapt4; Start 326: scf-bz2; Start 1: adc1; Start 2: adc2; 1/412 Test #1: adc1 ............................. Passed 40.38 sec; Start 3: casscf-fzc-sp; 2/412 Test #3: casscf-fzc-sp .................... Passed 7.58 sec; Start 4: casscf-semi; 3/412 Test #4: casscf-semi ...................... Passed 3.39 sec; Start 5: casscf-sa-sp; 4/412 Test #2: adc2 ............................. Passed 68.12 sec; Start 6: ao-casscf-sp; 5/412 Test #5: casscf-sa-sp ..................... Passed 17.41 sec; Start 7: casscf-sp; 6/412 Test #6: ao-casscf-sp ..................... Passed 8.11 sec; Start 8: castup1; 7/412 Test #8: castup1 .......................... Passed 3.07 sec; Start 9: castup2; 8/412 Test #7: casscf-sp ........................ Passed 14.70 sec; Start 10: castup3; 9/412 Test #9: castup2 .......................... Passed 10.03 sec; Start 11: cbs-delta-energy; 10/412 Test #10: castup3 .......................... Passed 8.30 sec; Start 12: cbs-parser; 11/412 Test #12: cbs-parser ....................... Passed 37.55 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #11: cbs-delta-energy ................. Passed 64.49 sec; Start 14: cbs-xtpl-energy; 13/412 Test #14: cbs-xtpl-energy .................. Passed 15.23 sec; Start 15: cbs-xtpl-freq; 14/412 Test #15: cbs-xtpl-freq .................... Passed 9.08 sec; Start 16: cbs-xtpl-gradient; 15/412 Test #326: scf-bz2 .......................... Passed 188.03 sec; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ................... Passed 51.60 sec; Start 20: cbs-xtpl-wrapper; 18/412 Test #17: cbs-xtpl-opt ..................... Passed 74.20 sec; Start 21: cc1; 19/412 Test #206: frac-traverse .................... Passed 282.86 sec; Start 22: cc10; 20/412 Test #21: cc1 .............................. Pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:1292,Test,Test,1292,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,; Start 201: fnocc2; 113/412 Test #349: sapt-compare ..................... Passed 59.37 sec; Start 55: cc38; 114/412 Test #220: mints-benchmark .................. Passed 56.59 sec; Start 81: cc8c; 115/412 Test #308: pywrap-db1 ....................... Passed 62.96 sec; Start 152: dfomp2p5-2; 116/412 Test #65: cc47 ............................. Passed 89.72 sec; Start 68: cc4a; 117/412 Test #57: cc4 .............................. Passed 86.80 sec; Start 79: cc8a; 118/412 Test #132: dfmp2-3 .......................... Passed 59.47 sec; Start 148: dfomp3-2; 119/412 Test #12: cbs-parser ....................... Passed 96.99 sec; Start 246: ocepa3; 120/412 Test #82: cc9 .............................. Passed 89.68 sec; Start 64: cc46; 121/412 Test #55: cc38 ............................. Passed 68.64 sec; Start 74: cc55; 122/412 Test #141: dfomp2-2 ......................... Passed 85.24 sec; Start 56: cc39; 123/412 Test #83: cc9a ............................. Passed 112.00 sec; Start 85: cdomp2-2; 124/412 Test #78: cc8 .............................. Passed 85.11 sec; Start 143: dfomp2-4; 125/412 Test #201: fnocc2 ........................... Passed 90.60 sec; Start 313: rasci-ne; 126/412 Test #108: dcft1 ............................ Passed 127.38 sec; Start 72: cc53; 127/412 Test #68: cc4a ............................. Passed 76.60 sec; Start 338: scf6; 128/412 Test #152: dfomp2p5-2 ....................... Passed 100.80 sec; Start 73: cc54; 129/412 Test #81: cc8c ............................. Passed 114.40 sec; Start 80: cc8b; 130/412 Test #313: rasci-ne ......................... Passed 55.19 sec; Start 107: dcft-grad4; 131/412 Test #64: cc46 ............................. Passed 92.56 sec; Start 337: scf5; 132/412 Test #246: ocepa3 ........................... Passed 110.86 sec; Start 207: ghosts; 133/412 Test #74: cc55 ............................. Passed 104.12 sec; Start 195: fd-freq-gradient; 134/412 Test #148: dfomp3-2 ......................... Passed 120.91 sec; Start 324:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:11773,Test,Test,11773,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,; Start 221: mints-helper; 360/412 Test #329: scf-upcast-custom-basis .......... Passed 2.62 sec; Start 381: psi4numpy-cphf; 361/412 Test #299: pubchem2 ......................... Passed 2.35 sec; Start 354: tu1-h2o-energy; 362/412 Test #117: ao-dfcasscf-sp ................... Passed 3.58 sec; Start 379: mints12; 363/412 Test #97: cisd-h2o-clpse ................... Passed 2.91 sec; Start 409: skeletonmointegrals; 364/412 Test #211: mcscf2 ........................... Passed 2.42 sec; Start 223: mints10; 365/412 Test #103: decontract ....................... Passed 1.91 sec; Start 310: pywrap-molecule; 366/412 Test #229: mp2-grad1 ........................ Passed 3.12 sec; Start 215: mints3; 367/412 Test #404: json-schema-1-gradient ........... Passed 2.27 sec; Start 411: skeletonsointegrals; 368/412 Test #331: scf-bs ........................... Passed 2.38 sec; Start 384: psi4numpy-rhf-gradient; 369/412 Test #247: omp2-1 ........................... Passed 3.37 sec; Start 353: stability2; 370/412 Test #408: skeletondfmp2 .................... Passed 2.24 sec; Start 401: json-schema-1-ghost; 371/412 Test #350: sapt-sf1 ......................... Passed 1.19 sec; Start 399: json-v11-gradient; 372/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 2.78 sec; Start 405: json-schema-1-properties; 373/412 Test #221: mints-helper ..................... Passed 1.34 sec; Start 412: skeletonwavefunction; 374/412 Test #381: psi4numpy-cphf ................... Passed 1.38 sec; Start 397: python-memdfjk; 375/412 Test #354: tu1-h2o-energy ................... Passed 1.35 sec; Start 294: psimrcc-pt2; 376/412 Test #409: skeletonmointegrals .............. Passed 1.49 sec; Start 388: python-energy; 377/412 Test #379: mints12 .......................... Passed 1.64 sec; Start 406: skeleton; 378/412 Test #223: mints10 .......................... Passed 1.59 sec; Start 217: mints5; 379/412 Test #215: mints3 ........................... Passed 1.33 sec; Start 407: skeletonaointegrals; 380/412 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:34762,Test,Test,34762,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,; Start 230: mp2-module; 220/411 Test #224: molden2 .......................... Passed 17.32 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 9.84 sec; Start 232: mp2p5-grad2; 222/411 Test #229: mp2-grad2 ........................ Passed 9.84 sec; Start 233: mp3-grad1; 223/411 Test #200: fnocc2 ........................... Passed 59.94 sec; Start 234: mp3-grad2; 224/411 Test #231: mp2p5-grad1 ...................... Passed 7.83 sec; Start 235: mp2-property; 225/411 Test #233: mp3-grad1 ........................ Passed 8.32 sec; Start 236: mpn-bh; 226/411 Test #235: mp2-property ..................... Passed 4.28 sec; Start 237: nbody-he-cluster; 227/411 Test #232: mp2p5-grad2 ...................... Passed 13.18 sec; Start 238: nbody-intermediates; 228/411 Test #234: mp3-grad2 ........................ Passed 12.06 sec; Start 239: numpy-array-interface; 229/411 Test #226: mp2-1 ............................ Passed 30.19 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.80 sec; Start 241: ocepa-grad1; 231/411 Test #219: mints-benchmark .................. Passed 43.72 sec; Start 242: ocepa-grad2; 232/411 Test #236: mpn-bh ........................... Passed 7.46 sec; Start 243: ocepa1; 233/411 Test #204: frac-ip-fitting .................. Passed 80.74 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 18.49 sec; Start 245: ocepa3; 235/411 Test #241: ocepa-grad1 ...................... Passed 28.23 sec; Start 246: omp2-1; 236/411 Test #183: isapt2 ........................... Passed 136.14 sec; Start 247: omp2-2; 237/411 Test #238: nbody-intermediates .............. Passed 36.59 sec; Start 248: omp2-3; 238/411 Test #246: omp2-1 ........................... Passed 16.61 sec; Start 249: omp2-4; 239/411 Test #237: nbody-he-cluster ................. Passed 71.20 sec; Start 250: omp2-5; 240/411 Test #247: omp2-2 ........................... Passed 43.37 sec; Start 251: omp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:21400,Test,Test,21400,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,; Start 251: omp2-5; 84/412 Test #168: dft-b3lyp ........................ Passed 73.00 sec; Start 69: cc50; 85/412 Test #390: python-pubchem ................... Passed 67.56 sec; Start 31: cc15; 86/412 Test #245: ocepa2 ........................... Passed 93.39 sec; Start 150: dfomp3-grad2; 87/412 Test #26: cc13a ............................ Passed 466.26 sec; Start 28: cc13c; 88/412 Test #243: ocepa-grad2 ...................... Passed 107.72 sec; Start 67: cc49; 89/412 Test #44: cc28 ............................. Passed 95.67 sec; Start 79: cc8a; 90/412 Test #261: omp3-4 ........................... Passed 118.19 sec; Start 298: pubchem1; 91/412 Test #58: cc40 ............................. Passed 78.47 sec; Start 65: cc47; 92/412 Test #83: cc9a ............................. Passed 85.82 sec; Start 141: dfomp2-2; 93/412 Test #35: cc19 ............................. Passed 88.14 sec; Start 21: cc1; 94/412 Test #69: cc50 ............................. Passed 85.29 sec; Start 157: dfomp2p5-grad2; 95/412 Test #116: dcft9 ............................ Passed 122.12 sec; Start 148: dfomp3-2; 96/412 Test #67: cc49 ............................. Passed 68.52 sec; Start 152: dfomp2p5-2; 97/412 Test #251: omp2-5 ........................... Passed 118.71 sec; Start 101: ci-property; 98/412 Test #298: pubchem1 ......................... Passed 66.34 sec; Start 60: cc42; 99/412 Test #79: cc8a ............................. Passed 77.39 sec; Start 66: cc48; 100/412 Test #150: dfomp3-grad2 ..................... Passed 113.61 sec; Start 82: cc9; 101/412 Test #65: cc47 ............................. Passed 82.63 sec; Start 74: cc55; 102/412 Test #31: cc15 ............................. Passed 138.15 sec; Start 108: dcft1; 103/412 Test #141: dfomp2-2 ......................... Passed 73.14 sec; Start 85: cdomp2-2; 104/412 Test #279: opt13 ............................ Passed 845.14 sec; Start 57: cc4; 105/412 Test #148: dfomp3-2 ......................... Passed 65.50 sec; Start 238: nbody-he-clu,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:9136,Test,Test,9136,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['Test'],['Test']
Testability,; Start 263: opt2; 318/401 Test #246: omp2-5 ........................... Passed 34.59 sec; Start 264: opt2-fd; 319/401 Test #252: omp2p5-grad2 ..................... Passed 23.25 sec; Start 265: opt3; 320/401 Test #262: opt1-fd .......................... Passed 7.97 sec; Start 266: opt4; 321/401 Test #265: opt3 ............................. Passed 5.40 sec; Start 267: opt5; 322/401 Test #260: opt-lindep-change ................ Passed 12.63 sec; Start 268: opt6; 323/401 Test #267: opt5 ............................. Passed 2.46 sec; Start 269: opt7; 324/401 Test #264: opt2-fd .......................... Passed 10.98 sec; Start 270: opt8; 325/401 Test #266: opt4 ............................. Passed 9.17 sec; Start 271: opt9; 326/401 Test #263: opt2 ............................. Passed 19.83 sec; Start 272: opt11; 327/401 Test #259: omp3-grad2 ....................... Passed 28.34 sec; Start 273: opt12; 328/401 Test #255: omp3-3 ........................... Passed 39.85 sec; Start 275: opt14; 329/401 Test #256: omp3-4 ........................... Passed 34.77 sec; Start 276: opt-irc-1; 330/401 Test #268: opt6 ............................. Passed 15.72 sec; Start 277: opt-irc-2; 331/401 Test #257: omp3-5 ........................... Passed 36.60 sec; Start 278: opt-irc-3; 332/401 Test #271: opt9 ............................. Passed 12.88 sec; Start 280: props1; 333/401 Test #280: props1 ........................... Passed 3.01 sec; Start 281: props2; 334/401 Test #223: mp2-def2 ......................... Passed 82.11 sec; Start 282: props3; 335/401 Test #273: opt12 ............................ Passed 14.45 sec; Start 292: psithon2; 336/401 Test #270: opt8 ............................. Passed 23.09 sec; Start 293: pubchem1; 337/401 Test #282: props3 ........................... Passed 5.49 sec; Start 294: pubchem2; 338/401 Test #281: props2 ........................... Passed 7.99 sec; Start 297: pywrap-basis; 339/401 Test #294: pubchem2 ......................... Passed 1.46 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:30700,Test,Test,30700,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,; Start 265: opt1; 255/411 Test #258: omp3-2 ........................... Passed 15.76 sec; Start 266: opt1-fd; 256/411 Test #265: opt1 ............................. Passed 3.61 sec; Start 267: opt2; 257/411 Test #249: omp2-4 ........................... Passed 36.26 sec; Start 268: opt2-fd; 258/411 Test #250: omp2-5 ........................... Passed 37.80 sec; Start 269: opt3; 259/411 Test #266: opt1-fd .......................... Passed 8.15 sec; Start 270: opt4; 260/411 Test #269: opt3 ............................. Passed 3.58 sec; Start 271: opt5; 261/411 Test #256: omp2p5-grad2 ..................... Passed 29.86 sec; Start 272: opt6; 262/411 Test #271: opt5 ............................. Passed 3.52 sec; Start 273: opt7; 263/411 Test #268: opt2-fd .......................... Passed 10.43 sec; Start 274: opt8; 264/411 Test #183: isapt2 ........................... Passed 135.94 sec; Start 275: opt9; 265/411 Test #270: opt4 ............................. Passed 9.47 sec; Start 276: opt11; 266/411 Test #267: opt2 ............................. Passed 18.54 sec; Start 277: opt12; 267/411 Test #264: opt-lindep-change ................ Passed 26.08 sec; Start 279: opt14; 268/411 Test #263: omp3-grad2 ....................... Passed 32.21 sec; Start 280: opt-irc-1; 269/411 Test #260: omp3-4 ........................... Passed 34.72 sec; Start 281: opt-irc-2; 270/411 Test #261: omp3-5 ........................... Passed 34.25 sec; Start 282: opt-irc-3; 271/411 Test #275: opt9 ............................. Passed 14.34 sec; Start 283: opt-freeze-coords; 272/411 Test #272: opt6 ............................. Passed 18.64 sec; Start 284: props1; 273/411 Test #259: omp3-3 ........................... Passed 45.75 sec; Start 285: props2; 274/411 Test #284: props1 ........................... Passed 2.73 sec; Start 286: props3; 275/411 Test #283: opt-freeze-coords ................ Passed 3.26 sec; Start 287: psimrcc-ccsd_t-1; 276/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:24676,Test,Test,24676,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,; Start 266: opt1-fd; 271/411 Test #266: opt1-fd .......................... Passed 4.23 sec; Start 267: opt2; 272/411 Test #267: opt2 ............................. Passed 13.60 sec; Start 268: opt2-fd; 273/411 Test #268: opt2-fd .......................... Passed 8.30 sec; Start 269: opt3; 274/411 Test #269: opt3 ............................. Passed 2.89 sec; Start 270: opt4; 275/411 Test #270: opt4 ............................. Passed 7.74 sec; Start 271: opt5; 276/411 Test #271: opt5 ............................. Passed 2.02 sec; Start 272: opt6; 277/411 Test #272: opt6 ............................. Passed 13.13 sec; Start 273: opt7; 278/411 Test #273: opt7 ............................. Passed 25.45 sec; Start 274: opt8; 279/411 Test #274: opt8 ............................. Passed 19.47 sec; Start 275: opt9; 280/411 Test #275: opt9 ............................. Passed 9.79 sec; Start 276: opt11; 281/411 Test #276: opt11 ............................ Passed 29.14 sec; Start 277: opt12; 282/411 Test #277: opt12 ............................ Passed 16.66 sec; Start 279: opt14; 283/411 Test #279: opt14 ............................ Passed 69.04 sec; Start 280: opt-irc-1; 284/411 Test #280: opt-irc-1 ........................ Passed 53.50 sec; Start 281: opt-irc-2; 285/411 Test #281: opt-irc-2 ........................ Passed 84.18 sec; Start 282: opt-irc-3; 286/411 Test #282: opt-irc-3 ........................ Passed 15.17 sec; Start 283: opt-freeze-coords; 287/411 Test #283: opt-freeze-coords ................ Passed 3.15 sec; Start 284: props1; 288/411 Test #284: props1 ........................... Passed 2.52 sec; Start 285: props2; 289/411 Test #285: props2 ........................... Passed 11.98 sec; Start 286: props3; 290/411 Test #286: props3 ........................... Passed 13.90 sec; Start 287: psimrcc-ccsd_t-1; 291/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.41 sec; Start 288: psimrcc-ccsd_t-2; 292/411 Test #288: psimrcc-ccsd_t-2 ................. ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:25757,Test,Test,25757,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability,; Start 267: opt2; 265/411 Test #264: opt-lindep-change ................ Passed 26.61 sec; Start 268: opt2-fd; 266/411 Test #259: omp3-3 ........................... Passed 68.14 sec; Start 269: opt3; 267/411 Test #260: omp3-4 ........................... Passed 60.75 sec; Start 270: opt4; 268/411 Test #263: omp3-grad2 ....................... Passed 43.76 sec; Start 271: opt5; 269/411 Test #269: opt3 ............................. Passed 4.65 sec; Start 272: opt6; 270/411 Test #261: omp3-5 ........................... Passed 50.13 sec; Start 273: opt7; 271/411 Test #268: opt2-fd .......................... Passed 11.22 sec; Start 274: opt8; 272/411 Test #271: opt5 ............................. Passed 2.35 sec; Start 275: opt9; 273/411 Test #270: opt4 ............................. Passed 8.04 sec; Start 276: opt11; 274/411 Test #267: opt2 ............................. Passed 19.83 sec; Start 277: opt12; 275/411 Test #275: opt9 ............................. Passed 12.46 sec; Start 279: opt14; 276/411 Test #272: opt6 ............................. Passed 17.94 sec; Start 280: opt-irc-1; 277/411 Test #277: opt12 ............................ Passed 18.41 sec; Start 281: opt-irc-2; 278/411 Test #274: opt8 ............................. Passed 27.80 sec; Start 282: opt-irc-3; 279/411 Test #273: opt7 ............................. Passed 37.31 sec; Start 283: opt-freeze-coords; 280/411 Test #283: opt-freeze-coords ................ Passed 3.78 sec; Start 284: props1; 281/411 Test #284: props1 ........................... Passed 2.60 sec; Start 285: props2; 282/411 Test #276: opt11 ............................ Passed 38.81 sec; Start 286: props3; 283/411 Test #240: ocepa-freq1 ...................... Passed 272.01 sec; Start 287: psimrcc-ccsd_t-1; 284/411 Test #282: opt-irc-3 ........................ Passed 17.70 sec; Start 288: psimrcc-ccsd_t-2; 285/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 3.30 sec; Start 289: psimrcc-ccsd_t-3; 286/411 Test #288: psimrcc-ccsd_t-2 ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:25507,Test,Test,25507,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,; Start 267: opt2; 265/411 Test #266: opt1-fd .......................... Passed 11.98 sec; Start 268: opt2-fd; 266/411 Test #268: opt2-fd .......................... Passed 14.60 sec; Start 269: opt3; 267/411 Test #267: opt2 ............................. Passed 24.64 sec; Start 270: opt4; 268/411 Test #259: omp3-3 ........................... Passed 81.47 sec; Start 271: opt5; 269/411 Test #269: opt3 ............................. Passed 5.14 sec; Start 272: opt6; 270/411 Test #271: opt5 ............................. Passed 2.80 sec; Start 273: opt7; 271/411 Test #260: omp3-4 ........................... Passed 82.75 sec; Start 274: opt8; 272/411 Test #270: opt4 ............................. Passed 8.49 sec; Start 275: opt9; 273/411 Test #263: omp3-grad2 ....................... Passed 63.99 sec; Start 276: opt11; 274/411 Test #261: omp3-5 ........................... Passed 81.80 sec; Start 277: opt12; 275/411 Test #272: opt6 ............................. Passed 27.35 sec; Start 279: opt14; 276/411 Test #275: opt9 ............................. Passed 20.61 sec; Start 280: opt-irc-1; 277/411 Test #277: opt12 ............................ Passed 22.89 sec; Start 281: opt-irc-2; 278/411 Test #274: opt8 ............................. Passed 39.25 sec; Start 282: opt-irc-3; 279/411 Test #273: opt7 ............................. Passed 53.11 sec; Start 283: opt-freeze-coords; 280/411 Test #283: opt-freeze-coords ................ Passed 5.99 sec; Start 284: props1; 281/411 Test #276: opt11 ............................ Passed 54.29 sec; Start 285: props2; 282/411 Test #284: props1 ........................... Passed 4.43 sec; Start 286: props3; 283/411 Test #282: opt-irc-3 ........................ Passed 30.34 sec; Start 287: psimrcc-ccsd_t-1; 284/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 2.10 sec; Start 288: psimrcc-ccsd_t-2; 285/411 Test #285: props2 ........................... Passed 15.83 sec; Start 289: psimrcc-ccsd_t-3; 286/411 Test #286: props3 .................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:25491,Test,Test,25491,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,; Start 267: opt2; 272/411 Test #267: opt2 ............................. Passed 14.86 sec; Start 268: opt2-fd; 273/411 Test #268: opt2-fd .......................... Passed 7.54 sec; Start 269: opt3; 274/411 Test #269: opt3 ............................. Passed 3.01 sec; Start 270: opt4; 275/411 Test #270: opt4 ............................. Passed 7.30 sec; Start 271: opt5; 276/411 Test #271: opt5 ............................. Passed 1.91 sec; Start 272: opt6; 277/411 Test #272: opt6 ............................. Passed 13.14 sec; Start 273: opt7; 278/411 Test #273: opt7 ............................. Passed 26.78 sec; Start 274: opt8; 279/411 Test #274: opt8 ............................. Passed 19.15 sec; Start 275: opt9; 280/411 Test #275: opt9 ............................. Passed 10.27 sec; Start 276: opt11; 281/411 Test #276: opt11 ............................ Passed 27.42 sec; Start 277: opt12; 282/411 Test #277: opt12 ............................ Passed 15.33 sec; Start 279: opt14; 283/411 Test #279: opt14 ............................ Passed 63.42 sec; Start 280: opt-irc-1; 284/411 Test #280: opt-irc-1 ........................ Passed 50.89 sec; Start 281: opt-irc-2; 285/411 Test #281: opt-irc-2 ........................ Passed 77.64 sec; Start 282: opt-irc-3; 286/411 Test #282: opt-irc-3 ........................ Passed 14.51 sec; Start 283: opt-freeze-coords; 287/411 Test #283: opt-freeze-coords ................ Passed 2.97 sec; Start 284: props1; 288/411 Test #284: props1 ........................... Passed 2.45 sec; Start 285: props2; 289/411 Test #285: props2 ........................... Passed 10.63 sec; Start 286: props3; 290/411 Test #286: props3 ........................... Passed 10.86 sec; Start 287: psimrcc-ccsd_t-1; 291/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.37 sec; Start 288: psimrcc-ccsd_t-2; 292/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.46 sec; Start 289: psimrcc-ccsd_t-3; 293/411 Test #289: psimrcc-ccsd_t-3 ........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:25819,Test,Test,25819,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['Test'],['Test']
Testability,; Start 274: opt7; 113/412 Test #78: cc8 .............................. Passed 35.23 sec; Start 73: cc54; 114/412 Test #12: cbs-parser ....................... Passed 44.35 sec; Start 152: dfomp2p5-2; 115/412 Test #60: cc42 ............................. Passed 48.37 sec; Start 55: cc38; 116/412 Test #66: cc48 ............................. Passed 48.97 sec; Start 85: cdomp2-2; 117/412 Test #73: cc54 ............................. Passed 9.22 sec; Start 82: cc9; 118/412 Test #274: opt7 ............................. Passed 40.43 sec; Start 277: opt11; 119/412 Test #85: cdomp2-2 ......................... Passed 27.02 sec; Start 74: cc55; 120/412 Test #55: cc38 ............................. Passed 28.06 sec; Start 64: cc46; 121/412 Test #152: dfomp2p5-2 ....................... Passed 30.42 sec; Start 143: dfomp2-4; 122/412 Test #82: cc9 .............................. Passed 28.87 sec; Start 68: cc4a; 123/412 Test #101: ci-property ...................... Passed 53.75 sec; Start 171: dft1-alt; 124/412 Test #143: dfomp2-4 ......................... Passed 27.80 sec; Start 246: ocepa3; 125/412 Test #68: cc4a ............................. Passed 29.15 sec; Start 163: dft-grad-meta; 126/412 Test #74: cc55 ............................. Passed 32.31 sec; Start 72: cc53; 127/412 Test #64: cc46 ............................. Passed 32.31 sec; Start 56: cc39; 128/412 Test #277: opt11 ............................ Passed 48.80 sec; Start 201: fnocc2; 129/412 Test #246: ocepa3 ........................... Passed 23.70 sec; Start 80: cc8b; 130/412 Test #72: cc53 ............................. Passed 30.00 sec; Start 2: adc2; 131/412 Test #171: dft1-alt ......................... Passed 53.86 sec; Start 349: sapt-compare; 132/412 Test #56: cc39 ............................. Passed 31.18 sec; Start 338: scf6; 133/412 Test #80: cc8b ............................. Passed 16.65 sec; Start 308: pywrap-db1; 134/412 Test #201: fnocc2 ........................... Passed 25.89 sec; Start 33: cc17; 135/41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:11558,Test,Test,11558,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability,; Start 277: opt-irc-2; Start 111: dcft6; Start 113: dcft8; Start 42: cc27; Start 36: cc21; Start 45: cc3; Start 40: cc25; Start 383: cookbook-rohf-orb-rot; Start 75: cc7; Start 25: cc13a; 1/401 Test #401: json-schema_0_properties .........***Failed 3.21 sec; Start 112: dcft7; 2/401 Test #177: fsapt-allterms ................... Passed 136.27 sec; Start 201: frac-traverse; 3/401 Test #277: opt-irc-2 ........................ Passed 159.76 sec; Start 312: sapt2; 4/401 Test #111: dcft6 ............................ Passed 165.22 sec; Start 314: sapt4; 5/401 Test #383: cookbook-rohf-orb-rot ............ Passed 222.55 sec; Start 321: scf-bz2; 6/401 Test #312: sapt2 ............................ Passed 93.85 sec; Start 29: cc14; 7/401 Test #201: frac-traverse .................... Passed 121.71 sec; Start 164: dft1; 8/401 Test #274: opt13 ............................ Passed 292.05 sec; Start 38: cc23; 9/401 Test #178: isapt1 ........................... Passed 299.95 sec; Start 35: cc2; 10/401 Test #191: fd-freq-gradient-large ........... Passed 307.91 sec; Start 223: mp2-def2; 11/401 Test #189: fd-freq-energy-large ............. Passed 319.82 sec; Start 39: cc24; 12/401 Test #13: cbs-xtpl-alpha ................... Passed 330.09 sec; Start 24: cc13; 13/401 Test #321: scf-bz2 .......................... Passed 118.24 sec; Start 17: cbs-xtpl-opt; 14/401 Test #314: sapt4 ............................ Passed 176.27 sec; Start 31: cc16; 15/401 Test #113: dcft8 ............................ Passed 344.19 sec; Start 275: opt14; 16/401 Test #354: tu6-cp-ne2 ....................... Passed 347.59 sec; Start 41: cc26; 17/401 Test #110: dcft5 ............................ Passed 355.89 sec; Start 276: opt-irc-1; 18/401 Test #112: dcft7 ............................ Passed 358.91 sec; Start 90: cepa-module; 19/401 Test #164: dft1 ............................. Passed 106.51 sec; Start 96: cisd-opt-fd; 20/401 Test #223: mp2-def2 ......................... Passed 82.85 sec; Start 28: cc13d; 21/401 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:1652,Test,Test,1652,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,; Start 282: opt-irc-3; 279/411 Test #273: opt7 ............................. Passed 53.11 sec; Start 283: opt-freeze-coords; 280/411 Test #283: opt-freeze-coords ................ Passed 5.99 sec; Start 284: props1; 281/411 Test #276: opt11 ............................ Passed 54.29 sec; Start 285: props2; 282/411 Test #284: props1 ........................... Passed 4.43 sec; Start 286: props3; 283/411 Test #282: opt-irc-3 ........................ Passed 30.34 sec; Start 287: psimrcc-ccsd_t-1; 284/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 2.10 sec; Start 288: psimrcc-ccsd_t-2; 285/411 Test #285: props2 ........................... Passed 15.83 sec; Start 289: psimrcc-ccsd_t-3; 286/411 Test #286: props3 ........................... Passed 13.90 sec; Start 290: psimrcc-ccsd_t-4; 287/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 4.82 sec; Start 291: psimrcc-fd-freq1; 288/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 2.70 sec; Start 292: psimrcc-fd-freq2; 289/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 17.94 sec; Start 293: psimrcc-pt2; 290/411 Test #291: psimrcc-fd-freq1 ................. Passed 17.17 sec; Start 294: psimrcc-sp1; 291/411 Test #293: psimrcc-pt2 ...................... Passed 1.90 sec; Start 295: psithon1; 292/411 Test #279: opt14 ............................ Passed 75.20 sec; Start 296: psithon2; 293/411 Test #294: psimrcc-sp1 ...................... Passed 4.68 sec; Start 297: pubchem1; 294/411 Test #295: psithon1 ......................... Passed 14.49 sec; Start 298: pubchem2; 295/411 Test #298: pubchem2 ......................... Passed 1.29 sec; Start 299: pywrap-alias; 296/411 Test #227: mp2-def2 ......................... Passed 402.38 sec; Start 300: pywrap-all; 297/411 Test #280: opt-irc-1 ........................ Passed 93.85 sec; Start 301: pywrap-basis; 298/411 Test #296: psithon2 ......................... Passed 23.69 sec; Start 302: pywrap-cbs1; 299/411 Test #301: pywrap-basis .....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:26749,Test,Test,26749,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,; Start 284: opt-freeze-coords; 273/412 Test #262: omp3-5 ........................... Passed 89.73 sec; Start 285: props1; 274/412 Test #284: opt-freeze-coords ................ Passed 4.76 sec; Start 286: props2; 275/412 Test #285: props1 ........................... Passed 4.59 sec; Start 287: props3; 276/412 Test #278: opt12 ............................ Passed 23.07 sec; Start 288: psimrcc-ccsd_t-1; 277/412 Test #274: opt7 ............................. Passed 46.32 sec; Start 289: psimrcc-ccsd_t-2; 278/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 1.89 sec; Start 290: psimrcc-ccsd_t-3; 279/412 Test #111: dcft4 ............................ Passed 528.32 sec; Start 291: psimrcc-ccsd_t-4; 280/412 Test #289: psimrcc-ccsd_t-2 ................. Passed 2.46 sec; Start 292: psimrcc-fd-freq1; 281/412 Test #290: psimrcc-ccsd_t-3 ................. Passed 2.47 sec; Start 293: psimrcc-fd-freq2; 282/412 Test #283: opt-irc-3 ........................ Passed 23.60 sec; Start 294: psimrcc-pt2; 283/412 Test #286: props2 ........................... Passed 14.68 sec; Start 295: psimrcc-sp1; 284/412 Test #294: psimrcc-pt2 ...................... Passed 3.00 sec; Start 296: psithon1; 285/412 Test #287: props3 ........................... Passed 14.21 sec; Start 297: psithon2; 286/412 Test #295: psimrcc-sp1 ...................... Passed 4.74 sec; Start 298: pubchem1; 287/412 Test #292: psimrcc-fd-freq1 ................. Passed 15.35 sec; Start 299: pubchem2; 288/412 Test #296: psithon1 ......................... Passed 6.52 sec; Start 300: pywrap-alias; 289/412 Test #299: pubchem2 ......................... Passed 1.64 sec; Start 301: pywrap-all; 290/412 Test #104: dcft-grad1 ....................... Passed 565.91 sec; Start 302: pywrap-basis; 291/412 Test #291: psimrcc-ccsd_t-4 ................. Passed 19.79 sec; Start 303: pywrap-cbs1; 292/412 Test #277: opt11 ............................ Passed 48.39 sec; Start 304: pywrap-checkrun-convcrit; 293/412 Test #297: psithon2 ...........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:26343,Test,Test,26343,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,; Start 284: psimrcc-ccsd_t-2; 363/401 Test #400: json-schema_0_gradient ........... Passed 2.33 sec; Start 285: psimrcc-ccsd_t-3; 364/401 Test #115: ao-dfcasscf-sp ................... Passed 3.19 sec; Start 283: psimrcc-ccsd_t-1; 365/401 Test #396: json-schema_0_energy ............. Passed 3.72 sec; Start 289: psimrcc-pt2; 366/401 Test #378: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 86: cepa1; 367/401 Test #8: castup1 .......................... Passed 2.70 sec; Start 360: cubeprop-esp; 368/401 Test #118: dfcasscf-sp ...................... Passed 4.20 sec; Start 373: pywrap-align; 369/401 Test #330: scf3 ............................. Passed 1.53 sec; Start 374: pywrap-align-chiral; 370/401 Test #347: stability2 ....................... Passed 2.12 sec; 371/401 Test #348: tu1-h2o-energy ................... Passed 2.02 sec; 372/401 Test #305: pywrap-molecule .................. Passed 2.10 sec; 373/401 Test #204: matrix1 .......................... Passed 1.27 sec; 374/401 Test #326: scf-bs ........................... Passed 2.41 sec; 375/401 Test #235: numpy-array-interface ............ Passed 1.44 sec; 376/401 Test #380: psi4numpy-rhf-gradient ........... Passed 2.03 sec; 377/401 Test #349: tu2-ch2-energy ................... Passed 2.01 sec; 378/401 Test #205: mcscf1 ........................... Passed 1.71 sec; 379/401 Test #122: dfccsd1 .......................... Passed 4.58 sec; 380/401 Test #379: psi4numpy-rhf .................... Passed 1.89 sec; 381/401 Test #384: python-energy .................... Passed 1.80 sec; 382/401 Test #393: python-memdfjk ................... Passed 3.23 sec; 383/401 Test #101: decontract ....................... Passed 2.06 sec; 384/401 Test #123: dfccsdl1 ......................... Passed 4.62 sec; 385/401 Test #359: options1 ......................... Passed 1.49 sec; 386/401 Test #208: mints1 ........................... Passed 1.49 sec; 387/401 Test #373: pywrap-align .....................***Failed 1.19 sec; 388/401 Test #,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:35361,Test,Test,35361,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,; Start 285: props2; 274/411 Test #283: opt-freeze-coords ................ Passed 7.18 sec; Start 286: props3; 275/411 Test #259: omp3-3 ........................... Passed 125.61 sec; Start 287: psimrcc-ccsd_t-1; 276/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 2.91 sec; Start 288: psimrcc-ccsd_t-2; 277/411 Test #260: omp3-4 ........................... Passed 129.75 sec; Start 289: psimrcc-ccsd_t-3; 278/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 2.56 sec; Start 290: psimrcc-ccsd_t-4; 279/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 2.58 sec; Start 291: psimrcc-fd-freq1; 280/411 Test #276: opt11 ............................ Passed 59.16 sec; Start 292: psimrcc-fd-freq2; 281/411 Test #285: props2 ........................... Passed 13.81 sec; Start 293: psimrcc-pt2; 282/411 Test #286: props3 ........................... Passed 15.41 sec; Start 294: psimrcc-sp1; 283/411 Test #293: psimrcc-pt2 ...................... Passed 2.79 sec; Start 295: psithon1; 284/411 Test #282: opt-irc-3 ........................ Passed 30.28 sec; Start 296: psithon2; 285/411 Test #294: psimrcc-sp1 ...................... Passed 5.00 sec; Start 297: pubchem1; 286/411 Test #295: psithon1 ......................... Passed 8.63 sec; Start 298: pubchem2; 287/411 Test #298: pubchem2 ......................... Passed 1.42 sec; Start 299: pywrap-alias; 288/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 19.59 sec; Start 300: pywrap-all; 289/411 Test #291: psimrcc-fd-freq1 ................. Passed 18.86 sec; Start 301: pywrap-basis; 290/411 Test #279: opt14 ............................ Passed 78.18 sec; Start 302: pywrap-cbs1; 291/411 Test #296: psithon2 ......................... Passed 23.99 sec; Start 303: pywrap-checkrun-convcrit; 292/411 Test #301: pywrap-basis ..................... Passed 17.91 sec; Start 304: pywrap-checkrun-rhf; 293/411 Test #303: pywrap-checkrun-convcrit ......... Passed 23.44 sec; Start 305: pywrap-checkrun-rohf; 294/411 Test #162: dft,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:26431,Test,Test,26431,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,; Start 287: psimrcc-ccsd_t-1; 291/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.41 sec; Start 288: psimrcc-ccsd_t-2; 292/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.46 sec; Start 289: psimrcc-ccsd_t-3; 293/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.43 sec; Start 290: psimrcc-ccsd_t-4; 294/411 Test #290: psimrcc-ccsd_t-4 ................. Passed 18.05 sec; Start 291: psimrcc-fd-freq1; 295/411 Test #291: psimrcc-fd-freq1 ................. Passed 8.31 sec; Start 292: psimrcc-fd-freq2; 296/411 Test #292: psimrcc-fd-freq2 ................. Passed 55.01 sec; Start 293: psimrcc-pt2; 297/411 Test #293: psimrcc-pt2 ...................... Passed 1.08 sec; Start 294: psimrcc-sp1; 298/411 Test #294: psimrcc-sp1 ...................... Passed 3.94 sec; Start 295: psithon1; 299/411 Test #295: psithon1 ......................... Passed 2.94 sec; Start 296: psithon2; 300/411 Test #296: psithon2 ......................... Passed 10.78 sec; Start 297: pubchem1; 301/411 Test #297: pubchem1 ......................... Passed 48.73 sec; Start 298: pubchem2; 302/411 Test #298: pubchem2 ......................... Passed 1.60 sec; Start 299: pywrap-alias; 303/411 Test #299: pywrap-alias ..................... Passed 15.84 sec; Start 300: pywrap-all; 304/411 Test #300: pywrap-all ....................... Passed 79.35 sec; Start 301: pywrap-basis; 305/411 Test #301: pywrap-basis ..................... Passed 11.71 sec; Start 302: pywrap-cbs1; 306/411 Test #302: pywrap-cbs1 ...................... Passed 17.97 sec; Start 303: pywrap-checkrun-convcrit; 307/411 Test #303: pywrap-checkrun-convcrit ......... Passed 10.43 sec; Start 304: pywrap-checkrun-rhf; 308/411 Test #304: pywrap-checkrun-rhf .............. Passed 75.20 sec; Start 305: pywrap-checkrun-rohf; 309/411 Test #305: pywrap-checkrun-rohf ............. Passed 34.14 sec; Start 306: pywrap-checkrun-uhf; 310/411 Test #306: pywrap-checkrun-uhf .............. Passed 58.34 sec; Start 307: pywrap-db1; 311/41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:27572,Test,Test,27572,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['Test'],['Test']
Testability,; Start 29: cc14; 7/401 Test #201: frac-traverse .................... Passed 121.71 sec; Start 164: dft1; 8/401 Test #274: opt13 ............................ Passed 292.05 sec; Start 38: cc23; 9/401 Test #178: isapt1 ........................... Passed 299.95 sec; Start 35: cc2; 10/401 Test #191: fd-freq-gradient-large ........... Passed 307.91 sec; Start 223: mp2-def2; 11/401 Test #189: fd-freq-energy-large ............. Passed 319.82 sec; Start 39: cc24; 12/401 Test #13: cbs-xtpl-alpha ................... Passed 330.09 sec; Start 24: cc13; 13/401 Test #321: scf-bz2 .......................... Passed 118.24 sec; Start 17: cbs-xtpl-opt; 14/401 Test #314: sapt4 ............................ Passed 176.27 sec; Start 31: cc16; 15/401 Test #113: dcft8 ............................ Passed 344.19 sec; Start 275: opt14; 16/401 Test #354: tu6-cp-ne2 ....................... Passed 347.59 sec; Start 41: cc26; 17/401 Test #110: dcft5 ............................ Passed 355.89 sec; Start 276: opt-irc-1; 18/401 Test #112: dcft7 ............................ Passed 358.91 sec; Start 90: cepa-module; 19/401 Test #164: dft1 ............................. Passed 106.51 sec; Start 96: cisd-opt-fd; 20/401 Test #223: mp2-def2 ......................... Passed 82.85 sec; Start 28: cc13d; 21/401 Test #42: cc27 ............................. Passed 392.24 sec; Start 44: cc29; 22/401 Test #75: cc7 .............................. Passed 394.89 sec; Start 47: cc31; 23/401 Test #275: opt14 ............................ Passed 76.63 sec; Start 368: dft-custom-mgga; 24/401 Test #174: fsapt1 ........................... Passed 424.29 sec; Start 19: cbs-xtpl-wrapper; 25/401 Test #276: opt-irc-1 ........................ Passed 89.12 sec; Start 316: sapt6; 26/401 Test #17: cbs-xtpl-opt ..................... Passed 104.19 sec; Start 114: dcft9; 27/401 Test #40: cc25 ............................. Passed 450.80 sec; Start 179: isapt2; 28/401 Test #36: cc21 ............................. Passed 451.45 sec; Start 69,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:2376,Test,Test,2376,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,; Start 312: rasci-h2o; 315/412 Test #122: dfccdl1 .......................... Passed 23.35 sec; Start 333: scf-occ; 316/412 Test #214: mints2 ........................... Passed 24.07 sec; Start 290: psimrcc-ccsd_t-3; 317/412 Test #118: dfcasscf-sa-sp ................... Passed 26.23 sec; Start 352: dft-reference; 318/412 Test #247: omp2-1 ........................... Passed 22.97 sec; Start 329: scf-upcast-custom-basis; 319/412 Test #263: omp3-grad1 ....................... Passed 24.21 sec; Start 204: frac; 320/412 Test #328: scf-guess-read1 .................. Passed 23.52 sec; Start 117: ao-dfcasscf-sp; 321/412 Test #392: python-mints2 .................... Passed 24.57 sec; Start 362: x2c2; 322/412 Test #142: dfomp2-3 ......................... Passed 26.52 sec; Start 402: json-schema-1-orient; 323/412 Test #315: sad1 ............................. Passed 24.75 sec; Start 236: mp2-property; 324/412 Test #252: omp2-grad1 ....................... Passed 25.97 sec; Start 344: stability1; 325/412 Test #284: opt-freeze-coords ................ Passed 26.18 sec; Start 345: dfep2-1; 326/412 Test #385: psi4numpy-rhf-hessian ............ Passed 25.08 sec; Start 398: json-v11-energy; 327/412 Test #135: dfmp2-grad1 ...................... Passed 23.71 sec; Start 400: json-schema-1-energy; 328/412 Test #346: dfep2-2 .......................... Passed 23.48 sec; Start 389: python-curve; 329/412 Test #312: rasci-h2o ........................ Passed 23.59 sec; Start 235: mp3-grad2; 330/412 Test #333: scf-occ .......................... Passed 23.80 sec; Start 232: mp2p5-grad1; 331/412 Test #290: psimrcc-ccsd_t-3 ................. Passed 23.57 sec; Start 229: mp2-grad1; 332/412 Test #329: scf-upcast-custom-basis .......... Passed 24.34 sec; Start 131: dfmp2-2; 333/412 Test #117: ao-dfcasscf-sp ................... Passed 24.09 sec; Start 234: mp3-grad1; 334/412 Test #352: dft-reference .................... Passed 26.09 sec; Start 294: psimrcc-pt2; 335/412 Test #204: frac ....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:30589,Test,Test,30589,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,; Start 316: sapt2; 35/404 Test #386: cookbook-rohf-orb-rot ............ Passed 199.33 sec; Start 318: sapt4; 36/404 Test #29: cc14 ............................. Passed 201.44 sec; Start 325: scf-bz2; 37/404 Test #24: cc13 ............................. Passed 181.11 sec; Start 168: dft1; 38/404 Test #316: sapt2 ............................ Passed 88.23 sec; Start 70: cc52; 39/404 Test #205: frac-traverse .................... Passed 107.50 sec; Start 44: cc29; 40/404 Test #168: dft1 ............................. Passed 97.79 sec; Start 28: cc13d; 41/404 Test #325: scf-bz2 .......................... Passed 118.21 sec; Start 31: cc16; 42/404 Test #70: cc52 ............................. Passed 50.53 sec; Start 161: dft-grad-lr2; 43/404 Test #44: cc29 ............................. Passed 51.97 sec; Start 58: cc41; 44/404 Test #28: cc13d ............................ Passed 54.31 sec; Start 227: mp2-def2; 45/404 Test #318: sapt4 ............................ Passed 173.98 sec; Start 60: cc43; 46/404 Test #113: dcft7 ............................ Passed 236.97 sec; Start 47: cc31; 47/404 Test #31: cc16 ............................. Passed 50.21 sec; Start 91: cepa-module; 48/404 Test #58: cc41 ............................. Passed 43.96 sec; Start 279: opt14; 49/404 Test #25: cc13a ............................ Passed 312.39 sec; Start 280: opt-irc-1; 50/404 Test #60: cc43 ............................. Passed 36.52 sec; Start 104: dcft-grad2; 51/404 Test #91: cepa-module ...................... Passed 33.73 sec; Start 97: cisd-opt-fd; 52/404 Test #161: dft-grad-lr2 ..................... Passed 85.03 sec; Start 230: mp2-module; 53/404 Test #47: cc31 ............................. Passed 46.45 sec; Start 74: cc5a; 54/404 Test #18: cbs-xtpl-func .................... Passed 791.53 sec; Start 75: cc6; 55/404 Test #104: dcft-grad2 ....................... Passed 19.55 sec; Start 61: cc44; 56/404 Test #74: cc5a ............................. Passed 25.15 sec; Start 115: dcft9; 57/404 Test ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:4419,Test,Test,4419,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,; Start 318: sapt4; 6/411 Test #181: fsapt-allterms ................... Passed 716.17 sec; Start 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 235.66 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.11 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 326.30 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 13.41 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 9.02 sec; Start 5: casscf-sa-sp; 12/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.92 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 6.87 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.39 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 19.18 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 28.77 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 875.05 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 13.09 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 12.78 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #278: opt13 ............................ Passed 926.59 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 41.42 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 364.06 sec; Start 20: cc1; 26/411 Test #12: cbs-parser ....................... Passed 96.67 sec; Start 21: cc10; 27/411 Test #21: cc10 ............................. Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:1772,Test,Test,1772,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,; Start 318: sapt4; 6/411 Test #205: frac-traverse .................... Passed 224.53 sec; Start 325: scf-bz2; 7/411 Test #113: dcft7 ............................ Passed 351.15 sec; Start 1: adc1; 8/411 Test #278: opt13 ............................ Passed 840.66 sec; Start 2: adc2; 9/411 Test #1: adc1 ............................. Passed 25.01 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 11.82 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 4.34 sec; Start 5: casscf-sa-sp; 12/411 Test #5: casscf-sa-sp ..................... Passed 18.34 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.45 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 918.91 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 12.98 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 13.65 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 59.21 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 35.82 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 358.15 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 80.51 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:1773,Test,Test,1773,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,; Start 318: sapt4; 6/411 Test #278: opt13 ............................ Passed 764.00 sec; Start 325: scf-bz2; 7/411 Test #25: cc13a ............................ Passed 481.24 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 26.25 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 392.65 sec; Start 3: casscf-fzc-sp; 10/411 Test #2: adc2 ............................. Passed 43.73 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 11.68 sec; Start 5: casscf-sa-sp; 12/411 Test #3: casscf-fzc-sp .................... Passed 19.26 sec; Start 6: ao-casscf-sp; 13/411 Test #6: ao-casscf-sp ..................... Passed 8.25 sec; Start 7: casscf-sp; 14/411 Test #5: casscf-sa-sp ..................... Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .......................... Passed 15.65 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #316: sapt2 ............................ Passed 350.80 sec; Start 14: cbs-xtpl-energy; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:1774,Test,Test,1774,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,; Start 333: scf-occ; 330/412 Test #135: dfmp2-grad1 ...................... Passed 16.60 sec; Start 119: dfcasscf-fzc-sp; 331/412 Test #284: opt-freeze-coords ................ Passed 17.63 sec; Start 290: psimrcc-ccsd_t-3; 332/412 Test #295: psimrcc-sp1 ...................... Passed 19.94 sec; Start 385: psi4numpy-rhf-hessian; 333/412 Test #329: scf-upcast-custom-basis .......... Passed 15.53 sec; Start 352: dft-reference; 334/412 Test #312: rasci-h2o ........................ Passed 16.42 sec; Start 117: ao-dfcasscf-sp; 335/412 Test #346: dfep2-2 .......................... Passed 16.45 sec; Start 362: x2c2; 336/412 Test #333: scf-occ .......................... Passed 16.55 sec; Start 402: json-schema-1-orient; 337/412 Test #290: psimrcc-ccsd_t-3 ................. Passed 15.93 sec; Start 204: frac; 338/412 Test #119: dfcasscf-fzc-sp .................. Passed 16.16 sec; Start 234: mp3-grad1; 339/412 Test #385: psi4numpy-rhf-hessian ............ Passed 17.46 sec; Start 344: stability1; 340/412 Test #117: ao-dfcasscf-sp ................... Passed 15.92 sec; Start 294: psimrcc-pt2; 341/412 Test #352: dft-reference .................... Passed 16.96 sec; Start 232: mp2p5-grad1; 342/412 Test #362: x2c2 ............................. Passed 15.80 sec; Start 229: mp2-grad1; 343/412 Test #402: json-schema-1-orient ............. Passed 15.20 sec; Start 236: mp2-property; 344/412 Test #204: frac ............................. Passed 16.15 sec; Start 400: json-schema-1-energy; 345/412 Test #234: mp3-grad1 ........................ Passed 16.23 sec; Start 121: dfccd1; 346/412 Test #294: psimrcc-pt2 ...................... Passed 15.65 sec; Start 235: mp3-grad2; 347/412 Test #232: mp2p5-grad1 ...................... Passed 15.30 sec; Start 345: dfep2-1; 348/412 Test #344: stability1 ....................... Passed 17.53 sec; Start 131: dfmp2-2; 349/412 Test #229: mp2-grad1 ........................ Passed 15.76 sec; Start 389: python-curve; 350/412 Test #236: mp2-property ................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:31778,Test,Test,31778,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['Test'],['Test']
Testability,; Start 352: dft-reference; 318/412 Test #247: omp2-1 ........................... Passed 22.97 sec; Start 329: scf-upcast-custom-basis; 319/412 Test #263: omp3-grad1 ....................... Passed 24.21 sec; Start 204: frac; 320/412 Test #328: scf-guess-read1 .................. Passed 23.52 sec; Start 117: ao-dfcasscf-sp; 321/412 Test #392: python-mints2 .................... Passed 24.57 sec; Start 362: x2c2; 322/412 Test #142: dfomp2-3 ......................... Passed 26.52 sec; Start 402: json-schema-1-orient; 323/412 Test #315: sad1 ............................. Passed 24.75 sec; Start 236: mp2-property; 324/412 Test #252: omp2-grad1 ....................... Passed 25.97 sec; Start 344: stability1; 325/412 Test #284: opt-freeze-coords ................ Passed 26.18 sec; Start 345: dfep2-1; 326/412 Test #385: psi4numpy-rhf-hessian ............ Passed 25.08 sec; Start 398: json-v11-energy; 327/412 Test #135: dfmp2-grad1 ...................... Passed 23.71 sec; Start 400: json-schema-1-energy; 328/412 Test #346: dfep2-2 .......................... Passed 23.48 sec; Start 389: python-curve; 329/412 Test #312: rasci-h2o ........................ Passed 23.59 sec; Start 235: mp3-grad2; 330/412 Test #333: scf-occ .......................... Passed 23.80 sec; Start 232: mp2p5-grad1; 331/412 Test #290: psimrcc-ccsd_t-3 ................. Passed 23.57 sec; Start 229: mp2-grad1; 332/412 Test #329: scf-upcast-custom-basis .......... Passed 24.34 sec; Start 131: dfmp2-2; 333/412 Test #117: ao-dfcasscf-sp ................... Passed 24.09 sec; Start 234: mp3-grad1; 334/412 Test #352: dft-reference .................... Passed 26.09 sec; Start 294: psimrcc-pt2; 335/412 Test #204: frac ............................. Passed 24.56 sec; Start 121: dfccd1; 336/412 Test #362: x2c2 ............................. Passed 23.73 sec; Start 412: skeletonwavefunction; 337/412 Test #402: json-schema-1-orient ............. Passed 24.09 sec; Start 289: psimrcc-ccsd_t-2; 338/412 Test #344: stability1 ....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:30886,Test,Test,30886,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,"; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1562,test,test,1562,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,1,['test'],['test']
Testability,; Start 363: stability2; 120/415 Test #338: scf-upcast-custom-basis .......... Passed 2.38 sec; Start 303: psimrcc-pt2; 121/415 Test #395: psi4numpy-rhf-hessian ............ Passed 3.23 sec; Start 414: json-schema-1-gradient; 122/415 Test #299: psimrcc-ccsd_t-3 ................. Passed 1.93 sec; Start 392: psi4numpy-dfmp2; 123/415 Test #105: decontract ....................... Passed 1.50 sec; Start 337: scf-guess-read1; 124/415 Test #343: scf2 ............................. Passed 2.48 sec; Start 401: python-mints9; 125/415 Test #340: scf-bs ........................... Passed 1.78 sec; Start 360: sapt-sf1; 126/415 Test #342: scf-occ .......................... Passed 2.41 sec; Start 406: python-mints13; 127/415 Test #372: x2c2 ............................. Passed 2.55 sec; Start 297: psimrcc-ccsd_t-1; 128/415 Test #363: stability2 ....................... Passed 1.67 sec; Start 398: python-energy; 129/415 Test #356: dfep2-2 .......................... Passed 2.54 sec; Start 367: scf-response1; 130/415 Test #324: sad1 ............................. Passed 3.08 sec; Start 364: tu1-h2o-energy; 131/415 Test #303: psimrcc-pt2 ...................... Passed 1.68 sec; Start 212: mcscf1; 132/415 Test #414: json-schema-1-gradient ........... Passed 1.69 sec; Start 365: tu2-ch2-energy; 133/415 Test #392: psi4numpy-dfmp2 .................. Passed 1.94 sec; Start 394: psi4numpy-rhf-gradient; 134/415 Test #401: python-mints9 .................... Passed 2.41 sec; Start 344: scf3; 135/415 Test #406: python-mints13 ................... Passed 2.29 sec; Start 319: pywrap-molecule; 136/415 Test #337: scf-guess-read1 .................. Passed 3.82 sec; Start 407: python-memdfjk; 137/415 Test #360: sapt-sf1 ......................... Passed 3.67 sec; Start 393: psi4numpy-rhf; 138/415 Test #398: python-energy .................... Passed 3.51 sec; Start 215: mints1; 139/415 Test #319: pywrap-molecule .................. Passed 1.48 sec; Start 375: options1; 140/415 Test #297: psimrcc-ccsd_t-1 ....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:12560,Test,Test,12560,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,; Start 369: dft-jk; 355/411 Test #366: dft-smoke ........................ Passed 14.19 sec; Start 370: scf-coverage; 356/411 Test #360: x2c1 ............................. Passed 24.30 sec; Start 371: dft-custom-dhdf; 357/411 Test #367: scf-hess1 ........................ Passed 8.55 sec; Start 372: dft-custom-hybrid; 358/411 Test #368: scf-freq1 ........................ Passed 10.99 sec; Start 373: dft-custom-mgga; 359/411 Test #370: scf-coverage ..................... Passed 6.20 sec; Start 374: dft-custom-gga; 360/411 Test #369: dft-jk ........................... Passed 10.99 sec; Start 375: pywrap-bfs; 361/411 Test #372: dft-custom-hybrid ................ Passed 9.77 sec; Start 376: pywrap-align; 362/411 Test #376: pywrap-align ..................... Passed 4.30 sec; Start 377: pywrap-align-chiral; 363/411 Test #377: pywrap-align-chiral .............. Passed 3.38 sec; Start 378: mints12; 364/411 Test #378: mints12 .......................... Passed 1.36 sec; Start 379: cc-module; 365/411 Test #305: pywrap-checkrun-rohf ............. Passed 197.70 sec; Start 380: psi4numpy-cphf; 366/411 Test #380: psi4numpy-cphf ................... Passed 1.32 sec; Start 381: psi4numpy-dfmp2; 367/411 Test #381: psi4numpy-dfmp2 .................. Passed 2.03 sec; Start 382: psi4numpy-rhf; 368/411 Test #382: psi4numpy-rhf .................... Passed 1.00 sec; Start 383: psi4numpy-rhf-gradient; 369/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.50 sec; Start 384: psi4numpy-rhf-hessian; 370/411 Test #375: pywrap-bfs ....................... Passed 25.30 sec; Start 385: psi4numpy-fci; 371/411 Test #374: dft-custom-gga ................... Passed 29.94 sec; Start 386: cookbook-rohf-orb-rot; 372/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.48 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.23 sec; Start 388: python-curve; 374/411 Test #385: psi4numpy-fci .................... Passed 5.25 sec; Start 389: python-pubchem; 375/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:34054,Test,Test,34054,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,; Start 369: dft-jk; 363/411 Test #360: x2c1 ............................. Passed 62.14 sec; Start 370: scf-coverage; 364/411 Test #370: scf-coverage ..................... Passed 6.88 sec; Start 371: dft-custom-dhdf; 365/411 Test #368: scf-freq1 ........................ Passed 11.47 sec; Start 372: dft-custom-hybrid; 366/411 Test #369: dft-jk ........................... Passed 11.27 sec; Start 373: dft-custom-mgga; 367/411 Test #372: dft-custom-hybrid ................ Passed 13.16 sec; Start 374: dft-custom-gga; 368/411 Test #374: dft-custom-gga ................... Passed 32.79 sec; Start 375: pywrap-bfs; 369/411 Test #375: pywrap-bfs ....................... Passed 24.74 sec; Start 376: pywrap-align; 370/411 Test #376: pywrap-align ..................... Passed 3.69 sec; Start 377: pywrap-align-chiral; 371/411 Test #377: pywrap-align-chiral .............. Passed 3.04 sec; Start 378: mints12; 372/411 Test #378: mints12 .......................... Passed 1.18 sec; Start 379: cc-module; 373/411 Test #371: dft-custom-dhdf .................. Passed 83.89 sec; Start 380: psi4numpy-cphf; 374/411 Test #380: psi4numpy-cphf ................... Passed 1.31 sec; Start 381: psi4numpy-dfmp2; 375/411 Test #381: psi4numpy-dfmp2 .................. Passed 2.16 sec; Start 382: psi4numpy-rhf; 376/411 Test #382: psi4numpy-rhf .................... Passed 0.89 sec; Start 383: psi4numpy-rhf-gradient; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.70 sec; Start 384: psi4numpy-rhf-hessian; 378/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.24 sec; Start 385: psi4numpy-fci; 379/411 Test #385: psi4numpy-fci .................... Passed 7.04 sec; Start 386: cookbook-rohf-orb-rot; 380/411 Test #305: pywrap-checkrun-rohf ............. Passed 586.65 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 1.28 sec; Start 388: python-curve; 382/411 Test #388: python-curve ..................... Passed 3.62 sec; Start 389: python-pubchem; 38,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:34698,Test,Test,34698,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,; Start 369: dft-jk; 363/411 Test #368: scf-freq1 ........................ Passed 14.57 sec; Start 370: scf-coverage; 364/411 Test #369: dft-jk ........................... Passed 12.68 sec; Start 371: dft-custom-dhdf; 365/411 Test #360: x2c1 ............................. Passed 72.91 sec; Start 372: dft-custom-hybrid; 366/411 Test #370: scf-coverage ..................... Passed 8.99 sec; Start 373: dft-custom-mgga; 367/411 Test #372: dft-custom-hybrid ................ Passed 13.00 sec; Start 374: dft-custom-gga; 368/411 Test #374: dft-custom-gga ................... Passed 30.24 sec; Start 375: pywrap-bfs; 369/411 Test #375: pywrap-bfs ....................... Passed 24.13 sec; Start 376: pywrap-align; 370/411 Test #376: pywrap-align ..................... Passed 3.39 sec; Start 377: pywrap-align-chiral; 371/411 Test #377: pywrap-align-chiral .............. Passed 2.91 sec; Start 378: mints12; 372/411 Test #378: mints12 .......................... Passed 1.27 sec; Start 379: cc-module; 373/411 Test #371: dft-custom-dhdf .................. Passed 89.27 sec; Start 380: psi4numpy-cphf; 374/411 Test #380: psi4numpy-cphf ................... Passed 1.33 sec; Start 381: psi4numpy-dfmp2; 375/411 Test #381: psi4numpy-dfmp2 .................. Passed 2.04 sec; Start 382: psi4numpy-rhf; 376/411 Test #382: psi4numpy-rhf .................... Passed 0.85 sec; Start 383: psi4numpy-rhf-gradient; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.48 sec; Start 384: psi4numpy-rhf-hessian; 378/411 Test #384: psi4numpy-rhf-hessian ............ Passed 4.83 sec; Start 385: psi4numpy-fci; 379/411 Test #385: psi4numpy-fci .................... Passed 7.57 sec; Start 386: cookbook-rohf-orb-rot; 380/411 Test #305: pywrap-checkrun-rohf ............. Passed 589.53 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 0.86 sec; Start 388: python-curve; 382/411 Test #388: python-curve ..................... Passed 4.75 sec; Start 389: python-pubchem; 38,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:34713,Test,Test,34713,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['Test'],['Test']
Testability,; Start 381: psi4numpy-cphf; 361/412 Test #299: pubchem2 ......................... Passed 2.35 sec; Start 354: tu1-h2o-energy; 362/412 Test #117: ao-dfcasscf-sp ................... Passed 3.58 sec; Start 379: mints12; 363/412 Test #97: cisd-h2o-clpse ................... Passed 2.91 sec; Start 409: skeletonmointegrals; 364/412 Test #211: mcscf2 ........................... Passed 2.42 sec; Start 223: mints10; 365/412 Test #103: decontract ....................... Passed 1.91 sec; Start 310: pywrap-molecule; 366/412 Test #229: mp2-grad1 ........................ Passed 3.12 sec; Start 215: mints3; 367/412 Test #404: json-schema-1-gradient ........... Passed 2.27 sec; Start 411: skeletonsointegrals; 368/412 Test #331: scf-bs ........................... Passed 2.38 sec; Start 384: psi4numpy-rhf-gradient; 369/412 Test #247: omp2-1 ........................... Passed 3.37 sec; Start 353: stability2; 370/412 Test #408: skeletondfmp2 .................... Passed 2.24 sec; Start 401: json-schema-1-ghost; 371/412 Test #350: sapt-sf1 ......................... Passed 1.19 sec; Start 399: json-v11-gradient; 372/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 2.78 sec; Start 405: json-schema-1-properties; 373/412 Test #221: mints-helper ..................... Passed 1.34 sec; Start 412: skeletonwavefunction; 374/412 Test #381: psi4numpy-cphf ................... Passed 1.38 sec; Start 397: python-memdfjk; 375/412 Test #354: tu1-h2o-energy ................... Passed 1.35 sec; Start 294: psimrcc-pt2; 376/412 Test #409: skeletonmointegrals .............. Passed 1.49 sec; Start 388: python-energy; 377/412 Test #379: mints12 .......................... Passed 1.64 sec; Start 406: skeleton; 378/412 Test #223: mints10 .......................... Passed 1.59 sec; Start 217: mints5; 379/412 Test #215: mints3 ........................... Passed 1.33 sec; Start 407: skeletonaointegrals; 380/412 Test #310: pywrap-molecule .................. Passed 1.44 sec; Start 355: tu2-ch2-energy; 381/412 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:34865,Test,Test,34865,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['Test'],['Test']
Testability,; Start 391: python-mints9; 364/412 Test #161: dft-grac ......................... Passed 1.88 sec; Start 222: mints9; 365/412 Test #362: x2c2 ............................. Passed 2.13 sec; Start 396: python-mints13; 366/412 Test #357: scf-response1 .................... Passed 2.24 sec; Start 411: skeletonsointegrals; 367/412 Test #211: mcscf2 ........................... Passed 1.93 sec; Start 354: tu1-h2o-energy; 368/412 Test #353: stability2 ....................... Passed 1.90 sec; Start 103: decontract; 369/412 Test #331: scf-bs ........................... Passed 1.66 sec; Start 221: mints-helper; 370/412 Test #299: pubchem2 ......................... Passed 1.60 sec; Start 215: mints3; 371/412 Test #363: x2c3 ............................. Passed 2.61 sec; Start 355: tu2-ch2-energy; 372/412 Test #382: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 384: psi4numpy-rhf-gradient; 373/412 Test #404: json-schema-1-gradient ........... Passed 1.74 sec; Start 405: json-schema-1-properties; 374/412 Test #223: mints10 .......................... Passed 1.62 sec; Start 381: psi4numpy-cphf; 375/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 1.97 sec; Start 401: json-schema-1-ghost; 376/412 Test #411: skeletonsointegrals .............. Passed 1.40 sec; Start 399: json-v11-gradient; 377/412 Test #215: mints3 ........................... Passed 1.22 sec; Start 379: mints12; 378/412 Test #103: decontract ....................... Passed 1.68 sec; Start 397: python-memdfjk; 379/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.31 sec; Start 388: python-energy; 380/412 Test #355: tu2-ch2-energy ................... Passed 1.33 sec; Start 310: pywrap-molecule; 381/412 Test #354: tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test #221: mints-helper ..................... Passed 1.51 sec; Start 212: mcscf3; 383/412 Test #391: python-mints9 .................... Passed 2.12 sec; Start 217: mints5; 384/412 Test #396: python-mints13 ...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:35176,Test,Test,35176,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['Test'],['Test']
Testability,; Start 395: python-3-index-transforms; 209/413 Test #360: tu5-sapt ......................... Passed 21.51 sec; Start 166: dft-grad1; 210/413 Test #240: nbody-intermediates .............. Passed 13.17 sec; Start 220: mints8; 211/413 Test #277: opt9 ............................. Passed 12.90 sec; Start 171: dft-vv10; 212/413 Test #178: extern1 .......................... Passed 11.25 sec; Start 293: psimrcc-fd-freq1; 213/413 Test #324: sapt-dft-lrc ..................... Passed 20.22 sec; Start 303: pywrap-basis; 214/413 Test #315: rasscf-sp ........................ Passed 4.10 sec; Start 379: pywrap-align-chiral; 215/413 Test #292: psimrcc-ccsd_t-4 ................. Passed 19.35 sec; Start 368: dft-smoke; 216/413 Test #395: python-3-index-transforms ........ Passed 10.36 sec; Start 352: dft-custom; 217/413 Test #317: sapt1 ............................ Passed 17.40 sec; Start 199: freq-isotope1; 218/413 Test #379: pywrap-align-chiral .............. Passed 7.69 sec; Start 91: cepa1; 219/413 Test #293: psimrcc-fd-freq1 ................. Passed 8.55 sec; Start 5: casscf-sa-sp; 220/413 Test #298: psithon2 ......................... Passed 13.64 sec; Start 326: sapt8; 221/413 Test #323: sapt-dft-api ..................... Passed 17.40 sec; Start 342: soscf-large; 222/413 Test #167: dft-grad2 ........................ Passed 17.15 sec; Start 340: scf7; 223/413 Test #91: cepa1 ............................ Passed 3.54 sec; Start 243: ocepa-grad1; 224/413 Test #303: pywrap-basis ..................... Passed 12.18 sec; Start 102: cubeprop; 225/413 Test #155: dft-grad-lr1 ..................... Passed 16.77 sec; Start 268: opt1-fd; 226/413 Test #166: dft-grad1 ........................ Passed 14.28 sec; Start 141: dfomp2-1; 227/413 Test #220: mints8 ........................... Passed 14.77 sec; Start 10: castup3; 228/413 Test #243: ocepa-grad1 ...................... Passed 2.97 sec; Start 378: pywrap-align; 229/413 Test #141: dfomp2-1 ......................... Passed 2.41 sec; Start 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:20542,Test,Test,20542,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,; Start 402: json-schema-1-orient; 323/412 Test #315: sad1 ............................. Passed 24.75 sec; Start 236: mp2-property; 324/412 Test #252: omp2-grad1 ....................... Passed 25.97 sec; Start 344: stability1; 325/412 Test #284: opt-freeze-coords ................ Passed 26.18 sec; Start 345: dfep2-1; 326/412 Test #385: psi4numpy-rhf-hessian ............ Passed 25.08 sec; Start 398: json-v11-energy; 327/412 Test #135: dfmp2-grad1 ...................... Passed 23.71 sec; Start 400: json-schema-1-energy; 328/412 Test #346: dfep2-2 .......................... Passed 23.48 sec; Start 389: python-curve; 329/412 Test #312: rasci-h2o ........................ Passed 23.59 sec; Start 235: mp3-grad2; 330/412 Test #333: scf-occ .......................... Passed 23.80 sec; Start 232: mp2p5-grad1; 331/412 Test #290: psimrcc-ccsd_t-3 ................. Passed 23.57 sec; Start 229: mp2-grad1; 332/412 Test #329: scf-upcast-custom-basis .......... Passed 24.34 sec; Start 131: dfmp2-2; 333/412 Test #117: ao-dfcasscf-sp ................... Passed 24.09 sec; Start 234: mp3-grad1; 334/412 Test #352: dft-reference .................... Passed 26.09 sec; Start 294: psimrcc-pt2; 335/412 Test #204: frac ............................. Passed 24.56 sec; Start 121: dfccd1; 336/412 Test #362: x2c2 ............................. Passed 23.73 sec; Start 412: skeletonwavefunction; 337/412 Test #402: json-schema-1-orient ............. Passed 24.09 sec; Start 289: psimrcc-ccsd_t-2; 338/412 Test #344: stability1 ....................... Passed 24.31 sec; Start 363: x2c3; 339/412 Test #345: dfep2-1 .......................... Passed 24.96 sec; Start 357: scf-response1; 340/412 Test #236: mp2-property ..................... Passed 25.57 sec; Start 161: dft-grac; 341/412 Test #398: json-v11-energy .................. Passed 24.99 sec; Start 222: mints9; 342/412 Test #232: mp2p5-grad1 ...................... Passed 23.24 sec; Start 334: scf2; 343/412 Test #400: json-schema-1-energy ............. Pas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:31359,Test,Test,31359,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.07 sec; Start 404: json-schema-1-properties; 389/411 Test #402: json-schema-1-throws ............. Passed 0.60 sec; Start 405: skeleton; 390/411 Test #404: json-schema-1-properties ......... Passed 1.09 sec; Start 406: skeletonaointegrals; 391/411 Test #403: json-schema-1-gradient ........... Passed 1.66 sec; Start 407: skeletondfmp2; 392/411 Test #405: skeleton ......................... Passed 1.22 sec; Start 408: skeletonmointegrals; 393/411 Test #406: skeletonaointegrals .............. Passed 1.35 sec; Start 409: skeletonscf; 394/411 Test #408: skeletonmointegrals .............. Passed 1.63 sec; Start 410: skeletonsointegrals; 395/411 Test #409: skeletonscf ...................... Passed 0.67 sec; Start 411: skeletonwavefunction; 396/411 Test #407: skeletondfmp2 .................... Passed 1.86 sec; 397/411 Test #410: skeletonsointegrals .............. Passed 1.57 sec; 398/411 Test #411: skeletonwavefunction ............. Passed 1.46 sec; 399/411 Test #347: sapt-dft2 ........................ Passed 125.56 sec; 400/411 Test #359: tu6-cp-ne2 ....................... Passed 116.70 sec; 401/411 Test #371: dft-custom-dhdf .................. Passed 91.12 sec; 402/411 Test #389: python-pubchem ................... Passed 52.55 sec; 403/411 Test #379: cc-module ........................ Passed 90.55 sec; 404/411 Test #386: cookbook-rohf-orb-rot ............ Passed 85.56 sec; 405/411 Test #306: pywrap-checkrun-uhf .............. Passed 281.57 sec; 406/411 Test #300: pywrap-all ....................... Passed 311.77 sec; 407/411 Test #227: mp2-def2 ......................... Passed 424.41 sec; 408/411 Test #304: pywrap-checkrun-rhf .............. Passed 308.03 sec; 409/411 Test #373: dft-custom-mgga .................. Passed 175.48 sec; 410/411 Test #318: sapt4 ............................ Passed 1936.89 sec; 411/411 Test #178: fsapt1 ........................... Passed 1990.25 sec.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:37324,Test,Test,37324,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['Test'],['Test']
Testability,"; Start 403: json-schema-1-gradient; 396/411 Test #401: json-schema-1-orient ............. Passed 2.34 sec; Start 404: json-schema-1-properties; 397/411 Test #399: json-schema-1-energy ............. Passed 2.80 sec; Start 405: skeleton; 398/411 Test #403: json-schema-1-gradient ........... Passed 1.54 sec; Start 406: skeletonaointegrals; 399/411 Test #404: json-schema-1-properties ......... Passed 1.27 sec; Start 407: skeletondfmp2; 400/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 408: skeletonmointegrals; 401/411 Test #406: skeletonaointegrals .............. Passed 1.33 sec; Start 409: skeletonscf; 402/411 Test #407: skeletondfmp2 .................... Passed 1.53 sec; Start 410: skeletonsointegrals; 403/411 Test #409: skeletonscf ...................... Passed 0.75 sec; Start 411: skeletonwavefunction; 404/411 Test #408: skeletonmointegrals .............. Passed 1.51 sec; 405/411 Test #411: skeletonwavefunction ............. Passed 1.76 sec; 406/411 Test #410: skeletonsointegrals .............. Passed 1.81 sec; 407/411 Test #371: dft-custom-dhdf .................. Passed 84.13 sec; 408/411 Test #379: cc-module ........................ Passed 42.31 sec; 409/411 Test #386: cookbook-rohf-orb-rot ............ Passed 40.50 sec; 410/411 Test #389: python-pubchem ................... Passed 55.23 sec; 411/411 Test #373: dft-custom-mgga .................. Passed 153.16 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 69.98 sec*proc (2 tests); autotest = 2430.21 sec*proc (26 tests); cart = 17487.73 sec*proc (123 tests); cas = 66.60 sec*proc (1 test); casscf = 150.37 sec*proc (11 tests); cbs = 3292.06 sec*proc (10 tests); cc = 12872.21 sec*proc (65 tests); cdomp2 = 104.56 sec*proc (2 tests); cepa = 417.43 sec*proc (7 tests); ci = 125.33 sec*proc (8 tests); cisd = 241.44 sec*proc (7 tests); cookbook = 40.50 sec*proc (1 test); cubeprop = 21.07 sec*proc (2 tests); dcft = 4916.85 sec*proc (13 tests); df = 2467.51 sec*proc (3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:37979,Test,Test,37979,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['Test'],['Test']
Testability,; Start 404: json-schema-1-properties; 374/404 Test #333: scf2 ............................. Passed 1.18 sec; Start 309: pywrap-molecule; 375/404 Test #380: psi4numpy-cphf ................... Passed 1.08 sec; Start 378: mints12; 376/404 Test #381: psi4numpy-dfmp2 .................. Passed 1.45 sec; Start 220: mints-helper; 377/404 Test #293: psimrcc-pt2 ...................... Passed 0.85 sec; Start 383: psi4numpy-rhf-gradient; 378/404 Test #298: pubchem2 ......................... Passed 1.40 sec; Start 214: mints3; 379/404 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.22 sec; Start 387: python-energy; 380/404 Test #404: json-schema-1-properties ......... Passed 1.02 sec; Start 402: json-schema-1-throws; 381/404 Test #383: psi4numpy-rhf-gradient ........... Passed 0.98 sec; Start 188: fci-tdm; 382/404 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.18 sec; Start 396: python-memdfjk; 383/404 Test #309: pywrap-molecule .................. Passed 1.10 sec; Start 334: scf3; 384/404 Test #378: mints12 .......................... Passed 1.13 sec; Start 211: mcscf3; 385/404 Test #220: mints-helper ..................... Passed 1.23 sec; Start 209: mcscf1; 386/404 Test #214: mints3 ........................... Passed 1.05 sec; Start 382: psi4numpy-rhf; 387/404 Test #402: json-schema-1-throws ............. Passed 0.57 sec; Start 308: pywrap-db3; 388/404 Test #387: python-energy .................... Passed 0.81 sec; Start 239: numpy-array-interface; 389/404 Test #188: fci-tdm .......................... Passed 0.77 sec; Start 364: options1; 390/404 Test #334: scf3 ............................. Passed 0.82 sec; Start 208: matrix1; 391/404 Test #211: mcscf3 ........................... Passed 0.80 sec; Start 175: docs-dft; 392/404 Test #396: python-memdfjk ................... Passed 0.92 sec; Start 216: mints5; 393/404 Test #209: mcscf1 ........................... Passed 0.78 sec; Start 212: mints1; 394/404 Test #382: psi4numpy-rhf .................... Passed 0.83 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:35754,Test,Test,35754,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,"; Start 408: skeletonmointegrals; 393/411 Test #406: skeletonaointegrals .............. Passed 1.57 sec; Start 409: skeletonscf; 394/411 Test #409: skeletonscf ...................... Passed 0.65 sec; Start 410: skeletonsointegrals; 395/411 Test #408: skeletonmointegrals .............. Passed 2.19 sec; Start 411: skeletonwavefunction; 396/411 Test #407: skeletondfmp2 .................... Passed 3.47 sec; 397/411 Test #410: skeletonsointegrals .............. Passed 2.42 sec; 398/411 Test #411: skeletonwavefunction ............. Passed 1.80 sec; 399/411 Test #320: sapt6 ............................ Passed 161.96 sec; 400/411 Test #359: tu6-cp-ne2 ....................... Passed 97.38 sec; 401/411 Test #389: python-pubchem ................... Passed 54.63 sec; 402/411 Test #371: dft-custom-dhdf .................. Passed 86.83 sec; 403/411 Test #347: sapt-dft2 ........................ Passed 122.85 sec; 404/411 Test #379: cc-module ........................ Passed 78.72 sec; 405/411 Test #386: cookbook-rohf-orb-rot ............ Passed 74.81 sec; 406/411 Test #306: pywrap-checkrun-uhf .............. Passed 235.73 sec; 407/411 Test #300: pywrap-all ....................... Passed 284.41 sec; 408/411 Test #304: pywrap-checkrun-rhf .............. Passed 269.85 sec; 409/411 Test #373: dft-custom-mgga .................. Passed 166.49 sec; 410/411 Test #318: sapt4 ............................ Passed 1938.21 sec; 411/411 Test #178: fsapt1 ........................... Passed 2049.77 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 65.93 sec*proc (2 tests); autotest = 1184.25 sec*proc (26 tests); cart = 12809.92 sec*proc (123 tests); cas = 66.32 sec*proc (1 test); casscf = 84.85 sec*proc (11 tests); cbs = 1299.63 sec*proc (10 tests); cc = 4877.58 sec*proc (65 tests); cdomp2 = 87.04 sec*proc (2 tests); cepa = 237.74 sec*proc (7 tests); ci = 124.43 sec*proc (8 tests); cisd = 192.72 sec*proc (7 tests); cookbook = 74.81 sec*proc (1 test); cubeprop = 21.02 sec*",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:37864,Test,Test,37864,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['Test'],['Test']
Testability,"; Start 410: skeletonsointegrals; 410/411 Test #410: skeletonsointegrals .............. Passed 1.01 sec; Start 411: skeletonwavefunction; 411/411 Test #411: skeletonwavefunction ............. Passed 0.95 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 59.40 sec*proc (2 tests); autotest = 413.88 sec*proc (26 tests); cart = 8685.75 sec*proc (123 tests); cas = 42.49 sec*proc (1 test); casscf = 39.18 sec*proc (11 tests); cbs = 636.82 sec*proc (10 tests); cc = 1337.69 sec*proc (65 tests); cdomp2 = 6.18 sec*proc (2 tests); cepa = 34.84 sec*proc (7 tests); ci = 81.27 sec*proc (8 tests); cisd = 132.02 sec*proc (7 tests); cookbook = 33.29 sec*proc (1 test); cubeprop = 17.72 sec*proc (2 tests); dcft = 859.31 sec*proc (13 tests); df = 444.10 sec*proc (38 tests); dfccd = 1.41 sec*proc (1 test); dfccd-grad = 2.48 sec*proc (1 test); dfccdl = 1.38 sec*proc (1 test); dfccsd = 1.91 sec*proc (1 test); dfccsd-grad = 5.09 sec*proc (1 test); dfccsd-t-grad = 4.20 sec*proc (1 test); dfccsdat = 3.26 sec*proc (1 test); dfccsdl = 1.60 sec*proc (1 test); dfccsdt = 2.15 sec*proc (1 test); dfep2 = 4.83 sec*proc (2 tests); dfmp2 = 103.27 sec*proc (11 tests); dfomp2 = 91.94 sec*proc (7 tests); dfomp2.5 = 23.91 sec*proc (4 tests); dfomp3 = 23.93 sec*proc (4 tests); dfscf = 139.95 sec*proc (1 test); dft = 1225.97 sec*proc (27 tests); docs = 1.17 sec*proc (2 tests); ecp = 31.89 sec*proc (2 tests); fci = 9.85 sec*proc (2 tests); fcidump = 1.78 sec*proc (1 test); findif = 712.53 sec*proc (5 tests); fnocc = 28.21 sec*proc (4 tests); freq = 830.33 sec*proc (6 tests); gradient = 172.09 sec*proc (16 tests); json = 11.48 sec*proc (8 tests); longtests = 3140.76 sec*proc (5 tests); mcscf = 2.84 sec*proc (3 tests); minitests = 50.01 sec*proc (4 tests); mints = 74.16 sec*proc (14 tests); misc = 353.91 sec*proc (16 tests); mp2 = 441.75 sec*proc (13 tests); nbody = 37.60 sec*proc (2 tests); numpy = 0.76 sec*proc (1 test); ocepa = 92.44 sec*proc (6 tests); omp = 111.60 sec*proc (18 te",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:39011,test,test,39011,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['test'],['test']
Testability,"; Start 410: skeletonsointegrals; 410/411 Test #410: skeletonsointegrals .............. Passed 1.01 sec; Start 411: skeletonwavefunction; 411/411 Test #411: skeletonwavefunction ............. Passed 1.03 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 55.73 sec*proc (2 tests); autotest = 374.25 sec*proc (26 tests); cart = 8218.29 sec*proc (123 tests); cas = 41.71 sec*proc (1 test); casscf = 36.15 sec*proc (11 tests); cbs = 546.91 sec*proc (10 tests); cc = 1151.91 sec*proc (65 tests); cdomp2 = 5.24 sec*proc (2 tests); cepa = 30.36 sec*proc (7 tests); ci = 79.29 sec*proc (8 tests); cisd = 117.44 sec*proc (7 tests); cookbook = 18.93 sec*proc (1 test); cubeprop = 16.42 sec*proc (2 tests); dcft = 560.31 sec*proc (13 tests); df = 370.25 sec*proc (38 tests); dfccd = 1.39 sec*proc (1 test); dfccd-grad = 2.01 sec*proc (1 test); dfccdl = 1.41 sec*proc (1 test); dfccsd = 1.55 sec*proc (1 test); dfccsd-grad = 3.50 sec*proc (1 test); dfccsd-t-grad = 3.85 sec*proc (1 test); dfccsdat = 2.57 sec*proc (1 test); dfccsdl = 1.64 sec*proc (1 test); dfccsdt = 1.99 sec*proc (1 test); dfep2 = 4.64 sec*proc (2 tests); dfmp2 = 93.43 sec*proc (11 tests); dfomp2 = 61.41 sec*proc (7 tests); dfomp2.5 = 19.21 sec*proc (4 tests); dfomp3 = 18.74 sec*proc (4 tests); dfscf = 120.49 sec*proc (1 test); dft = 1158.52 sec*proc (27 tests); docs = 1.35 sec*proc (2 tests); ecp = 31.03 sec*proc (2 tests); fci = 9.12 sec*proc (2 tests); fcidump = 2.13 sec*proc (1 test); findif = 682.89 sec*proc (5 tests); fnocc = 31.56 sec*proc (4 tests); freq = 541.69 sec*proc (6 tests); gradient = 135.87 sec*proc (16 tests); json = 10.69 sec*proc (8 tests); longtests = 3093.86 sec*proc (5 tests); mcscf = 3.13 sec*proc (3 tests); minitests = 50.90 sec*proc (4 tests); mints = 69.69 sec*proc (14 tests); misc = 340.45 sec*proc (16 tests); mp2 = 408.77 sec*proc (13 tests); nbody = 35.02 sec*proc (2 tests); numpy = 0.74 sec*proc (1 test); ocepa = 87.26 sec*proc (6 tests); omp = 109.60 sec*proc (18 tes",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:38982,test,test,38982,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,1,['test'],['test']
Testability,"; Start 415: json-schema-1-properties; 400/415 Test #413: json-schema-1-throws ............. Passed 0.92 sec; 401/415 Test #415: json-schema-1-properties ......... Passed 2.25 sec; 402/415 Test #382: dft-custom-dhdf .................. Passed 37.28 sec; 403/415 Test #400: python-pubchem ................... Passed 31.88 sec; 404/415 Test #290: opt-irc-2 ........................ Passed 211.86 sec; 405/415 Test #384: dft-custom-mgga .................. Passed 56.51 sec; 406/415 Test #249: ocepa-freq1 ...................... Passed 749.07 sec; 407/415 Test #106: dcft-grad1 ....................... Passed 1347.53 sec; 408/415 Test #397: cookbook-rohf-orb-rot ............ Passed 443.85 sec; 409/415 Test #148: dfomp2-grad3 ..................... Passed 1213.44 sec; 410/415 Test #370: tu6-cp-ne2 ....................... Passed 555.15 sec; 411/415 Test #315: pywrap-checkrun-rohf ............. Passed 668.23 sec; 412/415 Test #113: dcft4 ............................ Passed 1477.74 sec; 413/415 Test #316: pywrap-checkrun-uhf .............. Passed 728.94 sec; 414/415 Test #18: cbs-xtpl-func .................... Passed 3334.37 sec; 415/415 Test #314: pywrap-checkrun-rhf .............. Passed 750.17 sec. 100% tests passed, 0 tests failed out of 415. Label Time Summary:; adc = 62.10 sec*proc (2 tests); autotest = 3142.09 sec*proc (26 tests); cart = 16551.08 sec*proc (123 tests); cas = 28.56 sec*proc (1 test); casscf = 215.89 sec*proc (11 tests); cbs = 5376.02 sec*proc (12 tests); cc = 17865.62 sec*proc (65 tests); cdomp2 = 102.86 sec*proc (2 tests); cepa = 362.38 sec*proc (7 tests); ci = 100.54 sec*proc (8 tests); cisd = 147.55 sec*proc (7 tests); cookbook = 443.85 sec*proc (1 test); cubeprop = 24.72 sec*proc (3 tests); dcft = 5201.52 sec*proc (13 tests); df = 3130.41 sec*proc (38 tests); dfccd = 7.27 sec*proc (1 test); dfccd-grad = 29.83 sec*proc (1 test); dfccdl = 4.85 sec*proc (1 test); dfccsd = 16.21 sec*proc (1 test); dfccsd-grad = 94.95 sec*proc (1 test); dfccsd-t-grad = 103.60 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:38633,Test,Test,38633,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['Test'],['Test']
Testability,; Start 466: pywrap-align; 156/185 Test #466: pywrap-align ..................... Passed 5.06 sec; Start 467: pywrap-align-chiral; 157/185 Test #467: pywrap-align-chiral .............. Passed 3.80 sec; Start 469: cc-module; 158/185 Test #469: cc-module ........................ Passed 23.59 sec; Start 474: tdscf-5; 159/185 Test #474: tdscf-5 .......................... Passed 328.52 sec; Start 475: tdscf-6; 160/185 Test #475: tdscf-6 .......................... Passed 24.27 sec; Start 483: linK-1; 161/185 Test #483: linK-1 ........................... Passed 4.26 sec; Start 486: cbs-xtpl-energy-conv; 162/185 Test #486: cbs-xtpl-energy-conv ............. Passed 17.51 sec; Start 487: ddd-deriv; 163/185 Test #487: ddd-deriv ........................ Passed 17.86 sec; Start 491: psi4numpy-dfmp2; 164/185 Test #491: psi4numpy-dfmp2 .................. Passed 3.86 sec; Start 492: psi4numpy-rhf; 165/185 Test #492: psi4numpy-rhf .................... Passed 2.68 sec; Start 493: psi4numpy-rhf-gradient; 166/185 Test #493: psi4numpy-rhf-gradient ........... Passed 2.37 sec; Start 494: psi4numpy-rhf-hessian; 167/185 Test #494: psi4numpy-rhf-hessian ............ Passed 2.52 sec; Start 499: python-energy; 168/185 Test #499: python-energy .................... Passed 2.39 sec; Start 500: python-curve; 169/185 Test #500: python-curve ..................... Passed 3.30 sec; Start 502: python-mints9; 170/185 Test #502: python-mints9 .................... Passed 2.66 sec; Start 503: python-mints2; 171/185 Test #503: python-mints2 .................... Passed 3.51 sec; Start 504: python-cc54; 172/185 Test #504: python-cc54 ...................... Passed 9.24 sec; Start 505: python-3-index-transforms; 173/185 Test #505: python-3-index-transforms ........ Passed 56.49 sec; Start 506: python-mints13; 174/185 Test #506: python-mints13 ................... Passed 2.17 sec; Start 507: python-mints14; 175/185 Test #507: python-mints14 ................... Passed 2.67 sec; Start 508: python-cc-amps; 176/185 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:15549,Test,Test,15549,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,1,['Test'],['Test']
Testability,; Start 48: cc31; 18/185 Test #48: cc31 ............................. Passed 367.81 sec; Start 49: cc32; 19/185 Test #49: cc32 ............................. Passed 3.80 sec; Start 57: cc4; 20/185 Test #57: cc4 .............................. Passed 9.40 sec; Start 67: cc49; 21/185 Test #67: cc49 ............................. Passed 18.04 sec; Start 79: cc8; 22/185 Test #79: cc8 .............................. Passed 4.58 sec; Start 85: cdomp2-1; 23/185 Test #85: cdomp2-1 ......................... Passed 10.26 sec; Start 86: cdomp2-2; 24/185 Test #86: cdomp2-2 ......................... Passed 31.46 sec; Start 95: ci-multi; 25/185 Test #95: ci-multi ......................... Passed 17.28 sec; Start 96: cisd-h2o+-0; 26/185 Test #96: cisd-h2o+-0 ...................... Passed 6.82 sec; Start 103: ci-property; 27/185 Test #103: ci-property ...................... Passed 138.78 sec; Start 104: cubeprop; 28/185 Test #104: cubeprop ......................... Passed 11.86 sec; Start 106: decontract; 29/185 Test #106: decontract ....................... Passed 2.88 sec; Start 108: dct-grad2; 30/185 Test #108: dct-grad2 ........................ Passed 14.27 sec; Start 111: dct1; 31/185 Test #111: dct1 ............................. Passed 5.03 sec; Start 113: dct3; 32/185 Test #113: dct3 ............................. Passed 3.21 sec; Start 123: ao-dfcasscf-sp; 33/185 Test #123: ao-dfcasscf-sp ................... Passed 3.04 sec; Start 124: density-screen-1; 34/185 Test #124: density-screen-1 ................. Passed 2.89 sec; Start 126: dfcasscf-sa-sp; 35/185 Test #126: dfcasscf-sa-sp ................... Passed 24.45 sec; Start 127: dfcasscf-fzc-sp; 36/185 Test #127: dfcasscf-fzc-sp .................. Passed 4.55 sec; Start 128: dfcasscf-sp; 37/185 Test #128: dfcasscf-sp ...................... Passed 5.25 sec; Start 129: dfccd1; 38/185 Test #129: dfccd1 ........................... Passed 5.11 sec; Start 132: dfccsd1; 39/185 Test #132: dfccsd1 .......................... Passed 7.31 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:2637,Test,Test,2637,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,1,['Test'],['Test']
Testability,; Start 4: casscf-semi; 312/411 Test #269: opt3 ............................. Passed 3.32 sec; Start 399: json-schema-1-energy; 313/411 Test #190: fci-coverage ..................... Passed 3.00 sec; Start 377: pywrap-align-chiral; 314/411 Test #134: dfmp2-grad1 ...................... Passed 2.56 sec; Start 236: mpn-bh; 315/411 Test #4: casscf-semi ...................... Passed 1.77 sec; Start 213: mints2; 316/411 Test #399: json-schema-1-energy ............. Passed 1.83 sec; Start 118: dfcasscf-fzc-sp; 317/411 Test #388: python-curve ..................... Passed 2.19 sec; Start 391: python-mints2; 318/411 Test #295: psithon1 ......................... Passed 3.15 sec; Start 384: psi4numpy-rhf-hessian; 319/411 Test #236: mpn-bh ........................... Passed 2.98 sec; Start 283: opt-freeze-coords; 320/411 Test #376: pywrap-align ..................... Passed 3.28 sec; Start 343: stability1; 321/411 Test #118: dfcasscf-fzc-sp .................. Passed 1.56 sec; Start 203: frac; 322/411 Test #377: pywrap-align-chiral .............. Passed 3.40 sec; Start 311: rasci-h2o; 323/411 Test #213: mints2 ........................... Passed 2.40 sec; Start 235: mp2-property; 324/411 Test #391: python-mints2 .................... Passed 2.39 sec; Start 225: mom; 325/411 Test #311: rasci-h2o ........................ Passed 1.08 sec; Start 356: scf-response1; 326/411 Test #203: frac ............................. Passed 1.57 sec; Start 191: fcidump; 327/411 Test #343: stability1 ....................... Passed 2.11 sec; Start 362: x2c3; 328/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.66 sec; Start 314: sad1; 329/411 Test #283: opt-freeze-coords ................ Passed 3.00 sec; Start 361: x2c2; 330/411 Test #225: mom .............................. Passed 2.15 sec; Start 253: omp2p5-1; 331/411 Test #356: scf-response1 .................... Passed 2.07 sec; Start 284: props1; 332/411 Test #362: x2c3 ............................. Passed 1.49 sec; Start 224: molden2; 333/411,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:30007,Test,Test,30007,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,; Start 57: cc40; 45/411 Test #115: dcft9 ............................ Passed 93.57 sec; Start 107: dcft1; 46/411 Test #60: cc43 ............................. Passed 98.08 sec; Start 183: isapt2; 47/411 Test #149: dfomp3-grad2 ..................... Passed 73.71 sec; Start 43: cc28; 48/411 Test #97: cisd-opt-fd ...................... Passed 154.70 sec; Start 59: cc42; 49/411 Test #17: cbs-xtpl-opt ..................... Passed 90.29 sec; Start 347: sapt-dft2; 50/411 Test #373: dft-custom-mgga .................. Passed 178.76 sec; Start 26: cc13b; 51/411 Test #57: cc40 ............................. Passed 62.96 sec; Start 20: cc1; 52/411 Test #320: sapt6 ............................ Passed 163.15 sec; Start 30: cc15; 53/411 Test #107: dcft1 ............................ Passed 67.37 sec; Start 147: dfomp3-2; 54/411 Test #158: dfscf-bz2 ........................ Passed 135.99 sec; Start 74: cc5a; 55/411 Test #181: fsapt-allterms ................... Passed 571.01 sec; Start 69: cc51; 56/411 Test #386: cookbook-rohf-orb-rot ............ Passed 200.39 sec; Start 75: cc6; 57/411 Test #43: cc28 ............................. Passed 100.27 sec; Start 154: dft-grad-lr2; 58/411 Test #59: cc42 ............................. Passed 99.93 sec; Start 65: cc48; 59/411 Test #193: fd-freq-energy-large ............. Passed 499.88 sec; Start 168: dft1; 60/411 Test #183: isapt2 ........................... Passed 128.83 sec; Start 302: pywrap-cbs1; 61/411 Test #347: sapt-dft2 ........................ Passed 119.85 sec; Start 25: cc13a; 62/411 Test #147: dfomp3-2 ......................... Passed 126.78 sec; Start 113: dcft7; 63/411 Test #30: cc15 ............................. Passed 133.87 sec; Start 205: frac-traverse; 64/411 Test #20: cc1 .............................. Passed 139.89 sec; Start 316: sapt2; 65/411 Test #26: cc13b ............................ Passed 142.88 sec; Start 318: sapt4; 66/411 Test #74: cc5a ............................. Passed 110.18 sec; Start 325: scf-bz2; 67/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:5524,Test,Test,5524,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['Test'],['Test']
Testability,; Start 57: cc40; 97/411 Test #100: ci-property ...................... Passed 45.85 sec; Start 59: cc42; 98/411 Test #46: cc30 ............................. Passed 20.77 sec; Start 261: omp3-5; 99/411 Test #57: cc40 ............................. Passed 11.83 sec; Start 2: adc2; 100/411 Test #389: python-pubchem ................... Passed 48.90 sec; Start 65: cc48; 101/411 Test #59: cc42 ............................. Passed 13.57 sec; Start 337: scf6; 102/411 Test #261: omp3-5 ........................... Passed 16.37 sec; Start 170: dft1-alt; 103/411 Test #159: dft-grad-meta .................... Passed 50.55 sec; Start 107: dcft1; 104/411 Test #107: dcft1 ............................ Passed 7.05 sec; Start 79: cc8b; 105/411 Test #65: cc48 ............................. Passed 13.29 sec; Start 263: omp3-grad2; 106/411 Test #337: scf6 ............................. Passed 19.28 sec; Start 336: scf5; 107/411 Test #79: cc8b ............................. Passed 9.03 sec; Start 307: pywrap-db1; 108/411 Test #297: pubchem1 ......................... Passed 48.50 sec; Start 34: cc19; 109/411 Test #263: omp3-grad2 ....................... Passed 15.79 sec; Start 348: sapt-compare; 110/411 Test #2: adc2 ............................. Passed 41.12 sec; Start 68: cc50; 111/411 Test #34: cc19 ............................. Passed 15.82 sec; Start 219: mints-benchmark; 112/411 Test #336: scf5 ............................. Passed 22.47 sec; Start 237: nbody-he-cluster; 113/411 Test #170: dft1-alt ......................... Passed 43.76 sec; Start 131: dfmp2-3; 114/411 Test #68: cc50 ............................. Passed 19.88 sec; Start 81: cc9; 115/411 Test #81: cc9 .............................. Passed 4.79 sec; Start 77: cc8; 116/411 Test #307: pywrap-db1 ....................... Passed 37.30 sec; Start 33: cc18; 117/411 Test #77: cc8 .............................. Passed 6.02 sec; Start 66: cc49; 118/411 Test #33: cc18 ............................. Passed 6.57 sec; Start 64: cc47; 119/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:10129,Test,Test,10129,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,; Start 57: cc4; 107/412 Test #35: cc19 ............................. Passed 111.21 sec; Start 82: cc9; 108/412 Test #157: dfomp2p5-grad2 ................... Passed 72.22 sec; Start 141: dfomp2-2; 109/412 Test #2: adc2 ............................. Passed 56.59 sec; Start 108: dcft1; 110/412 Test #238: nbody-he-cluster ................. Passed 66.53 sec; Start 78: cc8; 111/412 Test #60: cc42 ............................. Passed 58.59 sec; Start 132: dfmp2-3; 112/412 Test #66: cc48 ............................. Passed 63.06 sec; Start 201: fnocc2; 113/412 Test #349: sapt-compare ..................... Passed 59.37 sec; Start 55: cc38; 114/412 Test #220: mints-benchmark .................. Passed 56.59 sec; Start 81: cc8c; 115/412 Test #308: pywrap-db1 ....................... Passed 62.96 sec; Start 152: dfomp2p5-2; 116/412 Test #65: cc47 ............................. Passed 89.72 sec; Start 68: cc4a; 117/412 Test #57: cc4 .............................. Passed 86.80 sec; Start 79: cc8a; 118/412 Test #132: dfmp2-3 .......................... Passed 59.47 sec; Start 148: dfomp3-2; 119/412 Test #12: cbs-parser ....................... Passed 96.99 sec; Start 246: ocepa3; 120/412 Test #82: cc9 .............................. Passed 89.68 sec; Start 64: cc46; 121/412 Test #55: cc38 ............................. Passed 68.64 sec; Start 74: cc55; 122/412 Test #141: dfomp2-2 ......................... Passed 85.24 sec; Start 56: cc39; 123/412 Test #83: cc9a ............................. Passed 112.00 sec; Start 85: cdomp2-2; 124/412 Test #78: cc8 .............................. Passed 85.11 sec; Start 143: dfomp2-4; 125/412 Test #201: fnocc2 ........................... Passed 90.60 sec; Start 313: rasci-ne; 126/412 Test #108: dcft1 ............................ Passed 127.38 sec; Start 72: cc53; 127/412 Test #68: cc4a ............................. Passed 76.60 sec; Start 338: scf6; 128/412 Test #152: dfomp2p5-2 ....................... Passed 100.80 sec; Start 73: cc54; 129/412 Test #,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:11236,Test,Test,11236,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['Test'],['Test']
Testability,; Start 57: cc4; 82/412 Test #2: adc2 ............................. Passed 46.23 sec; Start 245: ocepa2; 83/412 Test #205: frac-ip-fitting .................. Passed 73.37 sec; Start 251: omp2-5; 84/412 Test #168: dft-b3lyp ........................ Passed 68.76 sec; Start 78: cc8; 85/412 Test #17: cbs-xtpl-opt ..................... Passed 104.86 sec; Start 193: fd-freq-energy; 86/412 Test #150: dfomp3-grad2 ..................... Passed 85.43 sec; Start 298: pubchem1; 87/412 Test #20: cbs-xtpl-wrapper ................. Passed 80.35 sec; Start 80: cc8b; 88/412 Test #317: sapt2 ............................ Passed 352.05 sec; Start 243: ocepa-grad2; 89/412 Test #58: cc40 ............................. Passed 75.15 sec; Start 60: cc42; 90/412 Test #82: cc9 .............................. Passed 62.16 sec; Start 108: dcft1; 91/412 Test #57: cc4 .............................. Passed 57.29 sec; Start 35: cc19; 92/412 Test #114: dcft7 ............................ Passed 393.99 sec; Start 66: cc48; 93/412 Test #69: cc50 ............................. Passed 73.08 sec; Start 101: ci-property; 94/412 Test #78: cc8 .............................. Passed 58.53 sec; Start 65: cc47; 95/412 Test #245: ocepa2 ........................... Passed 85.34 sec; Start 28: cc13c; 96/412 Test #251: omp2-5 ........................... Passed 85.48 sec; Start 67: cc49; 97/412 Test #80: cc8b ............................. Passed 50.08 sec; Start 55: cc38; 98/412 Test #298: pubchem1 ......................... Passed 62.79 sec; Start 257: omp2p5-grad2; 99/412 Test #60: cc42 ............................. Passed 63.53 sec; Start 72: cc53; 100/412 Test #193: fd-freq-energy ................... Passed 94.52 sec; Start 157: dfomp2p5-grad2; 101/412 Test #35: cc19 ............................. Passed 71.33 sec; Start 148: dfomp3-2; 102/412 Test #101: ci-property ...................... Passed 60.88 sec; Start 163: dft-grad-meta; 103/412 Test #66: cc48 ............................. Passed 63.96 sec; Start 27: cc13b; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:8912,Test,Test,8912,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,; Start 65: cc48; 99/404 Test #79: cc8b ............................. Passed 6.52 sec; Start 80: cc8c; 100/404 Test #27: cc13c ............................ Passed 17.28 sec; Start 30: cc15; 101/404 Test #80: cc8c ............................. Passed 10.62 sec; Start 256: omp2p5-grad2; 102/404 Test #69: cc51 ............................. Passed 28.59 sec; Start 63: cc46; 103/404 Test #371: dft-custom-dhdf .................. Passed 41.90 sec; Start 68: cc50; 104/404 Test #1: adc1 ............................. Passed 24.57 sec; Start 167: dft-b3lyp; 105/404 Test #65: cc48 ............................. Passed 18.76 sec; Start 273: opt7; 106/404 Test #30: cc15 ............................. Passed 14.02 sec; Start 337: scf6; 107/404 Test #237: nbody-he-cluster ................. Passed 31.85 sec; Start 73: cc55; 108/404 Test #63: cc46 ............................. Passed 11.94 sec; Start 34: cc19; 109/404 Test #292: psimrcc-fd-freq2 ................. Passed 35.56 sec; Start 392: python-cc54; 110/404 Test #256: omp2p5-grad2 ..................... Passed 20.13 sec; Start 336: scf5; 111/404 Test #68: cc50 ............................. Passed 19.49 sec; Start 64: cc47; 112/404 Test #392: python-cc54 ...................... Passed 13.89 sec; Start 66: cc49; 113/404 Test #73: cc55 ............................. Passed 17.08 sec; Start 274: opt8; 114/404 Test #34: cc19 ............................. Passed 20.82 sec; Start 307: pywrap-db1; 115/404 Test #273: opt7 ............................. Passed 29.71 sec; Start 140: dfomp2-2; 116/404 Test #337: scf6 ............................. Passed 24.89 sec; Start 84: cdomp2-2; 117/404 Test #64: cc47 ............................. Passed 14.94 sec; Start 55: cc39; 118/404 Test #167: dft-b3lyp ........................ Passed 36.49 sec; Start 312: rasci-ne; 119/404 Test #84: cdomp2-2 ......................... Passed 8.35 sec; Start 71: cc53; 120/404 Test #140: dfomp2-2 ......................... Passed 9.35 sec; Start 67: cc4a; 121/404 Test #336,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:10221,Test,Test,10221,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,; Start 68: cc50; 104/404 Test #1: adc1 ............................. Passed 24.57 sec; Start 167: dft-b3lyp; 105/404 Test #65: cc48 ............................. Passed 18.76 sec; Start 273: opt7; 106/404 Test #30: cc15 ............................. Passed 14.02 sec; Start 337: scf6; 107/404 Test #237: nbody-he-cluster ................. Passed 31.85 sec; Start 73: cc55; 108/404 Test #63: cc46 ............................. Passed 11.94 sec; Start 34: cc19; 109/404 Test #292: psimrcc-fd-freq2 ................. Passed 35.56 sec; Start 392: python-cc54; 110/404 Test #256: omp2p5-grad2 ..................... Passed 20.13 sec; Start 336: scf5; 111/404 Test #68: cc50 ............................. Passed 19.49 sec; Start 64: cc47; 112/404 Test #392: python-cc54 ...................... Passed 13.89 sec; Start 66: cc49; 113/404 Test #73: cc55 ............................. Passed 17.08 sec; Start 274: opt8; 114/404 Test #34: cc19 ............................. Passed 20.82 sec; Start 307: pywrap-db1; 115/404 Test #273: opt7 ............................. Passed 29.71 sec; Start 140: dfomp2-2; 116/404 Test #337: scf6 ............................. Passed 24.89 sec; Start 84: cdomp2-2; 117/404 Test #64: cc47 ............................. Passed 14.94 sec; Start 55: cc39; 118/404 Test #167: dft-b3lyp ........................ Passed 36.49 sec; Start 312: rasci-ne; 119/404 Test #84: cdomp2-2 ......................... Passed 8.35 sec; Start 71: cc53; 120/404 Test #140: dfomp2-2 ......................... Passed 9.35 sec; Start 67: cc4a; 121/404 Test #336: scf5 ............................. Passed 26.26 sec; Start 26: cc13b; 122/404 Test #66: cc49 ............................. Passed 19.38 sec; Start 326: scf-ecp; 123/404 Test #274: opt8 ............................. Passed 19.76 sec; Start 374: dft-custom-gga; 124/404 Test #55: cc39 ............................. Passed 13.27 sec; Start 200: fnocc2; 125/404 Test #71: cc53 ............................. Passed 8.33 sec; Start 56: cc4; 126/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:10667,Test,Test,10667,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,"; Start 68: cc51; 49/401 Test #163: dft-b3lyp ........................ Passed 36.67 sec; Start 256: omp3-4; 50/401 Test #24: cc13 ............................. Passed 251.21 sec; Start 246: omp2-5; 51/401 Test #12: cbs-parser ....................... Passed 50.44 sec; Start 64: cc48; 52/401 Test #61: cc44 ............................. Passed 62.83 sec; Start 73: cc5a; 53/401 Test #233: nbody-he-cluster ................. Passed 47.19 sec; Start 240: ocepa2; 54/401 Test #58: cc41 ............................. Passed 109.69 sec; Start 333: scf6; 55/401 Test #272: opt11 ............................ Passed 51.45 sec; Start 245: omp2-4; 56/401 Test #28: cc13d ............................ Passed 217.30 sec; Start 369: dft-custom-gga; 57/401 Test #57: cc40 ............................. Passed 61.45 sec; Start 269: opt7; 58/401 Test #46: cc30 ............................. Passed 67.91 sec; Start 308: rasci-ne; 59/401 Test #255: omp3-3 ........................... Passed 75.64 sec; Start 2: adc2; 60/401 Test #27: cc13c ............................ Passed 98.63 sec; Start 67: cc50; 61/401 Test #68: cc51 ............................. Passed 51.83 sec; Start 154: dfscf-bz2; 62/401 Test #143: dfomp2-grad2 ..................... Passed 80.96 sec; Start 259: omp3-grad2; 63/401 Test #369: dft-custom-gga ................... Passed 31.17 sec; Start 146: dfomp3-2; 64/401 Test #257: omp3-5 ........................... Passed 92.99 sec; Start 322: scf-ecp; 65/401 Test #333: scf6 ............................. Passed 42.20 sec; Start 226: mp2-module; 66/401 Test #60: cc43 ............................. Passed 101.83 sec; Start 298: pywrap-cbs1; 67/401 Test #308: rasci-ne ......................... Passed 31.21 sec; Start 152: dfomp2p5-grad2; 68/401 Test #64: cc48 ............................. Passed 64.50 sec; Start 386: python-pubchem; 69/401 Test #2: adc2 ............................. Passed 36.41 sec; Start 376: cc-module,; 70/401 Test #154: dfscf-bz2 ........................ Passed 28.93 sec;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:6193,Test,Test,6193,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['Test'],['Test']
Testability,; Start 69: cc50; 81/412 Test #390: python-pubchem ................... Passed 64.71 sec; Start 57: cc4; 82/412 Test #2: adc2 ............................. Passed 46.23 sec; Start 245: ocepa2; 83/412 Test #205: frac-ip-fitting .................. Passed 73.37 sec; Start 251: omp2-5; 84/412 Test #168: dft-b3lyp ........................ Passed 68.76 sec; Start 78: cc8; 85/412 Test #17: cbs-xtpl-opt ..................... Passed 104.86 sec; Start 193: fd-freq-energy; 86/412 Test #150: dfomp3-grad2 ..................... Passed 85.43 sec; Start 298: pubchem1; 87/412 Test #20: cbs-xtpl-wrapper ................. Passed 80.35 sec; Start 80: cc8b; 88/412 Test #317: sapt2 ............................ Passed 352.05 sec; Start 243: ocepa-grad2; 89/412 Test #58: cc40 ............................. Passed 75.15 sec; Start 60: cc42; 90/412 Test #82: cc9 .............................. Passed 62.16 sec; Start 108: dcft1; 91/412 Test #57: cc4 .............................. Passed 57.29 sec; Start 35: cc19; 92/412 Test #114: dcft7 ............................ Passed 393.99 sec; Start 66: cc48; 93/412 Test #69: cc50 ............................. Passed 73.08 sec; Start 101: ci-property; 94/412 Test #78: cc8 .............................. Passed 58.53 sec; Start 65: cc47; 95/412 Test #245: ocepa2 ........................... Passed 85.34 sec; Start 28: cc13c; 96/412 Test #251: omp2-5 ........................... Passed 85.48 sec; Start 67: cc49; 97/412 Test #80: cc8b ............................. Passed 50.08 sec; Start 55: cc38; 98/412 Test #298: pubchem1 ......................... Passed 62.79 sec; Start 257: omp2p5-grad2; 99/412 Test #60: cc42 ............................. Passed 63.53 sec; Start 72: cc53; 100/412 Test #193: fd-freq-energy ................... Passed 94.52 sec; Start 157: dfomp2p5-grad2; 101/412 Test #35: cc19 ............................. Passed 71.33 sec; Start 148: dfomp3-2; 102/412 Test #101: ci-property ...................... Passed 60.88 sec; Start 163: dft-grad-meta; 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:8824,Test,Test,8824,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['Test'],['Test']
Testability,; Start 69: cc51; 56/411 Test #161: dft-grad-lr2 ..................... Passed 89.66 sec; Start 43: cc28; 57/411 Test #278: opt13 ............................ Passed 799.10 sec; Start 27: cc13c; 58/411 Test #371: dft-custom-dhdf .................. Passed 81.14 sec; Start 319: sapt5; 59/411 Test #27: cc13c ............................ Passed 10.62 sec; Start 279: opt14; 60/411 Test #168: dft1 ............................. Passed 88.97 sec; Start 75: cc6; 61/411 Test #43: cc28 ............................. Passed 24.64 sec; Start 60: cc43; 62/411 Test #60: cc43 ............................. Passed 15.10 sec; Start 91: cepa-module; 63/411 Test #69: cc51 ............................. Passed 56.92 sec; Start 292: psimrcc-fd-freq2; 64/411 Test #91: cepa-module ...................... Passed 19.19 sec; Start 115: dcft9; 65/411 Test #75: cc6 .............................. Passed 49.07 sec; Start 259: omp3-3; 66/411 Test #316: sapt2 ............................ Passed 354.02 sec; Start 74: cc5a; 67/411 Test #115: dcft9 ............................ Passed 13.18 sec; Start 317: sapt3; 68/411 Test #319: sapt5 ............................ Passed 67.31 sec; Start 167: dft-b3lyp; 69/411 Test #259: omp3-3 ........................... Passed 18.77 sec; Start 30: cc15; 70/411 Test #279: opt14 ............................ Passed 74.61 sec; Start 153: dfomp2p5-grad2; 71/411 Test #30: cc15 ............................. Passed 12.46 sec; Start 104: dcft-grad2; 72/411 Test #153: dfomp2p5-grad2 ................... Passed 15.20 sec; Start 61: cc44; 73/411 Test #292: psimrcc-fd-freq2 ................. Passed 62.74 sec; Start 204: frac-ip-fitting; 74/411 Test #104: dcft-grad2 ....................... Passed 16.24 sec; Start 144: dfomp2-grad2; 75/411 Test #74: cc5a ............................. Passed 46.64 sec; Start 11: cbs-delta-energy; 76/411 Test #144: dfomp2-grad2 ..................... Passed 11.68 sec; Start 26: cc13b; 77/411 Test #167: dft-b3lyp ........................ Passed 64.40 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:6361,Test,Test,6361,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['Test'],['Test']
Testability,"; Start 6: casscf-sp; 1/20 Test #6: casscf-sp ........................ Passed 12.07 sec; Start 21: cc1; 2/20 Test #21: cc1 .............................. Passed 6.74 sec; Start 138: dfmp2-1; 3/20 Test #138: dfmp2-1 .......................... Passed 78.01 sec; Start 228: fcidump; 4/20 Test #228: fcidump .......................... Passed 4.32 sec; Start 385: sapt1; 5/20 Test #385: sapt1 ............................ Passed 59.83 sec; Start 419: scf-property; 6/20 Test #419: scf-property ..................... Passed 9.06 sec; Start 434: tu1-h2o-energy; 7/20 Test #434: tu1-h2o-energy ................... Passed 2.56 sec; Start 470: tdscf-1; 8/20 Test #470: tdscf-1 .......................... Passed 5.19 sec; Start 471: tdscf-2; 9/20 Test #471: tdscf-2 .......................... Passed 3.84 sec; Start 472: tdscf-3; 10/20 Test #472: tdscf-3 .......................... Passed 12.44 sec; Start 473: tdscf-4; 11/20 Test #473: tdscf-4 .......................... Passed 11.39 sec; Start 487: ddd-deriv; 12/20 Test #487: ddd-deriv ........................ Passed 17.49 sec; Start 492: psi4numpy-rhf; 13/20 Test #492: psi4numpy-rhf .................... Passed 2.68 sec; Start 494: psi4numpy-rhf-hessian; 14/20 Test #494: psi4numpy-rhf-hessian ............ Passed 2.55 sec; Start 499: python-energy; 15/20 Test #499: python-energy .................... Passed 2.27 sec; Start 514: json-schema-1-gradient; 16/20 Test #514: json-schema-1-gradient ........... Passed 2.83 sec; Start 518: dftd3-energy; 17/20 Test #518: dftd3-energy ..................... Passed 49.54 sec; Start 523: sapt0-d; 18/20 Test #523: sapt0-d .......................... Passed 379.12 sec; Start 524: fsapt-d; 19/20 Test #524: fsapt-d .......................... Passed 487.00 sec; Start 526: dftd4-energy; 20/20 Test #526: dftd4-energy ..................... Passed 128.98 sec. 100% tests passed, 0 tests failed out of 20. Label Time Summary:; addon = 178.52 sec*proc (2 tests); cart = 1182.47 sec*proc (6 tests); casscf = 12.07 sec*proc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2372776523:1155,Test,Test,1155,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2372776523,1,['Test'],['Test']
Testability,; Start 70: cc52; 39/404 Test #205: frac-traverse .................... Passed 107.50 sec; Start 44: cc29; 40/404 Test #168: dft1 ............................. Passed 97.79 sec; Start 28: cc13d; 41/404 Test #325: scf-bz2 .......................... Passed 118.21 sec; Start 31: cc16; 42/404 Test #70: cc52 ............................. Passed 50.53 sec; Start 161: dft-grad-lr2; 43/404 Test #44: cc29 ............................. Passed 51.97 sec; Start 58: cc41; 44/404 Test #28: cc13d ............................ Passed 54.31 sec; Start 227: mp2-def2; 45/404 Test #318: sapt4 ............................ Passed 173.98 sec; Start 60: cc43; 46/404 Test #113: dcft7 ............................ Passed 236.97 sec; Start 47: cc31; 47/404 Test #31: cc16 ............................. Passed 50.21 sec; Start 91: cepa-module; 48/404 Test #58: cc41 ............................. Passed 43.96 sec; Start 279: opt14; 49/404 Test #25: cc13a ............................ Passed 312.39 sec; Start 280: opt-irc-1; 50/404 Test #60: cc43 ............................. Passed 36.52 sec; Start 104: dcft-grad2; 51/404 Test #91: cepa-module ...................... Passed 33.73 sec; Start 97: cisd-opt-fd; 52/404 Test #161: dft-grad-lr2 ..................... Passed 85.03 sec; Start 230: mp2-module; 53/404 Test #47: cc31 ............................. Passed 46.45 sec; Start 74: cc5a; 54/404 Test #18: cbs-xtpl-func .................... Passed 791.53 sec; Start 75: cc6; 55/404 Test #104: dcft-grad2 ....................... Passed 19.55 sec; Start 61: cc44; 56/404 Test #74: cc5a ............................. Passed 25.15 sec; Start 115: dcft9; 57/404 Test #280: opt-irc-1 ........................ Passed 47.52 sec; Start 260: omp3-4; 58/404 Test #97: cisd-opt-fd ...................... Passed 42.85 sec; Start 144: dfomp2-grad2; 59/404 Test #227: mp2-def2 ......................... Passed 90.23 sec; Start 261: omp3-5; 60/404 Test #230: mp2-module ....................... Passed 40.59 sec; Start 259: omp3-3; 61/40,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:4781,Test,Test,4781,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['Test'],['Test']
Testability,; Start 73: cc55; 218/411 Test #30: cc15 ............................. Passed 38.58 sec; Start 179: fsapt2; 219/411 Test #179: fsapt2 ........................... Passed 5.20 sec; Start 82: cc9a; 220/411 Test #341: soscf-ref ........................ Passed 9.34 sec; Start 10: castup3; 221/411 Test #37: cc22 ............................. Passed 22.33 sec; Start 77: cc8; 222/411 Test #10: castup3 .......................... Passed 20.61 sec; Start 80: cc8c; 223/411 Test #107: dcft1 ............................ Passed 58.98 sec; Start 171: dft2; 224/411 Test #171: dft2 ............................. Passed 6.62 sec; Start 266: opt1-fd; 225/411 Test #147: dfomp3-2 ......................... Passed 64.94 sec; Start 23: cc12; 226/411 Test #266: opt1-fd .......................... Passed 34.40 sec; Start 140: dfomp2-2; 227/411 Test #360: x2c1 ............................. Passed 82.77 sec; Start 313: rasscf-sp; 228/411 Test #73: cc55 ............................. Passed 93.94 sec; Start 21: cc10; 229/411 Test #23: cc12 ............................. Passed 47.84 sec; Start 247: omp2-2; 230/411 Test #81: cc9 .............................. Passed 116.49 sec; Start 93: cisd-h2o+-0; 231/411 Test #82: cc9a ............................. Passed 113.55 sec; Start 79: cc8b; 232/411 Test #77: cc8 .............................. Passed 106.26 sec; Start 254: omp2p5-2; 233/411 Test #80: cc8c ............................. Passed 94.57 sec; Start 117: dfcasscf-sa-sp; 234/411 Test #93: cisd-h2o+-0 ...................... Passed 5.15 sec; Start 339: scf-property; 235/411 Test #313: rasscf-sp ........................ Passed 40.25 sec; Start 99: cisd-sp-2; 236/411 Test #247: omp2-2 ........................... Passed 30.55 sec; Start 9: castup2; 237/411 Test #117: dfcasscf-sa-sp ................... Passed 4.12 sec; Start 54: cc38; 238/411 Test #140: dfomp2-2 ......................... Passed 50.51 sec; Start 187: fci-h2o-fzcv; 239/411 Test #339: scf-property ..................... Passed 4.60 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:21416,Test,Test,21416,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['Test'],['Test']
Testability,; Start 78: cc8; 111/412 Test #238: nbody-he-cluster ................. Passed 40.33 sec; Start 101: ci-property; 112/412 Test #298: pubchem1 ......................... Passed 66.20 sec; Start 274: opt7; 113/412 Test #78: cc8 .............................. Passed 35.23 sec; Start 73: cc54; 114/412 Test #12: cbs-parser ....................... Passed 44.35 sec; Start 152: dfomp2p5-2; 115/412 Test #60: cc42 ............................. Passed 48.37 sec; Start 55: cc38; 116/412 Test #66: cc48 ............................. Passed 48.97 sec; Start 85: cdomp2-2; 117/412 Test #73: cc54 ............................. Passed 9.22 sec; Start 82: cc9; 118/412 Test #274: opt7 ............................. Passed 40.43 sec; Start 277: opt11; 119/412 Test #85: cdomp2-2 ......................... Passed 27.02 sec; Start 74: cc55; 120/412 Test #55: cc38 ............................. Passed 28.06 sec; Start 64: cc46; 121/412 Test #152: dfomp2p5-2 ....................... Passed 30.42 sec; Start 143: dfomp2-4; 122/412 Test #82: cc9 .............................. Passed 28.87 sec; Start 68: cc4a; 123/412 Test #101: ci-property ...................... Passed 53.75 sec; Start 171: dft1-alt; 124/412 Test #143: dfomp2-4 ......................... Passed 27.80 sec; Start 246: ocepa3; 125/412 Test #68: cc4a ............................. Passed 29.15 sec; Start 163: dft-grad-meta; 126/412 Test #74: cc55 ............................. Passed 32.31 sec; Start 72: cc53; 127/412 Test #64: cc46 ............................. Passed 32.31 sec; Start 56: cc39; 128/412 Test #277: opt11 ............................ Passed 48.80 sec; Start 201: fnocc2; 129/412 Test #246: ocepa3 ........................... Passed 23.70 sec; Start 80: cc8b; 130/412 Test #72: cc53 ............................. Passed 30.00 sec; Start 2: adc2; 131/412 Test #171: dft1-alt ......................... Passed 53.86 sec; Start 349: sapt-compare; 132/412 Test #56: cc39 ............................. Passed 31.18 sec; Start 338: scf6; 133/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:11378,Test,Test,11378,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['Test'],['Test']
Testability,; Start 81: cc9; 86/411 Test #318: sapt4 ............................ Passed 1961.41 sec; Start 82: cc9a; 87/411 Test #78: cc8a ............................. Passed 69.13 sec; Start 83: cdomp2-1; 88/411 Test #70: cc52 ............................. Passed 181.99 sec; Start 84: cdomp2-2; 89/411 Test #83: cdomp2-1 ......................... Passed 10.83 sec; Start 85: cepa0-grad1; 90/411 Test #85: cepa0-grad1 ...................... Passed 9.88 sec; Start 86: cepa0-grad2; 91/411 Test #86: cepa0-grad2 ...................... Passed 10.46 sec; Start 87: cepa1; 92/411 Test #79: cc8b ............................. Passed 65.56 sec; Start 88: cepa2; 93/411 Test #87: cepa1 ............................ Passed 13.69 sec; Start 89: cepa3; 94/411 Test #80: cc8c ............................. Passed 64.93 sec; Start 90: cepa1; 95/411 Test #88: cepa2 ............................ Passed 21.59 sec; Start 91: cepa-module; 96/411 Test #84: cdomp2-2 ......................... Passed 54.23 sec; Start 92: ci-multi; 97/411 Test #82: cc9a ............................. Passed 70.43 sec; Start 93: cisd-h2o+-0; 98/411 Test #81: cc9 .............................. Passed 73.93 sec; Start 94: cisd-h2o+-1; 99/411 Test #89: cepa3 ............................ Passed 27.08 sec; Start 95: cisd-h2o+-2; 100/411 Test #93: cisd-h2o+-0 ...................... Passed 5.41 sec; Start 96: cisd-h2o-clpse; 101/411 Test #94: cisd-h2o+-1 ...................... Passed 5.65 sec; Start 97: cisd-opt-fd; 102/411 Test #96: cisd-h2o-clpse ................... Passed 5.83 sec; Start 98: cisd-sp; 103/411 Test #95: cisd-h2o+-2 ...................... Passed 8.02 sec; Start 99: cisd-sp-2; 104/411 Test #90: cepa1 ............................ Passed 27.52 sec; Start 100: ci-property; 105/411 Test #99: cisd-sp-2 ........................ Passed 5.41 sec; Start 101: cubeprop; 106/411 Test #98: cisd-sp .......................... Passed 12.15 sec; Start 102: decontract; 107/411 Test #102: decontract ....................... Passed 1.53 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:8791,Test,Test,8791,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['Test'],['Test']
Testability,; Start 81: cc9; 86/411 Test #78: cc8a ............................. Passed 79.22 sec; Start 82: cc9a; 87/411 Test #75: cc6 .............................. Passed 98.86 sec; Start 83: cdomp2-1; 88/411 Test #79: cc8b ............................. Passed 64.89 sec; Start 84: cdomp2-2; 89/411 Test #83: cdomp2-1 ......................... Passed 21.89 sec; Start 85: cepa0-grad1; 90/411 Test #85: cepa0-grad1 ...................... Passed 12.14 sec; Start 86: cepa0-grad2; 91/411 Test #86: cepa0-grad2 ...................... Passed 19.71 sec; Start 87: cepa1; 92/411 Test #70: cc52 ............................. Passed 212.33 sec; Start 88: cepa2; 93/411 Test #87: cepa1 ............................ Passed 15.27 sec; Start 89: cepa3; 94/411 Test #80: cc8c ............................. Passed 92.20 sec; Start 90: cepa1; 95/411 Test #81: cc9 .............................. Passed 91.83 sec; Start 91: cepa-module; 96/411 Test #88: cepa2 ............................ Passed 21.82 sec; Start 92: ci-multi; 97/411 Test #84: cdomp2-2 ......................... Passed 84.98 sec; Start 93: cisd-h2o+-0; 98/411 Test #82: cc9a ............................. Passed 96.99 sec; Start 94: cisd-h2o+-1; 99/411 Test #89: cepa3 ............................ Passed 23.34 sec; Start 95: cisd-h2o+-2; 100/411 Test #93: cisd-h2o+-0 ...................... Passed 5.06 sec; Start 96: cisd-h2o-clpse; 101/411 Test #90: cepa1 ............................ Passed 19.21 sec; Start 97: cisd-opt-fd; 102/411 Test #96: cisd-h2o-clpse ................... Passed 1.95 sec; Start 98: cisd-sp; 103/411 Test #94: cisd-h2o+-1 ...................... Passed 4.64 sec; Start 99: cisd-sp-2; 104/411 Test #95: cisd-h2o+-2 ...................... Passed 4.42 sec; Start 100: ci-property; 105/411 Test #99: cisd-sp-2 ........................ Passed 8.45 sec; Start 101: cubeprop; 106/411 Test #98: cisd-sp .......................... Passed 13.42 sec; Start 102: decontract; 107/411 Test #102: decontract ....................... Passed 1.79 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:8800,Test,Test,8800,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['Test'],['Test']
Testability,; Start 82: cc9; 79/412 Test #43: cc27 ............................. Passed 558.90 sec; Start 83: cc9a; 80/412 Test #39: cc23 ............................. Passed 631.08 sec; Start 84: cdomp2-1; 81/412 Test #84: cdomp2-1 ......................... Passed 13.54 sec; Start 85: cdomp2-2; 82/412 Test #78: cc8 .............................. Passed 62.95 sec; Start 86: cepa0-grad1; 83/412 Test #86: cepa0-grad1 ...................... Passed 4.39 sec; Start 87: cepa0-grad2; 84/412 Test #76: cc6 .............................. Passed 84.83 sec; Start 88: cepa1; 85/412 Test #80: cc8b ............................. Passed 60.97 sec; Start 89: cepa2; 86/412 Test #87: cepa0-grad2 ...................... Passed 15.84 sec; Start 90: cepa3; 87/412 Test #75: cc5a ............................. Passed 108.07 sec; Start 91: cepa1; 88/412 Test #82: cc9 .............................. Passed 64.37 sec; Start 92: cepa-module; 89/412 Test #79: cc8a ............................. Passed 86.04 sec; Start 93: ci-multi; 90/412 Test #88: cepa1 ............................ Passed 14.93 sec; Start 94: cisd-h2o+-0; 91/412 Test #41: cc25 ............................. Passed 643.73 sec; Start 95: cisd-h2o+-1; 92/412 Test #89: cepa2 ............................ Passed 15.04 sec; Start 96: cisd-h2o+-2; 93/412 Test #94: cisd-h2o+-0 ...................... Passed 5.25 sec; Start 97: cisd-h2o-clpse; 94/412 Test #81: cc8c ............................. Passed 75.87 sec; Start 98: cisd-opt-fd; 95/412 Test #97: cisd-h2o-clpse ................... Passed 2.30 sec; Start 99: cisd-sp; 96/412 Test #95: cisd-h2o+-1 ...................... Passed 5.29 sec; Start 100: cisd-sp-2; 97/412 Test #85: cdomp2-2 ......................... Passed 44.64 sec; Start 101: ci-property; 98/412 Test #96: cisd-h2o+-2 ...................... Passed 6.02 sec; Start 102: cubeprop; 99/412 Test #90: cepa3 ............................ Passed 15.90 sec; Start 103: decontract; 100/412 Test #103: decontract ....................... Passed 1.91 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:8319,Test,Test,8319,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['Test'],['Test']
Testability,; Start 82: cc9; 96/413 Test #115: dcft7 ............................ Passed 275.28 sec; Start 64: cc46; 97/413 Test #149: dfomp3-2 ......................... Passed 31.79 sec; Start 83: cc9a; 98/413 Test #26: cc13a ............................ Passed 281.93 sec; Start 80: cc8b; 99/413 Test #321: sapt5 ............................ Passed 73.11 sec; Start 142: dfomp2-2; 100/413 Test #66: cc48 ............................. Passed 37.16 sec; Start 169: dft-b3lyp; 101/413 Test #56: cc39 ............................. Passed 27.75 sec; Start 35: cc19; 102/413 Test #183: fsapt-allterms ................... Passed 579.67 sec; Start 65: cc47; 103/413 Test #258: omp2p5-grad2 ..................... Passed 37.60 sec; Start 79: cc8a; 104/413 Test #83: cc9a ............................. Passed 34.88 sec; Start 81: cc8c; 105/413 Test #64: cc46 ............................. Passed 35.09 sec; Start 144: dfomp2-4; 106/413 Test #301: pywrap-alias ..................... Passed 47.45 sec; Start 128: dfccsd-t-grad1; 107/413 Test #82: cc9 .............................. Passed 42.02 sec; Start 202: fnocc2; 108/413 Test #80: cc8b ............................. Passed 37.28 sec; Start 68: cc4a; 109/413 Test #142: dfomp2-2 ......................... Passed 36.53 sec; Start 391: python-pubchem; 110/413 Test #79: cc8a ............................. Passed 30.60 sec; Start 67: cc49; 111/413 Test #65: cc47 ............................. Passed 31.53 sec; Start 34: cc18; 112/413 Test #35: cc19 ............................. Passed 37.58 sec; Start 69: cc50; 113/413 Test #18: cbs-xtpl-func .................... Passed 676.13 sec; Start 22: cc10; 114/413 Test #206: frac-ip-fitting .................. Passed 73.71 sec; Start 394: python-cc54; 115/413 Test #128: dfccsd-t-grad1 ................... Passed 23.29 sec; Start 275: opt7; 116/413 Test #144: dfomp2-4 ......................... Passed 26.77 sec; Start 150: dfomp3-grad1; 117/413 Test #81: cc8c ............................. Passed 27.87 sec; Start 299: pubch,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:10167,Test,Test,10167,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['Test'],['Test']
Testability,; Start 98: cisd-sp; Start 119: dfcasscf-sp; Start 394: python-vibanalysis; Start 45: cc3; Start 162: dft-grad-lr3; Start 227: mp2-def2; Start 178: fsapt1; Start 103: dcft-grad1; 1/411 Test #119: dfcasscf-sp ...................... Passed 4.33 sec; Start 300: pywrap-all; 2/411 Test #98: cisd-sp .......................... Passed 10.64 sec; Start 304: pywrap-checkrun-rhf; 3/411 Test #45: cc3 .............................. Passed 367.14 sec; Start 39: cc24; 4/411 Test #300: pywrap-all ....................... Passed 381.81 sec; Start 306: pywrap-checkrun-uhf; 5/411 Test #304: pywrap-checkrun-rhf .............. Passed 390.00 sec; Start 182: isapt1; 6/411 Test #227: mp2-def2 ......................... Passed 446.06 sec; Start 35: cc2; 7/411 Test #162: dft-grad-lr3 ..................... Passed 473.06 sec; Start 41: cc26; 8/411 Test #103: dcft-grad1 ....................... Passed 617.53 sec; Start 110: dcft4; 9/411 Test #39: cc24 ............................. Passed 338.53 sec; Start 40: cc25; 10/411 Test #182: isapt1 ........................... Passed 433.14 sec; Start 305: pywrap-checkrun-rohf; 11/411 Test #41: cc26 ............................. Passed 423.76 sec; Start 38: cc23; 12/411 Test #35: cc2 .............................. Passed 450.90 sec; Start 36: cc21; 13/411 Test #306: pywrap-checkrun-uhf .............. Passed 571.32 sec; Start 42: cc27; 14/411 Test #394: python-vibanalysis ............... Passed 966.42 sec; Start 76: cc7; 15/411 Test #40: cc25 ............................. Passed 480.63 sec; Start 18: cbs-xtpl-func; 16/411 Test #36: cc21 ............................. Passed 484.30 sec; Start 181: fsapt-allterms; 17/411 Test #38: cc23 ............................. Passed 495.58 sec; Start 193: fd-freq-energy-large; 18/411 Test #42: cc27 ............................. Passed 441.98 sec; Start 195: fd-freq-gradient-large; 19/411 Test #76: cc7 .............................. Passed 452.44 sec; Start 278: opt13; 20/411 Test #305: pywrap-checkrun-rohf ............. P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:1131,Test,Test,1131,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['Test'],['Test']
Testability,"; Start 99: ci-property; 53/401 Test #70: cc53 ............................. Passed 19.97 sec; Start 23: cc12; 54/401 Test #11: cbs-delta-energy ................. Passed 127.44 sec; Start 37: cc22; 55/401 Test #54: cc38 ............................. Passed 18.35 sec; Start 65: cc49; 56/401 Test #78: cc8b ............................. Passed 23.61 sec; Start 30: cc15; 57/401 Test #332: scf5 ............................. Passed 32.95 sec; Start 21: cc10; 58/401 Test #77: cc8a ............................. Passed 30.77 sec; Start 16: cbs-xtpl-gradient; 59/401 Test #23: cc12 ............................. Passed 20.30 sec; Start 295: pywrap-alias; 60/401 Test #37: cc22 ............................. Passed 20.74 sec; Start 22: cc11; 61/401 Test #79: cc8c ............................. Passed 26.19 sec; Start 165: dft-vv10; 62/401 Test #99: ci-property ...................... Passed 24.29 sec; Start 71: cc54; 63/401 Test #43: cc28 ............................. Passed 46.96 sec; Start 26: cc13b; 64/401 Test #65: cc49 ............................. Passed 35.49 sec; Start 128: dfmp2-1; 65/401 Test #21: cc10 ............................. Passed 24.70 sec; Start 20: cc1; 66/401 Test #165: dft-vv10 ......................... Passed 17.48 sec; Start 62: cc45; 67/401 Test #288: psimrcc-fd-freq2 ................. Passed 40.23 sec; Start 56: cc4; 68/401 Test #16: cbs-xtpl-gradient ................ Passed 23.44 sec; Start 342: sapt-dft1; 69/401 Test #71: cc54 ............................. Passed 19.27 sec; Start 361: dft-smoke; 70/401 Test #22: cc11 ............................. Passed 22.05 sec; Start 203: gibbs; 71/401 Test #128: dfmp2-1 .......................... Passed 12.65 sec; Start 376: cc-module,; 72/401 Test #62: cc45 ............................. Passed 10.63 sec; Start 53: cc37; 73/401 Test #30: cc15 ............................. Passed 44.42 sec; Start 238: ocepa-grad2; 74/401 Test #361: dft-smoke ........................ Passed 12.20 sec; Start 3: casscf-fzc-sp; 75/401 Tes",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:6046,Test,Test,6046,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['Test'],['Test']
Testability,; cart = 8685.75 sec*proc (123 tests); cas = 42.49 sec*proc (1 test); casscf = 39.18 sec*proc (11 tests); cbs = 636.82 sec*proc (10 tests); cc = 1337.69 sec*proc (65 tests); cdomp2 = 6.18 sec*proc (2 tests); cepa = 34.84 sec*proc (7 tests); ci = 81.27 sec*proc (8 tests); cisd = 132.02 sec*proc (7 tests); cookbook = 33.29 sec*proc (1 test); cubeprop = 17.72 sec*proc (2 tests); dcft = 859.31 sec*proc (13 tests); df = 444.10 sec*proc (38 tests); dfccd = 1.41 sec*proc (1 test); dfccd-grad = 2.48 sec*proc (1 test); dfccdl = 1.38 sec*proc (1 test); dfccsd = 1.91 sec*proc (1 test); dfccsd-grad = 5.09 sec*proc (1 test); dfccsd-t-grad = 4.20 sec*proc (1 test); dfccsdat = 3.26 sec*proc (1 test); dfccsdl = 1.60 sec*proc (1 test); dfccsdt = 2.15 sec*proc (1 test); dfep2 = 4.83 sec*proc (2 tests); dfmp2 = 103.27 sec*proc (11 tests); dfomp2 = 91.94 sec*proc (7 tests); dfomp2.5 = 23.91 sec*proc (4 tests); dfomp3 = 23.93 sec*proc (4 tests); dfscf = 139.95 sec*proc (1 test); dft = 1225.97 sec*proc (27 tests); docs = 1.17 sec*proc (2 tests); ecp = 31.89 sec*proc (2 tests); fci = 9.85 sec*proc (2 tests); fcidump = 1.78 sec*proc (1 test); findif = 712.53 sec*proc (5 tests); fnocc = 28.21 sec*proc (4 tests); freq = 830.33 sec*proc (6 tests); gradient = 172.09 sec*proc (16 tests); json = 11.48 sec*proc (8 tests); longtests = 3140.76 sec*proc (5 tests); mcscf = 2.84 sec*proc (3 tests); minitests = 50.01 sec*proc (4 tests); mints = 74.16 sec*proc (14 tests); misc = 353.91 sec*proc (16 tests); mp2 = 441.75 sec*proc (13 tests); nbody = 37.60 sec*proc (2 tests); numpy = 0.76 sec*proc (1 test); ocepa = 92.44 sec*proc (6 tests); omp = 111.60 sec*proc (18 tests); opt = 1052.61 sec*proc (21 tests); plug = 7.12 sec*proc (7 tests); prop = 2.20 sec*proc (1 test); properties = 108.12 sec*proc (10 tests); psi = 15106.45 sec*proc (410 tests); psi4numpy = 11.50 sec*proc (6 tests); psimrcc = 90.69 sec*proc (8 tests); python = 873.74 sec*proc (10 tests); pywrap = 341.03 sec*proc (12 tests); quicktests = 10,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:39358,test,tests,39358,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,1,['test'],['tests']
Testability,; cas = 45.85 sec*proc (1 test); casscf = 46.69 sec*proc (11 tests); cbs = 607.71 sec*proc (10 tests); cc = 2524.71 sec*proc (65 tests); cdomp2 = 12.61 sec*proc (2 tests); cepa = 34.90 sec*proc (7 tests); ci = 86.89 sec*proc (8 tests); cisd = 126.11 sec*proc (7 tests); cookbook = 21.11 sec*proc (1 test); cubeprop = 19.47 sec*proc (2 tests); dcft = 1171.02 sec*proc (13 tests); df = 616.05 sec*proc (38 tests); dfccd = 1.95 sec*proc (1 test); dfccd-grad = 2.71 sec*proc (1 test); dfccdl = 1.29 sec*proc (1 test); dfccsd = 2.55 sec*proc (1 test); dfccsd-grad = 11.89 sec*proc (1 test); dfccsd-t-grad = 8.25 sec*proc (1 test); dfccsdat = 2.98 sec*proc (1 test); dfccsdl = 2.18 sec*proc (1 test); dfccsdt = 2.02 sec*proc (1 test); dfep2 = 5.39 sec*proc (2 tests); dfmp2 = 110.02 sec*proc (11 tests); dfomp2 = 215.16 sec*proc (7 tests); dfomp2.5 = 38.76 sec*proc (4 tests); dfomp3 = 28.71 sec*proc (4 tests); dfscf = 142.35 sec*proc (1 test); dft = 1320.66 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 34.24 sec*proc (2 tests); fci = 10.36 sec*proc (2 tests); fcidump = 2.17 sec*proc (1 test); findif = 781.94 sec*proc (5 tests); fnocc = 32.06 sec*proc (4 tests); freq = 752.88 sec*proc (6 tests); gradient = 320.64 sec*proc (16 tests); json = 11.21 sec*proc (8 tests); longtests = 3454.42 sec*proc (5 tests); mcscf = 2.64 sec*proc (3 tests); minitests = 55.53 sec*proc (4 tests); mints = 79.80 sec*proc (14 tests); misc = 406.89 sec*proc (16 tests); mp2 = 509.73 sec*proc (13 tests); nbody = 37.02 sec*proc (2 tests); numpy = 0.67 sec*proc (1 test); ocepa = 127.43 sec*proc (6 tests); omp = 159.77 sec*proc (18 tests); opt = 1222.19 sec*proc (21 tests); plug = 6.43 sec*proc (7 tests); prop = 2.00 sec*proc (1 test); properties = 113.43 sec*proc (10 tests); psi = 18261.00 sec*proc (410 tests); psi4numpy = 9.90 sec*proc (6 tests); psimrcc = 98.46 sec*proc (8 tests); python = 791.98 sec*proc (10 tests); pywrap = 929.97 sec*proc (12 tests); quicktests = 1252.38 sec*proc (140 tests); ras,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:39450,test,tests,39450,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['test'],['tests']
Testability,; cc = 3510.91 sec*proc (65 tests); cdomp2 = 32.39 sec*proc (2 tests); cepa = 88.72 sec*proc (7 tests); ci = 91.10 sec*proc (8 tests); cisd = 152.27 sec*proc (7 tests); cookbook = 60.55 sec*proc (1 test); cubeprop = 18.54 sec*proc (2 tests); dcft = 1565.92 sec*proc (13 tests); df = 802.06 sec*proc (38 tests); dfccd = 1.64 sec*proc (1 test); dfccd-grad = 3.54 sec*proc (1 test); dfccdl = 2.21 sec*proc (1 test); dfccsd = 1.71 sec*proc (1 test); dfccsd-grad = 22.78 sec*proc (1 test); dfccsd-t-grad = 21.28 sec*proc (1 test); dfccsdat = 3.87 sec*proc (1 test); dfccsdl = 1.60 sec*proc (1 test); dfccsdt = 2.22 sec*proc (1 test); dfep2 = 4.59 sec*proc (2 tests); dfmp2 = 116.41 sec*proc (11 tests); dfomp2 = 225.13 sec*proc (7 tests); dfomp2.5 = 98.09 sec*proc (4 tests); dfomp3 = 94.63 sec*proc (4 tests); dfscf = 143.19 sec*proc (1 test); dft = 1426.34 sec*proc (27 tests); docs = 1.13 sec*proc (2 tests); ecp = 37.80 sec*proc (2 tests); fci = 10.98 sec*proc (2 tests); fcidump = 1.70 sec*proc (1 test); findif = 854.97 sec*proc (5 tests); fnocc = 60.27 sec*proc (4 tests); freq = 823.32 sec*proc (6 tests); gradient = 429.01 sec*proc (16 tests); json = 12.24 sec*proc (8 tests); longtests = 3709.37 sec*proc (5 tests); mcscf = 2.67 sec*proc (3 tests); minitests = 56.99 sec*proc (4 tests); mints = 84.82 sec*proc (14 tests); misc = 443.60 sec*proc (16 tests); mp2 = 533.62 sec*proc (13 tests); nbody = 51.37 sec*proc (2 tests); numpy = 0.65 sec*proc (1 test); ocepa = 155.69 sec*proc (6 tests); omp = 369.10 sec*proc (18 tests); opt = 1287.53 sec*proc (21 tests); plug = 7.76 sec*proc (7 tests); prop = 2.03 sec*proc (1 test); properties = 125.04 sec*proc (10 tests); psi = 21541.56 sec*proc (410 tests); psi4numpy = 9.73 sec*proc (6 tests); psimrcc = 111.61 sec*proc (8 tests); python = 854.21 sec*proc (10 tests); pywrap = 1083.92 sec*proc (12 tests); quicktests = 1943.21 sec*proc (140 tests); rasci = 39.98 sec*proc (3 tests); sapt = 6393.47 sec*proc (21 tests); scf = 1758.03 sec*proc (52 tests,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:39587,test,test,39587,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['test'],['test']
Testability,; cdomp2 = 12.61 sec*proc (2 tests); cepa = 34.90 sec*proc (7 tests); ci = 86.89 sec*proc (8 tests); cisd = 126.11 sec*proc (7 tests); cookbook = 21.11 sec*proc (1 test); cubeprop = 19.47 sec*proc (2 tests); dcft = 1171.02 sec*proc (13 tests); df = 616.05 sec*proc (38 tests); dfccd = 1.95 sec*proc (1 test); dfccd-grad = 2.71 sec*proc (1 test); dfccdl = 1.29 sec*proc (1 test); dfccsd = 2.55 sec*proc (1 test); dfccsd-grad = 11.89 sec*proc (1 test); dfccsd-t-grad = 8.25 sec*proc (1 test); dfccsdat = 2.98 sec*proc (1 test); dfccsdl = 2.18 sec*proc (1 test); dfccsdt = 2.02 sec*proc (1 test); dfep2 = 5.39 sec*proc (2 tests); dfmp2 = 110.02 sec*proc (11 tests); dfomp2 = 215.16 sec*proc (7 tests); dfomp2.5 = 38.76 sec*proc (4 tests); dfomp3 = 28.71 sec*proc (4 tests); dfscf = 142.35 sec*proc (1 test); dft = 1320.66 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 34.24 sec*proc (2 tests); fci = 10.36 sec*proc (2 tests); fcidump = 2.17 sec*proc (1 test); findif = 781.94 sec*proc (5 tests); fnocc = 32.06 sec*proc (4 tests); freq = 752.88 sec*proc (6 tests); gradient = 320.64 sec*proc (16 tests); json = 11.21 sec*proc (8 tests); longtests = 3454.42 sec*proc (5 tests); mcscf = 2.64 sec*proc (3 tests); minitests = 55.53 sec*proc (4 tests); mints = 79.80 sec*proc (14 tests); misc = 406.89 sec*proc (16 tests); mp2 = 509.73 sec*proc (13 tests); nbody = 37.02 sec*proc (2 tests); numpy = 0.67 sec*proc (1 test); ocepa = 127.43 sec*proc (6 tests); omp = 159.77 sec*proc (18 tests); opt = 1222.19 sec*proc (21 tests); plug = 6.43 sec*proc (7 tests); prop = 2.00 sec*proc (1 test); properties = 113.43 sec*proc (10 tests); psi = 18261.00 sec*proc (410 tests); psi4numpy = 9.90 sec*proc (6 tests); psimrcc = 98.46 sec*proc (8 tests); python = 791.98 sec*proc (10 tests); pywrap = 929.97 sec*proc (12 tests); quicktests = 1252.38 sec*proc (140 tests); rasci = 37.54 sec*proc (3 tests); sapt = 6019.06 sec*proc (21 tests); scf = 1609.21 sec*proc (52 tests); shorttests = 53.46 sec*proc (4 te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:39584,test,tests,39584,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['test'],['tests']
Testability,; cdomp2 = 26.61 sec*proc (2 tests); cepa = 116.08 sec*proc (7 tests); ci = 68.29 sec*proc (8 tests); cisd = 82.46 sec*proc (7 tests); cookbook = 107.12 sec*proc (1 test); cubeprop = 17.29 sec*proc (2 tests); dcft = 1551.98 sec*proc (13 tests); df = 720.18 sec*proc (38 tests); dfccd = 2.40 sec*proc (1 test); dfccd-grad = 6.11 sec*proc (1 test); dfccdl = 2.42 sec*proc (1 test); dfccsd = 3.17 sec*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 tests); opt = 769.80 sec*proc (21 tests); prop = 1.60 sec*proc (1 test); properties = 84.77 sec*proc (10 tests); psi = 20501.24 sec*proc (400 tests); psi4numpy = 13.93 sec*proc (6 tests); psimrcc = 70.67 sec*proc (8 tests); python = 880.26 sec*proc (10 tests); pywrap = 1339.53 sec*proc (12 tests); quicktests = 2290.03 sec*proc (137 tests); rasci = 37.96 sec*proc (3 tests); sapt = 1420.73 sec*proc (20 tests); scf = 5859.53 sec*proc (51 tests); shorttests = 39.46 sec*proc (4 tests); smoketests = 89.98 sec*proc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:38655,test,tests,38655,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['test'],['tests']
Testability,; cepa = 88.72 sec*proc (7 tests); ci = 91.10 sec*proc (8 tests); cisd = 152.27 sec*proc (7 tests); cookbook = 60.55 sec*proc (1 test); cubeprop = 18.54 sec*proc (2 tests); dcft = 1565.92 sec*proc (13 tests); df = 802.06 sec*proc (38 tests); dfccd = 1.64 sec*proc (1 test); dfccd-grad = 3.54 sec*proc (1 test); dfccdl = 2.21 sec*proc (1 test); dfccsd = 1.71 sec*proc (1 test); dfccsd-grad = 22.78 sec*proc (1 test); dfccsd-t-grad = 21.28 sec*proc (1 test); dfccsdat = 3.87 sec*proc (1 test); dfccsdl = 1.60 sec*proc (1 test); dfccsdt = 2.22 sec*proc (1 test); dfep2 = 4.59 sec*proc (2 tests); dfmp2 = 116.41 sec*proc (11 tests); dfomp2 = 225.13 sec*proc (7 tests); dfomp2.5 = 98.09 sec*proc (4 tests); dfomp3 = 94.63 sec*proc (4 tests); dfscf = 143.19 sec*proc (1 test); dft = 1426.34 sec*proc (27 tests); docs = 1.13 sec*proc (2 tests); ecp = 37.80 sec*proc (2 tests); fci = 10.98 sec*proc (2 tests); fcidump = 1.70 sec*proc (1 test); findif = 854.97 sec*proc (5 tests); fnocc = 60.27 sec*proc (4 tests); freq = 823.32 sec*proc (6 tests); gradient = 429.01 sec*proc (16 tests); json = 12.24 sec*proc (8 tests); longtests = 3709.37 sec*proc (5 tests); mcscf = 2.67 sec*proc (3 tests); minitests = 56.99 sec*proc (4 tests); mints = 84.82 sec*proc (14 tests); misc = 443.60 sec*proc (16 tests); mp2 = 533.62 sec*proc (13 tests); nbody = 51.37 sec*proc (2 tests); numpy = 0.65 sec*proc (1 test); ocepa = 155.69 sec*proc (6 tests); omp = 369.10 sec*proc (18 tests); opt = 1287.53 sec*proc (21 tests); plug = 7.76 sec*proc (7 tests); prop = 2.03 sec*proc (1 test); properties = 125.04 sec*proc (10 tests); psi = 21541.56 sec*proc (410 tests); psi4numpy = 9.73 sec*proc (6 tests); psimrcc = 111.61 sec*proc (8 tests); python = 854.21 sec*proc (10 tests); pywrap = 1083.92 sec*proc (12 tests); quicktests = 1943.21 sec*proc (140 tests); rasci = 39.98 sec*proc (3 tests); sapt = 6393.47 sec*proc (21 tests); scf = 1758.03 sec*proc (52 tests); shorttests = 55.68 sec*proc (4 tests); smoketests = 130.19 sec*pr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:39656,test,tests,39656,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['test'],['tests']
Testability,; dcft = 3319.98 sec*proc (13 tests); df = 1994.11 sec*proc (38 tests); dfccd = 1.33 sec*proc (1 test); dfccd-grad = 3.71 sec*proc (1 test); dfccdl = 4.09 sec*proc (1 test); dfccsd = 3.47 sec*proc (1 test); dfccsd-grad = 39.72 sec*proc (1 test); dfccsd-t-grad = 37.57 sec*proc (1 test); dfccsdat = 4.01 sec*proc (1 test); dfccsdl = 2.51 sec*proc (1 test); dfccsdt = 2.35 sec*proc (1 test); dfep2 = 4.67 sec*proc (2 tests); dfmp2 = 118.85 sec*proc (11 tests); dfomp2 = 1035.30 sec*proc (7 tests); dfomp2.5 = 224.33 sec*proc (4 tests); dfomp3 = 258.95 sec*proc (4 tests); dfscf = 133.50 sec*proc (1 test); dft = 1440.06 sec*proc (27 tests); docs = 1.12 sec*proc (2 tests); ecp = 39.28 sec*proc (2 tests); fci = 10.77 sec*proc (2 tests); fcidump = 1.95 sec*proc (1 test); findif = 901.99 sec*proc (5 tests); fnocc = 93.14 sec*proc (4 tests); freq = 1004.97 sec*proc (6 tests); gradient = 1655.45 sec*proc (16 tests); json = 11.29 sec*proc (8 tests); longtests = 3627.91 sec*proc (5 tests); mcscf = 2.67 sec*proc (3 tests); minitests = 60.89 sec*proc (4 tests); mints = 78.81 sec*proc (14 tests); misc = 458.95 sec*proc (16 tests); mp2 = 601.94 sec*proc (13 tests); nbody = 78.53 sec*proc (2 tests); numpy = 0.62 sec*proc (1 test); ocepa = 722.49 sec*proc (6 tests); omp = 970.16 sec*proc (18 tests); opt = 1470.88 sec*proc (21 tests); plug = 7.59 sec*proc (7 tests); prop = 2.07 sec*proc (1 test); properties = 128.30 sec*proc (10 tests); psi = 36286.20 sec*proc (410 tests); psi4numpy = 12.26 sec*proc (6 tests); psimrcc = 124.49 sec*proc (8 tests); python = 1073.50 sec*proc (10 tests); pywrap = 2337.19 sec*proc (12 tests); quicktests = 3817.08 sec*proc (140 tests); rasci = 41.09 sec*proc (3 tests); sapt = 6148.48 sec*proc (21 tests); scf = 1763.84 sec*proc (52 tests); shorttests = 55.75 sec*proc (4 tests); smoketests = 156.63 sec*proc (11 tests); stability = 3.03 sec*proc (2 tests); tutorial = 388.48 sec*proc (6 tests); x2c = 40.80 sec*proc (3 tests). Total Test time (real) = 4652.23 sec; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:39883,test,tests,39883,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,28,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,; df = 781.81 sec*proc (38 tests); dfccd = 1.18 sec*proc (1 test); dfccd-grad = 1.98 sec*proc (1 test); dfccdl = 1.41 sec*proc (1 test); dfccsd = 2.54 sec*proc (1 test); dfccsd-grad = 7.22 sec*proc (1 test); dfccsd-t-grad = 10.40 sec*proc (1 test); dfccsdat = 3.19 sec*proc (1 test); dfccsdl = 3.30 sec*proc (1 test); dfccsdt = 2.46 sec*proc (1 test); dfep2 = 4.34 sec*proc (2 tests); dfmp2 = 62.44 sec*proc (11 tests); dfomp2 = 517.24 sec*proc (7 tests); dfomp2.5 = 42.99 sec*proc (4 tests); dfomp3 = 50.83 sec*proc (4 tests); dfscf = 31.62 sec*proc (1 test); dft = 738.08 sec*proc (27 tests); docs = 1.16 sec*proc (2 tests); ecp = 32.55 sec*proc (2 tests); fci = 5.67 sec*proc (2 tests); fcidump = 3.01 sec*proc (1 test); findif = 553.63 sec*proc (5 tests); fnocc = 28.55 sec*proc (4 tests); freq = 919.36 sec*proc (6 tests); gradient = 876.87 sec*proc (16 tests); json = 10.02 sec*proc (8 tests); longtests = 792.31 sec*proc (5 tests); mcscf = 2.83 sec*proc (3 tests); minitests = 27.46 sec*proc (3 tests); mints = 32.34 sec*proc (14 tests); misc = 234.73 sec*proc (16 tests); mp2 = 166.66 sec*proc (13 tests); nbody = 43.85 sec*proc (2 tests); numpy = 0.62 sec*proc (1 test); ocepa = 492.10 sec*proc (6 tests); omp = 280.23 sec*proc (18 tests); opt = 690.78 sec*proc (21 tests); prop = 1.27 sec*proc (1 test); properties = 67.96 sec*proc (10 tests); psi = 18047.47 sec*proc (403 tests); psi4numpy = 10.13 sec*proc (6 tests); psimrcc = 59.10 sec*proc (8 tests); python = 942.95 sec*proc (10 tests); pywrap = 2529.67 sec*proc (12 tests); quicktests = 1844.29 sec*proc (138 tests); rasci = 34.06 sec*proc (3 tests); sapt = 1326.10 sec*proc (21 tests); scf = 1008.60 sec*proc (52 tests); shorttests = 34.75 sec*proc (4 tests); smoketests = 48.57 sec*proc (11 tests); stability = 3.84 sec*proc (2 tests); tutorial = 98.89 sec*proc (6 tests); x2c = 9.44 sec*proc (3 tests). Total Test time (real) = 2258.21 sec. The following tests FAILED:; 	365 - cubeprop-esp (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:39068,test,tests,39068,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,27,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,; dfccd = 5.11 sec*proc (1 test); dfccsd = 7.31 sec*proc (1 test); dfccsd-grad = 14.46 sec*proc (1 test); dfccsd-t-grad = 13.06 sec*proc (1 test); dfccsdl = 7.10 sec*proc (1 test); dfep2 = 10.99 sec*proc (2 tests); dfmp2 = 198.00 sec*proc (6 tests); dfomp2 = 6.63 sec*proc (1 test); dfomp3 = 66.77 sec*proc (2 tests); dft = 110.67 sec*proc (5 tests); dftd3 = 50.87 sec*proc (1 test); dftd4 = 138.41 sec*proc (2 tests); direct-scf = 4.26 sec*proc (1 test); eom = 26.13 sec*proc (2 tests); extern = 145.89 sec*proc (6 tests); fcidump = 3.94 sec*proc (1 test); findif = 217.30 sec*proc (11 tests); fnocc = 214.81 sec*proc (4 tests); freq = 119.90 sec*proc (9 tests); fsapt = 680.95 sec*proc (7 tests); gradient = 7.40 sec*proc (2 tests); json = 6.72 sec*proc (2 tests); mcscf = 2.04 sec*proc (1 test); minitests = 10.99 sec*proc (2 tests); mints = 14.50 sec*proc (6 tests); misc = 48.60 sec*proc (8 tests); mp2 = 11.54 sec*proc (3 tests); nbody = 140.71 sec*proc (2 tests); noc1 = 1576.77 sec*proc (45 tests); numpy = 1.88 sec*proc (1 test); olccd = 11.77 sec*proc (2 tests); omp = 19.01 sec*proc (4 tests); opt = 18.56 sec*proc (3 tests); properties = 234.60 sec*proc (11 tests); psi = 7147.73 sec*proc (184 tests); psi4numpy = 11.43 sec*proc (4 tests); psimrcc = 19.16 sec*proc (5 tests); python = 164.19 sec*proc (10 tests); pywrap = 102.12 sec*proc (5 tests); quicktests = 7213.94 sec*proc (185 tests); sapt = 2255.37 sec*proc (14 tests); scf = 2018.25 sec*proc (36 tests); smoketests = 1345.56 sec*proc (16 tests); stability = 14.22 sec*proc (3 tests); tdscf = 352.79 sec*proc (2 tests); tutorial = 24.08 sec*proc (4 tests); uhf = 3.31 sec*proc (1 test); x2c = 24.82 sec*proc (4 tests). Total Test time (real) = 7214.27 sec. The following tests FAILED:; 192 - dft-vv10 (Failed); 197 - dft-dens-cut (Failed); 210 - fsapt-terms (Failed); 213 - fsapt-ext-abc (Failed); 214 - fsapt-ext-abc2 (Failed); 215 - fsapt-ext-abc-au (Failed); 452 - dft-smoke (Failed); 525 - fsaptd-terms (Failed); 527 - dftd4-r,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:18996,test,tests,18996,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,1,['test'],['tests']
Testability,"; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 1773 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 92 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 2330 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 2270 warnings; `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:698: 3 warnings; psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:699: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 1414 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py: 954 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py: 48 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py: 1302 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py: 1266 warnings; `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.; Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations. psi4conda\envs\psi4env\lib\site-packages\qcelemental\molparse\from_arrays.py:702: 3 warnings; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py: 707 warnings; psi4conda/envs/psi4env/lib/site-pa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:10068,test,tests,10068,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,"= 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	330 - sapt1 (Failed); 	357 - scf-property (Failed); 	372 - tu1-h2o-energy (Failed); 	424 - chemps2-scf-n2 (Failed); Errors while running CTest; ```; The casscf-sp error is; ```; 7/428 Test: casscf-sp; Command: ""/usr/bin/python3.12"" ""/builddir/build/BUILD/psi4-1.3.2/tests/runtest.py"" ""/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux; -build/testresults.log"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2"" ""false"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp/output.dat"" ""/builddir/build/BUILD/psi4-1.3.2/; redhat-linux-build/stage/bin/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/psi4"" ""/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/lib64/python3.12/site-pac; kages""; Directory: /builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/tests/casscf-sp; ""casscf-sp"" start time: Aug 14 00:32 UTC; Output:; ----------------------------------------------------------; Command ['/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/bin/psi4', '/builddir/build/BUILD/psi4-1.3.2/tests/casscf-sp/input.dat', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-bu; ild/tests/casscf-sp/output.dat', '-l', '/builddir/build/BUILD/psi4-1.3.2/redhat-linux-build/stage/share/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:2345,test,tests,2345,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,1,['test'],['tests']
Testability,= 100.79 sec*proc (8 tests); cisd = 153.89 sec*proc (7 tests); cookbook = 58.96 sec*proc (1 test); cubeprop = 23.43 sec*proc (3 tests); dcft = 3267.46 sec*proc (13 tests); df = 1398.11 sec*proc (38 tests); dfccd = 1.45 sec*proc (1 test); dfccd-grad = 4.92 sec*proc (1 test); dfccdl = 1.45 sec*proc (1 test); dfccsd = 5.83 sec*proc (1 test); dfccsd-grad = 12.88 sec*proc (1 test); dfccsd-t-grad = 23.29 sec*proc (1 test); dfccsdat = 6.62 sec*proc (1 test); dfccsdl = 4.23 sec*proc (1 test); dfccsdt = 3.54 sec*proc (1 test); dfep2 = 5.17 sec*proc (2 tests); dfmp2 = 147.71 sec*proc (11 tests); dfomp2 = 839.71 sec*proc (7 tests); dfomp2.5 = 75.15 sec*proc (4 tests); dfomp3 = 76.55 sec*proc (4 tests); dfscf = 140.11 sec*proc (1 test); dft = 1393.25 sec*proc (27 tests); docs = 1.19 sec*proc (2 tests); ecp = 56.86 sec*proc (2 tests); fci = 11.44 sec*proc (2 tests); fcidump = 3.20 sec*proc (1 test); findif = 882.37 sec*proc (5 tests); fnocc = 60.65 sec*proc (4 tests); freq = 907.54 sec*proc (6 tests); gradient = 1348.43 sec*proc (16 tests); json = 16.86 sec*proc (8 tests); longtests = 3472.72 sec*proc (5 tests); mcscf = 3.06 sec*proc (3 tests); minitests = 70.98 sec*proc (4 tests); mints = 87.46 sec*proc (14 tests); misc = 462.46 sec*proc (16 tests); mp2 = 512.51 sec*proc (13 tests); nbody = 53.58 sec*proc (2 tests); numpy = 0.80 sec*proc (1 test); ocepa = 556.75 sec*proc (6 tests); omp = 259.48 sec*proc (18 tests); opt = 1349.10 sec*proc (21 tests); plug = 7.90 sec*proc (7 tests); prop = 2.27 sec*proc (1 test); properties = 128.12 sec*proc (10 tests); psi = 31081.89 sec*proc (412 tests); psi4numpy = 12.12 sec*proc (6 tests); psimrcc = 107.35 sec*proc (8 tests); python = 971.20 sec*proc (10 tests); pywrap = 3304.42 sec*proc (12 tests); quicktests = 2370.82 sec*proc (140 tests); rasci = 42.06 sec*proc (3 tests); sapt = 5715.31 sec*proc (21 tests); scf = 1708.98 sec*proc (52 tests); shorttests = 56.03 sec*proc (4 tests); smoketests = 100.43 sec*proc (11 tests); stability = 3.44 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:39898,test,tests,39898,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['test'],['tests']
Testability,= 126.11 sec*proc (7 tests); cookbook = 21.11 sec*proc (1 test); cubeprop = 19.47 sec*proc (2 tests); dcft = 1171.02 sec*proc (13 tests); df = 616.05 sec*proc (38 tests); dfccd = 1.95 sec*proc (1 test); dfccd-grad = 2.71 sec*proc (1 test); dfccdl = 1.29 sec*proc (1 test); dfccsd = 2.55 sec*proc (1 test); dfccsd-grad = 11.89 sec*proc (1 test); dfccsd-t-grad = 8.25 sec*proc (1 test); dfccsdat = 2.98 sec*proc (1 test); dfccsdl = 2.18 sec*proc (1 test); dfccsdt = 2.02 sec*proc (1 test); dfep2 = 5.39 sec*proc (2 tests); dfmp2 = 110.02 sec*proc (11 tests); dfomp2 = 215.16 sec*proc (7 tests); dfomp2.5 = 38.76 sec*proc (4 tests); dfomp3 = 28.71 sec*proc (4 tests); dfscf = 142.35 sec*proc (1 test); dft = 1320.66 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 34.24 sec*proc (2 tests); fci = 10.36 sec*proc (2 tests); fcidump = 2.17 sec*proc (1 test); findif = 781.94 sec*proc (5 tests); fnocc = 32.06 sec*proc (4 tests); freq = 752.88 sec*proc (6 tests); gradient = 320.64 sec*proc (16 tests); json = 11.21 sec*proc (8 tests); longtests = 3454.42 sec*proc (5 tests); mcscf = 2.64 sec*proc (3 tests); minitests = 55.53 sec*proc (4 tests); mints = 79.80 sec*proc (14 tests); misc = 406.89 sec*proc (16 tests); mp2 = 509.73 sec*proc (13 tests); nbody = 37.02 sec*proc (2 tests); numpy = 0.67 sec*proc (1 test); ocepa = 127.43 sec*proc (6 tests); omp = 159.77 sec*proc (18 tests); opt = 1222.19 sec*proc (21 tests); plug = 6.43 sec*proc (7 tests); prop = 2.00 sec*proc (1 test); properties = 113.43 sec*proc (10 tests); psi = 18261.00 sec*proc (410 tests); psi4numpy = 9.90 sec*proc (6 tests); psimrcc = 98.46 sec*proc (8 tests); python = 791.98 sec*proc (10 tests); pywrap = 929.97 sec*proc (12 tests); quicktests = 1252.38 sec*proc (140 tests); rasci = 37.54 sec*proc (3 tests); sapt = 6019.06 sec*proc (21 tests); scf = 1609.21 sec*proc (52 tests); shorttests = 53.46 sec*proc (4 tests); smoketests = 87.44 sec*proc (11 tests); stability = 2.91 sec*proc (2 tests); tutorial = 61.81 sec*pr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:39691,test,tests,39691,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['test'],['tests']
Testability,= 1299.63 sec*proc (10 tests); cc = 4877.58 sec*proc (65 tests); cdomp2 = 87.04 sec*proc (2 tests); cepa = 237.74 sec*proc (7 tests); ci = 124.43 sec*proc (8 tests); cisd = 192.72 sec*proc (7 tests); cookbook = 74.81 sec*proc (1 test); cubeprop = 21.02 sec*proc (2 tests); dcft = 2168.02 sec*proc (13 tests); df = 1323.98 sec*proc (38 tests); dfccd = 1.99 sec*proc (1 test); dfccd-grad = 11.53 sec*proc (1 test); dfccdl = 2.32 sec*proc (1 test); dfccsd = 6.96 sec*proc (1 test); dfccsd-grad = 23.04 sec*proc (1 test); dfccsd-t-grad = 20.20 sec*proc (1 test); dfccsdat = 13.07 sec*proc (1 test); dfccsdl = 9.39 sec*proc (1 test); dfccsdt = 5.62 sec*proc (1 test); dfep2 = 5.95 sec*proc (2 tests); dfmp2 = 144.08 sec*proc (11 tests); dfomp2 = 610.26 sec*proc (7 tests); dfomp2.5 = 93.44 sec*proc (4 tests); dfomp3 = 106.67 sec*proc (4 tests); dfscf = 143.01 sec*proc (1 test); dft = 1409.77 sec*proc (27 tests); docs = 1.24 sec*proc (2 tests); ecp = 41.60 sec*proc (2 tests); fci = 13.45 sec*proc (2 tests); fcidump = 9.42 sec*proc (1 test); findif = 895.26 sec*proc (5 tests); fnocc = 124.54 sec*proc (4 tests); freq = 968.32 sec*proc (6 tests); gradient = 1118.69 sec*proc (16 tests); json = 18.01 sec*proc (8 tests); longtests = 3642.49 sec*proc (5 tests); mcscf = 5.05 sec*proc (3 tests); minitests = 64.06 sec*proc (4 tests); mints = 89.98 sec*proc (14 tests); misc = 563.82 sec*proc (16 tests); mp2 = 676.55 sec*proc (13 tests); nbody = 107.79 sec*proc (2 tests); numpy = 0.80 sec*proc (1 test); ocepa = 691.29 sec*proc (6 tests); omp = 863.37 sec*proc (18 tests); opt = 1517.73 sec*proc (21 tests); plug = 13.26 sec*proc (7 tests); prop = 2.48 sec*proc (1 test); properties = 168.25 sec*proc (10 tests); psi = 26492.85 sec*proc (410 tests); psi4numpy = 13.47 sec*proc (6 tests); psimrcc = 132.27 sec*proc (8 tests); python = 1005.18 sec*proc (10 tests); pywrap = 1188.04 sec*proc (12 tests); quicktests = 2506.57 sec*proc (140 tests); rasci = 42.11 sec*proc (3 tests); sapt = 6193.03 sec*proc (21,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:39614,test,tests,39614,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['test'],['tests']
Testability,= 1551.98 sec*proc (13 tests); df = 720.18 sec*proc (38 tests); dfccd = 2.40 sec*proc (1 test); dfccd-grad = 6.11 sec*proc (1 test); dfccdl = 2.42 sec*proc (1 test); dfccsd = 3.17 sec*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 tests); opt = 769.80 sec*proc (21 tests); prop = 1.60 sec*proc (1 test); properties = 84.77 sec*proc (10 tests); psi = 20501.24 sec*proc (400 tests); psi4numpy = 13.93 sec*proc (6 tests); psimrcc = 70.67 sec*proc (8 tests); python = 880.26 sec*proc (10 tests); pywrap = 1339.53 sec*proc (12 tests); quicktests = 2290.03 sec*proc (137 tests); rasci = 37.96 sec*proc (3 tests); sapt = 1420.73 sec*proc (20 tests); scf = 5859.53 sec*proc (51 tests); shorttests = 39.46 sec*proc (4 tests); smoketests = 89.98 sec*proc (11 tests); stability = 5.90 sec*proc (2 tests); tutorial = 165.22 sec*proc (6 tests); x2c = 34.46 sec*proc (3 tests). Total Test time (real) = 3000.09 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:38867,test,tests,38867,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['test'],['tests']
Testability,= 18.54 sec*proc (2 tests); dcft = 1565.92 sec*proc (13 tests); df = 802.06 sec*proc (38 tests); dfccd = 1.64 sec*proc (1 test); dfccd-grad = 3.54 sec*proc (1 test); dfccdl = 2.21 sec*proc (1 test); dfccsd = 1.71 sec*proc (1 test); dfccsd-grad = 22.78 sec*proc (1 test); dfccsd-t-grad = 21.28 sec*proc (1 test); dfccsdat = 3.87 sec*proc (1 test); dfccsdl = 1.60 sec*proc (1 test); dfccsdt = 2.22 sec*proc (1 test); dfep2 = 4.59 sec*proc (2 tests); dfmp2 = 116.41 sec*proc (11 tests); dfomp2 = 225.13 sec*proc (7 tests); dfomp2.5 = 98.09 sec*proc (4 tests); dfomp3 = 94.63 sec*proc (4 tests); dfscf = 143.19 sec*proc (1 test); dft = 1426.34 sec*proc (27 tests); docs = 1.13 sec*proc (2 tests); ecp = 37.80 sec*proc (2 tests); fci = 10.98 sec*proc (2 tests); fcidump = 1.70 sec*proc (1 test); findif = 854.97 sec*proc (5 tests); fnocc = 60.27 sec*proc (4 tests); freq = 823.32 sec*proc (6 tests); gradient = 429.01 sec*proc (16 tests); json = 12.24 sec*proc (8 tests); longtests = 3709.37 sec*proc (5 tests); mcscf = 2.67 sec*proc (3 tests); minitests = 56.99 sec*proc (4 tests); mints = 84.82 sec*proc (14 tests); misc = 443.60 sec*proc (16 tests); mp2 = 533.62 sec*proc (13 tests); nbody = 51.37 sec*proc (2 tests); numpy = 0.65 sec*proc (1 test); ocepa = 155.69 sec*proc (6 tests); omp = 369.10 sec*proc (18 tests); opt = 1287.53 sec*proc (21 tests); plug = 7.76 sec*proc (7 tests); prop = 2.03 sec*proc (1 test); properties = 125.04 sec*proc (10 tests); psi = 21541.56 sec*proc (410 tests); psi4numpy = 9.73 sec*proc (6 tests); psimrcc = 111.61 sec*proc (8 tests); python = 854.21 sec*proc (10 tests); pywrap = 1083.92 sec*proc (12 tests); quicktests = 1943.21 sec*proc (140 tests); rasci = 39.98 sec*proc (3 tests); sapt = 6393.47 sec*proc (21 tests); scf = 1758.03 sec*proc (52 tests); shorttests = 55.68 sec*proc (4 tests); smoketests = 130.19 sec*proc (11 tests); stability = 3.24 sec*proc (2 tests); tutorial = 113.56 sec*proc (6 tests); x2c = 34.94 sec*proc (3 tests). Total Test time (real) =,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:39802,test,tests,39802,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['test'],['tests']
Testability,= 199.36 sec*proc (7 tests); ci = 100.45 sec*proc (8 tests); cisd = 209.41 sec*proc (7 tests); cookbook = 284.29 sec*proc (1 test); cubeprop = 19.63 sec*proc (2 tests); dcft = 3319.98 sec*proc (13 tests); df = 1994.11 sec*proc (38 tests); dfccd = 1.33 sec*proc (1 test); dfccd-grad = 3.71 sec*proc (1 test); dfccdl = 4.09 sec*proc (1 test); dfccsd = 3.47 sec*proc (1 test); dfccsd-grad = 39.72 sec*proc (1 test); dfccsd-t-grad = 37.57 sec*proc (1 test); dfccsdat = 4.01 sec*proc (1 test); dfccsdl = 2.51 sec*proc (1 test); dfccsdt = 2.35 sec*proc (1 test); dfep2 = 4.67 sec*proc (2 tests); dfmp2 = 118.85 sec*proc (11 tests); dfomp2 = 1035.30 sec*proc (7 tests); dfomp2.5 = 224.33 sec*proc (4 tests); dfomp3 = 258.95 sec*proc (4 tests); dfscf = 133.50 sec*proc (1 test); dft = 1440.06 sec*proc (27 tests); docs = 1.12 sec*proc (2 tests); ecp = 39.28 sec*proc (2 tests); fci = 10.77 sec*proc (2 tests); fcidump = 1.95 sec*proc (1 test); findif = 901.99 sec*proc (5 tests); fnocc = 93.14 sec*proc (4 tests); freq = 1004.97 sec*proc (6 tests); gradient = 1655.45 sec*proc (16 tests); json = 11.29 sec*proc (8 tests); longtests = 3627.91 sec*proc (5 tests); mcscf = 2.67 sec*proc (3 tests); minitests = 60.89 sec*proc (4 tests); mints = 78.81 sec*proc (14 tests); misc = 458.95 sec*proc (16 tests); mp2 = 601.94 sec*proc (13 tests); nbody = 78.53 sec*proc (2 tests); numpy = 0.62 sec*proc (1 test); ocepa = 722.49 sec*proc (6 tests); omp = 970.16 sec*proc (18 tests); opt = 1470.88 sec*proc (21 tests); plug = 7.59 sec*proc (7 tests); prop = 2.07 sec*proc (1 test); properties = 128.30 sec*proc (10 tests); psi = 36286.20 sec*proc (410 tests); psi4numpy = 12.26 sec*proc (6 tests); psimrcc = 124.49 sec*proc (8 tests); python = 1073.50 sec*proc (10 tests); pywrap = 2337.19 sec*proc (12 tests); quicktests = 3817.08 sec*proc (140 tests); rasci = 41.09 sec*proc (3 tests); sapt = 6148.48 sec*proc (21 tests); scf = 1763.84 sec*proc (52 tests); shorttests = 55.75 sec*proc (4 tests); smoketests = 156.63 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:39702,test,tests,39702,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['test'],['tests']
Testability,= 2.40 sec*proc (1 test); dfccd-grad = 6.11 sec*proc (1 test); dfccdl = 2.42 sec*proc (1 test); dfccsd = 3.17 sec*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 tests); opt = 769.80 sec*proc (21 tests); prop = 1.60 sec*proc (1 test); properties = 84.77 sec*proc (10 tests); psi = 20501.24 sec*proc (400 tests); psi4numpy = 13.93 sec*proc (6 tests); psimrcc = 70.67 sec*proc (8 tests); python = 880.26 sec*proc (10 tests); pywrap = 1339.53 sec*proc (12 tests); quicktests = 2290.03 sec*proc (137 tests); rasci = 37.96 sec*proc (3 tests); sapt = 1420.73 sec*proc (20 tests); scf = 5859.53 sec*proc (51 tests); shorttests = 39.46 sec*proc (4 tests); smoketests = 89.98 sec*proc (11 tests); stability = 5.90 sec*proc (2 tests); tutorial = 165.22 sec*proc (6 tests); x2c = 34.46 sec*proc (3 tests). Total Test time (real) = 3000.09 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); 	371 - dft-bench-interaction (Timeout); 	373 - pywrap-align (Failed),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:38940,test,tests,38940,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['test'],['tests']
Testability,= 20.76 sec*proc (2 tests); dcft = 1432.88 sec*proc (13 tests); df = 809.76 sec*proc (38 tests); dfccd = 2.40 sec*proc (1 test); dfccd-grad = 6.44 sec*proc (1 test); dfccdl = 2.47 sec*proc (1 test); dfccsd = 4.35 sec*proc (1 test); dfccsd-grad = 18.56 sec*proc (1 test); dfccsd-t-grad = 18.88 sec*proc (1 test); dfccsdat = 9.19 sec*proc (1 test); dfccsdl = 4.13 sec*proc (1 test); dfccsdt = 6.97 sec*proc (1 test); dfep2 = 5.76 sec*proc (2 tests); dfmp2 = 129.38 sec*proc (11 tests); dfomp2 = 241.50 sec*proc (7 tests); dfomp2.5 = 75.85 sec*proc (4 tests); dfomp3 = 85.78 sec*proc (4 tests); dfscf = 142.25 sec*proc (1 test); dft = 1405.42 sec*proc (27 tests); docs = 1.27 sec*proc (2 tests); ecp = 40.70 sec*proc (2 tests); fci = 11.34 sec*proc (2 tests); fcidump = 3.32 sec*proc (1 test); findif = 855.60 sec*proc (5 tests); fnocc = 54.59 sec*proc (4 tests); freq = 868.42 sec*proc (6 tests); gradient = 511.58 sec*proc (16 tests); json = 15.62 sec*proc (8 tests); longtests = 3663.30 sec*proc (5 tests); mcscf = 3.51 sec*proc (3 tests); minitests = 60.16 sec*proc (4 tests); mints = 87.38 sec*proc (14 tests); misc = 453.74 sec*proc (16 tests); mp2 = 533.20 sec*proc (13 tests); nbody = 52.44 sec*proc (2 tests); numpy = 0.69 sec*proc (1 test); ocepa = 262.80 sec*proc (6 tests); omp = 342.02 sec*proc (18 tests); opt = 1346.21 sec*proc (21 tests); plug = 9.75 sec*proc (7 tests); prop = 2.45 sec*proc (1 test); properties = 130.49 sec*proc (10 tests); psi = 23042.29 sec*proc (410 tests); psi4numpy = 14.57 sec*proc (6 tests); psimrcc = 105.82 sec*proc (8 tests); python = 921.61 sec*proc (10 tests); pywrap = 1289.96 sec*proc (12 tests); quicktests = 2043.20 sec*proc (140 tests); rasci = 41.13 sec*proc (3 tests); sapt = 6134.77 sec*proc (21 tests); scf = 1762.82 sec*proc (52 tests); shorttests = 65.18 sec*proc (4 tests); smoketests = 101.77 sec*proc (11 tests); stability = 5.47 sec*proc (2 tests); tutorial = 154.26 sec*proc (6 tests); x2c = 29.51 sec*proc (3 tests). Total Test time (real) ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:39825,test,tests,39825,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['test'],['tests']
Testability,= 203.58 sec*proc (7 tests); ci = 83.42 sec*proc (8 tests); cisd = 109.67 sec*proc (7 tests); cookbook = 222.55 sec*proc (1 test); cubeprop = 14.38 sec*proc (2 tests); dcft = 3348.62 sec*proc (13 tests); df = 1824.24 sec*proc (38 tests); dfccd = 3.69 sec*proc (1 test); dfccd-grad = 13.83 sec*proc (1 test); dfccdl = 8.06 sec*proc (1 test); dfccsd = 4.58 sec*proc (1 test); dfccsd-grad = 43.20 sec*proc (1 test); dfccsd-t-grad = 38.87 sec*proc (1 test); dfccsdat = 20.44 sec*proc (1 test); dfccsdl = 4.62 sec*proc (1 test); dfccsdt = 10.41 sec*proc (1 test); dfep2 = 7.13 sec*proc (2 tests); dfmp2 = 121.95 sec*proc (11 tests); dfomp2 = 943.08 sec*proc (7 tests); dfomp2.5 = 233.40 sec*proc (4 tests); dfomp3 = 229.00 sec*proc (4 tests); dfscf = 28.93 sec*proc (1 test); dft = 5629.04 sec*proc (26 tests); docs = 1.78 sec*proc (2 tests); ecp = 57.50 sec*proc (2 tests); fci = 7.32 sec*proc (2 tests); fcidump = 6.32 sec*proc (1 test); findif = 698.00 sec*proc (5 tests); fnocc = 141.78 sec*proc (4 tests); freq = 1043.60 sec*proc (6 tests); gradient = 1568.40 sec*proc (16 tests); json = 19.71 sec*proc (8 tests); longtests = 933.44 sec*proc (5 tests); mcscf = 5.98 sec*proc (3 tests); minitests = 44.49 sec*proc (3 tests); mints = 40.79 sec*proc (14 tests); misc = 369.08 sec*proc (16 tests); mp2 = 283.13 sec*proc (13 tests); nbody = 73.23 sec*proc (2 tests); numpy = 1.44 sec*proc (1 test); ocepa = 739.92 sec*proc (6 tests); omp = 845.55 sec*proc (18 tests); opt = 956.86 sec*proc (21 tests); prop = 1.97 sec*proc (1 test); properties = 104.12 sec*proc (10 tests); psi = 34317.61 sec*proc (400 tests); psi4numpy = 23.83 sec*proc (6 tests); psimrcc = 87.03 sec*proc (8 tests); python = 1082.76 sec*proc (10 tests); pywrap = 3836.93 sec*proc (12 tests); quicktests = 4351.03 sec*proc (137 tests); rasci = 45.35 sec*proc (3 tests); sapt = 1501.22 sec*proc (20 tests); scf = 6069.20 sec*proc (51 tests); shorttests = 47.02 sec*proc (4 tests); smoketests = 175.49 sec*proc (11 tests); stability = 7.67 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:38713,test,tests,38713,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['test'],['tests']
Testability,= 2162.96 sec*proc (10 tests); cc = 9085.75 sec*proc (64 tests); cdomp2 = 59.27 sec*proc (2 tests); cepa = 203.58 sec*proc (7 tests); ci = 83.42 sec*proc (8 tests); cisd = 109.67 sec*proc (7 tests); cookbook = 222.55 sec*proc (1 test); cubeprop = 14.38 sec*proc (2 tests); dcft = 3348.62 sec*proc (13 tests); df = 1824.24 sec*proc (38 tests); dfccd = 3.69 sec*proc (1 test); dfccd-grad = 13.83 sec*proc (1 test); dfccdl = 8.06 sec*proc (1 test); dfccsd = 4.58 sec*proc (1 test); dfccsd-grad = 43.20 sec*proc (1 test); dfccsd-t-grad = 38.87 sec*proc (1 test); dfccsdat = 20.44 sec*proc (1 test); dfccsdl = 4.62 sec*proc (1 test); dfccsdt = 10.41 sec*proc (1 test); dfep2 = 7.13 sec*proc (2 tests); dfmp2 = 121.95 sec*proc (11 tests); dfomp2 = 943.08 sec*proc (7 tests); dfomp2.5 = 233.40 sec*proc (4 tests); dfomp3 = 229.00 sec*proc (4 tests); dfscf = 28.93 sec*proc (1 test); dft = 5629.04 sec*proc (26 tests); docs = 1.78 sec*proc (2 tests); ecp = 57.50 sec*proc (2 tests); fci = 7.32 sec*proc (2 tests); fcidump = 6.32 sec*proc (1 test); findif = 698.00 sec*proc (5 tests); fnocc = 141.78 sec*proc (4 tests); freq = 1043.60 sec*proc (6 tests); gradient = 1568.40 sec*proc (16 tests); json = 19.71 sec*proc (8 tests); longtests = 933.44 sec*proc (5 tests); mcscf = 5.98 sec*proc (3 tests); minitests = 44.49 sec*proc (3 tests); mints = 40.79 sec*proc (14 tests); misc = 369.08 sec*proc (16 tests); mp2 = 283.13 sec*proc (13 tests); nbody = 73.23 sec*proc (2 tests); numpy = 1.44 sec*proc (1 test); ocepa = 739.92 sec*proc (6 tests); omp = 845.55 sec*proc (18 tests); opt = 956.86 sec*proc (21 tests); prop = 1.97 sec*proc (1 test); properties = 104.12 sec*proc (10 tests); psi = 34317.61 sec*proc (400 tests); psi4numpy = 23.83 sec*proc (6 tests); psimrcc = 87.03 sec*proc (8 tests); python = 1082.76 sec*proc (10 tests); pywrap = 3836.93 sec*proc (12 tests); quicktests = 4351.03 sec*proc (137 tests); rasci = 45.35 sec*proc (3 tests); sapt = 1501.22 sec*proc (20 tests); scf = 6069.20 sec*proc (51 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:38608,test,tests,38608,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['test'],['tests']
Testability,= 237.74 sec*proc (7 tests); ci = 124.43 sec*proc (8 tests); cisd = 192.72 sec*proc (7 tests); cookbook = 74.81 sec*proc (1 test); cubeprop = 21.02 sec*proc (2 tests); dcft = 2168.02 sec*proc (13 tests); df = 1323.98 sec*proc (38 tests); dfccd = 1.99 sec*proc (1 test); dfccd-grad = 11.53 sec*proc (1 test); dfccdl = 2.32 sec*proc (1 test); dfccsd = 6.96 sec*proc (1 test); dfccsd-grad = 23.04 sec*proc (1 test); dfccsd-t-grad = 20.20 sec*proc (1 test); dfccsdat = 13.07 sec*proc (1 test); dfccsdl = 9.39 sec*proc (1 test); dfccsdt = 5.62 sec*proc (1 test); dfep2 = 5.95 sec*proc (2 tests); dfmp2 = 144.08 sec*proc (11 tests); dfomp2 = 610.26 sec*proc (7 tests); dfomp2.5 = 93.44 sec*proc (4 tests); dfomp3 = 106.67 sec*proc (4 tests); dfscf = 143.01 sec*proc (1 test); dft = 1409.77 sec*proc (27 tests); docs = 1.24 sec*proc (2 tests); ecp = 41.60 sec*proc (2 tests); fci = 13.45 sec*proc (2 tests); fcidump = 9.42 sec*proc (1 test); findif = 895.26 sec*proc (5 tests); fnocc = 124.54 sec*proc (4 tests); freq = 968.32 sec*proc (6 tests); gradient = 1118.69 sec*proc (16 tests); json = 18.01 sec*proc (8 tests); longtests = 3642.49 sec*proc (5 tests); mcscf = 5.05 sec*proc (3 tests); minitests = 64.06 sec*proc (4 tests); mints = 89.98 sec*proc (14 tests); misc = 563.82 sec*proc (16 tests); mp2 = 676.55 sec*proc (13 tests); nbody = 107.79 sec*proc (2 tests); numpy = 0.80 sec*proc (1 test); ocepa = 691.29 sec*proc (6 tests); omp = 863.37 sec*proc (18 tests); opt = 1517.73 sec*proc (21 tests); plug = 13.26 sec*proc (7 tests); prop = 2.48 sec*proc (1 test); properties = 168.25 sec*proc (10 tests); psi = 26492.85 sec*proc (410 tests); psi4numpy = 13.47 sec*proc (6 tests); psimrcc = 132.27 sec*proc (8 tests); python = 1005.18 sec*proc (10 tests); pywrap = 1188.04 sec*proc (12 tests); quicktests = 2506.57 sec*proc (140 tests); rasci = 42.11 sec*proc (3 tests); sapt = 6193.03 sec*proc (21 tests); scf = 1768.47 sec*proc (52 tests); shorttests = 58.79 sec*proc (4 tests); smoketests = 114.11 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:39719,test,tests,39719,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['test'],['tests']
Testability,= 3.17 sec*proc (1 test); dfccsd-grad = 22.59 sec*proc (1 test); dfccsd-t-grad = 19.43 sec*proc (1 test); dfccsdat = 13.82 sec*proc (1 test); dfccsdl = 3.14 sec*proc (1 test); dfccsdt = 3.87 sec*proc (1 test); dfep2 = 5.30 sec*proc (2 tests); dfmp2 = 89.76 sec*proc (11 tests); dfomp2 = 275.42 sec*proc (7 tests); dfomp2.5 = 77.71 sec*proc (4 tests); dfomp3 = 93.16 sec*proc (4 tests); dfscf = 28.72 sec*proc (1 test); dft = 5528.80 sec*proc (26 tests); docs = 1.34 sec*proc (2 tests); ecp = 37.52 sec*proc (2 tests); fci = 6.48 sec*proc (2 tests); fcidump = 3.69 sec*proc (1 test); findif = 602.21 sec*proc (5 tests); fnocc = 58.18 sec*proc (4 tests); freq = 856.94 sec*proc (6 tests); gradient = 547.45 sec*proc (16 tests); json = 14.48 sec*proc (8 tests); longtests = 835.25 sec*proc (5 tests); mcscf = 3.12 sec*proc (3 tests); minitests = 31.52 sec*proc (3 tests); mints = 35.52 sec*proc (14 tests); misc = 272.90 sec*proc (16 tests); mp2 = 205.17 sec*proc (13 tests); nbody = 52.21 sec*proc (2 tests); numpy = 0.63 sec*proc (1 test); ocepa = 324.78 sec*proc (6 tests); omp = 326.64 sec*proc (18 tests); opt = 769.80 sec*proc (21 tests); prop = 1.60 sec*proc (1 test); properties = 84.77 sec*proc (10 tests); psi = 20501.24 sec*proc (400 tests); psi4numpy = 13.93 sec*proc (6 tests); psimrcc = 70.67 sec*proc (8 tests); python = 880.26 sec*proc (10 tests); pywrap = 1339.53 sec*proc (12 tests); quicktests = 2290.03 sec*proc (137 tests); rasci = 37.96 sec*proc (3 tests); sapt = 1420.73 sec*proc (20 tests); scf = 5859.53 sec*proc (51 tests); shorttests = 39.46 sec*proc (4 tests); smoketests = 89.98 sec*proc (11 tests); stability = 5.90 sec*proc (2 tests); tutorial = 165.22 sec*proc (6 tests); x2c = 34.46 sec*proc (3 tests). Total Test time (real) = 3000.09 sec. The following tests FAILED:; 	360 - cubeprop-esp (Failed); 	371 - dft-bench-interaction (Timeout); 	373 - pywrap-align (Failed); 	374 - pywrap-align-chiral (Failed); 	401 - json-schema_0_properties (Failed); Errors while running C,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:39043,test,tests,39043,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['test'],['tests']
Testability,= 3092.73 sec*proc (13 tests); df = 1676.00 sec*proc (38 tests); dfccd = 5.43 sec*proc (1 test); dfccd-grad = 23.87 sec*proc (1 test); dfccdl = 5.84 sec*proc (1 test); dfccsd = 12.87 sec*proc (1 test); dfccsd-grad = 48.16 sec*proc (1 test); dfccsd-t-grad = 58.36 sec*proc (1 test); dfccsdat = 27.90 sec*proc (1 test); dfccsdl = 18.85 sec*proc (1 test); dfccsdt = 20.66 sec*proc (1 test); dfep2 = 6.65 sec*proc (2 tests); dfmp2 = 160.87 sec*proc (11 tests); dfomp2 = 668.52 sec*proc (7 tests); dfomp2.5 = 158.90 sec*proc (4 tests); dfomp3 = 194.44 sec*proc (4 tests); dfscf = 140.97 sec*proc (1 test); dft = 1440.34 sec*proc (27 tests); docs = 1.27 sec*proc (2 tests); ecp = 46.88 sec*proc (2 tests); fci = 17.32 sec*proc (2 tests); fcidump = 6.53 sec*proc (1 test); findif = 938.98 sec*proc (5 tests); fnocc = 129.35 sec*proc (4 tests); freq = 994.16 sec*proc (6 tests); gradient = 1502.06 sec*proc (16 tests); json = 18.08 sec*proc (8 tests); longtests = 3739.74 sec*proc (5 tests); mcscf = 3.71 sec*proc (3 tests); minitests = 58.58 sec*proc (4 tests); mints = 91.24 sec*proc (14 tests); misc = 538.48 sec*proc (16 tests); mp2 = 635.39 sec*proc (13 tests); nbody = 98.12 sec*proc (2 tests); numpy = 0.69 sec*proc (1 test); ocepa = 1014.19 sec*proc (6 tests); omp = 1142.51 sec*proc (18 tests); opt = 1635.88 sec*proc (21 tests); plug = 10.45 sec*proc (7 tests); prop = 4.52 sec*proc (1 test); properties = 168.47 sec*proc (10 tests); psi = 37923.20 sec*proc (410 tests); psi4numpy = 18.11 sec*proc (6 tests); psimrcc = 135.22 sec*proc (8 tests); python = 1017.96 sec*proc (10 tests); pywrap = 3230.71 sec*proc (12 tests); quicktests = 4445.75 sec*proc (140 tests); rasci = 47.28 sec*proc (3 tests); sapt = 6203.95 sec*proc (21 tests); scf = 1901.85 sec*proc (52 tests); shorttests = 69.64 sec*proc (4 tests); smoketests = 213.87 sec*proc (11 tests); stability = 7.12 sec*proc (2 tests); tutorial = 301.05 sec*proc (6 tests); x2c = 78.85 sec*proc (3 tests). Total Test time (real) = 4776.67 sec; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:39949,test,tests,39949,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,28,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,= 3928.91 sec*proc (13 tests); df = 2256.10 sec*proc (38 tests); dfccd = 3.98 sec*proc (1 test); dfccd-grad = 27.33 sec*proc (1 test); dfccdl = 3.46 sec*proc (1 test); dfccsd = 6.58 sec*proc (1 test); dfccsd-grad = 77.74 sec*proc (1 test); dfccsd-t-grad = 71.93 sec*proc (1 test); dfccsdat = 32.02 sec*proc (1 test); dfccsdl = 20.44 sec*proc (1 test); dfccsdt = 27.22 sec*proc (1 test); dfep2 = 5.48 sec*proc (2 tests); dfmp2 = 152.42 sec*proc (11 tests); dfomp2 = 1078.80 sec*proc (7 tests); dfomp2.5 = 248.49 sec*proc (4 tests); dfomp3 = 259.57 sec*proc (4 tests); dfscf = 136.88 sec*proc (1 test); dft = 1423.98 sec*proc (27 tests); docs = 1.14 sec*proc (2 tests); ecp = 44.39 sec*proc (2 tests); fci = 16.37 sec*proc (2 tests); fcidump = 16.54 sec*proc (1 test); findif = 1027.21 sec*proc (5 tests); fnocc = 247.46 sec*proc (4 tests); freq = 949.55 sec*proc (6 tests); gradient = 1810.70 sec*proc (16 tests); json = 24.20 sec*proc (8 tests); longtests = 3935.60 sec*proc (5 tests); mcscf = 6.08 sec*proc (3 tests); minitests = 66.42 sec*proc (4 tests); mints = 84.48 sec*proc (14 tests); misc = 572.48 sec*proc (16 tests); mp2 = 602.30 sec*proc (13 tests); nbody = 82.97 sec*proc (2 tests); numpy = 0.77 sec*proc (1 test); ocepa = 709.33 sec*proc (6 tests); omp = 876.57 sec*proc (18 tests); opt = 1673.43 sec*proc (21 tests); plug = 23.33 sec*proc (7 tests); prop = 3.88 sec*proc (1 test); properties = 168.31 sec*proc (10 tests); psi = 39557.25 sec*proc (410 tests); psi4numpy = 22.23 sec*proc (6 tests); psimrcc = 134.89 sec*proc (8 tests); python = 1021.98 sec*proc (10 tests); pywrap = 3292.22 sec*proc (12 tests); quicktests = 4464.14 sec*proc (140 tests); rasci = 40.23 sec*proc (3 tests); sapt = 6565.40 sec*proc (21 tests); scf = 1849.83 sec*proc (52 tests); shorttests = 63.24 sec*proc (4 tests); smoketests = 136.51 sec*proc (11 tests); stability = 6.13 sec*proc (2 tests); tutorial = 463.13 sec*proc (6 tests); x2c = 91.59 sec*proc (3 tests). Total Test time (real) = 5028.08 sec; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:39936,test,tests,39936,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,28,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,= 464.95 sec*proc (26 tests); cart = 10197.27 sec*proc (123 tests); cas = 45.85 sec*proc (1 test); casscf = 46.69 sec*proc (11 tests); cbs = 607.71 sec*proc (10 tests); cc = 2524.71 sec*proc (65 tests); cdomp2 = 12.61 sec*proc (2 tests); cepa = 34.90 sec*proc (7 tests); ci = 86.89 sec*proc (8 tests); cisd = 126.11 sec*proc (7 tests); cookbook = 21.11 sec*proc (1 test); cubeprop = 19.47 sec*proc (2 tests); dcft = 1171.02 sec*proc (13 tests); df = 616.05 sec*proc (38 tests); dfccd = 1.95 sec*proc (1 test); dfccd-grad = 2.71 sec*proc (1 test); dfccdl = 1.29 sec*proc (1 test); dfccsd = 2.55 sec*proc (1 test); dfccsd-grad = 11.89 sec*proc (1 test); dfccsd-t-grad = 8.25 sec*proc (1 test); dfccsdat = 2.98 sec*proc (1 test); dfccsdl = 2.18 sec*proc (1 test); dfccsdt = 2.02 sec*proc (1 test); dfep2 = 5.39 sec*proc (2 tests); dfmp2 = 110.02 sec*proc (11 tests); dfomp2 = 215.16 sec*proc (7 tests); dfomp2.5 = 38.76 sec*proc (4 tests); dfomp3 = 28.71 sec*proc (4 tests); dfscf = 142.35 sec*proc (1 test); dft = 1320.66 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 34.24 sec*proc (2 tests); fci = 10.36 sec*proc (2 tests); fcidump = 2.17 sec*proc (1 test); findif = 781.94 sec*proc (5 tests); fnocc = 32.06 sec*proc (4 tests); freq = 752.88 sec*proc (6 tests); gradient = 320.64 sec*proc (16 tests); json = 11.21 sec*proc (8 tests); longtests = 3454.42 sec*proc (5 tests); mcscf = 2.64 sec*proc (3 tests); minitests = 55.53 sec*proc (4 tests); mints = 79.80 sec*proc (14 tests); misc = 406.89 sec*proc (16 tests); mp2 = 509.73 sec*proc (13 tests); nbody = 37.02 sec*proc (2 tests); numpy = 0.67 sec*proc (1 test); ocepa = 127.43 sec*proc (6 tests); omp = 159.77 sec*proc (18 tests); opt = 1222.19 sec*proc (21 tests); plug = 6.43 sec*proc (7 tests); prop = 2.00 sec*proc (1 test); properties = 113.43 sec*proc (10 tests); psi = 18261.00 sec*proc (410 tests); psi4numpy = 9.90 sec*proc (6 tests); psimrcc = 98.46 sec*proc (8 tests); python = 791.98 sec*proc (10 tests); pywrap = 929.97 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:39384,test,test,39384,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['test'],['test']
Testability,= 5487.46 sec*proc (13 tests); df = 2798.80 sec*proc (38 tests); dfccd = 3.58 sec*proc (1 test); dfccd-grad = 19.08 sec*proc (1 test); dfccdl = 3.82 sec*proc (1 test); dfccsd = 9.09 sec*proc (1 test); dfccsd-grad = 37.30 sec*proc (1 test); dfccsd-t-grad = 69.23 sec*proc (1 test); dfccsdat = 40.48 sec*proc (1 test); dfccsdl = 16.34 sec*proc (1 test); dfccsdt = 13.79 sec*proc (1 test); dfep2 = 6.01 sec*proc (2 tests); dfmp2 = 180.70 sec*proc (11 tests); dfomp2 = 1691.18 sec*proc (7 tests); dfomp2.5 = 230.29 sec*proc (4 tests); dfomp3 = 245.73 sec*proc (4 tests); dfscf = 131.53 sec*proc (1 test); dft = 1423.44 sec*proc (27 tests); docs = 1.42 sec*proc (2 tests); ecp = 65.92 sec*proc (2 tests); fci = 13.01 sec*proc (2 tests); fcidump = 6.38 sec*proc (1 test); findif = 982.46 sec*proc (5 tests); fnocc = 160.78 sec*proc (4 tests); freq = 1352.76 sec*proc (6 tests); gradient = 2515.20 sec*proc (16 tests); json = 21.65 sec*proc (8 tests); longtests = 3280.68 sec*proc (5 tests); mcscf = 4.01 sec*proc (3 tests); minitests = 69.17 sec*proc (4 tests); mints = 90.89 sec*proc (14 tests); misc = 524.24 sec*proc (16 tests); mp2 = 563.20 sec*proc (13 tests); nbody = 86.98 sec*proc (2 tests); numpy = 0.85 sec*proc (1 test); ocepa = 972.17 sec*proc (6 tests); omp = 1024.50 sec*proc (18 tests); opt = 1458.70 sec*proc (21 tests); plug = 12.59 sec*proc (7 tests); prop = 2.69 sec*proc (1 test); properties = 153.77 sec*proc (10 tests); psi = 46786.50 sec*proc (412 tests); psi4numpy = 16.14 sec*proc (6 tests); psimrcc = 131.10 sec*proc (8 tests); python = 1427.05 sec*proc (10 tests); pywrap = 3207.07 sec*proc (12 tests); quicktests = 4242.64 sec*proc (140 tests); rasci = 43.49 sec*proc (3 tests); sapt = 5444.73 sec*proc (21 tests); scf = 1819.88 sec*proc (52 tests); shorttests = 61.18 sec*proc (4 tests); smoketests = 187.16 sec*proc (11 tests); stability = 6.01 sec*proc (2 tests); tutorial = 311.62 sec*proc (6 tests); x2c = 57.73 sec*proc (3 tests). Total Test time (real) = 3865.10 sec; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:40134,test,tests,40134,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,28,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,= 60.55 sec*proc (1 test); cubeprop = 18.54 sec*proc (2 tests); dcft = 1565.92 sec*proc (13 tests); df = 802.06 sec*proc (38 tests); dfccd = 1.64 sec*proc (1 test); dfccd-grad = 3.54 sec*proc (1 test); dfccdl = 2.21 sec*proc (1 test); dfccsd = 1.71 sec*proc (1 test); dfccsd-grad = 22.78 sec*proc (1 test); dfccsd-t-grad = 21.28 sec*proc (1 test); dfccsdat = 3.87 sec*proc (1 test); dfccsdl = 1.60 sec*proc (1 test); dfccsdt = 2.22 sec*proc (1 test); dfep2 = 4.59 sec*proc (2 tests); dfmp2 = 116.41 sec*proc (11 tests); dfomp2 = 225.13 sec*proc (7 tests); dfomp2.5 = 98.09 sec*proc (4 tests); dfomp3 = 94.63 sec*proc (4 tests); dfscf = 143.19 sec*proc (1 test); dft = 1426.34 sec*proc (27 tests); docs = 1.13 sec*proc (2 tests); ecp = 37.80 sec*proc (2 tests); fci = 10.98 sec*proc (2 tests); fcidump = 1.70 sec*proc (1 test); findif = 854.97 sec*proc (5 tests); fnocc = 60.27 sec*proc (4 tests); freq = 823.32 sec*proc (6 tests); gradient = 429.01 sec*proc (16 tests); json = 12.24 sec*proc (8 tests); longtests = 3709.37 sec*proc (5 tests); mcscf = 2.67 sec*proc (3 tests); minitests = 56.99 sec*proc (4 tests); mints = 84.82 sec*proc (14 tests); misc = 443.60 sec*proc (16 tests); mp2 = 533.62 sec*proc (13 tests); nbody = 51.37 sec*proc (2 tests); numpy = 0.65 sec*proc (1 test); ocepa = 155.69 sec*proc (6 tests); omp = 369.10 sec*proc (18 tests); opt = 1287.53 sec*proc (21 tests); plug = 7.76 sec*proc (7 tests); prop = 2.03 sec*proc (1 test); properties = 125.04 sec*proc (10 tests); psi = 21541.56 sec*proc (410 tests); psi4numpy = 9.73 sec*proc (6 tests); psimrcc = 111.61 sec*proc (8 tests); python = 854.21 sec*proc (10 tests); pywrap = 1083.92 sec*proc (12 tests); quicktests = 1943.21 sec*proc (140 tests); rasci = 39.98 sec*proc (3 tests); sapt = 6393.47 sec*proc (21 tests); scf = 1758.03 sec*proc (52 tests); shorttests = 55.68 sec*proc (4 tests); smoketests = 130.19 sec*proc (11 tests); stability = 3.24 sec*proc (2 tests); tutorial = 113.56 sec*proc (6 tests); x2c = 34.94 sec*pro,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:39762,test,tests,39762,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['test'],['tests']
Testability,= 84.85 sec*proc (11 tests); cbs = 1299.63 sec*proc (10 tests); cc = 4877.58 sec*proc (65 tests); cdomp2 = 87.04 sec*proc (2 tests); cepa = 237.74 sec*proc (7 tests); ci = 124.43 sec*proc (8 tests); cisd = 192.72 sec*proc (7 tests); cookbook = 74.81 sec*proc (1 test); cubeprop = 21.02 sec*proc (2 tests); dcft = 2168.02 sec*proc (13 tests); df = 1323.98 sec*proc (38 tests); dfccd = 1.99 sec*proc (1 test); dfccd-grad = 11.53 sec*proc (1 test); dfccdl = 2.32 sec*proc (1 test); dfccsd = 6.96 sec*proc (1 test); dfccsd-grad = 23.04 sec*proc (1 test); dfccsd-t-grad = 20.20 sec*proc (1 test); dfccsdat = 13.07 sec*proc (1 test); dfccsdl = 9.39 sec*proc (1 test); dfccsdt = 5.62 sec*proc (1 test); dfep2 = 5.95 sec*proc (2 tests); dfmp2 = 144.08 sec*proc (11 tests); dfomp2 = 610.26 sec*proc (7 tests); dfomp2.5 = 93.44 sec*proc (4 tests); dfomp3 = 106.67 sec*proc (4 tests); dfscf = 143.01 sec*proc (1 test); dft = 1409.77 sec*proc (27 tests); docs = 1.24 sec*proc (2 tests); ecp = 41.60 sec*proc (2 tests); fci = 13.45 sec*proc (2 tests); fcidump = 9.42 sec*proc (1 test); findif = 895.26 sec*proc (5 tests); fnocc = 124.54 sec*proc (4 tests); freq = 968.32 sec*proc (6 tests); gradient = 1118.69 sec*proc (16 tests); json = 18.01 sec*proc (8 tests); longtests = 3642.49 sec*proc (5 tests); mcscf = 5.05 sec*proc (3 tests); minitests = 64.06 sec*proc (4 tests); mints = 89.98 sec*proc (14 tests); misc = 563.82 sec*proc (16 tests); mp2 = 676.55 sec*proc (13 tests); nbody = 107.79 sec*proc (2 tests); numpy = 0.80 sec*proc (1 test); ocepa = 691.29 sec*proc (6 tests); omp = 863.37 sec*proc (18 tests); opt = 1517.73 sec*proc (21 tests); plug = 13.26 sec*proc (7 tests); prop = 2.48 sec*proc (1 test); properties = 168.25 sec*proc (10 tests); psi = 26492.85 sec*proc (410 tests); psi4numpy = 13.47 sec*proc (6 tests); psimrcc = 132.27 sec*proc (8 tests); python = 1005.18 sec*proc (10 tests); pywrap = 1188.04 sec*proc (12 tests); quicktests = 2506.57 sec*proc (140 tests); rasci = 42.11 sec*proc (3 t,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:39582,test,tests,39582,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['test'],['tests']
Testability,= 85.56 sec*proc (1 test); cubeprop = 20.76 sec*proc (2 tests); dcft = 1432.88 sec*proc (13 tests); df = 809.76 sec*proc (38 tests); dfccd = 2.40 sec*proc (1 test); dfccd-grad = 6.44 sec*proc (1 test); dfccdl = 2.47 sec*proc (1 test); dfccsd = 4.35 sec*proc (1 test); dfccsd-grad = 18.56 sec*proc (1 test); dfccsd-t-grad = 18.88 sec*proc (1 test); dfccsdat = 9.19 sec*proc (1 test); dfccsdl = 4.13 sec*proc (1 test); dfccsdt = 6.97 sec*proc (1 test); dfep2 = 5.76 sec*proc (2 tests); dfmp2 = 129.38 sec*proc (11 tests); dfomp2 = 241.50 sec*proc (7 tests); dfomp2.5 = 75.85 sec*proc (4 tests); dfomp3 = 85.78 sec*proc (4 tests); dfscf = 142.25 sec*proc (1 test); dft = 1405.42 sec*proc (27 tests); docs = 1.27 sec*proc (2 tests); ecp = 40.70 sec*proc (2 tests); fci = 11.34 sec*proc (2 tests); fcidump = 3.32 sec*proc (1 test); findif = 855.60 sec*proc (5 tests); fnocc = 54.59 sec*proc (4 tests); freq = 868.42 sec*proc (6 tests); gradient = 511.58 sec*proc (16 tests); json = 15.62 sec*proc (8 tests); longtests = 3663.30 sec*proc (5 tests); mcscf = 3.51 sec*proc (3 tests); minitests = 60.16 sec*proc (4 tests); mints = 87.38 sec*proc (14 tests); misc = 453.74 sec*proc (16 tests); mp2 = 533.20 sec*proc (13 tests); nbody = 52.44 sec*proc (2 tests); numpy = 0.69 sec*proc (1 test); ocepa = 262.80 sec*proc (6 tests); omp = 342.02 sec*proc (18 tests); opt = 1346.21 sec*proc (21 tests); plug = 9.75 sec*proc (7 tests); prop = 2.45 sec*proc (1 test); properties = 130.49 sec*proc (10 tests); psi = 23042.29 sec*proc (410 tests); psi4numpy = 14.57 sec*proc (6 tests); psimrcc = 105.82 sec*proc (8 tests); python = 921.61 sec*proc (10 tests); pywrap = 1289.96 sec*proc (12 tests); quicktests = 2043.20 sec*proc (140 tests); rasci = 41.13 sec*proc (3 tests); sapt = 6134.77 sec*proc (21 tests); scf = 1762.82 sec*proc (52 tests); shorttests = 65.18 sec*proc (4 tests); smoketests = 101.77 sec*proc (11 tests); stability = 5.47 sec*proc (2 tests); tutorial = 154.26 sec*proc (6 tests); x2c = 29.51 sec*pr,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:39785,test,tests,39785,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['test'],['tests']
Testability,= 91.90 sec*proc (8 tests); cisd = 133.06 sec*proc (7 tests); cookbook = 21.41 sec*proc (1 test); cubeprop = 18.63 sec*proc (2 tests); dcft = 1189.36 sec*proc (13 tests); df = 705.57 sec*proc (38 tests); dfccd = 3.15 sec*proc (1 test); dfccd-grad = 13.35 sec*proc (1 test); dfccdl = 4.11 sec*proc (1 test); dfccsd = 3.18 sec*proc (1 test); dfccsd-grad = 16.34 sec*proc (1 test); dfccsd-t-grad = 13.89 sec*proc (1 test); dfccsdat = 9.43 sec*proc (1 test); dfccsdl = 10.26 sec*proc (1 test); dfccsdt = 7.70 sec*proc (1 test); dfep2 = 6.04 sec*proc (2 tests); dfmp2 = 123.48 sec*proc (11 tests); dfomp2 = 209.11 sec*proc (7 tests); dfomp2.5 = 53.70 sec*proc (4 tests); dfomp3 = 51.68 sec*proc (4 tests); dfscf = 128.62 sec*proc (1 test); dft = 1299.12 sec*proc (27 tests); docs = 1.09 sec*proc (2 tests); ecp = 38.88 sec*proc (2 tests); fci = 10.23 sec*proc (2 tests); fcidump = 1.60 sec*proc (1 test); findif = 742.81 sec*proc (5 tests); fnocc = 75.77 sec*proc (4 tests); freq = 810.55 sec*proc (6 tests); gradient = 493.27 sec*proc (16 tests); json = 14.98 sec*proc (8 tests); longtests = 3198.41 sec*proc (5 tests); mcscf = 3.57 sec*proc (3 tests); minitests = 53.37 sec*proc (4 tests); mints = 79.27 sec*proc (14 tests); misc = 428.55 sec*proc (16 tests); mp2 = 507.97 sec*proc (13 tests); nbody = 52.29 sec*proc (2 tests); numpy = 0.68 sec*proc (1 test); ocepa = 293.22 sec*proc (6 tests); omp = 283.37 sec*proc (18 tests); opt = 1223.60 sec*proc (21 tests); plug = 6.89 sec*proc (7 tests); prop = 2.11 sec*proc (1 test); properties = 129.24 sec*proc (10 tests); psi = 19578.98 sec*proc (410 tests); psi4numpy = 12.87 sec*proc (6 tests); psimrcc = 101.41 sec*proc (8 tests); python = 839.11 sec*proc (10 tests); pywrap = 958.38 sec*proc (12 tests); quicktests = 1631.09 sec*proc (140 tests); rasci = 34.08 sec*proc (3 tests); sapt = 5538.45 sec*proc (21 tests); scf = 1629.73 sec*proc (52 tests); shorttests = 55.11 sec*proc (4 tests); smoketests = 98.45 sec*proc (11 tests); stability = 5.16 sec*p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:39770,test,tests,39770,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['test'],['tests']
Testability,====; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13161,test,tests,13161,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,"=====; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds ================================; ```; I'm not sure if the 2 skipped tests and the 1 xfail",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1329,test,tests,1329,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942,1,['test'],['tests']
Testability,"========= test session starts =================================================================; platform linux -- Python 3.6.6, pytest-3.8.0, py-1.6.0, pluggy-0.7.1 -- /home/henrique/bin/anaconda3/envs/p4env/bin/python; cachedir: .pytest_cache; rootdir: /home/henrique, inifile:; collected 22 items . bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 SKIPPED [ 18%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED [ 22%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED [ 50%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c SKIPPED [ 59%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_r",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:1125,test,tests,1125,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['test'],['tests']
Testability,==============; 2018-12-05T15:55:39.8038147Z SKIP [1] lib\psi4\tests\test_addons.py:43: Psi4 not compiled with gdma. Rebuild with -DENABLE_gdma; 2018-12-05T15:55:39.8039347Z SKIP [1] lib\psi4\tests\test_addons.py:100: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8040544Z SKIP [1] lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8048914Z SKIP [1] lib\psi4\tests\test_addons.py:810: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8050115Z SKIP [1] lib\psi4\tests\test_addons.py:838: Psi4 not compiled with dkh. Rebuild with -DENABLE_dkh; 2018-12-05T15:55:39.8051342Z SKIP [1] lib\psi4\tests\test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:3645,test,tests,3645,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['test'],['tests']
Testability,"====================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED. ================================ 16 passed, 2 skipped, 1 xfailed in 140.89 seconds =====",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710#issuecomment-305441942:1244,test,tests,1244,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942,1,['test'],['tests']
Testability,"====================================; platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json P",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:1434,test,tests,1434,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,"==================================================; platform linux -- Python 3.6.8, pytest-4.3.0, py-1.8.0, pluggy-0.9.0 -- /mnt/c/Users/shantigp/projects/psi4conda/bin/python; cachedir: .pytest_cache; rootdir: /mnt/c/Users/shantigp/projects/psi4conda, inifile:; collected 1024 items / 1002 deselected / 22 selected. ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 FAILED [ 18%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp LIBEFP: parameters for fragment ""NH3"" are already loaded; PASSED [ 22%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED [ 50%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c FAILED [ 59%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED [ 68%]; ../lib/python3.6/site-packages/psi4/tests/test_addons.py::test_resp PASSED [ 72%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 77%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:1307,test,tests,1307,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['test'],['tests']
Testability,"=====================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2563,test,testing,2563,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['test'],['testing']
Testability,==================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] ps,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13095,test,tests,13095,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,===================================================================== short test summary info =========================================================================; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:13: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:162: Not detecting module mrcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:186: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:233: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_a,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:12998,test,tests,12998,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,"> * Holger asked about correctness tests. Sorry if I was unclear. I only wanted a sentence about how correctness was tested (or which other code was followed) for completeness of the PR body. Just in case one has to track something down.; Maybe in this more trivial case it's not needed, I don't think I looked at the code changes then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072#issuecomment-767165337:35,test,tests,35,https://psicode.org,https://github.com/psi4/psi4/pull/2072#issuecomment-767165337,2,['test'],"['tested', 'tests']"
Testability,> - _A_ tests/fsapt1/fsapt-ref/fragB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-152 (0); > - _A_ tests/fsapt1/fsapt-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-153 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-154 (0); > - _A_ tests/fsapt1/fsapt-ref/geom.xyz; > https://github.com/psi4/psi4/pull/470/files#diff-155 (0); > - _A_ tests/fsapt1/fsapt-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-156 (0); > - _A_ tests/fsapt1/fsapt-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-157 (0); > - _A_ tests/fsapt1/fsapt-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-158 (0); > - _A_ tests/fsapt1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-159 (0); > - _A_ tests/fsapt1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-160 (0); > - _A_ tests/fsapt2/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-161 (0); > - _A_ tests/fsapt2/README; > https://github.com/psi4/psi4/pull/470/files#diff-162 (0); > - _A_ tests/fsapt2/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-163 (0); > - _A_ tests/fsapt2/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-164 (0); > - _A_ tests/fsapt2/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-165 (0); > - _A_ tests/fsapt2/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-166 (0); > - _A_ tests/fsapt2/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-167 (0); > - _A_ tests/fsapt2/fsapt-ref/QA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-168 (0); > - _A_ tests/fsapt2/fsapt-ref/QB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-169 (0); > - _A_ tests/fsapt2/fsapt-ref/ZA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-170 (0); > - _A_ tests/fsapt2/fsapt-ref/ZB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-171 (0); > - _A_ te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:18211,test,tests,18211,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,"> . > There is a rohf-bccd test at https://github.com/psi4/psi4/blob/master/tests/cc16/input.dat#L28 . If it's any help, bccd and bccd(t) all-electron in psi4 match that in cfour. (Though I did have to turn on orbitals=1 for cfour bccd(t) for rhf/uhf to allow it to match psi4. After moderate effort, I couldn't get cfour bccd to run with frozen-core, but I wouldn't rule out user error.); > ; > > Would taking a look at https://psicode.org/psi4manual/master/cc.html be also in-scope for this PR? I think that page never mentions that gradients are restricted to all-electron.; > ; > I agree documenting capability exceptions is weak across modules at the moment. I was hoping to fix that with the table above, which is autogenerated from calcs, not hand-assembled. Do you think more is needed?. Hmmm...the `cc_index` file refers to `cc16` as ""UHF-B-CCD(T)"", but the input file in that test appears to execute ROHF-B-CCD(T) twice. The `output.ref` file, on the other hand starts with a UHF initial guess, and then switches to ROHF. Strange that it still passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708#issuecomment-1243114814:27,test,test,27,https://psicode.org,https://github.com/psi4/psi4/pull/2708#issuecomment-1243114814,3,['test'],"['test', 'tests']"
Testability,"> . Created new test cases in the same input file, i.e. doing non-hybrid/hybrid+DISP/hybrid+FIXED in the same test file. I think this is the way to go since it is what we did when adding in the hybrid feature. Warning messages added in documentation and SAPT(DFT) output.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1279657542:16,test,test,16,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1279657542,2,['test'],['test']
Testability,"> ...Well, thanks Molpro. We have a legitimate ambiguity after all. :-). > cepa(0) stays lccsd for energy, gradient, etc. purposes. sounds good -- can avoid deprecation warnings. > Any time cepa(0) appears in an output file, we clarify what we're talking about. Explicitly saying ""Linearized CCD"" or ""Linearized CCSD"" is ideal. If we need to abbreviate, I've seen some Bartlett papers where they use LinCCD. Crawford has a good point about LCCD referring to localization. If we try to eliminate cepa(0) meaning lccd entirely, we create havoc with Bozkaya's papers. If we have a logging module, we print out a warning there too. * overall sounds good to add very specific text clarifying CCD/CCSD. I'm less concerned about linearized/local since psi has none of the latter.; * should try to keep output of cepa-0,1,2,etc. cohesive for fnocc; * I'd like to not disrupt the qcvars, presently e.g., `LCCD OPPOSITE-SPIN CORRELATION ENERGY`, `LCCSD TOTAL ENERGY`, but I'm not adamant.; * I'm less concerned about cohesiveness with UB papers. After all, once upon a time, the occ/dfocc code was ""using lccd for non-orbital-optimized and ocepa0 for orbital-optimized"". Any firm connections btwn code and paper can be cemented by pasting some DOIs. IMO, psi should try to be cohesive from the face, not from the lit perspective. > cepa is eliminated from dct. Andy put that in there years ago to facilitate comparison between Kutzelnigg's first stab at DCT and LCCD. Without getting into the theory weeds, that's not a useful comparison now, and it's going to be an even less useful comparison after I've published my next two papers. It's an awkward addition given the DCT logic. It's easiest to get rid of it and direct users to occ, dfocc, or fnocc. sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231:578,log,logging,578,https://psicode.org,https://github.com/psi4/psi4/issues/1872#issuecomment-616909231,2,['log'],"['logging', 'logic']"
Testability,"> 1. Fix the merge conflicts (annoying rebase). I'm not sure how much rebasing you want to do, but I think things are back to the state-of-the-world that we were discussing prior to #2743 . > 2. Determine what information in `print_details` is actually used. I want to retain print information that is actually used, but I can do away with the rest. Once we have that, we can assess if keeping a modified `RadialGrid` is the best way to keep the useful print information. (I think we've established that `r` and `wr` are used, but `order` is not?). ""Used"" is a funny word here. No tests when this print is removed, so it's not _so_ important that someone wrote a test to preserve it. Furthermore, the `order_` was _always_ wrong. The other elements weren't, though, but you have to set a pretty high print level to actually see anything (`v.cc` requires `print_ > 2`). . If by ""used"" you mean that the piece of information represented in the print is used downstream: `r` and `wr` are the primary candidates here. That said, they aren't used as-is -- they're dotted through other elements found by a lookup in `LebedevGridMgr` and `RadialGridMgr` to make `MassPoints` (see https://github.com/psi4/psi4/blob/9db9100564eaef5d02c952817a73c397db9d657b/psi4/src/psi4/libfock/cubature.cc#L3814-L3822). I'm not sure if we care about diagnostic print info on the intermediaries (the radii of shells around atoms we care about, and the number of angular points we end up picking for each shell). Maybe we do? If so, a struct seems like the most reasonable solution. I suppose, all-in-all, it's not so much data to carry around. Appending that data onto every `MassPoint` however feels like overkill (and that's the only other place to put it). . But we definitely should clean up/remove the rest of the old `RadialGrid` and `SphericalGrid`, as these seem to only cause confusion about where changes should be made. `RadialGridMgr` and `LebedevGridMgr` are the classes of Actual Importance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1275116304:581,test,tests,581,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1275116304,2,['test'],"['test', 'tests']"
Testability,"> 2. On the linked issue ([Wrong guess_mix when guess=sad #2410](https://github.com/psi4/psi4/issues/2410)), you said this is a ""tentative"" fix. Does that mean anything besides that the PR isn't accepted yet?. It means I was able to quickly identify the issue and throw together a simple fix, but not to test it ;) I still don't have a working Psi4 compile environment due to the libint2 incompatibility. Once that gets fixed, I'll have to push to get newer versions of Psi4 to compile again in Fedora.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2411#issuecomment-1016567123:304,test,test,304,https://psicode.org,https://github.com/psi4/psi4/pull/2411#issuecomment-1016567123,2,['test'],['test']
Testability,"> 7 is fairly tight unless your energy convergence thresholds are commensurately tight. I think we usually test in the 5-6 range... something we have talked about standardizing, but have yet to do so. I used 6 now and seems to work fine with the old ref values",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-502073114:107,test,test,107,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-502073114,1,['test'],['test']
Testability,> ; > ; > Thank you all for the responses. It was the first time the terminal gave me non English response. I also did not know the trick with dmesg indicated by @TiborGY. Please note that the kernel log (dmesg) will only show the OOM-killer messages if the *entire computer* ran out of memory (as in RAM+swap).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925261234:200,log,log,200,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925261234,1,['log'],['log']
Testability,"> > > An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?; > ; > > My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way.; > ; > I may not be following this right. I'd say the state of the psi4 active mol _during_ an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on _should_ be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt. OK, you changed my hasty mind on that. What concerns me is that the user may, in some instances, not realize that the default active molecule is the one that optking is acting on and changing. But the upside convenience wins, I agree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260085584:1047,test,tests,1047,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260085584,2,['test'],['tests']
Testability,"> > > Could also do an option like MAX_RADIAL_MOMENT, where all orders up to a given max order are computed just in case someone wants something higher than 4.; > ; > > Great suggestions @zachglick @jeffschriber, I will get them changed ASAP; > ; > If 2, 3, 4 are all that's ever wanted and there's trivial additional cost, I advocate always computing and storing them all. Fewer options, more cheap results always better. Good idea, @zachglick. Updated my code, tests all passed :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056#issuecomment-767181617:463,test,tests,463,https://psicode.org,https://github.com/psi4/psi4/pull/2056#issuecomment-767181617,1,['test'],['tests']
Testability,"> > Actually, after reviewing my code, I realized that this density screening only applies in the RHF case, I need to modify the code slightly to make it work with UHF. I derived an expression for the density contribution in the UHF case (the Schwarz contribution will be the same):; > > [Density Screening UHF.pdf](https://github.com/psi4/psi4/files/5804430/Density.Screening.UHF.pdf); > ; > Wait, you are screening with respect to the energy contribution? This leads to incorrect results, since the contribution to the Fock matrix can still be non-negligible even if the contribution to the exchange energy is small. The screening should therefore be based on; > ; > 1. the Coulomb contribution; > 2. the alpha and beta exchange contributions; > ; > If I remember correctly, many authors suggest doing Coulomb separately from exchange, since the range of the exchange integrals is much smaller than that of the Coulomb, while forming the exchange matrix is more costly than the Coulomb matrix due to the larger amount of permutations involved.; > ; > The difference between RHF and UHF screening should be trivial; instead of considering the density matrix |D/2|, you just take max(|Dalpha|, |Dbeta|) as your proxy. That makes sense, thank you Susi, I will modify the code (prob tomorrow), and rerun the UHF tests, as well as some RHF tests to make sure the RHF still works",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-758906841:1310,test,tests,1310,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-758906841,2,['test'],['tests']
Testability,"> > As a side comment, the benchmarks look pretty great, but it would be interesting to see how the benchmark results look with a system spread out three-dimensionally instead of a linear system.; > ; > Thanks, I have run additional tests on three-dimensional systems not shown here. On the [human insulin protein](https://www.rcsb.org/structure/2HIU) (405 heavy atoms), a HF/cc-pVDZ calculation with `COSX` is a bit more than twice as fast as the corresponding `DF` calculation. You're welcome! And that is a very nice result on the protein system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1119740205:27,benchmark,benchmarks,27,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1119740205,3,"['benchmark', 'test']","['benchmark', 'benchmarks', 'tests']"
Testability,"> > Do we need more test coverage? I haven't actually checked LDA instability analysis. Imagining a test is tricky.; > ; > Simple. Run a LDA calculation with the wrong occupations, and run the stability analysis which should reveal negative eigenvalues. That's a good start. To make it more stringent, could somebody do this exercise in QChem and report both the system and the instability eigenvalues? if Psi can reproduce those results, I'll be thrilled. (Please do the same for HF as well, so we can catch prefactor differences between Psi and QChem.) I'd do this myself, but Emory doesn't have QChem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1303494696:20,test,test,20,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1303494696,2,['test'],['test']
Testability,"> > From what I understood of the code, LinK is only used for incremental Fock builds.; > > However, the algorithm should also be useful for full Fock builds.; > ; > My code works for full Fock builds too (I will test this later). Of course it should, since full Fock is differential Fock with `delta P = P`. My point was just that the code is now using the non-LinK algorithm for the full build step...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187#issuecomment-855327981:213,test,test,213,https://psicode.org,https://github.com/psi4/psi4/pull/2187#issuecomment-855327981,1,['test'],['test']
Testability,"> > I don't reproduce a failure of tests/pytests/test_standard_suite.py::test_mp2_hessian_module on master. I don't have enough details to say more.; > ; > This test would need a recent qcel/qcng pair to pass. Andy's trying to update his. I'd be surprised if this PR is implicated.; > ; > @andyj10224, if you rebase as of this morning, the clang CI lane will work again. @loriab @JonathonMisiewicz I updated my qcel/qcng, and the mp2 hessian tests now pass. Now I just need to compile the docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946829083:35,test,tests,35,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946829083,3,['test'],"['test', 'tests']"
Testability,"> > I'm slightly confused. So COSX and Direct have different ""versions"" of incremental Fock build, and this PR has them use the same incremental Fock code?; > ; > Yes this is correct. Yeah, what Andy said is correct. I've been doing some benchmarking of different J build methods with the COSX method. When doing benchmarks on the DFJCOSK code currently present in Psi4, it often to take a notably higher number of iterations then expected to converge many of the calculations, especially when diffuse functions are in the basis set. After modifying the COSX code to use the ""Direct"" version of Incfock, the number of SCF iterations needs to converge goes down noticeably. It was in these timing benchmarks that we found the different Incfock implementation in COSX, and this PR is meant to remedy that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1219772523:238,benchmark,benchmarking,238,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1219772523,3,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"> > Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated.; > ; > I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms.; > ; > How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release. > I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect. All right, sounds like a plan! I will do this, then!. Also, Lori, to answer your question about samples, I have been editing them manually. Thank you for letting me know about their autogeneration!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815:46,test,tested,46,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310407815,10,['test'],"['test', 'tested', 'testing']"
Testability,"> > It appears that the current solidharmonics.cc is not used ANYWHERE in the Psi4 code.; > ; > Somehow solidharmonics.cc is getting used, because changing it changes the integral ordering (link is to the `gss` to `sss` PR: https://github.com/psi4/psi4/pull/2537/files#diff-76f4c1f378b6a48ede6c4f938378b54719f968680edca78453d9751e87cebbf9); > ; > EDIT: not necessarily a block on your plan, but that's not isolated code. Looks like I did a naive `grep -r ""solidharmonics.cc""` instead of its functions. My bad. In that case, refactoring solidharmonics.cc with my new code can serve as an effective test for my functions, but it does make it harder :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1209829926:597,test,test,597,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1209829926,1,['test'],['test']
Testability,"> > It looks like the diff is not clean: there are changes that don't appear to arise from this pull. There's also a merge conflict.; > ; > Yes, we're working on it. Much history in this branch. Ugh, just spent all night rebasing, should be ready now. I will test my code again tomorrow as a sanity check :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187#issuecomment-854300953:259,test,test,259,https://psicode.org,https://github.com/psi4/psi4/pull/2187#issuecomment-854300953,1,['test'],['test']
Testability,"> > LGTM, thanks for working on this. Any reason for not adding a test or two?; > ; > No tests came to mind as worth adding. If you have suggestions, I'll probably take them. Any one of the various failing SCF calculations where occupations break old invalid assumptions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619#issuecomment-1212029957:66,test,test,66,https://psicode.org,https://github.com/psi4/psi4/pull/2619#issuecomment-1212029957,2,['test'],"['test', 'tests']"
Testability,"> > Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?; > ; > It, and the others like it, tests absolute energies instead of relative ones. True. Could be moved to `pytests` though, so that the testing of DFT functionals is done in one place, with the exception of smoke tests... Edit: not in this PR, just as a future plan.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494047737:92,test,tests,92,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494047737,4,['test'],"['testing', 'tests']"
Testability,"> > So I now realize something - we may want to apply some of the benchmarking changes made in this PR to DFJCOSK, as well. It will increase the size of the PR, but the benchmarking changes in this PR currently only extend to DirectJK at the moment. Since DFJCOSK has two methods that it separately benchmarks, it will require a bit of retooling regarding some of the internals of the benchmarking framework. It should not have a significant impact on test_erisieve, however.; > ; > > Thoughts?; > ; > Unless the DFJCOSK changes would undo much of this PR, I think a follow-up PR would be best. DFJCOSK won't explicitly undo most of this PR, nicely enough, though it will require some changes to how the computed_shells member functions/variables are handled. Regardless, it won't lead to significant changes in test_erisieve, so a separate PR should work fine. And ultimately, the big point of this PR is to allow testing of density screening in test_erisieve without needing to directly construct and use separate TwoBodyAOInt objects, since the plan is to remove density screening from TwoBodyAOInt entirely. . Thank you for your feedback!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1152705815:66,benchmark,benchmarking,66,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1152705815,10,"['benchmark', 'test']","['benchmarking', 'benchmarks', 'testing']"
Testability,"> > The way I read the `_np_read()` function, that really is just numpy arrays (not classes or etc) - not a pickle file; perhaps try adding `allow_pickle=False` and see what breaks?; > ; > `allow_pickle=True` was the NumPy default behavior, so this PR just maintains that for Psi. `allow_pickle=False` is the new default behavior, which breaks Psi. See this Travis to log to see the test cases that fail: https://travis-ci.org/psi4/psi4/jobs/523119052. Yes, but that's crashing because of `_core_wavefunction_from_file()`, not `_np_read()`, right? Raw log shows that 14 tests fail because of the former, and none because of the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1607#issuecomment-485808406:368,log,log,368,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485808406,4,"['log', 'test']","['log', 'test', 'tests']"
Testability,"> > This should be a functional PR. Adding tests would still be good, but I'll gladly take suggestions on what this tests should be.; > ; > How about the cadmium complex from Hu&Yang, and UF4 from Kudin et al? These probably don't converge without this branch. Added and passing, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320#issuecomment-1012534074:43,test,tests,43,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012534074,2,['test'],['tests']
Testability,> > Total: 0.043 (MW) / 0.341 (MB); > > ; > > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster tests:; > > ; > > Start 9: cc1; > > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > > Start 10: cc10; > > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > > Start 11: cc11; > > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > > Start 12: cc12; > > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > > Start 13: cc13; > > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > > Start 14: cc13a; > > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > > Start 15: cc14; > > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > > Start 16: cc15; > > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > > Start 17: cc16; > > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > > Start 18: cc17; > > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > > Other tests are passing:; > > ; > > Start 1: adc1; > > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > > Start 2: adc2; > > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > > Start 3: casscf-fzc-sp; > > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > > Start 4: casscf-sa-sp; > > 4/294 Test #4: cas,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178205078:4115,Test,Test,4115,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078,1,['Test'],['Test']
Testability,"> @JonathonMisiewicz I think I did it right -- I added `MBIS VALENCE CHARGES` (`MBIS VALENCE WIDTHS` was already present) to the glossary and got things pulled in. Does this lgty now?. It should be. We need one other reviewer, and then to troubleshoot the failing test... The failure is unrelated to this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226#issuecomment-2457645305:264,test,test,264,https://psicode.org,https://github.com/psi4/psi4/pull/3226#issuecomment-2457645305,1,['test'],['test']
Testability,"> @JonathonMisiewicz the test in question is `dfmp2-ecp` which has been unreliable for some time, way before #1456 was merged. See #1433. I can't tell if we're disagreeing about facts or best practices. Peter added new tests of SCF energies to `dfmp2-ecp`. A few days ago, his new tests passed. Before the force-push, his tests failed. This tipped us off that _some_ other PR changed the energy to which frozen core ECP computations converge. Peter was able to reproduce the change in energies on a non-PR branch, confirming it. The first problem is that unless I missed something, there _shouldn't_ have been a PR that would change those energies. Apparently, there is one, and we don't know how many computations it afflicts. Probably just frozen core ECP, but there is a question mark on that one. Second, one of these two answers has to be wrong. I cannot believe this is a case of computations being insufficiently converged or landing on different states. If Psi is giving or was giving wrong answers, then at the absolute minimum, we have an obligation to let people know. And if this test is just meant to detect changes in energies without worrying about why, that needs to be said in the test itself.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452670933:25,test,test,25,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452670933,6,['test'],"['test', 'tests']"
Testability,"> @bozkaya should have an opportunity to look over the changes to reference energies in the tests. For his reference, most of the changes are going to be just in the sixth decimal place due to tighter convergence. The one exception are DF-OMP3 tests, where a bug caused fourth decimal place changes as described in the first post.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1772#issuecomment-568070767:92,test,tests,92,https://psicode.org,https://github.com/psi4/psi4/pull/1772#issuecomment-568070767,2,['test'],['tests']
Testability,"> @davpoolechem, tests/python/3-index-transforms/input.py isn't running correctly. Do you happen to understand how to edit it while still preserving the intent of the test?; > ; > ```; > Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to do in-core! Increase the amount of memory allocated to Psi4 or allow for out-of-core to be used.; > ```. After some quick tinkering, I was fix the issue by adding the line. `psi4.set_options({ ""scf_subtype"": ""auto"" })`. under the definition of `mol`. Setting `SCF_SUBTYPE` explicitly like this circumvents the switch to the `INCORE` MemDF algorithm in the DFHelper constructor that is causing the exception. . Cross-checking against the test output from another Psi4 build leads to basically no difference in the output files, specifically in MemDF header printout, so I believe the intent of the test is also preserved (i.e., there are no alterations into what configurations of MemDF are tested).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131#issuecomment-1936037904:17,test,tests,17,https://psicode.org,https://github.com/psi4/psi4/pull/3131#issuecomment-1936037904,5,['test'],"['test', 'tested', 'tests']"
Testability,"> @loriab might be a better place to recommend. But my first thought it `tests/pytests/test_mints.py`. This would be a new file, but a good place for libmints unit tests.; ; Would it be best to still test this function by contracting the exported dipole derivates with a density and then comparing results to the `dipole_grad()` function in mintshelper that contracts the dipole derivatives with an AO density before exporting to python side?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1799#issuecomment-597238265:73,test,tests,73,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-597238265,3,['test'],"['test', 'tests']"
Testability,"> A couple thoughts before a more thorough review:; > ; > Can you add some test cases to verify that this doesn't change the SCF energy? That set of test molecules from yesterday would be good, plus a few larger molecules; > ; > Could you do some timing to verify that this does in fact speed the SCF code up? A comparison of system size, density threshold, timing, and energy error would be good.; > ; > It appears that you're calculating integrals within the master loop and doing redundant work, possibly more than the original algorithm. I think you want to calculate all (NM|NM) shells outside of the loop and use those integrals within the loop. I will run a variety of tests and include that as a Google Sheets link. And your point about redundancy is good. I will get that fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743354001:75,test,test,75,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743354001,3,['test'],"['test', 'tests']"
Testability,"> A reference output file for the test would be great - I think we're still collecting those?. I agree; I just am unable to build Psi4 #2046, so I can't get you one for the new feature. It also looks like the CI system can't build Psi4 at the moment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-753708783:34,test,test,34,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-753708783,1,['test'],['test']
Testability,"> A subsequent PR will fix the linked issues (if not fixed by this PR) and add them as test cases once the fix is confirmed. On my to-do list, I just wasn't confident those would already be fixed by this PR. Thanks for the reminder.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619#issuecomment-1212032494:87,test,test,87,https://psicode.org,https://github.com/psi4/psi4/pull/2619#issuecomment-1212032494,1,['test'],['test']
Testability,"> AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with USE_OPENMP=1. This is correct. OpenBLAS used to spam `stderr` (i think) with a warning everytime you call a pthreaded BLAS inside an openmp region. I was expecting to see it for my test with the ""wrong"" openblas library, but maybe psi4 redirects it. Or i accidentally used USE_OPENMP=1 for both tests..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390199490:325,test,test,325,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390199490,2,['test'],"['test', 'tests']"
Testability,"> Alas, this is not something I can test easily myself, as it looks nontrivial to compile. If you do not need a debug version, they do offer a binary package. IIRC compiling it is not that bad if you already have icc/ifort set up, but does take a while to run.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866#issuecomment-613206104:36,test,test,36,https://psicode.org,https://github.com/psi4/psi4/issues/1866#issuecomment-613206104,1,['test'],['test']
Testability,"> Also it would be nice to have it documented exactly which flavor of ROHF-BCCD is implemented. Is it [_J. Chem. Phys. 107, 9980 (1997)_](https://doi.org/10.1063/1.475302) or something else?. No, but that was on my to-do list for a long time. The ""ROHF""-BCCD implemented should actually give the same results as a UHF-based BCCD (assuming no frozen core orbitals), but it's been a long time since I looked at that code. I don't even think we have a test case for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708#issuecomment-1243038562:449,test,test,449,https://psicode.org,https://github.com/psi4/psi4/pull/2708#issuecomment-1243038562,1,['test'],['test']
Testability,"> Are the code changes covered by a test? Didn't find 'dipole_field_type' tests on a quick look. Only one `if` branch is covered. The relevant keyword is `perturb_with`. While `sphere` is covered by `scf-coverge` (which passes), there is no test suite coverage on `dx` or `embpot`. While user-facing documentation lists the `perturb_with` keywords, the only documentation on what `dx` or `embpot` mean is a comment in-code that they read from external files. The specifications for the respective files `potential.dx` and `EMBPOT` are not documented. To write a test, I would either need to find somebody who knows the specification or back it out from the file parsing functions. While adding such tests is a worthy issue, I believe it's beyond the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2347#issuecomment-967044008:36,test,test,36,https://psicode.org,https://github.com/psi4/psi4/pull/2347#issuecomment-967044008,5,['test'],"['test', 'tests']"
Testability,"> Are there particular packages you'd need besides required, optimization, and dispersion?. No, so far, I am just exploring a few ideas/experiments (using qcengine mostly) and only require `psi4`. I can get `psi4` running, but integration with other internal packages is very challenging (if not impossible) without a binary-compatible c-f package. > Many of the deps are compiled or psi is using a slight fork or need windows work. do you have specialties? :-). I can only develop a package on my Linux machine. No problem to also build on the CI for osx/windows, but debugging is much harder on those platforms. I have experience building CMake based C/C++ packages on c-f (as long as it does not require diving too deep in the C/C++ code). > Roughly, my plan is to start compiling psi4 locally with c-f conditions and the very basic deps and post them to a psi4/label/cf channel. Libint2 must still pull from psi4 channel for the forseeable future. Glad to talk strategy, esp. after 12 Dec. Beside libint2, it looks like you are quite close here. I don't know if you are aware of it but you can easily run a c-f build (almost identical to the ones on the CI) using the `build_locally.py` script. See https://conda-forge.org/docs/maintainer/updating_pkgs.html#testing-changes-locally for the details. That script is available in the feedstock repo but also in the `staged-recipes` repo for package that does not yet exist.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605:1262,test,testing-changes-locally,1262,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605,1,['test'],['testing-changes-locally']
Testability,"> As a side comment, the benchmarks look pretty great, but it would be interesting to see how the benchmark results look with a system spread out three-dimensionally instead of a linear system. Thanks, I have run additional tests on three-dimensional systems not shown here. On the [human insulin protein](https://www.rcsb.org/structure/2HIU) (405 heavy atoms), a HF/cc-pVDZ calculation with `COSX` is a bit more than twice as fast as the corresponding `DF` calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1119732227:25,benchmark,benchmarks,25,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1119732227,3,"['benchmark', 'test']","['benchmark', 'benchmarks', 'tests']"
Testability,"> As for the NL and dispersion question, I also thought that was the plan, but I think both @loriab and especially @JonathonMisiewicz would prefer keeping the ""old"" behaviour. I'm easy either way, but please don't make re-apply the changes I reverted, again. Anything that changes the value of existing psivars should be its own PR, and we need to keep the dispersion part of the gradient handled the way it currently is for printing purposes. I'd need to see exactly which comment in the log we're talking about to be more detailed. I'm afraid I don't know what ""consolidate the -D and -NL behaviour"" means in this context.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963285974:489,log,log,489,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963285974,1,['log'],['log']
Testability,"> As long as the threads are only reduced during the PK steps it would only have benefits. No threads that do no work and allocate memory (Even if it doesn't matter in practice). This is all true. Any opposition I would have to reducing thread counts is from a principle standpoint - essentially having the code forcibly doing something in opposition to what the user wanted it to do. That said, this is a minor qualm on my part, and everything you said here is correct regardless. > The automatic selection probably ensures the in-core algorithm for these small calculations but could you test pk_algo = YOSHIMINE/REORDER and PK_NO_INCORE True as well? We probably have no test coverage.; Limiting nthreads in the PKManager https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L154 might solve headaches in the other algorithms. I saw a ntask < nthreads check in Yoshimine. Sure! I tested the Yoshimine and Reorder algorithms (with PK_NO_INCORE set to True) with a slightly modified form of the minimal_example.py file provided in issue https://github.com/psi4/psi4/issues/2760; and as it turns out, using PK_ALGO=REORDER leads to a segfault when using my implementation. Your suggestion of changing nthreads directly fixes that REORDER segfault issue as well. In light of that, I will be happy to use your suggested methodology for this PR!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2763#issuecomment-1298684102:590,test,test,590,https://psicode.org,https://github.com/psi4/psi4/pull/2763#issuecomment-1298684102,3,['test'],"['test', 'tested']"
Testability,"> As mentioned by @PeterKraus can you run the `dft-bench-interaction` and `dft-bench-ionization` tests? Feel free to modify those tests to only run the wPBE0 part. A bit surprised the tests pass previously as the results were taken from other programs. Which tests?; ```; $ pwd; /home/work/psi4/psi4/tests; $ grep -i LC-WPBE0 -R */input.dat; $; ```; If I grep for wPBE0 - another alias for the functional in psi4 - I get; ```; $ grep -i wPBE0 -R */input.dat; dft-custom-hybrid/input.dat:# ""wpbe0"" : build_wpbe0_superfunctional,; dft-custom-hybrid/input.dat:#edft = energy('wpbe0'); dft-custom-hybrid/input.dat:#compare_values(, edft, 5, 'Ne: wPBE0') ; dft-custom/input.dat:compare_values(reference_wpbe_4, func_call, 6, ""wPBE0 omega=0.4"") #TEST; dft-custom/input.dat:compare_values(reference_wpbe_5, func_call, 6, ""wPBE0 omega=0.5"") #TEST; dft-custom/input.dat:compare_values(reference_wpbe_6, func_call, 6, ""wPBE0 omega=0.6"") #TEST; ```; but that section isn't even testing wPBE0 but wPBE!; ```; set dft_omega 0.4; func_call = energy('SCF', dft_functional=""wPBE"") #TEST; compare_values(reference_wpbe_4, func_call, 6, ""wPBE0 omega=0.4"") #TEST. set dft_omega 0.5; func_call = energy('SCF', dft_functional=""wPBE"") #TEST; compare_values(reference_wpbe_5, func_call, 6, ""wPBE0 omega=0.5"") #TEST. set dft_omega 0.6; func_call = energy('SCF', dft_functional=""wPBE"") #TEST; compare_values(reference_wpbe_6, func_call, 6, ""wPBE0 omega=0.6"") #TEST; ```; Also, the file doesn't say anything about where the reference values have been taken from. E.g. Q-Chem doesn't appear to have these functionals, at least not with the Weintraub 2009 reference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260#issuecomment-424374131:97,test,tests,97,https://psicode.org,https://github.com/psi4/psi4/pull/1260#issuecomment-424374131,15,"['TEST', 'test']","['TEST', 'testing', 'tests']"
Testability,"> Can we have a test case, out of paranoia?. Sure thing, added.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2984#issuecomment-1589872664:16,test,test,16,https://psicode.org,https://github.com/psi4/psi4/pull/2984#issuecomment-1589872664,1,['test'],['test']
Testability,"> Can you elaborate on how DDD affects our ability to output to file?. Sure. For everything but analytic single points (effectively, any composite, finite difference, or many-body expansion), the individual pieces are sent to qcengine as a qcschema atomicinput job that returns a qcschema atomicresult (that has the usual output file printout as a field). So all the usual output is collected, but some of the most important stuff (the atomicresult) is in a dict, which would be weird for an output file. Also, the psi4 output file isn't a wonderfully behaved object for being opened and closed and reset, potentially for dozens of jobs running at the same time. It looks like the individual pieces outputs are being accumulated in the outfile now in DDD (see below). But logging _is_ a natural object for accumulating the results of potentially multiple libraries into one file or stream, so it seems the right trajectory to get started along for distributed calcs. ```; gof = core.get_output_file(). # EITHER ...; # from psi4.driver import schema_wrapper; # self.result = schema_wrapper.run_qcschema(self.plan()); # ... OR ...; self.result = qcng.compute(; self.plan(),; ""psi4"",; raise_error=True,; # local_options below suitable for continuous mode; local_options={; ""memory"": core.get_memory() / (2 ** 30),; ""ncores"": core.get_num_threads(),; },; ); # ... END. core.set_output_file(gof, True); core.reopen_outfile(); logger.debug(pp.pformat(self.result.dict())); core.print_out(_drink_filter(self.result.dict()[""stdout""])); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512#issuecomment-1082191447:772,log,logging,772,https://psicode.org,https://github.com/psi4/psi4/pull/2512#issuecomment-1082191447,2,['log'],"['logger', 'logging']"
Testability,"> Conflicts are trivial, so please lmk if you want to handle the rebase or website UI resolve, or if I should, @TiborGY . Thanks for the testing, conflicts resolved via the web-UI.; PS. Github decided to do a ""merge-master-into-this"" to resolve the conflict, LMK if that is a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2937#issuecomment-1810019071:137,test,testing,137,https://psicode.org,https://github.com/psi4/psi4/pull/2937#issuecomment-1810019071,1,['test'],['testing']
Testability,"> Could isapt2 vs fsapt2 be the confusion?. I think it is not because of this reason. I check the input file for isapt and faspt,respectively. The calculation I want to do is F-SAPT. But it reported error. But the example you test is I-SAPT. So I also tested the I-SAPT example but also got such error.; This error may all caused by this code:; ```val = np.einsum('i,ij,j', valueA, value, valueB)```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902428685:226,test,test,226,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902428685,2,['test'],"['test', 'tested']"
Testability,"> Could you add `dlpno-mp2` also to the CBS driver as new method? https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L743. I added DLPNO-MP2 to the CBS driver, as well as a CBS DLPNO-MP2 test",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-914671958:203,test,test,203,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-914671958,1,['test'],['test']
Testability,"> Could you elaborate on why tests are failing at all, and what numbers are differing? Are these Cartesian coordinates?. I poorly worded my explanation. I was attempting to say that the geometries are virtually the same but not numerically, they are both well converged. I assumed the discrepancy was just a numeric difference and there have been various tweaks as well over the last few years to the algorithm. There is 1 algorithmic difference I'd be concerned about, from looking at the two outputs. New optking doesn't consider the most recent step in the hessian updating procedure - cpp-optking did. I've found three pieces of logic that explicitly or implicitly prevent updating with the most recent step in all or specific cases. I'd have to ask @psi-rking if this is a bug or was changed due to some stability concern. > Is .log where all the optking detailed output goes now? I guess we ought to start collecting them. output.log, perhaps. But this can also be deferred to a grand regenerate-the-refs script and PR. Yes optking's detailed output goes to `.log` but it isn't strictly speaking necessary for the user to see the detailed logs I would say. However, if the test is failing it might be nice to have a more detailed optimization record to compare against if the optimizer is at fault.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262591435:29,test,tests,29,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262591435,7,"['log', 'test']","['log', 'logic', 'logs', 'test', 'tests']"
Testability,"> Could you post the whole test output please?; > ; > And do you have the `dftd3` binary available at run time?. Yep, it was a dftd3 issue. Rerunning tests now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-997262981:27,test,test,27,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997262981,2,['test'],"['test', 'tests']"
Testability,"> Currently, the automated tests fail due to an automatically not resolvable merge conflict. @loriab, is only a rebase an acceptable solution for such conflicts, or could I also just merge with the newest psi4/master?. Rebase preferred, but other `git` operations allowed so long as all the commits are still by you. (What can't work are PR branches where submitter's commits are repeated or interspersed with commits already in master.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1893#issuecomment-644524465:27,test,tests,27,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-644524465,1,['test'],['tests']
Testability,"> DESTDIR is always set during build and install. It contains the real stage directory path that cmake uses to determine where files are installed. You mean _you_ are setting `DESTDIR` as an environment variable, right? Whereas old psi used to use it explicitly (https://github.com/psi4/psi4/blob/1.2.x/external/upstream/libxc/CMakeLists.txt#L33), that string doesn't appear in the source now, and in an objdir, it only activates if the envvar is set, and I've tested with GNU Make that it isn't set by default. >> That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-). > What does this mean?; > Every port uses DESTDIR to supply stage directory. It is super well tested. I meant environment variables capable of influencing the psi4 build system have not been exercised -- I've stuck with CMake variables. I was not acquainted with user use of DESTDIR, as `CMAKE_INSTALL_PREFIX` has worked fine for users and other ports like Fedora (https://src.fedoraproject.org/rpms/psi4/blob/rawhide/f/psi4.spec#_134). > psi4 build adds DESTDIR to its inner stage directory which causes this problem. When I run an install and set envvar DESTDIR, I do see the two dirs under it that are your original issue. I'm glad to finally understand how this comes about, and I can look into this eventually. For now, I'd suggest either using `CMAKE_INSTALL_PREFIX` or the subdirectory (one of two) from env DESTDIR; either looks to contain the full installation directory you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325736040:461,test,tested,461,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325736040,2,['test'],['tested']
Testability,"> Details about how the integrals were computed should be the province of the JK object, not the HF wavefunction, so I disagree with creating this new variable as described.; > ; > Can we instead have `computed_shells_per_iter_` on the JK object and query the JK object, after the HF, for test purposes?. That should definitely be doable! Give me a bit, and that change can be made.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1112211696:289,test,test,289,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1112211696,1,['test'],['test']
Testability,> Do we have a test on the distributed multipoles?. Just one: https://github.com/psi4/psi4/blob/master/tests/gdma/gdma1/input.dat that's mirrored at https://github.com/psi4/psi4/blob/master/tests/pytests/test_addons.py#L14,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2968#issuecomment-1629734161:15,test,test,15,https://psicode.org,https://github.com/psi4/psi4/pull/2968#issuecomment-1629734161,3,['test'],"['test', 'tests']"
Testability,"> Do we need more test coverage? I haven't actually checked LDA instability analysis. Imagining a test is tricky. Simple. Run a LDA calculation with the wrong occupations, and run the stability analysis which should reveal negative eigenvalues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1303443124:18,test,test,18,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1303443124,2,['test'],['test']
Testability,"> Do you know if there are any published benchmarks for specific open source scientific computing packages such as psi4, pyscf, Qiskit, ect. that might enlighten the performance of these machines for specific applications?. For M1 and successor? Not that I am aware. Most of the bottlenecks are usually BLAS/LAPACK (and I/O but let's ignore that) so it often is enough to test the linear algebra library.; Among programs there are algorithmic choices/limitations that often make comparisons difficult if not pointless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956526354:41,benchmark,benchmarks,41,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956526354,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"> Does this fix #1125?. No. The ""number-of-roots"" logic will need to be changed in a different PR. The goal of this PR is to move over to Python with minimal behavior changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1314195915:50,log,logic,50,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1314195915,1,['log'],['logic']
Testability,"> Following up on an issue from the conference call:; > The fixed `phi_ao` functions are used to form the core Hamiltonian whenever an embedding potential is read from a file. While I haven't run anything, I would expect the bug fixed by this PR to cause correctness errors in SCF energies. Definitely agree with getting this fix in for 1.4. Hi Jonathon,. As requested, I cleaned up the code by removing the helper functions, as well as added a new test case (C test phi-ao).; I think having phi_ao as a python function will be useful to Psi developers and users, as it would be immensely helpful for the development of grid-based approaches. Thank you,; Andy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2210#issuecomment-877678443:449,test,test,449,https://psicode.org,https://github.com/psi4/psi4/pull/2210#issuecomment-877678443,2,['test'],['test']
Testability,"> For g2g, maybe just [this](https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfock/points.cc#L767) line needs to be changed?. Confirmed to work locally. This fixes *a lot* of the failed tests above 🎉",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537#issuecomment-1092824100:229,test,tests,229,https://psicode.org,https://github.com/psi4/psi4/pull/2537#issuecomment-1092824100,1,['test'],['tests']
Testability,"> For g2g, maybe just [this](https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfock/points.cc#L767) line needs to be changed?. That looks exactly right to me - good call. Switching `GG_SPHERICAL_GAUSSIAN` to `GG_SPHERICAL_CCA` should be all that's needed for the DFT tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2537#issuecomment-1092773639:309,test,tests,309,https://psicode.org,https://github.com/psi4/psi4/pull/2537#issuecomment-1092773639,1,['test'],['tests']
Testability,"> For the record, I'm not happy about dropping Py 3.7 support. The last time I tried to build Psi and Forte, using Py 3.7 was the only way I can get it to work. I can do some more investigation as to where the conflict is. oh, I hadn't heard that constraint. I wonder if it could be just a pinned dependency (e.g., hdf5) that could only be satisfied by chance with a 3.7 python. fwiw, the dropping 3.7 at this point is only a build-fewer-conda-packages consequence. if you change it back to `find_package(Python 3.7)`, 3.7 works fine. Let me know if I can run any tests/environments to help find out if this is a packages or actual language limitation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2455#issuecomment-1052346806:564,test,tests,564,https://psicode.org,https://github.com/psi4/psi4/pull/2455#issuecomment-1052346806,1,['test'],['tests']
Testability,"> From what I understood of the code, LinK is only used for incremental Fock builds.; > ; > However, the algorithm should also be useful for full Fock builds. My code works for full Fock builds too (I will test this later)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187#issuecomment-855284459:206,test,test,206,https://psicode.org,https://github.com/psi4/psi4/pull/2187#issuecomment-855284459,1,['test'],['test']
Testability,"> Have you tried with Python 3.11 yet?. update, I've built python 3.11 rc and numpy from source (first time ever). I did have to use the most recent v2.10.0 pb11. By turning off some diis (see below), I can get the variant on test tu1 to run through 6 SCF iterations (not to convergence) before segfaulting. major things still to investigate -- installing scipy, what lapack libraries for numpy is pip hiding from me, are the timer files closing cleanly when it throws the install-scipy-or-disable-accelerator message. and, of course, all this is on master, not the 1.3.2 of interest to you. . ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; set scf scf_initial_accelerator none; set diis off; energy('scf'). compare_values(-76.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1235824357:226,test,test,226,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1235824357,2,"['TEST', 'test']","['TEST', 'test']"
Testability,"> Hey all, I have updated the code to account for the two density matrices present in UHF.; > ; > I ran a couple of tests. UHF does just as well as RHF for similar test cases with respect to screening and parallel performance.; > ; > I have also discovered that density screening is not very effective for systems with diffuse basis sets (like aug-cc-pvdz). Link to my tests:. https://docs.google.com/spreadsheets/d/1PDt8LPHo_kWV-ukY3Zm24qJUc-QLf5Cv7CXCKkYzFvs/edit?usp=sharing",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-759736847:116,test,tests,116,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-759736847,3,['test'],"['test', 'tests']"
Testability,"> Hi @susilehtola, I've been following Libxc v5.1 https://gitlab.com/libxc/libxc/-/issues/186 with interest. When I compiled this branch (after rebase; including your fixes from the spring, thanks!) in late December against the the Libxc 5.0 branch, I got about the same Psi4 test results as recorded above -- lots of `Matrix::power: C_DSYEV failed`.; > ; > However, when I compile this branch against the new Libxc 5.1 hotfix branch, I don't even get that far. After disabling OpenMP, I get segfaults (dft-psivar):; > ; > ```; > (gdb) bt; > #0 0x00007ffff78351d7 in raise () from /lib64/libc.so.6; > #1 0x00007ffff78368c8 in abort () from /lib64/libc.so.6; > #2 0x00007ffff782e146 in __assert_fail_base () from /lib64/libc.so.6; > #3 0x00007ffff782e1f2 in __assert_fail () from /lib64/libc.so.6; > #4 0x00007fffed70db12 in xc_mix_func (func=func@entry=0x555556ca7500, np=np@entry=255, rho=rho@entry=0x555556e575c0, sigma=sigma@entry=0x555556ccda80, lapl=lapl@entry=0x0, tau=tau@entry=0x0, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, vlapl=0x0, vtau=0x0, v2rho2=0x0, v2rhosigma=0x0, v2rholapl=0x0, v2rhotau=0x0, v2sigma2=0x0, ; > v2sigmalapl=0x0, v2sigmatau=0x0, v2lapl2=0x0, v2lapltau=0x0, v2tau2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rho2lapl=0x0, v3rho2tau=0x0, v3rhosigma2=0x0, v3rhosigmalapl=0x0, v3rhosigmatau=0x0, v3rholapl2=0x0, v3rholapltau=0x0, v3rhotau2=0x0, v3sigma3=0x0, v3sigma2lapl=0x0, v3sigma2tau=0x0, v3sigmalapl2=0x0, v3sigmalapltau=0x0, v3sigmatau2=0x0, ; > v3lapl3=0x0, v3lapl2tau=0x0, v3lapltau2=0x0, v3tau3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho3lapl=0x0, v4rho3tau=0x0, v4rho2sigma2=0x0, v4rho2sigmalapl=0x0, v4rho2sigmatau=0x0, v4rho2lapl2=0x0, v4rho2lapltau=0x0, v4rho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; > v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798:276,test,test,276,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754743798,1,['test'],['test']
Testability,"> Hi Yi,; > ; > Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > se",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:180,test,testing,180,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,12,"['log', 'test']","['logic', 'test', 'testing', 'tests']"
Testability,"> Hi, did you get a chance to look at this further? So long as as big problems aren't uncovered in last week's rc3, we'd like to do the 1.4 release including the new databases this week. I think the items in [#2154 (comment)](https://github.com/psi4/psi4/pull/2154#issuecomment-870728272) were pretty small. Let me know if you need advice for the rebase. I need to run, some tests, if the database after the changes is still fine since I didn't manage to put up automated tests, yet.; Running, whole test set might add significant overhead to the already time-consuming test suite. Are there any recommendations on `pytest.mark` to qualify it for the `heaviest` league?; I imagine, running some small-basis SAPT0 for mb case, and UMP2 for CP/un-CP one. > remove no_com, etc. if not really; - [x] done . > clarify in docstrings whether 1.9 is R_eq or AA; - [x] done, I think. See the latest changes `R=0.9R_eq`. > allow uncp in ACTV rather than hardcoding both it and ACTV_CP to cp, unless there's a good reason not to; - [x] done, TBH I've worked exclusively with mid-bond version with CP, I don't know if unCP with mid-bonds makes even sense. Need someone with `unCP` experience to comment on that. > I don't recall why CI/Azure was failing on your last commit, but there were certainly points where it was psi4 master's fault, so you may need to rebase.; - [x] rebased. as for DRYifing two files, I don't think it's desired to couple these two files, as they should be in-principle, runnable standalone.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-878539595:375,test,tests,375,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-878539595,4,['test'],"['test', 'tests']"
Testability,"> Hm, GitHub is telling me that the only change is the addition of; > ; > ```; > set_chunks(4);; > ```; > ; > in `psi4/src/psi4/libmints/rel_potential.cc`. Well, yes. That's the one change that seems necessary. Just compare against [the dipole code](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/dipole.cc). L2 is **already** computing all the W0, Wx, Wy, Wz integrals because `libint2::Operator::opVop` on line 69 tells it to. There isn't a way to tell L2 to only compute W0 any more than there's a way to tell it to only compute the Y component of the dipole. The question is just ""how many buffers do we need to read from?"", which is what `set_chunks` is there for. The surprise is that Psi handles a mismatch between the number of chunks and the number of matrices silently. Presumably, sending in fewer buffers than chunks means that some generated integrals are never grabbed from L2 (I haven't checked this myself). What I know for sure is that sending in a single matrix just grabs buffer 0. Sending in a vector of Matrix indeed just grabs one buffer for each chunk. In my mind, the question is just what tests you all want for new integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3174#issuecomment-2142173440:1131,test,tests,1131,https://psicode.org,https://github.com/psi4/psi4/pull/3174#issuecomment-2142173440,1,['test'],['tests']
Testability,"> Hmmm...the cc_index file refers to cc16 as ""UHF-B-CCD(T)"", but the input file in that test appears to execute ROHF-B-CCD(T) twice. The output.ref file, on the other hand starts with a UHF initial guess, and then switches to ROHF. Strange that it still passes. I'm not quite following that, and I'm seeing both halves of cc16 pass independently. Below is my grep from a current run (albeit with this PR implemented). Looks like UHF executed twice, consistent with your explanation above. ```; >>> grep -e ""CCENERGY"" -e ""UHF"" -e ""ROHF"" ../tests/cc16/input.out ; #! ROHF and UHF-B-CCD(T)/cc-pVDZ $^{3}B@@1$ CH2 single-point energy (fzc, MO-basis $\langle ab|cd \rangle$ ); UHF Reference; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information).; @UHF iter SAD: -38.17324740294831 -3.81732e+01 0.00000e+00 ; @UHF iter 1: -38.90234369081286 -7.29096e-01 9.18281e-03 DIIS/ADIIS; @UHF iter 2: -38.91513874101264 -1.27951e-02 2.96594e-03 DIIS/ADIIS; @UHF iter 3: -38.91704192221893 -1.90318e-03 9.12227e-04 DIIS/ADIIS; @UHF iter 4: -38.91728769227936 -2.45770e-04 4.46390e-04 DIIS/ADIIS; @UHF iter 5: -38.91736714064817 -7.94484e-05 1.57015e-04 DIIS/ADIIS; @UHF iter 6: -38.91737800453875 -1.08639e-05 3.99078e-05 DIIS; @UHF iter 7: -38.91737866710707 -6.62568e-07 8.99030e-06 DIIS; @UHF iter 8: -38.91737869146961 -2.43625e-08 1.73779e-06 DIIS; @UHF iter 9: -38.91737869233113 -8.61519e-10 4.12144e-07 DIIS; @UHF iter 10: -38.91737869238197 -5.08393e-11 6.23767e-08 DIIS; @UHF iter 11: -38.91737869238317 -1.20082e-12 1.38186e-08 DIIS; @UHF iter 12: -38.91737869238320 -3.55271e-14 2.41469e-09 DIIS; @UHF Final Energy: -38.91737869238320; UHF NO Occupations:; 	Reference = UHF; * CCENERGY *; Reference wfn = UHF; 	Reference = UHF; * CCENERGY *; Reference wfn = UHF; 	Reference = UHF; * CCENERGY *; Reference wfn = UHF; 	Reference = UHF; * CCENERGY *; Reference wfn = UHF; Reference wfn = UHF; ROHF Reference; SCF Guess: Superposition of Atomic Densities via on-th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708#issuecomment-1243123504:88,test,test,88,https://psicode.org,https://github.com/psi4/psi4/pull/2708#issuecomment-1243123504,2,['test'],"['test', 'tests']"
Testability,> How is this output? [output.dat.log](https://github.com/psi4/psi4/files/8985763/output.dat.log). Perfect. ```; $ ./xc-get_data mgga_c_revscan 1 4.099718e-06 4.099718e-06 5.877423e-09 5.877423e-09 5.877423e-09 0 0 3.550767e-04 3.550767e-04; Unpolarized calculation; rhoa= 8.20E-06 sigmaaa= 2.35E-08 lapla= 0.00E+00 taua= 7.10E-04. 0: zk[ 0] = -NAN. 1: vrho[ 0] = -NAN; 2: vsigma[ 0] = -NAN; 3: vlapl[ 0] = 0.000000000000E+00; 4: vtau[ 0] = -NAN. 5: v2rho2[ 0] = -NAN; 6: v2rhosigma[ 0] = -NAN; 7: v2rholapl[ 0] = 0.000000000000E+00; 8: v2rhotau[ 0] = -NAN; 9: v2sigma2[ 0] = -NAN; 10: v2sigmalapl[ 0] = 0.000000000000E+00; 11: v2sigmatau[ 0] = -NAN; 12: v2lapl2[ 0] = 0.000000000000E+00; 13: v2lapltau[ 0] = 0.000000000000E+00; 14: v2tau2[ 0] = -NAN. $ ./xc-get_data mgga_c_revscan 2 4.099718e-06 4.099718e-06 5.877423e-09 5.877423e-09 5.877423e-09 0 0 3.550767e-04 3.550767e-04; Polarized calculation; rhoa= 4.10E-06 rhob= 4.10E-06 sigmaaa= 5.88E-09 sigmaab= 5.88E-09 sigmabb= 5.88E-09 lapla= 0.00E+00 laplb= 0.00E+00 taua= 3.55E-04 taub= 3.55E-04. 0: zk[ 0] = -NAN. 1: vrho[ 0] = -NAN; 2: vrho[ 1] = -NAN; 3: vsigma[ 0] = -NAN; 4: vsigma[ 1] = -NAN; 5: vsigma[ 2] = -NAN; 6: vlapl[ 0] = 0.000000000000E+00; 7: vlapl[ 1] = 0.000000000000E+00; 8: vtau[ 0] = -NAN; 9: vtau[ 1] = -NAN. 10: v2rho2[ 0] = -NAN; 11: v2rho2[ 1] = -NAN; 12: v2rho2[ 2] = -NAN; 13: v2rhosigma[ 0] = -NAN; 14: v2rhosigma[ 1] = -NAN; 15: v2rhosigma[ 2] = -NAN; 16: v2rhosigma[ 3] = -NAN; 17: v2rhosigma[ 4] = -NAN; 18: v2rhosigma[ 5] = -NAN; 19: v2rholapl[ 0] = 0.000000000000E+00; 20: v2rholapl[ 1] = 0.000000000000E+00; 21: v2rholapl[ 2] = 0.000000000000E+00; 22: v2rholapl[ 3] = 0.000000000000E+00; 23: v2rhotau[ 0] = -NAN; 24: v2rhotau[ 1] = -NAN; 25: v2rhotau[ 2] = -NAN; 26: v2rhotau[ 3] = -NAN; 27: v2sigma2[ 0] = -NAN; 28: v2sigma2[ 1] = -NAN; 29: v2sigma2[ 2] = -NAN; 30: v2sigma2[ 3] = -NAN; 31: v2sigma2[ 4] = -NAN; 32: v2sigma2[ 5] = -NAN; 33: v2sigmalapl[ 0] = 0.000000000000E+00; 34: v2sigmalapl[ 1] = 0.000000000,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1166410085:34,log,log,34,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1166410085,2,['log'],['log']
Testability,"> I add to use the conda-forge/label/libint_dev channel for libint. Yes, that's going to be the case for the foreseeable future until https://github.com/evaleev/libint/pull/259 gets reviewed and merged and released, as I can't in good conscience replace a released version with a PR version outside the psi4 channel. > Upon importing psi4 I noticed a bunch of prints that wasn't here before:. You guessed correctly -- I'm trying to debug some infernal Windows relative path behavior. > I tested the psi4 package on linux-64 using the staged-recipes artifacts and it works perfectly. . Great, good to hear!. ------. Note to anyone reading this thread seeking Mac packages: most of the iterations I skip Mac, so look for a CI run that took a long time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483939202:488,test,tested,488,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483939202,1,['test'],['tested']
Testability,"> I agree with all your PR headmatter text, but (1) I'm not quite following how the screening=None case is different in the code. If screening!=None, setup_sieve is calling c_s_p_i() (create_sieve_pair_info no args) which in turn calls c_s_p_i(bs) or throws. If screening==None, setup_sieve isn't calling any c_s_p_i in the parent class, but the frontmatter text suggests c_s_p_i() is getting called in the initialize_sieve() fn in the derived L2 class for the screening=None. If that's right, is the difference in the timing of the calls and whether some cutoff or threshold member data has been set? Or more likely I'm entirely missing something. The big difference is that the code associated with `c_s_p_i()` is called _at all_ when `ScreeningType::None` is used in the current PR, where it is _not_ in the current iteration of Psi4. . In both versions of the code, you are right in that the logic associated with `c_s_p_i()` isn't called within `setup_sieve()` in either this PR or current Psi4 when `ScreeningType::None` is used. However, because `c_s_p_i()` is only ever called within `setup_sieve()` currently, this means that the logic associated with `c_s_p_i()` is _never_ called when `ScreeningType::None` is used. This leaves a lot of values that are uninitialized because they are initialized by the `c_s_p_i()` logic; and these values are commonly needed in the various JK objects. This leads to a lot of breakage. . The `initialize_sieve()` function fixes this problem by adding a second point at which the logic for `c_s_p_i()` can be called. Now, the logic for `c_s_p_i()` can actually be executed at all with `ScreeningType::None`, given that `initialize_sieve()` is also called.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060#issuecomment-2165562096:896,log,logic,896,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165562096,5,['log'],['logic']
Testability,> I appreciate the many tests!. I only hope they're enough. there's 5 disp programs out there governed by 4 sets of logic and about 3 sets of defaults. :-),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791#issuecomment-1335930052:24,test,tests,24,https://psicode.org,https://github.com/psi4/psi4/pull/2791#issuecomment-1335930052,2,"['log', 'test']","['logic', 'tests']"
Testability,"> I assume this is also valid for DFT? If yes, it might be a good thing to also put in a DFT test case. I added a further test that uses `bp86-d2` from another test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-500950885:93,test,test,93,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-500950885,3,['test'],['test']
Testability,"> I deleted some testing L2 packages yesterday to make way for a bigAM one, and it looks like CI was using them. If you want CI to work now, you can make some of the edits in #3107 . Sorry for the trouble. Or we can solve it after that gets merged. Thanks for the heads up, it is no trouble at all, I think this build would fail anyways because I broke something in the DPD init. Very much a ""let's see if something breaks"" experiment, not ready for merge, etc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3114#issuecomment-1867908294:17,test,testing,17,https://psicode.org,https://github.com/psi4/psi4/pull/3114#issuecomment-1867908294,1,['test'],['testing']
Testability,"> I don't know where exactly... I'd have stored it in the adcc repo maybe, unless you have a suggestion where to put it. That's fine. Or if you want it here, maybe `tests/pytests/test_adcc/`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2944#issuecomment-1529757856:165,test,tests,165,https://psicode.org,https://github.com/psi4/psi4/pull/2944#issuecomment-1529757856,1,['test'],['tests']
Testability,"> I don't reproduce a failure of tests/pytests/test_standard_suite.py::test_mp2_hessian_module on master. I don't have enough details to say more. This test would need a recent qcel/qcng pair to pass. Andy's trying to update his. I'd be surprised if this PR is implicated. @andyj10224, if you rebase as of this morning, the clang CI lane will work again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946767530:33,test,tests,33,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946767530,2,['test'],"['test', 'tests']"
Testability,"> I don't see any issues cropping up. I should make some documentation updates though to inform users how optking inherits logging from psi4. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4. Great, thanks for checking, @AlexHeide !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935:123,log,logging,123,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935,2,['log'],['logging']
Testability,"> I have added a test case similar to the test case for the gradient. I prefer a simpler test: test VMFC _analytic hessian_ against VMFC hessian by _finite difference of single point_. I don't see a need for this test to test against its own implementation of the VMFC energy formula. That's a job for a different test. Including it in this one obscures the point of the test. > The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR. I disagree. It is _always_ within the scope of the PR to get the documentation to such a state that the problem the PR solves is intelligible. I am not asking you to document the entire nbody module. I am asking you to document the expected behavior of the function whose behavior you are changing - that is perfectly in-scope. `Sums gradient and hessian data from compute_list.` is a poor docstring. ""data"" could mean anything, and sums them to get what? ""Sum gradients/hessians from n-body computations to obtain the BSSE corrected gradient/hessian"" is much clearer. If that much isn't clear, then the purpose of this PR is not clear.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509:17,test,test,17,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003785509,16,['test'],['test']
Testability,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:43,assert,assertion,43,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585,9,"['Assert', 'assert', 'test']","['AssertionError', 'assertion', 'assertions', 'test']"
Testability,"> I may not be following this right. I'd say the state of the psi4 active mol during an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on should be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt. I want to make sure that the active molecule behavior is as expected. Whatever molecule the driver uses will be updated. This will be either the active molecule OR the passed molecule. If the molecule is passed the active molecule is not updated in any way. All the asserts pass here. ```python; import math. molecule h2o {; pubchem:water; }. molecule h2o2 {; pubchem:hydrogen peroxide; }. # quick comparison. h2o2 is active molecule; h2o2_nre = h2o2.nuclear_repulsion_energy(); active_nre = core.get_active_molecule().nuclear_repulsion_energy(). assert math.isclose(h2o2_nre, active_nre). # optimize h2o2 (active molecule) expect repulsion energy to match; E = optimize(""scf/sto-3g""); h2o2_opt_nre = h2o2.nuclear_repulsion_energy(); active_nre = core.get_active_molecule().nuclear_repulsion_energy(). assert math.isclose(h2o2_opt_nre, active_nre). # optimize h2o. nuclear repulsion does not match. active molecule is still h2o2; # Currently (next commit will fix) h2o2 would be optimized by this call. (optking side issue); E = optimize(""scf/sto-3g"", molecule=h2o); h2o_opt_nre = h2o.nuclear_repulsion_energy(); active_nre = core.get_active_molecule().nuclear_repulsion_energy(). assert math.isclose(h2o2_opt_nre, active_nre); ```; The whole wrong molecule being optimized thing is an optking side issue that is fixed on optking/master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262796555:594,test,tests,594,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262796555,5,"['assert', 'test']","['assert', 'asserts', 'tests']"
Testability,"> I meant to add last night that if you haven't already, please test with a mol with ghosts, dummy atoms, ecp's, away from std orientation, etc. (since you're handing over mol info to gauxc). . Done! Everything you suggested seems to check out as expected/desired. >And if you ask for a snlink gradient, it does something sensible? Thanks. From a quick test case, it looks like it uses `SNLINK` for the SCF energy, then switches to another JK build algorithm for the gradient scheme (I observed `DFJKGrad`). I suppose the question is whether this is reasonable or not. I don't consider this necessarily _unreasonable_ since composite JK builds algorithms can have specialized implementations for gradient calculations (e.g. COSX), but that's just my thoughts.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2175947793:64,test,test,64,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2175947793,2,['test'],['test']
Testability,"> I removed the MEMORY option from the ADC section, but now some tests using fnocc are failing, because apparently, the option was only provided by the ADC part in read_options.cc... What should I do about this? adcc does not take any input on available memory, so where should the MEMORY option live from now on?. My best guess at why fnocc is using MEMORY is so that it can get more memory under default conditions (1gb instead of 0.5gb). Better handling would probably be to have a `FNOCC_TRIPLES_FACTOR` to manipulate input memory. I think comment out those `MEMORY` blocks in triples and lowmemory_triples, and we'll put up an issue. Those aren't running by default, and fnocc doesn't own MEMORY (as you discovered).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1270159393:65,test,tests,65,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1270159393,1,['test'],['tests']
Testability,"> I see that the tests in tests/optking are nested and didn't get individual python files. Is this intentional / okay? Otherwise LGTM!. Yes, I deferred all the cleanup to #2555, and RAK is fine with deleting most.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549#issuecomment-1117822674:17,test,tests,17,https://psicode.org,https://github.com/psi4/psi4/pull/2549#issuecomment-1117822674,2,['test'],['tests']
Testability,"> I see that this PR passes without needing to update any tests. Do you think some QCFractal tests would be helpful to have, especially now that we have the distributed driver? I know psi4 has tests that use QCSchema, QCElemental, and QCEngine. Yeah, I think a QCFractal Snowflake test on each of findif, manybody, composite would good, provided solving the dependency env isn't too painful, since a database, etc. are needed. There's unlikely to be a conda pkg for the `next` qcf until September at least.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645#issuecomment-1199824123:58,test,tests,58,https://psicode.org,https://github.com/psi4/psi4/pull/2645#issuecomment-1199824123,4,['test'],"['test', 'tests']"
Testability,"> I simplified the omega setter interface for the `HJS_PBE` https://github.com/psi4/psi4/pull/1101/files#diff-375f534fffdbfb11f5ae38dace0c3ab71230ea1f9eed95df51d21fdfd2589e4aL218-R221 and that fixed custom and smoke. Is that what you had in mind with ""named parameter setter"", @susilehtola?. No. Use `void xc_func_set_ext_params_name(xc_func_type *p, const char *name, double par);` i.e.; ```; xc_func_set_ext_params_name(func, ""_omega"", value_of_omega);; ```; > Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. I've never seen anyone use that functional. It looks like it uses `GGA_X_FT97_B` and `GGA_C_FT97`. The latter appears to misbehave, https://gitlab.com/libxc/libxc/-/issues/275. > Are any of these now available in v5.1 that I should be activating?; > ; > ```; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4. LDA0 and CAM-LDA0 are introduced in the upcoming 5.1.0. . I can probably also add P86VWN; it's a trivial modification. https://gitlab.com/libxc/libxc/-/issues/277. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4. PBEsol has been in libxc for ages, since version 2.1.0 released in March 2014. I've opened up a ticket on LRC-BOP (https://gitlab.com/libxc/libxc/-/issues/276); it might not make it to the next release. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4. These have also been in libxc for ages, since version 4.0.0 in 2017. `MGGA_X_TAU_HCTH`+`MGGA_C_TAU_HCTH` and `HYB_MGGA_X_TAU_HCTH`+`MGGA_C_HYB_TAU_HCTH`. > SKIPPED [1] ../tests/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459:833,test,tests,833,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459,4,['test'],['tests']
Testability,"> I suspect the density screening algorithm is implemented incorrectly. I don't want to take focus away from this point, so I'm going to refrain from delving into the IFB just yet. Hi Jonathon, I have added test cases for density screening and incfock in the pytests/test_erisieve.py file. I have yet to user-facing documentation, but feel free to review the code I have currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-898682398:207,test,test,207,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-898682398,1,['test'],['test']
Testability,"> I think in that case the output should be adapted to avoid confusion as there are warnings printed. Maybe also 'regular algorithm' can have a different name, but it's what other programs do, I suppose. Yes, there's some graphs to prove it I should dig up. Thanks for reading the printouts -- I glanced at the logic but not the warnings. Now memory and algorithm are printed with ""high-memory""/""low-memory"" labels and without efficiency judgements.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-687637537:311,log,logic,311,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-687637537,1,['log'],['logic']
Testability,"> I think what we need to do is organize the non-XC custom functionals into a series of tests like tests/test-custom-gga where all of the custom functionals that we build in gga_superfuncs.py should be there. . I added tests this way. I still want to add some reference outputs.; ; > Are you on the slack channel?. I am not, I also don't see it mentioned anywhere? I can join if that helps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/877#issuecomment-357248136:88,test,tests,88,https://psicode.org,https://github.com/psi4/psi4/pull/877#issuecomment-357248136,4,['test'],"['test-custom-gga', 'tests']"
Testability,"> I want @CDSherrill to confirm that these changes to the SAPT parameters are meant to come in now.; > ; > The fact that you can change this parameter _without breaking tests_ indicate that our SAPT(DFT) tests are not good enough. I think we have manually set `set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp` in the previous SAPT(DFT) tests, and that's why changing the default value of `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` from `disp` to `fixed` won't break the tests. ; Should we update these tests with `SAPT_DFT_EXCH_DISP_SCALE_SCHEME` set to `fixed`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151:204,test,tests,204,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1165674151,4,['test'],['tests']
Testability,"> I would indeed like to, yes. 👍 . > The Psi4/GauXC interface supports using internally-built instances of GauXC. At first thought, we should be able to add it to Azure using the internal GauXC build process, right?. Right, internal build, by adding `ENABLE_gauxc=ON` about here: https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L135 . And please check there's a gauxc test somewhere in ctests or pytests that runs with smoke or quick -- the ones I noticed were marked long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2277999059:404,test,test,404,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2277999059,1,['test'],['test']
Testability,"> I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature.; > ; > Also please let the user know that LinK is active. At least I didn't see it in the test output files. I added just added the LinK flag in the output files. I also added a personal message in case someone has questions about this code in the future, they know who to bug :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293:272,test,test,272,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293,1,['test'],['test']
Testability,"> I'd appreciate a test for this one. [Here](https://stackoverflow.com/questions/23337471/how-to-properly-assert-that-an-exception-gets-raised-in-pytest) is a StackOverflow example of testing that an exception gets raised. Done. Although I've remained with ctest as opposed to pytest. I am not sure if there's a way to catch PSIEXCEPTION exceptions directly, or if RuntimeError is the closest we can get from within python.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2222#issuecomment-869862833:19,test,test,19,https://psicode.org,https://github.com/psi4/psi4/pull/2222#issuecomment-869862833,3,"['assert', 'test']","['assert-that-an-exception-gets-raised-in-pytest', 'test', 'testing']"
Testability,"> I'm building Libint2 via Psi4; I wouldn't have this error otherwise ;). The hartree-fock++ test case won't happen, but the eigen3 detection can still be a problem even with pre-built because the l2 c++ interface needs it to compile p4 against. > I'm waiting on Ed to release a stable updated version of Libint2, so that I can package it in Fedora. I've seen some clues that he's waiting on this. I need to get the mpfr and eigen3 detection fixed before I can start ready-to-merge negotiations. Also, I don't know if EFV is planning the sph-ordering-as-runtime-option for the 2.7 release so that psi can use the Fedora distribution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203:93,test,test,93,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203,1,['test'],['test']
Testability,"> I'm running through tests now to see if just... removing this entirely breaks anything. Short of `print_details` being accessible through some print settings, it doesn't appear that any of this is even exposed on the python side anyway?. Haha yes spaghetti code!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268651045:22,test,tests,22,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268651045,1,['test'],['tests']
Testability,"> I've got a branch that's only two days removed from master, and its smoke tests are clean. There is a problem with psi4 and qcng 0.28, but I'm sure you're on linux. Yeah but that's the point, I am not sure if this is related to the `std::vector` cleanups. Just wanted for someone to check whether master is still clean",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3028#issuecomment-1687167954:76,test,tests,76,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1687167954,1,['test'],['tests']
Testability,"> I've lost your `D_CONVERGENCE` comment, so answering here. Looks like expanding the functions that classify to SCF [here](https://github.com/psi4/psi4/blob/master/psi4/driver/driver_util.py#L96) will get the right 1.e-6 value. Thanks for the pointer. Now fixed with the following contraption:; ```python; if (procedures['energy'][method_name] == proc.run_scf; or procedures['energy'][method_name] == proc.run_tdscf_energy):; ```; so that TDSCF closely follows SCF. Probably there's a better way?. I'm also slightly puzzled at the following. TDSCF will fail to converge for non totally symmetric roots when running with symmetry _and_ density-fitting (which is by and large the default behavior for small-ish molecules, I believe) I thought this was a fluke for one particular system I was testing, but it does indeed show up consistently for irrep >= 1. The solver will either stall and die exceeding the maximum number of iterations (the subspace never grows after a certain, early iteration) or it will (falsely, I believe) identify a negative eigenvalue in the subspace representation of the Hessian (instability) and consequently fail.; Is there something in JK that I am misusing? @andysim @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644666491:791,test,testing,791,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644666491,1,['test'],['testing']
Testability,"> I've tested the mrcc interface within about a year. _But_ I only have the old mrcc (c. 2014) before it learned how to do SCF itself. I fuzzily remember being able to successfully run the tests with a version from a couple years ago, so 2020-22 era MRCC was OK I think, but I remember having to install the patches, otherwise neither Psi4 or Molpro would work with MRCC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070650542:7,test,tested,7,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070650542,4,['test'],"['tested', 'tests']"
Testability,"> IIRC speedups of seminumerical methods increase with larger basis sets, so you may want to benchmark those as well... You’re totally right. I have DZ timings, which agree with your statement. I need to run QZ eventually. Side note: the integral bound used in this PR is looser for higher angular momentum. I expect future improvements to this integral bound to make the performance of higher angular momentum basis sets even better.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1120037065:93,benchmark,benchmark,93,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1120037065,1,['benchmark'],['benchmark']
Testability,"> If you want, I can test CFMM with your new code to see if the multipole calculations are indeed faster. Just let me know. It's okay, I already have a script to benchmark the old code vs. the new one -- will report some of the benchmarks soon 👍",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077805490:21,test,test,21,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077805490,3,"['benchmark', 'test']","['benchmark', 'benchmarks', 'test']"
Testability,"> In cases where reference values are not matched perfectly (but the test should pass) is it better to loosen the comparison or update the reference value. I assume updating the reference value is the way to go but I want to have some record of asking before I start slightly changing reference values. > Secondarily, should the reference values be updated in general at some point so that users don't stumble across an instance where the value is slightly off and wonder why?. General guidance to for ref values to be from a tightly converged/optimized calc, then loosen the comparison check to accommodate the default/existing conv crit (https://psicode.org/psi4manual/master/add_tests.html#test-contents). Tests checking opt status at a certain cycle exempt of course. That's the principle, but do feel free to change as you see fit --- the reference values (agreed, preferred thing to change if the ref is the culprit) or the comparison crit (if it's the optimizer behavior that's the instigator). > Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. atol = 0.001 the difference is ~ 0.0017. These tests are using the default qchem convergence criteria ~ 3e-4 max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this. Thanks for the explanation. I'd view reference NRE values as less venerable. For one thing, only those that caused trouble were even updated when physical constants changed, iirc. > Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464:69,test,test,69,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262549464,5,"['Test', 'test']","['Tests', 'test', 'test-contents']"
Testability,"> Instead of testing for +-2 a one could add ""DFT_WEIGHTS_TOLERANCE"": -1.0 to the pytest (with new reference values) to remove numerical issues. In case the issue appears again. grand idea! I've done it here https://github.com/psi4/psi4/pull/2413/files#diff-ae2f922962c992ce2cab616a14af6da28727b696abada7f8b1c6f92bfd2cb4de",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446#issuecomment-1045129372:13,test,testing,13,https://psicode.org,https://github.com/psi4/psi4/pull/2446#issuecomment-1045129372,1,['test'],['testing']
Testability,"> Is the methodology by which COSX and LinK tested acceptable? Unfortunately, the reference energies used in scf5 are either canonical (i.e., non-DF) or DF, neither of which fully describe the COSX and LINK methods. The approach I took is to compare each COSX and LINK energy to the corresponding canonical energy with an atol of 1E-4. Any feedback on this particular approach to testing COSX and LINK would be appreciated. I think it'd be most useful to continue scf5 as a regression test. That is, record new refs for the in-between-conv-and-df algorithms collected at tight convergences, then check them against usual 6 decimal places. Then we'll know in future if code changes affect the algorithms. How are you generating the `samples/` files? If it's any other way than autogenerated via the docs build, please don't go to the trouble. We can catch the changes en masse before release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956:44,test,tested,44,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309119956,6,['test'],"['test', 'tested', 'testing']"
Testability,"> Is there a way to control the grid sparsity cutoffs, i.e. the basis function screening thresholds?. Yes, i believe `dft_basis_tolerance` does that job. This and my new `dft_density_tolerance` are at `1e-12` for my testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-612347115:216,test,testing,216,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-612347115,1,['test'],['testing']
Testability,"> Is there any test coverage of the new `messy` behavior? If not, could we add it?. It'll get tested in qcengine (PR not up yet). I'm writing some systematic tests for files, threading, etc. over there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2191#issuecomment-859902304:15,test,test,15,https://psicode.org,https://github.com/psi4/psi4/pull/2191#issuecomment-859902304,3,['test'],"['test', 'tested', 'tests']"
Testability,"> It would almost be better if type-A ghosts didn't exist and at parse-time any ""default"" ghosts are treated as type-B ghosts somehow. That's what I do for the json molecule record – there's a list `real = [True, False, True, False, False, False]` and a separate `fragment_separators = [3]` that decouples what would be the following in psi. Ghosting types A & B are collapsed. . ```; molecule {; C; @C; C; --; C; C; C; }; extract_subsets(1, 2); ```. > As for a new Molecule function to ensure the user knows what they're going to get, are you referring specifically to a molecular_weight function or more generally a function to return either the mass or Z val as either zero or real depending on input?. I think I've settled on recommending changing the signature of `Molecule.Z()` and `Molecule.mass()` to take a required argument `bool zero_ghost`. The recompile will force consideration of which was wanted everywhere (incl. downstream). At the same time, I think leave `CoordEntry.Z()` and `CoordEntry.mass()` alone in their probably inconsistent state. Most of the `Z()` calls in Mol are probably to `CoordEntry.Z()` and have the gh=0 factored into the logic. Should definitely get consensus tomorrow before diving in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363503391:1160,log,logic,1160,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363503391,1,['log'],['logic']
Testability,"> It would be good for me to write a test case for everything I check as part of DCT and Linear Dependencies #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, right now is a bad time to write the test since Fix GEMM errors in presence of linear dependencies #2232 will change the reference output. In the beginning I may have had (and spoken) dreams of rewriting all the ctests in psiapi for pytest, but I've since been talked down, and the plan is to allow each ctest input.dat to stay where it is and be wrapped in a pytest test (like psi4numpy). There'll have to be extra install steps to position the ctest inputs into the python module directory. Upshot is it's fine to continue choosing psithon or psiapi style for writing new tests, mostly depending on testing style convenience and whether the test would serve as an easy model for users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663:37,test,test,37,https://psicode.org,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663,14,['test'],"['test', 'testing', 'tests']"
Testability,"> It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?. I am using MKL and eigen build from source code.; here is the cmd line for cmake . `cmake .. -DCMAKE_INSTALL_PREFIX=./install -DEigen3_DIR=/home/yuyeqing/software/eigen3`. and I also export MKL and eigen in bashrc by . ```; export MATH_ROOT=""/home/yuyeqing/intel/oneapi/mkl/latest""; export LD_LIBRARY_PATH=""/home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:615,log,log,615,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,1,['log'],['log']
Testability,"> LGTM, awesome python side testing!; > ; > Do we have a plan to add this keyword to globals so that Psi4 users can start accessing this screening?. Would adding a global, user-specified boolean (something like `CSAM_SCREENING`, default false) be the best way to do this? It could be accessed by the JK object, much like `INTS_TOLERANCE` already is",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499#issuecomment-497102724:28,test,testing,28,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497102724,1,['test'],['testing']
Testability,"> LGTM, thanks for working on this. Any reason for not adding a test or two?. No tests came to mind as worth adding. If you have suggestions, I'll probably take them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619#issuecomment-1210703774:64,test,test,64,https://psicode.org,https://github.com/psi4/psi4/pull/2619#issuecomment-1210703774,2,['test'],"['test', 'tests']"
Testability,"> Looks like I'm still failing the Cholesky convergence test after a rebase. Well, you're not hitting the same error. This one is down the sequence at 1e-10, not 1e-7. And always by about same amt. . ``` Energy with Cholesky 1e-10: computed value (-230.6415254219) does not !; ! match (-230.6415254333) to atol=1e-08 by difference (0.0000000114).; ```. I wonder if this is associated with the new 2020.1 mkl set that's ~9 days old.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1895#issuecomment-632118171:56,test,test,56,https://psicode.org,https://github.com/psi4/psi4/pull/1895#issuecomment-632118171,1,['test'],['test']
Testability,> Looks like there's a trivial merge conflict. . I just fixed it to get the tests running.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1336978218:76,test,tests,76,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336978218,1,['test'],['tests']
Testability,"> Maybe the ANO basis set family would suffer from this? While I do not use them, IIRC they are notorious for having an extremely high number of primitives, and for slowing many integral packages to a glacial pace. You don't even need to go to ANO; just take the cc sets for transition metals. I ran a simple benchmark [here](https://mattermodeling.stackexchange.com/questions/3794/which-software-is-good-with-generally-contracted-basis-sets) for Zn2 with the cc-pVDZ basis set. Zn and Zn2 ran in 19 and 216 seconds of wall time with Psi4, compared to 0.7 and 1.4 seconds with PySCF, respectively.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-783485414:309,benchmark,benchmark,309,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-783485414,2,['benchmark'],['benchmark']
Testability,"> New LinK PR opened, comments on this are certainly welcome, but I still need to make my tests and update the docs. Ping me when it's done, and I'll review it then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-974342373:90,test,tests,90,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-974342373,1,['test'],['tests']
Testability,"> New info is that http://d3f8ykwhia686p.cloudfront.net/1live/intel/Intel_PUMag_Issue11_CBWR.pdf is relevant.; > ; > Test case is dz/df/uhf via `for i in {1..20}; do MKL_CBWR=AVX stage/bin/psi4 chgbasic.in ; done`; > ; > * always passes: `COMPATIBLE`, `SSE2`, `AVX`, `AUTO`; > ; > * mixed pass/fail: `MKL_CBWR` unset; > ; > * always fails: `SSE4_2`. New Intel feature: get the wrong result faster!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633633913:117,Test,Test,117,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633633913,1,['Test'],['Test']
Testability,"> No py-side changes needed for 3.9 to work? Nice!. nope! I tested it a month ago with c-f 3.9, and it built first time. now the py39 stack is available on defaults, so we're good to go. (there's a p4 conda package up now, but it's built from this branch, not master, so I'll pull it soon.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2063#issuecomment-743485611:60,test,tested,60,https://psicode.org,https://github.com/psi4/psi4/pull/2063#issuecomment-743485611,1,['test'],['tested']
Testability,"> Not related to the issue at hand, but since changes are made to it:; On Apple Silicon ARM the -march=native flag is not recognized with Apple's clang 13.; It could e.g. be disabled with an if (NOT CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL ""arm64"") for clang gnu (that's tested) but that would nest if statements even more. Thanks, @hokru, do you know if there's a flag for Apple Silicon ARM that should be used in place of `march=native`? The xhost logic block is running with `option_with_flags()` (activates the first flag in argument list that the compiler understands), but that's mostly for pretty printing now that there's more compiler logic and only one proposed flag per call. Having started down the logic path, I'm glad to add more cases for Silicon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997437932:267,test,tested,267,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997437932,4,"['log', 'test']","['logic', 'tested']"
Testability,"> Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface. I believe that is outside the scope of this PR, is there any way I can test for numerical correctness? (Possibly expose the functions to python and call a numpy function)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016:26,test,tests,26,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016,2,['test'],"['test', 'tests']"
Testability,"> Okay, that makes much more sense. I'm used to different parameter values being entirely different computations, not different checks on a single computation. Can you please add a docstring explaining what this test does, so that doesn't bite anybody else? Example: ""Test that the CABS and OBS spaces are orthonormal."" Renaming ""o1"" and ""o2"" to ""idx1"" and ""idx2"" would also make a lot of difference. Just want to make sure this one didn't get lost. 😅",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982#issuecomment-1714404565:212,test,test,212,https://psicode.org,https://github.com/psi4/psi4/pull/2982#issuecomment-1714404565,2,"['Test', 'test']","['Test', 'test']"
Testability,"> On the DDD side, stuff goes in the log that no longer appends nicely to the output (because its run in a separate process), so logging is on the generous side. Can you elaborate on how DDD affects our ability to output to file?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512#issuecomment-1082170261:37,log,log,37,https://psicode.org,https://github.com/psi4/psi4/pull/2512#issuecomment-1082170261,2,['log'],"['log', 'logging']"
Testability,"> One question, to all core developers, IMHO, we should change the default value for `df_scf_guess` from true to false, since optimized direct algorithms would be faster than density fitting for large systems. What do y'all think?. The only way you will convince me is with a thorough timings benchmark across a variety of system sizes. _That said_, such a change is outside the scope of this PR anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937738887:293,benchmark,benchmark,293,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937738887,1,['benchmark'],['benchmark']
Testability,"> Only things that come to mind are comment out `import forte` as unneeded and fix the quotes around `scf` (may just be font). Posting code by triple backtick rather than screenshot makes it possible to copy. Thank you. I tried what you suggested, but the result is still the same. Also, I ran the example that came with the psi4/tests folder, and it turned out to be the same, so I thought it might be something wrong with my installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2900#issuecomment-1471582665:330,test,tests,330,https://psicode.org,https://github.com/psi4/psi4/issues/2900#issuecomment-1471582665,1,['test'],['tests']
Testability,"> Other than seeing python test failures caused by psi4 being compiled with python3 not python2 assumed by the tests, nothing big comes out. I hope these are tests in `tests/python/` and `tests/json/` you're seeing this with (those are psiapi)? All psithon `ctest` tests should be using the python psi was built with, not the `which python` python. . Sure, I'll run a local full tests on this PR this weekend.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451607182:27,test,test,27,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451607182,7,['test'],"['test', 'tests']"
Testability,"> Perhaps you've got strict channel priority active?. I would suspect this is the case, if the channel order is changed to ; ```; channels:; - psi4; - conda-forge; ```; , I was able to install on linux and the tests were also passing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1164977280:210,test,tests,210,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1164977280,1,['test'],['tests']
Testability,"> Please elaborate on ""DFT gets it wrong"". I don't see the point in Psi testing how accurate DFT functionals are, relative to FCI. That's what makes it such a good test ;)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2371#issuecomment-986969900:72,test,testing,72,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986969900,2,['test'],"['test', 'testing']"
Testability,"> Reference values for PCM excitation energies can be found here. ~~I guess for the tests to work, the above stuff with `nonequilibrium` needs to be integrated first~~ 😅; Yes...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2006#issuecomment-693220292:84,test,tests,84,https://psicode.org,https://github.com/psi4/psi4/pull/2006#issuecomment-693220292,1,['test'],['tests']
Testability,"> Related, the `dft-custom-mgga` could be retired in favour of the interaction/ionisation tests, or is it covering something that those don't?. It, and the others like it, tests absolute energies instead of relative ones.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494039569:90,test,tests,90,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494039569,2,['test'],['tests']
Testability,"> Simplified test case; > ; > ```; > molecule dimer {; > 0 1; > Ne 0.0 0.0 0.0; > --; > 0 1; > Xe 0.0 0.0 3.0; > }; > ; > set {; > basis def2-svp; > print 2; > }; > ; > set guess core; > Eall = energy('scf'); > ```. I tried this with 1.6, including `ecpint`. _With_ ADIIS on, we are able to find the correct minimum readily. _Without_ ADIIS on, we see oscillatory convergenceat -316 E_h, well above the -457 E_h. ```; molecule LiF {; 1 1; Li 0.000000000 0.000000000 0.000000000; --; -1 1; F 16.000000000 0.000000000 0.000000000; }; set basis cc-pVDZ; set df_scf_guess false; set scf_type direct. energy('scf'); ```. This fails, per Susi's earlier report, with 1.6 and ADIIS off. With ADIIS on, we observe frequent occupation flips, but also no convergence. Tragically, I'm still unconvinced that the ECPs are in good shape.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1433#issuecomment-1133523511:13,test,test,13,https://psicode.org,https://github.com/psi4/psi4/issues/1433#issuecomment-1133523511,1,['test'],['test']
Testability,"> Since this is real trouble if a K-needing method doesn't get a K, maybe add a test of scf_type=dfdirj parametrized over BP86 and B3LYP that checks that the former runs and the latter errors informatively. Yeah, I can do that!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3001#issuecomment-1618978873:80,test,test,80,https://psicode.org,https://github.com/psi4/psi4/pull/3001#issuecomment-1618978873,1,['test'],['test']
Testability,"> So I now realize something - we may want to apply some of the benchmarking changes made in this PR to DFJCOSK, as well. It will increase the size of the PR, but the benchmarking changes in this PR currently only extend to DirectJK at the moment. Since DFJCOSK has two methods that it separately benchmarks, it will require a bit of retooling regarding some of the internals of the benchmarking framework. It should not have a significant impact on test_erisieve, however. > Thoughts?. Unless the DFJCOSK changes would undo much of this PR, I think a follow-up PR would be best.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1152702693:64,benchmark,benchmarking,64,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1152702693,8,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"> So far I think this looks great - type safe python with a lot of testing, and a great modular design for the solvers. . All AJ's work!. > I really like the line broadening plot generation. . Thanks, it took me an embarrassingly long amount of time to check that units of measure all made sense... > If there's some kind of provenance info that can be added to the json reference data file that would be handy. I have the raw G09 input and output files, together with the notebook that extracts the data from the formatted checkpoint files. Should I include that in the `pytests` folder?. @loriab I'm seeing some funny behavior (or most likely I don't understand what the normal behavior actually is); ```; molecule {; 0 1; O 0.000000 0.695000 -0.092486; O -0.000000 -0.695000 -0.092486; H -0.388142 0.895249 0.739888; H 0.388142 -0.895249 0.739888; }. set {; tdscf_states 10; scf_type pk; }. energy('td-scf/cc-pvdz'); ```; I'd expect this to converge the wavefunction to `D_CONVERGENCE` 1e-6 and then compute the 10 states to `TDSCF_R_CONVERGENCE` 1e-4 The thresholds seems however to be 1e-8 (and 1e-6) respectively. I can't figure out where `D_CONVERGENCE` gets tightened from what stated in the [table](http://psicode.org/psi4manual/master/scf.html#convergence-and-algorithm-defaults)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820:67,test,testing,67,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644236820,1,['test'],['testing']
Testability,"> Tarballs downloaded from GitHub are not git repositories. We use them in FreeBSD ports.; Nothing important should be hard-wired to Git during build/tests. I agree broadly, though I'd sacrifice it to get fine-grain versioning for cross-project communication if needed :-). The way psi is set up now, if the buildsys detects that it's not a git repo, it substitutes some generic most-recent-tag info and proceeds, so that one gets a working build. When I try, it works as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:150,test,tests,150,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,2,['test'],['tests']
Testability,"> Thanks for looking at stability. Probably later we can add a test for each of the stabilities that parameterizes all the scf methods and incfock combinations. You're welcome! This would probably be a good idea, especially since, from my testing, some issues pop up with stability tests UHF references depending on the SCF_TYPE method used currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540:63,test,test,63,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540,3,['test'],"['test', 'testing', 'tests']"
Testability,"> Thanks for taking this on Andy! It will be very useful to have IBOs outside of the FSAPT code.; > ; > I imagine a lot of psi4 users will want to export and visualize local orbitals. For this reason, we definitely want the IBOLocalizer exposed py-side as well, same as the other two localizers. See `export_mints.cc`; > ; > Something else we should think about (other devs please chime in) is how the various derived `Localizer` classes can be modified to have as similar method signatures as possible. The `BoysLocalizer` and `PMLocalizer` have a `void`-type `localize()` function and accessors `L()` and `U()`. The `IBOLocalizer` class has no accessors and instead returns a map of info from the `localize` function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent.; > ; > Lastly, I noticed that there aren't really any tests or docs on the various localizers (except for class autodocs). It would be super nice if we could get one or both of those. Hey Zach and all, I just updated the code to conform to the convention of the other localizers. I split the old multi-argument `localize` function in `IBOLocalizer` into the `localize` and `update_fock` methods inherited from the Localizer base class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467:889,test,tests,889,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467,1,['test'],['tests']
Testability,"> Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out. I don't have any particular concerns -- I just noticed your paper was on neutrals and the PR intro mentioned ""Not tested with external potentials."".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182:245,test,tested,245,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182,4,['test'],['tested']
Testability,"> Thanks. In that case, can we change the comment at the start of the file to mention that? As written, I thought the two energies were supposed to be identical. Sounds good. This is why I like parameterized pytest for seeing the input differences. @bennybp, did I get the why-different reasons right above? And if you're changing that comment, maybe regenerate the ref file w/o test fail:. https://github.com/psi4/psi4/pull/2905/files#diff-667f7008a6b3ab105b3130447305716990d91451c161ed7eaf1f04886bd32a00R361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2905#issuecomment-1479818207:379,test,test,379,https://psicode.org,https://github.com/psi4/psi4/pull/2905#issuecomment-1479818207,1,['test'],['test']
Testability,"> Thanks. The question of ""when do we _use_ an incremental build?"" needs to be settled (which it isn't yet - see Susi's comment) before I can approve this. Hi Jonathon, I just implemented Susi's suggestion about the `d_convergence`. I also updated the necessary tests (`density-screen-1` and `density-screen-2`).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-943469458:262,test,tests,262,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-943469458,1,['test'],['tests']
Testability,"> The addition of libint2 causes Psi4 to not build. Libint2 is trying to compile the hartree-fock++ test, which depends on Eigen3, which it is not finding for some reason even though I have it installed as a system package. Are you using the latest psi4-dev package (.dev22)? That adds the `mpfr` and `eigen` deps to the build environment. I definitely acknowledge that the `Libint2Config.cmake` is not handling `find_dependency` right for eigen and mpfr (really, gmp) yet. I do have cmake edits for those locally, but I have not yet bent cmake to my will. So having the conda packages in place patches the problem. Does your system package have a `Eigen3Config.cmake`? Maybe expand CMAKE_MODULE_PATH?. > Libint2 tests should be disabled in the Psi4 build, or the Eigen3 dependency added so that the build works even in the lack of a system package. All of Psi4 master is now running Libint2 -- any references to Libint1 or Libint1_t (a hack to allow both to coexist) are only waiting for removal. > (Note: libint2 is also suffering from the -march issue; the libint2 CMake files need to be updated.). Thanks for the reminder. I've just edited it locally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737386125:100,test,test,100,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737386125,2,['test'],"['test', 'tests']"
Testability,"> The below line still does an assert within the threaded code. I don't think that hurts any, just pointing out it's still there in case you wanted to remove it. It's already constrained, so I think it's harmless and can remain as a hint for refactoring. My guess is that that file would be helped by separate validation and work steps as many of the functions have defensive checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2082#issuecomment-764697017:31,assert,assert,31,https://psicode.org,https://github.com/psi4/psi4/pull/2082#issuecomment-764697017,1,['assert'],['assert']
Testability,"> The bug was introduced in #2839, which parallelized UKS gradients. I _assumed_ the feature was ready to go, somebody had just forgotten to enable it, but apparently not. The question is why was this not caught by the test suite..?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2941#issuecomment-1531183367:219,test,test,219,https://psicode.org,https://github.com/psi4/psi4/issues/2941#issuecomment-1531183367,1,['test'],['test']
Testability,"> The internal ""validated"" dictionary is in my view perfectly well documented here:; > ; > https://github.com/psi4/psi4/blob/72dabe0a889b2026a27a70481c79a2e93164f1dc/psi4/driver/driver_cbs.py#L1346-L1365. So, just to be clear, that applies for every stage in the entire dict? I thought that only applied to DFT stages because you mentioned it in Sec. 2a). > > Furthermore, if that function is only responsible for validating (like the name says), then why is it returning a completely new dictionary that isn't following the same specification? I suspect the function name is incorrect and the docstring is incomplete.; > ; > This is because of `""method/basis""` and `**kwargs` pathways, which have to be lined up somewhere. I thought rather than splitting the validation logic into the separate functions above, it's simpler to interpret both of these branches as an incomplete `cbs_metadata` which then needs to be validated anyway. Then I stand by my comment that the function name and docstring are incomplete in the current version. Neither mentions that the dict needs to be completed (and needs to lose at least one field).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-963289886:771,log,logic,771,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-963289886,2,['log'],['logic']
Testability,"> The only way this bug can re-appear is if geometric will change the way they process the atomic labels (which is what happened I suppose). Let me know if a test with Cl atom has to be added. No need, imo. It's psi sending atoms weirdly (for legacy case-code-is-longwinded-in-old-c++ reasons), not geometric expecting atoms weirdly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2872#issuecomment-1421284934:158,test,test,158,https://psicode.org,https://github.com/psi4/psi4/pull/2872#issuecomment-1421284934,1,['test'],['test']
Testability,"> The pcg_convergence behavior is a change for the better. Your analysis of the issue is right, but I'd rather couple pcg_convergence to r_convergence, how tightly the residual equations are satisfied. Ok, tying to `r_convergence` works great and saves on PCG iterations. Average over 18 aug-cc-pvdz tests w/default convergences:; * original `pcg_convergence = 1.e-6`, 5.9 iter; * first proposed `0.1 * e_convergence = 1.e-9`, 10.2 iter; * new proposed `0.01 * r_convergence = 1.e-7`, 7.8 iter . While this works nicely at default convcrit, it's not getting changed if a user much-tightens e_conv. But I guess that's consistent with other modules.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-676514270:300,test,tests,300,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-676514270,1,['test'],['tests']
Testability,"> The test that is currently failing is a test in `gcp/pbeh3c/`. This is due to an optking side issue where the `CustomHelper` class being used by optking is not accepting a `psi4.core.Molecule` the type checking was looking for `qcdb.Molecule`. As a backup optking defaulted to psi4's active molecule.; > ; > This is the call. `E = optimize('pbeh3c/def2-msvp', molecule=unopethene)`; > ; > optking takes the molecule here in the driver and uses a default fallback instead: ` opt_object = optking.opt_helper.CustomHelper(molecule, params=optimizer_params)`; > ; > The type check will get changed in optking to include `core.Molecule`. An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?. My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260048655:6,test,test,6,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260048655,4,['test'],['test']
Testability,"> The way I read the `_np_read()` function, that really is just numpy arrays (not classes or etc) - not a pickle file; perhaps try adding `allow_pickle=False` and see what breaks?. `allow_pickle=True` was the NumPy default behavior, so this PR just maintains that for Psi. `allow_pickle=False` is the new default behavior, which breaks Psi. See this Travis to log to see the test cases that fail: https://travis-ci.org/psi4/psi4/jobs/523119052",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1607#issuecomment-485806973:360,log,log,360,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485806973,2,"['log', 'test']","['log', 'test']"
Testability,"> There is 1 algorithmic difference I'd be concerned about, from looking at the two outputs. New optking doesn't consider the most recent step in the hessian updating procedure - cpp-optking did. I've found three pieces of logic that explicitly or implicitly prevent updating with the most recent step in all or specific cases. I'd have to ask @psi-rking if this is a bug or was changed due to some stability concern. Interesting. This does not ring a bell for me. I take the question to be ""given a hessian and the current forces (beyond the first step) should you update the hessian with those forces before using them to calculate the step?"" Can you point to the code? IDK, probably best answer is whatever works better in practice and doesn't cause problems. Actually, it's possible I did this because I learned to avoid hessian updating when displacements are very small (or the geometries are very close). Perhaps I didn't want to update hessian until I knew the step size.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262708139:223,log,logic,223,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262708139,2,['log'],['logic']
Testability,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:1152,test,testing,1152,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672,1,['test'],['testing']
Testability,"> This all looks good to me. Let us know when this is ready to merge. Will do! I think I want to run a quick final test set with the DFJLinK PR merged in, to make sure nothing broke. Then, it should be good to go!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1332396372:115,test,test,115,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332396372,1,['test'],['test']
Testability,"> This is a nice feature! Is there a good place (perhaps a docstring) to explicitly state that DIIS is now compatible with ambit tensors?. Added. Some changes were requested in the `ambit` PR, so I'll need to double-check that the `forte` tests still work before I can merge this in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2505#issuecomment-1079771361:239,test,tests,239,https://psicode.org,https://github.com/psi4/psi4/pull/2505#issuecomment-1079771361,1,['test'],['tests']
Testability,"> This is fantastic Max! I really like the generalized `MultipoleInt` class. I'm good with options (b) and (c). I think that `DipoleInt` and `QuadrupoleInt` classes which function as light wrappers around `MultipoleInt` are more user-friendly than requiring users to pluck the appropriate integrals out of the `MultipoleInt` return.; > ; > Have you done any performance comparisons between the new MD code and the old OS code? I don't know if one is expected to be faster than the other. It would be good to do some simple timings (maybe one low angmom system and one high angmom system?) before completely ditching the OS code. @maxscheurer If you want, I can test CFMM with your new code to see if the multipole calculations are indeed faster. Just let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077778935:661,test,test,661,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077778935,2,['test'],['test']
Testability,"> This is really cool to see and looks very good overall. Can you describe the testing process in more details and what you are comparing to to ensure the overall implementation is correct?. So in general, we have so far tested for total interaction energy against CCSD(T)/CBS benchmark on S22, and separate SAPT terms against SAPT(CCSD) results provided by Korona, Mol. Phys. 111, 3705(2013). We are planning to add S66 and SSI into the tests, but we would use SAPT2+3(CCD)δMP2 as the benchmark for individual terms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-662022217:79,test,testing,79,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-662022217,5,"['benchmark', 'test']","['benchmark', 'tested', 'testing', 'tests']"
Testability,"> This lgtm after some whitespace tidying for clarity. Would it be useful to add a check to existing tests of each of the JK classes that can use incfock along the lines of `compare(1, variable(""SCF ITERATIONS"") < 15.0, ""incfock efficient"")`?. Thanks; whitespace issues cleaned up!. Regarding the test you suggest, I do think that is a good idea. In principle, if we wanted to measure IncFock efficiency in a test, it might be better measured using a difference in SCF iteration counts between IncFock and corresponding non-IncFock runs, rather than using a raw SCF iteration count for the IncFock run. But none of the tests, as far as I am aware, have both IncFock and non-IncFock runs for the same SCF method executed simultaneously. Your suggested method works with the current tests, and it should still work quite well for testing IncFock efficiency since it will catch any cases where IncFock causes serious convergence issues. I will implement it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404:101,test,tests,101,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404,6,['test'],"['test', 'testing', 'tests']"
Testability,"> This looks great already and I'm looking forward to trying it out. I have a couple of minor comments, though. Also, can GeomeTRIC do TS searches? If yes, perhaps a test would be good. Thanks Peter, your comments are very helpful! I don't think transition state searches are implemented yet, although I see that there is a PR in the GeomeTRIC repo:; https://github.com/leeping/geomeTRIC/pull/107",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-609231547:166,test,test,166,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-609231547,1,['test'],['test']
Testability,"> This makes sense, but I would highly recommend an explicit test that rebuilds various quantities at this point.; > ; > Thanks for finding and fixing!. That's a good idea, I updated the test",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2112#issuecomment-782913552:61,test,test,61,https://psicode.org,https://github.com/psi4/psi4/pull/2112#issuecomment-782913552,2,['test'],['test']
Testability,"> This particular method doesn't even allow the user to change the basis set, so by this logic, it should crash whenever the user specifies a basis set, too. This would be, to me, the expected behaviour, and should be applied consistently for all ""composite"" methods - including `pbeh-3c`, `hf-3c`. Because if you specify a basis different than def2-msvp for `pbeh-3c`, it's no longer `pbeh-3c`!. I'm happy to tackle this one once we agree what to do here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1530#issuecomment-482926747:89,log,logic,89,https://psicode.org,https://github.com/psi4/psi4/issues/1530#issuecomment-482926747,1,['log'],['logic']
Testability,"> This should be a functional PR. Adding tests would still be good, but I'll gladly take suggestions on what this tests should be. How about the cadmium complex from Hu&Yang, and UF4 from Kudin et al? These probably don't converge without this branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320#issuecomment-1012333634:41,test,tests,41,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012333634,2,['test'],['tests']
Testability,"> Three hours and nine minutes, according to the timestamps I have for relevant events. I believe the build ran on a 32-thread (16-core) intel broadwell (with ample memory to avoid paging, for however much that helps), and the build was the only event happening on the machine at that time. (I am a little unsure, though, as it's a build-server, and I don't have any way of telling who else might've submitted a build job to the machine at that time. It was ~1AM on a Saturday, though, so probably just me). Also, the .so file generated was 925MB, if that's of any interest. Thanks for the info. It must be the Intel compiler and multiarch flags that lengthen my builds by an order of magnitude. > Should I worry at all that the tarball represents a WIP in terms of the actual integral files? Or does the trial status only regard the configuration?. I expect the integral files in that tarball to be perfectly good. I've checked my local diff again, and nothing else should be harmful. One caveat is that the integrals author generally dissuades building AM>7, so I had to defeat those checks, but I know people who have built higher than that tarball (albeit different versions of the code) without known ill effects. If you've got an `.so`, and psi4 passes a few tests, I think you're good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133805493:1265,test,tests,1265,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133805493,1,['test'],['tests']
Testability,"> To add to this issue further, a lot of my tests with def2-TZVPPD either a) fail to converge entirely or b) hang indefinitely. I am also seeing this with psi4 1.9 as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-1969516458:44,test,tests,44,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-1969516458,1,['test'],['tests']
Testability,"> To test this feature, I have been comparing the gradient_on_charges with the gradient_on_atoms, since they should sum up to zero along each coordinate. It's not currently possible to get the gradient_on_atoms directly from the ExternalPotential, so I have been testing this locally by subtracting the gradient of the wfn (SCF in the presence of an ExternalPotential) with the ExternalPotential set to None from the gradient of the wfn with the ExternalPotential. I can add my local test to the test suite or I can write it into an existing test; which would make more sense?. I see what you mean -- you'd need `SCFDeriv::gradients_` to be exported to get at the `gradient_on_atoms` array. If that'd be generally useful, we could do it. But if it's just for testing, your procedure sounds good. Either way on new test or adding that extra computation and check to an existing extern* test. If you have a different molecule (we're stuck on water and N2), it might be nice to have a new test for variety. If you do do a new test, the procedure is to make a new dir in `tests/`, copy over the CMakeLists.txt, test_input.py, and input.dat from an existing extern test. Edit the name and the input.dat contents, and register the test in `tests/CMakeLists.txt`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188:5,test,test,5,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1833340188,14,['test'],"['test', 'testing', 'tests']"
Testability,"> Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Changes ORBSYM (the symmetry of each orbital) from Psi4's internal; > convention of ordering irreps to the traditional FCIDUMP ordering; > - Adds ISYM (the symmetry of the overall wavefunction); > - Updates the fcidump test to match new ordering; >; > Questions; >; > - Does this change in convention break anything in Psi4? (Or anything; > that uses Psi4?); > - Since I altered the tests to match the output, how to verify; > correctness of this change?; >; > Checklist; >; > - All or relevant fraction of full tests run; > <http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests>; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1453; > Commit Summary; >; > - added helper function, correct ORBSYM output; > - added isym to fcidump, updated tests; >; > File Changes; >; > - *M* psi4/driver/p4util/fcidump.py; > <https://github.com/psi4/psi4/pull/1453/files#diff-0> (29); > - *M* tests/fcidump/Ne.6311G.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-1> (3); > - *M* tests/fcidump/Ne.C1.6311G.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-2> (1); > - *M* tests/fcidump/Ne.C1.cc-pVDZ.UHF.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-3> (1); > - *M* tests/fcidump/Ne.cc-pVDZ.UHF.INTDUMP.ref; > <https://github.com/psi4/psi4/pull/1453/files#diff-4> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1453.patch; > - https://github.com/psi4/psi4/pull/1453.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/1453>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qdjvy0hVobCbhOq3qA4biT25rt88rk",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1453#issuecomment-451294754:1354,test,tests,1354,https://psicode.org,https://github.com/psi4/psi4/pull/1453#issuecomment-451294754,1,['test'],['tests']
Testability,"> Two comments about lines that weren't changed:; > ; > [psi4/psi4/driver/driver_cbs.py](https://github.com/psi4/psi4/blob/a658c8e50e6d5d7bde2b8058b33e78f98f800db3/psi4/driver/driver_cbs.py#L1910-L1912); > ; > Lines 1910 to 1912 in [a658c8e](/psi4/psi4/commit/a658c8e50e6d5d7bde2b8058b33e78f98f800db3); > # Drop out for props and freqs ; > if ptype in [""properties"", ""frequency""]: ; > raise ValidationError(""%s: Cannot extrapolate or delta correct %s yet."" % (ptype.title(), ptype)) ; > ; > We shouldn't be dropping out for frequencies anymore. Fair point. I changed the raw 'frequency' function too, to be a true wrapper around 'hessian', that code is just a left-over. Changed. > [psi4/psi4/driver/driver_cbs.py](https://github.com/psi4/psi4/blob/a658c8e50e6d5d7bde2b8058b33e78f98f800db3/psi4/driver/driver_cbs.py#L1940-L1944); > ; > Lines 1940 to 1944 in [a658c8e](/psi4/psi4/commit/a658c8e50e6d5d7bde2b8058b33e78f98f800db3); > if len(method_list) > 1: ; > cbs_kwargs['delta_wfn'] = method_list[1] ; > cbs_kwargs['delta_basis'] = basis_list[1] ; > if 'delta_scheme' in kwargs: ; > cbs_kwargs['delta_scheme'] = kwargs['delta_scheme'] ; > ; > It would be good to put a comment here explicitly saying that `_parse_cbs_gufunc_string` should enforce that `len(method_list)` can only be 1 or 2. The logic confused me for a few minutes, on first read. I'll edit the docs. The idea is that one usually only specifies one ""delta correction"" in a string, ie:; ```; mp2/cc-pv[tq]z+D:ccsd(t)/cc-pvtz; ```; as opposed to trying to do two delta corrections in a ""method/basis"" syntax (which is not supported):; ```; hf/cc-pv[q5]z+D:mp2/cc-pv[tq]z+D2:ccsd(t)/cc-pvtz; ```; Folks that want to pile on the deltas can use the old interface (with scf, corl, delta and delta2 stages) or the cbs_metadata interface, which doesn't have a limit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235#issuecomment-426364793:1296,log,logic,1296,https://psicode.org,https://github.com/psi4/psi4/pull/1235#issuecomment-426364793,1,['log'],['logic']
Testability,"> We have no test coverage on the `DFT_DO_DHF` keyword, and this PR changes its behavior.; > ; > I'm going to request a _separate_ PR that adds this test coverage. That PR must be merged in first, so that we can be sure this PR is not changing the results from that keyword. Is a few new test cases everything that new PR should have, or should I cherry-pick the changes related to the `DFT_DO_DHF` keyword in this PR and apply to that one?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1282865700:13,test,test,13,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1282865700,3,['test'],['test']
Testability,> What are your conclusions from the data?. Density Screening usually is okay up to 10^-8 screening. Have not found any cases in all my tests where it is not okay. The only place this would be problematic is in a CrystalLattE style application.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-752967718:136,test,tests,136,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-752967718,1,['test'],['tests']
Testability,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:816,test,test,816,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755,4,['test'],['test']
Testability,"> What's the effect, does this leave the temporary files hanging?. Probably yes, adding to the misc temp files from pcm https://github.com/psi4/psi4/blob/master/tests/pytests/conftest.py#L52-L53 . I guess we could try to add these to on-exit like the numpy files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2972#issuecomment-1604327835:161,test,tests,161,https://psicode.org,https://github.com/psi4/psi4/pull/2972#issuecomment-1604327835,1,['test'],['tests']
Testability,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:8,test,testing,8,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603,8,['test'],"['test', 'testing']"
Testability,"> Would y'all like this PR to include updated output.ref files for the tests or would a separate test updating PR be better? I don't see anything in the"" adding tests documentation"" about reference log files. I can include those as well if desired. It will just greatly increase the number of lines changed in this PR. Please update `.ref` files. Probably not worth adding `.log` files, but that's a @loriab question. > There are some tests like cc1-3 that are failing due to being just above threshold. `atol = 0.001` the difference is `~ 0.0017`. These tests are using the default `qchem` convergence criteria ~ `3e-4` max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. . Could you elaborate on why tests are failing at all, and what numbers are differing? Are these Cartesian coordinates?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262531318:71,test,tests,71,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262531318,8,"['log', 'test']","['log', 'test', 'tests']"
Testability,"> Wow, that's quite the involved method. I found a few comments, but lgtm! Main question is: are unsuitable complications like extern-in-system, charged molecule?, etc. stopped early? Thanks for the contribution!. Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737:457,test,tested,457,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737,2,['test'],['tested']
Testability,"> Yes, the paper that showed EDIIS and ADIIS are equivalent in the HF case is [here](https://aip.scitation.org/doi/10.1063/1.4740249). I remember that paper and the claim the other authors implemented EDIIS wrong. :); They also write about the ADIIS/EDIIS differences for KS-DFT, which are argued to be of no practical importance. I know of no further comparisons and certainly none with big benchmarks sets one would nowadays expect. The ADF programs favours ADIIS but that has also (or mainly) computational reasons based on their 'fragment orbital approach' approach where total energies of molecules come with extra computational costs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874738808:392,benchmark,benchmarks,392,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874738808,1,['benchmark'],['benchmarks']
Testability,"> You can pull geometric apart like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py; > ; > This is a bit complex compared to what you wish to do, but it may give a better product.; > ; > Here is everything unwound:; > ; > ```python; > import qcengine as qcng; > import qcelemental as qcel; > import geometric; > import pkg_resources; > import logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.P",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:99,test,tests,99,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,2,"['log', 'test']","['logging', 'tests']"
Testability,"> You should not have made those graphs. All you know for sure is that the error is less than 1 micro hartree. You cannot tell the difference between 1.0 e-7 and 1.5 e-7, but people read graphs as if you can tell the difference between your data points.; > ; > This is also why you can't just present graphs. You need to be absolutely sure that your labels are clear, and that somebody who isn't you will be able to figure out what the graph means. If you need to add a sentence to explain them, do so.; > ; > I request additional benchmarks so we can get more precise estimates on how much error these techniques introduce. Can you increase energy convergence to `1e-10`?; > ; > Because this PR isn't coming in until 1.5 anyways, I'm going to turn my attention to other things for a while. Ah, I am learning a lot. Good teachers like you will prepare me well for grad school :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-821278069:531,benchmark,benchmarks,531,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-821278069,2,['benchmark'],['benchmarks']
Testability,"> Your dft-bench test was definitely run with -n, @hokru? Ctest runs individual tests single threaded. Yes, I used 4 threads.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390191126:17,test,test,17,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390191126,2,['test'],"['test', 'tests']"
Testability,"> [B]anning specific versions of specific linalg packages, with no other reason than ""it changes results"", is something that makes me feel uneasy. It's definitely not something I take lightly either and is only plausible if it's a bug in MKL or as temporary in how psi is using MKL. The reason I'm suspicious of MKL is that the answer changes between two values between runs (sometimes have to run 8 times to trigger).; * affects df (both mem and disk) but pk is fine; * affects any basis (currently set as cc-pvdz for efficiency); * nothing to do with SAD guess; * in test suite (run through only once), only the scf-cholesky-basis and an IRC test are affected.; * even by running plain water in df/aqz/uhf, I can't make it act unstable, as the df/dz/uhf benzene doublet does. ```; memory 3 gb. molecule {; -1 2; C 0.00000 0.00000 1.39495; C 0.00000 1.20806 0.69748; C 0.00000 1.20806 -0.69748; C 0.00000 0.00000 -1.39495; C 0.00000 -1.20806 -0.69748; C 0.00000 -1.20806 0.69748; H 0.00000 0.00000 2.47753; H 0.00000 2.14560 1.23877; H 0.00000 2.14560 -1.23877; H 0.00000 0.00000 -2.47753; H 0.00000 -2.14560 -1.23877; H 0.00000 -2.14560 1.23877; }. set basis cc-pVDZ; #set basis aug-cc-pVDZ; #set basis cc-pVTZ; #set basis aug-cc-pVTZ; #set basis cc-pVQZ; #set basis aug-cc-pVQZ; #set scf_type pk; #set scf_type df; set scf_type disk_df; #set scf_type mem_df; set d_convergence 10; set e_convergence 11; set df_scf_guess false; set guess core; #set reference rohf; set reference uhf; e = energy('scf'); print(e). pk_qz_2019 = -76.06462080005818; pk_aqz_2019 = -76.06578901994756; df_qz_2019 = -76.06462015458904; df_aqz_2019 = -76.06578796456354. pk_tz_rohf_2019 = -230.674287472723. pk_dz_uhf_2019 = -230.61792846279093 # passes; pk_adz_uhf_2019 = -230.64203999528007 # passes; pk_tz_uhf_2019 = -230.684552455135 # passes 2019.4, passes 2020.1; df_dz_uhf_2019 = -230.61751709208824 # fails 0.0000 0000 0102; df_adz_uhf_2019 = -230.64167627416992 # fails 0.0000 0000 1137; df_tz_uhf_2019 = -230.6844",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122:569,test,test,569,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122,2,['test'],['test']
Testability,"> [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test` kindly let me know if this mean that psi4 is in functional state. Here is the `conda list` output in case it is needed. [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Yes, the base Psi4 is functional. All the messages about skipped tests indicate that there are addons that Psi4 _has_ but that your Psi4 installation isn't detecting as installed. Based on your conda list, these are probably not installed, so this behavior is expected. Let us know if there are addons that you need but don't know how to get. (Examples: `dftd4` for DFT dispersion corrections, `cct3` for some exotic coupled cluster variants, `cppe` for polarizable embedding.). > Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use.; > ; > Just to make sure, psi4 is no longer supported on python3.7, right?. The latest Psi4 is no longer supported on Python 3.7, correct. If you need 3.7 support, dropping down to Psi4 1.5 is technically an option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803:8,test,test,8,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803,4,['test'],"['test', 'tests']"
Testability,"> [tests/test_erisieve.py](https://github.com/psi4/psi4/blob/master/tests/pytests/test_erisieve.py) is unhappy with the changes. You can run it locally via `<objdir># pytest -v ../tests/pytests/test_eriseive.py` after executing the results of `<objdir># stage/bin/psi4 --psiapi`. Thats strange, I couldn't reproduce locally ☹️",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775#issuecomment-1314416941:3,test,tests,3,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314416941,3,['test'],['tests']
Testability,"> ` 'SAD_SPIN_AVERAGE': True,` heals the test. It's already ```True``` by default, and I didn't see anything in the pytest code that would change it. And the test similarly failed above with the ```CORE``` guess.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-452202748:41,test,test,41,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-452202748,2,['test'],['test']
Testability,"> `${DESTDIR}` is also implicitly prepended to ${CMAKE_INSTALL_PREFIX} by makefiles written by cmake.; You don't need to use it in your code, it always works. > You need to build psi4 with the env variable DESTDIR=/tmp/path-to-onstall-psi4-to.; /tmp/path-to-onstall-psi4-to should end up with usr and under it there should be the usual bin, share, etc. Got it, `CMAKE_INSTALL_PREFIX` and envvar `DESTDIR` can work together to produce a working installation (and ugly extra files).; ```; > cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr; > cd objdir && cmake --build .; > make DESTDIR=/psi/gits/testinstall4 install; -- Installing: /psi/gits/testinstall4/usr//bin/psi4; ...; > /psi/gits/testinstall4/usr/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; SCF energy............................................................................PASSED; ```. > DESTDIR is a GNU standard. It is totally separate from CMAKE_INSTALL_PREFIX. Yes, I see [here](https://www.gnu.org/prep/standards/html_node/DESTDIR.html) how it's a GNU recommendation that we're only half complying with (full installation plus aforementioned ugly extra files). > Can you just remove the internal stage directory and make it install like all other cmake based projects?. Not really. The internal stage directory was a compromise so that developers could continue to never have to type `make install` and was a prerequisite to them approving the transition from GNUMake to CMake at all. Since then, the stage/ has proven convenient and robust to support fairly transparent mixing of externally detected and internally build dependencies that makes having lots of dependencies (as opposed to monolithic software) tolerable to the users and developers. I'd be glad to seek or try any tweaks to the build system that remedy this install issue, but on the whole, the internal stage solves a lot and breaks a little. What I'm not quite following is how this issue is blocking you. I'm glad to have finally understood and reproduced the issue,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604:715,test,tests,715,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604,1,['test'],['tests']
Testability,"> azure should have been using new packages already, though. Yes, that's what I meant. On Azure, only one `adcc` test fails...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2388#issuecomment-1004927832:113,test,test,113,https://psicode.org,https://github.com/psi4/psi4/pull/2388#issuecomment-1004927832,1,['test'],['test']
Testability,"> branch could use a rebase, but testing looks sound -- full ctest and pytest clean. Rebased as requested",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1498#issuecomment-461740679:33,test,testing,33,https://psicode.org,https://github.com/psi4/psi4/pull/1498#issuecomment-461740679,1,['test'],['testing']
Testability,"> general note: now that I have the correct base of master, azure should run and fail on mbis-3. @zachglick tracked the problem down to nondeterministic root solutions of the degenerate states. a PR will happen. follow-up: I've removed mbis-3 from quicktests so this one can merge. note that it's a known failure in full tests for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-688988721:321,test,tests,321,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-688988721,1,['test'],['tests']
Testability,"> ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults.; > ; > ```; > ==> E20 Dispersion (MP2) <==; > ; > ; > Disp20 (MP2) -0.37881730 [mEh]; > Exch-Disp20,u 0.02037338 [mEh]; > Scaling Scheme: Disp; > Scaling Factor: 0.707; > ; > SAPT(DFT) Results; > ---------------------------------------------------------------------------------------------------------; > Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; > Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; > ```. Added the !dHF cases in `sapt-dft1` and `sapt-dft2`. For `sapt-dft-api`, the dHF feature is intrinsically unsupported, because the dHF calculation is not fully contained in the sapt_dft() call; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:3189,TEST,TEST,3189,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['TEST'],['TEST']
Testability,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:229,test,testing,229,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845,4,['test'],['testing']
Testability,"> sigh We have test fail because adcc broke. I'm holding this PR innocent. Something is probably wrong with adcc itself. weird, it didn't install for that lane. adcc conda package hasn't changed in over a month. i'll try restarting that lane in case of fluke. otherwise, i'm guessing some non-qc dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883511648:15,test,test,15,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883511648,1,['test'],['test']
Testability,> tests will fix with a rebase. @loriab Looks like I'm still failing the Cholesky convergence test after a rebase,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1895#issuecomment-632099886:2,test,tests,2,https://psicode.org,https://github.com/psi4/psi4/pull/1895#issuecomment-632099886,2,['test'],"['test', 'tests']"
Testability,"> thanks for the extra tests!. You're welcome! I think the new tests should be good to go now. > This is great! Another big advantage is that one can use the smaller J fitting basis sets (`def2-universal-JFIT`) as default like other QC programs and save memory (plus a small speed up). Don't want to feature creep this PR though :). Thank you! What you describe should already be doable in Psi4 v1.8. This PR just makes the specification of `SCF_TYPE` for such uses, cleaner and more sensible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3001#issuecomment-1629413896:23,test,tests,23,https://psicode.org,https://github.com/psi4/psi4/pull/3001#issuecomment-1629413896,2,['test'],['tests']
Testability,"> the default settings we chose are not to avoid breaking tests but because tighter settings are wholly unnecessary (and often exceedingly difficult to achieve) for transition properties. > may be useful to separate the convergence criteria for the t's and lambdas, if not already done. The running plan is to rename `r_convergence` to `lambda_convergence` or somesuch within `cclambda`, with some logic to auto-set `lambda_convergence` is that is _not_ set but `r_convergence` _is_. `occ` and `dfocc` use a similar trick. For context, ""exceedingly difficult to achieve"" means [you're trying to solve ill-conditioned equations](https://github.com/psi4/psi4/issues/2519#issuecomment-1089612589). I'm expecting to be the one who picks this up, and when the time comes, I'll do a quick convergence study to double-check the sensitivity of properties to this parameter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2520#issuecomment-1089636980:58,test,tests,58,https://psicode.org,https://github.com/psi4/psi4/issues/2520#issuecomment-1089636980,2,"['log', 'test']","['logic', 'tests']"
Testability,"> tol=14 or 15, everyone?. I have the impression PSI4 always leans on the conservative side of thresholds, instead of tuning things for speed. Also, perhaps for floppy frequencies or similarly sensitive calculations one wants to be as safe as possible. Then tol=15 might be the safe choice. But..on the other hand it is DFT and the error from the quadrature itself is larger except for impractically large grids, I suppose. The often tight gradients and frequencies tests of psi4 pass with the current tolerance of 14. A dynamic adjustment of the threshold could be envisioned, but I think that would be overkill.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923:466,test,tests,466,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-498769923,1,['test'],['tests']
Testability,"> uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day.; > ; > thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge.; > ; > I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions. Yeah, I feel like I ran into this issue previously with Einsums. It's part of why I was so concerned about this PR in the first place, and whether `FORCE_PEDANTIC` should be on by default. I can definitely toy around and see if I can get the pedantic flag to only apply to Psi-side code, like you suggested. Worst-case scenario, we just turn `FORCE_PEDANTIC` off by default?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145:961,test,test,961,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145,1,['test'],['test']
Testability,">(2) The creation of a c_s_p_i() signature whose purpose is to perform various logic and then to call the existing c_s_p_i(bs) signature seems a little weird to me.` . `c_s_p_i()` encapsulates the logic that was previously performed in `setup_sieve`, after the initialization of the `sieve_impl_` variable, into its own function. This makes it easier to call the logic both from `initialize_sieve()` (when `ScreeningType::None` is used) and `setup_sieve()` (when `ScreeningType::None` is not used). Perhaps this could be refactored in a more elegant way, however. >Then there's initialize_sieve() whose whole purpose is to call c_s_p_i() but whose names aren't related? I've diagrammed the old (left) and new (right) setups below as I see them. Sorry for the scratch paper.`. No worries! Tehnically, `Libint2TwoElectronInt::initialize_sieve()` does things aside from calling `c_s_p_i()` (basically everything in `Libint2TwoElectronInt::common_init()` after `setup_sieve()` is called as well), but again, I'm open to better ways to implement this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826:79,log,logic,79,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826,3,['log'],['logic']
Testability,">> An alternative question this raises for me is whether the active_molecule should get updated at some point in the optimization. Updating the active molecule patches the issue but is that desired?. > My vote would be ""no""; it's too much like changing the input. However, I do think that some users would expect the final active molecule to be updated for them. And workflows inside the python input may seem more intuitive that way. I may not be following this right. I'd say the state of the psi4 active mol _during_ an optimization is arbitrary -- whatever works for you. In cpp-optking, I think the communication was through legacymolecule anyways. The molecule optking is acting on _should_ be updated by the time control returns to the user at the end of the opt. I thought this was already happening through https://github.com/psi4/psi4/pull/2727/files#diff-acf663ccea13592c4c656cf89c7b62e6f5bd3b2e8b4f12ba354129bd39d096f8R1296-R1297 . That's consistent with cpp-optking, and I think that must be happening b/c many of the tests check NRE before and after opt.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1260073808:1031,test,tests,1031,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1260073808,2,['test'],['tests']
Testability,">> the linux L2 is my local c-b, but mac and windows are from c-f staged-recipes. apparently any Hessian ERIs cause the Windows build to hang longer than the 6h Azure allows, so the W package is hessin-ints-less for TEI (I kept the onebody 2der). > Is this going to be a long-term state of affairs? I'd love to add more analytic hessians. It's likely to be semi-permanent for Windows. (Resolution would involve partitioning the 2nd deriv ERIs to a separate build group with lower optimization (as JMT does) and some good luck that they still compile quicker. Or petitioning to upload a hand-built package instead of relying on their CI build services, and I wouldn't like to do that before the L2 code is properly upstream.). But none of this is a block to new analytic hessians. Linux and Mac or anyone building L2 from source (with proper settings) is able to take adv of anal. H. And any new ones won't need extra work-around code, only a label for their tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2861#issuecomment-1445140150:958,test,tests,958,https://psicode.org,https://github.com/psi4/psi4/pull/2861#issuecomment-1445140150,1,['test'],['tests']
Testability,">>> sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. >> MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that occ does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. > This is completely correct. The lone OLCCD algorithm in occ does not compute LCCD with the input orbitals. Great, thanks. `oremp2` is in good shape, then, and I'll add negative assertions for `olccd`. Here's the summary of what gets checked (details are at QCEngine): https://github.com/psi4/psi4/pull/2653/files#diff-e2cf14f98c8e885f5abc7385ca737bfeba9f2f62caead630129e6d7cd9678e71R193-R203",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770:1042,assert,assertions,1042,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770,1,['assert'],['assertions']
Testability,">You tested the input in #3085 with this change?. Yes, I did test with the input.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3086#issuecomment-1828455794:5,test,tested,5,https://psicode.org,https://github.com/psi4/psi4/pull/3086#issuecomment-1828455794,2,['test'],"['test', 'tested']"
Testability,"@CDSherrill , good to hear as I quite agree. This is just what the dfmp2 module does presently for gradients: switches `scf_type` to `df` unless the user has reqested _not_ `df`, in which case it reveals its cause of death. I'm imitating this behavior now for the other mp2 gradient routes. My Q1 for Ugur was that a conv+df gradient was proceeding, and I wanted to confirm that failing it was the correct thing to do. The complication/confusion (it even caught me last night) is that although all scf calculations _run df by default_ (handled in the driver), the `scf_type` keyword _does not default to df_ (since there's a lot more post-scf than scf out there, it's easier to handle the latter as the exception), so setting solely `mp2_type df` in a `gradient('mp2')` leads to that conv+df case (even though someone knowing psi's df-philia might expect that to lead to df+df). But don't worry about that– for mp2, at least, I'll try all combinations and arrange that only good ones get through and that the advanced defaulting is handled right. By the way, back to energies, would you expect OCC's conventional ROHF mp2 energy to match DETCI's? It doesn't, and that's the only check remaining commented out in my great mp2 cross-module comparison (https://github.com/psi4/psi4/blob/master/tests/mp2-module/input.dat#L191) OCC's df ROHF mp2 _does_ match DFMP2's.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192928974:1291,test,tests,1291,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192928974,1,['test'],['tests']
Testability,"@CDSherrill , the halfway-corrected version of bullet 2nd energy above is. ```; molecule ne {\nNe\n}; set basis cc-pVDZ; set transqt2 delete_tei false; energy('cisd'); energy('fci', bypass_scf='True'); ```. where the integrals from the CISD aren't available for the FCI calc. I think we had seen this earlier with the file numbers used by detci aren't registered in psifiles.h . This input is in a docstring in `lib/python/energy.py`, not `tests/` so we could just drop it from there for now and add an issue if it's an involved fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/149#issuecomment-122484876:440,test,tests,440,https://psicode.org,https://github.com/psi4/psi4/issues/149#issuecomment-122484876,1,['test'],['tests']
Testability,"@CDSherrill Here's a numpy-free input, should you want to test. Problem is NUM_ROOTS, not loop or zmat. ```; memory 20 Gb. molecule H2 {; 0 1; He; He 1 R; units au; }. set {; SCF_TYPE PK; diag_method rsp; MAXITER 40; ## NUM_ROOTS 5; basis cc-pvdz; num_roots 2 # toggle this on/off for badness; }. rlist = [1.00, 10.1, 0.5]. for r in rlist:; H2.R = r; energy('fci') # or cisd; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/83#issuecomment-96099675:58,test,test,58,https://psicode.org,https://github.com/psi4/psi4/issues/83#issuecomment-96099675,1,['test'],['test']
Testability,"@CDSherrill, I did the tests with the 3-point finite differences and the default convergence. @andysim, your input has a misspelled keyword `df_functional` in stead of `dft_functional`. The same mistake I had, which runs just HF, as @hokru pointed out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351389916:23,test,tests,23,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351389916,1,['test'],['tests']
Testability,"@CDSherrill, nominally, yes. We've a test case that sets `memory 2 mb` to test an algorithm, and it runs just fine. Of course, we've never tested psi4 on a platform that has only 2–256 MB available. In general, I'm with you that I'd rather the minimum at which it complains was lower than the default: 100 or 256 mb. But it's not too hard to get around: `psi4.core.set_memory_bytes(2000)` will happily set internal memory to 2kb.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/641#issuecomment-285734725:37,test,test,37,https://psicode.org,https://github.com/psi4/psi4/pull/641#issuecomment-285734725,3,['test'],"['test', 'tested']"
Testability,"@JonathonMisiewicz . Let's subdivide further into 3 issues: the dfocc pcg, the occ lccd, and the occ olccd. * dfocc pcg: I think with the switch to coupling to `tol_t2` we're both satisfied. your approach fixes all the tests with far fewer iterations than my original sol'n; * occ lccd: you're right that the three errors were in spin components. I found that a `0.5 * tol_Eod` adds a single iteration about a quarter of the time, and fixes all the tests. Since triggering convergence on a small energy _rise_ is already a little unexpected, this prefactor doesn't bother me. I'm not adamant though -- adjusting e_conv for the stdsuite tests is a lot more palatable than adjusting pcg_conv.; * occ olccd: there's two errors -- one in spin components and another with the correlation energy itself (below). I tried to back off the prefactor, but nothing looser than a full order of magnitude fixed the tests. It's adding 2-4 iterations to every test (so 8-11 iterations becomes 10-14). That's severe, especially as it affects all the oo methods, not just olccd. So if you think it's better to skip this fix for a while, I'm ok with that. . `test_olccd_energy_module[olccd uhf conv ae: * occ -qz2p-ene0] OLCCD CORRELATION ENERGY: computed value (-0.21805777) does not match (-0.21805608) to atol=1e-06 by difference (-0.00000169).`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-677068760:219,test,tests,219,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-677068760,5,['test'],"['test', 'tests']"
Testability,@JonathonMisiewicz : thanks for catching the issue. I tested the `fcidump` test and it runs fine now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1951#issuecomment-656876556:54,test,tested,54,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656876556,2,['test'],"['test', 'tested']"
Testability,"@JonathonMisiewicz @loriab I think I understand now, I thought you had to use an explicit `std::move` but that is only for an **`lvalue`**, you can do . ```c++; std::shared_ptr<TwoBodyAOInt>(factory->erf_eri(omega_); ```. where `erf_eri` returns a `std::unique_ptr` because its a **temporary `rvalue`**. My bad sorry for the misunderstanding. . Regardless I will track down the failing test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775#issuecomment-1316328355:386,test,test,386,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1316328355,1,['test'],['test']
Testability,"@JonathonMisiewicz @scemama I finally got some time for the proof-of-concept implementation of generic I/O in TREXIO. Only numerical (int/float) arrays for now and only for the HDF5 back end, but this should be enough to get an idea whether TREXIO is a suitable candidate for the I/O back end of Psi4. . The PR for the associated `add-external-group` branch is here: https://github.com/TREX-CoE/trexio/pull/117. The API calls are slight different from the conventional TREXIO API. A few examples are:. - [C test](https://github.com/TREX-CoE/trexio/blob/8ac64c2a750cc997dd96afb2efe7035ba89043f1/tests/io_dset_external_hdf5.c); - [Python test](https://github.com/TREX-CoE/trexio/blob/8ac64c2a750cc997dd96afb2efe7035ba89043f1/python/test/test_api.py#L152). Let me know if you have any questions or comments.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1538512969:507,test,test,507,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1538512969,4,['test'],"['test', 'tests']"
Testability,"@JonathonMisiewicz I now edited the post before and added what doing psi4 --test and running a job outputs for me. Edit again: Ok, my bad I had a wrong input file. Will try again asap",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614#issuecomment-1160375262:76,test,test,76,https://psicode.org,https://github.com/psi4/psi4/issues/2614#issuecomment-1160375262,1,['test'],['test']
Testability,"@JonathonMisiewicz I'm not sure what you mean, but that's exactly what I've been arguing for above :D The problem is that since the failing test is a python one, I'm unable to run it locally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-452292789:140,test,test,140,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-452292789,1,['test'],['test']
Testability,"@JonathonMisiewicz It wasn't able to complete, it had a ""bad alloc"" error. However, the .dat file was 105,000 lines long, it had done many geometry iterations as well as scf iterations for each one, and the last scf iteration had completed in 8 steps. So it looked fine. My other jobs also ended prematurely, which is too bad. I have started them again. I think I need to add more memory to the machine...So I will make sure I don't overload the server this time. I am currently also (in addition) running it using B3LYP/6-31G* just to see how that goes, since it is quick and dirty. The one that had `bad alloc` was running these specs. ```; memory 40 Gb. set {; basis def2-tzvp; maxiter 100; g_convergence gau; soscf true; soscf_max_iter 40; guess sad; guess_persist true; opt_coordinates both; }; set_num_threads(20); E, wfn = optimize('B3LYP-D3', bsse_type='cp', return_wfn=True); fchk(wfn, 'citric_acid_bsse_cp.fchk'). def saveFile(name, string):; f=open(name, 'w'); f.write(string); f.close(). saveFile('citric_acid.optimized.dimer_geometry_bsse_cp.log', wfn.molecule().save_string_xyz_file()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262:1055,log,log,1055,https://psicode.org,https://github.com/psi4/psi4/issues/2338#issuecomment-957463262,1,['log'],['log']
Testability,"@JonathonMisiewicz It's a replacement of #1635 . I wanted to be able to test some of the fixes before I made them, and I couldn't remember which conda environment to compile that snapshot of psi with. Closing the old one presently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2038#issuecomment-730721725:72,test,test,72,https://psicode.org,https://github.com/psi4/psi4/pull/2038#issuecomment-730721725,1,['test'],['test']
Testability,"@JonathonMisiewicz This PR is ready for review. I added linK tests for RHF, UHF, and ROHF, updated the documentation on LinK in scf.rst, as well as sources in bibliography.rst, and ran all C-Tests. Doc Compilation and Pytests pending.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-975942945:61,test,tests,61,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-975942945,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"@JonathonMisiewicz that's great news! I'm in no rush, so I can wait. The purpose of my calculations is to look at Fock, Coulomb and Exchange matrices in different orbital representations (i.e. from some localisation procedure). For your tests have you looked at the J and K matrices as well as orbital rotations? Thanks, Geoff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-1533558469:237,test,tests,237,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-1533558469,1,['test'],['tests']
Testability,"@JonathonMisiewicz the test in question is ```dfmp2-ecp``` which has been unreliable for some time, way before #1456 was merged. See #1433.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452664140:23,test,test,23,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452664140,1,['test'],['test']
Testability,"@JonathonMisiewicz, you're right. Although it is easy to guarantee the root has the desired M_s, by construction of the determinant space, there is no guarantee that the wavefunction will have the correct S^2. . I wrote some code to try to handle situations like this. The user can specify the value of S that they desire (default 0.0 for closed-shell systems). If they want to guarantee that all guess roots have the same spin as this, they can set `CALC_S_SQUARED TRUE`. This will then toss out any guess roots with different values of S. (This is only implemented for `ICORE 1`). Guaranteeing that the guess roots have the correct S will *normally* mean that the final roots have the correct S, but this is not absolutely guaranteed if numerical issues come up. . As an example, consider this test case; ; memory 24 gb; molecule {; 0 1; O; H 1 0.9463; H 1 0.9463 2 104.575; }. set {; S 0.0; NUM_ROOTS 6; qc_module DETCI; }. energy('cisd/cc-pVDZ'). This yields 5 roots that look like singlets, followed by something that appears to be a quintet or higher. CISD Root 5 energy = -75.086475681512894. The 20 most important determinants:. * 1 0.342614 ( 435, 462) 1A1X 2A1X 3A1B 1B1X 1B2A 4A1A 2B2B; * 2 0.342614 ( 462, 435) 1A1X 2A1X 3A1A 1B1X 1B2B 4A1B 2B2A; * 3 0.342614 ( 670, 434) 1A1X 2A1X 3A1B 1B1X 1B2B 4A1A 2B2A; * 4 0.342614 ( 434, 670) 1A1X 2A1X 3A1A 1B1X 1B2A 4A1B 2B2B; * 5 -0.342614 ( 923, 913) 1A1X 2A1X 3A1B 1B1X 1B2A 4A1B 2B2A; * 6 -0.342614 ( 913, 923) 1A1X 2A1X 3A1A 1B1X 1B2B 4A1A 2B2B; * 7 0.151981 ( 703, 434) 1A1X 2A1X 3A1B 1B1X 1B2B 4A1A 3B2A. Now if we add the option `CALC_S_SQUARED TRUE`. We get some warnings from the program that it is dropping a guess vector because they seem to have the wrong value of S,. Simultaneous Expansion Method (Block Davidson Method); Using 6 initial trial vectors. (sem_iter): H0block_->H0b_diag[1][1] - H0block_->H0b_diag[2][1] = -0.681031 - 0.681031 = -1.362062 > 1.0E-8; ...; Computed <S^2> not as desired, discarding guess. and then the fin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2075#issuecomment-769932020:796,test,test,796,https://psicode.org,https://github.com/psi4/psi4/issues/2075#issuecomment-769932020,1,['test'],['test']
Testability,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:279,test,tests,279,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911,1,['test'],['tests']
Testability,"@PeterKraus . > I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""<module>""). Below is a usual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:57,assert,assertion,57,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,13,"['Assert', 'assert', 'test']","['AssertionError', 'assertion', 'test', 'tests']"
Testability,"@PeterKraus Not currently -- I arrive at exactly the same `TestComparisonError` that you have provided. It appears that `bsse_type` isn't a recognized kwarg of the CBS driver, so `energy(cbs, bsse_type='cp', ...)` still just returns a total energy. In the spirit of smaller PR's, I'd suggest that you make it into a new issue, which I'm happy to work on :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/975#issuecomment-383604532:59,Test,TestComparisonError,59,https://psicode.org,https://github.com/psi4/psi4/pull/975#issuecomment-383604532,1,['Test'],['TestComparisonError']
Testability,"@PeterKraus Yea, to round things out we should probably add those single calls tests as well to ensure that we do not regress at some point in the future (although dont make this a quickest). As a note its fine to call clean in the tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379849269:79,test,tests,79,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379849269,2,['test'],['tests']
Testability,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:176,test,testing,176,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254,1,['test'],['testing']
Testability,"@PhillCli . > as a follow up from #1948 the original issue was resolved, but I've missed another edge-case, where setting freeze_core True results in empty-blocks in mp2 terms ... (sorry for being such a pain).; I've hacked away a solution and additional regression tests (should I add output.ref also?) with lithium dimer. Not at all -- problem identified and solution prepared is a double win, not a pain. thank you. > The code is available at fcore_fix, should I make another PR?. please do. and `output.ref` welcome. we try to generate missing ones every year or so, but sooner they're present the better.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830#issuecomment-658972493:266,test,tests,266,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-658972493,1,['test'],['tests']
Testability,"@TiborGY *Conda* package for *Windows* have to be built with VS 2015 (https://conda.io/docs/user-guide/tutorials/build-windows.html#microsoft-visual-studio). So I'm doing that to avoid compatibility problems and make later deployment easy. @tonigi I hacked a bit `psi::libfilesystem` to compile, but is making a lot of test to segment fault. Yes, I also found `std::experimental::filesystem` and it looks as good option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404166121:319,test,test,319,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404166121,2,['test'],['test']
Testability,"@TiborGY That's a good idea! False sharing is a reasonable thing to think about. From what I've just now read, it sounds like false sharing occurs when two threads repeatedly write to nearby array elements, invalidating cached values of those elements. In this minimal test case, the threads aren't writing to any shared data, so I don't think false sharing applies here. However, it's something I'll look out for in the actual semi-numerical exchange implementation. @jturney I haven't gotten desperate enough to learn VTune yet, but I'm getting close. @hokru Thank you! The changelog entry would perfectly explain this strange behavior. I'll wait for #2413 before doing any more investigation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491#issuecomment-1075534869:269,test,test,269,https://psicode.org,https://github.com/psi4/psi4/issues/2491#issuecomment-1075534869,2,['test'],['test']
Testability,"@WDerricotte , @fevangelista . I'm reworking the decontract functionality since that only existed c-side, but all basis sets are now built py-side. Basically, `BASIS_X2C` (formerly `REL_BASIS`) will always default to the decontracted orbital basis, if not set outright (`set basis_x2c my_gigantic_uncontracted_basis`). Is there ever a reason, then, to set the primary/orbital basis to a decontracted one (`set basis cc-pvdz-decon`)? If so, what fitting basis should a `cc-pvdz-decon` use: `cc-pvdz-jkfit`, `cc-pvdz-jkfit-decon`, unknown so give up? All the X2C test cases are with `scf_type pk`, none with DF. Thanks for any hints.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/43#issuecomment-252771310:561,test,test,561,https://psicode.org,https://github.com/psi4/psi4/issues/43#issuecomment-252771310,1,['test'],['test']
Testability,"@aizvorski or @hokru (or anyone), did you happen to have on hand independent ref values for any of these five fctls, particularly r2SCAN-3C & B97-3C ? (Note that c-f dftd4 isn't available for py312, so I'll likely need to adjust the CI to improve testing coverage. If this makes it into v1.9, I'm good with dropping support for dftd3 classic and the psi4 build of dftd4. Also, the plan is libxc=6, dropping v5 support.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1830386611:247,test,testing,247,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1830386611,1,['test'],['testing']
Testability,@amjames Can you add a test case to ensure the coupled cluster OPDM is used in properties?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259443499:23,test,test,23,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259443499,1,['test'],['test']
Testability,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/699#issuecomment-300777718:241,test,test,241,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718,4,['test'],['test']
Testability,"@amjames Yes, having a coupled-cluster-check-all fn that takes `wfn` and `ref_vals` was just an idea to preserve the comprehensiveness of the perl script. If I was writing this from scratch I'd probably put lots of `compare_values` in the input files for independence. But with 50 cc test cases I fear ppl will lose steam if they checked everything the perl script checks line by line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-376645348:284,test,test,284,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-376645348,1,['test'],['test']
Testability,@andysim @lothian @edeprince3 @bozkaya Can you check off your test cases or refer someone who can review them?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-202633405:62,test,test,62,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-202633405,1,['test'],['test']
Testability,"@andysim Ah, didn't realize 3.8 hasn't been officially released yet. I'll take that off the list. How's this:; - clang: 3.5 release, 3.6 release, 3.7 release; - gcc: 4.8 release, 4.9 release, 5.2 release/debug. This should cover the last version or two of the major distros. . @jgonthier I'll build and test on my box shortly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182886143:303,test,test,303,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182886143,1,['test'],['test']
Testability,"@andysim I can't help but notice that the three failing jobs all involve Hessians....Does anything in the logs jump out at you? The only error I saw was that the fnocc2 G2 free-energies weren't matching to 8 decimal places, but rather 7. Do we really expect them to match to 8 decimal places? I have no idea why the other two are failing....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235098972:106,log,logs,106,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235098972,1,['log'],['logs']
Testability,"@andysim I checked DOCC compatibility just before I submitted this, and it worked. I'll add a simple DOCC set to the findif test when I fix whatever is causing tests to fail. It'll likely be a few days before I have the time to get those fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-446719821:124,test,test,124,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-446719821,4,['test'],"['test', 'tests']"
Testability,@andysim I finally added your symmetrize Hessian code to your Hessian module. Looks like for some geometries the something goes slightly awry:. `test/gibbs` for the H20 dimer:. ```; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 1799.290 2588.774; 2 3812.368 5485.140; 3 3945.823 5677.152; ```. ```; No. Vib. Freq. [cm^-1] Vib. Temp. [K]; 1 0.002 0.003; 2 1799.290 2588.774; 3 3812.368 5485.140; ```. which is actually a pretty good trick. I don't immediate see anything wrong in the symmetrize function `libmints/matrix.cc:1079`. The N2 dimer seems work however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760#issuecomment-314460580:145,test,test,145,https://psicode.org,https://github.com/psi4/psi4/pull/760#issuecomment-314460580,1,['test'],['test']
Testability,"@andysim I have add the print statement and made *Azure* to run the test. It produces, the following output:; ```; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; DIMENSIONS 2 4; ```. The same output I get on *Linux* with GCC 7.3.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462752310:68,test,test,68,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462752310,1,['test'],['test']
Testability,"@andysim Thanks for looking, but the problem is with psimrcc-fd-freq**2** test (not psimrcc-fd-freq**1**). After rebasing, the problem persists for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462394184:74,test,test,74,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462394184,1,['test'],['test']
Testability,@andysim Try now. I can understand where they are coming from on the security side. There are not too many layers between log printing and security tokens. Very powerful tool however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235131408:122,log,log,122,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235131408,1,['log'],['log']
Testability,"@andysim We compile and test with Python2 exclusively at the moment. Couldnt figure out Travis, debating if we want to switch the Distelli build to Python3.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/486#issuecomment-257618031:24,test,test,24,https://psicode.org,https://github.com/psi4/psi4/pull/486#issuecomment-257618031,1,['test'],['test']
Testability,@andysim great. Since the weird thing is that I can't find any errors in the build log that @loriab linked:; ```; 2020-01-06T17:54:37.8471030Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:54:37.8471436Z Energy with Cholesky 1e-4.........................................PASSED; 2020-01-06T17:55:04.0834277Z Energy with Cholesky 1e-5.........................................PASSED; 2020-01-06T17:55:04.0834591Z Energy with Cholesky 1e-5.........................................PASSED; ```; The crash comes suddenly; ```; 2020-01-06T17:55:21.8639362Z ; 2020-01-06T17:55:21.8712539Z Using partial Cholesky orthogonalization (doi:10.1063/1.5139948).; 2020-01-06T17:55:30.8500954Z ##[error]Cmd.exe exited with code '-1073741819'.; 2020-01-06T17:55:30.9285461Z ##[section]Finishing: CHolesky basis Spot Test; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056:83,log,log,83,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-571269056,2,"['Test', 'log']","['Test', 'log']"
Testability,"@andysim is correct. @loriab Could you check your `avxintrin.h` file and see if it has `_mm256_set_m128d`? My version of clang does (but is 9.0.0 (clang-900.0.39.2)). For the original issue: I will see if I can reproduce, but nothing is jumping out at me as being incorrect. That file should only be included when compiling the tests in simint, but the paths all look correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356756916:328,test,tests,328,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356756916,1,['test'],['tests']
Testability,@andysim please have a look. The Windows test crashes even when the checks are turned off!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760#issuecomment-573356712:41,test,test,41,https://psicode.org,https://github.com/psi4/psi4/pull/1760#issuecomment-573356712,1,['test'],['test']
Testability,"@andysim thanks for the quick reply. I'll go ahead and roll back the fnocc2. Locally cbs-xtpl-freq is failing the reference value check (1809.235 vs. 1809.279) and tu4-h20-freq passes for me. It looks like from the git logs that cbs-xtpl-freq is another scenario similar to fnocc2, is that right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235105347:219,log,logs,219,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235105347,1,['log'],['logs']
Testability,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-235363935:91,test,tests,91,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935,14,['test'],"['test', 'testing', 'tests']"
Testability,"@andysim, any recollection of what system inspired the [brokensymmetry](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1180-L1189) routine?. All, am I right that castup and brokensymmetry that are currently in `def scf_helper` should ultimately end up in the smartsolver? And that scf_helper should ultimately make only one call to scf? That is, all attempts at control logic are moving to `procrouting/scf/` (andy trick 2.0 from c-side and castup from scf_helper).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-409789827:397,log,logic,397,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-409789827,1,['log'],['logic']
Testability,"@bast, could you post the end of the output file for the failed test case `<objdir>/tests/extern1/output.dat`? I'm perplexed as to what went wrong since the end of the test is simply:; ```; total time = 6 seconds = 0.10 minutes; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED. *** Psi4 exiting successfully. Buy a developer a beer!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276534257:64,test,test,64,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276534257,6,['test'],"['test', 'tests']"
Testability,"@bast, the -6 is the return code from the subprocess call that ran the test case. Usually it reflects success (0) or failure (anything else). Not sure what's going off here, but since your job gave every other appearance of success, I won't worry about it unless more evidence surfaces. Thanks for testing it with an exotic (for us) setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276673381:71,test,test,71,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276673381,2,['test'],"['test', 'testing']"
Testability,"@bennybp Ran this through the full test suite also, everything checks out. Ill merge it in when travis passes. Flare added because we can...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-197417318:35,test,test,35,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-197417318,1,['test'],['test']
Testability,@bennybp This is something we have seen before for this test case (I think its in an issue somewhere). Not entirely sure why this happens yet.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198705828:56,test,test,56,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198705828,1,['test'],['test']
Testability,"@billy-doyle: The pull request that fixes this issue is now merged in the master branch. If you are compiling psi4 from source, can you try to pull from it, recompile, and test the Jupyter problem again?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1794#issuecomment-582005411:172,test,test,172,https://psicode.org,https://github.com/psi4/psi4/issues/1794#issuecomment-582005411,1,['test'],['test']
Testability,"@bwb314, @PeterKraus, were errors for DSD-BLYP and DSD-PBE-PBE86 to be expected? I didn't see any comments to that respect but there's been a lot of edits to DFT and its testing of late. Thanks for any clues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/945#issuecomment-378478967:170,test,testing,170,https://psicode.org,https://github.com/psi4/psi4/pull/945#issuecomment-378478967,1,['test'],['testing']
Testability,"@cdsgroup; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/2; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009:230,test,tests,230,https://psicode.org,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009,1,['test'],['tests']
Testability,"@davpoolechem, tests/python/3-index-transforms/input.py isn't running correctly. Do you happen to understand how to edit it while still preserving the intent of the test?. ```; Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to do in-core! Increase the amount of memory allocated to Psi4 or allow for out-of-core to be used.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131#issuecomment-1935022416:15,test,tests,15,https://psicode.org,https://github.com/psi4/psi4/pull/3131#issuecomment-1935022416,2,['test'],"['test', 'tests']"
Testability,"@devinamatthews Thanks for sharing the patch. Speaking of science, I am not sure if your example was a test or production job but I would be careful with third-order correlation energies in cc-pVDZ basis. See [https://www.ncbi.nlm.nih.gov/pubmed/17186479](url) for details.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561976491:103,test,test,103,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561976491,1,['test'],['test']
Testability,"@dgasmith , maybe keep an eye out for test ""casscf-fzc-sp"". That's what failed on distelli (below), though it passed locally and on travis. May be another clue to the #322 intermittent failure. ```; ==> Setting up CI strings <==. There are 15 alpha and 15 beta strings; The CI space requires 65 (6.50E+01) determinants and 4 blocks. ==> Setting up MCSCF integrals <==. ==> Starting MCSCF iterations <==. Total Energy Delta E RMS Grad NCI. @MCSCF Iter 1: -76.02993400953443 -1.2637e-02 9.9525e-03 1 Initial CI; @MCSCF Iter 2: -76.06895156963408 -3.9018e-02 1.3537e-02 9 APPROX; @MCSCF Iter 3: -76.07302175257405 -4.0702e-03 4.4001e-03 7 APPROX; @MCSCF Iter 4: -76.07362055903870 -5.9881e-04 1.6406e-03 7 APPROX; @MCSCF Iter 5: -76.07373579006990 -1.1523e-04 7.9473e-04 7 APPROX, DIIS; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/456#issuecomment-238002601:38,test,test,38,https://psicode.org,https://github.com/psi4/psi4/pull/456#issuecomment-238002601,1,['test'],['test']
Testability,"@dgasmith ; - I don't understand what difference the PID makes in terms of a read command; ~~~~.py; set{; READ ""some_file_with_no_PID.input""; READ ""some_file_generated_from_process.1234""; }; #later...; file2open=options.get_str(""READ""); f=open(file2open,'r'); ~~~~; - I think the key point is that any solution has to be accessible both in C++ and in Python thus wrapped one way or the other in Pybind11. I personally think the common API for streams in C++ makes it easier, but it makes no difference if it's written in Python just as long as all calls go through it. ; - If the Python libraries you speak of are outside of Psi4 then in an ideal world they would allow you to specify the file they are going to write to. If they don't provide such services, Psi4 needs to intervene or ensure that the library isn't called under MPI. If these libraries aren't providing core features then it is unlikely that they will interfere with MPI operation and they can be ignored.; - I'm currently running the test suite to ensure my changes to `get_writer_file_prefix` didn't break anything. It now appends the PID to the string it was going to return anyways. Once it passes I'll make a new PR for that change and submit it. @loriab ensuring only one MPI process writes is probably a loosing battle unless you rework the infrastructure to be more like Pulsar. People likely bypass you. It think the best bet is to keep the files unique and to do it with a function like `get_writer_file_prefix` or a similar class/library. For the situation you highlighted I think `get_writer_file_prefix` will suffice. I think `get_writer_file_prefix` will work in practice as long as everyone uses it. Moving towards HPC applications I think files really should only be used for long term storage or when something doesn't fit in RAM, not for interfacing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/548#issuecomment-266893399:1002,test,test,1002,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266893399,1,['test'],['test']
Testability,"@dgasmith @robertodr . A simple example:. Without PCM, the working directory does not change:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). #pcm = { ; # Medium { Solvent = Water }; # Cavity { Type = GePol }; #}. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /home/raimis/debug/psi4_PCM; ```. With PCM, the working directory changes:; ```python; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()); ```; ```bash; $ psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; ```. A small detail, but it messes up our pipeline.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-351739145:296,test,test,296,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-351739145,4,['test'],['test']
Testability,@dgasmith By running test dft2 I got:; ```; HF: Form G : 18.68u 0.00s 1.955138w 24 calls; | RKS: Form V : 16.30u 0.00s 1.255284w 24 calls; | | V: Properties : 2.093465p 14064 calls; | | V: LSDA : 0.074432p 14064 calls; | JK: D : 0.00u 0.00s 0.000135w 24 calls; ```; after the corresponding modifications.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-312723477:21,test,test,21,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-312723477,1,['test'],['test']
Testability,@dgasmith I finally got the export working and tested it on the python side by contracting the exported integrals with the ao density and comparing against the already implemented and exported `dipole_grad()` function. How/where do you want me to implement a test for this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1799#issuecomment-596681614:47,test,tested,47,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-596681614,2,['test'],"['test', 'tested']"
Testability,@dgasmith I have converted all requested `std::vector<double>` to `std::unique_ptr<double[]>`. All tests pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602788:99,test,tests,99,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602788,1,['test'],['tests']
Testability,@dgasmith I have fixed VMFC gradients and added three long tests to validate the computation of nbody gradients.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1042#issuecomment-433243666:59,test,tests,59,https://psicode.org,https://github.com/psi4/psi4/pull/1042#issuecomment-433243666,1,['test'],['tests']
Testability,@dgasmith I think this is ready for review - there is also one test that tests the minimal functionality of the Broker.; I have more things to implement once the amplitudes are available from python as well and could add another PR for that once that is in as well,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-449792318:63,test,test,63,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-449792318,2,['test'],"['test', 'tests']"
Testability,"@dgasmith I understand, though my intuition is that the values in our `geometries` dict should be dicts themselves that store properties at that geometry in addition to the geometry. Definitely agreed on porting the C-side code and worrying about the metadata implementation afterwards. I'll get up a PR when I have the geometry generator ported and tested. The coding isn't bad, but my schedule is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-360994628:350,test,tested,350,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-360994628,2,['test'],['tested']
Testability,@dgasmith It means I have a bug in my code. It is supposed to solve the correct nesting pattern no matter serial or parallel. I will look into this issue.; Thank you for providing this test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-312735584:185,test,test,185,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-312735584,1,['test'],['test']
Testability,"@dgasmith and @bwb314, the libxc test case _looks_ like the one mentioned https://github.com/psi4/psi4/pull/877#issuecomment-349732113 . Is it, or does that still need to be added?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/877#issuecomment-358020075:33,test,test,33,https://psicode.org,https://github.com/psi4/psi4/pull/877#issuecomment-358020075,1,['test'],['test']
Testability,"@dgasmith just need a little time, I've worked on making the changes, but I still need to add a test. I'll work on it this week.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1080#issuecomment-415133957:96,test,test,96,https://psicode.org,https://github.com/psi4/psi4/pull/1080#issuecomment-415133957,1,['test'],['test']
Testability,"@dgasmith that's what I thought. I bet the problem is just that since HCN is a linear molecule, HCN+ probably has a hole in one of the pi orbitals, and then it's a game of change which one of the two you converge upon since they're fully degenerate. I changed the tests to SSH which should behave better.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451641581:264,test,tests,264,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451641581,1,['test'],['tests']
Testability,"@dgasmith yup, its ready to go. I ran ctest and all tests passed. I will go ahead and rebase.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/729#issuecomment-306951600:52,test,tests,52,https://psicode.org,https://github.com/psi4/psi4/pull/729#issuecomment-306951600,1,['test'],['tests']
Testability,"@dgasmith, @loriab : provided the `cbs-xtpl-freq` test passes (it does on my PC), this should be good to go from my PoV. Should I run a full test suite on this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379576694:50,test,test,50,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379576694,2,['test'],['test']
Testability,"@dgasmith, is just the Ne test enough? I don't have ORCA, but I have access to G09.D01 (SOGGA, SOGGA11-X, M06-L, MN12-L) and a colleague of mine has G16 (MN15, MN15-L and PBE0-DH), that should be good enough.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/904#issuecomment-362349573:26,test,test,26,https://psicode.org,https://github.com/psi4/psi4/pull/904#issuecomment-362349573,1,['test'],['test']
Testability,"@dgasmith, rolling back to 1.1 is fairly involved. Can commenting out the three `pragma omp`s in superfunctional.cc test the same effect?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-395093963:116,test,test,116,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-395093963,1,['test'],['test']
Testability,"@dgasmith, what do you think of going ahead and merging this in now, with a follow-up in a couple days addressing 150, the binary, and keyword tweaks? This PR itself works nicely in its own right, and it'd be easier to test the outlying binary w/o having to apply this PR as a patch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388#issuecomment-223824090:219,test,test,219,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223824090,1,['test'],['test']
Testability,"@dgasmith: Yes this is ready to go. I just pushed two minor commits that clean existing code so once tests past all can be merged. I think there is potentially more we can do with Slices (merging, getting Slices from MO spaces, which would simplify even further some of the get/set_ commands) but I think that needs some experimentation. Thanks for all the useful feedback!; This also closes issue #723.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-305670159:101,test,tests,101,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305670159,2,['test'],['tests']
Testability,"@dgasmith: ok, let me work on a test case",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1951#issuecomment-657791109:32,test,test,32,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-657791109,1,['test'],['test']
Testability,"@dgasmith: the HF3C fail is weird - the dispersion is set correctly, but something about the functional is wrong. Hence the failing tests. I think the problem is related to dispersion, or GCP - lines 195 - 208 in `EmpiricalDispersion` would be my guess. The OPBE-D and OTPSS-D: I need to check which dispersion they are actually meant to have. In master, they currently have none, as far as I see.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370255974:132,test,tests,132,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370255974,1,['test'],['tests']
Testability,@drhaney Everything is looking good. Can you add a few test cases that run in about 30 seconds?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-208366940:55,test,test,55,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-208366940,1,['test'],['test']
Testability,@edeprince3 Can you add in the tests? I dont see any blockers to getting this in beyond that. See `psi4/tests/chemps2` for an external project example.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-387812268:31,test,tests,31,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-387812268,2,['test'],['tests']
Testability,"@edeustua Good to know. I think #442 should fix this, but we can certainly test it out after that patch drops.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232528562:75,test,test,75,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232528562,1,['test'],['test']
Testability,@fevangelista If its Travis thats failing you can go in and restart individual ones on their website instead of retriggering the test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304900748:129,test,test,129,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304900748,1,['test'],['test']
Testability,"@hmacdope happy to. I am currently working on a similar PR for r2scan-3c and others: https://github.com/psi4/psi4/pull/2842 you can have a look to get an idea what would be needed. Until the new ORCA is released we don't have good reference values for tests, but I was planning to write to the Grimme group.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2850#issuecomment-1380346948:252,test,tests,252,https://psicode.org,https://github.com/psi4/psi4/issues/2850#issuecomment-1380346948,1,['test'],['tests']
Testability,"@hokru I get the error below when there's no dftd4 of any kind around. (It's what Azure linux is doing now.) When I change the try/except in qcng empirical_disp_param line 906 from ModuleNotFoundError to ImportError. This is py310, so I'm not sure why, but it might be a sol'n. ```(py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list dftd; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; dftd3 3.2.1 h84218bc_2 psi4; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) conda list gcp; # packages in environment at /psi/toolchainconda/envs/py310:; #; # Name Version Build Channel; gcp 2.0.2 he991be0_2 psi4; gcp-correction 2.3.1 h1990efc_3 conda-forge; (py310) psilocaluser@bash:psinet:/psi/gits/hrw-detangle/objdir_py310: (r2scan) pytest ../tests/pytests/test_psi4.py ; ================================================================================== test session starts ==================================================================================; platform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0; rootdir: /psi/gits/hrw-detangle, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.5.0; collected 0 items / 1 error . ======================================================================================== ERRORS =========================================================================================; ______________________________________________________________________ ERROR collecting tests/pytests/test_psi4.py ______________________________________________________________________; ImportError while importing test module '/psi/gits/hrw-detangle/tests/pytests/test_psi4.py'.; Hint: make sure your test modules/packages have valid Python names.; Traceback:; ../tests/pytests/test_psi4.py:4: in <module>; import psi4; stage/lib/psi4/__init__.py:75: in <module>; from .driver import endorsed_plugins; stage/lib/psi4/driver/__init__.py:46: in <module>; from psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342:852,test,tests,852,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444984342,2,['test'],"['test', 'tests']"
Testability,@hokru Thanks! I'll try to test with bigger molecules.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-346668022:27,test,test,27,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-346668022,1,['test'],['test']
Testability,"@hokru We've started added DFTD3-ABC in https://github.com/loriab/psi4/pull/7. While testing on ethene--ethyne, we got the following values for the E6(ABC) dispersion correction (in Eh):; ```; BP86-D3 = -0.000000175296; BP86-D3m = -0.000000175296; BP86-D3BJ = -0.000869639424; BP86-D3MBJ = -0.000869639424; ```; Do you happen to know if they look reasonable, especially that `-D3` is different than `-D3BJ`, since the DFTD3 manual mentions using the same zero damping for the ABC terms?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151#issuecomment-417101476:85,test,testing,85,https://psicode.org,https://github.com/psi4/psi4/pull/1151#issuecomment-417101476,1,['test'],['testing']
Testability,"@hokru and @dgasmith . I tested the analytic and numeric gradients with 100 molecules using wB97X-D and B3LYP (for reference). ![anal_vs_grad_wb97x-d](https://user-images.githubusercontent.com/2469715/33882176-8d09a24e-df37-11e7-9aee-3a6a4530d4a9.png). Sample: 4512; MaxAE 0.002127; MSE -0.000000; MAE 0.000039; RMSE 0.000089. ![anal_vs_grad_b3lyp](https://user-images.githubusercontent.com/2469715/33882181-8f7b6972-df37-11e7-8377-358eb436c824.png). Sample: 4512; MaxAE 0.000631; MSE -0.000000; MAE 0.000016; RMSE 0.000031. There is no systematic error in both cases, but wB97X-D results are more skewed. Do you think, it is just numerics or indication of a more serious problem?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351024635:25,test,tested,25,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351024635,1,['test'],['tested']
Testability,"@hokru, fyi, the tests you added in #1320 got moved around here. Because they use dftd3, which isn't always available, they need `using_dftd3` decorator (for pytest) or to be in `tests/dftd3/` (for ctest).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1414#issuecomment-448263677:17,test,tests,17,https://psicode.org,https://github.com/psi4/psi4/pull/1414#issuecomment-448263677,2,['test'],['tests']
Testability,"@hokru, happily the `hf3c` test case tests interaction energies, so a switch of MINIX to spherical passes w/o a hitch. Any objections from @psi4/maintainers on switch?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-385710136:27,test,test,27,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-385710136,2,['test'],"['test', 'tests']"
Testability,@jgonthier I found that invalid read you mentioned but the test did pass. @andysim That's fine. I'm just not sure why there's concern to keep the testing down to a minimum. It's free testing that we don't have to think about.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182896518:59,test,test,59,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182896518,3,['test'],"['test', 'testing']"
Testability,"@jgonthier We have not noticed this in awhile in the test cases. If you have not seen this, could we consider closing this issue?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/222#issuecomment-260083312:53,test,test,53,https://psicode.org,https://github.com/psi4/psi4/issues/222#issuecomment-260083312,1,['test'],['test']
Testability,"@jgonthier is there any easy way to turn on or off different components of the SAPT computation? That is, compute only the electrostatic and induction terms, or only the dispersion terms, etc. That might be easier to do than (and/or an initial step towards) full restart capability. @loriab it would be interesting to debate this as a use-case for more general restart capabilities. Where do we log the info about how far the computation has gotten? And what information is going to be available for the restart calculation? In a cluster computing environment, the scratch files are going to be gone. We could save the orbitals (although that's probably not the rate-determining step of most SAPT computations, regardless of the SAPT order). Other stuff is probably too large to save anywhere for a restart.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-177233740:395,log,log,395,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-177233740,1,['log'],['log']
Testability,"@jgonthier, @PhillCli, I've added a test from the original issue. It's not independently confirmed results, but the above discussion reasonably covers that. Provided you two are satisfied and I can scrounge up another review, I'll merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1948#issuecomment-658525244:36,test,test,36,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-658525244,1,['test'],['test']
Testability,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182953987:140,test,test,140,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987,8,['test'],"['test', 'tests']"
Testability,"@jturney, @andysim, should the efp files be removed from libmints and instead a python fn that calls the generic fn and performs the std --> efp mapping be constructed and attached to the mints object so efp doesn't know the difference? That `mints.ao_efp_multipole_potential` call is in psi4numpy, the pylibefp tests as well as here in the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657#issuecomment-499894732:312,test,tests,312,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499894732,1,['test'],['tests']
Testability,@jturney: I was just working on the test for this. Might wanna undo the merge and let me add the test?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1119#issuecomment-410690234:36,test,test,36,https://psicode.org,https://github.com/psi4/psi4/pull/1119#issuecomment-410690234,4,['test'],['test']
Testability,"@kannon92 libparallel2 is completely deleted. The majority of that functionality now resides in [LibTaskForce](https://github.com/ryanmrichard/LibTaskForce), which admittedly has only been tested on a few MPI processes at the moment (hopefully, within the next few weeks I'll get a chance to try it on an actual supercomputer). If you're interested in moving over to LTF I'd be happy to help; it could use a lot more stress tests (and honestly some code cleanup and documentation) that I've been putting off in favor of working on Pulsar and writing papers.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-248321020:189,test,tested,189,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248321020,2,['test'],"['tested', 'tests']"
Testability,"@konpat @loriab before I merge this, I wanted to check whether you checked the full test suite? I see the differences are in 10's of cal/mol, but still, I'd expect something somewhere to fail. Your comment seems to imply that we just about pass under the radar...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1803#issuecomment-582740483:84,test,test,84,https://psicode.org,https://github.com/psi4/psi4/pull/1803#issuecomment-582740483,1,['test'],['test']
Testability,"@konpat looking at first stable release that had USAPT solvers (v1.1), there is no ```wfn.semicanonicalize()``` in driver's ```run_sapt``` function, so it might be the case that the code was always like this. I'll try to set up a SAPT2020 package locally, with Piotr's SAPT(ROKS/ROHF) (http://dx.doi.org/10.1063/1.2968556) to compare how much impact this has on existing test cases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975#issuecomment-674363193:371,test,test,371,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-674363193,1,['test'],['test']
Testability,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292635303:402,test,test,402,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303,2,['test'],['test']
Testability,"@loriab . I have rebuilt with system BLAS/LAPACK, instead of MKL. Now all tests passes:. ```; $ ctest -j 8 -E dft-bench --timeout 3600; Test project /home/raimis/psi4.git/linux_build; Start 394: python-vibanalysis; Start 162: dft-grad-lr3; Start 103: dcft-grad1; Start 178: fsapt1; Start 227: mp2-def2; Start 45: cc3; Start 110: dcft4; Start 182: isapt1; 1/411 Test #45: cc3 .............................. Passed 181.10 sec; Start 300: pywrap-all; 2/411 Test #110: dcft4 ............................ Passed 232.06 sec; Start 145: dfomp2-grad3; 3/411 Test #103: dcft-grad1 ....................... Passed 301.39 sec; Start 304: pywrap-checkrun-rhf; 4/411 Test #145: dfomp2-grad3 ..................... Passed 139.18 sec; Start 306: pywrap-checkrun-uhf; 5/411 Test #300: pywrap-all ....................... Passed 191.66 sec; Start 39: cc24; 6/411 Test #227: mp2-def2 ......................... Passed 397.60 sec; Start 40: cc25; 7/411 Test #162: dft-grad-lr3 ..................... Passed 412.33 sec; Start 38: cc23; 8/411 Test #182: isapt1 ........................... Passed 416.77 sec; Start 76: cc7; 9/411 Test #304: pywrap-checkrun-rhf .............. Passed 243.61 sec; Start 36: cc21; 10/411 Test #39: cc24 ............................. Passed 229.63 sec; Start 35: cc2; 11/411 Test #76: cc7 .............................. Passed 204.63 sec; Start 240: ocepa-freq1; 12/411 Test #40: cc25 ............................. Passed 228.58 sec; Start 41: cc26; 13/411 Test #38: cc23 ............................. Passed 232.18 sec; Start 42: cc27; 14/411 Test #306: pywrap-checkrun-uhf .............. Passed 316.81 sec; Start 111: dcft5; 15/411 Test #394: python-vibanalysis ............... Passed 760.31 sec; Start 18: cbs-xtpl-func; 16/411 Test #36: cc21 ............................. Passed 216.12 sec; Start 181: fsapt-allterms; 17/411 Test #41: cc26 ............................. Passed 181.93 sec; Start 193: fd-freq-energy-large; 18/411 Test #35: cc2 .............................. Passed 207.82 sec; St",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:74,test,tests,74,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,9,"['Test', 'test']","['Test', 'tests']"
Testability,"@loriab . The ESP cube files have many small differences, but nothing exceeds 1e-6: ; ```; $ diff -u ../tests/cubeprop-esp/ESP.cube.ref tests/cubeprop-esp/ESP.cube; --- ../tests/cubeprop-esp/ESP.cube.ref	2018-03-09 17:51:11.796318083 +0100; +++ tests/cubeprop-esp/ESP.cube	2018-07-12 11:46:57.750705729 +0200; @@ -8,9 +8,9 @@; 1 0.000000 0.000000 -1.494187 1.027446; 1 0.000000 0.000000 1.494187 1.027446; -6.14669E-03 -6.04570E-03 -5.92036E-03 -5.76902E-03 -5.59014E-03 -5.38229E-03 ; --5.14422E-03 -4.87489E-03 -4.57358E-03 -4.23985E-03 -3.87370E-03 -3.47553E-03 ; --3.04626E-03 -2.58732E-03 -2.10069E-03 -1.58892E-03 -1.05515E-03 -5.03023E-04 ; - 6.33016E-05 6.39242E-04 1.21988E-03 1.80006E-03 2.37451E-03 2.93800E-03 ; +-5.14422E-03 -4.87489E-03 -4.57358E-03 -4.23985E-03 -3.87370E-03 -3.47554E-03 ; +-3.04626E-03 -2.58732E-03 -2.10069E-03 -1.58892E-03 -1.05515E-03 -5.03024E-04 ; + 6.33010E-05 6.39242E-04 1.21988E-03 1.80005E-03 2.37451E-03 2.93800E-03 ; 3.48544E-03 4.01204E-03 4.51342E-03 4.98573E-03 5.42570E-03 5.83075E-03 ; 6.19899E-03 6.52921E-03 6.82089E-03 7.07414E-03 7.28965E-03 7.46859E-03 ; 7.61253E-03 7.72340E-03 7.80335E-03 7.85470E-03 7.87984E-03 7.88122E-03 ; ...; ```; [ESP.cube.diff.gz](https://github.com/psi4/psi4/files/2188212/ESP.cube.diff.gz); ; I have enabled `cubeprop-esp` tests on Travis and it passes:; ```; Start 365: cubeprop-esp; 117/148 Test #365: cubeprop-esp ..................... Passed 9.93 sec; ```; So it is just numerical noise on my system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404470335:104,test,tests,104,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404470335,6,"['Test', 'test']","['Test', 'tests']"
Testability,"@loriab . The state of my PRs:; - ~~#1067 -- needs some work, **waiting for reviews**~~; - ~~#1071 -- almost ready to merge~~; - ~~#1075 -- needs some work, **waiting for reviews**~~; - ~~#1077 -- needs some fixes~~; - ~~#1078 -- needs some fixes, **waiting for reviews**~~; - ~~#1087 -- **waiting for reviews**~~; - ~~#1089 -- **waiting for reviews**~~; - ~~#1090 -- **waiting for reviews**, needs tests~~; - ~~#1091 -- **waiting for reviews**, needs tests, **can be merged**~~; - ~~#1092 -- **waiting for reviews**, needs tests~~; - ~~#1112 -- **waiting for reviews**~~",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-407357786:399,test,tests,399,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-407357786,3,['test'],['tests']
Testability,"@loriab ; I have (almost) worked out a fix for this. . Would anyone be opposed to a helper script that goes in an runs the generated `FREQ-x.in` files, appends the tests to `FREQ-master.in` and runs it as well? It will work similarly to `runtest.py` so it will record the results in `testresults.log` as well, and is general so could be a solution for multi-invocation tests going forward. . If so I just need hook this in with CMake/CTest and I can open a PR. . Also, can anyone confirm that the testing reference values in [tests](https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests) are okay?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/168#issuecomment-157477226:164,test,tests,164,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157477226,8,"['log', 'test']","['log', 'testing', 'testresults', 'tests']"
Testability,"@loriab ; as a follow up from #1948; the original issue was resolved, but I've missed another edge-case, where setting `freeze_core True` results in empty-blocks in mp2 terms ... (sorry for being such a pain).; I've hacked away a solution and additional regression tests (should I add `output.ref` also?) with lithium dimer.; The code is available at [fcore_fix](https://github.com/PhillCli/psi4/tree/usapt0_spin_fix_fcore), should I make another PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830#issuecomment-658966911:265,test,tests,265,https://psicode.org,https://github.com/psi4/psi4/issues/1830#issuecomment-658966911,1,['test'],['tests']
Testability,"@loriab @dgasmith Thanks for merging PR #880, the tests are very helpful. All of the original funcs pass with this `dict_func` patch - only wB97X doesn't match the old pre-libxc psi4 value. Unfortunately, wB97X-D3 requires tweaks to the underlying functional and I'm not sure whats wrong with O3LYP, both of which are expected fails against Q-Chem. . From the funcs I implemented in the meantime (SOGGA, SOGGA11, revPBE, MN12-L, M06-L, MN15-L, SOGGA11-X, MN12-SX), all pass against Q-Chem and only SOGGA fails against old psi4, but we knew that already. A lot of the other functionals, especially DSD-hybrids, do not have a reference value for the water ionisation energy. This is related to the crash in the `dft-smoke` test, as DSD-PBEP86 is part of it. Gaussian 2016 implements the ""Kozuch 2011"" version of DSD-PBEP86, I am not sure it includes any dispersion in their form: it would be prudent to have our implementation of that one match G16. Alternatively, we can stick to Kozuch's 2013 paper (where he supplies non-, D2-, D3- and D3BJ- forms of at least 10 DSD functionals); but then we're on our own. . In any case I suggest replacing DSD-PBEP86 in `dft-smoke` by a more widely used functional - B2PLYP or PBE0-2 or PBE0-DH come to mind; even though they are not spin-component-scaled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-371075180:50,test,tests,50,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-371075180,2,['test'],"['test', 'tests']"
Testability,"@loriab @jturney PR is ready for merge, after all tests pass!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3187#issuecomment-2243611607:50,test,tests,50,https://psicode.org,https://github.com/psi4/psi4/pull/3187#issuecomment-2243611607,1,['test'],['tests']
Testability,@loriab All tests are passing! Ready for review on my end.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1799#issuecomment-600881028:12,test,tests,12,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-600881028,1,['test'],['tests']
Testability,"@loriab Cheers, this seems to work! Thanks, i would have never found the culprit. At least it compiles and links, tomorrow i will test whether it runs :-). Edit: after some fiddling with runtest.py, also all included tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121402243:130,test,test,130,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121402243,2,['test'],"['test', 'tests']"
Testability,"@loriab Done, I added it to the other cbs-tests at the beginning of the list.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-380001726:42,test,tests,42,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-380001726,1,['test'],['tests']
Testability,"@loriab I have a couple of reference FCIDUMP files that the HANDE QMC code uses in its tests. I have been checking against those, so I can definitely add tests. I'll add a `compare` function similar to `compare_cubes`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355744886:87,test,tests,87,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355744886,2,['test'],['tests']
Testability,"@loriab I have integrated `psi4 --fulltest` on Azure, but the tests does not work in parallel:; ```; 2018-12-06T18:15:06.8235423Z =================================== ERRORS ====================================; 2018-12-06T18:15:06.8236398Z _______________ ERROR at teardown of test_deprecated_wfn_arrays _______________; 2018-12-06T18:15:06.8236914Z [gw0] win32 -- Python 3.6.6 C:\tools\miniconda3\python.exe; 2018-12-06T18:15:06.8237116Z ; 2018-12-06T18:15:06.8238150Z tp = <class 'PermissionError'>, value = None, tb = None; 2018-12-06T18:15:06.8238413Z ; 2018-12-06T18:15:06.8238651Z def reraise(tp, value, tb=None):; 2018-12-06T18:15:06.8238835Z try:; 2018-12-06T18:15:06.8239065Z if value is None:; 2018-12-06T18:15:06.8239312Z value = tp(); 2018-12-06T18:15:06.8239526Z if value.__traceback__ is not tb:; 2018-12-06T18:15:06.8239861Z raise value.with_traceback(tb); 2018-12-06T18:15:06.8240255Z > raise value; 2018-12-06T18:15:06.8240643Z ; 2018-12-06T18:15:06.8240921Z C:\tools\miniconda3\lib\site-packages\six.py:693: ; 2018-12-06T18:15:06.8241733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8242195Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8242519Z raise value; 2018-12-06T18:15:06.8243257Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8243569Z raise value; 2018-12-06T18:15:06.8244186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8244400Z ; 2018-12-06T18:15:06.8244638Z def tear_down():; 2018-12-06T18:15:06.8245076Z import os; 2018-12-06T18:15:06.8245339Z import glob; 2018-12-06T18:15:06.8245555Z import psi4; 2018-12-06T18:15:06.8245794Z psi4.core.close_outfile(); 2018-12-06T18:15:06.8246104Z patterns = ['cavity.*', 'grid*', 'pytest_output.*h5',; 2018-12-06T18:15:06.8246380Z 'pytest_output.dat',; 2018-12-06T18:15:06.8246851Z '*pcmsolver.inp', 'PEDRA.OUT*', 'timer.dat']; 2018-12-06T18:15:06",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007:62,test,tests,62,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007,1,['test'],['tests']
Testability,"@loriab I just ran the original branch of Bozkaya's and confirmed that all six pytest failures, where `MP2 SINGLES ENERGY` is zero for MP3 calculations on top of ROHF references, originate there. The test failures do not appear for MP2 computations, so this is a regression in Bozkaya's fork. The 98% is confirmed. Keep me in the loop. For behnle, this means that you don't need to worry about the test failures. _Someone_ will deal with it, the main devs just need to figure out who that is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-974321512:200,test,test,200,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-974321512,2,['test'],['test']
Testability,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252797491:431,test,tests,431,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491,1,['test'],['tests']
Testability,@loriab I ran a full set of tests locally and seem to be failing only the following two ctests: `432 - python-mints9 (Failed)` and `443 - json-schema-1-properties (Failed)`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1799#issuecomment-599580161:28,test,tests,28,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-599580161,1,['test'],['tests']
Testability,"@loriab I removed the `MEMORY` option from the ADC section, but now some tests using `fnocc` are failing, because apparently, the option was *only* provided by the ADC part in `read_options.cc`... What should I do about this? `adcc` does not take any input on available memory, so where should the `MEMORY` option live from now on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2737#issuecomment-1269567607:73,test,tests,73,https://psicode.org,https://github.com/psi4/psi4/pull/2737#issuecomment-1269567607,1,['test'],['tests']
Testability,"@loriab I tested the new c-f packages and the conda dep solving just works out of the box (even in a complex and large conda env). So far all my test suite (single point energy) works perfectly. Thanks again for the effort!. On my side, I think that issue can be closed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1527993988:10,test,tested,10,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1527993988,2,['test'],"['test', 'tested']"
Testability,"@loriab I think I have these reimplemented in 1.2, do you have test cases for them?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/39#issuecomment-272698064:63,test,test,63,https://psicode.org,https://github.com/psi4/psi4/issues/39#issuecomment-272698064,1,['test'],['test']
Testability,"@loriab I think this is now ready for review. The values in the new test are hand-calculated from the single point values using a spreadsheet. Let me know if I should just boilerplate the docstrings from the `qcdb.cbs_helpers` file - and whether I should change just the missing functions or the old ones as well. One thing that is perhaps missing is handling of different `corl_alpha`'s for delta-corrections; this might actually be a useful feature, as one is more likely to drop down to [DT] extrapolation (for which `alpha = 2.4` gives better results) with things like CCSD(T) while using MP2/[TQ] as the `corl_wfn/basis`. It should be an easy fix. I left the `pcseg-N` basis sets out for now; I'll read the literature and see whether it makes sense. I still plan to allow the `roos-ano-[dt]z` basis sets into the CBS functions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381996152:68,test,test,68,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381996152,1,['test'],['test']
Testability,"@loriab I think we were running full tests on this, do you have any results?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/773#issuecomment-321896860:37,test,tests,37,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-321896860,1,['test'],['tests']
Testability,@loriab I'm confused about the test results. The ctest returns:; ```; The following tests FAILED:; 	184 - fcidump (Failed); 	359 - dft-custom-dhdf (Failed); 	363 - dft-cation (Timeout); 	364 - dft-water-dimer (Timeout); 	384 - chemps2-caspt2-n2 (Failed); ```; where the `dft-` and `fcidump` tests failing are expected as your PR that fixes them is not yet pulled in. The `chemps2/caspt-n2` test passes when I run it manually and passed in the test log file (see attached); [testresults.log](https://github.com/psi4/psi4/files/1889030/testresults.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379675367:31,test,test,31,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379675367,10,"['log', 'test']","['log', 'test', 'testresults', 'tests']"
Testability,@loriab I'm fine with the test case from the original issue. Thanks for putting it there!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1948#issuecomment-658676540:26,test,test,26,https://psicode.org,https://github.com/psi4/psi4/pull/1948#issuecomment-658676540,1,['test'],['test']
Testability,"@loriab I'm happy to switch the logic if necessary, and I would love to name it `undead_ghosts`, but the name should probably be strikingly clear at a glance since it's a required arg c-side. `include_ghosts` or `count_ghosts` maybe? . As for uses w/i our control, I'm not convinced we've switched everything that needs it, but the ones I _have_ switched from default I am confident in (current work on `scatter.cc` and the Hessian notwithstanding). If there's others we could ping for the other cases I'm all for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1355#issuecomment-444930702:32,log,logic,32,https://psicode.org,https://github.com/psi4/psi4/pull/1355#issuecomment-444930702,2,['log'],['logic']
Testability,"@loriab I've merged your PR into DEShawResearch/sns-mp2, and updates the testing code to work better outside of desres internal infrastructure (no `import garden)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/865#issuecomment-347565056:73,test,testing,73,https://psicode.org,https://github.com/psi4/psi4/pull/865#issuecomment-347565056,1,['test'],['testing']
Testability,@loriab I've tried running the tests with Intel MPI but lots of them hang or fail...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230751650:31,test,tests,31,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230751650,1,['test'],['tests']
Testability,@loriab It looks like the tests still aren't running. Should I try closing this PR and creating a new one?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2160#issuecomment-823467652:26,test,tests,26,https://psicode.org,https://github.com/psi4/psi4/pull/2160#issuecomment-823467652,1,['test'],['tests']
Testability,"@loriab Just tried to link with conda chemps2 using the one from the test subchannel. CMake does not seem to realize CheMPS2 is there and keeps saying ""no suitable chemps2 found"" in spite of me passing; `-DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/global/home/users/jgonthier/software/miniconda -DCheMPS2_DIR=/global/home/users/jgonthier/software/miniconda` to CMake. Am I forgetting an option/env variable ?. @susilehtola Thanks for the suggestion ! I guess we could also always re-built a local version of gcc... Hopefully if the binary works it won't come to that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288500982:69,test,test,69,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288500982,1,['test'],['test']
Testability,"@loriab OK, should be good to go now. Although the 'bash' test started failing for some odd reason, after that keyword fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2085#issuecomment-763209736:58,test,test,58,https://psicode.org,https://github.com/psi4/psi4/pull/2085#issuecomment-763209736,1,['test'],['test']
Testability,"@loriab Ok, after some problems getting everything to work together, and setting `which python` to the correct Python, here is what I see (still Ubuntu 16.04.1 LTS, gcc 5.4.0, Python 3.5.2):; - with ATLAS (v. 3.10.2), the following tests fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 188 - mints9 (Failed); - with Intel MKL (v. 2017.0.098), I have two Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout); 329:libefp-qmefp-moldomains (Failed); - with openBLAS (v. 0.2.18), I have one Failed and one Timeout:; 188:mints9 (Failed); 243:opt13 (Timeout). All were compiled with optimization (release version). Note that ATLAS does not time out on opt13, which seems to indicate it's a bit faster than the other two, but then it fails for the cdomp2/dfomp2 tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-278449042:232,test,tests,232,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-278449042,2,['test'],['tests']
Testability,"@loriab Okay, I will test with Intel MKL and OpenBLAS and let you know how this goes. I also confirm that `which python` is Python 2.7 whereas CMake found Python 3.5 and built with it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-277547014:21,test,test,21,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277547014,1,['test'],['test']
Testability,"@loriab Since, I've touched this code once more. I tried to add a test if all types (`mb`,`non-mb`) x (`cp=1, `cp=0`) passes (for a selected subset). I've run into for `midbond` (three fragments) with `cp=0`:; ```; python3 tests/python/databases/input.py. felez: [array([1.]), array([1., 0.])]; all_fc_known: True; all_fm_known: True; zel: 2.0; fzel: [1.0, 1.0]; c: [0.0, 0]; fc: [0.0]; fc: [0.0]; m: [1]; fm: [1]; fm: [1]; Assess candidate (0.0, (0.0, 0.0), 1, (1, 1)): 1 2 3 4 4-0 4-1 5 5-0 5-1 6 6-0 6-1 7 7-0 7-1; Assess candidate (0.0, (0.0, 0.0), 1, (1, 1)): T T T T T T T T T T T T T --> False; Following warning is harmless if you've altered chgmult through `set_molecular_change` or `set_multiplicity`. Such alterations are an expert feature. Specifying in the original molecule string is preferred. felez: [array([1.]), array([1., 0.])]; all_fc_known: False; all_fm_known: False; zel: 2.0; fzel: [1.0, 1.0]; c: [0.0, 0]; fc: [0.0, 0.0]; fc: [0.0, 0.0]; m: [1]; fm: [1, 1, 2]; fm: [1, 1, 2]; Assess candidate (0.0, (0.0, 0.0), 1, (1, 1)): 1 2 3 4 4-0 4-1 5 5-0 5-1 6 7 8 ; Assess candidate (0.0, (0.0, 0.0), 1, (1, 1)): T T T T T T T T T T --> False; Assess candidate (0.0, (0.0, 0.0), 1, (1, 2)): T T T T T T T T T T --> False; Assess candidate (0.0, (0.0, 0.0), 1, (2, 1)): T T T T T T T T T T --> False; Assess candidate (0.0, (0.0, 0.0), 1, (2, 2)): T T T T T T T T T T T --> False; Traceback (most recent call last):; File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/qcdb/molecule.py"", line 1468, in to_dict; validated_molrec = qcel.molparse.from_arrays(speclabel=False, verbose=0, domain='qm', **molrec); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/from_arrays.py"", line 381, in from_arrays; verbose=verbose); File ""/home/filip/software/psi4-1.4rc-opt/lib/qcelemental/molparse/chgmult.py"", line 485, in validate_and_fill_chgmult; c_final, fc_final, m_final, fm_final = reconcile(cgmp_exact_c, cgmp_exact_fc, cgmp_exact_m, cgmp_exact_fm); File ""/home/fili",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2154#issuecomment-882794765:66,test,test,66,https://psicode.org,https://github.com/psi4/psi4/pull/2154#issuecomment-882794765,2,['test'],"['test', 'tests']"
Testability,"@loriab Tested, and no trouble with Py 3.5. Expect requested renaming in a minute, though I prefer `suspect_lineno` over `faulty_lineno`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1214#issuecomment-418859922:8,Test,Tested,8,https://psicode.org,https://github.com/psi4/psi4/pull/1214#issuecomment-418859922,1,['Test'],['Tested']
Testability,"@loriab Thanks for the tips. `LD_LIBRARY_PATH` is in effect in my terminal, here are the results of commands directly issued in the same terminal:; `>> echo $LD_LIBRARY_PATH`; `>> /theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib [...]`; then:; `>> ldd stage/usr/local/bin/psi4`; `>> stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `CXXABI_1.3.8' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by stage/usr/local/bin/psi4)`; `stage/usr/local/bin/psi4: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by stage/usr/local/bin/psi4)`; [...]; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fd93dcba000)`; `libiomp5.so => /theoryfs2/ds/gonthier/software/miniconda3/lib/libiomp5.so (0x00007fd93d970000)`; [...]. As you can see, the correct path is in `LD_LIBRARY_PATH`, yet `ldd psi4` does not find the correct `libstdc++.so.6`, yet `libiomp5.so` finds the miniconda path that is in `LD_LIBRARY_PATH`. Finally, I tried your suggestion to directly modify the `link.txt` file with explicit specification of the `gcc52` path. Sure enough, this worked ! Psi4 finds the correct gcc library and runs like a charm (well, I barely started the tests so let's keep the fingers crossed). I don't see with what `gcc52` could mix, since I don't have any other environments defined. Plus, I'm never using `source activate gcc52` because this command does not work any more, at least on `ds3` (can you tell the software has been quite hostile to me on this build ?). Thanks for everything anyway. Should I report back with possible test failures here again or open a new issue ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252821533:1329,test,tests,1329,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252821533,2,['test'],"['test', 'tests']"
Testability,"@loriab The external projects versioning policy is clear, but I am still confused. Am I not doing (1)? It is no problem for me to take care of fixing Psi4 build/test for new PCMSolver version and then let you know _via_ a PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-226109331:161,test,test,161,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-226109331,2,['test'],['test']
Testability,"@loriab They are a different kind of test, there may be some overlap however.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/877#issuecomment-358351578:37,test,test,37,https://psicode.org,https://github.com/psi4/psi4/pull/877#issuecomment-358351578,1,['test'],['test']
Testability,"@loriab `v1.2.1` tagged. With all necessary fixes this time, at least from my testing. I've updated docs and tests. The DALTON inputs and output files for the geometry optimization test are also included.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/988#issuecomment-386082337:78,test,testing,78,https://psicode.org,https://github.com/psi4/psi4/pull/988#issuecomment-386082337,3,['test'],"['test', 'testing', 'tests']"
Testability,"@loriab after some consideration with @lothian , I think the simplest course of action would be to simply not store the scalar variable. the unit question is somewhat nontrivial, plus there is the issue of scaling the rotation by the molecular weight of the system (which is handled very differently for solvated molecules, but is not accounted for in `ccresponse`). therefore the best way to make sure the user knows what they're getting is to let them compute it themselves from the mixed electric dipole-magnetic dipole response tensor. . following this logic, I also propose removing the scalar electric dipole polarizability, which is also easily computed using the trace of the stored tensor. I would update the new test to reflect this, just want to be sure this is an agreeable solution for everyone before I commit the changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-717483962:557,log,logic,557,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-717483962,4,"['log', 'test']","['logic', 'test']"
Testability,"@loriab and @tovrstra: Can we find a compromise where we keep the interface consistent but make sure that the inner workings of C++ classes is all in a.u.? I agree that having the logic deep down the code is not the right way to go. I would keep the current automatic conversion for several reasons:; 1. **Continuity**. People are already using it, so switching could create some challenges since one would have to be careful when setting up computations for different version of psi4; 1. **Potential confusion**. The potential for confusing bohr/ang with the external field is greater than that of confusing bohr/ang in the molecule geometry. For molecules if one confuses bohr vs. ang you easily run into convergence problems or get nonsensical results. But for the external field corrections it's not obvious, unless one does some testing. We, for example, could entirely miss this change in our computations.; 1. **Practicality**. We use the external charges and in our typical workflow we prepare a geometry for a lattice of atoms and then separate the QM from the MM region. It's just simpler to keep everything consistent in one set of units. I have to say, that from the user perspective, the current way we handle the input is not ideal. I am not familiar with QMMM codes, but what would be the most convenient input format is something like we have for the molecular fragments:; ```; molecule {; C ; O ; <some delimiter>; Q X1 Y1 Z1 CHARGE1; Q X2 Y2 Z2 CHARGE2; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345:180,log,logic,180,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345,4,"['log', 'test']","['logic', 'testing']"
Testability,@loriab do you run the tests with Intel MPI at one point? They're failing here for me because CMake picks `mpiexec` over `mpirun` to execute the tests. I'm currently forcing it by `-DMPIEXEC=mpirun`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230519769:23,test,tests,23,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230519769,2,['test'],['tests']
Testability,"@loriab full tests are running, although I have the default libint which is handicapped. Your failures were most likely caused by #1451: since the occupation numbers weren't included, e.g. the Sc atom would have been calculated in the charge state -15(!).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451553569:13,test,tests,13,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451553569,1,['test'],['tests']
Testability,"@loriab might be a better place to recommend. But my first thought it `tests/pytests/test_mints.py`. This would be a new file, but a good place for libmints unit tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1799#issuecomment-596682471:71,test,tests,71,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-596682471,2,['test'],['tests']
Testability,@loriab that is the only part Im not sure on. Feedback on indexing would be appreciated. I will open an issue for the lack of proper `compare_values` checking in the cc property codes. We also don't have tests for UHF properties I can ask @lothian about references and reference values.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259607756:204,test,tests,204,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259607756,1,['test'],['tests']
Testability,"@loriab this was a bit premature merge, all tests haven;t yet completed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408902923:44,test,tests,44,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408902923,1,['test'],['tests']
Testability,@loriab to add to this the CI seems to **build** fine. Some of the tests no dice.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775#issuecomment-1314634682:67,test,tests,67,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314634682,1,['test'],['tests']
Testability,"@loriab yeah the test needs updating: question is with what? Do we want to keep checking against just the ECP's frozen, or the full [Kr] frozen, or perhaps both?. My suggestion would be both: do a full-core Ne-Xe, then `frozen_core = True` Ne-Xe (with [He] and [Kr] frozen respectively), and then `num_frozen_docc = 1` which tests Ne ([He] frozen) - Xe (only ECP frozen) which is the current test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-385628434:17,test,test,17,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-385628434,3,['test'],"['test', 'tests']"
Testability,@loriab you mean as a new test case?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1999#issuecomment-683299221:26,test,test,26,https://psicode.org,https://github.com/psi4/psi4/pull/1999#issuecomment-683299221,1,['test'],['test']
Testability,"@loriab you mean, the command has to be changed to an equivalent of; ```bash; PYTHONPATH=stage/lib/ pytest -v -rws --durations=5 stage/lib/psi4/tests/; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444540505:144,test,tests,144,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444540505,1,['test'],['tests']
Testability,"@loriab, #843 is related but not fixed: see attached calculations with (a relatively old) master and patched versions:; [master.txt](https://github.com/psi4/psi4/files/2246477/master.txt); [patched.txt](https://github.com/psi4/psi4/files/2246478/patched.txt); ```; pk@dream:~/psi4/tests/ecp_fix_tests/issue-843::grep ""Final E"" master.txt ; @DF-RHF Final Energy: -594.38702051330188; @DF-RHF Final Energy: -297.22774750033523; pk@dream:~/psi4/tests/ecp_fix_tests/issue-843::grep ""Final E"" patched.txt ; @DF-RHF Final Energy: -594.38702051366886; @DF-RHF Final Energy: -297.22774750056516; ```; While the current patch fixes _a_ bug, it doesn't fix _the_ bug. I'll have a look if I can figure out why ghosts still posess ECP's.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1109#issuecomment-409309750:281,test,tests,281,https://psicode.org,https://github.com/psi4/psi4/pull/1109#issuecomment-409309750,2,['test'],['tests']
Testability,"@loriab, I am excited to test this feature more extensively. When it will be available in the conda build can you please let me know?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/720#issuecomment-303909419:25,test,test,25,https://psicode.org,https://github.com/psi4/psi4/pull/720#issuecomment-303909419,1,['test'],['test']
Testability,"@loriab, I noticed that you posted a fix for my Psi4/Cfour problem at https://github.com/psi4/psi4/pull/2615. Thank you for that! As I understand correctly, you have the updated files using which all Cfour test jobs run successfully. If so, could you please help me which files have been modified, and from where I can download them?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1168954201:206,test,test,206,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1168954201,1,['test'],['test']
Testability,"@loriab, I think we might be able to check the first box. I tested on my linux box and I can compile and run plugins with scf and mointegrals. Do you want a separate manual page or it is ok to post new info in the same page where we describe ""--new-plugin""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216#issuecomment-212549702:60,test,tested,60,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-212549702,1,['test'],['tested']
Testability,"@loriab, okay, I think I got my plugin compiling against the latest psi4 conda build. The code is [here](https://github.com/rmcgibbo/resp2) and the build log on Travis-CI [here](https://travis-ci.org/rmcgibbo/resp2), if you're curious, at least about the configure/make stuff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172287504:154,log,log,154,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172287504,1,['log'],['log']
Testability,@loriab: I indeed forgot to pass the default to python. Pushed a commit and waiting for testing. In the long run the default should disappear.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756#issuecomment-558253387:88,test,testing,88,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-558253387,1,['test'],['testing']
Testability,"@loriab: yes, I forgot that's how we solved psi4/psi4private#115. Let me point out that I observe the same behavior if turn df_scf_guess on or off. So my main concern was efficiency, because we seem to recompute the PK integrals twice for both df_scf_guess=off or on. I think that for consistency we should perhaps warn the user if he/she selects df_scf_guess=off and of course not recompute PK integrals again. I am not particularly concerned with being able to do DF followed by PK, I just had a test fail in our plugin and I traced it back to the fact that orbitals from DF/PK gave slightly different energies (<1e-10). Perhaps we could re-enable df_scf_guess=on, but with the new info passing that's not too difficult to reproduce with two scf calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281#issuecomment-189096514:498,test,test,498,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189096514,1,['test'],['test']
Testability,"@loriab; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/1; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587:228,test,tests,228,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587,1,['test'],['tests']
Testability,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:268,test,tests,268,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131,1,['test'],['tests']
Testability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 5aa048b39 has been issued to your PR branch; * this updates 4 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin ghadocs3` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319:250,test,tests,250,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319,1,['test'],['tests']
Testability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:251,test,tests,251,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574,1,['test'],['tests']
Testability,"@lothian For EFP I would argue that we should figure out the corner case now while were thinking about it as they are likely to come up again in the future. If we simple pass through the SCF Wavefunction or a blank Wavefunction for these, thats fine. But we need to make it a rule. @fevangelista By the same token, psimrcc doesn't need a Wavefunction if you are ok with the default behavior for Wavefunction-less methods. I could see moving the C1 symmetry conversion to a later date (David has already strongly encouraged me to think about overhauling the Wavefunction class). Everything else I would want in a 1.0 release as they are enhancements that will prevent additional forum posts (documentation, softer fails, and plugins using modern Psi programming practice) or what I would call logical flow\* issues (passing orbitals to SCF, what wavefunction is returned). *Logical flow: If an advanced user is used to certain mechanics working it is quite jarring when a conventional call suddenly does not work for no apparent reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-191759336:792,log,logical,792,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191759336,3,"['Log', 'log']","['Logical', 'logical']"
Testability,"@lothian I am just happy that I remembered this! . I updated some CC output printing to align a bit better and checked over a few CC test cases. I think everything looks ok, but if someone else could eye ball a couple that would be great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205340495:133,test,test,133,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205340495,1,['test'],['test']
Testability,@lothian I've determined on my boxes where the compile failed it due to Intel compilers still use my gcc headers for the standard library. My gcc compilers on that box are a little dated (version 4.3.4) which do not provide the C++11 std::to_string functions. Is this the case for you?. I have some implementations of this function in one of our libraries just need to put in a test whether to include them or not.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/155#issuecomment-126337647:378,test,test,378,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-126337647,1,['test'],['test']
Testability,"@martin-frbg, built again with `NUM_PARALLEL=4` and added results to table. Regrettably, no change, still failing at `-n2` and `-n4`. Thanks for the suggestion. @Diazonium, thanks for the Ryzen info. I passed it along to @CDSherrill, and we'll keep it in mind when testing the new box.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391089728:265,test,testing,265,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391089728,1,['test'],['testing']
Testability,"@mfherbst , there's a couple of the ddx tests failing now https://github.com/psi4/psi4/actions/runs/4703123664/jobs/8341938828?pr=2906#step:23:739, and I suspect it's because of the v0.4.1 released yesterday since it was working fine with v0.3.0 after your #2918 . Does this sound right? If so, we can pin to v0.3 unless you have a PR in the works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906#issuecomment-1509276521:40,test,tests,40,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1509276521,1,['test'],['tests']
Testability,"@mfherbst, would you mind building a py38 (sorry, can't test it against a psi yet) while you're at it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598847371:56,test,test,56,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598847371,1,['test'],['test']
Testability,@obrien951 Can you fix tests here so we can merge this in?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1635#issuecomment-683466510:23,test,tests,23,https://psicode.org,https://github.com/psi4/psi4/pull/1635#issuecomment-683466510,1,['test'],['tests']
Testability,"@obrien951 Looks good, please do try out that scaling test just to double check a few items.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1749#issuecomment-554162946:54,test,test,54,https://psicode.org,https://github.com/psi4/psi4/pull/1749#issuecomment-554162946,1,['test'],['test']
Testability,"@psi-rking . Yup, `asarray()` is great, a product of DGAS' numpy interface. And so much handier for printing psi4.core.Matrix to screen, rather than just mat.print_out() to file. I haven't traced it fully recently, but I expect [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.cc#L111) is where mass changes get caught. In practical terms, the freq-isotope[12] test cases should cover the rotational_symmetry_number with some care. You're right that mass-symmetry-breaking in Molecule wasn't working at one time, though. I should probably spice up mints5 to check this thoroughly. Or were you concerned particularly with non-Abelian PG involving `n`? Or something else I've missed?. Hmm, I keep reading it as ""nwchem hessian"". Maybe time for a name change to just ""hessian"" with the weightedness in the docstring.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834#issuecomment-344691586:394,test,test,394,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-344691586,1,['test'],['test']
Testability,"@psi-rking @AlexHeide ping. I don't know if I've loaded all the details, but a table like below may organize discussion (or at least provide something to write a test against) even if my rightmost column is wrong. cmd | bsse_type | return_total_data | performs; ---- | ---- | ---- | ----; energy | cp | true | 5 ene, return CP tot; energy | cp | false (default) | 3 ene, return CP IE; energy | cp, uncp | true | 5 ene, return CP tot; energy | cp, uncp | false (default) | 5 ene, return CP IE; gradient | cp | true | 5 grad, return CP tot; gradient | cp | false (default) | 3 grad, return CP IE; gradient | cp, uncp | true | 5 grad, return CP tot; gradient | cp, uncp | false (default) | 5 grad, return CP IE. users aren't calling `gradient(... bsse_type)` directly -- either `optimize()` or an optimizer program are making that call, and I think the latter can hard-wire the correct choice they need (5th line?).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783:162,test,test,162,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869918783,1,['test'],['test']
Testability,"@psi-rking @avcopan Some more thorough testing of the #859 hotfix above allowed me to reproduce non-deterministic behavior where the IRC may or may not converge after the second step. Output files below. [output1.txt](https://github.com/psi4/psi4/files/1533781/output1.txt); [output2.txt](https://github.com/psi4/psi4/files/1533782/output2.txt). I want #859 fixed before trying to fix this issue, because that kills my test cases before they encounter this bug. I see two options for the #859 fix. 1. Forbid the IRC from ending if the hessian has a negative eigenvalue, as we cannot be at a minimum. This fixes both issues, but requires that Optking's hessian agree with the true hessian about whether there is a negative eigenvalue. Is this a reliable assumption? And what if Optking gets ""stuck"" at a very flat initial transition state? Do we want it to continue trying to get out until it exhausts its number of optimizations?; 2. Keep the condition I tried to generate these output files, where we only forbid exit on iteration 1. It is up to the user to check that the IRC does not get stuck at the initial TS later and change the step size if it does get stuck. In either case, fixing #859 will not fix this bug, so I'll have to investigate the source of this non-determinism next. EDIT0: Investigation revealed that the early-exit cases have an initial u_f_q_dot value between -0.84 and -0.88, where the normal cases have a u_f_q_dot between +0.75 and +0.77. I refer to [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/molecule_irc_step.cc#L216-L220 ).; EDIT1: After looking at the code, my _intuition_ is that this is a problem of near-zero gradients. Because of the original tight convergence of the TS, the first gradient is very near zero. There's no guarantee what sign it will have. But when we normalize it and take the overlap with our first displacement, the displacement could very well have caused the gradient to change signs. The optimizer sees we have ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-349520464:39,test,testing,39,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-349520464,4,['test'],"['test', 'testing']"
Testability,"@psi-rking Just to double check, did you run this through all opt tests as well as quick tests?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/328#issuecomment-202633222:66,test,tests,66,https://psicode.org,https://github.com/psi4/psi4/pull/328#issuecomment-202633222,2,['test'],['tests']
Testability,"@psi-rking, great, thanks for the prototype. Maybe put your post at https://github.com/psi4/psi4/issues/402 and mention it in the newdev slack channel. Also,; * is there anything particular to MP2 or is that just what you tested against?; * general fyi is that there's multi-QC-package vib outputs in the isotope-1 test cases that also may have some intensities; * how rigorous is that c1/no_com/no_reorient req. in your input file. Absolutely required to get the right charge origin? Or could we run with symmetry if we knew how to transform the Hessian or perturbation vectors into better frame? Is it different for charged species?; * why ""roa""? Just because it brings dipole derivatives for free?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/347#issuecomment-347215160:222,test,tested,222,https://psicode.org,https://github.com/psi4/psi4/issues/347#issuecomment-347215160,2,['test'],"['test', 'tested']"
Testability,"@psi-rking, you're one of the two people I know for whom this PR will actually solve a problem. That is, with this version of the code, Psi4's math detection should properly find your ACML libraries and forward them on to CheMPS2 and libefp without you fiddling with `LAPACKBLAS_LIBRARIES` or pointing to any special upstream branches. If you have a chance, I'd like to know if this works for you. Easiest way to get the code is a fresh checkout `git clone https://github.com/loriab/psi4.git` followed by branch switch `git checkout lapack`, then build as normal, giving none to minimal math hints. Also, don't use a `CMAKE_INSTALL_PREFIX` that has an existing psi4 in it (CMake's shown itself overzealous in finding and using old pybind11's). And, if you would, add `ENABLE_CheMPS2=ON` (you'll need hdf5 somewhere) to test that AddON + ACML, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276672405:819,test,test,819,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276672405,1,['test'],['test']
Testability,@psi4/admins this is ready to go barring any requested changes (failing test case is a time out).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563#issuecomment-274514729:72,test,test,72,https://psicode.org,https://github.com/psi4/psi4/pull/563#issuecomment-274514729,1,['test'],['test']
Testability,"@psi4/maintainers Can we get a review on this, I think its time to get this in. . I believe @ashutoshvt Will edit the psi4numpy tests, but thats it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/757#issuecomment-358123419:128,test,tests,128,https://psicode.org,https://github.com/psi4/psi4/pull/757#issuecomment-358123419,1,['test'],['tests']
Testability,"@raimis Thanks very much - this is exactly the information I needed, and I've been able to reproduce the Azure DevOps results in my own tests. @dgasmith The Azure DevOps failures were associated with how the MDI Library compiles and installs DLL libraries. I've fixed the problems with the library, and all the tests are finishing successfully now. The relevant commits are [here](https://github.com/MolSSI/MDI_Library/commit/25cdcb30abfb4e13ced726249f619ef8acc19582) and [here](https://github.com/MolSSI/MDI_Library/commit/2ea5621ff3ee2020276c588a9962d756cc2cfb18). Thanks for your comments; I've incorporated them in the latest commits. @loriab Thanks very much for these comments. I'll try to address them soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479:136,test,tests,136,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-512852479,2,['test'],['tests']
Testability,"@raimis This was working for me fine before, but when I do a clean install now on Windows 10 (1809) with Miniconda3, I get the following error when I try to run a simple test job:. `ValueError: Object arrays cannot be loaded when allow_pickle=False`. Are you seeing this? Happy to discuss on Psi4 Slack if real time discussion would be helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-492353928:170,test,test,170,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-492353928,2,['test'],['test']
Testability,"@raimis, thanks! I've been wishing for a cloud option to run a full test suite. In Azure, I've added the variables below. I'm not too familiar with the interface, so let me know if I adjusted the wrong thing. <img width=""779"" alt=""screen shot 2019-02-12 at 9 51 03 pm"" src=""https://user-images.githubusercontent.com/2314730/52683303-6612c880-2f10-11e9-9dbb-c5862970cc88.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957:68,test,test,68,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957,1,['test'],['test']
Testability,"@raimis, yes, I've tried separate outfiles for individual tests, but pytest didn't like it, so need another bout. Also confirmed that there's no such thing as a session-wide tear-down with pytest-xdist. So, you're right, will have to stay serial for the moment. Sorry for the bad commit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445844379:58,test,tests,58,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445844379,1,['test'],['tests']
Testability,"@rlaplaza but the issue is exactly as I suspected. Look at the log file:; ```. Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 0, 0, 0, 0 ]; SOCC [ 0, 0, 0, 0 ]; NA [ 0, 0, 0, 0 ]; NB [ 0, 0, 0, 0 ]. @DF-UHF Final Energy: 9.36090161113092; ```. There are **no** electrons in the calculation. Getting zero contributions from the energy just doesn't happen otherwise, usually you just get nonsense.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692#issuecomment-518786574:63,log,log,63,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518786574,1,['log'],['log']
Testability,"@rmcgibbo I can't see why anything you have done would cause the output file to disappear, it's more likely that some changes you made have caused that test to error out before the output file was created. . Can you run mints9 locally and see what it spits out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-304134806:152,test,test,152,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304134806,1,['test'],['test']
Testability,@rmcgibbo Looks like that fixed it. Once the tests finish on my box I'll merge in the changes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130114755:45,test,tests,45,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130114755,1,['test'],['tests']
Testability,"@rmcgibbo, that'd be excellent. I'll make my changes on an open PR that I'll tag you in so you can see them, even if you don't have time to chime in. The old Psi4 approach was to parse and store basis sets C++ side. Then the parsing and storage (GShell, ShellInfo and the like) got copied to Python, with greatly improved parsing / file handling. I'd like to now get rid of the resulting duplication by having only parsing / filesystem code in python, and handing some hardwired data structure to the C++ constructor for building / storage. Then, I think the basis set storage (unused, AFAIK) in Python should be nuked, as should the parsing stuff in C++. It should make the whole process less confusing, I hope. I also want to move the ECP basis set to a member of regular Basis sets; the janky setup right now was done by me, mostly to test the integrals. Now we have the right answer, it's time to clean things up -- especially the multiple return values in the python basis set construction routines. Any thoughts / suggestions you have are most welcome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-305336864:838,test,test,838,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-305336864,1,['test'],['test']
Testability,"@robertodr , #668 corrected the nuclear repulsion energy, which didn't feel the effect of a field before (and it should). I missed the fact that there's a PCM test that uses the `perturb_h` machinery, so I didn't fix the test. Sorry about that. [This](https://github.com/psi4/psi4/blob/master/tests/props1/input.dat) test does essentially the same thing that you do in the dipole test. Because the NRE now feels the applied field, you can just remove the nuclear_dipole terms entirely (that function still exists, but now lives in molecule). The `perturb_with` syntax will work, but will be deprecated. Please change it to `perturb_with dipole` and `perturb_dipole [0, 0, $l]` as in the test case that I linked. Sorry for the confusion!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/665#issuecomment-291542176:159,test,test,159,https://psicode.org,https://github.com/psi4/psi4/pull/665#issuecomment-291542176,6,['test'],"['test', 'tests']"
Testability,@robertodr : I ran git log but was confused by the output. I am trying to clone the repo and compile again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171076595:23,log,log,23,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171076595,1,['log'],['log']
Testability,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-276677358:197,test,testing,197,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358,5,['test'],"['test', 'testing', 'tests']"
Testability,"@robertodr and @andysim ; I could certainly make a PsiAPI test for energies, although I think the leading underscore of `_energies_from_fcidump` will have to be removed, since it denotes that the function is private. @CDSherrill ; I intended for this bit of code to do exactly what you describe:. ``` wfn_irrep = 0; for h, n_socc in enumerate(active_socc):; if n_socc % 2 == 1:; wfn_irrep ^= h; ```. The line `wfn_irrep ^= h` accumulates the XOR of all irreps `h` in `wfn_irrep`. I could rewrite it as `wfn_irrep = wfn_irrep^h` to make it more intelligible. I think that the format of `active_socc` is not a list of irreps, instead it's a list of orbital counts per irrep, which is why I XOR `h` and not `n_socc`. The `if n_socc % 2 == 1` check takes advantage of the fact that a number XORed with itself is 0, so only irreps with an odd number of orbitals matter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1453#issuecomment-451459103:58,test,test,58,https://psicode.org,https://github.com/psi4/psi4/pull/1453#issuecomment-451459103,1,['test'],['test']
Testability,"@robertodr, go for it. I put the SO link at the top of the file. I really like the colors, too. Just have to restrain myself from using them too liberally. On the test labels front, I'd suggest. #### Labels; * `optests` - ""Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only"" plus one test from each add-on and python, json, psi4numpy (""add-in""?). name definitely up for discussion.; * `quicktests` - tests that contribute to ""Best coverage possible in a 20 min envelope. (10 minutes on 2-thread travis)"" just because everyone's trained up to type ""quicktests""; * `longtests` - tests that run in 15 min or more; * in particular, if a test doesn't belong to any of the three above, it shouldn't get _any_ length label. that will help with maintenance. #### Runs; * `ctest -L optests` - runs the operational tests; * `ctest -L quicktests` - runs the decent coverage tests; * `ctest -LE longtests` - runs everything but the indiv tests that require >15 min; * `ctest` - runs ""All psi tests (including the 30 minutes - 1.5 hour tests)""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262017070:163,test,test,163,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262017070,10,['test'],"['test', 'tests']"
Testability,@robparrish I can no longer reproduce this on any hardware and with any combinations of keywords. Sent you the results of the only failed test case results that I saved. @loriab Can you run this on your box again? Located in `dsmith/TEST`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/371#issuecomment-215913351:138,test,test,138,https://psicode.org,https://github.com/psi4/psi4/issues/371#issuecomment-215913351,2,"['TEST', 'test']","['TEST', 'test']"
Testability,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236387131:917,test,testing,917,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131,4,['test'],['testing']
Testability,"@sbembenek18 yes, this issue can either happen at random during the intermediate of solving SCF or by the physics of the ground state solution. If the issue is the latter, then you can't run the calculation with Psi4 at present. Also, I am not sure why you are using Dunning type basis sets for DFT; the pcseg-n or def2 series are much more efficient for SCF level calculations. I was able to converge the system in the def2-SVPD basis; I do not know if it converges in def2-TZVPD or def2-TZVPPD but I expect these solutions to be at least the same quality as the aug-cc-pVTZ result. Maybe the level splitting won't happen, maybe it will; you never know till you try. You may also to try out varying the occupations set by the initial guess, as well as testing other codes. If the calculation ran in version 1.5, the issue is not about the character of the ground state but simply that something has changed in the SCF code. If you fix the right occupations, the master branch should be able to find the same solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2594#issuecomment-1149297603:753,test,testing,753,https://psicode.org,https://github.com/psi4/psi4/issues/2594#issuecomment-1149297603,2,['test'],['testing']
Testability,"@schiebermc was seeing problems with `scf-coverage`, but my fresh build of this branch (icpc) came back clean on full tests. So no barriers to merge on my part. Keep an eye out for `scf-coverage` errors on the 3rd test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742#issuecomment-326597342:118,test,tests,118,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-326597342,2,['test'],"['test', 'tests']"
Testability,"@sgoodlett That's great. If you need me to test things, please let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-665720944:43,test,test,43,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665720944,1,['test'],['test']
Testability,"@sjrl see if the test I added is satisfactory. If so, I'll merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1950#issuecomment-658533901:17,test,test,17,https://psicode.org,https://github.com/psi4/psi4/pull/1950#issuecomment-658533901,1,['test'],['test']
Testability,"@susilehtola Right, thats why I was a little surprised that ~10 ROHF/UHF test cases failed with a SAD guess. Im guessing one can fiddle with the code and figure out how to do this a bit better than currently implemented, but it is worrying when we are going for consistency. With RHF its pretty well tested and we cannot find a case where it hurts rather than helps. Looks like we are hitting ERI AM limitation in Travis. Everything should pass when we roll over to direct when the AM of the auxiliary exceeds compiled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/400#issuecomment-223724073:73,test,test,73,https://psicode.org,https://github.com/psi4/psi4/pull/400#issuecomment-223724073,2,['test'],"['test', 'tested']"
Testability,"@susilehtola Yup, got it. With a test too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/588#issuecomment-275808801:33,test,test,33,https://psicode.org,https://github.com/psi4/psi4/pull/588#issuecomment-275808801,1,['test'],['test']
Testability,"@susilehtola if you get a chance, could you try running @PeterKraus's new sapt-ecp test from #1350? I think that and this PR may have conflicted in that I get `Fatal Error: Atom has more electrons than basis functions.` for the *non-ECP* case. When I switch to `set guess core` (and back off decimals to 6), it runs and passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-455372517:83,test,test,83,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-455372517,1,['test'],['test']
Testability,"@susilehtola there's https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.h#L352 but consider it API subject to change, as reference_wavefunction never really fulfilled its promise. On the other hand, if there's a test that uses that functionality, we can make sure it gets replaced with something that serves the same purpose. Probably any wfn that has a ref_wfn is correlated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1475#issuecomment-454121269:238,test,test,238,https://psicode.org,https://github.com/psi4/psi4/pull/1475#issuecomment-454121269,1,['test'],['test']
Testability,"@taylor-a-barnes I don't see any special issues in our Azure DevOps internals. Can you post the build log here?. @loriab @raimis Taylor is trying to reproduce Psi builds on his own Azure DevOps dashboard to debug the above issue, but even the simple Azure steps like check python version fail. Any ideas what this could be?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-511528510:102,log,log,102,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-511528510,2,['log'],['log']
Testability,"@taylor-a-barnes edit this line please, https://github.com/MolSSI-MDI/psi4/blob/mdi/external/upstream/mdi/CMakeLists.txt#L16 . Mostly to get Azure to trigger. I've logged back in -- sometimes that helps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2160#issuecomment-823417376:164,log,logged,164,https://psicode.org,https://github.com/psi4/psi4/pull/2160#issuecomment-823417376,1,['log'],['logged']
Testability,@tparker36 Can I get test case where this dies horribly?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/179#issuecomment-212570814:21,test,test,21,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-212570814,1,['test'],['test']
Testability,"@tzyii, good to know. but I'll need `conda list`, `ldd --version`, `which conda python psi4`, `cat /proc/cpuinfo | grep flags`, OS info, and `ldd -v CONDA_PREFIX/lib/pyth.../site-packages/psi4/core.so` to have any real hope of diagnosing. Or login access.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-405825074:242,log,login,242,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-405825074,1,['log'],['login']
Testability,"@uwhbliu : you can run a FCI computation from a FCIDUMP file in [forte](https://github.com/evangelistalab/forte), a psi4 plugin. I would be happy to help with the setup/compilation. A test case that runs FCI with frozen core orbitals is available [here](https://github.com/evangelistalab/forte/tree/master/tests/methods/integrals-fcidump-1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219:184,test,test,184,https://psicode.org,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219,2,['test'],"['test', 'tests']"
Testability,"@vymetal commit df548db seems to fix both the problems you reported, i.e. convergence failures for PCM-UHF and the discrepancies in calculated first-order properties _wrt_ finite difference calculations.; The input file you provided is now a test case for first-order properties with PCM (it's in `tests/pcm_dipole`) In case your problems persist, don't hesitate to open a new issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/198#issuecomment-172765174:242,test,test,242,https://psicode.org,https://github.com/psi4/psi4/issues/198#issuecomment-172765174,2,['test'],"['test', 'tests']"
Testability,"@wardence has seen what look like small errors in Hartree-Fock analytic; gradients in high-symmetry molecules that make me wonder if we have some; small noise coming from our general SCF gradient machinery. She is hoping; to post an issue on that as soon as she gets a little free time. This; might be a cause of the occasional small differences between analytic and; finite difference gradients observed by @raimis. @raimis, were your tests; run with a 3 point finite difference stencil, or 5 points? 5 points should; be more numerically stable (probably good to also crank up d_convergence; like @andysim did). The check done by @andysim looks pretty clean to me and suggest that, at; least for this test case, the wB97X-D gradients are fine. On Tue, Dec 12, 2017 at 1:44 PM, Andy Simmonett <notifications@github.com>; wrote:. > Thank you very much for looking into this, @raimis; > <https://github.com/raimis> - especially the detailed benchmarks. If my; > memories from way back (circa 2010) are correct, @robparrish; > <https://github.com/robparrish> and I were trying to write a prototype DF; > gradient code and hit a very strange error. The finite difference tests we; > did for hybrids all looked good, but for range-separated functionals we; > were getting quite large noise. The direct range-separated code worked; > fine, confirming that the derivative integrals were correct, and pointing; > the fact that we somehow messed up the chain rule in our haste. Since then; > Rob did a complete rewrite of the entire SCF machinery and made it; > infinitely better so, inspired by your detailed comments, I decided to; > revisit. This input; >; > memory 6Gb; >; > molecule C4NH4 {; > -1 1; > C 0.00000000 0.00000000 2.13868804; > N 0.00000000 0.00000000 4.42197911; > C 0.00000000 0.00000000 -0.46134192; > C -1.47758582 0.00000000 -2.82593059; > C 1.47758582 0.00000000 -2.82593059; > H -2.41269553 -1.74021190 -3.52915989; > H -2.41269553 1.74021190 -3.52915989; > H 2.41269553 1.74021190 -3.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351166112:436,test,tests,436,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351166112,3,"['benchmark', 'test']","['benchmarks', 'test', 'tests']"
Testability,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230783977:538,test,tests,538,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977,3,['test'],"['tested', 'tests']"
Testability,"A (much overdue) update! There is a very significant update to libecpint coming early next week (99% already available on libecpint/readecp branch) with: . - analytical 1st and 2nd derivatives; - general performance improvements; - much better API; - more robust testing. I will have a look at @andysim previous attempts and see if I can get it working, but I will probably need help hooking in the derivatives to Psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609:263,test,testing,263,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-698260609,1,['test'],['testing']
Testability,"A big suspect if MOM changed between v1.2 and v1.3 is the migration of SCF iterations from [C++ to Python](https://github.com/psi4/psi4/pull/953/files). That's an awfully big diff, so the main orientation is that some libscf_solver code headed to driver/proc/scf. I ""standardized"" the MOM logic a touch in a way I thought to be harmless. Certainly all tests were ok, but there wasn't much MOM testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692#issuecomment-518807757:289,log,logic,289,https://psicode.org,https://github.com/psi4/psi4/issues/1692#issuecomment-518807757,3,"['log', 'test']","['logic', 'testing', 'tests']"
Testability,"A couple thoughts before a more thorough review:. Can you add some test cases to verify that this doesn't change the SCF energy? That set of test molecules from yesterday would be good, plus a few larger molecules. Could you do some timing to verify that this does in fact speed the SCF code up? A comparison of system size, density threshold, timing, and energy error would be good. It appears that you're calculating integrals within the master loop and doing redundant work, possibly more than the original algorithm. I think you want to calculate all (NM|NM) shells outside of the loop and use those integrals within the loop.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-743352546:67,test,test,67,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-743352546,2,['test'],['test']
Testability,"A few things I noticed:; - I don't think we want to be installing `install/psi4/share/fsapt`; - `install/psi4/share/CMakeLists.txt` shouldn't be installed; - Is `install/psi4/lib/psi4.so` the c++-flavored lib that Ben wanted or the Boost python module like before? If the latter, I need to be able to install it if conda-built into `lib/python2.7/site-packages/psi4.so`; - `install/share/cmake` shouldn't be installed; - Why are includes in e.g. `install/psi4/psi4/src/bin/fnocc/fnocc/ccsd.h` rather than `install/include/psi4/bin/fnocc/ccsd.h`; - _What_ happened to versioning?; - Um, where are `samples` supposed to be? `test.in`s are in `$toplevel/samples` and `input.dat`s are in $toplevel/psi4/samples`.; - Do I gather correctly that installation niceties are a WIP?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-234470967:623,test,test,623,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234470967,1,['test'],['test']
Testability,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:330,test,tests,330,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812,3,['test'],"['testdata', 'tests']"
Testability,"A good test case might be the Cadmium-imidazole complex in; http://www.chem.duke.edu/~xqhu/geoms.tar.gz; in the 3-21G basis which fails to converge with plain DIIS, see; http://dx.doi.org/10.1063/1.3304922",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/155#issuecomment-125475542:7,test,test,7,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-125475542,1,['test'],['test']
Testability,"A good test of when this is fixed: the `scf-property` test line `#compare_values(-39.14134740550916, variable('B3LYP TOTaL ENERGY'), 6, ""B3LYP energy"") #TEST # waiting for dft fctl psivars` should pass, uncommented.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956:7,test,test,7,https://psicode.org,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956,3,"['TEST', 'test']","['TEST', 'test']"
Testability,"A lot has changed in libxc 4, but that's all on the back-end side. Libxc 3 still used hand-written functionals, whereas libxc 4 uses computer algebra generated code. I'd say there's a lot of things that work better in libxc 4. But some of the added functionals might not be thoroughly tested. The release of libxc 4 is pending improvements to the test suite, so that functionals that work pass on a variety of compilers and architectures.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/793#issuecomment-330907649:285,test,tested,285,https://psicode.org,https://github.com/psi4/psi4/issues/793#issuecomment-330907649,2,['test'],"['test', 'tested']"
Testability,"A skipped test is not a problem -- the CI environment or resources constraints preclude running the test, so it's skipped. The failure above that of `dft_sapt1` is a problem https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=4577f1f3-bc89-5040-5cf1-0f1c10ea6889&l=4664 so a good first debugging step is to try it locally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201:10,test,test,10,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583077201,3,"['log', 'test']","['logs', 'test']"
Testability,"A solution for multi-invocation tests going forward would be much appreciated. We used to incorporate this into the Makefile build system (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in), but I never got around to converting it for CMake. I modified the old script (below) and checked the tests file, and it still looks ok. ``` bash; >>> psi4/tests/pywrap-freq-e-sowreap: bash script.sh ; Performing finite difference calculations by energies; 13 displacements needed.; Performing finite difference calculations by energies; 13 displacements needed.; Computation complete.; Frequencies.......................................................PASSED; ZPVE..............................................................PASSED; SP energy.........................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; SP NRE............................................................PASSED; >>> psi4/tests/pywrap-freq-e-sowreap: cat script.sh ; PSIDATADIR=../../lib. ../../objdir2/bin/psi4 -p PSIDATADIR input.dat ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-1.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-2.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-3.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-4.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-5.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-6.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-7.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-8.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-9.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-10.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-11.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-12.in ; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-13.in ; /bin/cat tests >> FREQ-master.in; ../../objdir2/bin/psi4 -p PSIDATADIR FREQ-master.in ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/168#issuecomment-157541405:32,test,tests,32,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-157541405,6,['test'],['tests']
Testability,"A state: 1.3296420 (a.u.), 36.1814011 (eV); 	19 A state: 1.3540510 (a.u.), 36.8456048 (eV); 	20 A state: 1.3585131 (a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation energy: 34.740876 eV; Excitation energy: 34.873378 eV; Excitation energy: 35.736631 eV; Excitation energy: 36.181398 eV; Excitation energy: 36.845602 eV; Excitation energy: 36.967022 eV; ```. Running the ADC(2) test in both programs showed some slight deviation in energies, but nothing alarming.; ### **QChem 5.1.1 - adc(2) test energies**; ```; Excitation energy: 6.951866 eV; Excitation energy: 6.951866 eV; ```. ### **Psi4 1.3.2 -- adc(2) test energies**; ```; ->	1 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](https://aip.scitation.org/doi/abs/10.1063/1.1386415). ### **HF**; For ADC(1) results, we continue to see no remarkable error. In the ADC(2) results, the HF system's excitation energies calculated by QChem reproduce the results provided in the Trofimov, Stelter, Schirmer paper. However, the energies provided by Psi4 seem to have an inconsistent deviation from the values: for so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:2323,test,test,2323,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['test'],['test']
Testability,A test case is attached. [input.txt](https://github.com/psi4/psi4/files/331251/input.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/423#issuecomment-228262188:2,test,test,2,https://psicode.org,https://github.com/psi4/psi4/issues/423#issuecomment-228262188,1,['test'],['test']
Testability,"A-PW91; #""pbe"" : -128.793027408, # G09; #""pbe"" : -128.793068569269 # ORCA LDA-PW91; #""bp86"" : -128.905683777641, # ORCA LDA-PW91; #""bp86"" : -128.9092927447, # TM = LDA-VWN, or iop(3/74=418) in Gaussian; #""bp86"" : -128.903070321, #G09 LDA-PW86; ""pw91"" : -128.871229934635, # ORCA; ""mpwpw"" : -128.893378250504, # ORCA; ""ft97"" : -128.850056371480 , # NWCHEM xfine xc ft97 screening 1-e14; ""bop"" : -128.892404778404, # NWCHEM; #""b86bpbe"" : , # ???; ""pw86pbe"" : -128.946484366 , # G09 iop(3/74=809); ""sogga11"" : -128.889273547 , # G09.D01 ""SOGGA11/cc-pVDZ 5D SP Int(Grid=99770)""; }. molecule ne {; 0 1; Ne; }. set df_scf_guess false; set basis cc-pvdz; set reference rks; set dft_radial_points 99; set dft_spherical_points 770; set scf_type direct. for func, val in ggaval.items():; edft = energy(func); label=func.upper(); compare_values(val, edft, 4, 'Ne: '+label) #TEST; clean(). # special flower BP86; low accuracy; # #G09 LDA-PW86; edft = energy('bp86'); compare_values(-128.903070321, edft, 3, 'Ne: BP86(PW)') #TEST; clean(). #=== from dft1 ===; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; print 2; basis sto-3g. guess core; scf_type direct; dft_spherical_points 302; dft_radial_points 99; reference rks; }. E15 = -75.2976775610; activate(h2o); edft=energy('scf', dft_functional=""b86bpbe""); compare_values(E15,edft, 4, ""H2O: B86BPBE "") #TEST. --------------------------------------------------------------------------. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:26 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplici",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:3086,TEST,TEST,3086,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['TEST'],['TEST']
Testability,ABLE_gdma; 2018-12-05T15:55:39.8039347Z SKIP [1] lib\psi4\tests\test_addons.py:100: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8040544Z SKIP [1] lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.8045164Z SKIP [1] lib\psi4\tests\test_addons.py:643: Psi4 not compiled with simint. Rebuild with -DENABLE_simint; 2018-12-05T15:55:39.8046429Z SKIP [1] lib\psi4\tests\test_addons.py:686: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8046725Z SKIP [1] lib\psi4\tests\test_addons.py:720: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8047954Z SKIP [1] lib\psi4\tests\test_addons.py:773: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; 2018-12-05T15:55:39.8048914Z SKIP [1] lib\psi4\tests\test_addons.py:810: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8050115Z SKIP [1] lib\psi4\tests\test_addons.py:838: Psi4 not compiled with dkh. Rebuild with -DENABLE_dkh; 2018-12-05T15:55:39.8051342Z SKIP [1] lib\psi4\tests\test_addons.py:923: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); 2018-12-05T15:55:39.8052689Z SKIP [1] lib\psi4\tests\test_addons.py:940: Psi4 not detecting plugin resp. Bu,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:3779,test,tests,3779,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['test'],['tests']
Testability,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7295,test,test,7295,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,6,['test'],['test']
Testability,ASSED [ 23%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df fc: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf df ae: dfocc-ene0] PASSED [ 24%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf df ae: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df fc: dfocc-ene0] PASSED [ 25%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df fc: dfocc-ene0] PASSED [ 26%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf pk/df ae: dfocc-ene0] PASSED [ 27%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df fc: dfocc-ene0] PASSED [ 28%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df fc: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd/df ae: dfocc-ene0] PASSED [ 29%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd/df ae: dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd fc: * dfocc-ene0] PASSED [ 30%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 uhf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rohf cd fc: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_mp2_energy_module[mp2 rhf cd ae: * dfocc-ene0] PASSED [ 31%]; ../tests/pytests/test_mp2.py::test_,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:6147,test,tests,6147,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,ASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17397,test,tests,17397,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/470/files#diff-131 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-132 (0); > - _A_ tests/fsapt1/fsapt-ref/Geom.png; > https://github.com/psi4/psi4/pull/470/files#diff-133 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.dat; > https://github.com/psi4/psi4/pull/470/files#diff-134 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-135 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.png; > https://github.com/psi4/psi4/pull/470/files#diff-136 (0); > - _A_ tests/fsapt1/fsapt-ref/IndAB.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-137 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.dat; > https://github.com/psi4/psi4/pull/470/files#diff-138 (0); > - _A_ tests/fsapt1/fsapt-ref/IndBA.pdb; > https://github.com/psi4/psi4/pull/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14982,test,tests,14982,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,"According to Agner Fog ([https://www.agner.org/forum/viewtopic.php?f=1&t=6](https://www.agner.org/forum/viewtopic.php?f=1&t=6)), these unfair dispatch functions are still present and active in the 2019 Intel compilers. Benchmarks from Puget Systems also support that this is still happening inside MKL: [https://www.pugetsystems.com/labs/hpc/How-To-Use-MKL-with-AMD-Ryzen-and-Threadripper-CPU-s-Effectively-for-Python-Numpy-And-Other-Applications-1637/](https://www.pugetsystems.com/labs/hpc/How-To-Use-MKL-with-AMD-Ryzen-and-Threadripper-CPU-s-Effectively-for-Python-Numpy-And-Other-Applications-1637/)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633685022:219,Benchmark,Benchmarks,219,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633685022,1,['Benchmark'],['Benchmarks']
Testability,"According to our tests, it is related to minsthelper.cc. Specifically the pragma statement at line 2470, we just turned it off. //#pragma omp parallel for ; for (int aux = 0; aux &lt; np; aux++) { ; for (int p = 0; p &lt; nprim; p++) { ; for (int q = 0; q &lt;= p; q++) {. @JonathonMisiewicz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2192#issuecomment-861469239:17,test,tests,17,https://psicode.org,https://github.com/psi4/psi4/issues/2192#issuecomment-861469239,1,['test'],['tests']
Testability,Actually not worth testing 818. It won't have had any effect on psithon.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356790530:19,test,testing,19,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356790530,1,['test'],['testing']
Testability,"Actually, I think I have a better idea for testing this stuff. I can implement ""ESP"" and ""FIELD"" methods in OEProp that will compute the ESP and fields at the `PROPERTIES_ORIGIN` and set the results in Psi vars. I don't think the grid iterators should populate those variables, because the grids could be huge. By allowing `PROPERTIES_ORIGIN` to specify a single grid point, we can easily store the value for testing. This will also allow us to construct loops over grids in Python, without having to generate a grid.dat file. Thoughts, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234655165:43,test,testing,43,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234655165,2,['test'],['testing']
Testability,"Actually, I think it might make sense to keep this issue open (and retitled to ""cdomp2-2 test suite failure when ATLAS is used"" or so); this is something that should be tracked down eventually.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-451669743:89,test,test,89,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-451669743,1,['test'],['test']
Testability,"Actually, I took the same psi4test from last night and tried it in a defaults-channel numpy & mkl via `conda create -n dfl35 psi4test python=3.5 -c psi4` and it works just fine according to `psi4 --test`. I'll feel more assured when the full test suite is run, but it looks like the answer to your question above is yes. Now if only Intel channel had a py36. ```; (dfl35) >>> otool -L lib/python3.5/site-packages/psi4/core.so ; lib/python3.5/site-packages/psi4/core.so:; 	@rpath/core.so (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libxc.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libderiv.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libint.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1226.10.1); 	/usr/lib/libc++.1.dylib (compatibility version 1.0.0, current version 120.1.0); ```; ```; (dfl35) >>> conda list; # packages in environment at /path/to/miniconda3/envs/dfl35:; #; mkl 2017.0.3 0 defaults; numpy 1.13.0 py35_0 defaults; openssl 1.0.2l 0 defaults; pip 9.0.1 py35_1 defaults; psi4test 1.2a1.dev370+d9c89ae py35_6 psi4; py 1.4.34 py35_0 defaults; pytest 3.1.2 py35_0 defaults; python 3.5.3 1 defaults; readline 6.2 2 defaults; setuptools 27.2.0 py35_0 defaults; sqlite 3.13.0 0 defaults; tk 8.5.18 0 defaults; wheel 0.29.0 py35_0 defaults; xz 5.2.2 1 defaults; zlib 1.2.8 3 defaults; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-312126504:198,test,test,198,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312126504,2,['test'],['test']
Testability,"Actually, all the tests are failing for me on my MacOS systems:. https://testboard.org/cdash/index.php?project=Psi&date=2016-01-31. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Mon, Feb 1, 2016 at 2:11 PM, Andy Simmonett notifications@github.com; wrote:. > I just pulled the code, and will see if I can figure it out.; > ; > > On Feb 1, 2016, at 1:57 PM, Justin Turney notifications@github.com; > > wrote:; > > ; > > Something in the recent version of Psi4 is causing coupled cluster test; > > cases to fail on our cluster. It also appears in the clang version of the; > > Travis CI builds. I'm using Intel compiler on our cluster.; > > ; > > Is there a new transqt/ccsort module, if so it appears to be failing in; > > it:; > > ; > > From cc1 test output:; > > ; > > ## Wfn Parameters:; > > ; > > Wavefunction = CCSD; > > Number of irreps = 4; > > Number of MOs = 25; > > Number of active MOs = 25; > > AO-Basis = NONE; > > Semicanonical = false; > > Reference = RHF; > > Print Level = 1; > > ; > > IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; > > ; > > ---; > > ; > > A1 12 0 3 0 9 0; > > A2 2 0 0 0 2 0; > > B1 4 0 1 0 3 0; > > B2 7 0 1 0 6 0; > > Transforming integrals...; > > IWL integrals will be deleted.; > > (OO|OO)...; > > Presorting SO-basis two-electron integrals.; > > Sorting File: SO Ints (nn|nn) nbuckets = 1; > > Transforming the one-electron integrals and constructing Fock matrices; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation complete.; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OO|OV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OO|VV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OV|OO)...; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178205078:18,test,tests,18,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078,4,['test'],"['test', 'testboard', 'tests']"
Testability,"Actually, for the build I just tried, the real source of the error was in libdpd, which now includes libmints/mints.h, which includes (through basisset.h) libint.h. Since the libdpd/Makefiles.txt did not list mints as a dependency, the compilation tried to build libdpd before the libint header was ready, hence the crash. Running a test with the proper dependency in place now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219#issuecomment-173202821:333,test,test,333,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173202821,1,['test'],['test']
Testability,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301289886:168,test,test,168,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886,2,['test'],['test']
Testability,"Actually, it's alarming that the pcm cases were in the test suite. If no fortran, then enable_pcmsolver should have been off and the tests/pcmsolver subdir never added. . > On Feb 14, 2016, at 12:36 AM, Andy Simmonett notifications@github.com wrote:; > ; > I forgot to specify a fortran compiler, so it didn't actually build PCMSolver. My bad. That's still a bug though; we should run just fine without PCM so we should probe that a little. I'm currently torturing my laptop with a clean build that actually does include PCM; I'll let you know what I find. The ""good"" news is that it's completely reproducible on a vanilla OSX setup.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183824678:55,test,test,55,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183824678,2,['test'],"['test', 'tests']"
Testability,"Actually, the tests fail also on x86_64. This is on the development version of Fedora.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/13#issuecomment-22784021:14,test,tests,14,https://psicode.org,https://github.com/psi4/psi4/issues/13#issuecomment-22784021,1,['test'],['tests']
Testability,"Add a test that checks something this fixes, then lgtm. Thanks for the contribution!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072#issuecomment-758364610:6,test,test,6,https://psicode.org,https://github.com/psi4/psi4/pull/2072#issuecomment-758364610,1,['test'],['test']
Testability,"Added a few lines to tests `cc39` and `cc29` for checking the variables for polarization and rotation. I tested them myself, in case Travis doesn't use those tests, and put the outputs in the PR description. I hope everything is in order!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857#issuecomment-344331581:21,test,tests,21,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344331581,3,['test'],"['tested', 'tests']"
Testability,Added the SCF density recomputation. `grad('ccsd')` (via `ccenergy`) now gives the correct SCF densities in the FCHK file. Code not yet cleaned up. I also want to add some form of minimal testing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1884#issuecomment-626157422:188,test,testing,188,https://psicode.org,https://github.com/psi4/psi4/pull/1884#issuecomment-626157422,1,['test'],['testing']
Testability,"Adding `/opt/intel/lib` to envvar `DYLD_LIBRARY_PATH` will probably fix your immediate problem.(The `-DOpenMP_LIBRARY_DIRS` can only influence how the lib gets built, not the runtime env.). A greater concern is that your psi and the numpy you use in running it need to have the same blas (hopefully MKL) libraries and the same threading (omp/iomp5 vs. gomp; gomp *strongly* discouraged), and gcc _really_ wants to link gomp in there. If you do get a working compile, make sure to run a simple test (like tu1) again with multiple threads to make sure it gives the correct answer before declaring victory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614671116:493,test,test,493,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614671116,2,['test'],['test']
Testability,"Additional testing confirms that the error message I reported in my last message displays regardless of whether this fix is in place. This should be investigated in more detail later, but it's outside the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414416825:11,test,testing,11,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414416825,1,['test'],['testing']
Testability,"Additional tests show that just turning off the damping may not be a good idea after all. Many of the OCEPA/OLCCD tests use the NO radical (ocepa-grad2, ocepa3, ocepa2), and none of them pass if I have damping off. I'll continue investigating and post back when I have something. These convergence problems aren't consistent with my experience with my own OCEPA code, and the damping is far more chaotic than I'd expect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1777#issuecomment-572032439:11,test,tests,11,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-572032439,2,['test'],['tests']
Testability,"After #2655 `tester.py` complaints look like this:. Complaints; ----------; - [ ] 1. fsapt-diff1: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. fsapt-diff1: missing CMakeLists. `vi fsapt-diff1/CMakeLists.txt`; - [ ] 3. large-atoms: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 4. python/mints13: missing pytest input generated. check it! `vi python/mints13/test_input.py`. ------; `fsapt-diff1` contains useful reference data, but not currently tested. `large-atoms` is a draft test that was waiting on ECP gradients. Now that these are in, this should be able to be fleshed out. `python/mints13` is not currently working with pytest, so the generated input should be ignored for now. This test works through `python` but fails when run through `psi4` executable (ctest does the first, pytest the latter). It seems that the way pytest treats python input files might need to be fixed. See the note here: https://github.com/psi4/psi4/blob/master/tests/pytests/addons.py#L194-L203",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1232090320:13,test,tester,13,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1232090320,5,['test'],"['test', 'tested', 'tester', 'tests']"
Testability,"After a discussion, the plan is to:. * Implement SymmDFJK vs PackedDFJK logic in the DFJK constructor, thus requiring memory and wK info at initialization time that we don't now.; * Overload the constructor so that there's a default and an elaborate signature; * For methods that require PackedDFJK because of downstream data structure assumptions, that will be handled in proc.py with a force_*dfjk flag passed to scf_helper; * SymmDFJK aka Matt's will be named MemDFJK. PackedDFJK aka Rob's will be named DiskDFJK. since the actual implementations aren't as orthogonal as those names suggest, references/more explicit explanations will be in HF and/or SCF_TYPE docstrings; * `SCF_TYPE` option will have three relevant choices; * `DF` formerly went to Rob's code. now will choose the best DFJK from available info. will be conservative on memory estimation; * `MEM_DF` will always go to Matt's code so that a user can test both or be smarter than the logic depending on known hardware/mem considerations; * `DISK_DF` will always go to Rob's code; * The read_options docstring for SCF_TYPE will label the MEM_DF and DISK_DF as expert choices; * In future, other algorithms will follow similar DF|MEM_DF|DISK_DF options in their MTD_TYPE algorithm controllers. Any further ideas on labeling these things welcome. @CDSherrill . Edits:. * `SymmDF` and `DFHelper` classes shall go to Pascal case",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-382894140:72,log,logic,72,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-382894140,3,"['log', 'test']","['logic', 'test']"
Testability,"After installing the binary patches, I get the error; ```; psi4.driver.p4util.exceptions.MissingMethodError: Method=ccsdt is not available for any derivative level. Did you mean? ccd ccsd ccsd(t) cisd cisdt cisdtq lccsd ksdt; ```; with the above input as well as `tests/mrcc/ccsdt/input.dat`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2071575524:264,test,tests,264,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2071575524,1,['test'],['tests']
Testability,"After memory profiling, I've discovered that this PR _improves_ memory efficiency. For my 384 basis function DF-DCT system, memory requirements plummet from 14.0 GB to 7.8 GB. I've run some tests on a single benzene system instead of a two benzene system, and I understand the behavior:. This isn't due to shifting to Python, but shifting how we clear some large arrays. The C-DIIS code uses `clear()`, which [doesn't necessarily de-allocate the memory.](https://www.cplusplus.com/reference/vector/vector/clear/) PyDIIS makes that not our problem. On taking the existing C-side code and forcibly de-allocating the memory, I observe a memory profile indistinguishable from the PyDIIS one. The large change in memory is most likely because C-DIIS was keeping the allocation space for multiple T2 tensors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-994862260:190,test,tests,190,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-994862260,2,['test'],['tests']
Testability,"After removing the last commit, new timings on CCQC machines for a system with 4 threads, 122 A' basis functions, 80 A'' basis functions, Mk-MRCCSD(T) on a trivial one-determinant model space: 1040s averaged over 5 runs before this PR, 995s averaged over 4 runs after. So once I got rid of that last commit, this PR is a small net speed _gain_ for PSIMRCC. I can run any additional tests if requested. . So I say it's time for a last review. (@andysim?). I just need to know what ""best practice"" for the commit history is. Reset away the last commit and force push, or create a new commit explicitly reverting the previous one? My vote is for the first one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-641533934:382,test,tests,382,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-641533934,1,['test'],['tests']
Testability,"After some discussion with Lori and Zach as well as digging through the code and running tests, we saw that psi4 is running PK as asked. The issue of printing . ```; @DF-ROHF; ```. Is a result of psi4 getting a global variable for the printout whereas the user has chosen the PK option through a local variable. I am told by Lori that Psi4 is moving away from local options, but that a number of users wish to keep the ability to ""hack the SCF by setting local variables."" We could change the code by getting a local variable to print, but that would run against recent design changes. . To get the correct output, it's recommended that the options be set as . ```; set {; scf_type PK; other_key other_option; }; ```. Instead of. ```; set scf {; scf_type PK; other_key other_option; }; ```. I hope that helps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1503#issuecomment-461156624:89,test,tests,89,https://psicode.org,https://github.com/psi4/psi4/issues/1503#issuecomment-461156624,1,['test'],['tests']
Testability,"Agree with not dropping tests (esp. when have other programs' numbers) but fine to rearrange them, especially when `pytest.mark.parametrize` could make them more readable. I expect the `dft-*-custom`s could be consolidated. But, yes, beyond scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494066017:24,test,tests,24,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494066017,1,['test'],['tests']
Testability,"Agreed, the write error is a bug. The error is due to the number of; optimization coordinates changing. When that happens, then the old binary; file should be wiped out, and I guess it is not being removed. It is; possible this bug has been fixed in the latest version as we have looked at; this problem before, but I'm not sure. The 'dynamic_level' idea is still under development, and hasn't been much; tested.; If you look in /psi4/psi4/src/psi4/optking/set_params.cc, you can see what; the dynamic level is doing. It is changing parameters towards typically; more robust levels. You can do the same thing by changing input keywords.; For example, the behavior of dynamic_level=3 shown there can be produced by; setting the analogous keywords. Opt_params.coordinates = OPT_PARAMS::BOTH;. Opt_params.consecutive_backsteps_allowed = 1;. Opt_params.step_type = OPT_PARAMS::RFO;. Opt_params.intrafragment_step_limit = 0.1;. Opt_params.intrafragment_step_limit_min = 0.1;. Opt_params.intrafragment_step_limit_max = 0.1;. All this to say that you can skip the dynamic_level usage (or simply start; with dynamic_level = 3 [don't know if anyone has ever done that!] and I; expect the i/o error will go away. On the stability of the back-transformation, optking accounts for Delta(q); for a torsion value going from -178 to +178 degrees, etc.. However, the; formula for the derivative (B-matrix element) is undefined and also; discontinuous at 180. A real pain. I hope to try to fix this someday, but; when I do, it'll probably be in the newer python optimizer I'm developing. On Wed, Nov 15, 2017 at 5:21 PM, Chaya Stern <notifications@github.com>; wrote:. > This seems to be an error in writing rather than an error in the; > constrained optimization, isn't it?; >; > This error shows up when dynamic level is raised to 3 after the first; > convergence check when it tries to write optimization data to binary file.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/858#issuecomment-344949158:405,test,tested,405,https://psicode.org,https://github.com/psi4/psi4/issues/858#issuecomment-344949158,2,['test'],['tested']
Testability,"Ah I see your next message now. Yes, I agree it'd be nice if all defaults were consistent, but that'd mean nothing could be df. The last table at docs/introduction/capabilities can show what defaults to df and what to conventional. Admittedly casscf/rasscf aren't on there as I didn't get to them in my last testing push.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2883#issuecomment-1440883487:308,test,testing,308,https://psicode.org,https://github.com/psi4/psi4/issues/2883#issuecomment-1440883487,1,['test'],['testing']
Testability,"Ah I see. The limited benchmarking I did that showed better performance from the mini forge build must be due to something else then. I would look into this more to be more thorough, but there are too many processes running on my machine to get any useful information from them. At any rate, it looks like it should be possible to build numpy from source using Accelerate as a backend now, but I don't see anything in the release notes for numpy > 1.21.0 about changing the BLAS for the macOS-arm64 wheels. I have to imagine that in the not-too-distant future (unless more bugs have been uncovered) that future arm64 wheels will be build using Accelerate since this seems to be the most suitable BLAS for this platform. Let me see if I can find out the exact build that I installed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124:22,benchmark,benchmarking,22,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961483124,1,['benchmark'],['benchmarking']
Testability,"Ah good, you're already updating wrt upstream. Should `tests/dmrg/natural-orbital` be added to ctest?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388#issuecomment-223825766:55,test,tests,55,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223825766,1,['test'],['tests']
Testability,"Ah yes, my fault for not suggesting posting the input file when OP asked the form for PRs. I can believe that we could stick something funny on `wfn` (or the user could) like EFP object, stray array that `save` could balk at. But, yes, we would have hit the problem if it had been in test suite. the MP2 error in CI is new this week. i'll have to look into that. but it's unrelated to this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524599229:284,test,test,284,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524599229,1,['test'],['test']
Testability,"Ah yes, this is no longer a used test case in wavefunction_pass. @psi-rking is it possible to reduce the basis set to something fairly quick?. > On Feb 15, 2016, at 9:01 AM, Justin Turney notifications@github.com wrote:; > ; > opt10 is too big for a test case: 15 atoms, C1 symmetry, 322 basis functions, requests 32 GB of memory, and performing a transition state geometry optimization with an initial Hessian by finite difference of gradients. The calculation timed out on the 13 of 79 gradient displacements of the initial Hessian. The only thing that does help is that it's a DF-MP2 calculation.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184219439.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184220315:33,test,test,33,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184220315,2,['test'],['test']
Testability,Ah! I wasn't aware of all the changes introduced by #1770. My point has been addressed.; The test calculation does not crash and relativistic effects are included where they should be.; I tested DKH and X2C. This can be closed unless @ludgerpalm has another comment/question to the topic?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1791#issuecomment-582019360:93,test,test,93,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-582019360,2,['test'],"['test', 'tested']"
Testability,"Ah, did you `cmake ... -DOpenMP_CXX_LIBRARY_DIRS=/path/to/...` and it built successfully or you hard-coded it in `FindMathOpenMP.cmake`? No action needed in psi4 (besides some documentation) for the former, but I can imagine a route by which it fails by working the first time failing the second time b/c the hint var isn't forwarded. BTW, the ultimate test of whether this works is if `ldd -v .../psi4/core.so | grep gomp` comes back empty.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396757135:353,test,test,353,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396757135,1,['test'],['test']
Testability,"Ah, guess I didn't test the code with integral direct SCF. Should be an easy fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35#issuecomment-35248787:19,test,test,19,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-35248787,1,['test'],['test']
Testability,"Ah, in that case, perhaps we should remove at least the CUHF singlet test from scf5, if it is known to be nondeterministic?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738#issuecomment-307585298:69,test,test,69,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307585298,1,['test'],['test']
Testability,"Ah, right. Perfectly fine to set explicitly [like here]( https://github.com/psi4/psi4/blob/master/tests/sapt8/input.dat#L26-L27), just make sure they're `-jkfit` or `-ri` as needed. In fact, I really wouldn't trust any results generated with orbital == df_basis_scf == df_basis_ri == df_basis_sapt. I'll see about getting #1559 merged, so it's less of a chore for lithium. Going to close this. Please reopen if this particular trouble continues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1564#issuecomment-468963818:98,test,tests,98,https://psicode.org,https://github.com/psi4/psi4/issues/1564#issuecomment-468963818,1,['test'],['tests']
Testability,"Ah, so what happens is _if_ CheMPS2 is enabled, then its four tests get added, and one of those (`scf-n2`) gets added to quicktests (https://github.com/psi4/psi4/blob/master/tests/CMakeLists.txt#L113-L118, https://github.com/psi4/psi4/blob/master/tests/dmrg/scf-n2/CMakeLists.txt#L3). So there's some coverage at both levels. Admittedly, I need to check if other add-ons follow that scheme. I certainly agree that if any add-on is enabled, its failure needs to be caught at the quicktest level of testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249306912:62,test,tests,62,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249306912,4,['test'],"['testing', 'tests']"
Testability,"Ah, sorry. I thought you meant Travis tests and, since 1090 was complete and 1091 & 1092 were in progress, this one was ready. If remedial action is needed, please let me know. I'll hold off on 1091 & 1092 until you signal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408904367:38,test,tests,38,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408904367,1,['test'],['tests']
Testability,"Ah, yes you are right. I have a class wrapper around psi4 that sets the initial configurations and that has the default value 64. That must be why I have the spikes. Because psi4 knows that is available to it because I requested it in the initial configurations. . Okay so I set up tests where I am generating an interaction energy surface scan for a dimer. I am using `mp2/cc-pvqz-ri`. I didn't know if the resolution identity error was implied like gaussian or if I had to explicitly state it. It's about 72 point single point energy scans. . **Test 1**. I reduced down the `64` to `16`. ```bash; -pe smp 16; ```. Reset the default where this is happening to set the thread to one. with the OMP and MKL flags set in the job submission script. . ```bash; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```; ```python. psi4.set_num_threads(1). ```; **Test 2**. Only rely on the flags in the job submission script. ```; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```. ```python. # psi4.set_num_threads(1); ```. It seems like so far the loads seem to be continuously used. I will get some graphs in the morning for you to look at.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201:282,test,tests,282,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201,3,"['Test', 'test']","['Test', 'tests']"
Testability,"Alas, we didn't think that far ahead when Strategy 1.5 was put into place. But you can see from the tests in `pcm_scf`, `pcm_dft` and `pcm_dipole` that the same PCM input is used across multiple calculations without problem. I can't say (because I haven't checked) if it's because the same parsed file is used throughout (not what we want) or because the intermediate `pcmsolver.inp` is re-parsed for every calculation (what we want). Strategy 1.75 would be great and would definitely make @lothian happier :smile:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/212#issuecomment-171680220:100,test,tests,100,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171680220,1,['test'],['tests']
Testability,All comments except FockCI testing addressed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619#issuecomment-1208292542:27,test,testing,27,https://psicode.org,https://github.com/psi4/psi4/pull/2619#issuecomment-1208292542,1,['test'],['testing']
Testability,"All of the clang tests are still failing on the CI system. It's not related to Boost, and appears to be a problem in the cctransort code. I cannot reproduce this problem on my linux machine - are you seeing it at all, @jturney?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-180480448:17,test,tests,17,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180480448,1,['test'],['tests']
Testability,"All planned functionals added, and the full test suite is clean after the ft97 fix upstream (thanks!). CI expected to pass. What remains for this is modernizing the tweak/omega interface from c.2018 to c.2021 via named parameter setters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-756317051:44,test,test,44,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-756317051,1,['test'],['test']
Testability,"All requested changes made. I have also run the _entire_ test suite, modulo plugins and dft benchmarks. I stumbled across a rather critical bug that way: empirical_dispersion needed to be updated with the new FINDIF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024#issuecomment-410711426:57,test,test,57,https://psicode.org,https://github.com/psi4/psi4/pull/1024#issuecomment-410711426,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"All right, bug fixed, and IncFock tests added! The new IncFock efficiency tests compare against an SCF ITERATIONS value of x+3, where x is the number of SCF iterations observed in the corresponding non-IncFock run (which also matches the iteration count seen in each output.ref file). I can reduce the 3 component down to something else if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057:34,test,tests,34,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329450057,2,['test'],['tests']
Testability,All test but these pass:; ```; 368 - dft-custom-gga (Failed) (see https://github.com/psi4/psi4/issues/994); 370 - dft-bench-interaction (Timeout); 372 - pywrap-align (Failed); 373 - pywrap-align-chiral (Failed). ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914#issuecomment-385654990:4,test,test,4,https://psicode.org,https://github.com/psi4/psi4/pull/914#issuecomment-385654990,1,['test'],['test']
Testability,All test cases pass now (using ctest). There wasn't any problem in the code. It was an issue in my perl environment settings which caused failure of some cc test cases.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718#issuecomment-303925660:4,test,test,4,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303925660,2,['test'],['test']
Testability,All tests (except the normal failing ones) has passed on my box with Python2. I'm going to accept the pull request.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130281544:4,test,tests,4,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130281544,1,['test'],['tests']
Testability,"All tests (with the exception of dft-grad-disk, which is an unrelated issue) pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1405#issuecomment-444492906:4,test,tests,4,https://psicode.org,https://github.com/psi4/psi4/pull/1405#issuecomment-444492906,1,['test'],['tests']
Testability,All tests passing. PR ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-997266395:4,test,tests,4,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997266395,1,['test'],['tests']
Testability,"All tests ran through except for:; FAILED tests/fsapt1/test_input.py::test_fsapt1 - AssertionError: Traceback (most recent call last):; with the message:; E !----------------------------------------------------------------------------------!; E ! !; E ! Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to !; E ! do in-core! Increase the amount of memory allocated to Psi4 or allow for !; E ! out-of-core to be used. !; E ! Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4nm_171103 !; E ! 8779956/work/psi4/src/psi4/lib3index/dfhelper.cc on line: 261 !; E ! The most recent 5 function calls were: !; E ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; E ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; E ! psi::DFHelper::initialize() !; E ! !; E !----------------------------------------------------------------------------------!. I think this is independent of this PR and the PR would be good to go",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3148#issuecomment-2013170817:4,test,tests,4,https://psicode.org,https://github.com/psi4/psi4/pull/3148#issuecomment-2013170817,3,"['Assert', 'test']","['AssertionError', 'tests']"
Testability,"All tests work at my end, except the python ones that fail due to the wrong interpreter like stated above.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451646129:4,test,tests,4,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451646129,1,['test'],['tests']
Testability,"All the AM comparisons changed back from (fb42b53) in https://github.com/loriab/psi4/commit/79c7f2248831cb2f7323cf93eebf7d26ec06bb7b . Also, insufficient AM messages updated. I tested it systematically, so I have confidence in the current settings, but if there was evidence in favor of the fb42b53 logic, I'd like to know it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241014675:177,test,tested,177,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241014675,2,"['log', 'test']","['logic', 'tested']"
Testability,All the tests still pass when the index is still offset. Looking at the code it seems logical to continue offsetting the index as that is what is used when creating the next block of points.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1525#issuecomment-461081632:8,test,tests,8,https://psicode.org,https://github.com/psi4/psi4/pull/1525#issuecomment-461081632,2,"['log', 'test']","['logical', 'tests']"
Testability,"All these tests are successful on my mac, which not the current version of psi4. Then, I download the latest psi4 binary on my linux cluster, then dfomp2p5-grad1 is still successful. However, dfomp3-grad2 fails. When trace the error, I saw that the SCF energies are quite different. Hence, there should be some changes in the SCF module recently. Now, I am compiling the current version of psi4, and I will update the tests that you were mentioned. . I can attribute the failure of all tests whose name ended with ""2"", which means they are open-shell molecules. However, dfomp2p5-grad1 should be successful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-157470643:10,test,tests,10,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157470643,3,['test'],['tests']
Testability,All three are consistent -- the `scf-guess` test is unhappy.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1477#issuecomment-498040657:44,test,test,44,https://psicode.org,https://github.com/psi4/psi4/pull/1477#issuecomment-498040657,1,['test'],['test']
Testability,All three of the new functionals now pass the water + water dimer test from PR #880.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/916#issuecomment-364777118:66,test,test,66,https://psicode.org,https://github.com/psi4/psi4/pull/916#issuecomment-364777118,1,['test'],['test']
Testability,"All, I've gone back and forth on how to do the testing. The problem is that Psi4 has paths baked in at compile time, which need to point to the install locations to work correctly at installation. Like Lori said, I originally deemed the risk of everything breaking upon installing being a real problem for Psi4. I'm now leaning more towards what @jturney said, i.e. the canonical make cycle. I'm actually tweaking it as we speak so that it works that way (and hopefully also fixing this linking error I introduced with the math detection...). I think there's a happy medium here, where we only manually set the PSIDATADIR for tests and the install runs off the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235916559:47,test,testing,47,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235916559,2,['test'],"['testing', 'tests']"
Testability,"Allenes, yeah, 'too linear' and like to make trouble.; The backtransform broke the molecule, look at most of the `Change` values. They are huge!. I tried a few things and typical solutions like `set DYNAMIC_LEVEL 1` or `opt_coordinates delocalized` do not work well.; Also geomeTRIC is behaving oddly. Tested with pw6b95 instead of pwpb95. If you want something more reliable I can recommend cartesian coordinates and a computed initial hessian.; Optimisation with cartesian coordinates is usually slow, but actually OK with a decent initial hessian.; `set opt_coordinates cartesian `. Automatic initial hessian at a different (cheaper) level is easily done:; ```; set FULL_HESS_EVERY 0; optimize('pwpb95-d3bj',hessian_with='pbe0-d3bj/def2-SV(P)'); ```; usually no need to go beyond the above level, even PBE would be OK I think. Also this hessian will be numerical.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712367091:302,Test,Tested,302,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712367091,1,['Test'],['Tested']
Testability,"Alright I have extended two tests none of the quicktests run through ccdensity but I ran both of these and the passed. The changes don't seem to mess up comparison to output.ref so I didn't change them. . Pending feedback about how to index the roots I have followed what is in place for eom-cc ES energies. . `CC DIPOLE X` is the ground state. `CC ROOT 1 DIPOLE X` is first ES, and so on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260009547:28,test,tests,28,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260009547,2,['test'],['tests']
Testability,"Alright. I'll try to change the order. ~~Should we switch to `multipolepotentials` for EFP in this PR already? Would be clever probably, because then at least some functionality tests of the code are executed.~~; Done. That was super easy. Btw: Python one-liner to generate the 'correct' alphabetical ordering:; `list(itertools.combinations_with_replacement((""X"", ""Y"", ""Z""), dim))`; where `dim` is the dimension of the tensor.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657#issuecomment-499154239:178,test,tests,178,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-499154239,1,['test'],['tests']
Testability,"Alrighty, I've figured it out; I was missing yet another pesky CPKS term. After running this test, all looks great:; ```; molecule {; O 0.000000000000 0.000000000000 -0.076532381406; H 0.000000000000 -0.769857650400 0.607312215449; H -0.000000000000 0.769857650400 0.607312215449; }. dft_grids = [ (75, 302), (90, 434), (99, 590) ]; for radial,spherical in dft_grids:; set {; scf_type pk; d_convergence 12; #dft_v2_rho_cutoff 1e-16; dft_spherical_points $spherical; dft_radial_points $radial; points 5; disp_size 1e-4; g_convergence gau_tight; }. method = 'SVWN/def2-svp'. optimize(method); Eener, Ewfn = freq(method, dertype=0, return_wfn=True); Egrad, Gwfn = freq(method, dertype=1, return_wfn=True); Ehess, Hwfn = freq(method, dertype=2, return_wfn=True). Ewfn.frequencies().print_out(); Gwfn.frequencies().print_out(); Hwfn.frequencies().print_out(); ```; This tests the frequencies by 5 point finite differences of energies (which includes full grid weight derivatives, as a result of the displacements each rebuilding their grid), by gradients (which includes only the first order grid weight derivative term) and by analytic Hessians (which has no grid weight derivative term coded up). The results below confirm that the implementation is now correct (well, for water at least):. |Grid | FD type | mode 1 | mode 2 | mode 3 |; |--------|----------|-----------|-----------|----------|; | | Ener | 1559.6255 | 3735.3708 | 3841.9257| ; | 75,302 | Grad | 1560.1514 | 3735.4746 | 3841.8555| ; | | Hess | 1560.1712 | 3735.5120 | 3841.8152| ; | | | | | | ; | | Ener | 1560.2564 | 3735.4425 | 3841.8996| ; | 90,434 | Grad | 1560.1980 | 3735.4777 | 3841.7622| ; | | Hess | 1560.2152 | 3735.5349 | 3841.8257| ; | | | | | |; | | Ener | 1559.9800 | 3735.4104 | 3841.5086| ; | 99,590 | Grad | 1560.2142 | 3735.4799 | 3841.7807| ; | | Hess | 1560.2242 | 3735.5373 | 3841.8279| . It's really not worth adding the grid weight derivatives, on the basis of this simple test. We just need to ensure that users don",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914:93,test,test,93,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502375914,2,['test'],['test']
Testability,"Alrighty, this one should be ready to go now. I tried to cook up a simple test using f orbitals, but they're all too costly; in the end I just added a permutation to the atom ordering in our existing cc-pVDZ water test, because this is enough to reveal the bug. The fact that we've always had a working cc-pVDZ test case shows how subtle the bug is; the affected d components in water must be zero by symmetry. I did have a distorted water in my test suite to check that case, but didn't detect problems. Oh well, live and learn I guess. This should be a trivial review, and it clearly helps to address a couple of high priority tickets, so please have at it whenever you get a chance. Sorry again for the error. Next time you see me, I'll be at a chalkboard, writing ""I will not cut and paste"", à la Bart in the Simpsons opening credits. Except, instead of writing it, I'll be cutting and pasting it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361080182:74,test,test,74,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361080182,8,['test'],['test']
Testability,Also @hokru you might want to check out the `tests/libxc` folder for a list of tests and see if your new functionals are present. We need to hook this up to long tests at some point as well. @bwb314 At some point you added many DFT LibXC tests against Q-Chem that missed the rebasing and was finally closed [here](https://github.com/dgasmith/psi4/pull/18). Do you still have these tests that we can add to Psi4?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/877#issuecomment-349732113:45,test,tests,45,https://psicode.org,https://github.com/psi4/psi4/pull/877#issuecomment-349732113,5,['test'],['tests']
Testability,"Also fails with `set diag_method mitrushenkov`. Not completely surprised as the `olsen` and `mitrushenkov` methods have not been tested since this was integrated into Psi4 from Psi3 as far as I know. Its a bit of strange error in debugging as it looks like the H0 block was not initialized even though it was. Ill look into when I have time, but thats not likely to be soon. Do you really want something besides Davidson iterations or is this just a report that it doesn't work?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/559#issuecomment-271455005:129,test,tested,129,https://psicode.org,https://github.com/psi4/psi4/issues/559#issuecomment-271455005,1,['test'],['tested']
Testability,"Also for future reference: Although we'd like FINDIF to be compatible with arbitrary molecules, Psi or QCDB, the current state of QCDB makes that difficult. To paraphrase Lori,. > I think a findif test of a qcdb.Mol _at the moment_ would use a qcdb.Mol in `driver_findif.py` to get geometries and to combine the energies/gradients into a gradient/hessian, but would need to transform into a psi.4.core.Mol for the quantum computations. In 1.3dev-qcdb, the transformation to a Psi molecule won't be necessary. As such, I'll be holding off on the QCDB molecule tests until then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-398727626:197,test,test,197,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-398727626,2,['test'],"['test', 'tests']"
Testability,"Also interesting that the testcase passes on ia32 (i.e. 32bit Intel) machines, even with ATLAS: https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=i386&ver=1%3A1.2.1-2&stamp=1546705469&raw=0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-451670081:26,test,testcase,26,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-451670081,1,['test'],['testcase']
Testability,Also updates the unit tests for DF_Helper.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/742#issuecomment-308568798:22,test,tests,22,https://psicode.org,https://github.com/psi4/psi4/pull/742#issuecomment-308568798,1,['test'],['tests']
Testability,"Also waiting on input about where to put this test, with the larger set of checks it is most too long for `quicktests`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-381827634:46,test,test,46,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-381827634,1,['test'],['test']
Testability,"Also, @rmcgibbo, did you want to settle on `energy('sns-mp2')` or `energy('nnmp2')` for the call? I'm guessing the former, so changing w/i the p4 test suite. Latter appears [here](https://github.com/DEShawResearch/sns-mp2/blob/master/tests/2x%7BCC%7D.in#L30-L35). (Note that unless you're doing something I didn't notice, setting memory w/i `set ...` isn't valid; memory is a plain `memory 7 gb` statement.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-345778933:146,test,test,146,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345778933,2,['test'],"['test', 'tests']"
Testability,"Also, I would prefer log files over copypaste on the screen, which is hard to navigate.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754979657:21,log,log,21,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754979657,1,['log'],['log']
Testability,"Also, `""DETCI AVG DVEC NORM""` computations is not tested: as none of the tests fails, when it is disabled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441#issuecomment-449451818:50,test,tested,50,https://psicode.org,https://github.com/psi4/psi4/pull/1441#issuecomment-449451818,2,['test'],"['tested', 'tests']"
Testability,"Also, here's a useful test case for anyone interested in getting their hands dirty. Toggling between the (correct) libint1 and engine and libint2 version in C1 / cartesians should yield identical results.; ```; molecule h2o {; 0 1; O; H 1 R; H 1 R 2 A. R = 1.0; A = 104.5; }. set {; integral_package libint1; puream false; scf_type direct; df_scf_guess false; guess core; reference rhf; basis sto-3g; e_convergence 12; d_convergence 9; }. analytic = gradient('scf'). set findif points 3; findif = gradient('scf', dertype=0). compare_matrices(analytic, findif, 5, ""RHF SCF finite-diff (3-pt) vs. analytic gradient to 10^-5"") #TEST. set findif points 5; findif = gradient('scf', dertype=0). compare_matrices(analytic, findif, 7, ""RHF SCF finite-diff (5-pt) vs. analytic gradient to 10^-7"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-537953601:22,test,test,22,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537953601,3,"['TEST', 'test']","['TEST', 'test']"
Testability,"Also, the B atom (singlet state) test case is small enough that it runs in the default 256 MB of RAM. Took about 2 seconds on my desktop.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170187836:33,test,test,33,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170187836,1,['test'],['test']
Testability,"Also, the option does not appear to be tested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1818#issuecomment-589923810:39,test,tested,39,https://psicode.org,https://github.com/psi4/psi4/issues/1818#issuecomment-589923810,1,['test'],['tested']
Testability,An HFS student is going to be running some tests that L1 and L2 agree here. Let's hold off on merging until those tests come back clean.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2502#issuecomment-1079254859:43,test,tests,43,https://psicode.org,https://github.com/psi4/psi4/pull/2502#issuecomment-1079254859,2,['test'],['tests']
Testability,"An error has occurred. Traceback:. <class 'Boost.Python.ArgumentError'>: Python argument types in. ```; psi4.scf(NoneType, NoneType); ```. did not match C++ signature:. ```; scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; ```. ""<string>"", line 47, in <module>. This is, for example, from the opt1 test case, but all jobs fail. I; already tried removing my objdir completely and recompiling. On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; wrote:. > The current head (0.4.156 / 7783818; > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > / 0.5.92) works fine for me on the test case above and on all the usual; > test cases. What is the nature of your broken python?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196157987:318,test,test,318,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196157987,3,['test'],['test']
Testability,"An update - after a colleague rebooted the node I'd been using for testing with the `noxsave` kernel parameter (disabling AVX capability visibility in the CPU flags), I retried the same test files with the same settings and env on the same machine. ...and now I get the ""correct"" answer -- the one I'd get with `set wcombine false`. So I think despite 9163cbd08865d26129cfbaf5c302fc14f870f30f there is still a sketchy use of DGETRI or DGETRF somewhere getting pulled in by an edge-case I'm hitting (because, again, if I tweak the number of processes, or the memory, or the basis set, or the geometry ever so slightly, it goes away!). I think I should flag @andysim here?. I'll continue with `wcombine` for my genrealized fix and I'm am happy to keep testing this weird job on the same machine as patches come down-the-line.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967:67,test,testing,67,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-939372967,3,['test'],"['test', 'testing']"
Testability,And I suppose now there's a dependency question: how do we feel about making `scipy` a dependency? That's why tests fail on test environment but full tests passed locally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198:110,test,tests,110,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198,3,['test'],"['test', 'tests']"
Testability,And I think the new test case is missing a CMakeLists.txt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634#issuecomment-287889356:20,test,test,20,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-287889356,1,['test'],['test']
Testability,"And if we're talking about pulling this in, reminder that the `cookbook` tests still need to be fixed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1394#issuecomment-444513074:73,test,tests,73,https://psicode.org,https://github.com/psi4/psi4/pull/1394#issuecomment-444513074,1,['test'],['tests']
Testability,"And if you're testing stuff and playing around, that 5 seconds is also very very annoying. . But again, any reason why simply using `high_resolution_clock` from Boost/C++11 isn't good enough? On most systems, the accuracy will be more then enough for practical purposes. The actual sampling to determine the accuracy can be activated by a user-option?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/89#issuecomment-98495163:14,test,testing,14,https://psicode.org,https://github.com/psi4/psi4/issues/89#issuecomment-98495163,2,['test'],['testing']
Testability,"And, that's all I've got planned for this PR! Unless tests fail (which they shouldn't), this should be good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-433666372:53,test,tests,53,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-433666372,1,['test'],['tests']
Testability,"And, updated. This'll be good to go once tests pass. Sphinx build was clean, and the edited files looked good when viewed locally. This is a bigger change than I expected, so I'll leave it to somebody else to double-check my work and merge in. The dark blue vs. light blue thing turned out not to be related to section headers, but to whether I had clicked on a specific subsection.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883426326:41,test,tests,41,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883426326,1,['test'],['tests']
Testability,And/or add to our cmake scripts a check for numpy. . It would also be useful to add cmake checks for the C++11 specific features we use and error out at configuration time. I think it tests for some but doesn't error out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407#issuecomment-225233909:184,test,tests,184,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225233909,1,['test'],['tests']
Testability,"Another small test case, from the W4-11 benchmark set of atomisation energies.; Converges with `SOSCF` just fine, but otherwise struggles. . ```; molecule mol {; 0 2; O 1.143943 0.075354 0.000000; O 0.000000 0.576945 0.000000; O -1.082114 -0.493872 0.000000; H -0.494634 -1.267419 0.000000; }. memory 2 GiB; set {; ints_tolerance 1e-12; basis aug-cc-pVTZ; # soscf true; reference uhf; }; energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-512354183:14,test,test,14,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-512354183,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Any chance at all that there's an old (what p4 used until maybe a month ago) pybind11 2.2.0 anywhere conceivably detectable, including in a conda env where other p4 dependencies are detected? CMake is perfectly capable of finding the pb11 you want and then C++ header detection takes over and finds the pb11 you _don't_ want. EDIT: **2.0.0**, not 2.2.0; Further EDIT: it does look like gcc7 is the highest they regularly test https://travis-ci.org/pybind/pybind11/builds/375778661?utm_source=github_status&utm_medium=notification",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1013#issuecomment-388214831:421,test,test,421,https://psicode.org,https://github.com/psi4/psi4/issues/1013#issuecomment-388214831,1,['test'],['test']
Testability,"Any chance it could be a disk space issue? I created a minimal env with cmake, eigen, mpfr, python, GCC, and it unpacked fine. Gnu compilers, but surely that wouldn't matter at the unpacking stage. ```; -- Found LAPACK MKL: /theoryfs2/common/software/intel2019/compilers_and_libraries_2019.4.243/linux/mkl/lib/intel64/libmkl_rt.so;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Could NOT find Libint2 (missing: Libint2_DIR); -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable Libxc could not be located, Building Libxc instead.; -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- Documentation targets available: doxyman (html); -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Running some tests requires pytest. Please install it manually (try: /home/psilocaluser/toolchainconda/envs/minbld/bin/python3.6 -m pip install pytest); -- Configuring done; -- Generating done; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636:1216,test,test,1216,https://psicode.org,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636,2,['test'],"['test', 'tests']"
Testability,"Any progress on this? We're hitting some problems in tests, because the analytic Hessians require higher angular momentum. Rather than recompile a large libint for every travis run, it'd be good to pull it in as a precompiled package.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-232778952:53,test,tests,53,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232778952,1,['test'],['tests']
Testability,Any test case that actually used NumPy (mostly casscf) failed. Afraid I don't remember the error trace details.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-312328448:4,test,test,4,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-312328448,1,['test'],['test']
Testability,"Anything involving tensor contractions is just moving code around, and isn't something I'm worried about. Test updates, I'm confident are correct. Things worth checking:; * Code readability; * Nothing obviously suspicious in the DIIS call or setup in `occ_iterations`; * `opt-irc-2`, are we okay punting on this until PyOptking?. It may also be worth letting @susilehtola have a look, since he has experience with OO. Now that I type this out, it occurs to me that I may also need to change some of the DIIS keywords along with the DIIS behavior change... As I recall, UB had separate keywords for OO or non-OO DIIS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916:106,Test,Test,106,https://psicode.org,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916,1,['Test'],['Test']
Testability,"Anyway, the logical place to start debugging is SAD and the first iteration after it. |System|Difference in SAD energy|Difference in energy of first iteration|; |----------|----------------------------------|-----------------------------------------------|; |1| 2.387e-12|-1.405e-03|; |2| 6.253e-12|-3.704e+00|; |3| 1.364e-11|-5.389e-01|; |4| 8.868e-12|-1.833e+00|; |5|-8.868e-12|-3.321e+00|. The SAD energies are an exact match, so one would assume that the SAD densities also agree exactly. Something is causing the energy of the first iteration to change by quite a lot. This shouldn't happen: if the SAD density matrices are the same, the Fock matrices built from the SAD density matrices should also match; the orbitals in the first iteration should be practically the same. One can't compare after the first iteration, since the orbitals and densities will not be the same. So, here are the possibilities for disagreeing results. 1. Atoms in SAD converge to different solutions; 2. SAD Fock matrix is not computed properly (same input density leads to differences between runs); 3. First Fock matrix is not computed properly (same input density leads to differences between runs). 1 and 2 are unlikely, since the SAD energies agree.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-779554766:12,log,logical,12,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-779554766,1,['log'],['logical']
Testability,"Apologies for slowness! I _did_ test both Psithon _and_ PsiAPI before submitting the PR, so I am a bit surprised things are broken for you @loriab I can surely take another look. The long term solution is to ditch the additional input file for PCM. This requires changes in the PCM library that I am (alas, slowly) making right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356749030:32,test,test,32,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356749030,1,['test'],['test']
Testability,"Apologies if I didn't trace the logic thoroughly and correctly. But doesn't one always do region _or_ function (or flat)? From the user's perspective, could one then do. ```; /*- Select approach for pruning. Options ``ROBUST`` and ``TREUTLER`` prune based on regions (proximity to nucleus) while ... !expert -*/; options.add_str(""DFT_PRUNING_TYPE"", ""ROBUST"", ""FLAT P_GAUSSIAN D_GAUSSIAN P_SLATER D_SLATER LOG_GAUSSIAN LOG_SLATER ROBUST TREUTLER"");; ```. I think the most related option was https://github.com/psi4/psi4/blob/master/psi4/src/read_options.cc#L177 where it could have been two options but we rolled into one for the user.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494450392:32,log,logic,32,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494450392,1,['log'],['logic']
Testability,"Are the other tests fine?. If so, then, as said, the caspt2 calculations will work once Daniel's pull request is also incorporated. You will have to wait until then...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222666109:14,test,tests,14,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222666109,1,['test'],['tests']
Testability,"Are we clear to remove those four tests, then?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2234#issuecomment-925838802:34,test,tests,34,https://psicode.org,https://github.com/psi4/psi4/issues/2234#issuecomment-925838802,2,['test'],['tests']
Testability,"Are you thinking equilibrium and dissociated points along a potential energy curve for the standard testing suite? I favor a couple single points since couple dozen methods * 3 ref * E/G/H accumulates a lot of reference data. A hydrogen-only could be a good system to throw a high AM basis at to check puream, provided d&f make a material change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2371#issuecomment-986977719:100,test,testing,100,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986977719,1,['test'],['testing']
Testability,"Aren't a whole lot of tests of guess_basis. I think ""smoke"" is a subset of ""quick"", through I would like the full set of smoke addons.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/769#issuecomment-316856046:22,test,tests,22,https://psicode.org,https://github.com/psi4/psi4/pull/769#issuecomment-316856046,1,['test'],['tests']
Testability,"As a note: not all CC tests are tested through Perl. Actually looking at the output has caught a few bugs so far, although it does require someone intimately familiar with the tests to do so. I would be happy if we could get eyes on every test, but if it doesn’t happen its not a big deal. > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com wrote:; > ; > Sorry for the delay. The DCFT tests look good to me. I think we can also check of the CC tests; if I remember correctly, those tests are actually validated by comparing the output to the reference using a separate Perl script. If the tests run successfully, it means that the output is present and correct, or Perl wouldn't be able to parse it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/pull/315#issuecomment-205091286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205094545:22,test,tests,22,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205094545,8,['test'],"['test', 'tested', 'tests']"
Testability,"As for Debian and 1.2(.1), I have patched out libxc similar to what @susilehtola suggested in https://github.com/psi4/psi4/issues/1302#issuecomment-450826912 - for the next development cycle I guess psi4 will be able to use a system ilbxc, but time was running out. 1.2.1 is currently bulding here: https://buildd.debian.org/status/package.php?p=psi4 - there are a couple fo test suite failures I have not diagnosed yet, I'll try to find time over the weekend.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451496547:375,test,test,375,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451496547,1,['test'],['test']
Testability,"As for tests, you can have a look at `tests/pytests/test_tdscf_excitations.py` and pick a couple of the combinations for which AJ already computed reference values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626713199:7,test,tests,7,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626713199,2,['test'],['tests']
Testability,As long as the threads are only reduced during the PK steps it would only have benefits. No threads that do no work and allocate memory (Even if it doesn't matter in practice). The automatic selection probably ensures the in-core algorithm for these small calculations but could you test `pk_algo = YOSHIMINE/REORDER` and `PK_NO_INCORE True` as well? We probably have no test coverage.; Limiting `nthreads` in the PKManager https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L154 might solve headaches in the other algorithms. I saw a `ntask < nthreads` check in Yoshimine. If that exceeds time you planned to invest for the PK bug fix that is also fine.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2763#issuecomment-1298619970:283,test,test,283,https://psicode.org,https://github.com/psi4/psi4/pull/2763#issuecomment-1298619970,2,['test'],['test']
Testability,As mentioned by @PeterKraus can you run the `dft-bench-interaction` and `dft-bench-ionization` tests? Feel free to modify those tests to only run the wPBE0 part. A bit surprised the tests pass previously as the results were taken from other programs.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260#issuecomment-424358585:95,test,tests,95,https://psicode.org,https://github.com/psi4/psi4/pull/1260#issuecomment-424358585,3,['test'],['tests']
Testability,"As mentioned in the documentation @loriab quotes above, there is also a test case available of a QM computation in an MM point-charge field, the extern1 test case (psi4/tests/extern1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/341#issuecomment-209534925:72,test,test,72,https://psicode.org,https://github.com/psi4/psi4/issues/341#issuecomment-209534925,3,['test'],"['test', 'tests']"
Testability,"As mentioned on Slack (#newdev 2018/03/27), RHF tests with Au+ and Cu+ yield the same total energies in G09 and Psi4 (8 decimals) with both CCSD(T) and HF using the cc-pvdz-PP basis sets. These basis tests both have `0.0` coefficient in the `N+1`th shell. The orbital eigenvalues match as well. Unless we need more testing, I'm satisfied with this - the discrepancy in the ionisation energy is clearly coming from the open-shell part (and likely not from the basis set).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376595463:48,test,tests,48,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376595463,6,['test'],"['testing', 'tests']"
Testability,"As of this morning, I show dfomp3-2 and dfomp2p5-2 as fixed and dfomp2p5-grad1 and dfomp3-grad2 as still broken. You can see the errors by clicking on the ""Failed"" link at https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=44226.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-157786910:180,test,testboard,180,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157786910,1,['test'],['testboard']
Testability,"As per Slack conversation (@JonathonMisiewicz) here is a tough example where finding the lowest ROHF solution is challenging:; [psi4_recalc1.log](https://github.com/psi4/psi4/files/9389493/psi4_recalc1.log). Psi4 goes into an oscillation far from the lowest solution and never converges anywhere. This cannot be solved by any amount of damping, I have tried 99% (!!) and it still oscillated, which is strange.; [psi4_recalc1_damp.log](https://github.com/psi4/psi4/files/9389567/psi4_recalc1_damp.log). I think I managed to get convergence to an unstable solution with a combination of SOSCF and 90% damping, but I don't have the exact parameters on hand. The set of known (but possibly unstable) HF solutions found via Molpro 2015 for this geometry/basis are:; ```; -190.0232936; -190.0354652; -189.8590420; -190.0766531; -190.1033611; -189.9953074; ```; The lowest known energy is -190.103361091599, and here are its orbital energies and other details:; ```; !RHF STATE 1.1 Energy -190.103361091599; Nuclear energy 39.33359221; One-electron energy -337.18531326; Two-electron energy 107.74835997; Virial quotient -1.00211661; !RHF STATE 1.1 Dipole moment 51.33626033 0.20512167 -0.68287708; Dipole moment /Debye 130.47521252 0.52133315 -1.73558673. Orbital energies:. 1.1 2.1 3.1 4.1 5.1 6.1 7.1 8.1 9.1 10.1; -20.681373 -20.622776 -11.413662 -1.456025 -1.307146 -0.981471 -0.775682 -0.689298 -0.660029 -0.644029. 11.1 12.1 13.1 14.1 15.1 16.1; -0.579569 -0.536873 -0.172695 -0.647339 -0.168304 0.026142; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-1221579303:141,log,log,141,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-1221579303,4,['log'],['log']
Testability,As the code is in place and we have a long test for it I say lets go ahead and get this in. This is a good unit of work currently and I think the discussion on how to integrate this properly into Psi4 is a long one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-369678429:43,test,test,43,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-369678429,1,['test'],['test']
Testability,"As usual, Lori, thanks. Test renaming pushed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909#issuecomment-634883990:24,Test,Test,24,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634883990,1,['Test'],['Test']
Testability,"Assuming tests pass (which they should), ready for merge!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1531#issuecomment-476308128:9,test,tests,9,https://psicode.org,https://github.com/psi4/psi4/pull/1531#issuecomment-476308128,1,['test'],['tests']
Testability,"At end of [this page](http://www.linuxfromscratch.org/lfs/view/development/chapter06/gcc.html) is a nice run-down of what's supposed to come with a gcc. `liblto_plugin.a` (the static) seems to be an oddity. Glad the conda pkg is working. You're getting it off the `test` [subchanel](https://anaconda.org/psi4/chemps2/files), I hope? `conda install chemps2 -c psi4/label/test` . That should be a well-built one, so let me know if it acts up. Build options is conda's weakness, I think. For instance, I can't use their `git` because I'm addicted to `git add -p`, and they don't build with perl enabled. There's ""features"" in the works to counteract this, but I can't suggest any other gcc right off.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288472702:265,test,test,265,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288472702,2,['test'],['test']
Testability,"At the moment, just quicktests (~118) because `cc14` and `mints9` are still failing. The latter is my fault, the former is a mystery. Failures make the conda build fail, so the test suite needs to be clean before go back to running all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262358481:177,test,test,177,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262358481,1,['test'],['test']
Testability,Attached file misses the memory limit of 60 GiB by ~2 GiB. `DFHelper Memory: AOs need 14.718 GiB`; `100.0% of DFT collocation blocks in 47645 MiB. `; Sums to 62.3 GiB; [test.txt](https://github.com/psi4/psi4/files/2470019/test.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1283#issuecomment-429052341:169,test,test,169,https://psicode.org,https://github.com/psi4/psi4/issues/1283#issuecomment-429052341,2,['test'],['test']
Testability,Attached gaussian inputs:; [cu_plus.txt](https://github.com/psi4/psi4/files/1852217/cu_plus.txt); [cu_0.txt](https://github.com/psi4/psi4/files/1852218/cu_0.txt). And Psi4 inputs for the above test:; [cc-pvdz-pp-gbs.txt](https://github.com/psi4/psi4/files/1852221/cc-pvdz-pp-gbs.txt); [input.txt](https://github.com/psi4/psi4/files/1852222/input.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376532312:193,test,test,193,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376532312,1,['test'],['test']
Testability,"Awesome, thanks for this fix. I haven't had a chance to test it yet but does it still work with Python 2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20533136:56,test,test,56,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20533136,1,['test'],['test']
Testability,B); > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc1; > ```; > ; > 1/79 Test #9: cc1 ..............................**_Failed 1.95 sec; > Start 10: cc10; > 2/79 Test #10: cc10 .............................**_Failed 1.59 sec; > Start 11: cc11; > 3/79 Test #11: cc11 .............................**_Failed 1.82 sec; > Start 12: cc12; > 4/79 Test #12: cc12 .............................**_Failed 1.56 sec; > Start 13: cc13; > 5/79 Test #13: cc13 .............................**_Failed 1.64 sec; > Start 14: cc13a; > 6/79 Test #14: cc13a ............................**_Failed 1.65 sec; > Start 15: cc14; > 7/79 Test #15: cc14 .............................**_Failed 1.58 sec; > Start 16: cc15; > 8/79 Test #16: cc15 .............................**_Failed 1.53 sec; > Start 17: cc16; > 9/79 Test #17: cc16 .............................**_Failed 1.65 sec; > Start 18: cc17; > 10/79 Test #18: cc17 .............................**_Failed 1.65 sec; > Other tests are passing:; > ; > ```; > Start 1: adc1; > ```; > ; > 1/294 Test #1: adc1 ............................. Passed 18.67 sec; > Start 2: adc2; > 2/294 Test #2: adc2 ............................. Passed 36.82 sec; > Start 3: casscf-fzc-sp; > 3/294 Test #3: casscf-fzc-sp .................... Passed 2.24 sec; > Start 4: casscf-sa-sp; > 4/294 Test #4: casscf-sa-sp ..................... Passed 5.18 sec; > Start 5: casscf-sp; > 5/294 Test #5: casscf-sp ........................ Passed 2.28 sec; > —; > Reply to this email directly or view it on GitHub https://gi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178134633:3895,Test,Test,3895,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633,1,['Test'],['Test']
Testability,"BTW, we design quicktests so that they pass with `MAX_AM_ERI=4`, so if you're building the integrals internally, that's a possible time savings. Just in case you hadn't noticed and were sensitive to testing time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249312071:199,test,testing,199,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249312071,1,['test'],['testing']
Testability,"BUILD/psi4-1.3.2/redhat-linux-build/tests; Start 7: casscf-sp; 1/12 Test #7: casscf-sp ........................***Failed 0.21 sec; Start 22: cc1; 2/12 Test #22: cc1 ..............................***Failed 0.06 sec; Start 132: dfmp2-1; 3/12 Test #132: dfmp2-1 ..........................***Failed 0.06 sec; Start 196: fcidump; 4/12 Test #196: fcidump ..........................***Failed 0.06 sec; Start 330: sapt1; 5/12 Test #330: sapt1 ............................***Failed 0.06 sec; Start 357: scf-property; 6/12 Test #357: scf-property .....................***Failed 0.06 sec; Start 372: tu1-h2o-energy; 7/12 Test #372: tu1-h2o-energy ...................***Failed 0.05 sec; Start 402: psi4numpy-rhf; 8/12 Test #402: psi4numpy-rhf .................... Passed 4.50 sec; Start 404: psi4numpy-rhf-hessian; 9/12 Test #404: psi4numpy-rhf-hessian ............ Passed 5.47 sec; Start 409: python-energy; 10/12 Test #409: python-energy .................... Passed 1.99 sec; Start 422: json-schema-1-gradient; 11/12 Test #422: json-schema-1-gradient ........... Passed 4.46 sec; Start 424: chemps2-scf-n2; 12/12 Test #424: chemps2-scf-n2 ...................***Failed 0.06 sec. 33% tests passed, 8 tests failed out of 12. Label Time Summary:; addon = 0.06 sec*proc (1 test); cart = 0.17 sec*proc (3 tests); casscf = 0.21 sec*proc (1 test); cc = 0.06 sec*proc (1 test); chemps2 = 0.06 sec*proc (1 test); df = 0.06 sec*proc (1 test); dfmp2 = 0.06 sec*proc (1 test); fcidump = 0.06 sec*proc (1 test); json = 4.46 sec*proc (1 test); properties = 0.06 sec*proc (1 test); psi = 17.03 sec*proc (12 tests); psi4numpy = 9.97 sec*proc (2 tests); python = 1.99 sec*proc (1 test); quicktests = 17.03 sec*proc (12 tests); sapt = 0.06 sec*proc (1 test); scf = 0.06 sec*proc (1 test); smoketests = 17.03 sec*proc (12 tests); tutorial = 0.05 sec*proc (1 test). Total Test time (real) = 17.19 sec. The following tests FAILED:; 	 7 - casscf-sp (Failed); 	 22 - cc1 (Failed); 	132 - dfmp2-1 (Failed); 	196 - fcidump (Failed); 	33",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680:1088,Test,Test,1088,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676514680,1,['Test'],['Test']
Testability,"Back to the examples from https://github.com/psi4/psi4/issues/817#issuecomment-351739145, @robertodr has a scheme that won't get the dir right from within the psi input file, but it will fix the dir upon completion of psi4 execution, as shown below. Would that fix your pipeline for now?. ```; >>> cat test.py; import os. geometry('H -.5 0 0\nH .5 0 0\nsymmetry c1'). pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. energy('HF/3-21G'). print(os.getcwd()). >>> psi4 test.py ; /tmp/psi.12147.pcmsolver.604855c3; >>> pwd; /home/raimis/debug/psi4_PCM; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356990910:302,test,test,302,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356990910,2,['test'],['test']
Testability,"Be aware that analytic Hessians are available for Hartree–Fock (and a few DFT fctls that no one uses) only. So if wB97X-D is the target, it probably is best to prototype with `freq(..., dertype='gradient')` for consistency (as you were already doing). For all those displacements, QCFractal is the proposed way to run through them in parallel. You can get an idea how it works with a ""snowflake"" calc that just uses all the threads on a single node (and doesn't require database storage setup). conda-wise you'd need to `conda install qcfractal postgresql -c conda-forge`. An example is https://github.com/psi4/psi4/blob/master/tests/ddd-deriv/input.dat#L40-L47 . Snowflake is a lightweight single-node route. The full QCFractal approach is backed by a database (yours; not MolSSI's) and handles distributing gradient jobs through your cluster's queue. It takes a little more setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575:628,test,tests,628,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1909486575,1,['test'],['tests']
Testability,"Because it's a quick test, and the values you get out are highly dependent on the functional. Also, you get the fun edge cases of a bare proton (no electrons), and a hydrogen atom (no beta electrons).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2371#issuecomment-986978455:21,test,test,21,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986978455,1,['test'],['test']
Testability,"Below is an overview of the M11 situation. I'm mainly looking for opinions on whether I'm entering the functional wrong or if the parameter hookup may need adjustment after Libxc 3-->4 changes + new dict func initialization. This is the first use of `use_libxc` for a LRC. ---. Ok, I believe I'm now using `use_libxc` correctly for LRC fctls (test case still unhappy):. ```; funcs.append({; ""name"": ""M11"",; ""x_functionals"": {; ""HYB_MGGA_X_M11"": {; ""use_libxc"": True; }; },; ""x_hf"": {; ""use_libxc"": ""HYB_MGGA_X_M11""; },; ""c_functionals"": {; ""MGGA_C_M11"": {}; },; ""description"": ' M11 Meta-GGA XC Functional\n',; ""citation"": ' R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011\n',; ""doi"": '10.1021/jz201170d',; }); ```. Aren't really any other M11 fctls in Libxc to get confused by:; ```; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11_L 75 /*M11-L correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_C_M11 76 /*M11 correlation functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_MGGA_X_M11_L 226 /*M11-L exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs.h:#define XC_HYB_MGGA_X_M11 297 /*M11 hybrid exchange functional from Minnesota */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_MGGA_X_M11 225 /* Worker for M11 functional */; ./install-libxc/include/libxc/xc_funcs_removed.h:#define XC_HYB_MGGA_XC_M11 462 /* M11 functional from Minnesota */; ```; This turns into psi output; ```; => Composite Functional: M11 <=. M11 Meta-GGA XC Functional. R. Peverati and D. G. Truhlar, J. Phys. Chem. Lett., 2, 2810, 2011. Deriv = 1; GGA = TRUE; Meta = TRUE. Exchange Hybrid = TRUE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_HYB_MGGA_X_M11 [omega = 0.2500]. => Exact (HF) Exchange <=. 1.5720 HF,LR [omega = 0.2500]; 0.4280 HF. => Correlation Functionals <=. 1.0000 XC_MGGA_C_M11; ```; which doesn't match; ![screen shot 2018-04-20 at 2 19 31",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-383182397:343,test,test,343,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-383182397,1,['test'],['test']
Testability,Better question: How was this not tested? Should Travis go through smoke tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/769#issuecomment-316850403:34,test,tested,34,https://psicode.org,https://github.com/psi4/psi4/pull/769#issuecomment-316850403,2,['test'],"['tested', 'tests']"
Testability,"Between plain calcs, user-specified-occ-calcs, successive calcs, calcs involving pre-SCF-cycles, wavefunction reloading, restarts, etc., getting the SCF initialization info from places in the right priority is fraught and, I fear, not defensively tested. So it'd be useful to understand the circumstances and reasoning behind the proposed changes. I'm all for more sanity checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2488#issuecomment-1073970696:247,test,tested,247,https://psicode.org,https://github.com/psi4/psi4/pull/2488#issuecomment-1073970696,1,['test'],['tested']
Testability,"Between the two of you, the two of us are confused about what kinds of tests you want. * Holger asked about correctness tests. Lori hasn't raised the issue. This issue wasn't raised during my earlier ""density to wavefunction"" PRs, so I don't understand why we're doubting its correctness now. This is the same code as I used to bring densities over then. If there is a bug, that's the fault of `occ` and outside the scope of this PR. (And while we _could_ test correctness for the 1RDM, that requires adding occ properties. Which we could do, but is outside the scope of this PR.); * Holger asked if FCHK can be enabled but said that would be for a different PR. Lori says that may be appropriate for this PR. This is a straight contradiction, and we're confused which you want.; * While it's also possible to test `compute_fvpi`, I cannot recall one other case of a simple Pybind requiring a test, so I'm not sure what we'd be testing. Correctness? That this function can be called Python side?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072#issuecomment-767091324:71,test,tests,71,https://psicode.org,https://github.com/psi4/psi4/pull/2072#issuecomment-767091324,12,['test'],"['test', 'testing', 'tests']"
Testability,"Broadly, [psithon](http://psicode.org/psi4manual/master/tutorial.html) is when you make a molecule with `molecule name {...}`, use other non-strictly-python syntax in your input and submit the file to the executable `bin/psi4`, while [psiapi](http://psicode.org/psi4manual/master/psiapi.html) is when you `import psi4`, make a molecule with `name = psi4.geometry(...)`, use strictly python syntax, and submit the file to python interpreter. Sounds like you use psithon (only choice until Oct 2016 (dev) or May 2017 (release)), though you might like psiapi. Have you tested the fix with #818? My concern, once I looked carefully (albeit late at night, so I could be talked down), was that to handle pcm there's a snippet of code in the inputparser (only psithon passes through the input parser) that 818 _didn't_ change and a very similar snippet (that only psiapi uses) that 818 _did_ change. So I worry that 818 _didn't_ fix your problem and _did_ break pcm in psiapi mode for me (shows up in `psi4 --test` that's actually running psiapi). If 818 fixes your problem, then I'm imagining things. Could you read this over, @robertodr, and see if it raises your alarm? pcm in `psi4 --test` is broken for me, and this was my theory why.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356713683:566,test,tested,566,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356713683,3,['test'],"['test', 'tested']"
Testability,Broken build; https://kojipkgs.fedoraproject.org//work/tasks/8247/18108247/build.log. A succesful build; https://kojipkgs.fedoraproject.org//packages/psi4/1.0/1.926879egit.fc25/data/logs/x86_64/build.log,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-283062965:81,log,log,81,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-283062965,3,['log'],"['log', 'logs']"
Testability,"Btw since the 3-21G case doesn't even have ECPs, it should go in its own test.; Where you could check both the conventional SCF/MP2 as well as the density-fitted ones.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452717335:73,test,test,73,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452717335,1,['test'],['test']
Testability,"Building from ToT in conda at home, I can confirm that `initialize_lebedev` in fact is never called... it's optimized straight out of the code! (I couldn't find anywhere where it got called, so I am not surprised). ```; (base) liz@Gaston:~/Development/psi4/objdir/stage/tests$ nm ../lib/psi4/core.cpython-38-x86_64-linux-gnu.so | grep lebedev; 00000000020dbe80 b _ZN3psi13SphericalGrid16lebedev_mapping_E; ```. Doing the same breakpoint tests using the line-numbers in ToT cubature.cc, I can also see that `initialize_lebedev` is never called, and `lebedev_mapping_` ends up with no entries in it when it's first accessed. Will work on a patch now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371:270,test,tests,270,https://psicode.org,https://github.com/psi4/psi4/issues/2735#issuecomment-1267804371,2,['test'],['tests']
Testability,"By finite-difference test, I mean ""there is some property that we can compute either by finite difference of energies or by contracting appropriately defined densities against derivative integrals,"" e.g., geometry gradients and dipoles. By checking that both routes predict the same result, we can be much more confident that the densities are correctly implemented. (I recall a sign error in the CASPT2 gradients of another package. This error went uncaught for decades because the impact on calculations was relatively small.). I don't know if this is an option for transition densities. I'm not sure if EOM-CC transition properties are defined by some variational criteria, some variational criteria but neglecting orbital relaxation, or something else altogether. EDIT: The '93 Stanton and Bartlett paper explicitly says orbital relaxation is neglected, so I imagine the finite difference test is not an option. I'm not sure if there's some other technique to validate the correctness of the transition densities, other than matching other code. I know ""matching other code"" is done in the test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284:21,test,test,21,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094528284,3,['test'],['test']
Testability,"By hooking the hessian call up to the analytic RHF code, I unleashed the error message in the frequency tests that use DF and, as you said, used the incorrect keyword to request gradients. I will fix those tests when I get a chance (probably the flight back on Monday - I'm at a conference now). On my flight here I wrote some cheesy frequency code to plug the gap in our capabilities, which may or may not be useful::. ``` python; import numpy as np. mol = ref_wfn.molecule(); natoms = mol.natom(); masses = np.zeros(natoms). for atom in range(natoms):; masses[atom] = mol.mass(atom). m = np.repeat( np.divide(1.0, np.sqrt(masses)), 3); mwhess = np.einsum('i,ij,j->ij', m, H, m). fcscale = psi_hartree2J / (psi_bohr2m * psi_bohr2m * psi_amu2kg);; fc = fcscale * np.linalg.eigvalsh(mwhess); freqs = np.sqrt(np.abs(fc)); freqs *= 1.0 / (2.0 * np.pi * psi_c * 100.0); freqs[fc < 0] *= -1. freqvec = psi4.Vector.from_array(freqs[6:]); ref_wfn.set_frequencies(freqvec); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-231269168:104,test,tests,104,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231269168,2,['test'],['tests']
Testability,"By the way, MKL/Intel compiler performance is actually reasonably good on recent AMD Ryzen/Epyc CPUs, the only thing that may need to be done, is to patch the binaries with [this tool](https://github.com/jimenezrick/patch-AuthenticAMD). What it does, is look for CPU detection checks, and disable the ""cripple_AMD()"" paths that MKL, and Intel compilers often tend to insert. When this is done, AMD CPUs will get to run the same, optimized/vectorized code paths that an Intel CPU would run, instead of the unoptimized/less optimized path that is intended to be run by non-Intel CPUs. This is just fine, since Ryzen CPUs are actually very happy to run code optimized for Haswell, in fact IIRC for a long time the best --march= flag to use with GCC on Ryzen has been ironically --march=haswell.; So using MKL and Intel compiled binaries are just fine on Ryzen systems, just make sure to patch the MKL and compiled binaries. PS: we are in the process of acquiring some Ryzen systems, so in a couple months I will be able to provide actual test results",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853:1035,test,test,1035,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390958853,1,['test'],['test']
Testability,"By the way, you're quite right to leave the PSIDATADIR business to conda. I only mentioned it because having that set is a way to lead the conda binary astray. I didn't have any problem with the SAPT test case upon install onto a fresh machine. Closing, but do reopen or start another issue if you've any further problems. Or for just questions about the new information-passing, try out forum.psicode.org . Thanks for helping us debug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182669910:200,test,test,200,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182669910,1,['test'],['test']
Testability,"CC DIPOLE X"")` you are really getting what you would expect should be listed as `psi4.get_variable(""EOM-CC ROOT {last_root} DIPOLE X"")`. In addition to that you can't get the ground state dipole components at all since they were overwritten in the psivars dict with subsequent calls to the `psi4.core.ccdensity->psi::ccdensity::dipole->OEprop` chain.; - see [psi::ccdensity::dipole](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L61) code and follow into [OEProp](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) to see what I mean if you didn't follow the explanation above. . I think this very confusing when you look at how the dipole components for different roots can be grabbed with `psi4.get_variable` in the [ci-property tests](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1184) for example. . I propose ( and volunteer to make) the following changes in order to implement the test here, and avoid confusion in the future:; - For the 0th root (only one for non EOM-CC calculations) ccdensity will behave as is. ; - For any root after that it will pass `EOM-CC ROOT {root #}` into `oe->set_title()` [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/ccdensity/dipole.cc#L107) so that the confusing behavior with the variables dict is no longer as strange. ; - To test the original modification that this PR introduced I will: ; 1. extend `tests/cc54` to return the wfn which should now have Da/Db set to the CCSD OPDM. Get the `CC DIPOLE/QUADRUPOLE` components from the first pass. Run OEProp again (python side) with the wfn holding the CCSD OPDM, and make sure it gives the same `DIPOLE/QUADRUPOLE` components. ; 2. extend `tests/cc49` to do the same thing as before but just to be sure that the ground-state density is the only one being put back in ref_wfn, and at the same time confirm that the other roots are not over-writing the `CC DIPOLE/QUADRUPOLE` entries in the variables dict an",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259597050:1468,test,test,1468,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259597050,1,['test'],['test']
Testability,"CMake already declares those variables and they are in the build ; documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252929596:491,test,test,491,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596,1,['test'],['test']
Testability,"Can I get a test re-trigger? I'm not sure why mac failed, but I'm hoping it was a fluke.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1332747375:12,test,test,12,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1332747375,1,['test'],['test']
Testability,"Can be fixed with a bigger basis like cc-pvdz. The gradient is fine, so I think the trouble is in predicting the next geom step, so may be of interest to @psi-rking . ```; molecule { ; 0 1; C -0.167039 -0.712374 -0.022325; O 0.119573 0.677072 0.056530; H -0.453842 -0.989160 -1.036819; H -0.997038 -0.962046 0.638968; H 0.691232 -1.312038 0.284396; H 0.775814 0.817745 0.757350; }. set optking { ; frozen_dihedral = (""; 5 1 2 6; 4 1 2 6; 3 1 2 6; ""); }; #set {; # geom_maxiter 2; # g_convergence GAU_LOOSE; #}; #memory 6GB; #set_num_threads(6); #psi4_io.set_default_path(""/home/phy/Desktop/projects/2021/amoeba/test/poltype/scratch/Psi4-methanol""); #for _ in range(1):; # try:; # optimize('hf/3-21G'); # break; # except OptimizationConvergenceError:; # break; # else:; # try:; # set opt_coordinates cartesian; # optimize('hf/3-21G'); # break; # except OptimizationConvergenceError:; # pass; #clean(). optimize(""hf/3-21G"") # segfaults; #optimize(""hf/cc-pvdz"") # 4 iter; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761275679:611,test,test,611,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761275679,1,['test'],['test']
Testability,"Can confirm `qcengine` uses the number of physical cores on a machine by default, as seen [here](https://github.com/MolSSI/QCEngine/blob/c171e80c51afc5bc08ac8a84971b526fd33671d3/qcengine/config.py#L43-L46). Running psi4 with `8` threads (I have 8 logical CPU cores) produces similar performance:. ```sh; time qcengine run psi4 caffeine.json > qcng_out.json ; qcengine run psi4 caffeine.json > qcng_out.json 45.94s user 1.78s system 578% cpu 8.249 total; time psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json ; psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json 67.32s user 1.73s system 680% cpu 10.142 total; time psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json ; psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json 53.52s user 1.06s system 701% cpu 7.781 total; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2600#issuecomment-1152555475:247,log,logical,247,https://psicode.org,https://github.com/psi4/psi4/issues/2600#issuecomment-1152555475,1,['log'],['logical']
Testability,"Can we have a correctness test on the VMFC hessian? I do not know when this code will run, what problem `_sum_cluster_ptype_data` solves, or what this change does, and an example of _what in the output file this commit changes_ would be very helpful. I'll remind Lori that the n-body code in DDD needs to be better documented than it is right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389#issuecomment-1003751101:26,test,test,26,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003751101,1,['test'],['test']
Testability,"Can we have a test case, out of paranoia?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2984#issuecomment-1589812264:14,test,test,14,https://psicode.org,https://github.com/psi4/psi4/pull/2984#issuecomment-1589812264,1,['test'],['test']
Testability,Can you add the water dimer and excitation energy tests back in? Meta-GGA UKS should be fixed in latest master.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880#issuecomment-360958436:50,test,tests,50,https://psicode.org,https://github.com/psi4/psi4/pull/880#issuecomment-360958436,1,['test'],['tests']
Testability,"Can you clarify what you mean about a ""finite difference test"" for the transition densities?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094517187:57,test,test,57,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094517187,1,['test'],['test']
Testability,"Can you elaborate on ""tripped up""? While I'm willing to sacrifice to get 1.4 out, I'm not happy about losing any of the symmetry test coverage.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264#issuecomment-890677174:129,test,test,129,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890677174,1,['test'],['test']
Testability,"Can you grant me write access to your fork of PCMSolver?; 1. I already use the OpenMP Autocmake module, just not its latest version, which I will update.; 2. Testing for Python 3 support will be easier starting from your current version than the mess I currently have on my development branch... :disappointed: . The Travis and Distelli builds are not building PCMSolver, neither are they running the `pcmsolver` tests in Psi4. Am I missing something here?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-276601209:158,Test,Testing,158,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276601209,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"Can you post the output?; On Aug 14, 2015 8:09 AM, ""Eugene DePrince"" notifications@github.com wrote:. > Yes, this breaks psi on my macbook.; > ; > On Aug 14, 2015, at 8:24 AM, Justin Turney notifications@github.com; > wrote:; > ; > > Okay, I might've jumped the gun on this. It's not working on my Mac box.; > > It might just be my box and not others. Could someone else test on their; > > system? The issue I'm seeing is my system Python 2 libraries are not being; > > added to the link command. Will test against my homebrew version.; > > ; > > —; > > Reply to this email directly or view it on GitHub.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/164#issuecomment-131141242.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131148909:371,test,test,371,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131148909,2,['test'],['test']
Testability,"Can you update the description of the PR to say what it does? Plus, if it is ready to merge when the testing is complete please click ""Ready to go"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-220310110:101,test,testing,101,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-220310110,1,['test'],['testing']
Testability,"Can you update the test to also test using MOs obtained from an SCF that did _not_ finish successfully?. I like the interface, but it'd be best to get more opinions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190#issuecomment-857127925:19,test,test,19,https://psicode.org,https://github.com/psi4/psi4/pull/2190#issuecomment-857127925,2,['test'],['test']
Testability,"Certainly doesn't look correct... maybe one of the team knows exactly what; this is coming from. Seems like a required library that psi4 expects to be; installed is not installed (or not installed in the expected location). On Mon, Apr 3, 2017 at 2:44 PM, tanorjb <notifications@github.com> wrote:. > Hello,; >; > I am working on a university project and want to confirm that Psi4 is; > running correctly. When I run the test that the binary installation guide; > specifies I get the following error:; >; > [image: image]; > <https://cloud.githubusercontent.com/assets/26287438/24625066/cd1d8af4-187b-11e7-8cf9-ff6d285895e3.png>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/675>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdhTNc393EsuLqC8YxKtbTATrTkzZks5rsT35gaJpZM4Mx72O>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/675#issuecomment-291237788:421,test,test,421,https://psicode.org,https://github.com/psi4/psi4/issues/675#issuecomment-291237788,2,['test'],['test']
Testability,"Changed back to `NM` on the QCVars strings and added a new test. Opted for a separate pytest, clocking in at around a minute and a half I don't think I can really call it a smoke or quick test. . Pending checks and review, I think this is ready to go from my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-714187136:59,test,test,59,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-714187136,2,['test'],['test']
Testability,"Changed it back to a single ``DFT_PRUNING_SCHEME`` option and added a basic pruning test.; The new ``DFT_NUCLEAR_SCHEME=SBECKE`` has no test, but the nuclear and radial building schemes have no tests in general...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494711450:84,test,test,84,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494711450,3,['test'],"['test', 'tests']"
Testability,Check anything in the list of [official add-ons](https://github.com/psi4/psi4/blob/master/tests/pytests/addons.py#L51-L71). Lori may have some others.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-966584489:90,test,tests,90,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966584489,1,['test'],['tests']
Testability,"Closed-shell wB97 Energy (PK).....................................PASSED; 	Closed-shell wB97 Energy (OUT_OF_CORE): computed value (11.255459) does not match (-75.318545) to 5 digits.; Traceback (most recent call last):; File ""C:/Users/User/psi4.git/win_install/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 42, in <module>; File ""C:\Users\User\psi4.git\win_install\lib\psi4\driver\p4util\util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	Closed-shell wB97 Energy (OUT_OF_CORE): computed value (11.255459) does not match (-75.318545) to 5 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). Start 169: dft-omega; 15/24 Test #169: dft-omega ........................ Passed 70.41 sec; Start 338: soscf-dft; 16/24 Test #338: soscf-dft ........................ Passed 88.82 sec; Start 345: dft-custom; 17/24 Test #345: dft-custom ....................... Passed 66.89 sec; Start 346: dft-reference; 18/24 Test #346: dft-reference .................... Passed 16.23 sec; Start 361: dft-smoke; 19/24 Test #361: dft-smoke ........................ Passed 64.78 sec; Start 364: dft-jk; 20/24 Test #364: dft-jk ........................... Passed 32.41 sec; Start 366: dft-custom-dhdf; 21/24 Test #366: dft-custom-dhdf ..................***Failed 193.71 sec; 	Ne: B2PLYP_DFT....................................................PASSED; 	Ne: B2PLYP_PT2....................................................PASSED; 	Ne: B2PLYP........................................................PASSED; 	Ne: B2GPPLYP_DFT..................................................PASSED; 	Ne: B2GPPLYP_PT2..................................................PASSED; 	Ne: B2GPPLYP......................................................PASSED; 	Ne: PTPSS_DFT.....................................................PASSED; 	Ne: PTPSS_PT2.....................................................PASSED; 	Ne: PTPSS.....................................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404224014:2427,Test,Test,2427,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404224014,1,['Test'],['Test']
Testability,Closing this since the original problem seems to be resolved. . #502 addresses that there are tests missing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-258625079:94,test,tests,94,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-258625079,1,['test'],['tests']
Testability,"Commenting out an extra cmake line fixes the `coreNone` to `core.so`. Basic, but works. ```; >>> (1.3.x) ll stage/lib/psi4/; total 25704; -rwxr-xr-x. 1 psilocaluser psilocaluser 26286096 Nov 1 16:43 core.so; drwxr-xr-x. 7 psilocaluser psilocaluser 4096 Nov 1 15:58 driver; -rw-r--r--. 1 psilocaluser psilocaluser 5898 Nov 1 15:08 extras.py; -rw-r--r--. 1 psilocaluser psilocaluser 2934 Nov 1 14:50 header.py; -rw-r--r--. 1 psilocaluser psilocaluser 3693 Nov 1 15:08 __init__.py; -rw-r--r--. 1 psilocaluser psilocaluser 1144 Nov 1 16:43 metadata.py; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 16:14 __pycache__; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 15:20 tests; ```; ```; >>> (1.3.x) stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; 	SCF energy........................................................PASSED; ```; ```; >>> (1.3.x) git diff; diff --git a/psi4/src/CMakeLists.txt b/psi4/src/CMakeLists.txt; index da11518..b287b0d 100644; --- a/psi4/src/CMakeLists.txt; +++ b/psi4/src/CMakeLists.txt; @@ -134,6 +134,6 @@ message(STATUS ""Psi4 rpath: ${psi4_RPATH}""); set_target_properties(core PROPERTIES PREFIX ""${PYTHON_MODULE_PREFIX}"" # for python module; OUTPUT_NAME core; EXPORT_NAME core; - SUFFIX ""${PYTHON_MODULE_EXTENSION}"" # for python module; + #SUFFIX ""${PYTHON_MODULE_EXTENSION}"" # for python module; INSTALL_RPATH ""${psi4_RPATH}""; BUILD_WITH_INSTALL_RPATH ON); diff --git a/psi4/src/create_new_plugin.cc b/psi4/src/create_new_plugin.cc; index 3734a7b..6f2bde2 100644; --- a/psi4/src/create_new_plugin.cc; +++ b/psi4/src/create_new_plugin.cc; @@ -32,6 +32,7 @@; #include <regex>; #include <sstream>; #include <string>; +#include <iterator>; ; #include ""psi4/psi4-dec.h""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848:676,test,tests,676,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1299120848,2,['test'],['tests']
Testability,Concur. Whichever you feel meets the testing needs best.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-191036575:37,test,testing,37,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191036575,1,['test'],['testing']
Testability,"Conda pkgs are 0.2.20, so safe in that respect. Either I need to pay closer attn to omp flags in my p4 compilation against conda openblas or the missing threading flag in the conda openblas recipe is indeed fatal to psi. . Your dft-bench test was definitely run with -n, @hokru? Ctest runs individual tests single threaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390186458:238,test,test,238,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390186458,2,['test'],"['test', 'tests']"
Testability,"Confirmed fixed in #802, so this is a LibXC 3.0 issue. Adding a test case to catch this regression in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/900#issuecomment-383093887:64,test,test,64,https://psicode.org,https://github.com/psi4/psi4/issues/900#issuecomment-383093887,1,['test'],['test']
Testability,"Continuing thread from other repo, @bennybp.; - I _haven't_ removed the `restrict` def psi4-side. Go to town on this `simintlab` branch.; - I have run a simint AM5 full test suite on psi4, and it's clean.; - I have built a Mac conda package, and it builds and ""ldd""'s ok; - I haven't rebuilt the Linux conda package after you confirmed refreshed tarball, but will do that next.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-288470468:169,test,test,169,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-288470468,1,['test'],['test']
Testability,Cool. I've opened up a tracker so that the problems in the test are documented. I see no reason not to merge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-452390949:59,test,test,59,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-452390949,1,['test'],['test']
Testability,"Correct, at a minimum all tests must pass before merge. @alexheide has been working on IRC this fall, iirc. I’m sure we’ll hear more Friday.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436280034:26,test,tests,26,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436280034,1,['test'],['tests']
Testability,"Could put the below just before the exit in `.scripts/travis_run.py` if want another shot at traceback. ```; if ctest_exit_status:; with open('Testing/Temporary/LastTest.log', 'r') as ttlfile:; sys.stdout.write(ttlfile.read()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235151203:143,Test,Testing,143,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235151203,2,"['Test', 'log']","['Testing', 'log']"
Testability,"Could you add to the description how correctness was tested?. So writing densities for FCHK files should work with these changes?; So far OCC is turned off now: https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1984; (Should then probably be enabled in another PR, perhaps with test)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2072#issuecomment-749163814:53,test,tested,53,https://psicode.org,https://github.com/psi4/psi4/pull/2072#issuecomment-749163814,2,['test'],"['test', 'tested']"
Testability,Could you post the whole test output please?. And do you have the `dftd3` binary available at run time?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-997238928:25,test,test,25,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997238928,1,['test'],['test']
Testability,"Could you quickly grep for any tests that specify the `ints_tolerance` keyword, and check to see whether they still need it, please?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2139#issuecomment-804315387:31,test,tests,31,https://psicode.org,https://github.com/psi4/psi4/pull/2139#issuecomment-804315387,1,['test'],['tests']
Testability,"Could you test non-frozen-core, too? And maybe DF between fnocc & dfocc?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/966#issuecomment-381802784:10,test,test,10,https://psicode.org,https://github.com/psi4/psi4/pull/966#issuecomment-381802784,1,['test'],['test']
Testability,"Couldn't you have a configure-time check for this (in case it can be broken down to a very small testcase), same as is usual in autoconf-world?. The other option might be to use `pkg-config` and check the `Libs.private` (I guess):. ```; grep ^Libs /usr/lib/x86_64-linux-gnu/pkgconfig/lapack-openblas.pc; Libs: -L${libdir} -llapack; Libs.private: -L${libdir} -llapack -lgfortran -lpthread -lm; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455864865:97,test,testcase,97,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455864865,1,['test'],['testcase']
Testability,"Crash replicated. Almost certainly what's going on is that a fundamental library (gcc, mkl are the usual suspects) is in conflict between jupyter's `ldd` and psi4's (`envname/lib/pythonx.x/site-packages/psi4/core.so`). The usual hack is to switch around import order between psi4, numpy, matplotlib, etc, until one works. Indeed, if I install psi4 the way you listed into `p4env` and then create _another_ env into which I install jupyter (and same version of python; all from conda-forge) and then adjust the path (`sys.path.append('/path/to/p4env/lib/python3.6/site-packages/`), I can `import psi4` just fine. Next problem is that `psi4.test()` or any molecule specification just fails. This one is new to me, and 20 min hacking did not solve it. One suspicion is that regex is involved, and regex is the big reason psi4 ships with its own gcc (5.2) rather than the longstanding conda default of 4.8. But on the other hand, everything c++ is supposed to be statically linked in to avoid such troubles. So you've found a real problem, and I don't have a ready solution. The medium-term solution is to go with the new compilers that conda is rolling out (7.2). Then psi can rejoin the common gcc track of the rest of the conda ecosystem. Fortunately, I was working on that this week. Copying people who have had related problems. @dsirianni, @j3mdamas, Pascal (hit a `bad_cast` error)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345402467:639,test,test,639,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345402467,1,['test'],['test']
Testability,"Currently we're using ; `pyddx 0.6.0`; and ; `psi4 1.8.1 `. To add to this issue further, a lot of my tests with def2-TZVPPD either a) fail to converge entirely or b) hang indefinitely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-1969513731:102,test,tests,102,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-1969513731,1,['test'],['tests']
Testability,"Currently, the automated tests fail due to an automatically not resolvable merge conflict. @loriab, is only a rebase an acceptable solution for such conflicts, or could I also just merge with the newest psi4/master?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1893#issuecomment-644417698:25,test,tests,25,https://psicode.org,https://github.com/psi4/psi4/pull/1893#issuecomment-644417698,1,['test'],['tests']
Testability,D (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 85%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 87%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [ 89%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_basic PASSED [ 90%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_cc XFAIL (no AtomicInput optimization) [ 92%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_cas PASSED [ 94%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_dfmp2 PASSED [ 96%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_sapt PASSED [ 98%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4_qcschema.py::test_psi4_scfproperty PASSED [100%]. ======================================================,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:7692,test,tests,7692,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,D [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf conv ae: * occ -grd0] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd1] PASSED [ 70%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df fc: dfocc-grd0] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd1] PASSED [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17300,test,tests,17300,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,D [ 71%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd1] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df fc: dfocc-grd0] PASSED [ 72%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd1] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf df ae: dfocc-grd0] PASSED [ 73%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd1] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf df ae: dfocc-grd0] PASSED [ 74%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf df ae: dfocc-grd0] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd1] PASSED [ 75%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd fc: * dfocc-grd0] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd1] PASSED [ 76%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd1] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd fc: * dfocc-grd0] PASSED [ 77%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd1] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rhf cd ae: * dfocc-grd0] PASSED [ 78%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 uhf cd ae: * dfocc-grd0] PASSED [ 79%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_module[mp2 rohf cd ae: * dfocc-grd1] PASSED [ 79%]; ../tests/pytests/test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:17692,test,tests,17692,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,D [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:185: Not detecting module chemps2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:196: Not detecting module mp2d. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:242: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:308: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:377: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:15407,test,tests,15407,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,D-ref/fsapt.dat; > https://github.com/psi4/psi4/pull/470/files#diff-112 (30); > - _A_ tests/fsapt-diff1/fsaptD-ref/geom.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-113 (16); > - _A_ tests/fsapt-diff1/fsaptD-ref/orient.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-114 (2); > - _A_ tests/fsapt-diff1/fsaptD-ref/run.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-115 (7); > - _A_ tests/fsapt-diff1/fsaptD-ref/vis.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-116 (12); > - _A_ tests/fsapt-diff1/input.dat; > https://github.com/psi4/psi4/pull/470/files#diff-117 (71); > - _A_ tests/fsapt-diff1/output.ref; > https://github.com/psi4/psi4/pull/470/files#diff-118 (1080); > - _A_ tests/fsapt1/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-119 (3); > - _A_ tests/fsapt1/README; > https://github.com/psi4/psi4/pull/470/files#diff-120 (50); > - _A_ tests/fsapt1/fsapt-ref/Disp.dat; > https://github.com/psi4/psi4/pull/470/files#diff-121 (51); > - _A_ tests/fsapt1/fsapt-ref/Disp.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-122 (26); > - _A_ tests/fsapt1/fsapt-ref/Disp.png; > https://github.com/psi4/psi4/pull/470/files#diff-123 (0); > - _A_ tests/fsapt1/fsapt-ref/Disp.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-124 (17); > - _A_ tests/fsapt1/fsapt-ref/Elst.dat; > https://github.com/psi4/psi4/pull/470/files#diff-125 (51); > - _A_ tests/fsapt1/fsapt-ref/Elst.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-126 (26); > - _A_ tests/fsapt1/fsapt-ref/Elst.png; > https://github.com/psi4/psi4/pull/470/files#diff-127 (0); > - _A_ tests/fsapt1/fsapt-ref/Elst.pymol; > https://github.com/psi4/psi4/pull/470/files#diff-128 (17); > - _A_ tests/fsapt1/fsapt-ref/Exch.dat; > https://github.com/psi4/psi4/pull/470/files#diff-129 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.pdb; > https://github.com/psi4/psi4/pull/470/files#diff-130 (0); > - _A_ tests/fsapt1/fsapt-ref/Exch.png; > https://github.com/psi4/psi4/pull/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:14165,test,tests,14165,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['tests']
Testability,"DFT ""functional"". This could lead it; > towards ""functionals"" are just SCF + stuff where the stuff could be XC,; > PCM, -D, external potentials, etc.; >; > I recall @adabbott <https://github.com/adabbott> is willing to document; > this.; > Todos; >; > Notable points that this PR has either accomplished or will accomplish.; >; > - *Developer Interest*; > - SCF is now basically a very vanilla case of DFT; > - Adds finite difference Hessians from gradients for -D corrections; > - *User-Facing for Release Notes*; > - Enables HF-3C gradients and Hessians.; >; > Status; >; > - Ready to go; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/799; > Commit Summary; >; > - XC: Work towards the UKS XC derivative kernel; > - Driver: Removes extraneous _dft_* funcs in favor of _scf_*; > - fd: Can quite fd funcs with print=0; > - gcp: Fixes analytical Hessians with fd gcp; > - proc: workaround for post-scf methods; > - xc: removes dft_functional keyword; > - Hess: Finishes up HF3C Hessians; > - DFT: Allows arbitrary dft_functionals to be called with SCF; > - DFT: Adds dft-custom test; > - DFT: Adds a MP2 example using a DFT reference; >; > File Changes; >; > - *M* psi4/driver/driver_util.py; > <https://github.com/psi4/psi4/pull/799/files#diff-0> (8); > - *M* psi4/driver/p4util/optproc.py; > <https://github.com/psi4/psi4/pull/799/files#diff-1> (1); > - *M* psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py; > <https://github.com/psi4/psi4/pull/799/files#diff-2> (3); > - *M* psi4/driver/procrouting/dft_funcs/superfuncs.py; > <https://github.com/psi4/psi4/pull/799/files#diff-3> (124); > - *M* psi4/driver/procrouting/empirical_dispersion.py; > <https://github.com/psi4/psi4/pull/799/files#diff-4> (34); > - *M* psi4/driver/procrouting/proc.py; > <https://github.com/psi4/psi4/pull/799/files#diff-5> (231); > - *M* psi4/driver/procrouting/proc_table.py; > <https://github.com/psi4/psi4/pull/799/fil",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/799#issuecomment-330258817:1830,test,test,1830,https://psicode.org,https://github.com/psi4/psi4/pull/799#issuecomment-330258817,1,['test'],['test']
Testability,"DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:2330,TEST,TEST,2330,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['TEST'],['TEST']
Testability,"D_CUSTOM_BOOST=ON to the setup script, and compilation and linking were completed successfully! However, one of 299 tests was failed. Regards,; Alexander. > 99% tests passed, 1 tests failed out of 299; > ; > Label Time Summary:; > adc = 34.90 sec (2 tests); > autotest = 175.66 sec (26 tests); > casscf = 8.94 sec (8 tests); > cc = 402.14 sec (59 tests); > cdomp2 = 1.93 sec (2 tests); > cepa = 2.56 sec (5 tests); > ci = 0.76 sec (1 test); > cisd = 13.09 sec (7 tests); > cubeprop = 1.58 sec (1 test); > dcft = 237.84 sec (13 tests); > df = 162.69 sec (32 tests); > dfccd = 0.38 sec (1 test); > dfccd-grad = 1.05 sec (1 test); > dfccdl = 0.39 sec (1 test); > dfccsd = 0.46 sec (1 test); > dfccsd-grad = 1.40 sec (1 test); > dfccsdat = 0.82 sec (1 test); > dfccsdl = 0.48 sec (1 test); > dfccsdt = 0.63 sec (1 test); > dfmp2 = 50.96 sec (8 tests); > dfomp2 = 8.14 sec (6 tests); > dfomp2.5 = 6.34 sec (4 tests); > dfomp3 = 6.42 sec (4 tests); > dfscf = 77.65 sec (1 test); > dft = 549.70 sec (10 tests); > docs = 0.49 sec (3 tests); > fci = 18.26 sec (6 tests); > findif = 360.17 sec (5 tests); > fnocc = 12.59 sec (4 tests); > freq = 2.36 sec (1 test); > gradient = 19.53 sec (13 tests); > libefp = 4.24 sec (5 tests); > longtests = 2490.57 sec (5 tests); > mcscf = 0.79 sec (3 tests); > mints = 20.27 sec (8 tests); > misc = 125.96 sec (14 tests); > mp2 = 240.79 sec (10 tests); > ocepa = 31.90 sec (6 tests); > omp = 35.55 sec (18 tests); > opt = 911.35 sec (19 tests); > properties = 13.38 sec (3 tests); > psi = 5265.29 sec (299 tests); > psimrcc = 44.08 sec (8 tests); > pywrap = 98.47 sec (14 tests); > quicktests = 348.61 sec (87 tests); > rasci = 28.47 sec (3 tests); > sapt = 1698.31 sec (7 tests); > scf = 751.84 sec (29 tests); > shorttests = 2425.46 sec (206 tests); > sowreap = 1.22 sec (3 tests); > stability = 2.04 sec (2 tests); > tutorial = 23.38 sec (6 tests); > x2c = 0.96 sec (3 tests); > ; > Total Test time (real) = 5267.01 sec; > ; > The following tests FAILED:; > 259 - pywra",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312#issuecomment-196383757:1035,test,tests,1035,https://psicode.org,https://github.com/psi4/psi4/issues/312#issuecomment-196383757,1,['test'],['tests']
Testability,"Daniel, I have some non-converging UHF test cases for DIIS when your code; is ready to handle them. 2015-07-28 2:59 GMT-04:00 Susi Lehtola notifications@github.com:. > A good test case might be the Cadmium-imidazole complex in; > http://www.chem.duke.edu/~xqhu/geoms.tar.gz; > in the 3-21G basis which fails to converge with plain DIIS, see; > http://dx.doi.org/10.1063/1.3304922; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/155#issuecomment-125475542.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/155#issuecomment-125707354:39,test,test,39,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-125707354,2,['test'],['test']
Testability,"Dear @JonathonMisiewicz and @PeterKraus,; thank you very much for the valuable comments and the detailed and clear instructions on how to proceed.; As i have written in the initial post, the documentation and the tests were still missing at the time i set up the pull request.; I had some private conversation with @bozkaya upon which i pulled his code into my repository. It is by no means my intention to ""steal"" his code, so feel free to put my pull request on hold until he gives the ""go"" or merge in his repository first.; @PeterKraus does this title better match your expectations?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2354#issuecomment-975787765:213,test,tests,213,https://psicode.org,https://github.com/psi4/psi4/pull/2354#issuecomment-975787765,2,['test'],['tests']
Testability,"Dear Ryan Richard,. Thank you very much for your quick and helpful answer! I have successfully compiled psi4, version 0.3 without mpi. It works well for the easiest test case of water SCF. Best regards,; Michael Medvedev",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/201#issuecomment-169849927:165,test,test,165,https://psicode.org,https://github.com/psi4/psi4/issues/201#issuecomment-169849927,1,['test'],['test']
Testability,"Dear Sebastian, . I really appreciate your hints and helps, but i have to say that after some days of intense testing and checking, it seems to me that unfortunately DMRG is difficult to apply on large molecules (400 atoms) unless full 2-electron integral calculation is avoided. Furthermore i observe that CHEMPS2 becomes very slow once you choose a better basis set (cc-pvtz vs cc-pvdz) . ""The cost reduction is achieved by not performing the total O(n^5) two-electron integral rotation."". How can i achieve this ? By following those hints in your previous answers ? ; I think, avoiding two-electron integral rotations is some thing which should be done in PSI4 rather than in the fcidump plugin modification. Best wishes; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105440640:110,test,testing,110,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105440640,1,['test'],['testing']
Testability,"Dear Sebastian, ; Thanks a lot for the detailed answer, but the problem with the FCIDUMP file is that i have no idea; how to tell PSI4 to give the final FCIDUMP after the HF calculation for a desired active space, as i see from the test examples provided in CHEMPS2 , it gives automatically a FCIDUMP for 28 orbitals and all 14 electrons of N2 molecule, but i would like to take into account only 8 electrons in 8 orbitals, for instance. . How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html ; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?. This is for example done in molpro by :; {fci,core, 18,occ, 24; dump; }; But unfortunately in molpro it performs a full 2 electron calculation for all basis functions before giving the fcidump, some thing that i would like very much to avoid. . Bests; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105182036:232,test,test,232,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105182036,1,['test'],['test']
Testability,"Dear all, I had another bash at this. It's rather a large amount of changes, but here's the current workflow:. - functionals get defined in `dict_*.py`, including aliases for the base names (M06-2X = M062X, wPBE = LC-WPBE = LCWPBE etc.); - special cases of dispersion-corrected functionals are defined there (B97-D and friends, OPBE-D, HF3C etc.); - all this stuff gets combined into a single dict `dict_functionals` in `dict_builder.py`.; - aliases for dispersion names (D2 = D = D2P4) are defined as `dispersion_names` (VV10 should go here); - we loop through the proto-functionals in `dict_functionals`, figure out all base functional aliases, add them into the final dict `functionals`; - if the base functional is *not* dispersion corrected, we look through `psi4.driver.qcdb.dashparam.dashcoeff` for a matching dispersion correction; we match all base aliases (so M062X-D3 and M06-2X-D3ZERO are equivalent); - the newly generated dispersion corrected functional gets added (incl. aliases); - the `build_superfunctional` function in `superfuncs.py` now has to find the requested functional in `dict_builder.functionals`, if there is a match, we build the `(sup, dispersion)` tuple; - the `disp_type` assigned in `proc.py` is a `dict()`, so we don't need to match against length; - we pass this onto an `EmpiricalDispersion()` constructor. The handling of the latter two points is not quite figured out yet. I'm sure it could be simplified. As for tests, compared to `master`, the following fail:; ```; OPBE-D: wrong dispersion; B97-D: wrong dispersion (B97-D2, -D3 and other variants work); OTPSS-D: wrong dispersion; HF3C, HF3C-D3BJ: wrong dispersion; DSD-* and co: expected to fail; WB97X-D3 and -D3ZERO: expected to fail; ```; I will try to figure those out later, but I'm assuming it is just the dispersion component that is misassigned.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370175873:1452,test,tests,1452,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370175873,2,['test'],['tests']
Testability,"Default switched to `adcc`, if available. Old test cases for built-in code still use the built-in code. Fixed a bug where it was impossible to _select_ the built-in code. Docs updated accordingly. @loriab @maxscheurer @mfherbst",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700:46,test,test,46,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1031805700,1,['test'],['test']
Testability,Definitely a) I think. One requirement that we discussed early on was the ability to do something complex mixing CBS and levels of theory per N-body computation (for example). Having the logic centrally would make this easier. The pydantic solution seems good as well. The `no-extras` is quite useful in complex system to help keep it understandable. Working vs future tweak able is always hard.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-551078168:187,log,logic,187,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-551078168,1,['log'],['logic']
Testability,"Definitely in `tests/`, not `samples/`? if the `ocepa*` tests are in objdir, it's because you'd have to rename inside the `tests/formerly-ocepa/CMakeLists.txt` add_test fn.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909#issuecomment-634869994:15,test,tests,15,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-634869994,3,['test'],['tests']
Testability,"Definitely. The only roadblock was in handling all of the printing. I used `be_quiet()` and `reopen_outfile()`, which fail during testing in the windows build. Interestingly, these functions aren't used in the code elsewhere, so they seem not to be windows-safe at all. I think a workaround shouldn't be too hard, but suggestions welcome. The printing of each atomic calculation should never be that excessive (since its only unique elements/basis), so simple solution is to just print all of the atomic outputs",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-815296254:130,test,testing,130,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-815296254,2,['test'],['testing']
Testability,"Details about how the integrals were computed should be the province of the JK object, not the HF wavefunction, so I disagree with creating this new variable as described. Can we instead have `computed_shells_per_iter_` on the JK object and query the JK object, after the HF, for test purposes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1112143902:280,test,test,280,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1112143902,1,['test'],['test']
Testability,"Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++; -- Check for working CXX compiler: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting (unspecified) option BUILD_SHARED_LIBS: OFF; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; -- Setting (unspecified) option ENABLE_PLUGIN_TESTING: OFF; -- Setting (unspecified) option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-xHost] - Failed; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting (unspecified) option ENABLE_CODE_COVERAGE: OFF; -- Setting (unspecified) option ENABLE_BOUNDS_CHECK: OFF; -- Setting (unspecified) option ENABLE_ASAN: OFF; -- Setting (unspecified) option ENABLE_TSAN: OFF; -- Setting (unspecified) option ENABLE_UBSAN: OFF; -- Setting (unspecified) option MAX_AM_ERI: 5; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /opt/local/bin/python (found suitable version ""3.6.1"", minimum required is ""2.7"") ; -- Found PythonLibs: /opt/local/Library/Frameworks/Python.framework/Versions/3.6/lib/libpython3.6m.dylib; -- Found Python 3.6:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:1773,Test,Test,1773,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,4,['Test'],['Test']
Testability,"Did plugin makefile writing ever work upon testing (https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/psi4/src/bin/psi4_main/create_new_plugin.cc#L137-L141)? I'm getting the below in the Makefile from a `psi4 --new-plugin`. I'll fix it, just trying to determine if it's a little fix or a ditch-templating-for-python-sooner-rather-than-later fix. ```; # Flags that were used to compile Psi4.; CXX = PLUGIN_CXX; CXXDEFS = PLUGIN_DEFINES; CXXFLAGS = PLUGIN_FLAGS; LDFLAGS = PLUGIN_LDFLAGS; INCLUDES = PLUGIN_INCLUDES; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235478566:43,test,testing,43,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235478566,1,['test'],['testing']
Testability,"Did you happen to confirm `psi4 --test` is still ok, @robertodr? That runs PCM in PsiAPI mode.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-335224403:34,test,test,34,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-335224403,1,['test'],['test']
Testability,"Did you run `make docs`? We've been discouraging users from building the docs themselves, as they require several extra dependencies and we have them hosted (http://sirius.chem.vt.edu/psi4manual/latest/index.html). However, the developers do need to be able to test the docs build, hence the Makefile target is still there. We do want to continue shipping samples in the tarball, as the documentation links to them on github. We can, however, be more careful about making sure they're up to date before packing the tarball. Also, we can drop git tracking of SUMMARY, since it's prone to reshuffling its contents and may show up as modified after a docs build. Would that help?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14#issuecomment-22982958:261,test,test,261,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22982958,1,['test'],['test']
Testability,"Disclaimer that I have a PR that _also_ rewrites orbital reading/writing to use wavefunction serialization. My PR will be part of a larger change of the orbital reading tech to account for loss of symmetry (which also involves accounting for axis permutations), so I'm fine with putting the wavefunction serialization change in a non-feature PR. If it matters, my code is passing intense field tests, but I'd rather not make the PR until I have the bugs ironed out. I know for sure that one bug is due to a libmints bug that @jturney is investigating. My guess is that is the last bug, but famous last words.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446#issuecomment-449607046:394,test,tests,394,https://psicode.org,https://github.com/psi4/psi4/pull/1446#issuecomment-449607046,1,['test'],['tests']
Testability,Disclaimer: There's also a known bug in 1.4rc1 and 1.4rc2 gradients for density-fitted _correlated_ methods. DF-SCF is unaffected. That one slipped through the test suite because we run it in serial (but this is a reminder that we should it set up to automatically run in parallel...) This is fixed in the current developer version.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211#issuecomment-869288050:160,test,test,160,https://psicode.org,https://github.com/psi4/psi4/issues/2211#issuecomment-869288050,1,['test'],['test']
Testability,Do the sapt_ecp and dfmp2_ecp test reference values need updating?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167#issuecomment-2120724669:30,test,test,30,https://psicode.org,https://github.com/psi4/psi4/pull/3167#issuecomment-2120724669,1,['test'],['test']
Testability,"Do we need to break down and insist that people specify the python to use; via some kind of flag? It seems that cmake picking up the wrong one is a; problem that just won't go away. And/or perhaps a little test script that; might check the settings and verify that they will work with the user's; PATH?. At the very least, we do certainly need updated documentation on the latest; iteration of the build system, if we don't have it yet. On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; wrote:. > Glad rpath behavior is making more sense, @jgonthier; > https://github.com/jgonthier . Unless all dependencies are isolated; > behind one environment (conda strategy) or each dependency is isolated in; > its own environment (a programming-using-conda strategy, but hard when; > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > path. I regularly have to edit mine to get the right HDF5 linked. As I; > don't know a winning strategy, I think we can't guarantee the built exe/lib; > will run, only that the conda ones will. This does show we need better; > notes on the matter so people can diagnose and correct.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252927823:206,test,test,206,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252927823,1,['test'],['test']
Testability,"Do you happen to know if there's a lit citation for extrapolating the def2 basis sets or if they need a different extrapolation formula? I know Orca does def2 extrapolations; I've just never looked up how or what procedure they use. I'd defer the -PP fallbacks from this PR. That means changing the basis set compositing which is a huge pain. I'm hoping the MolSSI basisset project can be API-accessed to cover this (very sensible) case. Hand-pieced, other program, or `energy(cbs, ...)` call with calculator spot-checks will do fine for tests. If def2's need their own extrapolation formula, tests should probably check that those default correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381265832:538,test,tests,538,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381265832,2,['test'],['tests']
Testability,"Docs took way longer than expected, but that part is done. Now to give tests a sweep.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1130254831:71,test,tests,71,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1130254831,1,['test'],['tests']
Testability,"Does the overall energy look sensible when you've got the additional diffuse functions? . I occasionally find that def2-TZVPD converges to some odd state with strange properties (energy, dipole etc). I'd put it down to some form of numerical difficulties as I could usually use a mixed basis of def2-TZVP on some atoms and def2-TZVPD on others and get logical values (identity of which atoms to change was system dependent, but often H is the main culprit).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-1954490698:352,log,logical,352,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-1954490698,1,['log'],['logical']
Testability,"Doesn't really look like a bug. Either we up the convergence criterion or; we check only 5 decimals. On Tue, Mar 1, 2016 at 5:14 PM, Lori A. Burns notifications@github.com; wrote:. > Sorry @avcopan https://github.com/avcopan, I saw all the @IRCs in that; > gist above and thought opt7 was an unlabeled IRC. But that was for; > opt-irc-2, which should be fixed now.; > ; > opt7 fails on a few systems (; > https://testboard.org/cdash/testSummary.php?project=3&name=opt7&date=2016-03-01).; > This (https://testboard.org/cdash/testDetails.php?test=7810317&build=63640); > looks like the most coherent error message (also copied below), if; > @psi-rking https://github.com/psi-rking would like to examine it.; > ; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-H fixed to 0.95, energy........PASSED; > Optimizer: Optimization complete!; > Int. Coord. RHF opt of HOOH with O-O-H fixed to 105, energy: computed value (-150.7861731) does not match (-150.7861769) to 6 decimal places.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/253#issuecomment-190956405.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-191034927:413,test,testboard,413,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-191034927,5,['test'],"['test', 'testDetails', 'testSummary', 'testboard']"
Testability,"Doesn't seem to be working too great; I get on my machine; ```; $ psi4 -n 8 ; 	SAPT0 energy with Ca2+, without ECP: computed value (-0.095615678) does not match (-0.095616042) to 8 digits.; Traceback (most recent call last):; File ""/home/work/psi4/install.susi/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/home/work/psi4/install.susi/lib/psi4/driver/p4util/util.py"", line 230, in compare_values; raise TestComparisonError(message). TestComparisonError: 	SAPT0 energy with Ca2+, without ECP: computed value (-0.095615678) does not match (-0.095616042) to 8 digits.; ```; and the result is the same regardless of the guess...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-455380290:452,Test,TestComparisonError,452,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-455380290,2,['Test'],['TestComparisonError']
Testability,"Doesnt look like there is a function that lays around. Prototype code below:. ```; std::vector <std::tuple<double, int, int>> order;; for (int h = 0; h < nirrep_; h++) {; for (int i = 0; i < (int) positions[h].size(); i++) {; order.push_back(std::tuple<double, int, int>(epsilon->get(h, positions[h][i]), i, h));; }; }. std::sort(order.begin(), order.end(), std::less < std::tuple < double, int, int > > ());; ```. Can you also add a test for this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301102993:434,test,test,434,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301102993,1,['test'],['test']
Testability,"Don't be alarmed if this fails tests. I'm still working out the correct sequence of `core.clean()` and `set_specific_retention` so nothing breaks. I'm currently tracking down a bug with the `full_hess_every` keyword set to something not zero, which slipped through test coverage. If it wasn't introduced by this PR, I'll post more details about it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-430832599:31,test,tests,31,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-430832599,2,['test'],"['test', 'tests']"
Testability,Done. I simplified the test case further.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1999#issuecomment-683300840:23,test,test,23,https://psicode.org,https://github.com/psi4/psi4/pull/1999#issuecomment-683300840,2,['test'],['test']
Testability,ED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enabl...) [ 50%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dftd3 PASSED [ 52%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to e...) [ 54%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_pcmsolver SKIPPED (Not detecting module pcmsolver. Install package if necessar...) [ 56%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[libint2] PASSED [ 58%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_integrals[simint] SKIPPED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting modu,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:5712,test,tests,5712,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,ED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED (Not detecting module erd. Install package if necessary to enable tests.) [ 18%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_simint SKIPPED (Not detecting module simint. Install package if necessary to enable tests.) [ 20%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 21%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED (Not detecting module cfour. Install package if necessary to enable tests.) [ 23%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:2148,test,tests,2148,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,ED (Not detecting module simint. Install package if nec...) [ 60%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_json PASSED [ 61%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_v2rdm_casscf SKIPPED (Not detecting module v2rdm_casscf. Install package if ne...) [ 63%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_grimme_3c PASSED [ 65%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable ...) [ 67%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to e...) [ 69%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enabl...) [ 70%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary ...) [ 72%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enabl...) [ 74%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_mdi.py::test_mdi_water SKIPPED (Not detecting module mdi. Install package if necessary to enable tests.) [ 76%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_option.py::test_spacious_option PASSED [ 78%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED [ 80%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED [ 81%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 83%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 85%]; psi4conda/envs/psi4env/lib/si,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:6786,test,tests,6786,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,ED (Not detecting module v2rdm_casscf. Install package if necessary t...) [ 25%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED (Not detecting module gpu_dfcc. Install package if necessary to enable...) [ 27%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not det,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:3709,test,tests,3709,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,ED [ 29%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dkh SKIPPED (Not detecting module dkh. Install package if necessary to enable tests.) [ 30%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_snsmp2 SKIPPED (Not detecting module snsmp2. Install package if necessary to enable tests.) [ 32%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 34%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_resp_2 SKIPPED (Not detecting module resp. Install package if necessary to enable tests.) [ 36%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psi4fockci SKIPPED (Not detecting module fockci. Install package if necessary to enable...) [ 38%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cppe SKIPPED (Not detecting module cppe. Install package if necessary to enable tests.) [ 40%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_cct3 SKIPPED (Not detecting module cct3. Install package if necessary to enable tests.) [ 41%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_psixas SKIPPED (Not detecting module psixas. Install package if necessary to enable tests.) [ 43%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enabl...) [ 45%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_ipi_broker1 SKIPPED (Not detecting module ipi. Install package if necessary to...) [ 47%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to...) [ 49%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons_qcschema.py::test_mp2d SKIPPED (Not detect,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:4051,test,tests,4051,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,ED [ 54%]; 2018-12-05T15:54:21.2503496Z ..\lib\psi4\tests\test_addons.py::test_grimme_3c SKIPPED [ 59%]; 2018-12-05T15:54:21.2517677Z ..\lib\psi4\tests\test_addons.py::test_dkh SKIPPED [ 63%]; 2018-12-05T15:54:21.2531717Z ..\lib\psi4\tests\test_addons.py::test_snsmp2 SKIPPED [ 68%]; 2018-12-05T15:54:21.2547307Z ..\lib\psi4\tests\test_addons.py::test_resp SKIPPED [ 72%]; 2018-12-05T15:54:23.0849642Z ..\lib\psi4\tests\test_psi4.py::test_psi4_basic PASSED [ 77%]; 2018-12-05T15:54:34.9658940Z ..\lib\psi4\tests\test_psi4.py::test_psi4_cc PASSED [ 81%]; 2018-12-05T15:54:39.2671697Z ..\lib\psi4\tests\test_psi4.py::test_psi4_cas PASSED [ 86%]; 2018-12-05T15:55:14.7785164Z ..\lib\psi4\tests\test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; 2018-12-05T15:55:32.0037962Z ..\lib\psi4\tests\test_psi4.py::test_psi4_sapt PASSED [ 95%]; 2018-12-05T15:55:39.8034520Z ..\lib\psi4\tests\test_psi4.py::test_psi4_scfproperty PASSED [100%]; 2018-12-05T15:55:39.8037151Z =========================== short test summary info ===========================; 2018-12-05T15:55:39.8038147Z SKIP [1] lib\psi4\tests\test_addons.py:43: Psi4 not compiled with gdma. Rebuild with -DENABLE_gdma; 2018-12-05T15:55:39.8039347Z SKIP [1] lib\psi4\tests\test_addons.py:100: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8040544Z SKIP [1] lib\psi4\tests\test_addons.py:125: Psi4 not compiled with CheMPS2. Rebuild with -DENABLE_CheMPS2; 2018-12-05T15:55:39.8041756Z SKIP [1] lib\psi4\tests\test_addons.py:173: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; 2018-12-05T15:55:39.8042653Z SKIP [1] lib\psi4\tests\test_addons.py:333: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; 2018-12-05T15:55:39.8043475Z SKIP [1] lib\psi4\tests\test_addons.py:392: Psi4 not compiled with PCMSolver. Rebuild with -DENABLE_PCMSolver; 2018-12-05T15:55:39.8044251Z SKIP [1] lib\psi4\tests\test_addons.py:634: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; 2018-12-05T15:55:39.804,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647:2609,test,test,2609,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-444539647,1,['test'],['test']
Testability,"Eq numbers removed, rebased, and fully tested locally. Ready for review again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2670#issuecomment-1244156469:39,test,tested,39,https://psicode.org,https://github.com/psi4/psi4/pull/2670#issuecomment-1244156469,1,['test'],['tested']
Testability,"Even when using all the parameters suggested by @PhillCli in a test sript, the calculation does not complete. The SCF part is executed, but it seems that there is a problem when building the basis set for the SAPT calculation. Calculation stops at this point. ![Screenshot from 2023-06-27 09-54-28](https://github.com/psi4/psi4/assets/17604953/24f20f18-3708-46dc-b80b-681a98083799). Displaying the following message in the executation terminal. ![Screenshot from 2023-06-27 09-57-24](https://github.com/psi4/psi4/assets/17604953/6fdd54b8-3210-4b4e-a000-ed640f187e7c). The script I am using for the test . ```python; import psi4; import time; psi4.core.set_output_file('output.dat', False). he2_geometry = """"""; He; --; He 1 {0}; """""". Rvals = [2.5, 3.0,]. start = time.time(); psi4.set_num_threads(4); psi4.set_memory(""30000 MB""). psi4.set_options(; {; ""reference"": ""uhf"",; ""scf_type"": ""direct"",; ""df_basis_scf"": ""def2-universal-JKFIT"",; ""df_basis_sapt"": ""aug-cc-pv6z-ri"",; ""basis_guess"": ""aug-cc-pvdz"",; ""basis"": ""d-aug-cc-pv5z"",; ""guess"": ""sad"",; ""maxiter"": 300,; ""e_convergence"": 1e-10,; ""d_convergence"": 1e-10,; }; ). ecp = {}. for R in Rvals:; he2 = psi4.geometry(he2_geometry.format(R)); ecp[R] = psi4.energy('sapt0', molecule=he2). # Prints to screen; print(""Interaction Energies\n\n""); print("" R E_int ""); print(""---------------------------------------------------------""); for R in Rvals:; e = ecp[R] ; print("" {:3.1f} {:1.6f}"".format(R, e)); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172:63,test,test,63,https://psicode.org,https://github.com/psi4/psi4/issues/2989#issuecomment-1609461172,2,['test'],['test']
Testability,Everything is prone to breaking is PsiAPI mode because there's none of the saving new instance of psi4 between calculations. Try commenting out every test besides the PCM in `tests/pytest/test_addons.py` and see if that's ok? Note that `psi4 --test` is just `pytest -rs -v` behind the scenes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-335230894:150,test,test,150,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-335230894,3,['test'],"['test', 'tests']"
Testability,Everything looks good to me for the SAPT output. Do you think we need to update the SAPT tests reference output files so that they look the same than the new output format ?; (And the example in the SAPT doc ?); It's only minor changes so we may just leave these alone.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/330#issuecomment-205082377:89,test,tests,89,https://psicode.org,https://github.com/psi4/psi4/pull/330#issuecomment-205082377,1,['test'],['tests']
Testability,"Everything tests clean except the ft97 on neon atom at the end of dft-custom-gga, which I can't persuade to converge with normal SCF devices, even with docc set. below is behavior of p4 master + xc 4.3.4 on the left and this PR + xc 5.1hotfix on the right. ""LibXC Density Thresholds"" is very different, and SCF convergence behavior is awful. Do I need to tighten libxc density thresholds from psi4? Or could there be a problem with the fctl?. ```; 												 >; Scratch directory: /tmp/										Scratch directory: /tmp/. *** tstart() called on psinet										*** tstart() called on psinet; *** at Tue Jan 5 23:59:27 2021									 |	*** at Wed Jan 6 00:14:26 2021. => Loading Basis Set <=										 => Loading Basis Set <=. Name: CC-PVDZ											 Name: CC-PVDZ; Role: ORBITAL											 Role: ORBITAL; Keyword: BASIS											 Keyword: BASIS; atoms 1 entry NE line 258 file /psi/gits/hrw-tag/objdir39/stage/share/psi4/basis/c |	 atoms 1 entry NE line 258 file /psi/gits/hrw-demo/objdir39/stage/share/psi4/basis/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; RKS Reference								 RKS Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <==											 ==> Geometry <==. Molecular point group: d2h										 Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:						 Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass 		 Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------		 ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:11,test,tests,11,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['test'],['tests']
Testability,Everything works fine for me. The only issue I noticed in my small series of test jobs was that `nan` is printed for the user and system time. I installed via:; `conda create -n psi4env python=3.7`; `conda activate psi4env`; `conda install -c raimis -c psi4 -c conda-forge psi4=1.3.2`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-499999284:77,test,test,77,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-499999284,1,['test'],['test']
Testability,"Example attached. Thanks,. -Trent. On Wed, Apr 20, 2016 at 3:41 PM, Trent Parker <; trent.michael.parker@gmail.com> wrote:. > .Any constrained optimization example where ""no_com"" and/or ""no_reorient""; > isn't in the molecule input section and the geometry isn't in the standard; > nuclear orientation. The job won't fail, but the constrained coordinates; > will not be identical to their original values in the final output.; > ; > -Trent; > ; > On Wed, Apr 20, 2016 at 3:31 PM, Daniel Smith notifications@github.com; > wrote:; > ; > > @tparker36 https://github.com/tparker36 Can I get test case where this; > > dies horribly?; > > ; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/179#issuecomment-212570814; > ; > ## ; > ; > Trent Parker; > Sherrill Research Group; > Georgia Institute of Technology; > ; > Center for Computational Molecular Science and Technology; > School of Chemistry and Biochemistry; > 4201 Molecular Science and Engineering Building; > ; > 901 Atlantic Drive NW; > Atlanta, GA 30332. ## . Trent Parker; Sherrill Research Group; Georgia Institute of Technology. Center for Computational Molecular Science and Technology; School of Chemistry and Biochemistry; 4201 Molecular Science and Engineering Building. 901 Atlantic Drive NW; Atlanta, GA 30332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/179#issuecomment-212579530:586,test,test,586,https://psicode.org,https://github.com/psi4/psi4/issues/179#issuecomment-212579530,1,['test'],['test']
Testability,"Excellent! I'll hang tight. In the mean time, I can just use finite differences for that test, as we used to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-232780828:89,test,test,89,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232780828,1,['test'],['test']
Testability,"Excellent, I'll mark that one off. And I think I know how to test for the last one. Thanks, @jgonthier .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/285#issuecomment-190756986:61,test,test,61,https://psicode.org,https://github.com/psi4/psi4/issues/285#issuecomment-190756986,1,['test'],['test']
Testability,"Excellent, thanks for your tremendous effort.; Given that my test cases were not modified and still seem to work, i do not have any complaints. > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed.; No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089:61,test,test,61,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089,1,['test'],['test']
Testability,"Except for compiling docs, the `Inc. fock build` naming issue referenced earlier, and this following issue, this PR should be good to go:. Select pytests from `tests/pytests/test_standard_suite.py::test_mp2_hessian_module` are NOT passing. Why is this the case? Is this to be expected?. All CTests passed except sapt7 and scf-cholesky-basis. The latter is fixed when envvar `MKL_CBWR=AVX`.; All pytests passed EXCEPT most of the mp2 Hessian tests (70% failure rate).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946324182:160,test,tests,160,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946324182,2,['test'],['tests']
Testability,"Except for some stray bits (sow/reap, databases, the ancillary scripts directory), Psi4 is now python3 compatible (largely thanks to @dgasmith). In fact, the majority of our CI testing is now with py3, so it should stay that way. There is now a py3 conda package for Linux uploaded to anaconda.org. Niceties of packaging and channels aren't in place yet, but a full working psi4/py3 conda environment (named `p4py35`) can be obtained with the below. Please report any problems. `conda create -n p4py35 python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`. **Update 15 Dec 2016** If your gcc from the above balks at ""Hello, world"", add `isl=0.12.2 mpc=1.0.1 mpfr=3.1.2` after `dftd3`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-260094686:177,test,testing,177,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-260094686,2,['test'],"['test', 'testing']"
Testability,"Exporting `SCFDeriv::gradients_` might be a useful feature to decompose the gradient (and force) contributions on the QM atoms, but for the test on `gradient_on_charges`, I have opted to use existing machinery in Psi4 in a new test directory, `extern4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087#issuecomment-1836755775:140,test,test,140,https://psicode.org,https://github.com/psi4/psi4/pull/3087#issuecomment-1836755775,2,['test'],['test']
Testability,FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; --,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4801,Test,Test,4801,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Test'],['Test']
Testability,FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP C flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [ ]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-fopenmp=libomp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [/openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-Qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; --,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316450754:4760,Test,Test,4760,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316450754,1,['Test'],['Test']
Testability,"FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPACK will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found LAPACK: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so); -- No Doxygen, no docs.; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Adding test cases: Psi4; -- Adding test cases: Psi4 + libefp; -- Configuring done; -- Generating done; -- Build files have been written to: /home/LUCA/psi-master_18_11_2016/psi4/bii",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:4309,test,test,4309,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,2,['test'],['test']
Testability,"FT97 log files attached. But I see you've already got an issue going at https://gitlab.com/libxc/libxc/-/issues/275; [ft97_xc434.txt](https://github.com/psi4/psi4/files/5776661/ft97_xc434.txt); [ft97_xc510.txt](https://github.com/psi4/psi4/files/5776662/ft97_xc510.txt). > No. Use void xc_func_set_ext_params_name(xc_func_type *p, const char *name, double par); i.e. Got it. Works cleanly. Will work on ""new"" fctls.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755374410:5,log,log,5,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755374410,1,['log'],['log']
Testability,"FWIW B3LYP/def2-SVP converges in 24 iterations from the default SAD guess, yielding S^2 = 0.7528. PBE/def2-SVP also converges in 25 iterations to S^2 = 0.7538. . The weird convergence is a combination of the non-physical guess which lacks core electrons, combined with the unnecessary use of the second-order scheme which appears to have converged to an extremely high-lying saddle point: the log file on the forum has a B3LYP/def2-SVP energy of -1803.88405461301363 after 77 SOKS iterations, while I get -1820.53977771750078, which is SEVENTEEN HARTREE lower....",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-664938620:393,log,log,393,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-664938620,1,['log'],['log']
Testability,FYI this is awaiting qcengine v0.18.0 for tests herein to pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081#issuecomment-773642206:42,test,tests,42,https://psicode.org,https://github.com/psi4/psi4/pull/2081#issuecomment-773642206,1,['test'],['tests']
Testability,"FYI, new set of conda packages today. These handle the Linux ""hello world"" bug internally. It's recommended _not_ to update from a circa 1.0 psi4 (e.g., 1.0.54) with `conda update psi4` but to create a new environment for them as follows. If you already have a pre 1.1 psi4 installed, `conda update psi4 -c psi4/label/test -c psi4` should do the trick. * Linux, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Linux, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/test -c psi4`; * Mac, py27: `conda create -n p4env python=2.7 psi4 numpy dftd3 -c psi4/label/clang -c psi4`; * Mac, py35: `conda create -n p4env python=3.5 psi4 numpy dftd3 -c psi4/label/clang -c psi4`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-272589229:318,test,test,318,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-272589229,3,['test'],['test']
Testability,"Filip, I think you're right that the orbital energies are the problem, and I think the root of the problem is that ROHF by default does not semicanonicalize the orbitals. . I ran a simple test with a single triplet helium atom, and the orbital energies from ROHF match the UHF ones if I do `wfn.semicanonicalize()` but don't match if I don't do it. I am quite sure that USAPT requires canonical orbitals, and maybe the USAPT driver should perform semicanonicalization for a ROHF reference. I wonder if the SAPT(ROHF) code was always like this or if the semicanonicalization disappeared somewhere along the way. @jgonthier might know more about this. With the current version, the Psi4NumPy `SAPT0_ROHF.py` example (which is two triplet oxygen molecules) gives different second-order energies if semicanonicalization is performed, and I think the result without semicanonicalizing is wrong for both Psi4 and Psi4NumPy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975#issuecomment-673778148:188,test,test,188,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-673778148,2,['test'],['test']
Testability,"Finally, I have built an experimental *Psi4* package for *Windows*: https://anaconda.org/raimis/psi4. Limitations/issues:; - Minimal functionality: no addons and plugins; - Slow: not optimized and with debugging instrumentation; - ~~Can be used as a *Python* package only (i.e. `psi4` command is not working)~~ -- #1420; - ~~`PSI_SCRATCH` has to be set, otherwise it will crash~~ -- #1413; - A few tests are failing:; - ~~`cbs-parser`~~ -- #1442; - ~~`ci-property`~~ -- #1440; - ~~`cc46`~~ -- #1422; - ~~`cc47`~~ -- #1422; - ~~`cc53`~~ -- #1438; - ~~`fci-tdm`~~ -- #1441; - ~~`fci-tdm-2`~~ -- #1441; - ~~`psimrcc-fd-freq2`~~ -- #1427; - ~~`psithon2`~~ -- #1410. If you are a *Windows* user, could you try and give feed back, please:; ```; > conda install -c raimis -c psi4 -c conda-forge psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-445293936:398,test,tests,398,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-445293936,1,['test'],['tests']
Testability,"First step is it'll replace `psi4/label/dev`. The timing of a new official release and hence `psi4/label/main` is beyond my control (that is, effectively I can veto but not assert). But absolutely, the plan is for `gcc_linux-64`-built Psi to trickle ever upward and replace the `gcc-5` presently distributed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-347223179:173,assert,assert,173,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-347223179,1,['assert'],['assert']
Testability,"Firstly, wow, nice doing this benchmark. @andysim wrote:; > The direct range-separated code worked fine, confirming that the derivative integrals were correct. You are talking about the complete direct RSF gradient code? because it has also been disabled in the driver. The manual only ever explicitly told that the DF gradient code is not working, i believe. I actually asked about this once in the forum: http://forum.psicode.org/t/lrc-dft-gradients-time-plan/140/4 ; Basically my test back then caused me to suggest the route (direct and not DF gradients) @raimis is trying out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351404019:30,benchmark,benchmark,30,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351404019,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Fix looks good, thanks!. For the test, could you edit it to trigger your original problem and test the solution? I think it's still like extern2 at the moment. > In principle mol.set_nuclear_charge(0,7.05) should work to modify Z. Yeah, I tried for a couple hours once to see about setting fractional nuclear charges in Molecule that made a difference to a calculation; no luck.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1993#issuecomment-683299239:33,test,test,33,https://psicode.org,https://github.com/psi4/psi4/pull/1993#issuecomment-683299239,2,['test'],['test']
Testability,"Fixed by 6f6d3aa1d039e4501bc5c5dc4190da1758e1c889 though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for energy() was a bad idea (by me) a few years ago (except for ""hf"" itself). Nevertheless, as this ticket points out, having defined these names only for energy() confounds the driver logic. These convenience names are now in place for gradient() and property(). I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(), prop() if others concur with my present assessment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-109846967:307,log,logic,307,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-109846967,1,['log'],['logic']
Testability,"Fixed the link in the original comment, also adding it here: https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=4577f1f3-bc89-5040-5cf1-0f1c10ea6889&l=4843",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583072475:126,log,logs,126,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583072475,1,['log'],['logs']
Testability,"Fixes look so simple in retrospect :-). Could you take one of your examples and make a test case, please? Not parsing the NBO output and checking the numbers or anything, just running the `NBOWriter` (we've no examples at present) and getting a `reference.dat` of the compliant psi nbo output and a copy of the qchem nbo output into the repository.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1602#issuecomment-484646322:87,test,test,87,https://psicode.org,https://github.com/psi4/psi4/pull/1602#issuecomment-484646322,2,['test'],['test']
Testability,"For context, the last commit is the one that fixes the bug. It is one line of code. The rest is all just cleanup. Again, should I add a test for this? It's difficult for me to think of what an appropriate test would be.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1379#issuecomment-454926494:136,test,test,136,https://psicode.org,https://github.com/psi4/psi4/pull/1379#issuecomment-454926494,2,['test'],['test']
Testability,"For dashparams I think it makes sense to leave these in place and we would build new dictionaries on the fly. For example B3LYP would look like the following:. ```python; funcs = {...} # All of the normal functionals; for dash in dash_params:; tmp = copy.deepcopy(funcs[""B3LYP""]); tmp[""dispersion""] = (""D3"", ""Zero"", param1, param2, ...); tmp[""name""] = ""B3LYP-D3""; funcs[tmp[""name""]] = tmp; ```. Special D3 functionals could then be built by hand. This would also make all of the if logic in the building a functional simpler I think. > The spec could (some might say should) simply be ""use LibXC defaults, unless overridden"". I would prefer if we would just specify something like ""use_xc_params"" to make it clear that something like ""HYB_GGA_X_MN15"" has parameters that we can pull from to help setup the functional, but ""GGA_C_PBE"" does not. In this way something like:. ```; junk = {; ""x_functionals"": {{""HYB_MGGA_X_MN15"": {""use_xc_params"": True}, ""HYB_MGGA_M06"": {}}; ...; }; ```. would still work out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/920#issuecomment-366219242:482,log,logic,482,https://psicode.org,https://github.com/psi4/psi4/issues/920#issuecomment-366219242,2,['log'],['logic']
Testability,"For every duplicate test, I want to know where the duplicate is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2655#issuecomment-1203146735:20,test,test,20,https://psicode.org,https://github.com/psi4/psi4/pull/2655#issuecomment-1203146735,1,['test'],['test']
Testability,"For final release:. ### Repo/GH state. * follow tagging procedure; * before reengaing the ""include admin"" button, push a branch at the tag commit (not the records commit). ```; >>> git log --online | head -2; 45315cb Records tag for v1.3; 20e5c7e v1.3. >>> git checkout 20e5c7e; >>> git checkout -b 1.3.x; Switched to a new branch '1.3.x'; >>> git push upstream 1.3.x; ```. * set up new branch as protected branch. ### conda stage. * edit and switch to specific `git_tag` instead of `master` for psi4-multiout (L&M) and psi4-docs (L); * in `ltrtver` in `conda_build_config.yaml`, make a new non-dev line (probably a ditto)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468415517:185,log,log,185,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468415517,1,['log'],['log']
Testability,"For future reference, the commented out test is causing Ecosystem build fails. We don't understand why, but it's holding up the rest of the development pipeline, so we're commenting it out temporarily. This should be fixed by the next full release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2644#issuecomment-1194434738:40,test,test,40,https://psicode.org,https://github.com/psi4/psi4/pull/2644#issuecomment-1194434738,1,['test'],['test']
Testability,"For future reference: Under the pyvib2 changes, a gradient will be computed during the course of any hessian() call, to confirm the geometry is stationary. The findif code _just might_ benefit from reusing that. (I discovered this when trying to figure out why the fd-psimrcc test was getting a findif gradient in addition to a findif hessian. Now Mk-MRCC is just taunting me.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-375922757:276,test,test,276,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-375922757,1,['test'],['test']
Testability,For note: I have enabled the installation of adcc (via pip) on Travis via `-DENABLE_adcc=ON` for testing purposes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-553134043:97,test,testing,97,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-553134043,1,['test'],['testing']
Testability,"For some unknown reason ADCC tests run by the CI have started failing, but otherwise this is ready.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2928#issuecomment-1529032891:29,test,tests,29,https://psicode.org,https://github.com/psi4/psi4/pull/2928#issuecomment-1529032891,1,['test'],['tests']
Testability,For some unknown reason `psi4 --test` segment fault on Python 3.5.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-416175262:32,test,test,32,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-416175262,1,['test'],['test']
Testability,For the dft-custom-gga test I used Turbomole's PBE value because G09's one was too different. It just really sometimes matters a lot to which decimal points all the constant and conversion factors are defined. Don't know about q-chem. Just to have it asked: same frozen core treatment in MP2?. > would a user asking for DSD-PBEP86 be expecting a -D correction to be; automatically included? . I dont think so.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-371245880:23,test,test,23,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-371245880,1,['test'],['test']
Testability,"For the dkh test in sample directory, It is fine. So, it is better if users set environment including intel lib of compiler themselves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126185144:12,test,test,12,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126185144,1,['test'],['test']
Testability,"For the record, the following are the tests that are terminated prematurely (with error msg) when ERD globally activated. If anyone gets the `WARNING: string truncated` with gdma, your compile dir path is too long. I think I can fix it, but that's not for this PR. ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277397753:38,test,tests,38,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753,1,['test'],['tests']
Testability,"For the reduced PBS file, I think you'll want something like the below. For psidatadir, just ensure non-interference. need to have psipath existing before appending. and jobname must match pbs name. i've tested it on dftd3 at least. ```; #!/bin/tcsh; #PBS -j oe; #PBS -l pmem=2120mb; #PBS -N jobname; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/user/psi4.$PBS_JOBID. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end. unsetenv PSI4DATADIR; unsetenv PSIDATADIR; setenv PSI_SCRATCH $myscratch; if ! ( $?PSIPATH ) setenv PSIPATH """"; setenv PSIPATH /path/to/external/modules:${PSIPATH}; setenv PSIPATH /path/to/python/modules:${PSIPATH}; /psi/install/directory/bin/psi4 -i jobname.in -o jobname.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; end; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/361#issuecomment-212251160:204,test,tested,204,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212251160,1,['test'],['tested']
Testability,"For this I plan on setting the `DOCC` keyword in the test case and then printing a warning in `UHF` and `CUHF` that if a singlet is requested these things *can* go wonky in the presence of degeneracies. There are better solutions that range greatly in time, but I think this at least covers it. Ill update #736 unless anyone has objections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738#issuecomment-308200161:53,test,test,53,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-308200161,1,['test'],['test']
Testability,"For those who have no idea what Lori and I are talking about, we're switching topics from standardizing method names to the fact that she's going to be standardizing method tests, and I have a reference implementation that can be used to confirm those tests are correct. Test standardization is not directly relevant to this PR. I didn't run comparisons on the LCCD code in `occ`, only the OLCCD code. That said, if you tell me what comparisons you want, I can run them by just commenting out the line in my code that rotates the orbitals. I can do all-electron or frozen core LCCD with conventional integrals. It'll take me a bit of work to get DF-LCCD, but that is something I need to do sooner or later, and this is a decent time for me to do it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909#issuecomment-635262663:173,test,tests,173,https://psicode.org,https://github.com/psi4/psi4/pull/1909#issuecomment-635262663,3,"['Test', 'test']","['Test', 'tests']"
Testability,"From discussion today, the following tasks:; - [ ] In `driver.py`, delete reference-bearing methods from procedures table (multiple places). Delete `table:energy_scf` rst table and its analogies. Salvage `'hf'` from them and move it into the main rst table.; - [ ] In `proc.py`, remove much of `parse_scf_cases`, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [ ] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [ ] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-121430626:410,test,test,410,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-121430626,1,['test'],['test']
Testability,"From my perspective, we need to figure out the tuple data type in `index.cc` before I can flatten the `tuple` member of the `IndexIterator`, before I can run final speed tests. I was hoping Jet could show me VTune by then, but if that doesn't happen, I'll just run some computations from Allen's recent paper using Mk-MRCC with both versions and see if the update causes notable slowdowns.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-636794573:170,test,tests,170,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-636794573,1,['test'],['tests']
Testability,"From the little I know about FreeBSD, I'm guessing that it's not fitting into either the Mac or Linux channels that our build system expects. The build is well-tested by devs with Mac+AppleClang and Linux+Intel(GCC), and CI covers Linux+GCC and Linux+Clang. It's going to be tricky to debug remotely, but if you work it out and care to submit a PR, we'd be grateful (particularly if you updated to master from 1.1). One thing to watch out for (wrt #852) is to make sure CMake can't find a different (higher than 2.0) version of pybind11 _anywhere_ on your system. We try to nail it down in CMake, but sometimes it finds and uses a wrong version installed alongside another dependency. Naturally, if I recognize the cause for an error, I'm glad to help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/853#issuecomment-343702224:160,test,tested,160,https://psicode.org,https://github.com/psi4/psi4/issues/853#issuecomment-343702224,1,['test'],['tested']
Testability,"Full tests is clean. And I've read over the new commits, and my LGTM! still stands.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1043#issuecomment-397325532:5,test,tests,5,https://psicode.org,https://github.com/psi4/psi4/pull/1043#issuecomment-397325532,1,['test'],['tests']
Testability,Full tests pass except DCFT5/6 which attempts to compare the energy to 10 decimal places. On that note it looks like the SCF/CCSD energy difference is about 5.e-10 or so. Not too surprising since the one-electron integrals are slightly different. Might try to rig up a test where we check the norm between the current and previous versions matrix elements for large basis sets and heavy atoms. ```; # 6 core update; nbf ntrial ao_overlap ao_kinetic ao_potential so_overlap so_kinetic so_potential; 0 28 1275 0.001758 0.000034 0.001248 0.001832 0.000177 0.001438; 1 98 104 0.002072 0.000253 0.004509 0.002503 0.000808 0.005072; 2 168 35 0.002780 0.000696 0.017807 0.003713 0.001938 0.019500; 3 238 17 0.003789 0.001310 0.044333 0.005827 0.003503 0.047694; 4 308 10 0.005321 0.002705 0.093579 0.009500 0.006423 0.096568; 5 378 6 0.007993 0.004080 0.178422 0.012842 0.009268 0.173306; 6 448 4 0.011465 0.006115 0.276808 0.017397 0.012930 0.282091; 7 518 3 0.015315 0.007962 0.426757 0.023739 0.018704 0.436435; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-277145466:5,test,tests,5,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-277145466,2,['test'],"['test', 'tests']"
Testability,Further CI update - it seems the ddd-deriv test fails with this PR... but only on Windows.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2833#issuecomment-1372611138:43,test,test,43,https://psicode.org,https://github.com/psi4/psi4/pull/2833#issuecomment-1372611138,1,['test'],['test']
Testability,"Gah! I didn't know about the pytest test cases (the standard tdscf-n set ran OK, somewhat surprisingly). A standard copy-paste and then missing one part that needed changing! I've corrected it. My version of pytest is too old to run the tests (apparently) but extracting the various bits out of the pytest file and running that as a standard input file worked OK.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2605#issuecomment-1154178074:36,test,test,36,https://psicode.org,https://github.com/psi4/psi4/pull/2605#issuecomment-1154178074,2,['test'],"['test', 'tests']"
Testability,"Generally I'd like the default log level to be more verbose and spam the log file instead of having something crucial missing and the user needs to repeat a calculation. That said, I haven't used the internal python logger object and these high numbers are and multiple categories unexpected and for a compchem program a bit confusing to be honest.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512#issuecomment-1082310204:31,log,log,31,https://psicode.org,https://github.com/psi4/psi4/pull/2512#issuecomment-1082310204,3,['log'],"['log', 'logger']"
Testability,"Geometric tests are here https://github.com/psi4/psi4/blob/master/tests/pytests/test_geometric.py , but they wouldn't have caught the problem you identified. If you feel like adding more, go for it, but I don't think this is a problem we're likely to relapse on. If you wanted to run those, from a compiled psi4 in `<objdir>`, execute the results of `stage/bin/psi4 --psiapi` to set up paths, then `pytest -v ../tests/pytests/test_geometric.py`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2872#issuecomment-1421267186:10,test,tests,10,https://psicode.org,https://github.com/psi4/psi4/pull/2872#issuecomment-1421267186,3,['test'],['tests']
Testability,Getting pretty close to merging this in. Failing tests case should be limited to the following:. ```; 22 - cc14 (Failed); 155 - docs-psimod (Failed); 187 - mints9 (Failed); ```. Docs and mints both require changes to the test case. `cc14` remains the only undiagnosed test failure.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/481#issuecomment-254326737:49,test,tests,49,https://psicode.org,https://github.com/psi4/psi4/pull/481#issuecomment-254326737,3,['test'],"['test', 'tests']"
Testability,"Gibbs and scf-guess work on clang but not gcc?!. Gibbs fails due to; ```; Traceback (most recent call last):; File ""/home/travis/build/psi4/psi4/build/stage/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/travis/build/psi4/psi4/build/stage/lib/psi4/driver/driver.py"", line 1026, in optimize; """"""input, such as DOCC, is correct."""""" % (current_sym, initial_sym)). ValidationError: Point group changed! (cs <-- c2v) You should restart using the last geometry in the output, after carefully making sure all symmetry-dependent input, such as DOCC, is correct.; ```; Fixing by setting c2v symmetry. scf-guess fails due to; ```; TestComparisonError: 	UHF energy, SAD guess (a.u.): computed value (-99.3839116) does not match (-99.5312257) to 6 digits.; ```; Fixing by setting right occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237:674,Test,TestComparisonError,674,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449589237,1,['Test'],['TestComparisonError']
Testability,"Git-hooks is probably a non-starter, so +1 for avoiding that. Another +1 for clang-format, I use it internally quite a bit with Google style and 4 spaces. Im kind of on the fence about this. A few notes:. Pros:; - Completely uniform style. Cons:; - We are constantly avoided errors, the `# pyflakes` and `# noqa` messages are messier than most of our python errors IMO.; - Plenty of times when we want something other than pep8 formatting (e.g. `VARH`).; - Completely uniform style (see previous point).; - If we override a single error in pyflakes, pyflakes will continue to fail for all further commits. It would become very easy just to ignore this test. Dont get me wrong, we should do periodic style cleanups. This is needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263272403:652,test,test,652,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263272403,1,['test'],['test']
Testability,"Give the newly committed fix a try, then if that's not satisfactory, reopen this. `psi4 --test` is what that preloading is actually affecting, so pass along any unexpected results of that. (Though I'm not sure if an error caused by a present but broken add-on should be skipped or failed.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/656#issuecomment-288422107:90,test,test,90,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-288422107,1,['test'],['test']
Testability,"Glad it worked out easily, but thanks for letting us know anyway. It's difficult to thoroughly test all combinations of systems, so reports like this are extremely helpful for identifying bugs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/905#issuecomment-361935414:95,test,test,95,https://psicode.org,https://github.com/psi4/psi4/issues/905#issuecomment-361935414,1,['test'],['test']
Testability,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528#issuecomment-263098427:486,test,test,486,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427,2,['test'],['test']
Testability,"Glad to hear you were able to converge the geometry. I'll leave the ECP logging question to Lori, but I can speak to the orbital reading issue. The issue here is one of the two improvements to the orbital read/guess system that I need for my own research, so the permanent fix is high priority for me. However, the relevant code is intimately tied up with a part of the code that is currently unergoing a large rewrite, so I won't be able to start on the fixes until that's done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1704#issuecomment-524287571:72,log,logging,72,https://psicode.org,https://github.com/psi4/psi4/issues/1704#issuecomment-524287571,1,['log'],['logging']
Testability,"Go for the renaming and default toggling, I think, @JonathonMisiewicz. It's good to get the tests passing and converging under conditions other than early exit from iterations. If you have a non-diagonally dominant B-matrix case around, @bozkaya, it'd be nice to have that in the test suite to make sure we're not favoring one class of systems over others.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1777#issuecomment-571728193:92,test,tests,92,https://psicode.org,https://github.com/psi4/psi4/issues/1777#issuecomment-571728193,2,['test'],"['test', 'tests']"
Testability,Going to let this test out as another check on wavefunction_pass then ill merge it.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/254#issuecomment-184372725:18,test,test,18,https://psicode.org,https://github.com/psi4/psi4/pull/254#issuecomment-184372725,1,['test'],['test']
Testability,"Good idea about the asymmetric test, @loriab . I think mintshelper handles the case where the field breaks symmetry, but it would be nice to have a C1 symmetry test that has a [1,1,1] field applied, to test all components of the dipole derivatives in case they get broken at some point (only z components are tested now, for speed, but I have verified the other components manually). We can think about these in the next phase, where some code (mintshelper?) will provide the matrices of dipole derivatives for @psi-rking to use in the IR intensities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/668#issuecomment-290934458:31,test,test,31,https://psicode.org,https://github.com/psi4/psi4/pull/668#issuecomment-290934458,4,['test'],"['test', 'tested']"
Testability,"Good idea, Andy. @ashutoshvt, just in case you haven't rebased recently, there were 5 tests in full tests that weren't passing for a while but are fixed now in upstream. So rebase before investigating.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718#issuecomment-303895469:86,test,tests,86,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303895469,2,['test'],['tests']
Testability,"Good news -- Azure now has a ""rerun failed jobs"" button that is both findable and does as expected. That's triggered on this PR. Bad news -- this isn't the PR I should have triggered to test new adcc packages. So have now retriggered Azure on https://github.com/psi4/psi4/pull/1799",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598787318:186,test,test,186,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598787318,1,['test'],['test']
Testability,"Good news: it works fine for me. The patch below (n/c from @mlestep, I don't think) gives the output below (it just needed to be told to compute something).; ```; -; - outfile->Printf( ""\nProperties computed using the %s density matrix\n\n"", title_.c_str());; + if (title_ == """") {; + outfile->Printf(""OEProp: No title given, name of density matrix used for the following properties is %s\n"", Da_so_->name().c_str());; + } else {; + outfile->Printf( ""\nProperties computed using the %s density matrix\n\n"", title_.c_str());; + }; ```; ```; e, wfn = energy('MP2', return_wfn=True); oeprop(wfn, ""MULTIPOLES(1)""); ```; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; OEProp: No title given, name of density matrix used for the following properties is SCF density. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electric (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417462300 to convert to Debye; Dipole X : 0.0000000 0.0000000 0.0000000; Dipole Y : 0.0000000 0.0000000 0.0000000; Dipole Z : -0.2704549 1.1770271 0.9065722. --------------------------------------------------------------------------------; ```. Bad news: we [lost a test](https://github.com/psi4/psi4/commit/71bf174e60bc54b6a7424ce13dd28cef264fa850) (one of the two cc properties ones) and it fails. @amjames or TDC group, could you take a look?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1068#issuecomment-402301904:1320,test,test,1320,https://psicode.org,https://github.com/psi4/psi4/pull/1068#issuecomment-402301904,1,['test'],['test']
Testability,"Good to know, I updated my comment... Would be good to have tests for these integrals though. @andysim could the pseudospectral ints be handled by M-D somehow?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2414#issuecomment-1064376101:60,test,tests,60,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1064376101,1,['test'],['tests']
Testability,"Good, I agree that is the best way to fix the documentation. I just put this in the example as a test:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }. set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True). nmopi = wfn.nmopi(); Da_so = wfn.Da(); SCa = core.Matrix(""Overlap times Ca"", nmopi, nmopi); SCa.gemm(False, False, 1.0, wfn.S(), wfn.Ca(), 0.0); Da_mo = Matrix.triplet(SCa, Da_so, SCa, True, False, False); molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. and the corresponding output from Molden:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ; Sum of Mulliken Charges: 0.0003; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485#issuecomment-456160965:97,test,test,97,https://psicode.org,https://github.com/psi4/psi4/issues/1485#issuecomment-456160965,1,['test'],['test']
Testability,"Good, thanks!. Assuming [this is the log](https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=i386&ver=1%3A1.2.1-1&stamp=1546604357&raw=0) to look at, a few comments:; - no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`); - psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`); - production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8; - source is probably a little out of date as this turned to c++14 around Christmas (`-- Setting (unspecified) option psi4_CXX_STANDARD: 11`); - I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`); - threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270.; - it's finding an AM=5 libint (`-- [36mFound Libint 5[m: /usr/lib/libint.a (found version 1.2.0)`). this'll make it through the tests but not good for production.; - aha, you're targeting v1.2.1, not v1.3! nevermind what I said about c++14; - `ImportError: Install python module networkx`; - Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824:37,log,log,37,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451508824,5,"['log', 'test']","['log', 'test', 'tests']"
Testability,"Granted. I was vaguely remembering that I also use 'valid_atom_map' to test whether RFO eigenvectors are symmetric - and they can be large and asymmetric. But for valid_atom_map it looks like I pass a tolerance in from optking, so I don't forsee any problems. Give it a shot.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/195#issuecomment-189456212:71,test,test,71,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189456212,1,['test'],['test']
Testability,"Great idea! I still have some concerns about potential ways to abuse `compute_gradient`, but my test cases won't even run for reasons far beyond the scope of this PR. Issue list is about to grow, but I'll be happy with the PR once the tests are updated. Thanks for this, Lori.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2200#issuecomment-869854948:96,test,test,96,https://psicode.org,https://github.com/psi4/psi4/pull/2200#issuecomment-869854948,2,['test'],"['test', 'tests']"
Testability,"Great thanks! I'll add the tests right away. . And for `energy()` vs `tdscf()`, I don't feel too strongly either way. I like the simplicity of `energy()`, particularly since tdscf is only returning energies for now. `tdscf()` may be the way to go eventually since it is more flexible. One option is to have both work, easy to do since `energy()` is just calling a `tdscf()` function in `run_scf`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803:27,test,tests,27,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803,2,['test'],['tests']
Testability,"Great thanks, can you add a small test for that in one of the current gradient tests? Easy functionality to accidentally break in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1320#issuecomment-441693522:34,test,test,34,https://psicode.org,https://github.com/psi4/psi4/pull/1320#issuecomment-441693522,2,['test'],"['test', 'tests']"
Testability,"Great to have test for this. . Shared pointers like [epot](https://github.com/psi4/psi4/pull/1900/files#diff-91bf9e90eb569eec33cd0e5edae2e2b4L1070) in this case are probably a bad idea in OpenMP.; Unfortunately I cannot test threading things on my mac. @timostrunk how important is threading here, performance wise? Is re-introducing openmp quickly crucial?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1900#issuecomment-633044819:14,test,test,14,https://psicode.org,https://github.com/psi4/psi4/pull/1900#issuecomment-633044819,2,['test'],['test']
Testability,Great! Can you also update `output.ref` in `tests/dft1`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/453#issuecomment-236929158:44,test,tests,44,https://psicode.org,https://github.com/psi4/psi4/pull/453#issuecomment-236929158,1,['test'],['tests']
Testability,"Great! Once that's in and in the conda stack, let's add a test case before closing this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1581441113:58,test,test,58,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1581441113,1,['test'],['test']
Testability,"Great, LGTM. Ill merge it in after tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253992394:35,test,tests,35,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253992394,1,['test'],['tests']
Testability,"Great, PR accepted, tested, synched btwn pub/priv, and now the binary builder can get to work. closed by 6c5512288ac3d16f2e3dee817b30cec4b9cbf9a5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/189#issuecomment-157126331:20,test,tested,20,https://psicode.org,https://github.com/psi4/psi4/issues/189#issuecomment-157126331,1,['test'],['tested']
Testability,"Great, glad it's working. I'll get your OpenBLAS patch added in, and it'll make its way back upstream to autocmake one day. Your `ldd` looks good. Only thing strikes me as odd is `libpython.so`. We stopped actually linking to this and now only require the interpreter, not the library. But maybe you're compiling 1.1a1 and the change happened afterward. In any case, when you update someday, don't be alarmed if that goes away. On the `#!/cluster/apps/python/2.7.12/x86_64/bin/python`, we go back and forth on whether to embed the specific compile-time version or a more generic `/usr/bin/env python2` or `usr/bin/env python3`. Advantages of the former: (a) user can be oblivious to what or if python in path at all, (b) conda does it this way. Advantages of the latter: (a) it's what Linux users expect to be happening, (b) avoids trouble of psi4 still using compile environment if you have separate compile and run-time environments. We've stuck with the former since it's friendlier to the inexperienced. Go right ahead and edit that line to a `/usr/bin/env` if it's more suited to your cluster, but I do recommend doing `python2` since the python2/3 headers are used during the build. By the way, on testing, there's `share/psi4/samples/*/test.in` files that'll print `SUCCESS`/`FAILED` to the screen and are handy for testing (or run `ctest -L quick -j4`)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275136191:1204,test,testing,1204,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275136191,3,['test'],"['test', 'testing']"
Testability,"Great, so that test case should work now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-369674861:15,test,test,15,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-369674861,1,['test'],['test']
Testability,"Great, thanks for this. I just pushed a change that will fix this test case. @jgonthier We both attempted to fix sapt4 in two different ways, the merge accepted both fixes which consequently broke the test case again. I reverted to your way of doing this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260#issuecomment-184846589:66,test,test,66,https://psicode.org,https://github.com/psi4/psi4/issues/260#issuecomment-184846589,2,['test'],['test']
Testability,"Great, thanks very much for your testing!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-401160701:33,test,testing,33,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-401160701,1,['test'],['testing']
Testability,"Great, this can come in as soon as the tests pass. (And if clang format breaks anything, we should be concerned.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1956#issuecomment-659615041:39,test,tests,39,https://psicode.org,https://github.com/psi4/psi4/pull/1956#issuecomment-659615041,1,['test'],['tests']
Testability,"Great, will merge on test pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2419#issuecomment-1031840751:21,test,test,21,https://psicode.org,https://github.com/psi4/psi4/pull/2419#issuecomment-1031840751,1,['test'],['test']
Testability,H 4.146010000 0.670138000 -0.091664000; C 2.086723000 2.112200000 0.786974000; H 2.554904000 2.486532000 1.695110000; H 1.033654000 2.388008000 0.788088000. ## H 2.582213000 2.494888000 -0.107984000. -1 1; N 2.550604000 3.185553000 5.509348000; S 3.865000000 2.665127000 4.746515000; O 4.891829000 2.292305000 5.715170000; O 3.642766000 1.773130000 3.581966000; S 1.025248000 3.068609000 4.995638000; O 0.246352000 4.189349000 5.513482000; O 0.836696000 2.658767000 3.587628000; C 0.411145000 1.571382000 5.965005000; F 0.501921000 1.762057000 7.282003000; F -0.875249000 1.329423000 5.650112000; F 1.131303000 0.476913000 5.635681000; C 4.516291000 4.244100000 3.945648000; F 4.803355000 5.175437000 4.855959000; F 5.632032000 3.964007000 3.245064000; F 3.602028000 4.743185000 3.087596000; units angstrom; no_reorient; symmetry c1; }. set globals {; basis cc-pVDZ; scf_type DF; freeze_core True; guess sad ; basis_guess 3-21G; }. energy('sapt2+3-ct'). # This isn't the actual desired job but bowdlerised for testing purposes with resources used:. ```; Resource Usage on 2014-04-15 19:15:49.729365:; JobId: 3541235.r-man2 ; Project: z00 ; Exit Status: 1 (Linux Signal 1); Service Units: 234.73; NCPUs Requested: 4 NCPUs Used: 4; CPU Time Used: 166:41:09; Memory Requested: 10gb Memory Used: 6gb; Vmem Used: 6gb; Walltime requested: 75:00:00 Walltime Used: 58:40:56; jobfs request: 20480mb jobfs used: 14975mb; ```. # . # . ```; Resource Usage on 2014-04-08 04:57:17.482814:; JobId: 3502869.r-man2 ; Project: z00 ; Exit Status: 1 (Linux Signal 1); Service Units: 363.16; NCPUs Requested: 8 NCPUs Used: 8; CPU Time Used: 202:02:19; Memory Requested: 10gb Memory Used: 6gb; Vmem Used: 6gb; Walltime requested: 60:00:00 Walltime Used: 45:23:42; jobfs request: 20480mb jobfs used: 14975mb; ```. # . # . ```; Resource Usage on 2014-02-12 22:00:42.199941:; JobId: 2430324.r-man2 ; Project: z00 ; Exit Status: 0 (Linux Signal 0); Service Units: 511.06; NCPUs Requested: 16 NCPUs Used: 16; CPU Time Used: 224:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-42150482:1757,test,testing,1757,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-42150482,1,['test'],['testing']
Testability,"HI @loriab,. I'm still having this issue with psi 1.2 (the released, not the dev one). It's quite erratic - sometimes it works, sometimes it doesn't.; I was trying to do some reproducible tests, but I couldn't in the end. I suspect the size of the path to the file is somehow relevant, but I really couldn't prove it with those tests",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-442801726:188,test,tests,188,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-442801726,2,['test'],['tests']
Testability,"Had to swap the order of `[[nodiscard]]` and `PSI_API`, GCC is lenient about this but Clang is not.; GHA Eco (Linux and MacOS) CI tests are still broken for some reason unrelated to this PR.; Otherwise this should now be ready for merge, when convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3104#issuecomment-1854509312:130,test,tests,130,https://psicode.org,https://github.com/psi4/psi4/pull/3104#issuecomment-1854509312,1,['test'],['tests']
Testability,Has this been tested with `make psi4so` yet? I'm not sure it would compile. There were a few changes in my commit that were needed to remove some ambiguity of some types. Or is this just laying the groundwork a bit?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/268#issuecomment-186917821:14,test,tested,14,https://psicode.org,https://github.com/psi4/psi4/pull/268#issuecomment-186917821,1,['test'],['tested']
Testability,"Have we changed what PSIDATADIR should point to?. On Mon, Mar 14, 2016 at 1:00 AM, Rollin King rking@bethel.edu wrote:. > An error has occurred. Traceback:; > ; > <class 'Boost.Python.ArgumentError'>: Python argument types in; > ; > ```; > psi4.scf(NoneType, NoneType); > ```; > ; > did not match C++ signature:; > ; > ```; > scf(boost::shared_ptr<psi::Wavefunction>, _object*, _object*): File; > ```; > ; > ""<string>"", line 47, in <module>; > ; > This is, for example, from the opt1 test case, but all jobs fail. I; > already tried removing my objdir completely and recompiling.; > ; > On Sun, Mar 13, 2016 at 8:58 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > The current head (0.4.156 / 7783818; > > https://github.com/psi4/psi4/commit/77838182dbdf260e7f39e4e554b64ee3c05a0da7; > > / 0.5.92) works fine for me on the test case above and on all the usual; > > test cases. What is the nature of your broken python?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196104469.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196158996:484,test,test,484,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196158996,3,['test'],['test']
Testability,"Have you pulled in master in the last day or so? @dgasmith committed some fixes for the full test suite, which corrected about 5 or 6 failures. As far as I know, the full suite should pass with that change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718#issuecomment-303895491:93,test,test,93,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303895491,1,['test'],['test']
Testability,"Have you tested this against Python 2, too? I'm getting the following error at execution time on my Mac with Python 2.7:. ```; Traceback (most recent call last):; File ""<string>"", line 29, in <module>; File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/driver.py"", line 618, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 2123, in run_adc; scf_helper(name, **kwargs); File ""/Users/jturney/Code/Chemistry/psi4/source/lib/python/proc.py"", line 1457, in scf_helper; e_scf = psi4.scf(precallback, postcallback); TypeError: No registered converter was able to produce a C++ rvalue of type std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > from this Python object of type unicode; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130013400:9,test,tested,9,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130013400,1,['test'],['tested']
Testability,"Have you tried installing into an environment (i.e., `conda create -n p4env python=3.8 psi4 -c psi4`)? Especially with heavy main environments like an Anaconda installation, there may be small pinning problems like mkl=2019.4 vs 2020.2 (b/c psi4 releases don't get rebuilt) that manifest as UnsatisfiableError. For most anyone, a recent psi4 would do. (Testing is the same as for releases.) `conda install psi4 -c psi4/label/dev`. The upper limit on python version is because psi4 must be built for each version. E.g., one could compile psi against a py3.9 alpha, but until one does (and checks that all the deps do, too), there's an upper limit to what can be installed. (That `2.7.*` is because the constraint solver can find _some_ psi4 for py27 in that channel; it won't be the one you want.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540:353,Test,Testing,353,https://psicode.org,https://github.com/psi4/psi4/issues/1979#issuecomment-671572540,1,['Test'],['Testing']
Testability,"Haven't checked, but that's a redundant input, isn't it? `basis cc-pvdz` + `relativistic x2c` triggers the primary basis to decontract. That said, the answer in the docs for the x2c example is known wrong. Were you going to address that, @WDerricotte?. Let me know if I'm mistaken about any of this, as I don't run relativistic regularly. And if there's something that _should_ work, please make a test case of it so it will continue to work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288812442:398,test,test,398,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288812442,1,['test'],['test']
Testability,"Heads-up, @bozkaya, there are some changes in DFOCC that should make your code play nicely with external potentials and the like. The full test suite passes right now, but I welcome any input from you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844#issuecomment-343210050:139,test,test,139,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-343210050,1,['test'],['test']
Testability,"Hello @raimis @loriab , I built psi4-v1.3.2 with visual studio 2019，I have changed the compilation option -openmp to -openmp:experimental(Although it does not fully support the syntax of openmp4.0), and fixed some include errors in the src。I compiled all the dependency libraries successfully，but at the end of the link an error occurred. I found that `FC_SYMBOL ""The type of Fortran name mangling"" 2`，I changed the value to 1 and get the same error. It looks like a problem with the calling interface of fortran, but i have no idea to solve it. Can you give me some ideas to solve this problem, thanks. ```; Error log:; [1262/1263] Linking CXX static library src\psi4\scfgrad\scfgrad.lib; [1263/1263] Linking CXX shared library src\core.cp37-win_amd64.pyd; FAILED: src/core.cp37-win_amd64.pyd src/core.lib ; cmd.exe /C ""cd . && ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe"" -E vs_link_dll --intdir=src\CMakeFiles\core.dir --rc=""D:\Windows Kits\10\bin\10.0.17763.0\x64\rc.exe"" --mt=""D:\Windows Kits\10\bin\10.0.17763.0\x64\mt.exe"" --manifests -- C:\PROGRA~2\MICROS~3\2019\COMMUN~1\VC\Tools\MSVC\1421~1.277\bin\Hostx64\x64\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.obj src\CMakeFiles\core.dir\export_diis.cc.obj src\CMakeFiles\core.dir\export_fock.cc.obj src\CMakeFiles\core.dir\export_functional.cc.obj src\CMakeFiles\core.dir\export_mints.cc.obj src\CMakeFiles\core.dir\export_misc.cc.obj src\CMakeFiles\core.dir\export_oeprop.cc.obj src\CMakeFiles\core.dir\export_pcm.cc.obj src\CMakeFiles\core.dir\export_plugins.cc.obj src\CMakeFiles\core.dir\export_psio.cc.obj src\CMakeFiles\core.dir\export_trans.cc.obj src\CMakeFiles\core.dir\export_wavefunction.cc.obj src\CMakeFiles\core.dir\export_options.cc.obj src\CMakeFiles\core.dir\create_new_plugin.cc.obj src\CMakeFiles\core.dir\read_options.cc.obj s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:615,log,log,615,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['log'],['log']
Testability,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331682241:76,test,tested,76,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241,1,['test'],['tested']
Testability,"Hello,. I am a graduate student from Dr. Sokolov's lab at The Ohio State University. Over the last week or so, I have run some calculations with both Psi4 (version 1.3.2) and QChem (5.1.1) to hopefully get some information regarding the origin of this problem. All relevant input/output files are attached, in full, to this post. First, I ran the ADC(1) and ADC(2) tests provided in the test suite of Psi4 in both programs. The ADC(1) excitation energies match between the two programs:. ### **Psi4 1.3.2 energies output**; ```; 	1 A state: 0.3529478 (a.u.), 9.6041997 (eV); 	2 A state: 0.4215815 (a.u.), 11.4718175 (eV); 	3 A state: 0.4538994 (a.u.), 12.3512305 (eV); 	4 A state: 0.5246003 (a.u.), 14.2751021 (eV); 	5 A state: 0.5709848 (a.u.), 15.5372886 (eV); 	6 A state: 0.7050389 (a.u.), 19.1850862 (eV); 	7 A state: 1.0543763 (a.u.), 28.6910395 (eV); 	8 A state: 1.0720010 (a.u.), 29.1706341 (eV); 	9 A state: 1.1388267 (a.u.), 30.9890538 (eV); 	10 A state: 1.1821020 (a.u.), 32.1666340 (eV); 	11 A state: 1.1875445 (a.u.), 32.3147310 (eV); 	12 A state: 1.1982557 (a.u.), 32.6061991 (eV); 	13 A state: 1.1992474 (a.u.), 32.6331833 (eV); 	14 A state: 1.2585194 (a.u.), 34.2460572 (eV); 	15 A state: 1.2767037 (a.u.), 34.7408785 (eV); 	16 A state: 1.2815731 (a.u.), 34.8733809 (eV); 	17 A state: 1.3132971 (a.u.), 35.7366340 (eV); 	18 A state: 1.3296420 (a.u.), 36.1814011 (eV); 	19 A state: 1.3540510 (a.u.), 36.8456048 (eV); 	20 A state: 1.3585131 (a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:365,test,tests,365,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,2,['test'],"['test', 'tests']"
Testability,"Hello,; Has this been resolved? I have just hit that error:; iwl_buf_init: Can't open file 33; with a straight ccsd calculation. I've been looking into coupled cluster variants for one of our users who has a monster job which is giving our programs all sorts of grief. I decided to simplify and go with something easily doable - molpro caffeine test with cc-pvtz basis (input as below) but the default psi4 calculation seems to be grinding slowly due to IO (clocking 2% cpu utilisation of 16 processors) and ""scf_type direct"" gives the aforementioned error.; I'm using a fresh build I pulled(?) yesterday.; Best wishes,; Rika. molecule caffeine {; units bohr; 0 1; C 1.50 -0.505274704 0.000000; C -0.535187033 -2.058190923 0.000000; C 2.65 -4.522014770 0.000000; C 1.346731167 2.284891446 0.000000; C -3.463010598 1.525507419 0.000000; C -1.745695607 5.842896101 0.000000; C -5.228750999 -2.835032850 0.000000; C 6.295922772 -1.343301717 0.000000; N 3.617453017 -2.104182389 0.000000; N 0.151176399 -4.614309103 0.000000; N -3.029497084 -1.135014970 0.000000; N -1.247933362 3.102880179 0.000000; O 3.102683166 3.787581194 0.000000; O -5.585618888 2.429058396 0.000000; H 3.895327083 -6.157733721 0.000000; H -2.816386000 6.395195000 -1.672580; H -2.816386000 6.395195000 1.672580; H 0.068926104 6.808767386 0.000000; H -6.392104000 -2.520913000 -1.673960; H -6.392104000 -2.520913000 1.673960; H -4.537919087 -4.771667968 0.000000; H 7.459103496 -3.040539942 0.000000; H 6.719940000 -0.221440000 1.677441; H 6.719940000 -0.221440000 -1.677441; }. set basis cc-pvtz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35#issuecomment-41624543:345,test,test,345,https://psicode.org,https://github.com/psi4/psi4/issues/35#issuecomment-41624543,2,['test'],['test']
Testability,"Hello,; it works fine for me with a relatively recent psi4 (Git: Rev {master} a3d8d93). It also works with the latest dev. conda package (837e345). Which psi4 version are you using? If it's anything older, try [updating](http://www.psicode.org/psi4manual/master/conda.html#how-to-update-a-psi4-binary).; Peter. Log: [{master} a3d8d93](https://github.com/psi4/psi4/files/1811137/master.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373012577:311,Log,Log,311,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373012577,1,['Log'],['Log']
Testability,"Here are a list of files that are compiled, but never called in any test in Psi's library. Generated by the inverse of a coverage report:. ```; src/psi4/libciomr/add_arr.cc; src/psi4/libciomr/add_mat.cc; src/psi4/libciomr/eigout.cc; src/psi4/libciomr/ffile.cc; src/psi4/libciomr/mxmb.cc; src/psi4/libpsio/get_length.cc; src/psi4/libpsio/tocdel.cc; src/psi4/libpsio/zero_disk.cc; src/psi4/libqt/mat_in.cc; src/psi4/libqt/orient_fragment.cc; src/psi4/libqt/rootfind.cc; src/psi4/libqt/rotate_vecs.cc; src/psi4/libqt/slaterdset.cc; src/psi4/libqt/sort.cc; src/psi4/libqt/strncpy.cc; src/psi4/libqt/v_3.cc; src/psi4/libqt/zmat_point.cc; src/psi4/libdpd/file4_print.cc; src/psi4/libdpd/memfree.cc; src/psi4/libmints/mints/orthog.cc; src/psi4/libmints/mints/svd.cc; src/psi4/libthce/thce/laplace.cc; src/psi4/libthce/thce/thcew.cc; src/psi4/libfock/fock/PSJK.cc; src/psi4/lib3index/3index/dealias.cc; src/psi4/lib3index/3index/pstensor.cc; src/psi4/lib3index/3index/qr.cc; src/psi4/lib3index/3index/schwarz.cc; src/psi4/ccdensity/G_norm.cc; src/psi4/ccdensity/add_core_UHF.cc; src/psi4/ccdensity/add_ref.cc; src/psi4/ccdensity/ael.cc; src/psi4/ccdensity/classify.cc; src/psi4/ccdensity/densgrid_RHF.cc; src/psi4/ccdensity/distribute.cc; src/psi4/ccdensity/file_build.cc; src/psi4/ccdensity/get_frozen.cc; src/psi4/ccdensity/idx_error.cc; src/psi4/ccdensity/idx_permute.cc; src/psi4/ccdensity/resort_gamma.cc; src/psi4/ccdensity/resort_tei.cc; src/psi4/ccdensity/x_xi_check.cc; src/psi4/ccenergy/cc2_WabijT2.cc; src/psi4/cceom/check_sum.cc; src/psi4/cceom/hbar_norms.cc; src/psi4/cceom/norm_HC1.cc; src/psi4/cceom/sigmaCC3_RHF.cc; src/psi4/cceom/sort_amps.cc; src/psi4/cchbar/Wabei_RHF_FT2_a.cc; src/psi4/cclambda/overlap_LAMPS.cc; src/psi4/cclambda/BL2_AO.cc; src/psi4/cclambda/Lmag.cc; src/psi4/cclambda/WabeiL1.cc; src/psi4/cclambda/check_sum.cc; src/psi4/cclambda/halftrans.cc; src/psi4/cclambda/spinad_amps.cc; src/psi4/ccresponse/print_X.cc; src/psi4/cctriples/ET_AAA.cc; src/psi4/cctriples/ET_AAB.cc; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262124158:68,test,test,68,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262124158,1,['test'],['test']
Testability,"Here is `psi4 --test`:; (p4env) [henrique@dhcppc3 ~] $ psi4 --test; ================================================================ test session starts =================================================================; platform linux -- Python 3.6.6, pytest-3.8.0, py-1.6.0, pluggy-0.7.1 -- /home/henrique/bin/anaconda3/envs/p4env/bin/python; cachedir: .pytest_cache; rootdir: /home/henrique, inifile:; collected 22 items . bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gdma PASSED [ 4%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED [ 9%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED [ 13%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dftd3 SKIPPED [ 18%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED [ 22%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED [ 27%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_erd SKIPPED [ 31%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_simint PASSED [ 36%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_json PASSED [ 40%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED [ 45%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf SKIPPED [ 50%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_gpu_dfcc SKIPPED [ 54%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_grimme_3c SKIPPED [ 59%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py::test_dkh PASSED [ 63%]; bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_ad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:16,test,test,16,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,8,['test'],"['test', 'tests']"
Testability,"Here is a script can orthogonalize orbitals between different geometries. However it does not consider frozen orbitals. They can be simply added following the comments inside the script. ```; #!/usr/bin/python; import psi4. # some global variables; nirrep = None; nrdoccpi = None; nruoccpi = None; nactvpi = None; nmopi = None. """"""; This function makes (C1)^T S2 C1 orthogonal; C1: converged CASSCF orbitals at geometry 1; S2: SO overlap matrix at geometry 2; return: orthogonal orbitals; """"""; def ortho_orbs(wfn1, wfn2, semi = True):; title = ""\n ==> Orthogonalize Orbitals Between Different Geometries <==\n""; psi4.core.print_out(title). # make sure there is no frozen orbitals; psi4.core.print_out(""\n Testing frozen orbitals ... ""); global nirrep; nirrep = wfn2.nirrep(); nfdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_DOCC"")); nfuoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_UOCC"")); nf = nfdoccpi.n() + nfuoccpi.n(); if nf != 0:; psi4.core.print_out(""False""); raise ValueError(""I am too lazy to consider frozen orbitals.""); else:; psi4.core.print_out(""Pass""). # get C1 and S2; C1 = wfn1.Ca(); S2 = wfn2.S(). # figure out irreps and orbital spaces; global nmopi; global nrdoccpi; global nactvpi; global nruoccpi; nmopi = wfn2.nmopi(); nrdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""RESTRICTED_DOCC"")); nactvpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""ACTIVE"")); nruoccpi = psi4.core.Dimension(nirrep); for i in range(nirrep):; nruoccpi[i] = nmopi[i] - nrdoccpi[i] - nactvpi[i]. # create subspace orbitals: core, active, virtual; psi4.core.print_out(""\n Preparing orbitals of subspaces ... ""); Ccore = psi4.core.Matrix(""C core"", nmopi, nrdoccpi); Cactv = psi4.core.Matrix(""C actv"", nmopi, nactvpi); Cvirt = psi4.core.Matrix(""C virt"", nmopi, nruoccpi). # fill in data to orbitals of subspaces; for h in range(nirrep):; offset1 = nrdoccpi[h]; offset2 = nactvpi[h] + offset1. for i in range(nmo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-313731339:705,Test,Testing,705,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-313731339,1,['Test'],['Testing']
Testability,Here is the output from psrecord (--log mem.log):; Everything was fine during the SCF in this case but it started picking up memory pretty quickly after starting with the gradient until it was killed when reaching 10GB. I also attached the input and output files. [mem.log](https://github.com/psi4/psi4/files/3066180/mem.log); [out.txt](https://github.com/psi4/psi4/files/3066184/out.txt); [in.txt](https://github.com/psi4/psi4/files/3066185/in.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481899244:36,log,log,36,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481899244,4,['log'],['log']
Testability,Here's single-thread wB97X run with chrinide's input after two optimization cycles (it's still going). Max real 11 gb and virtual 12.4 gb. [bgobbi_wB97x_n1.log](https://github.com/psi4/psi4/files/3074059/bgobbi_wB97x_n1.log),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-482626995:156,log,log,156,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-482626995,2,['log'],['log']
Testability,"Here's some of the errors in frequencies pre-fix; max is for HOOH TS. I've cherry-picked the commit into pyvib2, and the tests, if handy, are [here](https://github.com/loriab/psi4/blob/a4219be5e605a8f3f92fde127fdac4c187eaa70e/tests/python/vibanalysis/input.py). * CO2; ```; 	exp: [ 761.1526 761.1526 1513.3122 2580.1495]; 	obs: [ 765.97192061+0.j 954.84604992+0.j 1511.98600598+0.j; 2577.29764966+0.j]; 	dif: [ 4.81932061+0.j 193.69344992+0.j -1.32619402+0.j -2.85185034+0.j]; ```; * Ethene; ```; 	exp: [ 885.4386 1073.4306 1080.4104 1135.9390 1328.7166 1467.8428; 1565.5328 1831.6445 3287.3173 3312.1889 3371.7974 3399.4232]; 	obs: [ 885.43769105+0.j 1073.42980093+0.j 1080.48361108+0.j; 1135.93848940+0.j 1341.57874983+0.j 1467.71701985+0.j; 1565.53257843+0.j 1831.21804884+0.j 3287.31942795+0.j; 3312.16817472+0.j 3373.24482206+0.j 3399.42544494+0.j]; 	dif: [ -9.08947590e-04+0.j -7.99067003e-04+0.j 7.32110847e-02+0.j; -5.10595379e-04+0.j 1.28621498e+01+0.j -1.25780152e-01+0.j; -2.21567931e-04+0.j -4.26451164e-01+0.j 2.12794906e-03+0.j; -2.07252822e-02+0.j 1.44742206e+00+0.j 2.24494358e-03+0.j]; ```; * CH3 & NH3 ok; * Formaldehyde; ```; 	exp: [ 1325.3286 1359.7579 1637.4774 2013.4255 3108.9786 3183.3975]; 	obs: [ 1325.82947096+0.j 1376.06130208+0.j 1637.37151242+0.j; 2010.83034420+0.j 3108.93196717+0.j 3185.06227338+0.j]; 	dif: [ 0.50087096+0.j 16.30340208+0.j -0.10588758+0.j -2.59515580+0.j; -0.04663283+0.j 1.66477338+0.j]; ```; * HOOH TS; ```; 	exp: [ 0.0000+278.6136j 1128.8155 +0.j 1364.3495 +0.j; 1698.2924 +0.j 4140.0257 +0.j 4146.4749 +0.j ]; 	obs: [ 0.00000000+273.62786912j 1122.20829758 +0.j 1385.41184315 +0.j; 1715.97750485 +0.j 4143.48648522 +0.j 4306.47193962 +0.j ]; 	dif: [ 0.00000000-4.98573088j -6.60720242+0.j 21.06234315+0.j; 17.68510485+0.j 3.46078522+0.j 159.99703962+0.j ]; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361040047:121,test,tests,121,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361040047,2,['test'],['tests']
Testability,Here's the input file:. ```; #! Test. memory 120 GB. molecule {; C -0.3648219 -0.2558995 0.0923050; C -0.8237370 -0.4341058 1.4009892; C 0.0631893 -0.4945023 2.4676115; C 1.4325282 -0.3891253 2.2383352; C 1.9137275 -0.2544564 0.9427619; C 1.0188673 -0.2008603 -0.1248541; S 1.6337601 -0.0364981 -1.7761054; C 0.4221959 -1.0586124 -2.5697098; C 0.8238102 -1.8523826 -3.6439926; C -0.0849812 -2.6907175 -4.2763478; C -1.3956898 -2.7594648 -3.8167039; C -1.7946816 -1.9614268 -2.7530877; C -0.9127618 -1.0695029 -2.1338664; C -1.3561501 -0.1563074 -1.0295856; C -1.9665877 1.0501577 -1.2219860; C -3.4084245 1.3237948 -1.5387008; C -4.1778103 0.9153814 -2.6656460; C -3.6040754 0.3592572 -3.8324065; C -4.3883329 -0.0114701 -4.8966852; C -5.7880208 0.1587824 -4.8485691; C -6.3715656 0.7419527 -3.7516437; C -5.5875462 1.1595529 -2.6489158; C -6.1606962 1.8632603 -1.5594824; C -5.3698613 2.3529990 -0.5506849; C -3.9860050 2.0985433 -0.5554402; C -2.9661061 2.5564496 0.4375737; C -1.6390824 2.2179359 -0.2602651; C -1.1154328 3.3910761 -1.1017198; H -0.3127358 -0.6228208 3.4762500; H -1.8927706 -0.5052113 1.5726366; H 1.8586583 -1.8262256 -3.9659948; H 0.2398716 -3.3060821 -5.1077784; H -2.1089392 -3.4246186 -4.2897038; H -2.8205109 -1.9987160 -2.4069456; H -3.0590481 1.9923608 1.3740789; H -3.0646319 3.6174136 0.6841579; H -0.8780603 1.9494578 0.4669513; H -1.8608701 3.7224689 -1.8292206; H -0.8671432 4.2380262 -0.4563872; H -0.2145328 3.1009119 -1.6469308; H 2.1299487 -0.4343560 3.0671308; H -2.5302569 0.2498912 -3.8883093; H -5.8058019 2.9352268 0.2545431; H -3.9272763 -0.4346889 -5.7821545; H -7.4432146 0.9114819 -3.7244639; H -7.2306828 2.0442982 -1.5581508; H -6.3974861 -0.1494268 -5.6908797; H 2.9804384 -0.2081479 0.7541413; }. set {; basis dzvp; scf_type df; reference uks; }. set_num_threads(4). gradient('b3lyp-D3BJ'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1547#issuecomment-465428116:32,Test,Test,32,https://psicode.org,https://github.com/psi4/psi4/issues/1547#issuecomment-465428116,1,['Test'],['Test']
Testability,Hey Distelli testing is now passing!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235411756:13,test,testing,13,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235411756,1,['test'],['testing']
Testability,"Hey all, I have updated the code to account for the two density matrices present in UHF. I ran a couple of tests. UHF does just as well as RHF for similar test cases with respect to screening and parallel performance. I have also discovered that density screening is not very effective for systems with diffuse basis sets (like aug-cc-pvdz)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-759736713:107,test,tests,107,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-759736713,2,['test'],"['test', 'tests']"
Testability,"Hey everyone,. I got the code through Valgrind for the stability test case and I did find an invalid read, but in the orbital rotation parameters that occurs after all the roots are computed. I'm correcting it now and investigating all divisions occurring in the code for small numbers. @jturney Could you just run the stability1 test case if it does not take too much time ? From what I understood the observed error was not even fully reproducible on Travis, which is going to make difficult to correct it. If you can see it on your machine you could also test the new version once I commit it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182873969:65,test,test,65,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182873969,3,['test'],['test']
Testability,"Hey there! I've been working with @averyparr and wanted to chime in on the _specific_ issue of omega in wb97m-v. I'm don't think this is worth promoting to a bigger issue, but at least so if someone else is searching and finds this issue, there's some context. In _addition_ to the patches made in #2643, there's another change that needs to happen to enable one to set `omega` in wb97m-v. Specifically, the version of libxc that psi4 pulls in is 5.1.5 (https://github.com/psi4/psi4/blob/master/external/upstream/libxc/CMakeLists.txt#L18) . This version is old enough that the C file for wb97m-v is missing a _lot_ of content compared to it's other wb97 cousins (see https://gitlab.com/libxc/libxc/-/blob/5.1.5/src/hyb_mgga_xc_wb97mv.c#L38 and compare to, e.g., https://gitlab.com/libxc/libxc/-/blob/5.1.5/src/hyb_gga_xc_wb97.c#L145). Because `xc_func_info_get_n_ext_params` ends up returning 0 (since it's not properly set in wb97m-v), psi4 thinks there's nothing it can set (`NPAR` is 0 and the names are NULL). . Unfortunately this isn't fixed until version 5.3 (https://gitlab.com/libxc/libxc/-/blob/release-5.3.0/src/hyb_mgga_xc_wb97mv.c), which isn't yet a stable release. It's pretty easy to monkey-patch your own libxc 5.2.3+, which _seems_ to work just fine with psi4, but I haven't run any tests besides the basic ones that run during installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1198448773:1300,test,tests,1300,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1198448773,1,['test'],['tests']
Testability,"Hey,. Q1: The current code can only perturb along the specified axis. We could adapt it to handle rotations we'd just have to be careful with symmetry; it shouldn't be difficult. Q2: Any code that uses the `MintsHelper::so_potential` (not `MintsHelper::ao_potential`) will have the perturbation applied. I had tested this a few years ago for MP2 and CCSD. Might be a good idea to make sure there's a test included for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/302#issuecomment-192282809:310,test,tested,310,https://psicode.org,https://github.com/psi4/psi4/issues/302#issuecomment-192282809,2,['test'],"['test', 'tested']"
Testability,"Hi @Hassenky. You should be able to use (and modify) the test files. https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/natural-orbital/input.dat; https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/scf-n2/input.dat; https://github.com/psi4/psi4/blob/5801071a3b022497b8ae6bd157d9669f11c3b6d3/tests/dmrg/ci-h2o/input.dat. Just leave out the last two lines from these files and give it try?. Once Daniel's pull request to chemps v1.7 is also accepted, you should be able to use dmrg-caspt2:. https://github.com/dgasmith/psi4/blob/13b56a618a17f57eeeacf66ef0a2a020daacdbb9/tests/dmrg/caspt2-n2/input.dat. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222653883:57,test,test,57,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222653883,5,['test'],"['test', 'tests']"
Testability,"Hi @bozkaya, glad you're continuing to work on this. I worry that we're combining too many things here. I can see that saving the deltaMP2 energies are relevant to getting the FNO energies working, but changes to the tensor class and UHF-DF-CCSD perhaps are not. . For the latter two, I suggest a separate PR. If you send git patches of the commits where you added those features/fixes (can add `.patch` to end of GH commit view like https://github.com/psi4/psi4/commit/28caec54bff4a0ef39f01269cb94a930f6bd7223.patch or can do on the command line, https://stackoverflow.com/questions/6658313/generate-a-git-patch-for-a-specific-commit), I can get that PR started for you. The changes in those diffs/patches should be new work on, for example, the tensor class, not historical changes. For this PR, mainly what's needed are the deltaMP2 changes (again, if you'll send a patch, I'll add it to this PR) and tests. For the tests, it'll be straightforward to start from this branch and add new files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1390#issuecomment-462830483:904,test,tests,904,https://psicode.org,https://github.com/psi4/psi4/pull/1390#issuecomment-462830483,2,['test'],['tests']
Testability,"Hi @dgasmith, forgot to report back. I updated `v2rdm_casscf` and it seems to have solved the issue indeed:; ```; $ psi4 --test; /home/je714/psi4conda/lib/python3.5/site-packages/v2rdm_casscf/v2rdm_casscf.so loaded.; =============================================== test session starts ===============================================; platform linux -- Python 3.5.3, pytest-3.0.7, py-1.4.33, pluggy-0.4.0 -- /home/je714/psi4conda/bin/python; cachedir: .cache; rootdir: /home/je714, inifile:; collected 19 items. psi4conda/lib/python3.5/site-packages/psi4/tests/test_aaa_profiling.py::test_threaded_blas xfail; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_gdma PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_chemps2 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_libefp PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_pcmsolver PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_erd PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_simint PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_json PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_cfour SKIPPED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_v2rdm_casscf PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py::test_grimme_3c PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_basic PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_cc PASSED; psi4conda/lib/python3.5/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED; psi4conda/lib/python3.5/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710#issuecomment-305441942:123,test,test,123,https://psicode.org,https://github.com/psi4/psi4/issues/710#issuecomment-305441942,8,['test'],"['test', 'tests']"
Testability,"Hi @djcole56, the immediate issue is fixed in #2273, and I think that can be merged after a couple test case adjustments. We were going to backport that one. The other half of the issue that isn't troubling you @jeffschriber was going to work on. Are you more interested in the v1.4.x or the v1.5.devx series?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272#issuecomment-925817914:99,test,test,99,https://psicode.org,https://github.com/psi4/psi4/issues/2272#issuecomment-925817914,1,['test'],['test']
Testability,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:811,TEST,TEST,811,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360,1,['TEST'],['TEST']
Testability,"Hi @j3mdamas,. Yes, the defaults version 4.8.5 was just below our minimum of 4.9. And then we try to stay on the modern side of the string-passing change at gcc 5.1(https://greek0.net/blog/2016/10/29/gcc_compatibility/) since people compile against our packages. The `gcc-5` on the psi4 channel is one I swiped from msarahan a year or so ago at the time of our last gcc crisis. I'd very much like to go back to using a defaults channel gcc, esp. for the gcc/libgcc separation. I tried out their `gcc_linux-64` at SciPy and it worked great. I planned to use their new toolchain system underneath Intel compilers but haven't had a chance to work on it. One aspect that might be immediately helpful to you is that because of our initial drive to make psi4 as static as possible, the psi4 package has no `libstdc++.so` runtime dependency. Only dep is on `libgcc_s.so` which can usually be picked up anywhere. In fact, we keep `gcc-5` away from travis builds so that different compilers can be properly tested. Below is a dependency readout from a recent build for general consultation. And yes, I've hit the conda inspect multiple packages message, too. There are plans down the road to drop `std::regex`, which means we could go back to general c++11 compliance and 4.8.5 would be ok. But because the packages are compiled against, we'd prefer to stay >=5.2 anyways. So summary is that current setup is stable but not ideal and we're not attached. Just haven't had time or need to roll out the latest tools. Short of another gcc packages revamp, are there particular problems/conflicts we could help tackle?. ```; + ldd -v /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/core.so; 	linux-vdso.so.1 => (0x00007fff87fc4000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f4318faf000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f4318bed000); 	libpcm.so.1 => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-332960335:998,test,tested,998,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335,1,['test'],['tested']
Testability,"Hi @jminuse, thanks for the informative bug report. I'm almost certain that this suspicious 1.4rc1 behavior was fixed in 1.4rc2 by #2139, which tightened the integral screening after we switched integral engines from `libint` to `libint2`. . Your observations are consistent with what we saw: very wrong and/or oscillatory SCF energies. I also checked that your test case gives a reasonable energy with 1.4rc1 when I set the keyword `INTS_TOLERANCE` to 0, which was the temporary workaround for that bug.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211#issuecomment-869217302:362,test,test,362,https://psicode.org,https://github.com/psi4/psi4/issues/2211#issuecomment-869217302,1,['test'],['test']
Testability,"Hi @loriab and @robertodr,. Thanks for your effort!. Regarding `Psithon` and `PsiAPI`, we are using both. For older products (e.g. https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py), it is still `Psithon`, but will change to `PsiAPI` eventually. For new development, we (at least me) are already using `PsiAPI.` So ideal, the both should work consistently. Regarding a simple specific usage from https://github.com/Acellera/htmd/blob/master/htmd/qm/psi4.py, we have two scripts:; ```bash; $ cat run.sh; #!/bin/sh. export HTMD_PSI4_WORKDIR=$(pwd); psi4 -i psi4.in -o psi4.out &> psi4.log; ```; ```python; $ cat psi4.in; set_num_threads( 8 ); memory 2.000000 gb. set { reference rks }; set { basis cc-pVDZ }. molecule MOL {; 0 1; noreorient; nocom; symmetry c1; O 1.014300 -0.002300 0.060500; O 2.462400 -0.107500 -0.002400; H 0.821200 -0.823600 -0.430600; H 2.655500 0.713700 0.488700; }. pcm = { ; Medium { Solvent = Water }; Cavity { Type = GePol }; }. set optking { dynamic_level = 1 }. energy, wfn = optimize('B3LYP-D3', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('4 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```; We need that the working directory to be not changed after `optimize` (and `energy`) returns as we do some analysis and write a few files in general (in this case just `psi4out.xyz`). So, we have an ugly hack to fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-357208169:594,log,log,594,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-357208169,2,['log'],['log']
Testability,"Hi @maxscheurer. Let me briefly react to your comments. > If the elec_only functionality is working, one could add LR-DDX for TDDFT. I can look up where the line of code needs to be added. If we want to add this, you could probably generate reference data with Gaussian, if it's not too much to ask. Nice idea, but it is not yet been tested to the point where I would be confident in it. I have this planned as a follow-up to this one ... I'll add a todo for now. > Will it be possible to add nuclear gradients in a follow-up PR? I think this would be a much appreciated feature by a lot of Psi users. Yes absolutely. That takes a bit of work (as more quantities are needed on the psi4-side), but ddx has them and naturally it would make sense to carry that forward to psi4. > What about performance in general? Did you run some small benchmark comparing to the existing PCM implementation? . I did not benchmark things rigorously, but e.g. on nitro-aniline in an STO-3G basis the timings were noticably different. In that setup the main load of the SCF is on the pcm. Here the SCF needs around 150s for PCMsolver and around 40s for ddx. Please take this with a grain of salt as I have done zero testing in how this scales or translates to realistic setups.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496:334,test,tested,334,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1335539496,4,"['benchmark', 'test']","['benchmark', 'tested', 'testing']"
Testability,"Hi @susilehtola, I've been following Libxc v5.1 https://gitlab.com/libxc/libxc/-/issues/186 with interest. When I compiled this branch (after rebase; including your fixes from the spring, thanks!) in late December against the the Libxc 5.0 branch, I got about the same Psi4 test results as recorded above -- lots of `Matrix::power: C_DSYEV failed`. However, when I compile this branch against the new Libxc 5.1 hotfix branch, I don't even get that far. After disabling OpenMP, I get segfaults (dft-psivar):; ```; (gdb) bt; #0 0x00007ffff78351d7 in raise () from /lib64/libc.so.6; #1 0x00007ffff78368c8 in abort () from /lib64/libc.so.6; #2 0x00007ffff782e146 in __assert_fail_base () from /lib64/libc.so.6; #3 0x00007ffff782e1f2 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffed70db12 in xc_mix_func (func=func@entry=0x555556ca7500, np=np@entry=255, rho=rho@entry=0x555556e575c0, sigma=sigma@entry=0x555556ccda80, lapl=lapl@entry=0x0, tau=tau@entry=0x0, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, vlapl=0x0, vtau=0x0, v2rho2=0x0, v2rhosigma=0x0, v2rholapl=0x0, v2rhotau=0x0, v2sigma2=0x0, ; v2sigmalapl=0x0, v2sigmatau=0x0, v2lapl2=0x0, v2lapltau=0x0, v2tau2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rho2lapl=0x0, v3rho2tau=0x0, v3rhosigma2=0x0, v3rhosigmalapl=0x0, v3rhosigmatau=0x0, v3rholapl2=0x0, v3rholapltau=0x0, v3rhotau2=0x0, v3sigma3=0x0, v3sigma2lapl=0x0, v3sigma2tau=0x0, v3sigmalapl2=0x0, v3sigmalapltau=0x0, v3sigmatau2=0x0, ; v3lapl3=0x0, v3lapl2tau=0x0, v3lapltau2=0x0, v3tau3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho3lapl=0x0, v4rho3tau=0x0, v4rho2sigma2=0x0, v4rho2sigmalapl=0x0, v4rho2sigmatau=0x0, v4rho2lapl2=0x0, v4rho2lapltau=0x0, v4rho2tau2=0x0, v4rhosigma3=0x0, v4rhosigma2lapl=0x0, v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmala",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:274,test,test,274,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,1,['test'],['test']
Testability,"Hi Lori, thank you for the PR and I really should buy you a beer. It would be useful to show the linking information, which I do not find under ""Build Psi4"". I think we should see `Linking CXX shared library core.cpython*.so` if it works as intended. However, I see `Linking CXX shared module core.cpython*.so` [here](https://dev.azure.com/fevange/Forte/_build/results?buildId=64&view=logs&j=969f314f-c02d-5da0-0600-6f21de6a62ef&t=c92288d5-3ca0-581f-2955-a086c2d0fb85&l=3375).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2103#issuecomment-773428084:385,log,logs,385,https://psicode.org,https://github.com/psi4/psi4/pull/2103#issuecomment-773428084,1,['log'],['logs']
Testability,"Hi Lori,. I can not reproduce failings on my computers. Could you send me output files for the failed tests so that I see what is gong wrong?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-157834251:102,test,tests,102,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157834251,1,['test'],['tests']
Testability,"Hi Lori,. I have just checked your output file for dfomp2p5-grad1. However, your input file is wrong. Please compare it with the following, which is the one in the public repo:. #! DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. ref_vals = [ #TEST; [ 0.000000000000, 0.00000000000000, 0.01227994599573], #TEST; [ 0.000000000000, 0.00200475312336, -0.00613997299786], #TEST; [ 0.000000000000, -0.00200475312336, -0.00613997299786] #TEST; ] #TEST; ref = psi4.Matrix(3, 3) #TEST; ref.set(ref_vals). memory 256 mb. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad; freeze_core true; }; gradient('df-omp2.5'). grad = psi4.wavefunction().gradient() #TEST; compare_matrices(ref, grad, 5, ""Analytic gradients"") #TEST",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-157840562:245,TEST,TEST,245,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157840562,8,['TEST'],['TEST']
Testability,"Hi Lori,. I was testing the new call name conventions for a while. Now, we have MP2_TYPE, MP_TYPE, CC_TYPE, CEPA_TYPE to switch between DF/CD/CONV. I guess it will be somewhat confusing for users to remember all of these options. . I think we can merge all this options into a global option. For example, we may define CORRELATION_TYPE as a new option (or POST_HF_TYPE), and instead of MP2_TYPE/MP_TYPE/CC_TYPE/CEPA_TYPE we will have a global option which will switch between DF/CD/CONV. Hence, with this definition we will just need to set SCF_TYPE and CORRELATION_TYPE options. What do you think? @loriab @CDSherrill . Ugur",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-195054616:16,test,testing,16,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-195054616,1,['test'],['testing']
Testability,"Hi Lori,. dfomp2p5-grad2 and df-omp3-grad2 tests were failing due to wrong scf solutions. Both are fixed now. . Best regards,; Ugur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-157844332:43,test,tests,43,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157844332,1,['test'],['tests']
Testability,"Hi Yi,. Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:172,test,testing,172,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,12,"['log', 'test']","['logic', 'test', 'testing', 'tests']"
Testability,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:148,test,testing,148,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214,1,['test'],['testing']
Testability,"Hi all! I was working on folding the `PK_ALGO` keywords into `SCF_SUBTYPE`, and I ran into an issue that may be worth discussing. . By default, using `OOC_YOSHIMINE` and `OOC_REORDER` as `SCF_SUBTYPE`s the way we were discussing causes the calculation to throw an exception. The issue is because, in the SAD guess, DFJK is used by default; and `SCF_SUBTYPE` applies to the SAD guess DFJK (at least MemDFJK currently, and soon DiskDFJK) as well. Since `OOC_YOSHIMINE` and `OOC_REORDER` would be used as the keyword for the SAD DFJK, and since DFJK doesn't support those keywords explicitly for `SCF_SUBTYPE`, the calculation throws an exception. Note that setting `SAD_SCF_TYPE=DIRECT` eliminates this issue entirely. There are probably a few ways to resolve this, if we choose to explicitly continue on this path:. 1. As mentioned above, simply force `SAD_SCF_TYPE` to another option (like `DIRECT`) for PK calculations. I'll admit I'm not a big fan of this approach since DF is more performant, although it may not matter in the grand scheme of things since it's just the SAD guess. ; 2. Force `OOC_YOSHIMINE` and `OOC_REORDER` to work with the DFJK algorithms. The logical way to do this would be to have those keywords act the exact same as `SCF_SUBTYPE=OUT_OF_CORE` for DFJK. I'm a bit iffy on this one, as well, since it may imply that the three out-of-core keywords have different impacts on DFJK when they really don't. Documentation can clear that up, but still. What does everyone think?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327:1167,log,logical,1167,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1523608327,2,['log'],['logical']
Testability,"Hi all, . I just updated the density screening code with the UHF/ROHF cases. I also added a test in the test_erisieve.py pytest file that ensures the same number of shell quartets are being screened out with RHF and UHF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-924242589:92,test,test,92,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-924242589,1,['test'],['test']
Testability,"Hi all, I added integral hashing to the direct JK class for separate J and K matrix builds, to avoid doing redundant, expensive ERI computations when building linK and then building J. I also reran all the C tests (all passing).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085:208,test,tests,208,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-981225085,1,['test'],['tests']
Testability,"Hi all,. I am out of Country for the International Junior Science Olympiad (IJSO), hence I could not catch up with you. I know the problem for large molecules, it is because of int. I think if I change all ints to long long int, the problem will be solved. When I find an available time I can take a look. Meanwhile, you can use your patch and update dfocc as long as your patch passes all dfocc tests. Alternatively, a volunter may change all int data types to LLI for dfocc. @devinamatthews @dgasmith . Best regards,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405:396,test,tests,396,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562608405,1,['test'],['tests']
Testability,"Hi all. Thanks for the quick response! :). I implemented b86bpbe in; nwchem back in the day, but psi4's results are a bit off (not too; much, a bit over 1e-3). I'll try to figure out what's going on when I; have some time (attending a conference right now), add b86bpbe to; the dft1 test, and update the pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/438#issuecomment-230823292:283,test,test,283,https://psicode.org,https://github.com/psi4/psi4/pull/438#issuecomment-230823292,1,['test'],['test']
Testability,"Hi everyone,. You can use my CASPT2 test test13 (; https://github.com/SebWouters/CheMPS2/blob/master/tests/test13.cpp.in ),; but with DMRG instead of FCI as solver. Just make sure to use a very small; Davidson residual tolerance for the last sweep (1e-9 or 1e-10). Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/388#issuecomment-223890082:36,test,test,36,https://psicode.org,https://github.com/psi4/psi4/pull/388#issuecomment-223890082,2,['test'],"['test', 'tests']"
Testability,"Hi folks - I'd like to help with this, although I'm not familiar with the psi4 code internals. Do you need reference values for the tests? (on what systems?). I'm wondering if the gcp part of r2SCAN-3c would affect the results in any test with a single molecule; do we need something like a water dimer?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1732451176:132,test,tests,132,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1732451176,2,['test'],"['test', 'tests']"
Testability,"Hi there, thanks a lot for including me on this. :) . Transition state optimization is implemented, but we have not tested it extensively against other codes. It does work quite well for in-house applications containing 50+ atoms. I'm very interested to see how you run these optimizations directly in Psi4. It should be a lot more efficient than calling Psi4 repeatedly on the command line. Also happy to provide examples of constrained optimization. Let me know if you need any.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462:116,test,tested,116,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-615052462,1,['test'],['tested']
Testability,"Hi, thank you very much for your response. > I would ordinarily advise putting psi4 is a separate conda env, not the base one. That seems awkward in colab (has to be activated per cell!) but is a possibility, https://stackoverflow.com/questions/53031430/conda-environment-in-google-colab-google-colaboratory. I tried this and am able to install psi4 and even import it without any errors. [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test`; kindly let me know if this mean that psi4 is in functional state.; Here is the `conda list` output in case it is needed.; [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use. Just to make sure, psi4 is no longer supported on python3.7, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152894724:395,test,test,395,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152894724,3,['test'],['test']
Testability,"History contamination aside, the need to ""fix"" the new frozen core and ECP test indicates that some other commit in the last few days has **changed** the computed energies for this case. I strongly recommend we figure out what the cause of this change is before pulling in. Oddly enough, it looks like #1456 was merged before Peter's last commit that passed started running. I'm assuming that's a perfect alibi for #1456, which was going to be my prime suspect otherwise.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-452654324:75,test,test,75,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-452654324,1,['test'],['test']
Testability,"Hmm, I got an ADIIS error in windows (on a pytest) for my tests. Is this to be expected?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2550#issuecomment-1104634251:58,test,tests,58,https://psicode.org,https://github.com/psi4/psi4/pull/2550#issuecomment-1104634251,1,['test'],['tests']
Testability,"Hmm, I'm struggling to get my tests to give me a good agreement. From the [original publication](http://dx.doi.org/10.1007/s00214-005-0681-9) for the cc-pvdz-PP pseudopotentials for the Cu (and other) metals, the ionisation energy of Cu should be 165.26 kcal/mol with CCSD(T). In Gaussian 09, with the basis set downloaded from EMSL, I get an energy of 165.75 kcal/mol, which I suppose is reasonable. In Psi4, I get an energy of 166.02 kcal/mol. In case of Au ionisation energy, the difference (200.23 kcal/mol in the paper, 202.92 kcal/mol in Psi4) is more than 1%. I'm quite stumped. If anyone has any idea what's going on, please let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376531582:30,test,tests,30,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376531582,1,['test'],['tests']
Testability,"Hmm, can't test because I haven't pulled the latest rebase, but maybe props4 should have _only_ `quicktests`, not both `shorttests;quicktests`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235154773:11,test,test,11,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235154773,1,['test'],['test']
Testability,"Hmm, more inclined to trust qchem and libxc here. The old Psi4 probably handled singularities in a different way. I think I’m ok with these differences. . -Daniel Smith; Sent from my iPhone. . > On Feb 11, 2018, at 14:13, PeterKraus <notifications@github.com> wrote:; > ; > @PeterKraus commented on this pull request.; > ; > In tests/libxc/dft-water/input.dat:; > ; > > + 'wB97': -76.3680050769001, #TEST; > +'HCTH120': -76.37568880282406, #TEST; > + 'dlDF': -76.8428069903893, #TEST; > + 'PBE0': -76.30113068157736, #TEST; > + 'B97-1': -76.36001872648792, #TEST; > + 'PW91': -76.35555307829662, #TEST; > + 'B97-D': -76.34490642131334, #TEST; > + 'M05': -76.3495817363072, #TEST; > + 'B3LYP': -76.38509296980465, #TEST; > +'HCTH407': -76.37515280900291, #TEST; > +'HCTH147': -76.37958046443578, #TEST; > + 'SOGGA': -75.97737386477169, #TEST; > + 'B97-2': -76.35924563701468 #TEST; > +} #TEST; > +; > +for func in qchem_data.keys(): #TEST; > I've tried implementing SOGGA, however there's a problem:; > ; > Water test:; > SOGGA Psi4 dev: -75.9775599; > SOGGA Psi4 1.0: -75.9773739; > SOGGA Q-Chem: -75.9775523; > ; > My implementation comfortably passes against Q-Chem, but doesn't pass the tight criterium compared to old Psi4.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880#issuecomment-365470158:328,test,tests,328,https://psicode.org,https://github.com/psi4/psi4/pull/880#issuecomment-365470158,17,"['TEST', 'test']","['TEST', 'test', 'tests']"
Testability,"Hmm, the build with internal Boost failed for other reasons. Nothing was printed to STDOUT, but the `$build-dir/CMakeFiles/CmakeError.log` file contains:. ```; Determining if the function MKL_Free_Buffers exists failed with the following output:; Change Dir: /scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp. Run Build Command:""/usr/bin/gmake"" ""cmTC_13b4e/fast""; /usr/bin/gmake -f CMakeFiles/cmTC_13b4e.dir/build.make CMakeFiles/cmTC_13b4e.dir/build; gmake[1]: Entering directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; Building C object CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers -o CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -c /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/share/cmake-3.5/Modules/CheckFunctionExists.c; Linking C executable cmTC_13b4e; /blues/gpfs/home/software/spack/opt/spack/linux-x86_64/gcc-6.1.0/cmake-3.5.2-vxtbzsxomc5qwe4axqm2nog2bpy5v4ya/bin/cmake -E cmake_link_script CMakeFiles/cmTC_13b4e.dir/link.txt --verbose=1; /blues/gpfs/home/software/spack/lib/spack/env/gcc/gcc -std=c99 -DRESTRICT=__restrict__ -DFUNDERSCORE=1 -fPIC -fopenmp -DCHECK_FUNCTION_EXISTS=MKL_Free_Buffers CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o -o cmTC_13b4e -rdynamic; CMakeFiles/cmTC_13b4e.dir/CheckFunctionExists.c.o: In function `main':; CheckFunctionExists.c:(.text+0x15): undefined reference to `MKL_Free_Buffers'; collect2: error: ld returned 1 exit status; gmake[1]: *** [cmTC_13b4e] Error 1; gmake[1]: Leaving directory `/scratch/ajstewart/spack-stage/spack-stage-HKaV_0/psi4-0.5/spack-build/CMakeFiles/CMakeTmp'; gmake: *** [cmTC_13b4e/fast] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226015782:134,log,log,134,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226015782,1,['log'],['log']
Testability,"Hmm, there seems to be an issue with temporary files being left behind in the `energy` and `gradient` calls if they're not routed through the `cbs_gufunc` routines. If I call `clean()` in between the failing tests [like so for `cbs-xtpl-energy`](https://github.com/psi4/psi4/files/1886155/cbs-xtpl-energy-mod.txt), the test passes fine. `_cbs_gufunc()` calls `clean()` for single calls here:; https://github.com/psi4/psi4/blob/c1bb2fef750fc7a214fd873f8a7c095780017bf9/psi4/driver/driver_cbs.py#L1571-L1580",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379446318:208,test,tests,208,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379446318,2,['test'],"['test', 'tests']"
Testability,"Hmm, well thats interesting. Would you mind running the boroxine test case with the DF-MP2 module and post the result? Best way to access this module is to simply request 'energy('MP2')`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/408#issuecomment-225929051:65,test,test,65,https://psicode.org,https://github.com/psi4/psi4/issues/408#issuecomment-225929051,2,['test'],['test']
Testability,"Hmmm, people should double check this list.... it may be that we have a; useful feature and nobody bothered to write a test case for it (development; of the test cases was not done in a systematic fashion...). In particular; @lothian and @fevangelista should check that these bits really are; extra/obsolete. On Mon, Nov 21, 2016 at 10:37 PM, Lori A. Burns notifications@github.com; wrote:. > I cleared out all the library files on the list, and they didn't put up a; > fight. Doing a full testsuite now.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/525#issuecomment-262139161, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdk9MUAdFAT5TwLyNOX22XiVbROAWks5rAmNtgaJpZM4K40wH; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262319020:119,test,test,119,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262319020,6,['test'],"['test', 'testsuite']"
Testability,"Hmmm. The fnocc2 can be explained by the following diff.... ```; -energy('g2'); -refg2 = -76.332048016380 #TEST; -refgibbs = -76.349644827450 #TEST; +energy('g2',dertype=1); +refg2 = -76.332048079709 #TEST; +refgibbs = -76.349644891507 #TEST; ```. that was part of my last set of commits. I updated the reference values to reflect that I'd switched to analytic Hessians. Then when I committed it, I realized that analytic Hessians require angular momentum beyond what Travis can handle, so I switched back to finite differences but forgot to roll back the reference values. Feel free to revert the reference values, and that'll be fine. The other two problems appear to be a seg fault, so I'll try to check out your changes and see if I can reproduce. Sorry for the hassle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235102762:107,TEST,TEST,107,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235102762,4,['TEST'],['TEST']
Testability,"Holger, very glad you are taking this on!. On Fri, Apr 5, 2019, 2:32 AM Holger Kruse <notifications@github.com> wrote:. > Description; >; > This *work-in-progress* PR implements standard grid pruning techniques,; > where one assumes that the electron density is largely isotropic close to; > the atomic centre and thus coarse grids are sufficient. Typically the; > atomic integration sphere is divided into several (3-4) regions where the; > outer region gets the most accurate grid and the grid get step-wise more; > coarse towards the inner region(s).; >; > Additionally this PR changes the Bragg-Slater (BS) radii and completes the; > Treutler-Ahlrichs integration code with the recommended mapping values. Old; > radii were of unknown origin.; >; > *Because of the updated BS radii, this PR will impact the total energies; > of any DFT calculation and can change how many grid points are generated; > even without pruning.* (11/33 DFT tests fail); > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - updated BS radii and extended to 104 elements; > - implementation of missing Treutler-Eta mapping parameter; > - DFT_PRUNE_TYPE keyword:; > - Treutler grid pruning (DFT_PRUNE_TYPE=TREUTLER); > - a more robust grid pruning (DFT_PRUNE_TYPE=ROBUST); > - old pruning using a function (DFT_PRUNE_TYPE=FUNCTION); > - modified Becke mu from Ochsenfeld for smoother integration (however; > no time savings); > - possibility to scale Treutler-Etas to better treat diffuse basis sets; > - better print out of options; > - testing and error overview; > - option to properly disable all pruning (currently only indirect way); >; > Questions; >; > - How to C++? Explicit guidance or help is welcome.; > - All the very tight DFT and VV10 tests break or will break. How to; > 'solve' that?; > - Do we want to be able to switch between old and new BS radii (as; > expert-only option)?; > - DFT_PRUNING_SCHEME re-work to not have DFT_PRUNE_TYPE as competing; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922:939,test,tests,939,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-480256922,2,['test'],['tests']
Testability,"Hooray, that looks great. Skipped or xfailed is no problem (just how we handle testing optional dependencies). Outright failed is a problem, but I don't see any of those. I think you're good to go. I wish I understood clearly what was causing your psi4conda problem, but that's awkward to debug. I suspect interference in python path btwn active python (in anaconda) and active psi4 (in psi4conda).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875260933:79,test,testing,79,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875260933,2,['test'],['testing']
Testability,"Hooray, we finally have clean CI and tests on this combo dfocc+remp PR!. Now, I'll break off `occ` as the first piece for review. . I think I favor `REMP` to `REMP2` in QCVariables, just to be specific.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1200053455:37,test,tests,37,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1200053455,1,['test'],['tests']
Testability,"How about diverting to findif, like PCM? This'll need changing for DDD, but at least we'll notice. (Note that PR not in self-consistent state at present. test needs replacing.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2200#issuecomment-869848956:154,test,test,154,https://psicode.org,https://github.com/psi4/psi4/pull/2200#issuecomment-869848956,1,['test'],['test']
Testability,"How did you come to be running those as none are in the test suite? `large-atoms` is waiting on ECP tech. `min-input` was essentially replaced by the stdsuite. The latter two can't run outside of ctest anyways, and I don't think we want to encourage the sowreap capability.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2234#issuecomment-876570990:56,test,test,56,https://psicode.org,https://github.com/psi4/psi4/issues/2234#issuecomment-876570990,1,['test'],['test']
Testability,How fares this? Can tests be added (even integral-level ones like https://github.com/psi4/psi4/blob/master/tests/mints3/input.dat if that's where the development is at)?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1081#issuecomment-583591202:20,test,tests,20,https://psicode.org,https://github.com/psi4/psi4/pull/1081#issuecomment-583591202,2,['test'],['tests']
Testability,"How timely. Unless he's really quick with a test case, I think sep PR. It definitely qualifies as bugfix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-385631564:44,test,test,44,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-385631564,1,['test'],['test']
Testability,"However, now my test run crashes with the message below. Is it trying to write a file in a directory where I don't have permissions or so?. Traceback (most recent call last):; File ""/home/apps/psi/psi4conda/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 860, in select_ccsd_t_; return func(name, **kwargs); File ""/home/apps/psi/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2197, in run_ccenergy; core.cctransort(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::psio_write(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255:16,test,test,16,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467172255,1,['test'],['test']
Testability,"Hrm, I was under the impression that none of the dmrg tests are being exercised by `quicktests`, so I run the dmrg tests in addition. Granted, this does not strictly have anything to do with `quicktests` I guess, but I think the dmrg tests should either interface with `quicktests` or at least be of the same order of magnitude.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/474#issuecomment-249299134:54,test,tests,54,https://psicode.org,https://github.com/psi4/psi4/issues/474#issuecomment-249299134,3,['test'],['tests']
Testability,"Hrm, I would've sworn it's refblas, but after checking it seems the Debian chemps-1.7 build pulled in ATLAS (base version). It's still curious that this would be the only failing testcase if there's an issue with the linear algebra packages...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-222316099:179,test,testcase,179,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-222316099,1,['test'],['testcase']
Testability,"Huh, what about that - the tests pass now, even though functionally the code should be the same as before. So, this is ready to be merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-450631970:27,test,tests,27,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-450631970,1,['test'],['tests']
Testability,"I *think* I have a version that maintains the nice printing functionality (and shoves the necessary info into a struct, and actually uses the nicer `LebedevGridMgr::findOrderByNPoints` function and other `LebedevGridMgr` functions) but I can't actually test if this builds until I get home due to #reasons. I'll shove it upstream on my local branch and see if it breaks in the test builder.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1270690643:253,test,test,253,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1270690643,2,['test'],['test']
Testability,"I _suspect_ I've found the bug. The culprits are lines like [these](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/occ/t2_2nd_general.cc#L197-L203). I'm going to give a simplified presentation of the theory to explain why this particular bug caused T2 convergence problems but no other obvious problems:; In OMP3 theory, you write a Lagrangian energy functional, which is the OMP2 Lagrangian energy functional plus additional terms. In OMP2.5, you multiply those new terms by a factor of 1/2. The terms enforcing the first order amplitude constraint are all in the OMP2 part of the Lagrangian, and the terms enforcing the second order amplitude constraint are all in the additional terms of the Lagrangian. Now, the OMP2.5 in `occ` is the OMP3 implementation _except_; (1) additional terms not containing second order amplitudes are explicitly halved, and; (2) additional terms containing second order amplitudes are implicitly halved by halving the second order T2 amplitudes. Let's imagine we got the exactly right second order T2 amplitudes. We then halve them, per step 2 above. On the next iteration, of course we're going to find our second order amplitudes are off!. I've made the changes on a local branch. OMP3 tests all pass, but `omp2p5-grad2` has changed in the fifth decimal place, which is enough to cause a failure. This could indicate a problem with my changes, or that there was error in the test gradients because the second order amplitudes were not well converged. While a finite difference test should resolve this, I can't converge the relevant OMP equations in the current Psi implementation sufficiently tightly to test... I'm going to hack out a Psi4Numpy implementation to settle the matter. In the meantime, obligatory ping of @bozkaya in case I've missed something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866:1228,test,tests,1228,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-583900866,8,['test'],"['test', 'tests']"
Testability,I added a global `SCREENING` that can either be `SCHWARZ` or `CSAM` and is recognized by the JK objects. There's also an extra test to compare scf energies.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499#issuecomment-497372547:127,test,test,127,https://psicode.org,https://github.com/psi4/psi4/pull/1499#issuecomment-497372547,1,['test'],['test']
Testability,I added a short gradient test as requested and the DOI I wanted.; From my side this is ready.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1320#issuecomment-444155213:25,test,test,25,https://psicode.org,https://github.com/psi4/psi4/pull/1320#issuecomment-444155213,1,['test'],['test']
Testability,"I added some experimental changes to `electricfield.{cc,h}` in order to compute; field integrals (for the induction operator) and electric field expectation values (needed to solve for induced moments) for multiple sites/coordinates at once. Even though I don't like the code I implemented, it gives massive performance improvements.; In my tests (Python code is uploaded [here](https://gist.github.com/maxscheurer/4736a100ff5de12190ef27f7bc2eaade)), I computed integrals at 2000 random points for Water/cc-pVQZ, for which I get a 25x speed-up compared to the existing implementation. EFP would also benefit from these performance improvements. Since the code is rather ugly at the moment, I'm thankful for any suggestions on how to proceed from here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-502876555:341,test,tests,341,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-502876555,1,['test'],['tests']
Testability,"I added tests that check ccsort/transqt2 give the same results as other tests provided they are installed. These tests will not fiddle with the `run_cctransort` option if pasture is not installed. I also cleaned up some of my fixup commits since the twin PR has been closed. . The last things I need to do is finalize the pasture install instructions to go in the PastureNotFoundError message, and then this is ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534#issuecomment-265466569:8,test,tests,8,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265466569,3,['test'],['tests']
Testability,I added the finite difference test and I documented the function.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389#issuecomment-1004063072:30,test,test,30,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1004063072,1,['test'],['test']
Testability,I added various error statistics over the S22 benchmark set.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-495132122:46,benchmark,benchmark,46,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495132122,1,['benchmark'],['benchmark']
Testability,"I agree that `ROBUST` should be the default. We might want to leave the default to no pruning and then make an issue reviewing the timings, accuracy, and change log notes before switching the default over. Whenever we change the results the DFT code obtains even if minor I do get a little nervous.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-495416288:161,log,log,161,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495416288,1,['log'],['log']
Testability,"I agree that `cclambda` should honor the user's `r_convergence` choice, but the default settings we chose are not to avoid breaking tests but because tighter settings are wholly unnecessary (and often exceedingly difficult to achieve) for transition properties. The `cc55` test case just revealed the problem on certain hardware.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2520#issuecomment-1089609984:132,test,tests,132,https://psicode.org,https://github.com/psi4/psi4/issues/2520#issuecomment-1089609984,2,['test'],"['test', 'tests']"
Testability,I agree that a CMake Libint1 build failed to be least common denominator for downstream on two fronts: (1) no `.pc` files and (2) no `libr12` library. I've fixed the first one Libint-side. Second I don't particularly have time for and can't do anyways until someone volunteers to test the resulting `libr12`. The one-line patch on the packager side to use the libtool build with Psi4 is above. Closing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282:280,test,test,280,https://psicode.org,https://github.com/psi4/psi4/issues/1589#issuecomment-495759282,1,['test'],['test']
Testability,"I agree that option B is the best. The effect of the fix will be very minor. This can be easily tested by comparing to DCT code with conventional integrals (and we have done this in the past). Also, current version of the code should recover the exact DCT energy and gradient when using a very large auxiliary basis set.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373:96,test,tested,96,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-474901373,1,['test'],['tested']
Testability,"I agree that with no charges the function that I changed should not be called. I am running the benchmark on a shared cluster, so the differences in the speedup with no charges reflect the uncertainty in the benchmark. Although the pairs of columns with and without charges are run on the same node in the same job. I ran the benchmark again using `schedule(dynamic)` to directly compare to `schedule(guided)` copied from my last comment. Cores | Guided, no charges | Guided, with charges | Dynamic, no charges | Dynamic, with charges; ---- | ---- | ---- | ---- | ----; 1 | 1.00 | 1.00 | 1.00 | 1.00; 2 | 1.67 | 1.29 | 1.60 | 1.26; 4 | 2.72 | 2.18 | 2.66 | 2.07; 8 | 3.92 | 3.57 | 3.74 | 3.40; 16 | 4.87 | 5.04 | 4.68 | 5.06; 32 | 5.80 | 7.21 | 5.11 | 7.16. It looks like `dynamic` is slightly lower speedup than `guided`, but the two results are probably indistinguishable given the precision of my benchmark. This might also depend on the system and basis set used. The heaviest atom in my system is an oxygen with a jun-cc-pVDZ basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868:96,benchmark,benchmark,96,https://psicode.org,https://github.com/psi4/psi4/pull/1946#issuecomment-656907868,8,['benchmark'],['benchmark']
Testability,"I agree with @andysim --- Rollin's bug was only uncovered with debug flags; turned on, so it makes sense to retain at least one debug build. On Thu, Feb 11, 2016 at 8:56 AM, Andy Simmonett notifications@github.com; wrote:. > Thanks, @jgonthier https://github.com/jgonthier. Given that the Travis; > CI tests run every time somebody submits or merges a PR, we're going to be; > running that test a lot. If we don't see the problem again, it was probably; > just a strange artifact of the invalid read that was non-deterministic. If; > we keep seeing it after you have fixed that read, we probably just need to; > reduce the optimization level for that one routine. Either way, thanks for; > checking it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/237#issuecomment-182875337.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182877975:302,test,tests,302,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182877975,2,['test'],"['test', 'tests']"
Testability,"I agree with the point that the code should go through and report zeros, so; we can do database stuff, etc. I think the thermo code can easily be fixed for this (in fact Brandon has a; new version that has already been tested for atoms). Looks like the first; failure we're hitting is in finite differences. @psi-rking should give; that some thought. David. On Thu, Mar 31, 2016 at 11:31 PM, drhaney notifications@github.com wrote:. > Mac's Beer & Wine confirms that they will happily reserve gift cards for; > you at the register, and you developers need to do better if you want that; > beer.; > ; > Usually, a QC app 'fails' gracefully on atomic systems.; > By 'fail', I mean that it should: _handle stupid requests gracefully._; > ; > In practice, the app returns ZPE, Ethermal, Hthermal = 0.0,0.0,0.0, and a; > reasonable total entropy 30 < S <40 cal/mol-K. Granted, Stotal = Strans and; > may be of little value. The user adds in some Boltzmann kT multiples to; > internal E,H as needed.; > ; > Total energies and enthalpies of atoms are needed for calculating; > molecular enthalpies of formation by the atomization method. I want this; > because I'm writing composite method modules for Psi4 with the goal of; > replicating Gaussian and GAMESS results.; > ; > It may be invidious to point out that Gaussian, GAMESS, and Nwchem are all; > well-behaved on the atomic cases, but those applications are why I'm here.; > [rant on egregious software licenses and general dislike of Fortran; > redacted]; > ; > Next up: CCSD(T) and the H2 molecule, MP2 correlation energy of the; > hydrogen atom. (joke!); > Thanks to all.; > -drh; > ; > —; > You are receiving this because you commented.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332#issuecomment-204230882",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204388708:219,test,tested,219,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204388708,1,['test'],['tested']
Testability,"I agree, it'd be nice to catch those and warn ppl off from that feature of GBS format. In the existing logic https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L183-L184 is already catching only `<element symbol(s)> 0` through the zero near the end of https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L115. This would be a general (to all files read), not specific, catch, but if you change that `0` in [the regex](; https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L115) to `\d+` then add the below after https://github.com/psi4/psi4/blob/master/psi4/driver/qcdb/libmintsbasissetparser.py#L184, does that catch and provide better guidance?. ```; gbsint = int(atom_array.match(line).group(2)); if gbsint != 0:; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Unsupported basis to atom by number assignment. Use ""assign"" statements as in https://github.com/psi4/psi4/blob/master/tests/mints2/input.dat : line %d: %s"""""" % (lineno, line)); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1270#issuecomment-455333178:103,log,logic,103,https://psicode.org,https://github.com/psi4/psi4/issues/1270#issuecomment-455333178,4,"['log', 'test']","['logic', 'tests']"
Testability,"I agree, may as well test. Here's a slight extension of your original problem input. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. def unaug_focal(func, label, **kwargs):; kwargs['scf_basis'] = kwargs.get('scf_basis', 'cc-pVQZ'); kwargs['scf_scheme'] = kwargs.get('scf_scheme', driver_cbs.xtpl_highest_1). kwargs['corl_wfn'] = kwargs.get('corl_wfn', 'mp2'); kwargs['corl_basis'] = kwargs.get('corl_basis', 'cc-pV[TQ]Z'); kwargs['corl_scheme'] = kwargs.get('corl_scheme', driver_cbs.corl_xtpl_helgaker_2). kwargs['delta_wfn'] = kwargs.get('delta_wfn', 'ccsd(t)'); kwargs['delta_wfn_lesser'] = kwargs.get('delta_wfn_lesser', 'mp2'); kwargs['delta_basis'] = kwargs.get('delta_basis', 'cc-pV[dT]Z'); kwargs['delta_scheme'] = kwargs.get('delta_scheme', driver_cbs.corl_xtpl_helgaker_2). if label == 'custom_function':; label = 'Unaug Focal'; return driver_cbs.cbs(func, label, **kwargs). ans = 0.0131014 #TEST; E_func = energy(unaug_focal, bsse_type=""nocp""); E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(ans, E_method_basis, 6, ""IE mtd/bas"") #TEST; compare_values(ans, E_cbs, 6, ""IE cbs"") #TEST; compare_values(ans, E_func, 6, ""IE func"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1119#issuecomment-410490928:21,test,test,21,https://psicode.org,https://github.com/psi4/psi4/pull/1119#issuecomment-410490928,5,"['TEST', 'test']","['TEST', 'test']"
Testability,I also experienced no change by trying that. Watching the build logs I noticed both ERD and LibInt are built. I do not recall this being the default behavior when I was using ERD about a year ago. Is it possible some of the CMake infrastructure changes caused this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/171#issuecomment-133544184:64,log,logs,64,https://psicode.org,https://github.com/psi4/psi4/issues/171#issuecomment-133544184,1,['log'],['logs']
Testability,"I also got the Python frontends fixed, so libxc 5.1.0 should be good for testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754879190:73,test,testing,73,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754879190,1,['test'],['testing']
Testability,I also ran a full test suite; nothing DFT related fails; ```; 	102 - cubeprop (Failed); 	103 - cubeprop-frontier (Failed); 	368 - cubeprop-esp (Failed); 	385 - psi4numpy-cphf (Failed); 	386 - psi4numpy-dfmp2 (Failed); 	387 - psi4numpy-rhf (Failed); 	388 - psi4numpy-rhf-gradient (Failed); 	389 - psi4numpy-rhf-hessian (Failed); 	390 - psi4numpy-fci (Failed); 	392 - python-energy (Failed); 	393 - python-curve (Failed); 	394 - python-pubchem (Failed); 	395 - python-mints9 (Failed); 	396 - python-mints2 (Failed); 	397 - python-cc54 (Failed); 	398 - python-3-index-transforms (Failed); 	399 - python-vibanalysis (Failed); 	400 - python-mints13 (Failed); 	401 - python-memdfjk (Failed); 	402 - json-v11-energy (Failed); 	403 - json-v11-gradient (Failed); 	404 - json-schema-1-energy (Failed); 	405 - json-schema-1-ghost (Failed); 	406 - json-schema-1-orient (Failed); 	407 - json-schema-1-throws (Failed); 	408 - json-schema-1-gradient (Failed); 	409 - json-schema-1-properties (Failed); 	469 - chemps2-scf-n2 (Failed); 	470 - chemps2-ci-h2o (Failed); 	471 - chemps2-caspt2-n2 (Failed); 	472 - chemps2-natural-orbital (Failed); 	473 - chemps2-caspt2-small (Failed); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260#issuecomment-424435249:18,test,test,18,https://psicode.org,https://github.com/psi4/psi4/pull/1260#issuecomment-424435249,1,['test'],['test']
Testability,"I also tried reinstalling via executing the .exe file in my downloads directory and the same error pops up . ""C:\Users\erikc>psi4 --test; Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 55, in <module>; from . import core; ImportError: DLL load failed while importing core: The specified module could not be found. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\Users\erikc\psi4conda\Scripts\psi4-script.py"", line 182, in <module>; import psi4 # isort:skip; File ""C:\Users\erikc\psi4conda\lib\site-packages\psi4\__init__.py"", line 60, in <module>; raise ImportError(""{0}"".format(err)); ImportError: DLL load failed while importing core: The specified module could not be found.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875174721:132,test,test,132,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875174721,1,['test'],['test']
Testability,"I am beginning to think we should forgo Travis CI with debug and focus it solely on release builds. That's where differences between the generated binaries is going to differ the most. > Just would like to add that if we use travis, you basically must let all test cases pass before merging. This sounds great to me. We shouldn't allow code to be committed that potentially causes problems for users using compiler combinations we do not routinely use. Initially, we may have many random issues arising such as the possible memory issue in the stability code but it's better for the code and the user to investigate and fix them. > Extra fun to debug as we do not have a compiled gcc 5.0 around. This is a downside of travis. No, this is an upside of Travis CI. I have an Ubuntu box that already has gcc 5 installed. If needed, I can run Psi4 through it and Valgrind. . It's also great to have other resources for testing Psi with. We do have the [testboard](https://testboard.org/cdash/index.php?project=Psi) where additional compiler combinations can be added. However, the testboard is not holding anyone accountable to fixing the code. I propose Travis CI release builds with the following compiler versions:; - clang: 3.5, 3.6, 3.7, 3.8; - gcc: 4.8, 4.9, 5.2. clang 3.5 was released on September 3, 2014 and gcc 4.8.0 was released on March 22, 2013.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182861777:260,test,test,260,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182861777,5,['test'],"['test', 'testboard', 'testing']"
Testability,"I am looking to update the failing dft test where absolute energies are tested. Looking for opinions and advice:. options:; * A) reduce the comparison thresholds, where necessary. Down to 5 or 6 (from 7 or even higher); * B) make new reference values using the new BS radii. Perhaps cleanest test history about the origin of the numbers and best for gradients; * C) a mixture of both. these `ctest -L dft` fail on my machine:; 157 - dft-grad-lr1 (Failed); 159 - dft-grad-lr3 (Failed); 167 - dft-grad-meta (Failed); 169 - dft-grad1 (Failed); 170 - dft-grad2 (Failed); 171 - dft-psivar (Failed); 173 - dft1 (Failed); 174 - dft-vv10 (Failed); 178 - dft-omega (Failed); 390 - dft-custom-mgga (Failed); 423 - dftd3-grad (Failed); 431 - pcmsolver-dft (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739:39,test,test,39,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494012739,3,['test'],"['test', 'tested']"
Testability,"I am not 100% convinced the dispersion handling - the way it's currently implemented - is very good. I'd propose the following:. - move all method and functional specific parameters from elsewhere into `qcdb/dashparam.py`. This includes citation handling that's currently done in `procrouting/empirical_dispersion.py`. - the rest of psi4 python-side should be ""parameter-agnostic"", ie there are obvious differences whether the dispersion _type_ is das2009, d2, or d3 (or later vv10) - this should get figured out (as it currently is) in `procrouting/empirical_dispersion.py` accordingly. . - the parameters and citations should be passed into the `EmpiricalDispersion` class from outside, whether it's the functional's dictionary or user overrides or dashparams database. It might be helpful to settle on _one_ interface as opposed to the currently-used two (tuple_params tuple or dashparams dict in kwargs). In fact, EmpiricalDispersion class shouldn't be doing any parameter lookup on its own. The `dashparam.dashcoeff` dict is already trawled through in `procrouding/dft_funcs/dict_builder`, where we modify the method's name and aliases, the dispersion `dashparam` dict can (should?) be appended too. However, I have a feeling that this is a little bit of a scope creep. I'm quite happy with the functional part as it is now and wouldn't mind having this merged as is (if the tests pass), and leave the empirical / non-local dispersion re-work for eg. the VV10 implementation...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-375392872:1380,test,tests,1380,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-375392872,1,['test'],['tests']
Testability,"I am not really sure the Pade matters. However I am still a bit confused by the wording: ""ROT is defined by DOCC + ACT + VIR removed"", what is removed? I have not tried to compare the ROT vs individual blocks of DOCC + ACT + VIR, maybe I should do that to figure out what's wrong. The PR is now failing on a molden test (which apparently I contributed to :) but I am wondering if such test is meaningful. After all the orbital phase is arbitrary so the test could fail without anything being wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1847#issuecomment-597961289:315,test,test,315,https://psicode.org,https://github.com/psi4/psi4/pull/1847#issuecomment-597961289,3,['test'],['test']
Testability,"I am open to finding a way to force the user into using only the appropriate combinations of `basis`/`basis_relativistic` if that sounds like a more sensible choice. In principle it would be enough to eliminate the `basis_relativistic` option and always set `basis_relativistic` to a decontracted version of `basis`. However, this could be problematic when the decontracted basis has linear dependencies (I am working on this issue but I am currently slightly stuck/too busy).; The reason we have so many options was just for testing reasons, and to allow cases where `basis_relativistic` is a basis different from `basis` (e.g. to remove linear dependencies directly in the deconstructed basis). The HF example above should do. Once you address the Python issue I can run some checks. Beside external tests, there is at least one way to tell if things are internally consistent in psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288920918:526,test,testing,526,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288920918,2,['test'],"['testing', 'tests']"
Testability,"I am pretty sure this is a false failure in travis due to a server being down (see log below). Can someone from @psi4/p4pub-rw restart the travis tests? I don't think I should need to push a commit just to get the build to run. . ```; $ git checkout -qf FETCH_HEAD; Adding APT Sources (BETA); $ export DEBIAN_FRONTEND=noninteractive; 0.18s$ curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -; gpg: no valid OpenPGP data found.; The command ""curl -sSL ""http://llvm.org/apt/llvm-snapshot.gpg.key"" | sudo -E apt-key add -"" failed and exited with 2 during .; Your build has been stopped. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/395#issuecomment-222983339:83,log,log,83,https://psicode.org,https://github.com/psi4/psi4/pull/395#issuecomment-222983339,2,"['log', 'test']","['log', 'tests']"
Testability,"I assume this is also valid for DFT? If yes, it might be a good thing to also put in a DFT test case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-499966992:91,test,test,91,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-499966992,1,['test'],['test']
Testability,I believe this is corrected. Please test @fevangelista . Thanks!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/132#issuecomment-121978883:36,test,test,36,https://psicode.org,https://github.com/psi4/psi4/issues/132#issuecomment-121978883,1,['test'],['test']
Testability,I believe we have clean DDD test suite.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-568168497:28,test,test,28,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-568168497,1,['test'],['test']
Testability,"I can certainly try it. The crash seems to be related to the LRU caching mechanism, and it fails when it tries to lseek() on a file that is not open. Maybe the logic that would open the file sees that there is enough memory to hold everything in RAM and skips the file open, but then later the the sort assumes that file has been opened.; This is also supported by the `cachelevel 0` workaround working fine, just slowly. The fact that an LRU caching related function is getting called is unexpected by itself, as the [CC docs](https://psicode.org/psi4manual/master/cc.html) claim that LRU is not the default caching algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1246008451:160,log,logic,160,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1246008451,1,['log'],['logic']
Testability,"I can confirm that I can now build a freshly checked-out tree without needing to edit anything. (I did have to use -DOpenMP_LIBRARY_DIRS to point at the Intel version of libiomp5.so.). I did get:. `No such TARGET ""OpenMP::OpenMP_C""` and `No such TARGET ""OpenMP::OpenMP_Fortran""`. in the cmake output but it built and (the few tests before I killed it) ran fine. As a further test, I've also tried enabling lots of other optional bits (ambit, CheMPS2, dkh, libefp, simint, gdma, PCMSolver, and snsmp2) to check whether the fortran error caused any issues with them. It looks like everything builds apart from ambit (which looks like it was only just re-enabled and so probably needs tweaking somewhere). Building ambit bails out with the same lack of MathOpenMP that I was seeing before #1053:. ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=C;CXX;Fortran, C/CXX/Fortran=GNU/GNU/; -- Found TargetOpenMP: 1 ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:108 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /var/tmp/build/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:44 (find_dependency); cmake/FindTargetLAPACK.cmake:30 (find_package); CMakeLists.txt:90 (find_package). -- Configuring incomplete, errors occurred!; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/var/tmp/build/psi4/objdir/external/upstream/ambit/ambit_external-prefix/src/ambit_external-build/CMakeFiles/CMakeError.log"".; external/upstream/ambit/CMakeFiles/ambit_external.dir/bu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280:326,test,tests,326,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400326280,2,['test'],"['test', 'tests']"
Testability,"I can confirm that your input, @psi-rking, seems to work fine. I don't see any indeterminism either. When I turn symmetry off entirely, though, the IRC does quit early and I'm not sure why. I poked around the code a bit -- debugging this is a real headache, since I wrote it 6 years ago and the logic is pretty convoluted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-346417491:295,log,logic,295,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346417491,1,['log'],['logic']
Testability,"I can confirm these test cases fail on my machine with a psi4public pull from yesterday (OpenSuse 13.2, gcc 4.8.3)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-157368626:20,test,test,20,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-157368626,1,['test'],['test']
Testability,I can do some more detailed testing on the scope of this bug next week. (Something has come up that will commandeer the rest of this week for me.). The thing that I still don't understand is why this bug only afflicts _unrestricted_ references. Perhaps the indexing convention disagreement is limited to only a few integral blocks? I only checked that there was an index disagreement for the case I linked.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435176464:28,test,testing,28,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435176464,1,['test'],['testing']
Testability,"I can now finally explain why this bug is happening:; Assume you're cloning a ZMAT atom. [This line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.h#L372) I added in #1108 enforces that if ZMAT coordinates were computed for the parent, they be computed for the clone atom. When giving a ZMAT atom coordinates in space, the reference atoms need to already have coordinates in space computed. Psi checks this, naturally enough, with`CoordEntry.computed_` (via a getter). Because of that line in #1108, `computed_` will always be set correctly for ZMAT atoms, so if you only ever use ZMAT atoms, all is well. However, there is no mechanism in place to compute coordinates for Cartesians as well, so those are listed as not computed when Psi checks `computed_`. The fix seems clear enough to me: add a `compute` call in `CartesianEntry::clone` to mirror the one in `ZMatrixEntry::clone`. Because changes in `molecule` can have wide-reaching repercussions, I'll hold off on testing the fix until @loriab is done fixing the full test suite, so I can use it to safety check this PR. And with that realization, I am quite hopeful to get this in Psi 1.3 after all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1379#issuecomment-448234589:998,test,testing,998,https://psicode.org,https://github.com/psi4/psi4/pull/1379#issuecomment-448234589,4,['test'],"['test', 'testing']"
Testability,I can re-review when this passes tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731#issuecomment-1271707869:33,test,tests,33,https://psicode.org,https://github.com/psi4/psi4/pull/2731#issuecomment-1271707869,1,['test'],['tests']
Testability,"I can see an argument for both fast and rigorous CI solutions, and don't really have a strong opinion on how we should proceed. The minimal test may become important as we start getting more PRs; it's nice to be able to see if they're valid in a short window. That route is fine for me, as long as we plug the gaps with another test solution. Right now we only deal with a handful of PRs a day at most, so having to wait a few hours isn't too bad, which means your more extensive testing idea is valid. As I said, I don't really have a strong opinion; I was just making some suggestions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182898239:140,test,test,140,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182898239,3,['test'],"['test', 'testing']"
Testability,I can see the point for reducing the number of builds. I'm for it now. I'm wondering what's up with that failed test case.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182590148:112,test,test,112,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182590148,1,['test'],['test']
Testability,"I can try it out on ubuntu. A good test will also to run it actually on; debian/sid. Perhaps we can ask Michael?. 2015-07-20 17:37 GMT-04:00 Lori A. Burns notifications@github.com:. > Good point! I made commit 7e4889b; > https://github.com/psi4/psi4public/commit/7e4889b924e67be11c5f7b5d42c85673a90c5c17; > . If CMake pastes together a PATHS and PATH_SUFFIX and NAMES, it should; > get the Debian locations. If you should happen to try it out, let me know.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/150#issuecomment-123051328. ## . ---. dr. ir. Sebastian Wouters; Fellow of the Belgian American Educational Foundation; Princeton University; (address) Department of Chemistry; Frick Laboratory 351; Princeton, NJ 08544, USA; (e-mail) sebastianwouters@gmail.com. ---",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-123084638:35,test,test,35,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-123084638,1,['test'],['test']
Testability,I can try to test PR #388 on top of 1.0rc on Debian this weekend along with the newly uploaded v1.7,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-221836576:13,test,test,13,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-221836576,1,['test'],['test']
Testability,I can't explain why the second instance is not reading the orbitals. A couple of quick tests that would be useful: a) does adding `set guess read` before the call to your plugin (and after the SCF call) change the behavior? and b) does the same thing happen if you call SCF instead of your plugin on the second function call?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419#issuecomment-227780765:87,test,tests,87,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227780765,1,['test'],['tests']
Testability,"I can't quite figure out how to pass custom vectors via Psithon/PsiAPI using `psi4.properties`.; If I pass a list of vectors (e.g., dipole integrals), [this](https://github.com/maxscheurer/psi4/blob/1528bcfda6d55d32712f3e6be4b21a45abe90e55/psi4/driver/procrouting/proc.py#L2962) code block obviously fails... Directly passing vectors to `cpscf_linear_response` obviously works somehow, but I could not find anything in the test suite that explicitly covers the ""user-provided vector""-case at all... Are there any plugins/3rd party codes relying on calling `cpscf_linear_response` directly with custom vectors as arguments, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-964890817:423,test,test,423,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-964890817,1,['test'],['test']
Testability,"I can't reproduce it on my linux systems. What are the system and compiler; specs where you see the problem?. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Fri, Feb 5, 2016 at 1:19 PM, Andy Simmonett notifications@github.com; wrote:. > All of the clang tests are still failing on the CI system. It's not; > related to Boost, and appears to be a problem in the cctransort code. I; > cannot reproduce this problem on my linux machine - are you seeing it at; > all, @jturney https://github.com/jturney?; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/230#issuecomment-180480448.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-180492708:257,test,tests,257,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-180492708,1,['test'],['tests']
Testability,"I cannot reproduce this one. I pulled your branch and rebased it to master (which has not introduced any changes to the moinfo code) and it ran cleanly with address and memory sanitizers on my mac. I modified your changes to read:; ```c++; if (ref_wfn.frzcpi().n() != nirreps_ref) exit(42);; std::cout << ""DIMENSIONS "" << ref_wfn.frzcpi().n() << "" "" << nirreps_ref << std::endl;; ```; and it gave the following output:; ```; (base) QuickSilver:~/programming/psi4/obj_asserts (fix_nirreps) > DYLD_INSERT_LIBRARIES=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/10.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib psi4; Performing finite difference calculations; 5 displacements needed ... 1 2 3 4 5; 8 displacements needed.; 1DIMENSIONS 4 4; 2DIMENSIONS 4 4; 3DIMENSIONS 4 4; 4DIMENSIONS 4 4; 5DIMENSIONS 4 4; 6DIMENSIONS 4 4; 7DIMENSIONS 4 4; 8; ```; I tried the psimrcc-fd-freq1 test also and it runs just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479:927,test,test,927,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462363479,1,['test'],['test']
Testability,"I checked `ctest -R sapt` because I was expecting sapt6 to fail, being the most thorough per-term and per-sapt-level test. However, the Ind30 fault doesn't show up at that level because (1) we check elst/exch/ind/disp components but not e.g., elst10, elst20 terms and (2) the deltaHF term by definition compensates for (read: hides) the induction term problem. So current test suite is ok, though that itself is a failure demanding more tests. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1803#issuecomment-582743062:117,test,test,117,https://psicode.org,https://github.com/psi4/psi4/pull/1803#issuecomment-582743062,3,['test'],"['test', 'tests']"
Testability,"I checked all the optimization tests. I saw no major problems. A few of the cases now converge a bit faster. . opt-lindep-change/input.dat could be updated to the current energy after 3 steps, but this is not essential as we don't fully optimize this case. for opt10: we've changed basis sets, which is the reason for the different energy in the new output.ref. For some of the older cases, the testing criterion should be tightened. Specifically for ; opt1, opt1-fd, opt4, and opt5. The default SCF algorithm changed from PK->DF, and these output's are older. So I expect someone simply reduced the checking to only 3 decimals to maintain a PASS. We should tighten this up and be able to get 6 decimals in the energy - at least 5 - in a full optimization, at least. Note for tests such as opt 2, pk is specified and 6 decimals are checked already.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-197012335:31,test,tests,31,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-197012335,6,['test'],"['testing', 'tests']"
Testability,I checked the gradients with my pre-made tests and everything seems to be working properly. Thanks.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184#issuecomment-157532425:41,test,tests,41,https://psicode.org,https://github.com/psi4/psi4/issues/184#issuecomment-157532425,1,['test'],['tests']
Testability,"I cleared out all the library files on the list, and they didn't put up a fight. Doing a full testsuite now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262139161:94,test,testsuite,94,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262139161,2,['test'],['testsuite']
Testability,"I compiled psi4, got coffee, and cmake decided it was time to recompile from scratch in case someone ninja edited my build. Cmake always has your back. . -Daniel Smith; Sent from my iPhone. . > On Apr 18, 2016, at 19:16, Lori A. Burns notifications@github.com wrote:; > ; > It would be valuable to developers, nightly builds, and CI testing if libint could be compiled once, then linked in as needed, like we can do for Boost. Much developer anger when CMake spontaneously decides the integrals need recompiling could be soothed! We could test molecules larger than He with density-fitted quad-zeta! The next NSF green initiative could applaud our energy savings!; > ; > Who dares to decouple libint from our build system such that it could become a detectable ExternalProject_Add CMake module? I think we need to be able to pass in MAX_AM, and it would be nice to have it build both static and shared libraries.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-211638331:333,test,testing,333,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-211638331,2,['test'],"['test', 'testing']"
Testability,"I compiled this PR with clang, ran `gibbs`, and still got the exact same error as Travis reports. ```; Structure for next step:; Cartesian Geometry (in Angstrom); C 0.0000000000 0.0000000000 0.0000000000; H 0.0000000000 0.8836649185 -0.6248454599; H 0.8836649185 0.0000000000 0.6248454599; H -0.8836649185 0.0000000000 0.6248454599; H 0.0000000000 -0.8836649185 -0.6248454599; ; Fatal Error: User specified point group (C2v(Z)) is not a subgroup of the highest detected point group (Cs(Z)). If this is because the symmetry increased, try to start the calculation again from the last geometry, after checking any symmetry-dependent input, such as DOCC.; ```. This problem is not specific to gcc compilers, and it looks to be a bug in finding the highest point group. I'm puzzled how the original test didn't run into this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307:795,test,test,795,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-449682307,1,['test'],['test']
Testability,"I completely agree with @bgpeyton and @amjames that there are probably misuses of Z & mass in the code resulting from unclear or inconsistent definitions (I think there's even cases where the `Mol.property()` fn differs in behavior from the `Mol.fproperty()` fn (that includes dummy atoms). It would be great to survey the code and hunt these down. My trepidation comes in because Mol is delicate w/the two versions of ghosting (type A (not reversible): `@C`, type B (reversible): `extract_subset(1, 2)`) and I worry that changes would start an avalanche. In fact I definitely recommend _not_ ""fixing"" `Mol.Z()` the way I would like (`C` and `@C` both return 6) because lots of places in the Mol code depend on using that fn as a test for type A ghostedness. > I'm very unfamiliar with how masses and fragment identities are passed around. Is there a case in which having the ghost masses zero would keep you from making a properly-massed all-real-atoms copy of that molecule? That would definitely preclude any option of setting them zero permanently. What happens is that every atom at parse-time gets read into a CoordEntry object that holds Z, ghost, charge, mass, element symbol, coords, etc. If the atom is type-A ghost, then Z, ghost, and charge get set accordingly. There is no other info so type-A is not eligible to return to reality. The fragmentation pattern is also stored at parse-time with all-`Real`. For a trimer, when you `extract_subsets(1, 2)`, the `Mol.fragment_types_` gets reset to `[Real, Ghost, Absent]`. The CoordEntries don't change, but every function in Mol is trained to iterate over the frags, and handle Ghost or Absent differently, so that in the fn output, they _appear_ ghosted (type B) or absent. Because the mass, Z info in the CoordEntry is unchanged, this ghostedness is reversible. So in the type B sense, mass must not be set to 0 permanently b/c then type B would be irreversible. I suppose you're advocating zeroing mass for type A? That'd be more consistent",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363473061:730,test,test,730,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363473061,1,['test'],['test']
Testability,"I confirmed that sapt8 got broken because we stopped storing `Ind20,u` in the `Ind20,r` variable in usapt0.cc. I am not sure where the `SAPT IND ENERGY` variable that is used for the test is defined. Does open-shell SAPT0 even go through `sapt_jk_terms.py` ? It seems like the code flow changed a bit since I implemented it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364678447:183,test,test,183,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364678447,1,['test'],['test']
Testability,"I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be defined properly).; > ; > What about DFT, do we define functional properly and do energy('dft'), etc.?; > ; > David; > ; > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Fixed by 6f6d3aa; > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > > Nevertheless, as this ticket points out, having defined these names only; > > for energy() confounds the driver logic. These convenience names are now in; > > place for gradient() and property().; > > ; > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > prop() if others concur with my present assessment.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/103#issuecomment-110021718.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110183382:2598,log,logic,2598,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382,1,['log'],['logic']
Testability,"I currently plan to combine the three geometry generators into one because their logic is so similar. Could you be more specific about the interface changes and desired new features _after_ the C++ code is moved over? If combining the geometry generators is obviously going to break something down the road, best to find out now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/884#issuecomment-360926158:81,log,logic,81,https://psicode.org,https://github.com/psi4/psi4/issues/884#issuecomment-360926158,1,['log'],['logic']
Testability,I defer to Lori on whether this belongs in `tests/python` or `tests/pytest`. I'm not sure what the difference is.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2252#issuecomment-882967221:44,test,tests,44,https://psicode.org,https://github.com/psi4/psi4/pull/2252#issuecomment-882967221,2,['test'],['tests']
Testability,"I deleted some testing L2 packages yesterday to make way for a bigAM one, and it looks like CI was using them. If you want CI to work now, you can make some of the edits in #3107 . Sorry for the trouble. Or we can solve it after that gets merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3114#issuecomment-1867890605:15,test,testing,15,https://psicode.org,https://github.com/psi4/psi4/pull/3114#issuecomment-1867890605,1,['test'],['testing']
Testability,"I did a couple more things here:. 1) At the suggestion of the reviewers, I added individual reference energies for the current composite methods (which were acquired at tight tolerances - 1e-10 for D and E convergence, and 1e-14 for ERI screening). The COSX and LinK methods now test against these corresponding reference energies at the normal 1e-6 atol. . 2) With 1) in mind, I made more sweeping changes as well. First, the reference energies are now kept in a dictionary rather than spread out across different variables. This improves readability and should facilitate the addition of new methods, Composite or otherwise, to the scf5 testing suite. Additionally, composite methods are tested in a loop per test case. This will facilitate the testing of new Composite methods added to Psi4, as will happen in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110:279,test,test,279,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110,5,['test'],"['test', 'tested', 'testing']"
Testability,"I did some testing with both files. When loading them into molden (version 5.1), the program prints the Mulliken charges on screen. The results are odd:. molden file from ORCA:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. molden file from PSI4:; N 1.3673; H 0.0711; H 0.2191; H 0.3448; Sum of Mulliken Charges: 2.0024. Obviously, both are wrong. Apparently, the D orbitals have very little influence on the Mulliken charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53036550:11,test,testing,11,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53036550,1,['test'],['testing']
Testability,I didn't factor in that the weights can be negative. Somehow I thought they must be positive.; There are many 'big' negative weights in the smoke test. IMO it should remain an expert option and somewhat hidden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581#issuecomment-475173509:146,test,test,146,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-475173509,1,['test'],['test']
Testability,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:37,log,log,37,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967,1,['log'],['log']
Testability,"I didn't realized you had opened an issue, I fixed it for you in commit 42345de37df6827356fe7215aa2745b36c946d9e. If you are still interested look at tests/cubeprop/CMakeLists.txt basically the command is:. ``` cmake; file(COPY <name> DESTINATION ${CMAKE_CURRENT_BINARY_DIR}); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/116#issuecomment-122034848:150,test,tests,150,https://psicode.org,https://github.com/psi4/psi4/issues/116#issuecomment-122034848,1,['test'],['tests']
Testability,"I didn't try too hard to break it on public (which doesn't have wavefunction_pass) so it's possible this never appears before the infrastructure changes. But nevertheless, those changes on the whole are for the better, and it's disturbing that infrastructure changes + suitable tweaking to make the extensive occ/dfocc test suite pass can still hide a situation like this. `Ecorr`, `Emp2AA`, etc. are computed out of sight. ... Aha! Initializing variable (below) seems to help in https://github.com/psi4/psi4/blob/master/src/bin/dfocc/mp2_direct.cc#L90; Only affects UHF. Will continue explorations along these lines. ```; 121 if (mo_optimized == 0) Esosmp2AB = sos_scale * Emp2AB;; 122 else if (mo_optimized == 1) Esosmp2AB = sos_scale2 * Emp2AB;; 123 ; 124 Emp2_t1 = 0.0;; 125 if (reference == ""ROHF"" && orb_opt_ == ""FALSE"") {; 126 if (wfn_type_ == ""DF-OMP2"" || wfn_type_ == ""CD-OMP2"") {; 127 //Singles-contribution; 128 Emp2_t1 = 0.0;; 129 //Alpha; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183550049:319,test,test,319,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183550049,1,['test'],['test']
Testability,"I do not know if this is possible in Psi4, but in Molpro and Orca one can (ab)use the CASSCF program to do HF calculations, and they tend to have very different convergence properties. I have recently found that doing this in Molpro 2015 really helps converging some very stubborn ROHF calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-874638315:272,stub,stubborn,272,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-874638315,1,['stub'],['stubborn']
Testability,"I do think that the dcft/pywrap-alias changed sample files are just due to my sloppiness in changing the tests before packing up the tarball. SUMMARY should not be changing its contents for a given set of psi4/tests. It may, though, change its ordering of the contents and trigger your changed-source-alert. Thus, I think it's best to drop tracking it and see that it gets cleaned up when distclean runs. That directory doesn't need an ascii index when a formatted html index exists. Our original plan was to web-host docs for each public release of the code, but admittedly, even I can't find the address of the older versions just now. If you want to package up a thousand html files, we'll try to remove the minor obstacles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14#issuecomment-22985263:105,test,tests,105,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22985263,2,['test'],['tests']
Testability,"I don't find any problems with it when running plain `ctest -R pywrap-freq-e-sowreap`. But in a larger sense, you're quite right that it's not doing anything. Back in the pre-CMake day, the Makefile took additional steps and actually ran all those displacements https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-freq-e-sowreap/Makefile.in , then ran https://github.com/psi4/psi4/blob/master/tests/pywrap-freq-e-sowreap/tests so as to make a proper test case. This multi-psi4 invokation hasn't yet been ported to the CMake/CTest system. So it's good that this is a ticket.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/168#issuecomment-135167238:302,test,tests,302,https://psicode.org,https://github.com/psi4/psi4/issues/168#issuecomment-135167238,4,['test'],"['test', 'tests']"
Testability,"I don't have enough compute for a full test run currently :). Maybe ""Forces a even distribution of occupations across the last partially occupied orbital shell"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/773#issuecomment-319410297:39,test,test,39,https://psicode.org,https://github.com/psi4/psi4/issues/773#issuecomment-319410297,1,['test'],['test']
Testability,"I don't know how detailed the FCIDUMPs are to know if this'd be easy or hard, but would a `compare_fcidump` like [compare_cubes](https://github.com/psi4/psi4/blob/da39266fcb0b84203cdd9a3935e6e98600a688a4/psi4/driver/p4util/util.py#L364) as used in https://github.com/psi4/psi4/blob/master/tests/cubeprop/input.dat be appropriate?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301206187:289,test,tests,289,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301206187,1,['test'],['tests']
Testability,"I don't know how you are reading in the Hessian here, since I don't know how to automatically read files like ""hooh.21221.hess"" now that we have pid's in the name. (BTW, it appears the current psi4 test cases actually use an empirical Hessian.). These jobs are failing because the ""Point 1"" on the IRC is being judged 'converged' immediately before a gradient is even run. (The logic in the code is messy, since the optimizer doesn't actually call the gradient.) So optking needs to do displacements from the TS (where the gradient is zero) but return a not-converged signal to the python optimize. This usually works. I tried the following:. ```; set {; g_convergence gau_verytight; basis dzp; opt_type irc; cart_hess_read true; hessian_write true; }. hessian('scf', dertype=1); h2o2.reset_point_group('c2'); energy = optimize('scf'). ```; and everything worked fine. The problem in my testing is not indeterminism. There is something about the calculation setup that is causing optking not to compute the gradient after the first irc_step(). Perhaps @avcopan could figure out what is going on?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-346373530:198,test,test,198,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346373530,3,"['log', 'test']","['logic', 'test', 'testing']"
Testability,"I don't know why clang was so slow here. When I was testing on a working branch, the clangs finished in 42 min or so (27 & 35). [This](https://anaconda.org/conda-forge/llvmdev/files) might be a 3.9 clang. It's hard to tell without downloading the packages. On the whole, I expect travis to have a more diverse compiler selection. Should we ultimately aim for:; - clang 3.6, python 2.7; - clang 3.9, python 3.5; - gcc 4.9, python 2.7; - gcc 6, python 3.5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/510#issuecomment-259565547:52,test,testing,52,https://psicode.org,https://github.com/psi4/psi4/pull/510#issuecomment-259565547,1,['test'],['testing']
Testability,I don't reproduce a failure of `tests/pytests/test_standard_suite.py::test_mp2_hessian_module` on master. I don't have enough details to say more. `sapt7` is indeed unrelated to this PR. See #2327.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946763755:32,test,tests,32,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946763755,1,['test'],['tests']
Testability,I don't see any issues cropping up. I should make some documentation updates though to inform users how `optking` inherits logging from `psi4`. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923:123,log,logging,123,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923,2,['log'],['logging']
Testability,"I don't see how that is possible - that test failed even when I tried it with the ```CORE``` guess above. The SCF must have converged since the job isn't crashing, and CH4 is a simple closed-shell molecule so there shouldn't be any problems with different HF solutions. This is also confirmed by the finite difference tests that pass for that molecule. Whatever this test job is testing, its problems appear to be unrelated to this merge request. IMHO it shouldn't even be checking the vibrational frequencies and eigenmodes, but rather the raw Hessian which is way less ambiguous. From the output it is not clear what it is actually checking. Looks like they are eigenvectors, but the code is massaging them somehow, like you said. As you can see, the differences are arising only from the degenerate modes, so the related test code must not be working properly. The problem is that comparing eigenvectors for degenerate modes, you have to allow not only for rotations among the vectors, but also flipping the sign of the individual eigenvectors. Maybe this is not taken into account in the test code and that's what is causing the problems?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-452085216:40,test,test,40,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-452085216,12,['test'],"['test', 'testing', 'tests']"
Testability,"I don't see much more I can do here. The convergence behavior seems perfectly reasonable to me. It's just an annoying case where the next step changing the energy by less than 1e-6 doesn't mean you're within 1e-6 of the converged energy. Do you just need me to check if I agree with the new treatment of `occ` convergence?. The other point which may be valuable for test suite purposes is that there are multiple LCCD energy functions. There's the projective function (linearize the normal CCD energy function) and the variational function (just use the Lagrangian). The projective function is simple but non-variational, where the variational function is variational but as implemented in `occ` reads multiple V^4 quantities from disk. I believe the variational functional is the default in fnocc, but I'd need to read over the code to be certain. I assume Eugene's version doesn't run into the V^4 problem... If you want to try the variational function in the test suite, `set ccl_energy true`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-682990959:366,test,test,366,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-682990959,4,['test'],['test']
Testability,"I don't think `ints_tolerance` is set in the `ao-casscf-sp` test. grep might've picked up the reference output file, which apparently was generated using tighter settings than the actual test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2139#issuecomment-804512308:60,test,test,60,https://psicode.org,https://github.com/psi4/psi4/pull/2139#issuecomment-804512308,2,['test'],['test']
Testability,"I don't think the inferring of grid order from `lebedev_mapping` was *ever* correct, to be clear. I believe (but am not 100% sure) that the new way of gaining the information (using information from `LebedevGridMgr`) proposed in #2736 works?. I can test -- do you have a simple input I can test with my build of that patch?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2754#issuecomment-1292381264:249,test,test,249,https://psicode.org,https://github.com/psi4/psi4/issues/2754#issuecomment-1292381264,4,['test'],['test']
Testability,I don't think you can adjust the reference b/c it's analytic vs fd. https://github.com/psi4/psi4/blob/f8a5f63abeb916750e00fdad7c3bb55a5dfa481f/tests/dft-freq-analytic/input.dat#L18-L19. maybe adjust the screening in the test for now. have you run stdsuite? there could be more of these.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2834#issuecomment-1349577053:143,test,tests,143,https://psicode.org,https://github.com/psi4/psi4/pull/2834#issuecomment-1349577053,2,['test'],"['test', 'tests']"
Testability,"I don't understand what Peter means by ""separate tests from docs"". I suspect the word ""tests"" should be ""samples,"" and I have no concrete idea as to how this PR combines them. My best guess is have ""a build of the documentation target"" not be what re-generates `samples`. I strongly disagree with removing git command line instructions. They will work in 99% of cases, and not following these instructions could cause merge conflicts that will take more effort from core devs to shepherd new devs through. For the sample regeneration section: Give examples of why changes might not be okay. Move the bullet point explaining the point of the auto-commit up a level. For the documentation section: I don't understand the point of the first bullet point. Explain why an edit to this branch might be needed. Explain the difference between deploy-preview and the `sphinxman-html` download. Make clear that editing the PR branch is also needed for the `sphinxman-html` download.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088:49,test,tests,49,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981993088,4,['test'],['tests']
Testability,I don't understand your comment about `_mergedapis_compare_matrices`. Assume I know nothing about the test infrastructure.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2395#issuecomment-1007032833:102,test,test,102,https://psicode.org,https://github.com/psi4/psi4/pull/2395#issuecomment-1007032833,1,['test'],['test']
Testability,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-347998008:907,log,logic,907,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008,1,['log'],['logic']
Testability,"I encountered this problem with wB97X-D3BJ/def2-TZVPD, but PBE/def2-TZVPD shows the same, with the added problem that the erroneously low energy is also oscillatory. The psi4=1.4rc2 energy is -1144.303 Hartree, and the psi4=1.4rc1 energy oscillates between -1146.416 and -1146.534 Hartree. . Once again, this problem is specific to the algorithm that uses in-core AOs. If scf_type DF is provided with less RAM (say 10 GiB) such that it uses disk, the energy is correct (-1144.303 Hartree). I note that PBE requires only 20 GiB to run in-core, and thus might be easier for testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2211#issuecomment-869060258:572,test,testing,572,https://psicode.org,https://github.com/psi4/psi4/issues/2211#issuecomment-869060258,1,['test'],['testing']
Testability,"I finally managed to get a small test case: ; [small2_in.txt](https://github.com/psi4/psi4/files/2199056/small2_in.txt); [small2_out.txt](https://github.com/psi4/psi4/files/2199057/small2_out.txt). ```; DF-SCF gradient test: computed value (-0.25836946643405045) does not match (-0.11351758729533379).; DF-SCF gradient test: computed value (0.020545640137366858) does not match (0.012569715618282922).; DF-SCF gradient test: computed value (-0.020205828245199342) does not match (-0.014701497891262322).; etc.; ```. * Increasing memory to 2.5 Gb passes the test (MEM_DF and DISK_DF). Oddly, perhaps, using 0.5 Gb memory I get (both DISK_DF):; ```; Memory (MB): 357; Algorithm: Core; ```; and with 2.5 Gb:; ```; Memory (MB): 1788; Algorithm: Core. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1095#issuecomment-405361551:33,test,test,33,https://psicode.org,https://github.com/psi4/psi4/issues/1095#issuecomment-405361551,5,['test'],['test']
Testability,"I fixed the `cam-b3lyp` and removed duplicate `b2gpplyp`. However, I'm not sure about the `LC-wPBE` vs `LRC-wPBE` question: the first one is by [Vydrov and Scuseria](https://doi.org/10.1063/1.2409292), the second one is by [Rohrdanz et al.]( https://doi.org/10.1063/1.3073302). Confusing nomenclature. Also, it might be helpful to merge PR #880 before merging this one, tests for N12, N12-SX ans MN12-SX are in there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/916#issuecomment-364769227:370,test,tests,370,https://psicode.org,https://github.com/psi4/psi4/pull/916#issuecomment-364769227,1,['test'],['tests']
Testability,I found a copy of the function to computer the nuclear contribution to the dipole moment in the Molecule class. So I am going to leave that part of the refactoring for another PR. I think this is ready to go once all tests pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444600475:217,test,tests,217,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444600475,1,['test'],['tests']
Testability,"I had a bit of time to work on Windows build. Current status of dependencies:; - *libint*: with some hacking (https://github.com/raimis/libint/tree/win) I have manged to build it (https://ci.appveyor.com/project/raimis/libint). There are no tests, so high probability of not detected issues.; - *libxc*: with some more hacking (https://github.com/raimis/libxc/tree/win) I have to managed to build it too (https://ci.appveyor.com/project/raimis/libxc).; - *gau2grid*: it need just a few changes (https://github.com/raimis/gau2grid/tree/win) to compile (https://ci.appveyor.com/project/raimis/gau2grid). Though I have not managed to make the test to work. It seems, `ctypes` behave differently on Windows. Finally, I have reached a point to stat building *Psi4* (https://github.com/raimis/psi4/tree/win) and got stuck with MKL configuration and other `cmake` related problems (https://ci.appveyor.com/project/raimis/psi4). @loriab, for Linux builds, do you use MKL from `conda` or install it manually?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390236786:241,test,tests,241,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390236786,2,['test'],"['test', 'tests']"
Testability,"I had a typo! You did maybe only HF. ```; import psi4. psi4.geometry('H -.5 0 0\nH .5 0 0'). set global {; basis def2-SVP; scf_type direct; }. num=gradient('scf',dft_functional='wb97x',dertype=0); ana=gradient('scf',dft_functional='wb97x',dertype=1); compare_matrices(ana, num, 5, ""LR grad""). ```; That seems to pass with 5 decimals at least.; I would test a larger molecule, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-346646875:352,test,test,352,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-346646875,1,['test'],['test']
Testability,"I had looked into the integer overflow issues in the DF code with MP3 as an example several months ago. The negative memory values reported are of course integral overflows and one can fix the printing of memory requirements by changing the int to a type that holds larger integers. But the actual problem happens later when, if I understand correctly, an array index becomes bigger than 2,147,483,647. . In my DF-MP3 test calculation this happened in the main loop in mp3_WabefT2. . Memory for I, Vs, Va, Ts, and Ta was successfully allocated, but then the quantity a * navirA * nQ became too large. I forced it to long or long-long, so the product could be evaluated (and printed printed out) as 2148655392 (as opposed to -2146311904 with int) but this positive value ""anavirAnQ3"" was illegal for the subsequent contraction. I->contract(false, true, navirA * nb, navirA, nQ, K, K, 0, anavirAnQ3, 1.0, 0.0);. So, it is the array index, and not the array value, that is bigger than the 32-bit integer. And our math libraries index arrays with the 32-bit integer type! . I tried to compile Psi against MKL and OpenBLAS with 64-bit index arrays (the ILP64 interface) but the resulting program was not stable. So, if my thinking is correct, I am afraid we do not have an easy fix as long as Psi4 expects math libraries with 32-bit integer indices. I can share some debug code (modified dfocc.h, df_ref.cc, tei_grad_corr.cc, df_corr.cc, ref_grad.cc, and mp3_W_intr.cc with some long int and printf statements) and sample outputs if anybody thinks this is helpful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849:418,test,test,418,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561544849,1,['test'],['test']
Testability,"I had the same issue when I tested cdomp2-2. Here's the list of all my failed tests:; 76:cdomp2-2; 123:dfmp2-grad2; 125:dfmp2-grad4; 127:dfomp2-2; 129:dfomp2-4; 131:dfomp2-grad2; 303:stability2. I am using Ubuntu 14.04 with ATLAS for BLAS and LAPACK. Update:; After I changed to Intel MKL, the only failed case in tests is 303:stability2. Because it's just a value off, I just ignore it and continue installing. > ## Output:; > ; > Nuclear repulsion energy..........................................PASSED; > Reference energy..................................................PASSED; > Stability eigenvalues with symmetry: computed value (0.094068) does not match (0.0940977919192).; > Check your output file for reporting of the matrices.; > An error has occurred python-side. Traceback (most recent call last):; > ; > File ""<string>"", line 58, in <module>; > ; > File ""/home/mrabsence/Downloads/soft/psi4/share/python/p4util/util.py"", line 209, in compare_matrices; > raise TestComparisonError(""\n""); > ; > TestComparisonError: ; > ; > Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); > <end of output>; > Test time = 1.80 sec",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-223730550:28,test,tested,28,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-223730550,6,"['Test', 'test']","['Test', 'TestComparisonError', 'tested', 'tests']"
Testability,"I had to add some additional hunks, for the no longer existing `datastructures.py` and `scipy_hungarian.py`, not sure those are the correct fixes, but the testsuite (as far as Debian runs it, 143 test cases at least) now passes except for a numerical issue in `matrix1` (`Eigenvectors: computed value (0.0291933) does not match (-0.02919332316478252).`) and some other python problems in `pywrap-align{,-chiral`:. ```; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/util/gph_uno_bipartite.py"", line 109, in _enumMaximumMatching; if g.node[kk]['bipartite'] == 0:; ^^^^^^. AttributeError: 'Graph' object has no attribute 'node'; ```. For completeness, those are the additional hunks:. ```; Index: psi4/psi4/driver/qcdb/datastructures.py; ===================================================================; --- psi4.orig/psi4/driver/qcdb/datastructures.py; +++ psi4/psi4/driver/qcdb/datastructures.py; @@ -58,11 +58,11 @@ class QCAspect(collections.namedtuple('Q; for d in ['doi', 'comment', 'glossary']:; dicary.pop(d); if isinstance(self.data, (np.ndarray, np.number)):; - if self.data.dtype == np.complex:; + if self.data.dtype == complex:; dicary['data'] = [dicary['data'].real.tolist(), dicary['data'].imag.tolist()]; else:; dicary['data'] = dicary['data'].tolist(); - elif isinstance(self.data, (complex, np.complex)):; + elif isinstance(self.data, (complex, complex)):; dicary['data'] = [self.data.real, self.data.imag]; ; return dicary; Index: psi4/psi4/driver/qcdb/util/scipy_hungarian.py; ===================================================================; --- psi4.orig/psi4/driver/qcdb/util/scipy_hungarian.py; +++ psi4/psi4/driver/qcdb/util/scipy_hungarian.py; @@ -93,14 +93,14 @@ def linear_sum_assignment(cost_matrix, r; % (cost_matrix.shape,)); ; if not (np.issubdtype(cost_matrix.dtype, np.number) or; - cost_matrix.dtype == np.dtype(np.bool)):; + cost_matrix.dtype == np.dtype(bool)):; raise ValueError(""expected a matrix containing numerical entries, got",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865#issuecomment-1407791101:155,test,testsuite,155,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1407791101,2,['test'],"['test', 'testsuite']"
Testability,I had to set `export PYTHONPATH=$PYTHONPATH:<path_to_s-dftd3_install_dir>/lib/python3.10/site-packages/`. For QCEngine to recognize `s-dftd3` as an engine the import needs to work. That's the internal test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2936#issuecomment-1531213641:201,test,test,201,https://psicode.org,https://github.com/psi4/psi4/issues/2936#issuecomment-1531213641,1,['test'],['test']
Testability,"I have a good setup for vtune on some clusters. Do you have any inputs/scripts I can test?. Tangentially related, I'm getting a better look at the overall thread scaling. In density-fitted HF, the infamous dcopy is a very prominent problem - it's memory bound, so it takes only a few cores for the memory bandwidth to be saturated. If there's any other specific types of calculations you'd like to see, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-276103836:85,test,test,85,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276103836,1,['test'],['test']
Testability,I have a working psi4 version again and will do some testing. Using `print 5` I see the Fock matrix becomes `nan` at the end which is definitely not good :-). I don't think ADIIS should turn on for the final iteration.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1460466266:53,test,testing,53,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1460466266,1,['test'],['testing']
Testability,"I have added a test case similar to the test case for the gradient. I do not know of other codes that have this capability but the test case enumerate all the necessary terms and check for the correct expansion formula for a trimer truncated at the two-body level. Without this PR, the many-body expansion terms for the Hessian are not summed up correctly if the VMFC basis set superposition error scheme is used. The `_sum_cluster_ptype_data` function is supposed to construct the total cluster gradient or Hessian from the fragment computations. Documentation is beyond the scope of this trivial PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930:15,test,test,15,https://psicode.org,https://github.com/psi4/psi4/pull/2389#issuecomment-1003755930,3,['test'],['test']
Testability,I have added one more test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1042#issuecomment-433259411:22,test,test,22,https://psicode.org,https://github.com/psi4/psi4/pull/1042#issuecomment-433259411,1,['test'],['test']
Testability,"I have been concerned for some time that there seems to be some little; symmetry-breaking noise in nearly all Psi4 gradients, and I have not taken; the time to follow up on it. It puzzles me, because we never saw stuff; like this in Psi3... those gradients were already symmetric and did not; need a ""symmetrize"" function to be called.... The only part of Psi that; I've checked that seems immune to this problem is Daniel Crawford's CC; gradients, which are perfectly symmetric. On Wed, Jan 30, 2019 at 10:40 AM Jonathon Misiewicz <; notifications@github.com> wrote:. > Discovered while remedying test cases where reference numbers needed to be; > changed due to my upcoming #1143; > <https://github.com/psi4/psi4/issues/1143> fix. DFOCC gradients are not; > symmetrized. If you'd like an example, just look in the reference output; > files; > <https://github.com/psi4/psi4/blob/master/tests/dfomp3-grad2/output.ref#L603-L604>!; > Symmetry of the overlap gradient is broken in the seventh decimal place.; > The other terms have some errors, but much smaller. That the overlap; > gradient is most afflicted is unsurprising, since the overlap integrals are; > contracted against one of the many ""generalized Fock matrices"". This one; > depends on the 1RDM and 2RDM, which are not currently symmetrized.; >; > I'm hoping to include this in 1.3 with the #1143; > <https://github.com/psi4/psi4/issues/1143> fix, since this bug could lead; > to optimizations failing, as we saw with DFMP2 two weeks ago (#1483; > <https://github.com/psi4/psi4/pull/1483>). Because individual terms are; > printed, the individual terms need to be symmetrized, and it may take me; > some time to find where the symmetrize calls need to be placed. If it; > takes too long, I'm fine with delaying to 1.4.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1504>, or mute the thread; > <https://github.com/notif",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782:598,test,test,598,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-458993782,2,['test'],"['test', 'tests']"
Testability,"I have built it from the recent master, this is the HEAD:; ```git; commit d7529df57c2815cfb43a88d9b739c94c3a2322c4 (HEAD -> master, origin/master, origin/HEAD); Author: Susi Lehtola <susi.lehtola@alumni.helsinki.fi>; Date: Thu Aug 15 15:55:09 2019 +0300. Add some short and simple tests to make sure calculations work in weird basis sets. (#1701); ```. cmake options I used. ```bash; CC=icc CXX=icc FC=ifort cmake .. -DCMAKE_INSTALL_PREFIX=/home/filip/software/psi4-1.4rc-opt -DMAX_AM_ERI=7 -DBLAS_TYPE=MKL -DENABLE_OPENMP=ON -DENABLE_simint=ON -DCMAKE_CXX_FLAGS=""-march=haswell"" -DCMAKE_C_FLAGS=""-march=haswell"" -DSIMINT_VECTOR=avxfma; ```. To the second point, I've stripped down my test case, in which I noticed this issue, as it has some external dependencies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.4816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:281,test,tests,281,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,4,['test'],"['test', 'tests']"
Testability,"I have got a working *Psi4* build on Windows! Though many tests still failing due to hard-coded paths and other platform specific stuff, which I will fix eventually. The porting requires many small code changes as MSVC don't support several non-standard features present in GCC and clang. So, I will start with several trivial to PRs, to make future merging easier.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-401782072:58,test,tests,58,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-401782072,1,['test'],['tests']
Testability,"I have installed mkl-devel, but now I have a new issue:. ```; CMake Error at tests/fsapt-terms/CMakeLists.txt:4 (file):; file COPY cannot find; ""/server-home1/.../psi4/tests/fsapt-terms/../../psi4/share/psi4/fsapt/fsapt.py"". CMake Error at tests/fsapt-allterms/CMakeLists.txt:6 (file):; file COPY cannot find; ""/server-home1/.../psi4/tests/fsapt-allterms/../../psi4/share/psi4/fsapt/fsapt.py"".; ```. Is there a cmake comment I should look at in the psi4 documentation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-381277308:77,test,tests,77,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-381277308,4,['test'],['tests']
Testability,"I have made one final commit here to update the comment, this should be OK to merge unless someone else wants to chime in. The tests run by the CI are passing, here is hoping there will no surprises the next time someone runs the full test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700#issuecomment-1252900992:127,test,tests,127,https://psicode.org,https://github.com/psi4/psi4/pull/2700#issuecomment-1252900992,2,['test'],"['test', 'tests']"
Testability,"I have no horse in this race in terms of is the behavior of `Molecule.mass` or `Molecule.Z` acting strangely, but the inconstancy is a problem. If we took every property test in the suite and added a test where ghost atoms are involved I think we would turn up some failures since the way molecular weight is calculated in `optrot.cc` as @bgpeyton described does not properly ignore ghosted atoms and i wouldn't be surprised if there were others.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363463003:170,test,test,170,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363463003,2,['test'],['test']
Testability,"I have not followed this thread closely, but I have a couple of comments.; 1. Someone mentioned that the OPDM is supposed to be stored in wfn in the; AO basis. AJ then asked if this meant he should backtransform it to the SO; basis. I'm not sure that question got answered....and AO and SO are not; equivalent in molecules with point group symmetry. Do I understand; correctly that OPDMs are stored all the way back in the AO (not SO) basis?; 2. I looked through the CI and CC output with Lori yesterday. Both outputs; are totally logical for what they are doing, yet they are inconsistent with; each other in terms of numbering roots. For the case of CCEOM, because; excited states are all treated together, it is very logical to number the; EOM states 1, 2, 3, etc. That then means the ground state, if it is in; this same numbering scheme, has to be labeled root 0. For the CI outputs,; everything is lumped together, so it is logical to number the ground state; as 1. If we make things consistent, it is easier to change the CI; numbering to match the CC numbering. This also has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260126337:531,log,logical,531,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337,3,['log'],['logical']
Testability,"I have now run almost the _entire_ test suite with 100% pass rate. (DFT benchmarks and fsapt-1 excluded as they always time out and are not relevant to these changes.) If there are still concerns about the metadata, tell me sooner rather than later. Next step is documenting the metadata. Also, am I correct in assuming that we want the optimization sow/reap code ripped up as well? I assume that wouldn't be very useful, without the sow/reap code in hessian and gradient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-432227345:35,test,test,35,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-432227345,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"I have overhauled this interface in #365 for SCF/DFT/MP2/CI so that the following now works:. ``` python; prop('above_method', properties=['any_opdm_func']); ```. See [here](http://www.psicode.org/psi4manual/master/oeprop.html?highlight=oeprop) for full OEProp functionality; this documentation and the `property` documentation also had a facelift in the PR. Full tests suites can be found in the following test cases:; - ci-properties ('transition_dipole', etc, works here); - mp2-properties; - scf-properties. I did not touch occ/dfocc/cc due to how they integrated their OEProp calls, but I would assume that this will eventually be deprecated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/40#issuecomment-213409294:364,test,tests,364,https://psicode.org,https://github.com/psi4/psi4/issues/40#issuecomment-213409294,2,['test'],"['test', 'tests']"
Testability,"I have reap.py in tests/ now, and pywrap-db2 is working in addition to pywrap-freq-e-sowreap, but pywrap-opt-sowreap is still failing. That appears to be a bug or an error in the input file since I can't even run that one ""by-hand"". ; Error shown below:. ```; Traceback (most recent call last):; File ""<string>"", line 24, in <module>; File ""/home/ajay/psi4/source/lib/python/driver.py"", line 1191, in optimize; thisenergy = gradient(name, **kwargs); File ""/home/ajay/psi4/source/lib/python/driver.py"", line 824, in gradient; fmaster.write(p4util.format_options_for_input().encode('utf-8')); TypeError: format_options_for_input() takes exactly 1 argument (0 given); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/192#issuecomment-157864804:18,test,tests,18,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157864804,1,['test'],['tests']
Testability,"I have rerun the benchmarks at: https://markus-beuckelmann.de/blog/boosting-numpy-blas.html. The results are:. pypi numpy 1.21.3: ; ```; Dotted two 4096x4096 matrices in 0.74 s.; Dotted two vectors of length 524288 in 0.26 ms.; SVD of a 2048x1024 matrix in 0.83 s.; Cholesky decomposition of a 2048x2048 matrix in 0.09 s.; Eigendecomposition of a 2048x2048 matrix in 6.14 s.; ```. conda-forge 1.21.0: ; ```; Dotted two 4096x4096 matrices in 0.67 s.; Dotted two vectors of length 524288 in 0.25 ms.; SVD of a 2048x1024 matrix in 0.72 s.; Cholesky decomposition of a 2048x2048 matrix in 0.08 s.; Eigendecomposition of a 2048x2048 matrix in 5.33 s.; ```. This time around the results are not meaningfully different. Something must have been throwing them off before, so my apologies for the red herring regarding the different builds. They seem to be using the same BLAS. That just makes the prospect of *actually* using Accelerate for numpy and scipy all the more exciting! I will try to look into how to do this and report back if I find out how to do so. (Or maybe someone else knows, since it seems like it should be possible to do now.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-961497818:17,benchmark,benchmarks,17,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-961497818,1,['benchmark'],['benchmarks']
Testability,"I have the expanded OMP2/OCEPA hessian formulas in a Jupyter notebook, and I know they're implemented in DFOCC. Seeing how that choice affects convergence would be an interesting test some time. (Well, assuming DFOCC orbital convergence gets straightened out...)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829#issuecomment-594950777:179,test,test,179,https://psicode.org,https://github.com/psi4/psi4/pull/1829#issuecomment-594950777,1,['test'],['test']
Testability,I have updated the call points for the new signature of `triplet/doublet` and tests pass locally with warnings converted to errors. So this is ready for final review + merge. @psi4/maintainers,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349#issuecomment-456894587:78,test,tests,78,https://psicode.org,https://github.com/psi4/psi4/pull/1349#issuecomment-456894587,1,['test'],['tests']
Testability,I have updated the reference on my branch and will file a pull request (on private) as soon a I manage to build and run some tests. For the moment I have updated the wiki (`git clone` ---> `git clone --recursive`),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/189#issuecomment-157114525:125,test,tests,125,https://psicode.org,https://github.com/psi4/psi4/issues/189#issuecomment-157114525,1,['test'],['tests']
Testability,"I have vague memories about some of the DSD methods changing parameters; from one paper to another. I discussed this with Jan Martin way back when; via email, and thought the situation was somewhat confusing. Without; remembering this any more clearly than I do, I suppose Holger's idea of; using the more recent paper is probably a good one. On Wed, Mar 7, 2018 at 12:43 PM, Holger Kruse <notifications@github.com>; wrote:. > i remember the omega issue from a forum post: http://forum.psicode.org/t/; > wb97x-definition-bug/480; >; > I think ORCA was used for all the DSD developments. There you can defined; > DHDF compositions in the input file (see e.g. my reference outputs). If; > manual defining parameters for another program really counts as a good test; > is perhaps debatable because typos never come alone ;); >; > Are the non-dispersion forms of DSD-PBEP86 from both papers really; > different? I hope not...; > Anyway, I'd stick with the 2013 paper in doubt because it is the latest; > ""update"".; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/922#issuecomment-371221109>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdkpodkciT2JkrcNFW-gbLDLpUy4Mks5tcBwzgaJpZM4SJ0Uw>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-371240538:758,test,test,758,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-371240538,2,['test'],['test']
Testability,"I haven't encountered this behavior myself, but it does sound faulty. Since there's the binary as fallback and more and more pieces are using c++11, I don't think we're avoiding it anymore. @robertodr was talking about the feasibility of using some advanced cmake features to handle this problem more logically (https://cmake.org/cmake/help/v3.1/prop_gbl/CMAKE_CXX_KNOWN_FEATURES.html). They will require bumping our required cmake version, but, for developers, that's not so bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-157058625:301,log,logically,301,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-157058625,1,['log'],['logically']
Testability,"I haven't reloaded all my freq familiarity, but I did various comparisons around the time of the thermo update, but [molpro](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/molpro.out#L469-L481) and [psi4](https://github.com/psi4/psi4/blob/master/tests/freq-isotope/output.ref#L4113-L4136) match, and there's other examples in that folder. Psi4 output vibs through both findif routes I'm confident are nmw (through analytic I haven't looked at). Normalization sounds good to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286563411:166,test,tests,166,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286563411,2,['test'],['tests']
Testability,I haven't run any tests but it looks like it succeeded this time. Thanks.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3006#issuecomment-1627820604:18,test,tests,18,https://psicode.org,https://github.com/psi4/psi4/issues/3006#issuecomment-1627820604,1,['test'],['tests']
Testability,"I haven't tested it, but one issues seems (as far as I read the traceback docs) that the exception message from the `SyntaxError` contains the offending line before the normal content, which is `ExceptionName: <text>`. . Though syntax errors usually crash for me like this:. ```; Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29; print '1'; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print('1')?. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 348, in <module>; suspect_lineno = traceback.extract_tb(exc_traceback)[1].lineno - 1 # -1 for 0 indexing; IndexError: list index out of range; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204:10,test,tested,10,https://psicode.org,https://github.com/psi4/psi4/issues/1920#issuecomment-639484204,1,['test'],['tested']
Testability,I haven't tested locally but `-c conda-forge/label/psi4_dev` does not seem to be mandatory because 1.8 is now in `main` at https://github.com/conda-forge/psi4-feedstock/tree/main. But `-c conda-forge/label/libint_dev` still seems to be required. Do you confirm @loriab?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1548158932:10,test,tested,10,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1548158932,1,['test'],['tested']
Testability,"I haven't tested with gdma. You mean you see this behavior with this PR?. I wouldn't ""expect"" any of the tests to fail (erd should more or less be a drop-in replacement for libint). But, at least for me, but many tests still fail.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-275581979:10,test,tested,10,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275581979,3,['test'],"['tested', 'tests']"
Testability,"I implemented OMP2.5 gradients with obsessively tight convergence criteria.; The fixed-Psi implementation agrees with Psi4Numpy OMP2.5 gradients within testing tolerance, but the current-Psi implementation does not. Note that `omp2p5-grad2` only has one independent gradient parameter, being a diatomic. The values the three implementations give for this parameter are:; ```; Psi4Num: 0.011650390674; New Psi: 0.011650262043; ^; Old Psi: 0.011614594883; ^; ```. My conclusion is that my fix is correct, and the reference values are not correct to within testing values, although close enough to correct to not have caused a problem for most users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808#issuecomment-584134023:152,test,testing,152,https://psicode.org,https://github.com/psi4/psi4/issues/1808#issuecomment-584134023,2,['test'],['testing']
Testability,"I incorporated Francesco's suggestion of std::stod(). It worked fine in my tests. Only for a hand-edited intco.dat would these checks ever matter. (I discovered that if the user tries a string like ""hello"" for the value, it doesn't even pass through our initial psithon syntax code for some reason.) The important thing is that we allow zero values. BTW, I wonder why I can't see Francesco's comment on github's website (https://github.com/psi4/psi4/pull/535). Are there private comments?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/535#issuecomment-264558498:75,test,tests,75,https://psicode.org,https://github.com/psi4/psi4/pull/535#issuecomment-264558498,1,['test'],['tests']
Testability,"I increased the default threshold to 1e-15 as this seems slightly favoured. (not re-doing the timing benchmark, should be very similar)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581#issuecomment-499173418:101,benchmark,benchmark,101,https://psicode.org,https://github.com/psi4/psi4/pull/1581#issuecomment-499173418,1,['benchmark'],['benchmark']
Testability,"I just added a test case. Documentation is already in place, but it should probably be expanded with instructions on how to use .cube files.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/116#issuecomment-121737099:15,test,test,15,https://psicode.org,https://github.com/psi4/psi4/issues/116#issuecomment-121737099,1,['test'],['test']
Testability,"I just committed a version with the user-vector stuff removed, more transparent handling of prefactors, and less code duplication for restricted/unrestricted. The code is now a lot easier to read, I hope the reviewers will agree 😉 ; I'll now add the test cases suggested by @JonathonMisiewicz 👍",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-966913098:250,test,test,250,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966913098,1,['test'],['test']
Testability,"I just compiled this branch and it looks like the test that I have still doesn't work. I think I remember trying to flip this as well and eventually concluded that the issue was ""something weird"" because `update_geometry` _should_ update the symmetry information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-191828792:50,test,test,50,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191828792,1,['test'],['test']
Testability,"I just had a look at the tests, I realise I had been using a string as the input for the solvent, but it should be float/int type! So this was indeed user error.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119#issuecomment-1906149071:25,test,tests,25,https://psicode.org,https://github.com/psi4/psi4/issues/3119#issuecomment-1906149071,1,['test'],['tests']
Testability,"I just pulled the code, and will see if I can figure it out. > On Feb 1, 2016, at 1:57 PM, Justin Turney notifications@github.com wrote:; > ; > Something in the recent version of Psi4 is causing coupled cluster test cases to fail on our cluster. It also appears in the clang version of the Travis CI builds. I'm using Intel compiler on our cluster.; > ; > Is there a new transqt/ccsort module, if so it appears to be failing in it:; > ; > From cc1 test output:; > ; > ```; > Wfn Parameters:; > --------------------; > Wavefunction = CCSD; > Number of irreps = 4; > Number of MOs = 25; > Number of active MOs = 25; > AO-Basis = NONE; > Semicanonical = false; > Reference = RHF; > Print Level = 1; > ; > IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; > ----- ----- ------ ------ ------ ------ ------; > A1 12 0 3 0 9 0; > A2 2 0 0 0 2 0; > B1 4 0 1 0 3 0; > B2 7 0 1 0 6 0; > Transforming integrals...; > IWL integrals will be deleted.; > (OO|OO)...; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OO|OV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OO|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|OO)...; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|OV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (VV|OO)...; > Starti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178134633:211,test,test,211,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633,2,['test'],['test']
Testability,I just pushed some changes that make most of the tests pass for me (at least the ones that have run so far). I will run a more complete set and let you know how it goes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-275585286:49,test,tests,49,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-275585286,1,['test'],['tests']
Testability,"I just refactored my code to reduce code duplicity (Ran all C-Tests, still passed). I changed the build_JK function by adding two boolean switches that determine whether to build J and/or K. So the function header is now; `build_JK(ints, D, J, K, do_J, do_K)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-977378952:62,Test,Tests,62,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977378952,1,['Test'],['Tests']
Testability,"I just removed opt10 from all ctest labels. Its still present, but will not run unless you specifically request it. It looks like the reference opt10 ran in about 45 minutes on 8 threads. @psi-rking If you are just testing angular dependancies can you reduce this to something like 6-31G?. Edit: Whoops, misread timing data. > On Feb 15, 2016, at 9:27 AM, Justin Turney notifications@github.com wrote:; > ; > Yeah, we should have that mechanism to leave it as a longertest. Maybe that's what @dgasmith https://github.com/dgasmith has already done.; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4/issues/253#issuecomment-184228286.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184233000:215,test,testing,215,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184233000,1,['test'],['testing']
Testability,I just tested on my box and I think it is as simple as changing line 4 of `psi4/src/bin/psi4_main/CMakeLists.txt` from. ```; COMMAND ${CMAKE_COMMAND} -E copy ...; ```. to. ```; COMMAND ${CMAKE_COMMAND} -E copy_if_different ...; ```. The `version.h` file only changes the the git commit sha changes (only on commits and pulls). Another consequence of the cmake rewrite is that before you could've simply typed `make mints/fast` in your objdir and it would just compiled libmints. Now's there the required step of `cd objdir/psi4_core-prefix/src/psi4_core-build` before `make mints/fast`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239052313:7,test,tested,7,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239052313,2,['test'],['tested']
Testability,"I just tested the code in this PR and works well for my purposes, i.e. loading the FCHK file into HORTON to perform a density partitioning. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1475#issuecomment-456190882:7,test,tested,7,https://psicode.org,https://github.com/psi4/psi4/pull/1475#issuecomment-456190882,1,['test'],['tested']
Testability,"I keep hearing about this ""problem"" also elsewhere, but the fact is that the regular grid for cube files is ill fitted for integrating the density of steep regions (e.g. at the nuclei). ; python-based integrator for testing: https://gist.github.com/hokru/71c61f5afb2e5921b5b4955fed70f5db. cubes were made for visualization not for further analysis, iirc. Does chargemol only work with cube files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-433074513:216,test,testing,216,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-433074513,1,['test'],['testing']
Testability,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:249,test,testing,249,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,2,['test'],"['test', 'testing']"
Testability,"I left a code note above on perhaps why the `pg_` wasn't copied. But Ben's changes look like sensible ones to have always existed, and I think this is fundamental enough that if it broke something, it would show up in a test case. So if all the tests pass and we can replace the `new_mol = psi4.Molecule.create_molecule_from_string(mol.create_psi4_string_from_molecule())` in the driver with clones again, I'd say go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-191822729:220,test,test,220,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191822729,2,['test'],"['test', 'tests']"
Testability,"I like the options-processing macros, @ryanmrichard. Here you meant `AND`, yes? Or even better, `if(NOT DEFINED ${variable})`? https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11. You may want to copy Psi4Macros from libint back over to psi4 (diff here: https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff) as I fixed that processing problem, expanded to bool options, elaborated printing, and tested a range of input values/specification routes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236132448:455,test,tested,455,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236132448,1,['test'],['tested']
Testability,"I made a disteli account when I saw your experimentation last week. When I click ""details"" to see the test output, I get a 404 page. Are there settings to increase the visibility of the test outputs?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235117364:102,test,test,102,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235117364,2,['test'],['test']
Testability,"I made a pass at the docs, very minimal. Not sure how extensive it should be. @maxscheurer the pe-tdscf test for RHF does not pass on my mac with cppe via pip. Excitation energy number 3 is off, rest is fine. No idea why, right now. ```; !----------------------------------------------------------------------------------!; ! !; ! PE OSCILLATOR STRENGTH: computed value does not match to atol=1e-05. !; ! Expected: !; ! [0.000004406911 0.000089321058 0.432081257 0.113168661 0.0190262828 ] !; ! Observed: !; ! [0.000004444431 0.000089181257 0.432105919683 0.113174232326 0.019027243438] !; ! Difference (passed elements are zeroed): !; ! [0.000000000000e+00 0.000000000000e+00 2.466268274193e-05 0.000000000000e+00 !; ! 0.000000000000e+00] !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2006#issuecomment-694478253:104,test,test,104,https://psicode.org,https://github.com/psi4/psi4/pull/2006#issuecomment-694478253,1,['test'],['test']
Testability,"I may not be impartial, but I like the CMake colors a lot. LGTM. We have been tossing around the idea of moving tests around to make a bit more sense. - quicktests - Does psi work? tu1/scf-property/dfmp2-1/sapt1/cc1/casscf-sp only; - normaltests - Best coverage possible in a 20 minute envelope. (10 minutes on 2-thread travis); - longtests - Anything that runs in 15 minutes; - no modifier - All psi tests (including the 30 minutes - 1.5 hour tests). Obviously not in this PR, but something to ponder. @robertodr I found the colors on Stackoverflow, so I would say yes :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262012104:112,test,tests,112,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262012104,3,['test'],['tests']
Testability,"I meant to add last night that if you haven't already, please test with a mol with ghosts, dummy atoms, ecp's, away from std orientation, etc. (since you're handing over mol info to gauxc). And if you ask for a snlink gradient, it does something sensible? Thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2173350671:62,test,test,62,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2173350671,1,['test'],['test']
Testability,I moved everything up one level so `tests/pasture/ccsorttransqt2/*` —> `pasture-ccsortrransqt2/*`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534#issuecomment-265484472:36,test,tests,36,https://psicode.org,https://github.com/psi4/psi4/pull/534#issuecomment-265484472,1,['test'],['tests']
Testability,"I need some help with the cube prop test case. The way I set the test case requires comparing the cube files generated with some reference cube files, stored in tests/cubeprop. How can I copy these files in the directory in which tests are executed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/116#issuecomment-122019947:36,test,test,36,https://psicode.org,https://github.com/psi4/psi4/issues/116#issuecomment-122019947,4,['test'],"['test', 'tests']"
Testability,"I need to update the test for cc5, which is currently failing even though; it's not run automagically. It seems that the reference output was; overwritten by an output from a failed calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Apr 3, 2016 at 9:10 PM, Daniel Smith notifications@github.com; wrote:. > As a note: not all CC tests are tested through Perl. Actually looking at; > the output has caught a few bugs so far, although it does require someone; > intimately familiar with the tests to do so.; > ; > I would be happy if we could get eyes on every test, but if it doesn’t; > happen its not a big deal.; > ; > > On Apr 3, 2016, at 8:59 PM, Andy Simmonett notifications@github.com; > > wrote:; > > ; > > Sorry for the delay. The DCFT tests look good to me. I think we can also; > > check of the CC tests; if I remember correctly, those tests are actually; > > validated by comparing the output to the reference using a separate Perl; > > script. If the tests run successfully, it means that the output is present; > > and correct, or Perl wouldn't be able to parse it.; > > ; > > —; > > You are receiving this because you authored the thread.; > > Reply to this email directly or view it on GitHub <; > > https://github.com/psi4/psi4/pull/315#issuecomment-205091286>; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/315#issuecomment-205094545",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/315#issuecomment-205097386:21,test,test,21,https://psicode.org,https://github.com/psi4/psi4/pull/315#issuecomment-205097386,9,['test'],"['test', 'tested', 'tests']"
Testability,"I note that our EOM-CC3 test cases do not include one in which states of; different symmetries are obtained in the same job, so this seems likely to; be a genuine bug (though I could have sworn that we had such calculations; working initially). The EOM-CC3 algorithm we use computes one state at a; time, but the scratch quantities are likely to be different sizes for; different irreps. To get around this for now, I suggest simply running the two states in; separate jobs. -TDC. P.S. I removed the scf_type keyword and reproduced the error, so that's not; the problem. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Wed, Mar 9, 2016 at 12:40 PM, Andrew James notifications@github.com; wrote:. > @Konjkov https://github.com/Konjkov could you show some of the output; > above the PSIO_ERROR? I am not sure that DF integrals is the culprit; > here. It would be easier to track down if I could see where in the second; > exited state it is failing. I ran the input you posted but I don't see the; > same PSIO_ERROR.; > ; > It is strange that the first excited state would be able to run if the; > integrals were incompatible. Also, the file number 128 is a temporary file; > used by the CC codes to store things with a short lifetime. If the; > integrals were the source of the problem I would expect this kind of error; > to show up when trying to read some persistent quantity, which would then; > be used to compute the values that would go into file 128.; > ; > @kannon92 https://github.com/kannon92 do you have an input that will; > cause the PSIO_ERROR if DF is used? The driver should probably soft-fail; > with a warning to turn DF off in these cases. It would be very frustrating; > for a job to run this far just to fail.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/307#issuecomment-194417745.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-194423967:24,test,test,24,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194423967,2,['test'],['test']
Testability,I noticed that sapt8 test case is broken (no idea if it's because of me or not). It has 0.0 stored in `SAPT IND ENERGY` Psivar instead of the actual uncoupled value. I tried to modify sapt_util.py to make it compute the uncoupled induction energy for `SAPT IND ENERGY`but that did not fix the test case. I don't see where else `SAPT IND ENERGY` is set. Are the uncoupled energy values even available to sapt_util.py ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364643141:21,test,test,21,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364643141,2,['test'],['test']
Testability,"I officially opened up a PR for v2rdm_casscf, at https://github.com/loriab/v2rdm_casscf/pull/5, which removes ERISieve from v2rdm_casscf and replaces it with TwoBodyAOInt. Once that is added in, we can progress with this PR, as that is the current bottleneck preventing this PR from passing CI testing. Ideally, there's no fun surprises after that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1561805862:294,test,testing,294,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1561805862,1,['test'],['testing']
Testability,I only have a version compiled from source right now (macOS) and it works correctly. I'll try and get a conda test on my linux box later this afternoon.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311744982:110,test,test,110,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311744982,1,['test'],['test']
Testability,I presume this actually fixes props2 (in which case should also add back to tests/CM). My concern is the change that people won't automatically get their multipoles at the origin w/o explicitly asking and that behaviour is different btwen Cart/ZMat (psi4/psi4#782). Anyone else concerned?. The scf-coverage problems we've been seeing have been compilation dependent after DF_Helper merge. Do you consider the changes to this test a fix to slightly flawed test?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/808#issuecomment-332288034:76,test,tests,76,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332288034,3,['test'],"['test', 'tests']"
Testability,"I pulled up issue 782 to remind my self what is going on, but the comments; there are somewhat terse and they don't do enough to jog my memory even; though I had a conversation with Lori about it. I'm not sure the wider; community will be able to comment much on this point without doing a little; homework to figure out what is being asked about. Could we have a bit more; commentary describing the issue?. On Tue, Sep 26, 2017 at 2:16 PM, Lori A. Burns <notifications@github.com>; wrote:. > I presume this actually fixes props2 (in which case should also add back; > to tests/CM). My concern is the change that people won't automatically get; > their multipoles at the origin w/o explicitly asking and that behaviour is; > different btwen Cart/ZMat (psi4/psi4#782; > <https://github.com/psi4/psi4/issues/782>). Anyone else concerned?; >; > The scf-coverage problems we've been seeing have been compilation; > dependent after DF_Helper merge. Do you consider the changes to this test a; > fix to slightly flawed test?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/808#issuecomment-332288034>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9Qds6BK6y5mzxnLMsYRrJP9RA8FGQ6ks5smT9mgaJpZM4PkgZ8>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/808#issuecomment-332291477:572,test,tests,572,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332291477,3,['test'],"['test', 'tests']"
Testability,"I pushed a fix to the molden1 test. The issue with the dipole moment is more complex. I think the OPDM and the MOs are certainly not consistent. . One solution would be to converge the orbitals and then do the following:; - transform orbs. to either canonical or natural basis; - transform integrals; - solve the CI problem; - compute 1/2-RDMs. @dgasmith: since you are more familiar with the mcscf code, can you think of a place where we can put these orbital transformations (semi/nat) before the computation of the OPDM? Better, if you have a few minutes could you try to implement the above code?. Also, is there a way I can access the full Fock matrix with frozen docc and virt blocks? This is of course irrelevant now, but I am thinking that in the future if we try to do gradients of MRPTs it might be better if we have all blocks diagonalize the Fock matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304537094:30,test,test,30,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304537094,1,['test'],['test']
Testability,"I put in a debug statement in the `AO_core()` routine; ```; // a fraction of memory to use, do we want it as an option? ; if (memory_ < required_core_size_) {; outfile->Printf(""memory = %lu < required_core_size = %lu, turning core off\n"",(long unsigned) memory_,(long unsigned) required_core_size_);; AO_core_ = false;; }; ```; and I see the following in the log file; ```; ==> Primary Basis <==. Basis Set: PCSEG-0; Blend: PCSEG-0; Number of shells: 313; Number of basis function: 489; Number of Cartesian functions: 489; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (PCSEG-0 AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry SI line 742 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 3 entry F line 383 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 4 entry O line 323 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 5-8 entry N line 263 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 9-43 entry C line 203 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs ; atoms 44-90 entry H line 23 file /home/work/psi4/install/share/psi4/basis/def2-sv_p_-jkfit.gbs . memory = 256000000 < required_core_size = 671520055, turning core off; memory = 256000000 < required_core_size = 671520055, turning core off; ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 489 489 0 0 0 0; -------------------------------------------------------; Total 489 489 165 165 165 0; -------------------------------------------------------. ==> Integral Setup <==. DFHelper Memory: AOs need 5.003 GiB; user supplied 27.940 GiB. Turning off in-core AOs.; ```. That is, the routine gets called twice in the basis set up phase with the default memory 256 MB. This is why the initialization is screwed up. Someone else's job to fix",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160:359,log,log,359,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503720160,1,['log'],['log']
Testability,"I ran (cd doc; make) which amounts to the same I guess. I understand that the web-hosted documentation is great, but having the HTML along with the binaries would be more canonical, in case a user is using an older version but looking at the latest docs online. What I am not quite clear about yet is whether the content of SUMMARY gets changed based on present functionality (some dcft tests appear to have been dropped for me), or whether that is due to outdated source files. If it is strictly the latter, then yeah, making sure those are uptodate at tarball release would suffice I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/14#issuecomment-22983952:387,test,tests,387,https://psicode.org,https://github.com/psi4/psi4/issues/14#issuecomment-22983952,2,['test'],['tests']
Testability,"I ran QZ Benzene (nso = 510). With 198.6 s walltime, we have...; ```; V: Grid : 1.383u 0.067s 1.243w 1 calls; | build grid : 1.183u 0.050s 1.093w 1 calls; | post-process grid : 0.200u 0.017s 0.150w 1 calls; DFH: sparsity prep : 2.067u 0.050s 1.461w 1 calls; | Libint2ERI::Libint2ERI : 1.417u 0.033s 1.055w 1 calls; Libint2ERI::Libint2ERI : 2.533u 0.033s 1.575w 2 calls; JK: (A|Q)^-1 : 1.300u 1.417s 1.553w 1 calls; | Libint2ERI::Libint2ERI : 0.000u 0.000s 0.000w 1 calls; JK: (A|mn) : 8.933u 0.050s 5.485w 3 calls; JK: (Q|mn) : 11.483u 0.083s 7.061w 3 calls; JK: (Q|mn) Write : 0.017u 0.583s 0.492w 3 calls; HF: Form core H : 0.133u 0.017s 0.086w 1 calls; HF: Form S/X : 0.183u 0.000s 0.117w 1 calls; HF: Guess : 0.233u 0.050s 0.164w 1 calls; | SAD Guess : 0.233u 0.050s 0.158w 1 calls; HF: Form G : 243.750u 9.350s 170.286w 8 calls; | RV: Form V : 179.867u 2.167s 122.104w 8 calls; | | Properties : 98.583u 0.933s 67.840w 15912 calls; | | Functional : 4.683u 0.150s 3.401w 15912 calls; | | | DFT NaN Check : 0.067u 0.033s 0.040w 15912 calls; | | V_xc : 76.250u 0.833s 50.572w 15912 calls; | JK: D : 0.017u 0.000s 0.005w 8 calls; | JK: USO2AO : 0.017u 0.000s 0.000w 8 calls; | JK: JK : 63.833u 7.183s 48.154w 8 calls; | | JK: (Q|mn) Read : 0.150u 4.217s 4.160w 25 calls; | | JK: J : 2.933u 0.017s 1.907w 25 calls; | | | JK: J1 : 1.333u 0.017s 0.862w 25 calls; | | | JK: J2 : 1.517u 0.000s 0.983w 25 calls; | | JK: K : 59.583u 0.683s 39.733w 25 calls; | | | JK: K1 : 54.533u 0.583s 36.065w 25 calls; | | | JK: K2 : 5.033u 0.100s 3.662w 25 calls; | JK: AO2USO : 0.000u 0.000s 0.000w 8 calls; HF: Form F : 0.000u 0.000s 0.011w 8 calls; HF: Form D : 0.000u 0.000s 0.007w 8 calls; HF: DIIS : 0.950u 0.350s 1.000w 7 calls; HF: Form C : 1.617u 0.017s 1.373w 7 calls; ```. NaN check time is negligible, and I think this resolves @hokru's concern. I'll re-trigger tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1180695095:1855,test,tests,1855,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1180695095,1,['test'],['tests']
Testability,"I ran ```conda create -n <p4env> psi4 -c psi4/label/dev -c conda-forge``` and it worked. makes sense since rdkit uses conda-forge as well. I then ran ```psi4 --test``` and here are the results. does it matter some were skipped/ failed?. ```; (psi4env) C:\Users\erikc>psi4 --test; =========================================================================== test session starts ===========================================================================; platform win32 -- Python 3.8.10, pytest-6.2.4, py-1.10.0, pluggy-0.13.1 -- C:\Users\erikc\psi4conda\envs\psi4env\python.exe; cachedir: .pytest_cache; rootdir: C:\Users\erikc; collected 3356 items / 3301 deselected / 55 selected. psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_gdma SKIPPED (Not detecting module gdma. Install package if necessary to enable tests.) [ 1%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker1 PASSED [ 3%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_ipi_broker2 PASSED [ 5%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mrcc SKIPPED (Not detecting module mrcc. Install package if necessary to enable tests.) [ 7%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_chemps2 SKIPPED (Not detecting module chemps2. Install package if necessary to enable t...) [ 9%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_mp2d SKIPPED (Not detecting module mp2d. Install package if necessary to enable tests.) [ 10%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_dftd3 PASSED [ 12%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_libefp SKIPPED (Not detecting module libefp. Install package if necessary to enable tests.) [ 14%]; psi4conda/envs/psi4env/lib/site-packages/psi4/tests/test_addons.py::test_pcmsolver[pcm_helper] SKIPPED (Not detecting module pcmsolver. Install package if neces...) [ 16%]; psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:160,test,test,160,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,14,['test'],"['test', 'tests']"
Testability,"I ran `sapt1` on an s390x box now and compared the output to `output.ref` and one thing is weird:. ```; - Geometry (in Bohr), charge = 0, multiplicity = 1:; + Geometry (in Bohr), charge = 0, multiplicity = 2:; ```. Nothing else much stands out besides `output.ref` being from an older version so having some other strings here and there. When SAPT would start. ```; - SAPT0 ; - Ed Hohenstein; - 6 June 2009; ```; I immediately get the backtrace:; ```; +Traceback (most recent call last):; + File ""/usr/bin/psi4"", line 269, in <module>; + exec(content); + File ""<string>"", line 53, in <module>; + File ""/usr/lib/s390x-linux-gnu/psi4/driver/driver.py"", line 492, in energy; + wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); + File ""/usr/lib/s390x-linux-gnu/psi4/driver/procrouting/proc.py"", line 3438, in run_sapt; + e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn); +; +RuntimeError: ; +Fatal Error: Laplace Quadrature requested for (E_HUMO - E_LOMO)/(E_LUMO-E_HOMO) > 7.0 * 10^12, quadratures are not designed for this range.; ```. I checked and adding `DENOMINATOR_ALGORITHM CHOLESKY` to `input.dat` makes the test pass:. ```; Nuclear Repulsion Energy..........................................PASSED; SAPT0 Eelst.......................................................PASSED; SAPT0 Eexch.......................................................PASSED; SAPT0 Eind........................................................PASSED; SAPT0 Edisp.......................................................PASSED; SAPT0 Etotal......................................................PASSED; ```. I'll try to step through the code first before I start recompiling with the patches you suggested.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451695207:1151,test,test,1151,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451695207,1,['test'],['test']
Testability,"I ran pytest quick tests, all pytest still running",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3148#issuecomment-2012993067:19,test,tests,19,https://psicode.org,https://github.com/psi4/psi4/pull/3148#issuecomment-2012993067,1,['test'],['tests']
Testability,"I ran some tests to try to reproduce the error, and I found that the point where the error started _differed_ between runs. Sometimes, it ended after printing B(2, 1, 3), sometimes it printed *R(0,1) as infinity and said the optimization failed, sometimes it said it was generating an empirical Hessian for each fragment and failed after that... Is this what you're seeing?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/989#issuecomment-385065247:11,test,tests,11,https://psicode.org,https://github.com/psi4/psi4/issues/989#issuecomment-385065247,1,['test'],['tests']
Testability,"I ran some tests with a hotfix of #859, and while there was still some variation, it was confined to the last decimal place, even after nine points on the path. So yes, this is a bug closely tied to #859 after all. Note to Self:. Said hotfix was inserting the following line of code under the ""Test for convergence"" section of opt_data.cc:; `if (Opt_params.opt_type == OPT_PARAMS::IRC && g_iteration() == 1) return false;`; I recall some rare cases where the second iteration would be taken as the stationary point. I'm having a hard time reproducing this, but checking if the Hessian has a negative eigenvalue would fix it. I do not have the time at the moment to figure out how I would actually check that, in the C++ code. This explains nothing about the symmetry problem, but I would be completely unsurprised if there was some symmetrizing step somewhere in this logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-346434514:11,test,tests,11,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346434514,3,"['Test', 'log', 'test']","['Test', 'logic', 'tests']"
Testability,"I ran the complete test suite with; ```; $ ctest; ```; and got a bunch of crashes with the newest master b167f473fadf6e6b75dcc505b33822fc46169f8e, see below. [psimrcc-fd-freq2-bactrace.log](https://github.com/psi4/psi4/files/2423146/psimrcc-fd-freq2-bactrace.log); [fci-tdm-bactrace.log](https://github.com/psi4/psi4/files/2423147/fci-tdm-bactrace.log); [fci-tdm-2-bactrace.log](https://github.com/psi4/psi4/files/2423148/fci-tdm-2-bactrace.log); [cubeprop-bactrace.log](https://github.com/psi4/psi4/files/2423149/cubeprop-bactrace.log); [cc46-bactrace.log](https://github.com/psi4/psi4/files/2423150/cc46-bactrace.log); [cc47-bactrace.log](https://github.com/psi4/psi4/files/2423151/cc47-bactrace.log)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1255#issuecomment-425002556:19,test,test,19,https://psicode.org,https://github.com/psi4/psi4/issues/1255#issuecomment-425002556,13,"['log', 'test']","['log', 'test']"
Testability,"I really couldn't care less about pluralization in function names, but this is going to break the three findif related tests in `cookbook`. Expected timeline on getting this in? The changes to read/write wavefunction syntax will impact the updated orbital guess code I should be submitting tomorrow. I also never thought I'd see you _remove_ hand-formatting. See the read/write wavefunction code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1394#issuecomment-443564379:119,test,tests,119,https://psicode.org,https://github.com/psi4/psi4/pull/1394#issuecomment-443564379,1,['test'],['tests']
Testability,"I rebased, but it still used MSVC? The appveyor log does not show the beginning, not sure how BLAS is linked and why C_SDOT is missing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1261#issuecomment-430585190:48,log,log,48,https://psicode.org,https://github.com/psi4/psi4/pull/1261#issuecomment-430585190,1,['log'],['log']
Testability,"I recall that the test suite runs in serial. We'd love a parallel version, but @loriab has had other priorities. Do correct me if I'm wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2941#issuecomment-1531525344:18,test,test,18,https://psicode.org,https://github.com/psi4/psi4/issues/2941#issuecomment-1531525344,1,['test'],['test']
Testability,"I reduced the active space of the `dmrg-caspt2-n2` testcase (see http://anonscm.debian.org/viewvc/debichem/unstable/psi4/debian/patches/relax_dmrg_caspt2_test.patch?view=markup), and (now?) some architectures show slightly different results, e.g. powerpc:. ```; DMRG-SCF Energy...................................................PASSED; DMRG-CASPT2 Energy: computed value (-107.5036885) does not match (-107.5036855) to 6 decimal places.; ```. See https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=powerpc&ver=1%3A1.0~rc-2&stamp=1464563141 for the full log. This also happened on arm64, i386 (x86-32) and ppc64. The differences are quite small, but mentioning here nevertheless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222506368:51,test,testcase,51,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222506368,2,"['log', 'test']","['log', 'testcase']"
Testability,"I remember that we needed to fudge the spaces a bit as we needed more space flexibility that the standard 4 slots allowed. In that particular test case there are no virtual orbitals as the CI space (we define as active occupied) spans everything besides frozen occ and frozen virt. This is due to both CISD being defined as a special case of RASCI and the fact that in CI (MCSCF) land a true virtual space is a non-active, but rotable orbital.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-454533362:142,test,test,142,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-454533362,1,['test'],['test']
Testability,"I remember the episode but not the exact error (though it was in sapt and cubeprop tests). Something about pybind's behavior being less forgiving than boost's. Also psi4 modules behaved differently wrt how much control they took upon themselves vs giving to the AIOHandler lib. I think I standardized that aspect a bit. Good news is that I think you can adjust the synchronization again, so long as the tests pass (since it was broken test cases before that prompted the change). Or the inversion may have spontaneously healed the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-277503822:83,test,tests,83,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-277503822,3,['test'],"['test', 'tests']"
Testability,"I removed the Prop baseclass in the upcoming commits (pending tests). i had to add a Da_name accessor to prop though, because OEProp uses the Da matrix as a fallback if no title is given.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133#issuecomment-413024630:62,test,tests,62,https://psicode.org,https://github.com/psi4/psi4/pull/1133#issuecomment-413024630,1,['test'],['tests']
Testability,I saw one like that before. I'll try to track it down. I haven't tested this PR against py2 though. Do you have any idea if any custom from_python typemaps / convereters are registered currently registered?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/160#issuecomment-130014713:65,test,tested,65,https://psicode.org,https://github.com/psi4/psi4/pull/160#issuecomment-130014713,1,['test'],['tested']
Testability,"I see a 3c smoke test in here, so I think it's best for me to update the branch with the 3c PR contents, before merging. Thoughts, @loriab ? Excellent stuff in this one - sorry for the delayed review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627#issuecomment-283403855:17,test,test,17,https://psicode.org,https://github.com/psi4/psi4/pull/627#issuecomment-283403855,1,['test'],['test']
Testability,"I see the same issue with Psi4 installed on Ubuntu 16.04.1 LTS, compiled with gcc 5.4.0. It is also using ATLAS for BLAS/LAPACK, and my build is a debug build. The following test cases fail:; 77 - cdomp2-2 (Failed); 125 - dfmp2-grad2 (Failed); 127 - dfmp2-grad4 (Failed); 129 - dfomp2-2 (Failed); 131 - dfomp2-4 (Failed); 133 - dfomp2-grad2 (Failed). I'll update as I switch to another BLAS/LAPACK.; Other test cases fail but they might be related to different problems:; 188 - mints9 (Failed); 268 - pywrap-checkrun-rhf (Failed); 269 - pywrap-checkrun-rohf (Failed); 270 - pywrap-checkrun-uhf (Failed); 314 - fsapt1 (Timeout); 321 - python-energy (Failed); 322 - python-curve (Failed); 323 - python-pubchem (Failed); 324 - json-energy (Failed); 325 - json-gradient (Failed)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-277545780:174,test,test,174,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-277545780,2,['test'],['test']
Testability,"I see this was without augmented keyword, with that added the test above crashes as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467161900:62,test,test,62,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467161900,1,['test'],['test']
Testability,"I see we have a plugin error here https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=e678ab3d-f7fc-50f0-56d8-3349f4950165&l=9304 . That's very possibly pre-existing -- I should have retained skeletons in ctest when I deduplicated the ctest and pytest calls. The ""missing packages"" link doesn't work for me. What is the text? Does running the `test_sapt_dft1` test in particular work for you locally?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943:99,log,logs,99,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943,2,"['log', 'test']","['logs', 'test']"
Testability,"I see your results, too. What's the overall intent of the `num_frozen_docc` here? Are you wanting plain frozen core or is this preparation for something more complex? Note that we did address frozen core in sapt fairly recently, https://github.com/psi4/psi4/pull/2271, and that solution in itself is making use of `num_frozen_docc`. When I switch your first line to `set freeze_core true`, water is reasonable again. ```; > grep -e ""Final E"" lizsapt2.out ; @DF-RHF Final Energy: -272.35982173084625; @DF-RHF Final Energy: -196.32485863378869; @DF-RHF Final Energy: -76.03485411063548; @DF-RHF Final Energy: -272.35997062909757; @DF-RHF Final Energy: -196.32485863377360; @DF-RHF Final Energy: -76.03485447822362; ```. In SAPT, frozen-core will influence a delta-MP2 correction (irrelevant here) and possibly (I'm not sure if there are conditions) dispersion https://github.com/psi4/psi4/blob/master/tests/sapt10/input.dat#L59-L63 since those are mp2-like terms. You're right that HF energies themselves should be indifferent. Without experimenting much, I venture that the presence of the sapt fc correction and all the wfn passing w/i sapt is causing the bad QC. Possibly `num_frozen_docc` should be disabled for SAPT, if newly fixed `freeze_core=True` works for you. Or else `num_frozen_docc` needs a separate fix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1207141235:899,test,tests,899,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1207141235,1,['test'],['tests']
Testability,"I should add, the `der_type` keywords were already in the tests. I'm not sure how pervasive they are, but we should probably weed them all out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-231269343:58,test,tests,58,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-231269343,1,['test'],['tests']
Testability,I should point out that I'm running cc1 test case. If I put a breakpoint at cctransort.cc:386 the file sizes are:. ```; -rw-r--r-- 1 jturney hfs 2280 Feb 2 15:53 /tmp/psi.16572.h2o.100; -rw-r--r-- 1 jturney hfs 12744 Feb 2 15:53 /tmp/psi.16572.h2o.180; -rw-r--r-- 1 jturney hfs 10564 Feb 2 15:53 /tmp/psi.16572.h2o.32; -rw-r--r-- 1 jturney hfs 114472 Feb 2 15:53 /tmp/psi.16572.h2o.34; -rw-r--r-- 1 jturney hfs 40688 Feb 2 15:53 /tmp/psi.16572.h2o.35; -rw-r--r-- 1 jturney hfs 233504 Feb 2 15:53 /tmp/psi.16572.h2o.41; -rw-r--r-- 1 jturney hfs 784 Feb 2 15:53 /tmp/psi.16572.h2o.61; -rw-r--r-- 1 jturney hfs 11848 Feb 2 15:53 /tmp/psi.16572.h2o.62; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178812501:40,test,test,40,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178812501,1,['test'],['test']
Testability,"I simplified the omega setter interface for the `HJS_PBE` https://github.com/psi4/psi4/pull/1101/files#diff-375f534fffdbfb11f5ae38dace0c3ab71230ea1f9eed95df51d21fdfd2589e4aL218-R221 and that fixed custom and smoke. Is that what you had in mind with ""named parameter setter"", @susilehtola?. Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. Are any of these now available in v5.1 that I should be activating?. ```; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM05-D not in Psi4.; SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: wM06-D3 not in Psi4.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755032163:473,test,tests,473,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755032163,20,['test'],['tests']
Testability,"I strongly agree with Lori about having this as a regression test rather than an accuracy test. Put the new, approximate energies with all the others. That should be a good indicator to others working with the SCF system of what accuracy to expect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1309250403:61,test,test,61,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1309250403,2,['test'],['test']
Testability,"I suspect https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/empirical_dispersion_resources.py#L884 in qcng will need expansion to the extra parameters. And https://github.com/MolSSI/QCEngine/blob/master/qcengine/programs/empirical_dispersion_resources.py#L904 might need populating with the defaults like the `_get_d3_definitions` below since the changes aren't in parameters.toml in dftd4 project. Please let me know if it's not behaving rationally -- the approach made sense for flexibility once upon a time, but I fear the logic is tangled nowadays.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2121#issuecomment-1368076353:541,log,logic,541,https://psicode.org,https://github.com/psi4/psi4/issues/2121#issuecomment-1368076353,1,['log'],['logic']
Testability,"I suspect that in several of these, the problem is that the downstream; codes need the (conventional or DF) integrals written to disk. This got; handled by some logic where necessary for scf_type = disk_df, apparently,; but did not get handled for mem_df. Works ok for ccenergy? It also needs conventional integrals written to; disk. Maybe that is getting intercepted correctly. On Mon, May 14, 2018 at 6:14 PM, Lori A. Burns <notifications@github.com>; wrote:. > Posting Dom's very nice summary for easier perusal and searchability.; > Effective scf_type df Testing: mem_df & disk_df; >; > All tests listed below examine calls to both energy() and gradient() when; > employing the scf_type mem_df and scf_type disk_df settings. Each test; > employs a different model chemistry (indicated in the test description); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:161,log,logic,161,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,5,"['Test', 'log', 'test']","['Testing', 'logic', 'test', 'tests']"
Testability,I suspect this was fixed in #1414 that made sure dftd3-using tests weren't run if dftd3 not available.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1418#issuecomment-451602694:61,test,tests,61,https://psicode.org,https://github.com/psi4/psi4/issues/1418#issuecomment-451602694,1,['test'],['tests']
Testability,"I tested atom Ne because I saw it in the user manual (pp. 20) as an example. Strangely it works, and Psi4 terminated successfully.; Buy you a beer for Ne.... Hao",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/7#issuecomment-19470203:2,test,tested,2,https://psicode.org,https://github.com/psi4/psi4/issues/7#issuecomment-19470203,1,['test'],['tested']
Testability,"I tested my code after rebasing, still looks just like it did before. I updated the timings and errors graphs based on the results of my rebased code (I used an intel compiler this time, rather than GCC)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2187#issuecomment-855159767:2,test,tested,2,https://psicode.org,https://github.com/psi4/psi4/pull/2187#issuecomment-855159767,1,['test'],['tested']
Testability,"I tested my code on the S22by7 dimer set (1 core, direct SCF only, no df guess) using different screening thresholds. https://docs.google.com/spreadsheets/d/1aja4HIT-jzz8f6vRTX8c1YDMPStpq2TW8lRM6-WiVBk/edit?usp=sharing",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2062#issuecomment-748496859:2,test,tested,2,https://psicode.org,https://github.com/psi4/psi4/pull/2062#issuecomment-748496859,1,['test'],['tested']
Testability,"I tested the psi4 package on `linux-64` using the staged-recipes artifacts and it works perfectly. The tests were performed on an in-house QM package and I only did a single point gradient computation on a single and simple molecule. Two things maybe:. - I add to use the `conda-forge/label/libint_dev` channel for libint.; - Upon importing `psi4` I noticed a bunch of prints that wasnt here before:. ```; psi4_module_loc='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4'; pymod='/python3.9/site-packages/lib/psi4'; pymod_dir_step='../../../..'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; executable='/home/hadim/conda_envs/bin/psi4'; data_dir='/home/hadim/conda_envs/lib/python3.9/site-packages/psi4/../../../../share/psi4'; data_dir='/home/hadim/conda_envs/share/psi4'; ```. Is it coming from package development, and you'll remove it moving forward?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938:2,test,tested,2,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483937938,4,['test'],"['tested', 'tests']"
Testability,"I think (B) with a comment in the tests about why updated. We want to keep checking to the same precision, but like physconst updates, the ref value has changed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-494026644:34,test,tests,34,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-494026644,1,['test'],['tests']
Testability,I think I found out what is going on. Both ORCA and PSI4 are indeed writing the wrong contraction coefficients. I've done the same computation with Gaussian. Then I loaded the Gaussian log file into molden and wrote out a molden file. That one can be loaded back as an input for molden and it gives the right Mulliken charges:. N 0.0380; H -0.2742; H 0.0121; H 0.2242; Sum of Mulliken Charges: 0.0001. It seems that the the molden format uses exactly the same normalization conventions of Gaussian. (Gaussian prints the same contraction coefficients in the log file when the gfinput option is used.) These number seem to follow the same conventions as the Gaussian94 basis set format. (See the EMSL database for some examples.). I've update the archive file:. https://dl.dropboxusercontent.com/u/4871688/moldenbug.tar.bz2. Now it also contains the Gaussian calculation and the molden file made with molden.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/60#issuecomment-53039792:185,log,log,185,https://psicode.org,https://github.com/psi4/psi4/issues/60#issuecomment-53039792,2,['log'],['log']
Testability,"I think I've stumbled across this problem when trying to get hessians for comparison with finite difference code. The below input completes on our cluster in under a minute, operating on dev199. It took about 1.8 hours for jobs to finish when I didn't change the scf_type. Curiously, this is the same amount of time it took when I forgot to include the memory line. Could the bug be the DF code not using all the memory it has available? If so, then the bug OP saw wasn't the computation getting eternally stuck, but that trying to get an analytic hessian with around 1500 basis functions and only 500 MiB feels like an eternity. ```; #! SCF DZ finite difference frequencies by energies for C4NH4; memory 30gb. molecule c4nh4 {; units angstrom; -1 1; C 0.000000000000 0.000000000000 1.119905811674; N 0.000000000000 0.000000000000 2.310087277449; C 0.000000000000 0.000000000000 -0.231085072523; C -0.781617287494 0.000000000000 -1.483869398827; C 0.781617287494 0.000000000000 -1.483869398827; H -1.274488047821 -0.899961499592 -1.835960153318; H -1.274488047821 0.899961499592 -1.835960153318; H 1.274488047821 0.899961499592 -1.835960153318; H 1.274488047821 -0.899961499592 -1.835960153318; }. # *** Test all frequencies by 3-pt formula.; set {; basis dz; d_convergence 13; scf_type pk; }. scf_e, scf_wfn = frequencies('scf', dertype=2, return_wfn=True); fd_freqs = scf_wfn.frequencies(); clean(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1145#issuecomment-429553898:1204,Test,Test,1204,https://psicode.org,https://github.com/psi4/psi4/issues/1145#issuecomment-429553898,1,['Test'],['Test']
Testability,"I think `cpscf_linear_response` does not yet support UHF references (for example [here](https://github.com/psi4/psi4/blob/9485035a0cd5d9a39582c9d7c4406f64aa12b838/psi4/driver/procrouting/response/scf_response.py#L164)...). Adding this feature would require some coding and testing, or instead a clean `NotImplementedError` should be thrown.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2265#issuecomment-892409803:273,test,testing,273,https://psicode.org,https://github.com/psi4/psi4/issues/2265#issuecomment-892409803,1,['test'],['testing']
Testability,I think charge comes first among the arguments. https://github.com/psi4/psi4/blob/master/tests/extern1/input.dat#L24 Your input possibly interpreted as no charge.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1757#issuecomment-557979152:89,test,tests,89,https://psicode.org,https://github.com/psi4/psi4/issues/1757#issuecomment-557979152,1,['test'],['tests']
Testability,"I think for your purpose, I'd use `ElectrostaticInt` from C++ (I'm using `ao_multipole_potential` because of tests from Python). `ElectrostaticInt` uses L2, whereas multipole potential ints will use M-D in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2473#issuecomment-1067313088:109,test,tests,109,https://psicode.org,https://github.com/psi4/psi4/pull/2473#issuecomment-1067313088,1,['test'],['tests']
Testability,I think if we can get a test for this in the `tests/mrcc` folder this will be good to go.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634#issuecomment-286584588:24,test,test,24,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-286584588,2,['test'],"['test', 'tests']"
Testability,I think in other orbital test we attempted to take magnitudes or norms to remove these issues. ROT is DOCC + ACT + VIR with the inactive pieces removed. I can see how the previous message was confusing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1847#issuecomment-598212613:25,test,test,25,https://psicode.org,https://github.com/psi4/psi4/pull/1847#issuecomment-598212613,1,['test'],['test']
Testability,"I think it's pretty clear that this is not a problem in the code - the calculations run and give the correct result - but in the test itself that has degenerate modes which don't appear to be treated properly by the test code. Because the vibrational analysis part was also marked as ```xfail``` in the test suite, I found it reasonable to mark the Hessian test as ```xfail```, too. There still remain checks on more complicated molecules, which don't have degenerate frequencies. As cofirmed by @loriab, all tests pass, so this one is good to go!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-452068699:129,test,test,129,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-452068699,10,['test'],"['test', 'tests']"
Testability,"I think it's worth mentioning that #1235 also adds the unique feature of doing composite calculations using arbitrary options (frozen core, relativistic effects) or basis sets - it's not just a developer interest PR. For performance, the grid work @zachglick in #1291 and obviously your DFT grid cache in #1233 (which you mention in the top section) are pretty huge. I don't know if you're planning to do any benchmarking, especially wrt. the discussion we had at PsiCon - even if it's just Psi4 1.2.1 vs Psi4 1.3a1 vs Psi4 1.3rc, it would be good to show how much improvement there actually is, especially on > 8 threaded jobs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406#issuecomment-445236768:409,benchmark,benchmarking,409,https://psicode.org,https://github.com/psi4/psi4/issues/1406#issuecomment-445236768,1,['benchmark'],['benchmarking']
Testability,"I think its this way so that people can use the `READ` keyword for failed jobs without a PID. We do have a PID restart mechanism; however, its not tested or used AFAIK. . There are quite a few read/writes coming from Python libraries these days so a pure Psi4 C++ module would not work. You could have a unified namespace that includes the PID. This is what `core.get_writer_file_prefix(scf_molecule.name())` tries to do; however, without a PID.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/548#issuecomment-266883432:147,test,tested,147,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266883432,1,['test'],['tested']
Testability,I think pywrap-alias does use some of detci's more obscure methods (below). I was also remembering a bad bout I had with ddd before last Christmas where Windows only hung up for detci mp5 run only by exe or by api. ```; (py38) >>> grep -e 'PASSED' -e 'D E T C I' ../tests/pywrap-alias/input.out ; [1] Au std...........................................................................PASSED; [2] MP2 sp...........................................................................PASSED; MP2 route check.................................................................PASSED; [3] MP3 occ..........................................................................PASSED; MP3 route check.................................................................PASSED; [4] MP3 detci (energy and route check)...............................................PASSED; [5] MP4 fnocc........................................................................PASSED; (a 'D E T C I' module); [6] MP11 sp..........................................................................PASSED; (a 'D E T C I' module); [7] ZAPT4 sp.........................................................................PASSED; (a 'D E T C I' module); [8] FCI sp...........................................................................PASSED; [9] MP2.5 sp.........................................................................PASSED; [10] cbs()............................................................................PASSED; [11] db().............................................................................PASSED; [12] CISD sp..........................................................................PASSED; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991#issuecomment-683898544:266,test,tests,266,https://psicode.org,https://github.com/psi4/psi4/pull/1991#issuecomment-683898544,1,['test'],['tests']
Testability,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275138618:725,test,tests,725,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618,1,['test'],['tests']
Testability,"I think that looks good, @dgasmith. @jturney, how about a weekly build/test for the full matrix (and OSX) using the Docker solution that @dgasmith proposed before. That would give us complete coverage of compilers and debug/release, but on a slight delay. We'd catch most bugs before that stage with the limited Travis builds. Just a thought.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182893800:71,test,test,71,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893800,1,['test'],['test']
Testability,I think that should have done the trick. (I ran the tdscf tests and then overwrote the respective output.ref files with the generated output.dat files.) I think the only differences are numerical errors during SCF and then formatting of the output. All final results should be unchanged.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2605#issuecomment-1155599085:58,test,tests,58,https://psicode.org,https://github.com/psi4/psi4/pull/2605#issuecomment-1155599085,1,['test'],['tests']
Testability,"I think the ADC(2) code has some special corrections it can apply, but I; would have thought that those were turned off by default... On Wed, Jun 6, 2018 at 3:52 PM Alexander Sokolov <notifications@github.com>; wrote:. > Hi everyone,; >; > I was testing the ADC(2) code in Psi4 on small molecules and noticed that; > the results I obtained were significantly different from Q-Chem. The SCF; > and MP2 energies match very well.; >; > For N2 (r = 1.2 A) with cc-pVDZ basis, here's a summary of the energies; > for the 8 lowest-lying singlet states from Q-Chem 4.4.1 compared to Psi4; > 1.1:; >; > Q-Chem 4.4.1:; > MP2 ground-state energy: -109.2579498247; > Excitation energy: 8.385211 eV; > Excitation energy: 8.385211 eV; > Excitation energy: 8.832813 eV; > Excitation energy: 9.441957 eV; > Excitation energy: 9.441957 eV; > Excitation energy: 13.868446 eV; > Excitation energy: 13.868446 eV; > Excitation energy: 14.791430 eV; >; > Psi4 1.1:; > MP2 ground-state energy: -109.25794982519506; > -> 1 A state : 0.3113289 (a.u.), 8.4716885 (eV); > -> 2 A state : 0.3113289 (a.u.), 8.4716885 (eV); > -> 3 A state : 0.3343892 (a.u.), 9.0991916 (eV); > -> 4 A state : 0.3565394 (a.u.), 9.7019279 (eV); > -> 5 A state : 0.3565394 (a.u.), 9.7019279 (eV); > -> 6 A state : 0.5069575 (a.u.), 13.7950140 (eV); > -> 7 A state : 0.5069575 (a.u.), 13.7950140 (eV); > -> 8 A state : 0.5127312 (a.u.), 13.9521243 (eV); >; > The Q-Chem energies agree with my standalone code. For N2 with STO-3G; > basis I simply get zero excitation energies with Psi4:; >; > ==> ADC(2) Computation <==; >; > -> 1 A state : 0.0000000 (a.u.), 0.0000000 (eV); > Non-iterative: 0.3864160 (a.u.), 10.5149136 (eV); > ┆ ┆ Occ Vir Coefficient; > ---------------------------------------------; >; > Converged in 2 iteration.; > Squared norm of the S component: 1.0000000; > The S vector is rotated up to 90.000 (deg.); > #WARNING: Strongly rotated from the CIS state!; >; > -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); > Non-iterative: 0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-395444918:246,test,testing,246,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-395444918,2,['test'],['testing']
Testability,"I think the GH test was a success, but we'll have to remove the (blocking) lgtm approval",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-265476766:15,test,test,15,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265476766,1,['test'],['test']
Testability,I think the `np-array-interface` [test](https://github.com/psi4/psi4/blob/master/tests/numpy-array-interface/input.dat) should be checking for this already: it is hitting `Matrix.np_read()` after writing it into file.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1607#issuecomment-485812426:34,test,test,34,https://psicode.org,https://github.com/psi4/psi4/pull/1607#issuecomment-485812426,2,['test'],"['test', 'tests']"
Testability,"I think the best course of action is for me to take this as part of my foray into the `cc` mega-module, after I'm through with the test pass. Incidentally, the current plan for my `cc` module pass is: get `cc` tests off perl, this issue, move variables to `wfn`, move `ccdensity` to Matrix objects, then give `ccdensity` a Wavefunction. There's a lot more that could be done, but my primary interest is in syncing up densities across multiple modules.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-1042970149:131,test,test,131,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1042970149,2,['test'],"['test', 'tests']"
Testability,"I think the verbose output is ok here, @hokru , because pytest suppresses the output by default. If the test happens to fail, running that test with output enabled could help with debugging possibly. I totally agree that the CTests inputs should stay minimal because they ultimately get converted into sample inputs for users to have as starting points for job inputs. The Windows test failure looks like we need a `using_resp` like mechanism to conditionally activate resp; I'm sure you have it under control, Lori.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2065#issuecomment-744433410:104,test,test,104,https://psicode.org,https://github.com/psi4/psi4/pull/2065#issuecomment-744433410,3,['test'],['test']
Testability,"I think they're in `samples/`, @JonathonMisiewicz, which only gets regenerated from `tests/` upon docs build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-426048466:85,test,tests,85,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-426048466,1,['test'],['tests']
Testability,"I think this all makes sense and the fact that this didn't break tests is pretty impressive (or says something about our test?). I don't thin these is a reason to assume that X is symmetric either. We seem to assume this in some places of the code however, but this should be restricted to the SCF code. It would be good for @andysim/ @jturney to comment on this as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1781#issuecomment-575314304:65,test,tests,65,https://psicode.org,https://github.com/psi4/psi4/pull/1781#issuecomment-575314304,2,['test'],"['test', 'tests']"
Testability,"I think this is enough for now. I want to very carefully check the handling of perturbations before making this accessible enough to be tested by our normal suite. For posterity, standard usage with the current interface is:; ```; std::shared_ptr<OneBodySOInt> wOBI(integral_->so_rel_potential());; OperatorSymmetry msymm(OperatorSymmetry::L, molecule_, integral_, soFactory_);; auto wMats = msymm.create_matrices(""SO Relativistic Potential"");; wMats.insert(wMats.begin(), soFactory_->create_matrix(""SO Relativistic Potential""));; wOBI->compute(wMats);; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3174#issuecomment-2152661157:136,test,tested,136,https://psicode.org,https://github.com/psi4/psi4/pull/3174#issuecomment-2152661157,1,['test'],['tested']
Testability,I think this is finally ready. All tests seem to be passing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328#issuecomment-1074703959:35,test,tests,35,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1074703959,1,['test'],['tests']
Testability,"I think this is mostly good to go, I'll add a test or two soon. I would like a little feedback on if there's a better way to store the excitation energies. I kind of just throw them in Wavefunction one at a time. I'm sure all of that will change anyway with @robertodr 's changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626184715:46,test,test,46,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626184715,2,['test'],['test']
Testability,"I think this is on the final stretch. Once the new tests are in, I'll go through the functionals again and make sure they match Q-Chem. I don't particularly like the way YAPF formats the dictionaries - sometimes the name is on the next line, which is a bit odd. . Also, the B97-D case is weird. It seems that in `master`, calling B97-D doesn't apply dispersion at all!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370327984:51,test,tests,51,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370327984,1,['test'],['tests']
Testability,"I think this must be python2.6. I tested `re.sub` in 2.7.10 and 2.6.9, and `re.sub` takes `flags` just fine as a kwarg in 2.7.10, but not in 2.6.9.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-133203439:34,test,tested,34,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133203439,1,['test'],['tested']
Testability,"I think we can add by class like https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L216 . Just have to be careful to use `not` logic because `is_gga` is True for all, rather than being the final classification, as we think of it. https://github.com/psi4/psi4/blob/master/tests/docs-dft/input.dat",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664#issuecomment-502138356:156,log,logic,156,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502138356,2,"['log', 'test']","['logic', 'tests']"
Testability,I think what we need to do is organize the non-XC custom functionals into a series of tests like `tests/test-custom-gga` where all of the custom functionals that we build in `gga_superfuncs.py` should be there. Similar folders for hybrid/double hybrid. Right now its kind of scattered all over the place. If you could start your tests in that manner it would be very helpful. This could be a good project for a new-dev to clean up. @susilehtola One more example why we need access to parameters in LibXC.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/877#issuecomment-349731179:86,test,tests,86,https://psicode.org,https://github.com/psi4/psi4/pull/877#issuecomment-349731179,4,['test'],"['test-custom-gga', 'tests']"
Testability,"I think you have to add `.def(""irrep_labels"", &Molecule::irrep_labels, ""docstring"")` back to `export_mints`. But now it can be an ordinary export, not the complicated lambda. Same for any other export lambda you deleted as unnecessary. That should fix the tests. After that, lgtm!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/780#issuecomment-322811651:256,test,tests,256,https://psicode.org,https://github.com/psi4/psi4/pull/780#issuecomment-322811651,1,['test'],['tests']
Testability,I think you need some more data for shorter bond lengths for one; your computed `re` is right at the bottom end of the input values. I'd also recommend testing to see how sensitive the results are to the grid spacing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1600#issuecomment-483463782:152,test,testing,152,https://psicode.org,https://github.com/psi4/psi4/issues/1600#issuecomment-483463782,1,['test'],['testing']
Testability,I think you'll need to rebase @jeffschriber to get the code that goes with the latest cppe package so tests can pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-641549862:102,test,tests,102,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-641549862,1,['test'],['tests']
Testability,"I think you're correct, but I don't see that from the output of `git diff 772caf9bad7aaddc27265c8c5349be3d85f4db98 input.dat`, which reads as. ```; -scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, der_type=1); +scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True, dertype=1); compare_values(wfn_dz.frequencies().get(0), 1809.2345729, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; compare_values(wfn_dz.frequencies().get(1), 3923.1569958, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; compare_values(wfn_dz.frequencies().get(2), 4020.1821381, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; +#; +# These lines use the analytic frequency algorithm instead, but the angular momentum is too high for; +# the Travis tests. Uncomment the next four lines if you want to test analytic frequencies and have; +# a version of psi4 compiled with sufficiently high angular momentum.; +#; +##scf_dz, wfn_dz = freq('SCF/cc-pVDZ', return_wfn=True); +##compare_values(wfn_dz.frequencies().get(0), 1809.279, 2, ""SCF/cc-pVDZ Frequency 1"") #TEST; +##compare_values(wfn_dz.frequencies().get(1), 3923.138, 2, ""SCF/cc-pVDZ Frequency 2"") #TEST; +##compare_values(wfn_dz.frequencies().get(2), 4020.128, 2, ""SCF/cc-pVDZ Frequency 3"") #TEST; ```. It looks like the only (non-comment line) change was the switch from `der_type` to the correct `dertype` keyword. We only had finite difference Hessians before, so the `der_type` keyword was irrelevant. I had to correct it to avoid getting analytic Hessians to run. It doesn't look like the reference values have been changed, and in both the old and new versions the frequencies should come from finite differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235107538:372,TEST,TEST,372,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235107538,8,"['TEST', 'test']","['TEST', 'test', 'tests']"
Testability,"I thought about the explicit checking of psivars. In fact, I figured that if anything would fail the test suite, it would be if there were tests which checked these (evidently there was not). I could possibly add one at a later date- it would help keep plugins which parse a dictionary created by `core.get_variables()` from randomly breaking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857#issuecomment-344102578:101,test,test,101,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344102578,2,['test'],"['test', 'tests']"
Testability,"I thought based on a [previous post](https://github.com/psi4/psi4/pull/2611#issuecomment-1163642423), that there was a distinct format for spin-unrestricted and spin-restricted cases, but I can see there was a misunderstanding. How is this output?; [output.dat.log](https://github.com/psi4/psi4/files/8985763/output.dat.log)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1166386314:261,log,log,261,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1166386314,2,['log'],['log']
Testability,"I thought the octupoles were re-shaped Py-side to be arrays of the appropriate dimension? The following line passes tests and shows octupoles as a 3-by-3-by-3 matrix. ```; compare_values(np.array([0, 0, -0.9526489, 0, 0, 0, -0.9526489, 0, 0, 0, 0, 0, 0, 0, -0.9526489, 0, -0.9526489, 0, -0.9526489, 0, 0, 0, -0.9526489, 0, 0, 0, -6.8644462]).reshape((3, 3, 3)),; variable(""MP2 OCTUPOLE""), 4, ""MP2 OCTUPOLE"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2479#issuecomment-1069276890:116,test,tests,116,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1069276890,2,"['TEST', 'test']","['TEST', 'tests']"
Testability,"I thought this was fixed long ago, but upon testing, that must have been `gradient`, `hessian`, and `frequency`, as `optimize` is indeed faulty. @psi-rking, I can intercept this in the psi driver, but would you prefer to intercept in optking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965:44,test,testing,44,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1566364965,1,['test'],['testing']
Testability,"I threw a +1 behind lori's comments about checking the SCF energy in the test, but otherwise. LGTM",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-265447202:73,test,test,73,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265447202,1,['test'],['test']
Testability,"I tried both `freq1` and `freq2` tests, but could not find any problems with GCC8 (with sanitizers) on my Mac. My linux machines have a kernel that [doesn't allow the use of sanitizers](https://github.com/google/sanitizers/issues/856) so I can't test those. However, if I put the same print statement into an Intel linux build, I see the exact same output that I posted above - *i.e.* that both dimensions are the same. It appears that the mismatch in dimensions is only happening on windows, which is very strange. Can anybody else confirm the behavior on Linux and/or Mac?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-462437495:33,test,tests,33,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-462437495,2,['test'],"['test', 'tests']"
Testability,"I understand the docs (https://www.openmp.org/spec-html/5.0/openmpse57.html) such that an integer of `1` is the same behaviour as `(omp_set_nested(0);` where 0 is a bool. > If the environment variable is set to false, the initial value of max-active-levels-var is set to 1. The `max-active-levels-var` corresponds to `omp_set/get_max_active_levels`. Below does seem to pass the sapt-tu5 test with jaQZ (and which I can make fail with `omp_set_max_active_levels(0);`). . ```; #ifdef _OPENMP; omp_set_max_active_levels(1);; #endif; ```. The threading test gives the same level of threading as compiling with `omp_set_nested(0)` (and conda psi4). . Though I am hesitant making a 'too quick' PR about it. Opinions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1820#issuecomment-625417041:387,test,test,387,https://psicode.org,https://github.com/psi4/psi4/issues/1820#issuecomment-625417041,2,['test'],['test']
Testability,I understand you as saying it's a good test because there is no point to it. Try explaining again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2371#issuecomment-986971402:39,test,test,39,https://psicode.org,https://github.com/psi4/psi4/issues/2371#issuecomment-986971402,1,['test'],['test']
Testability,"I understand, but my logic in that case was that the Psi vars would appear exactly like the associated quantity in the output file, just to decrease possible confusion arising form all these different quantities.; If you'd prefer to have `ENERGY` spelled out for homogeneity reasons in the Psi vars, just let me know and I'll make the change, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253120506:21,log,logic,21,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253120506,1,['log'],['logic']
Testability,"I uploaded my code, psi4 running log and result analysis to google drive: https://drive.google.com/file/d/1yifEuHhVXDsQh30toR0C69HzhE8rYqpn/view?usp=sharing. > ""I mean, a correlation coefficient of 0.62 is ridiculous. The calculations really should be nearly identical. Are you sure the molecular charges and multiplicities are set correctly?"". Conformer benchmark provides the charge of each molecule, multiplicity is set to 1 by default. (Psi4-Test/main.py line 63) ; @PeterKraus . > ""Set d_convergence. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number."". I tried to set d_convergence to 1e-7, but the calculation results are the same as the results of d_convergence=1e-6. The file I uploaded contains the running logs of both. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @JonathonMisiewicz . > ""I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP."". The file I uploaded contains the calculation results of wB97X-D3/def2-TZVP and wB97X-D/def2-SVP. (Psi4-Test/psi4_energy.csv, Psi4-Test/psi4_energy_tight.csv, Psi4-Test/conformer_benchmark/psi4_log); @ajs99778 . > ""Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? "" ""Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well."". Unfortunately, I don’t have ORCA license, so I can’t use ORCA.; @ajs99778",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383:33,log,log,33,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-973862383,13,"['Test', 'benchmark', 'log', 'test']","['Test', 'benchmark', 'benchmarking', 'log', 'logs', 'tested']"
Testability,"I usually find their packages to be of excellent quality. Which is your bug report? I remember a lightning talk, I think, at a recent SciPy about efforts to bring openblas up to snuff. Apparently even all their internal tests (or maybe it was numpy's tests) weren't passing for a long time. I agree that runtime processor detection is a build dimension to which conda has not expanded. That's why psi uses Intel compilers to add some multiarch optimizations. But why should cpu detection affect the numerical results?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-387070709:220,test,tests,220,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-387070709,2,['test'],['tests']
Testability,I view `props3` and `scf-cov` fixing up a slightly shaky/flawed test. For `props2` this is fixing an issue caused by the Cart/ZMat changes. Let me comment there further to keep that discussion contiguous.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/808#issuecomment-332294941:64,test,test,64,https://psicode.org,https://github.com/psi4/psi4/pull/808#issuecomment-332294941,1,['test'],['test']
Testability,"I was able to build and link against the latest homebrew boost 1.60.0, running the tests now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/243#issuecomment-217522431:83,test,tests,83,https://psicode.org,https://github.com/psi4/psi4/issues/243#issuecomment-217522431,1,['test'],['tests']
Testability,I was able to get the json file down to 5MB. . It's a little challenging to get it smaller since I wanted a comprehensive test (up through d-orbitals) for four different two-electron integral tensors.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2502#issuecomment-1091841264:122,test,test,122,https://psicode.org,https://github.com/psi4/psi4/pull/2502#issuecomment-1091841264,1,['test'],['test']
Testability,"I was following the CMake manual: ""SHARED libraries are linked dynamically and loaded at runtime. MODULE libraries are plugins that are not linked into other targets but may be loaded dynamically at runtime using dlopen-like functionality."" Guess I was wrong? Maybe @fevangelista can test that out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262:284,test,test,284,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262,1,['test'],['test']
Testability,I was running `mp2/cc-pvqz-ri` and also `mp2/cc-pvqz` and saw the difference in the energy and was thinking I needed to explicitly set ri. . Thanks for clarifying that. Really helps before I scale. . Will update soon with some test results.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1279098432:227,test,test,227,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1279098432,1,['test'],['test']
Testability,"I was thinking _downgrading_ pb11, not _updating_ it, but ok (2.10 mentions py311 compatibility anyways). I looked through the deps logs from the last good one to this one, and I don't see any red flags.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1203302540:132,log,logs,132,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1203302540,1,['log'],['logs']
Testability,"I will add some timings and check the gradient soon(TM).; The various dft gradient tests do generally _not_ pass with `ROBUST` pruning. Didn't check errors, but those tests are often very tight. Finally, pruning _on_ by default (`ROBUST` scheme)?? I'd argue that is what users expect since most (all?) big QM programs do this. Possibly wants more thorough testing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591#issuecomment-495351118:83,test,tests,83,https://psicode.org,https://github.com/psi4/psi4/pull/1591#issuecomment-495351118,3,['test'],"['testing', 'tests']"
Testability,"I will admit I considered that, then decided I didn't want to reformat the map into the initializer because it was long and I was lazy. My bigger concern is still: what was the consequence of `order_` being incorrectly 0 for so long, and who actually uses this property up-stream? The git commit where this was added says `Hack DFT grids to retain indexing data for ISA` but the only files touched were:. ```; src/lib/libfock/cubature.cc.REMOVED.git-id; src/lib/libfock/cubature.h; src/lib/libfock/gridblocker.h; ```. And I can't find anywhere that seems to use `order_` or the `order()` method of `SphericalGrid`. . Unfortunately, trying to look further back in the history of `cubature.cc` results in several instances of `psi4/src/psi4/libfock/cubature.cc.REMOVED.git-id` which (I think?) means things were stripped from the repo at some point, and the resulting commit stuff is all assigned to the wrong person (e.g., nearly `all` of `cubature.cc` is assigned to one commit 7e4ecf968e from dgasmith). `print_details` is the only place the `spherical_grids_` are ever apparently used, and I can comment out the block where they print nicely. _That_ function is only ever used in `v.cc` and only if `print_ > 2`. I don't think this is used much, and is creating unnecessary complexity, and doesn't feature in any tests I can find. I'm running through tests now to see if just... removing this entirely breaks anything. Short of `print_details` being accessible through some print settings, it doesn't appear that any of this is even exposed on the python side anyway?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2736#issuecomment-1268644487:1315,test,tests,1315,https://psicode.org,https://github.com/psi4/psi4/pull/2736#issuecomment-1268644487,2,['test'],['tests']
Testability,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:362,test,tests,362,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544,2,['test'],"['test', 'tests']"
Testability,"I will not review this until both tests pass and somebody from GATech (Zach, Lori, David Poole) does a thorough review pass. I have no strong opinion on whether this comes in for 1.6 or 1.7, but if this PR doesn't make 1.6, there needs to be a separate PR which implements the API changes. That PR _must_ come in for 1.6.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543#issuecomment-1094954498:34,test,tests,34,https://psicode.org,https://github.com/psi4/psi4/pull/2543#issuecomment-1094954498,1,['test'],['tests']
Testability,"I wish there was a way to cut down the repetition in variable description, but from the user standpoint, that probably is the way to go... I'll get docs up and un-draft this (hopefully tonight) and save test pass for tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129511560:203,test,test,203,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129511560,1,['test'],['test']
Testability,"I won't close then. @raimis could you test PR #818?. Yeah, we use psithon. Could be interesting to change to psiapi, but we're happy with the passing the input to bin/psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356786390:38,test,test,38,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356786390,1,['test'],['test']
Testability,"I would find it a bit odd that Q-Chem does not add in any MP2 pieces considering the recent dipole benchmarking paper showing that DH's were very good, see [here](https://pubs.acs.org/doi/abs/10.1021/acs.jctc.7b01252). Though I do not have access while traveling and cannot read the details. @hokru do you have a paper of the ""proper"" implementation?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1333#issuecomment-436276152:99,benchmark,benchmarking,99,https://psicode.org,https://github.com/psi4/psi4/issues/1333#issuecomment-436276152,1,['benchmark'],['benchmarking']
Testability,I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature. Also please let the user know that LinK is active. At least I didn't see it in the test output files.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-976673987:263,test,test,263,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-976673987,1,['test'],['test']
Testability,I'd appreciate a test for this one. [Here](https://stackoverflow.com/questions/23337471/how-to-properly-assert-that-an-exception-gets-raised-in-pytest) is a StackOverflow example of testing that an exception gets raised.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2222#issuecomment-869688596:17,test,test,17,https://psicode.org,https://github.com/psi4/psi4/pull/2222#issuecomment-869688596,3,"['assert', 'test']","['assert-that-an-exception-gets-raised-in-pytest', 'test', 'testing']"
Testability,I'd forget the formatting changes if I didn't do them now. Changes made. Will merge once tests re-pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2250#issuecomment-897617828:89,test,tests,89,https://psicode.org,https://github.com/psi4/psi4/pull/2250#issuecomment-897617828,1,['test'],['tests']
Testability,"I'd like to team up on this, but Psi4 is trying to get back into the science business from having been in the infrastructure business for much of the past year, so our rewriting energies are depleted. On the monolithic vs. modular, on the whole I agree with preferring the latter, but I'm thinking that math detection is also going to have to be installed alongside packages so system dependencies can be detected from installed projects, and a single alternate file like [FindPythonLibsNew](https://github.com/pybind/pybind11/blob/master/tools/FindPythonLibsNew.cmake) (originally from numpy, i think) is more palatable than installing half-a-dozen+ files. So I'm guessing that on the core math, we'll probably keep applying bandaids but will be glad to serve as a test bed in developing needed specs and solutions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/537#issuecomment-264468397:766,test,test,766,https://psicode.org,https://github.com/psi4/psi4/issues/537#issuecomment-264468397,1,['test'],['test']
Testability,"I'd prefer to keep the blurb simple, and if at all possible, separate tests from docs. Why not go with something like:; ```; @loriab : ; Your PR is modifying Psi4's documentation. To make your life easier, we've built ; the updated docs for you. You can preview your changes online at [netlify/...](), ; or locally by downloading [this zip archive](). Please incorporate any further changes by adding commits to this PR.; ```. The samples issue is more complex. I'd avoid trying to teach folks how to use git in an automated blurb. ```; @loriab:; Your PR is modifying Psi4's test suite. To keep the `samples` suite in sync with; `tests`, we have created an automated commit [checksum]() to your PR branch. Please review, merge, or otherwise address the changes proposed in the automated commit ; into your PR before merging the PR into Psi4's `master`. Feel free to ask for help in ; the PR if you have any questions.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469:70,test,tests,70,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-981706469,6,['test'],"['test', 'tests']"
Testability,"I'd rather have @davpoolechem officially sign off on this first. It'll be an hour before the test suite check finishes, anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-973164399:93,test,test,93,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-973164399,1,['test'],['test']
Testability,"I'll approve this when Zach's comments are addressed. Otherwise, this looks great!. Thanks a lot for the tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077840949:105,test,tests,105,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077840949,1,['test'],['tests']
Testability,"I'll be fixing this shortly. This fix imposes stricter convergence criteria, so test cases may start failing. Because #1429 also is changing test cases involving df-omp2, I'll refrain until that is accepted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1143#issuecomment-450276166:80,test,test,80,https://psicode.org,https://github.com/psi4/psi4/issues/1143#issuecomment-450276166,2,['test'],['test']
Testability,"I'll break with our normal protocol and count my review as the third, because @CDSherrill has given approval (the tests pass).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-454855676:114,test,tests,114,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-454855676,1,['test'],['tests']
Testability,I'll have time tomorrow to update the docs and tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634#issuecomment-283811506:47,test,tests,47,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-283811506,1,['test'],['tests']
Testability,"I'll respond to the other points (although slowly), but what failing test are you talking about? Travis and AppVeyor both passed, and `ctest -E bench` on my machine did too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-434865331:69,test,test,69,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-434865331,1,['test'],['test']
Testability,"I'll review this once it passes tests. `test_cppe.py:test_cppe_tdscf_uhf` is currently failing. Based on the error message, this has nothing to do with CPPE but represents an indexing error in the code. For a first debug attempt, I would recommend removing both CPPE and the comparison against reference energies, and make sure the TDSCF completes in the first place. Let me know if you need assistance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2605#issuecomment-1153836192:32,test,tests,32,https://psicode.org,https://github.com/psi4/psi4/pull/2605#issuecomment-1153836192,1,['test'],['tests']
Testability,"I'll test and commit, if it works.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409#issuecomment-444995141:5,test,test,5,https://psicode.org,https://github.com/psi4/psi4/pull/1409#issuecomment-444995141,1,['test'],['test']
Testability,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:42,test,test,42,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169,18,['test'],"['test', 'tests']"
Testability,"I'm a little worried about the 0 coefficient handling. The 0 coefficient means ""no local potential."" (See the discussion in #newdev on Nov. 9.) Replacing that with a ""really small but existing local potential"" just _sounds_ like it will create nasty surprises down the road. Good luck getting the tests passing!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-373309541:297,test,tests,297,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-373309541,1,['test'],['tests']
Testability,"I'm about to commit the appropriate changes; it was just a silly dimensioning issue, as expected. Sorry for completely forgetting about this, and thanks to @CDSherrill for reminding me. Would you mind running it through your inputs as an extra set of checks, @loriab? Also, would you mind making the necessary cleanup in tests/libefp? I can get to it later if not.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/115#issuecomment-171483571:321,test,tests,321,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-171483571,1,['test'],['tests']
Testability,"I'm afraid I have a habit of finding obscure bugs! :-) I'd forgotten about needing the additional vectors for linear bends. I'll poke about a bit more to see if I can track it down a bit more. As an aside, is there any real advantage of ""multi"" mode over ""single"" mode, apart form the former appearing to be (in my mind!) more of a logical way of thinking? I'll do some more tests...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/680#issuecomment-295595920:332,log,logical,332,https://psicode.org,https://github.com/psi4/psi4/issues/680#issuecomment-295595920,2,"['log', 'test']","['logical', 'tests']"
Testability,I'm confused: `samples/scf-guess` appears to contain the same calculations and tests as `tests/scf-guess`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1537#issuecomment-465489348:79,test,tests,79,https://psicode.org,https://github.com/psi4/psi4/pull/1537#issuecomment-465489348,2,['test'],['tests']
Testability,"I'm familiar with the deep copy stuff because I wrote some of it. Everything here seems good to me. If there were any unexpected consequences, they should have been caught by the test suite.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2302#issuecomment-927966888:179,test,test,179,https://psicode.org,https://github.com/psi4/psi4/pull/2302#issuecomment-927966888,1,['test'],['test']
Testability,"I'm fixing the test file. Right now, I think I'm having issues with units.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328#issuecomment-1068084388:15,test,test,15,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1068084388,1,['test'],['test']
Testability,"I'm going over DFOCC now. It may not help, but certainly won't hurt. The reduced dependencies will improve parallelization, which may not help on Travis but will locally. The redundant files list is super useful, @dgasmith. We should certainly make sure that any functions contained therein are either tested (DFOCC, PSIMRCC, CC*, etc.) or removed (libqt, libciomr).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-262127128:302,test,tested,302,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-262127128,1,['test'],['tested']
Testability,I'm going to learn VTune and then start running timing tests. Let me know if there are any things you want me to be sure to test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1901#issuecomment-638154935:55,test,tests,55,https://psicode.org,https://github.com/psi4/psi4/pull/1901#issuecomment-638154935,4,['test'],"['test', 'tests']"
Testability,"I'm happy to talk orbital ordering at PsiCon. One of the points I'll be making in my talk is the importance of keeping this sort of thing documented. I'll be pushing one more commit momentarily, when build and dipole tests pass again. After that, it'll be good to merge.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2818#issuecomment-1337609687:217,test,tests,217,https://psicode.org,https://github.com/psi4/psi4/pull/2818#issuecomment-1337609687,1,['test'],['tests']
Testability,"I'm looking for anharmonic modes of vibration of complexes. Good point on the optimization and frequency, for testing purposes I bring the level of theory down to hartree-fock just to make it go faster. On production code runs, the level of theory and basis set are consistent. . I have been playing around with both `frequency()` and `hessian()`. I chose the hessian last night because of this:. https://psicode.org/psi4manual/master/api/psi4.driver.qcdb.vib.harmonic_analysis.html#psi4.driver.qcdb.vib.harmonic_analysis. https://psicode.org/psi4manual/master/freq.html. Where the harmonic analysis is documented showing the IR intensities. The first parameter was a hessian matrix so I went back to go look at how to produce that. Maybe I went down a different rabbit hole. . https://github.com/psi4/psi4/blob/821134f62396ba27f9bcb8fbfa93ea2c370b7616/tests/pytests/test_vibanalysis.py. Line 17-40 I kind of copied your guys test to get the code running. I was actually confused with dipole derivatives and how to produce them and pass them in appropriately. . Ah okay! the frequency has it built in and I can see it. I got confused on the docs. . ```python; theory = 'hf/6-31g*'; ; energy, wave_function = psi4.optimize(; theory,; return_wfn = 'yes',; molecule=universe; ). frequencies = psi4.frequencies(; theory,; ref_gradient=wave_function.gradient(),; molecule=universe. ); ```. Ouput:. ```python; Freq [cm^-1] 1557.5017 4053.2831 4197.9898 ; Irrep A1 A1 B2 ; Reduced mass [u] 1.0830 1.0449 1.0829 ; Force const [mDyne/A] 1.5478 10.1143 11.2435 ; Turning point v=0 [a0] 0.2672 0.1686 0.1627 ; RMS dev v=0 [a0 u^1/2] 0.1966 0.1219 0.1198 ; IR activ [km/mol] 92.6794 13.8599 85.5429 ; Char temp [K] 2240.8982 5831.7720 6039.9727 ; ----------------------------------------------------------------------------------; 1 O 0.00 -0.00 -0.07 0.00 -0.00 0.05 0.00 -0.07 -0.00 ; 2 H -0.00 0.43 0.56 0.00 0.59 -0.39 0.00 0.56 -0.43 ; 3 H 0.00 -0.43 0.56 0.00 -0.59 -0.39 0.00 0.56 0.43 ; ```. So I want to ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808:110,test,testing,110,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808,3,['test'],"['test', 'testing', 'tests']"
Testability,"I'm not keen on not storing the scalars, but I can't argue with your logic. Perhaps keep the tests, and show the tensor->scalar processing within the tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-719251676:69,log,logic,69,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-719251676,3,"['log', 'test']","['logic', 'tests']"
Testability,"I'm not sure how big of an issue numpy/BLAS/LAPACK would be for windows, because it would appear that mkl-linked numpy, mkl, and mkl-dev packages for windows are all available on the intel conda channel. So if numpy is able to link correctly I'm sure we would be able to as well. . I think @TiborGY thoughts on I/O related code are spot on, but I don't think we would have that much code elsewhere that would be incompatible, maybe some assumptions are made in driver code about how paths are formatted and those would be fairly simple to find/fix. . I actually don't think it would be terribly difficult for us to get psi working at least with *some* compiler on windows, really the only serious obstacle I see is that none of the developers have windows hardware to do the necessary leg work to get things working. Once things are set up we can probably rely on CI testing for windows keeping things working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-381759781:867,test,testing,867,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-381759781,2,['test'],['testing']
Testability,"I'm not sure how this could be tested, since the dumps are pretty lengthy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301204873:31,test,tested,31,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301204873,1,['test'],['tested']
Testability,"I'm not sure what the conventions are, if any, for computing transition density matrices in other codes. Might see what a code like Q-Chem does. . I agree it'd be nice to have some OPDM test. Maybe some small test like H2 would suffice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1910#issuecomment-637050250:186,test,test,186,https://psicode.org,https://github.com/psi4/psi4/pull/1910#issuecomment-637050250,2,['test'],['test']
Testability,"I'm not sure what the problem is but this works fine, I'm happy to say :). set optking {. frozen_dihedral = ("". 5 1 2 6. 4 1 2 6. 3 1 2 6. ""). }. #optimize(""hf/3-21G""). import optking. set basis 3-21g. optking.optimize_psi4('hf'). On Fri, Jan 15, 2021 at 6:42 PM Lori A. Burns <notifications@github.com>; wrote:. > Can be fixed with a bigger basis like cc-pvdz. The gradient is fine, so I; > think the trouble is in predicting the next geom step, so may be of; > interest to @psi-rking <https://github.com/psi-rking>; >; > molecule {; > 0 1; > C -0.167039 -0.712374 -0.022325; > O 0.119573 0.677072 0.056530; > H -0.453842 -0.989160 -1.036819; > H -0.997038 -0.962046 0.638968; > H 0.691232 -1.312038 0.284396; > H 0.775814 0.817745 0.757350; > }; >; > set optking {; > frozen_dihedral = (""; > 5 1 2 6; > 4 1 2 6; > 3 1 2 6; > ""); > }; > #set {; > # geom_maxiter 2; > # g_convergence GAU_LOOSE; > #}; > #memory 6GB; > #set_num_threads(6); > #psi4_io.set_default_path(""/home/phy/Desktop/projects/2021/amoeba/test/poltype/scratch/Psi4-methanol""); > #for _ in range(1):; > # try:; > # optimize('hf/3-21G'); > # break; > # except OptimizationConvergenceError:; > # break; > # else:; > # try:; > # set opt_coordinates cartesian; > # optimize('hf/3-21G'); > # break; > # except OptimizationConvergenceError:; > # pass; > #clean(); >; > optimize(""hf/3-21G"") # segfaults; > #optimize(""hf/cc-pvdz"") # 4 iter; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2084#issuecomment-761275679>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TBAEFTYTU5HYJQMMSDS2DOHPANCNFSM4WETR7OA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761373278:1007,test,test,1007,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761373278,1,['test'],['test']
Testability,"I'm not sure why it caused the output file to disappear, but there was an actual failing test case that i could see when running locally, which should be fixed now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-304401397:89,test,test,89,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304401397,1,['test'],['test']
Testability,I'm okay with this (once tests pass) but do want to see the docs. I especially need to know _how developers decide what's worth logging_.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512#issuecomment-1081905619:25,test,tests,25,https://psicode.org,https://github.com/psi4/psi4/pull/2512#issuecomment-1081905619,1,['test'],['tests']
Testability,"I'm rather confused on the flag situation. Points:. * we were getting reports at the forum that the Win conda package (built during the Azure CI) wasn't working for some machines; * a package built after switching the ENABLE_XHOST from `/arch:AVX2` to `/arch:AVX` seemed to work for all; * even before #2377, that flag wasn't active: https://dev.azure.com/psi4/psi4/_build/results?buildId=3455&view=logs&j=f31c9f97-4411-58e7-49ac-fc73f645e6b6&t=37c784ef-3eed-5b43-b403-e5baa44c3c05&l=32; ```; 2021-11-28T04:42:21.6163025Z -- The CXX compiler identification is Clang 13.0.0 with MSVC-like command-line; 2021-11-28T04:42:25.0744510Z -- Check for working C compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:25.4493255Z -- Check for working CXX compiler: C:/Program Files/LLVM/bin/clang-cl.exe - skipped; 2021-11-28T04:42:26.3103349Z -- Setting option ENABLE_XHOST: ON; 2021-11-28T04:42:26.6553541Z -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; ```; * this PR at first commit that adds `/arch:AVX` to CMAKE_CXX_FLAGS generates a bunch of the below; ```; 2021-12-16T22:33:46.0792776Z -- Build files have been written to: D:/a/1/b/build/psi4-core-prefix/src/psi4-core-build; 2021-12-16T22:33:46.0793909Z [6/9] Performing build step for 'psi4-core'; 2021-12-16T22:33:50.7743244Z [1/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_zero.cc.obj; 2021-12-16T22:33:50.8074886Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8077002Z [2/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_wrt.cc.obj; 2021-12-16T22:33:50.8080336Z clang-cl: warning: argument unused during compilation: '/arch:AVX' [-Wunused-command-line-argument]; 2021-12-16T22:33:50.8416165Z [3/1263] Building CXX object src\psi4\libdpd\CMakeFiles\dpd.dir\buf4_mat_irrep_row_init.cc.obj; ```. So perhaps the original #2292 fix was a dud, and we've just gotte",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098:399,log,logs,399,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-997024098,1,['log'],['logs']
Testability,"I'm reasonably sure there was a reason why that `""f_options"" != False` check was necessary at some point, I just don't remember it right now. As long as all test pass, it should be fine, and I'm guessing DDD will make changes to the routines anyway.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2028#issuecomment-723523530:157,test,test,157,https://psicode.org,https://github.com/psi4/psi4/pull/2028#issuecomment-723523530,1,['test'],['test']
Testability,I'm still curious about json-schema_0_properties. I'll look around to see if there are more 1e- energies tested to confirm if this test is just set too strict.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404038707:105,test,tested,105,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404038707,2,['test'],"['test', 'tested']"
Testability,"I'm surprised the parser actually allows for this at all. The ""clever"" cast-up basis selection was implemented in #1484, but if the default is over-ridden, it's hands off. Whoever fixes this should probably check whether the values in [this test](https://github.com/psi4/psi4/blob/master/tests/basis-ecp/input.dat) are sensible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1972#issuecomment-666180197:241,test,test,241,https://psicode.org,https://github.com/psi4/psi4/issues/1972#issuecomment-666180197,2,['test'],"['test', 'tests']"
Testability,"I'm surprised you're still awake at this time! I applied the fix that you suggested to the old code, but nothing changed. I have attached an [output.txt](https://github.com/psi4/psi4/files/6173157/output.txt) that matches the debug printing in the latest commit (sorry for the mess). The overall results are in the lines starting with ""native"" and ""libecp"" in the first column, with some intermediate quantities in the indented lines above those. I'm still adding more debug info to get to the source of the problem. The structure of the nonzero values looks good, so I think it's just normalization or something similar at this point. No obligation to go through this mess of course, but any insights you might have are very greatly appreciated :) The old code values are the numbers being dumped into the buffer right now, so the test passes. This is just the `scf-ecp` test case for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-803005054:832,test,test,832,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-803005054,2,['test'],['test']
Testability,I'm the opposite: Testing intermediate compiler releases is important and the 5 concurrent build limit is unimportant. We're not talking about about an enormous about of time testing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182893146:18,Test,Testing,18,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182893146,2,"['Test', 'test']","['Testing', 'testing']"
Testability,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235109795:38,test,test,38,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795,2,['test'],['test']
Testability,I'm trying to debug the failing test cases and I've run `clang-format` on some of the CC sources. Don't hate me (too much) when you look at the diffs.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/810#issuecomment-337288321:32,test,test,32,https://psicode.org,https://github.com/psi4/psi4/pull/810#issuecomment-337288321,1,['test'],['test']
Testability,"I'm using icpc 16.0.1 and I get the same failing test, scf5 with:. ```; PsiException: Singlet PK CUHF energy: computed value (-149.6304503) does not match (-149.5905972) to 6 decimal places.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/322#issuecomment-227418754:49,test,test,49,https://psicode.org,https://github.com/psi4/psi4/issues/322#issuecomment-227418754,1,['test'],['test']
Testability,"I've added a new test called fsapt-ext that uses a water trimer, performing F-SAPT on two waters and representing the third as an external potential with TIP3P charges. The test runs in less than a minute on my machine. I've left the fsapt-ref folder as this is part of the output of the FISAPT module. I also verified that the test breaks without my revisions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223:17,test,test,17,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-492705223,3,['test'],['test']
Testability,I've added a test case for an FCIDUMP generated from an RHF wavefunction. I doesn't seem to have been picked up by Travis though...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355832001:13,test,test,13,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355832001,1,['test'],['test']
Testability,I've added a test for UHF integral dumps. The tests are in both as PsiAPI _and_ as Psithon. The former is failing without any particularly informative error message. Suggestions on how to troubleshoot?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355999602:13,test,test,13,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355999602,2,['test'],"['test', 'tests']"
Testability,I've added the checks for the deriv >= 1 spin-restricted case. Let me know if this is about right. The output is attached.; [nan_output.log](https://github.com/psi4/psi4/files/8960850/nan_output.log). I'll add the other cases after early feedback on the current messages.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611#issuecomment-1163531527:136,log,log,136,https://psicode.org,https://github.com/psi4/psi4/pull/2611#issuecomment-1163531527,4,['log'],['log']
Testability,I've added the proposed file content to a new test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167#issuecomment-2122245664:46,test,test,46,https://psicode.org,https://github.com/psi4/psi4/pull/3167#issuecomment-2122245664,1,['test'],['test']
Testability,"I've authorized the test suite to run. This is our way of confirming that nothing is obviously broken. If everything passes (as I expect it should), there's nothing on your end yet to do. If it fails, give it a quick look and flag Lori or I if you need assistance in identifying the issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667#issuecomment-1212275829:20,test,test,20,https://psicode.org,https://github.com/psi4/psi4/pull/2667#issuecomment-1212275829,1,['test'],['test']
Testability,"I've decided that this bugfix will require some discussion before we can act because changes to the number of MOs resulting from changing linear dependencies in the basis can yield a number of different errors. If nmo increases (as in this test case), then HF::dump_to_checkpoint() fails when it attempts to write too many orbital energies. However, if nmo decreases, then the use of the previous set of MOs will fail because they will be mis-read, producing an incorrect initial guess. We should put this down as a topic for discussion at the next hack-a-thon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/32#issuecomment-37137150:240,test,test,240,https://psicode.org,https://github.com/psi4/psi4/issues/32#issuecomment-37137150,1,['test'],['test']
Testability,"I've diffed the universal and existing jkfit/jfit with diff_gbs.py (screenshot below), and all's well. (black is unchanged, blue adds an element, yellow is different but I don't really care about thallium and we don't use jfit anyways. I think if you edit the basis in tests mints9 and python/mints9 to universal, that should finally heal CI. Thanks for fixing this up. ![Screen Shot 2020-02-06 at 8 24 05 PM](https://user-images.githubusercontent.com/2314730/73992981-dd5e1b00-491e-11ea-8ddb-b2c115f232e1.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1804#issuecomment-583191559:269,test,tests,269,https://psicode.org,https://github.com/psi4/psi4/pull/1804#issuecomment-583191559,1,['test'],['tests']
Testability,"I've discussed this PR with Yi. This is just to confirm that we want to change the default exch-disp scaling scheme, as the new one appears to be more reliable. Apparently the previous test case didn't break because the exch-disp scheme was manually selected in the test case, rather than utilizing the (updated) default.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067:185,test,test,185,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1281369067,2,['test'],['test']
Testability,"I've filed https://github.com/ddsolvation/ddX/issues/142 over at the parent project. Further investigation makes me uncertain whether our test reference may just have a built-in bug, in which case I hate to pin to a worse version.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2921#issuecomment-1535504340:138,test,test,138,https://psicode.org,https://github.com/psi4/psi4/pull/2921#issuecomment-1535504340,1,['test'],['test']
Testability,"I've found storing Cholesky vectors on disk is hugely advantageous when running e.g. functional benchmarks. Does the code also handle range-separated functionals? In that case you also need the short-range integrals, and the separation constant may be different between functionals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/405#issuecomment-225004764:96,benchmark,benchmarks,96,https://psicode.org,https://github.com/psi4/psi4/pull/405#issuecomment-225004764,1,['benchmark'],['benchmarks']
Testability,"I've got a branch that's only two days removed from master, and its smoke tests are clean. There is a problem with psi4 and qcng 0.28, but I'm sure you're on linux. After pulling tags, one does have to rebuild for the versioning to take effect. But if you're sure that's not it, go ahead and execute the results of `<objdir>/stage/bin/psi4 --psiapi`. It shouldn't be necessary for ctest, but considering those failures are those tests running the python command _and_ those that use qcengine, best to make sure of paths. Beyond that, see if `<objdir>/Testing/Temporary/LastTest.log` has some output clues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745:74,test,tests,74,https://psicode.org,https://github.com/psi4/psi4/issues/3028#issuecomment-1683215745,4,"['Test', 'log', 'test']","['Testing', 'log', 'tests']"
Testability,"I've got a new version of the fjt code ready to test, however it's based off of master. There is a conflict with this branch and master (export_mints.cc). Could someone more familiar with the changes rebase/merge master into this?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/592#issuecomment-276474446:48,test,test,48,https://psicode.org,https://github.com/psi4/psi4/pull/592#issuecomment-276474446,1,['test'],['test']
Testability,"I've just tested the following:; * cloned to `/external_disk/gits/psi4`; * from there, configured to `/tmp` via `cmake -S. ... -DCMAKE_INSTALL_PREFIX=/home/auser/installs/psi4 -B/tmp/compile-psi4`; * build in `/tmp/compile-psi4` via `cmake --build .`; * test internal install via `/tmp/compile-psi4/stage/bin/psi4 --test`; * install via `cmake --build . --target install` to `/home/auser/installs/psi4`; * test external install via `/home/auser/installs/psi4/bin/psi4 --test`. That spans an external disk, an account home, and `/tmp/`, and I don't observe the mis-installed quadratures files you report. You are using CMake variables, not environment variables to configure this, right? Do you have a link to the recipe you're using? This is what I use for conda, if that's any help. https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/build.sh#L120",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1215839867:10,test,tested,10,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1215839867,5,['test'],"['test', 'tested']"
Testability,I've made the changes requested and added a test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328#issuecomment-1040476266:44,test,test,44,https://psicode.org,https://github.com/psi4/psi4/pull/2328#issuecomment-1040476266,1,['test'],['test']
Testability,"I've merged all your changes into the development repository. (Except for the grendel changes- there would have been some doubly defined functions, and I think grendel is only intended to work with Python 2.7. There's no test cases for it.) fd-freq-energy is fixed, too. It just needed comments instead of an exit(). Your changes will appear in the next release (and we'll try not to re-introduce the Python 2 syntax), but if it would help your github stats, we can merge your pull requests into the psi4release flat repo. I'll keep your format_kwargs_for_input suggestion in mind. The file written by that has to pass through the inputparser minimally scathed, which might be tricker in binary. I suspect the whole process needs to be rejiggered (for python 3 and other considerations). We've considered setting up nightly builds/tests/valgrinds of the code. Buildbot certainly looks well-suited for this, and I'll bring it up the next time we're contemplating this. One complication for its use from your intent is that the research groups actively stifle variety in architecture/OS/library versions for sanity in running jobs. Most development is done on Mac laptops, and most production runs are on various Linux flavors/intel compilers/Python 2.6/2.7. But automated testing is certainly something we should do, if we can gather a suitable variety of unused boxes. I'm glad to hear you're a convert to psi4. Please do let us know of any other problems you find or features that would be particularly useful.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20587095:221,test,test,221,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20587095,3,['test'],"['test', 'testing', 'tests']"
Testability,"I've modified the regex as per your comments in #934, the attached test file and outputs show that all possible combinations (that at least I could think of) pass fine. [output.txt](https://github.com/psi4/psi4/files/1888795/output.txt); [input.txt](https://github.com/psi4/psi4/files/1888796/input.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379658445:67,test,test,67,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379658445,1,['test'],['test']
Testability,I've only run `ctest -L smoke` in the `build/` directory and it all seems to pass:; ```; Test project /gpfs/alpine2/scratch/jslj23/chm205/psi4/build; Start 6: casscf-sp; 1/20 Test #6: casscf-sp ........................ Passed 12.07 sec; Start 21: cc1; 2/20 Test #21: cc1 .............................. Passed 6.74 sec; Start 138: dfmp2-1; 3/20 Test #138: dfmp2-1 .......................... Passed 78.01 sec; Start 228: fcidump; 4/20 Test #228: fcidump .......................... Passed 4.32 sec; Start 385: sapt1; 5/20 Test #385: sapt1 ............................ Passed 59.83 sec; Start 419: scf-property; 6/20 Test #419: scf-property ..................... Passed 9.06 sec; Start 434: tu1-h2o-energy; 7/20 Test #434: tu1-h2o-energy ................... Passed 2.56 sec; Start 470: tdscf-1; 8/20 Test #470: tdscf-1 .......................... Passed 5.19 sec; Start 471: tdscf-2; 9/20 Test #471: tdscf-2 .......................... Passed 3.84 sec; Start 472: tdscf-3; 10/20 Test #472: tdscf-3 .......................... Passed 12.44 sec; Start 473: tdscf-4; 11/20 Test #473: tdscf-4 .......................... Passed 11.39 sec; Start 487: ddd-deriv; 12/20 Test #487: ddd-deriv ........................ Passed 17.49 sec; Start 492: psi4numpy-rhf; 13/20 Test #492: psi4numpy-rhf .................... Passed 2.68 sec; Start 494: psi4numpy-rhf-hessian; 14/20 Test #494: psi4numpy-rhf-hessian ............ Passed 2.55 sec; Start 499: python-energy; 15/20 Test #499: python-energy .................... Passed 2.27 sec; Start 514: json-schema-1-gradient; 16/20 Test #514: json-schema-1-gradient ........... Passed 2.83 sec; Start 518: dftd3-energy; 17/20 Test #518: dftd3-energy ..................... Passed 49.54 sec; Start 523: sapt0-d; 18/20 Test #523: sapt0-d .......................... Passed 379.12 sec; Start 524: fsapt-d; 19/20 Test #524: fsapt-d .......................... Passed 487.00 sec; Start 526: dftd4-energy; 20/20 Test #526: dftd4-energy ..................... Passed 128.98 sec. 100% tests p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2372776523:89,Test,Test,89,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2372776523,11,['Test'],['Test']
Testability,"I've only skimmed paper associated with the benchmarking data, but it looks like they used wB97X-D3/def2-TZVP, not wB97X-D/def2-SVP. They only refer to wB97X-D once, and use wB97X-D3 everywhere else. In section 4.2, they say that only B3LYP-D3BJ and PBE-D3BJ were selected to be tested with def2-SVP. Are you able to reproduce the benchmark energy for any conformer using wB97X-D/def2-SVP or wB97X-D3/def2-TZVP in ORCA 4.0.1? I believe the ORCA input would have; ```; ! wB97X def2-SVP D2; ```; or ; ```; ! wB97X-D3 def2-TZVP; ```. In addition to using the newer version of Psi4 that fixes the bug Jonathon mentioned, ensure that you are comparing like-for-like by spot checking a few of the energies in the benchmark data set using the same software and settings. Using a different dispersion correction and basis set would explain the poor agreement between Psi4 1.4.1 and ORCA 4.0.1. Also, ORCA 4.0.1 is several years old. I don't know if ORCA had any bug fixes/changes over the years that would impact their results, but you might want to compare to ORCA 5.0.1 energies as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-971118827:44,benchmark,benchmarking,44,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-971118827,4,"['benchmark', 'test']","['benchmark', 'benchmarking', 'tested']"
Testability,"I've rebased on top of Jeff's (#1885) changes. I need to implement the handling of triplets _à la_ famous program. Is there a way to have the `TDSCF_STATES` option be either an array or an integer? It would be good to move the logic for apportioning states per irrep (and triplets) further up from `tdscf_excitations`, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-642655962:227,log,logic,227,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-642655962,1,['log'],['logic']
Testability,"I've rebased this so that dev psi4 is working with dev libxc (soon to be libxc v5). Haven't tried fixing up psi for xc changes in the last year+, so there are failing tests at present. * Libxc master is still labeled 4.3.4, which is the same as the very different release branch current psi is accustomed to. Probably the easiest way to work with clones of both projects and be sure of what you're getting is to build libxc master (`-DBUILD_SHARED_LIBS=ON`), install it, edit the `ConfigVersion.cmake` file to `4.4`, go to psi, force uninstall libxc conda package if libxc is in your active env, edit external/upstream/libxc/CM to 4.4, build psi passing `-DLibxc_DIR=/path/to/dir/of/ConfigVersion`, build psi, check you've got the right one with `ldd stage/lib/psi4/core`.; * Errors at present:; ```; 	158 - dft-grad-lr1 (Failed); 	159 - dft-grad-lr2 (Failed); 	160 - dft-grad-lr3 (Failed); 	175 - dft1 (Failed); 	177 - dft1-alt (Failed); 	179 - dft3 (Failed); 	180 - dft-omega (Failed); 	213 - frac-ip-fitting (Failed); 	338 - sapt-dft-lrc (Failed); 	364 - soscf-dft (Failed); 	397 - dft-custom-hybrid (Failed); 	399 - dft-custom-gga (Failed); 	443 - dftd3-energy (Failed); ```; ```; >>> pytest ../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:167,test,tests,167,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,1,['test'],['tests']
Testability,"I've reinstalled everything and indicated the path to the libstdc++, so this might fix the issue I had before (I'm running the tests now and I'll see). Just a small question. I did the ```otool -L``` as follows, does the output looks good to you ?. ```; otool -L /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so; /Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/core.cpython-37m-darwin.so:; 	@rpath/core.cpython-37m-darwin.so (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.250.1); 	@rpath/libmkl_rt.dylib (compatibility version 0.0.0, current version 0.0.0); 	@rpath/libiomp5.dylib (compatibility version 5.0.0, current version 5.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libgomp.1.dylib (compatibility version 2.0.0, current version 2.0.0); 	/usr/local/opt/gcc@8/lib/gcc/8/libstdc++.6.dylib (compatibility version 7.0.0, current version 7.25.0); 	/usr/local/lib/gcc/8/libgcc_s.1.dylib (compatibility version 1.0.0, current version 1.0.0); ```. About numpy, I have something like this, does it look good as well ?; ```; otool -L /usr/local/lib/python3.7/site-packages/numpy/core/_multiarray_umath.cpython-37m-darwin.so; /usr/local/lib/python3.7/site-packages/numpy/core/_multiarray_umath.cpython-37m-darwin.so:; 	@loader_path/../.dylibs/libopenblasp-r0.3.7.dylib (compatibility version 0.0.0, current version 0.0.0); 	/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4); ```. Otherwise, do you advise me to download the INTEL distribution ? https://software.intel.com/en-us/distribution-for-python/choose-download",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614842621:127,test,tests,127,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614842621,1,['test'],['tests']
Testability,"I've run full tests with both py27 & py36 and both report the following. The last two are b/c hungarian not installed – not a problem. The first two are b/c MemDFJK isn't handling Cartesian basis sets right. I'm not sure how those other errors you were seeing came about, @schiebermc. Was there a point in this branch where full tests was clean? There's been upheaval to `master`, so we could reason from there. ```; The following tests FAILED:; 	187 - fd-freq-energy-large (Failed); 	212 - mints8 (Failed); 	375 - pywrap-align (Failed); 	376 - pywrap-align-chiral (Failed); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-384197920:14,test,tests,14,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-384197920,3,['test'],['tests']
Testability,"I've run some timing tests. First, with DLPNO-MP2 on 1644 basis functions, the same job in triplicate:. | Before PR | After PR |; | --- | --- |; | 2:43:56.48 | 2:44:54.51 |; | 2:44:17.27 | 2:44:03.06 |; | 2:45:08.16 | 2:44:24.98 |. And now DF-DCT with 384 basis functions, this time in duplicate:; | Before PR | After PR |; | --- | --- |; | 1:03:58.53 | 1:03:52.70|; | 1:03:49.19 | 1:03:48.30 |. I can run additional tests if requested, but the PR has negligible impact on performance time, as expected. The PR is ready for more serious review.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2369#issuecomment-993839945:21,test,tests,21,https://psicode.org,https://github.com/psi4/psi4/pull/2369#issuecomment-993839945,2,['test'],['tests']
Testability,"I've run this test (`opt10`) without limits on 128 GB RAM and 20 threads and it takes:. ```; Total time:; user time = 36215.14 seconds = 603.59 minutes; system time = 882.69 seconds = 14.71 minutes; total time = 2280 seconds = 38.00 minutes; ```. So the test works, it just takes some time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253#issuecomment-184231418:14,test,test,14,https://psicode.org,https://github.com/psi4/psi4/issues/253#issuecomment-184231418,2,['test'],['test']
Testability,"I've run this test with both SCF and B3LYP and, although neither; successfully identifies a TS, neither throws an error either. On Tue, Mar 29, 2016 at 2:24 PM, Daniel Smith notifications@github.com; wrote:. > @psi-rking https://github.com/psi-rking Just FYI this bug occurs with; > SCF/DFT or MP2 for a cheaper.; > ; > For me, the primary concern is the symmetry mapping error is fairly; > generic. I think a bit clearer error message (if possible) would be; > sufficient.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/10#issuecomment-203062097",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203440132:14,test,test,14,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203440132,2,['test'],['test']
Testability,"I've seen this, though it hasn't been a problem. Anyone recall whether this has always (last few months) been the case or only recently? If the latter, maybe the [pytest checks](https://github.com/psi4/psi4/blob/master/tests/pytest/test_addons.py#L7-L20) are involved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/656#issuecomment-287771809:219,test,tests,219,https://psicode.org,https://github.com/psi4/psi4/issues/656#issuecomment-287771809,1,['test'],['tests']
Testability,I've tested the mrcc interface within about a year. _But_ I only have the old mrcc (c. 2014) before it learned how to do SCF itself.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070634536:5,test,tested,5,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070634536,2,['test'],['tested']
Testability,"I've tried this out, and tests are clean. However, the output is confusing with no iterations printed. Fortunately, the same effect can be had with `fail_on_maxiter=False`. Then the output is:. ```. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 0: -128.84964605391272 -1.28850e+02 1.60374e-02. PsiException: Could not converge SCF iterations in 0 iterations. Energy and/or wave function did not converge, but proceeding anyway.; ```. Function reorganization is good, imo. I'll suggest edits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-767629805:25,test,tests,25,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-767629805,1,['test'],['tests']
Testability,"I've tweaked the https://github.com/MolSSI/QCEngine/pull/393/files PR slightly, and I think it's ready for merge. Here, I've added a few tests (b97-3c, r2scan2-3c, and r2scan2-d4) and tried them with several combinations of old/new gcp, old/new dftd3, and 3.4/3.5 dftd4, so I'm semi-confident they run when they ought and give helpful errors when they can't. The tests I added cover energy and gradient, but they're purely internal -- no reference values from a separate implementation. What further tests are wanted?. The labels/selectors for pytest should be in good shape (that is, tests will skip if wrong gcp/d3/d4 detected). CTest selectors aren't in good shape, so if you get helpful ""can't run"" errors, that's expected; wrong values aren't expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348:137,test,tests,137,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1672766348,4,['test'],['tests']
Testability,"I've written a patch to allow for a custom frozen policy that is a bit clunky but safer than `num_frozen_docc` (because it applies per-atom rules, so works properly for cases like SAPT, MBIS_VOLUME_RATIOS, etc) -- once I can be sure this builds in vanilla psi4 (trying now) I will re-run my test jobs and submit the patch. . Still not sure what to do about `scf::HF::compute_fcpi` because I'm still a newbie to the code base (and this patch does NOT fix that issue).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1208404402:291,test,test,291,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1208404402,1,['test'],['test']
Testability,"IIRC speedups of seminumerical methods increase with larger basis sets, so you may want to benchmark those as well...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1120024084:91,benchmark,benchmark,91,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1120024084,1,['benchmark'],['benchmark']
Testability,"ILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version 7.2.0; -- Found OpenMP_C: -qopenmp ; -- Found OpenMP_CXX: -qopenmp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:3857,Test,Test,3857,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,2,['Test'],['Test']
Testability,"ILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version ; CMake Error at cmake/custom_cxxstandard.cmake:39 (if):; if given",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4156,Test,Test,4156,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,2,['Test'],['Test']
Testability,IPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:428: Not detecting module libefp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:486: Not detecting module pcmsolver. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:733: Not detecting module erd. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:13803,test,tests,13803,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,IPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:741: Not detecting module simint. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14283,test,tests,14283,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,"IS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; Total time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time = 4 seconds = 0.07 minutes; [Error prints before oeprop]; ```. The other crash I saw was just the input/output from the conda install test. Let me know if you need more information.; -kratz",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:9292,test,test,9292,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['test'],['test']
Testability,"Ideally there should be a test-case attached sooner rather than later. I think a simple-but-intuitive way to do this would be to add a keyword named something like `irc_n_steps` which tells OPTKING to `return OptReturnSuccess` after a given number of converged IRC points. Then you could do something like `set irc_n_steps 10` in your test case to avoid passing through the minimum, after which the steps may become unpredictable. I could help with that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-351224954:26,test,test-case,26,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351224954,4,['test'],"['test', 'test-case']"
Testability,"If I have time this weekend, I'm going to try making a small little pair of Python extension modules that are each linked to a separate copy of MKL and see if I can reproduce anything like this. I _think_ that must be the relevant difference between my test and yours. Weirdness about two simultaneous copies of BLAS libraries being loaded + threads seems to be involved in #748 as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/755#issuecomment-312399904:253,test,test,253,https://psicode.org,https://github.com/psi4/psi4/issues/755#issuecomment-312399904,1,['test'],['test']
Testability,"If I merge the current `master`, all test pass except `cubeprop-esp`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174715:37,test,test,37,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174715,1,['test'],['test']
Testability,"If `/Users/hugomacdermott/Desktop/dev/psi4_build/` is your `CMAKE_INSTALL_PREFIX`, then this is fine, but you can make development a little easier by skipping the `install` step. In your `objdir/` is a `stage/` dir with a complete install that gets updated with every `make`. It's this installation that gets run with `ctest`. I'd seek that, then run the results of `objdir/stage/bin/psi4 --psiapi` and check that the `which` & `python -c ` commands returns paths in `objdir/stage/`. This way there's a quick turnaround between edit/make/test. I don't see anything necessarily wrong with what you posted. The above is just a setup that can reduce confusion if you forget the install step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646:538,test,test,538,https://psicode.org,https://github.com/psi4/psi4/pull/2775#issuecomment-1314638646,1,['test'],['test']
Testability,"If a guess basis cleans up most of the discrepancies, then I think we're ok; for now, until the revamped SAD guess can go in. On Wed, Apr 20, 2016 at 10:04 AM, Lori A. Burns notifications@github.com; wrote:. > Landing on the correct SCF solution is tricky, and guaranteeing it is; > trickier still. I hear that in psi3, users routinely supplied docc/socc; > arrays to guide to the intended solution. Fortunately, psi4 has a variety; > of guesses to obtain the right solution, and someday, as @dgasmith; > https://github.com/dgasmith mentioned, a next-generation SAD guess will; > assure correctness for the ground states of elements, at least. But without; > a root-finding driver over the SCF code that attempts and discards guesses/; > does basis projections/ evaluates the nature of the system (which can be; > computational expensive), we cannot fix some system and method combinations; > without injuring others. It should be noted that no QC methodology to date; > is completely black box and no program always obtains the correct minima; > with default options. We are glad to have the lithium report at hand and; > will be pleased to use them to test the future SAD guess, but this is not a; > n issue that will be fixed by 1.0.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/pull/335#issuecomment-212439352",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-212443074:1154,test,test,1154,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212443074,2,['test'],['test']
Testability,"If anybody needs this immediately, the patch to get threaded gradients working is. ```; --- a/psi4/src/psi4/libmints/mintshelper.cc; +++ b/psi4/src/psi4/libmints/mintshelper.cc; @@ -2469,11 +2469,12 @@ SharedMatrix MintsHelper::three_idx_grad(const std::string& aux_name, const std:; auto idx3p = idx3_matrix->pointer();; #pragma omp parallel for; for (int aux = 0; aux < np; aux++) {; + auto elt = &data[ntri * aux];; for (int p = 0; p < nprim; p++) {; for (int q = 0; q <= p; q++) {; - idx3p[aux][p * nprim + q] = *data;; - idx3p[aux][q * nprim + p] = *data;; - data++;; + idx3p[aux][p * nprim + q] = *elt;; + idx3p[aux][q * nprim + p] = *elt;; + elt++;; }; }; }; ```. I want to make sure that the quick tests pass with threading before submitting the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2192#issuecomment-863224877:706,test,tests,706,https://psicode.org,https://github.com/psi4/psi4/issues/2192#issuecomment-863224877,1,['test'],['tests']
Testability,"If going to C1 makes a difference, then a couple of likely reasons are that; 1) we are symmetrizing the step if C2 is included; or 2) it's surprisingly; easy to get the wrong orbital occupations for hydrogen peroxide. It will; be less convoluted in the new python version (which still needs; debugged...). On Wed, Nov 22, 2017 at 11:18 AM, avcopan <notifications@github.com> wrote:. > I can confirm that your input, @psi-rking <https://github.com/psi-rking>,; > seems to work fine. I don't see any indeterminism either. When I turn; > symmetry off entirely, though, the IRC does quit early and I'm not sure; > why. I poked around the code a bit -- debugging this is a real headache,; > since I wrote it 6 years ago and the logic is pretty convoluted.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/860#issuecomment-346417491>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/ADguTB2jUneo6c5HZCbvvkm44FnlmnO9ks5s5FdLgaJpZM4QeK0n>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-346421257:723,log,logic,723,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-346421257,1,['log'],['logic']
Testability,"If it was purely representation, then test case shouldn't have failed. Or check on test was too tight.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/980#issuecomment-385264045:38,test,test,38,https://psicode.org,https://github.com/psi4/psi4/issues/980#issuecomment-385264045,2,['test'],['test']
Testability,"If it's been tested to work correctly on ; ```; option_with_flags(ENABLE_ASAN ""Enables address sanitizer (requires similarly compiled Python and Numpy)"" OFF; ""-fsanitize=address -fno-omit-frame-pointer"" ""-nonsense""); ```; and; ```; ""-nonsense"" ""-fsanitize=address -fno-omit-frame-pointer""); ```; then I really like @robertodr 's patch. Do you think the `unset(CMAKE_REQUIRED_FLAGS)` needs to be `CACHE`? I don't understand these things; just know that they can go very wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343300716:13,test,tested,13,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343300716,1,['test'],['tested']
Testability,"If it's just the installing-untested-prog aspect, I _think_ that which exe to run can be reset through the testing macros. So possibly, could register tests in both modes, staged and installed exe's. The risk of everything breaking in the install file rearrangement was deemed larger (and worth testing in its own right) than the trouble of installing, finding some tests broken, deleting the install dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235914479:107,test,testing,107,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235914479,4,['test'],"['testing', 'tests']"
Testability,"If the test is `input.py`/psiapi, it needs to be in `tests/python/fcidump/` to pick up. has to be psithon/`input.dat` to be `tests/fcidump/`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355837812:7,test,test,7,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355837812,3,['test'],"['test', 'tests']"
Testability,"If the tests can be fixed and we can go back to testing all test cases; soon, that's fine. If there are persistent problems then the troublesome; tests could be removed from the list temporarily while they get patched up. On Tue, Nov 22, 2016 at 3:37 PM, Lori A. Burns notifications@github.com; wrote:. > At the moment, just quicktests (~118) because cc14 and mints9 are still; > failing. The latter is my fault, the former is a mystery. Failures make the; > conda build fail, so the test suite needs to be clean before go back to; > running all.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/524#issuecomment-262358481, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9Qdm1_eSI8ptMLf1jUlyVER46R1xZpks5rA1J3gaJpZM4K4Unt; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262370710:7,test,tests,7,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262370710,5,['test'],"['test', 'testing', 'tests']"
Testability,"If we plan to test many methods in this way, shouldn't this be a pytest?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2836#issuecomment-1356234732:14,test,test,14,https://psicode.org,https://github.com/psi4/psi4/pull/2836#issuecomment-1356234732,1,['test'],['test']
Testability,"If you haven't already, take a look at https://github.com/psi4/psi4/blob/master/tests/isapt2/input.dat#L6 to see if setting total chgmult might be needed for your fragments.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2870#issuecomment-1412882795:80,test,tests,80,https://psicode.org,https://github.com/psi4/psi4/issues/2870#issuecomment-1412882795,1,['test'],['tests']
Testability,"If you haven't rebased recently, I wouldn't worry about the Windows error immediately, but Peter's right about tests. The test_psi4_qcschema.py is awkward to work with, so `tests/json/` is a good place to add tests. There's a lot of `run_json` in there to preserve backwards compatibility, but use `run_qcschema` instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126#issuecomment-790260786:111,test,tests,111,https://psicode.org,https://github.com/psi4/psi4/pull/2126#issuecomment-790260786,3,['test'],['tests']
Testability,"If you need some help working out what's going wrong, please send over the test output you're getting. I've just looked through your changes and I'm not seeing anything that looks out of place. . I remember there being one bug that I fixed in libecpint that will have been in the Psi4 code, but it will have only been noticeable with a specific class of ECPs (those that have an n=1 term (or n=-1 depending on your convention). The line is https://github.com/psi4/psi4/blob/d16d02e69238f1b0d90a2f1283f38e818873e748/psi4/src/psi4/libmints/ecpint.cc#L473 and should be changed to . ```tooSmall = tooSmall || ( intValues(l, i) < tolerance );```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802994469:75,test,test,75,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802994469,1,['test'],['test']
Testability,"If you want to try the new compilers version, create a new environment `conda create -n psi4 python=3.6 -c psi4/label/agg` (only things from psi4 channel in `conda list` should be psi4, libint, libxc). Should be safe to install jupyter in the same env. Strongly suggest jupyter (and numpy) from defaults (where they're well into the process of rebuilding everything with the new compilers), not conda-forge (where they're considering how to use them). I've been getting psi4 to build this way for less than a day, so it's very much a trial package. If that doesn't work (and I won't be able to test it myself until Monday), no, there's nothing actionable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345422371:594,test,test,594,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345422371,1,['test'],['test']
Testability,"If you'd like to be adventurous, the current development head at https://github.com/jturney/psi4/commits/CMakeRewrite-KillTheBoost should meet your requirements of clean build, new dmrg syntax, and current CheMPS2 (1.8+). It's in a state where all CheMPS2 build issues are in final form, and the non-CheMPS2 code is steady again (only one of 300+ tests broken and that one, finite diff freq of mcscf, won't interfere with you). . You'll need a fairly modern compiler (https://github.com/jturney/psi4/blob/CMakeRewrite-KillTheBoost/cmake/CheckCompilerVersion.cmake) and gcc>=4.9 (unless using Clang). But otherwise, should be clean with something like:. ```; cmake -H. -Bobjdir \; -DCMAKE_C_COMPILER=icc \; -DCMAKE_CXX_COMPILER=icpc \; -DMAX_AM_ERI=5 \; -DENABLE_CheMPS2=ON \; -DPYTHON_EXECUTABLE=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/bin/python2.7 \; -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/lib/libpython2.7.so \; -DPYTHON_INCLUDE_DIR=/theoryfs2/ds/cdsgroup/miniconda/envs/py2basics/include/python2.7 ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464#issuecomment-246363626:347,test,tests,347,https://psicode.org,https://github.com/psi4/psi4/issues/464#issuecomment-246363626,1,['test'],['tests']
Testability,"If you're willing to take on properly assigning root psivars in cc*, that'd be splendid, @amjames. It's very true that CC psivars are pretty much ground state only and that not much has been done in the way of CC property psivars since the testing has been through `output.ref` comparison rather than `compare_values()`. One thing that will have to be resolved is indexing, as CI starts from 1. I can't even remember what position I took at the Last Great Debate on this, but I think I favor 0-indexed now, as it make the GS distinctive from ESs. Will query detci ppl tomorrow. But, yes, if you see your way clear toward fixing this up, go for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259603617:240,test,testing,240,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259603617,2,['test'],['testing']
Testability,"Im still not completely sure that there is a way to bridge the two. Ultimately the modification in-place leads to quite a few errors; however, the Psithon API make the in-place a logical operation. It would be better to do something like:; ```; new_mol = molecule.update({""var1"": 5, ""var2"": 6}); ```; or something similar. Getting that across in something like Psithon would be difficult I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782#issuecomment-332298418:179,log,logical,179,https://psicode.org,https://github.com/psi4/psi4/issues/782#issuecomment-332298418,1,['log'],['logical']
Testability,"In `psi4/src/read_options.cc:847` can you add the following lines:. ```; /*- For SAPT(DFT) computes the S^inf Exchange-Induction terms !expert -*/; options.add_bool(""DO_IND_EXCH_SINF"",false);; ```. and in `psi4/driver/procrouting/sapt/sapt_proc.py:165` change the induction call there to:. ```; ind = sapt_jk_terms.induction(; hf_cache,; sapt_jk,; True,; maxiter=core.get_option(""SAPT"", ""MAXITER""),; conv=core.get_option(""SAPT"", ""D_CONVERGENCE""),; Sinf=core.get_option(""SAPT"", ""DO_IND_EXCH_SINF"")); ```. Recompile the code. You should now be able to run the test by setting `DO_IND_EXCH_SINF True` in the options block.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/921#issuecomment-369403851:558,test,test,558,https://psicode.org,https://github.com/psi4/psi4/pull/921#issuecomment-369403851,1,['test'],['test']
Testability,"In cases where reference values are not matched perfectly (but the test should pass) is it better to loosen the comparison or update the reference value. I assume updating the reference value is the way to go but I want to have some record of asking before I start slightly changing reference values. Secondarily, should the reference values be updated in general at some point so that users don't stumble across an instance where the value is slightly off and wonder why?. Explanation:; I've expanded the number of tests I'm running since I started cleaning up core.cc. In the opt specific tests the convergence is usually tight enough that the nuclear repulsion energies match the reference values just fine for both optimizers. There are some tests like cc1-3 that are failing due to being just above threshold. `atol = 0.001` the difference is `~ 0.0017`. These tests are using the default `qchem` convergence criteria ~ `3e-4` max_force. Both optimizers finish well below the criteria and geometries match to 1e-4 Angstroms and 0.001 degrees. Geometries are the same. There are around 5 or 6 tests failing like this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2727#issuecomment-1262512828:67,test,test,67,https://psicode.org,https://github.com/psi4/psi4/pull/2727#issuecomment-1262512828,6,['test'],"['test', 'tests']"
Testability,"In my case cc55 is the one that fails. On Jul 15, 2015, at 11:26 AM, psi4 <notifications@github.com<mailto:notifications@github.com>> wrote:. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=21549 shows cc54 for me. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/130#issuecomment-121651794. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/130#issuecomment-121658832:150,test,testboard,150,https://psicode.org,https://github.com/psi4/psi4/issues/130#issuecomment-121658832,1,['test'],['testboard']
Testability,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252852440:476,test,tested,476,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440,3,['test'],"['test', 'tested', 'tests']"
Testability,"In my experience (at least on remote hosts running relatively modern versions of Ubuntu derivatives, 18.04 and up), starting a process in the background and then doing a `logout` keeps the process running indefinitely. Simply closing the Putty window, etc. does not, the same happens if the network connection is interrupted, eventually the process will be killed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1983#issuecomment-677612812:171,log,logout,171,https://psicode.org,https://github.com/psi4/psi4/issues/1983#issuecomment-677612812,1,['log'],['logout']
Testability,"In our docs it says `SVWN | SVWN3 (RPA)` for psi4 and I took `VWN3` in QChem. But libxc nomenclature is `VWN_RPA` (no added 3) for what psi4 uses and in Qchem that is `VNW1RPA` because why not :). ```; qchem svnw(RPA): -0.0285 0.0405 0.0405 ; ```; That agrees well with psi4, yay! I locally tested also PW92 with qchem and psi4 and they agree as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1305889380:291,test,tested,291,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1305889380,1,['test'],['tested']
Testability,In samples one has TEST lines filtered away and test has lines remaining.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1537#issuecomment-465580642:19,TEST,TEST,19,https://psicode.org,https://github.com/psi4/psi4/pull/1537#issuecomment-465580642,2,"['TEST', 'test']","['TEST', 'test']"
Testability,"In the ""enable (or psi4 requires it)"" case, I think there _is_ a dummy library from https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/external/gdma/CMakeLists.txt#L21. Regarding the ""is for dependency resolution"", good to know, I'll try not to break that. :-). Regarding Note 2, I think that's the other dummy library, https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/cmake/Psi4Macros.cmake#L184. I've got it so a successful `find_package(gdma CONFIG)` introduces a `gdma::gdma` target replete with libs, includes, and `-DUSE_GDMA` in it's INTERFACE w/o any subsequent `add_library()`. Big restriction I've found so far is that such target is scope of found dir and below (no subsequent `add_library(target_again UNKNOWN IMPORTED GLOBAL)`). I'm just seeing how this fits into the superbuild and if cuts down some logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238061055:824,log,logic,824,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238061055,1,['log'],['logic']
Testability,"In the slightly modified codebase I work off of -- I flipped the `[]` to a `.at()` and tests now fail due to `std::out_of_range`, as expected, given that the map is starting and staying empty until accessed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735#issuecomment-1267612768:87,test,tests,87,https://psicode.org,https://github.com/psi4/psi4/issues/2735#issuecomment-1267612768,1,['test'],['tests']
Testability,"Indeed, considering the nature of the test, [my comment](https://github.com/psi4/psi4/issues/980#issuecomment-385264045) was wrongheaded.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/980#issuecomment-385264868:38,test,test,38,https://psicode.org,https://github.com/psi4/psi4/issues/980#issuecomment-385264868,1,['test'],['test']
Testability,Indeed. Happily with the new `.devN` versioning scheme we're not guaranteeing that `master` is always passing full tests. (conda pkgs _are_ so guaranteed.) Glad all healed now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718#issuecomment-303896265:115,test,tests,115,https://psicode.org,https://github.com/psi4/psi4/pull/718#issuecomment-303896265,1,['test'],['tests']
Testability,"Initial testing looks good– db2 and freq-e-sowreap pass for me, too. I just checked in minor tweaks (de024f86f0f978029cb2acaae5469636a3ecf6ab) for printing and so that `reap.py` can catch OPT file names, too. The problem with opt-sowreap that you quoted above is now fixed. Unfortunately, optimizations need multiple sow/reap passes (https://github.com/psi4/psi4/blob/4.0b5/tests/pywrap-opt-sowreap/Makefile.in). If you hardwire `first_out = 'OPT-master.in'` in `reap.py` (otherwise it's looking for instructions in the wrong file), the job makes it through the first optimization cycle, so that's an improvement, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/192#issuecomment-157884587:8,test,testing,8,https://psicode.org,https://github.com/psi4/psi4/pull/192#issuecomment-157884587,2,['test'],"['testing', 'tests']"
Testability,"Installing `networkx` fixes `pywrap-align` and `pywrap-align-chiral`. However, the other tests still fails for me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403465760:89,test,tests,89,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403465760,1,['test'],['tests']
Testability,"Instead of comparing the raw eigenvectors, I'd compare that the vectors span the same space, which can be checked simply by ```<i|i> = 1``` and ```sum_j <i|j><j|i>=1```, where you can restrict the sum over ```j``` to the degenerate eigenmodes in question. If one already is checking the eigenvalues, then checking the full span of the lowest eigenmodes should be enough. The fitting of the vectors is not in the test code. It could also be done just by constructing the projection ```P=<old|new>```, checking that the eigenvalues of ```P P^T``` and ```P^T P``` are 1, and rotating the basis with ```P```.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-452087935:412,test,test,412,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-452087935,2,['test'],['test']
Testability,"Instead of testing for +-2 a one could add `""DFT_WEIGHTS_TOLERANCE"": -1.0` to the pytest (with new reference values) to remove numerical issues. In case the issue appears again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446#issuecomment-1045032535:11,test,testing,11,https://psicode.org,https://github.com/psi4/psi4/pull/2446#issuecomment-1045032535,1,['test'],['testing']
Testability,Interesting find hokru and something that can be easily tested!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491#issuecomment-1075521918:56,test,tested,56,https://psicode.org,https://github.com/psi4/psi4/issues/2491#issuecomment-1075521918,1,['test'],['tested']
Testability,"Interesting stuff. As for the Apple M1, I guess it depends whether we'll be pushing out a released and tested binaries for Apple M1 before clang gets around fixing the defaults, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836:103,test,tested,103,https://psicode.org,https://github.com/psi4/psi4/pull/2384#issuecomment-1003964836,1,['test'],['tested']
Testability,Interesting. Guess more testing is needed for the `copy_if_different`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239053971:24,test,testing,24,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239053971,1,['test'],['testing']
Testability,"Is `run.log` posted to the travis output log? If so, I would add a banner between the running of the test cases and printing their outputs for clarity. PS: I added several people to my psi4/psi4 fork so that they can make their own changes as desired. It looks like the organization permission transference is different for public and private repositories?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/247#issuecomment-183702374:8,log,log,8,https://psicode.org,https://github.com/psi4/psi4/pull/247#issuecomment-183702374,3,"['log', 'test']","['log', 'test']"
Testability,Is a test needed or wanted? I didn't find an existing `db` test setup.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2034#issuecomment-802792572:5,test,test,5,https://psicode.org,https://github.com/psi4/psi4/pull/2034#issuecomment-802792572,2,['test'],['test']
Testability,"Is it possible to use `options=None` in the class definition? Then the options are mostly not required at all in the current commits above. Yes, I implemented the Client so that you always can calculate the current energy/force of the initialised molecule, which enables testing of the passed on configuration. When ipi is available, it will also be used for communicating back to the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806:271,test,testing,271,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806,1,['test'],['testing']
Testability,"Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; That sounds ok to me (then reference just has to be defined properly). What about DFT, do we define functional properly and do energy('dft'), etc.?. David. On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; wrote:. > Fixed by 6f6d3aa; > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > Nevertheless, as this ticket points out, having defined these names only; > for energy() confounds the driver logic. These convenience names are now in; > place for gradient() and property().; > ; > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > prop() if others concur with my present assessment.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110021718:685,log,logic,685,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110021718,1,['log'],['logic']
Testability,Is there a specific test that fails? It seems ok on my test machine; (Intel Xeon E5-2698 v3 Haswell) with GCC 4.8.5,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198626795:20,test,test,20,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198626795,2,['test'],['test']
Testability,"Is there any test coverage of the new `messy` behavior? If not, could we add it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2191#issuecomment-859899767:13,test,test,13,https://psicode.org,https://github.com/psi4/psi4/pull/2191#issuecomment-859899767,1,['test'],['test']
Testability,"Is there anything in particular you wanted feedback on, or did you just want to see if this passed tests?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731#issuecomment-1262298899:99,test,tests,99,https://psicode.org,https://github.com/psi4/psi4/pull/2731#issuecomment-1262298899,2,['test'],['tests']
Testability,"Is this both conventional and DF, like the RHF Hessians? I'm adding a note to the paper to consult with you so assertion can be deleted if wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/842#issuecomment-590177244:111,assert,assertion,111,https://psicode.org,https://github.com/psi4/psi4/pull/842#issuecomment-590177244,1,['assert'],['assertion']
Testability,"Is this something I broke?. ```; $ python ../.scripts/travis_print_failing.py; <<< Failing outputs follow. >>>; python-mints9 failed. Here is the output:; Traceback (most recent call last):; File ""../.scripts/travis_print_failing.py"", line 32, in <module>; with open(badoutfile, 'r') as ofile:; FileNotFoundError: [Errno 2] No such file or directory: 'tests/python-mints9/output.dat'; The command ""python ../.scripts/travis_print_failing.py"" exited with 1.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-304083044:352,test,tests,352,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304083044,1,['test'],['tests']
Testability,It affect only `cc52` test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1476#issuecomment-454165383:22,test,test,22,https://psicode.org,https://github.com/psi4/psi4/pull/1476#issuecomment-454165383,1,['test'],['test']
Testability,"It can't find the reference files. I'll pull this test out since it does not provide additional coverage anyway. Just for my own edification, how would you get it to work? Hardcoding the reference file paths doesn't seem a good solution...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-356219963:50,test,test,50,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-356219963,1,['test'],['test']
Testability,It could be helpful to know what `ldd -v <prefix>/lib/python3.<x>/site-packages/psi4/core*so` (approximate path) produces. And if the segfault was immediate or on a particular test (I learned recently that `gcp` exe unnecessarily used too high a glibc).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1792#issuecomment-607282725:176,test,test,176,https://psicode.org,https://github.com/psi4/psi4/issues/1792#issuecomment-607282725,2,['test'],['test']
Testability,"It does not necessarily always cause an abort of the python process.; My test fails during libmints writing out integrals at the end of an SCF and gives a normal error message. (`cc11` test with cc-pVQZ basis set in a 50MiB RAMDISK). ```; [...]. !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 12 (error writing to file) !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 131 !; ! The most recent 5 function calls were: !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Sunday, 06 November 2022 04:44PM; [...]; ```. I would suggest to merge and see how it behaves for our users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426:73,test,test,73,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1304902426,2,['test'],['test']
Testability,It does seem that the only test cases failing are two of the test suite.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/129#issuecomment-121719138:27,test,test,27,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-121719138,2,['test'],['test']
Testability,"It does seem to be set to non-default in various tests https://github.com/psi4/psi4/search?p=1&q=diis_min_vecs . But if it's not providing an actual useful knob, I'm good with deprecate and remove.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2401#issuecomment-1010176887:49,test,tests,49,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010176887,1,['test'],['tests']
Testability,"It doesn't really bother me that it takes 2-6 hours for Travis CI to build the 15 types, nor do I think it's hindering anything. I would actually like to see additional types added (specifically Mac, but I think there were other issues with that). It should be noted that we can merge pull requests in before Travis CI has completed testing. Travis CI is there as a safety net.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182562754:333,test,testing,333,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182562754,1,['test'],['testing']
Testability,"It hits the troublesome geometry a couple optimization iterations in, so not guaranteed. But given that this error hasn't popped up for 10 years, micro-wiggle is a good bet. btw, `conda install psi4 -c psi4/label/agg` will get you a working `-ng`-compiler package at the moment. Though that's my sandbox channel and so the latest package mayn't always be working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380151298:296,sandbox,sandbox,296,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380151298,1,['sandbox'],['sandbox']
Testability,It is entirely possible that it works better with `clang`. I'll try to run the same test.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/794#issuecomment-335272408:84,test,test,84,https://psicode.org,https://github.com/psi4/psi4/pull/794#issuecomment-335272408,1,['test'],['test']
Testability,"It is unclear to me why the new ipi2 test fails as I get a slightly different result for the final gradient:; Gradient on travis:; ```; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 0.000471409888 -0.006768777549 -0.000000000000; 2 0.000447921170 -0.006988127109 0.000000000000; 3 -0.000919134197 0.013753786479 0.000000000000; ```; Local gradient:; ```; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 0.000471373615 -0.006768232833 -0.000000000005; 2 0.000447935618 -0.006988074312 0.000000000003; 3 -0.000919106219 0.013753539258 0.000000000001; ```. If this variation is expected, I could loose the `compare_array` criterion from 7 digits to e.g. 6?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-501177242:37,test,test,37,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-501177242,1,['test'],['test']
Testability,"It looked like there was maybe an [issue with ADCC](https://dev.azure.com/psi4/psi4/_build/results?buildId=2571&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=41b51342-9bfb-52c2-7efb-0050141a3f7e&l=14) being pulled from the wrong place and perhaps [numpy missing from the env](https://dev.azure.com/psi4/psi4/_build/results?buildId=2571&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=5e4b1b6b-6132-52d3-8c01-735063f4c831&l=18). These may be a side-effect of the pb11 problem, but just wanted to point them out in case you hadn't already seen.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2074#issuecomment-754136729:117,log,logs,117,https://psicode.org,https://github.com/psi4/psi4/pull/2074#issuecomment-754136729,2,['log'],['logs']
Testability,It looks like gcc5.5 has a grievance with the deprecated syntax https://dev.azure.com/psi4/psi4/_build/results?buildId=2687&view=logs&j=258bfeeb-871e-502d-292b-61cd4e6d17f6&t=7c2e2bd2-871d-5948-1d43-9089e6bce09a&l=253 . Looks like it came about in gcc6 https://stackoverflow.com/a/33096368 . I can confirm gcc 7.3 is ok with it. What do we want to do? Give up the deprecated enum value or bump the gcc requirement?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092#issuecomment-767181973:129,log,logs,129,https://psicode.org,https://github.com/psi4/psi4/pull/2092#issuecomment-767181973,1,['log'],['logs']
Testability,It looks like one of the three test configurations failed due to a timeout. The other two passed fine. I think this is ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-304529137:31,test,test,31,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304529137,1,['test'],['test']
Testability,"It looks like something went wrong with the commit. I'm seeing a lot of changes to test cases, including ones I know that I made for findif.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-426047769:83,test,test,83,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-426047769,1,['test'],['test']
Testability,"It looks like the [cc-pV5Z](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/cc-pv5z.gbs#L92-L167) basis exists for Li, but the [aug-cc-pV5Z](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/aug-cc-pv5z.gbs) files doesn't contain an entry for that atom. Were your tests with CC calculations on a molecule that does not contain Li?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1557#issuecomment-467160257:292,test,tests,292,https://psicode.org,https://github.com/psi4/psi4/issues/1557#issuecomment-467160257,1,['test'],['tests']
Testability,"It looks like the tests are failing because for some reason the `6-31G*` basis is being used as a spherical basis and not cartesian. However, I'm not sure where `puream` option is being changed since you placed `cartesian` in the gbs file correctly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-205399523:18,test,tests,18,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-205399523,1,['test'],['tests']
Testability,"It looks like those changes did the trick. The tests passed fairly quickly on travis, but i'm not sure what the timings were like before so i don't know how much impact the header refactoring had. When you think this one's good, could you ping us on Slack, please? The seg fault seems to be hitting a few people so it would be good to get it in quickly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444294885:47,test,tests,47,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444294885,1,['test'],['tests']
Testability,"It may be as simple as extending a test like:. ``` python; props, wfn = psi4.properties('CCSD/cc-pVDZ"", return_wfn=True); prop = psi4.core.OEProp(wfn); ...; prop.compute(). compare_value(…) # TEST; ```. Just to ensure that the OPDM remains valid during changes. Good examples could be scf-properties or ci-properties test cases. Cheers,; Daniel Smith. > On Nov 9, 2016, at 18:45, Andrew James notifications@github.com wrote:; > ; > @jturney https://github.com/jturney do you mean if you use OEprop from python side?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/506#issuecomment-259559771, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcdANRkkc09DCv2AR8vkQDiiFfWCmks5q8lsAgaJpZM4Krp5j.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259561352:35,test,test,35,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259561352,5,"['TEST', 'test']","['TEST', 'test']"
Testability,"It might be that an SCF is converging onto an excited state, i.e. it's using different occupations, and the optimal geometry for that state doesn't have the wanted geometry. If this is the case, it should be possible to make the gibbs test finish by specifying ```docc``` as well, but then this would just hide the more serious bugs with the linked lists etc. @JonathonMisiewicz can you file a bug about the issue since you can reproduce it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-450198971:235,test,test,235,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-450198971,1,['test'],['test']
Testability,It now builds fine with gpu_dfcc and the tests run OK. Thanks for your help.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-401160052:41,test,tests,41,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-401160052,1,['test'],['tests']
Testability,"It seems that were it counts the correct python is used. Main CMake; ```; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so; -- Found Python 2.7: /usr/bin/python; -- Found libefp: /usr/qc/psi4.bin/lib/libefp.a (found version 1.3.0); -- Found libint: /usr/qc/psi4.bin/lib/libint.a (found version 1.1.6); -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED. ```. psi4-core cmake:; ```; - The C compiler identification is GNU 5.4.0; -- The CXX compiler identification is GNU 5.4.0; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc; -- Check for working C compiler: /usr/qc/gcc54/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++; -- Check for working CXX compiler: /usr/qc/gcc54/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /usr/bin/python (found version ""2.7.12"") ; -- Found PythonLibs: /usr/lib64/libpython2.7.so ; -- Using pybind11: /usr/qc/psi4.git/objdir/stage/usr/qc/psi4.bin/include (version 2.0.0 for Py2.7.12 and -std=c++11) ; -- Using Python 2.7: /usr/bin/python ; -- Looking for include file pthread.h ; -- Looking for include file pthread.h - found ; -- Looking for pthread_create ; -- Looking for pthread_create - found ; -- Found Threads: TRUE ; -- ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273732640:772,Test,Test,772,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273732640,1,['Test'],['Test']
Testability,"It seems to work fine with the chemps-1.7 in debian, all three tests pass. One thing I noticed is that the `dmrg-caspt2-n2` test case takes a long time to run - can it be scaled down a bit? I guess @dgasmith created that test case?. ```; Test project /«PKGBUILDDIR»/builddir/tests; Start 319: dmrg-scf-n2; 1/3 Test #319: dmrg-scf-n2 ...................... Passed 9.36 sec; Start 320: dmrg-ci-h2o; 2/3 Test #320: dmrg-ci-h2o ...................... Passed 15.42 sec; Start 321: dmrg-caspt2-n2; 3/3 Test #321: dmrg-caspt2-n2 ................... Passed 594.31 sec. 100% tests passed, 0 tests failed out of 3; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222313007:63,test,tests,63,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222313007,10,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"It seems unlikely a numpy interface would change. You might try running one of the tests that runs `fsapt.py` internally like `fsapt-terms`. You'll have to move the fsapt.py file to the launch directory or hardwire its path in the test. If your numpy error shows up there, I'd believe numpy or env problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397:83,test,tests,83,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902432397,2,['test'],"['test', 'tests']"
Testability,"It should be noted that the keywords did change slightly and all tests had to be tweaked. I am guessing that the Psi4 and ChemPS2 binary versions are out of sync at the moment. Ill look into this today. Cheers,; Daniel Smith. > On May 31, 2016, at 7:51 AM, Hassenky notifications@github.com wrote:; > ; > The DMRG-natural-orbital calculation also has the same error.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/issues/384#issuecomment-222666388, or mute the thread https://github.com/notifications/unsubscribe/ABsBcX6MG6G0p8O-MC63teMY64rE_uWKks5qHCDcgaJpZM4IjFna.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-222667765:65,test,tests,65,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-222667765,1,['test'],['tests']
Testability,"It should do but I'll check once the test suite with python 3 has finished and let you know. I am running the full test suite which is revealing a few more compatibility issues. Most are minor and easily fixed. The major problem is that iteritems and itervalues are used in several places. Unfortunately these have been (essentially) replaced in python 3 with the items and values methods, which return lists (rather than memory efficient generators) in python 2. I'm not sure what to do about this--one option is to just use the items and values methods, but that uses more memory in python 2. Another alternative is to write a function which returns iteritems in python 2 and items in python 3, but that's quite intrusive. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20534484:37,test,test,37,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20534484,2,['test'],['test']
Testability,It should never be `.../psi4/share` that is running. That's source code. When running tests in `objdir` it should be the staged one and when installed it should be the installed version.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240470127:86,test,tests,86,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240470127,1,['test'],['tests']
Testability,"It shouldn't: the JK object and HF object should have similar performance. I haven't benchmarked at all, but this is needed for DFT hessians",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1550#issuecomment-466442856:85,benchmark,benchmarked,85,https://psicode.org,https://github.com/psi4/psi4/pull/1550#issuecomment-466442856,1,['benchmark'],['benchmarked']
Testability,"It sounds like we're taking the path of deprecation, then. > It does seem to be set to non-default in various tests https://github.com/psi4/psi4/search?p=1&q=diis_min_vecs . But if it's not providing an actual useful knob, I'm good with deprecate and remove. Half of those are setting an option in the DCT module, not the SCF module. As for the others, the samples were last generated pre-1.1. Something else killed the knob, perhaps the Py-side inversion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2401#issuecomment-1010179974:110,test,tests,110,https://psicode.org,https://github.com/psi4/psi4/issues/2401#issuecomment-1010179974,1,['test'],['tests']
Testability,"It still works for the `-xHost` `-march=native` case, so I would say it passes your test (haven't tried though!) I was asking myself the same about `CACHE`, but I think it's never set in cache, so we should be safe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343303520:84,test,test,84,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343303520,1,['test'],['test']
Testability,"It was tested with higher angular momentum, which is why I’m confused. Lori and I sat down at the last hackathon to try and find problem cases, but couldn’t reproduce the error. What I’m really struggling with is the origin of the importance of atom order in the test provided in #901. It’s probably related to the fact that I only take derivatives on center A and use translational invariance relations to get the rest, but my flu addled brain is failing me right now. For the same reason, yes, this took me a while to track down. Oh well, hopefully this is the last bug we ever have in the hessians. Or anywhere... > On Jan 27, 2018, at 8:16 PM, Daniel Smith <notifications@github.com> wrote:; > ; > @dgasmith commented on this pull request.; > ; > Awesome.; > ; > In psi4/src/psi4/libmints/overlap.cc:; > ; > > @@ -336,7 +336,7 @@ void OverlapInt::compute_pair_deriv2(const GaussianShell& s1, const GaussianShel; > buffer_[(0*size)+ao12] += (4.0*a1*a1*x[l1+2][l2]*y[m1][m2]*z[n1][n2] -; > 2.0*a1*(2*l1+1)*x[l1][l2]*y[m1][m2]*z[n1][n2]) * over_pf;; > if (l1 > 1); > Hmm, I think you just never tested anything beyond P orbitals. This if statement will not be hit without D or higher.; > ; > I wish we could put weights on commits so that we could crank this one up. Three lines changed, but I am sure quite a bit of time looking into it.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903#issuecomment-361030347:7,test,tested,7,https://psicode.org,https://github.com/psi4/psi4/pull/903#issuecomment-361030347,3,['test'],"['test', 'tested']"
Testability,"It was thought more physically sound for orbital puream to govern all. After we noticed inconsistency, there was a crackdown and [long test](https://github.com/psi4/psi4/blob/master/tests/castup3/input.dat). Though my faint recollection was that the main trouble came from cast-up basis sets influencing the puream of the main calc. So a pure-sph might be ok.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-385684550:135,test,test,135,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-385684550,2,['test'],"['test', 'tests']"
Testability,"It works for me locally, but you're right that the `==` doesn't make for a robust test. I'll improve that -- thanks for the notice.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3014#issuecomment-1636633947:82,test,test,82,https://psicode.org,https://github.com/psi4/psi4/issues/3014#issuecomment-1636633947,1,['test'],['test']
Testability,"It's `dftd3` run through the psi4 interface. All we've done is tack on `-abc` to the command and then parse the `E6(abc)` line. @dsirianni, maybe page up in your terminal and check (or re-run) d3zero vs d3bj that the output line is exactly the same (for our regex to handle). Another thing to test is whether `dftd3 -func bp -abc <molfile>` outright gives exactly the same thing (`bp` is the turbomole for bp86, iirc). you can grab the text of the molfile from that big dictionary that gets printed with verbose=4. That will make sure that the ATM value when run from `.dftd3param` file (which is what psi always does) matches when `dftd3` uses its internal parameters for bp86. Thanks for the help, @hokru. I was really hoping those four numbers were supposed to be the same.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151#issuecomment-417121617:293,test,test,293,https://psicode.org,https://github.com/psi4/psi4/pull/1151#issuecomment-417121617,1,['test'],['test']
Testability,"It's a duplicate of #391 . Unfortunately, python3-numpy is linked to ATLAS on Debian, so it will not be very easy to get around this, but I have (again) confirmed that if I set `blas.so` and `lapack.so` to something else than ATLAS then the `cdomp2-2` test passes:. ```; 	CD-OMP2 Total Energy (a.u.).......................................PASSED; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-451659665:252,test,test,252,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-451659665,1,['test'],['test']
Testability,"It's a pure Distelli issue, all tests pass on Mac. LGTM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/486#issuecomment-258141679:32,test,tests,32,https://psicode.org,https://github.com/psi4/psi4/pull/486#issuecomment-258141679,1,['test'],['tests']
Testability,"It's all conda, but I can do an entire fresh install just to test this. On Oct 11, 2017 21:07, ""Lori A. Burns"" <notifications@github.com> wrote:. > See if you can check that a proper gcc is being loaded for psi4/core.so.; > That cxx11::basic_string<char, std::char_traits brings to mind the; > pre-/post-gcc-5.1 string issue. Is anything here compiled yourself or is it; > all conda?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/820#issuecomment-335915587>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQolTJ-EViA2tp1K0qf6SdZIdHlKOks5srRHYgaJpZM4P19oY>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820#issuecomment-335970314:61,test,test,61,https://psicode.org,https://github.com/psi4/psi4/issues/820#issuecomment-335970314,1,['test'],['test']
Testability,"It's matching qchem (the default setting) behavior of `max_F and (max_DE or max_disp)` https://github.com/psi4/psi4/blob/master/psi4/src/psi4/optking/opt_data.cc#L237 . Agree that it looks suspicious b/c the `o|*| ` symbols only indicate looking-at-this, not the detailed logic. Logic could be reconsidered (and it wouldn't hurt for me to read the q-chem manual every 10 years), but I think it's working as intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1947#issuecomment-655840367:272,log,logic,272,https://psicode.org,https://github.com/psi4/psi4/issues/1947#issuecomment-655840367,2,"['Log', 'log']","['Logic', 'logic']"
Testability,"It's no problem -- they're just warning that some of the test subset labels haven't been registered. All those warnings have vexed others, too, so it's set up to be fixed in #1351 and #1814 by the setup.cfg file. Thanks for the report!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1902#issuecomment-633174321:57,test,test,57,https://psicode.org,https://github.com/psi4/psi4/issues/1902#issuecomment-633174321,1,['test'],['test']
Testability,"It's not `np.float` but `np.double`, but shouldn't https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/numpy_helper.py#L540 be treated similarly, or is that not relevant (or maybe just not exercised by the testsuite)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2845#issuecomment-1407771245:214,test,testsuite,214,https://psicode.org,https://github.com/psi4/psi4/pull/2845#issuecomment-1407771245,1,['test'],['testsuite']
Testability,"It's not going well. Still trying to solve the env after 20 min, and something wants hdf5 1.10.2 https://dev.azure.com/psi4/psi4/_build/results?buildId=1786&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598804826:162,log,logs,162,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598804826,1,['log'],['logs']
Testability,"It's possible recent changes have introduced errors with the v15 Intel compilers. See, e.g.,. https://testboard.org/cdash/buildSummary.php?buildid=24529. The overall dashboard is here, and you can see that all instances of the v15 builds have started dying in libscfsolver/hf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/155#issuecomment-126317935:102,test,testboard,102,https://psicode.org,https://github.com/psi4/psi4/issues/155#issuecomment-126317935,1,['test'],['testboard']
Testability,"It's too bad thus is not working properly!. If the Molden output from Psi is being used as input to the QMC, and the; wrong CI energy is obtained, then it may be that we have a bug in the; Molden output writer. (Are we sure the CAS orbitals are the ones being; written out, and not HF orbitals?). The signs on the determinants printed by Psi4 code are well tested, and so; I think it is extremely unlikely they could be wrong. It is much more; likely that there is some kind of mismatch between the orbitals being used; in the CAS and the orbitals being put into the QMC code. Possible due to a; bug in the Molden writer, or possibly due to some kind of enforced phase; convention in the QMC code that is incompatible with the phase of the; orbitals from Psi. On Sep 23, 2017 9:47 AM, ""Daniel Smith"" <notifications@github.com> wrote:. > @CDSherrill <https://github.com/cdsherrill> Perhaps you could comment on; > this?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/796#issuecomment-331640263>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdiI93WW1UBA9Fg9JkauL9vxRKM6uks5slRnvgaJpZM4PK23n>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331666710:357,test,tested,357,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331666710,1,['test'],['tested']
Testability,"It’s not really an SVN/CVS thing, IMHO. We were using Git for a very long time before making the public/private split and the core developers are extremely familiar with Git’s distributed nature. The old way of developing Psi was to have a private repo (which used to be CVS, then SVN, then Git/SVN, before switching completely to Git) and to only release static tarballs every now and then. Lori touched on the reason for the private repo - we need to be able to collaborate with each other but don’t want to release certain features until we’ve been able to write them up and test them. The idea of having the private repo be a local one is fine if you’re working in isolation, but most of our code is developed collaboratively so we need a central place, like GitHub, to be able to store the repo. Adding a public mirror was just a convenient way to provide more timely updates than static releases, and we have not been diligent enough in keeping this synced up. If GitHub were to allow more fine-grained control of branch access, perhaps we could collapse down to one repo. As things stand, I think that removing the private repo would prevent people from working together on new features that are to be released at a later date. These issues were mooted a few years ago when we set the dual repo system up. If there’s been a GitHub update in the intervening time that allows more fine-grained access, or if anybody has a better idea that doesn’t interrupt our workflow, then we’re always open to suggestions. Andy. > On May 3, 2015, at 11:50 AM, Ryan Richard notifications@github.com wrote:; > ; > I think the short answer may be that a lot of the developers are still used; > to version control models like SVN or CVS.; > ; > Honestly I think you have the right idea though, with git there really; > isn't a need for two repositories for an open source code so long as we; > adopt the accompanying philosophy. It's now a matter of getting everyone; > on board.; > ; > Sent from my Android (with",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/88#issuecomment-98498738:578,test,test,578,https://psicode.org,https://github.com/psi4/psi4/issues/88#issuecomment-98498738,1,['test'],['test']
Testability,"Just a followup on the fnocc2 error. I had passed in the `dertype=1` flag to reduce AM requirements; that flag got lost in your merge of my PR. I think the current solution is better; we now use analytic frequencies in that test case because the AM requirements have been reduced since I fixed the erroneous AM check in libmints. The clang-3.8 failure is caused by two things: 1) the Boost detection fails and 2) building Boost fails because of [this bug](https://bugzilla.redhat.com/show_bug.cgi?id=1120995), which was fixed in clang 3.4. For some crazy reason, Travis is providing 3.4 even though we specifically request 3.8. I noticed that some of the tests do get version 3.8, so I'm not sure it's a problem with out YML but will poke around a little. This will all go away (and our build time will drop) when the Boost detection works with Travis again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235144008:224,test,test,224,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235144008,2,['test'],"['test', 'tests']"
Testability,"Just a general note, if the lesson hadn't been hammered in already by @PeterKraus's experiences with sapt-ecp: small basis sets are _very_ susceptible to `DF_FITTING_CONDITION`. The opt-irc-1 test, which was healed by propagating the condition value, was taking ~15 opt cycles to converge each IRC point with 1e-12 (and finally failed on one) but takes ~4 cycles with 1e-10.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1494#issuecomment-457323824:192,test,test,192,https://psicode.org,https://github.com/psi4/psi4/pull/1494#issuecomment-457323824,1,['test'],['test']
Testability,"Just a little update: unless jturney has an opposition, I think we can safely delete the error message. I'm now trying to clean up the synchronization issues. I found the problem with cubeprop, and I'm working on the errors in the sapt tests, which seem to be even more subtle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278105814:236,test,tests,236,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278105814,1,['test'],['tests']
Testability,"Just a note to confirm, that error looks like a mismatch between an old version of Psi4 and new version of the test. Midbonds were added fairly recently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/936#issuecomment-373023252:111,test,test,111,https://psicode.org,https://github.com/psi4/psi4/issues/936#issuecomment-373023252,1,['test'],['test']
Testability,"Just a quick note on the failing tests so I don't forget: `dft-smoke` fails because it includes DSD-PBEP86 (which was parametrised for -D2, now is parametrised without it); `dftd3-energy` fails because of `dashparams['sr8']` not being passed in. It would make sense to generalise that interface somewhat - set defaults and then update from the passed-in dict.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922#issuecomment-370332915:33,test,tests,33,https://psicode.org,https://github.com/psi4/psi4/pull/922#issuecomment-370332915,1,['test'],['tests']
Testability,"Just a quick update - I'm making a little bit of progress. I hacked my local branch to get valgrind info from the test machines. Here's the pertinent section of the resulting error:. `vex amd64->IR: unhandled instruction bytes: 0xF 0xB 0x89 0xD1 0x48 0x89 0x45 0xC8; ==20864== valgrind: Unrecognised instruction at address 0x22fd55c.; ==20864== at 0x22FD55C: psi::DPD::buf4_sort(psi::dpdbuf4*, int, psi::indices, std::string, std::string, char const*) (buf4_sort.cc:1977); ==20864== by 0x191AEB0: psi::cctransort::sort_tei_rhf(boost::shared_ptr<psi::PSIO>, int) (sort_tei_rhf.cc:35); ==20864== by 0x18F8C81: psi::cctransort::cctransort(psi::Options&) (cctransort.cc:472); ==20864== by 0x1434733: py_psi_cctransort() (python.cc:497); ==20864== by 0x144C47D: _object* boost::python::detail::invoke<boost::python::to_python_value<double const&>, double (*)()>(boost::python::detail::invoke_tag_<false, false>, boost::python::to_python_value<double const&> const&, double (*&)()) (invoke.hpp:75)`. I'm digging around now, because I can't see anything obviously wrong in those lines of code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178350753:114,test,test,114,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178350753,1,['test'],['test']
Testability,Just added this as a test case too for pyOptking (which had no trouble with it).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2208#issuecomment-868823284:21,test,test,21,https://psicode.org,https://github.com/psi4/psi4/issues/2208#issuecomment-868823284,1,['test'],['test']
Testability,Just cleaned from obsolete code/comments. Ready to go when passes tests.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-305353983:66,test,tests,66,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-305353983,1,['test'],['tests']
Testability,"Just discussed this with the team. Unfortunately we don't see a straightforward way to add this capability to SAPT without adding some complex logic, and SAPT dying in the middle of a calculation seems rare enough that we're reluctant to add the complex logic to fix something that shouldn't be happening often. Sorry!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-37975385:143,log,logic,143,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-37975385,2,['log'],['logic']
Testability,Just finish the tests!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-408884434:16,test,tests,16,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-408884434,1,['test'],['tests']
Testability,"Just out of interest, does `dft-bench-ionisation` (where the wB97X-D functional is a good canary) pass with your ICC + MKL build?. With GCC, I had success with netlib and blis - OpenBLAS seems to be hit-and-miss, and I didn't try with MKL. However, as I mentioned before, the `dft-custom-gga` always passes for me, and it's the other test that fails.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397376716:334,test,test,334,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397376716,1,['test'],['test']
Testability,"Just out of interest, does this fix the `energy(cbs, ... , bsse_type=[...])` calls? The ""method/basis"" syntax for CBS works fine, but ""explicit"" returns the total energy. I'm not sure what's the expected behaviour, but I think it should be consistent:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ```; returns:; ```; TestComparisonError: 	Interaction energy: computed value (445.7515388) does not match (0.0131014) to 6 digits.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/975#issuecomment-383597174:667,TEST,TEST,667,https://psicode.org,https://github.com/psi4/psi4/pull/975#issuecomment-383597174,2,"['TEST', 'Test']","['TEST', 'TestComparisonError']"
Testability,"Just tested and the check on compiler version is still needed, since earlier compilers might not be feature-complete and CMake doesn't check for all features when setting the standard.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281120873:5,test,tested,5,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281120873,1,['test'],['tested']
Testability,"Just to prevent things falling in between the cracks, @loriab and I have discussed this issue on Slack a while ago, and the consensus was that while adding FC spec to `Molecule` might be attractive because it's easier to do, it really ought to belong to the `Wavefunction` object. . To paraphrase @loriab's comments, as the `Wavefunction` owns a `Basisset` which owns a `Molecule` anyway, it is the most logical place to plug this logic in. It should process options like `frozen_docc Int` or `freeze_core True` (or any possible `freeze_core N` spec where `N` is the N-th previous noble gas, or potential per-fragment `frozen_docc`). For the latter case (`freeze_core True`), it should take into account the fragment charge, or any electrons already frozen by ECP's, so that atoms such as Ca2+ with FC have some valence electrons.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1350#issuecomment-445241427:404,log,logical,404,https://psicode.org,https://github.com/psi4/psi4/pull/1350#issuecomment-445241427,2,['log'],"['logic', 'logical']"
Testability,"Just updated the last commit to fix `mintshelper_` copying. For the shallow copy, the copy and the original use the same `mintshelper_`, so all the `set_basisset` I was doing was wasted lines. For the deep copy, I just needed to copy from the original `mintshelper_`, not the new one. Follow-up PR should have a test for this, as I need some other infrastructure in place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1970#issuecomment-664461196:312,test,test,312,https://psicode.org,https://github.com/psi4/psi4/pull/1970#issuecomment-664461196,1,['test'],['test']
Testability,KIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:783: Not detecting module cfour. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_add,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14442,test,tests,14442,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,KIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:816: Not detecting module v2rdm_casscf. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:868: Not detecting module gpu_dfcc. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:931: Not detecting module dkh. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1015: Not detecting module snsmp2. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1031: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1099: Not detecting module resp. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1189: Not detecting module fockci. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1213: Not detecting module cppe. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1240: Not detecting module cct3. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons.py:1286: Not detecting module psixas. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:25: Not detecting module gdma. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\test_addons_qcschema.py:75: Not detecting module ipi. Install package if necessary to enable tests.; SKIPPED [1] psi4conda\envs\psi4env\lib\site-packages\psi4\tests\te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074:14601,test,tests,14601,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875256074,2,['test'],['tests']
Testability,"Kind of an interesting edge case, since the SOCC orbitals area always assumed to be of the same spin the sorting breaks the multiplicity. This could be widely considered a ""bug"" as the sorting *should* be aware of this in a perfect world. At the same time, CUHF for closed shell doesn't make a ton of sense so perhaps the other way to do it is have CUHF complain if a closed shell molecule is given? We can likely find similar errors when running UHF in singlet mode. Some logic to switch between RHF and UHF can be added if a user doesnt specify a reference.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738#issuecomment-307631551:473,log,logic,473,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307631551,1,['log'],['logic']
Testability,"Knocked about 10% off the total time to limit AM to 4. Going to close this for now, not sure a test branch will help us much more. Time to see how this fares in the wild.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235437711:95,test,test,95,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235437711,1,['test'],['test']
Testability,L [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv fc: dd -grd0] PASSED [ 82%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd1] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf conv ae: dd -grd0] PASSED [ 83%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd1] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf conv ae: dd -grd0] PASSED [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd1] XFAIL [ 84%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf conv ae: dd -grd0] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd1] PASSED [ 85%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd1] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df fc: dd -grd0] PASSED [ 86%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd1] XFAIL [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df fc: dd -grd0] PASSED [ 87%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf df ae: dd -grd0] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd1] PASSED [ 88%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 uhf df ae: dd -grd0] PASSED [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd1] XFAIL [ 89%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rohf df ae: dd -grd0] PASSED [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_default[mp2 rhf cd fc: dd -grd1] XFAIL [ 90%]; ../tests/pytests/test_mp2.py::test_mp2_gradient_defau,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841:20249,test,tests,20249,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-605511841,1,['test'],['tests']
Testability,LANG=en_US.UTF-8; DEBUG_FFLAGS=-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-all -fno-plt -Og -g -Wall -Wextra -fcheck=all -fbacktrace -fimplicit-none -fvar-tracking-assignments -pipe; F77=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gfortran; CXX=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-c++; MPM_LAUNCHER=/home/termo/intel/debugger_2018/mpm/mic/bin/start_mpm.sh; OBJCOPY=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-objcopy; INTEL_PYTHONHOME=/home/termo/intel/debugger_2018/python/intel64/; SHLVL=1; HOME=/home/termo; FORTRANFLAGS=-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe; DEBUG_CPPFLAGS=-D_DEBUG -D_FORTIFY_SOURCE=2 -Og; CFLAGS=-march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -pipe; FC=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gfortran; _CONDA_PYTHON_SYSCONFIGDATA_NAME=_sysconfigdata_x86_64_conda_cos6_linux_gnu; GCC=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-gcc; ADDR2LINE=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-addr2line; CONDA_PYTHON_EXE=/home/termo/miniconda3/bin/python; LOGNAME=termo; CLASSPATH=/home/termo/intel/compilers_and_libraries_2018.2.199/linux/mpi/intel64/lib/mpi.jar; XDG_DATA_DIRS=/usr/local/share:/usr/share:/var/lib/snapd/desktop; SSH_CONNECTION=185.107.12.100 44238 10.0.0.4 22; CONDA_DEFAULT_ENV=p4dev35; PKG_CONFIG_PATH=/home/termo/intel/compilers_and_libraries_2018.2.199/linux/mkl/bin/pkgconfig; LESSOPEN=| /usr/bin/lesspipe %s; DEBUG_CFLAGS=-march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-all -fno-plt -Og -g -Wall -Wextra -fvar-tracking-assignments -pipe; RANLIB=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-ranlib; INFOPATH=,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:8328,LOG,LOGNAME,8328,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['LOG'],['LOGNAME']
Testability,"LGTM, waiting on tests now. Not sure why distelli is not running on these PR's, but still going strong on Inversion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/479#issuecomment-254008157:17,test,tests,17,https://psicode.org,https://github.com/psi4/psi4/pull/479#issuecomment-254008157,1,['test'],['tests']
Testability,LGTM. (I want to test lgtm counting),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/473#issuecomment-249286005:17,test,test,17,https://psicode.org,https://github.com/psi4/psi4/pull/473#issuecomment-249286005,1,['test'],['test']
Testability,LGTM. +🍺 for adding a test case,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-265362937:22,test,test,22,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265362937,1,['test'],['test']
Testability,"Landing on the correct SCF solution is tricky, and guaranteeing it is trickier still. I hear that in psi3, users routinely supplied docc/socc arrays to guide to the intended solution. Fortunately, psi4 has a variety of guesses to obtain the right solution, and someday, as @dgasmith mentioned, a next-generation SAD guess will assure correctness for the ground states of elements, at least. But without a root-finding driver over the SCF code that attempts and discards guesses/ does basis projections/ evaluates the nature of the system (which can be computational expensive), we cannot fix some system and method combinations without injuring others. It should be noted that no QC methodology to date is completely black box and no program always obtains the correct minima with default options. We are glad to have the lithium report at hand and will be pleased to use them to test the future SAD guess, but this is not an issue that will be fixed by 1.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/335#issuecomment-212439352:880,test,test,880,https://psicode.org,https://github.com/psi4/psi4/pull/335#issuecomment-212439352,2,['test'],['test']
Testability,"Last two pass now (https://testboard.org/cdash/viewTest.php?onlydelta&buildid=44436), so item complete.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/190#issuecomment-158097011:27,test,testboard,27,https://psicode.org,https://github.com/psi4/psi4/issues/190#issuecomment-158097011,1,['test'],['testboard']
Testability,"Latest force push is a rebase of the branch, and a new commit with test cases. I still need one more reviewer. The actual coding is just replacing `nsopi` with `nmopi` in cases when we're obviously dealing with molecular orbitals, so should be an easy review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233#issuecomment-875774733:67,test,test,67,https://psicode.org,https://github.com/psi4/psi4/pull/2233#issuecomment-875774733,1,['test'],['test']
Testability,"Leave those tests as they are, and create new tests for the fixed option. I also insist that you include a warning about those keyword changes in the documentation for SAPT(DFT), and in the output or logging file whenever SAPT(DFT) runs. This could cause users to get different numbers with the exact same input file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1165691789:12,test,tests,12,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1165691789,3,"['log', 'test']","['logging', 'tests']"
Testability,"Let me test something with the DFT part. edit: main suspect is the ""wrong"" VWN correlation",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1305868903:7,test,test,7,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1305868903,1,['test'],['test']
Testability,"Log file attached.; [memdfjk.txt](https://github.com/psi4/psi4/files/3302510/memdfjk.txt). The issue is simple, however, and the fix is in #1667 as I posted already above.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503214336:0,Log,Log,0,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503214336,1,['Log'],['Log']
Testability,"Looking at the CI failure logs, it seems that the issue is with the package ""Pint"":. `ImportError: cannot import name 'quantity' from 'pint' (C:\Miniconda\envs\baseenv\lib\site-packages\pint\__init__.py). This particular error seems to commonly show up for the failed CI tests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883:26,log,logs,26,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1293471883,2,"['log', 'test']","['logs', 'tests']"
Testability,"Looking at this, how much overlap does this have with the current dispersion function? What is the chance we could combine the two. Do you need pointers on where to hook this into tests?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-456614330:180,test,tests,180,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-456614330,1,['test'],['tests']
Testability,"Looks fine to me. Thanks Lori!. -Rob. On Thu, Sep 22, 2016 at 8:32 PM, Lori A. Burns notifications@github.com; wrote:. > Description; > ; > Documents F/I-SAPT capabilities, adds F/I-SAPT test cases and samples, and; > makes F/I-SAPT postprocessing scripts available in install/share.; > Todos; > ; > Notable points that this PR has either accomplished or will accomplish.; > - Enables the average citizen to quickly begin using F/I-SAPT.; > ; > Status; > - Ready to go. Looks ready to me, though there may well be further; > reST changes after viewing the docs build. @robparrish; > https://github.com/robparrish may want to look it over. We'll close; > the other PR.; > ; > ---; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4/pull/470; > Commit Summary; > - FISAPT does not need INTS_TOLERANCE 0.0 any more (bug fixed in; > LibFock previously); > - Removed extra pymol file in fsapt; > - Remove dependency on absolute path from copy_pymol scripts in fsapt; > - Short correctness test (1s) of fsapt0; > - Full example of fsapt0; > - Full example of fisapt0; > - Shorter version of tests/isapt1; > - Example of fsapt0 difference analysis; > - Hook up and clean fisapt test makefiles; > - Added a good bit of sphinx docs on FISAPT; > - update samples. docstring f/isapt tests; > - a few mods to fisapt docs that I can detect w/o seeking the built; > docs; > ; > File Changes; > - _M_ doc/sphinxman/CMakeLists.txt; > https://github.com/psi4/psi4/pull/470/files#diff-0 (6); > - _A_ doc/sphinxman/source/Total.png; > https://github.com/psi4/psi4/pull/470/files#diff-1 (0); > - _A_ doc/sphinxman/source/VA.png; > https://github.com/psi4/psi4/pull/470/files#diff-2 (0); > - _M_ doc/sphinxman/source/bibliography.rst; > https://github.com/psi4/psi4/pull/470/files#diff-3 (16); > - _A_ doc/sphinxman/source/fisapt.rst; > https://github.com/psi4/psi4/pull/470/files#diff-4 (351); > - _M_ doc/sphinxman/source/methods.rst; > https://github.com/psi4/psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/470#issuecomment-249267903:187,test,test,187,https://psicode.org,https://github.com/psi4/psi4/pull/470#issuecomment-249267903,1,['test'],['test']
Testability,Looks good to me from the CMake/math point of view. The foreach [here](https://github.com/psi4/psi4/pull/591/commits/242c33255741ca6783ce13d4143ed7096ef79766) looks a bit overkill. Will it be possible for me to take these changes over to Autocmake? The grand plan there is to split up the math detection monolith into individual modules. I am asking this because this now becomes GPL code and Autocmake is BSD. Advantage of taking it to Autocmake would be more testing exposure to other codes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276088154:461,test,testing,461,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276088154,1,['test'],['testing']
Testability,"Looks good to me, and particularly the tests. Thanks for fixing this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2191#issuecomment-859723675:39,test,tests,39,https://psicode.org,https://github.com/psi4/psi4/pull/2191#issuecomment-859723675,1,['test'],['tests']
Testability,"Looks good! Defaulting to semicanonical MO's is probably a good idea. Can you think of a reason that we wouldnt want to do this?. We may want to add some sort of test to this just to ensure that we are not actually changing the energy. One idea would to be in a test to do:. ```; # Solve and leave the Wavefunction active; set MCSCF_CI_CLEANUP False; set MCSCF_DPD_CLEANUP False; cas_e, cas_wfn = energy(""CASSCF"", return_wfn=True). # Update energy; cas_wfn.transform_mcscf_integrals(approx_integrals_only); nci_iter = cas_wfn.diag_h(1.e-10, 1.e-10); current_energy = core.get_variable(""MCSCF TOTAL ENERGY""). # Compare the energy; compare_values(cas_e, cas_wfn, 8, ""Rotated Orbital Energy Invariance""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722#issuecomment-304474246:162,test,test,162,https://psicode.org,https://github.com/psi4/psi4/pull/722#issuecomment-304474246,2,['test'],['test']
Testability,"Looks good, can you post some raw gradients for `[D,T]` and `[T,Q]` under different schemes? Id like to examine the convergence pattern. Be good to add these to the tests as well, best to have tests that go back to static quantities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1042#issuecomment-433249247:165,test,tests,165,https://psicode.org,https://github.com/psi4/psi4/pull/1042#issuecomment-433249247,2,['test'],['tests']
Testability,Looks good. Can you add a test in `/tests/dft1/` that compares the result against another program with a prior implementation?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/438#issuecomment-230646972:26,test,test,26,https://psicode.org,https://github.com/psi4/psi4/pull/438#issuecomment-230646972,2,['test'],"['test', 'tests']"
Testability,Looks great so far! I retract my statement about the code being bad in the absence of PCMSolver; I wasn't actually running the tests themselves. I just grabbed a PCM input from the test suite and it's no surprise that it failed when I didn't compile PCM.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183835547:127,test,tests,127,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183835547,2,['test'],"['test', 'tests']"
Testability,"Looks great. CI should pass now after a rebase. And note that `tests/pytest/` has moved to `tests/pytests/` to follow Peter's links. Ref values _much_ appreciated, even if they're only a warning that we differ from you rather than we're not matching literature.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1645#issuecomment-492646574:63,test,tests,63,https://psicode.org,https://github.com/psi4/psi4/pull/1645#issuecomment-492646574,2,['test'],['tests']
Testability,"Looks like 0-60 cal/mol, thanks for already doing this benchmark!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1677#issuecomment-510938024:55,benchmark,benchmark,55,https://psicode.org,https://github.com/psi4/psi4/issues/1677#issuecomment-510938024,1,['benchmark'],['benchmark']
Testability,"Looks like @jturney and @lothian picked up some frac faults just as I’ve managed to squelch all of mine. The problem is that the scf convergence goes haywire occasionally at different fractional occupations on different computers (sometimes just failing to converge, sometimes converging to wrong values). Fiddling with `frac_start` and `mom_start` around https://github.com/psi4/psi4public/blob/master/tests/frac/input.dat#L126 for different points usually helps. If you could identify which point is giving trouble (`grep electron.`) that’d help in devising an input file that works everywhere. Or in commenting out the points most likely to offend. https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23176; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23168; https://testboard.org/cdash/viewTest.php?onlyfailed&buildid=23173",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/129#issuecomment-124147126:403,test,tests,403,https://psicode.org,https://github.com/psi4/psi4/issues/129#issuecomment-124147126,4,['test'],"['testboard', 'tests']"
Testability,Looks like I was getting my tests confused when running your issues. The eigenvectors are indeed wrong. Fixed in #566. As a note the diagonalization is a bit unstable and you will get slightly different results between programs.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/558#issuecomment-271923039:28,test,tests,28,https://psicode.org,https://github.com/psi4/psi4/issues/558#issuecomment-271923039,1,['test'],['tests']
Testability,Looks like `gdma` is still the culprit:; ```; 117/118 Test #335: gdma-gdma1 .......................***Failed 1.55 sec; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277151141:54,Test,Test,54,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277151141,1,['Test'],['Test']
Testability,Looks like a logic breakdown around `/psi4/driver/procedures/proc.py:1140`. For now if you simply comment out `/psi4/driver/procedures/proc.py:1164-1165` everything should work as expected. Ill fix this up in a patch and switch one of our `basis_guess` test cases to an explicit basis so we can catch this in the future.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/484#issuecomment-256802735:13,log,logic,13,https://psicode.org,https://github.com/psi4/psi4/issues/484#issuecomment-256802735,4,"['log', 'test']","['logic', 'test']"
Testability,"Looks like it is because `lock_frame_` is set to true. Try setting it to false right before the call to `update_geometry`. That also seems to make the small test work. Edit: it is set to whatever the rhs is set to, which would usually be true.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/299#issuecomment-191841132:157,test,test,157,https://psicode.org,https://github.com/psi4/psi4/pull/299#issuecomment-191841132,1,['test'],['test']
Testability,"Looks like it's failing on travis in; ```stage/lib/psi4/tests/test_vibanalysis.py::test_hessian_vs_cfour[methane-H_analytic] FAILED [ 93%]```. so the analytic Hessian for CH4 is failing, but the finite difference calculations based on forces or energies are both okay... I don't really see what could be going wrong here: if it's doing the neutral molecule, this PR hasn't changed anything!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-451646889:56,test,tests,56,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-451646889,1,['test'],['tests']
Testability,Looks like the tests are 1-2 minutes on one core and have been added to shorttests. Great!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/257#issuecomment-184851903:15,test,tests,15,https://psicode.org,https://github.com/psi4/psi4/pull/257#issuecomment-184851903,1,['test'],['tests']
Testability,"Looks like there are a few test cases where SAD may converge onto a different solution than the previously used guess. Namely, on my computer the tests that fail on CI run just fine, and the SAD guess gives the same solution, only with a slightly lower energy in a fewer number of iterations. ROHF is tricky due to the existence of many local minima.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1429#issuecomment-447636721:27,test,test,27,https://psicode.org,https://github.com/psi4/psi4/pull/1429#issuecomment-447636721,2,['test'],"['test', 'tests']"
Testability,"Looks like there are some unrelated test failures, but this one is ready to go. As shown by the changes in the pytest guess energies, the new code reaches a considerably lower SAD guess energy for the HF molecule: -100.02909951427 vs -99.63941801281894. Large improvements are expected especially for systems containing hydrogen atoms, since the existing code only includes 0.5 electrons on those atoms.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3138#issuecomment-2149267707:36,test,test,36,https://psicode.org,https://github.com/psi4/psi4/pull/3138#issuecomment-2149267707,1,['test'],['test']
Testability,Looks like this isnt handling custom basis sets correctly and a few other python pieces like inline for-based lists and dicts. Failing tests are:. ```; The following tests FAILED:; 	 60 - cc49 (Failed); 	 93 - cubeprop (Failed); 	120 - dfmp2-1 (Failed); 	187 - mints2 (Failed); 	206 - mp2-property (Failed); 	235 - opt1 (Failed); 	256 - psimrcc-ccsd_t-1 (Failed); 	257 - psimrcc-ccsd_t-2 (Failed); 	258 - psimrcc-ccsd_t-3 (Failed); 	262 - psimrcc-pt2 (Failed); 	263 - psimrcc-sp1 (Failed); 	268 - pywrap-alias (Failed); 	310 - stability1 (Failed); 	322 - options1 (Failed); 	335 - dftd3-energy (Failed); 	339 - gdma-gdma1 (Failed); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/658#issuecomment-289183019:135,test,tests,135,https://psicode.org,https://github.com/psi4/psi4/pull/658#issuecomment-289183019,2,['test'],['tests']
