quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"With runSofa and SceneChecking, `RequiredPlugin` is calling `loadPlugin()` twice; - once at the `parse()` step; - and a second time when `SceneCheckMissingRequiredPlugin` at the `init()` step. `SceneCheckMissingRequiredPlugin` browses all `RequiredPlugin` and checks each entry on `d_loadedPlugins`.; https://github.com/sofa-framework/sofa/blob/af8f98a668dee73e21fac19da31d181baf137a99/applications/projects/SceneChecking/src/SceneChecking/SceneCheckMissingRequiredPlugin.cpp#L144-L150; But `d_loadedPlugin`s is set dirty at parse() so calling `d_loadedPlugins.getValue()` will trigger an other `loadPlugin()`, because of the callback. So this PR forcefully sets `d_loadedPlugins` to **not dirty** but maybe there is a better solution.... ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4509:1278,test,test,1278,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4509,2,['test'],['test']
Testability,"With the new exclusion of SOFAGUI_HEADLESS_RECORDER on CentOS, looks like all tests pass correctly.; I think that once the dashboard has finished, this PR will be ready to merge.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/538#issuecomment-368035205:78,test,tests,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/538#issuecomment-368035205,1,['test'],['tests']
Testability,With the purpose to override it in a child class in a plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1444:313,test,test,313,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1444,2,['test'],['test']
Testability,With this PR you can `find_package(CImgPlugin)` in an other cmake project. Quite useful since this plugin is indeed part of the *core*. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/544:387,test,test,387,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/544,2,['test'],['test']
Testability,"With this PR, I suggest to return barycentric coords to the detection output members. In my use case , these coordinates are used in cutting simulation to create new vertices from ancestor points when propagating a cut.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4226:760,test,test,760,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4226,2,['test'],['test']
Testability,"With this PR, `sofa::gpu::cuda::init()` can be called from outside. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4453:607,test,test,607,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4453,2,['test'],['test']
Testability,"With:; - guidelines,; - symbols export (for Windows); - example of mandatory dep and optional dep in Cmake; - cleaning (pragma/nested namespace); - updated init (with data from CMake); - installable (and usable as dep); - add test mechanism (with BaseTest); - Readme as markdown. Remove useless python files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1356:226,test,test,226,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1356,3,['test'],['test']
Testability,Work done further to a doc update:; - example scene of Newmark solver is improved; - example scene for the PointsFromIndices engine is added; - clean Newmark c++ code. FYI doc is [here](https://www.sofa-framework.org/community/doc/components/integrationscheme/newmarkimplicitsolver/); ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1398:536,test,test,536,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1398,2,['test'],['test']
Testability,Work of clean further to PR #625 on WriteState and also done for ReadState with:; - check on all data at init and remove unused data; - export with msg; - add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/714:159,test,tests,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714,3,['test'],"['test', 'tests']"
Testability,"Working with the changes from #4273 made me realize that we lack user insights. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4310:619,test,test,619,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4310,2,['test'],['test']
Testability,Would it be easy to add theme to the scene tests for future problem detection?; They were not crashing I guess...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489640989:43,test,tests,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1020#issuecomment-489640989,1,['test'],['tests']
Testability,Would it be possible to write a unit test to show this ? thanks ! 👍; (there are already some in Sofa.Type_test/MatTypes_test.cpp so it would be easy to add tensorproduct tests here),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2787#issuecomment-1067780563:37,test,test,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2787#issuecomment-1067780563,2,['test'],"['test', 'tests']"
Testability,"Wouldn't it be better if implemented in VisualStyle which is kind of our user interface instead of DisplayFlag ? ; This would also allow to use msg_error() instead of msg_error(""Blahblah)...(independently, i would say that msg_error(""String) version should always print something, unless the logging backend is not registerd).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1383854873:292,log,logging,292,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3575#issuecomment-1383854873,1,['log'],['logging']
Testability,"Write access (copy-less), the data counter is updated after the 'with' block; with c.position.writeable() as w:; o = numpy.ones((len(c.position), 3))) ; w += o ; w *= 2.0; ```. Wrap around types (copy-less) to typify the data fields on demand; ```python; # syntax 1; c = o.showColor.as(RGBAColor); # syntax 2; c = RGBAColor(o.showColor); c.setFromHSC(1,2,3); c.setFromHSV(1,2,3); ```. Implement your own ForceField in python:; ```python; class MyForceField(Sofa.Core.BaseForceField):; def __init__(self, *args, **kwargs):; Sofa.Core.BaseForceField.__init__(self, *args, **kwargs); ; def init(self):; self.refx = self.position.toarray().copy(). def addForce(self, m, f, x, v):; n = numpy.ones((len(self.position),1)); f = (self.refx-x) * 2 + n; ```; ; To test the binding you need to de-activate SofaPython and activate SofaPython3. ; Then; - runSimu.py to launch a sofa simulation from the command line eg: ; python3 runSimu.py mySimulation.py; - or runSofa. . General guidelines:; - Fix existing API consistency issues; - Improve the performance of the binding by supporting supporting the different python protocols (sequence, buffer+memoryview, copy-less mechanism).; - unified data access and API.; - implementation is currently done with pybind11 and cython.; - modular design. About the tools we use: ; - pybind because it is very consistent with our code base ; - cython becaues it is much more powerful and general and so we can accelerate python code by un-warping the warped object in other part of the code base. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/771:2500,test,test,2500,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771,2,['test'],['test']
Testability,Writing test for DiagonalMass.cpp: what are mass & totalMass for ?,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/36:8,test,test,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36,1,['test'],['test']
Testability,"Yeah I see your issue now, thanks !. I think it could be resolved by changing (improving?) a little bit our current CI strategy. Correct me if I'm wrong, but right now the CI does the following for a PR # XXX into the branch Master:. 1. Checkout PR#XXX branch; 2. Build SOFA; 3. Run tests. I think a better approach should be:. 1. Checkout origin/master; 2. **Merge** PR #XXX branch; 3. Build SOFA; 4. Run tests. This might also prevent some weird issues that we had were the CI passes, we merge, and then the CI start breaking everywhere: The CI never actually tested the merged PR. I think this would fix your issue 5. What do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821093676:283,test,tests,283,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2004#issuecomment-821093676,3,['test'],"['tested', 'tests']"
Testability,"Yeah just I wanted to write which ones were failing.; As for your question.... I suppose the issue thingy is cleaner, but dont remove the tests themselves (just ignore it in the list with a comment with a link to the issue)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2161#issuecomment-863905746:138,test,tests,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2161#issuecomment-863905746,1,['test'],['tests']
Testability,"Yeah, I was testing head of 19.06.00. But I forgot to mention that I'm on macOS, don't know if it is related. A colleague told me that it seems to work on windows.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513251952:12,test,testing,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513251952,1,['test'],['testing']
Testability,"Yep, I did not find a ""standard"" std:: thingy to do the is_iterable or something like that (except concept from c++20), so good to go for me as well.; [ci-build][force-full-build][with-all-tests]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1807#issuecomment-785722870:189,test,tests,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1807#issuecomment-785722870,1,['test'],['tests']
Testability,"Yes I actually fixed it in https://github.com/sofa-framework/sofa/pull/905, see https://github.com/sofa-framework/sofa/commit/c608d441edd35f6e8eb90ebfc420cb941c3bd750 and https://github.com/sofa-framework/sofa/commit/e1b55cba5ff200c7a11f6992974159b55cec000f. The error is printed on CI but you have to open the output of a scene test to see it (Jenkins only shows the first line of an error in the ""SOFA SceneTest Errors"" view). See for example the [output of failing scene Components/forcefield/ForceMaskOff.scn](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/master/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/636/artifact/parent_dir/build/scene-tests/examples/Components/forcefield/ForceMaskOff.scn/output.txt) (latest master build).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086:329,test,test,329,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/922#issuecomment-461353086,2,['test'],"['test', 'tests']"
Testability,"Yes I have an idea... . The problem is probably because currently there is two approaches to interpret the messages send with the Message API as test failure. Fixing should be easily, will do that this evening. . More in-depth... I think this is a good opportunity to discuss how the component messages are interpreted as test...currently we have two different approaches. . One of the approach is a global message handler that interprets all errors as test failure. This handler can be ""explicitely"" deactivated when we don't need this behavior. But if we forgot to do so this behavior propagates to each _test in the same test suite (I think this is what is happening here). . I found this behavior not precise enough so I develop ExpectMessage & MessageAsTestFailure which are RAII classes to finely select which message generates test failure with the granulary of the RAII; (so it is automatically removed when the RAII is destroy). ; The good point about this approach is that:; - we can raise test failure for any kind of message (this depend on the test); - we can raise test failure is a message is expected but not send (like using a wrong filename must generate a message). ; - we behavior is only active during the RAII lifetime. . I don't know if we need to keep them both. What is your opinion ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642:145,test,test,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265156642,8,['test'],['test']
Testability,Yes I'm using that fix and I do not see errors but I didn't run all the tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-688179583:72,test,tests,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1465#issuecomment-688179583,1,['test'],['tests']
Testability,"Yes you're right. It can take some time, but if you really have no idea what commit is the guilty one, it is the fastest method. If you go with this process, disable the compilation of useless plugins and tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1332413084:205,test,tests,205,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1332413084,1,['test'],['tests']
Testability,"Yes, but I am doing some testing to check everything is worked as expected. I have some scenes using this NBESolver + a custom CG and they are failing, need to check if its the NBESolver or the CG.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2209#issuecomment-874244045:25,test,testing,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2209#issuecomment-874244045,1,['test'],['testing']
Testability,"You are right about the case of 1 iteration. I broke it by starting `i` to 2. Handling the 1 iteration case differently is a bit overkill though. Here is my update (still not tested):; ```cpp; int BatchGUI::mainLoop(); {; if (groot); { ; if (nbIter != -1); { ; msg_info(""BatchGUI"") << ""Computing "" << nbIter << "" iterations."" << msgendl;; }; else; {; msg_info(""BatchGUI"") << ""Computing infinite iterations."" << msgendl;; }; ; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; msg_info(""BatchGUI"") << ""Processing."" << sofa::helper::AdvancedTimer::end(""Animate"", groot.get()) << msgendl;; // As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; sofa::simulation::Visitor::ctime_t rtfreq = sofa::helper::system::thread::CTime::getRefTicksPerSec();; sofa::simulation::Visitor::ctime_t tfreq = sofa::helper::system::thread::CTime::getTicksPerSec();; sofa::simulation::Visitor::ctime_t rt = sofa::helper::system::thread::CTime::getRefTime();; sofa::simulation::Visitor::ctime_t t = sofa::helper::system::thread::CTime::getFastTime();; ; signed int i = 1; // one simulation step is animated above ; ; while (i <= nbIter || nbIter == -1); {; if (i != nbIter); {; sofa::helper::AdvancedTimer::begin(""Animate"");; sofa::simulation::getSimulation()->animate(groot.get());; //As no visualization is done by the Batch GUI, these two lines are not necessary.; sofa::simulation::getSimulation()->updateVisual(groot.get());; }. if ( i == nbIter || (nbIter == -1 && i%1000 == 0) ); {; t = sofa::helper::system::thread::CTime::getFastTime()-t;; rt = sofa::helper::system::thread::CTime::getRefTime()-rt;. msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)t)/((double)tfreq) << "" s ( "" << (((double)tfreq)*i)/((double)t) << "" FPS)."" << msgendl;; msg_info(""BatchGUI"") << i << "" iterations done in "" << ((double)rt)/((double)rtfreq) << "" s ( "" << (((double)rtfr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087:175,test,tested,175,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-378860087,1,['test'],['tested']
Testability,"You can see an example of regression test results here: https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-830/11/CI_CONFIG=windows7_vs-2015_amd64,CI_PLUGINS=options,CI_TYPE=release/testReport",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440201586:37,test,test,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/830#issuecomment-440201586,2,['test'],"['test', 'testReport']"
Testability,"[0.0, 0.0, -270.0],; 'translation': [100.0, heightInitial, 0.0],; 'ROIBox': [100, heightInitial - 10, -20, 70, heightInitial, 20],; },; {; 'name': 'Finger2',; 'rotation': [360 - angle1 * 180 / math.pi, 0.0, 90.0],; 'translation': [0, heightInitial, radius * math.cos(angle1 - math.pi / 2)],; 'ROIBox': [100, heightInitial - 10, -20, 70, heightInitial, 20],; },; {; 'name': 'Finger3',; 'rotation': [360 - angle2 * 180 / math.pi, 0.0, 90.0],; 'translation': [0.0, heightInitial, radius * math.cos(angle2 - math.pi / 2)],; 'ROIBox': [100, heightInitial - 10, -20, 70, heightInitial, 20],; } ; ]; `. ---------------------------------------------. ### Environment. **Context**. - System: < NAME AND VERSION - e.g: ""Windows 10"", ""Ubuntu 20.04"", ... >; Command: lsb_release -a; Distributor ID:	Ubuntu; Description:	Ubuntu 22.04.4 LTS; Release:	22.04; Codename:	jammy. - Version of SOFA: v24.06.00 built with binaries; - State: Build Directory; - ; **Command called**. ```txt. < COPY-PASTE YOUR COMMAND HERE >; ![Screenshot from 2024-10-12 18-06-10](https://github.com/user-attachments/assets/47a941af-2286-435e-a832-94ccab211570). ```. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. < COPY-PASTE HERE THE RESULT OF THE COMMAND ABOVE >. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. < COPY-PASTE YOUR OUTPUT HERE >. ```. **Content of build_dir/CMakeCache.txt**. < DRAG AND DROP YOUR CMAKECACHE.TXT HERE >. ---------------------------------------------. Thank you for your report.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/5060:8327,Log,Logs,8327,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5060,1,['Log'],['Logs']
Testability,"[All] CLEAN tests, use CMake weak dependencies",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1886:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1886,1,['test'],['tests']
Testability,[All] Convert tests to Sofa.Testing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2188:14,test,tests,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2188,2,"['Test', 'test']","['Testing', 'tests']"
Testability,[All] Fix subplugin regression tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4420:31,test,tests,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4420,1,['test'],['tests']
Testability,"[All] Major clean and debug. Fix all tests, warnings and major speedup",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1976:37,test,tests,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1976,1,['test'],['tests']
Testability,[All] Overridden 'canCreate' methods should always log an error message when they fail,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1294:51,log,log,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1294,1,['log'],['log']
Testability,[All] uniformize epsilons in Sofa framework fix issues 799 #STC7 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1049:318,test,test,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1049,2,['test'],['test']
Testability,"[BeamAdapter](https://github.com/sofa-framework/beamadapter/) shall now be fetchable from SOFA CMake configuration. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2890:655,test,test,655,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2890,2,['test'],['test']
Testability,[Benchmark] Introduce benchmark on matrix assembly,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2208:1,Benchmark,Benchmark,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2208,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark']"
Testability,[CI tests] Do not merge!,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/857:4,test,tests,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/857,1,['test'],['tests']
Testability,"[CI, Scenes] Restore custom parameters for the scene-tests",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3674:53,test,tests,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3674,1,['test'],['tests']
Testability,[CI] ADD log for crashes in testing summary,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/195:9,log,log,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/195,2,"['log', 'test']","['log', 'testing']"
Testability,[CI] ADD output on scene-test crash,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/644:25,test,test,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/644,1,['test'],['test']
Testability,[CI] EDIT: make scene-tests output file smaller,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/555:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555,1,['test'],['tests']
Testability,[CI] FIX Results loss on crashed unit tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/200:38,test,tests,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/200,1,['test'],['tests']
Testability,[CI] FIX scene-test segfault on timeout (Windows),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/379:15,test,test,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/379,1,['test'],['test']
Testability,[CI] Ignore some scenes in scene tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/611:33,test,tests,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/611,1,['test'],['tests']
Testability,[CI] Improve tests script,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/205:13,test,tests,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/205,1,['test'],['tests']
Testability,[CI] Test GitHub Actions,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1225:5,Test,Test,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1225,1,['Test'],['Test']
Testability,[CI] print call stack when a test crashes,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/149:29,test,test,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149,1,['test'],['test']
Testability,[CI] zombie test jobs,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221:12,test,test,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221,1,['test'],['test']
Testability,[CImgPlugin] Fix unit test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2147:22,test,test,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2147,1,['test'],['test']
Testability,[CImgPlugin] Remove the test file output_bw.png and avoid its creation in the source directory,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1320:24,test,test,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1320,1,['test'],['test']
Testability,[CMake] Use cmake_dependent_option for plugin tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1164:46,test,tests,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1164,1,['test'],['tests']
Testability,[CMake][tests] installing gtest headers for separate plugin builds,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/395:8,test,tests,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395,1,['test'],['tests']
Testability,[CentralDifferenceSolver] Benchmark optimized and unoptimized solve,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2149:26,Benchmark,Benchmark,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2149,1,['Benchmark'],['Benchmark']
Testability,[Collision] Optimization: it prevents the normals of the triangles to be recomputed everytime a topological change happens.; The normals of the triangles are computed only once after all the topology changes occur (on the topology::ENDING_EVENT). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/839:498,test,test,498,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/839,2,['test'],['test']
Testability,[Config] POC: enable assertions even in release mode,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4496:21,assert,assertions,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4496,1,['assert'],['assertions']
Testability,[Constraint.Lagrangian.Solver] Fix assert in GenericConstraintSolver,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4389:35,assert,assert,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4389,1,['assert'],['assert']
Testability,[Core] Add topology subset indices test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4738:35,test,test,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4738,1,['test'],['test']
Testability,[Core] Test for nullptr in force field creation,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5075:7,Test,Test,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5075,1,['Test'],['Test']
Testability,[Core] Test json dump on the main object factory,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4818:7,Test,Test,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4818,1,['Test'],['Test']
Testability,"[Engine.Select] Clean, extend and test MeshSubsetEngine",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4958:34,test,test,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4958,1,['test'],['test']
Testability,[FEM.Elastic] Add test of TriangleFEMForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4781:18,test,test,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4781,1,['test'],['test']
Testability,[FEM.Elastic] Fix unit tests warnings,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3545:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3545,1,['test'],['tests']
Testability,[FEM.Elastic] Start unification of tetra FF and division of tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778:60,test,tests,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778,1,['test'],['tests']
Testability,[FEM.Elastic] Test HexahedralFEMForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3968:14,Test,Test,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3968,1,['Test'],['Test']
Testability,[GUI/Tests] Fix compilation with SOFA_NO_OPENGL flag,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1032:5,Test,Tests,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1032,1,['Test'],['Tests']
Testability,[Helper] PluginManager Fix test in debug,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4491:27,test,test,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4491,1,['test'],['test']
Testability,[Helper] PluginManager: testing loading a plugin with a dependency on an other plugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4464:24,test,testing,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4464,1,['test'],['testing']
Testability,[Helper] Reorganize accessors files and add tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3234:44,test,tests,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234,1,['test'],['tests']
Testability,[IDE] Regroup targets related to test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2190:33,test,test,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2190,1,['test'],['test']
Testability,[IO.Mesh.Tests] Reduce number of logs by unactivating printlog,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4148:9,Test,Tests,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4148,2,"['Test', 'log']","['Tests', 'logs']"
Testability,[IO][Tests] Add basic test for the MeshSTLLoader,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2999:5,Test,Tests,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2999,2,"['Test', 'test']","['Tests', 'test']"
Testability,[LinearAlgebra] Add CompressedRowSparseMatrixConstraint tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5037:56,test,tests,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5037,1,['test'],['tests']
Testability,[LinearAlgebra] Fix compilation of assert,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4598:35,assert,assert,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4598,1,['assert'],['assert']
Testability,[LinearAlgebra] Fix matrix unit test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3832:32,test,test,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3832,1,['test'],['test']
Testability,[LinearAlgebra] Unit tests for RotationMatrix,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3585:21,test,tests,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3585,1,['test'],['tests']
Testability,[LinearSolver.Direct] Fix crashing unit tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3512:40,test,tests,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3512,1,['test'],['tests']
Testability,[LinearSolver.Direct] Unit tests around SparseLDLSolver,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3050:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3050,1,['test'],['tests']
Testability,[Logging] Suggestion to better highlight warnings in console,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3914:1,Log,Logging,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3914,1,['Log'],['Logging']
Testability,[Mapping.Linear] Fix assert,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3432:21,assert,assert,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3432,1,['assert'],['assert']
Testability,[Mapping.Linear] Test IdentityMapping,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5094:17,Test,Test,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5094,1,['Test'],['Test']
Testability,[Mapping.NonLinear] Add tests for DistanceMultiMapping,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5077:24,test,tests,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5077,1,['test'],['tests']
Testability,[Mapping.NonLinear] Fix assert in RigidMapping,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3978:24,assert,assert,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3978,1,['assert'],['assert']
Testability,[Mapping/tests] Remove dependency on SceneCreator,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3955:9,test,tests,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955,1,['test'],['tests']
Testability,[Mass] Add unit test to test rotation of inertia matrix for rigid objects,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4935:16,test,test,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4935,2,['test'],['test']
Testability,[MechanicalLoad] Restore addKToMatrix and test SurfacePressureForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3935:42,test,test,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3935,1,['test'],['test']
Testability,"[Modeler] :: warning and print cleaned. deprecated function removed; [Modeler] :: Set modeler cmake ON; ___________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2081487375:640,test,test,640,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2081487375,2,['test'],['test']
Testability,[Modules] bitwise logical operation (&),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2108:18,log,logical,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2108,1,['log'],['logical']
Testability,[MultiThreading] Fix failing test on ParallelImplementationsRegistry,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4392:29,test,test,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4392,1,['test'],['test']
Testability,[MultiThreading] ParallelBruteForceBroadPhase: Fix assertion error,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3574:51,assert,assertion,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3574,1,['assert'],['assertion']
Testability,[MultiThreading] TaskScheduler Interface. Decompose the TaskScheduler in an abstract class and a default implementation.; DefaultTaskScheduler provides a default implementation of the TaskScheduler interface. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/774:460,test,test,460,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/774,2,['test'],['test']
Testability,[MultiThreading] TaskScheduler Interface. Decompose the TaskScheduler in an abstract class and a default implementation.; TaskSchedulerDefault class provides a default implementation of the TaskScheduler interface. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/775:466,test,test,466,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/775,2,['test'],['test']
Testability,[Multithreading] Move TaskScheduler files from MultiThreading plugin to SofaKernel. TaskScheduler Tests included,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/805:98,Test,Tests,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/805,1,['Test'],['Tests']
Testability,"[Plugin list](https://github.com/sofa-framework/sofa/wiki/Supported-SOFA-plugins) is now completed.; Plugins with their own repo:; - [SofaMatrix](https://github.com/sofa-framework/SofaMatrix); - [SofaCarving](https://github.com/sofa-framework/SofaCarving); - [image](https://github.com/sofa-framework/image); - [CImgPlugin](https://github.com/sofa-framework/CImgPlugin); - [DiffusionSolver](https://github.com/sofa-framework/DiffusionSolver); - [ArticulatedSystemPlugin](https://github.com/sofa-framework/ArticulatedSystemPlugin); - [BulletCollisionDetection](https://github.com/sofa-framework/BulletCollisionDetection); - [SofaAssimp](https://github.com/sofa-framework/SofaAssimp); - [SofaHAPI](https://github.com/sofa-framework/SofaHAPI); - [PersistentContact](https://github.com/sofa-framework/PersistentContact); - [SofaNewMat](https://github.com/sofa-framework/SofaNewMat); - [SofaPardisoSolver](https://github.com/sofa-framework/SofaPardisoSolver); - [SofaSimpleGui](https://github.com/sofa-framework/SofaSimpleGui); - [VolumetricRendering](https://github.com/sofa-framework/VolumetricRendering); - [SofaEulerianFluid](https://github.com/sofa-framework/SofaEulerianFluid); - [SofaImplicitField](https://github.com/sofa-framework/SofaImplicitField). Related to #1442 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4589:1813,test,test,1813,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4589,2,['test'],['test']
Testability,[Projective] Fix and test FixedPlaneConstraint,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3925:21,test,test,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3925,1,['test'],['test']
Testability,[Regression] Add HexahedronFEMForceFieldAndMass to regression tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3367:62,test,tests,62,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3367,1,['test'],['tests']
Testability,[Regression] Add regression test with constraints,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3035:28,test,test,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3035,1,['test'],['test']
Testability,[Regression] Test Eigen solvers scenes for regression,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3326:13,Test,Test,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3326,1,['Test'],['Test']
Testability,[Regression] Test linear solvers for regression,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2776:13,Test,Test,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2776,1,['Test'],['Test']
Testability,[Regression_test] Update regression test references for CollisionGroup,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1102:36,test,test,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1102,1,['test'],['test']
Testability,[S.C.Mapping] Fix assertion in BarycentricMapper,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2989:18,assert,assertion,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2989,1,['assert'],['assertion']
Testability,[S.C.Topology.Container.Dynamic] Fix assert error in QuadSetTopologyContainer,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2990:37,assert,assert,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2990,1,['assert'],['assert']
Testability,[SceneChecker] Fix the test that was wrong and thus failing.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/405:23,test,test,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/405,1,['test'],['test']
Testability,[Simulation.Core] Fix assert due to #4776,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4792:22,assert,assert,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4792,1,['assert'],['assert']
Testability,[Simulation] Tests: introduce multiple parallel simulations,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4580:13,Test,Tests,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4580,1,['Test'],['Tests']
Testability,[Sofa.Component.ODESolver] Gather tests + create Sofa.Component.ODESolver.Testing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2650:34,test,tests,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2650,2,"['Test', 'test']","['Testing', 'tests']"
Testability,[Sofa.Component.ODESolver] Rewrite tests without SceneCreator,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2733:35,test,tests,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2733,1,['test'],['tests']
Testability,[Sofa.Component] Remove empty test projects and move/clean tests from SofaBoundaryCondition,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2991:30,test,test,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2991,2,['test'],"['test', 'tests']"
Testability,[Sofa.Helper] More tests for NameDecoder + fix them,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2380:19,test,tests,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2380,1,['test'],['tests']
Testability,[Sofa.LinearAlgebra] Fix assert in CompressedRowSparseMatrix,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2347:25,assert,assert,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2347,1,['assert'],['assert']
Testability,[Sofa.LinearAlgebra] Gather tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2383:28,test,tests,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2383,1,['test'],['tests']
Testability,[Sofa.LinearAlgebra] Test CRS product compared to Eigen,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2839:21,Test,Test,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2839,1,['Test'],['Test']
Testability,[Sofa.Testing] Add SimpleApi in Config.cmake.in,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4542:6,Test,Testing,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4542,1,['Test'],['Testing']
Testability,[Sofa.Testing] Do not build Sofa.Testing if SOFA_BUILD_TESTS is OFF,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4459:6,Test,Testing,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4459,2,['Test'],['Testing']
Testability,[Sofa.Testing][SofaGeneralEngine] Dispatch engine tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2692:6,Test,Testing,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"[Sofa.Type, Sofa.Topology] Fix testEdgeBuffer with clang (and add constexpr default constructors)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2357:31,test,testEdgeBuffer,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2357,1,['test'],['testEdgeBuffer']
Testability,[Sofa.Type] Check return value + add more tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2343:42,test,tests,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2343,1,['test'],['tests']
Testability,"[Sofa.Type] Fix cmake typo, which was disabling tests",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3129:48,test,tests,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3129,1,['test'],['tests']
Testability,[Sofa.framework] Compile and run tests when SReal is float,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3628:33,test,tests,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3628,1,['test'],['tests']
Testability,[SofaBaseCollision] Fix pipeline warning test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2132:41,test,test,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2132,1,['test'],['test']
Testability,[SofaBaseLinearSolver] Fix logging info with SPARSEMATRIX_VERBOSE,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1715:27,log,logging,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1715,1,['log'],['logging']
Testability,[SofaBaseMechanics] Restore tests commented by mistake,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2104:28,test,tests,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2104,1,['test'],['tests']
Testability,[SofaBaseMechanics_test] Add TopologicalChanges unit tests for DiagonalMass,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2176:53,test,tests,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2176,1,['test'],['tests']
Testability,[SofaBaseMechanics_test] Update tests to use Sofa.Testing instead of Sofa_Test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2144:32,test,tests,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2144,2,"['Test', 'test']","['Testing', 'tests']"
Testability,[SofaBaseTopology Test] Add battery of tests on topology containers,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/708:18,Test,Test,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708,2,"['Test', 'test']","['Test', 'tests']"
Testability,[SofaBaseTopology] Clean Topology logs and add AdvanceTimer logs,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/874:34,log,logs,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/874,2,['log'],['logs']
Testability,[SofaBaseTopology] Fix SparseGrid obj loading + tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1231:48,test,tests,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1231,1,['test'],['tests']
Testability,[SofaBaseTopology] correct the logic issue in computeEdgeSegmentIntersection,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2184:31,log,logic,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2184,1,['log'],['logic']
Testability,[SofaBaseTopology][SofaExporter] Fix failing tests due to changes in topology,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1335:45,test,tests,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1335,1,['test'],['tests']
Testability,[SofaBaseVisual] Fix assert,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2417:21,assert,assert,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2417,1,['assert'],['assert']
Testability,[SofaBase] Convert tests to Sofa.Testing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2146:19,test,tests,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2146,2,"['Test', 'test']","['Testing', 'tests']"
Testability,[SofaBoundaryCondition_test] Add TopologicalChanges unit test for FixedConstraint,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2136:57,test,test,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2136,1,['test'],['test']
Testability,[SofaCUDA] Add benchmark scenes to check CudaMeshSpringForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2556:15,benchmark,benchmark,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2556,1,['benchmark'],['benchmark']
Testability,[SofaCUDA] Add benchmarks logs in .csv file,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2588:15,benchmark,benchmarks,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2588,2,"['benchmark', 'log']","['benchmarks', 'logs']"
Testability,[SofaCUDA] Rework and move benchmark scenes for HexahedronFEMForceField and TetrahedronFEMForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2561:27,benchmark,benchmark,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2561,1,['benchmark'],['benchmark']
Testability,[SofaCUDA] update .scene-tests files to fix tests on dashboard,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2616:25,test,tests,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2616,2,['test'],['tests']
Testability,[SofaCarving] Update and add more tests in SofaCarving_test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3407:34,test,tests,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3407,1,['test'],['tests']
Testability,[SofaCommon] Convert tests to Sofa.Testing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2153:21,test,tests,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2153,2,"['Test', 'test']","['Testing', 'tests']"
Testability,[SofaConstraint] Fix test further to #1369,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1386:21,test,test,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1386,1,['test'],['test']
Testability,[SofaCore] Collision visitor primitive tests count,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/930:39,test,tests,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/930,1,['test'],['tests']
Testability,[SofaCore] Remove assert in case of multiple init,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2822:18,assert,assert,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2822,1,['assert'],['assert']
Testability,[SofaCore] Remove unwanted logs in TopologyHandler.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2401:27,log,logs,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2401,1,['log'],['logs']
Testability,[SofaCore_simutest] Add tests for Link::CheckPath,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1714:24,test,tests,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1714,1,['test'],['tests']
Testability,[SofaCore_simutest] Fix getobjects and testcomponentstate unit tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2326:39,test,testcomponentstate,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2326,2,['test'],"['testcomponentstate', 'tests']"
Testability,[SofaCore_test] Add tests for SingleLink & MultiLink,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1697:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1697,1,['test'],['tests']
Testability,[SofaCore_test] Minor clean of few unit tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2573:40,test,tests,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2573,1,['test'],['tests']
Testability,[SofaCore_test] Update the two failling tests so they match the new convention for TypeInfo,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1709:40,test,tests,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1709,1,['test'],['tests']
Testability,[SofaDefaultType] Introduce test interface for BaseMatrix,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2280:28,test,test,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2280,1,['test'],['test']
Testability,[SofaDeformable] Fix test in StiffSpringForceField doUpdateInternal,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1979:21,test,test,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1979,1,['test'],['test']
Testability,[SofaDenseSolver] Introduce NewMat unit tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2311:40,test,tests,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2311,1,['test'],['tests']
Testability,[SofaDistanceGrid] ADD .scene-tests to ignore scene,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/594:30,test,tests,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/594,1,['test'],['tests']
Testability,[SofaEigen2Solver] Fix cmake test on the version of Eigen,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1416:29,test,test,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1416,1,['test'],['test']
Testability,[SofaEngine] Fix engine unit tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1280:29,test,tests,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1280,1,['test'],['tests']
Testability,[SofaExporter] ADD in WriteState all required tests on data and clean export with msg API,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/714:46,test,tests,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/714,1,['test'],['tests']
Testability,[SofaExporter] Clean & test the exporter,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372:23,test,test,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372,1,['test'],['test']
Testability,[SofaFramework/Sofa.Testing] remove macro and move testing resources from SofaFramework,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2000:20,Test,Testing,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2000,2,"['Test', 'test']","['Testing', 'testing']"
Testability,"[SofaFramework] Add tests on aliases for ""multiple projects"" out-of-tree build",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2566:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2566,1,['test'],['tests']
Testability,[SofaFramework] Create Sofa.Testing module,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1834:28,Test,Testing,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1834,1,['Test'],['Testing']
Testability,[SofaGeneralDeformable] Clean class TriangularBendingSpring and add tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2363:68,test,tests,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2363,1,['test'],['tests']
Testability,[SofaGeneralEngine] FIX disabled tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/675:33,test,tests,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/675,1,['test'],['tests']
Testability,[SofaGeneralEngine] add test and minor cleaning for IndexValueMapper,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/319:24,test,test,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/319,1,['test'],['test']
Testability,[SofaGeneralSimpleFem] Add comments and tests for TriangularFEMForceFieldOptim,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2284:40,test,tests,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2284,1,['test'],['tests']
Testability,[SofaGeneralSimpleFem] Update BeamFEMForceField topologyHander and add tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2382:71,test,tests,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2382,1,['test'],['tests']
Testability,[SofaGraphComponent] FIX SceneChecker_test + ADD alias test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/711:55,test,test,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/711,1,['test'],['test']
Testability,[SofaGraphComponent] Refactor the SceneChecker and add a new SceneChecker to test dumplicated names.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/392:77,test,test,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/392,1,['test'],['test']
Testability,[SofaHaptics] Add multithread test on LCPForceFeedback component,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1581:30,test,test,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1581,1,['test'],['test']
Testability,[SofaHaptics] Add simple tests on LCPForceFeedback component,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1576:25,test,tests,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1576,2,['test'],['tests']
Testability,[SofaHelper/image] Fix unit tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1585:28,test,tests,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1585,1,['test'],['tests']
Testability,[SofaHelper] EDIT FileSystem and FileRepository for regression tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/830:63,test,tests,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/830,1,['test'],['tests']
Testability,[SofaHelper] Fix AdvandedTimer test with end(),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1781:31,test,test,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1781,1,['test'],['test']
Testability,[SofaHelper] More robust method to test end of string,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617:35,test,test,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617,1,['test'],['test']
Testability,[SofaKernel] ADD RotatableBoxROI object and test for it,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560:44,test,test,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560,1,['test'],['test']
Testability,[SofaKernel] Add tests on PluginManager,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/240:17,test,tests,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/240,1,['test'],['tests']
Testability,[SofaKernel] Change several AdvancedTimer logs for a better tracking,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1094:42,log,logs,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1094,1,['log'],['logs']
Testability,[SofaKernel] Disable identified failing tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2290:40,test,tests,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2290,1,['test'],['tests']
Testability,[SofaKernel] FIX operator>> in Mat.h and add corresponding test.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/993:59,test,test,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/993,1,['test'],['test']
Testability,[SofaKernel] Fix getRelativePath() in DataFileName + add tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/250:57,test,tests,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250,1,['test'],['tests']
Testability,[SofaKernel] Fix some AdvanceTimer log missing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1158:35,log,log,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1158,1,['log'],['log']
Testability,[SofaKernel] Fix two failing tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/92:29,test,tests,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92,1,['test'],['tests']
Testability,[SofaKernel] re-open PR #330 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/332:282,test,test,282,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332,2,['test'],['test']
Testability,[SofaMiscFEM_test] Add class to test and compare TriangleFEM and TriangularFEMForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2249:32,test,test,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2249,1,['test'],['test']
Testability,[SofaMiscForceField] Clean MeshMatrixMass_test and add more tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2191:60,test,tests,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2191,1,['test'],['tests']
Testability,[SofaMiscForceField] Fix type conversion in tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2714:44,test,tests,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2714,1,['test'],['tests']
Testability,[SofaMiscForceField_test] Add TopologicalChanges unit tests for MeshMatrixMass,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2215:54,test,tests,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2215,1,['test'],['tests']
Testability,[SofaMiscTopology_test] Replace inheritence of SofaTest by BaseSimulation_test and fix test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1909:87,test,test,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1909,1,['test'],['test']
Testability,[SofaNG] Re-organize unit tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2873:26,test,tests,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2873,1,['test'],['tests']
Testability,"[SofaSimpleFEM_test] Add tests on Tetrahedron, CorotationalTetrahedral and FastTetrahedral FEM ForceField",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2842:25,test,tests,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2842,1,['test'],['tests']
Testability,[SofaSimpleFem] ADD computeBBox and test to HexaFEMForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/289:36,test,test,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/289,1,['test'],['test']
Testability,[SofaSimpleFem] Add regression tests for tetra FEM assembled and plasticity,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2540:31,test,tests,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2540,1,['test'],['tests']
Testability,[SofaSimulation/Tests] Fix init/cleanup in SofaSimulation modules,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1987:16,Test,Tests,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1987,1,['Test'],['Tests']
Testability,[SofaSimulationGraph] Restore tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1988:30,test,tests,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1988,1,['test'],['tests']
Testability,[SofaSimulation] Convert tests to Sofa.Testing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2154:25,test,tests,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2154,2,"['Test', 'test']","['Testing', 'tests']"
Testability,[SofaSphFluid] FIX .scene-tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1317:26,test,tests,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1317,1,['test'],['tests']
Testability,[SofaTest] ADD a PrintTo method so test failure shows human readable informations.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/730:35,test,test,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/730,1,['test'],['test']
Testability,[SofaTest] Add Backtrace::autodump to all tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/191:42,test,tests,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191,1,['test'],['tests']
Testability,[SofaTest] Move last tests to Sofa.Component,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2996:21,test,tests,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2996,1,['test'],['tests']
Testability,[SofaTest] adding automatic tests for updateForceMask,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/209:28,test,tests,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/209,1,['test'],['tests']
Testability,[SofaTest] replace TestMessageHandler by ExpectMessage,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/96:19,Test,TestMessageHandler,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/96,1,['Test'],['TestMessageHandler']
Testability,[SofaValidation] ADD Monitor test (API BREAK),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/312:29,test,test,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312,1,['test'],['test']
Testability,[Solver.Direct] Unit test on topological changes leading to empty system,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3501:21,test,test,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3501,1,['test'],['test']
Testability,[Solver.Direct] Unit tests on empty system,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3500:21,test,tests,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3500,1,['test'],['tests']
Testability,[Test] Add generic test on buildGeometricStiffnessMatrix for mappings,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4897:1,Test,Test,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4897,2,"['Test', 'test']","['Test', 'test']"
Testability,[Test] Refactor Mapping_test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5079:1,Test,Test,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5079,1,['Test'],['Test']
Testability,[Test] Remove the output of a test from file versioning,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3285:1,Test,Test,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3285,2,"['Test', 'test']","['Test', 'test']"
Testability,"[Test] new tests to LocalMinDistance, Light, LightManager, all Component",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/89:1,Test,Test,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/89,2,"['Test', 'test']","['Test', 'tests']"
Testability,[Testing] Deprecate BaseSimulationTest::importPlugin,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4467:1,Test,Testing,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4467,1,['Test'],['Testing']
Testability,[Testing] Externalize (find_package() or fetch) googletest/gtest,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471:1,Test,Testing,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471,1,['Test'],['Testing']
Testability,[Testing] Fix CMake config after removal of compat,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3694:1,Test,Testing,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3694,1,['Test'],['Testing']
Testability,[Testing] Fix installation of gtest headers,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4489:1,Test,Testing,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4489,1,['Test'],['Testing']
Testability,[Tests] Move tests in their (new) correct locations,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1998:1,Test,Tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1998,2,"['Test', 'test']","['Tests', 'tests']"
Testability,[Tests] Properly remove exported files,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3942:1,Test,Tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3942,1,['Test'],['Tests']
Testability,[Tests] Replace sofa::helper::testing by sofa::testing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2143:1,Test,Tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2143,3,"['Test', 'test']","['Tests', 'testing']"
Testability,[Tests] S.Components tests compiles with SReal=float,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3755:1,Test,Tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3755,2,"['Test', 'test']","['Tests', 'tests']"
Testability,[Tests] Update SceneCreator_test to inherit from BaseSimulationTest and remove some warnings,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2406:1,Test,Tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2406,1,['Test'],['Tests']
Testability,[Tests] Update required plugins in tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3542:1,Test,Tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3542,2,"['Test', 'test']","['Tests', 'tests']"
Testability,[Tests] Update tests to new modules,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3406:1,Test,Tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3406,2,"['Test', 'test']","['Tests', 'tests']"
Testability,[Topology Test][Mass] Fix some recent compilation warnings,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/726:10,Test,Test,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/726,1,['Test'],['Test']
Testability,[Topology] Logic issue in computeEdgeSegmentIntersection,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2182:11,Log,Logic,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2182,1,['Log'],['Logic']
Testability,[Topology_test] Add tests in EdgeSetTopology_test to check topological changes,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3245:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3245,1,['test'],['tests']
Testability,[Type] Clean and test MatSym,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4600:17,test,test,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4600,1,['test'],['test']
Testability,[Type] Remove test of a deprecated constructor,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4391:14,test,test,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4391,1,['test'],['test']
Testability,[Void] Test regression PR #68,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4942:7,Test,Test,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4942,1,['Test'],['Test']
Testability,[WIP]; - I try to figure out how to fix the issue : https://github.com/sofa-framework/sofa/issues/561. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/564:354,test,test,354,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/564,2,['test'],['test']
Testability,[all] Add a WarningAndErrorAsTestFailure in most of the tests.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:56,test,tests,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['test'],['tests']
Testability,[all] Fix the cause of failling test scenes (for a greener dashboard),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548:32,test,test,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548,1,['test'],['test']
Testability,[all] Improve msg_api and logging of message,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190:26,log,logging,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190,1,['log'],['logging']
Testability,[all] Quick test for unity-build,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1964:12,test,test,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1964,1,['test'],['test']
Testability,[all] Test on using clang-tidy with modernize-loop,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/885:6,Test,Test,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/885,1,['Test'],['Test']
Testability,[all] Unit tests for getTemplateName in some components,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3380:11,test,tests,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3380,1,['test'],['tests']
Testability,[c-i-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4301#issuecomment-1822404641:21,test,tests,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4301#issuecomment-1822404641,1,['test'],['tests']
Testability,[ci-build] (scene tests not needed),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/711#issuecomment-404511905:18,test,tests,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/711#issuecomment-404511905,1,['test'],['tests']
Testability,[ci-build] (testing future CI),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/684#issuecomment-396923972:12,test,testing,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/684#issuecomment-396923972,1,['test'],['testing']
Testability,[ci-build] (testing),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/540#issuecomment-353380059:12,test,testing,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-353380059,1,['test'],['testing']
Testability,[ci-build] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-338577782:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-338577782,9,['test'],['tests']
Testability,[ci-build] [with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/756#issuecomment-447792966:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756#issuecomment-447792966,20,['test'],['tests']
Testability,[ci-build] [with-scene-tests] 😉,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/467#issuecomment-335848261:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/467#issuecomment-335848261,1,['test'],['tests']
Testability,[ci-build]. All build & tests are passing... so let's merge it .,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/367#issuecomment-326678771:24,test,tests,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/367#issuecomment-326678771,1,['test'],['tests']
Testability,[ci-build]. just testing if the problem is due to the lib. ; Will rebase if not.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405420789:17,test,testing,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/719#issuecomment-405420789,1,['test'],['testing']
Testability,[ci-build][[with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446007608:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/853#issuecomment-446007608,2,['test'],['tests']
Testability,[ci-build][ci-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1730#issuecomment-767429850:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1730#issuecomment-767429850,2,['test'],['tests']
Testability,[ci-build][ci-with-scene-tests][ci-with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1706#issuecomment-759269268:25,test,tests,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1706#issuecomment-759269268,2,['test'],['tests']
Testability,[ci-build][force-full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1160#issuecomment-541583797:38,test,tests,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1160#issuecomment-541583797,151,['test'],['tests']
Testability,[ci-build][force-full-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1167#issuecomment-539904483:45,test,tests,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1167#issuecomment-539904483,2,['test'],['tests']
Testability,[ci-build][full-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432518934:32,test,tests,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432518934,7,['test'],['tests']
Testability,[ci-build][with-all-test],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1375#issuecomment-626130173:20,test,test,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1375#issuecomment-626130173,1,['test'],['test']
Testability,[ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-692074894:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-692074894,1793,['test'],['tests']
Testability,[ci-build][with-all-tests] (check for MacOS),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1613074434:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959#issuecomment-1613074434,1,['test'],['tests']
Testability,[ci-build][with-all-tests] . (testing the reactivation of the regression tests on windows),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4486#issuecomment-1941501863:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4486#issuecomment-1941501863,3,['test'],"['testing', 'tests']"
Testability,[ci-build][with-all-tests] just to be sure :angel:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3227#issuecomment-1219270111:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3227#issuecomment-1219270111,1,['test'],['tests']
Testability,[ci-build][with-all-tests] to check further to #3672,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3665#issuecomment-1445357212:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3665#issuecomment-1445357212,1,['test'],['tests']
Testability,"[ci-build][with-all-tests]. > Don't you think that moving `errF` and `tempF` out of the loop is enough? I would test to only resize them in the loop. The underlying memory allocation should not happen a lot. My suggestion is because I think it is simpler to understand compared to the buffer implementation. I will try that 👍. > ; > In any case, I think the condition `if (nb > bufferSize)` is not necessary. Thats what I was thinking but not sure 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460,4,['test'],"['test', 'tests']"
Testability,[ci-build][with-all-tests]. I do not understand the issue with the tests failing ...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2098#issuecomment-851027994:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2098#issuecomment-851027994,2,['test'],['tests']
Testability,[ci-build][with-all-tests]. let's wait the CI and then merge,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2901#issuecomment-1131311858:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2901#issuecomment-1131311858,1,['test'],['tests']
Testability,[ci-build][with-all-tests]. yes all green :muscle: :green_circle:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3891#issuecomment-1563454307:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3891#issuecomment-1563454307,1,['test'],['tests']
Testability,"[ci-build][with-all-tests]; Fine to me. Let's see the CI tests, then ready.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1404#issuecomment-640468518:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1404#issuecomment-640468518,2,['test'],['tests']
Testability,[ci-build][with-all-tests]; Good night and work well CI :crescent_moon:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1883#issuecomment-789239755:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1883#issuecomment-789239755,1,['test'],['tests']
Testability,"[ci-build][with-all-tests]; I am pretty sure Erik meant a c++ alias, isn't it @epernod ? Aliases for scenes is already done; Do you have an example of how to proceed?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-491609275:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1034#issuecomment-491609275,1,['test'],['tests']
Testability,[ci-build][with-all-tests]; Then ready if it passes,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1377#issuecomment-627940072:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1377#issuecomment-627940072,1,['test'],['tests']
Testability,[ci-build][with-all-tests]; To test your scene 😗,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2092#issuecomment-842927758:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2092#issuecomment-842927758,2,['test'],"['test', 'tests']"
Testability,[ci-build][with-all-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534#issuecomment-673316535:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534#issuecomment-673316535,187,['test'],['tests']
Testability,[ci-build][with-all-tests][force-full-build] to check further to #3672,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3668#issuecomment-1445357324:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3668#issuecomment-1445357324,1,['test'],['tests']
Testability,[ci-build][with-all-tests][force-full-build] to check further to https://github.com/sofa-framework/sofa/pull/3672,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3664#issuecomment-1445357553:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3664#issuecomment-1445357553,3,['test'],['tests']
Testability,[ci-build][with-all-tests][generate-binaries],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2875#issuecomment-1115035060:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2875#issuecomment-1115035060,2,['test'],['tests']
Testability,[ci-build][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1060#issuecomment-498606513:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1060#issuecomment-498606513,1,['test'],['tests']
Testability,[ci-build][with-regression-tests] :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/756#issuecomment-442401931:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/756#issuecomment-442401931,1,['test'],['tests']
Testability,[ci-build][with-regression-tests] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/949#issuecomment-467602254:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/949#issuecomment-467602254,2,['test'],['tests']
Testability,[ci-build][with-regression-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/838#issuecomment-442785687:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/838#issuecomment-442785687,44,['test'],['tests']
Testability,[ci-build][with-scene-test][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1490#issuecomment-700493158:22,test,test,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1490#issuecomment-700493158,2,['test'],"['test', 'tests']"
Testability,[ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-341650499:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-341650499,294,['test'],['tests']
Testability,[ci-build][with-scene-tests] (please CI don't die on me),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359381125:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/554#issuecomment-359381125,1,['test'],['tests']
Testability,[ci-build][with-scene-tests] ; [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1704#issuecomment-759269625:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1704#issuecomment-759269625,2,['test'],['tests']
Testability,[ci-build][with-scene-tests] [with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-604700221:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-604700221,2,['test'],['tests']
Testability,[ci-build][with-scene-tests] do you really work ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/540#issuecomment-353569482:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/540#issuecomment-353569482,1,['test'],['tests']
Testability,"[ci-build][with-scene-tests]. As discussed, I removed the useless parentheses! Can be merged after the build passes (and it will !)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/584#issuecomment-364923879:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/584#issuecomment-364923879,1,['test'],['tests']
Testability,[ci-build][with-scene-tests]; ; Comme ça.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/527#issuecomment-354966914:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/527#issuecomment-354966914,1,['test'],['tests']
Testability,[ci-build][with-scene-tests]; Regression needs to be updated. . PR to update Regression is: https://github.com/sofa-framework/regression/pull/6,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-780168810:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-780168810,1,['test'],['tests']
Testability,[ci-build][with-scene-tests][ci-reformat],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/527#issuecomment-355926106:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/527#issuecomment-355926106,2,['test'],['tests']
Testability,[ci-build][with-scene-tests][force-full-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282981929:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282981929,8,['test'],['tests']
Testability,"[ci-build][with-scene-tests][force-full-build]. The result of the test show that the scene `advanced_timer.py` is not taken from the PR https://github.com/sofa-framework/SofaPython3/pull/309, but from master.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282349471:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402#issuecomment-1282349471,2,['test'],"['test', 'tests']"
Testability,[ci-build][with-scene-tests][with-regression-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453814208:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453814208,116,['test'],['tests']
Testability,[ci-build][with-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3934#issuecomment-1594841162:16,test,tests,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3934#issuecomment-1594841162,1,['test'],['tests']
Testability,[ci-build][with-tests][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1744#issuecomment-799487090:16,test,tests,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1744#issuecomment-799487090,6,['test'],['tests']
Testability,"[ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/106]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4651:616,test,test,616,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4651,2,['test'],['test']
Testability,"[ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/145]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5070:616,test,test,616,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5070,2,['test'],['test']
Testability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/22]. - One existing scene is added to the list of regression tests (`Components/forcefield/TetrahedronFEMForceField_plasticity.scn`); - One scene is introduced (`Components/forcefield/TetrahedronFEMForceField_assemble.scn`) so it is also added to the regression tests. The scene is the same than `Components/forcefield/TetrahedronFEMForceField.scn` except that the data `computeGlobalMatrix` from `TetrahedronFEMForceField` is set to `true`. Only methods `large` and `small` are introduced. The others don't support `computeGlobalMatrix=true`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2540:126,test,tests,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2540,4,['test'],"['test', 'tests']"
Testability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/26]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3035:609,test,test,609,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3035,2,['test'],['test']
Testability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/35]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3326:609,test,test,609,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3326,2,['test'],['test']
Testability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/37]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3367:609,test,test,609,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3367,2,['test'],['test']
Testability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/41]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3757:609,test,test,609,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3757,2,['test'],['test']
Testability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/43]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3756:609,test,test,609,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3756,2,['test'],['test']
Testability,"[ci-depends-on https://github.com/sofa-framework/Regression/pull/56]; [ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/125]. This PR is based on [PR #56](https://github.com/sofa-framework/Regression/pull/56) of Regression. . This PR fixes the problem of running regression tests in plugins when their references are inside of the plugin and not Regression (e.g. BeamAdapter). The idea is to have a stand alone `*.regression.tests` file that also includes the relative path of the reference folder. This is meant to be placed at the top of the reference file in a relative manne. This allows two things : ; 1. Having a stand alone file ease the process of finding the reference folder for any new comer; 2. Having a stand alone file ease the process of automatizing the retrieval of new regression test along with their reference folder without the need of modifying anything in the CI script. . Tested on my side : only two remaining regression test failing from SofaSPH. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4420:290,test,tests,290,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4420,7,"['Test', 'test']","['Tested', 'test', 'tests']"
Testability,"[ci-depends-on https://github.com/sofa-framework/ShapeMatchingPlugin/pull/1]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4106:617,test,test,617,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4106,2,['test'],['test']
Testability,"[ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/309]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3402:611,test,test,611,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3402,2,['test'],['test']
Testability,[ci-test][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4732#issuecomment-2112605654:4,test,test,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4732#issuecomment-2112605654,2,['test'],"['test', 'tests']"
Testability,[ci]-build][with-scene-tests][with-regressions],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1902#issuecomment-794637886:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1902#issuecomment-794637886,1,['test'],['tests']
Testability,[constraint] Update PrecomputedConstraintCorrection logs when loading compliance file,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4026:52,log,logs,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4026,1,['log'],['logs']
Testability,[examples] Benchmark the effects of DefaultCollisionGroupManager,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2089:11,Benchmark,Benchmark,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089,1,['Benchmark'],['Benchmark']
Testability,[examples] FIX duplicated scene in regression-tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2251:46,test,tests,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2251,1,['test'],['tests']
Testability,[examples] FIX duplicated scene in regression-tests (2),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2252:46,test,tests,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2252,1,['test'],['tests']
Testability,[examples] Fix or disable scene tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1919:32,test,tests,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1919,1,['test'],['tests']
Testability,[examples] Introduce example and tests for SquareMapping,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3768:33,test,tests,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3768,1,['test'],['tests']
Testability,[extlibs/gtest] Add character test in gtest paramName to allow dash character,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1265:30,test,test,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1265,1,['test'],['test']
Testability,[force-full-build][ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3329#issuecomment-1299807808:38,test,tests,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3329#issuecomment-1299807808,4,['test'],['tests']
Testability,"[image, FEM, LinearSolver] fix Eigen3 assertion with SVD",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3452:38,assert,assertion,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3452,1,['assert'],['assertion']
Testability,[image] Fix scene test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4517:18,test,test,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4517,1,['test'],['test']
Testability,[logging] Compatibility between msg API and sout,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1628:1,log,logging,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1628,1,['log'],['logging']
Testability,[regression] Update regression test to compare only last iteration position,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1051:31,test,test,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1051,1,['test'],['test']
Testability,[scenes] Add scenes to test several components during mesh removal,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2161:23,test,test,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2161,1,['test'],['test']
Testability,[test] Fix failing unit test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3876:1,test,test,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3876,2,['test'],['test']
Testability,[test] Fix mutiple component init calls in several tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3447:1,test,test,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3447,2,['test'],"['test', 'tests']"
Testability,[test] Fix unit test on RestShapeSpringsForceField,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3864:1,test,test,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3864,2,['test'],['test']
Testability,[test] Introduce failing test on quaternions,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4122:1,test,test,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122,2,['test'],['test']
Testability,[test] Make quaternion test deterministic and portable,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4126:1,test,test,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4126,2,['test'],['test']
Testability,[tests] Adapt code to any Eigen version,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4724:1,test,tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4724,1,['test'],['tests']
Testability,[tests] Fix and test value type string of topology primitives,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4732:1,test,tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4732,2,['test'],"['test', 'tests']"
Testability,[tests] Fix remove SofaComponentAll plugin which doesn't exist anymore,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3266:1,test,tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3266,1,['test'],['tests']
Testability,[tests] Restore commented unit tests,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3982:1,test,tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3982,2,['test'],['tests']
Testability,[tests] Update code base to use the new gtest macro and avoid depecations warnings.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1726:1,test,tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1726,1,['test'],['tests']
Testability,[tests] Use appropriate gtest macro,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4607:1,test,tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4607,1,['test'],['tests']
Testability,"[tests] Fix several failling tests for a ""close to green"" dashboard",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271:1,test,tests,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271,2,['test'],['tests']
Testability,[tools] CLEAN logs for macos-postinstall-fixup,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2120:14,log,logs,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2120,1,['log'],['logs']
Testability,[with-regression-tests] [with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1149#issuecomment-533241683:17,test,tests,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1149#issuecomment-533241683,2,['test'],['tests']
Testability,[with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1064#issuecomment-575320727:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1064#issuecomment-575320727,1,['test'],['tests']
Testability,\Components\solver\EulerExplicitSolver\EulerExplicitSolver.scn; examples\Components\solver\EulerExplicitSolver\EulerSymplecticSolver.scn; examples\Components\solver\NewmarkImplicitSolver.scn. [INFO] [PluginFinder] Found 9 files with deprecated:; examples\Components\interactionforcefield\BoxStiffSpringForceField.scn; examples\Components\linearsolver\FEMBAR_AsyncSparseLDLSolver.scn; examples\Components\misc\sleep\test_sleep.scn; examples\Components\misc\sleep\test_sleep2.scn; examples\Components\misc\sleep\test_sleep3.scn; examples\Components\visualmodel\OglLabel.scn; examples\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPointConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularBendingSprings_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularFEMForceField_RemovingMeshTest.scn; examples\Components\constraint\AffineMovementConstraint.scn; examples\Components\constraint\AffineMovementConstraint3D.s,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:1325,Benchmark,Benchmark,1325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,\sleep\test_sleep.scn; examples\Components\misc\sleep\test_sleep2.scn; examples\Components\misc\sleep\test_sleep3.scn; examples\Components\visualmodel\OglLabel.scn; examples\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPointConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularBendingSprings_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularFEMForceField_RemovingMeshTest.scn; examples\Components\constraint\AffineMovementConstraint.scn; examples\Components\constraint\AffineMovementConstraint3D.scn; examples\Components\constraint\AttachConstraintMatrix.scn; examples\Components\constraint\BilateralInteractionConstraint_PGS.scn; examples\Components\constraint\BilinearConstraint.scn; examples\Components\constraint\BilinearConstraint3D.scn; examples\Components\constraint\HermiteSplineConstraint.scn; examples\Components\constraint\NonBuiltConstraintCorrection.scn; examples\Components\constraint\PatchTe,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:1727,Benchmark,Benchmark,1727,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,"] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] 3730 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] 3730 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] 7696 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] 7696 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] 7696 input positions, 3966 final vertices.; [INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] 3730 input positions, 3966 final vertices.; ```; Which indicates tthat the same loader is loading the file multiple times. With the PR it now gives:; ```; INFO] [MeshObjLoader(visual_snake_body)] Loading OBJ file: mesh/snake_body.obj; [INFO] [MeshObjLoader(visual_snake_body)] 3730 input positions, 3966 final vertices.; ```. Depends on PR #2200 ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2201:2073,test,test,2073,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2201,2,['test'],['test']
Testability,"_____________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4525:530,test,test,530,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4525,2,['test'],['test']
Testability,"______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3344:539,test,test,539,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3344,562,['test'],['test']
Testability,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/340:251,test,test,251,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/340,86,['test'],['test']
Testability,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] do generate LESS warnings.; - [x] do generate LESS unit test failures.; - [x] do generate LESS scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548:241,test,test,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548,2,['test'],['test']
Testability,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/207:225,test,test,225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/207,1,['test'],['test']
Testability,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/826:251,test,test,251,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/826,2,['test'],['test']
Testability,______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399:251,test,test,251,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399,12,['test'],['test']
Testability,"__set_python_directory__ was writing a ""hard-coded"" _CMAKE_CURRENT_SOURCE_DIR/python_ path in _etc/sofa/python.d/_ instead of the provided path. ; So if your python code was located in, say, _<plugin_dir>/src/python_ instead of _<plugin_dir>/python_ the macro would write an invalid path. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/763:540,test,test,540,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/763,2,['test'],['test']
Testability,"_bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 20",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3335,test,tests,3335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Globa,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3182,test,tests,3182,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"` EIGEN3_VERSION` needed a `find_package` on Eigen before being used.; `target_link_libraries(${PROJECT_NAME} PUBLIC OpenMP::OpenMP_CXX)` is called twice, and the first time it's too early because the target is not defined yet. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2669:767,test,test,767,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2669,2,['test'],['test']
Testability,"` is a new type that can replace `OptionsGroup` in some cases. The idea is the same: a list of keys + a selection of a key among the list. In `OptionsGroup`, everything is dynamic, whereas `SelectableItem` is designed to be static. Disadvantages of `OptionsGroup`:. ```cpp; OptionsGroup foo{{""optionA"", ""optionB""}};; foo.setSelectedItem(12); //out of bounds; foo.setSelectedItem(""optionC""); //this key does not exist. if (foo.getSelectedId() == 0) // 0 has no meaning here. We don't know what 0; // refers to. In addition, the order of the options can change; {; ; }; ```. In `SelectableItem`:. - The list of items is included in the type and cannot change:. ```cpp; struct TestSelectableItem final : sofa::helper::SelectableItem<TestSelectableItem>; {; static constexpr std::array s_items {; sofa::helper::Item{""small"", ""small displacements""},; sofa::helper::Item{""large"", ""large displacements""},; };; };; ```. The consequences:. - Constant number of items: . ```cpp; static constexpr auto size = TestSelectableItem::numberOfItems();; ```. - List of keys is static:. ```cpp; static const auto& allKeys = TestSelectableItem::allKeysAsString();; ```. - Constructor can be `constexpr`:. ```cpp; static constexpr TestSelectableItem foo(""large"");; ```. It allows to use the type in a `constexpr` context. For example:. ```cpp; switch ( d_resolutionMethod.getValue() ); {; case ResolutionMethod(""ProjectedGaussSeidel""):; case ResolutionMethod(""NonsmoothNonlinearConjugateGradient""):; {; buildSystem_matrixAssembly(cParams);; break;; }; case ResolutionMethod(""UnbuiltGaussSeidel""):; {; buildSystem_matrixFree(numConstraints);; break;; }; default:; msg_error() << ""Wrong \""resolutionMethod\"" given"";; }; ```. There is compile-time check that any of the `ResolutionMethod(""ProjectedGaussSeidel""), ResolutionMethod(""NonsmoothNonlinearConjugateGradient""), ResolutionMethod(""UnbuiltGaussSeidel"")` exist. If it does not exist, it does not compile. It is preferable to force the `constexpr` context:. ```cpp; stat",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5062:1013,Test,TestSelectableItem,1013,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5062,1,['Test'],['TestSelectableItem']
Testability,"`#pragma once` in a cpp file. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1969:569,test,test,569,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1969,2,['test'],['test']
Testability,`${CMAKE_BINARY_DIR}/bin/$<CONFIG>/` does not exist if using MSVC without Visual Studio IDE. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/451:344,test,test,344,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/451,2,['test'],['test']
Testability,"`; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user application). And one with an error:; ```cpp; if( inv.info() != Eigen::Success ){; - std::cerr << SOFA_CLASS_METHOD<<""non invertible block Schur."" << std::endl;; - std::cerr << schur << std::endl;; + msg_error(SOFA_CLASS_METHOD) << ""non invertible block Schur."" << msgendl; + << schur ;; ```; - Shorter to write (using msg_error_when() it would have to be even shorter); - Consistant way to present message to the user; - All the text is considered is a single message with a single call to msg_* ; - Is functionnaly equivalent to the old code ; - Uou can write tests that check that the message; is emitted (ExpectMessage/MessageAsTestFailure) so it become possible to test how components behave when they are ""mis-used"".... while with the old code it was just 'not done' at all.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:2212,log,logger,2212,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,6,"['log', 'test']","['logger', 'test', 'tests']"
Testability,"`BoxStiffSpringForceField` was a force field, deriving from `StiffSpringForceField`. Its only difference is in the `init()` step, where there is a matching of pairs of points, based on the minimal distances. This behavior could be achieved with a `StiffSpringForceField` along with components which the goal is to compute the matching of pairs of points. This is done with 2 `BoxROI` and a `NearestPointROI`.; Therefore, `BoxStiffSpringForceField` is now a simple `BaseObject` that instantiates a pack of components that mimics the previous behavior. Based on:; - https://github.com/sofa-framework/sofa/pull/2595; - https://github.com/sofa-framework/sofa/pull/2620. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2621:1205,test,test,1205,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2621,2,['test'],['test']
Testability,"`BroadPhaseDetection` and `NarrowPhaseDetection` classes did not have any source files. The class member functions were defined in the header file.; I created the associated cpp files and moved the definitions into them.; I also added the symbol exports. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041:794,test,test,794,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041,2,['test'],['test']
Testability,"`CGLinearSolver::init()` did not call `init()` of its base class. The result is that the check of the required Data, which is in `BaseObject::init()`, is never called. `CGLinearSolver` has required Data, therefore the error never triggered when one of the required Data was not set. [ci-depends-on https://github.com/sofa-framework/Compliant/pull/4]; [ci-depends-on https://github.com/sofa-framework/Flexible/pull/3]; [ci-depends-on https://github.com/sofa-framework/SofaPython/pull/2]; [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/211]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2419:1098,test,test,1098,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2419,2,['test'],['test']
Testability,`CentralDifferenceSolver::solve` has two ways of solving depending on the definition of `SOFA_NO_VMULTIOP`.; The benchmark could be used to decide if one of the way could be removed.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2149:113,benchmark,benchmark,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2149,1,['benchmark'],['benchmark']
Testability,"`CompressedRowSparseMatrix::mulTranspose` now supports scalar blocks.; It did not support scalars, because it called `multTranspose` on an object of type `TBloc`, which can be a `float` or a `double`. Unit tests are updated to compile and test the function on scalar blocks. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2331:206,test,tests,206,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2331,4,['test'],"['test', 'tests']"
Testability,"`DistanceMultiMapping` was not tested, and it's the first example of a tested non-linear multi mapping. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5077:31,test,tested,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5077,4,['test'],"['test', 'tested']"
Testability,"`EdgeTopologyFrom2PointSets` is an edge topology built from 2 point sets. It computes pairs of points based on the nearest distance from one point to the other point set. It is very useful to be used in combination with springs and SubsetMultiMapping. This component may change depending on the work in #2554 . ![image](https://user-images.githubusercontent.com/10572752/147271052-fa2f162e-72f2-4cc9-816f-6f64a0307f87.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2562:963,test,test,963,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2562,2,['test'],['test']
Testability,"`FindEigen3.cmake` is defining the cmake variable **EIGEN3_VERSION**, whereas `SofaEigen2Solver` was using **Eigen3_VERSION** to get the version of Eigen (which was; empty). Hence, **SOFAEIGEN2SOLVER_HAVE_OPENMP** was always true (given **SOFA_OPENMP**=ON), which was making the compilation fail when using Eigen > 3.2.9. Fixes #1412 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1416:587,test,test,587,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1416,2,['test'],['test']
Testability,"`GetFileNameWithoutExtension` currently finds the first dot in the filename to deduce the plugin name from a path. However, the filename `SoftRobots.Inverse.dll` deduces to `SoftRobots`, which is another existing plugin. To fix this behavior, I propose to rely the deduction on the extension of a dynamic library, which is known. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2961:869,test,test,869,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2961,2,['test'],['test']
Testability,"`MechanicalAccumulateJacobian` is initially implemented in `MechanicalMatrixMapper.h`. This PR extract this class into its own files in Sofa.SimulationCore. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2481:696,test,test,696,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2481,2,['test'],['test']
Testability,"`MechanicalState<DataTypes1>` and a second link to a `MechanicalState<DataTypes2>`.; - Components inheriting from `SingleStateAccessor` or `PairStateAccessor` fill the dynamic list contained in the `StateAccessor` implementation.; - It does not break the previous accesses, variable names etc. The goal is that all the components accessing a `BaseMechanicalState` can provide a list of them in a generic way. For example, `BaseInteractionForceField` supposed only 2 mechanical states. Since it inherits now from `StateAccessor`, it can have links to more than 2 (note that none of the interaction force field I found work with more than 2). Another example: `BaseForceField` did not have any reference to a mechanical state, but all the force fields inherits from `ForceField` which has a link to a mechanical state. Therefore, we couldn't have access to a mechanical state from a `BaseForceField`. I also cleaned the files:; - Concatenate nested namespaces; - Use `#pragma once`; - Some private and non-defined copy constructors and `operator=` are marked `delete`.; - Move methods in cpp; - Removed unnecessary `init()` implementations. They only called their base class `init()`.; - `Constraint ` has a link to the mechanical state instead of a raw pointer.; - Some constructors marked `explicit`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2438:2639,test,test,2639,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438,2,['test'],['test']
Testability,`MessageDispatcher::clearHandlers()` can have side effects on other tests in same suite.; See #83 for error case. SofaTest API should ensure that each test starts with a clean MessageDispatcher containing always the same set of MessageHandlers.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/94:68,test,tests,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94,2,['test'],"['test', 'tests']"
Testability,"`NearestPointROI` is now compatible with 3d Cuda types. It is still executed on the CPU though. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2620:635,test,test,635,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2620,2,['test'],['test']
Testability,"`NewmarkImplicitSolver` never accumulated forces in a mapped Node. This PR fixes it. What I think happened:; Initially (before 2011), the ODE solvers did not accumulated mapped forces, because ""_accumulation through mappings is disabled as it will be done by addMBKv after all factors are computed_"" (quote from a [comment](https://github.com/sofa-framework/sofa/commit/0943c8fa75490d0a1d3dc50ba3b22df4ae7d7f07)). This behavior changed in https://github.com/sofa-framework/sofa/commit/0943c8fa75490d0a1d3dc50ba3b22df4ae7d7f07, but `NewmarkImplicitSolver` was never updated. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2578:1113,test,test,1113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2578,2,['test'],['test']
Testability,"`PairInteractionConstraint` inherits multiple times from `StateAccessor`. `StateAccessor` constructor can be called multiple times. Therefore it initializes the Data multiple times. To prevent that the solution is virtual inheritance. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2488:774,test,test,774,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2488,2,['test'],['test']
Testability,"`SelectableItem` is a new type that can replace `OptionsGroup` in some cases. The idea is the same: a list of keys + a selection of a key among the list. In `OptionsGroup`, everything is dynamic, whereas `SelectableItem` is designed to be static. Disadvantages of `OptionsGroup`:. ```cpp; OptionsGroup foo{{""optionA"", ""optionB""}};; foo.setSelectedItem(12); //out of bounds; foo.setSelectedItem(""optionC""); //this key does not exist. if (foo.getSelectedId() == 0) // 0 has no meaning here. We don't know what 0; // refers to. In addition, the order of the options can change; {; ; }; ```. In `SelectableItem`:. - The list of items is included in the type and cannot change:. ```cpp; struct TestSelectableItem final : sofa::helper::SelectableItem<TestSelectableItem>; {; static constexpr std::array s_items {; sofa::helper::Item{""small"", ""small displacements""},; sofa::helper::Item{""large"", ""large displacements""},; };; };; ```. The consequences:. - Constant number of items: . ```cpp; static constexpr auto size = TestSelectableItem::numberOfItems();; ```. - List of keys is static:. ```cpp; static const auto& allKeys = TestSelectableItem::allKeysAsString();; ```. - Constructor can be `constexpr`:. ```cpp; static constexpr TestSelectableItem foo(""large"");; ```. It allows to use the type in a `constexpr` context. For example:. ```cpp; switch ( d_resolutionMethod.getValue() ); {; case ResolutionMethod(""ProjectedGaussSeidel""):; case ResolutionMethod(""NonsmoothNonlinearConjugateGradient""):; {; buildSystem_matrixAssembly(cParams);; break;; }; case ResolutionMethod(""UnbuiltGaussSeidel""):; {; buildSystem_matrixFree(numConstraints);; break;; }; default:; msg_error() << ""Wrong \""resolutionMethod\"" given"";; }; ```. There is compile-time check that any of the `ResolutionMethod(""ProjectedGaussSeidel""), ResolutionMethod(""NonsmoothNonlinearConjugateGradient""), ResolutionMethod(""UnbuiltGaussSeidel"")` exist. If it does not exist, it does not compile. It is preferable to force the `constexpr` context:",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5062:689,Test,TestSelectableItem,689,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5062,2,['Test'],['TestSelectableItem']
Testability,"`SofaNonUniformFem` is required by `SofaMiscEngine`. This needed to be; propagated back to the `SofaMiscConfig.cmake` in order to let external; projects find the target. Also, since `SofaGui` calls `find_package(SofaMisc)`, `SofaNonUniformFemConfig.cmake.in`; needs to be configure before `SofaGui`. The problem was raised [here](https://www.sofa-framework.org/community/forum/topic/setting-up-out-of-tree-build-sofapython-3-plugin/#post-16198) by Sander. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1384:707,test,test,707,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1384,2,['test'],['test']
Testability,"`SpatialVector` and `Transform` are extracted from `SolidTypes`. Plan for a future PR: update code including `SolidTypes` just to get `Transform`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4513:686,test,test,686,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4513,2,['test'],['test']
Testability,"`SpringForceField` is updated to handle topological changes properly. It now uses callbacks.; A scene example is introduced to test topological changes on a `SpringForceField`. To make the example working, point removal was needed but not implemented. That is why I had to implement `PointSetTopologyModifier::removeItems`, and added the support of points in `TopologicalChangeProcessor`. The use of callbacks fixes the application of the topological changes in `SpringForceField`. Before the use of callbacks, the topological changes were not applied because the force field was not in the same Node than the topology. The new code also supports a change in both input topologies. Previously, changes only in the second topology were possible. Without having testing it, I think the previous code did not handle properly multiple springs connected on a single DoF. This is now fixed. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2653:127,test,test,127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2653,4,['test'],"['test', 'testing']"
Testability,"`StiffSpringForceField<DataTypes>::addForce` was duplicated from `SpringForceField<DataTypes>::addForce`, its base class. Only the resize of `dfdx` differed. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3594:697,test,test,697,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3594,2,['test'],['test']
Testability,"`SubsetMultiMapping` resizes the target `State` according to the provided input Data. However, it did not update the topology.; For example, a `PointSetTopologyContainer` associated to the target `State` kept a number of vertices equal to zero. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2720:784,test,test,784,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2720,2,['test'],['test']
Testability,"`TClass<T, Parents>` was instantiated on the heap and never free, causing memory leaks. An option is to instantiate the class on the stack so it is destroyed at the end of the program. But currently, the compilation fails if `TClass<T, Parents>` is instantiated on the stack with T an abstract class. That is why there are now two implementations. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3178:887,test,test,887,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3178,2,['test'],['test']
Testability,"`TopologySparseData` inherits `TopologyData`; `TopologySubsetData` inherits `TopologyData`; Both `TopologySparseData` and `TopologySubsetData` overload virtual functions defined in `TopologyData`. However, the way they were defined made clang consider this not as an overload, but as a redefinition of a new function hidding the initial virtual function.; Basically, this PR removes a compilation warning. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1972:945,test,test,945,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1972,2,['test'],['test']
Testability,"`TriangleFEMForceField::addToMatrix` was a copy/paste of `ForceField::addToMatrix`, which is a base class: it is unnecessary.; Note it is used in `TriangleFEMForceField::addKToMatrix`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2421:724,test,test,724,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2421,2,['test'],['test']
Testability,"`TypeInfoRegistryTu2.external_registration` has side-effects, and influence the result of other tests.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/5019:96,test,tests,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5019,1,['test'],['tests']
Testability,"`WorkerThread` class was defined in _DefaultTaskScheduler.h/.cpp_ files. I moved its definition in WorkerThread.h and its implementation in WorkerThread.cpp. I did not change anything else.; This PR is based on #1927. It must be merged after.; There will be conflicts after #1997 is merged. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2002:830,test,test,830,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2002,2,['test'],['test']
Testability,"`_rotatedInitialElements` is not used in the `small` method. It is not resized (size = 0), therefore it leads to a crash. This instruction has been introduced in https://github.com/sofa-framework/sofa/pull/2287. I reverted this line only by the original code. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4780:799,test,test,799,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4780,2,['test'],['test']
Testability,```; [----------] 2 tests from TetrahedronFEMForceField_stepTest/0; [ OK ] TetrahedronFEMForceField_stepTest/0.extension (2 ms); [ OK ] TetrahedronFEMForceField_stepTest/0.checkGracefullHandlingWhenTopologyIsMissing (1 ms); [----------] 2 tests from TetrahedronFEMForceField_stepTest/0 (3 ms total); ```; (CI did execute the 2 tests),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3982#issuecomment-1619621078:20,test,tests,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3982#issuecomment-1619621078,3,['test'],['tests']
Testability,"```; [ERROR] [DAGNode(Snake)] A linear solver is required, but has not been found. Add a linear solver to your scene to fix this issue. The list of available linear solver components is: [BTDLinearSolver, BlockJacobiPreconditioner, CGLinearSolver, CholeskySolver, JacobiPreconditioner, LULinearSolver, MinResLinearSolver, PrecomputedLinearSolver, PrecomputedWarpPreconditioner, SSORPreconditioner, SVDLinearSolver, ShewchukPCGLinearSolver, SparseCholeskySolver, SparseLDLSolver, SparseLUSolver, WarpPreconditioner].; ```. instead of. ```; [ERROR] [DAGNode(Snake)] Requires a LinearSolver.; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2221:1134,test,test,1134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2221,2,['test'],['test']
Testability,"```; cmake_dependent_option(; name: SOFA_BUILD_WITH_PCH_ENABLED; description: ""Compile SOFA using precompiled header (to accelerate the build process)""; default value: OFF; when to show the option: ""CMAKE_VERSION VERSION_GREATER_EQUAL 3.16""; value forced when hidden: OFF; ); ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1755:820,test,test,820,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1755,2,['test'],['test']
Testability,"```TriangularPressureForceField```:; - Set componentState to Invalid if topology is not found; - Fix force vectors display. ```TriangularFEMForceField```:; - Remove GetFracturableEdge deprecated method which could not work.; - Various fix in the display to avoid computation inside draw method; - Replace default display by stress value. ![image](https://user-images.githubusercontent.com/21199245/106916096-17ffbc80-6707-11eb-89e5-c5b9353487b0.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1779:990,test,test,990,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1779,2,['test'],['test']
Testability,"```cpp; /// Method to check if points stored inside the Tetrahedron, given by the tetrahedron id, are in the right order (by checking the cross products between edges).; bool checkNodeSequence(const TetraID tetraId) const;. /// Method to check if the dihedral angles of the tetrahedron have correct values (between 20 and 160 degrees).; bool checkTetrahedronDihedralAngles(const TetraID tetraId) const;. /// Method to check if Tetrahedron is elongated, meaning the longest edge > 10x min edge; bool isTetrahedronElongated(const TetraID tetraId) const;. /// Return false if one of the test method: @sa isTetrahedronElongated, @sa checkTetrahedronDihedralAngles and @sa checkNodeSequence return false for the given Tetrahedron Id.; bool checkTetrahedronValidity(const TetraID tetraId) const;. /// Will call @sa checkTetrahedronValidity for each Tetrahedron of the mesh and store the bad tetrahedron ID in @sa m_badTetraIds; const sofa::helper::vector <TetraID>& computeBadTetrahedron();; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1160:584,test,test,584,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1160,3,['test'],['test']
Testability,"``cmake --install``` on a freshly built Sofa repo, the header files for libQGLViewer are not properly copied to the install/include directory.; First of all the install path is too long and has at least one ${PROJECT_NAME}, i.e. ""QGLViewer"" too much in the path. Also there are header files missing which are relevant for using the provided libQGLViewer in external projects/plugins. This is caused by the now modified ```Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - The last argument for the ```sofa_create_package_with_targets``` macro adds too many ```/${PROJECT_NAME}``` causing the long install path (line 118); - For some reason the ```sofa_create_package_with_targets``` macro does not copy the ```MOC_HEADER_FILES``` (line 21 ff.). ## Solution:; This PR shortens the output path and copies the contents of ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES``` which causes them to be copied to the install/include directory. This does not affect the build but ensures that all headers are copied. This was tested on Windows and two different Linux installations. I am aware that simply re-mentioning the MOC_HEADERS may look redundant, but I could not find a solution to convince the ```sofa_create_package_with_targets``` macro to also consider the MOC_HEADERS for copying. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4198:1160,test,tested,1160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4198,3,['test'],"['test', 'tested']"
Testability,"`addDForce` is now divided in 2 steps:; 1) Elements are visited in parallel: a force derivative is computed inside each element; 2) Vertices are visited in parallel: the force derivative in all adjacent hexahedra are accumulated in the vertices. This new organization allows to write the force derivative such as it maximize coalescing memory access. Benchmark (the cantilever beam in the examples):. ```; before (8x8x40); 4.62651 s ( 216.146 FPS). before (16x16x80); 73.1133 s ( 13.6774 FPS). ; after (8x8x40); 3.9425 s ( 253.646 FPS). after (16x16x80); 65.4055 s ( 15.2892 FPS). ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3572:351,Benchmark,Benchmark,351,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3572,3,"['Benchmark', 'test']","['Benchmark', 'test']"
Testability,"`canCreate` can be called several times by the object factory. It makes more sense to detect if the template parameter is empty in the `parse` method, i.e. once the object is instantiated. Header of the message depends whether the component name is empty or not. Remove hard coded string of the component class, as it does not apply to derived types. Remove hard coded template strings. ![image](https://user-images.githubusercontent.com/10572752/172868099-18fb7a50-ecb2-40e4-b8b4-11fdac2be70d.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3029:1039,test,test,1039,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3029,2,['test'],['test']
Testability,"`distanceType` is an OptionsGroup, and it is cannot be initialized using a single value. In this case, the wrong overload of `initData` was picked. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4711:687,test,test,687,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4711,2,['test'],['test']
Testability,`examples/Benchmark/Performance/benchmark_cubes.scn` was ignored by CI due to a script issue. I'm on it :muscle:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2646#issuecomment-1027693111:10,Benchmark,Benchmark,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2646#issuecomment-1027693111,1,['Benchmark'],['Benchmark']
Testability,"`getValue` has a side effect. `BaseData::typeName` allows to use only the type, without a parameter. So, by expliciting the type, we can remove the call to `getValue`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4816:707,test,test,707,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4816,2,['test'],['test']
Testability,"`index` and `ext_index` were already defined, and I think they referred to the same thing. The difference is only on the condition with `useRestMState`. ; It follows changes from https://github.com/sofa-framework/sofa/pull/3175. Strangely, we can see that the condition on `useRestMState` was implemented only for rigids. Now it is also for vecs. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3754:886,test,test,886,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3754,2,['test'],['test']
Testability,"`l_topology` already exists in `BaseLinearElasticityForceField`, and it was already initialized. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4890:636,test,test,636,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4890,2,['test'],['test']
Testability,"`lcp_gaussseidel_unbuilt` is called even if there is no constraints, so a test is added.; And the initial guess was writing a 0.0 outside bounds (but I dont know why this line was here). :warning: WARNING :warning:; one needs to set the responseParams to mu=0.0 also. This is really confusing and would need to refactor somewhere.; If the LCP defines mu to 0.0 but not responseParams, funny things happen (one component expects 1contact = 1 constraint and the other 1contact = 3 constraints). Moreover:; - remove (deprecate) usage of the member `_mu` which was confusing with the data `mu`; - adds two scenes to demonstrate with and without friction, and their regression tests. [ci-depends-on https://github.com/sofa-framework/Regression/pull/47]. ![lcp_friction](https://github.com/sofa-framework/sofa/assets/11028016/eba86b90-3cfc-40f6-850f-6aba720d291d); ![lcp_nofriction](https://github.com/sofa-framework/sofa/assets/11028016/fb015cd7-54c6-4347-a07e-e5c960dc609c). Benchmarks:; As friction adds two additional constraints in the matrix, then frictionless scenes are faster:; ```; caduceus:; w/: 5000 iterations done in 52.071 s ( 96.0227 FPS); w/o: 5000 iterations done in 44.6895 s ( 111.883 FPS); ```; ```; 3instruments_collis:; w: 5000 iterations done in 69.8352 s ( 71.5971 FPS); w/o: 5000 iterations done in 43.0997 s ( 116.01 FPS); ```; Obviously, this change the behavior of the scene...; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failur",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3905:74,test,test,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3905,2,['test'],"['test', 'tests']"
Testability,"`m_filename` now becomes `d_filename` as simple (and breaking as that). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2095:611,test,test,611,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2095,2,['test'],['test']
Testability,"`map_ptr_stable_compare` is used in the `NarrowPhase` components. In this PR:. - The use of `map_ptr_stable_compare` is optimized in `NarrowPhase` components; - `map_ptr_stable_compare` itself is a bit optimized. The benchmark results show great performances improvements at the level of the container manipulation.; However, at the level of a simulation the performances improvements are negligible. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2105:217,benchmark,benchmark,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2105,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"`msg_info` is used instead of `std::cout`. `msg_info` is also used in `mycudaPrintf`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4430:625,test,test,625,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4430,2,['test'],['test']
Testability,"`parentData == nullptr` leads to a crash. I think it happens when the linked object could not be created for some reasons. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2211:662,test,test,662,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2211,2,['test'],['test']
Testability,"`pull_request` event prevented from using secrets value since it arises from PR author repository. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4476:638,test,test,638,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4476,2,['test'],['test']
Testability,"`sofa/helper/set.h` is not required if we just need `std::set`. `TagSet` also no longer inherits from `std::set`. Composition instead. Note that there is still a contaminating include in `Sofa/framework/DefaultType/src/sofa/defaulttype/DataTypeInfo.h`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4820:792,test,test,792,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4820,2,['test'],['test']
Testability,"`sofa` is repeated in `sofa::sofa::core::topology::PointData`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2538:602,test,test,602,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2538,2,['test'],['test']
Testability,"`transpose` and `add` are known at compile-time, so a `constexpr if` can be used to evaluate them, and discard statements. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4352:662,test,test,662,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4352,2,['test'],['test']
Testability,"`type::invertMatrix` is specialized. Only 2x2 matrices were tested (specialized). 3x3 matrices are now tested (also specialized), and 5x5 matrices (using the generic implementation). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2343:60,test,tested,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2343,4,['test'],"['test', 'tested']"
Testability,"`valuesIndexedInTopology` should not be initialized with `initData`: it duplicates the Data name of `d_valuesIndexedInTopology`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4843:668,test,test,668,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4843,2,['test'],['test']
Testability,"a broad phase, but the code is located in its base class: `BruteForceBroadPhase`.; The narrow phase code has been extracted and put in a new component: `DirectSAPNarrowPhase`. `DirectSAP` inherits from `DirectSAPNarrowPhase`.; In the narrow phase, the result of the broad phase is used to skip the boxes which have been totally ignored in the broad phase. Initially, the `DirectSAP` component did not perform any discrimination in its broad phase. Now it performs a `BruteForceBroadPhase`. It is not yet clear if it is always a good choice regarding the performances. In the case of the caduceus scene, the performances are slightly better. I guess if the broad phase takes a lot of time (many objects), it is better to avoid it. `DirectSAP` would not be the best choice. I would use a more performant broad phase, or no broad phase, when used with `DirectSAPNarrowPhase`. From now, the user can decide to design its scene with two different ways resulting to the same behavior:; ```; <DirectSAP/>; ```; or; ```; <BruteForceBroadPhase/>; <DirectSAPNarrowPhase/>; ```; In the second option, it will be possible to change the combination of broad phase/narrow phase.; Note: I kept the component `DirectSAP`, but I don't think its name is meaningful. This is the following of the work started in #2010 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2030:2312,test,test,2312,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2030,2,['test'],['test']
Testability,"a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1997,log,logic,1997,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201,2,['log'],['logic']
Testability,"a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp impl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:1696,test,test,1696,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,2,['test'],"['test', 'testname']"
Testability,"a.Type -isystem $SOFA_ROOT/include/Sofa.Config -o main.o -c main.cpp; ```; ```sh; main.cpp: In function ‘int main()’:; main.cpp:6:41: error: call of overloaded ‘vector(sofa::Size, int)’ is ambiguous; 6 | vector<double> d_v (sofa::Size(5), 0);; | ^; In file included from /sofa/include/Sofa.Type/sofa/type/vector.h:24,; from main.cpp:1:; /sofa/include/Sofa.Type/sofa/type/vector_T.h:78:5: note: candidate: ‘sofa::type::vector<T, MemoryManager>::vector(long int, const T&) [with T = double; MemoryManager = sofa::type::CPUMemoryManager<double>]’; 78 | vector(long n, const T& value): std::vector<T,Alloc>(n,value) {}; | ^~~~~~; /sofa/include/Sofa.Type/sofa/type/vector_T.h:76:5: note: candidate: ‘sofa::type::vector<T, MemoryManager>::vector(int, const T&) [with T = double; MemoryManager = sofa::type::CPUMemoryManager<double>]’; 76 | vector(int n, const T& value): std::vector<T,Alloc>(n,value) {}; | ^~~~~~; /sofa/include/Sofa.Type/sofa/type/vector_T.h:74:5: note: candidate: ‘sofa::type::vector<T, MemoryManager>::vector(sofa::type::vector<T, MemoryManager>::Size, const T&) [with T = double; MemoryManager = sofa::type::CPUMemoryManager<double>; sofa::type::vector<T, MemoryManager>::Size = long unsigned int]’; 74 | vector(Size n, const T& value): std::vector<T,Alloc>(n,value) {}; | ^~~~~~; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2270:2664,test,test,2664,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2270,2,['test'],['test']
Testability,"aPython3.so; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:2850,test,test,2850,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['test']
Testability,"aUnity/Scripts/SofaContext.cs:495); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). Reconnect SofaVisualModel: Visual; UnityEngine.Debug:Log (object); SofaUnity.SofaUnityRenderer:Reconnect () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaUnityRenderer.cs:118); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:495); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). Start: 'Visual'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). ReconnectSofaScene; UnityEngine.Debug:Log (object); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:480); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). KeyNotFoundException: The given key '4' was not present in the dictionary.; System.Collections.Generic.Dictionary`2[TKey,TValue].get_Item (TKey key) (at <eef08f56e2e042f1b3027eca477293d9>:0); SofaUnityAPI.SofaContextAPI.loadScene (System.String filename) (at Assets/SofaUnity/Plugins/SofaUnityAPI/SofaContextAPI.cs:189); SofaUnity.SofaContext.ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:486); SofaUnity.SofaContext.Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:3",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4156:5886,Log,Log,5886,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4156,1,['Log'],['Log']
Testability,"actions/github-script@v4 is output errors due to deprecation in actions/core:; ```; (node:1614) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.; (Use `node --trace-deprecation ...` to show where the warning was created); RequestError [HttpError]: Resource not accessible by integration; at /home/runner/work/_actions/actions/github-script/v4/dist/index.js:4662:21; at processTicksAndRejections (node:internal/process/task_queues:96:5) {; status: 403,; response: {; url: 'https://api.github.com/repos/sofa-framework/sofa/issues/4496/comments',; Error: Unhandled error: HttpError: Resource not accessible by integration; status: 403,; ```. This PR also :; - updates list of GHD reviewers with @rmolazem and @samuelmyoussef ; - updates with stargazer's name . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4522:1426,test,test,1426,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4522,2,['test'],['test']
Testability,add SphereActiver class in SphereModel so that some controller inheriting from this class can compute sphere(s) de/activation during execution. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1259:395,test,test,395,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259,2,['test'],['test']
Testability,add bounding box to hexaFemForceField. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/289:290,test,test,290,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/289,2,['test'],['test']
Testability,add non-regression tests?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1420#issuecomment-646511574:19,test,tests,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1420#issuecomment-646511574,1,['test'],['tests']
Testability,added deprecation message where needed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1197:291,test,test,291,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1197,2,['test'],['test']
Testability,"adding instantiation with RigidType + removal of ""hard"" usage of VecTypes. In my case, it was to support grabbing a beam (BeamAdapter) with the mouse and constraints. https://github.com/sofa-framework/sofa/assets/11028016/8eeb22ff-396d-4d87-8d9e-22e2849eefec. Reminder: BilateralConstraint needs a GenericConstraintSolver (+FreeMotionAL), LCPConstraintSolver is not usable. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4801:913,test,test,913,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4801,2,['test'],['test']
Testability,adding some recorded mouse non-regression tests? 😈,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1011#issuecomment-487960421:42,test,tests,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1011#issuecomment-487960421,1,['test'],['tests']
Testability,"after 200 steps:. v22.12; <img src=""https://github.com/sofa-framework/sofa/assets/11028016/94b95e00-f68b-464e-8e19-96bb6332a282"" width=""400"" />. v23.06; <img src=""https://github.com/sofa-framework/sofa/assets/11028016/69dde38e-8b34-4771-aa4a-09889fdea45e"" width=""400"" />. Moreover it asserts in Debug, while browsing the elements (so I guess it explains why the rest of tetra are blue in not debug)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4407:284,assert,asserts,284,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4407,1,['assert'],['asserts']
Testability,"alright, that should fix the failing test. Although, the test doesn't reflect very well the behavior of the component. the SimpleDataEngine *must* exclusively be used in cases where the process performed the engine has to be applied no matter which datafield is set to dirty.; Currently, the engine would even be called if NO data is set to dirty, which is also the case in the core::DataEngine if there's no check performed on the DataTracker. I believe this is a mistake. I think that doUpdate() should be called iff at least 1 data field is dirty.; What do you think?. concretely, it means that in DataEngine_test.cpp, line 151 would assert FALSE",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945:37,test,test,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945,3,"['assert', 'test']","['assert', 'test']"
Testability,amples\Benchmark\Performance\MatrixAssembly\MatrixAssembly_direct.scn; examples\Components\linearsolver\preconditioner\FEMBAR_PCG_AsyncSparseLDLSolver.scn; examples\Components\loader\GIDMeshLoader.scn; examples\Components\solver\EulerExplicitSolver\EulerExplicitSolver.scn; examples\Components\solver\EulerExplicitSolver\EulerSymplecticSolver.scn; examples\Components\solver\NewmarkImplicitSolver.scn. [INFO] [PluginFinder] Found 9 files with deprecated:; examples\Components\interactionforcefield\BoxStiffSpringForceField.scn; examples\Components\linearsolver\FEMBAR_AsyncSparseLDLSolver.scn; examples\Components\misc\sleep\test_sleep.scn; examples\Components\misc\sleep\test_sleep2.scn; examples\Components\misc\sleep\test_sleep3.scn; examples\Components\visualmodel\OglLabel.scn; examples\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPointConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularBendingSprings_RemovingMeshTest.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:1152,Benchmark,Benchmark,1152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,amples\Tutorials\OldTutorials\demo7Triangle.scn; examples\Tutorials\OldTutorials\demo8.scn; examples\Tutorials\OldTutorials\demo8Triangle.scn; examples\Tutorials\OldTutorials\demo9.scn; examples\Tutorials\OldTutorials\tutorial4.scn; examples\Tutorials\StepByStep\FullObject\0_FullObject.scn; examples\Tutorials\StepByStep\FullObject\1_FullObject.scn; examples\Tutorials\StepByStep\FullObject\2_FullObject.scn; examples\Tutorials\StepByStep\FullObject\3_FullObject.scn; examples\Tutorials\StepByStep\FullObject\4_FullObject.scn; examples\Tutorials\StepByStep\FullObject\5_FullObject.scn; examples\Tutorials\StepByStep\FullObject\6_FullObject.scn; examples\Tutorials\StepByStep\FullObject\7_FullObject.scn; examples\Tutorials\StepByStep\FullObject\8_FullObject.scn; examples\Tutorials\StepByStep\Pendulum\0_Pendulum.scn; examples\Tutorials\StepByStep\Pendulum\1_Pendulum.scn; examples\Tutorials\StepByStep\Pendulum\2_Pendulum.scn; examples\Tutorials\StepByStep\Pendulum\3_Pendulum.scn; examples\Tutorials\StepByStep\Pendulum\4_Pendulum.scn; examples\Tutorials\StepByStep\Pendulum\5_Pendulum.scn; examples\Tutorials\StepByStep\Pendulum\6_Pendulum.scn; examples\Tutorials\StepByStep\Pendulum\7_Pendulum.scn; examples\Tutorials\StepByStep\TopologicalMapping\2_TopoMapping.scn; examples\Tutorials\StepByStep\TopologicalMapping\5_TopoMapping.scn; examples\Tutorials\StepByStep\TopologicalMapping\6_TopoMapping.scn; examples\Tutorials\StepByStep\Visual\3_Visual.scn; examples\Tutorials\Topologies\TopologyDynamicSurfaceMesh.scn; examples\Tutorials\Topologies\TopologyHexa2QuadTopologicalMapping.scn; examples\Tutorials\Topologies\TopologyHexa2TetraTopologicalMapping.scn; examples\Tutorials\Topologies\TopologyQuad2TriangleTopologicalMapping.scn; examples\Tutorials\Topologies\TopologyTetra2TriangleTopologicalMapping.scn; examples\Tutorials\Topologies\TopologyTriangle2EdgeTopologicalMapping.scn. [INFO] [PluginFinder] Found 1 files with error:; examples\Benchmark\Accuracy\cylinder_PhantomSolution.scn; ```,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:9286,Benchmark,Benchmark,9286,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,and I also propose to update the APIChange file .. ; I did two in one (but separate commits) since it's super minor!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1414:369,test,test,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1414,2,['test'],['test']
Testability,"and MappingGeometricStiffnessForceField. The message goes from:; ```; Object type MechanicalMatrixMapper<Vec3d,Vec3d> was not created; The object 'MechanicalMatrixMapper' is not in the factory.; This component has been MOVED from SofaGeneralAnimationLoop to Sofa.Component.Mapping.MappedMatrix since SOFA v22.06.; To continue using this component you may need to update your scene by adding; <RequiredPlugin name='Sofa.Component.Mapping.MappedMatrix'/>; ```. to:. ```; The object 'MechanicalMatrixMapper' is not in the factory.; This component has been REMOVED since SOFA v23.06 (deprecated since v23.12).; Please consider updating your scene. If this component is crucial to you please report in a GitHub issue in order to reconsider this component for future re-integration.; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4235:1322,test,test,1322,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4235,2,['test'],['test']
Testability,"and _bwd_* functions, because of the boilerplate code. In a nutshell, there are race conditions which can be avoided if the derived class can execute only the code they are designed to execute, and nothing more. ### Proposition. I added boolean variables named `applyFwd*` and `applyBwd*`, each corresponding to the `fwd*` and `bwd*` functions. They are all set to false by default.; For example, if `applyFwdMechanicalState` is true, then the code related to `fwdMechanicalState` is executed. Remember that previously, the boilerplate code related to `fwdMechanicalState` was executed even if `fwdMechanicalState` does nothing. To change that, the derived class must set the right variables to true, so the right code is executed. For example, if a derived class wants to execute `fwdMechanicalState`, it must set `applyFwdMechanicalState` first, usually in its constructor. ### Pros. - Avoid unnecessary race conditions; - Does not execute unnecessary boilerplate code; - Simple to understand. ### Cons. - Breaks all classes derived from `BaseMechanicalVisitor`; - Forces the developers of classes derived from `BaseMechanicalVisitor` to tune booleans according the goal of the visitor.; - Runtime check of the variables. This PR is not to merge yet. IIt is suggested as an alternative to PR #1963. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1962:3080,test,test,3080,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1962,2,['test'],['test']
Testability,"and about the process, I think this PR is a very good test case for everyone to give it a try.; Regarding the feedback we should be able to package it together as a public plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057:54,test,test,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057,2,['test'],['test']
Testability,"and add potential qt6 support.; But image_gui does not support qt6 at the c++ level (deprecated API & co). Fix #2542 . (remaining code using qt4 is the qtsofa application/projects but is not supported anymore and is doomed to be deleted/removed); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2663:786,test,test,786,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2663,2,['test'],['test']
Testability,"and add unit tests; The case `(this->mstate1 != this->mstate2)` is not tested. Note that this implementation is not yet useful when the force field is associated to a mapped mechanical object. However, it will become useful for #2777 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3626:13,test,tests,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3626,4,['test'],"['test', 'tested', 'tests']"
Testability,"and also removed the attributes associated to the deprecated macros. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3265:608,test,test,608,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3265,2,['test'],['test']
Testability,"and clean the files. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2271:560,test,test,560,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2271,2,['test'],['test']
Testability,"and delegate constructor. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2911:565,test,test,565,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2911,2,['test'],['test']
Testability,and did you try with out-of-tree compilation with SofaPython3 for example ? (as the CI does not test this mode for the moment),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1913#issuecomment-796881062:96,test,test,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1913#issuecomment-796881062,1,['test'],['test']
Testability,"and if I was picky, I would say that a small test is missing !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/334#issuecomment-317521296:45,test,test,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/334#issuecomment-317521296,1,['test'],['test']
Testability,"and lots of cleaning. #1527. Based on master. Deprecates SofaBaseLinearSolver, SofaGeneralLinearSolver, SofaPreconditioner, SofaDenseSolver, SofaSparseSolver. Re-organise Linear Solvers into 3 categories:; - Direct; - Iterative; - Preconditioner. Move Implementations of MatrixAccessors along its API in SofaCore (could be the occasion to definitely ditch CRSMultiMatrixAccessor), as they are not components + the utility class BlocMatrixWriter; And cleaning (namespaces, pragma, explicite instanciations, symbol export for windows, SReal instead of double, etc). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2717:1103,test,test,1103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2717,2,['test'],['test']
Testability,"and replace MapMapSparseMatrix. Continuation of #3515 . Breaking because one or two functions have been deleted (for perf reasons), especially the batch clear function. Some benchs, where constraints are supposedly the bottleneck. caduceus.scn; ```; before: 5000 iterations done in 48.2532 s ( 103.62 FPS).; after: 5000 iterations done in 22.042 s ( 226.839 FPS).; ```. TorusFall.scn; ```; before: 5000 iterations done in 47.5045 s ( 105.253 FPS).; after: 5000 iterations done in 37.8749 s ( 132.014 FPS).; ```. 3instruments_collis.scn; ```; before: 5000 iterations done in 63.3632 s ( 78.9101 FPS).; after: 5000 iterations done in 53.7899 s ( 92.9542 FPS).; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3894:1203,test,test,1203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3894,2,['test'],['test']
Testability,"and some derived types. This allows to write such code:. ```cpp; const auto [r, g, b, a] = color;; ```. ```cpp; auto& [r, g, b, a] = color;; ```; ```cpp; for (const auto& [r, g, b, a] : colors); {; }; ```; See the unit test Color_test. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2276:219,test,test,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2276,3,['test'],['test']
Testability,"and some fixes in tetra FEM. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4832:568,test,test,568,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4832,2,['test'],['test']
Testability,arseLDLSolver.scn; examples\Components\loader\GIDMeshLoader.scn; examples\Components\solver\EulerExplicitSolver\EulerExplicitSolver.scn; examples\Components\solver\EulerExplicitSolver\EulerSymplecticSolver.scn; examples\Components\solver\NewmarkImplicitSolver.scn. [INFO] [PluginFinder] Found 9 files with deprecated:; examples\Components\interactionforcefield\BoxStiffSpringForceField.scn; examples\Components\linearsolver\FEMBAR_AsyncSparseLDLSolver.scn; examples\Components\misc\sleep\test_sleep.scn; examples\Components\misc\sleep\test_sleep2.scn; examples\Components\misc\sleep\test_sleep3.scn; examples\Components\visualmodel\OglLabel.scn; examples\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPointConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularBendingSprings_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularFEMForceField_RemovingMeshTest.scn; examples\Components\constraint\AffineMovementCon,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:1254,Benchmark,Benchmark,1254,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,as discussed in meeting. So it is done. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1179:291,test,test,291,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1179,2,['test'],['test']
Testability,as promised since long time ago... There is still a lot of work to do but here is a first set of tests on the topology containers.; - Do not test yet the topological changes.; - Neither more complex algo like incision.; - Nor TopologicalData... it is just the beginning !. FIX #43 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/708:97,test,tests,97,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/708,4,['test'],"['test', 'tests']"
Testability,"as said by Damien the wise in PR #407 . ""Module are systematically compiled which have a sensible impact to Sofa.; I'm moving that into plugin to allow dev to conditionnally activate/deactivate the plugin they; don't need."". This PR is about putting SofaMiscForceField in a plugin.; It implied conditional activation of some unit tests to build properly when the plugin is switched off. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/408:330,test,tests,330,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/408,3,['test'],"['test', 'tests']"
Testability,as the consortium is hosted by Inria since 2019. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1451:300,test,test,300,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1451,2,['test'],['test']
Testability,as this component is in fact a kind of map. The swap might not be needed... but without diving back into this I'm not 100% sure...; normally there is enough regression tests on topology modification to detect if removing the swap will break the mechanism.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4738#issuecomment-2114756090:168,test,tests,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4738#issuecomment-2114756090,1,['test'],['tests']
Testability,"assertion was using an undeclared variable so the debug build was failing. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2989:0,assert,assertion,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2989,3,"['assert', 'test']","['assertion', 'test']"
Testability,"ate was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, allowing to go to the parent to find a topology. It assumes that the Mapping in the root node is there to write to the state/topology of the root node, so it is not considered as something that would block the topology to remain active. Hence the wrong link being created, and the bug. The fix (beaaaf5) is a simple one-line change in MappingTest, creating the mapping in childNode instead of root, which should have been the case to respect Sofa's conventions (but which are unfortunately not checked/asserted by anyone). Hopefully all is well now. It's difficult to know for sure because not-disabled tests are still failing on my computer (but they are also failing on the master...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:3622,assert,asserted,3622,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201,4,"['assert', 'test']","['asserted', 'tests']"
Testability,ated:; examples\Components\interactionforcefield\BoxStiffSpringForceField.scn; examples\Components\linearsolver\FEMBAR_AsyncSparseLDLSolver.scn; examples\Components\misc\sleep\test_sleep.scn; examples\Components\misc\sleep\test_sleep2.scn; examples\Components\misc\sleep\test_sleep3.scn; examples\Components\visualmodel\OglLabel.scn; examples\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPointConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularBendingSprings_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularFEMForceField_RemovingMeshTest.scn; examples\Components\constraint\AffineMovementConstraint.scn; examples\Components\constraint\AffineMovementConstraint3D.scn; examples\Components\constraint\AttachConstraintMatrix.scn; examples\Components\constraint\BilateralInteractionConstraint_PGS.scn; examples\Components\constraint\BilinearConstraint.scn; examples\Components\constraint\BilinearConstraint3D,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:1561,Benchmark,Benchmark,1561,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,"ating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was p",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:1469,test,test,1469,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['test'],['test']
Testability,"ator delete mismatch; - CatmullRomSplineMapping: fix applyJ compilation; - ConstantForceField: fix avoid crashes in draw when trying to apply a constantforcefield to a non existing point; - DistanceGrid: fix incorrect use of serr; - GeneralConstraintSolver: fix incorrect parent class in SOFA_CLASS macro; - IndicesFromValues: fix use getTemplateName to avoid problems of links with other data; - EulerImplicitSolver: fix Disable calls to solveConstraint from EulerImplicitSolver by default as it is not needed unless an very specific solver is added and it currently crashes in other cases + wrong argument order in calls to `AdvancedTimer::stepNext()`; - FixedConstraint and PartialFixedConstraint: fix ""fixed FixedConstraint & PartialFixedConstraint for size-varying mechanical objects"".; - MechanicalObject: fix crash in debug with null pointer; - Mass: fix remove error logging in Mass method that are inherited from Forcefield API and that are not relevant for Mass; - MechanicalMatrixVisitor and MechanicalOperations: fix if using a Linear Solver, projective constraints were wrongly applied when a force field is in a child node; - Mesh2PointMechanicalMapping: fix constraints ApplyJT; - Metis(gk_arch.h): fix compilation with Visual Studio 2015; - ParticlesRepulsionForceField and RepulsiveSpringForceField: fix avoid division by 0 on repulsion force fields; - PersistentContactBarycentricMapping: fix init variables in constructor; - RestShapeSpringsForceField: fix Runtime stiffness tunning was not working + optimisation and cleaning; - SkinningMapping: fix compilation of SofaRigid; - SofaViewer: fix crashes when current camera of pick-handler is NULL; - SurfacePressureForceField: fix volume computation formula; - TaitSurfacePressureForceField: fix contribution to the stiffness matrix for the second component df = P+dN in TaitSurfacePressureForceField; - TopologicalMapping: fix display error messages when a TopologicalMapping failed to be created; - TriangularFEMForceFieldOptim: ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218:1388,log,logging,1388,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218,1,['log'],['logging']
Testability,"ay_defaultconstruct<sofatypefixedarray3f>/32768 38.1 us 38.5 us ; ```. I dont really know why (after spending lots of time on cppreference, stackoverflow, etc) as both of them should not have any initialization on the C-array inside. It seems with the `=default`, MSVC does default-initialization or something like that.; This behavior can be seen with vec3() and vec3(NOINIT). ```; BM_FixedArray_defaultconstruct<stdarray3f>/32768 32.5 us 33.0 us ; BM_FixedArray_defaultconstruct<sofatypefixedarray3f>/32768 32.7 us 32.2 us ; BM_FixedArray_defaultconstruct<sofa::type::Vec3f>/32768 73.3 us 73.2 us ; BM_FixedArray_defaultconstruct_vec3noinit/32768 33.0 us 33.0 us ; ```; Bench on caduceus (10k steps); - before : `10000 iterations done in 23.5033 s ( 425.471 FPS)`; - after: : `10000 iterations done in 21.5335 s ( 464.393 FPS)`. Nice 10% speedup for a really trivial change. ### Ubuntu/gcc; Actually on Ubuntu/gcc, the change does nothing as std::array/fixed_array/vec as the same timing (which is good); ```; BM_FixedArray_defaultconstruct<stdarray3f>/32768 15.6 us 15.6 us ; BM_FixedArray_defaultconstruct<sofatypefixedarray3f>/32768 15.2 us 15.2 us ; BM_FixedArray_defaultconstruct<sofa::type::Vec3f>/32768 15.3 us 15.3 us ; BM_FixedArray_defaultconstruct_vec3noinit/32768 15.2 us 15.2 us ; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2764:2655,test,test,2655,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2764,2,['test'],['test']
Testability,"bSofaSimulationCore.so(sofa::simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7210,test,testing,7210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,2,"['Test', 'test']","['Test', 'testing']"
Testability,"back from a little ""into the wild"" break. Will finish that in the next days. Edit: Test added. Not perfect but more will come as I add new methods in sceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-276923603:83,Test,Test,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-276923603,1,['Test'],['Test']
Testability,"backtrace:; ```; 	[Inline Frame] Sofa.Helper.dll!std::_Check_C_return(int _Res) Line 131	C++; 	[Inline Frame] Sofa.Helper.dll!std::_Mutex_base::lock() Line 50	C++; 	[Inline Frame] Sofa.Helper.dll!std::lock_guard<std::mutex>::{ctor}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::contribute<0>(const sofa::core::MechanicalParams * mparams) Line 85	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::assembleSystem(const sofa::core::MechanicalParams * mparams) Line 123	C++; 	Sofa.Core.dll!sofa::core::behavior::BaseMatrixLinearSystem::buildSystemMatrix(const s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:1435,log,logging,1435,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,2,['log'],['logging']
Testability,"backup discussion for logs:. here is the call stack of sphereLoader:; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345:22,log,logs,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1666#issuecomment-746000345,2,['log'],"['log', 'logs']"
Testability,"based on #2339 . Description: Matrix\Vector has been moved to Sofa.LinearAlgebra in #2339, the only remaining component is SVDLinearSolver.; This linear solver is a (very slow) dense matrix solver so it would be more logical for this component to be in SofaDenseSolver.; Moreover the sole existence of SofaEigen2Solver was the Eigen dependency. ; Now Eigen is a proven dependency in the SofaFramework so at the end SofaEigen2Solver is not useful anymore. This PR:; - moves SVDLinearSolver in SofaDenseSolver; - remove the SofaEigen2Solver dependencies from various modules; - add some deprecations warning here and there; ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2368:217,log,logical,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2368,3,"['log', 'test']","['logical', 'test']"
Testability,"based on #4028 . Add method to detect intersection between 2 edges in 2D and 3D.; Add tests with tricky cases; Will update version in EdgeSetTopologyContainer which is not really working later. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4029:86,test,tests,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4029,3,['test'],"['test', 'tests']"
Testability,"based on PR #3327 . - Remove option `merge` which was added as a test in 2011 and never finished. According to a quick test on example. The behavior is less stable when activating the option with the same speed. **Result of BilateralConstraint between 2 deformable models.** ; Current behavior: single constraint working fine; ![RemovingBilateralInteractionConstraint_00000001](https://user-images.githubusercontent.com/21199245/191688055-b0f0af8a-a657-4d9f-b477-6d712542a48a.png). Result when activating merge option: Some vibration and constraint is duplicated; ![RemovingBilateralInteractionConstraint_00000002](https://user-images.githubusercontent.com/21199245/191688314-22cd8674-ce2c-40d9-a6c1-f77267cbb471.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3328:65,test,test,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3328,4,['test'],['test']
Testability,"based on:; - #2813 (which is itself based on #2790 ). All OBB/Capsule code-related into its own plugin.; Has kind of the same file structure as Sofa.Component.Collision. Tests were adapted as well. [ci-depends-on https://github.com/sofa-framework/THMPGSpatialHashing/pull/1]; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2820:170,Test,Tests,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2820,3,"['Test', 'test']","['Tests', 'test']"
Testability,"been moved, but I did not check). - modules/SofaGeneralEngine/src/SofaGeneralEngine/SelectConnectedLabelsROI.h: Header file wrongly referenced in CMakeLists: .cpp instead of .h. - LaparoscopicRigidMapping: Was not compiled at all. Is it still useful? It seems it cannot compile, so I removed the files. - @fredroy: What should we do with NonUniformHexahedronFEMForceFieldDensity? Its reference is commented in the CMakeLists. I did not touch it. - SofaKernel/modules/SofaCore/src/sofa/core/behavior/InertiaForce.h -> removed because not used and not referenced in CMakeLists. - SofaKernel/modules/SofaCore/src/sofa/core/collision/ParallelPipeline.h and .cpp -> removed because empty class, not used and not referenced in CMakeLists. - DevBaseMonitor: appears to be used but not referenced in CMakeLists -> added. - SofaKernel/modules/SofaHelper/src/sofa/helper/io/MassSpringLoader.h -> removed; - SofaKernel/modules/SofaHelper/src/sofa/helper/io/bvh -> removed. - SofaKernel/modules/SofaHelper/src/sofa/helper/logging/LoggerMessageHandler.h and .cpp -> removed because not used and not referenced in CMakeLists. - SofaKernel/modules/SofaHelper/src/sofa/helper/FnDispatcher.cpp -> removed because empty, and not referenced in CMakeLists. - SofaKernel/modules/SofaSimulationCore/src/sofa/simulation/ChangeListener.h and .cpp -> removed because not used, and not referenced in CMakeLists. - SofaKernel/modules/SofaSimulationCore/src/sofa/simulation/MechanicalMatrixVisitor.h -> removed because empty, and not referenced in CMakeLists. - SofaKernel/modules/Sofa.Type/src/sofa/type/Color.cpp -> removed because not referenced in CMakeLists. The code in this file is not required. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ____________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2333:1148,log,logging,1148,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2333,2,"['Log', 'log']","['LoggerMessageHandler', 'logging']"
Testability,"beginEdit was used without endEdit. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2778:575,test,test,575,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2778,2,['test'],['test']
Testability,"benchmark.; > ; > My guest would be that solving one big system (the merge of both objects) is slower than solving to smaller system.; > ; > However, solving two system independently should, I think, produce incorrect results as; > ; > 1. You are applying the interactions (for example, contact forces) at different solving states. For example, the first object is solved, its node positions are updated to the step t+1. Collisions are then computed. But the state of the second object is still at the time step t. Oscillation will therefore probably happen and the convergence will be delayed.; > ; > 2. In addition, the solution state with both objects merged under the same system takes into account the interaction between the two objects. For example, when both objects are merged into a same system, you can create entries inside the system matrix to create a relationship between a node in the first object and a node in the second object. This is not possible when the two objects are separated.; > ; > ; > **TLDR**: Solving two objects independently is faster than solving one big system containing both objects. However it will take longer to converge to a steady solution (in number of steps), and even probably converge to an incorrect solution. Thank you for this explanation. It makes more sense. If I understood correctly, the group manager would help the performances compared to a single system. Here, we compare to two systems (one per cube). I'll add a third scene in this benchmark with a single system, to be more rigorous. I expect the same result from ""single system"" and ""two systems + group manager"". I expect better performances only in case the two cubes are not in contact, am I right?. Can we say that the best practice would be to start the design of a simulation scene with a single system, without group manager? And if performances are poor, it can be improved with a group manager, knowing its drawbacks (such as hiding a selection of solver properties to the user).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842964385:1527,benchmark,benchmark,1527,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842964385,1,['benchmark'],['benchmark']
Testability,"big, big fatass PR (because of moves mainly). ~~First, check if not breaking with the CI~~. Cleanup of framework's modules, in the same way as the components. What have been done in this PR (a picture better than a thousand words). ![Screenshot 2022-04-19 at 14 26 58](https://user-images.githubusercontent.com/11028016/164003830-d6ea438d-ed1f-47ac-9902-82e182544620.png). - no more Sofa.* folder; - all gathered in the same folder; - clean and tidy; - all Simulation modules in a Simulation Folder (no more weird split Sofa.SimulationCore in framework and SimulationCommon/Graph modules); - all modules names are Sofa.ModuleName (with compat or aliases) ; - not breaking (💦). # Discussions; - I put all the modules in a Framework but modules name, folders and namespaces (i.e like SofaNG) does not take into account that (and IMO I dont want). Thing is, I would find weird to put those modules directly into the root/ . But it is just an opinion.; - No Sofa.Framework nor Sofa.Simulation meta module (like SofaFramework now). I prefer this way but more opinions are welcome. ****. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876:1621,test,test,1621,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876,2,['test'],['test']
Testability,"bilateralinteractionconstraint was in it's own namespace: `sofa::component::constraint::lagrangian::model::bilateralinteractionconstraint`; with some using to declare it in `sofa::component::constraint::lagrangian::model`. I don't know if it was done on purpose?. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3468:803,test,test,803,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3468,2,['test'],['test']
Testability,"boost::filesystem is the last dependency on a (compiled) boost library.; However, SOFA is still dependent on header-only boost libraries (for graph, stable_vector and intrusive_ptr especially); (config of the target Boost::boost is in Sofa.Type). The change is really easy. just replace boost::filesystem with std::filesystem.; The only non trivial 1-1 replacement was for managing unicode path (not sure on the change actually). This is finally possible because minimum requirement is ubuntu 20.04 (with an updated version of gcc supporting std::filesystem instead of std::experimental::filesystem) and macOS 10.15 (same with its clang version/mac SDK). [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/177]; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2342:1266,test,test,1266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2342,2,['test'],['test']
Testability,"boost::locale was only once in FileRepository ; and since we can use std::locale from the STL, this library seems not useful anymore. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1033:385,test,test,385,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1033,2,['test'],['test']
Testability,"boost::program_option was introduced in SofaHelper because of the utility class ArgumentParser. ; This class is only used from application/gui-related modules, so this file and the boost::program_option dependency are moved into SofaGuiCommon. And boost::system seems not used at all so lets remove this unused thing. SofaFramework needs now only:; - thread (for the not-so-used TimeoutWatcher) and could be replaced with the future [std::jthread](https://en.cppreference.com/w/cpp/thread/jthread) from C++20; - filesystem, which could be removed if std::filesystem could be used everywhere 😥; The other boost dependencies (stable_vector, intrusive_ptr, graph?) seems to be usable with a header-only version.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1848:1249,test,test,1249,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1848,2,['test'],['test']
Testability,btw why have you redundant values? This is not logical for an indice map.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4738#issuecomment-2114760464:47,log,logical,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4738#issuecomment-2114760464,1,['log'],['logical']
Testability,"btw, maybe one VM of each OS should do a make install to test the cpack config.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/194#issuecomment-284471982:57,test,test,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/194#issuecomment-284471982,1,['test'],['test']
Testability,"build is good, tests are good, gentle bump :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/368#issuecomment-325585225:15,test,tests,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/368#issuecomment-325585225,1,['test'],['tests']
Testability,build/tests seem good now,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/347#issuecomment-325585516:6,test,tests,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347#issuecomment-325585516,1,['test'],['tests']
Testability,"by filtering duplicates warnings/errors/crashes. This should fix JVM heap problems on small VMs when parsing scene-testing/warnings.txt, scene-testing/errors.txt and scene-testing/crashes.txt. Please don't forget the real problem is that we have 60k+ scene-test warnings... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/555:115,test,testing,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/555,6,['test'],"['test', 'testing']"
Testability,"can you point the test that is not wworking, it is impossible to find it in jenkins menu, even more with a low bandwidth",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1967652226:18,test,test,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1967652226,1,['test'],['test']
Testability,"cene (inspired from TriangleModel.scn), LMDNewProximityIntersection :~~; - ~~is not checking at all if there is a filter for each collision model (crashes like a charm)~~; - ~~point/line filters cannot work (infinite loop)~~; - ~~displays a lot of debug for fun~~. ~~After fixing (totally randomly), I have finally implemented what I wanted from the start, which was lettingLMDNewProximityIntersection managing the filters, and not the CollisionModel themselves. ; Bonus point, it checks if there is a filter for each collision model and is set to Invalid if not (should not crash then)~~. ~~I really wondered whether or not simply deleting this Intersection (and the associated LMDFilter) as the latest meaningful commits were clearly stating it was a work in progress. But it seems to work so thats why I kept it (and by pity as well).~~. ~~@ChristianDuriez whats your opinion on this component ?~~. EDIT: After a meeting with other sofa-dev guys, it has been decided to totally remove this component from the code base, as there was no example, no test and it was even not working before this PR.; As such, I removed:; - LMDNewProximityIntersection ; - Point/Line/TriangleLocalMinDistanceFilter; - and the newly created example.; I let the headers to inform the eventual unfortunate user that these headers must not been used anymore, and update the ComponentChange list. I have squashed the first commit, so IF ONE DAY, people wants to resurrect this code (which was working in the end), one can just come back to the commit https://github.com/sofa-framework/sofa/pull/2272/commits/0d9a1af8d14b1fa508400b05b83588a9d704e34c. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2272:1430,test,test,1430,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2272,1,['test'],['test']
Testability,"change condition. Fix #1857 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1868:569,test,test,569,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1868,2,['test'],['test']
Testability,"changes taken into account, only the test to go!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-655631523:37,test,test,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-655631523,1,['test'],['test']
Testability,cherry-pick only the fix in TopologicalChangeProcessor submitted by @fangzhouzisb in PR #1217 ; The other fix needs further discussion. Fix #1213. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1247:398,test,test,398,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1247,2,['test'],['test']
Testability,"ck wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/487:2740,test,test,2740,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487,2,['test'],['test']
Testability,"classid is return the ClassInfo associated for a type. ; As there is a static private field in the classid function the first call is used to initialized this static structure. ; The only usage I can see of calling that explicitely is that, because of the multi-threading the initialization was not done properly.; But since c++ 11, initialization of static member is standardize offer thread-safetiness guarantees.; Se we can probably remove that. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1906:988,test,test,988,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1906,2,['test'],['test']
Testability,"coefficient is always zero (since for no strain we have no stress). For examples the coefficients for polynomials [3,2,4] will be put as [a1,a2,a3,b1,b2,c1,c2,c3,c4].; The dedication of jacobian matrix for PolynomialSpringForceField is given below; ![Pol1](https://user-images.githubusercontent.com/28653498/79741283-45f34c00-8301-11ea-8472-778b8b4c4dc4.JPG); ![Pol2](https://user-images.githubusercontent.com/28653498/79741289-4855a600-8301-11ea-86fc-b1a2aa29b92c.JPG); ![Pol3](https://user-images.githubusercontent.com/28653498/79741294-4ab80000-8301-11ea-8ef9-ff2a29603218.JPG); ![Pol4](https://user-images.githubusercontent.com/28653498/79741295-4be92d00-8301-11ea-9ef8-a444c6d23f44.JPG); I guess the dedication has to be added as documentation, but I do not know how to add it. For RestShapeSpring I added an exponetial addition to the denominator to avoid Nan problems for cases when spring has a zero length. As a result, the stress simulation is shifted compared with polynomial values, but it keeps its nonlinearity. Here is the dedication of a derivative; ![RestPol1](https://user-images.githubusercontent.com/28653498/79741632-de89cc00-8301-11ea-95a5-72803bb1d259.JPG); ![RestPol2](https://user-images.githubusercontent.com/28653498/79741636-e0ec2600-8301-11ea-87f6-fd7ce1e8c3d1.JPG); ![RestPol3](https://user-images.githubusercontent.com/28653498/79741643-e34e8000-8301-11ea-8ce7-5e44658d802d.JPG); ![RestPol4](https://user-images.githubusercontent.com/28653498/79741646-e3e71680-8301-11ea-9d20-5c1327fb4080.JPG). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342:2472,test,test,2472,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342,2,['test'],['test']
Testability,compilation fails @epernod but further to #2868 it should pass now. [ci-build][with-all-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2869#issuecomment-1106062059:88,test,tests,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2869#issuecomment-1106062059,1,['test'],['tests']
Testability,"concept. Currently, I run the checks on a slave on ci.inria.fr, and the current POC does a minimalist build / install / run tests workflow. But I think it would be worth asking ourselves what the perfect CI/CD pipeline could be for SOFA & it's plugins. In my mind, I'd like this:. SOFA:; - build / run tests (of course...); - build documentation (doxygen, sphinx...) & deploy on github pages / readthedocs / website; - build docker image & push on docker hub or equivalent (consistent build environment); - generate standalone binaries, zip & upload on github pages / website (SOFA-latest / sofa-nightly build...). PLUGINS:; - load docker image, or wget binaries generated by SOFA; - build / run tests (of course...); - build documentation (doxygen, sphinx...) & deploy on github pages / readthedocs / website; - build docker image & push on docker hub or equivalent; - generate binaries, zip & upload on github pages / website; ; ADVANTAGES of github actions vs JK2:; - ALL CI/CD config centralized in a .github folder in the git repository; - NO separate tool but Github's interface; - SUPER DUPER KICKASS interface design from github, gives direct access to all logs, checks, status badges etc. for each workflow / job / step in the Github checks processes. ![plop2](https://user-images.githubusercontent.com/13734391/69730387-3e4fc280-1128-11ea-8f91-20eeb660d233.png). DISADVANTAGES:; - Still in beta (some bugs noticed, especially when running in self-hosted slaves...); - A lot to recode given what @guparan did in JK2; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1225:1290,log,logs,1290,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1225,3,"['log', 'test']","['logs', 'test']"
Testability,"conditioner for ShewchukPCGLinearSolver; - `examples/Components/linearsolver/preconditioner/FEMBAR-ShewchukPCGLinearSolver-NoPreconditioner.scn`: ShewchukPCGLinearSolver with no preconditioner. Similar to the classical CG. Can be used for comparison.; - `examples/Components/linearsolver/preconditioner/FEMBAR-ShewchukPCGLinearSolver-WarpedAsyncSparseLDLSolver.scn`: AsyncSparseLDLSolver used as a preconditioner for ShewchukPCGLinearSolver. When the matrix has not been assembled, it is warped using a RotationFinder. This is done using an intermediate component: WarpPreconditioner. All the other scenes from the `examples/Components/linearsolver` folder have been modified so it is easy to change the resolution of the deformable beam. `totalMass` instead of `vertexMass`, and `BoxROI` instead of raw indices. In WarpPreconditioner, an additional Data is introduced to request matrix assembly at a given frequency. This is to minimize the cost of matrix assembly. Instead of assembling the matrix, the old one is used, taking into account the rotations compared to the previous time step. The same mechanism exists in ShewchukPCGLinearSolver. There are some refactoring in SparseLDLSolver to make more elegant code (without duplicated code) in AsyncSparseLDLSolver, but no changes are introduced.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2661:2457,test,test,2457,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661,2,['test'],['test']
Testability,"config.h must be included before ObjectFactory. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4740:587,test,test,587,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4740,4,['test'],['test']
Testability,"considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/sc",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1614,test,test,1614,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977,2,['test'],['test']
Testability,"contains #2534 . Just restore from old repository and update the files to compile with up to date master branch. ; No optimization or cleaning done yet. In term of performances, simulation of a Beam of 3645 Hexahedra:; - CPU: ~42.2 fps; - CUDA: ~180 fps. Using those scenes : ; sofa-src/applications/plugins/SofaCUDA/examples/beam10x10x46-hexafem-implicit-CPU.scn; sofa-src/applications/plugins/SofaCUDA/examples/beam10x10x46-hexafem-implicit-CUDA.scn. ![image](https://user-images.githubusercontent.com/21199245/145564675-5c399ecc-93ab-4fee-8135-b4c1b5459e2d.png). NB: simulations were performed without rendering the forcefield.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2535:1171,test,test,1171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2535,2,['test'],['test']
Testability,"continue porting changes from old branches: https://github.com/epernod/sofa/pull/12/files. getTetrahedron(i) perform a test if i is not out of bounds.; When a function is called often and loop on the list of tetrahedra, it is best to get a ref to the array and loop on it. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4639:119,test,test,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4639,3,['test'],['test']
Testability,"continue porting old changes from branch https://github.com/epernod/sofa/pull/13/files. Some cleaning in Qt Gui:; - Rome old options not used? like m_isEmbeddedViewer or m_createViewersOpt; - Store SofaViewer* directly to avoid multiple dynamic casts. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4641:791,test,test,791,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4641,2,['test'],['test']
Testability,"core::MechanicalParams*, SReal d);; SOFA_CORE_API SReal dt(const sofa::core::MechanicalParams*);; }; }. namespace sofa::core::visual::visualparams; {; SOFA_CORE_API VisualParams* defaultInstance();. SOFA_CORE_API ExecParams* asExecParams(sofa::core::visual::VisualParams*);; SOFA_CORE_API const ExecParams* asExecParams(const sofa::core::visual::VisualParams*);. SOFA_CORE_API sofa::core::visual::DrawTool* getDrawTool(VisualParams* params);; SOFA_CORE_API sofa::core::visual::DisplayFlags& getDisplayFlags(VisualParams* params);; SOFA_CORE_API sofa::core::visual::DrawTool* getDrawTool(const VisualParams* params);; SOFA_CORE_API const sofa::core::visual::DisplayFlags& getDisplayFlags(const VisualParams* params);; }; ```. The PR didn't changed existing simulation behavior or API and thus:; - shouldn't have any impact on sofa simulations; - shouldn't requires code refactoring. Because of the cleaning of the header dependency graph, third party code to include explicity the header files they are using.; The following ones are less visible:; ```cpp; #include<sofa/core/ExecParams.h>; #include<sofa/core/ConstraintParams.h>; #include<sofa/core/MechanicalParams.h> ; #include<sofa/core/visual/VisualParams.h>; #include<sofa/core/visual/DisplayFlags.h>; #include<sofa/core/visual/DrawTool.h>; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1794:3513,test,test,3513,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794,2,['test'],['test']
Testability,could you put the names of the falling tests in the description for the records.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-822276662:39,test,tests,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2017#issuecomment-822276662,1,['test'],['tests']
Testability,"cripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). Start: 'OglModel'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). ReconnectSofaScene; UnityEngine.Debug:Log (object); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:480); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). SofaContextAPI::loadScene method returns: success (bool) for scene: C:/Users/dhananjay/unity_projects/testSofa/Assets/SofaUnity/Scenes/SofaScenes/tissue.scn; UnityEngine.Debug:LogError (object); SofaUnityAPI.SofaContextAPI:loadScene (string) (at Assets/SofaUnity/Plugins/SofaUnityAPI/SofaContextAPI.cs:189); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:486); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). ## SofaVisualModel:Reconnect ; UnityEngine.Debug:Log (object); SofaUnity.SofaUnityRenderer:Reconnect () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaUnityRenderer.cs:109); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:495); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaConte",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4156:4095,test,testSofa,4095,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4156,1,['test'],['testSofa']
Testability,cro](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-multiple-statement-macro.html) | [hicpp-no-malloc](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-no-malloc.html) |; | [bugprone-string-constructor](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-string-constructor.html) | [hicpp-noexcept-move](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-noexcept-move.html) |; | [bugprone-suspicious-memset-usage](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-suspicious-memset-usage.html) | [hicpp-signed-bitwise](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-signed-bitwise.html) |; | [bugprone-undefined-memory-manipulation](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-undefined-memory-manipulation.html) | [hicpp-special-member-functions](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-special-member-functions.html) |; | [bugprone-use-after-move](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-use-after-move.html) | [hicpp-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-static-assert.html) |; | [bugprone-virtual-near-miss](https://clang.llvm.org/extra/clang-tidy/checks/bugprone-virtual-near-miss.html) | [hicpp-undelegated-constructor](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-undelegated-constructor.html) |; | [cert-dcl03-c](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl03-c.html) | [hicpp-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-auto.html) |; | [cert-dcl21-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl21-cpp.html) | [hicpp-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-emplace.html) |; | [cert-dcl50-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl50-cpp.html) | [hicpp-use-equals-default](https://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-equals-default.html) |; | [cert-dcl54-cpp](https://clang.llvm.org/extra/clang-tidy/checks/cert-dcl54-cpp.html) | [hicpp-use-equals-delete](https://clang.llv,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:4154,assert,assert,4154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,2,['assert'],['assert']
Testability,"ct on both sides provided the sparsity pattern does not change (on either side). A python context manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/411:1228,assert,assert,1228,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411,1,['assert'],['assert']
Testability,"ction object. Instead, it's an empty object which creates a `BruteForceBroadPhase` and a `BVHNarrowPhase` component, and warn the user.; - `DirectSAP` is no longer a collision detection object. Instead, it's an empty object which creates a `BruteForceBroadPhase` and a `DirectSAPNarrowPhase` component, and warn the user.; - `BruteForceDetection` has been replaced with `BruteForceBroadPhase` and `BVHNarrowPhase` in all scenes (xml, python etc); - `CudaCollisionDetection` no longer inherits from `BruteForceDetection`. Instead, it inherits from `BruteForceBroadPhase` and `NarrowPhaseDetection`. In a future PR, this component can be transformed to a narrow phase only.; - Fix code where `BruteForceDetection` is used. If `BruteForceDetection` is found in the scene, the warning to the user looks like:; ```; [DEPRECATED] [BruteForceDetection(bruteForceDetection1)] BruteForceDetection component is deprecated. ; As a replacement, use a BroadPhase component, such as [BruteForceBroadPhase, IncrSAP, ParallelBruteForceBroadPhase, RayTraceDetection], ; AND a NarrowPhase component, such as [BVHNarrowPhase, DirectSAPNarrowPhase, IncrSAP, ParallelBVHNarrowPhase, RayTraceDetection]. ; BruteForceBroadPhase and BVHNarrowPhase have been automatically added to your scene for backward compatibility. ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2118:2279,test,test,2279,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2118,2,['test'],['test']
Testability,"ction of a key among the list. In `OptionsGroup`, everything is dynamic, whereas `SelectableItem` is designed to be static. Disadvantages of `OptionsGroup`:. ```cpp; OptionsGroup foo{{""optionA"", ""optionB""}};; foo.setSelectedItem(12); //out of bounds; foo.setSelectedItem(""optionC""); //this key does not exist. if (foo.getSelectedId() == 0) // 0 has no meaning here. We don't know what 0; // refers to. In addition, the order of the options can change; {; ; }; ```. In `SelectableItem`:. - The list of items is included in the type and cannot change:. ```cpp; struct TestSelectableItem final : sofa::helper::SelectableItem<TestSelectableItem>; {; static constexpr std::array s_items {; sofa::helper::Item{""small"", ""small displacements""},; sofa::helper::Item{""large"", ""large displacements""},; };; };; ```. The consequences:. - Constant number of items: . ```cpp; static constexpr auto size = TestSelectableItem::numberOfItems();; ```. - List of keys is static:. ```cpp; static const auto& allKeys = TestSelectableItem::allKeysAsString();; ```. - Constructor can be `constexpr`:. ```cpp; static constexpr TestSelectableItem foo(""large"");; ```. It allows to use the type in a `constexpr` context. For example:. ```cpp; switch ( d_resolutionMethod.getValue() ); {; case ResolutionMethod(""ProjectedGaussSeidel""):; case ResolutionMethod(""NonsmoothNonlinearConjugateGradient""):; {; buildSystem_matrixAssembly(cParams);; break;; }; case ResolutionMethod(""UnbuiltGaussSeidel""):; {; buildSystem_matrixFree(numConstraints);; break;; }; default:; msg_error() << ""Wrong \""resolutionMethod\"" given"";; }; ```. There is compile-time check that any of the `ResolutionMethod(""ProjectedGaussSeidel""), ResolutionMethod(""NonsmoothNonlinearConjugateGradient""), ResolutionMethod(""UnbuiltGaussSeidel"")` exist. If it does not exist, it does not compile. It is preferable to force the `constexpr` context:. ```cpp; static constexpr ResolutionMethod NonsmoothNonlinearConjugateGradient(""NonsmoothNonlinearConjugateGradient"");; i",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5062:1120,Test,TestSelectableItem,1120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5062,1,['Test'],['TestSelectableItem']
Testability,"ction. - Master branch (commit df49f3a754264489b14db69b38862a5b45d57168). ```; 100 iterations done in 12.9731 s ( 7.70827 FPS).; ```. ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 5 15.41 1 0.01 121.72 98.03 20.57 98.03 77.48 .....Get Compliance; ```. - This PR (without parallelization). The benchmark should be similar to the master branch. ```; 100 iterations done in 13.1572 s ( 7.6004 FPS).; ```. ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 5 16.31 1 0.01 134.76 98.34 22.21 98.34 76.54 .....Get Compliance; ```. - This PR (with parallelization). ```; 100 iterations done in 5.94345 s ( 16.8253 FPS).; ```. ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 5 15.76 1 0.01 30.62 26.85 5.55 26.85 47.91 .....Get Compliance; ```. On my machine there is a nice speedup of x3.66 on the `Get Compliance` timer, and x2.18 in terms of global FPS. # Additional Benchmarks. I wanted to make sure that the usual solve of SparseLDLSolver did not regress in terms of performances. I benchmarked `examples/Component/LinearSolver/Direct/FEMBAR_SparseLDLSolver.scn` on 10000 steps. - Master branch (commit df49f3a754264489b14db69b38862a5b45d57168). ```; 10000 iterations done in 28.2657 s ( 353.785 FPS).; ```. - This PR. ```; 10000 iterations done in 28.3223 s ( 353.078 FPS).; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986:1342,benchmark,benchmarked,1342,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986,3,"['benchmark', 'test']","['benchmarked', 'test']"
Testability,"ctions like invert, etc. when the code did not called them from their respective namespace.It was not a problem because the compiler could find them previously thanks to [ADL](https://en.wikipedia.org/wiki/Argument-dependent_name_lookup).; Fixing is easy by just adding the respective namespace.; - vector_device now needs a new template parameter, implementing ZeroConstructor and SimpleCopy (already done in SofaCUDA and SofaOpenCL). ### Functionality:; - vector does not use the Messaging mechanism anymore; it was used in the `int` and `unsigned int` specialized version of read(). Instead, I replaced it with std::cerr AND setting a failbit to the resulting stream (which should have been done before actually).; Furthermore, I also changed Data to catch any cerr message (if any) and transpose it into the Messaging mechanism (if the stream as a failbit flag enabled) ; - vector can check bounds with the operator[], in debug mode. ; Before, it was displaying a message (with the Messaging mechanism), tried to dump the stack and quit on an assertion error.; Now it throws an exception (with the same message) which : ; - makes it crash if it is not caught (like before actually); - displays the message and carry on if caught somewhere (and can further debug with stack trace or whatever); which is a not so-bad solution in my opinion. ## Talking; - the cerr thingy; - template parameters; - access bound thing. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1893:2121,assert,assertion,2121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1893,1,['assert'],['assertion']
Testability,"ctor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParent",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3722,test,tests,3722,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"ctory. CHANGE; [SofaHelper] ; - `PluginManager` : keep only a single version of the `loadPlugin` method. Also the method returns true; even if the plugin is already loaded. Returning false is kept only for real failures, whereby the library could ; not be loaded. If it is important to check wether or not a plugin is already loaded, the result of the `pluginIsLoaded` method can be inspected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the e",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/487:2485,test,test,2485,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487,1,['test'],['test']
Testability,"cxxopts throws exceptions when same names are added, which obviously crashes the whole program because they are uncaught. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4947:661,test,test,661,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4947,2,['test'],['test']
Testability,"cy and suppress this warning.; Call Stack (most recent call first):; SofaKernel/modules/Sofa.Config/cmake/SofaMacrosConfigure.cmake:112 (cmake_dependent_option); SofaKernel/modules/Sofa.Config/cmake/SofaMacrosConfigure.cmake:141 (sofa_add_generic); modules/CMakeLists.txt:38 (sofa_add_plugin); This warning is for project developers. Use -Wno-dev to suppress it. Adding plugin SofaOpenglVisual; Adding plugin SofaMiscTopology; Adding plugin SofaMiscExtra; Adding plugin SofaMiscForceField; Adding plugin SofaMiscEngine; Adding plugin SofaMiscSolver; Adding plugin SofaMiscFem; Adding plugin SofaMiscMapping; Adding plugin SofaMiscCollision; SofaMiscModule: build all maintained sofa components.; Found Boost: E:/GitHub/vcpkg/installed/x64-windows/include (found version ""1.77.0"") found components: program_options ; -- SofaGuiCommon: Sofa.GL dependent features enabled.; SofaGuiQt: will use Qt5; Adding collection SofaComponentAll; J:/GitHub/sofa/src/applications/plugins/SofaHighOrder does not exist and will be ignored.; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; Python:; Version: 3.9.7; Executable: D:/11631/miniconda3/python.exe; Headers: D:/11631/miniconda3/include; Libraries: D:/11631/miniconda3/libs/python39.lib; User site: C:\Users\11631\AppData\Roaming\Python\Python39\site-packages; pybind11:; Version: 2.8.1; Config: E:/GitHub/vcpkg/installed/x64-windows/share/pybind11/pybind11Config.cmake; Adding plugin LMConstraint; SofaDistanceGrid not found: DistanceLM codes will not be compiled; Adding application runSofa; Write Plugin list at J:/GitHub/sofa/build/bin/plugin_list.conf.default; Configuring incomplete, errors occurred!; See also ""J:/GitHub/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""J:/GitHub/sofa/build/CMakeFiles/CMakeError.log"". how can i solve this problem，thank you",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2814:5011,log,log,5011,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2814,2,['log'],['log']
Testability,"d objects, ; 3. A `SubsetMultiMapping` that will make the link between the two provided objects and the new mechanical state; 4. The spring force field. Since `SubsetMultiMapping` was initially in SofaMiscMapping, it has been moved into SofaBaseMechanics. A compatibility layer is available. Other components using `StiffSpringForceField` had to be adapted to create also the extra components. An example is `AttachBodyPerformer` which creates the spring between an object and the mouse (shift + clic). WARNING:; Since `StiffSpringForceField` is now necessarily located in a mapped node, its stiffness matrix is not mapped in case of a built linear system. The forces are then computed explicitly only. This issue will be addressed in the new design of the matrix assembly. TODO:. - [x] A description for this PR; - [ ] Handle topological changes in `SpringForceField` -> see https://github.com/sofa-framework/sofa/pull/2653 and https://github.com/sofa-framework/sofa/pull/2729; - [x] Deal with `BoxStiffSpringForceField` -> see https://github.com/sofa-framework/sofa/pull/2621; - [x] Compilation and tests issues on CI (CUDA); - [x] In `AttachBodyPerformer`, a Node remains in the scene when `AttachBodyPerformer` is destroyed. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/224]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554:2326,test,tests,2326,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554,3,['test'],"['test', 'tests']"
Testability,"d paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:1245,test,test,1245,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['test'],['test']
Testability,"d to be static. Disadvantages of `OptionsGroup`:. ```cpp; OptionsGroup foo{{""optionA"", ""optionB""}};; foo.setSelectedItem(12); //out of bounds; foo.setSelectedItem(""optionC""); //this key does not exist. if (foo.getSelectedId() == 0) // 0 has no meaning here. We don't know what 0; // refers to. In addition, the order of the options can change; {; ; }; ```. In `SelectableItem`:. - The list of items is included in the type and cannot change:. ```cpp; struct TestSelectableItem final : sofa::helper::SelectableItem<TestSelectableItem>; {; static constexpr std::array s_items {; sofa::helper::Item{""small"", ""small displacements""},; sofa::helper::Item{""large"", ""large displacements""},; };; };; ```. The consequences:. - Constant number of items: . ```cpp; static constexpr auto size = TestSelectableItem::numberOfItems();; ```. - List of keys is static:. ```cpp; static const auto& allKeys = TestSelectableItem::allKeysAsString();; ```. - Constructor can be `constexpr`:. ```cpp; static constexpr TestSelectableItem foo(""large"");; ```. It allows to use the type in a `constexpr` context. For example:. ```cpp; switch ( d_resolutionMethod.getValue() ); {; case ResolutionMethod(""ProjectedGaussSeidel""):; case ResolutionMethod(""NonsmoothNonlinearConjugateGradient""):; {; buildSystem_matrixAssembly(cParams);; break;; }; case ResolutionMethod(""UnbuiltGaussSeidel""):; {; buildSystem_matrixFree(numConstraints);; break;; }; default:; msg_error() << ""Wrong \""resolutionMethod\"" given"";; }; ```. There is compile-time check that any of the `ResolutionMethod(""ProjectedGaussSeidel""), ResolutionMethod(""NonsmoothNonlinearConjugateGradient""), ResolutionMethod(""UnbuiltGaussSeidel"")` exist. If it does not exist, it does not compile. It is preferable to force the `constexpr` context:. ```cpp; static constexpr ResolutionMethod NonsmoothNonlinearConjugateGradient(""NonsmoothNonlinearConjugateGradient"");; if (d_resolutionMethod.getValue() != NonsmoothNonlinearConjugateGradient); {; ```. The compiler may not choos",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5062:1225,Test,TestSelectableItem,1225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5062,1,['Test'],['TestSelectableItem']
Testability,"d3x3BlocShortcut_CRS3x3d 12930 ns 12785 ns 49662; BM_CRS_Fixture<double>/Add3x3BlocScalar_double 67780 ns 66811 ns 10488; BM_CRS_Fixture<sofa::type::Mat<3,3,double>>/Add3x3BlocScalar_CRS3x3d 51334 ns 50603 ns 13884; ```. ## After. ```; -----------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; -----------------------------------------------------------------------------------------------------------------; BM_CRS_Fixture<double>/Add3x3Bloc_CRSdouble 76223 ns 76266 ns 9132; BM_CRS_Fixture<sofa::type::Mat<3,3,double>>/Add3x3Bloc_CRS3x3d 13781 ns 13808 ns 51026; BM_CRS_Fixture<sofa::type::Mat<3,3,double>>/Add3x3BlocShortcut_CRS3x3d 12434 ns 12458 ns 56014; BM_CRS_Fixture<double>/Add3x3BlocScalar_double 66579 ns 66637 ns 10530; BM_CRS_Fixture<sofa::type::Mat<3,3,double>>/Add3x3BlocScalar_CRS3x3d 49684 ns 49713 ns 14274; ```. # Conclusion. The benchmarks show that insertion of 3x3 blocs is faster in 3x3 bloc-based CRS matrices than before (the test `Add3x3Bloc_CRS3x3d`). It goes almost at the same speed than the bloc insertion specialized for 3x3 CRS matrices (benchmark BM_CRS_Fixture<sofa::type::Mat<3,3,double>>/Add3x3BlocShortcut_CRS3x3d).; The speed remains the same for CRS made doubles, which is expected. TODO: explain the benchmarks and push them. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; -",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2281:3052,benchmark,benchmarks,3052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2281,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"dObject(""DefaultAnimationLoop""); root.addObject(""DefaultPipeline""); root.addObject(""BruteForceBroadPhase""); root.addObject(""BVHNarrowPhase""); root.addObject(""DefaultContactManager""); root.addObject(; ""LocalMinDistance"",; alarmDistance=5.0,; contactDistance=0.5,; ). node_1 = root.addChild(""child_1""); node_1.addObject(""MechanicalObject"", position=[0, 0, 0] * 5). node_2 = root.addChild(""child_2""); node_2.addObject(""MechanicalObject"", position=[1, 1, 1] * 5). if case == TestCase.ONE_MODEL:; node_1.addObject(""PointCollisionModel""); elif case == TestCase.TWO_MODELS:; node_1.addObject(""PointCollisionModel""); node_2.addObject(""PointCollisionModel""); elif case == TestCase.NONE:; pass. return node_1, node_2. if __name__ == ""__main__"":; simulation = SimulationHandler(). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.NONE). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.ONE_MODEL). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.TWO_MODELS); ```. No components of the collision pipeline:; ![image](https://user-images.githubusercontent.com/29635054/191464004-4a820fde-efa7-4e3f-b448-a3f734daf367.png); -> No memory increase, even with two collision models. NewProximity; ![image](https://user-images.githubusercontent.com/29635054/191463963-c581e5ce-e315-401c-b9ed-1786c27b66c1.png); -> Some memory increase with one and no collision models, STRONG increase with two collision models. LocalMinDistance; ![image](https://user-images.githubusercontent.com/29635054/191464146-0e656a0d-8850-4b43-bdd3-b1a478fd4f14.png); -> Some memory increase with one and no collision models, STRONG increase with two collision models. As you can see, there is a memory increase with no collision models and one collision model,; but with two collision models, the increase is much stronger. This is why I suspect the leak is somewhere in the pipeline, not the; collision models themselves. ---------------------------------------------. ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318:2249,Test,TestCase,2249,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318,1,['Test'],['TestCase']
Testability,"ded via:; moc_MaterialDataWidget.cpp.o MaterialDataWidget.h DataWidget.h ModifyObject.h (1915 ms); MaterialDataWidget.cpp.o MaterialDataWidget.h DataWidget.h ModifyObject.h (1504 ms); moc_QDisplayDataWidget.cpp.o QDisplayDataWidget.h DataWidget.h ModifyObject.h (1473 ms); WDoubleLineEdit.cpp.o (1407 ms); DisplayFlagsDataWidget.cpp.o DisplayFlagsDataWidget.h DataWidget.h ModifyObject.h (1379 ms); QRGBAColorPicker.cpp.o QRGBAColorPicker.h DataWidget.h ModifyObject.h (1375 ms); ... 22925 ms: sofa/SofaKernel/modules/SofaCore/src/sofa/core/ObjectFactory.h (included 440 times, avg 52 ms), included via:; initOpenGLVisual.cpp.o (192 ms); PointSetTopologyAlgorithms.cpp.o (191 ms); initValidation.cpp.o (187 ms); DataDisplay.cpp.o (186 ms); DifferenceEngine.cpp.o (178 ms); MeshObjLoader.cpp.o (177 ms); ... 21119 ms: sofa/extlibs/gtest/include/gtest/internal/gtest-port.h (included 176 times, avg 119 ms), included via:; gtest-typed-test.cc.o gtest-typed-test.h (796 ms); gtest-port.cc.o (666 ms); gtest-death-test.cc.o gtest-death-test.h gtest-death-test-internal.h gtest-internal.h (650 ms); gtest-test-part.cc.o gtest-test-part.h gtest-internal.h (463 ms); gtest-filepath.cc.o gtest-filepath.h gtest-string.h (456 ms); gtest.cc.o gtest.h gtest-internal.h (246 ms); ... 20903 ms: sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/vector.h (included 156 times, avg 133 ms), included via:; MeshGmsh.cpp.o MeshGmsh.h Mesh.h (492 ms); MeshTopologyLoader.cpp.o MeshTopologyLoader.h Mesh.h (402 ms); Image.cpp.o Factory.inl (384 ms); SVector.cpp.o SVector.h (379 ms); GenerateRigid.cpp.o GenerateRigid.h Mesh.h (373 ms); TestMessageHandler.cpp.o TestMessageHandler.h (346 ms); ... 19960 ms: /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/pstl/glue_algorithm_defs.h (included 157 times, avg 127 ms), included via:; qglviewer.h camera.h QMap qmap.h qiterator.h qglobal.h algorithm (348 ms); manipulatedCameraFrame.h manipulatedFrame.h frame.h QObject qobject.h qobjectdefs.h qnamespace.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:35277,test,test,35277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['test'],['test']
Testability,"defaulttype::MatSym becomes sofa::type::MatSym. ## Breaking; Same as #1734:; - if inclusion of _defaulttype_ and _type_ namespace, the compiler cannot chose which one to chose for the free functions like invert, etc. when the code did not called them from their respective namespace.It was not a problem because the compiler could find them previously thanks to [ADL](https://en.wikipedia.org/wiki/Argument-dependent_name_lookup).; Fixing is easy by just adding the respective namespace. ## Talking. - An other contribution I would like to spread to the sofa code base: ; Instead of throwing a text information if the function cannot do (like matrix non invertible, etc), ; this should always return a boolean value and apply the [[nodiscard]] flag to oblige the user to use the return value.; This makes the compiler generates a warning; I would even push to make it a compilation error; More generally, it would be cool to use the [[nodiscard]] flag much more for critical code.; ~~I tried to even use the [[nodiscard ""MESSAGE""]] but this feature seems only included with c++20 so I may change this PR to run successfully on the CI.~~; As expected, this is not supported by the CI 🙁. - the compatibility layer still holds the dependency on helper for the messaging, so we should discuss about that. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1775:2108,test,test,2108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1775,2,['test'],['test']
Testability,"defrost-macos1011-0 (Defrost machine): AppleClang 8.0.0.8000042; sofa-ci-dev-macos109-0 (VM): AppleClang 6.0.0.6000051. The machine on which a build was done is printed at the beginning of the log.; Example: ""Building remotely on sofa-ci-dev-macos109-0"" in https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-792/CI_CONFIG=mac_clang-3.5,CI_PLUGINS=options,CI_TYPE=release/1/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/792#issuecomment-428505978:193,log,log,193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/792#issuecomment-428505978,1,['log'],['log']
Testability,"del:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). ReconnectSofaScene; UnityEngine.Debug:Log (object); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:480); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). SofaContextAPI::loadScene method returns: success (bool) for scene: C:/Users/dhananjay/unity_projects/testSofa/Assets/SofaUnity/Scenes/SofaScenes/tissue.scn; UnityEngine.Debug:LogError (object); SofaUnityAPI.SofaContextAPI:loadScene (string) (at Assets/SofaUnity/Plugins/SofaUnityAPI/SofaContextAPI.cs:189); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:486); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). ## SofaVisualModel:Reconnect ; UnityEngine.Debug:Log (object); SofaUnity.SofaUnityRenderer:Reconnect () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaUnityRenderer.cs:109); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:495); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaU",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4156:4169,Log,LogError,4169,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4156,1,['Log'],['LogError']
Testability,"dll; === CLASSES ===; BVHNarrowPhase; BarycentricMapping; BruteForceBroadPhase; CGLinearSolver; CollisionPipeline; CollisionResponse; EulerImplicitSolver; FreeMotionAnimationLoop; HexahedronFEMForceField; InteractiveCamera; LCPConstraintSolver; LightManager; LineCollisionModel; MatrixLinearSystem; MechanicalObject; MeshOBJLoader; MeshTopology; MinProximityIntersection; OglModel; PointCollisionModel; RequiredPlugin; SparseGridRamificationTopology; SpotLight; TriangleCollisionModel; UncoupledConstraintCorrection; UniformMass; VisualStyle; === TARGETS ===; Sofa.Component.AnimationLoop; Sofa.Component.Collision.Detection.Algorithm; Sofa.Component.Collision.Detection.Intersection; Sofa.Component.Collision.Geometry; Sofa.Component.Collision.Response.Contact; Sofa.Component.Constraint.Lagrangian.Correction; Sofa.Component.Constraint.Lagrangian.Solver; Sofa.Component.IO.Mesh; Sofa.Component.LinearSolver.Iterative; Sofa.Component.LinearSystem; Sofa.Component.Mapping.Linear; Sofa.Component.Mass; Sofa.Component.ODESolver.Backward; Sofa.Component.SolidMechanics.FEM.Elastic; Sofa.Component.StateContainer; Sofa.Component.Topology.Container.Constant; Sofa.Component.Topology.Container.Grid; Sofa.Component.Visual; Sofa.GL.Component.Rendering3D; Sofa.GL.Component.Shader; Sofa.Simulation.Core; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4422:4514,test,test,4514,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4422,2,['test'],['test']
Testability,do you know why is this fixing the problem @fredroy ?. Anyway I tested and it works :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4044#issuecomment-1636735864:64,test,tested,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4044#issuecomment-1636735864,1,['test'],['tested']
Testability,"dvancedTimer_deepTreeDisabled/16/2 0.016 ms 0.016 ms 40727 nbTimers=272; BM_AdvancedTimer_deepTreeDisabled/32/2 0.078 ms 0.078 ms 8960 nbTimers=1056; BM_AdvancedTimer_deepTreeDisabled/64/2 0.502 ms 0.516 ms 1000 nbTimers=4.16k; BM_AdvancedTimer_deepTreeDisabled/1/3 0.000 ms 0.000 ms 3733333 nbTimers=3; BM_AdvancedTimer_deepTreeDisabled/2/3 0.001 ms 0.001 ms 1120000 nbTimers=14; BM_AdvancedTimer_deepTreeDisabled/4/3 0.004 ms 0.004 ms 194783 nbTimers=84; BM_AdvancedTimer_deepTreeDisabled/8/3 0.029 ms 0.029 ms 24889 nbTimers=584; BM_AdvancedTimer_deepTreeDisabled/16/3 0.256 ms 0.255 ms 2635 nbTimers=4.368k; BM_AdvancedTimer_deepTreeDisabled/32/3 2.84 ms 2.85 ms 236 nbTimers=33.824k; BM_AdvancedTimer_deepTreeDisabled/64/3 63.2 ms 62.5 ms 11 nbTimers=266.304k; BM_AdvancedTimer_deepTreeDisabled/1/4 0.000 ms 0.000 ms 3200000 nbTimers=4; BM_AdvancedTimer_deepTreeDisabled/2/4 0.001 ms 0.001 ms 560000 nbTimers=30; BM_AdvancedTimer_deepTreeDisabled/4/4 0.016 ms 0.015 ms 44800 nbTimers=340; BM_AdvancedTimer_deepTreeDisabled/8/4 0.248 ms 0.246 ms 2800 nbTimers=4.68k; BM_AdvancedTimer_deepTreeDisabled/16/4 7.14 ms 7.08 ms 75 nbTimers=69.904k; BM_AdvancedTimer_deepTreeDisabled/32/4 203 ms 203 ms 3 nbTimers=1082.4k; BM_AdvancedTimer_deepTreeDisabled/64/4 4035 ms 4031 ms 1 nbTimers=17.0435M; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2645:8042,test,test,8042,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2645,2,['test'],['test']
Testability,"e anything. It's time for refactoring!. My focus was the refactoring of the unit tests. Before the PR, a unique class tested the 3 components using a series of `if`. I refactored the 3 classes in order to reduce the specific processing in the unit test, i.e. reduce the number of `if`. - The 3 classes now inherit from a common base class `BaseLinearElasticityFEMForceField`. I moved everything that was common (only regarding the unit test. More common code is remaining) in this class. It includes:; - A common `Data` for Young's modulus and Poisson's ratio. This way, they share type, the same default value, and the same description. Note that Young's modulus in `FastTetrahedralCorotationalForceField` and `TetrahedralCorotationalFEMForceField` was a scalar, and now it's a vector of scalars. This requires to add a common way to access the Young's modulus of the i-th element. This is also a breaking change. This allows to define a typed unit test for all 3 classes. The particularities of the classes are defined in a derived class of the unit test. To me, a great advantage, is that we identify clearly that there are unit tests for the 3 components, because there a file for each class. It was not obvious before. [ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/133]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778:1301,test,test,1301,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778,4,['test'],"['test', 'tests']"
Testability,"e that the MO object position vector won't be updated later on during time steps. However, if the same scene is run with a GUI, the problem disappears. The following scene can be taken as an example where a random displacement is imposed on a node before the time step, and the node position is printed afterwards. ```python; class Controller(Sofa.Core.Controller):; def __init__(self, MO):; super().__init__(); self.MO = MO. def onAnimateBeginEvent(self, _):; print(""\n\nonAnimateBeginEvent""); random_disp = np.random.normal(0, 1e-2, self.MO.position.value.shape); self.MO.position.value = self.MO.rest_position.value + random_disp; print(f""{random_disp[0]=}""); print(f""{self.MO.position.value[0]=}""). def onAnimateEndEvent(self, _):; print(""onAnimateEndEvent""); print(f""{self.MO.position.value[0]=}""). def createScene(root):; root.addObject('RequiredPlugin', pluginName=['BugPosition']); root.addObject(""MechanicalObject"", name=""MO"", template=""Vec3d"", position=[1, 0, 0]); root.addObject(""TestComponent"", position=""@MO.position""); root.addObject(Controller(root.MO)); ```. **Steps to reproduce**; I've put everything needed to reproduce the issue here https://github.com/jnbrunet/BugPosition. Hence, the following steps can be taken (the SOFA installation path must be changed, and SofaPython3 plugin must be installed alongside SOFA):; ```bash; export SOFA_ROOT=/opt/sofa; export PYTHONPATH=$PYTHONPATH:$SOFA_ROOT/plugins/SofaPython3/lib/python3/site-packages; ```; Then, compile and launch the scene; ```bash; git clone git@github.com:jnbrunet/BugPosition.git; cmake -DCMAKE_PREFIX_PATH=$SOFA_ROOT/lib/cmake -S BugPosition -B BugPosition/build -DCMAKE_BUILD_TYPE=Release; cmake --build BugPosition/build; python3 BugPosition/scene.py; ```; which should produce the erroneous results (random displacement isn't taken into account).; ```; (...); onAnimateBeginEvent; random_disp[0]=array([-0.01092411, -0.00742505, -0.01442109]); self.MO.position.value[0]=array([1., 0., 0.]); onAnimateEndEvent; sel",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2761:2356,Test,TestComponent,2356,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761,1,['Test'],['TestComponent']
Testability,"e the compiler could find them previously thanks to [ADL](https://en.wikipedia.org/wiki/Argument-dependent_name_lookup).; Fixing is easy by just adding the respective namespace.; - vector_device now needs a new template parameter, implementing ZeroConstructor and SimpleCopy (already done in SofaCUDA and SofaOpenCL). ### Functionality:; - vector does not use the Messaging mechanism anymore; it was used in the `int` and `unsigned int` specialized version of read(). Instead, I replaced it with std::cerr AND setting a failbit to the resulting stream (which should have been done before actually).; Furthermore, I also changed Data to catch any cerr message (if any) and transpose it into the Messaging mechanism (if the stream as a failbit flag enabled) ; - vector can check bounds with the operator[], in debug mode. ; Before, it was displaying a message (with the Messaging mechanism), tried to dump the stack and quit on an assertion error.; Now it throws an exception (with the same message) which : ; - makes it crash if it is not caught (like before actually); - displays the message and carry on if caught somewhere (and can further debug with stack trace or whatever); which is a not so-bad solution in my opinion. ## Talking; - the cerr thingy; - template parameters; - access bound thing. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1893:3032,test,test,3032,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1893,2,['test'],['test']
Testability,"e the timings for the `MechanicalMatrixMapper.pyscn` scene for 1000 time steps measured on my computer:. ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 74.24 112.80 77.26 2.76 77260.7 100 TOTAL; ...; 4 0.80 1 41.79 62.15 44.22 1.53 44.22 57.23 ....MBKBuild; 5 0.99 1 40.91 61.06 43.32 1.47 43.32 56.07 .....MMM-addKToMatrix; 6 0.99 1 1.69 3.69 1.89 0.17 1.89 2.45 ......jacobian; 6 2.88 1 6.29 9.88 6.85 0.34 6.85 8.86 ......stiffness; 6 9.73 1 16.17 23.13 16.55 0.50 16.55 21.42 ......compressStiffnessMatrix; 6 26.28 1 2.74 4.50 2.98 0.16 2.98 3.86 ......copyKToEigen; 6 29.26 1 0.24 0.54 0.28 0.02 0.28 0.36 ......copyJ1J2ToEigen; 7 29.48 1 0.05 0.14 0.06 0.01 0.06 0.08 .......copyJ2ToEigen; 6 29.54 1 9.06 18.67 10.47 0.75 10.47 13.55 ......Multiplication; 7 29.54 1 4.59 9.56 5.44 0.36 5.44 7.04 .......J1tKJ1; 7 34.98 1 0.76 2.15 0.88 0.11 0.88 1.14 .......J2tKJ2; 7 35.86 1 2.73 5.90 3.28 0.35 3.28 4.24 .......J1tKJ2; 7 39.14 1 0.77 1.77 0.86 0.10 0.86 1.12 .......J2tKJ1; 6 40.01 1 2.62 4.70 2.78 0.19 2.78 3.59 ......J1tKJ1-copy; 6 42.79 1 0 0 0 0 0 0 ......J2tKJ2-copy; 6 42.79 1 0.01 0.04 0.01 0 0.01 0.02 ......J1tKJ2-copy; 6 42.80 1 0.01 0.04 0.02 0 0.02 0.03 ......J2tKJ1-copy; ```. Work on the `MechanicalMatrixMapper` has been done in collaboration with @Esther-R. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2362:2152,test,test,2152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2362,2,['test'],['test']
Testability,"e to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.size() <<"" generated samples"" ;; ```; - Is functionnaly equivalent to the old code; - Shorter to write; - Consistant behavior with other component,; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended into Backlog depending on the end user a",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:1428,log,logger,1428,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,2,['log'],['logger']
Testability,"e"". This means that all the execution path are at least executed once. This is very hard to achieve an so a more manageable target is to be close to ""function coverage""+""branch coverage"" in which each line of the function is at least executed once. I found that in sofa a succesfull strategy is to make tests with ""Parameter value coverage"" in which in a method taking parameters, all the common values for such parameters be considered. This give good results and is really easy to do. More concretely in your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does i",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1059,test,tests,1059,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977,2,['test'],['tests']
Testability,"e. This assumption was problematic as it favor the testing of code paths that does not generate warning or errors instead of testing all the possible paths. To favor both valid and invalid paths this implicit behavior was remove and and made explicit using the ExpectMessage and MessageAsTestFailure raii's. In the process the old behavior of generating failure on errors was lost. . The PR mix the two and: ; - restores this old behavior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:1105,test,test,1105,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,2,['test'],['test']
Testability,"e.Node(""root""); self.nodes = createScene(self.root_node, case); Sofa.Simulation.init(self.root_node). def createScene(root, case: TestCase):; plugins = [; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ]; for plugin in plugins:; root.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root.addObject(""DefaultAnimationLoop""); root.addObject(""DefaultPipeline""); root.addObject(""BruteForceBroadPhase""); root.addObject(""BVHNarrowPhase""); root.addObject(""DefaultContactManager""); root.addObject(; ""LocalMinDistance"",; alarmDistance=5.0,; contactDistance=0.5,; ). node_1 = root.addChild(""child_1""); node_1.addObject(""MechanicalObject"", position=[0, 0, 0] * 5). node_2 = root.addChild(""child_2""); node_2.addObject(""MechanicalObject"", position=[1, 1, 1] * 5). if case == TestCase.ONE_MODEL:; node_1.addObject(""PointCollisionModel""); elif case == TestCase.TWO_MODELS:; node_1.addObject(""PointCollisionModel""); node_2.addObject(""PointCollisionModel""); elif case == TestCase.NONE:; pass. return node_1, node_2. if __name__ == ""__main__"":; simulation = SimulationHandler(). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.NONE). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.ONE_MODEL). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.TWO_MODELS); ```. No components of the collision pipeline:; ![image](https://user-images.githubusercontent.com/29635054/191464004-4a820fde-efa7-4e3f-b448-a3f734daf367.png); -> No memory increase, even with two collision models. NewProximity; ![image](https://user-images.githubusercontent.com/29635054/191463963-c581e5ce-e315-401c-b9ed-1786c27b66c1.png); -> Some memory increase with one and no collision models, STRONG increase with two collision models. LocalMinDistance; ![image](https://user-images.githubusercontent.com/29635054/191464146-0e656a0d-8850-4b43-bdd3-b1a478fd4f14.png); -> Some memory increase with one and no collis",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318:1910,Test,TestCase,1910,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318,1,['Test'],['TestCase']
Testability,e.g. Eigen among others. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/397:276,test,test,276,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/397,2,['test'],['test']
Testability,"eLineEdit.h (included 32 times, avg 871 ms), included via:; moc_MaterialDataWidget.cpp.o MaterialDataWidget.h DataWidget.h ModifyObject.h (1915 ms); MaterialDataWidget.cpp.o MaterialDataWidget.h DataWidget.h ModifyObject.h (1504 ms); moc_QDisplayDataWidget.cpp.o QDisplayDataWidget.h DataWidget.h ModifyObject.h (1473 ms); WDoubleLineEdit.cpp.o (1407 ms); DisplayFlagsDataWidget.cpp.o DisplayFlagsDataWidget.h DataWidget.h ModifyObject.h (1379 ms); QRGBAColorPicker.cpp.o QRGBAColorPicker.h DataWidget.h ModifyObject.h (1375 ms); ... 22925 ms: sofa/SofaKernel/modules/SofaCore/src/sofa/core/ObjectFactory.h (included 440 times, avg 52 ms), included via:; initOpenGLVisual.cpp.o (192 ms); PointSetTopologyAlgorithms.cpp.o (191 ms); initValidation.cpp.o (187 ms); DataDisplay.cpp.o (186 ms); DifferenceEngine.cpp.o (178 ms); MeshObjLoader.cpp.o (177 ms); ... 21119 ms: sofa/extlibs/gtest/include/gtest/internal/gtest-port.h (included 176 times, avg 119 ms), included via:; gtest-typed-test.cc.o gtest-typed-test.h (796 ms); gtest-port.cc.o (666 ms); gtest-death-test.cc.o gtest-death-test.h gtest-death-test-internal.h gtest-internal.h (650 ms); gtest-test-part.cc.o gtest-test-part.h gtest-internal.h (463 ms); gtest-filepath.cc.o gtest-filepath.h gtest-string.h (456 ms); gtest.cc.o gtest.h gtest-internal.h (246 ms); ... 20903 ms: sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/vector.h (included 156 times, avg 133 ms), included via:; MeshGmsh.cpp.o MeshGmsh.h Mesh.h (492 ms); MeshTopologyLoader.cpp.o MeshTopologyLoader.h Mesh.h (402 ms); Image.cpp.o Factory.inl (384 ms); SVector.cpp.o SVector.h (379 ms); GenerateRigid.cpp.o GenerateRigid.h Mesh.h (373 ms); TestMessageHandler.cpp.o TestMessageHandler.h (346 ms); ... 19960 ms: /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/pstl/glue_algorithm_defs.h (included 157 times, avg 127 ms), included via:; qglviewer.h camera.h QMap qmap.h qiterator.h qglobal.h algorithm (348 ms); manipulatedCameraFrame.h manipulatedFrame.h f",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:35222,test,test,35222,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['test'],['test']
Testability,"eMotionAnimationLoop so that it is more faithful to the actual equations, most notably by ; allowing only one linearisation of the mappings within the time step. ; - Update the API in order to compute a linearised version of the constraint forces, in a similar fashion to ; what is done in the Compliant plugin. . # Requirements ; The following PR are required in order to build this ; - #484 ✔️; - #450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API constructor needs to be passed the number of lines that are involved in the solving of this constraint equation. The previous implementat",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459:1123,test,testing,1123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459,1,['test'],['testing']
Testability,"ected beforehand. . [SofaGraphComponent] ; - `RequiredPlugin` component gives the ability to override the default suffix which is ""_d"" in debug mode. ; It also gives some more advanced options to extend the plugin search. # Remarks. I do not know which version of the GUI is still in use. However I believe that the widget that can add/remove plugins to the `PluginManager` should be removed since there is no valid reason to ; keep it. I am really not sure about the current state of SofaGTestMain. It is hidden somewhere in the folder hierarchy (inside tools directory), and its existence seems to imply that you cannot write a unit test inside sofa without relying on it to ""initialise Sofa"" which is absolutely not the case. See PR #471; Instead having a library which depends on gtest and SofaCore which ; - factorize some initialisation methods when they are actually required in the test `SetUp()` method; - provide some useful abstractions when you want to test some important concepts of a component, like what SofaTest wanted to do, but without the dependency bloat. A potential non exhaustive list of abstactions such a library could provide ; - Mapping ; - linearisation, ; - applyJ applyJT equivalence ; - ForceField; - linearisation; - addDForce addKToMatrix equivalence ; - addKToMatrix must give a SPD matrix (well actually in Sofa convention I think internal forcefields actually give a SND matrix but the idea remains... Nothing of this testing API would require the initialisation of a simulation / node. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/487:3305,test,testing,3305,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/487,3,['test'],"['test', 'testing']"
Testability,ed/4/3 0.030 ms 0.030 ms 23579 nbTimers=84; BM_AdvancedTimer_deepTreeDisabled/8/3 0.371 ms 0.368 ms 1867 nbTimers=584; BM_AdvancedTimer_deepTreeDisabled/16/3 5.12 ms 5.16 ms 100 nbTimers=4.368k; BM_AdvancedTimer_deepTreeDisabled/32/3 43.7 ms 43.2 ms 17 nbTimers=33.824k; BM_AdvancedTimer_deepTreeDisabled/64/3 235 ms 234 ms 3 nbTimers=266.304k; BM_AdvancedTimer_deepTreeDisabled/1/4 0.001 ms 0.001 ms 640000 nbTimers=4; BM_AdvancedTimer_deepTreeDisabled/2/4 0.010 ms 0.010 ms 74667 nbTimers=30; BM_AdvancedTimer_deepTreeDisabled/4/4 0.202 ms 0.200 ms 3446 nbTimers=340; BM_AdvancedTimer_deepTreeDisabled/8/4 5.57 ms 5.58 ms 112 nbTimers=4.68k; BM_AdvancedTimer_deepTreeDisabled/16/4 75.2 ms 74.7 ms 9 nbTimers=69.904k; BM_AdvancedTimer_deepTreeDisabled/32/4 624 ms 625 ms 1 nbTimers=1082.4k; BM_AdvancedTimer_deepTreeDisabled/64/4 7576 ms 7562 ms 1 nbTimers=17.0435M. ````. # After. ```; -----------------------------------------------------------------------------------; Benchmark Time CPU Iterations; -----------------------------------------------------------------------------------; BM_AdvancedTimer_begin_end 71.3 ns 71.5 ns 8960000; BM_AdvancedTimer_largeNumberTimers/128 0.004 ms 0.004 ms 160000; BM_AdvancedTimer_largeNumberTimers/512 0.019 ms 0.019 ms 37333; BM_AdvancedTimer_largeNumberTimers/4096 0.169 ms 0.169 ms 4073; BM_AdvancedTimer_largeNumberTimers/16384 0.693 ms 0.698 ms 1120; BM_AdvancedTimer_deepTreeEnabled/1/2 0.000 ms 0.000 ms 2800000 nbTimers=2; BM_AdvancedTimer_deepTreeEnabled/2/2 0.001 ms 0.001 ms 1120000 nbTimers=6; BM_AdvancedTimer_deepTreeEnabled/4/2 0.002 ms 0.001 ms 448000 nbTimers=20; BM_AdvancedTimer_deepTreeEnabled/8/2 0.006 ms 0.006 ms 112000 nbTimers=72; BM_AdvancedTimer_deepTreeEnabled/16/2 0.024 ms 0.024 ms 28000 nbTimers=272; BM_AdvancedTimer_deepTreeEnabled/32/2 0.112 ms 0.109 ms 5600 nbTimers=1056; BM_AdvancedTimer_deepTreeEnabled/64/2 0.661 ms 0.663 ms 896 nbTimers=4.16k; BM_AdvancedTimer_deepTreeEnabled/1/3 0.000 ms 0.000 ms 2240000 nbTimers=3;,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2645:3885,Benchmark,Benchmark,3885,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2645,1,['Benchmark'],['Benchmark']
Testability,"eformable_node.addObject(""LineCollisionModel"", group=0); deformable_node.addObject(""TriangleCollisionModel"", group=0); deformable_node.addObject(""FastTetrahedralCorotationalForceField"", youngModulus=60, poissonRatio=0.0). deformable_node.addObject(; ""PlaneForceField"",; normal=[0, 0, 1],; d=0.0,; stiffness=3000,; damping=1,; showPlane=False,; showPlaneSize=100,; ). deformable_node.addObject(""UniformMass"", totalMass=0.2); deformable_visual_node = deformable_node.addChild(""visual""); deformable_visual_node.addObject(""OglModel"", color=[1.0, 0.0, 0.0]); deformable_visual_node.addObject(""IdentityMapping""). box = deformable_node.addObject(""BoxROI"", box=(-35, -1, -1) + (35, 1, 5)); deformable_node.addObject(""FixedConstraint"", indices=box.indices.getLinkPath()); ```; </details>. ---------------------------------------------. ### Environment. **Context**. - System: Ubuntu 20.04; - Version of SOFA: master branch at commit 95e9357da1a457a2a158dfc26012b214ac0aa889; - State: ""Install directory"". ### Logs. Output on Segfault:. <details>; <summary>Click to expand!</summary>. ```bash; ########## SIG 11 - SIGSEGV: segfault ##########; sofa::helper::BackTrace::sig(int); sofa::component::topology::container::dynamic::PointSetTopologyContainer::setPointTopologyToDirty(); sofa::component::topology::container::dynamic::PointSetTopologyModifier::removePointsWarning(sofa::type::vector<unsigned int, sofa::type::CPUMemoryManager<unsigned int> >&, ; bool); sofa::component::topology::container::dynamic::TetrahedronSetTopologyModifier::removeTetrahedraProcess(sofa::type::vector<unsigned int, sofa::type::CPUMemoryManager<unsigned; int> > const&, bool); sofa::component::topology::container::dynamic::TetrahedronSetTopologyModifier::removeTetrahedra(sofa::type::vector<unsigned int, sofa::type::CPUMemoryManager<unsigned int> >; const&, bool); sofa::gui::component::performer::TopologicalChangeManager::removeItemsFromTriangleModel(sofa::component::collision::geometry::TriangleCollisionModel<sofa::defaul",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3202:5576,Log,Logs,5576,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3202,1,['Log'],['Logs']
Testability,"en::Dynamic ? 1 : 0); ; ; /// 1 if the constructor is equivalent to setting memory to 0; static constexpr auto ZeroConstructor = (std::is_base_of_v<Eigen::SparseMatrixBase<Derived>, Derived> ? 1 : 0);; ; /// 1 if copying the data can be done with a memcpy; static constexpr auto SimpleCopy = 0; ; ; /// 1 if the layout in memory is simply N values of the same base type; static constexpr auto SimpleLayout = 0;; ; /// 1 if this type uses integer values; static constexpr auto Integer = std::is_integral_v<Derived::Scalar>;; ; /// 1 if this type uses scalar values; static constexpr auto Scalar = std::is_floating_point_v<Derived::Scalar>;; ; /// 1 if this type uses text values; static constexpr auto Text = 0;; ; /// 1 if this type uses copy-on-write -> it seems to be THE important; static constexpr auto CopyOnWrite = 0;; ; /// 1 if this type is a container; static constexpr auto Container = 1;; ; /// largest known fixed size for this type, as returned by size(); static constexpr auto Size = (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime);; ; /// Number of elements in the container, or the 2nd dimension for arrays; static size_t size() { ; return (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime); ; }; ; /// Size of the smalest single element in the container; static size_t byteSize() { ; return sizeof(Derived::Scalar); ; }; ; /// Total number of elements; static size_t size(const DataType & data) {; return data.rows();; }; ; static bool setSize(DataType & data, size_t size) { ; if constexpr (Derived::ColsAtCompileTime == Eigen::Dynamic) {; return data.resize(size, data.cols);; } else {; return false; ; }; }; ; // (...); }; ```. And test it with a couple of matrix types, for example:; ```c++; data<Eigen::Matrix<double, Eigen::Dynamic, 3>> data_1;; data<Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>> data_2;; data<Eigen::Matrix<double, 8, 3>> data_3;; data<Eigen::Map<Eigen::Matrix<double, 8, 3>>> data_4;; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022:2132,test,test,2132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022,2,['test'],['test']
Testability,"ene test has been added to check collision is working with a stationary object. # Fix freeze; This freeze happened before #2047.; It is due to an infinite loop here:; https://github.com/sofa-framework/sofa/blob/477747e21ae520fba08cb08f7b66e6f4250a91f8/applications/plugins/SofaMiscCollision/src/SofaMiscCollision/DefaultCollisionGroupManager.cpp#L235; This happened because a map was not updated after some merge operations. And we relied on the value in the map, for example here:; https://github.com/sofa-framework/sofa/blob/477747e21ae520fba08cb08f7b66e6f4250a91f8/applications/plugins/SofaMiscCollision/src/SofaMiscCollision/DefaultCollisionGroupManager.cpp#L137. # Fix crash detected in #2047. ## Before #2047; The scene freezes always at the same time. In #2067 I explain that the simulation is deterministic. Now that the freeze is fixed, we can notice a crash still occurs, but after the time step of the freeze. ## After #2047 ; A crash occurs, but not always at the same time step. This is because the simulation is no longer deterministic (because of #2047). . Conclusion: #2047 revealed this crash, but was not the cause. It means that a non-deterministic simulation is not a source of crash. ## Fix; The crash is fixed also by updating the values of the map, similarly to the freeze fix. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2076:3795,test,test,3795,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076,2,['test'],['test']
Testability,"enforces if the given Mat is 3x3 or 4x4 (does not make sense otherwise, or could even crash); 3. add a function toHomogeneousMatrix() for Mat4x4 for RigidTypes (which will use the toHomogenous of Quat); 4. remove uses of operator= with MultiMatrix in ODESolvers; 5. HeadlessRecorder was using a deprecated feature of VisualParameters (sceneTransform); 6. Use PathResolver in MultiMapping; 7. Rename Deprecation Macro in BaseData.h, correct the fix message and remove use of setOwnerClass. Note for 7.: the GUI was displaying either ""Base"" for owner (when hovering on the Data name) or ""no owner found"". I dont really know what was supposed to be displayed.; Now with the correction, all the Data will display their owner's name, which seems a bit useless to me. Before:; ![prclean_2106_beforename](https://user-images.githubusercontent.com/11028016/123656430-35593280-d830-11eb-8f3a-bfd4283ac64f.png) ![prclean_2106_beforeflags](https://user-images.githubusercontent.com/11028016/123656436-368a5f80-d830-11eb-8a41-d772aa2f679a.png). After:; ![prclean_2106_aftername](https://user-images.githubusercontent.com/11028016/123656520-4ace5c80-d830-11eb-86ba-9a761911530b.png) ![prclean_2106_afterflags](https://user-images.githubusercontent.com/11028016/123656532-4d30b680-d830-11eb-8a6a-af7ec55843f4.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2210:1958,test,test,1958,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2210,2,['test'],['test']
Testability,ents\misc\sleep\test_sleep3.scn; examples\Components\visualmodel\OglLabel.scn; examples\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPointConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularBendingSprings_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularFEMForceField_RemovingMeshTest.scn; examples\Components\constraint\AffineMovementConstraint.scn; examples\Components\constraint\AffineMovementConstraint3D.scn; examples\Components\constraint\AttachConstraintMatrix.scn; examples\Components\constraint\BilateralInteractionConstraint_PGS.scn; examples\Components\constraint\BilinearConstraint.scn; examples\Components\constraint\BilinearConstraint3D.scn; examples\Components\constraint\HermiteSplineConstraint.scn; examples\Components\constraint\NonBuiltConstraintCorrection.scn; examples\Components\constraint\PatchTestConstraint.scn; examples\Components\constraint\ProjectToPlaneConstraint.scn; exampl,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:1814,Benchmark,Benchmark,1814,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,"environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. #################; --- sys.version ---; 3.8.10 (default, Mar 13 2023, 10:26:41) ; [GCC 9.4.0]; --- PATH ---; /home/giang/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/usr/local/USD/bin:/opt/gurobi1000/linux64/bin; --- SOFA_ROOT ---; --- PYTHONPATH ---; :/usr/local/lib/python3.8/dist-packages:/usr/lib/python3/dist-packages:/usr/local/USD/lib/python:/media/giang/Storage/ecoSIM/PythonAPI/carla/dist/carla-0.9.13-py3.8-linux-x86_64.egg:/media/giang/Storage/ecoSIM/PythonAPI/carla:/home/giang/bullet3/build_cmake/better_python:/home/giang/bullet3/examples/pybullet; --- sys.path ---; ['', '/home/giang', '/usr/local/lib/python3.8/dist-packages', '/usr/lib/python3/dist-packages', '/usr/local/USD/lib/python', '/media/giang/Storage/ecoSIM/PythonAPI/carla/dist/carla-0.9.13-py3.8-linux-x86_64.egg', '/media/giang/Storage/ecoSIM/PythonAPI/carla', '/home/giang/bullet3/build_cmake/better_python', '/home/giang/bullet3/examples/pybullet', '/usr/lib/python38.zip', '/usr/lib/python3.8', '/usr/lib/python3.8/lib-dynload', '/home/giang/.local/lib/python3.8/site-packages', '/opt/carla-simulator/PythonAPI/carla/dist/carla-0.9.13-py3.7-linux-x86_64.egg', '/opt/carla-simulator/PythonAPI/carla']; #################. ```. ---------------------------------------------. ### Logs. **Full output**. [CMakeError.log](https://github.com/sofa-framework/sofa/files/11083334/CMakeError.log); [CMakeOutput.log](https://github.com/sofa-framework/sofa/files/11083335/CMakeOutput.log). **Content of build_dir/CMakeCache.txt**. [CMakeCache.txt](https://github.com/sofa-framework/sofa/files/11083330/CMakeCache.txt). ---------------------------------------------. Thank you for your report.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752:2416,Log,Logs,2416,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752,5,"['Log', 'log']","['Logs', 'log']"
Testability,"eq/peq() functions defined in IdentityMapping should be moved elsewhere; no need to know IdentityMapping to use them. These functions are now located in a file core/MappingHelper.h alongside Mapping.h, as these functions would likely be used only by mappings. Some points to discuss:; - header filename ?; - eq/peq functions name themselves are not very informative... should it be assign() and add() for example ?. Fix #2122 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2137:967,test,test,967,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2137,2,['test'],['test']
Testability,"er required, TriangularFEMForceFieldOptim now writes its `addKToMatrix` using the traditional way. It is supported by a [benchmark](https://github.com/alxbilger/SofaBenchmark/pull/21):. Before:; ```; ----------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; ----------------------------------------------------------------------------------------------; BM_TriangularFEMForceFieldOptim/32 190 ms 188 ms 4 FPS=170.667/s MBKBuild=561.555u MBKSolve=5.21104m frame=5.85938ms; BM_TriangularFEMForceFieldOptim/64 368 ms 367 ms 2 FPS=174.298/s MBKBuild=526.034u MBKSolve=5.06889m frame=5.7373ms; BM_TriangularFEMForceFieldOptim/128 715 ms 719 ms 1 FPS=178.087/s MBKBuild=509.678u MBKSolve=4.93597m frame=5.61523ms; BM_TriangularFEMForceFieldOptim/256 1259 ms 1266 ms 1 FPS=202.272/s MBKBuild=500.564u MBKSolve=4.28127m frame=4.94385ms; ```; After. ```. ----------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; ----------------------------------------------------------------------------------------------; BM_TriangularFEMForceFieldOptim/32 196 ms 195 ms 4 FPS=163.84/s MBKBuild=590.4u MBKSolve=5.34807m frame=6.10352ms; BM_TriangularFEMForceFieldOptim/64 377 ms 375 ms 2 FPS=170.667/s MBKBuild=529.309u MBKSolve=5.19836m frame=5.85938ms; BM_TriangularFEMForceFieldOptim/128 720 ms 703 ms 1 FPS=182.044/s MBKBuild=497.814u MBKSolve=4.9813m frame=5.49316ms; BM_TriangularFEMForceFieldOptim/256 1270 ms 1266 ms 1 FPS=202.272/s MBKBuild=502.338u MBKSolve=4.3129m frame=4.94385ms; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; _________________________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2861:1361,Benchmark,Benchmark,1361,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2861,1,['Benchmark'],['Benchmark']
Testability,"er to focus on is `Get Compliance` as it is the deepest timer in the hierarchy containing the `doAddJMInvJtLocal` function. - Master branch (commit df49f3a754264489b14db69b38862a5b45d57168). ```; 100 iterations done in 12.9731 s ( 7.70827 FPS).; ```. ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 5 15.41 1 0.01 121.72 98.03 20.57 98.03 77.48 .....Get Compliance; ```. - This PR (without parallelization). The benchmark should be similar to the master branch. ```; 100 iterations done in 13.1572 s ( 7.6004 FPS).; ```. ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 5 16.31 1 0.01 134.76 98.34 22.21 98.34 76.54 .....Get Compliance; ```. - This PR (with parallelization). ```; 100 iterations done in 5.94345 s ( 16.8253 FPS).; ```. ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 5 15.76 1 0.01 30.62 26.85 5.55 26.85 47.91 .....Get Compliance; ```. On my machine there is a nice speedup of x3.66 on the `Get Compliance` timer, and x2.18 in terms of global FPS. # Additional Benchmarks. I wanted to make sure that the usual solve of SparseLDLSolver did not regress in terms of performances. I benchmarked `examples/Component/LinearSolver/Direct/FEMBAR_SparseLDLSolver.scn` on 10000 steps. - Master branch (commit df49f3a754264489b14db69b38862a5b45d57168). ```; 10000 iterations done in 28.2657 s ( 353.785 FPS).; ```. - This PR. ```; 10000 iterations done in 28.3223 s ( 353.078 FPS).; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986:1224,Benchmark,Benchmarks,1224,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986,1,['Benchmark'],['Benchmarks']
Testability,ersions/A/Frameworks/FSEvents.framework/Versions/A/FSEvents; 0x7fff27414000 - 0x7fff27438fff com.apple.coreservices.SharedFileList (144 - 144) <C861FAD6-D3A5-302C-88AE-B2813F7201A7> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SharedFileList.framework/Versions/A/SharedFileList; 0x7fff27439000 - 0x7fff2743bfff libapp_launch_measurement.dylib (14.1) <2BBB708C-4D91-364E-ABD0-39BF198688A6> /usr/lib/libapp_launch_measurement.dylib; 0x7fff2743c000 - 0x7fff27484fff com.apple.CoreAutoLayout (1.0 - 21.10.1) <7A2E42E6-3AF2-3ECB-8A16-5C4AC41206EE> /System/Library/PrivateFrameworks/CoreAutoLayout.framework/Versions/A/CoreAutoLayout; 0x7fff27485000 - 0x7fff27567fff libxml2.2.dylib (34.9) <E0BF29C7-869B-3DD5-82AE-F36E6398091A> /usr/lib/libxml2.2.dylib; 0x7fff27568000 - 0x7fff275b4fff com.apple.CoreVideo (1.8 - 408.4) <50857F8D-C7CC-3609-B0DB-FC3C7382243B> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo; 0x7fff275b5000 - 0x7fff275b7fff com.apple.loginsupport (1.0 - 1) <B149BCAF-854C-3820-809D-15C6077FFB8B> /System/Library/PrivateFrameworks/login.framework/Versions/A/Frameworks/loginsupport.framework/Versions/A/loginsupport; 0x7fff275b8000 - 0x7fff275e0fff com.apple.aps.framework (4.0 - 4.0) <D86ED827-F22D-3A52-B055-251478B29AE1> /System/Library/PrivateFrameworks/ApplePushService.framework/Versions/A/ApplePushService; 0x7fff275e1000 - 0x7fff275fefff com.apple.UserManagement (1.0 - 1) <B6B35079-3860-384F-B7A2-584192BAAE70> /System/Library/PrivateFrameworks/UserManagement.framework/Versions/A/UserManagement; 0x7fff275ff000 - 0x7fff2779efff com.apple.cloudkit.CloudKit (970 - 970) <58BD254C-AAF1-3CC5-AAB7-2EF0A70BA033> /System/Library/Frameworks/CloudKit.framework/Versions/A/CloudKit; 0x7fff27822000 - 0x7fff27bc7fff com.apple.CoreML (1.0 - 1) <21D89ABE-2DEC-3099-81CC-78D9ADB9D12B> /System/Library/Frameworks/CoreML.framework/Versions/A/CoreML; 0x7fff2851b000 - 0x7fff28598fff com.apple.corelocation (2420.12.16 - 2420.12.16) <8BD49018-78D4-3A,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:30818,log,loginsupport,30818,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['log'],['loginsupport']
Testability,"es/SofaOpenglVisual/src -Iinclude/SofaOpenglVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseVisual/src -Iinclude/SofaBaseVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseTopology/src -Iinclude/SofaBaseTopology -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCommon/.. -Iinclude/SofaSimulation -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaCore/src -Iinclude/SofaFramework -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaCore/src -Iinclude/GTest -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCore/src -isystem /home/vozenne/Dev/sofa/src/SofaKernel/extlibs/json -isystem /home/vozenne/Dev/sofa/src/extlibs/gtest/include -isystem /usr/include/eigen3 -Wall -W -Wno-padded -O3 -DNDEBUG -fPIC -DFRAMEWORK_TEST_RESOURCES_DIR=\""/home/vozenne/Dev/sofa/src/SofaKernel/SofaFramework/resources/tests\"" -pthread -DGTEST_LINKED_AS_SHARED_LIBRARY=1 -std=gnu++17 -MD -MT modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglAttribute.cpp.o -MF modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglAttribute.cpp.o.d -o modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglAttribute.cpp.o -c /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglAttribute.cpp; In file included from /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglAttribute.cpp:22:; /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglAttribute.inl:199:9: error: use of undeclared identifier 'glVertexAttribLPointer'; did you mean '__glewVertexAttribIPointer'?; glVertexAttribLPointer(_index, size, type, 0, (char",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1864:1953,test,tests,1953,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864,1,['test'],['tests']
Testability,"es/SofaOpenglVisual/src -Iinclude/SofaOpenglVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseVisual/src -Iinclude/SofaBaseVisual -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaBaseTopology/src -Iinclude/SofaBaseTopology -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCommon/.. -Iinclude/SofaSimulation -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaCore/src -Iinclude/SofaFramework -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaHelper/../SofaCore/src -Iinclude/GTest -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaDefaultType/src -I/home/vozenne/Dev/sofa/src/SofaKernel/modules/SofaSimulationCore/src -isystem /home/vozenne/Dev/sofa/src/SofaKernel/extlibs/json -isystem /home/vozenne/Dev/sofa/src/extlibs/gtest/include -isystem /usr/include/eigen3 -Wall -W -Wno-padded -O3 -DNDEBUG -fPIC -DFRAMEWORK_TEST_RESOURCES_DIR=\""/home/vozenne/Dev/sofa/src/SofaKernel/SofaFramework/resources/tests\"" -pthread -DGTEST_LINKED_AS_SHARED_LIBRARY=1 -std=gnu++17 -MD -MT modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o -MF modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o.d -o modules/SofaOpenglVisual/CMakeFiles/SofaOpenglVisual.dir/src/SofaOpenglVisual/OglShaderVisualModel.cpp.o -c /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglShaderVisualModel.cpp; In file included from /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglShaderVisualModel.cpp:30:; /home/vozenne/Dev/sofa/src/modules/SofaOpenglVisual/src/SofaOpenglVisual/OglAttribute.inl:199:9: error: use of undeclared identifier 'glVertexAttribLPointer'; did you mean '__glewVertexAttribIPointer'?; glVertexAtt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312:2447,test,tests,2447,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1864#issuecomment-786521312,1,['test'],['tests']
Testability,"ese tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1689,test,tests,1689,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,8,['test'],['tests']
Testability,"everything is in the PR title. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2816:570,test,test,570,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2816,2,['test'],['test']
Testability,everything is in the title.; This PR: ; - clean some code commented.; - remove the HAVE_NEW_HEXA macro which was hardcoded to true since 2009; - change the NDEBUG topology test into a c++if condition so the code is compiled. work duplicated with STC#5 branch. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/693:172,test,test,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/693,3,['test'],['test']
Testability,"example scene, log and backtrace, please :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2392#issuecomment-939545364:15,log,log,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2392#issuecomment-939545364,1,['log'],['log']
Testability,"f are just transitional of course):; ```cpp; #include <SofaTest/Sofa_test.h>; using sofa::Sofa_test;. #include <SofaTest/TestMessageHandler.h>; using sofa::helper::logging::GtestMessageHandler ;. /// We can define a default policy for a complete class this way so that if not more; /// expectation are given this generates test failures.; class Sofa_test2 : public Sofa_test<float>; {; EXPECT_MSG_NOEMIT_V2(Error) ;; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Deprecated) ;; };. class TestMessageHandler_test : public Sofa_test2; {; public:; void defaultTestBehavior(); {; msg_deprecated(""HERE"") << ""This should generate a failure"" ;; msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_error(""HERE"") << ""This should generate a failure"" ;; }. void catchingTestBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should not generate a failure"" ;; msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. /// THIS TEST SHOULD FAIL.; void expectAMessageissingBehavior(); {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should not generate a failure"" ;; //msg_error(""HERE"") << ""This should not generate a test falure"" ;; }. void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure but with line number close to "" << __LINE__ ;; msg_error(""HERE"") << ""This should generate a test falure with line number close to "" << __LINE__ ;; }. void complexTestBehavior(); {; {; EXPECT_MSG_EMIT_V2(Warning) ;; EXPECT_MSG_EMIT_V2(Error) ;. //msg_warning(""HERE"") << ""This should generate a failure"" ;; //msg_error(""HERE"") << ""This should generate a test failure"" ;; {; EXPECT_MSG_NOEMIT_V2(Error) ;; msg_error(""HERE"") << ""This should generate a test failure"" ;; }; }. {; EXPECT_MSG_NOEMIT_V2(Warning) ;; EXPECT_MSG_NOEMIT_V2(Error) ;. msg_warning(""HERE"") << ""This should generate a failure"" ;; msg_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643:1492,TEST,TEST,1492,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288782643,1,['TEST'],['TEST']
Testability,f com.apple.xpc.RemoteXPC (1.0 - 2038.80.3) <C4BFF5FC-FC9C-3161-9612-7070EDAE9989> /System/Library/PrivateFrameworks/RemoteXPC.framework/Versions/A/RemoteXPC; 0x7fff33246000 - 0x7fff33249fff com.apple.help (1.3.8 - 71) <6074D81C-4507-35A6-88D7-D82309F81587> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help; 0x7fff3324a000 - 0x7fff33251fff com.apple.EFILogin (2.0 - 2) <B06CCD1C-A4D1-34D2-89C5-0DB69FE65234> /System/Library/PrivateFrameworks/EFILogin.framework/Versions/A/EFILogin; 0x7fff33252000 - 0x7fff3325dfff libcsfde.dylib (554) <9CDB9580-DD1C-347E-91C5-6D92D96F52F5> /usr/lib/libcsfde.dylib; 0x7fff3325e000 - 0x7fff332c3fff libcurl.4.dylib (121.40.2) <77010EA9-4AD1-3F4A-B3EF-2FFE739FB349> /usr/lib/libcurl.4.dylib; 0x7fff332c4000 - 0x7fff332cbfff com.apple.LoginUICore (4.0 - 4.0) <7225326A-7704-362D-B64E-4ABF4A221F88> /System/Library/PrivateFrameworks/LoginUIKit.framework/Versions/A/Frameworks/LoginUICore.framework/Versions/A/LoginUICore; 0x7fff332cc000 - 0x7fff3332ffff com.apple.AppSupport (1.0.0 - 29) <21E116C6-C770-3024-98EB-51D1166AACD2> /System/Library/PrivateFrameworks/AppSupport.framework/Versions/A/AppSupport; 0x7fff333d0000 - 0x7fff33482fff com.apple.GameController (1.0 - 1) <E2778524-D805-3EF4-A147-DECE5315D77F> /System/Library/Frameworks/GameController.framework/Versions/A/GameController; 0x7fff3348b000 - 0x7fff3348bfff com.apple.ApplicationServices (48 - 50) <42B48E32-1918-3178-8DE0-E8126B9EC088> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices; 0x7fff33648000 - 0x7fff33687fff com.apple.AppleIDSSOAuthentication (1.0 - 1) <687FC889-44F5-3FA9-A93B-D2D65B16B6B0> /System/Library/PrivateFrameworks/AppleIDSSOAuthentication.framework/Versions/A/AppleIDSSOAuthentication; 0x7fff3378c000 - 0x7fff3378cfff libHeimdalProxy.dylib (79) <85526E13-1E48-377A-A700-EE3F5648A6E3> /System/Library/Frameworks/Kerberos.framework/Versions/A/Libraries/libHeimdalProxy.dylib; 0x7fff3383f000 - 0x7fff,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:73203,Log,LoginUICore,73203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['Log'],['LoginUICore']
Testability,"faScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:486); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). ## SofaVisualModel:Reconnect ; UnityEngine.Debug:Log (object); SofaUnity.SofaUnityRenderer:Reconnect () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaUnityRenderer.cs:109); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:495); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). Reconnect SofaVisualModel: Visual; UnityEngine.Debug:Log (object); SofaUnity.SofaUnityRenderer:Reconnect () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaUnityRenderer.cs:118); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:495); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). Start: 'Visual'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). ReconnectSofaScene; UnityEngine.Debug:Log (object); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:480); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awak",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4156:5325,Log,Log,5325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4156,1,['Log'],['Log']
Testability,failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scene,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:2465,test,tests,2465,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['test'],['tests']
Testability,"ference; ```. Then anywhere (usually in the constructor body); ```; c_diff.addCallback(this,&MyComponent::myfunction1); ; c_diff.addCallback(this,&MyComponent::myfunction2); ; ```. The main difference with an existing type in sofa if the possibility to attach several functions and more importantly to specify the component on which the callback will be called. This allows to define callbacks as member functions of the component, which simplify access to parameters. Additional test are added allowing to modify the data while the callback is called (in order to avoid cyclic calls). This is usefull for linked data i.e. The callback receives a modification from the parent, the callback is then called and it is allowed to modify the data in the callback which will automatically call update of childs of the data. . The second type introduced in this PR is a wrapper allowing to easily associate a widget with a specific types of data. It can be used as follows: . in a cpp file; `sofa::helper::Creator<sofa::gui::qt::DataWidgetFactory, GenericDataWidget< Data<bool>, QtDataBoxEdit > >	DWClass_bool(""bool"",true);`. QtDataBoxEdit is a Qwidget class defined by the user that needs to define usual functions needed in sofa widgets : ; ```; void readFromData(const Data<bool>& data);; void writeToData(Data<bool>& data);; ```. And constructor must take as parameter the parent and the data as follows :; `QtDataBoxEdit(sofa::gui::qt::DataWidget* parent,const sofa::core::objectmodel::Data<bool> & data) : QCheckBox(parent);`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911:2256,test,test,2256,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911,2,['test'],['test']
Testability,find_package(SofaGui) was failing because of SofaGuiCommon's dependency on SofaComponentAll. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1198:344,test,test,344,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1198,2,['test'],['test']
Testability,"fix #2182 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2184:551,test,test,551,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2184,2,['test'],['test']
Testability,fix #551 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1058:262,test,test,262,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1058,2,['test'],['test']
Testability,fix #988 . tada!; ![barycentric_00000001](https://user-images.githubusercontent.com/21199245/58172989-64d50280-7c9a-11e9-87e6-472d08feb97e.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1057:396,test,test,396,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1057,2,['test'],['test']
Testability,"fix shadow variable. Fix #2431 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2435:572,test,test,572,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2435,2,['test'],['test']
Testability,"fixed typo error, from leap-frop to leap-frog. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1894:586,test,test,586,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1894,2,['test'],['test']
Testability,fixed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/214:232,test,test,232,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/214,1,['test'],['test']
Testability,fixes #435 RigidMapping. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/441:276,test,test,276,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/441,2,['test'],['test']
Testability,fixes #723 . - removes copy-paste comments; - fixes horrible typos in the scene's name; - restores the scene's desired behavior . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/765:381,test,test,381,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/765,2,['test'],['test']
Testability,"fixing #238 ; This fix solves the segfault at startup that intel-powered linux machines experience.; It should be a linux-specific bugfix to my understanding.; If anyone knows a clean way of probing whether or not a ""Core profile"" context would be created (something better than parsing lspci to see if we're runing an intel GPU...), I'll update this PR accordingly. Anyone to review?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/526:637,test,test,637,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526,2,['test'],['test']
Testability,fixing Polynomial #434 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/442:276,test,test,276,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442,2,['test'],['test']
Testability,"following-up #3550 ; (PR coming from https://github.com/sofa-framework/SofaPython3/pull/330). Among other thing, the different variables (SOFA_HAVE_BLABLA) were not set anymore (set previously by sofa_find_package() ); And it did reflect the fact that setting Sofa.GUI means setting common/component/batch/qt mandatory (contrary to the Sofa.Gui module from the former days where everything was implicit). Notable exception is HeadlessRecorder which is still optional... (but I don't even know if it still works🤔). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3595:1053,test,test,1053,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3595,2,['test'],['test']
Testability,framework/Versions/A/FaceCore; 0x7fff2b8e0000 - 0x7fff2b92afff com.apple.OTSVG (1.0 - 677.3.0.4) <827396F3-F3A7-3A4F-BE7F-171077501137> /System/Library/PrivateFrameworks/OTSVG.framework/Versions/A/OTSVG; 0x7fff2b92b000 - 0x7fff2b931fff com.apple.xpc.AppServerSupport (1.0 - 2038.80.3) <C78E9D22-5110-349B-AF8E-6BA893A20214> /System/Library/PrivateFrameworks/AppServerSupport.framework/Versions/A/AppServerSupport; 0x7fff2b932000 - 0x7fff2b943fff libhvf.dylib (1.0 - $[CURRENT_PROJECT_VERSION]) <F0974976-30C0-35EB-92F1-B4CF1E974F11> /System/Library/PrivateFrameworks/FontServices.framework/libhvf.dylib; 0x7fff2b944000 - 0x7fff2b946fff libspindump.dylib (295.1) <3B4701CB-8F66-3E50-A38A-BEEC992AAC31> /usr/lib/libspindump.dylib; 0x7fff2b947000 - 0x7fff2ba07fff com.apple.Heimdal (4.0 - 2.0) <69768234-4F4F-3AB6-B116-4AE249E6417A> /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal; 0x7fff2ba08000 - 0x7fff2ba22fff com.apple.login (3.0 - 3.0) <B9BEC3A1-688C-3999-B705-2D50B8756E62> /System/Library/PrivateFrameworks/login.framework/Versions/A/login; 0x7fff2ba23000 - 0x7fff2baf5fff com.apple.corebrightness (1.0 - 1) <F55C2F51-DC45-3D79-A3A2-8EC8CA6B0E30> /System/Library/PrivateFrameworks/CoreBrightness.framework/Versions/A/CoreBrightness; 0x7fff2bba2000 - 0x7fff2bba5fff libodfde.dylib (26) <47160F56-2A36-3147-B721-279BE2F8B4A6> /usr/lib/libodfde.dylib; 0x7fff2bba6000 - 0x7fff2bc10fff com.apple.bom (14.0 - 233) <F4B7C353-8A65-3B54-9E01-2C93CB3F55A3> /System/Library/PrivateFrameworks/Bom.framework/Versions/A/Bom; 0x7fff2bc11000 - 0x7fff2bc5bfff com.apple.AppleJPEG (1.0 - 1) <7F3819DE-BCE7-32B7-BB33-10C1DB2BA512> /System/Library/PrivateFrameworks/AppleJPEG.framework/Versions/A/AppleJPEG; 0x7fff2bc5c000 - 0x7fff2bd3afff libJP2.dylib (2130.3.5) <2DFE6642-4309-30BD-A402-F93E28F1F065> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib; 0x7fff2bd3b000 - 0x7fff2bd3efff com.apple.WatchdogClient.framework (1.0 - 98.80.2) <C257C950-F430-3762-BC72-1,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:51426,log,login,51426,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['log'],['login']
Testability,"from SofaBaseLinearSolver to SofaMatrix. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2545:580,test,test,580,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2545,2,['test'],['test']
Testability,"from [CompressedRowSparseMatrix](https://github.com/InSimo/ISSofa/blob/issofa/framework/sofa/defaulttype/CompressedRowSparseMatrix.h) so we need to bring their version of CompressedRowSparseMatrix . I renamed all the **bloc** words to **block** as well. The previous CRSMatrix could be used as a BaseMatrix (solvers), ConstraintMatrix (iterations) and as a pure CRS itself.; This new CRSMatrix is decomposed in several types:; - CRSGeneric (name to be changed maybe): the pure CRS structure; - CRSMechanical: inheriting/implementing BaseMatrix; - (in a next PR) CRSConstraintMatrix, with the same API as the old CRSMatrix used for ConstraintMatrices (for iterating). Different purposes need different traits (some case would prefer autocompression, etc), so a lot of compile-time options are present. They are called policy.; I needed to change some flags from the Insimo's version to have the same behavior for the tests. So in the future, it could be interesting to see if those changes should be integrated later for more performance (but the tests would need to be changed). For compatibility reasons, the old ""CRSMatrix"" type is an alias on CRSMechanical. In this PR, no change of performance is noted (neither regression or upgrade). Tested on caduceus, TorusFall, solvers scenes and BeamAdapter's 3instruments_collis.scn. Ref:; - https://github.com/InSimo/ISSofa/blob/issofa/framework/sofa/defaulttype/CompressedRowSparseMatrix.h. Courtesy of Insimo (@fjourdes ). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3515:1337,test,tests,1337,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3515,1,['test'],['tests']
Testability,from comment:; `The Data constraintForces is used to expose the intensities of constraint forces in the simulation. We use the constraint forces as the approximation of real contact forces. We use this Data to provide contact information for the catheter insertion. The user can easily check the constraint forces from the GenericConstraint component interface.; `. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/840:617,test,test,617,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/840,2,['test'],['test']
Testability,"function warning for user & deprecation for devs; - [x] assess again performances; - direct; - Diagonal-buildMassMatrix = 0.57%; - MeshMM-buildMassMatrix = 0.57%; - iterative; - Diagonal-addMDx = 0.45%; - MeshMM-addMDx = 0.70% -- 0.47% without the if condition for graph plotting; - TORUS Fall scene over 10 000 steps; - DiagonalMass; LEVEL	 START	 NUM	 MIN	 MAX	 MEAN	 DEV	 TOTAL	PERCENT	ID; 9 	 2.54	 1 	 0.01	 0.12	 0.01	 0 	 0.01	 0.19	.........DM-buildMassMatrix; - MeshMatrixMass lumped; LEVEL	 START	 NUM	 MIN	 MAX	 MEAN	 DEV	 TOTAL	PERCENT	ID; 9 	 2.44	 1 	 **0.0**	 **0.04**	 0.01	 0 	 0.01	 **0.18**	.........MMM-buildMassMatrix; - [ ] update all scenes ( `<DiagonalMass` :arrow_right: `<MeshMatrixMass lumping=""1""` ). **TODO (after this PR)**; - deprecate XspLoaders (see #4003). **NOTE** ; Rigid cases previously handled by the DiagonalMass are not anymore, therefore breaking.; Regarding the absence of use of xs3 formats for rigid bodies and the starting project coupling Pinocchio which should bring a more robust description/handling of rigid bodies, I would advocate to :; - deprecated associated components (XspLoader, MeshXspLoader and their impact on RigidMapping, SpringFF, VectorSpringFF) ; - take this opportunity to clean and replace OldTutorials coming with it with new ones. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3912:2523,test,test,2523,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3912,2,['test'],['test']
Testability,"fwd.h was not in the list of HEADERS.; Therefore it seems the installation process was not copying it into the install folder (leading to a failure for projects needing it). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2337:713,test,test,713,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2337,2,['test'],['test']
Testability,"g-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3794,test,tests,3794,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,gcc 10 is showing a lot of warning for the use of visibility specifier on already defined types saying it is not needed. So I remove them...let's see if the behavior is the same on windows or if the declspec has a more general scope or if everything is fine. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1456:512,test,test,512,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1456,2,['test'],['test']
Testability,"get intersections between triangle and segment, get intersection between edge and segment. - computeEdgeSegmentIntersection; - computeIntersectionsLineTriangle. EDIT from @guparan : this PR also fixes #2107 (STC#11 coding sprint). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2131:770,test,test,770,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2131,2,['test'],['test']
Testability,"getEdge() from EdgeSetTopologyContainer does bound-checking and the compiler cannot really optimize that.; EDIT: and moreover, getNbEdges() (edges, etc) used in the getEdge is extremely non-optimized... In a nutsheel, it is much faster to do; ```; const auto& edges = topo.getEdges();; for(const auto& e : edges) ; { ; blabla(e);; }; ```; than; ```; for(auto i = 0; i < topo.getNbEdges() ; i++) ; { ; blabla(topo.getEdge(i));; }; ```. Some idea to keep the getEdge() (and others) would be either to remove the bound-check (maybe enable only in debug like std::vector), or do an unsafe version. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2516:1133,test,test,1133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2516,2,['test'],['test']
Testability,"getHeaderFileLocation() won't probably ever be overridden, so the virtual keyword is removed from the macro (and remove literally thousands lines of warnings in logs). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1062:161,log,logs,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1062,3,"['log', 'test']","['logs', 'test']"
Testability,"good, I like the direction it takes . I think if we (you ?-) add additionnal sXyz component stream (like at least sdebug, or a new component API to match the existing msg_Xyz API), we could then have the printLog data deprecated and replaced by msgLevel and start the transition. . The removal of the per component ""message buffer"" has to be done in // in the gui and can be viewed as a separate problem. This would be the responsibility of the GUI to create those per component buffers . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Mercredi 1 Février 2017 20:34:25; > Objet: Re: [sofa-framework/sofa] [SofaKernel] Add; > PerComponentLoggingMessageHandler to keep and history of messages. (#106). > @matthieu-nesme. > I looked back to the PR and I will remove the three Data field because:. > * controlling the queue size view a Data is not crucial. I will replace it; > with an attribute and get/set or an environment variable.; > * the msgLevel is un-used and was there to rise discussion on whether or not; > controlling the level of messages emitted by an object make sense (eg when; > debugging).; > * the logLevel'one is un-used yet but should one day override the behavior of; > the mis-used f_printLog. > Thanks again to pointing that. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767:1311,log,logLevel,1311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276931767,1,['log'],['logLevel']
Testability,"great so conclusion, it has been tested (as least the compilation part); thanks @guparan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-607207302:33,test,tested,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1301#issuecomment-607207302,1,['test'],['tested']
Testability,"h-test.h gtest-death-test-internal.h gtest-internal.h (650 ms); gtest-test-part.cc.o gtest-test-part.h gtest-internal.h (463 ms); gtest-filepath.cc.o gtest-filepath.h gtest-string.h (456 ms); gtest.cc.o gtest.h gtest-internal.h (246 ms); ... 20903 ms: sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/vector.h (included 156 times, avg 133 ms), included via:; MeshGmsh.cpp.o MeshGmsh.h Mesh.h (492 ms); MeshTopologyLoader.cpp.o MeshTopologyLoader.h Mesh.h (402 ms); Image.cpp.o Factory.inl (384 ms); SVector.cpp.o SVector.h (379 ms); GenerateRigid.cpp.o GenerateRigid.h Mesh.h (373 ms); TestMessageHandler.cpp.o TestMessageHandler.h (346 ms); ... 19960 ms: /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/pstl/glue_algorithm_defs.h (included 157 times, avg 127 ms), included via:; qglviewer.h camera.h QMap qmap.h qiterator.h qglobal.h algorithm (348 ms); manipulatedCameraFrame.h manipulatedFrame.h frame.h QObject qobject.h qobjectdefs.h qnamespace.h qglobal.h algorithm (345 ms); gtest-typed-test.h gtest-port.h algorithm (299 ms); mouseGrabber.h config.h qglobal.h algorithm (299 ms); VRender.h config.h qglobal.h algorithm (296 ms); cmake_pch.hxx Base.h BoundingBox.h Vec.h fixed_array.h algorithm (271 ms); ... 19494 ms: sofa/applications/plugins/SofaTest/../SofaTest/Mapping_test.h (included 6 times, avg 3249 ms), included via:; DistanceMapping_test.cpp.o (3500 ms); QuaternionIntegration_test.cpp.o (3407 ms); RigidRigidMapping_test.cpp.o (3280 ms); SquareMapping_test.cpp.o (3239 ms); RigidMapping_test.cpp.o (3089 ms); SquareDistanceMapping_test.cpp.o (2976 ms); ... 19187 ms: sofa/SofaKernel/modules/SofaHelper/../SofaSimulationCore/src/sofa/simulation/MechanicalVisitor.h (included 100 times, avg 191 ms), included via:; initSofaDenseSolver.cpp.o MatrixLinearSolver.inl MatrixLinearSolver.h (440 ms); StaticSolver.cpp.o StaticSolver.h MechanicalMatrixVisitor.h (427 ms); NewMatCGLinearSolver.cpp.o CGLinearSolver.inl CGLinearSolver.h MatrixLinearSolver.h (404 ms); Def",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:36312,test,test,36312,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['test'],['test']
Testability,hasChanged methods were not const. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1488:286,test,test,286,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1488,2,['test'],['test']
Testability,"have expected that no errors would appear. ---------------------------------------------. ### Environment. **Context**. - System: OS Name	Microsoft Windows 11 Home; - Version of SOFA: I compiled SOFA with Cmake to be able to use with Geomagic Touch; - State: Install directory: C:\sofa. **Command called**. ```txt. python3 sofa_env/scenes/controllable_object_example/controllable_env.py. ```. **Env vars**. ```txt. import sys; print(sys.path); ['', 'C:\\Users\\JetsLab\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\idlelib', 'C:\\SOFA\\Lib\\site-packages', 'C:\\Users\\JetsLab\\AppData\\Local\\Programs\\Python\\Python311\\python311.zip', 'C:\\Users\\JetsLab\\AppData\\Local\\Programs\\Python\\Python311\\Lib', 'C:\\Users\\JetsLab\\AppData\\Local\\Programs\\Python\\Python311\\DLLs', 'C:\\Users\\JetsLab\\AppData\\Local\\Programs\\Python\\Python311', 'C:\\Users\\JetsLab\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages']. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. Traceback (most recent call last):; File ""C:\SOFA\Lib\site-packages\numpy\core\__init__.py"", line 24, in <module>; from . import multiarray; File ""C:\SOFA\Lib\site-packages\numpy\core\multiarray.py"", line 10, in <module>; from . import overrides; File ""C:\SOFA\Lib\site-packages\numpy\core\overrides.py"", line 8, in <module>; from numpy.core._multiarray_umath import (; ModuleNotFoundError: No module named 'numpy.core._multiarray_umath'. During handling of the above exception, another exception occurred:. Traceback (most recent call last):; File ""C:\SOFA\Lib\site-packages\numpy\__init__.py"", line 144, in <module>; from numpy.__config__ import show as show_config; File ""C:\SOFA\Lib\site-packages\numpy\__config__.py"", line 4, in <module>; from numpy.core._multiarray_umath import (; File ""C:\SOFA\Lib\site-packages\numpy\core\__init__.py"", line 50, in <module>; raise ImportError(msg); ImportError:. IMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSU",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/5088:3944,Log,Logs,3944,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5088,1,['Log'],['Logs']
Testability,"havior by default so a test that specify nothing will fail on warning and error.; - but in addition, each tests class/function/bloc can now specify how a specific bloc can react to a message. This can be done using a new syntax taken inspired mimicking the one from gtest. ; - improve the way test failures about warning and error are reported:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5074/testReport/junit/(root)/RigidRigidMappingTest_0/test_translation/; . Example: ; ```cpp; class MyTest : public Sofa_test<>; ; /// This test will fail if a warning/error message is send because the test inherit from sofa_test; void defaultTestBehavior(); {; ....; }. /// This test should generate failure if NO warning and NO Error message is emitted; void catchingTestBehavior(); {; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;. mycomponent.load(""atotallybrokenfile.txt""); }. /// By default test failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugt",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:1563,test,test,1563,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['test'],['test']
Testability,"he Datas and the Links. Example with:; ```py; print(dir(myMechanicalObject)); ```; Will prints:; ```; ['__class__', '__delattr__', '__dir__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'addData', 'addNewData', 'applyRotation', 'applyScale', 'applyTranslation', 'bbox', 'bwdInit', 'cleanup', 'computeBBox', 'constraint', 'context', 'derivX', 'downCast', 'drawMode', 'externalForce', 'findData', 'findLink', 'force', 'free_position', 'free_velocity', 'getAsACreateObjectParameter', 'getCategories', 'getClassName', 'getContext', 'getData', 'getDataFields', 'getLink', 'getLinkPath', 'getListOfDataFields', 'getListOfLinks', 'getMaster', 'getName', 'getPathName', 'getSize', 'getSlaves', 'getTarget', 'getTemplateName', 'init', 'isToPrint', 'listening', 'mappingJacobian', 'master', 'name', 'position', 'printLog', 'reinit', 'reserve', 'reset', 'reset_position', 'reset_velocity', 'resize', 'restScale', 'rest_position', 'rotation', 'rotation2', 'scale3d', 'setSrc', 'showColor', 'showIndices', 'showIndicesScale', 'showObject', 'showObjectScale', 'showVectors', 'showVectorsScale', 'size', 'slaves', 'storeResetState', 'tags', 'topology', 'translation', 'translation2', 'useTopology', 'velocity']; ```. NB: There is minimal test to be sure this work.; NB2: I'm not found of this big list but didn't want to change the semantics to visually separate the links, the data and the methods. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/762:1532,test,test,1532,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/762,3,['test'],['test']
Testability,"he Sofa 'DataEngine' in a scripted way. In the second example provided it is shown how a versatile ROI functionality can be implemented with the help of the PSDE. Two examples with some documentation are provided in: ; applications/plugins/SofaPython/examples/PSDEExamples/. Example of use (01-basic/PSDEBasic.pyscn):; ```python; #!/usr/bin/env python; # -*- coding: utf-8 -*-; import Sofa; import os. path = os.path.dirname(os.path.abspath(__file__))+'/../../../../../../share/mesh/'; ; def createScene(rootNode):; rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename=path+'liver.vtk'); rootNode.createObject('PythonScriptDataEngine', name='PSDE', filename=""DataEngine.py"", classname=""MyDataEngine"")	 . ```; Example for DataEngine class in Python (01-basic/DataEngine.py):. ```python; class MyDataEngine(Sofa.PythonScriptDataEngine): ; ; def parse(self): ; # this is the correct place to define inputs and outputs! (linking will not work in init() for instance); self.addNewInput('Positions',datatype='p',value='@loader.position') ; self.addNewOutput('NumPoints',datatype='d', value='0') . def init(self):; 	pass. def update(self): ; self.NumPoints = len(self.Positions); ```. What it does NOT provide: A new form of parsing from Python data to Sofa data. It uses the available mechanism that uses string conversion and parsing. Also, the type of the Data has to be declared/selected with a parameter in Python, because there is no logic to automatically derive the type desired by the user (could be future work). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/583:2341,log,logic,2341,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583,3,"['log', 'test']","['logic', 'test']"
Testability,"he implementation of BaseObject::init() will not change. . This kind of pattern can be replace with the ""delegate pattern"" (not sure this is its official name). Which leads to:; ```cpp; class BaseObject; {; public:; void init(); { ; checksDataFields(); ; doBaseObjectInit();; setComponentStateOnError();; }; ; void draw(); {; if(componentState != valid); return; doBaseObjectDraw(); ; }; private:; virtual void doBaseObjectInit() {}; virtual void doBaseObjectDraw() {}; };. class MyObject : public BaseObject; {; public:; void doBaseObjectInit() override final; {; /// do here the object specific initialization without bothering of what your parent is doing. ; }; ; void doBaseObjectDraw() override final; {; /// do here the object specific drawing without bothering of what your parent is doing. ; }; }; ```; The latter pattern allows to implement a general behavior in a parent class and be sure this behavior is never broken up by ; the child. . In the PR i tried it to see what would be the change have a look at.; The change in BaseObject is at commit https://github.com/sofa-framework/sofa/commit/5dd2761c7920775e81672cc9a5a12bcaf27b9ee2. Suggestion and improvement welcom :) . EDIT: yes I'm perfectly aware this is a radical refactoring if we are going to deploy it on the whole code base ;); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3317:2821,test,test,2821,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317,2,['test'],['test']
Testability,"he project in the usual CMake way; - `nix run`, to start the software. All these commands take an optional path argument, defaulting to the current working directory, but we could also build / develop / run any commit / tag / branch / fork of the project with eg. `nix build github:sofa-framework/sofa`(for master) or `nix run github:nim65s/sofa/58ae0644d117aea880ed284f6cc0beb7e9802f96`. While here, this also setup some CI for this packaging, mostly to detect early:; - if anything new in the repo would break the nix packaging; - if any update from a dependency in upstream [nixpkgs](https://github.com/NixOS/nixpkgs/) would break sofa. But also, a nix binary cache can be set up with eg. https://www.cachix.org/, so that once a commit is build in CI, users & developers can directly use that cache instead of compiling themselves.; (it is also true in the other way: developers with write access to the cache can send their build result to it so that the CI will be instantaneous cache hit). Here is an example of CI build log: https://github.com/nim65s/sofa/actions/runs/11306279152/job/31446709649. PS: I did not test on macos yet, so this is probably a bit early to expect it work. It at least require darwin signatures I guess, I'll try to test that this week, when I can use an apple system. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059:1390,log,log,1390,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059,5,"['log', 'test']","['log', 'test']"
Testability,"he user, I already added a Data to consider the mapping Jacobians to be constant. For example, it is true for `ModelOrderReductionMapping`. In the future, maybe this property can be defined automatically. I benchmarked the reduced diamond robot over 1000 time steps (the previous benchmark is in https://github.com/sofa-framework/sofa/pull/4443):. Before; ```; [INFO] [BatchGUI] 1000 iterations done in 17.4661 s ( 57.2539 FPS). ; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 6 1.08 1 11.85 20.52 13 0.85 13 88.39 ......projectMappedMatrices; ```. After (with `areJacobiansConstant=True`); ```; [INFO] [BatchGUI] 1000 iterations done in 12.3888 s ( 80.7183 FPS).; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 6 1.03 1 7.64 18.39 8.59 0.76 8.59 84.35 ......projectMappedMatrices; ```. Speed up x1.5 on the matrix mapping. Note that using a `ConstantSparsityPatternSystem` instead of a `MatrixLinearSystem` is slightly faster (but it is not in the scope of this PR):. ```; [INFO] [BatchGUI] 1000 iterations done in 11.7897 s ( 84.82 FPS).; ```. Plans for the future:. - Write a new MatrixMapping component taking advantage of the constant sparsity pattern to further improve the performances; - Write a new MatrixMapping component that would use multithreading, and maybe one using the GPU. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4490:2298,test,test,2298,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4490,2,['test'],['test']
Testability,"hello @Ant0nin , are you speaking about the option: ; SOFACUDA_DOUBLE; or; SOFA_GPU_CUDA_DOUBLE_PRECISE. my version with SOFACUDA_DOUBLE activated compile on windows 10 with recent cudaToolkit. ; Maybe can you put here the error log.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484086528:229,log,log,229,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/991#issuecomment-484086528,1,['log'],['log']
Testability,"hello @guparan :raised_hands: ; we do need to backport this PR, it would be a good test for me doing it. Would you be open to share the steps to-do (branch backport, tag to be added, etc.)?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3229#issuecomment-1225376787:83,test,test,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3229#issuecomment-1225376787,1,['test'],['test']
Testability,"helper::system::atomic<int> was introduced long time ago (before std::atomic I guess).; This code is compiling only for i386 and x86_64 code with gcc/clang (and msvc); Now that std::atomic is here (and we are using c+>11), I guess it is time to use std::atomic where we can. Those modifications mostly appeared in multithreading-related code, so it would be good that @fspadoni could take a look :octocat: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1035:659,test,test,659,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1035,2,['test'],['test']
Testability,hey @alxbilger top :+1: :+1: ; could you add the associated regression tests please?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3756#issuecomment-1489792756:71,test,tests,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3756#issuecomment-1489792756,1,['test'],['tests']
Testability,hey @damienmarchal ; I just tried with the macro at the top of the cpp file and I still get the error (for static function):; `sofa/helper/logging/Messaging.h:177:24: note: expanded from macro 'msg_error'; #define msg_error(...) MSGERROR_CHOOSER(__VA_ARGS__)(__VA_ARGS__); `; Any idea why ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/503#issuecomment-344637137:139,log,logging,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/503#issuecomment-344637137,1,['log'],['logging']
Testability,hey @damienmarchal is it normal that the test _testCreateObjectDataConversionWarning_ is failing since your last commit ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314772234:41,test,test,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-314772234,1,['test'],['test']
Testability,"hi @damienmarchal ,; I've added a small test (loading a binary vtk file with point and cell attributes). Is that enough ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265748799:40,test,test,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265748799,1,['test'],['test']
Testability,"hi @olivier-goury my bad, the regression tests have nothing to do with your PR! timeout are strange but same, not related to the PR ;) sorry about that !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/856#issuecomment-448204968:41,test,tests,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856#issuecomment-448204968,1,['test'],['tests']
Testability,"hing if the CPU supports respectively either AVX2 or AVX or nothing (SSE2 is the fallback in msvc/x64); - deprecates SOFA_VECTORIZE , which enables the 2 previous options if checked. More lecture for the curious: https://devblogs.microsoft.com/cppblog/do-you-prefer-fast-or-precise/; fpfast enables auto-vectorisation (among other stuff), thats why they are usually enabled together. On my setup, with SOFA_ENABLE_FAST_MATH + SOFA_ENABLE_SIMD, I can get around 0 to 10% of speedup. Nothing revolutionary anyway. ; TorusFall.scn (1000steps):; - fastfp+avx2: `7.90001 s ( 126.582 FPS)`; - fastfp `8.3388 s ( 119.921 FPS)`; - avx2 `8.49847 s ( 117.668 FPS)`; - ss2 `8.56825 s ( 116.71 FPS)`; We can see that it should be either both of them enabled, or not. That's why it will not be enabled by default, except if we want fp:fast by default. SIde note, seems Eigen3 is quite optimized with SIMD (w/o vs w/):; - `BM_Matrix_eigenmat33_invert/512` : 4.45 us vs 3.40 us; - `BM_Matrix_eigenmat33_determinant/512` : 1.09 us vs 0.882 us ; - `BM_Matrix_eigenmatf_vecmult<24>/512` : 98.0 us vs 76.0 us. In a separate PR, we could do the same for gcc/clang (with `march=native` and fast_math as well). EDIT: `SOFA_ENABLE_SIMD` was originally `DSOFA_ENABLE_AVX` but change the name for the future PR for gcc/clang; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2652:2391,test,test,2391,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652,2,['test'],['test']
Testability,"his PR includes all changes and adds of the incoming [PSL] branch that can be merged directly. It includes some Python bindings, additional tests, and various cleanings.; Hopefully, it should not break anything. in BaseContext add variants of getObjects() which ease the syntax (eg: for(auto& i : getNodeObjects()){...} + corresponding tests. . - in Node add variants of getNodeObjects() and getTreeObjects that does not force to ease the syntax+ corresponding tests. . - in BaseLink add a setFlag method and a setPersistant...this makes things more consistent with BaseData. - in Binding_Base add the methods: addNewData, addData, getData, getLink, getListOfDataFields, getListOfLinks. The function are documented with docstring and tested in test_BindingBase.py. - in Binding_Data add methods: isSet, isPersistant, setPersistant, hasParent, getParentPath, setValueString. The function are documented with docstring and tested in test_BindingData.py; ; - in Binding_Link add methods: setValueString, isPersistant, setPersistant. The function are documented with docstring and tested in test_BindingLink.py. . - in Binding_SofaModule add methods: getAliasesFor. The function are documented with docstrings & tested in test_BindingSofa.py. - in SofaPython add functions: sendMessageFromException, getSofaFormattedStringFromException. - in SofaTest/_init_.py add ASSERT_* functions that generates real gtest failure. . - in runSofa in QDataSimpleEdit & QLinkSimpleEdit correctly prevent writing when the data field is readOnly; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/410:1143,test,tested,1143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/410,4,['test'],"['test', 'tested']"
Testability,"hmark Time CPU Iterations; ---------------------------------------------------------------------------------; BM_MapMapSparseMatrix_writeLine/512 1.48 us 1.46 us 448000; BM_MapMapSparseMatrix_writeLine/1024 2.95 us 2.95 us 248889; BM_MapMapSparseMatrix_writeLine/2048 6.29 us 6.28 us 112000; BM_MapMapSparseMatrix_writeLine/4096 12.0 us 12.0 us 64000; BM_MapMapSparseMatrix_addCol/512/512 1.08 ms 1.07 ms 640; BM_MapMapSparseMatrix_addCol/1024/512 2.26 ms 2.26 ms 373; BM_MapMapSparseMatrix_addCol/2048/512 3.45 ms 3.45 ms 195; BM_MapMapSparseMatrix_addCol/4096/512 6.93 ms 6.94 ms 90; BM_MapMapSparseMatrix_addCol/512/1024 1.68 ms 1.71 ms 448; BM_MapMapSparseMatrix_addCol/1024/1024 3.43 ms 3.37 ms 213; BM_MapMapSparseMatrix_addCol/2048/1024 6.65 ms 6.70 ms 112; BM_MapMapSparseMatrix_addCol/4096/1024 13.2 ms 13.1 ms 50; BM_MapMapSparseMatrix_addCol/512/2048 3.36 ms 3.37 ms 218; BM_MapMapSparseMatrix_addCol/1024/2048 6.44 ms 6.60 ms 90; BM_MapMapSparseMatrix_addCol/2048/2048 13.5 ms 13.4 ms 50; BM_MapMapSparseMatrix_addCol/4096/2048 27.1 ms 26.9 ms 25; BM_MapMapSparseMatrix_addCol/512/4096 6.64 ms 6.70 ms 112; BM_MapMapSparseMatrix_addCol/1024/4096 12.6 ms 12.6 ms 56; BM_MapMapSparseMatrix_addCol/2048/4096 26.0 ms 26.2 ms 28; BM_MapMapSparseMatrix_addCol/4096/4096 51.2 ms 51.6 ms 10; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2641:3660,test,test,3660,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2641,2,['test'],['test']
Testability,"hreading. ### New features; - Add logGraphUpdates / logDataUpdates global variable in objectmodel to be able to debug multi-threading issue (not declared in headers, temporary until a better design is proposed); - Add a flag d_threadsafevisitor in solvers to disable writing in mechanicalstates of InteractionForceField in MechanicalVReallocVisitor/MechanicalVFreeVisitor as it might crash in multithreaded context; - Add `Contact::computeResponse()` and `Contact::finalizeResponse()` to separate thread-safe from sequential parts of the response computations; - Implement thread-safe Data engine/links updates by adding a lock while calling update().This requires that requestUpdate() or requestUpdateIfDirty() be called instead of update() directly, which is now protected.Bonus side effect is that it no longer matter where or if engines call cleanDirty() in their update method.; - Update all engines to new thread-safe design; - Add execution info in Task and index in WorkerThread; - Add support for multithreaded task logging (for visual profiling); - Add some const correctness in getColor and getName methods. ### Improvements; - Remove ClassInfo, deprecated in favor of BaseClass, and make sure all static instances are initialized while registering objects in the factory, to FIX ""pure virtual call"" crashes with visual c++ in multi-threaded contexts; - Replace `Creator<Contact::Factory,` with `sofa::core::collision::ContactCreator<` to improve thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies conta",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/215:1158,log,logging,1158,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215,1,['log'],['logging']
Testability,"https://cmake.org/cmake/help/latest/policy/CMP0144.html; and make consistent the required version of cmake in Haptics_test. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4469:663,test,test,663,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4469,2,['test'],['test']
Testability,"https://en.wikipedia.org/wiki/Subtraction. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5016:582,test,test,582,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5016,2,['test'],['test']
Testability,"https://github.com/fredroy/SofaGLFW. Why?; - Bothersome to need Qt to have a 3D rendering of a scene; - The existing ""simple"" GUI SofaGLUT is not supported anymore and is based on a deprecated library (glut). This PR brings a simple GUI based on GLFW (a spiritual heir of Glut).; It only needs SofaGUICommon, SofaBaseVisual and Sofa.GL as dependencies.; Integration of GLFW is automatic (automatic fetching and integration with cmake), and linked statically (does not need a glfw.dll to be shipped with). This GUI is launchable with the standard runSofa (with the parameter ""-g glfw""), or can be used with a (provided) stand-alone executable (which needs much less dependencies than runSofa). Lastly, this GUI was designed to support multiple windows in the same time and multiple simulations. So when multiple simulations is possible is the future, it should be easy to modify the code to support this feature.; And multiple windows could be based on the fact having multiple Camera in the scene (feature not implemented yet). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2062:1567,test,test,1567,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062,2,['test'],['test']
Testability,https://github.com/jnbrunet/caribou. TODOs:; - Ensure in-tree and out-of-tree builds and tests are passing; - Use SOFA macros in the plugin part (SofaCaribou); - Ensure proper relocatable installation for integration in future SOFA binaries (see SofaPython3 as example),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2129:89,test,tests,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2129,1,['test'],['tests']
Testability,https://github.com/sofa-framework/sofa/blob/dccb9849ed4b08a305086e02131ce7c25c79eff0/Sofa/Component/Topology/Utility/tests/TopologyChecker_test.cpp#L1202-L1205,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3151#issuecomment-1232706994:117,test,tests,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3151#issuecomment-1232706994,1,['test'],['tests']
Testability,"https://github.com/sofa-framework/sofa/issues/1527. Deprecates **SofaHaptics** and **SofaValidation** (and a bit of **SofaGeneralObjectInteraction**). **SofaHaptics** was more or less renamed to Sofa.Component.Haptic; **SofaValidation** only has 2 useful components (CompareState and CompareTopology) which have been moved to S.C.Playback (along the Read and Write ones); **SofaGeneralObjectInteraction** had an interactiveEllipsoidFF which has been moved to S.C.MechanicalLoad. The remaining components in the modules/ are now either deprecated (gravity), bogus (monitor&co, collisiongroupmanager) or could be replaced with two components (boxstiffFF). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3041:1193,test,test,1193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3041,2,['test'],['test']
Testability,"https://github.com/sofa-framework/sofa/issues/1527. based on; - #2679 . Deprecates SofaOpenglVisual; Deprecates partially SofaGeneralEngine. This PR creates an independent plugin, with all the OpenGL-related components + API (previous Sofa.GL module in SofaKernel).; So it comes with the Sofa.GL library (API, utilities, etc) and 3 loadable module:; - ~~Model~~ **Rendering3D**: components drawing stuff in the 3D world; - ~~OnScreen~~ **Rendering2D**: utility components to draw stuff on screen, usual debugging or informations; - ~~Rendering~~ **Shader** : components involves with shadering; - **Engine**: engine doing stuff with OpenGL (only one for now). As it (should?) be considered as a plugin, it put it in applications/plugins but this is a matter of discussion. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2709:1312,test,test,1312,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2709,2,['test'],['test']
Testability,"https://github.com/sofa-framework/sofa/issues/1637. All in all, removes everything related to the ForceMask, which had been disabled (SOFA_ENABLE_MASK) for a long time.; It was also cauing bugs apparently to a lot of people. [ci-depends-on https://github.com/sofa-framework/Flexible/pull/1]; [ci-depends-on https://github.com/sofa-framework/Compliant/pull/1]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2316:899,test,test,899,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2316,2,['test'],['test']
Testability,"https://github.com/sofa-framework/sofa/pull/3242 removes some code related to the `getTemplateName` method. This PR adds some unit tests to make sure that #3242 won't break them. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3380:131,test,tests,131,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3380,3,['test'],"['test', 'tests']"
Testability,"https://github.com/sofa-framework/sofa/pull/3266 removed `importPlugin(""SofaComponentAll"") ;` in `NodeContext_test.cpp`, but did not replace it by anything else. I don't know why the CI did not detect it, but the problem can be seen in https://github.com/sofa-framework/sofa/pull/3280. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3322:825,test,test,825,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3322,2,['test'],['test']
Testability,"https://github.com/sofa-framework/sofa/pull/3512 is already merged.; But you could try to add your changes on https://github.com/sofa-framework/sofa/pull/3501. According to my unit test, a simple; ```cpp; if (n == 0); {; return true;; }; ```; makes the job",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1337325939:181,test,test,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1337325939,2,['test'],['test']
Testability,"https://github.com/sofa-framework/sofa/pull/4044#issuecomment-1637217987. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4044:613,test,test,613,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4044,2,['test'],['test']
Testability,https://stackoverflow.com/questions/7208070/googletest-how-to-skip-a-test,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2249#issuecomment-884026144:69,test,test,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2249#issuecomment-884026144,1,['test'],['test']
Testability,i.e. to easily define bracket x[] and len(x) operators to a python type defined in c++. (a concrete usage is coming in another PR). <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/165:301,test,test,301,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/165,1,['test'],['test']
Testability,"iases* the eigen matrix, so that any modification will reflect on both sides provided the sparsity pattern does not change (on either side). A python context manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/411:1129,assert,assert,1129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411,1,['assert'],['assert']
Testability,ibrary/PrivateFrameworks/RemoteServiceDiscovery.framework/Versions/A/RemoteServiceDiscovery; 0x7fff331e7000 - 0x7fff331fefff com.apple.xpc.RemoteXPC (1.0 - 2038.80.3) <C4BFF5FC-FC9C-3161-9612-7070EDAE9989> /System/Library/PrivateFrameworks/RemoteXPC.framework/Versions/A/RemoteXPC; 0x7fff33246000 - 0x7fff33249fff com.apple.help (1.3.8 - 71) <6074D81C-4507-35A6-88D7-D82309F81587> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help; 0x7fff3324a000 - 0x7fff33251fff com.apple.EFILogin (2.0 - 2) <B06CCD1C-A4D1-34D2-89C5-0DB69FE65234> /System/Library/PrivateFrameworks/EFILogin.framework/Versions/A/EFILogin; 0x7fff33252000 - 0x7fff3325dfff libcsfde.dylib (554) <9CDB9580-DD1C-347E-91C5-6D92D96F52F5> /usr/lib/libcsfde.dylib; 0x7fff3325e000 - 0x7fff332c3fff libcurl.4.dylib (121.40.2) <77010EA9-4AD1-3F4A-B3EF-2FFE739FB349> /usr/lib/libcurl.4.dylib; 0x7fff332c4000 - 0x7fff332cbfff com.apple.LoginUICore (4.0 - 4.0) <7225326A-7704-362D-B64E-4ABF4A221F88> /System/Library/PrivateFrameworks/LoginUIKit.framework/Versions/A/Frameworks/LoginUICore.framework/Versions/A/LoginUICore; 0x7fff332cc000 - 0x7fff3332ffff com.apple.AppSupport (1.0.0 - 29) <21E116C6-C770-3024-98EB-51D1166AACD2> /System/Library/PrivateFrameworks/AppSupport.framework/Versions/A/AppSupport; 0x7fff333d0000 - 0x7fff33482fff com.apple.GameController (1.0 - 1) <E2778524-D805-3EF4-A147-DECE5315D77F> /System/Library/Frameworks/GameController.framework/Versions/A/GameController; 0x7fff3348b000 - 0x7fff3348bfff com.apple.ApplicationServices (48 - 50) <42B48E32-1918-3178-8DE0-E8126B9EC088> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices; 0x7fff33648000 - 0x7fff33687fff com.apple.AppleIDSSOAuthentication (1.0 - 1) <687FC889-44F5-3FA9-A93B-D2D65B16B6B0> /System/Library/PrivateFrameworks/AppleIDSSOAuthentication.framework/Versions/A/AppleIDSSOAuthentication; 0x7fff3378c000 - 0x7fff3378cfff libHeimdalProxy.dylib (79) <85526E13-1E48-377A-A700-EE3F5,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:73127,Log,LoginUIKit,73127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['Log'],['LoginUIKit']
Testability,"icitSolverDynamicTest_medium_dt_0/); [UnitTests.SofaGeneralExplicitOdeSolver_test/RungeKutta4ExplicitSolverDynamic_test.rungeKutta4ExplicitSolverDynamicTest_small_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta4ExplicitSolverDynamic_test/rungeKutta4ExplicitSolverDynamicTest_small_dt_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_medium_dt_with_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_medium_dt_with_damping_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_high_dt_with_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_high_dt_with_damping_0/); ```. for a reallllly slight variation in the result (6.106226635438361e-16 diff); actually the unit tests checker is really tight 😛",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769:2092,test,testReport,2092,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769,3,['test'],"['testReport', 'tests']"
Testability,"idget.cpp.o MaterialDataWidget.h DataWidget.h ModifyObject.h (1915 ms); MaterialDataWidget.cpp.o MaterialDataWidget.h DataWidget.h ModifyObject.h (1504 ms); moc_QDisplayDataWidget.cpp.o QDisplayDataWidget.h DataWidget.h ModifyObject.h (1473 ms); WDoubleLineEdit.cpp.o (1407 ms); DisplayFlagsDataWidget.cpp.o DisplayFlagsDataWidget.h DataWidget.h ModifyObject.h (1379 ms); QRGBAColorPicker.cpp.o QRGBAColorPicker.h DataWidget.h ModifyObject.h (1375 ms); ... 22925 ms: sofa/SofaKernel/modules/SofaCore/src/sofa/core/ObjectFactory.h (included 440 times, avg 52 ms), included via:; initOpenGLVisual.cpp.o (192 ms); PointSetTopologyAlgorithms.cpp.o (191 ms); initValidation.cpp.o (187 ms); DataDisplay.cpp.o (186 ms); DifferenceEngine.cpp.o (178 ms); MeshObjLoader.cpp.o (177 ms); ... 21119 ms: sofa/extlibs/gtest/include/gtest/internal/gtest-port.h (included 176 times, avg 119 ms), included via:; gtest-typed-test.cc.o gtest-typed-test.h (796 ms); gtest-port.cc.o (666 ms); gtest-death-test.cc.o gtest-death-test.h gtest-death-test-internal.h gtest-internal.h (650 ms); gtest-test-part.cc.o gtest-test-part.h gtest-internal.h (463 ms); gtest-filepath.cc.o gtest-filepath.h gtest-string.h (456 ms); gtest.cc.o gtest.h gtest-internal.h (246 ms); ... 20903 ms: sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/vector.h (included 156 times, avg 133 ms), included via:; MeshGmsh.cpp.o MeshGmsh.h Mesh.h (492 ms); MeshTopologyLoader.cpp.o MeshTopologyLoader.h Mesh.h (402 ms); Image.cpp.o Factory.inl (384 ms); SVector.cpp.o SVector.h (379 ms); GenerateRigid.cpp.o GenerateRigid.h Mesh.h (373 ms); TestMessageHandler.cpp.o TestMessageHandler.h (346 ms); ... 19960 ms: /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/pstl/glue_algorithm_defs.h (included 157 times, avg 127 ms), included via:; qglviewer.h camera.h QMap qmap.h qiterator.h qglobal.h algorithm (348 ms); manipulatedCameraFrame.h manipulatedFrame.h frame.h QObject qobject.h qobjectdefs.h qnamespace.h qglobal.h algorithm (345 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:35299,test,test,35299,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['test'],['test']
Testability,ield; - TrianglePressureForceField; - [SofaConstraint]; - DistanceLMConstraint; - DOFBlockerLMConstraint; - FixedLMConstraint; - UncoupledConstraintCorrection; - [SofaDeformable] ; - MeshSpringForceField; - [SofaExporter] ; - WriteTopology; - [SofaGeneralDeformable]; - FastTriangularBendingSprings; - QuadBendingSprings; - QuadularBendingSprings; - TriangleBendingSprings; - TriangularBendingSprings; - TriangularBiquadraticSpringsForceField; - TriangularQuadraticSpringsForceField; - TriangularTensorMassForceField; - VectorSpringForceField; - [SofaGeneralEngine] ; - SmoothMeshEngine; - [SofaGeneralLoader] ; - ReadTopology; - [SofaGeneralSimpleFem]; - BeamFEMForceField; - TetrahedralCorotationalFEMForceField; - TriangularFEMForceFieldOptim; - [SofaMeshCollision]; - LineModel; - PointModel; - TriangleModel; - TriangleLocalMinDistanceFilter; - [SofaMiscCollision] ; - TetrahedronModel; - [SofaMiscFem]; - FastTetrahedralCorotationalForceField; - StandardTetrahedralFEMForceField; - TetrahedralTensorMassForceField; - TetrahedronHyperelasticityFEMForceField; - TriangleFEMForceField; - TriangularAnisotropicFEMForceField; - TriangularFEMForceField; - [SofaMiscForceField] ; - MeshMatrixMass; - [SofaMiscMapping]; - DistanceMapping; - DistanceMapping; - [SofaMiscTopology] ; - TopologicalChangeProcessor; - [SofaNonUniformFem] ; - NonUniformHexahedronFEMForceFieldAndMass; - [SofaOpenglVisual] ; - DataDisplay; - [SofaSimpleFem]; - HexahedronFEMForceField; - TetrahedronDiffusionFEMForceField; - TetrahedronFEMForceField. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1223:3634,test,test,3634,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1223,2,['test'],['test']
Testability,"if `collisionModel1`, the `collModelPath1` is affected to `nullptr`, which leads to a crash. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4710:632,test,test,632,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4710,2,['test'],['test']
Testability,"if the attribute ""src"" is found, a link is dynamically added to the object. If the link is resolved right away, it links the Data. If the link is not resolved, it will try later in the `updateLinks` function. It allows to write:. ```xml; <OglModel name=""OglModel"" src=""@SOFA_pod"" />; <MeshOBJLoader name=""SOFA_pod"" filename=""mesh/SOFA_pod.obj"" handleSeams=""1"" />; ```. Before this PR, the src object must be declared before the `src` attribute. It was not possible to declare it after, such as in the previous example. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3151:1058,test,test,1058,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3151,2,['test'],['test']
Testability,ighten the plugin a little bit. New structure:. ```; SofaPython; ├── Binding.cpp; ├── Binding.h; ├── Bindings; │   ├── BaseContext.cpp; │   ├── BaseContext.h; │   ├── Base.cpp; │   ├── Base.cpp.orig; │   ├── Base.h; │   ├── Base.h.orig; │   ├── BaseLoader.cpp; │   ├── BaseLoader.h; │   ├── BaseMapping.cpp; │   ├── BaseMapping.h; │   ├── BaseMechanicalState.cpp; │   ├── BaseMechanicalState.h; │   ├── BaseMeshTopology.cpp; │   ├── BaseMeshTopology.h; │ └── ...; ├── CMakeLists.txt; ├── initSofaPython.cpp; ├── PythonCommon.h; ├── PythonEnvironment.cpp; ├── PythonEnvironment.h; ├── PythonFactory.cpp; ├── PythonFactory.h; ├── PythonMacros.cpp; ├── PythonMacros.h; ├── PythonToSofa.inl; ├── PythonVisitor.cpp; ├── PythonVisitor.h; ├── SceneLoaderPY.cpp; ├── SceneLoaderPY.h; ├── scn2python.py; ├── ScriptController; │   ├── PythonMainScriptController.cpp; │   ├── PythonMainScriptController.h; │   ├── PythonScriptController.cpp; │   ├── PythonScriptController.h; │   ├── PythonScriptControllerHelper.cpp; │   ├── PythonScriptControllerHelper.h; │   ├── PythonScriptDataEngine.cpp; │   ├── PythonScriptDataEngine.h; │   ├── PythonScriptEvent.cpp; │   ├── PythonScriptEvent.h; │   ├── PythonScriptFunction.cpp; │   ├── PythonScriptFunction.h; │   ├── ScriptController.cpp; │   ├── ScriptController.h; │   ├── ScriptDataEngine.cpp; │   ├── ScriptDataEngine.h; │   ├── ScriptEvent.cpp; │   ├── ScriptEvent.h; │   ├── ScriptFunction.cpp; │   └── ScriptFunction.h; ├── SofaPythonConfig.cmake.in; ├── SofaPython.txt; └── ...; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/616:1852,test,test,1852,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/616,2,['test'],['test']
Testability,"ignored scene: DistanceGridForceField-liver.scn. This way, the scene has to remain ignored to build the plugin in default mode (we need it for SofaImplicitField, which is needed for a bunch of examples). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/594:455,test,test,455,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/594,2,['test'],['test']
Testability,ile skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit te,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3106,test,tests,3106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"image plugin had the choice at one moment to compile just its classes with a subset of image type (Byte, etc); The macro was always activated right now, so there was no choice but to compile always ALL the image types, and the image plugin was really long to compile. This PR restores this behavior, with a third choice: to not compile any instanciations.; Some people would like to use some headers (especially CImgData.h) for other plugin, without dragging the whole compilation. Anyway this PR introduces a new cmake option called PLUGIN_IMAGE_COMPILATION_SET restrained to 3 values (a combo box in cmake-gui actually); - standard: a few selected types of image is chosen; - full: all the the instanciations will be compiled; - none: no instanciation, so you will only compile initImage.cpp effectively. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2340:1346,test,test,1346,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2340,2,['test'],['test']
Testability,"imulation.animate(self.root_node, self.root_node.getDt()). def reload(self, case: TestCase = TestCase.NONE):. Sofa.Simulation.unload(self.root_node); self.root_node = Sofa.Core.Node(""root""); self.nodes = createScene(self.root_node, case); Sofa.Simulation.init(self.root_node). def createScene(root, case: TestCase):; plugins = [; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ]; for plugin in plugins:; root.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root.addObject(""DefaultAnimationLoop""); root.addObject(""DefaultPipeline""); root.addObject(""BruteForceBroadPhase""); root.addObject(""BVHNarrowPhase""); root.addObject(""DefaultContactManager""); root.addObject(; ""LocalMinDistance"",; alarmDistance=5.0,; contactDistance=0.5,; ). node_1 = root.addChild(""child_1""); node_1.addObject(""MechanicalObject"", position=[0, 0, 0] * 5). node_2 = root.addChild(""child_2""); node_2.addObject(""MechanicalObject"", position=[1, 1, 1] * 5). if case == TestCase.ONE_MODEL:; node_1.addObject(""PointCollisionModel""); elif case == TestCase.TWO_MODELS:; node_1.addObject(""PointCollisionModel""); node_2.addObject(""PointCollisionModel""); elif case == TestCase.NONE:; pass. return node_1, node_2. if __name__ == ""__main__"":; simulation = SimulationHandler(). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.NONE). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.ONE_MODEL). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.TWO_MODELS); ```. No components of the collision pipeline:; ![image](https://user-images.githubusercontent.com/29635054/191464004-4a820fde-efa7-4e3f-b448-a3f734daf367.png); -> No memory increase, even with two collision models. NewProximity; ![image](https://user-images.githubusercontent.com/29635054/191463963-c581e5ce-e315-401c-b9ed-1786c27b66c1.png); -> Some memory increase with one and no collision models, STRONG increase with two collision models. Loc",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318:1718,Test,TestCase,1718,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318,1,['Test'],['TestCase']
Testability,"in #4272 |; | stb | header-only | `extlibs` | MIT | OK |; | TinyXML | static | `extlibs` | zlib **(should be in a separate file)** | Externalize tinyxml dependency: #4240 (waiting for merge) |; | miniFlowVR | static | `applications/plugins/SofaDistanceGrid/extlibs` | LGPL (version ?) **(should be in a separate file)** | Not built by default. TODO: plugin to be externalized (#1442 ) |; | newmat | static | `applications/plugins/SofaNewmat/extlibs` | type inconnu | Not built by default. TODO: plugin to be externalized (#1442 ) |; | CImg | header-only | `applications/plugins/CImgPlugin/extlibs` | CeCILL-C / CeCILL | OK |; | csparse | static | `Sofa/Component/LinearSolver/Direct/extlibs` | **no license file** | Plugin to be externalized. WIP : #4258 |; | metis | static | `Sofa/Component/LinearSolver/Direct/extlibs` | Apache v2 | Externalize metis dependency : #4266 (waiting for merge) |; | gtest | shared | `Sofa/framework/Testing/extlibs` | BSD-3-Clause | Externalize ? |; | cxxopts | header-only | `Sofa/GUI/Common (fetched from GitHub)` | MIT | Add to possibility to use external dependency and prevent from fetching: Fixed in #4273 |; | libQGLViewer | shared | `Sofa/GUI/Qt` | GPL | Find or use embedded code (find module being fixed in #4290) |. The actions we should take to make our code compatible for the conda package on conda-forge are:; 1. Fix the missing licenses files (points in bold); 2. Avoid all static libraries. For point 2, we are not concerned by miniFlowVR and newmat, as we do not compile the corresponding plugins for the conda package, at least for now. Before considering any action on these two, do the SofaDistanceGrid and SofaNewmat plugins are still used and planned to be maintained in future releases ?. Regarding other static libs (TinyXML, csparse and metis), could we consider to switch to an external dependency instead ? For TinyXML, the current behavior is to first look for an external package, and fallback to embedded version if unavailable. This loo",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4221:1455,Test,Testing,1455,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4221,1,['Test'],['Testing']
Testability,"in DataExchange component, add exchanges of image data types (ImageUC, ImageUS, ImageF), requiring a depedency with the image plugin; + add a simple example passing an image from an ImageContainer (Thread 1) to an ImageViewer (Thread 2); + fix OpenGL issues in the draw() function in the Kinect component in the image plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/769:577,test,test,577,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/769,2,['test'],['test']
Testability,"in ForceField_test, {Multi,Multi2}Mapping_test.; (+ minor cleaning). EDIT: I also added a missing automatic test for MultiMapping::getK. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/209:108,test,test,108,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/209,2,['test'],['test']
Testability,"in FreeMotionAnimationLoop. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2770:567,test,test,567,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2770,2,['test'],['test']
Testability,"in TetrahedronHyperelasticityFEMForceField.inl , gl.h was included before anything, so the macros defined in build_option_opengl.h were ignored.; The inclusion of gl.h was useless anyway so it was removed. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1193:457,test,test,457,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1193,2,['test'],['test']
Testability,"in case both mstates are the same. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4317:574,test,test,574,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4317,2,['test'],['test']
Testability,in fact I don't really see where this margin is used as the _min and _max are computed from the vertices.; I don't see where _min and _max are used to encapsulate the vertices... The only read access is in SparseGridTopology::buildVirtualFinerLevels(). I see two solutions:; - The bourrin version: we remove this shift in a branch and check the tests. ; - The pétochard version: we duplicate the min and max field to have the accurate and enlarged one. (I'm for the 1st one); Edit: I forgot the 3rd option: the batard version: we remove the shift without saying it and wait if someone notice ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355534101:345,test,tests,345,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/308#issuecomment-355534101,1,['test'],['tests']
Testability,"in loaded but not added to the PluginManager; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. Case 3; ```; > PluginManager::loadPlugin(""/path/to/myplugin.so""); Plugin loaded and added to the PluginManager plugins map; > PluginManager::loadPlugin(""/DIFFERENT/path/to/myplugin.so""); Plugin will be loaded a second time by the PluginManager, this should be prevented; ```. _How did I fixed this_; This is one way of doing it. If you have other ideas/suggestions, please tell me.; Since in most of the plugins we have, we define a `getModuleName` and `getModuleVersion`, we should use them to compared loaded plugin instead of plugin paths. Also, we should be able to notify the PluginManager of a plugin that we loaded without him noticing (such as calling dlopen). Here is what I did:. - `PluginManager::loadPlugin` now iterates through its list of loaded plugins and check that the the plugin we want to load does not contains the same `initExternalModule` function's pointer or plugin's name as another already loaded plugin; - A plublic `PluginManager::addPlugin` that adds a plugin to the register without loading it (it must be loaded in the memory beforehand) is now available. **Supplementary python bindings**; Since me and @vmagno used this PR extensively during the past 2 months for our simulations, we added a couple of python bindings useful to us. I think this wraps up a lot of things, let me know what you guys think. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/572:6506,test,test,6506,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572,2,['test'],['test']
Testability,"in order to be informed when a scene is loaded. WARNING: each SceneLoader's loading function must call ""notifyLoadingScene"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/204:350,test,test,350,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/204,1,['test'],['test']
Testability,"in plugins:; root.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root.addObject(""DefaultAnimationLoop""); root.addObject(""DefaultPipeline""); root.addObject(""BruteForceBroadPhase""); root.addObject(""BVHNarrowPhase""); root.addObject(""DefaultContactManager""); root.addObject(; ""LocalMinDistance"",; alarmDistance=5.0,; contactDistance=0.5,; ). node_1 = root.addChild(""child_1""); node_1.addObject(""MechanicalObject"", position=[0, 0, 0] * 5). node_2 = root.addChild(""child_2""); node_2.addObject(""MechanicalObject"", position=[1, 1, 1] * 5). if case == TestCase.ONE_MODEL:; node_1.addObject(""PointCollisionModel""); elif case == TestCase.TWO_MODELS:; node_1.addObject(""PointCollisionModel""); node_2.addObject(""PointCollisionModel""); elif case == TestCase.NONE:; pass. return node_1, node_2. if __name__ == ""__main__"":; simulation = SimulationHandler(). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.NONE). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.ONE_MODEL). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.TWO_MODELS); ```. No components of the collision pipeline:; ![image](https://user-images.githubusercontent.com/29635054/191464004-4a820fde-efa7-4e3f-b448-a3f734daf367.png); -> No memory increase, even with two collision models. NewProximity; ![image](https://user-images.githubusercontent.com/29635054/191463963-c581e5ce-e315-401c-b9ed-1786c27b66c1.png); -> Some memory increase with one and no collision models, STRONG increase with two collision models. LocalMinDistance; ![image](https://user-images.githubusercontent.com/29635054/191464146-0e656a0d-8850-4b43-bdd3-b1a478fd4f14.png); -> Some memory increase with one and no collision models, STRONG increase with two collision models. As you can see, there is a memory increase with no collision models and one collision model,; but with two collision models, the increase is much stronger. This is why I suspect the leak is somewhere in the pipeline,",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318:2163,Test,TestCase,2163,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318,1,['Test'],['TestCase']
Testability,"in sofa_install_libraries:. cyclic recursions when globbing for external libraries due to symlinks resolution.; I have done this fix for about a month and a half now, without noticing any side effects, but I can't tell if there are any. ______________________________________________________ ; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/766:489,test,test,489,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/766,2,['test'],['test']
Testability,"in the graph display, name and class name were inverted compared to classical objects. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2371:626,test,test,626,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2371,2,['test'],['test']
Testability,"ing for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Check if compiler accepts -pthread; -- Check if compiler accepts -pthread - yes; -- Found Threads: TRUE ; CMake Deprecation Warning at CMakeLists.txt:225 (message):; Deprecated components are activated (SOFA_WITH_DEPRECATED_COMPONENTS; variable is ON). -- Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; **CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Boost (missing: system filesystem program_options) (found; version ""1.71.0"")**; Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindBoost.cmake:2179 (find_package_handle_standard_args); SofaKernel/SofaFramework/SofaMacros.cmake:526 (find_package); SofaKernel/modules/SofaHelper/CMakeLists.txt:6 (sofa_find_package). -- Configuring incomplete, errors occurred!; See also ""/home/thebigone/projects/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/thebigone/projects/sofa/build/CMakeFiles/CMakeError.log"". ``; $ sudo apt install libboost-dev; ``; Reading package lists... Done; Building dependency tree ; Reading state information... Done; **libboost-dev is already the newest version (1.71.0.0ubuntu2).**; The following packages were automatically installed and are no longer required:; libdrm2:i386 libexpat1:i386 libglapi-mesa:i386 libglvnd0:i386 libx11-xcb1:i386 libxcb-dri2-0:i386 libxcb-dri3-0:i386 libxcb-glx0:i386 libxcb-present0:i386 libxcb-sync1:i386 libxdamage1:i386 libxfixes3:i386; libxshmfence1:i386 libxxf86vm1:i386; Use 'sudo apt autoremove' to remove them.; 0 upgraded, 0 newly installed, 0 to remove and 107 not upgraded. Alban. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1462:2235,log,log,2235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1462,2,['log'],['log']
Testability,"initTaskScheduler() was not called so m_sceduler was nullptr. And removes compilation warnings and some scenes warnings. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3676:660,test,test,660,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3676,2,['test'],['test']
Testability,"ion. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warnin",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:973,test,test,973,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,4,['test'],['test']
Testability,"ir<const sofa::core::VecType, std::basic_string<char>>, std::allocator<std... (527 times, avg 25 ms); 9245 ms: std::__detail::_Insert_base<sofa::core::VecType, std::pair<const sofa::core::VecType, std::basic_string<char>>, std::a... (527 times, avg 17 ms); 9002 ms: std::_Hashtable<sofa::core::VecType, std::pair<const sofa::core::VecType, std::basic_string<char>>, std::allocator<std... (527 times, avg 17 ms); 8232 ms: std::_Hashtable<sofa::core::VecType, std::pair<const sofa::core::VecType, std::basic_string<char>>, std::allocator<std... (527 times, avg 15 ms); ... after; ...; 6836 ms: std::_Hashtable<int, std::pair<const int, int>, std::allocator<std::pair<const int, int>>, std::__detail::_Select1st, ... (844 times, avg 8 ms); 5064 ms: std::_Hashtable<std::basic_string<char>, std::pair<const std::basic_string<char>, unsigned int>, std::allocator<std::p... (679 times, avg 7 ms); 4954 ms: std::unordered_map<sofa::core::VecType, std::basic_string<char>> (527 times, avg 9 ms); 4075 ms: std::_Hashtable<sofa::core::VecType, std::pair<const sofa::core::VecType, std::basic_string<char>>, std::allocator<std... (527 times, avg 7 ms). (limited output so the others are lower); ```. In practical, on the same config/setup, compilation time was shorter of about ~15sec (not that much but still). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3401:2353,test,test,2353,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3401,2,['test'],['test']
Testability,"is now deprecated (and will be deleted soon), please use numpy instead; [ERROR] [SofaPython] createObject: component 'compliance' of type 'UniformCompliance' in node 'joint'; [ERROR] [SofaPython] Object type UniformCompliance<Vec1d> creation failed; [FATAL] [SofaPython] SP_CALL_MODULEFUNC; Traceback (most recent call last):; File ""LambdaPropagation.py"", line 90, in createScene; joint = StructuralAPI.FixedRigidJoint( ""joint"", ground.node, rigid.node ); File ""/home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/applications/plugins/Compliant/python/Compliant/StructuralAPI.py"", line 634, in __init__; self.compliance = self.node.createObject('UniformCompliance', name='compliance', compliance=compliance); TypeError: bad argument type for built-in operation; Build timed out (after 30 minutes). Marking the build as aborted.; Build was aborted; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; [File exists] check if file exists [builds/pr/all/build-finished]; Run condition [And] preventing perform for step [[Scan for compiler warnings]]; Recording test results. ########## SIG 15 - SIGTERM: a termination request was sent to the program ##########; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::dump()+0x23) [0x7f6585f9be63]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaHelper.so.17.dev.0(sofa::helper::BackTrace::sig(int)+0x14a) [0x7f6585f9c15a]; -> /lib/x86_64-linux-gnu/libc.so.6(+0x36cb0) [0x7f6585049cb0]; -> /usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0x5b6b1) [0x7f658594f6b1]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::PropagateEventVisitor::processNodeTopDown(sofa::simulation::Node*)+0xec) [0x7f65882c897c]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulati",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:3177,test,test,3177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,1,['test'],['test']
Testability,"ised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; Found Json: /home/giang/sofa/src/extlibs/json (Required is at least version ""3.1.2"") ; Found STB: /home/giang/sofa/src/extlibs/stb ; Found DIFFLIB: /home/giang/sofa/src/extlibs/difflib ; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python (found version ""3.8.10"") ; Looking for pthread.h; Looking for pthread.h - found; Performing Test CMAKE_HAVE_LIBC_PTHREAD; Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; Check if compiler accepts -pthread; Check if compiler accepts -pthread - yes; Found Threads: TRUE ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Found ZLIB: /usr/lib/x86_64-linux-gnu/libz.so (found version ""1.2.11"") ; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topology.Mapping; Adding module Sofa.Component.Topology.Utility; Adding module Sofa.Component.Visual; Adding module Sofa.Component.LinearSolver; Adding module Sofa.Component.LinearSolver.Iterative; A",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:1967,Test,Test,1967,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,2,['Test'],['Test']
Testability,"issofa/framework/sofa/defaulttype/CompressedRowSparseMatrixConstraint.h) in [ISSofa](https://github.com/InSimo/ISSofa) derived from [CompressedRowSparseMatrix](https://github.com/InSimo/ISSofa/blob/issofa/framework/sofa/defaulttype/CompressedRowSparseMatrix.h) so we need to bring their version of CompressedRowSparseMatrix . I renamed all the **bloc** words to **block** as well. The previous CRSMatrix could be used as a BaseMatrix (solvers), ConstraintMatrix (iterations) and as a pure CRS itself.; This new CRSMatrix is decomposed in several types:; - CRSGeneric (name to be changed maybe): the pure CRS structure; - CRSMechanical: inheriting/implementing BaseMatrix; - (in a next PR) CRSConstraintMatrix, with the same API as the old CRSMatrix used for ConstraintMatrices (for iterating). Different purposes need different traits (some case would prefer autocompression, etc), so a lot of compile-time options are present. They are called policy.; I needed to change some flags from the Insimo's version to have the same behavior for the tests. So in the future, it could be interesting to see if those changes should be integrated later for more performance (but the tests would need to be changed). For compatibility reasons, the old ""CRSMatrix"" type is an alias on CRSMechanical. In this PR, no change of performance is noted (neither regression or upgrade). Tested on caduceus, TorusFall, solvers scenes and BeamAdapter's 3instruments_collis.scn. Ref:; - https://github.com/InSimo/ISSofa/blob/issofa/framework/sofa/defaulttype/CompressedRowSparseMatrix.h. Courtesy of Insimo (@fjourdes ). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3515:1207,test,tests,1207,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3515,1,['test'],['tests']
Testability,issue #1589 could be closed after merging this PR. It has already been solved in a previous PR but this one add a test related to the reported bug.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2136#issuecomment-859587427:114,test,test,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2136#issuecomment-859587427,1,['test'],['test']
Testability,"issue sofa-framework/sofa#2 Fix compilation when option SOFA_FLOATING_POINT_TYPE in CMake selected as float. The problem arising when trying to compile with float was due to missing declaration from newmat external library.; The library has been modified for sofa to use a #define SOFA_FLOAT in include.h; However the SOFA_FLOAT was never defined for the extlib since the current procedure is to set CMake variable SOFA_FLOAT and SOFA_DOUBLE to 1. This was done anyway AFTER processing the cmake of the extlibs. Therefore, this pr moves the option for floating point type in sofa in the root CMakeLists and adds the #define for the newmat library to actually create the float type functions. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/262:917,test,test,917,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/262,1,['test'],['test']
Testability,it doesn't on mac.... I pushed a simple test on EdgeSetTopologyAlgorithm.; Feel free to do some tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644:40,test,test,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644,4,['test'],"['test', 'tests']"
Testability,"it is difficult to spot quickly which plugin is externalized or not in the centralized plugin folder. So this PR gathers all of these into a same folder (namely `external_plugins`) and are added to the cmake configure process after the `plugins/` one. This implies that plugins in `plugins/` does not depend on things from `external_plugins/`, which should be normal as externalized plugins are supposed to be less a priority than the `plugins`. EXCEPT **SofaPython3** 🤔. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4505:1011,test,test,1011,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4505,2,['test'],['test']
Testability,it seems from the CI that many tests and scene examples are using UniformMass without any input mass info .. ; :clown_face: :japanese_goblin:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2037429819:31,test,tests,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3927#issuecomment-2037429819,1,['test'],['tests']
Testability,"it was not noticed in #4270 that the two version of RGB from HSV was different on Hue value ; (one is normalized [0...1], the other in RGBAColor is not and is in degree [0...360]). for those interested : http://wiki.gis.com/wiki/index.php/HSV_Color_Space. FYI while debugging, an issue in TetraFEMForcefield has been found #4407; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4408:869,test,test,869,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4408,2,['test'],['test']
Testability,"it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix the 200 failing tests if we activate failure on Warning&Deprecated ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1311,test,tests,1311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008,10,['test'],"['test', 'tests']"
Testability,"just for quick debugging visualization. ![NearestPointROI_00000001](https://github.com/user-attachments/assets/cce22e5c-263b-4ba5-8d39-050963967f30). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4944:689,test,test,689,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4944,2,['test'],['test']
Testability,just for the record: it seems that test DISABLED_ are counted in the total number of tests displayed the dashboard.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-888080197:35,test,test,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-888080197,2,['test'],"['test', 'tests']"
Testability,"kefile, SofaHelper CMakefile.; Moreover, a lot of compiler options are not set by **target** (CMake notion), so those are to added EVERYTIME for each projet/plugin (see SofaPython3): c++17, MSVC special flags, etc. # Solution; This PR regroups all CMake config code and SofaFramework is no more the ""bootstrapper"" or whatever it was not.; If you linking against anything from SOFA (most likely at least SofaHelper), the configuration will spread into your project automatically.; This module will be the lowest in the depencency chain (was a bastard mix of SofaFramework/SofaHelper before). # WIP; * ~~Some CMake file to clean~~. * ~~Add no-attribute flags from #1682~~. * Some variables are still not linked to Sofa.Config like Sofa_VERSION: it was in the root CMakefile before, so all the projects know this variable.; For now, Sofa.Config set those global variables **PARENT_SCOPE** but this is ugly in my opinion, and not ""Modern CMake""; One solution is to link this variable to a property of Sofa.Config, and retrieve this property when needed. But it seems a bit bothersome.; ```; get_target_property(Sofa_VERSION ${TARGET} Sofa_VERSION_PROPERTY); ```; Any opinion ?. * I guess there will other things to do later like removing all the tests related code/config into an eventual Sofa.Test, etc; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1674:1632,test,tests,1632,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1674,4,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatos",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:2255,test,test,2255,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,2,['test'],['test']
Testability,"l Studio; 4. I push configurate and first I have a problem with Eigen, but fortunately I could solve it.; 5. I push configurate again and there are two errors, one says: metis_DIR-NOTFOUND and second: GLEW_DIR-NOTFOUND>. **Expected behavior**; < I search for Metis and I found something called metis 5.10.0 but nothing happens, the error can not be solved, in the other hand I don't know nothing about GLEW. Hope you can help me, I attached some pictures, Thanks. >. --------------; ![metis](https://user-images.githubusercontent.com/111095273/184257908-0df394b7-5c8e-4d3a-acf1-bd1ecce53c3a.png); -------------------------------. ### Environment; ![metis1](https://user-images.githubusercontent.com/111095273/184257942-11b4e619-c723-4ab2-b53d-ccdb737e674c.png). **Context**. - System: < NAME AND VERSION - e.g: ""Windows 10"", ""Ubuntu 20.04"", ... >; - Version of SOFA: < INFOS ABOUT THE BRANCH OR BINARIES - e.g: ""master branch at commit 70bb123"", ""v21.06.00 binaries"", ... >; - State: < BUILD OR INSTALL DIRECTORY - e.g: ""Build directory"", ""Install directory"" >. **Command called**. ```txt. < COPY-PASTE YOUR COMMAND HERE >. ```. **Env vars**. ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. < COPY-PASTE HERE THE RESULT OF THE COMMAND ABOVE >. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. < COPY-PASTE YOUR OUTPUT HERE >. ```. **Content of build_dir/CMakeCache.txt**. < DRAG AND DROP YOUR CMAKECACHE.TXT HERE >. ---------------------------------------------. Thank you for your report.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3213:2180,Log,Logs,2180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3213,1,['Log'],['Logs']
Testability,"l some targets and files relative to the install prefix. For example, the binding libraries should be installed in `lib/python3/site-packages/...` . Here is the installation tree that we would need for SofaPython3:; ```; .; ├── bin; │   ├── Bindings.Modules.Tests; │   ├── Bindings.SofaRuntime.Tests; │   ├── Bindings.Sofa.Tests; │   ├── Bindings.SofaTypes.Tests; │   ├── Components; │   │   └── Components.py; │   ├── Core; │   │   ├── BaseData.py; │   │   ├── BaseLink.py; │   │   ├── BaseObject.py; │   │   ├── Base.py; │   │   ├── Controller.py; │   │   ├── DataEngine.py; │   │   ├── ForceField.py; │   │   ├── ForceField.py.orig; │   │   ├── MyRestShapeForceField.py; │   │   └── PythonRestShapeForceField.py; │   ├── Helper; │   │   ├── FileRepository.py; │   │   └── Message.py; │   ├── pyfiles; │   │   └── vector_test.py; │   ├── Simulation; │   │   ├── Node.py; │   │   └── Simulation.py; │   ├── SofaDeformable; │   │   ├── LinearSpring.py; │   │   └── SpringForceField.py; │   ├── tests; │   │   └── Base.py; │   └── Types; │   ├── BoundingBox.py; │   ├── RGBAColor.py; │   └── Vec3.py; ├── include; │   └── SofaPython3; │   ├── config.h; │   ├── DataCache.h; │   ├── DataHelper.h; │   ├── initModule.h; │   ├── Prefab.h; │   ├── PythonEnvironment.h; │   ├── PythonFactory.h; │   ├── PythonTestExtractor.h; │   ├── PythonTest.h; │   ├── SceneLoaderPY3.h; │   ├── Sofa; │   │   ├── Components; │   │   │   └── Submodule_Components.h; │   │   ├── Core; │   │   │   ├── Binding_BaseCamera_doc.h; │   │   │   ├── Binding_BaseCamera.h; │   │   │   ├── Binding_BaseContext.h; │   │   │   ├── Binding_BaseData_doc.h; │   │   │   ├── Binding_BaseData.h; │   │   │   ├── Binding_Base_doc.h; │   │   │   ├── Binding_Base.h; │   │   │   ├── Binding_BaseLink_doc.h; │   │   │   ├── Binding_BaseLink.h; │   │   │   ├── Binding_BaseObject_doc.h; │   │   │   ├── Binding_BaseObject.h; │   │   │   ├── Binding_ContactListener_doc.h; │   │   │   ├── Binding_ContactListener.h; │   │   │   ├── Binding_Con",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:1151,test,tests,1151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592,1,['test'],['tests']
Testability,"l, beamadapter scene) on Windows/msvc, linux/gcc and macos/clang. . ---; Benches: (Ubuntu, gcc); Unit:; https://ethercalc.net/jt9xe3yadxug. Mostly the same, except:; - zero-construct is faster; - mat<24> mult is slower but can be fixed easily (https://github.com/sofa-framework/sofa/blob/3fadc10492662a63eab725fa45894f2c5b3fe9bd/Sofa/framework/Type/src/sofa/type/Mat.h#L531C12-L531C12 may confuse the vectorizer).; EDIT: and apparently is mitigated by using LTO. Scenes :; caduceus:; - master: `10000 iterations done in 6.61867 s ( 1510.88 FPS)`; - pr: `10000 iterations done in 6.59469 s ( 1516.37 FPS)`; ; TorusFall: ; - master: `5000 iterations done in 15.6086 s ( 320.336 FPS)`; - pr: `5000 iterations done in 15.6149 s ( 320.207 FPS)`. 3instruments_collis; - master: `5000 iterations done in 30.5179 s ( 163.838 FPS)`; - pr: `5000 iterations done in 30.2582 s ( 165.244 FPS)`. With LTO:; caduceus:; - master: `10000 iterations done in 6.55136 s ( 1526.4 FPS)`; - pr: `10000 iterations done in 6.49977 s ( 1538.52 FPS)`; ; TorusFall: ; - master: `5000 iterations done in 15.4835 s ( 322.925 FPS)`; - pr: `5000 iterations done in 14.8696 s ( 336.256 FPS)`. 3instruments_collis; - master: `5000 iterations done in 30.0172 s ( 166.571 FPS)`; - pr: `5000 iterations done in 29.9373 s ( 167.016 FPS)`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4296:2042,test,test,2042,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4296,2,['test'],['test']
Testability,"l/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/Extras/lib/python; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:5616,test,test,5616,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,1,['test'],['test']
Testability,"lassname only causing collision when two component have the same name/template. To avoid this, the PR add the plugin name as a prefix for the Factory'key. As an exemple, a component created with *<OglModel>* in the past is now referenced as *<SofaOpenglVisual.OglModel>*. Backward compatbility is possible by adding into the factory registration an alias mapping between ; new names and old name;; Eg:; ```; ""OglModel"" => ""SofaOpenglVisual.OglModel""; ```. 2) **Importing plugin and component *à la* python**; A new component called *FromComponent* is added to handle the loading of plugin and the import of object. . Examples of use:; ```; 	 # To make only <OglModel> accessible in the scene; 	<From plugin=""SofaOpenglVisual"" import=""OglModel""/>; 	<OglModel/>. 	# To add ""custom"" name in a scene ; 	<From plugin=""SofaOpenglVisual"" import=""OglModel"" as=""RenderingModel""/>; 	<RenderingModel/>. 	# To be a super lazy man and import everything; 	<From plugin=""SofaOpenglVisual"" import=""*""/>; ```. I didn't implemented multiple object imports so currently it is necessary to do ; ```; <From plugin=""SofaOpenglVisual"" import=""OglModel""/>; <From plugin=""SofaOpenglVisual"" import=""GlslShader""/>; ```; But we could as in python with:; ```; <From plugin=""SofaOpenglVisual"" import=""OglModel, GlslShader""/>; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512:2177,test,test,2177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512,2,['test'],['test']
Testability,les\Components\linearsolver\preconditioner\FEMBAR_PCG_AsyncSparseLDLSolver.scn; examples\Components\loader\GIDMeshLoader.scn; examples\Components\solver\EulerExplicitSolver\EulerExplicitSolver.scn; examples\Components\solver\EulerExplicitSolver\EulerSymplecticSolver.scn; examples\Components\solver\NewmarkImplicitSolver.scn. [INFO] [PluginFinder] Found 9 files with deprecated:; examples\Components\interactionforcefield\BoxStiffSpringForceField.scn; examples\Components\linearsolver\FEMBAR_AsyncSparseLDLSolver.scn; examples\Components\misc\sleep\test_sleep.scn; examples\Components\misc\sleep\test_sleep2.scn; examples\Components\misc\sleep\test_sleep3.scn; examples\Components\visualmodel\OglLabel.scn; examples\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPointConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularBendingSprings_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularFEMForceField_Removing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:1202,Benchmark,Benchmark,1202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,les\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPointConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularBendingSprings_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularFEMForceField_RemovingMeshTest.scn; examples\Components\constraint\AffineMovementConstraint.scn; examples\Components\constraint\AffineMovementConstraint3D.scn; examples\Components\constraint\AttachConstraintMatrix.scn; examples\Components\constraint\BilateralInteractionConstraint_PGS.scn; examples\Components\constraint\BilinearConstraint.scn; examples\Components\constraint\BilinearConstraint3D.scn; examples\Components\constraint\HermiteSplineConstraint.scn; examples\Components\constraint\NonBuiltConstraintCorrection.scn; examples\Components\constraint\PatchTestConstraint.scn; examples\Components\constraint\ProjectToPlaneConstraint.scn; examples\Components\engine\DisplacementMatrixEngine.scn; examples\Components\engine\Generat,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:1898,Benchmark,Benchmark,1898,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,let's wait for the test / scene to see if it generate any warning,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1145#issuecomment-542787267:19,test,test,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1145#issuecomment-542787267,1,['test'],['test']
Testability,"libQGLViewer is only used by SofaGuiQt for QtGLViewer.; So this lib should be moved into it from extlibs (which is/was supposed to be used for sharing libraries across modules). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1617:717,test,test,717,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1617,2,['test'],['test']
Testability,"licitSolverDynamicTest_high_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta2ExplicitSolverDynamic_test/rungeKutta2ExplicitSolverDynamicTest_high_dt_0/); [UnitTests.SofaGeneralExplicitOdeSolver_test/RungeKutta4ExplicitSolverDynamic_test.rungeKutta4ExplicitSolverDynamicTest_medium_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta4ExplicitSolverDynamic_test/rungeKutta4ExplicitSolverDynamicTest_medium_dt_0/); [UnitTests.SofaGeneralExplicitOdeSolver_test/RungeKutta4ExplicitSolverDynamic_test.rungeKutta4ExplicitSolverDynamicTest_small_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta4ExplicitSolverDynamic_test/rungeKutta4ExplicitSolverDynamicTest_small_dt_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_medium_dt_with_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_tes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769:1172,test,testReport,1172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769,1,['test'],['testReport']
Testability,link to issue #1538 . to be discussed.. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1546:291,test,test,291,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1546,2,['test'],['test']
Testability,"loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; =================",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4096,test,tests,4096,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . -----------------------------------------------",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4615,test,test,4615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['test']
Testability,looks good to me @epernod but not locally tested,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2935#issuecomment-1228140385:42,test,tested,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2935#issuecomment-1228140385,1,['test'],['tested']
Testability,"ly one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it and move forward ? ; - do we have the time & courage to fix t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:1087,test,test,1087,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008,2,['test'],['test']
Testability,lyzer-security.insecureAPI.getpw](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.getpw.html) | [modernize-replace-random-shuffle](https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html) |; | [clang-analyzer-security.insecureAPI.gets](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.gets.html) | [modernize-return-braced-init-list](https://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html) |; | [clang-analyzer-security.insecureAPI.mkstemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mkstemp.html) | [modernize-shrink-to-fit](https://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html) |; | [clang-analyzer-security.insecureAPI.mktemp](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.mktemp.html) | [modernize-unary-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html) |; | [clang-analyzer-security.insecureAPI.rand](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.rand.html) | [modernize-use-auto](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html) |; | [clang-analyzer-security.insecureAPI.strcpy](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.strcpy.html) | [modernize-use-bool-literals](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html) |; | [clang-analyzer-security.insecureAPI.vfork](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-security.insecureAPI.vfork.html) | [modernize-use-default-member-init](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html) |; | [clang-analyzer-unix.API](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-unix.API.html) | [modernize-use-emplace](https://clang.llvm.org/extra/clang-tidy/checks/modernize-use-empla,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:17306,assert,assert,17306,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,2,['assert'],['assert']
Testability,"maybe I am stating something already well known, but with c++11 there are some built in functions that can help to test floating point arithmetic. ; So with the current implementation adding something to the `EulerAngle` test like; ```lang=cpp; for(std::size_t i=0; i<q0.size(); ++i) // same goes for q1; {; ASSERT_FALSE(std::is_nan(q0[i]));; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343465411:115,test,test,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-343465411,2,['test'],['test']
Testability,"ment a new library dedicated to the abstraction api for testing with sofa, ie a kind of lightweight SofaTest library.; I was not really aware that there was code inside SofaKernel libraries that directly depend on gtest, I thought it was still kept ""optional"" (ie that gtest has become mandatory on master for some time, wether or not you build and execute unit tests). ; We are still used to developping with the ""idea"" that gtest is optional, even though in reality there is no use case were we do not include it. Coming back at this PR, to be honest I don't believe there is a functionality in the BaseTest classes (apart from the fact that it removes dependencies) that I would like to use, because mostly : ; - we do not currently have a use for message api, or at least we do not have any idea about why it could be beneficial for us to start using it.; - I d like to discourage the use of one size fits all epsilon and comparison values for floating points arithmetic, since I prefer people to actually think about the quantities they want to compare. Comparing floats in a consistent fashion is harder than it looks, with the exception when you expect that the quantities you want to compare to be strictly equal. So having a Base test class which provides these comparison facilities is also not something I am particularly looking for. There are some abstractions attempts in SofaTest that I find interesting ( linearisation tests for the most part ) but it got snowed under a dependency bloat. . However that being said, the only thing I'd like, is that if I implement a test just using the ""vanilla"" gtest library, it can be merged, built and run easily on the master. With the current state of things, integrating a new test in `framework_test`, requires you to build all sofa, and not just `SofaCore` as I would have expected. So in return you have to wait a loooong time before you can actually check that the functionality you want to integrate in master actually works as you expect.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224:1372,test,test,1372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338710224,4,['test'],"['test', 'tests']"
Testability,mentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPointConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularBendingSprings_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularFEMForceField_RemovingMeshTest.scn; examples\Components\constraint\AffineMovementConstraint.scn; examples\Components\constraint\AffineMovementConstraint3D.scn; examples\Components\constraint\AttachConstraintMatrix.scn; examples\Components\constraint\BilateralInteractionConstraint_PGS.scn; examples\Components\constraint\BilinearConstraint.scn; examples\Components\constraint\BilinearConstraint3D.scn; examples\Components\constraint\HermiteSplineConstraint.scn; examples\Components\constraint\NonBuiltConstraintCorrection.scn; examples\Components\constraint\PatchTestConstraint.scn; examples\Components\constraint\ProjectToPlaneConstraint.scn; examples\Components\engine\DisplacementMatrixEngine.scn; examples\Components\engine\GenerateCylinder.scn; examples\Components\engine\GenerateGrid.scn; examples\Components\engine\GenerateRigidMass.scn; examples\Components\engine\MergePoints.scn; examples\Components\engine\MeshSplittingEngine.scn; examples\Components\engine\NearestPointROI.scn; ,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:2153,Benchmark,Benchmark,2153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,meshconv needs miniflowVR in order to compile.; But the oblivious user is not supposed to know that.... So this fix:; - avoids building meshconv if SOFA_BUILD_MINIFLOWVR is not activated.; - warns the user he needs to activate the previous cmake option. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/358:505,test,test,505,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/358,2,['test'],['test']
Testability,"method `computePrincipalStress `and `computePrincipalStrain` where used inside loop such as this:; ```; type::vector<TriangleInformation>& triangleInf = *(triangleInfo.beginEdit());; for (unsigned int i = 0; i < nbTriangles; ++i); computePrincipalStress(i, triangleInf[i].stress);; triangleInfo.endEdit();; ```; but computePrincipalStress is accessing triangleInfo in write mode as well inside its code. (same for computePrincipalStrain); It was not blocking because writeOnlyAccessor were used and therefore no updateIfDirty was call but this design is dangerous. . Change to Use only one accessor and pass ref to one element to the method. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3412:1181,test,test,1181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3412,2,['test'],['test']
Testability,"miniFlowVR, an extlib of Sofa, is used for ; - managing a file format for DistanceGrid (component of plugin SofaDistanceGrid); - as a dependency for meshconv, a commandline utility for meshes and used mainly to create the previous file format for DistanceGrid. So as it seems all was related to DistanceGrid:; - miniFlowVR was moved into SofaDistanceGrid (and thus depolluting the main tree of Sofa with the extlib thing); - as a small consequence, move meshconv into SofaDistanceGrid. It is deemed OK as:; - it seems not a lof of people uses meshconv as it is (I remember fixing the compilation ages ago and nobody said anything). Moreover, even its CMakefile was quite ill-formed. ; - meshconv was originally a part of FlowVR itself apparently, so it makes sense to regroup of all of these codes. Additionnally, SofaDistanceGrid was cleanup (reorganizing files like the template, cleaner CMake etc). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1616:1441,test,test,1441,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1616,2,['test'],['test']
Testability,"missing libs in target_link_libraries for SofaBase, SofaCommon and SofaGeneral after ""modularization"". ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1381:354,test,test,354,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1381,2,['test'],['test']
Testability,"more than 40Go of text!!!; In top of adding a stopping criterion based on execution time, we could also add a maximal size for the logging buffer.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289688384:131,log,logging,131,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289688384,1,['log'],['logging']
Testability,"move all tests related to BaseMatrix into Sofa.LinearAlgebra.test, ; and create Sofa.LinearAlgera.Testing (testing toolkit related to Sofa.LinearAlgebra). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2383:9,test,tests,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2383,6,"['Test', 'test']","['Testing', 'test', 'testing', 'tests']"
Testability,"n about the need for `sofa::helper::map_ptr_stable_compare`, in `NarrowPhaseDetection`, but also in Sofa in general (it is also used in `DefaultContactManager`). According to benchmarks comparing 3 different types of maps, `sofa::helper::map_ptr_stable_compare` is several orders of magnitude slower than `std::map` and `std::unordered_map`. ## `std::unordered_map`; ```; ------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ------------------------------------------------------------------------------------------; BM_NarrowPhaseDetection_getDetectionOutputs/8 19.8 us 19.7 us 32412; BM_NarrowPhaseDetection_getDetectionOutputs/16 42.8 us 42.8 us 16528; BM_NarrowPhaseDetection_getDetectionOutputs/32 121 us 121 us 5764; BM_NarrowPhaseDetection_getDetectionOutputs/64 401 us 401 us 1750; BM_NarrowPhaseDetection_getDetectionOutputs/128 2228 us 2228 us 316; BM_NarrowPhaseDetection_getDetectionOutputs/256 9252 us 9253 us 75; ```; ## `std::map`; ```; ------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ------------------------------------------------------------------------------------------; BM_NarrowPhaseDetection_getDetectionOutputs/8 18.4 us 18.4 us 36921; BM_NarrowPhaseDetection_getDetectionOutputs/16 54.1 us 54.1 us 12873; BM_NarrowPhaseDetection_getDetectionOutputs/32 177 us 177 us 3973; BM_NarrowPhaseDetection_getDetectionOutputs/64 631 us 631 us 1116; BM_NarrowPhaseDetection_getDetectionOutputs/128 2587 us 2587 us 268; BM_NarrowPhaseDetection_getDetectionOutputs/256 10649 us 10649 us 67; ```; ## `sofa::helper::map_ptr_stable_compare`; ```; ------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ------------------------------------------------------------------------------------------; BM_NarrowPhaseDetection_getDetectionOutputs/8 38.3 us 38.3 us 18336; BM_NarrowPhase",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2047:1133,Benchmark,Benchmark,1133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2047,1,['Benchmark'],['Benchmark']
Testability,"n they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/Da",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1204,test,testReport,1204,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,2,['test'],['testReport']
Testability,"n your PR you could: ; - test each python function with different parameters. At least one with a valid value, 1 with out of bound values, 1 test with extrema values (min & max) and if there is multiple parameter...you either have to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::stri",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1675,test,testing,1675,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977,4,['test'],"['test', 'testing']"
Testability,"n, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not very good to explains things in english so if you want we can continue in by email in french.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1424,test,tests,1424,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626,2,['test'],['tests']
Testability,"n.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ]; for plugin in plugins:; root.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root.addObject(""DefaultAnimationLoop""); root.addObject(""DefaultPipeline""); root.addObject(""BruteForceBroadPhase""); root.addObject(""BVHNarrowPhase""); root.addObject(""DefaultContactManager""); root.addObject(; ""LocalMinDistance"",; alarmDistance=5.0,; contactDistance=0.5,; ). node_1 = root.addChild(""child_1""); node_1.addObject(""MechanicalObject"", position=[0, 0, 0] * 5). node_2 = root.addChild(""child_2""); node_2.addObject(""MechanicalObject"", position=[1, 1, 1] * 5). if case == TestCase.ONE_MODEL:; node_1.addObject(""PointCollisionModel""); elif case == TestCase.TWO_MODELS:; node_1.addObject(""PointCollisionModel""); node_2.addObject(""PointCollisionModel""); elif case == TestCase.NONE:; pass. return node_1, node_2. if __name__ == ""__main__"":; simulation = SimulationHandler(). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.NONE). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.ONE_MODEL). for i in range(5000):; simulation.step(); simulation.reload(case=TestCase.TWO_MODELS); ```. No components of the collision pipeline:; ![image](https://user-images.githubusercontent.com/29635054/191464004-4a820fde-efa7-4e3f-b448-a3f734daf367.png); -> No memory increase, even with two collision models. NewProximity; ![image](https://user-images.githubusercontent.com/29635054/191463963-c581e5ce-e315-401c-b9ed-1786c27b66c1.png); -> Some memory increase with one and no collision models, STRONG increase with two collision models. LocalMinDistance; ![image](https://user-images.githubusercontent.com/29635054/191464146-0e656a0d-8850-4b43-bdd3-b1a478fd4f14.png); -> Some memory increase with one and no collision models, STRONG increase with two collision models. As you can see, there is a memory increase with no collision models and one collision model,; but with two collision models, the increa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318:2082,Test,TestCase,2082,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318,1,['Test'],['TestCase']
Testability,"n.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for possible plugin locations so either the method `Utils::getPluginDirectory()` should use internally of the `PluginRepository` global object, or the method should be removed entirely for consistency.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1313,test,tests,1313,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659,2,['test'],"['test', 'tests']"
Testability,"n2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; [ERROR] [PythonScript] ImportError:; Importing the multiarray numpy extension module failed. Most; likely you are trying to import a failed build of numpy.; If you're working with a numpy git repo, try `git clean -xdf` (removes all; files not under version control). Otherwise reinstall numpy. Original error was: cannot import name multiarray. File ""test.py"", line 20, in <module>; import numpy; File ""/usr/local/lib/python2.7/site-packages/numpy/__init__.py"", line 142, in <module>; from . import add_newdocs; File ""/usr/local/lib/python2.7/site-packages/numpy/add_newdocs.py"", line 13, in <module>; from numpy.lib import add_newdoc; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/__init__.py"", line 8, in <module>; from .type_check import *; File ""/usr/local/lib/python2.7/site-packages/numpy/lib/type_check.py"", line 11, in <module>; import numpy.core.numeric as _nx; File ""/usr/local/lib/python2.7/site-packages/numpy/core/__init__.py"", line 26, in <module>; raise ImportError(msg). [ERROR] [SofaPython] Script (file:test) import error; [ERROR] [SofaPython] scene script load error.; [INFO] [BatchGUI] Computing 1000 iterations. [INFO] [BatchGUI] Processing. [INFO] [BatchGUI] 1000 iterations done in 0.004765 s ( 209864 FPS). [INFO] [BatchGUI] 1000 iterations done in 0.004766 s ( 209820 FPS).; ```. When running it with default python in verbose mode, multiarray appears as follows:; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ cat test.out | grep multiarray; dlopen(""/usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so"", 2);; import numpy.core.multiarray # dynamically loaded from /usr/local/lib/python2.7/site-packages/numpy/core/multiarray.so; # cleanup[2] numpy.core.multiarray; ```. But `/usr/local/lib/python2.7/site-packages` is in `sys.path` when running with SofaPython so **why does it fail**?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:6295,test,test,6295,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,2,['test'],['test']
Testability,"nTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; =========================================================",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4129,test,tests,4129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,2,['test'],"['test', 'tests']"
Testability,named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INF,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3259,test,tests,3259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"ne is used for the benchmarks on 1000 time steps. The timer to focus on is `buildStiffness`. But be aware that this timer also includes the computation of the contributions in addition to the assembly itself. 1. The scene without modification, i.e. with `<ConstantSparsityPatternSystem template=""CompressedRowSparseMatrixd"" name=""A"" printLog=""true""/>`. ```; [INFO] [BatchGUI] 1000 iterations done in 12.3859 s ( 80.7368 FPS). LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 7 0.82 1 1.57 8.67 1.81 0.34 1.81 14.74 .......buildStiffness; ```. 2. The scene with a regular matrix assembly, i.e. with `<MatrixLinearSystem template=""CompressedRowSparseMatrixd"" name=""A"" printLog=""true""/>`. ```; [INFO] [BatchGUI] 1000 iterations done in 15.0063 s ( 66.6387 FPS). LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 7 0.69 1 4.69 6.45 4.95 0.18 4.95 33.30 .......buildStiffness; ```. 3. The scene with a regular matrix assembly, i.e. with `<MatrixLinearSystem template=""CompressedRowSparseMatrixMat3x3d"" name=""A"" printLog=""true""/>` (blocks of 3x3). ```; [INFO] [BatchGUI] 1000 iterations done in 16.765 s ( 59.648 FPS). LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 7 0.84 1 4.71 13.93 5.51 1.11 5.51 33.16 .......buildStiffness; ```. In benchmark 1, we have a x2.7 speed-up compared to benchmark 2. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4158:2844,benchmark,benchmark,2844,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4158,4,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"new feature, new unit test?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-663853203:22,test,test,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-663853203,1,['test'],['test']
Testability,"newly introduced tests not compatible with the compat, back to wip 😬",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1158540178:17,test,tests,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2975#issuecomment-1158540178,1,['test'],['tests']
Testability,"ng a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1052,test,test,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,4,['test'],['test']
Testability,ng.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-compare.html) |; | [clang-analyzer-core.VLASize](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.VLASize.html) | [misc-string-integer-assignment](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-integer-assignment.html) |; | [clang-analyzer-core.builtin.BuiltinFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.BuiltinFunctions.html) | [misc-string-literal-with-embedded-nul](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-literal-with-embedded-nul.html) |; | [clang-analyzer-core.builtin.NoReturnFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.NoReturnFunctions.html) | [misc-suspicious-enum-usage](https://clang,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9803,assert,assert,9803,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,2,['assert'],['assert']
Testability,"ngine.GUIUtility:ProcessEvent(Int32, IntPtr, Boolean&). Start: 'VisualEye'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). Start: 'VisualCornea'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). Start: 'VisualBody'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). Start: 'OglModel'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). ReconnectSofaScene; UnityEngine.Debug:Log (object); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:480); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnit",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4156:2730,Log,Log,2730,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4156,1,['Log'],['Log']
Testability,"nique id per data type. This unique id is statically allocated and is used a way to access the DataTypeInfoRegistry in an efficiant way. ; - add a unique storage repository (DataTypeInfoRegistry). This storage is holding all the typeinfo use in Sofa. There is two way ; to be registered in the repository, the first one consist consist in explcitly adding a typeinfo instance in the storage. This is what to do when we want to be sure the fully defined data type is registered. ; - the other was implemented to mimick at best the the existing behavior in Sofa while fixing some of its error. It works the following way... when a Data<Type> is used this automatically trigs the setting of the typeinfo in the repository. If no DataTypeInfo<> is available this fallback to the default one but the data info cannot be used... if in a subsequent compilation unit (.cpp) the same Data<Type> is used with the complete type, the registring is done again...and if the type is more complete...then the old (partial) type is replaced with the new one. ; - the common data type info are now in their own file in sofa/defaulttype/typeinfo/TypeInfo_XXXX.h/cpp; - the templated code shared between multiple data type info are now in the sofa/defaulttype/typeinfo/models/XXXXX.h; - there is no more dependency to some specific contained data type (eg: RGBAcolor, Vec, Matrice, Set,) in AbstractDataTypeInfo or DataTypeInfo.; - there is a mechanism to get the list of registered typeinfo and wheter the are fully defined or only partially. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552:4294,test,test,4294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552,2,['test'],['test']
Testability,"nk inherits DDGNode.; A DDGLink thus benefits from the whole dirty flag propagation thingy, and implements the update() function to clean its dirty flag, and update from its inputs.; Just like Datas, a DDGLink also possesses a counter, that is incremented when the link value changes. Just like BaseLinks, and SPtrs, to retrieve the object linked with a DDGLink, you need to call the get() method. The set() method will set the link. When a link is set within a DDGLink, the componentState of the linked object is set as input to that DDGLink. It's up to you to connect your DDGLink to some datas to connect your dependency graph. Contrary to the current link implementation in SOFA, these links, can be very easily manipulated as their base class (BaseDDGLink), or as DDGNodes even. DDGLinks are parsed in Base::parseField just like BaseLinks and BaseDatas, which makes them usable with the BaseObjectDescriptions. (they really mirror the behavior of all other field types.). A very simple test case is present in this PR to show you how it's used. You can reference your links with their pathnames, just like normal datas or links, by calling the getPathName() method. There's not bi-directionality implemented in this PR, (because I didn't have time in the end...) but it's not rocket science:; - all there is to do is add a vector of Base* in Base with helper methods to add, remove retrieve the list of link owners. Then in DDGLink::set(), call the add() method of your link to register`this`. (maybe in another PR...) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1226:1167,test,test,1167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226,3,['test'],['test']
Testability,"nment commits. ## issofa_python. ### New features; Add binding python to get slaves and names on baseObjects.; Add Python bindings for triangle and point topology modifiers. Example scene which show triangle refining.; Creation of Binding_BaseTopologyObject common to PointSetTopologyModifier and TriangleSetTopologyModifier.; Add a getObjects() method to python BaseContext interface. Allow selection of objects based on type and name. May be extended to include more search options later. ### Improvements; SendScriptEvent should only be applied on a specified node, not on root !; WARNING: may affect python script behavior.; Allow to get the value of a data as a string when its type is not handle by the binding.; Object and type names are now both optional when calling BaseContext_getObjects(). Moreover the search direction can now optionally be passed to BaseContext_getObjects() (default is 'Local').; Binding_Data expose fullPath read only parameter for BaseData that derive from DataFileName, which as the name suggests, returns the fullPath to the file pointed by that data. Returns None otherwise. ### Bugfixes; If the data to be gotten using the bind is a vector of type 'unknown' then the text of the data is returned as a whole.; Fix compilation and warnings with gcc.; Fix SofaPython build on linux.; Fix undefined behaviour and potential crash in Python BaseContext.getObjects() due to PyList accessed out of bounds. ; Fix a memory leak which happens whenever an object is transferred from C++ to Python. _______________________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/171:1999,test,test,1999,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/171,1,['test'],['test']
Testability,"node_1 = articulation_center_node_1.addChild(""articulation_1""); articulation_node_1.addObject(; ""Articulation"",; translation=False,; rotation=True,; rotationAxis=[0, 0, 1],; articulationIndex=0,; ). articulation_center_node_2 = articulation_hierarchy_node.addChild(""center_2""); articulation_center_node_2.addObject(; ""ArticulationCenter"",; parentIndex=0,; childIndex=2,; posOnParent=[0, 0, 0],; posOnChild=[0, 0, 0],; ). articulation_node_2 = articulation_center_node_2.addChild(""articulation_2""); articulation_node_2.addObject(; ""Articulation"",; translation=False,; rotation=True,; rotationAxis=[0, 0, 1],; articulationIndex=1,; ). # place light and a camera; root.addObject(""LightManager""); root.addObject(""DirectionalLight"", direction=[0, 1, 0]); root.addObject(""InteractiveCamera"", name=""camera"", position=[0, 0, 5], lookAt=[0, 0, 0], distance=37, fieldOfView=45, zNear=0.63, zFar=55.69). if __name__ == ""__main__"":; root = Sofa.Core.Node(""myroot""); createScene(root); Sofa.Simulation.init(root); init_display(root); try:; while True:; Sofa.Simulation.animate(root, root.getDt()); Sofa.Simulation.updateVisual(root); simple_render(root); time.sleep(root.getDt()); except KeyboardInterrupt:; pass; ```. To reproduce the issue, run `python3 test_articulation.py` and `runSofa test_articulation.py`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3095:6075,test,test,6075,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3095,2,['test'],['test']
Testability,non-ASCII chars caused problems in some platform when compiling; Discussed in [Issue323](https://github.com/sofa-framework/sofa/issues/323). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/327:392,test,test,392,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/327,2,['test'],['test']
Testability,normals and vectors to Legacy vtk import. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/536:293,test,test,293,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536,2,['test'],['test']
Testability,now that I have fixed the tests on tetrahedron yes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/878#issuecomment-456604198:26,test,tests,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/878#issuecomment-456604198,1,['test'],['tests']
Testability,nts.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── SofaRuntime; │   │   ├── __init__.py; │   │   └── SofaRuntime.cpython-39-x86_64-linux-gnu.so; │   ├── SofaTypes; │   │   ├── __init__.py; │   │   └── SofaTypes.cpython-39-x86_64-linux-gnu.so; │   └── splib; │   ├── animation; │   │   ├── animate.py; │   │   ├── easing.py; │   │   └── __init__.py; │   ├── caching; │   │   ├── cacher.py; │   │   └── __init__.py; │   ├── __init__.py; │   └── meshing; │   ├── cgal_sofa.py; │   ├── data; │   │   └── meshes; │   │   ├── gallbladder.stl; │   │   ├── parametric_mesh_example.step; │   │   └── surface_mesh_example.stl; │   ├── gmsh_sofa.py; │   ├── __init__.py; │   └── pygalmesh_sofa.py; └── share; └── SofaPython3; ├── documentation; │   ├── Contributing.rst; │   ├── CustomModule.rst; │   ├── index.rst; │   ├── install.rst; │   ├── SofaModule.rst; │   └── SofaPlugin.rst; └── examples; ├── backend_pygame.py; ├── BaseCamera.py; ├── CMakeLists.txt; ├── ControllerScene.py; ├── easingSceneMatplotlib.py; ├── easingScene.py; ├── emptyController.py; ├── emptyDataEngine.py; ├── emptyForceField.py; ├── example-forcefield2.py; ├── example-forcefield.py; ├── example.pyscn; ├── example-scriptcontroller.py; ├── keyEvents.py; ├── pygame_test.py; ├── ReadTheDocs_Example.py; ├── realTimeClockScene.py; ├── SofaGui.py; └── test.scn. ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:6524,test,test,6524,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592,1,['test'],['test']
Testability,nts\solver\EulerExplicitSolver\EulerSymplecticSolver.scn; examples\Components\solver\NewmarkImplicitSolver.scn. [INFO] [PluginFinder] Found 9 files with deprecated:; examples\Components\interactionforcefield\BoxStiffSpringForceField.scn; examples\Components\linearsolver\FEMBAR_AsyncSparseLDLSolver.scn; examples\Components\misc\sleep\test_sleep.scn; examples\Components\misc\sleep\test_sleep2.scn; examples\Components\misc\sleep\test_sleep3.scn; examples\Components\visualmodel\OglLabel.scn; examples\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPointConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularBendingSprings_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularFEMForceField_RemovingMeshTest.scn; examples\Components\constraint\AffineMovementConstraint.scn; examples\Components\constraint\AffineMovementConstraint3D.scn; examples\Components\constraint\AttachConstraintMatrix.scn; examples\Componen,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:1399,Benchmark,Benchmark,1399,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,"o MaterialDataWidget.h DataWidget.h ModifyObject.h (1504 ms); moc_QDisplayDataWidget.cpp.o QDisplayDataWidget.h DataWidget.h ModifyObject.h (1473 ms); WDoubleLineEdit.cpp.o (1407 ms); DisplayFlagsDataWidget.cpp.o DisplayFlagsDataWidget.h DataWidget.h ModifyObject.h (1379 ms); QRGBAColorPicker.cpp.o QRGBAColorPicker.h DataWidget.h ModifyObject.h (1375 ms); ... 22925 ms: sofa/SofaKernel/modules/SofaCore/src/sofa/core/ObjectFactory.h (included 440 times, avg 52 ms), included via:; initOpenGLVisual.cpp.o (192 ms); PointSetTopologyAlgorithms.cpp.o (191 ms); initValidation.cpp.o (187 ms); DataDisplay.cpp.o (186 ms); DifferenceEngine.cpp.o (178 ms); MeshObjLoader.cpp.o (177 ms); ... 21119 ms: sofa/extlibs/gtest/include/gtest/internal/gtest-port.h (included 176 times, avg 119 ms), included via:; gtest-typed-test.cc.o gtest-typed-test.h (796 ms); gtest-port.cc.o (666 ms); gtest-death-test.cc.o gtest-death-test.h gtest-death-test-internal.h gtest-internal.h (650 ms); gtest-test-part.cc.o gtest-test-part.h gtest-internal.h (463 ms); gtest-filepath.cc.o gtest-filepath.h gtest-string.h (456 ms); gtest.cc.o gtest.h gtest-internal.h (246 ms); ... 20903 ms: sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/vector.h (included 156 times, avg 133 ms), included via:; MeshGmsh.cpp.o MeshGmsh.h Mesh.h (492 ms); MeshTopologyLoader.cpp.o MeshTopologyLoader.h Mesh.h (402 ms); Image.cpp.o Factory.inl (384 ms); SVector.cpp.o SVector.h (379 ms); GenerateRigid.cpp.o GenerateRigid.h Mesh.h (373 ms); TestMessageHandler.cpp.o TestMessageHandler.h (346 ms); ... 19960 ms: /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/pstl/glue_algorithm_defs.h (included 157 times, avg 127 ms), included via:; qglviewer.h camera.h QMap qmap.h qiterator.h qglobal.h algorithm (348 ms); manipulatedCameraFrame.h manipulatedFrame.h frame.h QObject qobject.h qobjectdefs.h qnamespace.h qglobal.h algorithm (345 ms); gtest-typed-test.h gtest-port.h algorithm (299 ms); mouseGrabber.h config.h qglobal.h alg",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:35388,test,test-part,35388,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['test'],['test-part']
Testability,"o that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304:4055,test,test,4055,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304,2,['test'],['test']
Testability,"oc insertion. It is actually used in the specialized function introduced by this PR, among other checks. Therefore, this speed is the goal to achieve for the specialized function.; - `BM_CRS_Fixture<double>/Add3x3BlocScalar_double`: insertion of 1000 3x3 blocs into a CRS made of double using 9 individual scalar insertion; - `BM_CRS_Fixture<sofa::type::Mat<3,3,double>>/Add3x3BlocScalar_CRS3x3d `: insertion of 1000 3x3 blocs into a CRS made of 3x3 blocs, using 9 individual scalar insertion. This is equivalent to what happens in BaseMatrix' bloc insertion, therefore it corresponds to the previous behavior of bloc insertion (before this PR). ## Before. ```; -----------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; -----------------------------------------------------------------------------------------------------------------; BM_CRS_Fixture<double>/Add3x3Bloc_CRSdouble 75568 ns 75550 ns 9185; BM_CRS_Fixture<sofa::type::Mat<3,3,double>>/Add3x3Bloc_CRS3x3d 55533 ns 54699 ns 12798; BM_CRS_Fixture<sofa::type::Mat<3,3,double>>/Add3x3BlocShortcut_CRS3x3d 12930 ns 12785 ns 49662; BM_CRS_Fixture<double>/Add3x3BlocScalar_double 67780 ns 66811 ns 10488; BM_CRS_Fixture<sofa::type::Mat<3,3,double>>/Add3x3BlocScalar_CRS3x3d 51334 ns 50603 ns 13884; ```. ## After. ```; -----------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; -----------------------------------------------------------------------------------------------------------------; BM_CRS_Fixture<double>/Add3x3Bloc_CRSdouble 76223 ns 76266 ns 9132; BM_CRS_Fixture<sofa::type::Mat<3,3,double>>/Add3x3Bloc_CRS3x3d 13781 ns 13808 ns 51026; BM_CRS_Fixture<sofa::type::Mat<3,3,double>>/Add3x3BlocShortcut_CRS3x3d 12434 ns 12458 ns 56014; BM_CRS_Fixture<double>/Add3x3BlocScalar_double 66579 ns 66637 ns 10530; BM_CRS_Fixture<sofa::type::Mat<3,3,double>>/Add3x3BlocS",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2281:1766,Benchmark,Benchmark,1766,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2281,1,['Benchmark'],['Benchmark']
Testability,"ocations at every step of the loops. Same benchs as ; - https://github.com/sofa-framework/sofa/pull/4132. ```; (mu=0.1); LCP : 5000 iterations done in 58.1724 s ( 85.9514 FPS); GCS before: 5000 iterations done in 83.4733 s ( 59.8994 FPS); GCS after: 5000 iterations done in 69.2669 s ( 72.1846 FPS); ```; ```; (mu=0.0); LCP : 5000 iterations done in 44.0637 s ( 113.472 FPS); GCS before: 5000 iterations done in 69.1173 s ( 72.3408 FPS); GCS after: 5000 iterations done in 53.8957 s ( 92.7719 FPS); ```. Speedup of ~20-30% but still slower than LCP (but much less though ).; But this improvement should be felt whenever the GCS is using the unbuilt method (contrary to #4132 which was specialized for LinearConstraintCorrection with wire optimization). Other bench on caduceus (5000 steps); ```; LCP; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 4 1.11 1 0 0.69 0.14 0.04 0.14 9.10 ....SolveConstraint: POSITION AND VELOCITY - SolveSystem; ```; ```; GCSunbuilt before; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 4 1.28 1 0 33.01 0.24 1.45 0.24 13.24 ....SolveConstraint: POSITION AND VELOCITY - SolveSystem; ```; ```; GCSunbuilt after; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 4 1.28 1 0 19.89 0.16 0.98 0.16 9.38 ....SolveConstraint: POSITION AND VELOCITY - SolveSystem; ```; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4195:1903,test,test,1903,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195,2,['test'],['test']
Testability,"oduces a new API for targets and packages management, following this scheme:. ```cmake; sofa_create_package_with_targets() # replacing sofa_generate_package. sofa_create_package() # replacing sofa_write_package_config_files. sofa_add_targets_to_package() # replacing sofa_install_targets; if(AUTO_SET_TARGET_PROPERTIES); sofa_auto_set_target_properties() # from a part of sofa_install_targets; endif(); sofa_install_targets_in_package() # from a part of sofa_install_targets; ; if(RELOCATABLE); sofa_set_target_install_relocatable() # replacing sofa_set_install_relocatable; endif(); ```. You can now use only what you need. ; The mega-master-calling-all-the-others macro is sofa_create_package_with_targets (replacing sofa_generate_package). ## Usual examples. To create a ""plugin"" package like SofaExporter:; ```cmake; sofa_create_package_with_targets(; PACKAGE_NAME SofaExporter; PACKAGE_VERSION ${SofaExporter_VERSION}; TARGETS SofaExporter AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaExporter""; RELOCATABLE ""plugins""; ); ```. To create a ""legacy meta-module"" package like SofaGeneral:; ```cmake; sofa_create_package_with_targets(; PACKAGE_NAME SofaGui; PACKAGE_VERSION ${Sofa_VERSION}; TARGETS SofaGui AUTO_SET_TARGET_PROPERTIES; INCLUDE_SOURCE_DIR ""src""; INCLUDE_INSTALL_DIR ""SofaGui""; ); ```. To register a ""legacy module"" target like SofaGeneralEngine:; ```cmake; sofa_add_targets_to_package(; PACKAGE_NAME SofaGeneral; TARGETS SofaGeneralEngine AUTO_SET_TARGET_PROPERTIES; ); ``` . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1433:2085,test,test,2085,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1433,2,['test'],['test']
Testability,"ofa::core::TMultiVecI... (sofa/modules/SofaMiscSolver/NewmarkImplicitSolver.cpp); 792 ms: sofa::component::engine::SphereROI<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3ul, double>, sofa::defaul... (sofa/modules/SofaGeneralEngine/SphereROI.cpp); 767 ms: sofa::component::topology::TetrahedronSetTopologyAlgorithms<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<2... (sofa/SofaKernel/modules/SofaBaseTopology/TetrahedronSetTopologyAlgorithms.cpp). **** Function sets that took longest to compile / optimize:; 142436 ms: sofa::core::objectmodel::TClass<$>::TClass() (4916 times, avg 28 ms); 25932 ms: std::vector<$>::_M_default_append(unsigned long) (2150 times, avg 12 ms); 23597 ms: sofa::core::objectmodel::TData<$>::read(std::__cxx11::basic_string<$> const&) (1786 times, avg 13 ms); 21862 ms: sofa::helper::vector<$>::read(std::istream&) (1143 times, avg 19 ms); 19422 ms: sofa::core::objectmodel::DataContentValue<$>::beginEdit() (1890 times, avg 10 ms); 16790 ms: sofa::core::RegisterObject& sofa::core::RegisterObject::add<$>(bool) (783 times, avg 21 ms); 15884 ms: sofa::core::objectmodel::Data<$>::Data(std::__cxx11::basic_string<$> const&, bool, bool) (1447 times, avg 10 ms); 14483 ms: sofa::core::objectmodel::TData<$>::getValueString[abi:cxx11]() const (1685 times, avg 8 ms); 13493 ms: sofa::defaulttype::DataTypeInfo<$>::name[abi:cxx11]() (1860 times, avg 7 ms); 13114 ms: testing::internal::TypeParameterizedTest<$>::Register(char const*, testing::internal::CodeLocation const&, char const*... (391 times, avg 33 ms); 12604 ms: sofa::core::objectmodel::TClass<$>::get() (4904 times, avg 2 ms); 11749 ms: sofa::component::linearsolver::CompressedRowSparseMatrix<$>::compress() (74 times, avg 158 ms); 10599 ms: std::__cxx11::basic_string<$> sofa::helper::GetSofaTypeTemplateName<$>(std::__cxx11::basic_string<$>) (990 times, avg 10 ms); 9051 ms: sofa::core::objectmodel::Data<$>::~Data() (1648 times, avg 5 ms); 9001 ms: sofa::core::objectmodel::Data<$>::virtual",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:25103,test,testing,25103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,2,['test'],['testing']
Testability,"ofa::helper::io::Mesh*, boost::intrusive_ptr<sofa::component::topology::RegularGridTopology>, sofa::helper::vector<sofa::component::topology::SparseGridTopology::Type, sofa::helper::CPUMemoryManager<sofa::component::topology::SparseGridTopology::Type> >&) const+0x1f2) [0x7f67a0b49082]; -> /opt/sofa/lib/libSofaBaseTopology.so.20.12.00(sofa::component::topology::SparseGridTopology::buildFromTriangleMesh(sofa::helper::io::Mesh*)+0x2c8) [0x7f67a0b4a3d8]; -> /opt/sofa/lib/libSofaBaseTopology.so.20.12.00(sofa::component::topology::SparseGridTopology::buildAsFinest()+0x2d8) [0x7f67a0b4ac58]; -> /opt/sofa/lib/libSofaBaseTopology.so.20.12.00(+0x2d2a2b) [0x7f67a0b3fa2b]; -> /opt/sofa/lib/libSofaSimulationCore.so.20.12.00(sofa::simulation::InitVisitor::processNodeTopDown(sofa::simulation::Node*)+0x1a3) [0x7f67a054e5b3]; -> /opt/sofa/lib/libSofaSimulationGraph.so.20.12.00(sofa::simulation::graph::DAGNode::executeVisitorTopDown(sofa::simulation::Visitor*, std::__cxx11::list<sofa::simulation::graph::DAGNode*, std::allocator<sofa::simulation::graph::DAGNode*> >&, std::map<sofa::simulation::graph::DAGNode*, sofa::simulation::graph::DAGNode::StatusStruct, std::less<sofa::simulation::graph::DAGNode*>, std::allocator<std::pair<sofa::simulation::graph::DAGNode* const, sofa::simulation::graph::DAGNode::StatusStruct> > >&, sofa::simulation::graph::DAGNode*)+0x3a5) [0x7f67a5421455]; -> /opt/sofa/lib/libSofaSimulationGraph.so.20.12.00(sofa::simulation::graph::DAGNode::doExecuteVisitor(sofa::simulation::Visitor*, bool)+0x15f) [0x7f67a542187f]; -> /opt/sofa/lib/libSofaSimulationCore.so.20.12.00(sofa::simulation::Simulation::initNode(sofa::simulation::Node*)+0xaa) [0x7f67a05b8b4a]; -> /opt/sofa/lib/libSofaSimulationCore.so.20.12.00(sofa::simulation::Simulation::init(sofa::simulation::Node*)+0xb0) [0x7f67a05b8620]; -> runSofa() [0x40f3a3]; -> /lib64/libc.so.6(__libc_start_main+0xf2) [0x7f679ef201e2]; -> runSofa() [0x4105de]; [1] 36378 segmentation fault (core dumped) runSofa /tmp/test.scn; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1748:2757,test,test,2757,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1748,1,['test'],['test']
Testability,"ofaUnity.SofaContext.Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent(Int32, IntPtr, Boolean&). Start: 'VisualEye'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). Start: 'VisualCornea'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). Start: 'VisualBody'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). Start: 'OglModel'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). ```; Can we fix this?. _Originally posted by @dhananjayjha100 in https://github.com/sofa-framework/sofa/discussions/4113#discussioncomment-6873568_",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4156:8064,Log,Log,8064,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4156,2,['Log'],['Log']
Testability,"ofiler and SofaBenchmarks. SofaBenchmark have been added on TetraXX FEMForcefield in https://github.com/alxbilger/SofaBenchmark/pull/23. ```; -----------------------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; -----------------------------------------------------------------------------------------------------------------------------; BM_Scene_bench_StepFactor<TetrahedralFEMForceFieldOptimScene>/512 1339 ms 1344 ms 1 FPS=381.023/s frame=2.62451ms; BM_Scene_bench_StepFactor<TetrahedralFEMForceFieldOptimScene>/1024 2662 ms 2656 ms 1 FPS=385.506/s frame=2.59399ms; BM_Scene_bench_StepFactor<TetrahedralFEMForceFieldOptimScene>/2048 5259 ms 5266 ms 1 FPS=388.938/s frame=2.57111ms; BM_Scene_bench_StepFactor<TetrahedralFEMForceFieldOptimScene>/4096 10451 ms 10453 ms 1 FPS=391.845/s frame=2.55203ms; ```. ```; -----------------------------------------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations UserCounters...; -----------------------------------------------------------------------------------------------------------------------------; BM_Scene_bench_StepFactor<TetrahedralFEMForceFieldOptimScene>/512 982 ms 984 ms 1 FPS=520.127/s frame=1.92261ms; BM_Scene_bench_StepFactor<TetrahedralFEMForceFieldOptimScene>/1024 1966 ms 1953 ms 1 FPS=524.288/s frame=1.90735ms; BM_Scene_bench_StepFactor<TetrahedralFEMForceFieldOptimScene>/2048 3988 ms 3969 ms 1 FPS=516.031/s frame=1.93787ms; BM_Scene_bench_StepFactor<TetrahedralFEMForceFieldOptimScene>/4096 7858 ms 7859 ms 1 FPS=521.161/s frame=1.91879ms; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; __________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2877:1104,Benchmark,Benchmark,1104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2877,1,['Benchmark'],['Benchmark']
Testability,"ogyAlgorithms.cpp.o (191 ms); initValidation.cpp.o (187 ms); DataDisplay.cpp.o (186 ms); DifferenceEngine.cpp.o (178 ms); MeshObjLoader.cpp.o (177 ms); ... 21119 ms: sofa/extlibs/gtest/include/gtest/internal/gtest-port.h (included 176 times, avg 119 ms), included via:; gtest-typed-test.cc.o gtest-typed-test.h (796 ms); gtest-port.cc.o (666 ms); gtest-death-test.cc.o gtest-death-test.h gtest-death-test-internal.h gtest-internal.h (650 ms); gtest-test-part.cc.o gtest-test-part.h gtest-internal.h (463 ms); gtest-filepath.cc.o gtest-filepath.h gtest-string.h (456 ms); gtest.cc.o gtest.h gtest-internal.h (246 ms); ... 20903 ms: sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/vector.h (included 156 times, avg 133 ms), included via:; MeshGmsh.cpp.o MeshGmsh.h Mesh.h (492 ms); MeshTopologyLoader.cpp.o MeshTopologyLoader.h Mesh.h (402 ms); Image.cpp.o Factory.inl (384 ms); SVector.cpp.o SVector.h (379 ms); GenerateRigid.cpp.o GenerateRigid.h Mesh.h (373 ms); TestMessageHandler.cpp.o TestMessageHandler.h (346 ms); ... 19960 ms: /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/pstl/glue_algorithm_defs.h (included 157 times, avg 127 ms), included via:; qglviewer.h camera.h QMap qmap.h qiterator.h qglobal.h algorithm (348 ms); manipulatedCameraFrame.h manipulatedFrame.h frame.h QObject qobject.h qobjectdefs.h qnamespace.h qglobal.h algorithm (345 ms); gtest-typed-test.h gtest-port.h algorithm (299 ms); mouseGrabber.h config.h qglobal.h algorithm (299 ms); VRender.h config.h qglobal.h algorithm (296 ms); cmake_pch.hxx Base.h BoundingBox.h Vec.h fixed_array.h algorithm (271 ms); ... 19494 ms: sofa/applications/plugins/SofaTest/../SofaTest/Mapping_test.h (included 6 times, avg 3249 ms), included via:; DistanceMapping_test.cpp.o (3500 ms); QuaternionIntegration_test.cpp.o (3407 ms); RigidRigidMapping_test.cpp.o (3280 ms); SquareMapping_test.cpp.o (3239 ms); RigidMapping_test.cpp.o (3089 ms); SquareDistanceMapping_test.cpp.o (2976 ms); ... 19187 ms: sofa/SofaKerne",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:35910,Test,TestMessageHandler,35910,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['Test'],['TestMessageHandler']
Testability,"oid DefaultAnimationLoop::behaviorUpdatePosition(const core::ExecParams* params, const SReal dt) const; {; sofa::helper::ScopedAdvancedTimer timer(""BehaviorUpdatePositionVisitor"");; BehaviorUpdatePositionVisitor beh(params, dt);; gnode->execute(beh);; }; ```; In the end, the pipeline is easier to read:; ```cpp; sofa::core::MechanicalParams mparams(*params);; mparams.setDt(dt);. behaviorUpdatePosition(params, dt);; updateInternalData(params);. resetConstraint(params);. beginIntegration(params, dt);; {; collisionDetection(params);. const core::ConstraintParams cparams;; buildConstraintMatrix(cparams);; accumulateMatrixDeriv(cparams);. solve(params, dt);. projectPositionAndVelocity(nextTime, mparams);; propagateOnlyPositionAndVelocity(nextTime, mparams);; }; endIntegration(params, dt);; computeIsolatedForces(params, dt);. updateSimulationContext(params, dt, startTime);; ```. # AnimateVisitor. `AnimateVisitor` is no longer used. It was difficult to read its logic (the visitor called other visitors, it relies heavily on pruning which is easy to miss). Instead, I suggest to explicit all the steps from the `AnimateVisitor` into the `DefaultAnimationLoop`. This is closer to what is done in the `FreeMotionAnimationLoop`. Plus, we can find common steps, which makes the code more consistent. Note also the introduction of `ComputeIsolatedForceVisitor` (see the comments in the code to understand its purpose). # Multithreading. Since `AnimateVisitor` is no longer used, `SolveVisitor` is used instead, providing optional multithreading, i.e. solving each ODE in parallel. Similar to what was done in the `FreeMotionAnimationLoop`. ## Benchmark. Measured on `examples/Component/SolidMechanics/FEM/TetrahedronFEMForceField.scn`. Without parallelism; ```; [INFO] [BatchGUI] 1000 iterations done in 14.7031 s ( 68.0128 FPS).; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 2 0.03 1 10.57 27.32 11.94 2.11 11.94 82.14 ..solve; ```. With parallelism; ```; [INFO] [BatchGUI] 1000 iterations do",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959:1381,log,logic,1381,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959,1,['log'],['logic']
Testability,"ois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly push_back matrix data into a std::vector<Eigen::Triplet<SReal> > through a std::back_insert_iterator.; > ; > With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for getting the data and working with the data instead of a single structure is the way to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AHUGIb2x8bFdYI3KTJsLE_7Qy-d2FFJiks5rtSFPgaJpZM4KLEE1>.; >",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:2418,benchmark,benchmarking,2418,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399,2,['benchmark'],['benchmarking']
Testability,ok for me if the tests pass but I don't understand what is involved behind between the groups and multi-mapping.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/901#issuecomment-456416670:17,test,tests,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/901#issuecomment-456416670,1,['test'],['tests']
Testability,"ok for me, just a shame this was not detected automatically by the tests...; Maybe @damienmarchal or @EulalieCoevoet you could put an issue on that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/924#issuecomment-462260724:67,test,tests,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/924#issuecomment-462260724,1,['test'],['tests']
Testability,"ok here is the new call stack with your version @hugtalbot :; ```; SphereLoader::load; SphereLoader::load END; SphereLoader::updateFileNameAndTransformPosition; - m_filename changed: 1; - d_translation changed: 0; - d_rotation changed: 0; - d_scale changed: 0; SphereLoader::load; SphereLoader::load END; SphereLoader::applyTransform; SphereLoader::applyTransform END; SphereLoader::Callback exit with load(); ```. So as you can see the file is loaded once at parse time (because of the ```canLoad``` mechanism of the Loader) but the m_filename is still flaged as changed in the tracker so it will call the method load a second time when the Data position/radius are pulled from other components. . This was avoided in my previous version by adding ```m_internalEngine[""filename""].cleanDirty();``` at begining of the Load method. . However it is not looping anymore like in the initial version. Maybe we can say that this double call of load is special due to the Loader mechanism at parse stage (which should be replaced by a nice Data grah update...); For the log from epernod@sophia.inria.fr . Loader are loading file/mesh at parse stage to ensure they are ready and all their data are filled before any other component start linking and using the loader data. You can see it like a ""pre-init"" visitor... in comparison to the bwdInit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434:1062,log,log,1062,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-744821434,1,['log'],['log']
Testability,"ok looking at the CI, only tests from plugin are failing because the scene are still requesting to load plugin with old plugin name. I can fix that quickly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3301#issuecomment-1263227559:27,test,tests,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3301#issuecomment-1263227559,1,['test'],['tests']
Testability,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:369,log,logging,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211,2,['log'],['logging']
Testability,"ok, could you test by removing the line:; 323 or 324 in the GeomagicDriver.cpp. remove this call: ```updatePosition(); ```; because I saw it is called at SOFA component init when the device thread is not yet well init so it init the manager position with trash position of the device.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/996#issuecomment-484090622:14,test,test,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/996#issuecomment-484090622,1,['test'],['test']
Testability,"olver name=""cs"" tolerance=""0.001"" maxIt=""500""/-->; 	<GenericConstraintSolver name=""cs"" tolerance=""0.001"" maxIt=""500""/>; 	<MyTestController name=""body"" modelName=""patient.scn"" />; </Node>; ```. I dynamically load ""patient.scn"" in the MyTestController component, the code is as follows:. ```; sofa::simulation::SceneLoader *loader = sofa::simulation::SceneLoaderFactory::getInstance()->getEntryFileName(modelPath);; if (loader); {; 	m_node = loader->load(modelPath.c_str());; 	m_node->init(sofa::core::ExecParams::defaultInstance());; }; ```; The content of ""patient.scn"" is as follows:; ```; <?xml version=""1.0""?>; <Node name=""root"" gravity=""0 0 0"" dt=""0.005"" >. 	<RequiredPlugin name=""MeshFbxLoader"" />; 	<Node name=""Patient"">; 		<MechanicalObject name=""Articulations"" template=""Vec1d"" size=""1"" />; 		<Node name=""PatientBone"">; 			<MeshFbxLoader name=""fbxloader"" filename=""Body-Bone.FBX"" />		; 			<MechanicalObject name=""Bones"" template=""Rigid3d"" position=""@fbxloader.bonePos"" showObject=""0"" />; 			<Node name=""skinning"">; 				<OglModel name=""body"" src=""@../fbxloader"" />; 				<SkinningMapping name=""skinMap"" template=""Rigid3d,ExtVec3d"" input =""@../Bones"" output =""@body"" nbRef =""@../fbxloader.nbref"" indices =""@../fbxloader.boneIds"" weight=""@../fbxloader.boneWeights""/>; 			</Node>	; 			<ArticulatedSystemMapping input1=""@../Articulations"" output=""@Bones""/>; 		</Node>; 		<ArticulatedHierarchyContainer/>; 		<Node name=""articulationCenters"">; 			<Node name=""articulationCenter1"">; 				<ArticulationCenter parentIndex=""0"" childIndex=""1"" posOnParent=""294 22 0"" posOnChild=""0 0 0"" />; 				<Node name=""articulations"">; 					<Articulation translation=""0"" rotation=""1"" rotationAxis=""0 0 -1"" articulationIndex=""0""/>; 				</Node>; 			</Node>; 		</Node>; 	</Node>; 	; </Node>; ```. When my application is started, the above pointer is empty error appears, but when the component ""GenericConstraintSolver"" is changed to ""LCPConstraintSolver"" in ""test.scn"", the above pointer is empty problem no longer occurs.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696:2476,test,test,2476,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1450#issuecomment-674001696,1,['test'],['test']
Testability,"om/56633656/234046608-193dee0f-9771-4526-be96-6987aa0b87d1.png). However, my desired color map of the stress is like the following image (using node stress data):; ![VisualStress04](https://user-images.githubusercontent.com/56633656/234047053-0d382e09-243c-470b-8f49-ebbc6b756482.png); Compared to the visualization with ""_showVonMisesStressPerElement_"", this color map accords more with my intuition of the stress forces (while the feet are pressed).; Therefore, I would like to add a new option ""_showVonMisesStressPerNodeColorMap_"" to show this color map. 2) I would like to add an option ""_showGapBetweenElements_"" to activate/deactivate drawing the gap between the elements, in order to show a smooth color map:; ![VisualStress07](https://user-images.githubusercontent.com/56633656/234049502-781340eb-e323-402d-8aeb-fc4f14c0e722.png). 3) I would like to add an option ""_showForceField_"" to decide if we draw the forcefield of the current object or not. This will be useful when we have several soft tissues and we want to focus on one of the objects:; ![VisualStress08](https://user-images.githubusercontent.com/56633656/234050359-c2c27e3b-ba45-48b9-98dc-337757e25b6d.png); ![VisualStress09](https://user-images.githubusercontent.com/56633656/234050426-38c84e34-49f8-4c2c-bcea-b8d4e2acef59.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3820:2327,test,test,2327,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3820,2,['test'],['test']
Testability,"ompile-time, and it is not possible to use runtime polymorphism. Therefore, it was not possible to uncouple the solver itself from the ordering method. To comply with the new design, I introduced a factory that can be enriched in the new Metis plugin. This factory is able to register types and use runtime polymorphism using a few C++ tricks. The only concern is that the solvers in the factory will not use the algorithms from the `BaseOrderingMethod`. Instead, they use a simple string (defined in a `BaseOrderingMethod`), and its mapping to a type. This has to be registered in the initialization of the module. I tried hard to use the intelligence of the component instead of relying on a string and a factory, but the design of Eigen is not compatible. In order to not force the users to add an ordering method in their scenes, a default one is created automatically by the linear solver. It instantiates `MetisOrderingMethod` if it can find it, otherwise it's `AMDOrderingMethod`. Here are the tasks in a future PR:. 1. Create a plugin for Metis; 2. Move `MetisOrderingMethod` into this plugin; 3. Move some unit tests in this plugin; 4. Update the regression references; 5. Update `FillReducingOrdering`; 6. Remove METIS dependency in `LinearSolver.Direct`; 7. Create a new plugin for Scotch. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4477:1890,test,tests,1890,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4477,3,['test'],"['test', 'tests']"
Testability,"on my machine:. > [==========] Running 2 tests from 1 test case.; > [----------] Global test environment set-up.; > [----------] 2 tests from Monitor_test; > [ RUN ] Monitor_test.testInit; > [ OK ] Monitor_test.testInit (21 ms); > [ RUN ] Monitor_test.testModif; > [ OK ] Monitor_test.testModif (17 ms); > [----------] 2 tests from Monitor_test (38 ms total); > ; > [----------] Global test environment tear-down; > [==========] 2 tests from 1 test case ran. (38 ms total); > [ PASSED ] 2 tests. The purpose of this PR was initially to create a test to uncover a bug that some people in our team went through.; I personally never had the problem on my machine, but I know that @IPeterlik had it for instance.; It would be interesting to investigate deeper into this issue, but without being able to reproduce it on my workstation, I don't really know how I could do it. :/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942:41,test,tests,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-323369942,14,['test'],"['test', 'testInit', 'testModif', 'tests']"
Testability,on.html) | [misc-non-copyable-objects](https://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html) |; | [clang-analyzer-core.NonNullParamChecker](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonNullParamChecker.html) | [misc-redundant-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html) |; | [clang-analyzer-core.NonnilStringConstants](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NonnilStringConstants.html) | [misc-sizeof-container](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html) |; | [clang-analyzer-core.NullDereference](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.NullDereference.html) | [misc-sizeof-expression](https://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html) |; | [clang-analyzer-core.StackAddressEscape](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.StackAddressEscape.html) | [misc-static-assert](https://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html) |; | [clang-analyzer-core.UndefinedBinaryOperatorResult](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.UndefinedBinaryOperatorResult.html) | [misc-string-compare](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-compare.html) |; | [clang-analyzer-core.VLASize](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.VLASize.html) | [misc-string-integer-assignment](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-integer-assignment.html) |; | [clang-analyzer-core.builtin.BuiltinFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.BuiltinFunctions.html) | [misc-string-literal-with-embedded-nul](https://clang.llvm.org/extra/clang-tidy/checks/misc-string-literal-with-embedded-nul.html) |; | [clang-analyzer-core.builtin.NoReturnFunctions](https://clang.llvm.org/extra/clang-tidy/checks/clang-analyzer-core.builtin.NoReturnFunctions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:9736,assert,assert,9736,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,2,['assert'],['assert']
Testability,"one test is failing on ubuntu (RigidLinearDeformationMappings) but this does occur on my machine.; Otherwise, ready for review !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-338120512:4,test,test,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-338120512,1,['test'],['test']
Testability,"onment. **Context**. - System: ""Ubuntu 20.04""; - Version of SOFA: v23.06.00 binaries"". **Command called**. ```txt; python3 /home/sofa/SOFA_v23.06.00/bin/lapgym/sofa_env/sofa_env/scenes/reach/reach_env.py. ```. **Env vars**. ```bash; #################; --- sys.version ---; 3.8.10 (default, Jul 29 2024, 17:02:10) ; [GCC 9.4.0]; --- PATH ---; /home/sofa/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin; --- SOFA_ROOT ---; /home/sofa/SOFA_v23.06.00/bin/.runSofa; --- PYTHONPATH ---; /home/sofa/SOFA_v23.06.00/plugins/SofaPython3/lib/python3/site-packages; --- sys.path ---; ['', '/home/sofa/SOFA_v23.06.00/plugins/SofaPython3/lib/python3/site-packages', '/usr/lib/python38.zip', '/usr/lib/python3.8', '/usr/lib/python3.8/lib-dynload', '/home/sofa/.local/lib/python3.8/site-packages', '/home/sofa/SOFA_v23.06.00/bin/lapgym/sofa_env', '/usr/local/lib/python3.8/dist-packages', '/usr/lib/python3/dist-packages']; #################. ```. Result logs :. `[ERROR] [RequiredPlugin(Sofa.Component.AnimationLoop)] Plugin not found: ""Sofa.Component.AnimationLoop"". Failed to load: [""Sofa.Component.AnimationLoop""]; [ERROR] [RequiredPlugin(Sofa.Component.Mapping.Linear)] Plugin not found: ""Sofa.Component.Mapping.Linear"". Failed to load: [""Sofa.Component.Mapping.Linear""]; [ERROR] [RequiredPlugin(Sofa.Component.ODESolver.Forward)] Plugin not found: ""Sofa.Component.ODESolver.Forward"". Failed to load: [""Sofa.Component.ODESolver.Forward""]; [ERROR] [RequiredPlugin(SofaPython3)] Plugin not found: ""SofaPython3"". Failed to load: [""SofaPython3""]; [ERROR] [RequiredPlugin(Sofa.Component.Mapping.NonLinear)] Plugin not found: ""Sofa.Component.Mapping.NonLinear"". Failed to load: [""Sofa.Component.Mapping.NonLinear""]; [ERROR] [RequiredPlugin(Sofa.Component.Constraint.Lagrangian.Model)] Plugin not found: ""Sofa.Component.Constraint.Lagrangian.Model"". Failed to load: [""Sofa.Component.Constraint.Lagrangian.Model""]; [ERROR] [RequiredPlugin(Sofa.Component.Engi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4905:1839,log,logs,1839,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4905,1,['log'],['logs']
Testability,"onstraintCorrection<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: UncoupledConstraintCorrection<Vec1d>; [WARNING] [ObjectFactory] Class already registered: UncoupledConstraintCorrection<Vec2d>; [WARNING] [ObjectFactory] Class already registered: UncoupledConstraintCorrection<Vec3d>; [WARNING] [ObjectFactory] Class already registered: UniformConstraint<Vec1d>; [WARNING] [ObjectFactory] Class already registered: UnilateralInteractionConstraint<Vec3d>; [WARNING] [ObjectFactory] Class already registered: DOFBlockerLMConstraint<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: DOFBlockerLMConstraint<Vec3d>; [WARNING] [ObjectFactory] Class already registered: FixedLMConstraint<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: FixedLMConstraint<Vec3d>; [WARNING] [ObjectFactory] Class already registered: DistanceLMContactConstraint<Vec3d>; [WARNING] [ObjectFactory] Class already registered: DistanceLMConstraint<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: DistanceLMConstraint<Vec3d>; [WARNING] [ObjectFactory] Class already registered: LMConstraintSolver; [WARNING] [ObjectFactory] Class already registered: LMConstraintDirectSolver; [INFO] [PluginManager] Loaded plugin: /home/jnbrunet/sources/sofa/build/lib/libSofaConstraint.so; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1652:6580,test,test,6580,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1652,2,['test'],['test']
Testability,"ontainers have been changed so we do constant operations only; - Debug visualization has been added. Results:; Tests have been performed on the caduceus scene where BruteForceDetection has been changed to DirectSAP, running 1000 iterations:. BEFORE:; 1000 iterations done in 19.7895 s ( 50.532 FPS). ; LEVEL	 START	 NUM	 MIN	 MAX	 MEAN	 DEV	 TOTAL	PERCENT	ID; 5 	 1.30	 1 	 15.30	 29.27	 17.51	 2.06	 17.51	 88.55	.....NarrowPhase; 6 	 1.37	 1 	 0.19	 0.59	 0.22	 0.03	 0.22	 1.11	......Direct SAP std::sort; 6 	 1.59	 1 	 14.98	 28.90	 17.21	 2.04	 17.21	 87.05	......Direct SAP intersection. AFTER:; 1000 iterations done in 7.53045 s ( 132.794 FPS).; LEVEL	 START	 NUM	 MIN	 MAX	 MEAN	 DEV	 TOTAL	PERCENT	ID; 5 	 1.25	 1 	 3.66	 9.56	 5.37	 0.88	 5.37	 71.52	.....NarrowPhase; 6 	 1.31	 1 	 0.05	 0.11	 0.05	 0 	 0.05	 0.72	......Direct SAP cache; 6 	 1.37	 1 	 0.21	 0.61	 0.23	 0.03	 0.23	 3.08	......Direct SAP sort; 6 	 1.60	 1 	 3.24	 9.10	 5.02	 0.86	 5.02	 66.80	......Direct SAP intersection. Gain of the narrow phase: x3.3 faster. Note: BruteForceDetection is still a lot faster:; 1000 iterations done in 2.62201 s ( 381.386 FPS). Debug view:; ![Capture d’écran du 2021-03-15 10-04-20](https://user-images.githubusercontent.com/10572752/111137537-32874a00-857f-11eb-9f39-0eaceb0fa0be.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1917:2168,test,test,2168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1917,2,['test'],['test']
Testability,"ontext manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/411:1401,assert,assert,1401,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411,5,"['assert', 'log', 'test']","['assert', 'logic', 'test']"
Testability,"ontext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). SofaContextAPI::loadScene method returns: success (bool) for scene: C:/Users/dhananjay/unity_projects/testSofa/Assets/SofaUnity/Scenes/SofaScenes/tissue.scn; UnityEngine.Debug:LogError (object); SofaUnityAPI.SofaContextAPI:loadScene (string) (at Assets/SofaUnity/Plugins/SofaUnityAPI/SofaContextAPI.cs:189); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:486); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). ## SofaVisualModel:Reconnect ; UnityEngine.Debug:Log (object); SofaUnity.SofaUnityRenderer:Reconnect () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaUnityRenderer.cs:109); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:495); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent (int,intptr,bool&). Reconnect SofaVisualModel: Visual; UnityEngine.Debug:Log (object); SofaUnity.SofaUnityRenderer:Reconnect () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaUnityRenderer.cs:118); SofaUnity.SofaContext:ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:495); SofaUnity.SofaContext:Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext:StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext:Awake () (at Assets",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4156:4746,Log,Log,4746,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4156,1,['Log'],['Log']
Testability,"ood as it is misleading on the purpose of the function.; In the following example ; ```cpp; MyObject* ptr;; Base::className(ptr); ; ```; You don't see this is a templated method and you have no idea what 'ptr' is for, and you don't even know if putting a nullptr will work or not. ; Using the templated only syntax is more clear on the role of the function; ```cpp; Base::className<MyObject>(); ; ```; Or if you have an object instance; ```cpp; Base::className<declspec(obj)>(); ; ```. Most common code update pattern; ============================; The most common compilation problem you will encounter with non updated external plugin is related to the overriding of getTemplateName or templateName() method. This method is now now considered as final and thus it is not possible to override it anymore. ; To update old code like this: ; ```cpp; MyClass : public BaseObject; virtual std::string getTemplateName() const { return templateName(); } ; static std::string templateName(const CapsuleCollisionModel<DataTypes>* = nullptr); {; return DataTypes::Name();; }; ```; You can remove the code as the default name generation mecanisme can handle that for you automatically using the ""Name"" . . In the case if your DataTypes does not have a Name() function or if some of the class template parameters should not be exposed as runtime template then you need to implement your custom naming scheem by implementing the following function; ```cpp; static const std::string CustomTemplateName(); { ; return ""CustomName"";; }; ```. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1283:4493,test,test,4493,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1283,2,['test'],['test']
Testability,"or] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . ----------------------------------------------------------------------; Ran 1 test in 0.001s. FAILED (errors=1); /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py:0: Failure; Failed; [ FAILED ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent, where GetParam() ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4888,test,test,4888,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['test']
Testability,"ory;. // collision pipeline; using sofa::component::collision::detection::algorithm::DefaultPipeline;; using sofa::component::collision::detection::algorithm::BruteForceBroadPhase;; using sofa::component::collision::detection::algorithm::BVHNarrowPhase;; using sofa::component::collision::detection::intersection::NewProximityIntersection;; using sofa::component::collision::response::contact::DefaultContactManager;; using sofa::component::collision::geometry::PointCollisionModel;. // mechanical object; using sofa::component::statecontainer::MechanicalObject;; using sofa::defaulttype::StdVectorTypes;; using sofa::type::Vec;. using sofa::core::behavior::MechanicalState;; using sofa::core::State;; using sofa::core::objectmodel::New;; using sofa::core::objectmodel::Data;. using sofa::simulation::DefaultAnimationLoop;. int main(int argc, char** argv); {; sofa::helper::logging::MessageDispatcher::addHandler(&sofa::helper::logging::MainLoggingMessageHandler::getInstance());; sofa::helper::logging::MessageDispatcher::addHandler(&sofa::helper::logging::MainPerComponentLoggingMessageHandler::getInstance());; sofa::helper::logging::MainLoggingMessageHandler::getInstance().activate();. sofa::helper::BackTrace::autodump();. sofa::simulation::graph::init();. sofa::simulation::setSimulation(new sofa::simulation::graph::DAGSimulation());. for (int i = 0; i < 1000; i++) {. Node::SPtr groot = sofa::simulation::getSimulation()->createNewGraph(""root"");; groot->setGravity({ 0,0,0 });; groot->setDt(0.02);. DefaultAnimationLoop::SPtr animationLoop = New<DefaultAnimationLoop>();; groot->addObject(animationLoop);. // collision pipeline; DefaultPipeline::SPtr collisionPipeline = New<DefaultPipeline>();; collisionPipeline->setName(""Collision Pipeline"");; groot->addObject(collisionPipeline);. // collision detection system; BruteForceBroadPhase::SPtr broadPhaseDetection = New<BruteForceBroadPhase>();; broadPhaseDetection->setName(""Broad Phase Collision Detection"");; groot->addObject(broadPhaseDete",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147:2678,log,logging,2678,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147,5,['log'],['logging']
Testability,"or}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::contribute<0>(const sofa::core::MechanicalParams * mparams) Line 85	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::assembleSystem(const sofa::core::MechanicalParams * mparams) Line 123	C++; 	Sofa.Core.dll!sofa::core::behavior::BaseMatrixLinearSystem::buildSystemMatrix(const sofa::core::MechanicalParams * mparams) Line 38	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsolver::MatrixLinearSolver<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>,sof",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:1671,log,logging,1671,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,3,"['Log', 'log']","['LoggerStream', 'logging']"
Testability,"otations=""true""` now **requires** to have a RotationFinder. PrecomputedConstraintCorrection has a hard dependency on TetrahedronFEMForceField, to get rotations.; (hence calling a a function of TetraFEM); It can also get rotations if it detects a component implemented RotationFinder<T>.; But TetrahedronFEMForceField is already implementing BaseRotationFinder taking a BaseMatrix*.; RotationFinder<T> inherits BaseRotationFinder, so I made TetrahedronFEMForceField implementing RotationFinder<T> instead. (which adds an other method to implement); Finally, PrecomputedConstraintCorrection only needs RotationFinder<T> now. IMO, ; - BaseRotationFinder implemented in TetrahedronFEM & HexahedronFEM only and used in WarpPreconditioner;; - RotationFinder<T> (implemented by nobody in the sofacode base but apparently by one external plugin @pedroperrusi) and used by PrecomputedConstraintCorrection, WarpPreconditioner and PrecomputedWarpPreconditioner;. would really need a refactoring or some re-working.; Those two were defined more or less in the same time, in 2006 (!) in the early days of SOFA. Some cleaning in PrecomputedConstraintCorrection as well; and this PR made me wonder the never-defined preprocessor definition NEW_METHOD_UNBUILT in PrecomputedConstraintCorrection (@ChristianDuriez ?). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2250:2025,test,test,2025,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2250,2,['test'],['test']
Testability,"ound. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; -----------------------------------------------------",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3871,test,tests,3871,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"params, dt);. projectPositionAndVelocity(nextTime, mparams);; propagateOnlyPositionAndVelocity(nextTime, mparams);; }; endIntegration(params, dt);; computeIsolatedForces(params, dt);. updateSimulationContext(params, dt, startTime);; ```. # AnimateVisitor. `AnimateVisitor` is no longer used. It was difficult to read its logic (the visitor called other visitors, it relies heavily on pruning which is easy to miss). Instead, I suggest to explicit all the steps from the `AnimateVisitor` into the `DefaultAnimationLoop`. This is closer to what is done in the `FreeMotionAnimationLoop`. Plus, we can find common steps, which makes the code more consistent. Note also the introduction of `ComputeIsolatedForceVisitor` (see the comments in the code to understand its purpose). # Multithreading. Since `AnimateVisitor` is no longer used, `SolveVisitor` is used instead, providing optional multithreading, i.e. solving each ODE in parallel. Similar to what was done in the `FreeMotionAnimationLoop`. ## Benchmark. Measured on `examples/Component/SolidMechanics/FEM/TetrahedronFEMForceField.scn`. Without parallelism; ```; [INFO] [BatchGUI] 1000 iterations done in 14.7031 s ( 68.0128 FPS).; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 2 0.03 1 10.57 27.32 11.94 2.11 11.94 82.14 ..solve; ```. With parallelism; ```; [INFO] [BatchGUI] 1000 iterations done in 7.13825 s ( 140.09 FPS).; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 2 0.03 1 3.53 6.85 4.45 0.81 4.45 63.60 ..solve; ```. The simulation is 2x faster. But there are 4 different objects, so we expected a speed-up of 4x. However, the speed-up is only about the `solve` function. Another time consuming function is the `end event` when computing the von Misses stresses. Still, the solve function only shows a speedup of 2.68x, instead of 4x. I cannot explain it for now... [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/362]. ______________________________________________________. By submitting this pull request, ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959:2057,Benchmark,Benchmark,2057,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959,1,['Benchmark'],['Benchmark']
Testability,"parseMatrixMat3x3"" parallelInverseProduct=""true"" />; [INFO] [BatchGUI] 1000 iterations done in 46.8709 s ( 21.3352 FPS). <EigenSimplicialLDLT name=""precond"" template=""CompressedRowSparseMatrixMat3x3"" parallelInverseProduct=""false"" />; [INFO] [BatchGUI] 1000 iterations done in 95.1848 s ( 10.5059 FPS). <SparseLDLSolver name=""precond"" template=""CompressedRowSparseMatrixMat3x3"" parallelInverseProduct=""false"" />; [INFO] [BatchGUI] 1000 iterations done in 146.778 s ( 6.813 FPS). <SparseLDLSolver name=""precond"" template=""CompressedRowSparseMatrixMat3x3"" parallelInverseProduct=""true"" />; [INFO] [BatchGUI] 1000 iterations done in 68.7089 s ( 14.5542 FPS). . <SparseLUSolver name=""precond"" template=""CompressedRowSparseMatrixMat3x3"" parallelInverseProduct=""true"" />; [INFO] [BatchGUI] 100 iterations done in 35.9595 s ( 2.7809 FPS). <SparseLUSolver name=""precond"" template=""CompressedRowSparseMatrixMat3x3"" parallelInverseProduct=""false"" />; [INFO] [BatchGUI] 100 iterations done in 51.4465 s ( 1.94377 FPS).; ```. It indicates that `EigenSimplicialLDLT ` is faster than `SparseLDLSolver`. At least in this scene. It's not the case in `TorusFall.scn`. Two reasons to avoid the parallelization in the matrix-free CG:; 1. `GraphScatteredVector` is not default constructible; 2. Would not be thread-safe. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4255:2305,test,test,2305,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4255,2,['test'],['test']
Testability,"per.dll!std::_Mutex_base::lock() Line 50	C++; 	[Inline Frame] Sofa.Helper.dll!std::lock_guard<std::mutex>::{ctor}(std::mutex & _Mtx) Line 427	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 151	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; 	Sofa.GUI.Qt.dll!redirectQtMessages(QtMsgType type, const QMessageLogContext & context, const QString & msg) Line 40	C++; 	[External Code]	; 	Sofa.GUI.Qt.dll!sofa::gui::qt::setMessageIconFrom(QTreeWidgetItem * item, sofa::core::objectmodel::Base * object) Line 325	C++; 	Sofa.GUI.Qt.dll!sofa::gui::qt::ObjectStateListener::notifyEndEdit() Line 350	C++; 	Sofa.Core.dll!sofa::core::objectmodel::DDGNode::notifyEndEdit() Line 83	C++; 	[Inline Frame] Sofa.Helper.dll!sofa::helper::logging::MessageDispatcherImpl::process(sofa::helper::logging::Message &) Line 119	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::process(sofa::helper::logging::Message & m) Line 152	C++; 	Sofa.Helper.dll!sofa::helper::logging::MessageDispatcher::LoggerStream::~LoggerStream() Line 198	C++; >	Sofa.Core.dll!sofa::core::behavior::BaseForceField::buildStiffnessMatrix(sofa::core::behavior::StiffnessMatrix * matrix) Line 62	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::contribute<0>(const sofa::core::MechanicalParams * mparams) Line 85	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsystem::AssemblingMatrixSystem<sofa::linearalgebra::BTDMatrix<6,double>,sofa::linearalgebra::BlockVector<6,double>>::assembleSystem(const sofa::core::MechanicalParams * mparams) Line 123	C++; 	Sofa.Core.dll!sofa::core::behavior::BaseMatrixLinearSystem::buildSystemMatrix(const sofa::core::MechanicalParams * mparams) Line 38	C++; 	Sofa.Component.LinearSolver.Direct.dll!sofa::component::linearsol",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850:1554,log,logging,1554,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1436394850,2,['log'],['logging']
Testability,"per/../SofaDefaultType/src/sofa/defaulttype/Vec.h (included 143 times, avg 434 ms), included via:; cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (936 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (850 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (831 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (825 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (806 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (792 ms); ... 54486 ms: /opt/Qt/5.15.0/gcc_64/include/QtWidgets/qwidget.h (included 94 times, avg 579 ms), included via:; QSofaStatWidget.h QLabel qlabel.h qframe.h (1332 ms); QTabulationModifyObject.h QWidget (1308 ms); VRender.h config.h QOpenGLWidget qopenglwidget.h QWidget (1240 ms); QSofaStatWidget.h QLabel qlabel.h qframe.h (1237 ms); mouseGrabber.h config.h QOpenGLWidget qopenglwidget.h QWidget (1159 ms); VRender.h config.h QOpenGLWidget qopenglwidget.h QWidget (1153 ms); ... 50534 ms: sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/logging/Messaging.h (included 122 times, avg 414 ms), included via:; cmake_pch.hxx.json cmake_pch.hxx (1185 ms); cmake_pch.hxx.json cmake_pch.hxx (1155 ms); cmake_pch.hxx.json cmake_pch.hxx (1143 ms); cmake_pch.hxx.json cmake_pch.hxx (1029 ms); cmake_pch.hxx.json cmake_pch.hxx (1017 ms); cmake_pch.hxx.json cmake_pch.hxx (995 ms); ... 48975 ms: sofa/applications/plugins/SofaTest/../SofaTest/Sofa_test.h (included 83 times, avg 590 ms), included via:; VariationalSymplecticImplicitSolverNonLinearForceDynamic_test.cpp.o Elasticity_test_deprecated.h Elasticity_test.h (913 ms); TransformEngine_test.cpp.o (891 ms); SparseGridTopology_test.cpp.o (805 ms); TetrahedronNumericalIntegration_test.cpp.o (779 ms); AffineMovementConstraint_test.cpp.o Elasticity_test.h (767 ms); MeshROI_test.cpp.o (755 ms); ... 38428 ms: sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/fixed_array.h (included 162 times, avg 237 ms), included via:; cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingB",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:32017,log,logging,32017,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['log'],['logging']
Testability,"periment done in https://github.com/sofa-framework/sofa/pull/1552. Currently this PR shouldn't breaking too much, the CI will tells us. Two test are failing...but this is on purpose to keep a track the breaking parts. ; The failure results from the unification of the naming schemes. ; Fixing the tests is easy, just replace the old string with the new one (int->i).; Nevertheless I suggest to fix that when whole refactoring will be over. Compared to #1552 ; - In this PR I'm re-organizing the existing Sofa code without touching its logic. The files in typeinfo/models/* are cut & past from DataTypeInfo.h. The files in typeinfo/TypeInfo_XXX.h are the DataTypeInfo<> specialization that also come from DataTypeInfo.h; - Some breaking changed are introduced to unify the naming scheme. The 'short' naming scheme is following the standard for python.array and was very close to what we already have in Sofa. . - In this PR I don't use at all the TypeInfoRegistry (expect in the test part), this is on purpose so a future PR will be able to emphasize the change on the Sofa code base (in Data.h). ; - In this PR I don't register typeinfo the registry (because it is not used yet), but I added the 'empty' files for that...it is in typeinfo/TypeInfo_xxxxx.cpp ; ; What will be done in a future PR:; - 1. fill the registry with types we are using and replace the use of VirtualTypeInfo<T>::get() in Data.h by TypeInfoRegistry::Get(T).; - 2. remove step by step the static type info and there related #includes files. ; - 3. rename all the method/enum in the static & dynamic system to unify with official naming convention. ; a. static function must start with an UpperCase; b. function returning boolean must start with a verb like IsValidTypeInfo() instead of ValidTypeInfo() ; c. add a getName()/GetName() to replace name().; - 4. replace the enum involved in the static type info system with constexpr. . EDIT: To satisfy popular demand here is more or less the content of the PR. ; [Sofa.pdf](https:",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1605:1021,test,test,1021,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1605,1,['test'],['test']
Testability,ples\Components\linearsolver\FEMBAR_AsyncSparseLDLSolver.scn; examples\Components\misc\sleep\test_sleep.scn; examples\Components\misc\sleep\test_sleep2.scn; examples\Components\misc\sleep\test_sleep3.scn; examples\Components\visualmodel\OglLabel.scn; examples\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPointConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularBendingSprings_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularFEMForceField_RemovingMeshTest.scn; examples\Components\constraint\AffineMovementConstraint.scn; examples\Components\constraint\AffineMovementConstraint3D.scn; examples\Components\constraint\AttachConstraintMatrix.scn; examples\Components\constraint\BilateralInteractionConstraint_PGS.scn; examples\Components\constraint\BilinearConstraint.scn; examples\Components\constraint\BilinearConstraint3D.scn; examples\Components\constraint\HermiteSplineConstraint.scn; examples\Componen,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:1642,Benchmark,Benchmark,1642,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,"pological changes for compliance vector; - Container : add accessor to the topology type; - SubsetMapping : add resizeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/217:1914,test,test,1914,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/217,1,['test'],['test']
Testability,"polygon cube intersection is a utility file only used with SparseGridTopology.; Even more confusing as it has a ""vec.h"" file with lots of macro defined inside. I did not put any stub files with the usual ""this file move there"" because I did not see the priority for it.; But I can do it if requested. Breaking flag to be ""consistent"" but I guess 99(.99)% of users wont even flinch at it. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1772:178,stub,stub,178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1772,3,"['stub', 'test']","['stub', 'test']"
Testability,"ponents [BackgroundSetting] -->; <RequiredPlugin name=""Sofa.Component.StateContainer""/> <!-- Needed to use components [MechanicalObject] -->; <RequiredPlugin name=""Sofa.Component.Visual""/> <!-- Needed to use components [VisualStyle] -->. <VisualStyle displayFlags=""showVisualModels"" />; <BackgroundSetting color=""0.8 0.8 0.8 1"" />. <FreeMotionAnimationLoop name=""FreeMotionAnimationLoop"" />; <GenericConstraintSolver maxIterations=""10"" tolerance=""1.0e-3""/>. <Node name=""Mesh"" >; <EulerImplicitSolver firstOrder=""false"" rayleighMass=""0.1"" rayleighStiffness=""0.1"" />; <SparseLDLSolver name=""precond"" template=""CompressedRowSparseMatrixd"" />. <MechanicalObject name=""mstate"" position=""0 0 0 0 0 0 1"" template=""Rigid3d"" />; <UniformMass totalMass=""1""/>. <Node name=""AttachPoint"">; <MechanicalObject name=""points"" template=""Vec3"" position=""0 0 0 1 0 0 0 1 0 0 0 1"" />; <ConstantForceField indices=""1"" forces=""0.0 0.0 1.0"" showArrowSize=""0.2""/>; <RigidMapping />; </Node>; <LinearSolverConstraintCorrection linearSolver=""@precond""/>; </Node>. <Node name=""Mesh2"" >; <MechanicalObject name=""mstate"" position=""0 0 0 0 0 0 1"" template=""Rigid3d"" />; </Node>. <BilateralInteractionConstraint template=""Rigid3d""; object1=""@Mesh/mstate""; object2=""@Mesh2/mstate""; first_point=""0"" second_point=""0"" />; </Node >; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4234:3622,test,test,3622,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4234,2,['test'],['test']
Testability,"pping that produce the same number of outputs as its inputs), previously to get correct topology association and changes propagation you would need to replicate the topology (and the topological mappings) with a topology both before and after the mapping (but beware if they end up with different sizes, or updated in the wrong order...). With our changes, there is a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1714,test,tested,1714,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201,2,['test'],['tested']
Testability,"proach of the kind of pattern I'm using in the init/reinit function (actually any change to the data from the UIs should also be checked); ```cpp; void MyComponent::init(){; m_componentState = ComponentState::Valid; // By default the ComponentState is to Undefined. ; if( d_stiffness.getValue() < 0.0 ){; msg_warning(this) << ""The 'stiffness=""<< d_stiffness.getValueString() << ""' parameters is outside the validity range of [0, +INF[. Continuing with the default value=500.0 . ""; ""To remove this warning message you need to set the 'stiffness' attribute between [0, +INF[."" ; d_stiffness.setValue(500) ;; }. if( this->m_state nullptr ){; msg_error(this) << ""No mechanical state, the component is thus de-activated.""; ""To remove this error message you need to add a MechanicalObject.""; m_componentState = ComponentState::Invalid;; }; }; ```; Then for each function crashing sofa when the object is not properly initialized... ; ```cpp; void MyComponent::draw(); {; if(m_componentState == ComponentState::Deactivated); return ; ; ; if(m_componentState == ComponentState::Invalid){ ; msg_info_when(this, m_verbosityLevel == HIGH ) << ""You are calling a function on an invalid component. "" ;; return ; ; }; ....; }; ```. I agree this is a lot of code to add but I haven't yet a better solution. Now...if you implement this kind of pattern you can then do the following from the outside (eg: in the _test):; ```cpp; void myComponentInvalid_test(); {; ... make a scene with a MyComponent with an invalid '-1' param.... ; {; ExpectMessage error(Message::Error); // test failure if the component does not send an error message; ; MessageAsTestFailure warning(Message::Warning); // test failure if the component do not send a messae while it shouldn't ; ; MyComponent::init() ; } ; EXPECT_EQ( MyComponent::getComponentState(), ComponentState::Invalid ); ; }; ```. N.B: When I look carefully the ExpectMessage & MessageAsTestFailure... I have the feeling this is a kind of an asynchronous exception mechanism.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494:1575,test,test,1575,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-278900494,2,['test'],['test']
Testability,probably I have no time to test it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3267#issuecomment-1236901105:27,test,test,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3267#issuecomment-1236901105,1,['test'],['test']
Testability,"quadsInHexahedronArray was not really used. ; QuadsOrientationInHexahedronArray is the good one. Quick way to fix #2003. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2995:660,test,test,660,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2995,2,['test'],['test']
Testability,"quick PR from the pool regarding discussion #4561. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4576:590,test,test,590,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4576,2,['test'],['test']
Testability,"r/MechanicalState.h>	; #include <sofa/core/ConstraintParams.h>; #include <sofa/core/CollisionModel.h>	; #include <sofa/core/ExecParams.h>	; #include <SofaMeshCollision/TriangleModel.h>	; #include <SofaBaseCollision/SphereModel.h>; ```. To cut into the dependency tree I introduce opaque function for the most commonly used in .h; The choosen convention was to use a namespace that is symetric to the class name. ; So the opaque version of ```sofa::core::BaseContext::getDt()``` is ```sofa::core::objectmodel::basecontext::getDt(BaseContext*);``` . For the moment, all the opaque function are added in the per namespace fwd.h.; The following ones has been introduced.; In sofa/simulation/fwd.h; ```cpp; Node* sofa::simulation::node::getNodeFrom(BaseContext*);; Node* sofa::simulation::node::getNodeFrom(Base*);; Base* sofa::simulation::node::toBase(Node*);; BaseContext* sofa::simulation::node::toBaseContext(Node*);; ```. In sofa/core/fwd.h; ```; sofa::core::objectmodel::basecontext::getDt(BaseContext*); ; sofa::core::objectmodel::basecontext::getTime(BaseContext*); ; ```. NB: it is possible if the use of these opaque function generalize to move the definition of these ones into more narrow file eg:; sofa/core/objectmodel/node-c-api.h. Finally, if you observe strange consequence please report. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1764:2609,test,test,2609,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1764,2,['test'],['test']
Testability,"ra; Adding collection SofaMiscForceField; Adding collection SofaMiscEngine; Adding collection SofaMiscSolver; Adding collection SofaMiscFem; Adding collection SofaMiscMapping; Adding collection SofaMiscCollision; Adding collection SofaHaptics; Adding plugin SofaValidation; Adding collection SofaGeneralObjectInteraction; Adding collection SofaCommon; Adding collection SofaGeneral; Adding collection SofaAdvanced; Adding collection SofaMisc; Adding collection SofaComponentAll; Adding plugin SceneCreator; Adding plugin CImgPlugin; CImgPlugin: TIFF Image Format enabled; CImgPlugin: JPEG Image Format enabled; CImgPlugin: PNG Image Format enabled; Adding plugin ArticulatedSystemPlugin; CMake Error: File /home/giang/sofa/src/applications/plugins/SofaPython/ExternalProjectConfig.cmake.in does not exist.; CMake Error at Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:266 (configure_file):; configure_file Problem configuring file; Call Stack (most recent call first):; Sofa/framework/Config/cmake/SofaMacrosConfigure.cmake:295 (sofa_add_generic_external); applications/plugins/CMakeLists.txt:22 (sofa_add_subdirectory). SofaPython3 is compiled as a subproject to the external project 'Sofa'.; Adding plugin SofaPython3; CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Python (missing: Python_LIBRARIES Python_INCLUDE_DIRS; Development) (found suitable version ""3.9.5"", minimum required is ""3.7""); Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindPython/Support.cmake:2214 (find_package_handle_standard_args); /usr/share/cmake-3.16/Modules/FindPython.cmake:304 (include); applications/plugins/SofaPython3/CMakeLists.txt:86 (find_package). Configuring incomplete, errors occurred!; See also ""/home/giang/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/giang/sofa/build/CMakeFiles/CMakeError.log"".; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:9411,log,log,9411,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,4,['log'],['log']
Testability,"ractionforcefield::MechanicalMatrixMapper<$>::addKToMatrix(sofa::core::MechanicalParams const*, s... (12 times, avg 260 ms); 3098 ms: sofa::component::engine::boxroi::BoxROI<$>::draw(sofa::core::visual::VisualParams const*) (6 times, avg 516 ms); 3080 ms: sofa::component::engine::MeshROI<$>::MeshROI() (6 times, avg 513 ms); 3079 ms: sofa::core::objectmodel::TClass<$>::isInstance(sofa::core::objectmodel::Base*) const (4538 times, avg 0 ms). *** Expensive headers:; 96471 ms: sofa/extlibs/gtest/include/gtest/gtest.h (included 176 times, avg 548 ms), included via:; gtest.cc.o (1099 ms); VariationalSymplecticImplicitSolverNonLinearForceDynamic_test.cpp.o Elasticity_test_deprecated.h Elasticity_test.h Sofa_test.h BaseTest.h (880 ms); TransformEngine_test.cpp.o Sofa_test.h BaseTest.h (824 ms); SparseGridTopology_test.cpp.o Sofa_test.h BaseTest.h (769 ms); GLSLShader_test.cpp.o (768 ms); BaseContext_test.cpp.o BaseSimulationTest.h BaseTest.h (739 ms); ... 79397 ms: sofa/SofaKernel/modules/SofaHelper/src/sofa/helper/testing/BaseTest.h (included 146 times, avg 543 ms), included via:; VariationalSymplecticImplicitSolverNonLinearForceDynamic_test.cpp.o Elasticity_test_deprecated.h Elasticity_test.h Sofa_test.h (886 ms); TransformEngine_test.cpp.o Sofa_test.h (846 ms); SparseGridTopology_test.cpp.o Sofa_test.h (775 ms); BaseContext_test.cpp.o BaseSimulationTest.h (745 ms); PathResolver_test.cpp.o (740 ms); TetrahedronNumericalIntegration_test.cpp.o Sofa_test.h (734 ms); ... 62158 ms: sofa/SofaKernel/modules/SofaHelper/../SofaDefaultType/src/sofa/defaulttype/Vec.h (included 143 times, avg 434 ms), included via:; cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (936 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (850 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (831 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (825 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (806 ms); cmake_pch.hxx.json cmake_pch.hxx Base.h BoundingBox.h (",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:30491,test,testing,30491,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['test'],['testing']
Testability,"ractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent; ======================================================================; ERROR: test_addNewDataFromParent (Base.Test); ----------------------------------------------------------------------; Traceback (most recent call last):; File ""Base.py"", line 83, in test_addNewDataFromParent; c1 = root.addObject(""MechanicalObject"", name=""c1""); ValueError: Object type MechanicalObject<> was not created ; The object is not in the factory. . ----------------------------------------------------------------------; Ran 1 test in 0.001s. FAILED (errors=1); /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py:0: Failure; Failed; [ FAILED ] SofaPython3/Sofa.all_tests/2_Sofa_Core_Base_test_addNewDataFromParent, where GetParam() = /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/Base.py with args {test_addNewDataFromParent, } (2 ms); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:5182,Test,Test,5182,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,2,"['Test', 'test']","['Test', 'test']"
Testability,"ransitional period this should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry/DiscreteGridField; - deprecated/SphereSurface (override) component/geometry/SphericalField; ```. ...of course we need to add test to all these classes & refactor the MHD loading parts....etc... . Please have a quick look at it and provide feedback on the general way to manage this kind of changes (eg do we really need to keep the SofaVolumetricData transitional plugin or do we allow a more breaking approach and directly remove the SofaVolumetricData with a ChangeLog entry ?). I would be very happy to have opinion & help to be sure to take the right direction resulting PR that match everyone's needs...@jeremieAllard, @fjourdes, @hugtalbot , @guparan , @thomas-lemaire , @matthieu-nesme, @maxime-tournier, @bruno-marques, @bcarrez, @EulalieCoevoet . DM. EDIT: If you are curious about the feature we are adding... it is about having a tetrahedralMesh with CGAL straight out of an implicit function provided in python (and cython if you care about performances)...more on that later. . EDIT2: I changed the url of the branch; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-fra",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/388:2127,test,test,2127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388,1,['test'],['test']
Testability,"raph entries. This is why the initial design was that there is no ""path"" concept at this level.; > ; > My current approach to handle this kind of scenario was to implement an easing function like that:; > ; > ```c++; > std::string sofa::helper::objectmodel::getPathName(Base* o); > {; > BaseNode *node = dynamic_cast<BaseNode>(o);; > if(node); > return node->getPathName();; > BaseObject *object = dynamic_cast<BaseNode>(o);; > if(object); > return object->getPathName();; > ...; > }; > ```; > ; > To avoid having if/else and dynamic cast at every call and thus easing the readability on the caller's.; > But I agree with your that factoring them out in Base would make sense. Actually some refactoring of BaseNode/Node/DAGNode/BaseContext would also make sense given how hard these are interleaved and unclear to most of the developpers. Let's get rid of BaseContext! ;); More seriously, I was also using easing functions before, but I noticed that I was often just duplicating the code whenever I needed it, and felt like having it in Base made more sense, but I must say that I would have preferred a virtual pure method there.. your alternative (adding in SofaCore an easing function in the sofa::core::objectmodel or sofa::helper::objectmodel scope) makes sense to me, solves the problem of having an extra function to override when inheriting Base.; Do you know if there is an improvement in perfs when using toBaseNode() / toBaseObject() instead of a dynamic_cast here?. I would not bet too much on performance improvement without making small benchmark. But in a function that basically returns strings build by concatenating ... I would say this is probably very small. . In addition it has to be noted that using a getPathName() explingn function with if/else has a linear complexity in the amount of possible types (number of if/else) while a virtual getPathName in Base has a constant cost. But again...the calling costs is probably very small compared to what the function actually do :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769:1699,benchmark,benchmark,1699,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1455#issuecomment-678138769,1,['benchmark'],['benchmark']
Testability,rapid fix. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/343:262,test,test,262,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/343,2,['test'],['test']
Testability,raries were hiding the system's ones. Example of CMake warnings from the out-of-tree plugins:. ```cmake; Cannot generate a safe runtime search path for target MyProject; because files in some directories may conflict with libraries in implicit; directories:. runtime library [libGLEW.so.2.1] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_filesystem.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_program_options.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_thread.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_date_time.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_chrono.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_system.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; runtime library [libboost_atomic.so.1.67.0] in /usr/lib/x86_64-linux-gnu may be hidden by files in:; /home/jnbrunet/sources/sofa/build/install/lib; ```. See https://github.com/sofa-framework/sofa/issues/1153 for more details. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1387:1993,test,test,1993,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1387,2,['test'],['test']
Testability,"rc/sofa/core/objectmodel/Link.h:302: warning: bitwise operation between different enumeration types ‘sofa::core::objectmodel::TLink<sofa::core::objectmodel::BaseObject, sofa::core::objectmodel::BaseObject, 7>::<unnamed enum>’ and ‘sofa::core::objectmodel::BaseLink::LinkFlagsEnum’ is deprecated [-Wdeprecated-enum-enum-conversion]; /linuxdata/sofa/src/current/Sofa/framework/Core/src/sofa/core/objectmodel/Link.h:302:37: warning: bitwise operation between different enumeration types ‘sofa::core::objectmodel::TLink<sofa::core::objectmodel::BaseObject, sofa::core::objectmodel::BaseObject, 7>::<unnamed enum>’ and ‘sofa::core::objectmodel::BaseLink::LinkFlagsEnum’ is deprecated [-Wdeprecated-enum-enum-conversion]; 302 | #define ACTIVEFLAG(f) ((ActiveFlags & (f)) != 0); | ~~~~~~~~~~~~~^~~~~~; /linuxdata/sofa/src/current/Sofa/framework/Core/src/sofa/core/objectmodel/Link.h:305:81: note: in expansion of macro ‘ACTIVEFLAG’; 305 | typedef LinkTraitsValueType<DestType, DestPtr, ACTIVEFLAG(FLAG_STRONGLINK), ACTIVEFLAG(FLAG_STOREPATH)> TraitsValueType;; | ^~~~~~~~~~; ```; (I dont know why it was only appearing only for the plugin compilation, maybe some warnings flags are added by an external cmake target); Anyway the macro to enable flags was quite dirty to me so I have changed it a little bit. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3714:2052,test,test,2052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3714,2,['test'],['test']
Testability,"re used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virtual instead ? ; 3) Should the warning message be a dmsg_warning instead of a msg_warning one ? . EDIT3: And this one ; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DifferenceEngine_test_0/DataTest/",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:1820,test,testReport,1820,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,6,['test'],"['test', 'testReport']"
Testability,ready if CI+tests compiles,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1466#issuecomment-685459680:12,test,tests,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1466#issuecomment-685459680,1,['test'],['tests']
Testability,"rectory ( hence the ""./"" ) of the applications since on windows platform. By default, on windows the dlls are located in the same directory as the application. For example `runSofa` and `SofaPython.dll` are both in the same directory; - the `../lib` directory for other platforms like linux, where the plugins are usually stored in a `lib` sub folder of the parent directory where the application reside. For example from the directory where the `runSofa` executable is, you can look for the directory where `SofaPython.lib` is located by doing `cd ../lib`. These paths are relative and are compatible both with a build tree and an install tree. Prior to f93e2b9 the PluginRepository was empty by default, leaving all the executables the responsibility to fill it with these values. Behavior which was changed multiple times compared to ca0402d for a reason yet to be explained. The side effect this change introduced was the requirement to have every unit test executable which attempts to load a plugin to explicitly fill the PluginRepository with the paths where the libraries are located with respect to the executable. This requirement was covered by having most of the unit tests depend on SofaGTest which initialize these default paths for you, so that test scenes that use a ` RequiredPlugin` component do not utterly fail. ; Unless a **valid** argument is raised, the aforementioned paths should be the default ones to use to initialize the `PluginRepository` global object. ; I strongly believe that would these paths have been properly restored by f93e2b9 (my bad), this PR would have never existed on the first place. I mean how much time has been lost already in fixes, and discussions because of this ! Just to in the end roll back to the implementation that was done 5 years ago which was **just working**. The other thing I mentionned in the comment https://github.com/sofa-framework/sofa/pull/502#issuecomment-340518769 is that there should be only one place to store the paths for po",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659:1090,test,test,1090,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342557659,1,['test'],['test']
Testability,"regression was Introduced in; - #4601 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4643:579,test,test,579,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4643,2,['test'],['test']
Testability,"related to https://github.com/SofaDefrost/SoftRobots/pull/283. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4763:602,test,test,602,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4763,2,['test'],['test']
Testability,"remove [ ] operator and some constructors. Warning as discussed, this will not be merged directly in master but in a PoC topology branch. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2082:677,test,test,677,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2082,2,['test'],['test']
Testability,remove all unnecessary warnings in CUDA files; The extern declaration o template was necessary for old gcc but it raise warnings with newer version.; I don't know the behavior on windows. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1548:439,test,test,439,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1548,2,['test'],['test']
Testability,"remove call to setValue using execParams which has been depreciate. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2033:607,test,test,607,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2033,2,['test'],['test']
Testability,remove deprecated macro:; - SOFA_TRANGLEFEM; - SOFA_TRANGLEFEM_MSG. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1233:319,test,test,319,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1233,2,['test'],['test']
Testability,"remove shadow varaible. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5085:563,test,test,563,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5085,2,['test'],['test']
Testability,"remove shadow variable. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2091:563,test,test,563,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2091,2,['test'],['test']
Testability,"rename variable. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1874:556,test,test,556,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1874,4,['test'],['test']
Testability,"replace all beginEdit by WriteOnlyAccessor to avoid updateIfDirty while modifying the data. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2414:631,test,test,631,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2414,2,['test'],['test']
Testability,"resize(Size s, bool) is error-prone because of a similar function in std::vector but with different behavior: resize(size_type count, const value_type& value). See https://en.cppreference.com/w/cpp/container/vector/resize. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3373:762,test,test,762,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3373,2,['test'],['test']
Testability,"responding to the order of insertion. This order must not change along the simulation.; > 2) After the matrix assembly, the global matrix is compressed so that the ordered list of matrix elements can be; > converted into an ordered list of ids corresponding to locations in the values array of the compressed matrix.; > ; > Second time step and after:; > 1) The local matrices assume the order of insertion did not change. Therefore, they rely only on the ordered list of; > ids to know where in the values array to insert the matrix contribution. The row and column ids are useless. An example scene is introduced. . ![peek](https://github.com/sofa-framework/sofa/assets/10572752/a59128d0-b35a-4376-b905-db50ebc8bf83). This scene assembles mapped matrices to show that the method works in those conditions. Here is the assembled matrix represented as a binary image:. ![image](https://github.com/sofa-framework/sofa/assets/10572752/899af554-c239-403c-a785-23767f1d714c). This scene is used for the benchmarks on 1000 time steps. The timer to focus on is `buildStiffness`. But be aware that this timer also includes the computation of the contributions in addition to the assembly itself. 1. The scene without modification, i.e. with `<ConstantSparsityPatternSystem template=""CompressedRowSparseMatrixd"" name=""A"" printLog=""true""/>`. ```; [INFO] [BatchGUI] 1000 iterations done in 12.3859 s ( 80.7368 FPS). LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 7 0.82 1 1.57 8.67 1.81 0.34 1.81 14.74 .......buildStiffness; ```. 2. The scene with a regular matrix assembly, i.e. with `<MatrixLinearSystem template=""CompressedRowSparseMatrixd"" name=""A"" printLog=""true""/>`. ```; [INFO] [BatchGUI] 1000 iterations done in 15.0063 s ( 66.6387 FPS). LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 7 0.69 1 4.69 6.45 4.95 0.18 4.95 33.30 .......buildStiffness; ```. 3. The scene with a regular matrix assembly, i.e. with `<MatrixLinearSystem template=""CompressedRowSparseMatrixMat3x3d"" name=""A"" printLog=""t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4158:1624,benchmark,benchmarks,1624,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4158,1,['benchmark'],['benchmarks']
Testability,"revert PR #1268. And Fix #1277 (👍 @epernod ). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1803:585,test,test,585,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1803,2,['test'],['test']
Testability,"riptive and standardized error message.; * add macros (SP_PYERR_SETSTRING_INVALIDTYPE and SP_PYERR_SETSTRING_OUTOFBOUND) to report consistant message with PyErr_SetString ; * add SP_CLASS_METHOD_DOC() and SP_CLASS_METHOD_KW_DOC() to declare method with their docstring (if you don't know what are docstring read: http://sametmax.com/les-docstrings/); * add new bindings:; * BaseState::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304:2179,test,tests,2179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304,2,['test'],['tests']
Testability,"riv = typename SimType::MatrixDeriv;; using DataVecCoord = typename sofa::Data<VecCoord>;; using DataVecDeriv = typename sofa::Data<VecDeriv>;; using DataMatrixDeriv = typename sofa::Data<MatrixDeriv>;. using Point = Eigen::Vector2d;; };; } // namespace Sim2D. } // namespace VNCS; ```. ```; #include <SofaBaseMechanics/MechanicalObject.h>; #include <SofaBaseMechanics/MechanicalObject.inl>. namespace VNCS; {; namespace Sim2D; {; using MO = sofa::component::container::MechanicalObject<VNCS::Sim2D::Kernel::SimType>;. } // namespace Sim2D; } // namespace VNCS; ```. ```; #include <gtest/gtest.h>; #include <VNCS/2D/MechanicalObject.h>. TEST(MechanicalObject, 2D); {; // Create a Clustering matrix; auto mo = sofa::core::objectmodel::New<VNCS::Sim2D::MO>();; // mo->resize(10);; // auto positions = mo->readPositions();. // EXPECT_EQ(positions.size(), 10);; }; ```; My linking line is the following:. ```; 2/2 0.4/sec] Linking CXX executable bin/tst_mechanicalobject; FAILED: bin/tst_mechanicalobject ; : && /usr/bin/c++ -O3 -DNDEBUG tests/MechanicalObject/CMakeFiles/tst_mechanicalobject.dir/tst_mechanicalobject.cpp.o -o bin/tst_mechanicalobject -Wl,-rpath,/opt/libs/sofa/build/install/lib /opt/libs/sofa/build/install/lib/libSofaBaseTopology.so.20.06.99 /opt/libs/sofa/build/install/lib/libSofaSimulationCommon.so.20.06.99 /opt/libs/sofa/build/install/lib/libSofaSimulationCore.so.20.06.99 /opt/libs/sofa/build/install/lib/libSofaCore.so.20.06.99 /opt/libs/sofa/build/install/lib/libSofaDefaultType.so.20.06.99 /opt/libs/sofa/build/install/lib/libSofaHelper.so.20.06.99 /usr/lib/libGLU.so /usr/lib/libGLX.so /usr/lib/libOpenGL.so /usr/lib/libGLEW.so /usr/lib/libboost_system.so.1.75.0 /usr/lib/libboost_filesystem.so.1.75.0 /usr/lib/libboost_program_options.so.1.75.0 /usr/lib/libboost_thread.so.1.75.0 /opt/libs/sofa/build/install/lib/libgtest.so.2.6.2 /usr/lib/libQt5Core.so.5.15.2 /usr/lib/libgmpxx.so /usr/lib/libmpfr.so /usr/lib/libgmp.so /usr/local/lib/libspdlog.a /opt/libs/sofa/build/instal",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1752:1475,test,tests,1475,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1752,1,['test'],['tests']
Testability,rk/Versions/2.7/lib/python2.7; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-darwin; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/plat-mac/lib-scriptpackages; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-old; /usr/local/Cellar/python@2/2.7.15_1/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-dynload; /usr/local/lib/python2.7/site-packages; ******************; *** PYTHONPATH ***; /usr/local/lib/python2.7/site-packages. ******************; Numpy found: /usr/local/lib/python2.7/site-packages/numpy/__init__.pyc; ```. When I run it with runSofa (and thus SofaPython):; ```; sofamacbuilder:mac_clang-3.5_default_release sofa$ ./build/bin/runSofa -g batch test.py; [INFO] [runSofa] Loading automatically plugin list in /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaSparseSolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/build/lib/libSofaPreconditioner.dylib; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/mac_clang-3.5_default_release/src/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins/sofa-ci-dev/workspace/sofa-framework/master/,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326:2173,test,test,2173,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/531#issuecomment-407807326,1,['test'],['test']
Testability,"rl\site\bin;D:\Strawberry\perl\bin;D:\Qt\5.15.2\msvc2019_64\bin;D:\Qt\5.15.2\msvc2019_64\lib;D:\local\boost_1_79_0\lib64-msvc-14.3;D:\local\boost_1_79_0;D:\Ruby31-x64\bin;D:\Users\Manas\.cargo\bin;C:\Users\Manas\AppData\Local\Microsoft\WindowsApps;D:\Program Files\Intel\WiFi\bin\;D:\Program Files\Common Files\Intel\WirelessCommon\;D:\Users\Manas\AppData\Local\Programs\Microsoft VS Code\bin;D:\Users\Manas\AppData\Local\Programs\espanso;C:\Users\Manas\.dotnet\tools;C:\Users\Manas\AppData\Roaming\npm;D:\MinGW\bin;; --- SOFA_ROOT ---; --- PYTHONPATH ---; --- sys.path ---; ['', 'C:\\Python310\\python310.zip', 'C:\\Python310\\DLLs', 'C:\\Python310\\lib', 'C:\\Python310', 'C:\\Users\\Manas\\AppData\\Roaming\\Python\\Python310\\site-packages', 'C:\\Python310\\lib\\site-packages', 'C:\\Python310\\lib\\site-packages\\win32', 'C:\\Python310\\lib\\site-packages\\win32\\lib', 'C:\\Python310\\lib\\site-packages\\Pythonwin']; #################. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. [WARNING] [SofaEigen2Solver] SofaEigen2Solver is deprecated; Eigen classes are now located in Sofa.LinearAlgebra and SVDLinearSolver in SofaDenseSolver.You can remove SofaEigen2Solver from your scene, and if using SVDLinearSolver, please load SofaDenseSolver instead.; [INFO] [runSofa] PluginRepository paths = D:/github-clones/sofa/build/bin;D:/github-clones/sofa/build/plugins;D:/github-clones/sofa/build/bin/RelWithDebInfo; [INFO] [runSofa] DataRepository paths = D:/github-clones/sofa/src/share;D:/github-clones/sofa/src/examples;D:/github-clones/sofa/build;D:/github-clones/sofa/build; [INFO] [runSofa] GuiDataRepository paths = D:/github-clones/sofa/src/applications/projects/runSofa/resources;D:/github-clones/sofa/src/modules/SofaGuiQt/src/sofa/gui/qt/resources;D:/github-clones/sofa/build; [INFO] [runSofa] Loading automatically plugin list in D:\github-clones\sofa\build\bin\RelWithDebInfo/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: D:/gi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:4411,Log,Logs,4411,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,1,['Log'],['Logs']
Testability,"rnal>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] S",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:3413,test,tests,3413,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"roduces more optimized binaries.; Results are not always good, and really depends on the situation/scene. Few cases where cl is slightly faster than clang-cl; Some bench:; - `caduceus.scn -g batch -n 10000`; - cl: `21.2541 s ( 470.498 FPS)`; - clang-cl: `19.6914 s ( 507.836 FPS)`; - MeshMatrixMass.scn with 4096 steps (from SofaBenchmark); - cl: `25504 ms`; - clang-cl: `18161 ms`; - `examples/Benchmark/Performance/benchmark_cubes.scn -g batch -n 1000`; - cl: `36.7404 s ( 27.218 FPS`; - clang-cl: ` 37.8146 s ( 26.4448 FPS)`; - `examples/Benchmark/Performance/TorusFall.scn -g batch -n 1000`; - cl: `8.63699 s ( 115.781 FPS)`; - clang-cl: ` 7.72771 s ( 129.404 FPS)`; - `applications/plugins/SofaCUDA/examples/beam16x16x76-fem-implicit-CPU.scn -g batch -n 1000`; - cl: ` 113.022 s ( 8.8478 FPS))`; - clang-cl: ` 100.645 s ( 9.93587 FPS)`; - SofaBenchmark, a lot shows only improvement around 10-15% but some are interesting:; - `BM_FixedArray_construct<sofa::type::Vec3f>/8192`; - cl: ` 10.5 us`; - clang-cl: ` 6.42 us`; - `BM_Matrix_typemat3x3f_assign/512` this one is weird (the same bench with eigenmat is much closer); - cl: ` 3.44 us`; - clang-cl: ` 1.18 us`. ## Warning; pybind is not compatible with clang-cl (and I am sure a lot of other libraries), even gtest as it is was not compatible. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2563:2460,test,test,2460,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2563,2,['test'],['test']
Testability,rojectToPointConstraint; - QuadPressureForceField ; - SurfacePressureForceField; - TaitSurfacePressureForceField ; - TrianglePressureForceField; - ParabolicConstraint; - ConstantForceField ; - LinearForceField; - EdgePressureForceField ; - OscillatingTorsionPressureForceField; - HermiteSplineConstraint ; - LinearVelocityConstraint; - [SofaConstraint] ; - DOFBlockerLMConstraint ; - FixedLMConstraint; - UncoupledConstraintCorrection; - [SofaMiscFem] ; - TriangleFEMForceField; - TriangularAnisotropicFENForceField; - TriangularFEMForceField; - [SofaMiscFem]; - FastTetrahedralCorotationalForceField; - StandardTetrahedralFEMForceField; - TetrahedralTensorMassForceField; - TetrahedronHyperelasticityFEMForceField; - [SofaMiscForceField] ; - MeshMatrixMass; - [SofaExporter] ; - WriteTopology; - [SofaMiscTopology] ; - TopologyChangeProcessor; - [SofaGeneralEngine] ; - SmoothMeshEngine; - [SofaDeformable] ; - MeshSpringForceField. Component previously upgraded in #1183 : ; - DiagonalMass; - [SofaGeneralSimpleFEM]; - BeamFEMForceField; - TetrahedralCorotationalFEMForceField; - TriangularFEMForceFieldOptim; - [SofaSimpleFEM]; - HexahedronFEMForceField; - TetrahedronFEMForceField; - TetrahedronDiffusionFEMForceField; - NonUniformHexahedronFEMForceField; - [SofaGeneralDeformable] ; - QuadBendingSpring; - QuadularBendingSprings; - VectorSpringFF; - FastTriangularBendingSpring; - TriangleBendingSpring; - TriangularBendingSpring; - TriangularBiquadraticSpringFF; - TriangularQuadraticSpringFF; - TriangularTensorMassFF; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1199:2151,test,test,2151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1199,2,['test'],['test']
Testability,"rove thread safety of contact creation.; - AnimateBeginEvent and AnimateEndEvent can now receive an optional pointer to a TaskStatus ( in a form of a void pointer ). When using SofaMultithreading, this taksStatus pointer can be used to spawn the AnimateBeginEvent method in a separate thread. It is the reponsibility of the component to decide whether or not its AnimateBeginEvent method is thread safe.; - Change BaseObject argument parsing. When parsing, ensures if src attribute is used with link @ now allow the use of src="""". Topologies container associated to src="""" are supposed to be filled by following topological mapping. Using src=""@"" to avoid link warning drove to an autolink where the loader refers on container itself. Modification of implicated scenes and xml accordingly.; - WorkerThread maintains a list of stealable tasks as well as a list of higher priority thread specific tasks. Remove ThreadSpecificTask (not used and redundant with new thread-specific task queues). Update Task logging.; - Adapted MultiThreading plugin to the new build system.; - SetDirectory no longer changes the system current directory (shared by all threads in the process), but uses a global variable to record the current directory to be used within Sofa. But changing to the current file's directory is needed to load Python scene. For the moment, python loader is not use with multithreading, changing directory in the loader is a temporary solution. The functioning of python scene loader need to be adapted in the futur. ### Cleans; - Streamline calls to createResponse in case no groupManager is used; - Clean warnings in Task and TaskSchedulerBoost for Multithreading plugin. ### Bugfixes; - Fix crash with multithreaded collision detection. Call `TriangleModel::getTriangleFlag` method for all triangles of the topology to force the initialization of adjacency.information in the topology before some actual collision detection code is executed.; - DDGNode should never be copied to ensure thre",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/215:2589,log,logging,2589,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/215,1,['log'],['logging']
Testability,"rror happen:; ```cmake; CMake Error at /Users/jnbrunet/Downloads/SOFA_v22.06.00_MacOS/collections/SofaGui/lib/cmake/SofaGui/SofaGuiTargets.cmake:91 (message):; The imported target ""runSofa"" references the file. ""/Users/jnbrunet/Downloads/SOFA_v22.06.00_MacOS/collections/SofaGui/bin/runSofa-22.06.00"". but this file does not exist. Possible reasons include:. * The file was deleted, renamed, or moved to another location. * An install or uninstall procedure did not complete successfully. * The installation package was faulty and contained. ""/Users/jnbrunet/Downloads/SOFA_v22.06.00_MacOS/collections/SofaGui/lib/cmake/SofaGui/SofaGuiTargets.cmake"". but not all the files it references. Call Stack (most recent call first):; /Users/jnbrunet/Downloads/SOFA_v22.06.00_MacOS/collections/SofaGui/lib/cmake/SofaGui/SofaGuiConfig.cmake:55 (include); /Users/jnbrunet/Downloads/SOFA_v22.06.00_MacOS/plugins/SofaPython3/lib/cmake/SofaPython3/Bindings.SofaGuiConfig.cmake:36 (find_package); /Users/jnbrunet/Downloads/SOFA_v22.06.00_MacOS/plugins/SofaPython3/lib/cmake/SofaPython3/SofaPython3Config.cmake:86 (include); /Users/jnbrunet/Downloads/SOFA_v22.06.00_MacOS/plugins/SofaPython3/lib/cmake/SofaPython3/BindingsConfig.cmake:34 (find_package); /Users/jnbrunet/Downloads/SOFA_v22.06.00_MacOS/plugins/SofaPython3/lib/cmake/SofaPython3/SofaPython3Config.cmake:86 (include); CMakeLists.txt:5 (find_package); ```. **Steps to reproduce**; 1. Unzip the latest SOFA release for MacOS inside `$SOFA_ROOT`; 2. Create an empty c++ project with the following CMakeLists.txt:; ```cmake; cmake_minimum_required(VERSION 3.20); project(test). find_package(SofaFramework); find_package(SofaPython3). ```; 3. Call cmake using `cmake -DCMAKE_PREFIX_PATH=$SOFA_ROOT .`. **Expected behavior**; No cmake error. ---------------------------------------------. ### Environment. **Context**. - System: MacOS; - Version of SOFA: release 22.06.00. [CMakeCache.txt](https://github.com/sofa-framework/sofa/files/10013148/CMakeCache.txt)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3485:1856,test,test,1856,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3485,1,['test'],['test']
Testability,"runSofa is now using a two column view to separate type and name in the graph view. ; by default the size is to short to visualize the types. ; In this PR i increase it. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2416:711,test,test,711,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2416,2,['test'],['test']
Testability,"s (classes derived from `EigenBaseSparseMatrix`) through scipy sparse matrices. The scipy matrix *aliases* the eigen matrix, so that any modification will reflect on both sides provided the sparsity pattern does not change (on either side). A python context manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/411:1068,assert,assert,1068,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411,1,['assert'],['assert']
Testability,s ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tests. #237 should be merged right after this PR. **Reviewers will merge onl,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:2724,test,test,2724,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,2,"['Test', 'test']","['TestMessageHandler', 'test']"
Testability,"s.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. #################; --- sys.version ---; 3.9.18 (main, Sep 11 2023, 13:41:44) ; [GCC 11.2.0]; --- PATH ---; /bd_targaryen/users/kleelakunwet/miniconda3/envs/sofa/bin:/bd_targaryen/users/kleelakunwet/miniconda3/condabin:/usr/lib/oar/oardodo:/usr/lib/oar/oardodo:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/snap/bin; --- SOFA_ROOT ---; /bd_targaryen/users/kleelakunwet/sofa/build/install; --- PYTHONPATH ---; --- sys.path ---; ['', '/bd_targaryen/users/kleelakunwet/miniconda3/envs/sofa/lib/python39.zip', '/bd_targaryen/users/kleelakunwet/miniconda3/envs/sofa/lib/python3.9', '/bd_targaryen/users/kleelakunwet/miniconda3/envs/sofa/lib/python3.9/lib-dynload', '/bd_targaryen/users/kleelakunwet/.local/lib/python3.9/site-packages', '/bd_targaryen/users/kleelakunwet/miniconda3/envs/sofa/lib/python3.9/site-packages']; #################. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt; ...; -- Up-to-date: /bd_targaryen/users/kleelakunwet/sofa/build/install/include/Sofa.Component.LinearSolver.Direct/sofa/component/linearsolver/direct/SparseQRTraits.h; -- Up-to-date: /bd_targaryen/users/kleelakunwet/sofa/build/install/include/Sofa.Component.LinearSolver.Direct/sofa/component/linearsolver/direct/TypedMatrixLinearSystem[BTDMatrix].h; -- Up-to-date: /bd_targaryen/users/kleelakunwet/sofa/build/install/lib/libmetis.so; CMake Error at _deps/metis-build/cmake_install.cmake:93 (file):; file cannot create directory: /cmake/metis. Maybe need administrative; privileges.; Call Stack (most recent call first):; Sofa/Component/LinearSolver/Direct/cmake_install.cmake:246 (include); Sofa/Component/LinearSolver/cmake_install.cmake:127 (include); Sofa/Component/cmake_install.cmake:133 (include); Sofa/cmake_install.cmake:48 (include); cmake_install.cmake:150 (include). gmake: *** [Makefile:120: install] Error 1. ```. **Content of build_dir/CMakeCache.txt**. ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4622:2118,Log,Logs,2118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4622,1,['Log'],['Logs']
Testability,"same here.; When looking at the log, the trace gives:; ```; ObjectFactory::ClassEntry::~ClassEntry(); _M_erase()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604360809:32,log,log,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274#issuecomment-604360809,1,['log'],['log']
Testability,"sceneTransform() in VisualParams has been deleted for v21.12 (and while deprecated was doing nothing anyway). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2539:649,test,test,649,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2539,2,['test'],['test']
Testability,"scovered a memory leak that seems to be connected to the collision detection pipeline / models. The scene contains 2 nodes with `MechanicalObject` and `PointCollisionModel`.; I repeatedly load and unload the scene, first with no collision models, then one collision model, and then two collision models.; -> each graph has 3 segments. ```python; import Sofa; import Sofa.Core; import Sofa.Simulation; from enum import Enum. class TestCase(Enum):; ONE_MODEL = 0; TWO_MODELS = 1; NONE = 2. class SimulationHandler:; def __init__(self):. self.root_node = Sofa.Core.Node(""root""); self.nodes = createScene(self.root_node, TestCase.NONE); Sofa.Simulation.init(self.root_node). def step(self):; Sofa.Simulation.animate(self.root_node, self.root_node.getDt()). def reload(self, case: TestCase = TestCase.NONE):. Sofa.Simulation.unload(self.root_node); self.root_node = Sofa.Core.Node(""root""); self.nodes = createScene(self.root_node, case); Sofa.Simulation.init(self.root_node). def createScene(root, case: TestCase):; plugins = [; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ]; for plugin in plugins:; root.addObject(""RequiredPlugin"", pluginName=plugin, name=plugin). root.addObject(""DefaultAnimationLoop""); root.addObject(""DefaultPipeline""); root.addObject(""BruteForceBroadPhase""); root.addObject(""BVHNarrowPhase""); root.addObject(""DefaultContactManager""); root.addObject(; ""LocalMinDistance"",; alarmDistance=5.0,; contactDistance=0.5,; ). node_1 = root.addChild(""child_1""); node_1.addObject(""MechanicalObject"", position=[0, 0, 0] * 5). node_2 = root.addChild(""child_2""); node_2.addObject(""MechanicalObject"", position=[1, 1, 1] * 5). if case == TestCase.ONE_MODEL:; node_1.addObject(""PointCollisionModel""); elif case == TestCase.TWO_MODELS:; node_1.addObject(""PointCollisionModel""); node_2.addObject(""PointCollisionModel""); elif case == TestCase.NONE:; pass. return node_1, node_2. if __name__ == ""__main__"":; simulation = SimulationHandler(). for i",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318:1021,Test,TestCase,1021,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318,1,['Test'],['TestCase']
Testability,"se tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have a coverage of 100%, which is a target that in my opinion is a waste of energy to aim at, provided you have some functional tests also.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1635,test,tests,1635,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,2,['test'],['tests']
Testability,seems like it introduces two new failed unit test:; - UnitTests.Compliant_test/Batch/Python_scene_test.sofa_python_scene_tests/2; - UnitTests.SofaCarving_test/SofaCarving_test.testdoCarving; ; I suppose investigating the SofaCarving test will fix the Compliant one,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2225#issuecomment-874602567:45,test,test,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2225#issuecomment-874602567,3,['test'],"['test', 'testdoCarving']"
Testability,"sentation in the scene; 3. the extensive use of this representation in the python bindings (especially the linearSpring that has no other purpose that this API). Other than that, it has no real superiority over the proposed parallel representation using a single vector for each spring parameter except for the fact that we don't need to keep coherency over all of the vectors... ; Although the tuple enable more versatile scene description. For example, the input indices can now come from other component while no difficult assembling is needed to build the spring list, we only need to link the data and specify one stiffness that will be generalized to all the springs. . So this is a **_first step_**. It can totally be merged for me. But we still have work to do. It could be done in this PR but I don't know how much time I'll be able to dedicate to it in the near future, and I don't want this work to get lost. Those are the two remaining tasks I've identified :; - [ ] Clean the API by removing one of the two representation. I would prefer to remove the `d_springs` data which would require a refactoring of the CUDA code and of the scenes.; - [ ] Clean classes that originally inherited from the StiffSpringFF (QuadBendingSprings, RegularGridSpringFF & TriangularBendingSprings) because until then, they were only considering a constant value of stiffness and damping for all their springs, turning a blind eye on the d_spring data. Now that we don't have a single attribute for stiffness and damping (as it was the case in the stiffSpringFF) but a vector of them, they should also be cleaned, along with their associated scenes. If those two points have not been addressed in this PR, it is because I think it is better to have the opinion of the @sofa-framework/reviewers on whether we only want to keep one representation and if so which one ?. PS: I've added a scene test for the CUDA spring implementation because it was never tested, I don't know if it was really working until here",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2252777879:4629,test,test,4629,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4649#issuecomment-2252777879,2,['test'],"['test', 'tested']"
Testability,serialisation work on color datatype. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/472:289,test,test,289,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/472,2,['test'],['test']
Testability,"setMechanical() and isMechanical() use the boolean states of forces, masses and constraints.; But the ""meta-alias""(?) `isMechanical` only link forces and masses. So it would make sense to add constraints 🤔. Avoid cases like https://github.com/fredroy/BeamAdapter/commit/58b3db1eb11dab501eec7d6a50b6cce3fcaf9a51. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4360:851,test,test,851,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4360,2,['test'],['test']
Testability,"setParent is called on Datas when parsing BaseObjectDescriptions on BaseObjects.; The default behavior is incompatible with the Data-based API we want to substitute to the current Link system between components. I thus want to be able to override the default setParent() behavior in my ObjectLink POC (see [here](https://github.com/SofaDefrost/ComponentData_POC/pull/1) for draft implementation). Please, don't hesitate to comment on the PR on the POC repository's pull request mentioned above. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1224:746,test,test,746,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1224,2,['test'],['test']
Testability,should we activate the tests on this PR?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1178106822:23,test,tests,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1178106822,1,['test'],['tests']
Testability,"signed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in the code that are significant, which certainly is hard to track by unit tests only, unless you have",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1376,test,tests,1376,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,2,['test'],['tests']
Testability,"simulation::DefaultAnimationLoop::step(sofa::core::ExecParams const*, double)+0x124) [0x7f6588263ed4]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaSimulationCore.so(sofa::simulation::Simulation::animate(sofa::simulation::Node*, double)+0x54) [0x7f65882c9c44]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(sofa::Python_scene_test::run(sofa::Python_test_data const&)+0x2e1) [0x7f658ebb3791]; -> ../builds/pr/all/bin/Compliant_test(sofa::Python_scene_test_sofa_python_scene_tests_Test::TestBody()+0x2e) [0x54f76e]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*)+0x33) [0x7f658ebd7223]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::Test::Run()+0xb7) [0x7f658ebca917]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestInfo::Run()+0x9e) [0x7f658ebca9be]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::TestCase::Run()+0xa5) [0x7f658ebcaac5]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::internal::UnitTestImpl::RunAllTests()+0x248) [0x7f658ebcd198]; -> /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/builds/pr/all/lib/libSofaTest.so(testing::UnitTest::Run()+0x54) [0x7f658ebcd454]; -> ../builds/pr/all/bin/Compliant_test(main+0xd4) [0x4aeb84]; -> /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf5) [0x7f6585034f45]; -> ../builds/pr/all/bin/Compliant_test() [0x4aec6f]; bash: line 1: 11528 Terminated ../builds/pr/all/bin/Compliant_test --gtest_output=xml:../builds/pr/all/tests/Compliant_test/report.xml 2>&1; /home/sofa/jenkins/workspace/ubuntu_gcc-4.8_options/src/scripts/ci/tests.sh: error: Compliant_test ended with code 143; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320:7343,test,testing,7343,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-295657320,8,"['Test', 'test']","['TestCase', 'TestInfo', 'testing', 'tests']"
Testability,"since it is fixed with#2305 , can you point us out the comparison test that was failing @jnbrunet ? thanks 🙏",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-915388831:66,test,test,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-915388831,1,['test'],['test']
Testability,"sity? Its reference is commented in the CMakeLists. I did not touch it. - SofaKernel/modules/SofaCore/src/sofa/core/behavior/InertiaForce.h -> removed because not used and not referenced in CMakeLists. - SofaKernel/modules/SofaCore/src/sofa/core/collision/ParallelPipeline.h and .cpp -> removed because empty class, not used and not referenced in CMakeLists. - DevBaseMonitor: appears to be used but not referenced in CMakeLists -> added. - SofaKernel/modules/SofaHelper/src/sofa/helper/io/MassSpringLoader.h -> removed; - SofaKernel/modules/SofaHelper/src/sofa/helper/io/bvh -> removed. - SofaKernel/modules/SofaHelper/src/sofa/helper/logging/LoggerMessageHandler.h and .cpp -> removed because not used and not referenced in CMakeLists. - SofaKernel/modules/SofaHelper/src/sofa/helper/FnDispatcher.cpp -> removed because empty, and not referenced in CMakeLists. - SofaKernel/modules/SofaSimulationCore/src/sofa/simulation/ChangeListener.h and .cpp -> removed because not used, and not referenced in CMakeLists. - SofaKernel/modules/SofaSimulationCore/src/sofa/simulation/MechanicalMatrixVisitor.h -> removed because empty, and not referenced in CMakeLists. - SofaKernel/modules/Sofa.Type/src/sofa/type/Color.cpp -> removed because not referenced in CMakeLists. The code in this file is not required. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2333:2352,test,test,2352,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2333,2,['test'],['test']
Testability,"size() != indices.size()` in the RestShapeSpringsForceField and tried to improve the overall error management on this component. I ended up doing the following changes:. - Call reinit() in bwdInit; - Using componentState to set the state to invalid when necessary (no stiffness set, out of bounds indices etc & check for component state in addForce / addDForce / addKToMatrix ..); - Improvement of warning messages (IMHO); - refactor code duplication; - remove warnings by changing int -> size_t for BaseMatrix::Index (got carried away here, sorry about that). **### BREAKING because:**. - Change in behavior in specific cases:. 1. empty stiffness vector: **Before:** setting arbitrary stiffness at 100.0 for all indices ; **Now:** msg_error & invalid state. ; 2. stiffness.size() != indices.size(): **Before:** applying stiffness[0] to all indices ; **Now:** ; ```py; if len(stiffness) > len(indices): ; crop(stiffness); else if len(stiffness) == 1:; stiffness.resize(len(indices), stiffness[0]); else if len(stiffness < len(indices):; ```; Generalized to angularStiffness on Rigids. - size_t in methods signature break API compatibility. I wouldn't call this component ""clean"" after those changes though, but it's a start. As stuff still to do to improve, I see:. - Using DataTrackers to call reinit() when necessary; - get rid of bwdInit by using componentState + datatrackers to reinit component; - remove those ugly getContext to retrieve the external mstate used for rest shape, by replacing them with a data or a link. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1103:1904,test,test,1904,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1103,2,['test'],['test']
Testability,"small PR to remove function handleTopologyChange() from BaseMaterial component, where it is implemented but empty.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/817:367,test,test,367,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/817,2,['test'],['test']
Testability,so the CI will not test SPH regression anymore?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1967636838:19,test,test,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4526#issuecomment-1967636838,1,['test'],['test']
Testability,"so they can be used by Tracy profiler as well. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4203:586,test,test,586,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4203,2,['test'],['test']
Testability,"sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta4ExplicitSolverDynamic_test/rungeKutta4ExplicitSolverDynamicTest_medium_dt_0/); [UnitTests.SofaGeneralExplicitOdeSolver_test/RungeKutta4ExplicitSolverDynamic_test.rungeKutta4ExplicitSolverDynamicTest_small_dt/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralExplicitOdeSolver_test_RungeKutta4ExplicitSolverDynamic_test/rungeKutta4ExplicitSolverDynamicTest_small_dt_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_small_dt_without_damping_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_medium_dt_with_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolverDynamic_test/variationalSymplecticExplicitSolverDynamicTest_medium_dt_with_damping_0/); [UnitTests.SofaGeneralImplicitOdeSolver_test/VariationalSymplecticExplicitSolverDynamic_test.variationalSymplecticExplicitSolverDynamicTest_high_dt_with_damping/0](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-2652/CI_CONFIG=windows_vs2017,CI_PLUGINS=options,CI_TYPE=release/3/testReport/junit/UnitTests/SofaGeneralImplicitOdeSolver_test_VariationalSymplecticExplicitSolve",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769:1615,test,testReport,1615,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028969769,1,['test'],['testReport']
Testability,"sofa::core can be confused with sofa::simulation::core, so I added sofa:: in front of core namespace. This confusion arose when compiling using a jumbo build. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1959:698,test,test,698,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1959,2,['test'],['test']
Testability,"sofa::helper::afficheResult definition no longer exists, resulting in unresolved external link error with msvc during debug compilation. I stumbled upon an unresolved external which apparently was introduced by a42dcec ; I guess the initial intent was to replace this method by a new method called `resultToString`, but its declaration did not make it through the header file. I suspect the unresolved external should have been caught by other compilers, but am I the only one; to compile in debug mode sometimes ?; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/473:767,test,test,767,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/473,2,['test'],['test']
Testability,sofa\applications\plugins\SofaHAPI\CMakeList.txt; Line 81: endif(); Error: ; endif An ENDIF command was found outside of a proper IF ENDIF structure.; Or its arguments did not match the opening IF command. I believe we should remore this line. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1074:495,test,test,495,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1074,2,['test'],['test']
Testability,"sofa_add_plugin required the ""name"" argument to be the same as the target; We can now handle non-target names, aliases and custom OUTPUT_NAME. Related to this forum topic: https://www.sofa-framework.org/community/forum/topic/problem-compiling-sofa-with-python3-2/. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1584:804,test,test,804,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1584,2,['test'],['test']
Testability,"some day a warning-free SOFA!. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3227:570,test,test,570,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3227,2,['test'],['test']
Testability,some new scenes introduced in PR #2161 are crashing during mesh removal. ; This reveals some components created with a copy past of the TopologyHandler but not really handling topological changes. . SceneTests.examples/Benchmark/TopologicalChanges.ProjectToPlaneConstraint_RemovingMeshTest.scn; SceneTests.examples/Benchmark/TopologicalChanges.FixedPlaneConstraint_RemovingMeshTest.scn. Scenes ignored for the moment until components behavior is fixed.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2189:219,Benchmark,Benchmark,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2189,2,['Benchmark'],['Benchmark']
Testability,"sout/serr (and sendl) were wrappers for std::cout & std::cerr to get access to the streams for the GUIs initially. After the introduction of the Messaging system, it was deemed deprecated (there is even a compat layer, redirecting sout/serr to msg_info(), msg_warning(), etc), but never enforced and never publicized actually. This PR officially deprecates it by still being able to use it but will warn at compilation time if anybody uses the stream operators with serr/sendl. (you can see that on the CI log for the soon-to-be-dropped plugin like Flexible or Compliant). This PR also (should) remove all those serr/sout/sendl in SOFA itself and the supported plugins. EDIT: Adding ""breaking"" label because serr was throwing ""WARNING"" before (yeah makes sense), so it cannot be replaced 1-on-1 with msg_error( could be msg_warning as well). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2292:506,log,log,506,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2292,3,"['log', 'test']","['log', 'test']"
Testability,speaks for itself. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1511:270,test,test,270,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1511,2,['test'],['test']
Testability,"ssible to enable it with the latest(?) cmake-gui but possible to generate a solution with the commandline version: `cmake -G""Visual Studio 2019"" -T ClangCL ..`; ## This PR; - add necessary cmake config to allow compilation (and avoid 1e999 warnings); - fix few problems detected with clang (rightly so); - change the FixParticlePerformerFactory shenanigan to be cleaner. ## Results; It appears that clang is somewhat more clever than cl.exe and seems to produces more optimized binaries.; Results are not always good, and really depends on the situation/scene. Few cases where cl is slightly faster than clang-cl; Some bench:; - `caduceus.scn -g batch -n 10000`; - cl: `21.2541 s ( 470.498 FPS)`; - clang-cl: `19.6914 s ( 507.836 FPS)`; - MeshMatrixMass.scn with 4096 steps (from SofaBenchmark); - cl: `25504 ms`; - clang-cl: `18161 ms`; - `examples/Benchmark/Performance/benchmark_cubes.scn -g batch -n 1000`; - cl: `36.7404 s ( 27.218 FPS`; - clang-cl: ` 37.8146 s ( 26.4448 FPS)`; - `examples/Benchmark/Performance/TorusFall.scn -g batch -n 1000`; - cl: `8.63699 s ( 115.781 FPS)`; - clang-cl: ` 7.72771 s ( 129.404 FPS)`; - `applications/plugins/SofaCUDA/examples/beam16x16x76-fem-implicit-CPU.scn -g batch -n 1000`; - cl: ` 113.022 s ( 8.8478 FPS))`; - clang-cl: ` 100.645 s ( 9.93587 FPS)`; - SofaBenchmark, a lot shows only improvement around 10-15% but some are interesting:; - `BM_FixedArray_construct<sofa::type::Vec3f>/8192`; - cl: ` 10.5 us`; - clang-cl: ` 6.42 us`; - `BM_Matrix_typemat3x3f_assign/512` this one is weird (the same bench with eigenmat is much closer); - cl: ` 3.44 us`; - clang-cl: ` 1.18 us`. ## Warning; pybind is not compatible with clang-cl (and I am sure a lot of other libraries), even gtest as it is was not compatible. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/C",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2563:1161,Benchmark,Benchmark,1161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2563,1,['Benchmark'],['Benchmark']
Testability,"start runSofa (the caduceus scene); double click on the ""Snake"" Node in the scene graph to open its window properties.; go to the layer named ""Link"",; press ""Ok"".; It crash. This have been tested on two different linux from fresh checkout. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/375:189,test,tested,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/375,1,['test'],['tested']
Testability,"steps, which makes the code more consistent. Note also the introduction of `ComputeIsolatedForceVisitor` (see the comments in the code to understand its purpose). # Multithreading. Since `AnimateVisitor` is no longer used, `SolveVisitor` is used instead, providing optional multithreading, i.e. solving each ODE in parallel. Similar to what was done in the `FreeMotionAnimationLoop`. ## Benchmark. Measured on `examples/Component/SolidMechanics/FEM/TetrahedronFEMForceField.scn`. Without parallelism; ```; [INFO] [BatchGUI] 1000 iterations done in 14.7031 s ( 68.0128 FPS).; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 2 0.03 1 10.57 27.32 11.94 2.11 11.94 82.14 ..solve; ```. With parallelism; ```; [INFO] [BatchGUI] 1000 iterations done in 7.13825 s ( 140.09 FPS).; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 2 0.03 1 3.53 6.85 4.45 0.81 4.45 63.60 ..solve; ```. The simulation is 2x faster. But there are 4 different objects, so we expected a speed-up of 4x. However, the speed-up is only about the `solve` function. Another time consuming function is the `end event` when computing the von Misses stresses. Still, the solve function only shows a speedup of 2.68x, instead of 4x. I cannot explain it for now... [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/362]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3959:3510,test,test,3510,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3959,2,['test'],['test']
Testability,"still a test failing : [UnitTests.Sofa/LoggingTest.checkBaseObjectMsgAPI](https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-3299/CI_CONFIG=fedora_clang,CI_PLUGINS=options,CI_TYPE=release/14/testReport/UnitTests/Sofa_LoggingTest/checkBaseObjectMsgAPI/)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3299#issuecomment-1282863772:8,test,test,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3299#issuecomment-1282863772,3,"['Log', 'test']","['LoggingTest', 'test', 'testReport']"
Testability,"struction of triplets, needed to construct an Eigen matrix, is avoided using a custom proxy on the `CompressedRowSparseMatrix` uncompressed data. Here are the new timings (to compare to #2362):. ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 63 99.14 66.64 2.64 66643 100 TOTAL; ...; 4 0.87 1 27.68 58.27 30.91 2.28 30.91 46.38 ....MBKBuild; 5 1.08 1 26.76 57.31 29.90 2.23 29.90 44.86 .....MMM-addKToMatrix; 6 1.08 1 1.73 2.94 1.98 0.18 1.98 2.98 ......jacobian; 6 3.07 1 6.94 35.47 8.01 1.25 8.01 12.02 ......stiffness; 6 11.08 1 2.68 17.13 3.43 0.81 3.43 5.15 ......copyKToEigen; 7 11.08 1 2.67 17.12 3.42 0.81 3.42 5.14 .......KfromTriplets; 6 14.51 1 0.25 0.92 0.30 0.06 0.30 0.45 ......copyJ1J2ToEigen; 7 14.74 1 0.06 0.29 0.07 0.02 0.07 0.10 .......copyJ2ToEigen; 6 14.81 1 9.50 25.79 11.23 1.54 11.23 16.85 ......Multiplication; 7 14.81 1 4.88 18.44 5.80 0.96 5.80 8.71 .......J1tKJ1; 7 20.62 1 0.76 4.52 0.99 0.23 0.99 1.49 .......J2tKJ2; 7 21.62 1 2.71 16.34 3.46 0.92 3.46 5.19 .......J1tKJ2; 7 25.07 1 0.77 12.89 0.97 0.41 0.97 1.46 .......J2tKJ1; 6 26.05 1 2.71 7.73 3.04 0.24 3.04 4.56 ......J1tKJ1-copy; 6 29.09 1 0 0.02 0 0 0 0 ......J2tKJ2-copy; 6 29.09 1 0.01 0.06 0.02 0 0.02 0.02 ......J1tKJ2-copy; 6 29.11 1 0.01 0.08 0.03 0.01 0.03 0.04 ......J2tKJ1-copy. ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2367:2026,test,test,2026,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2367,2,['test'],['test']
Testability,"t otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiable directly in python. The constructor requires a `Node` as first parameter.; - `onLoaded` and `createGraph` entry points are no longer called when classes are instantiated directly from python. Corresponding code belongs to the derived class constructor.; - creating instances ""the old way"" through `node.createGraph` has unchanged behavior; - the workaround module `SofaPython.script` now features a deprecation message, together with a derived class easing transition (calls `createGraph` on construction, warns if `onLoaded` is defined); - updated `ControllerVariable.py` example ; - some minor cleanups; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283:3644,test,test,3644,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283,2,['test'],['test']
Testability,"tView, in applications/sofa/gui/qt. The current implementation stores a pointer to every registered listeners in every node in the scene graph. Instead, the implementation proposed in this PR registers the listeners in the root node and child nodes forward the notifications to it. Also, the overloads are currently relying on the call super (the child class reimplements the method, then calls its base class implementation) This approach is [known to be error prone](https://en.wikipedia.org/wiki/Call_super) and can be reimplemented using delegates instead. Finally, this PR also adds extra delegates in the Nodes listeners notifications system and in the MutationListener, called *AFTER* the graph's edition. those are used in SofaQtQuick to be notified that the graph has indeed been updated. . Here are 2 quick UML diagrams showing the 2 architecture's differences. This one is the current implementation in sofa:; ![code_smell](https://user-images.githubusercontent.com/13734391/52288894-5245f000-296d-11e9-83b6-12f6ce1385f9.png). And this one is what this PR does:; ![code_clean](https://user-images.githubusercontent.com/13734391/52288978-730e4580-296d-11e9-9057-451922e971c8.png). Also, if someone could tell me what the master / slave relationship between BaseObjects are, I'd be curious to know if it is still in use in SOFA. It doesn't seem to be used in Listeners.. maybe added for Compliant / Flexible?. __This PR could potentially be breaking for plugins & projects implementing their own MutationListeners__. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/917:2122,test,test,2122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917,2,['test'],['test']
Testability,"te::getSize ; * BaseMapping::applyJT; * BaseMapping::applyDJT; * Data::getCounter ; * Data::isDirty; * Node::getMass; * Node::getForceField; * STLExporter; * Sofa.unload; * Sofa.path; * Sofa.getAvailableComponents; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the messag",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304:2586,test,tests,2586,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304,2,['test'],['tests']
Testability,"ted with each of the mapping parent dofs. - ContactMappers : It is (very) questionable to let contact mappers propagate the unconstrained dynamics solution vector towards contact dofs by calling `updateXfree()` since it will induce inconsistencies in mapping linearisation if the contact mappers are non linear, since contact mappings will therefore be linearised around the free motion configuration, and the rest being linearised around the configuration at the beginning of the time step. This PR does not address this problem which is left for future work. It arises only with non linear contact mappers (like the `RigidContactMapper` for instance), but this should be kept in mind. - LinearSolver API : As a general note, I believe the LinearSolver API is a bloated with virtual methods which are difficult to understand since they are not directly related to the computation / factorisation of a positive definite matrix, and are mostly optional especially for non assembled solver like CG. Most of the methods should reside in the ConstraintCorrection API, and concrete instance of ConstraintCorrection should be templated on the type of LinearSolver in my opinion, since it is the only objects that actually make use of these methods, and really what you want is to have access to the concrete type of Matrix and Vector used by the solver. Also from my understanding only `LinearSolver` instances that derive from `MatrixLinearSolver` implement these kind of methods, so maybe a first step would be to move them here. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459:8809,test,test,8809,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459,2,['test'],['test']
Testability,test BilateralInteractionConstraint_test failing due to the constraint which is not exactly met,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-387682199:0,test,test,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-387682199,1,['test'],['test']
Testability,"test concurrent access to LCPForceFeedback computeforce from another thread. This PR depends on #1576 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1581:0,test,test,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1581,3,['test'],['test']
Testability,test the component that will do the tests. Could be possible I think,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743749466:0,test,test,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1594#issuecomment-743749466,2,['test'],"['test', 'tests']"
Testability,tested & validated,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/68:0,test,tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/68,1,['test'],['tested']
Testability,tested and approved on XUbuntu!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3031#issuecomment-1153699184:0,test,tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3031#issuecomment-1153699184,1,['test'],['tested']
Testability,tested it works !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3229#issuecomment-1219659843:0,test,tested,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3229#issuecomment-1219659843,1,['test'],['tested']
Testability,"thanks @alxbilger since it's a part of the code I am not familiar with, could you share some context with us?; anyway the change looks logical",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4063#issuecomment-1645576537:135,log,logical,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4063#issuecomment-1645576537,1,['log'],['logical']
Testability,thanks @epernod for the fix :+1: ; @monkeygame do not hesitate to [contribute a test](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/) corresponding to the failing case you had. Thanks for rising the issue :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3216#issuecomment-1217713653:80,test,test,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3216#issuecomment-1217713653,2,['test'],"['test', 'tests']"
Testability,"thanks @gaurab4163 for the change. Could you just check the reviews, there is 2 files to remove: a .log and .view; Then it is ok to go I think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-388058388:100,log,log,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-388058388,1,['log'],['log']
Testability,thanks for reporting it @EtienneMenager I will test it locally with my old Mac! (I need tp find and recharge it 😄 ),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3089#issuecomment-1171590630:47,test,test,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3089#issuecomment-1171590630,1,['test'],['test']
Testability,"thanks for the quick reply @hugtalbot , I'll open a PR and add some regress tests as well.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1276#issuecomment-601107401:76,test,tests,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1276#issuecomment-601107401,1,['test'],['tests']
Testability,"thanks to #2989 and debug mode, a bug could be detected when the topology handler registers data for quad.; (I suppose this should fix data updates when a quad container has topological changes). Based on : ; - #2989 (to fix compilation). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2990:778,test,test,778,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2990,2,['test'],['test']
Testability,"the POINTREMOVED event to all topologyHandler registered. Including the deleted one from the mouse attached constraint. The pointer to the topologyHandler is not null but pointed to a deleted object. ### PR changes description; This PR and the PR #3271 (included in this on) are introducing a mechanism to better register and unregister a TopologyHandler from the TopologyContainer.; 1. register is done at creation of the TopologyHandler; 2. If TopologyHandler has well been added to the list manged by the Container, a internal bool m_isRegisterd is set to true.; 3. When the TopologyHandler is deleted (meaning its component owner is deleted). If m_isRegisterd == true, the TopologyHandler will unregister itself.; 4. When the TopologyContainer is deleted, it will go through each TopologyHandler it is managing and turn m_isRegisted to false. And then clear the list without deleting the Handler. The bool m_isRegisterd is used because to unregister itself, the handler need to access the topologyContainer which could have already been destroyed (depending on the graph order). But the TopologyHandler doesn't now the container is null. That's why if the TopologyContainer is deleted first it sets all its topologyHander as unregistered. ### Linked issues; Based on PR #3271 ; Fixes #3370 #3202. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3369:3062,test,test,3062,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3369,2,['test'],['test']
Testability,"the cmake process with a already populated CMakeCache). - CPack analysis at the end; - All modules does a awful lot of find_package() even if it is packages already found before; - (On windows only?) the sofa_install_lib at the beginning. # (Proposal of) Solution. Not an expert of CMake at all but this PR:; - Set an option if you really want to use CPack (this is only used when packing) -> **harmless**; - Modify sofa_find_package to test if the desired packages/target is already imported/loaded , use it everywhere -> **I may have missed something here**; - remove the recursiveness in sofa_install_package -> **seems OK on Windows but I suspect it was made for Linux actually**. Here is the trace after applying the modifications:; ![cmake1](https://user-images.githubusercontent.com/11028016/108480054-c292e600-7296-11eb-913c-7f3ad5a85adf.PNG). It takes only around 8sec instead of around 38 sec initially, on Windows (without counting generating apparently); In my Ubuntu VM, it takes around 2 sec for the whole process ! (configure + generating); But I have no doubt I may have introduce bugs etc. 🤨 so feel free to react. Unfortunately, I dont know for now how to reduce the generating step time 😥. # Nota Bene; For those interested on how to trace/profile the cmake processing time: #1838. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1837:2172,test,test,2172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1837,2,['test'],['test']
Testability,"the image distance filter test is un-related, so let's pass it to ready right @fredroy",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3393#issuecomment-1295131084:26,test,test,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3393#issuecomment-1295131084,1,['test'],['test']
Testability,the new factors/parameters were set arbitrary using qualitative tests as we still don't have automatic test on this plugin.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1435#issuecomment-672826026:64,test,tests,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1435#issuecomment-672826026,2,['test'],"['test', 'tests']"
Testability,"the one installed by aptitude. Any hint / solution is welcome. ``; $ cmake ..; ``; -- The C compiler identification is GNU 9.3.0; -- The CXX compiler identification is GNU 9.3.0; -- Check for working C compiler: /usr/bin/cc; -- Check for working C compiler: /usr/bin/cc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Install prefix: /home/thebigone/projects/sofa/build/install; -- Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.2"") ; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Check if compiler accepts -pthread; -- Check if compiler accepts -pthread - yes; -- Found Threads: TRUE ; CMake Deprecation Warning at CMakeLists.txt:225 (message):; Deprecated components are activated (SOFA_WITH_DEPRECATED_COMPONENTS; variable is ON). -- Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; **CMake Error at /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:146 (message):; Could NOT find Boost (missing: system filesystem program_options) (found; version ""1.71.0"")**; Call Stack (most recent call first):; /usr/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:393 (_FPHSA_FAILURE_MESSAGE); /usr/share/cmake-3.16/Modules/FindBoost.cmake:2179 (find_package_handle_standard_args); SofaKernel/SofaFramework/SofaMacros.cmake:526 (find_package); SofaKernel/modules/SofaHelper/CMakeLists.txt:6 (sofa_find_package). -- Configuring incomplete, errors occurred!; See also ""/home/thebigone/projects/sofa/build/CMakeFiles/CMakeOutput.log"".; See also ""/home/the",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1462:1157,Test,Test,1157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1462,2,['Test'],['Test']
Testability,the rebase did not suffice @epernod ; we let it to review but a unit test is still failing,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1875002964:69,test,test,69,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4194#issuecomment-1875002964,1,['test'],['test']
Testability,"the unwanted behavior is describe in the commit of @damienmarchal : ; ""; [SofaKernel] FIX Bug in BoxROI that is not properly initialized. The code is automatically adding an alignedbox if nothing is provided in; the constructor. This kind of test make no sense in the constructor as; the ""isSet"" is sure to be set to false. The test should go in init or reinit. This commit fix that.; """,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/627#issuecomment-380386385:242,test,test,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/627#issuecomment-380386385,2,['test'],['test']
Testability,"there are 2 more unit tests failing on windows only, could you check if relevant to this PR or not. thx",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1151#issuecomment-533996059:22,test,tests,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1151#issuecomment-533996059,1,['test'],['tests']
Testability,"there are new tests failure:; ```. FastTriangularBendingSprings.scn:0, Dynamic Parser, Priority: Normal; --; [EdgeSetGeometryAlgorithms(edgeSetGeometryAlgorithms1)] Unable to get a valid topology from the context. ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/973#issuecomment-480168725:14,test,tests,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/973#issuecomment-480168725,1,['test'],['tests']
Testability,this PR depends on #1351 where Data d_checkTopology has been introduced. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1353:324,test,test,324,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1353,2,['test'],['test']
Testability,"this PR is based on #2869 . Sevral fixes in `TopologyData `/ `TopologySubsetData `/ `TopologySubsetIndices`. - Fix: `TopologyData::m_lastElementIndex` was set to invalid when passing empty buffer size. keep value to 0 in this case.; - Rename: `TopologySubSetData `option **isConcerned** by **addNewelements**. This method is used to allow TopologySubsetData to growth following topological changes; - Fix: TopologySubSetData **add** methods. Value where not really set but using default constructor instead of value in callback.; - Clean: TopologySubSetData **remove** method from unecessary checks/loop. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2870:1144,test,test,1144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2870,2,['test'],['test']
Testability,this has been solved.; [ci-build][with-scene-tests],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/731#issuecomment-409131896:45,test,tests,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/731#issuecomment-409131896,1,['test'],['tests']
Testability,"this will be very useful ... So, this PR would be perfect with some unitary tests",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-701293179:76,test,tests,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-701293179,1,['test'],['tests']
Testability,"thub.com/sofa-framework/sofa/pull/2394):. ```; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 48.83 558.52 52.87 16.28 52873.1 100 TOTAL; ...; 4 0.97 1 16.13 510.42 18.89 15.73 18.89 35.72 ....MBKBuild; 5 1.16 1 15.20 501.11 17.93 15.46 17.93 33.91 .....MMM-addKToMatrix; 6 1.18 1 5.92 26.88 7.26 1.67 7.26 13.74 ......stiffness; 6 8.44 1 2.84 7.27 3.59 0.62 3.59 6.78 ......copyKToEigen; 6 12.03 1 0 0 0 0 0 0 ......waitJacobian; 6 12.03 1 3.07 487.77 3.76 15.32 3.76 7.11 ......Multiplication; 7 12.03 1 2.62 479.92 3.28 15.08 3.28 6.21 .......J1tKJ1; 7 15.32 1 0.34 4.83 0.36 0.15 0.36 0.68 .......J2tKJ2; 7 15.68 1 0.09 2.57 0.09 0.08 0.09 0.18 .......J1tKJ2; 7 15.77 1 0.01 0.43 0.02 0.01 0.02 0.03 .......J2tKJ1; 6 15.79 1 2.54 5.45 2.72 0.18 2.72 5.15 ......copy; 7 15.79 1 2.50 5.38 2.68 0.18 2.68 5.07 .......J1tKJ1-copy; 7 18.47 1 0 0.01 0 0 0 0 .......J2tKJ2-copy; 7 18.48 1 0.01 0.04 0.01 0 0.01 0.03 .......J1tKJ2-copy; 7 18.49 1 0.01 0.06 0.02 0 0.02 0.04 .......J2tKJ1-copy. ```. It is still possible to go further with parallel tasks between the multiplications and the copies, but:; 1) A clean implementation would require a local thread pool (and the current implementation of thread pools does not allow that); 2) The speed up in the example scene would be negligible. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2411:2277,test,test,2277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2411,2,['test'],['test']
Testability,thx @jnbrunet for your answer.; Indeed there is a missmatch with the Tetra2TriangleTopologicalMapping but I removed that in another PR. In fact the mapping was inverting the triangles because their orientation in the tetra-container was not logical to have a well oriented surface. . Let see if it breaks something. At least people know on whom to shoot.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/878#issuecomment-455501878:241,log,logical,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/878#issuecomment-455501878,1,['log'],['logical']
Testability,"tial guess was writing a 0.0 outside bounds (but I dont know why this line was here). :warning: WARNING :warning:; one needs to set the responseParams to mu=0.0 also. This is really confusing and would need to refactor somewhere.; If the LCP defines mu to 0.0 but not responseParams, funny things happen (one component expects 1contact = 1 constraint and the other 1contact = 3 constraints). Moreover:; - remove (deprecate) usage of the member `_mu` which was confusing with the data `mu`; - adds two scenes to demonstrate with and without friction, and their regression tests. [ci-depends-on https://github.com/sofa-framework/Regression/pull/47]. ![lcp_friction](https://github.com/sofa-framework/sofa/assets/11028016/eba86b90-3cfc-40f6-850f-6aba720d291d); ![lcp_nofriction](https://github.com/sofa-framework/sofa/assets/11028016/fb015cd7-54c6-4347-a07e-e5c960dc609c). Benchmarks:; As friction adds two additional constraints in the matrix, then frictionless scenes are faster:; ```; caduceus:; w/: 5000 iterations done in 52.071 s ( 96.0227 FPS); w/o: 5000 iterations done in 44.6895 s ( 111.883 FPS); ```; ```; 3instruments_collis:; w: 5000 iterations done in 69.8352 s ( 71.5971 FPS); w/o: 5000 iterations done in 43.0997 s ( 116.01 FPS); ```; Obviously, this change the behavior of the scene...; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3905:1941,test,test,1941,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3905,2,['test'],['test']
Testability,"ties.; I just updated a scene that you can use to test the new components. The scene called ""TetrahedralCorotationalFEMForceField"" has two nodes. The first one uses ; the components ""VolumeTopologyContainer"" and ""CMTetrahedralCorotationalFEMForceField"" that are completely written using cgogn and ""MapTetrahedronSetTopologyContainer"" a compatibility wrapper that allows to use ""classical"" sofa components with cgogn. @damienmarchal concerning your questions:. - what the PR does precisely ?; - This PR adds a new data structure for handling meshes. This data structure is designed to handle dynamic (with topological changes) meshes.; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ?; - I think there is a pipeline for topological changes in Sofa. I do not know much about the efficiency of this pipeline. What I can say (I should provide figures) is that this data structure is as effective as the sofa ones in ""static"" scenarios and more effective and reliable in ""dynamic"" scenarios.; - how this PR handle the problem,; - by changing to a more appropriate data structure; - use CGOGN library... what is this CGOGN library ?; - a topological modeling kernel (see https://cgogn.github.io). I am not sure you need more information about it.; - argument on why the PR is it useful/mandatory/improvement, trying to convince people why they should spend time testing it,; - this work has been in progress since 3 years now. His interest has already been debated. I do not want to debate an infinite time on it. If someone is interested in topological changes, it should save him time.; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes); - depends on the meaning of beaking. It does not change the sofa API for topology classes but it adds a hierarchy of classes in the core with a new API and a compatibility layer with the old one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583:1568,test,testing,1568,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402690583,1,['test'],['testing']
Testability,"ting from `BruteForceBroadPhase` instead of `BroadPhaseDetection`. This is what I did in `RayTraceDetection`. Doing that, I could remove all the broad phase code from `RayTraceDetection`. # What comes next. It is also my intention to inherit from `BruteForceBroadPhase` in `BruteForceDetection`, and remove all the broad phase code from `BruteForceDetection`. The broad phase code from `BruteForceDetection` and `RayTraceDetection` would be shared from `BruteForceBroadPhase`. However, I expect complex conflicts because of #1999. I'll do that if #1999 is accepted and merged. It is also my intention to extract the narrow phase from `BruteForceDetection` and put it in another component which would inherit from `NarrowPhaseDetection`. The narrow phase in `BruteForceDetection` is not brute force, and should be named with a clearer and more meaningful name. It will be the case with the new component. I also believe SAP can be implemented as a broad phase only component. We would have the choice between `BruteForceBroadPhase` and `SAPBroadPhase`. Any narrow phase would work with both broad phases (`BruteForceBroadPhase` and `SAPBroadPhase`). Finally, with all those changes, we can consider more modularity on the collision detection and choose any combination of broad phase and narrow phase. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2010:2708,test,test,2708,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2010,2,['test'],['test']
Testability,"tion format is used in a lot of other software (GUIs, scene processing tools written in python, perl and C++). If you change the behavior of the default serialization mechanism all of them will stop working and required to be updated. This is a very, very, very nasty thing to impose to other users of Sofa. A PR doing has no changes to be accepted. . Actually tests is part of our guard line because they validates the API compatibility and allow us to detect changes that breaks it. The existing tests should be considered as validating the ""the existing"" sofa API. It was normal to have them to fail on your PR because it shows that the PR was breaking the compatibility. . I really like the idea of keeping the old serialization behavior as it is and add the other deserialization as an extra feature. This will make the whole PR transparent for users that don't want to update their code base. It thus it can be merged very quickly. . About the test: ; You are right that it would be better if we had test specific tests to validate the serialization alone.; I personally would like to have tests to validate that getValueString() return ""1 2 3"" and that getValueAsPythonString() return ""[1 2 3]"" . And also as you said having tests to validate against the real values instead of their serialization would be nice. . . About the branches:; The rule is to never work directly on the sofa-framework repository. There is no reason to do so (if you really want to make two PR one in anatoscope and one in sofa ... you need to to that from two branches located in the anatoscope repo). Otherwise this consume a lot of disk space on the CI servers that we have to fix manually. Now fundamentally from my experience in playing with PR and branches I think that making two PR will be very complex for you to handle. Because the PR you issued to anatoscope and the one you issued to sofa-framework may diverge ... so it will cost you to switch from one to the other and handle the changes. . PS: I'm not v",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626:1278,test,test,1278,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/330#issuecomment-315028626,3,['test'],"['test', 'tests']"
Testability,"title says all. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2443:555,test,test,555,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2443,2,['test'],['test']
Testability,"tly with python3 interpreter, `<sofa-path>/bin/qt.conf` is not found because Qt looks next to the executable (python3).; With this new qt.conf.h and its function sofa::gui::qt::loadQtConfWithCustomPrefix(), it is possible to force Qt to load the qt.conf we want. qt.conf.h is based on the output of `<qt-path>/bin/rcc qt.conf.qrc -o qt.conf.h` with; - `<qt-path>/bin/rcc`: Qt RCC executable; - `qt.conf.qrc`: file to create next to `<sofa-path>/bin/qt.conf` to overload Qt default search path "":/qt/etc/qt.conf"" ; ```xml; <!DOCTYPE RCC><RCC version=""1.0"">; <qresource prefix=""/qt/etc/"">; <file>qt.conf</file>; </qresource>; </RCC>; ```; - `<sofa-path>/bin/qt.conf`: this file is not in the command but is needed because referenced by qt.conf.qrc. Usage example:; ```cpp; #include <sofa/gui/qt/qt.conf.h>. std::string sofaPrefixAbsolute = sofa::helper::Utils::getSofaPathPrefix();; std::string inputFilepath = FileSystem::cleanPath(sofaPrefixAbsolute + ""/bin/qt.conf"");; bool success = loadQtConfWithCustomPrefix(inputFilepath, sofaPrefixAbsolute);; if(success); {; msg_info(""Sofa.Gui"") << ""Loaded qt.conf from "" << inputFilepath << "" customized with Prefix = "" << sofaPrefixAbsolute;; }; else; {; msg_warning(""Sofa.Gui"") << ""Failed loading and/or customizing qt.conf from "" << inputFilepath;; }; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1820:1918,test,test,1918,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1820,2,['test'],['test']
Testability,"to access the data without abstraction cost, ie. accessing the object with its true type (eg: Data<T>) instead of its parent type (BaseData) and at the same time having an abstraction to manipulate BaseData. . Duplicating the same obect/point is in general a code smell indicating that something is wrong in the implementation. In general duplication complexify the implementation and error prone (because you have to garantee that the different copies are kept synchronized and interact together in a seamlessness way. . So, in this PR I addresse this duplication problem by removing the lowest type and relying on a dynamic_cast when it is needed. There is an abstraction cost...but it is on a on a very rarerly used method (actually only used for fast copy of data field...and in that context...the cost of the dynamic cast against one of copying millions of Dofs is totally neglectible). . A different pattern was initially used with a child-delegation to expose the abstraction to its parent but it appears it would have made the PR breaking. The difference is that the selected pattern allows one data to be parented to a data of different type while the pattern with child-delegation restrict the parenting to be of exactly the same time. . I personally prefer to have parent only on same type (so that data conversion must be added manually and becomes explicit) but this was not done previously in Sofa and thus breaks some scenes (somes of them are actually really funny....and probably work only by side effect). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1490:2028,test,test,2028,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1490,2,['test'],['test']
Testability,to avoid breaking external plugins. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/870:287,test,test,287,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/870,2,['test'],['test']
Testability,"to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/image/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/Registration/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/RigidScale/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaPython/python' to sys.path; [INFO] [SofaPython] Added '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/python' to sys.path; [INFO] [PluginManager] Loaded plugin: /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/build/lib/libSofaPython.dylib; [INFO] [Python_scene_test] running /Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py; ERROR: wrong number of arguments; [ERROR] [PythonScript] IndexError: list index out of range; File ""/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py"", line 15, in <module>; DAMPING_COEF = float( sys.argv[1] ). [ERROR] [SofaPython] Script (file:damping) import error; [ERROR] [PythonScriptController(PythonScriptController)] load error (file '/Users/sofa/jenkins_2/workspace/mac_clang-3.4_options_pr2/pr/all/applications/plugins/SofaTest/SofaTest_test/scenes/damping.py' not parsable); ../applications/plugins/SofaTest/Python_test.cpp:263: Failure; Failed; python error; [ FAILED ] Batch/Python_scene_test.sofa_python_scene_tests/0, where GetParam() = 48-byte object <81-00 00-00 00-00 00-00 7E-00 00-00 00-00 00-00 00-4D 60-FA C4-7F 00-00 80-4D 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00 10-4E 60-FA C4-7F 00-00> (1051 ms); [----------] 1 test from Batch/Python_scene_test (1051 ms total); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176:2372,test,test,2372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-391264176,1,['test'],['test']
Testability,"tory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmax_box=""5.0"" ` ; `/>`. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/354:2283,test,test,2283,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354,2,['test'],['test']
Testability,"transpose method was missing for matrix3 on device.; Not sure it is the best implementation but it does the job. Will fix PR #2585 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2675:672,test,test,672,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2675,2,['test'],['test']
Testability,"tring filename) (at Assets/SofaUnity/Plugins/SofaUnityAPI/SofaContextAPI.cs:189); SofaUnity.SofaContext.ReconnectSofaScene () (at Assets/SofaUnity/Scripts/SofaContext.cs:486); SofaUnity.SofaContext.Init () (at Assets/SofaUnity/Scripts/SofaContext.cs:378); SofaUnity.SofaContext.StartSofa () (at Assets/SofaUnity/Scripts/SofaContext.cs:280); SofaUnity.SofaContext.Awake () (at Assets/SofaUnity/Scripts/SofaContext.cs:243); UnityEngine.GUIUtility:ProcessEvent(Int32, IntPtr, Boolean&). Start: 'VisualEye'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). Start: 'VisualCornea'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). Start: 'VisualBody'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVisualModel.UpdateMesh () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:129); SofaVisualModel.Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:99). Start: 'OglModel'; UnityEngine.Debug:Log (object); SofaVisualModel:Start () (at Assets/SofaUnity/Scripts/SOFAUnity-Renderer/SofaVisualModel.cs:65). NullReferenceException: Object reference not set to an instance of an object; SofaVi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4156:2302,Log,Log,2302,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4156,2,['Log'],['Log']
Testability,"typo, copy-paste is bad m'kay?. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2530:571,test,test,571,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2530,2,['test'],['test']
Testability,ubuntu_gcc_options seems to have a one additional scene-tests error but I can find out which one.; Else I think it's ready right @alxbilger ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4430#issuecomment-1903614639:56,test,tests,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4430#issuecomment-1903614639,1,['test'],['tests']
Testability,ude <sofa/component/collision/detection/algorithm/BruteForceBroadPhase.h>; #include <sofa/component/collision/detection/algorithm/BVHNarrowPhase.h>; #include <sofa/component/collision/detection/algorithm/DefaultPipeline.h>. #include <sofa/component/collision/detection/intersection/NewProximityIntersection.h>. #include <sofa/component/collision/response/contact/DefaultContactManager.h>. #include <sofa/component/collision/geometry/PointModel.h>. #include <sofa/simulation/graph/DAGNode.h>; #include <sofa/simulation/graph/DAGSimulation.h>; #include <sofa/simulation/graph/init.h>. #include <sofa/simulation/DefaultAnimationLoop.h>. #include <sofa/component/statecontainer/MechanicalObject.h>. #include <sofa/core/objectmodel/Context.h>; #include <sofa/simulation/Node.h>; #include <sofa/simulation/Simulation.h>; #include <SofaComponentAll/initSofaComponentAll.h>. #include <sofa/helper/system/FileRepository.h>; #include <sofa/helper/logging/LoggingMessageHandler.h>; #include <sofa/core/logging/PerComponentLoggingMessageHandler.h>; #include <sofa/helper/BackTrace.h>. using namespace sofa::defaulttype;. using sofa::simulation::Node;; using sofa::simulation::graph::DAGNode;; using sofa::helper::system::DataRepository;. // collision pipeline; using sofa::component::collision::detection::algorithm::DefaultPipeline;; using sofa::component::collision::detection::algorithm::BruteForceBroadPhase;; using sofa::component::collision::detection::algorithm::BVHNarrowPhase;; using sofa::component::collision::detection::intersection::NewProximityIntersection;; using sofa::component::collision::response::contact::DefaultContactManager;; using sofa::component::collision::geometry::PointCollisionModel;. // mechanical object; using sofa::component::statecontainer::MechanicalObject;; using sofa::defaulttype::StdVectorTypes;; using sofa::type::Vec;. using sofa::core::behavior::MechanicalState;; using sofa::core::State;; using sofa::core::objectmodel::New;; using sofa::core::objectmodel::Data;. usi,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147:1575,log,logging,1575,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1254291147,1,['log'],['logging']
Testability,"ues/104. We have a component that opens a `ReadAccessor<Data<VecCoord>>` on a Mechanical Object position vector during the **init** stage of the scene. In the same callstack, the component will open another `ReadAccessor<Data<VecCoord>>` on the same MO position vector. The following small object can be taken as an example:. _Edit: I found out that the recursive ReadAccessor isn't even needed to reproduce the issue, simply having a component opening during init a read accessor on its own data, which parent is the MO vector, is enough._. ```c++; class TestComponent : public BaseObject {; public:; SOFA_CLASS(TestComponent, BaseObject);; using DataTypes = sofa::defaulttype::Vec3Types;; using VecCoord = DataTypes::VecCoord;; TestComponent() : d_position(initData(&d_position, ""position"", ""Position vector"")){}. void init() override {; Inherit1::init();; auto positions = ReadAccessor<Data<VecCoord>>(d_position);; test(positions.size());; }; void test(const sofa::Size & nb_of_nodes) {; auto positions = ReadAccessor<Data<VecCoord>>(d_position);; if (positions.size() != nb_of_nodes) {; std::cout << ""Just something to make sure the compiler compile this"" << std::endl;; }; }; private:; Data<VecCoord> d_position;; };; ```. The consequence will be that the MO object position vector won't be updated later on during time steps. However, if the same scene is run with a GUI, the problem disappears. The following scene can be taken as an example where a random displacement is imposed on a node before the time step, and the node position is printed afterwards. ```python; class Controller(Sofa.Core.Controller):; def __init__(self, MO):; super().__init__(); self.MO = MO. def onAnimateBeginEvent(self, _):; print(""\n\nonAnimateBeginEvent""); random_disp = np.random.normal(0, 1e-2, self.MO.position.value.shape); self.MO.position.value = self.MO.rest_position.value + random_disp; print(f""{random_disp[0]=}""); print(f""{self.MO.position.value[0]=}""). def onAnimateEndEvent(self, _):; print(""onAnim",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2761:1066,test,test,1066,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761,1,['test'],['test']
Testability,"uginManager from the GUI:; ```; [INFO] [PluginManager] Plugin not found in loaded plugins: ..../bin/RelWithDebInfo/SofaNonUniformFem.dll; [ERROR] [SofaPluginManager] plugin should be loaded: ..../bin/RelWithDebInfo/SofaNonUniformFem.dll; ```. Now, if you try to load twice the plugins (from differents paths then), it will print:; (one dll is in `build/bin/Release/` and the other one directly in `build/`; ```; [WARNING] [PluginManager] This plugin SofaNonUniformFem has been loaded from a different path, it will certainly lead to bugs or crashes...; You tried to load: ....build/bin/Release/SofaNonUniformFem.dll; Already loaded: ....\build\SofaNonUniformFem.dll; [WARNING] [PluginManager] Plugin SofaNonUniformFem is already loaded from a different path, check you configuration.; ```; The ""double information"" comes from the fact that in the end we consider the plugin as loaded ; the code afterwards will try to load the plugin nevertheless (hence having to detect twice the duplication); In the GUI code for example: https://github.com/sofa-framework/sofa/blob/71691309251177322967f53bc7a024e89c19bcbc/modules/SofaGuiQt/src/sofa/gui/qt/SofaPluginManager.cpp#L120. Obviously it is really not advised to continue to use Sofa if this case occurs but at least the user will know what is going on.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2352:2451,test,test,2451,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2352,2,['test'],['test']
Testability,"ulation scale. For example, setting an absolute displacement norm of 1e-5 might seem enough for a liver mesh set in millimetres, but is definitely not adequate for the same liver using this time a mesh scaled in metres. This is a source of user error, and is probably why many FEM software will use relative convergence criteria. The two additional criteria are:. 1. The relative residual norm |R|/|R0| where |R| is the norm of the force vector after the last Newton iteration, and |R0| is the norm of the force vector after the first Newton iteration.; 2. The relative displacement norm |dx|/|U| where |dx| is the norm of the latest solution vector, and |U| is the norm of the sum over all previous solution vectors of the current time step. To remove any confusion between absolute and relative criteria, the convergence data field ""correction_tolerance_threshold"" and ""residual_tolerance_threshold"" were renamed for ""absolute_correction_tolerance_threshold"" and ""absolute_residual_tolerance_threshold"", respectively. Note that to keep a compatibility layer with older scene files, these old data field names are still available, but a deprecated warning is shown to the user, inviting him to update its scene. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/147]. EDIT: Fix #224. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2050:2356,test,test,2356,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050,2,['test'],['test']
Testability,"uldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271:1884,test,test,1884,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271,1,['test'],['test']
Testability,"unit Test for FixConstraint class to test topologicalChanges. Fix #1589. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2136:5,Test,Test,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2136,4,"['Test', 'test']","['Test', 'test']"
Testability,"unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'RGBAColor.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Vec3.py' loaded with 4 unit tests.; [INFO] [PythonTestExtractor] File 'BoundingBox.py' loaded with 5 unit tests.; [==========] Running 120 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 120 tests from SofaPython3/Sofa; [INFO] [SofaPython3] Initializing with python version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ RUN ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData; ----------------------------------------------------------------------; Ran 1 test in 0.000s. OK; [ OK ] SofaPython3/Sofa.all_tests/0_Sofa_Core_Base_test_addExistingDataAsParentOfNewData (2 ms); [ RUN ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected; ----------------------------------------------------------------------; Ran 1 test in 0.001s. OK; [ OK ] SofaPython3/Sofa.all_tests/1_Sofa_Core_Base_test_addKeywordProtected (1 ms); [ RUN ] SofaPython",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:4018,test,tests,4018,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['test'],['tests']
Testability,"unload() function of PluginManager was just removing the entry of the plugin in its map, but this one was effectively still loaded in the process memory. (on Windows, you could still see it using ProcessExplorer) ; This PR fixes it (i.e really unloads from memory). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1274:517,test,test,517,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1274,2,['test'],['test']
Testability,update Regression_test repository sha and add 2 more scenes to test collisionGroup. - [References] Update references of collisionMultiple scene due to fix modification in sofa master inside collisionGroup.; - [References] Add more scene references to check collision with and without collisionGroup. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1102:63,test,test,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1102,3,['test'],['test']
Testability,"updating my branch with most recent sofa branch. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1877:588,test,test,588,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1877,2,['test'],['test']
Testability,"ve shown an error message stating, ""Null distance between contact detected"". ---------------------------------------------. ### Environment. **Context**. - System: Windows 10; - Version of SOFA: Version 21.12 binary; - State: Install directory: User home directory. **Command called**. ```txt. runSofa <filename>. ```. **Env vars**; --Unchanged--; ```bash; python -c ""exec( \""import os, sys\nprint('#################')\nprint('--- sys.version ---')\nprint(sys.version)\nprint('--- PATH ---')\ntry:\n print(os.environ['PATH'])\nexcept Exception:\n pass\nprint('--- SOFA_ROOT ---')\ntry:\n print(os.environ['SOFA_ROOT'])\nexcept Exception:\n pass\nprint('--- PYTHONPATH ---')\ntry:\n print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. Result of the command above is unapplicable, since it is a Windows system. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. [INFO] [PluginManager] Loaded plugin: C:/Users/timsre/SOFA/v21.12.00/bin/SofaNonUniformFem.dll; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, SceneCheckMissingRequiredPlugin, SceneCheckUsingAlias, SceneCheckDeprecatedComponents, SceneCheckCollisionResponse]; [INFO] [SceneCheckerVisitor] Finished validating node ""root"".; [WARNING] [Simulation] Default Visual Manager Loop will be used. Add DefaultVisualManagerLoop to the root node of scene file to remove this warning; [INFO] [PluginManager] Loaded plugin: C:/Users/timsre/SOFA/v21.12.00/bin/SofaMiscForceField.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/timsre/SOFA/v21.12.00/bin/STLIB.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/timsre/SOFA/v21.12.00/bin/SoftRobots.dll; [WARNING] [UniformMass(uniformMass1)] Unused Attribute: ""massDensity"" with value: ""0.1""; [INFO] [SceneCheckerVisitor] Validating node ""root"" with checks: [SceneCheckDuplicatedName, S",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2651:1408,Log,Logs,1408,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2651,1,['Log'],['Logs']
Testability,ver\NewmarkImplicitSolver.scn. [INFO] [PluginFinder] Found 9 files with deprecated:; examples\Components\interactionforcefield\BoxStiffSpringForceField.scn; examples\Components\linearsolver\FEMBAR_AsyncSparseLDLSolver.scn; examples\Components\misc\sleep\test_sleep.scn; examples\Components\misc\sleep\test_sleep2.scn; examples\Components\misc\sleep\test_sleep3.scn; examples\Components\visualmodel\OglLabel.scn; examples\Tutorials\Mappings\TutorialMappingOctopusArticulated.scn; examples\Tutorials\StepByStep\Visual\5_Visual.scn; examples\Tutorials\StepByStep\Visual\6_Visual.scn. [INFO] [PluginFinder] Found 132 files with warning:; examples\Benchmark\Analysis\constantMomentum.scn; examples\Benchmark\Performance\benchmark_cubes.scn; examples\Benchmark\Performance\BuildLCP\BuiltConstraintCorrection.scn; examples\Benchmark\Performance\BuildLCP\NonBuiltConstraintCorrection.scn; examples\Benchmark\TopologicalChanges\AffineMovementConstraint__RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\FixedPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\LinearMovementConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectDirectionConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToLineConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPlaneConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\ProjectToPointConstraint_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularBendingSprings_RemovingMeshTest.scn; examples\Benchmark\TopologicalChanges\TriangularFEMForceField_RemovingMeshTest.scn; examples\Components\constraint\AffineMovementConstraint.scn; examples\Components\constraint\AffineMovementConstraint3D.scn; examples\Components\constraint\AttachConstraintMatrix.scn; examples\Components\constraint\BilateralInteractionConstraint_PGS.scn; examples\Components\constra,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3352:1485,Benchmark,Benchmark,1485,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3352,1,['Benchmark'],['Benchmark']
Testability,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735:2712,test,test,2712,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735,2,['test'],['test']
Testability,"waiting to compile/test, to be sure 👮‍♂️",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1781#issuecomment-773620434:19,test,test,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1781#issuecomment-773620434,1,['test'],['test']
Testability,ways better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old.; - [ ] #237 should fix most of the newly failing tes,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:2668,test,test,2668,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['test'],['test']
Testability,"what I wanted from the start, which was lettingLMDNewProximityIntersection managing the filters, and not the CollisionModel themselves. ; Bonus point, it checks if there is a filter for each collision model and is set to Invalid if not (should not crash then)~~. ~~I really wondered whether or not simply deleting this Intersection (and the associated LMDFilter) as the latest meaningful commits were clearly stating it was a work in progress. But it seems to work so thats why I kept it (and by pity as well).~~. ~~@ChristianDuriez whats your opinion on this component ?~~. EDIT: After a meeting with other sofa-dev guys, it has been decided to totally remove this component from the code base, as there was no example, no test and it was even not working before this PR.; As such, I removed:; - LMDNewProximityIntersection ; - Point/Line/TriangleLocalMinDistanceFilter; - and the newly created example.; I let the headers to inform the eventual unfortunate user that these headers must not been used anymore, and update the ComponentChange list. I have squashed the first commit, so IF ONE DAY, people wants to resurrect this code (which was working in the end), one can just come back to the commit https://github.com/sofa-framework/sofa/pull/2272/commits/0d9a1af8d14b1fa508400b05b83588a9d704e34c. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2272:2546,test,test,2546,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2272,2,['test'],['test']
Testability,what test should be performed to check the performance impact @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2285#issuecomment-892534841:5,test,test,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2285#issuecomment-892534841,1,['test'],['test']
Testability,"what was going wrong with this test, I can see only message refactoring in the diff.; No info in the PR description.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235:31,test,test,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1097#issuecomment-509993235,1,['test'],['test']
Testability,"when passing ""this"" as argument, forcing object copy to avoid unexpected results; Fixes #280 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/317:346,test,test,346,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317,2,['test'],['test']
Testability,whispered to me by @fredroy :+1: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1042:286,test,test,286,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1042,2,['test'],['test']
Testability,"wing image (using node stress data):; ![VisualStress04](https://user-images.githubusercontent.com/56633656/234069253-030154aa-f3c1-4bff-9d92-eccffd3dbc45.png); Compared to the visualization with ""_showVonMisesStressPerElement_"", this color map accords more with my intuition of the stress forces (while the feet are pressed).; Therefore, I would like to add a new option ""_showVonMisesStressPerNodeColorMap_"" to show this color map. 2) I would like to add an option ""_showGapBetweenElements_"" to activate/deactivate drawing the gap between the elements, in order to show a smooth color map:; ![VisualStress07](https://user-images.githubusercontent.com/56633656/234069288-96543e38-47f5-44c7-8c3d-f813fe7557cd.png). 3) I would like to add an option ""_showForceField_"" to decide if we draw the forcefield of the current object or not. This will be useful when we have several soft tissues and we want to focus on one of the objects:; ![VisualStress08](https://user-images.githubusercontent.com/56633656/234069316-194be9c0-1abb-4380-a7e0-cad443d74206.png); ![VisualStress09](https://user-images.githubusercontent.com/56633656/234069330-5e07339a-de8b-4ee0-ae73-df787b64ccbc.png). Finally I would like to note that the addition of the new functions does not change the visualization with previous settings. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3821:2441,test,test,2441,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3821,2,['test'],['test']
Testability,"with compatibility layer, s'il vous plait!. Fix #3378. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3891:594,test,test,594,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3891,2,['test'],['test']
Testability,"wo types in sofa: only header files that are not (yet) used by other components. ; The DataCallback allows to call a specific function after any modification of a data. in the declaration of the class ; ```; Data<double> d_data; DataCallback c_data; // I usually prefix with c_; ```. At the initialization of the constructor:; ```; : d_diff(initData(&d_diff, ""name"", ""desc"")); , c_diff(d_diff) // listen to d_diff data. The constructor of the DataCallback takes a data as reference; ```. Then anywhere (usually in the constructor body); ```; c_diff.addCallback(this,&MyComponent::myfunction1); ; c_diff.addCallback(this,&MyComponent::myfunction2); ; ```. The main difference with an existing type in sofa if the possibility to attach several functions and more importantly to specify the component on which the callback will be called. This allows to define callbacks as member functions of the component, which simplify access to parameters. Additional test are added allowing to modify the data while the callback is called (in order to avoid cyclic calls). This is usefull for linked data i.e. The callback receives a modification from the parent, the callback is then called and it is allowed to modify the data in the callback which will automatically call update of childs of the data. . The second type introduced in this PR is a wrapper allowing to easily associate a widget with a specific types of data. It can be used as follows: . in a cpp file; `sofa::helper::Creator<sofa::gui::qt::DataWidgetFactory, GenericDataWidget< Data<bool>, QtDataBoxEdit > >	DWClass_bool(""bool"",true);`. QtDataBoxEdit is a Qwidget class defined by the user that needs to define usual functions needed in sofa widgets : ; ```; void readFromData(const Data<bool>& data);; void writeToData(Data<bool>& data);; ```. And constructor must take as parameter the parent and the data as follows :; `QtDataBoxEdit(sofa::gui::qt::DataWidget* parent,const sofa::core::objectmodel::Data<bool> & data) : QCheckBox(parent);`. _",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911:959,test,test,959,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911,1,['test'],['test']
Testability,work/Versions/A/CoreEmoji; 0x7fff29c04000 - 0x7fff29c0efff com.apple.IOMobileFramebuffer (343.0.0 - 343.0.0) <B15E9DA1-1C81-3ECF-94C7-FD137AD6C5E2> /System/Library/PrivateFrameworks/IOMobileFramebuffer.framework/Versions/A/IOMobileFramebuffer; 0x7fff29c0f000 - 0x7fff29ce1fff com.apple.framework.CoreWLAN (16.0 - 1657) <35927D28-3324-3CAB-9255-276A7022EADC> /System/Library/Frameworks/CoreWLAN.framework/Versions/A/CoreWLAN; 0x7fff29ce2000 - 0x7fff29ee1fff com.apple.CoreUtils (6.5 - 650.6) <184C48A4-7F66-395B-81DB-DAA1641383CF> /System/Library/PrivateFrameworks/CoreUtils.framework/Versions/A/CoreUtils; 0x7fff29ee2000 - 0x7fff29f04fff com.apple.MobileKeyBag (2.0 - 1.0) <0F83FED4-709A-37A0-9E04-EFFD71CB1272> /System/Library/PrivateFrameworks/MobileKeyBag.framework/Versions/A/MobileKeyBag; 0x7fff29f05000 - 0x7fff29f15fff com.apple.AssertionServices (1.0 - 505.80.1) <A00B802D-7BB8-3F6B-A79D-E9697F7D0ABB> /System/Library/PrivateFrameworks/AssertionServices.framework/Versions/A/AssertionServices; 0x7fff29f16000 - 0x7fff29fa2fff com.apple.securityfoundation (6.0 - 55240.40.4) <72AC63B1-0B72-394F-97E8-BA9B114DD0A9> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation; 0x7fff29fa3000 - 0x7fff29facfff com.apple.coreservices.BackgroundTaskManagement (1.0 - 104) <EC15118E-62BD-3C24-A880-3B9B74318B0B> /System/Library/PrivateFrameworks/BackgroundTaskManagement.framework/Versions/A/BackgroundTaskManagement; 0x7fff29fad000 - 0x7fff29fb1fff com.apple.xpc.ServiceManagement (1.0 - 1) <FD031028-B702-3909-B2AF-3916404DD4A8> /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement; 0x7fff29fb2000 - 0x7fff29fb4fff libquarantine.dylib (119.40.2) <40D35D75-524B-3DA6-8159-E7E0FA66F5BC> /usr/lib/system/libquarantine.dylib; 0x7fff29fb5000 - 0x7fff29fc0fff libCheckFix.dylib (31) <74E17BB2-1A3C-3574-92DD-63ABE39E3FF9> /usr/lib/libCheckFix.dylib; 0x7fff29fc1000 - 0x7fff29fd8fff libcoretls.dylib (169) <B33BEF87-3275-356D-9815-D0E94122D2EB> /u,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1916:37316,Assert,AssertionServices,37316,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1916,1,['Assert'],['AssertionServices']
Testability,"working fine on my side, @hugtalbot could you test it on linux?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2096#issuecomment-1562539913:46,test,test,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2096#issuecomment-1562539913,1,['test'],['test']
Testability,"xml header, solver iterations, etc... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/310:289,test,test,289,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/310,2,['test'],['test']
Testability,"xml2/tree/master, under Z-lib license) which looks to be its successor and best candidate, as it is maintened, well packaged with cmake and available on conda-forge. ; Also, it is compatible for a future ""find package or fetch content"" mechanism in cmake. I don't know if we want to split the implementation of this additional feature for this package in another PR because if we do so, current code would need an additional required dependency to tinyxml2. ; The ""find or fetch"" cmake mechanism for this package, avoiding the requirement for this dependency to be installed, can be implemented as it:. ```; # find or fetch TinyXML2; include(FetchContent); FetchContent_Declare(; tinyxml2; URL https://github.com/leethomason/tinyxml2/archive/refs/tags/9.0.0.tar.gz; FIND_PACKAGE_ARGS NAMES TinyXML2; ); FetchContent_GetProperties(tinyxml2); if(NOT tinyxml2_POPULATED); FetchContent_Populate(tinyxml2). set(tinyxml2_SHARED_LIBS ON CACHE INTERNAL """"). add_subdirectory(${tinyxml2_SOURCE_DIR} ${tinyxml2_BINARY_DIR}); endif(); ```; However, this would required cmake >=3.24 and this call to be at a toplevel cmake (duplicating this code to replace all current calls to `find_package(TinyXML2)` does not seem desirable neither, so we might think also about how we can implement that in the cmake chain).; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4240:2123,test,test,2123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4240,2,['test'],['test']
Testability,"y exposure of data; ```python; c = object1.addObject(""MechanicalObject"", position=[0,0,0]*1000). ## Read access (copy-less) using toarray(); p = c.position.toarray(); o = numpy.ones((len(c.position), 3))) ; j = p + o. ## Write access (copy-less), the data counter is updated after the 'with' block; with c.position.writeable() as w:; o = numpy.ones((len(c.position), 3))) ; w += o ; w *= 2.0; ```. Wrap around types (copy-less) to typify the data fields on demand; ```python; # syntax 1; c = o.showColor.as(RGBAColor); # syntax 2; c = RGBAColor(o.showColor); c.setFromHSC(1,2,3); c.setFromHSV(1,2,3); ```. Implement your own ForceField in python:; ```python; class MyForceField(Sofa.Core.BaseForceField):; def __init__(self, *args, **kwargs):; Sofa.Core.BaseForceField.__init__(self, *args, **kwargs); ; def init(self):; self.refx = self.position.toarray().copy(). def addForce(self, m, f, x, v):; n = numpy.ones((len(self.position),1)); f = (self.refx-x) * 2 + n; ```; ; To test the binding you need to de-activate SofaPython and activate SofaPython3. ; Then; - runSimu.py to launch a sofa simulation from the command line eg: ; python3 runSimu.py mySimulation.py; - or runSofa. . General guidelines:; - Fix existing API consistency issues; - Improve the performance of the binding by supporting supporting the different python protocols (sequence, buffer+memoryview, copy-less mechanism).; - unified data access and API.; - implementation is currently done with pybind11 and cython.; - modular design. About the tools we use: ; - pybind because it is very consistent with our code base ; - cython becaues it is much more powerful and general and so we can accelerate python code by un-warping the warped object in other part of the code base. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit te",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/771:1477,test,test,1477,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771,1,['test'],['test']
Testability,"y msg_warn() ""does not support partial_solve"" only at run-time, which means there is no way to know at compile-time that a linear solver does not support partial solving. So I set the partial solving API in an interface (crudely called PartialLinearSolver, name can be gladly changed), and is implemented only by BTDLinearSolver.; As for LinearSolverConstraintCorrection, it will check at construction if the given linearsolver is able to handle partialsolving (by dynamic_cast sadly) and if not, can warn the user that the linear solver is not usable and will be in ""incorrect"" state afterwards, instead of printing ""partial_solve not implemented"" while simulating.... A nice side-effect is that linear solvers libs will be slightly smaller, as all instanciations of all linear solvers (except btd then) do not contain init_partial_solve() and partial_solve() functions anymore. EDIT: it is even worse, linear solvers not implementing partial_solve does a ""msg_info()"" so w/o printLog off, users wont even know why the ConstraintSolver/ConstraintCorrections is not doing its job....; See unit tests on LCPForceFieldback, it is using SparseLDLSolver (not implementing partial_solve) and the tests do not throw any warning, even if it is using LCPConstraintSolver and LinearSolverConstraintCorrection. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241:1556,test,tests,1556,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241,4,['test'],"['test', 'tests']"
Testability,yes because the QWT option is never tested I guess (but SofaGuiQt is),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1132#issuecomment-526574191:36,test,tested,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1132#issuecomment-526574191,1,['test'],['tested']
Testability,yes but not the tests or I'm missing something?; And @hugtalbot changed 2 scenes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/648#issuecomment-408846977:16,test,tests,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/648#issuecomment-408846977,1,['test'],['tests']
Testability,yes the change of trianglesInTetrahedron need to be propagated in the tests. I will check that.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/985#issuecomment-481152688:70,test,tests,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/985#issuecomment-481152688,1,['test'],['tests']
Testability,"yes we can change the test to remove` badDim` as now the dim is not computed at the same time. No, `_n[i] = 1` works. `n = [1; 5; 5]` give a plan grid of 25 cells. -> Dim = 2",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305446954:22,test,test,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305446954,1,['test'],['test']
Testability,"yes, that was what I mean by moving the test in the FEM.; No problem to have regularGrid in 1D, but this won't be possible for sphere and cylindricalGrid",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/163#issuecomment-293814344:40,test,test,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/163#issuecomment-293814344,1,['test'],['test']
Testability,"you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these functional tests, but there should be enough so that it is representative of the overall kind of simulations you want to support. ; But anyway it is still nice to have a record of the regressions that occur during the overall development, because you can then document better when you actually introduced changes in t",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:1274,test,tests,1274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,4,['test'],"['tested', 'tests']"
Testability,"ype::StdVectorTypes<sofa::defaulttype::Vec<3ul, double>, sofa::d... (sofa/SofaKernel/modules/SofaEngine/BoxROI.cpp); 1082 ms: sofa::component::topology::TriangleSetGeometryAlgorithms<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<2ul,... (sofa/SofaKernel/modules/SofaBaseTopology/TriangleSetGeometryAlgorithms.cpp); 1079 ms: sofa::component::engine::SubsetTopology<sofa::defaulttype::StdRigidTypes<3ul, double> >::SubsetTopology() (sofa/modules/SofaGeneralEngine/SubsetTopology.cpp); 1048 ms: sofa::Mapping_test<sofa::component::mapping::RigidRigidMapping<sofa::defaulttype::StdRigidTypes<3ul, double>, sofa::de... (sofa/SofaKernel/modules/SofaRigid/SofaRigid_test/RigidRigidMapping_test.cpp); 1035 ms: sofa::component::topology::TetrahedronSetGeometryAlgorithms<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<2... (sofa/SofaKernel/modules/SofaBaseTopology/TetrahedronSetGeometryAlgorithms.cpp); 1035 ms: sofa::VisualModelImpl_test_checkThatMembersAreCorrectlyConstructed_Test::TestBody() (sofa/SofaKernel/modules/SofaBaseVisual/SofaBaseVisual_test/VisualModelImpl_test.cpp); 1031 ms: sofa::component::loader::LegacyVTKReader::readFile(char const*) (sofa/SofaKernel/modules/SofaLoader/MeshVTKLoader.cpp); 1029 ms: sofa::component::odesolver::RungeKutta4Solver::solve(sofa::core::ExecParams const*, double, sofa::core::TMultiVecId<(s... (sofa/modules/SofaGeneralExplicitOdeSolver/RungeKutta4Solver.cpp); 1022 ms: sofa::component::container::MechanicalObject<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<2ul, double>, so... (sofa/SofaKernel/modules/SofaBaseMechanics/MechanicalObject.cpp); 1022 ms: sofa::component::engine::MeshROI<sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<6ul, double>, sofa::defaultt... (sofa/modules/SofaGeneralEngine/MeshROI.cpp); 1004 ms: sofa::component::engine::boxroi::BoxROI<sofa::defaulttype::StdRigidTypes<3ul, double> >::draw(sofa::core::visual::Visu... (sofa/SofaKernel/modules/SofaEngine/BoxROI.cpp); 992 ms: sofa::component",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:19525,Test,TestBody,19525,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['Test'],['TestBody']
Testability,"ython version 3.8.6 (default, Oct 27 2020, 09:13:12) ; [GCC 9.3.1 20200408 (Red Hat 9.3.1-2)]; [INFO] [SofaPython3] Shared library name is 'libpython3.8m.so'; [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Components/Components.py ; ModuleNotFoundError: No module named 'Sofa.Components'. At:; Components.py(4): <module>; <frozen importlib._bootstrap>(219): _call_with_frames_removed; <frozen importlib._bootstrap_external>(783): exec_module; <frozen importlib._bootstrap>(686): _load_unlocked; <frozen importlib._bootstrap>(702): _load; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(171): load_source; /opt/rh/rh-python38/root/usr/lib64/python3.8/imp.py(234): load_module; <string>(3): <module>. [ERROR] [PythonTestExtractor] File skipped: /builds/workspace/sofa-framework/PR-2041/centos_clang-5_options_release/build/bin/Core/MyRestShapeForceField.py ; No test suite found. Make sure there is at least one class in the script that inherits from TestCase.; [INFO] [PythonTestExtractor] File 'Base.py' loaded with 10 unit tests.; [INFO] [PythonTestExtractor] File 'PythonRestShapeForceField.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] File 'BaseData.py' loaded with 29 unit tests.; [INFO] [PythonTestExtractor] File 'DataEngine.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'BaseLink.py' loaded with 11 unit tests.; [INFO] [PythonTestExtractor] File 'BaseObject.py' loaded with 12 unit tests.; [INFO] [PythonTestExtractor] File 'Controller.py' loaded with 7 unit tests.; [INFO] [PythonTestExtractor] File 'ForceField.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'FileRepository.py' loaded with 3 unit tests.; [INFO] [PythonTestExtractor] File 'Message.py' loaded with 2 unit tests.; [INFO] [PythonTestExtractor] File 'Node.py' loaded with 26 unit tests.; [INFO] [PythonTestExtractor] File 'Simulation.py' loaded with 1 unit tests.; [INFO] [PythonTestExtractor] ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796:2939,Test,TestCase,2939,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2041#issuecomment-831157796,1,['Test'],['TestCase']
Testability,"zeToModel flag in SubsetMapping to enable resizing of the destination MechanicalState to the size of indices; - BaseContext : add new method getActiveMeshTopology to get relevant topology, taking `BaseMaping::sameTopology()` into account; - PointSetTopology : add some unit tests. ### Improvements; - each time a topological change sequence is detected in BarycentricMapperTriangleSetTopology the mapping is initialized; - PointSetTopologyContainer maintains a list of point indices, accessible through the data points; - Topology : Factorize the last method specific to each topological elements in data containers. ### Cleans; - MechanicalObject size and link to topology is now exposed as Data and Link, using the new getActiveMeshTopology() method. Set the link manually and/or set useTopology=""false"" to override. ### Bugfixes; - apply data container updates before mapping updates; - use existing parameter handleTopologyChange in SubsetMapping; - slightly cleanup topology change handling method for triangle mappers; - check of upper topology based on the emptiness of the upper container; - crash in `MeshTopology::init()` for non manifold meshes; - re-enable Propagate of topological changes inbetween triangle creation and removal in `TriangleSetTopologyModifier::addRemoveTriangles(),` as it is required in cases involving chains of topology mapping and topology data containers depending on each other . This is the re-opening of [previous issofa_topology pull-request](https://github.com/sofa-framework/sofa/pull/217). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243:1962,test,test,1962,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243,1,['test'],['test']
Testability,"~~Last one (?) 🤔~~. #1527 . based on:; - #2813 . Deprecates _**SofaBaseVisual**_, ; Deprecates partially **SofaUserInteraction** and **_SofaGraphComponent_**. Gathers ""general"" configuration settings component in **Sofa.Component.Setting**; and Controller related things in **Sofa.Component.Controller**. The rest of configuration setting was originally present as well, plus the ""performer"" (inciseperformer, addcameraperformer...) but those will be added in a separate Sofa.GUI family modules). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2843:1036,test,test,1036,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2843,2,['test'],['test']
Testability,~~The PR is based on #1003 (merged)~~ . CHANGELOG:; - [SofaPython] Add vector<Rigid3> to the addNewData in Binding_Base.cpp; - [SofaPython] Base.addNewData returns the created data or set an exception in case of failure. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1004:472,test,test,472,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1004,2,['test'],['test']
Testability,"~~To push immediately after merging #1734~~. Remove all references to defaulttype::Vec (and helper::fixed_array) and remove all ""deprecation"" messages. Breaking for the same reason with #1730 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1740:733,test,test,733,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1740,2,['test'],['test']
Testability,"~~[DEMO]~~. First step for an unified testing system. This module gathers:; - helper/testing files: utilitary to write new tests; - gtest: API Google test (all tests are based on it); - SofaGTestMain (force-load SofaSimulationGraph): template of Main to centralize test-related things. This module needs to be compiled AFTER SofaSimulation, as SofaGTestMain needs SofaSimulationGraph. Unfortunately, there is still the mess with the plugin SofaTest, which needs to be solved as well.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1834:38,test,testing,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1834,8,['test'],"['test', 'test-related', 'testing', 'tests']"
Testability,"~~for thread-safety, and each thread/simu would have its own pool of contact id~~. ~~An other solution would be to put a guard_lock/mutex each time the ids are accessed but it would share the same pool of contact id to the whole set of thread/simu~~. Make the counter of ContactId atomic.; A side effect is to remove the ability to restore previous contactid which was destroyed and set in a side container. I dont think we really need to save some ""ids"" because we will never overrun the 64 bit integer IMO (18446744073709551615 is quite big 🙃); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4582:1086,test,test,1086,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4582,2,['test'],['test']
Testability,"… into a dedicated plugin. Replaces https://github.com/sofa-framework/sofa/pull/4395. The new PR now complies with the conclusion on the architecture of a plugin, described [in the doc](https://www.sofa-framework.org/community/doc/programming-with-sofa/create-your-plugin/#plugin-architecture). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4487:834,test,test,834,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4487,2,['test'],['test']
Testability,"… into a dedicated plugin. The plugin VolumetricRendering needed a bit of cleaning too. The new folder hierarchy is the following:. - SofaCUDA; - VolumetricRendering; - VolumetricRendering; - VolumetricRendering.CUDA. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4395:757,test,test,757,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4395,2,['test'],['test']
Testability,"…Sofa_Test. #1885 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2144:559,test,test,559,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2144,2,['test'],['test']
Testability,"…ion warning. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1726:553,test,test,553,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1726,2,['test'],['test']
Testability,─ BindingsTargets.cmake; │   │   ├── BindingsTargets-debug.cmake; │   │   ├── PluginConfig.cmake; │   │   ├── PluginTargets.cmake; │   │   ├── PluginTargets-debug.cmake; │   │   ├── SofaPython3Config.cmake; │   │   └── SofaPython3ConfigVersion.cmake; │   ├── libSofaPython3.so; │   └── python3; │   └── site-packages; │   ├── Sofa; │   │   ├── Components.cpython-39-x86_64-linux-gnu.so; │   │   ├── constants; │   │   │   ├── __init__.py; │   │   │   ├── KeyCode.py; │   │   │   └── Key.py; │   │   ├── Core.cpython-39-x86_64-linux-gnu.so; │   │   ├── Gui.cpython-39-x86_64-linux-gnu.so; │   │   ├── Helper.cpython-39-x86_64-linux-gnu.so; │   │   ├── __init__.py; │   │   ├── livecoding.py; │   │   ├── prefab.py; │   │   ├── PyTypes; │   │   │   ├── __init__.py; │   │   │   ├── RGBAColor.py; │   │   │   └── Vec3.py; │   │   ├── Simulation.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaBaseTopology.cpython-39-x86_64-linux-gnu.so; │   │   ├── SofaDeformable.cpython-39-x86_64-linux-gnu.so; │   │   ├── test.py; │   │   └── Types.cpython-39-x86_64-linux-gnu.so; │   ├── SofaRuntime; │   │   ├── __init__.py; │   │   └── SofaRuntime.cpython-39-x86_64-linux-gnu.so; │   ├── SofaTypes; │   │   ├── __init__.py; │   │   └── SofaTypes.cpython-39-x86_64-linux-gnu.so; │   └── splib; │   ├── animation; │   │   ├── animate.py; │   │   ├── easing.py; │   │   └── __init__.py; │   ├── caching; │   │   ├── cacher.py; │   │   └── __init__.py; │   ├── __init__.py; │   └── meshing; │   ├── cgal_sofa.py; │   ├── data; │   │   └── meshes; │   │   ├── gallbladder.stl; │   │   ├── parametric_mesh_example.step; │   │   └── surface_mesh_example.stl; │   ├── gmsh_sofa.py; │   ├── __init__.py; │   └── pygalmesh_sofa.py; └── share; └── SofaPython3; ├── documentation; │   ├── Contributing.rst; │   ├── CustomModule.rst; │   ├── index.rst; │   ├── install.rst; │   ├── SofaModule.rst; │   └── SofaPlugin.rst; └── examples; ├── backend_pygame.py; ├── BaseCamera.py; ├── CMakeLists.txt; ├── ControllerScene.py; ├── e,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592:5192,test,test,5192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1671#issuecomment-756112592,1,['test'],['test']
Testability,"⚠! Uber PR incoming! ⚠; (Will basically conflict every time a branch is merged 🤪) . This PR generalizes the use of the Sofa.Type module (with things formerly in SofaHelper, SofaDefaulttype and SofaCore).; E.g:; - helper::fixed_array becomes type::fixed_array; - defaulttype::Vec becomes type::Vec; - defaulttype::Quat and helper::Quater becomes type::Quat (and typedef *Quaternion* is removed); - helper::types::RGBAColor becomes type::RGBAColor; - and many more; More info in #1521 . These renames was handled in Sofa.Compat to be the less problematic possible while converting.; Now for the release of v21.06, it is logical to use the correct namespaces/headers. Big Warning though: the Sofa.Compat is still here for the external plugins, but as the headers/file inclusions changes, it is highly probable that they will break at compilation: a lot of people does not ""include what they use"" and what relying on the previous inclusions. Later TODO: add a cmake option to make the use of Sofa.Compat optional. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2179:618,log,logical,618,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2179,3,"['log', 'test']","['logical', 'test']"
Testability,"⚠-For MSVC only; ⚠-in Release mode only; ⚠-with CMake flag SOFA_ENABLE_LINK_TIME_OPTIMIZATION. Enable Link-time optimization to whole SOFA project.; (with caduceus.scn : w/o: 170fps, w/: 190fps). WARNING: typical SOFA compilation takes 20GB!🥴. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1468:495,test,test,495,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1468,2,['test'],['test']
Testability,"⚠️ DO NOT MERGE ! ⚠️ . The CI only compiles in debug for one configuration and only when a commit is done on the master.; AND a lot of failures just happen because of timeouts. So the readings are uncomfortable, to say the least. So This PR simply enable assertions in release mode (overriding the flags) and should show where the assertions happen,. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4496:255,assert,assertions,255,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4496,4,"['assert', 'test']","['assertions', 'test']"
Testability,"⚠️ ⚠️ ⚠️ For now, some unit tests on StaticSolver are failing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4370#issuecomment-1862362599:28,test,tests,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4370#issuecomment-1862362599,1,['test'],['tests']
Testability,👍; I remember it was at a time where Intel driver and Linux was crashing #526 with Core profile (I guess?); Maybe a bug in mesa at that time or the intel driver.; Anyway we would need people using Intel & Linux to test this on their setup.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1690#issuecomment-753879358:214,test,test,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1690#issuecomment-753879358,1,['test'],['test']
Testability,😄 ; I do not know how to proceed for you to test it. Maybe I can add test scenes to start somewhere.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-399515911:44,test,test,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-399515911,2,['test'],['test']
Testability,🥹; ```; Test Result (2 failures / +1); SceneTests.applications/plugins/SoftRobots/examples/tutorials/Tripod/myproject.elasticbody.py; SceneTests.applications/plugins/SoftRobots/examples/tutorials/Tripod/myproject.step6.py; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1630092082:8,Test,Test,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1630092082,1,['Test'],['Test']
Usability," ------------------------------------------------------------------------------------------; BM_NarrowPhaseDetection_getDetectionOutputs/8 38.3 us 38.3 us 18336; BM_NarrowPhaseDetection_getDetectionOutputs/16 234 us 234 us 3010; BM_NarrowPhaseDetection_getDetectionOutputs/32 1373 us 1373 us 506; BM_NarrowPhaseDetection_getDetectionOutputs/64 8055 us 8056 us 88; BM_NarrowPhaseDetection_getDetectionOutputs/128 45349 us 45348 us 15; BM_NarrowPhaseDetection_getDetectionOutputs/256 243190 us 243189 us 3; ```; The benchmarks were performed using https://github.com/alxbilger/SofaBenchmark.; `BM_NarrowPhaseDetection_getDetectionOutputs/n` corresponds to a map containing `n^2` pairs of `CollisionModel*`. ## Discussion. It is undeniable that `std::map` and `std::unordered_map` are faster than `sofa::helper::map_ptr_stable_compare`. However, I don't know how crucial it is to have this kind of map with a dedicated comparator. Is this feature necessary? If not, I am in favour of using `std::unordered_map` wherever `sofa::helper::map_ptr_stable_compare` is used, for performances reasons. Overall, we won't get a huge gain of fps, but still it has an impact on the peformances of `NarrowPhaseDetection`. Initially, I wondered why `NarrowPhaseDetection` took so much time for so simple instructions. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2047:3123,simpl,simple,3123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2047,1,['simpl'],['simple']
Usability," NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namespace handling); - adapt SPM output for smooth transition from SOFA; - create the patch; - open a PR. ## Next steps; - Finalize and merge Sofa.Component.Utils PR; - Open a new PR: Sofa.Helper.Bvh; - Continue with SofaHelper refactoring. ----------. Any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:2252,feedback,feedback,2252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811,2,['feedback'],['feedback']
Usability," Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramework; - Progress within Sofa.Helper.*; Assign tasks to all volunteers before STC#5. ----------. As always, any feedback is more than welcome :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:1671,simpl,simplify,1671,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223,6,"['clear', 'feedback', 'simpl']","['clear', 'feedback', 'simplify']"
Usability," This issue is meant to be the main follow-up of the project, complementary to #543 (still a good read). ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the modules we want; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users; - cleaning the applications/plugins repository. ## Tasks. Here are the main steps of the project.; Tasks NG1 and NG2 can be done in parallel if we work ""bottom->top"" in NG1 and ""top->bottom"" in NG2.; Task NG3 can also be started in parallel. We need to iterate on the architecture proposal to refine it as much as possible before steps NG1 and NG2 are over.; Task NG4 cleaning the applications/plugins repository in order to better handle code lifecycle. ### NG1: Simplify headers dependency graph by removing un-needed includes. 1. SofaKernel; - clean/rewrite/reorganize SofaHelper and SofaDefaulttype #1521 ; - remove completely useless files. <img src=""https://user-images.githubusercontent.com/11028016/106575747-b3910180-653c-11eb-8f43-6ec65390ce2f.png"" width=""350"" > &nbsp; <img src=""https://user-images.githubusercontent.com/11028016/106575725-ae33b700-653c-11eb-89e3-4bdeae912a94.png"" width=""350"" >. 2. Other modules (SofaGeneral, etc); - clean deps (useless includes, use lower level objects, etc), linked with the following NG2 actually. SOFA modules dependency (library link) graph: https://www.sofa-framework.org/graph/. *clang tools?*; *include-what-you-need?*. ### NG2: Pluginize all SOFA modules; Pluginizing a module = making it a [CMake Package](https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html) that can be enabled/disabled in SOFA CMake options.; Pluginizing **does not mean** moving files (it did in the past). The module stays in place, only the CMake fil",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1527:1150,Simpl,Simplify,1150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1527,1,['Simpl'],['Simplify']
Usability," Yes, all call-super need to be fixed that way (which I didn't in the PR), I will not do that unless it is clear we are really going to do such a breaking change in the sofa code base ;) . > Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get documentation on what the ""methodDelegated"" should do (to know contract the child has to fulfill). . The advantage I see with that naming scheme is that it works with chain of delegation. So the code should look like:; ```cpp; BaseObject::init() /// non virtual ; {; // I do the stuff shared by all child ; checkWhatever();; ; // ask my child to do their specific init, ; doBaseObjectInit(); }. BarycentricMapping::doBaseObjectInit() final; {; // I do the stuff shared by all of my child ; checkWhatever();;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:1543,clear,clear,1543,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162,2,['clear'],['clear']
Usability," by which state, and allow for correct initialization and most importantly topological changes propagation. One issue with the initial implementation, associating a state to the first topology found in its parents and then ignoring it if it is not in the same context (hopefully in all codes using state->m_topology, but who checked?), is that this make it impossible to share the same topology (and topological changes) with multiple states in different (children) nodes. One such example is when you use an IdentityMapping (or a Rigid <-> Vec3 mapping or any other mapping that produce the same number of outputs as its inputs), previously to get correct topology association and changes propagation you would need to replicate the topology (and the topological mappings) with a topology both before and after the mapping (but beware if they end up with different sizes, or updated in the wrong order...). With our changes, there is a clear(er) method BaseContext::getActiveMeshTopology() that you can call from any context and will give you the topology that is relevant for this context, i.e. either the topology at this exact node, or from a parent node but only if there is no mapping in between (or if there are only mappings whose sameTopology() method returns true). Using this method, state->l_topology is initialized (and you can inspect its result in the GUI), and if it is not NULL it will be used by all computations for the state without extra hidden checks. Now back to this bug, the last issue here was that the tested mapping (TetrahedronVolumeMapping) was not preserving the topology, but its output state was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:1122,clear,clear,1122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201,2,['clear'],['clear']
Usability," can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor in them. . If you think it is ok I will do the cleaning of STLExporter as well...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:1954,clear,clearly,1954,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236,2,['clear'],['clearly']
Usability," come up with:; ```py ; m = createObject(""MechanicalObject"", position=[0,0,0, 1, 1, 1, 2, 2, 2]). print(repr(type(m.position))) ## print Sofa.Data as we returns the Data, not a generated list. . print(str(m.position)) ## print [[0,0,0], [1,1,1], [2,2,2]] ; ## the inner structure of the data field is not list . m.position.toList() ## create and returns the list [[0,0,0], [1,1,1], [2,2,2]] . ## Index based access of any 'dimmensions'; m.position = [[0,0,0],[1,1,1],[2,2,2]] ; m.position[0] = [3,3,3] # will change the first vector in the array. ; m.position[0,1] = 3.0 # change the first index of the first vector. . ## Slice based access; m.position[:,:1] = 3.0 # Will write 3.0 in the y component on every ""vector"" . ## Custom access using generator; def OnDiagonal(o):; idx = max(o.shape[0], o.shape[1]); for i in xrange(0, idx): ; yield (idx,idx). m.position[OnDiagonal] = 1.0 . ### Functional style... ; def myFunction(i, j):; if i == j:; return 1.0; return 0.0. m.position.apply(myFunction); ```. It is possible to implement all that without breaking the API except for the unified accessor syntax; ```py; m.position = [[0,0,0],[1,1,1],[2,2,2]] ; m.position[0] = [3,3,3] # Having this syntax will be breaking ; m.position[0,1] = 3.0 # Having this syntax will be breaking. # The non breaking version I can come up is the following:; m.position = [[0,0,0],[1,1,1],[2,2,2]] . m = m.getData(""position""); m[0] = [3,3,3] ; m[0,1] = 3.0 ; # Which is less nice. ; ```. A lot more can be done but I found the result interesting and want to share. . I will now focus on having the Data object returned to implement the buffer+memoryview protocol (https://docs.python.org/3/c-api/buffer.html) of python to have copy less interoperability with python objects that implement the protocol (array.array, numpy.array, cython memory view, etc...). . Feedback are welcome... . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/767:3640,Feedback,Feedback,3640,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767,1,['Feedback'],['Feedback']
Usability," load all the available plugins. Loading a library in the process memory will have several side effects which are difficult to anticipate before hand. The major one is the evaluation of all the global variables, which will result in populating the `ObjectFactory` with all the components that this library contains. I would suggest something different for this kind of having a list of default plugins that are loaded directly with your application ( here `runSofa` ). - derive a sort of sofa plugin manifest file, which can be generated as a post-build step. This should be an easy to parse file which could contain the various informations exposed by the `getModuleName()`, `getModuleVersion()`... without having to load the library in the process memory. This manifest file must be stored in an easy to find location in your build tree, an be installed properly ( they need also to be bundled when you deploy your application ). That means they should be located with a similar relative path with respect to the application ( `runSofa` ) when in the build tree or in the install tree. There should be a proposal about that to define : ; - the manifest file type ( ie how are we going to parse it ? json xml text ? ); - the manifest file content itself. - any application could then define the list of predefined plugin it wants to load using a simple configuration file. A default configuration can be provided, but it could be easily overriden. With this mechanism, no recompilation is required when you want to change the list of default plugins, you just change the config file. NB : a bit unrelated but there is a small code ""snippet"" that can be used to recover all the components attached to a library in two lines ; ```cpp; const char* getModuleComponentList(); {; /// string containing the names of the classes provided by the plugin; static std::string classes = sofa::core::ObjectFactory::getInstance()->listClassesFromTarget(sofa_tostring(SOFA_TARGET));; return classes.c_str();; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188:1695,simpl,simple,1695,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-296982188,2,['simpl'],['simple']
Usability," of Object links that aren't based on SingleLinks. Here, a new template class (with its base class) is introduced: DDGLink.; Just like BaseDatas, DDGLink inherits DDGNode.; A DDGLink thus benefits from the whole dirty flag propagation thingy, and implements the update() function to clean its dirty flag, and update from its inputs.; Just like Datas, a DDGLink also possesses a counter, that is incremented when the link value changes. Just like BaseLinks, and SPtrs, to retrieve the object linked with a DDGLink, you need to call the get() method. The set() method will set the link. When a link is set within a DDGLink, the componentState of the linked object is set as input to that DDGLink. It's up to you to connect your DDGLink to some datas to connect your dependency graph. Contrary to the current link implementation in SOFA, these links, can be very easily manipulated as their base class (BaseDDGLink), or as DDGNodes even. DDGLinks are parsed in Base::parseField just like BaseLinks and BaseDatas, which makes them usable with the BaseObjectDescriptions. (they really mirror the behavior of all other field types.). A very simple test case is present in this PR to show you how it's used. You can reference your links with their pathnames, just like normal datas or links, by calling the getPathName() method. There's not bi-directionality implemented in this PR, (because I didn't have time in the end...) but it's not rocket science:; - all there is to do is add a vector of Base* in Base with helper methods to add, remove retrieve the list of link owners. Then in DDGLink::set(), call the add() method of your link to register`this`. (maybe in another PR...) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1226:1052,usab,usable,1052,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226,1,['usab'],['usable']
Usability," of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. @maxime-tournier The CleanupCheck thingy is disposable; it's a just safeguard, a way to tell developpers about the `init()` and `cleanup()` function. You're right, this is almost the last chance to call cleanup(), but no _guarantee_ of correctness. Hope this helps,; Marc Legendre. --. > trying to call `std::exit` in some plugin. _Sweating_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:1969,simpl,simply,1969,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946,2,['simpl'],['simply']
Usability," on templates without any knowledge of the inner layout of the template type. I'm not 100% sure that I found all instances of those calls in Sofa's core, but it seems like it is *exclusively* used with TDataType::Coord and TDataType::Deriv (which are either VecX or RigidCoord/RigidDeriv). In conclusion the usage of DataTypeInfo in BaseData justifies its existence to me. Maybe some features could be isolated in a separate API, but that would only mean maintaining 2 APIs instead of one. I think that instead of trying to remove it from SOFA, we should investigate how to make the API better:; 1. size() / byteSize() / size(void* data) are really unclear (hence the shitty doc on those methods I guess, and it is really hard to know which of these methods serves what purpose. If we base ourselves on the terminology of another data abstraction tool (say numpy), we will still not be able to easily cover complex data types such as sparse matrices easily, but we at least will have a way clearer API to dig into: len, size, shape, ndim...; 2. just like SimpleLayout, we could add a dedicated flag for specific types, to simplify conversions in bindings (Keep the Container flag but maybe add additional ""Matrix"", ""Vector"", and ""Complex"" flags to further discriminate, maybe a SparseMatrix too...; 3. We could add extra pre-filled specializations of DataTypeInfo with clear names to simplify writing new ones (so that we don't have to fill up every flags ourselves everytime); 3. @jnbrunet @damienmarchal what do you think?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1385:3328,Simpl,SimpleLayout,3328,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1385,4,"['Simpl', 'clear', 'simpl']","['SimpleLayout', 'clear', 'simplify']"
Usability," p1, ..., pn]| |p: [p0, p1, ..., pm]|; |r: [r0, r1, ..., rn]| |r: [r0, r1, ..., rm]|; |q: [q0, q1, ..., qn]| |q: [q0, q1, ..., qm]|; +--------------------+ +----------+---------+; |; mapping1 | mapping2; +--------------+-------------+; | |; +----------+---------+ +----------+---------+; | MO3 | | MO4 |; +--------------------+ +--------------------+; |x: [x0, x1, ..., xl]| |x: [x0, x1, ..., xo]|; |p: [p0, p1, ..., pl]| |p: [p0, p1, ..., po]|; |r: [r0, r1, ..., rl]| |r: [r0, r1, ..., ro]|; |q: [q0, q1, ..., ql]| |q: [q0, q1, ..., qo]|; +--------------------+ +--------------------+; ```. Version 1 will do:; 1. Launch a visitor in the CG's subgraph (`x.peq(p,alpha);`); **MO 1** : x = x + alpha p; **M0 2** : x = x + alpha p; **MO 3** : x = x + alpha p; **MO 4** : x = x + alpha p; 2. Launch a visitor in the CG's subgraph (`r.peq(q,-alpha); `); **MO 1** : r = r - alpha q; **M0 2** : r = r - alpha q; **MO 3** : r = r - alpha q; **MO 4** : r = r - alpha q. Version 2 will do:; 1. Launch a visitor in the CG's subgraph; **MO 1** :; x = x + alpha p; r = r - alpha q; **MO 2** :; x = x + alpha p; r = r - alpha q; **MO 3** :; x = x + alpha p; r = r - alpha q; **MO 4** :; x = x + alpha p; r = r - alpha q. Unless I'm missing something, the optimized version only removes one subgraph visit and allows the compilator to *\***maybe**\** optimize two subsequent operations on vectors. However, I don't think the compiler will actually do something here as the `MechanicalState::vMultiOp` simply makes two calls to `MechanicalState::vOp` which, well, is a virtual function and can't be inlined. To the question to whether or not we should keep one or the other, I guess we would have to benchmark it (use a scene with multiple top level mechanical object's, and multiple mapping levels). If the optimized version do not brings a lot of speed (which would be my guess since the cost of a visit isn't very big, but I may be wrong), I would remove the optimization as it is quite confusing for the reader.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191:2723,simpl,simply,2723,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-592412191,2,['simpl'],['simply']
Usability," pluginName=['BeamAdapter',; 'SofaMiscCollision',; 'SofaConstraint',; 'SofaImplicitOdeSolver',; 'SofaGeneralLinearSolver',; 'SofaBoundaryCondition',; 'SofaDeformable',; 'SofaTopologyMapping',; 'SofaOpenglVisual,'; 'SofaMeshCollision',; 'Sofa.Component.Collision.Detection.Algorithm',; 'Sofa.Component.IO.Mesh',; 'Sofa.GL.Component.Rendering3D',; 'Sofa.GL.Component.Shader'; ]); root.addObject('FreeMotionAnimationLoop'); root.addObject('VisualStyle', displayFlags=['showVisualModels',; 'showCollisionModels',; ]); root.addObject('LCPConstraintSolver', mu='0.1', tolerance='1e-10', maxIt='1000', build_lcp='false'); root.addObject('DefaultPipeline', draw='0', depth='6', verbose='1'); root.addObject('BruteForceBroadPhase', name='N2'); root.addObject('BVHNarrowPhase'); root.addObject('LocalMinDistance', contactDistance='1', alarmDistance='3', name='localmindistance', angleCone='0.02'); root.addObject('DefaultContactManager', name='Response', response='FrictionContactConstraint'). name='guide'; straightLength=980.0; length=1000.0; numEdges=200; youngModulus=20000; spireDiameter=25; numEdgesCollis=[50,10]; spireHeight=0.0; densityOfBeams=[30,5]; youngModulusExtremity=10000; topoLines_guide = root.addChild('topoLines_'+name); topoLines_guide.addObject('WireRestShape', name=name+'RestShape', ; straightLength=straightLength, length=length, ; numEdges=numEdges, youngModulus=youngModulus, ; spireDiameter=spireDiameter, numEdgesCollis=numEdgesCollis, ; printLog=True, template='Rigid3d', spireHeight=spireHeight, ; densityOfBeams=densityOfBeams, youngModulusExtremity=youngModulusExtremity); topoLines_guide.addObject('MechanicalObject', name='dofTopo2', template='Rigid3d'); topoLines_guide.addObject('EdgeSetTopologyContainer', name='meshLinesGuide'); topoLines_guide.addObject('EdgeSetTopologyModifier', name='Modifier'); topoLines_guide.addObject('EdgeSetGeometryAlgorithms', name='GeomAlgo', template='Rigid3d'). xtip=[1, 0, 0]; instruments=['guide']; step=0.5; listening=True; startingPos=",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4636:12911,guid,guide,12911,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4636,1,['guid'],['guide']
Usability," print(os.environ['PYTHONPATH'])\nexcept Exception:\n pass\nprint('--- sys.path ---')\ntry:\n print(str(sys.path))\nexcept Exception:\n pass\nprint('#################')\"" )""; ```. ```txt. #################; --- sys.version ---; 3.8.10 (default, May 26 2023, 14:05:08) ; [GCC 9.4.0]; --- PATH ---; /opt/Qt/Tools/QtInstallerFramework/4.5/bin:/opt/Qt/5.12.8/gcc_64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin; --- SOFA_ROOT ---; --- PYTHONPATH ---; --- sys.path ---; ['', '/usr/lib/python38.zip', '/usr/lib/python3.8', '/usr/lib/python3.8/lib-dynload', '/usr/local/lib/python3.8/dist-packages', '/usr/lib/python3/dist-packages']; #################. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt; [INFO] [runSofa] PluginRepository paths = /builds/sofa/build/plugins:/builds/sofa/build/collections:/builds/sofa/build/lib; [INFO] [runSofa] DataRepository paths = /builds/sofa/src/share:/builds/sofa/src/examples:/builds/sofa/build:/builds/sofa/build; [INFO] [runSofa] GuiDataRepository paths = /builds/sofa/src/applications/projects/runSofa/resources:/builds/sofa/build; [INFO] [BaseGUI] Created directory: /builds/sofa/build/config; [INFO] [BaseGUI] Created directory: /builds/sofa/build/screenshots. ########## SIG 11 - SIGSEGV: segfault ##########; sofa::helper::BackTrace::sig(int); std::vector<std::filesystem::__cxx11::path::_Cmpt, std::allocator<std::filesystem::__cxx11::path::_Cmpt> >::~vector(); std::vector<std::filesystem::__cxx11::path::_Cmpt, std::allocator<std::filesystem::__cxx11::path::_Cmpt> >::~vector(); sofa::helper::system::FileRepository::findFileIn(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&); sofa::helper::system::FileRepository::findFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3943:2831,GuiD,GuiDataRepository,2831,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3943,1,['GuiD'],['GuiDataRepository']
Usability," rely on SingleLink. . It is questionnable if the iterable list of typed sofa object should be stored in link instead of a a much simpler container. They are not using any of specific feature of SingleLink (like path read/writing which is actually invalid behavior as the content of the container is fully defined by the node and cannot be filled with user specified component). . At that time the sole puprose of using SingleLink seems to able to expose the content of these container in the GUI. If this is the case a much simpler code architecture should be used to avoid bloating the Node.h and API. In this PR we replace the Node::Single by the combination of two objects:; - NodeContainerSingle which only handle the ""container"" specific part of the SingleLink; - LinkeableContainer which wrap a container to expose it as a BaseLink. . The advantage of this design is twofold:; - only NodeContainerSingle is needed in Node.h and has a much reduce code-generation compared to SingleLink. ; - NodeContainerSingle can operate with forward declaration (which is not the case of SingleLink which helps to keep clean the inclusion tree.; - there is a clear separation between the Container and the Link part which lead to a very readable code. The LinkeableContainer is only used visible in Node.cpp. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1737:1193,clear,clear,1193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1737,1,['clear'],['clear']
Usability," to do a cartesian product, random values or fixed lists of parameter sets. eg for Sofa_setOutputType... the following tests would be nice:; ```python; Sofa_setOutputType(""validID"", ""JSON""); Sofa_setOutputType("""", ""JSON""); Sofa_setOutputType(""invalid"", ""JSON""); Sofa_setOutputType(""validID"", ""LJSON""); Sofa_setOutputType(""validID"", ""STDOUT""); Sofa_setOutputType(""validID"", """"); Sofa_setOutputType(""validID"", ""invalidType""); ```. And in Sofa_end:; ```python; Sofa_end(""validId"", aNode); Sofa_end("""", aNode); Sofa_end(""validId"", 1.0) # This shouldn't crash but report a python exception ; Sofa_end(""validId"", None) # This shouldn't crash but report a python exception; ```. - test each c++ function in the same way. A weaker approach of testing (if you really lack of time) is to only test ""the good"" case and not invalid values. To me this is only acceptable if the function is not accessible by the users and never process data provided by users. . More feedback:; - It found the following function's name Sofa_end and Sofa_setOutputType not very clear. They don't have the timer prefix.. so sound as if they are more general than timing function. ; - in Sofa_timerSetEnabled(PyObject* /*self*/, PyObject *args) you are passing an int argument to get a bool...does it means that timeSetEnable(..., True) will not work ? ; If this is the case the following code is probably better as it allow it:; ```cpp; PyObject* o;; if(!PyArg_ParseTuple(args, ""sO"", &id, &o)){...}; advancedTimer::setEnabled(id, PyObject_IsTrue(o));; ```; - in function taking a string description it would be nicer to warn users or the calling code when an invalid name is provided so that he can locate & fix his scene/script. ; ```cpp; /// In void AdvancedTimer::setOutputType(IdTimer id, std::string type); else {; msg_warning(""AdvancedTimer"") << ""Unable to set the type to '""<< type << ""' Switching to the default 'stdout' output. Other valid types are [stdout, JSON, LJSON]."" ; data.timerOutputType = STDOUT;; }; ```. Hope thi",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977:1894,feedback,feedback,1894,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323685977,4,"['clear', 'feedback']","['clear', 'feedback']"
Usability," unfortunately. Eigen matrices have a nice compile-time introspection. Hence it would be possible to do something like:. ```c++; template <Derived>; struct EigenMatrixTypeInfo {; /// 1 if this type has valid infos; static constexpr auto ValidInfo = 1; ; ; /// 1 if this type has a fixed size -> always 1 single pair of vec3; static constexpr auto FixedSize = (Derived::RowsAtCompileTime != Eigen::Dynamic ? 1 : 0); ; ; /// 1 if the constructor is equivalent to setting memory to 0; static constexpr auto ZeroConstructor = (std::is_base_of_v<Eigen::SparseMatrixBase<Derived>, Derived> ? 1 : 0);; ; /// 1 if copying the data can be done with a memcpy; static constexpr auto SimpleCopy = 0; ; ; /// 1 if the layout in memory is simply N values of the same base type; static constexpr auto SimpleLayout = 0;; ; /// 1 if this type uses integer values; static constexpr auto Integer = std::is_integral_v<Derived::Scalar>;; ; /// 1 if this type uses scalar values; static constexpr auto Scalar = std::is_floating_point_v<Derived::Scalar>;; ; /// 1 if this type uses text values; static constexpr auto Text = 0;; ; /// 1 if this type uses copy-on-write -> it seems to be THE important; static constexpr auto CopyOnWrite = 0;; ; /// 1 if this type is a container; static constexpr auto Container = 1;; ; /// largest known fixed size for this type, as returned by size(); static constexpr auto Size = (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime);; ; /// Number of elements in the container, or the 2nd dimension for arrays; static size_t size() { ; return (Derived::ColsAtCompileTime == Eigen::Dynamic ? 0 : Derived::ColsAtCompileTime); ; }; ; /// Size of the smalest single element in the container; static size_t byteSize() { ; return sizeof(Derived::Scalar); ; }; ; /// Total number of elements; static size_t size(const DataType & data) {; return data.rows();; }; ; static bool setSize(DataType & data, size_t size) { ; if constexpr (Derived::ColsAtCompileTime == Eigen::D",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022:698,Simpl,SimpleCopy,698,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-885687022,4,"['Simpl', 'simpl']","['SimpleCopy', 'SimpleLayout', 'simply']"
Usability,"""Fix"" the dreaded test UtilsTest.string_to_widestring_to_string; which pass only if the test has been launched with a UTF-8 locale. I tried setting TemporaryLocale to UTF-8 but it was still not working. ; (same with `setlocale(LC_ALL, ""en_US.UTF-8"");` coming directly from an example of cppreference). Last try was to simply avoid running the test if we detect the system is not UTF-8. Related to #2290. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2320:318,simpl,simply,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2320,1,['simpl'],['simply']
Usability,"# Deprecation macros. ## The 2 base macros. **Do not use them directly in your code**, see ""how to use them"" below. `SOFA_ATTRIBUTE_DEPRECATED(deprecateDate, removeDate, toFixMsg)`; To be used to trigger a deprecation warning. It is a simple `[[deprecated]]` interface.; Warns that something; &nbsp;&nbsp;&nbsp; - is DEPRECATED (so still usable) since `deprecateDate`; &nbsp;&nbsp;&nbsp; - will be removed on `removeDate`; and gives the toFixMsg instructions to fix the deprecation warning.; ; `SOFA_ATTRIBUTE_DISABLED(deprecateDate, disableDate, toFixMsg)`; To be used jointly with `= delete` to trigger an error. It is a flavored `[[deprecated]]` interface.; Warns that something ; &nbsp;&nbsp;&nbsp; - is DISABLED (so not usable anymore) since `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (curr",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:235,simpl,simple,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249,6,"['simpl', 'usab']","['simple', 'usable']"
Usability,"# Problem; After updating Sofa source code, you got; `; error: variable has incomplete type 'void'; void SOFA_SOFAEIGEN2SOLVER_API initSofaEigen2Solver();""; `; (or something similar e.g with SOFA_SOFASIMULATIONCOMMON_API , etc). # Why?; While processing the pluginization, macro and config.h files are being rewritten/cleaned to follow the guidelines on Sofa's packaging. So old generated files from cmake's configuration step can mess up with the new ones (compiler does not know which config.h to include and so on). # Solution; Delete the include directory located at the root of your build directory, and configure cmake again. Deletion will clean up everything, and cmake will generate the new config.h.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1670:340,guid,guidelines,340,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1670,1,['guid'],['guidelines']
Usability,"### Description; This PR removes option to apply projective constraints during velocity and/or position propagation visitors, as it makes it unreliable to put projective constraints in child nodes (required when they apply on the DOFs but with a different/subset topology). All codes (solvers and animationloop) must now explicitly call projection operations/visitors before propagations when required (mostly after `OdeSolver::solve())`. This PR is changing the behavior as projective constraints because they are no longer applied at the end of Simulation::init(). To clearly make that visible to calling's code the propagate visitor was renamed to make sure existing codes fail at compilation time. ; To fix that in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. CHANGELOG for @guparan and @hugtalbot ; - [SofaKernel] Change the way all MechanicaVisitor apply projective constraints. This change is breaking the API aand external solver's code need to be updated (see #PR26). ; - ...to finish ....; ___________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/216:570,clear,clearly,570,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216,2,"['clear', 'simpl']","['clearly', 'simply']"
Usability,"### Discussed in https://github.com/sofa-framework/sofa/discussions/3092. <div type='discussions-op-text'>. <sup>Originally posted by **monkeygame** July 1, 2022</sup>; Hello everyone!; I'm learning about dynamically removing and adding tetrahedral elements; examples\Components\topology\TopologicalModifiers; I think I added four tetrahedrons, and then I deleted the first tetrahedron in the next step.; An error occurs when I try to delete a group of tetrahedrons after adding a group of tetrahedrons.; input:; ``` txt; T= 0.2; ADD= Tetrahedra 4; 0 1 9 3 1 10 9 13 13 1 10 11 1 2 11 5; T= 0.4; REMOVE= 1; 0 ; ```. error info:; `in vector<class sofa::type::Vec<3,double>> 25b825b0 size 25 : invalid index 25`. Does anyone know why?</div>",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3211:190,learn,learning,190,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3211,1,['learn'],['learning']
Usability,"### Discussed in https://github.com/sofa-framework/sofa/discussions/3131. <div type='discussions-op-text'>. <sup>Originally posted by **damienmarchal** July 14, 2022</sup>; Currently in runSofa we are maintaining two different viewer with more or less the same functionnalitities. . Could we remove one of them to simplify the codebase (and make usability clearer)</div>",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4497:314,simpl,simplify,314,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4497,3,"['clear', 'simpl', 'usab']","['clearer', 'simplify', 'usability']"
Usability,"### Discussed in https://github.com/sofa-framework/sofa/discussions/4685. <div type='discussions-op-text'>. <sup>Originally posted by **scarponiv** April 26, 2024</sup>; Hello everyone,. I am facing some issues when trying to create an instrument with more than two sections. In such a case, an erratic motion can be observed. To reproduce the issus, one may start from the basic example _3instruments.scn_ and modify it the following way:; - I added a third section to the guidewire (I added line 37 to add a second straight section ; `<RodStraightSection name=""StraightSection2"" youngModulus=""10000"" nbEdgesCollis=""25"" nbEdgesVisu=""98"" length=""490.0""/>`; - modified line 36 to maintain the same total straight length and the same number of visual and collision edges `<RodStraightSection name=""StraightSection"" youngModulus=""10000"" nbEdgesCollis=""25"" nbEdgesVisu=""98"" length=""490.0""/>`; - and added this section in line 40; `<WireRestShape template=""Rigid3d"" name=""GuideRestShape"" wireMaterials=""@StraightSection @StraightSection2 @SpireSection""/>`.; ; You can find here the complete modified scene:. ```xml; <?xml version='1.0'?>; <Node name='root' dt='0.05' gravity='0 0 0'> . <RequiredPlugin name=""BeamAdapter""/> <!-- Needed to use components [WireBeamInterpolation WireRestShape] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Projective""/> <!-- Needed to use components [FixedConstraint] -->; <RequiredPlugin name=""Sofa.Component.LinearSolver.Direct""/> <!-- Needed to use components [BTDLinearSolver] -->; <RequiredPlugin name=""Sofa.Component.Mapping.Linear""/> <!-- Needed to use components [IdentityMapping] -->; <RequiredPlugin name=""Sofa.Component.ODESolver.Backward""/> <!-- Needed to use components [EulerImplicitSolver] -->; <RequiredPlugin name=""Sofa.Component.SolidMechanics.Spring""/> <!-- Needed to use components [RestShapeSpringsForceField] -->; <RequiredPlugin name=""Sofa.Component.StateContainer""/> <!-- Needed to use components [MechanicalObject] -->; <RequiredPlugin name=""S",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4833:474,guid,guidewire,474,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4833,2,"['Guid', 'guid']","['GuideRestShape', 'guidewire']"
Usability,"### Discussed in https://github.com/sofa-framework/sofa/discussions/5069. <div type='discussions-op-text'>. <sup>Originally posted by **rickysaettone** October 17, 2024</sup>; # The issue:; I can't visualize two of the .stl objects at the same time but I can see them separately.; Not only does the plane disappear while trying to show both, but also the position of the actuator seems transformed and a two vertices appear in a weird position too.; Can anyone help me please? I am starting to learn SOFA and python in general. Location of the objects: [STL.zip](https://github.com/user-attachments/files/17420653/STL.zip). - actuator located in STL/actuador.stl; - plane located in STL/plane.stl. # Version:; - OS: Windows 11 version: 10.0.22631; - SOFA v23.06.00 via the installer; - Python 3.8.10. # The code:; ```python; #-*- coding: utf-8 -*-; import Sofa; #import contoller.py. def createScene(rootNode):; ; # Required plugins; rootNode.addObject('RequiredPlugin', name='Sofa.Component.IO.Mesh') # Needed to use components [MeshSTLLoader]; rootNode.addObject('RequiredPlugin', name='Sofa.Component.Mapping.Linear') # Needed to use components [IdentityMapping]; rootNode.addObject('RequiredPlugin', name='Sofa.Component.Mass') # Needed to use components [UniformMass]; rootNode.addObject('RequiredPlugin', name='Sofa.Component.StateContainer') # Needed to use components [MechanicalObject]; rootNode.addObject('RequiredPlugin', name='Sofa.Component.Visual') # Needed to use components [VisualStyle]; rootNode.addObject('RequiredPlugin', name='Sofa.GL.Component.Rendering3D') # Needed to use components [OglModel]; rootNode.addObject('VisualStyle', displayFlags='showForceFields showBehaviorModels'); ; rootNode.addObject('DefaultAnimationLoop'); rootNode.addObject('DefaultVisualManagerLoop'). # Setting the timestep in seconds; rootNode.dt = 0.01; rootNode.addObject('RequiredPlugin',; pluginName='SoftRobots SofaPython3'); ; # Load the mesh file of the actuator and the plane.; rootNode.addObje",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/5084:494,learn,learn,494,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5084,1,['learn'],['learn']
Usability,"### Problem. **Description**; Hello, thank you for your work. I want to compile Sofa. **Steps to reproduce**; I did all installation steps https://www.sofa-framework.org/community/doc/getting-started/build/linux/ make the same structure as described & clone `git clone -b v21.12 https://github.com/sofa-framework/sofa.git sofa/src`.; After configure cmake gui I got error:. ```; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /media/maxim/big-500/sofa/build/v21.12/install; CMake Deprecation Warning at SofaKernel/modules/Sofa.Config/CMakeLists.txt:80 (message):; Deprecated components are activated (SOFA_WITH_DEPRECATED_COMPONENTS; variable is ON). Using legacy headers is enabled.; Headers from v21.06 are usable, but it is advised to change your code to use the new headers introduced in v21.12.; Adding module Sofa.GL; Adding plugin SofaSimpleFem; Adding plugin SofaRigid; Adding plugin SofaDeformable; Adding plugin SofaObjectInteraction; Adding plugin SofaMeshCollision; Adding plugin SofaEngine; Adding plugin SofaExplicitOdeSolver; Adding plugin SofaImplicitOdeSolver; Adding plugin SofaLoader; Adding plugin SofaGeneralVisual; Adding plugin SofaGraphComponent; Adding plugin SofaGeneralMeshCollision; Adding plugin SofaBoundaryCondition; Adding plugin SofaGeneralAnimationLoop; Adding plugin SofaGeneralDeformable; CMake Warning at /media/maxim/big-500/sofa/build/v21.12/lib/cmake/SofaEigen2SolverConfig.cmake:36 (message):; SofaEigen2Solver has been removed. The package still exists for; compatibility but is empty. Eigen classes were moved to Sofa.LinearAlgebra; and SVDLinearSolver to SofaDenseSolver.; Call Stack (most recent call first):; /media/maxim/big-500/sofa/build/v21.12/lib/cmake/SofaBaseConfig.cmake:35 (find_package); /media/maxim/big-500/sofa/build/v21.12/lib/cmake/SofaGeneralDeformableConfig.cmake:34 (find_package); modules/SofaGeneralDeformable/SofaGeneralDeformable_test/CMakeLists.txt:12 (find_package). Adding ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3184:766,usab,usable,766,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3184,1,['usab'],['usable']
Usability,"### Problem. **Description**; I have compiled sofa successfully with `make`; and I run ./runSofa, I will get the error occurs. **Steps to reproduce**; `./runSofa`. **Expected behavior**; I get the correct GUI with Ubuntu. ---------------------------------------------. ### Environment; MAC with M1 Process; **Context**. - System: MAC OS Celledar; - Version of SOFA: mast branch; - State: Build Directory. **Command called**. ```txt. < COPY-PASTE YOUR COMMAND HERE >; `➜ bin ./runSofa ; [INFO] [runSofa] PluginRepository paths = /Users/hemingshan/Code/sofa/build/plugins:/Users/hemingshan/Code/sofa/build/collections:/Users/hemingshan/Code/sofa/build/lib; [INFO] [runSofa] DataRepository paths = /Users/hemingshan/Code/sofa/src/share:/Users/hemingshan/Code/sofa/src/examples:/Users/hemingshan/Code/sofa/build:/Users/hemingshan/Code/sofa/build; [INFO] [runSofa] GuiDataRepository paths = /Users/hemingshan/Code/sofa/src/applications/projects/runSofa/resources:/Users/hemingshan/Code/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources:/Users/hemingshan/Code/sofa/build; [INFO] [runSofa] Loading automatically plugin list in /Users/hemingshan/Code/sofa/build/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.Forward.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.Backward.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.ODESolver.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.Mesh.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.IO.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.Playback.dylib; [INFO] [PluginManager] Loaded plugin: /Users/hemingshan/Code/sofa/build/lib/libSofa.Component.SceneUtility.dylib; [INFO] [PluginManager] Loaded plu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3425:860,GuiD,GuiDataRepository,860,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3425,1,['GuiD'],['GuiDataRepository']
Usability,"### Problem. **Description**; RunSofa crash when opening the inspector for any object with a Data<Material> . **Steps to reproduce**; compile sofa, run the default example, double click on visual_snake_body (a MeshOBJLoader). And you got the following traceback:; ```console; sofa::type::Material::operator=(sofa::type::Material const&); sofa::gui::qt::materialdatawidget_h::VectorMaterialDataWidget::changeMaterial(int); QComboBox::currentIndexChanged(int); QAbstractItemModel::rowsRemoved(QModelIndex const&, int, int, QAbstractItemModel::QPrivateSignal); QAbstractItemModel::endRemoveRows(); QStandardItem::removeRows(int, int); QStandardItemModel::removeRows(int, int, QModelIndex const&); QComboBox::clear(); sofa::gui::qt::materialdatawidget_h::VectorMaterialDataWidget::readFromData(); sofa::gui::qt::DataWidget::updateWidgetValue(); sofa::gui::qt::ModifyObject::updateTables(); QTabWidget::currentChanged(int); .... ; ```. **Expected behavior**; Not crashing",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3017:705,clear,clear,705,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3017,1,['clear'],['clear']
Usability,"### Problem. **Description**; This bug was first reported by @AlbanOdot in https://github.com/jnbrunet/caribou/issues/104. We have a component that opens a `ReadAccessor<Data<VecCoord>>` on a Mechanical Object position vector during the **init** stage of the scene. In the same callstack, the component will open another `ReadAccessor<Data<VecCoord>>` on the same MO position vector. The following small object can be taken as an example:. _Edit: I found out that the recursive ReadAccessor isn't even needed to reproduce the issue, simply having a component opening during init a read accessor on its own data, which parent is the MO vector, is enough._. ```c++; class TestComponent : public BaseObject {; public:; SOFA_CLASS(TestComponent, BaseObject);; using DataTypes = sofa::defaulttype::Vec3Types;; using VecCoord = DataTypes::VecCoord;; TestComponent() : d_position(initData(&d_position, ""position"", ""Position vector"")){}. void init() override {; Inherit1::init();; auto positions = ReadAccessor<Data<VecCoord>>(d_position);; test(positions.size());; }; void test(const sofa::Size & nb_of_nodes) {; auto positions = ReadAccessor<Data<VecCoord>>(d_position);; if (positions.size() != nb_of_nodes) {; std::cout << ""Just something to make sure the compiler compile this"" << std::endl;; }; }; private:; Data<VecCoord> d_position;; };; ```. The consequence will be that the MO object position vector won't be updated later on during time steps. However, if the same scene is run with a GUI, the problem disappears. The following scene can be taken as an example where a random displacement is imposed on a node before the time step, and the node position is printed afterwards. ```python; class Controller(Sofa.Core.Controller):; def __init__(self, MO):; super().__init__(); self.MO = MO. def onAnimateBeginEvent(self, _):; print(""\n\nonAnimateBeginEvent""); random_disp = np.random.normal(0, 1e-2, self.MO.position.value.shape); self.MO.position.value = self.MO.rest_position.value + random_disp; pr",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2761:533,simpl,simply,533,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761,1,['simpl'],['simply']
Usability,"### _or how to avoid calling applyJ/applyJT on non-mechanical-purposed mappings (mainly for visual mapping)_. A mapping is considered mechanical from a MechanicalVisitor POV if:. 1. isMechanical is true (i.e mapForces, mapConstraints and mapMasses is true). It looks logical but certain Visitors, especially MechanicalPropagateDxVisitor, just ignore this trait and just calls go through all the mappings anyway; https://github.com/sofa-framework/sofa/blob/7a56c190fb8d293b1943006673ea43bb14844e65/Sofa/framework/Simulation/Core/src/sofa/simulation/mechanicalvisitor/MechanicalPropagateDxVisitor.cpp#L48-L54. 2. MechanicalPropagateDxVisitor is still called on (supposedly) non-mechanical mapping but applyJ() (more especially the implementation in Mappings), wont be called if the State does not store velocities. https://github.com/sofa-framework/sofa/blob/7a56c190fb8d293b1943006673ea43bb14844e65/Sofa/framework/Core/src/sofa/core/Mapping.inl#L150-L163. _**In a nutshell, ultimately avoiding calling applyJ/applyJT means that the output of a mapping should not be a **MechanicalObject** (the only implementation of State that store velocities, AFAIK)**_. ---. It should be more clearer on why there are MechanicalVisitors which still calls mechanical functions on flagged non-mechanical mappings, i.e why the ignore flag is true for MechanicalPropagateDxVisitor in FreeMotionAnimationLoop for example. https://github.com/sofa-framework/sofa/blob/7a56c190fb8d293b1943006673ea43bb14844e65/Sofa/Component/AnimationLoop/src/sofa/component/animationloop/FreeMotionAnimationLoop.cpp#L392",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4399:1179,clear,clearer,1179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4399,1,['clear'],['clearer']
Usability,"#1527 . based on:; - #2717 (for one file moved in core). Deprecates partially _SofaBoundaryCondition_. Gathers all other forcefields which applies **external** force on mechanical objects. (torsion, compression, etc). https://mechanicalengineering.blog/types-of-loads/. I chose `MechanicalLoad` because of (https://en.wikipedia.org/wiki/Mechanical_load) and it seems an official term but I was hesitating also with `ExternalForce` (because these components set external forces on objects) ; Could have been simply `Load` as well, but there are other type of Load: electrical load for example. EDIT: create a new sub module for FEM, called **FEM.Damping**, which gathers DampingFF; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2783:507,simpl,simply,507,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2783,1,['simpl'],['simply']
Usability,"#1626 generalized the use of RGBAColor instead of Vec4f to select a color.; And all the functions were deprecated (but still usable) until the v21.06. For the upcoming release of v21.06, those functions have been deleted, but their definitions are still there, to inform the user how to fix the compilation error. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2197:125,usab,usable,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2197,1,['usab'],['usable']
Usability,#2812 showed that a lot of engines are undocumented/unclear/duplicated.; Some serious refactoring/cleanup should be considered. List of all engines: . <html><body>; <!--StartFragment--><google-sheets-html-origin><!--td {border: 1px solid #ccc;}br {mso-data-placement:same-cell;}-->. Component | SubCategory; -- | --; AverageCoord.h | Analyze; ClusteringEngine.h | Analyze; Distances.h | Analyze; HausdorffDistance.h | Analyze; ShapeMatching.h | Analyze; SumEngine.h | Analyze; ExtrudeEdgesAndGenerateQuads.h | Generate; ExtrudeQuadsAndGenerateHexas.h | Generate; ExtrudeSurface.h | Generate; GenerateCylinder.h | Generate; GenerateGrid.h | Generate; GenerateRigidMass.h | Generate; GenerateSphere.h | Generate; GroupFilterYoungModulus.h | Generate; JoinPoints.h | Generate; MergeMeshes.h | Generate; MergePoints.h | Generate; MergeSets.h | Generate; MergeVectors.h | Generate; MeshBarycentricMapperEngine.h | Generate; MeshClosingEngine.h | Generate; NormalsFromPoints.h | Generate; NormEngine.h | Generate; RandomPointDistributionInSurface.h | Generate; Spiral.h | Generate; BoxROI.h | Select; ComplementaryROI.h | Select; IndicesFromValues.h | Select; MergeROIs.h | Select; MeshBoundaryROI.h | Select; MeshROI.h | Select; MeshSampler.h | Select; MeshSplittingEngine.h | Select; MeshSubsetEngine.h | Select; NearestPointROI.h | Select; PlaneROI.h | Select; PointsFromIndices.h | Select; ProximityROI.h | Select; SelectConnectedLabelsROI.h | Select; SelectLabelROI.h | Select; SphereROI.h | Select; SubsetTopology.h | Select; ValuesFromIndices.h | Select; ValuesFromPositions.h | Select; DifferenceEngine.h | Transform; DilateEngine.h | Transform; DisplacementMatrixEngine.h | Transform; IndexValueMapper.h | Transform; Indices2ValuesMapper.h | Transform; MapIndices.h | Transform; MathOp.h | Transform; ProjectiveTransformEngine.h | Transform; QuatToRigidEngine.h | Transform; RigidToQuatEngine.h | Transform; ROIValueMapper.h | Transform; SmoothMeshEngine.h | Transform; TransformEngine.h | Transfor,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2906:39,undo,undocumented,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2906,1,['undo'],['undocumented']
Usability,) :; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 39.40 89.65 53.81 3.72 53810.7 100 TOTAL; 1 0 1 39.40 89.63 53.81 3.72 53.81 99.99 .Simulation::animate; 2 0.01 1 0 0.02 0 0 0 0 ..BehaviorUpdatePositionVisitor; 2 0.01 1 0 0.02 0 0 0 0.01 ..UpdateInternalDataVisitor; 2 0.01 1 0 0.04 0.01 0 0.01 0.01 ..resetConstraint; 2 0.02 1 0 0.07 0 0 0 0 ..collision; 2 0.02 1 0 0 0 0 0 0 ..propagateIntegrateBeginEvent; 2 0.03 1 0 0.02 0 0 0 0 ..beginIntegration; 2 0.03 1 0 0.06 0 0 0 0 ..buildConstraintMatrix; 2 0.03 1 0 0.02 0 0 0 0.01 ..accumulateMatrixDeriv; 2 0.04 1 39.17 89.35 53.58 3.72 53.58 99.57 ..solve; 3 0.04 1 39.17 89.34 53.57 3.72 53.57 99.56 ...Mechanical; 4 0.07 1 2.11 3.55 2.36 0.14 2.36 4.38 ....ComputeForce; 4 2.42 1 1.14 3.35 1.30 0.18 1.30 2.41 ....ComputeRHTerm; 4 3.72 1 33.78 68.54 35.78 1.50 35.78 66.50 ....MBKBuild; 5 3.73 1 33.77 68.51 35.78 1.50 35.78 66.48 .....CG-setSystemMBKMatrix; 6 3.73 1 0.03 0.14 0.04 0.01 0.04 0.07 ......getContributors; 6 3.77 1 0.02 0.21 0.02 0.01 0.02 0.04 ......buildMappingGraph; 6 3.79 1 0.26 1.60 0.70 0.10 0.70 1.29 ......InitializeSystem; 7 3.79 1 0.09 1.18 0.36 0.06 0.36 0.67 .......resizeSystem; 7 4.16 1 0.01 0.69 0.30 0.04 0.30 0.56 .......clearSystem; 7 4.46 1 0.02 0.17 0.02 0.01 0.02 0.05 .......initializeLocalMatrices; 6 4.49 1 33.12 68.12 35.01 1.48 35.01 65.06 ......AssembleSystem; 7 4.49 1 33.09 47.99 34.95 1.13 34.95 64.95 .......buildMatrices; 8 4.49 1 32.71 47.75 34.52 1.10 34.52 64.16 ........buildStiffness; 8 39.02 1 0.23 1.13 0.41 0.08 0.41 0.77 ........buildMass; 8 39.43 1 0 0.02 0 0 0 0.01 ........buildDamping; 8 39.44 1 0 0.02 0 0 0 0 ........buildGeometricStiffness; 7 39.44 1 0 0 0 0 0 0 .......projectMappedMatrices; 7 39.44 1 0.02 20.12 0.05 0.63 0.05 0.09 .......applyProjectiveConstraint; 4 39.51 1 0.85 21.84 14.06 3.56 14.06 26.13 ....MBKSolve; 5 39.83 1 0.51 21.43 13.67 3.56 13.67 25.41 .....CG-Solve; 4 53.57 1 0.02 0.07 0.02 0 0.02 0.05 ....UpdateVAndX; ```. Thanks for having tried!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532:3724,clear,clearSystem,3724,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532,2,['clear'],['clearSystem']
Usability,"* Added getter for ContactsVector. Added a buffer variable that is overwritten before ContactsVector is cleared. Added functions to retrieve the number of contacts and their respective distance values in the buffer. * added a check before trying to access contact information. Added a function to also retrieve a list of collision point pairs. * Simplified code a bit, by moving the check up in the hierarchy. * Added a getter function to retrieve the element ids of the collision models. This can be used to lookup the ids in a MechanicalObject that are affected by a contact from a topology (get elements -> lookup MO ids in topology -> lookup points in MO). Also added some Docstrings. * Exchanged push_back with emplace_back and sped up code by reserving memory for vectors. * Replaced Vector3 from helper with Vector3 from defaulttypes. * Changed unsigned int to sofa::Size and placed curly brackets on new line. #1678 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1683:104,clear,cleared,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1683,2,"['Simpl', 'clear']","['Simplified', 'cleared']"
Usability,"**Preliminary work before changing ""a little"" the TopologyChange API.**; Rename some classes to match their file names :; - TopologyDataImpl into TopologyData; - TopologySubsetDataImpl into TopologySubsetData; - TopologySparseDataImpl into TopologySparseData. Rename files:; - core/topology/BaseTopologyEngine into core/topology/TopologyEngine as the class was TopologyEngine ; - SofaBaseTopology/TopologyEngine into TopologyDataEngine. Use alias template to simplify code of TopologyData and change inheritence of TopologySubsetData and TopologySparseData to factorize some code. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1872:459,simpl,simplify,459,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1872,1,['simpl'],['simplify']
Usability,"**[Only Windows/MSVC]**. I cannot explain at all 👺. On MSVC2022(17.7.4) and Release mode, a crash happens with `examples/Demos/fallingBeamLagrangianCollision.scn` when a collision occurs. It crashes when trying to insert values in the triplets vector (suspecting a memory error somewhere). Weirdly, it does not crash in RelWithDebug mode 🤐. ; *And* it does not crash as well on MSVC2019, as the CI (jenkins) uses it in release mode while testing the scene. At the code generation time (compiler?optimizer?) it does throw a warning like:; `1>C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector(398): warning C4789: buffer 'triplets' of size 16 bytes will be overrun; 8 bytes will be written starting at offset 16`; only in Release mode. --. Two fixes possible (found by trial-and-error 🤡); - using std::vector instead of sofa::type::vector; - using a struct instead of the tuple; ; I used the std::vector one as it was the simplest. I suspect there is a bug(???)/issue with the optimizer/vectorizer of MSVC , or the allocator but i cannot prove anything 🙊. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4180:967,simpl,simplest,967,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4180,1,['simpl'],['simplest']
Usability,+1 for UX improvement of such importance.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1573757731:7,UX,UX,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1573757731,2,['UX'],['UX']
Usability,+1. . We probably simply need to install the autodump trick somewhere in Sofa_test.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/149#issuecomment-276515093:18,simpl,simply,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/149#issuecomment-276515093,2,['simpl'],['simply']
Usability,"+1; Having a clean, generic and intuitive method for marchingCube would be awesome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339449132:32,intuit,intuitive,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339449132,2,['intuit'],['intuitive']
Usability,", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_f (VecDeriv(mo->getSize(), {0, 0, 0}));; DataVecDeriv d_f_dia (VecDeriv(mo->getSize(), {0, 0, 0}));. sofa_mass->addForce(&mechanical_parameters, d_f_sofa, mo->x, mo->v);; sofa_mass_diagonal->addForce(&mechanical_parameters, d_f_sofa_dia, mo->x, mo->v);. // Map residual vectors with Eigen to facilitate norm computations; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f ((d_f.getValue().data()->data()), mo->getSize(), 3);; Eigen::Map<const Eigen::Matrix<Real, Eigen::Dynamic, 3, Eigen::RowMajor>> f_dia ((d_f_dia.getValue().data()->data()), mo->getSize(), 3);. // Compare the norms; EXPECT_DOUBLE_EQ(f.norm(), f_dia.norm());; }; ```. > Maybe the used topology doesn't have edges?. An edge topology should not change anything here. We are integrating the mass density times g over the volumetric domain (tetra). If you are adding edges, then you are integrating a second time the region of an edge (the edge is a part of the tetra's volume). Let me know if something isn't clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:3002,clear,clear,3002,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585,2,['clear'],['clear']
Usability,",. I just had a look in the code and the associated paper ([link](https://hal.inria.fr/file/index/docid/394480/filename/NPF05.pdf)). @alxbilger, there are two `computeStress` methods in TriangularFEMForceField, with the following signatures :; ```; void computeStress(type::Vec<3,Real> &stress, Index elementIndex);; ```; and; ```; void computeStress(type::Vec<3,Real> &stress, const MaterialStiffness &K, const type::Vec<3,Real> &strain);; ```; Only the first one seems to use the same pattern as in `computeForce` (with the call to `computeStrainDisplacement` conditioned by `_anisotropicMaterial`), in case of small deformation, which is - as you pointed out - incoherent with what is in `computeForce`.; However this `computeStress` method with this signature is apparently used only in ; ```; void computeStressAlongDirection(Real &stress_along_dir, Index elementIndex, const Coord &direction);; ```; which itself is used only in both `computeStressAcrossDirection` methods, and (finally) these are apparently not called anywhere.; So, _bottomline_: even though the code in `computeStress` is incoherent with the code in `computeForce`, it's actually not used and - I guess - should be cleaned rather than made coherent. Regarding the initial issue, what I understand from the paper is that the strain-displacement matrix **should be updated at each time step** in case of large deformations. It seems to be clearly stated in the introduction, and demonstrated later in the text (section 2.3). I have a doubt if this is necessary in case of small displacement (for me the paper focuses on large deformation), but even in this case, the current implementation is not coherent (the update should be made in case of large displacement and could be saved in case of small displacement).; I think it's worth highlighting that it was actually the case at first, but it seems to have been changed in this [commit](https://github.com/sofa-framework/sofa/commit/b7d68ef394f703957e7a00037f88d7abeed82d24).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056847653:1418,clear,clearly,1418,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056847653,2,['clear'],['clearly']
Usability,"- Clean the files; - Add simple tests; - Add constructor for initializer lists. Allow to write concise object creation; - Allow builder pattern through the `setSelectedItem` methods. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3737:25,simpl,simple,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737,1,['simpl'],['simple']
Usability,- Documentation should be updated; - User (scene) API could be simplified/clarified (one broad and one narrow phase component in the scene),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2048:63,simpl,simplified,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2048,1,['simpl'],['simplified']
Usability,"- Fix compilation and CMakeLists of the plugin before moving it out from SOFA repository. OpenCTM seems not to be supported anymore but some project are still using it. ; I will move that plugin into my github repo embedding directly OpenCTM lib. ; Unless you think it is of any use on sofa-framework repository. FYI: OpenCTM — the Open Compressed Triangle Mesh file format — is a file format, a software library and a tool set for compression of 3D triangle meshes. The geometry is compressed to a fraction of comparable file formats (3DS, STL, VRML, COLLADA...), and the format is easily accessible through a simple, portable API. http://openctm.sourceforge.net/. I was using it for WebGL as this format is slim and quick to load.; See for example here:; https://alteredqualia.com/three/examples/webgl_loader_ctm_materials.html. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1359:611,simpl,simple,611,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1359,1,['simpl'],['simple']
Usability,"- Fix link issues because of missing *_API; - Follow naming guidelines + depreciation of old variables; - OglGrid uses a cached list of vertices; - Use of `saveLastState` and `restoreLastState`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3115:60,guid,guidelines,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115,1,['guid'],['guidelines']
Usability,"- Move both scenes as they are using several components from the plugin to illustrate SPH behavior and rendering.; - Add a simple rendering version of PointSplatModel scene in examples:. ![PointSplatModel_00000001](https://user-images.githubusercontent.com/21199245/162045768-58ee77d5-6127-4e6d-996f-8f4ffc5aba4c.png). ![PointSplatModel_00000002](https://user-images.githubusercontent.com/21199245/162045788-965a7e35-a306-4b52-82c8-e4ceeeb5a124.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2847:123,simpl,simple,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2847,1,['simpl'],['simple']
Usability,"- PoissonContainer/StiffnessContainer are already present in SofaSimpleFem; - It should follow guidelines from PluginExample (name, folder, etc)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270:95,guid,guidelines,95,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1618#issuecomment-741665270,2,['guid'],['guidelines']
Usability,"- Reformat based on the guidelines; - Fix memory leak (material not freed); - Use accessors instead of beginEdit/endEdit; - Use refs instead of copies; - Add component state support; - Compute bounding box from the mstate function; - Add const when possible. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3141:24,guid,guidelines,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3141,1,['guid'],['guidelines']
Usability,"- Simplify instructions in ConstraintSolver; - Fix scene sofa_1000PR.scn (and make it multithreaded). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2138:2,Simpl,Simplify,2,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2138,1,['Simpl'],['Simplify']
Usability,"- Task #3770 . Main goal is to remove the ObjectFactory singleton (later) ***and*** the implicit registration of objects while loading dynamic libraries (plugins). In this PR, the explicit registration is applied on components of `Sofa.Component.StateContainer`. The legacy RegisterObject mechanism is preserved and will warn the user at the compilation and at run-time. EDIT:. - add tests about plugins non-registering/registering implicitly/registering explicitly; - add deprecations/warnings in RequiredPlugin; - add a function registerPlugin in PluginManager. This function is simply an alias for loadPlugin() because loadPlugin() does much more than just loading a plugin by itself. In an eventual future, PluginManager should be refactored in a way that loadPlugin calls registerPlugin(). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4429:581,simpl,simply,581,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4429,1,['simpl'],['simply']
Usability,"- Use `sofa_add_module` intensively for all new NG modules.; - Use `sofa_add_collection` for all old modules that are now simple collections.; - Make Sofa.GUI a real module.; - Fix disabled targets inclusion in SDK. :warning: This PR changes basically all CMake option names. E.g. `PLUGIN_SOFAGENERALLOADER` becomes `COLLECTION_SOFAGENERALLOADER`. The good thing is that it's way clearer. This PR also contains the same fix as #3103. EDIT ; New changes:; - Move Sofa.GL module under Sofa directory; - SofaKernel is gone.; - Everything was moved under applications/collections/deprecated; - New cosmetic feature in SofaMacros to hide sub-options when base-option is disabled (like cmake_dependent_option but simpler). E.g. when I disable SOFA_COMPONENT, all SOFA_COMPONENT_* are hidden.; - A bit of cleaning. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120:122,simpl,simple,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120,3,"['clear', 'simpl']","['clearer', 'simple', 'simpler']"
Usability,"- `DiscreteIntersection::testIntersection` and `DiscreteIntersection::computeIntersection` are made virtual, so derived classes can override them; - Comments; - Simplification; - Removed unused code (draw, unused variables etc); - Fix `MinProximityIntersection::computeIntersection` and `NewProximityIntersection::computeIntersection` on cubes; - Fix compilation warnings. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2178:161,Simpl,Simplification,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2178,1,['Simpl'],['Simplification']
Usability,"- `LinearSolverConstraintCorrection::F` is deprecated because it is not used. I believe it stopped to be used here: https://github.com/sofa-framework/sofa/commit/50fe60f28306912e0e853c0a9493bccdd9735ff7#diff-b0264445a2a81f648e146f0b1d59d5d197cf3a935f3b7cbb24af11a38b8e6e68L433; - `override` keyword was missing in `~LinearSolverConstraintCorrection`; - `LinearSolverConstraintCorrection::J` is renamed to `m_constraintMatrix`. Its floating-type is no longer `SReal`, but `Real`. In theory, it's breaking.; - `computeJ` is no longer used. Instead, I introduce the method `convertConstraintMatrix`, which is IMO clearer. `computeJ` could be removed I think. But for some reasons it is virtual. Anyone overrides it?; - Added a timer in `convertConstraintMatrix`. This must be used for benchmark to evaluate the cost of the conversion. I believe that we can think of a way to avoid the conversions (only if it costs too much).; - `MatrixLinearSolverInternalData::copyJmatrix` is renamed to `convertMatrix` and it is now protected.; - Made `getLocalJ` clearer.; - Added details for `addJMInvJt`; - Introduced rebind types for `CompressedRowSparseMatrixConstraint`, `CompressedRowSparseMatrixGeneric` and `CompressedRowSparseMatrixMechanical`; - `CompressedRowSparseMatrixConstraint`: added test for the stream operator. The operator no longer adds trailing spaces on each line.; - Better iterators in `CompressedRowSparseMatrixConstraint`; - Missing header guard in `CompressedRowSparseMatrixConstraintEigenUtils.h`; - Fixed `operator()` in `CompressedRowSparseMatrixToEigenSparseVec`. Also added error message if out-of-bounds. Required for https://github.com/sofa-framework/SofaPython3/pull/459; - Introduction of `is_specialization_of`. Used in [a SofaPython3 PR](https://github.com/sofa-framework/SofaPython3/pull/459). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Orig",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5017:610,clear,clearer,610,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5017,1,['clear'],['clearer']
Usability,"- clean (const, foreach loop); - optimize a little bit when initializing the normals vector; - if there is not index, use memset to clear all vectors at once; - if there are indices, just dont clear the new vectors as there are supposed to be 0 already. On a big mesh (315k vertices and 620k triangles) and mapped (to force the call to computeNormals); - before `1000 iterations done in 14.95 s ( 66.8896 FPS).`; - after `1000 iterations done in 14.075 s ( 71.048 FPS)`. The case is not really usual as it needs huge meshes to see the difference ; and mappings will certainly takes much more time. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3805:132,clear,clear,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3805,2,['clear'],['clear']
Usability,"- clean and optimize `StiffSpringForceField::addKToMatrix`; - Introduce simpler scene showing StiffSpringForceField. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2429:72,simpl,simpler,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2429,1,['simpl'],['simpler']
Usability,"- redundant accessibility specifier; - constexpr variables; - make functions const; - type traits simplification; - explicit deleted functions. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2461:98,simpl,simplification,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2461,1,['simpl'],['simplification']
Usability,- there are some different kind of ` { ... } ` against the guidelines but it was there before so it is not really the point of the PR; - I would put the content of the specialized(?) inl files directly into the associated cpp.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1225431851:59,guid,guidelines,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1225431851,2,['guid'],['guidelines']
Usability,"... and DualQuat. ## Description:; Move all Quaternion-related classes (and DualQuat) to the new Sofa.Type module.; Like #1734 There is a compatibility layer for transition, so it should be as least breaking as possible.; Remove helper::Quater/defaulttype::Quat thingy, really confusing (name ""Quater"" does not make any sense). - sofa::helper::Quater<T> becomes sofa::type::Quat<T>; - sofa::defaulttype::Quat (typedef) becomes ... ?; - sofa::helper::DualQuat becomes sofa::type::DualQuat. ## Breaking; - Remove a constructor with RigidType for DualQuat.; As DualQuat is only used in Flexible, not a big deal.... ## Talking; - Previous point: DualQuat is only used in Flexible, should it be simply moved there ?; - fact that Quat is now a template (was a typedef without template before) could be confusing ?. ## Note; Forgot wrapping redirection from MatSym, the fact that there was no error before means that it is not used at all... Mandatory to mention: #1521. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1790:690,simpl,simply,690,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1790,1,['simpl'],['simply']
Usability,"... by making optional SofaValidation (as its remaining components are deprecated). The ifdef is a bit ugly but some refactoring are needed to add futures features like this (instead of adding getXXX and getNbXXX for each type of component in the API). Some cleanups for the cmake file itself (more up-to-date Sofa cmake syntax) and the dependencies. small user experience question:; - Should Sofa.component be forcefully linked with it? so the user knows that all components are available from the start; - or should the actual dependencies be managed by the user afterwards in its application?. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3091:357,user experience,user experience,357,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3091,1,['user experience'],['user experience']
Usability,"...instead of assign operator + defaultconstructor (which in fine do the same clear() function). Micro optimization but still 😗; (nice french idiom for that: ""ça ne mange pas de pain""). (on examples/Components/DiagonalMass.scn); Before:; ![Capture1](https://user-images.githubusercontent.com/11028016/144096997-260f4c68-2784-4b9a-a71b-869ad5536567.PNG); After:; ![Capture2](https://user-images.githubusercontent.com/11028016/144097259-7a1640be-2697-47d3-a94a-2fa73b84a002.PNG). _______________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2518:78,clear,clear,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2518,1,['clear'],['clear']
Usability,"1- SofaGeneralEngine wanted TextureInterpolation which is compiled only if Sofa.GL is activated (i.e SOFA_NO_OPENGL false); Weird thing is that those tests were in SofaEngine, I dont even know how it could compile before ⁉⁉; So I moved the EngineTest from SofaEngine to SofaGeneralEngine, as it is only compiling SofaGeneralEngine things anyway. 2- replace the use of the macro SOFA_NO_OPENGL with find_package(Sofa.GL) + Sofa.GL_FOUND in the modules cmake (clearer). 3- fix the compilation error with runSofa (which wanted the gl header even it is not using any opengl...). **Allow the compilation of sofa-minimal on the CI.**. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1743:458,clear,clearer,458,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1743,1,['clear'],['clearer']
Usability,"3 0 0 0 0.01 ..UpdateInternalDataVisitor; 2 0.01 1 0 0.04 0.01 0 0.01 0.01 ..resetConstraint; 2 0.02 1 0 0.02 0 0 0 0 ..collision; 2 0.03 1 0 0.03 0 0 0 0 ..propagateIntegrateBeginEvent; 2 0.03 1 0 0.02 0 0 0 0 ..beginIntegration; 2 0.03 1 0 0.07 0 0 0 0 ..buildConstraintMatrix; 2 0.03 1 0 0.03 0.01 0 0.01 0.01 ..accumulateMatrixDeriv; 2 0.04 1 40.07 109.99 72.48 8.91 72.48 99.65 ..solve; 3 0.04 1 40.07 109.98 72.47 8.90 72.47 99.65 ...Mechanical; 4 0.07 1 2.07 4.47 2.45 0.33 2.45 3.37 ....ComputeForce; 4 2.52 1 1.11 3.14 1.37 0.29 1.37 1.89 ....ComputeRHTerm; 4 3.89 1 34.04 71.94 36.80 2.11 36.80 50.60 ....MBKBuild; 5 3.90 1 34.03 71.91 36.79 2.11 36.79 50.58 .....CG-setSystemMBKMatrix; 6 3.90 1 0.03 0.21 0.04 0.01 0.04 0.05 ......getContributors; 6 3.94 1 0.02 0.17 0.02 0.01 0.02 0.03 ......buildMappingGraph; 6 3.96 1 0.25 2.56 0.72 0.17 0.72 0.98 ......InitializeSystem; 7 3.97 1 0.06 1.35 0.36 0.10 0.36 0.50 .......resizeSystem; 7 4.33 1 0.01 1.22 0.32 0.08 0.32 0.44 .......clearSystem; 7 4.65 1 0.02 0.27 0.03 0.01 0.03 0.04 .......initializeLocalMatrices; 6 4.68 1 33.38 71.55 36 2.08 36 49.49 ......AssembleSystem; 7 4.68 1 33.35 49.36 35.94 1.80 35.94 49.41 .......buildMatrices; 8 4.68 1 32.79 49.09 35.44 1.78 35.44 48.72 ........buildStiffness; 8 40.13 1 0.25 1.33 0.49 0.12 0.49 0.67 ........buildMass; 8 40.61 1 0 0.02 0 0 0 0.01 ........buildDamping; 8 40.62 1 0 0.02 0 0 0 0 ........buildGeometricStiffness; 7 40.62 1 0 0.02 0 0 0 0 .......projectMappedMatrices; 7 40.63 1 0.02 22.18 0.05 0.70 0.05 0.07 .......applyProjectiveConstraint; 4 40.69 1 1.38 43.66 31.78 8.31 31.78 43.69 ....MBKSolve; 5 41.19 1 0.92 43.15 31.20 8.30 31.20 42.90 .....CG-Solve; 4 72.48 1 0.02 0.15 0.03 0.01 0.03 0.04 ....UpdateVAndX; ```. ```; ParallelCGLinearSolver template=""ParallelCompressedRowSparseMatrixMat3x3d"". [INFO] [BatchGUI] 1000 iterations done in 53.883 s ( 18.5587 FPS). Steps Duration Statistics (in ms) :; LEVEL START NUM MIN MAX MEAN DEV TOTAL PERCENT ID; 0 0 1000 39.40 89.6",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532:1568,clear,clearSystem,1568,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717164532,2,['clear'],['clearSystem']
Usability,"3) Shouldn't we remove the ""call-super"" ? ; The code and PR makes use of what we call the ""call super""design patern in which an specialization or an in-herited class must call its parent/general implementation to behave correctly. I think the PR contains a variation for ""template"" of this pattern with the unspecializedInit(). In most of the case I noticed that the ""call super"" was a bad design choice as it delegate the ""validity"" of the implementation to the child/specialization instead of enforcing the behavioral validity by code structure. ; Example of the call super ""design""; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial(); ; virtual void init(); {; doSomethingCrucial();; }; }. class UserImplementation : GeneralImplementation; {; public:; virtual void init(); {; GeneralImplementation::init(); ; }; }; ```; And how it can be change to prevent mis-implementation:; ```cpp; class GeneralImplementation; {; public:; void doSomethingCrucial();; void init(); {; doSomethingCrucial();; doInit(); ; }; ; protected:; virtual void doInit() = 0; ; }. class UserImplementation : GeneralImplementation; {; public:; final void doInit() override; {; /// my specific things; }; }; ```; I don't know if this could/may/must be applied to BilateralInteractionConstraint...but at first sight it looks like a good sanbox. . 4) Mixing reset/init; I see that reset() is actually calling init(). To me this leads to a lot of fuzzyness in which it is not clear what are the purpose of these function. Maybe it is possible to rework that part to make clear what are the specific role of the API entry points. This probably requires to clarify what reset is supposed to do (and this is probably not strictly equivalent to init()). . 5) Extra side notes:; I would recommand deprecating all handleEvent implementation by printing a deprecation message saying that you need to use ; a separated controller. Because...well this is just a non-sense to have hardcoded keycode and UX concerns.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614:3091,clear,clear,3091,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614,6,"['UX', 'clear']","['UX', 'clear']"
Usability,"71 1 2.69 6.72 3.08 0.34 3.08 5.17 .......J1tKJ2; 7 21.79 1 0.39 1.20 0.42 0.06 0.42 0.71 .......J2tKJ1; 6 22.21 1 2.29 4.73 2.67 0.16 2.67 4.48 ......J1tKJ1-copy; 6 24.88 1 0 0.02 0 0 0 0 ......J2tKJ2-copy; 6 24.88 1 0.01 0.04 0.01 0 0.01 0.02 ......J1tKJ2-copy; 6 24.90 1 0.01 0.07 0.02 0 0.02 0.04 ......J2tKJ1-copy; ```. The speed up is quite disappointing. But the benchmarks explain it. The speed up depends on the size of the matrix, the sparsity and overall on the size of the intersection.; Yet, there is a speedup. And compared to the reference timings before the series of optimizations (https://github.com/sofa-framework/sofa/pull/2362), `MechanicalMatrixMapper` is about twice faster (in the example). Some notes:. - I added a skeleton to also support product of `CompressedRowSparseMatrix`, but it is not implemented yet. In `MechanicalMatrixMapper`, a `CompressedRowSparseMatrix` is converted to Eigen to do the product. It is not clear yet if the copy to Eigen is required if we are able to perform the fast product on a `CompressedRowSparseMatrix`. So, an implementation of the fast product of `CompressedRowSparseMatrix` may be introduced in the future. Otherwise, I'll remove the files.; - This work has been started by @Esther-R during her internship; - Contrary to the regular product, the product using the intersection can be parallelized for more speed up.; - More speed up in `MechanicalMatrixMapper` using multithreading can be considered. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2394:3957,clear,clear,3957,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2394,1,['clear'],['clear']
Usability,"; index 2f00fe62dc..782ce854ce 100644; --- a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp; +++ b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp; @@ -72,6 +72,7 @@ MeshLoader::MeshLoader() : BaseLoader(); , d_rotation(initData(&d_rotation, Vec3(), ""rotation"", ""Rotation of the DOFs"")); , d_scale(initData(&d_scale, Vec3(1.0, 1.0, 1.0), ""scale3d"", ""Scale of the DOFs in 3 dimensions"")); , d_transformation(initData(&d_transformation, type::Matrix4::s_identity, ""transformation"", ""4x4 Homogeneous matrix to transform the DOFs (when present replace any)"")); + , d_dataset1(initData(&d_dataset1, ""dataset1"", ""Data from dataset"")); , d_previousTransformation(type::Matrix4::s_identity ); {; addAlias(&d_tetrahedra, ""tetras"");; @@ -184,6 +185,8 @@ void MeshLoader::clearBuffers(); getWriteOnlyAccessor(d_pyramidsGroups).clear();; getWriteOnlyAccessor(d_polygonsGroups).clear();; ; + getWriteOnlyAccessor(d_dataset1).clear();; +; doClearBuffers();; }; ; diff --git a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h; index d972c27d75..5fc1d75345 100644; --- a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h; +++ b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h; @@ -183,6 +183,7 @@ public:; Data< Vec3 > d_scale; ///< Scale of the DOFs in 3 dimensions; Data< type::Matrix4 > d_transformation; ///< 4x4 Homogeneous matrix to transform the DOFs (when present replace any); ; + Data< type::vector< SReal > > d_dataset1; ///< mesh dataset; ; virtual void updateMesh();; virtual void updateElements();; diff --git a/SofaKernel/modules/SofaLoader/src/SofaLoader/MeshVTKLoader.cpp b/SofaKernel/modules/SofaLoader/src/SofaLoader/MeshVTKLoader.cpp; index fcf73fb5f2..241067ea0b 100644; --- a/SofaKernel/modules/SofaLoader/src/SofaLoader/MeshVTKLoader.cpp; +++ b/SofaKernel/modules/SofaLoader/src/SofaLoader/MeshVTKLoader.cpp; @@ -504,6 +504,27 @@ bool MeshVTKLoader::setInpu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:3521,clear,clear,3521,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,1,['clear'],['clear']
Usability,"> * @fredroy: What should we do with NonUniformHexahedronFEMForceFieldDensity? Its reference is commented in the CMakeLists. I did not touch it.; > . IMO:; - nobody complained about its absence in the project since... ?; - no relevant commits since a loooooooong time; - no example; - almost no doc (although a paper citation is present); - obviously no test; - it needs a kind of file (density volume), but we dont even know the format/standard, and if there is one in the repo already... I would simply delete it 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2333#issuecomment-916716382:498,simpl,simply,498,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2333#issuecomment-916716382,2,['simpl'],['simply']
Usability,> 1. Is `iterationCounter` reset when you press the reset button?; > ; It is reset to 0 in method: void RealGUI::resetScene(). > 2. What's the difference between `iterationCounter` and `frameCounter`?. the only diff I see is that frameCounter is reset to 0 when you pause/play the scene. I assume it is just used as counter for the FPS calculation. You could remove this reset to 0 and use it instead of the new iterationCounter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2742#issuecomment-1081495442:266,pause,pause,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2742#issuecomment-1081495442,2,['pause'],['pause']
Usability,"> 1. We could probably rename the ""**EulerSolver.h**"" and ""**EulerSolver.cpp**"" files to ""**EulerExplicitSolver.h**"" and ""**EulerExplicitSolver.cpp**"" to follow the name of the class.; > ; > 2. Maybe we could factor the sympletic option as a new time integrator class? I think it would be much clearer to have, for example,; > ; > ; > ```; > <EulerExplicitSolver />; > <EulerImplicitSolver />; > <EulerSemiImplicitSolver />; > ```; > ; > and might speak to more people. I definitively agree with both your suggestions.; I also thought about your second suggestion, and it was my plan to talk about it during the next dev meeting. The problem I see is that `EulerExplicitSolver` is by default symplectic. So, applying your suggestion would change the ODE solver when the user write `<EulerExplicitSolver />`. Let's discuss it on Wednesday.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855629658:294,clear,clearer,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855629658,2,['clear'],['clearer']
Usability,"> ; > ; > > Can we take the opportunity to renaming it `d_useRestPosition` ?; > ; > I'm not sure it's a good idea to transform a fix into a breaking change. Waiting for @fredroy insight 🔍. Exactly my thoughts.; Wondering the fact that indeed this is badly needed BUT it will be breaking. Arguments for renaming:; - does not follow the guideline and the other Data<> in BarycentricMapping are following it,; - referenced only **ONCE** in the whole sofa code base; - does not breaking anything scene-wise (the stringName wont change). Arguments for not renaming:; - breaking plugins using this Data<> directly. Conclusion: ; My opinion would be to rename it indeed 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797:335,guid,guideline,335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-802790797,2,['guid'],['guideline']
Usability,"> ; > ; > > EDIT: I ran the performance monitor of VS and indeed it takes a lot of time in the resize() function of MechanicalObject; > ; > Indeed, this looks like a nice bug 😎; > ; > However, I'm not sure this is impacting the _simulation_ time. The same multivectors are used (x_rest, x, v, etc.) and the newly (and very wrongly) created vectors are simply, well, created...; > ; > But we must definitely fix this bug 😁. Agreed for the simulation time itself, but the created vectors are not only created; in the resize function, it tried to resize ALL the vectors every time step, so after a thousand steps for example, it tried to resize like 2000 vectors... Interestingly, the useless vectors are all V_DERIV so something related to the velocities?; ![Capture_collis2](https://user-images.githubusercontent.com/11028016/118618533-03ca6180-b7c4-11eb-9332-0ce4c316fc23.PNG)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842970198:352,simpl,simply,352,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842970198,2,['simpl'],['simply']
Usability,"> ; > ; > > I also changed the code in GLBackend.cpp to remove the ""background is moving when I resize the window"" effect.; > > ```c++; > > double coordWidth = int(screenWidth / w) + 1;; > > double coordHeight = int(screenHeight / h) + 1;; > > ; > > glColor3f(1.0f, 1.0f, 1.0f);; > > glBegin(GL_QUADS);; > > glTexCoord2d(0.0, 0.0); glVertex3d( -w*coordWidth, -h*coordHeight, 0.0 );; > > glTexCoord2d(coordWidth*2.0, 0.0); glVertex3d( w*coordWidth, -h*coordHeight, 0.0 );; > > glTexCoord2d(coordWidth*2.0, coordHeight*2.0); glVertex3d( w*coordWidth, h*coordHeight, 0.0 );; > > glTexCoord2d(0.0, coordHeight*2.0); glVertex3d( -w*coordWidth, h*coordHeight, 0.0 );; > > glEnd();; > > ```; > > ; > > ; > > @fredroy could you review this before I push it in the PR please ?; > ; > `double coordWidth = int(screenWidth / w) + 1;`; > will give warning conversion and why +1 ?. +1 because we want to know how many entire textures we have to display to cover **at least** screenWidth and screenHeight. Thus we do an integer division and add 1 to handle all the cases where `screenWidth % w != 0` (almost all the cases actually).; Not sure this was very clear :eyes:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1758#issuecomment-772368085:1143,clear,clear,1143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1758#issuecomment-772368085,2,['clear'],['clear']
Usability,"> ; > ; > > I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > > ```c++; > > #include <MultiThreading/config.h>; > > ...; > > #include <MultiThreading/Tasks.h>; > > ```; > > ; > > ; > > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face; > ; > How can it compile?. If it is not included, it is not compiled.; My guess is that this file was included in Multithreading, or is included in a private plugin using Multithreading (thus enabling `-I/path/to/Multithreading`)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503:399,usab,usable,399,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816468503,2,['usab'],['usable']
Usability,"> ; > ; > > That's cool 👍 especially with scenes with dozens of falling things.... (and penalty contacts 😆); > > Just a thought: the 'collapse all' will obviously always show only root, maybe the 'collapse all' should show the first node (i.e root) still expanded ?; > ; > Yes, I also thought about it. I decided to keep it simple, but I don't mind doing your suggestion. Lets see what the other guys will say",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2322#issuecomment-912583213:324,simpl,simple,324,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2322#issuecomment-912583213,2,['simpl'],['simple']
Usability,> ; > ; > Did you try with an out-of-tree compilation of a plugin (e.g Python3) ? just in case. Yes but with a simpler plugin (MyAwesomeComponents). `find_package(SofaFramework)` passed 👌,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655:111,simpl,simpler,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2175#issuecomment-863303655,2,['simpl'],['simpler']
Usability,"> ; > ; > For now, I would say we could introduce a file into the SofaSimpleFEM module (the first module introducing the FEM in SOFA), with a name like FEMUtils.h (I am not good with names...). Inside you can put the functions (or a class with static functions) factorizing the code (I would say something like computeVonMisesFromElement() and drawVonMisesElements()). In fact TetrahedronFEMForceField and TetrahedralCorotationalFEMForceField should be merged. Historically the Tetrahedral is only a copy past with topological changes support. Now that topological changes are done using callbacks, the merge could be done by simply adding an option that will or won't registered the call back.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2185#issuecomment-875964434:626,simpl,simply,626,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2185#issuecomment-875964434,2,['simpl'],['simply']
Usability,"> ; > ; > Not that I want to that guy, but the code is quite copy-pasted from TetrahedronFEMForcefield (even the data name starts with '_' ) 🧐 . Wont it be possible to factorize the code with TetrahedronFEMForcefield or anything like that ?. of curse the answer is ""Yes, but..."" ; Like that is it not that simple because they have a totally different way to store the data. I see 2 methods that could be factorized.; - the computeVonMises which could take the data as parameter, but I don't know where it should be placed.; - the draw method, but it is too specific to be put in the drawTools. is there a ForceField toolkit or helper somewhere?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2185#issuecomment-863919176:306,simpl,simple,306,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2185#issuecomment-863919176,2,['simpl'],['simple']
Usability,> ; > ; > The changes have not been propagated everywhere @epernod; > ; > ```shell; > /builds/workspace/sofa-framework/PR-1495/mac_clang-3.5_options_release/src/modules/SofaGeneralLoader/SphereLoader.cpp:81:5: error: use of undeclared identifier 'radius'; did you mean 'd_radius'?; > radius.beginEdit()->clear();; > ^~~~~~; > d_radius; > ```. I don't see what you are speaking about...,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696641121:304,clear,clear,304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696641121,2,['clear'],['clear']
Usability,"> > * if it is input or output (for DataEngines); > ; > Isn't it defined by the group string? Input Data have the group ""Inputs"", and output ""Outputs"". I would say that being an input is because the Data has been added with DataEngine::addInput ... the fact it is in the group ""Inputs"" is just an UX choice.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4775#issuecomment-2162608418:297,UX,UX,297,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4775#issuecomment-2162608418,2,['UX'],['UX']
Usability,"> > > Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set.; > > ; > > ; > > We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!; > ; > There is something un-catholic there... So if I understand well, you have triangle in your topology that refer to point out of bound to your current node mechanicalObject? I don't understand how it can work. It will crash as soon as a component will try to access a dof passing through the topology no?. Sorry for the late reply!; So it is a case where the node where the subtopology is defined does not contain a MechanicalObject. It is only defined to add a ForceField applying onto a subpart of the node of the MechanicalObject. An example is in this scene: https://github.com/SofaDefrost/ModelOrderReduction/blob/master/tools/test/sofa_test_scene/quadruped.py",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1820989683:565,clear,clear,565,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1820989683,2,['clear'],['clear']
Usability,"> > However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?; > ; > This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:; > ; > 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; > ; > 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; > ; > 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not...; > ; > ; > This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices.; > ; > Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?; > ; > CC: @hugtalbot , @ChristianDuriez , @fjourdes. Thanks @jnbrunet for having looked on this issue. I rephrase your findings as a list of tasks to improve SOFA efficiency and accuracy:. - [ ] Remove EulerExplicitSolver::d_optimizedForDiagonalMatrix and replace it by fetching the result of Mass::isDiagonal; - [ ] CentralDifferenceSolver must be adapted to work with any type of mass matrix; - [ ] Implicit solvers must read the result of Mass::isDiagonal to speed up computations in case mas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001:260,simpl,simply,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-799313001,4,['simpl'],['simply']
Usability,"> > Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set.; > ; > We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!. There is something un-catholic there... So if I understand well, you have triangle in your topology that refer to point out of bound to your current node mechanicalObject?; I don't understand how it can work. It will crash as soon as a component will try to access a dof passing through the topology no?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1772243763:553,clear,clear,553,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1772243763,2,['clear'],['clear']
Usability,"> > On this pull-request we would need the feedback of @Younesssss and @ChristianDuriez about how to sort the mapping components in SOFA? How should be differentiated the different kind of mappings?; > > Your input is important to us for NG.; > ; > I can organize a meeting with @ChristianDuriez, @guparan, @fredroy around this subject. Maybe it's better that way?. It would be great yes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1054042237:43,feedback,feedback,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1054042237,2,['feedback'],['feedback']
Usability,"> > So, as we discussed during the dev meeting. 2 modifications:; > > ```; > > 1. Indeed, Boost, MPFR and GMP are dependencies of CGAL library itself not of the SOFA-CGAL plugin. As those dependencies are correctly handled internally in CGAL, I removed all mention of those libraries in the config file of the plugin.; > > ; > > 2. There is already a .cmake at the root dir of CGAL so the findCGAL.cmake is not necessary. Sofa just need to know ${CGAL_DIR} path. And in fact on windows, when you install CGAL this env_variable is set. So it works straight forward.; > > ```; > > ; > > ; > > @guparan can you confirm this is now ok to go?; > ; > The _FindCGAL.cmake_ was there to avoid the need to manually set the `CGAL_DIR` variable when we install CGAL via `apt install libcgal-dev`.; > ; > IIRC, it did not work straight forward with ubuntu 18.08 and centos 7, and maybe not even with recent versions of those distributions. I'll check it later today if you want with Docker, but I believe this file was useful. Ok I see, maybe we could add a test on top of ""our FindCGAL"" checking if CGAL_DIR is known or not. @guparan could you give your feedback so we can converge on that PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910:1143,feedback,feedback,1143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1308#issuecomment-611393910,2,['feedback'],['feedback']
Usability,"> > VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA; > ; > Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one.; > ; > Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started. Definitly a must have...but not in the same PR :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548:111,clear,clearly,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712909548,2,['clear'],['clearly']
Usability,"> > ```; > > 1. We could probably rename the ""**EulerSolver.h**"" and ""**EulerSolver.cpp**"" files to ""**EulerExplicitSolver.h**"" and ""**EulerExplicitSolver.cpp**"" to follow the name of the class.; > > ; > > 2. Maybe we could factor the sympletic option as a new time integrator class? I think it would be much clearer to have, for example,; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ```; > > <EulerExplicitSolver />; > > <EulerImplicitSolver />; > > <EulerSemiImplicitSolver />; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > and might speak to more people.; > ; > I definitively agree with both your suggestions.; > I also thought about your second suggestion, and it was my plan to talk about it during the next dev meeting. The problem I see is that `EulerExplicitSolver` is by default symplectic. So, applying your suggestion would change the ODE solver when the user write `<EulerExplicitSolver />`. Let's discuss it on Wednesday. Unfortunately, I'm not sure I will be able to join this Wednesday and the next. Could we do something like this?. 1. If `EulerExplicitSolver` is used with default parameters or with explicit `sympletic=True`, then warn the user that he should use `EulerSemiImplicitSolver` instead, and create this new component automatically for him (this is the part where I'm not sure it's feasible..); 2. Else, the user manually specified `sympletic=False`, warn him that this option no longer exists and that he can remove it from its scene file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855748841:309,clear,clearer,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-855748841,2,['clear'],['clearer']
Usability,"> @epernod @damienmarchal I have the following error in several scenes of SoftRobots:; > ; > ```; > [ERROR] [UniformMass(mass)] TopologyData: indices already has a TopologyDataHandler. createTopologyHandler should only be called once at init of the TopologyData.; > ```; > ; > I think it is due to the fact that a Node is initialized twice. What is your recommendation?. Quickly: this error is fired because init is not called only once. A ""TopologyDataHandler"" is created in the UniformMass init method. Creating 2 trackers could create real bugs if topologicalChanges are applied (basically changes will be applied twice); I see several options:; - init should not be applied several times in those examples; - If we decide init could be applied several times, we need to change the code to check tracker are not created twice. This should be possible but not as simple as ```tracker != null```. As a quick workaround: replace the `TetrahedronSetTopologyContainer ` by a `MeshTopology ` here : https://github.com/SofaDefrost/SoftRobots/blob/4acf28248278106c2855206f1751dcba41268039/examples/tutorials/Tripod/details/elasticbody.py#L20; This should solve all the tripod tutorials scenes. TopologyDataHandler are not created if the topology is using static containers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1590748119:865,simpl,simple,865,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3882#issuecomment-1590748119,2,['simpl'],['simple']
Usability,"> @fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)). My point is, don't merge this PR right now, unless is super urgent. Of course, it would be much better to effectively fix the problem than to ignore it. This PR was just providing a quick but brainless solution for a (hopefully) temporary fix.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232:210,simpl,simply,210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427168232,4,['simpl'],['simply']
Usability,"> @olivier-roussel thanks for the conda test and the feedbacks 👍 You should have made suggestions and/or make a PR on my branch, as I cannot credit you your patches 😵. Indeed, sorry about that",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923345776:53,feedback,feedbacks,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1923345776,2,['feedback'],['feedbacks']
Usability,"> Amazing work @sergeiNikolaev !; > However, as it seems you want into SofaCommon, we have to be a bit strict on the guidelines ; > So could you:; > ; > * remove all useless commented code?; > * set prefix for Data<> (d_) and member (m_) ?; > * remove serr with msg_error; > * maybe uncomment all the msg_info (as it is not print if you dont enable printLog); > * would be cool to use pragma once instead of the preprocessor guards (ifdef); > Thanks !. @fredroy ; I have submitted the correction to the code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620039061:117,guid,guidelines,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-620039061,2,['guid'],['guidelines']
Usability,> An opportunity to add a unit test in SofaPython3 ;); +1. But SofaPython3 is not the place to validate sofa core behavior. It would be much better to have it in Sofa implemented using simpleapi. And not in a reverting PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307358562:185,simpl,simpleapi,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3464#issuecomment-1307358562,2,['simpl'],['simpleapi']
Usability,"> Can I still ask a small question ? :-); > ; > Why keeping the Framework directory? Would something like this be simpler?:; > ; > ```; > /; > plugins; > BeamAdapter; > ...; > Sofa; > Compat; > Config; > Core; > DefaultType; > Geometry; > ...; > Component; > Collision; > ...; > scripts; > tools; > ...; > ```. like @hugtalbot said, it is to keep the sepearation framework (i.e APIs & stuff) and components (implementations).; Ideally like @guparan we should have made a framework dir/namespace structure but we decided not to break the framework code (so we still have sofa::core, sofa::helper....)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1119312670:114,simpl,simpler,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1119312670,2,['simpl'],['simpler']
Usability,"> Can static methods be binded ?. If your question is: ""can c++ static methods be bound in python"", then yes. If your question is ""can I bind something as a python class/static method"", I *think* the answer is yes but in any case you can wrap it as a free function in a module. If applicable, I suggest your binding class follows the context protocol (https://www.python.org/dev/peps/pep-0343/) so that you can time code fragments using `with` statements:. ```python; with Sofa.Timer('description'):; # do something time-consuming here; ```. In this case, you need to:; 1. create the type object and store needed state, in this case that would be a simple string for identifying the timed action; 2. bind `beginStep` as the `__enter__` method; 3. bind `endStep` as the `__exit__` method. and that should be it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409:649,simpl,simple,649,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/336#issuecomment-316477409,2,['simpl'],['simple']
Usability,"> Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. Two reasons motivated the use of strings : ; 1) Right now when specifying the type of numerical integration method in python or xml scripts the user had to use for instance numericalIntegrationMethod=""3"" which is not descriptive at all. It is preferable to use numericalIntegrationMethod=""Tetrahedron Gauss"" for the maintenance of the code. Using OptionsGroup could solve this issue I believe. 2) Inheritance. In the plugin ""SofaHighOrder"" I specify new types of numerical integration methods on triangles. While the APi allows to add a new method, the enum class cannot be extended ( I can use a number like 4 but this creates warnings and is not satisfactory). Therefore using a string class is more versatile. . > **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?. This would not solve the inheritance problem as the type of numerical integration methods can be exhaustively listed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911:856,simpl,simplify,856,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-466958911,2,['simpl'],['simplify']
Usability,"> Don't you think that moving `errF` and `tempF` out of the loop is enough? I would test to only resize them in the loop. The underlying memory allocation should not happen a lot. My suggestion is because I think it is simpler to understand compared to the buffer implementation.; > ; > In any case, I think the condition `if (nb > bufferSize)` is not necessary. I obtained the same level of improvement so I will go with this easier way 👍",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1734678391:219,simpl,simpler,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1734678391,2,['simpl'],['simpler']
Usability,"> EDIT: I ran the performance monitor of VS and indeed it takes a lot of time in the resize() function of MechanicalObject. Indeed, this looks like a nice bug :sunglasses: . However, I'm not sure this is impacting the _simulation_ time. The same multivectors are used (x_rest, x, v, etc.) and the newly (and very wrongly) created vectors are simply, well, created... But we must definitely fix this bug :grin:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842965195:342,simpl,simply,342,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2089#issuecomment-842965195,2,['simpl'],['simply']
Usability,"> FYI, `SimpleCarving.py` is not exectuted by the CI (or more precisely, there is no mention of it in the logs). I would say, on s'en balek",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3457#issuecomment-1707842240:8,Simpl,SimpleCarving,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3457#issuecomment-1707842240,1,['Simpl'],['SimpleCarving']
Usability,"> Hello @olivier-goury,; > ; > Thank you for the PR.; > I have added some comments (mostly about coding-style).; > ; > As I'm the author of some of the code you propose in the PR...could you add my name in a contributors section after the license header. In general I do the following.; > ; > ```c++; > /******************************************************************************; > * Contributors: ; > * - damien.marchal@univ-lille.fr ; > * - olivier.goury@inria.fr ; > ******************************************************************************; > ```; > ; > I know @hugtalbot and @guparan complains...but to me this is a clear demonstration that relying on git to track authors ship (and thus copyright credit) is misleading...and thus having a per-file contributors sections. Hey thanks for all the comments, yes I can do that, no problem!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701479584:630,clear,clear,630,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701479584,2,['clear'],['clear']
Usability,"> Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app. I wanted to keep the direct usage of the components and direct linking with lib, for eventual people who would want to manipulate the components directly (because why not). This PR comes from the discussion https://github.com/sofa-framework/sofa/discussions/2785 which pointed to a (really) deprecated piece of code [in the doc.](https://www.sofa-framework.org/community/doc/programming-with-sofa/create-your-scene-in-cpp/) I took the initiative to clean this project to use it directly into this page after merging. But indeed, the second step was to create the exact same project with the simpleapi API, to illustrate the 2 use-cases (runtime dep vs compile/link-time dep). And create a page about simpleapi in the documentation as well, as there is none (or I did not see)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174:102,simpl,simpleapi,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075594174,6,['simpl'],['simpleapi']
Usability,"> Hey @marques-bruno !; > ; > I think this will help us a lot to add robustness to our components.; > ; > With this PR, do you see any reason why one would use `BaseLink`s in his component instead of a `BaseDDGLink`s?; > ; > Also, maybe instead of have a new `InitDDGLink` function in BaseClass, we could simply overload the `initLink` with; > `initLink(BaseDDGLink* owner, std::string name, std::string help, std::string group = """")` ?; > ; > Thanks !. Thanks @jnbrunet for your review, I'll do the changes tomorrow.; Regarding using BaseLink instead of BaseDdgLink, BaseLinks are actually used internally in DDGNodes (for input/outputs). So they have their use. What I want to replace with DDGLink, are the SingleLink entries in sofa components.; We'll discuss it at the sofa meeting if you're there tomorrow ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561309194:305,simpl,simply,305,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561309194,2,['simpl'],['simply']
Usability,"> Hey @nhnhan92; > Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license.; > ; > To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!; > ; > Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _***_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); > See: https://link.springer.com/article/10.1007/s00366-017-0572-4; > ; > Let us know what you think about it. We can make it step by step!. Dear @hugtalbot,; Thank you for your recommendation, we think that would be a proper option for our case. ; On the other hand, regarding the test, we want nothing more than that, but we are not familiar with the testing procedure. Therefore, we are willing to follow your guidance. Hope to hear your response soon.; Best regards,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454:558,simpl,simply,558,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-787447454,4,"['guid', 'simpl']","['guidance', 'simply']"
Usability,"> Hi @nhnhan92; > Here is what we propose: let's get this nice work merged as is. I will only add a regression scene to check that no alteration of the model occurs in the future. I will also write a short doc about it, and I will let you append any additional details on it.; > ; > A C++ test inspired from the [article](https://link.springer.com/article/10.1007/s00366-017-0572-4) would be nice in another PR. For writing test, you can:; > ; > * see the [doc here](https://www.sofa-framework.org/community/doc/contributing-to-sofa/writing-tests/); > * get inspired from the [PluginExample test](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/PluginExample/PluginExample_test/MyBehaviorModel_test.cpp); > ; > Is this fine for you?. Hi @hugtalbot,; It is clear enough. I will take a look at the instruction and try to implement the .test file. I will inform you as soon as I get something new. Thank you again for your patient to help me.; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301:780,clear,clear,780,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-790611301,2,['clear'],['clear']
Usability,"> Hi @olivier-goury; > The info is in the sofa-dev meeting report but has not been copied here.; > --> wip, use clear() instead of removeAt(0) on l_forceField link; > ; > @guparan will work on it, no worries. Ok thanks for the info!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/772#issuecomment-424999993:112,clear,clear,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-424999993,2,['clear'],['clear']
Usability,"> Hi @sergeiNikolaev; > Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; > By the way do you have any latex file for the polynomial equations?. Thank you for your answer @hugtalbot.; Regarding your question, I do not, sorry.; I wrote these equations since for me it is easier to process the stuff like this with a ""writing memory"". And then I decided that it will be enough just to scan them and send to you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065:99,simpl,simple,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643263065,2,['simpl'],['simple']
Usability,"> Hi Fred,; > ; > The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator. I have to admit that I did not see that the DataEngineTestCreation.h file was using scenecreator itself, and this is a good idea to do it while sofang'ing. But I would prefer to do that in a further PR to not block my other sofang PRs 😗.; Except if it is trivial to remove/replace 🙃",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403:187,simpl,simpleapi,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040462403,2,['simpl'],['simpleapi']
Usability,"> However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. This function should be very useful in practice, especially for explicit time integrator. It allows one to solve `a = M^{-1} f` by simply computing `a[i] = f[i]/m[i]`. The fact that you didn't find any usage is quite surprising, and made me look around a little bit:. 1. The [EulerExplicitSolver](https://github.com/sofa-framework/sofa/blob/99b600aa2a002e9464b0d53d6eb959b5d0b0fcd0/SofaKernel/modules/SofaExplicitOdeSolver/src/SofaExplicitOdeSolver/EulerSolver.h#L35) has in fact a data argument `optimizedForDiagonalMatrix`, and therefore completely ignores `Mass::isDiagonal`.; 2. The [CentralDifferenceSolver](https://github.com/sofa-framework/sofa/blob/6b475afc63841f10e4990b56c7b837892fb735dd/modules/SofaGeneralExplicitOdeSolver/src/SofaGeneralExplicitOdeSolver/CentralDifferenceSolver.h#L36) simply **assumes** that the mass is diagonal. Hence using this component with non-diagonal mass will result in wrong simulations.; 3. Implicit solver could use the knowledge of a diagonal mass to efficiently compute `m M + b B + k K`, but they do not... This is an important topic that I think should be included into the current discussions to refactor the way SOFA construct its system matrices. Also related: can we detect if a diagonal mass remains diagonal if it gets mass contribution via mappings? Does mapped mass even work in SOFA?. CC: @hugtalbot , @ChristianDuriez , @fjourdes",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125:252,simpl,simply,252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903#issuecomment-797326125,4,['simpl'],['simply']
Usability,> I also think about creating a graph link instead of a simple copy:. why @alxbilger,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2269055267:56,simpl,simple,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2269055267,2,['simpl'],['simple']
Usability,"> I am a bit sad that we lost simplicity in cmake files cry. I liked the fact that Sofa/framework was (supposed to?) be buildable by iteelf; . How? By unchecking the SOFA_COMPONENT option? It's still possible this way. The thing is that Framework is (unfortunately) not a module and thus should not be treated as one if we want to be consistent. I'm not against reverting the framework/CMakeLists.txt deletion though. > and that the root SOFA CMakefile was kind of slimmer/less complicated and actually was (supposed to be ?) not mandatory. This file was and still is mandatory. At least, I think it's clearer now with the changes I propose because we see what is directly below the root CMakeLists (all the remaining add_subdirectory calls) and what could be done from somewhere else. Ideally we should just have a some options/variables and a bunch of add_subdirectory calls in this file.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670:30,simpl,simplicity,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180212670,4,"['clear', 'simpl']","['clearer', 'simplicity']"
Usability,> I did not check but I thought it was using `addData` here:; > ; > https://github.com/sofa-framework/sofa/blob/9096c3eed599622ec9eb77a3d8a61bf3932a81a7/Sofa/Component/StateContainer/src/sofa/component/statecontainer/MechanicalObject.inl#L1310. Not necessarily there is another codepath that initialize the state vectors and registe the data. Refactoring the whole part would be interesting to make that clear but it is far outside the scope of this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1534324585:404,clear,clear,404,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3783#issuecomment-1534324585,2,['clear'],['clear']
Usability,"> I don't understand why we have so much complexity around `projectResponseT`. It seems we don't need the template since we call it only once. Same for the lambda. Not everywhere, sometimes the templated projectResponseT is called with VecDeriv (aka Vec\<Deriv>) and MatrixDeriv (aka CRS)); But it could simplified where this statement does not apply though.; EDIT: some (e.g FixedTranslationConstraint) are useless IMO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3894#issuecomment-1590483514:304,simpl,simplified,304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3894#issuecomment-1590483514,2,['simpl'],['simplified']
Usability,"> I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; > ; > ```c++; > #include <MultiThreading/config.h>; > ...; > #include <MultiThreading/Tasks.h>; > ```; > ; > it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. monocle_face. How can it compile?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584:373,usab,usable,373,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816453584,2,['usab'],['usable']
Usability,> I recommend to deprecate Data fields properly. See https://www.sofa-framework.org/community/doc/contributing-to-sofa/lifecycle-mechanisms/#removing-a-datafield. I did something to correctly depreciate the Data. The instruction are not 100% clear to me (regarding dates inside the macro and parse method). Let me know if it seems correct.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3328#issuecomment-1272102338:242,clear,clear,242,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3328#issuecomment-1272102338,2,['clear'],['clear']
Usability,"> I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior. This is not really correct actually:; The pythonScriptController is not really a component (i.e a Sofa class inheriting BaseObject) as it possesses extra features, such as the possibility to create the scene graph from scratch, send events to other controllers etc. It is not a purely simple 1to1 binding of its C++ methods in Python. In that way, I agree with you that calling it a PyController makes more sense than to call it a PyBaseObject for instance, or pyComponent, since it does more.; The current PSDE is actually as far from a Std sofa component (core::objectmodel::BaseObject) as the PythonScriptController: the PSDE is much closer in terms of behaviour to that of Sofa's DataEngine components: the key difference is that DataEngines, contrary to BaseObjects, is a call for action on the modification of one of its input datafield. The update method is not present in a BaseObject or in a PythonScriptController. In that way it completely mimics the behavior of the DataEngines in Sofa. Hence my suggestion :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755:531,simpl,simple,531,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406605755,2,['simpl'],['simple']
Usability,> I think it will break a lot of scenes. I like it baby :fire_engine: :fire: . > I also think about creating a graph link instead of a simple copy:. :thinking: why would you do that? I am unsure about side effect,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2265459196:135,simpl,simple,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2265459196,2,['simpl'],['simple']
Usability,"> In that case, why bother with manual init/cleanup? Where is it done? . This is precisely why I asked for feedback before merging, because I have no idea. I don't quite know why it was not automatic in the first place since this is all c++98. > If manual init/cleanup are removed, s_initialized/s_cleanedUp become obsolete. agreed, but until we know exactly what's going on we don't want to get rid of it. > What does guarantee that libs are loaded in the right order? . nothing, but libraries could probably load their dependencies upon `init` (+ simple cycle detection strategy) to have it all automatic?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777:107,feedback,feedback,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279743777,4,"['feedback', 'simpl']","['feedback', 'simple']"
Usability,"> Indeed. No test nor scene where impacted?. I tested simple scenes and it seems the simulations run and are plausible, with or without the mistake. I don't think this function is actually tested.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168:54,simpl,simple,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2448#issuecomment-950787168,2,['simpl'],['simple']
Usability,"> It would be FALSE by default and wouldn't need to be specified if ""inline"" I/O-creation is not used. Actually, I didn't think of it immediately when you said it, but this is already what the current implementation does (kind of, the implementation is different but the concept is the same):. if the decorator `@sp.ParseInputs` is not set on the parse method, the passing of arguments through the createObject() is disabled, and the input argument will be ignored.; setting @sp.ParseInputs is kind of the equivalent to a boolean flag in the class allowing ""inline"" definitions. The only difference is that it's made at the declaration step and not during the instantiation of the class. the name (ParseInputs) is maybe not very clear. it could be called differently. ""fwd_inline_args"" or ""allow_inlines""..?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-416264093:729,clear,clear,729,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-416264093,2,['clear'],['clear']
Usability,"> Looks fine now.; > [ci-build][with-scene-tests]. Yeah... Although we simply moved the definitions of the problematic operator overloads back into the .h... so problem half solved... if anyone has an idea how to make it build on windows... I'm curious. Otherwise, let's just merge... :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354:71,simpl,simply,71,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/907#issuecomment-461873354,2,['simpl'],['simply']
Usability,"> More seriously, defaultCompliance can be considered in a simplified way as the inverse of the nodal mass. This is close to 184 in this simulation. Not the purpose of the PR itself, but not possible to do a ""autoSetDefaultCompliance=true"" or something like that ? 😅",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4187#issuecomment-1730537815:59,simpl,simplified,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4187#issuecomment-1730537815,2,['simpl'],['simplified']
Usability,"> Of course the PR will be breaking and we will need to update our code base. But this is all for the good.; > ; > Clearly congratulation @SofaFramework for such high quality management of software evolution.; > ; > So if I understand correctly, this will be merge into master the day after the official release of v22.06 right ?. It should be breaking for some yes (the ones who did not do the change of the things flagged deprecated the last version and marked removed now, like the use of sout/serr/sendl); But it should be merged just before releasing actually, now is the code of v22.06",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1174746402:115,Clear,Clearly,115,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1174746402,1,['Clear'],['Clearly']
Usability,"> Ok for me, but could you explain in which case you have this problem? Setting the component to invalid is a good idea. Breaking the loop might create some bigger issue in components using the topology as it won't be set. We have this problem when using subtopologies defined using BoxROIs. The subTopo has fewer points than the original topology (Since it is a subset of it) but the triangles in that subtopo refer to nodes indexed with the numbering in the original topology that are out of bounds within the subtopo world. Not sure that is clear!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1771157912:544,clear,clear,544,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4242#issuecomment-1771157912,2,['clear'],['clear']
Usability,"> Olivier's point me that in his code the clearing of the links is really ""perfectible"". It was improved with the last commit, thank you!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/772#issuecomment-422810617:42,clear,clearing,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-422810617,2,['clear'],['clearing']
Usability,"> On this pull-request we would need the feedback of @Younesssss and @ChristianDuriez about how to sort the mapping components in SOFA? How should be differentiated the different kind of mappings?; > ; > Your input is important to us for NG. I can organize a meeting with @ChristianDuriez, @guparan, @fredroy around this subject. Maybe it's better that way?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1054038880:41,feedback,feedback,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1054038880,2,['feedback'],['feedback']
Usability,"> So, if I understand correctly, you implemented 2 methods to deduce the template: 1) a static method in the component, 2) an additional line when registering in the object factory. Yes, despite it is possible to have only the system with the static method I find the explict method more clear despite it does not allow to cover the same set of feature. We may remove it if needed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1590796190:288,clear,clear,288,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3938#issuecomment-1590796190,2,['clear'],['clear']
Usability,"> Thanks @marques-bruno ! Could you confirm that your clang-format file complies with [the astyle configuration](https://github.com/sofa-framework/sofa/blob/master/tools/astyle/sofa.astyle)?. Almost... I went through each of the options in the style sheet to make sure, but:; * *--indent-labels*: this is not supported by clang-format. This astyle option indents C-style labels (goto labels) as if it were a normal instruction in its scope. clang-format offers an option `IndentGotoLabels` but it will either align it with the root of its scope (true,) or align them at the first column in the file. for more info on this option:; [StackOverflow post](https://stackoverflow.com/a/66511380/1376968). But to me, it seems like a bad idea to indent labels the way astyle does. clang-format's makes more sense to me. * *--add-braces*: This one is more problematic: clang-format supports this option since its latest version (clang-format-15.0.0), BUT, here's what they say in the doc:. _**Warning**_. _**Setting this option to true could lead to incorrect code formatting due to clang-format’s lack of complete semantic information. As such, extra care should be taken to review code changes made by this option.**_. Linter tools, like clang-tidy, let you do that also...; Most importantly, clang-format's default package version on ubuntu is v10.0.0. v12 can be found in ubuntu's default package manager, but for v15 you gotta look for the package in external repos or compile it yourself. So I'd rather leave this option out, and keep it more as a general guideline in SOFA's documentation. Other than that my last commit updated the file to adopt the other astyle options :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034:1553,guid,guideline,1553,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884#issuecomment-1103726034,2,['guid'],['guideline']
Usability,"> Thanks again for this nice contribution @nhnhan92; > Sorry I had prepared many similar feedback as @epernod so, some might be duplicated.; > ; > A more general remark, could you point us out the documentation you used to write this code please?; > Do you have an idea of when you would plan to consider rotations around the z axis?; > I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!; > ; > If this is too much questions, we can discuss about this live if you'd like. Dear, @hugtalbot,; Thank you for kind supports from you and @epernod. First, I implemented this FF mostly based on two following references:; 1. Book: ""Structural Analysis with the Finite Element Method, Linear static, Vol. 2, chapter 8""; 2. And the most recent paper of our group: https://ieeexplore.ieee.org/document/9247533; On the other hand, at this stage, this FF fairly meets our expectations for the current project. I definitely want to improve it in the near future. However, FEM is not my field (I am basically an end-user) and I have been in the middle of something else, therefore, It is gonna take time for me to be able to complete it. I would love to cooperate with SOFA team to complete it.; I'm sorry, but I'm quite unsure when you said rotation around z-axis (normal axis of the element?). Do you mean the consideration of rotating element around its normal axis? (i.e., co-rotational LARGE method (am I right?)). Right now, my priority is to take the rest two rotation dofs of a node (location rotations of around x and y direction) because, at this moment, I assumed they are zeros. But, so far, I have no idea how to include them; Finally, if it is necessary, I am willing to have a face-to-face discussion as long as I am available. Thank you ; Best,; Nhan",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816:89,feedback,feedback,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773702816,2,['feedback'],['feedback']
Usability,"> That's cool 👍 especially with scenes with dozens of falling things.... (and penalty contacts 😆); > Just a thought: the 'collapse all' will obviously always show only root, maybe the 'collapse all' should show the first node (i.e root) still expanded ?. Yes, I also thought about it. I decided to keep it simple, but I don't mind doing your suggestion.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2322#issuecomment-912582014:306,simpl,simple,306,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2322#issuecomment-912582014,2,['simpl'],['simple']
Usability,"> The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier. Well done!; I have added the `breaking` flag due to the change of some signatures for some methods",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997:257,clear,clearHandlers,257,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1480398997,4,['clear'],"['clearHandlers', 'clears']"
Usability,"> VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA. Ok that makes sense. Yeah I guess the clean thing would be to swap every usage in SOFA to the new dynamic TypeInfo, and to somehow depreciate the static one. Looks good to me, I look forward to testing it, probably with Eigen types to extend what @Younesssss started.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002:109,clear,clearly,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712798002,2,['clear'],['clearly']
Usability,"> What does it mean : ""child crossing"" ?. Improve UX / Usability....; Yeah, not necessarily the clearest gitmoji. RGBAColor mainly improves UX, whether it is used from C++, Python, or a user interface.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154:50,UX,UX,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1471#issuecomment-688337154,7,"['UX', 'Usab', 'clear']","['UX', 'Usability', 'clearest']"
Usability,"> When I see a Doxygen comment at a non-Doxygen-standard place, I always wonder ""Why is this here? Does Doxygen now support this?"".; > How can it be more useful to use `///` than `//` ?. I understand your point and here is a summary to boostrap discussion. . Currently in our code base we never esthablish specific rules on the use of doxygen comments and we are in fact mixing two different approaches. Let's name them ""code centric"" and ""doxygen centric"". . In the code centric approach: ; - /// or ///< is used to state that this the comment *is part of the documentation*. ; - // is for any other *non-documenting* comment (eg: commented code). ; With this approach the main focus is that the documentation parts should be easily visible from the source code and that documentation is composed of declaration parts related part (that must fullfill doxygen rules) as well as internal details. ; The added value of using /// or ///< is that developper when they see them clearly knows ""this is part of the documentation"". This aproach is a super-set of doxygen but is not limiting the documentation to only what doxygen understand (the underlying assumption is that we need to document much more than just declaration/api). . The doxygen centric approach is slighly different: ; - // should be used for internal-documentation as well as non-documentating comments; - /// or ///< should be used only for documentation what can be understood by Doxgen to generate html pages. ; Te main focus with this approach is to make very clear what will be use by Doxygen what it will use to auto-generate its public documentation, the counter part I see is that it mix comments and what should be considered as internal documentation. . It is important is of course to have doxygen friendly declaration centric (the public API) documentation ...but it is equally important to have proper documentation for the internal details. ; If would probably do something like that in a new project:; - always use /** */ f",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417:973,clear,clearly,973,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417,2,['clear'],['clearly']
Usability,"> You are clearly in a dev state, each time you push a commit it triggers a new build on the CI. I'll put the flag wip again until you tell me that you've finished your fixes to avoid loading the CI. All changes was minor and i think I'm not in dev state now. sorry for loading on CI",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084605955:10,clear,clearly,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084605955,2,['clear'],['clearly']
Usability,"> You may add a consistency check if the given path is actually a dir when it is supposed to be. I'm ok with the rest of the code. I've updated the code to check for path types according to isDirectory.; I also propagated the mechanism to DataFileNameVectors (if one of the paths in the vector is not of the right type, I simply set it to """". Dunno if thats the right way but it seems right)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639434209:322,simpl,simply,322,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1407#issuecomment-639434209,2,['simpl'],['simply']
Usability,"> do you plan to create a doc page @alxbilger for us to go through the equation for review ?. yes, but I need more time. Fortunately, the equations are 1000x simpler than in AreaMapping",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4906#issuecomment-2339894590:158,simpl,simpler,158,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4906#issuecomment-2339894590,2,['simpl'],['simpler']
Usability,"> is it not a problem to add a new class (an interface) to inherit from? does it not make the inheritance tree heavier? This second point is just a remark but obviously not blocking at all. @hugtalbot the answer is not simple (see https://stackoverflow.com/questions/7210412/what-is-the-cost-of-inheritance for example). However, in our case, I think the cost (if any) is negligible.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116:219,simpl,simple,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2438#issuecomment-963006116,2,['simpl'],['simple']
Usability,"> new feature, new unit test?. Thanks for the little push to write the test :+1: ; This actually helped me find a bunch of bugs and inconsistencies in the Links API. I fixed some, made some tests to highlight those I considered as too hard / time-consuming / not-worth-the-effort to fix . - When constructing a link without an owner, a call to `getOwnerBase()` systematically crashed instead of returning a nullptr, because of a bad initialization ; - When calling `setOwner(owner)` on a link with a `nullptr`, a segfault would happen within the function since it tries to call a method on the given owner; - the read() function is SUPER, SUPER buggy, obscure and cryptic. This function alone has tons of potential outcomes depending on whether the link has or not an owner, whether this owner has a context, whether the link is valid, or points to a wrong object type. Even worse, all those outcomes are kind of dependent on whether we're initializing the link, or whether the init visitor already ran on the scene graph. needless to say that this is way too complex, for something as simple by definition as a link.... So to at least get something out of my time, I added a test in SofaSimulationGraph_test/Link_test.cpp which shows most of the results you can get from `read()`, depending on the state of initialization of that link, the state of its owner and the validity of the link path. There's also a test of the setLinkedBase() method in SofaCore_test (BaseLink_test.cpp)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820:1086,simpl,simple,1086,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1436#issuecomment-664420820,2,['simpl'],['simple']
Usability,"@EulalieCoevoet Thank you for reporting the error (too bad it skipped the reviews 😕); By any chance, would have a simple scene to submit as a test? thanks ! 😙",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-886453383:114,simpl,simple,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-886453383,2,['simpl'],['simple']
Usability,@IPeterlik @courtecuisse please provide us a feedback on this PR. This would be valuable. Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/484#issuecomment-339261044:45,feedback,feedback,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/484#issuecomment-339261044,2,['feedback'],['feedback']
Usability,"@JeremieA thank for the feedback, . A closed pull-request is probably not the best location to rise this kind of discussion. Why not creating a new issue dedicated to this topic ? Something like ""Suggestion to cleaning & unifying the way we handle 'locale'"" would be nice.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281657903:24,feedback,feedback,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/161#issuecomment-281657903,2,['feedback'],['feedback']
Usability,"@ScheiklP Here is a branch with a simple object tracker: https://github.com/alxbilger/sofa/tree/objecttracker. It counts the number of creation and destruction for each class managed with the `SOFA_CLASS` macro. Note that if `Y` derives from `X`, it counts both `X` and `Y`. Finally, it prints a summary when the program finishes (properly). But I cannot guarantee that more destructions does not happen after the summary (static destruction order depends on construction order and https://en.cppreference.com/w/cpp/language/siof). Is this useful to you? Can you spot which component is not destroyed?. The diff is here: https://github.com/sofa-framework/sofa/compare/master...alxbilger:sofa:objecttracker?expand=1. For example, there are a couple of components in caduceus where I see a difference between nb of allocations and destructions.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256275783:34,simpl,simple,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256275783,2,['simpl'],['simple']
Usability,@TheGreatLudini any feedback ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056739968:20,feedback,feedback,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1056739968,2,['feedback'],['feedback']
Usability,"@Younesssss do you think:; - you still need to have Data<EigenMatrix> ? (it was not clear in our last sofa devmeeting); - if yes, could be nice to integrate what @jnbrunet said",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819:84,clear,clear,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1499#issuecomment-886477819,2,['clear'],['clear']
Usability,"@alxbilger . In addition to have very component not relying anymore on a dependency to opengl should be moved to a generic module. ; I would suggest having a layer of compatibility/deprecation (possibly build on top of the generic module) to to tell users that scenes like:; ```console; RequiredPlugin(""Sofa.GL.Component"") ; OglModel(); OglGrid() ; ```; Are still working but displays nice guidance on how to update to more or less something of that kind:; ```console; RequiredPlugin(""Sofa.Components.Visual"") ; VisualModel() ; VisualGrid() ; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1184124812:390,guid,guidance,390,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1184124812,2,['guid'],['guidance']
Usability,"@alxbilger I implemented the refactoring of NameDecoder and clearly this is way better that way. Some part fit much more naturally and both NameDecoder and BaseClassNameHelper have kind of consistency on their respective role. . EDIT: I directly went to the DISABLED state as I see no simple way (apart from duplicating the code) to keep the feature. But In our whole code base, that was very rarely used.. so I think this is the same for plugins.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386:60,clear,clearly,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3465#issuecomment-1308598386,4,"['clear', 'simpl']","['clearly', 'simple']"
Usability,"@alxbilger any help will be hughly appreciated, i am stuck. trying to understand this https://github.com/SofaDefrost/SoftRobots/tree/master/examples/tutorials/CableGripper but i am unable to run this in my machine. Could you please guide me. Thanks in advance.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/5029:232,guid,guide,232,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5029,1,['guid'],['guide']
Usability,"@alxbilger sure. . Actually I'm looking at Subsettopology for your PR (#2825) and my eyes saw its draw function. Don't :) ; When I saw it, I think we have so much duplicated code in every components and that this propagate to the Data<d_showBlablab>. But doing such work is clearly something to do small step by step during our dev session or for a coding sprint during STC (@hugtalbot) with pizza's.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2838#issuecomment-1088812518:274,clear,clearly,274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2838#issuecomment-1088812518,2,['clear'],['clearly']
Usability,"@alxbilger you are right, only NewMat* things are not moved/done but this will deprecated ASAP (as well as the LULinearSolver which is only usable with those matrices)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2150#issuecomment-971431358:140,usab,usable,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2150#issuecomment-971431358,2,['usab'],['usable']
Usability,"@damienmarchal @epernod, Taking @sescaida's comment into account, I tried to create an example showing the undesirable behavior related to the cleanDirty() call, unsuccessfully.; The comments for the sofa::core::DataEngine class in Sofa are very clear about the order in which the update() method should be implemented: first call update / getValue / updateIfDirty on your *inputs*, then call cleanDirty, then call setValue on your outputs. I have had issues in the past related to this specific cleanDirty() method, but for some reason I can't reproduce it. ; Does any of you understood the problem enough to create a small example causing the issue? I'll keep digging on my side.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348:246,clear,clear,246,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-414978348,2,['clear'],['clear']
Usability,"@damienmarchal @tgaugry @jnbrunet, what do you think of @sescaida 's comment?. I agree that it makes it a bit tricky to look into the inner mechanisms of the creation of datafields from the createObject method.; I tried to make it as clear / explicit / fail-safe as possible though: ; - datafields passed through the createObject() function MUST be inputs fields referenced in the `args` dictionnary present in the Python class and there is a nice warning showing up when you try to pass an argument that doesn't exist in the args `dictionary` to createObject; - The user needs to explicitely use the decorator function in the SofaPython module on the parse() method, so he kinda has to know what the decorator does; - The syntax is as close as possible to the syntaxt of normal sofa::core::DataEngines created in python:; ```node.createObject('TransformEngine', input_position='@component.data', translation='0 0 0')```; would translate into; ```node.createObject('PythonScriptDataEngine', input_position='@component.data', translation='0 0 0', filename=__file__, classname='PyTransformEngine')```. I personnally believe it's a must-have feature, because, let's say you have a python scene in which you have to create 5 times the same PSDE component, a custom TransformEngine for instance:; - Without this PR, you would have to create 5 separated classes, with the exact same implementation, just a different value in the addNewInput() in parse(). This is very redundant. ; - Passing the inputs values through createObject allows you to create a component only once, and use it as many times as you want in your scene afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420:234,clear,clear,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-414973420,2,['clear'],['clear']
Usability,"@damienmarchal I added a `UnableToOpenFile()` function and modified ""MeshTrian.cpp"" accordingly, for now. Could you check if I am in right direction? If I am, I would follow up with changes in other loader and components. **Caution**: I couldn't test if it actually works! Because, a function `findfile(filename)` exists to check if file exists. So, to make `fopen()` purposely fail, even after supplying correct filename, I tried changing permissions with `chmod uga-r MeshTrian.cpp`, but it didn't report any error even with sofa's official master version. I tried couple other ways to purposely fail `fopen()` but they didn't work. Anyway, since the code looked fine, and to receive feedback, I will make a PR shortly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958:686,feedback,feedback,686,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/197#issuecomment-381862958,2,['feedback'],['feedback']
Usability,@damienmarchal It makes sense. Thanks for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324904059:46,feedback,feedback,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1324904059,2,['feedback'],['feedback']
Usability,"@damienmarchal if you check for '-' in the vector<unsigned>::read specialization, is it necessary to check for it in the getUnsignedNumber?; Also, since strtoll returns a signed integer, you could simply check for its sign rather than playing with strings.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302702732:197,simpl,simply,197,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302702732,2,['simpl'],['simply']
Usability,"@damienmarchal it is not the right place, but it is the right moment, in case you did not know it.; It is easy to modify an existing PR. You simply have to add the fork containing the PR in your local repo (`git remote add`), you can then have access to the PR like any other branch. The pb with this specific PR, is that the branch is the master of the BehnamBinesh fork, it is quite disturbing to modify the master of someone else, but I guess it is ok here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264177683:141,simpl,simply,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/48#issuecomment-264177683,2,['simpl'],['simply']
Usability,"@damienmarchal regarding the hook in the addObject(BaseObject*) so that any addition of a Mass Object, should it not simply warn the user that no gravity will be applied if no GravityForceField is added ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3149#issuecomment-1235280937:117,simpl,simply,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3149#issuecomment-1235280937,2,['simpl'],['simply']
Usability,"@damienmarchal there's not really anything you could've done differently, that was just the first time I encountered this situation. I tried re-merging my branch on a new PR and it succeeded, but the build failed since all the previous changes were reverted (so no `PythonEnvironment::gil` defined, etc). I had to find and revert the revert commit, then push it to the PR branch to get the changes back in. It was very simple in the end but for a while it got me pretty worried :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/347#issuecomment-319000414:419,simpl,simple,419,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347#issuecomment-319000414,2,['simpl'],['simple']
Usability,"@damienmarchal you're right, my bad, it does not fail on my build :-/ . Looking into it, thanks for the feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/326#issuecomment-314418538:104,feedback,feedback,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/326#issuecomment-314418538,2,['feedback'],['feedback']
Usability,"@damienmarchal, splitting our sprint branch in 2 was not hard but like you I'd like to merge things correctly.; I agree with your proposal but I think we should also reopen a PR from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 to merge all sprint prerequisites first.; This way, the two PRs from our sprint will be very clear.; What do you think ? I am ready to do it ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334468636:399,clear,clear,399,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413#issuecomment-334468636,2,['clear'],['clear']
Usability,@epernod I just simplified the code and added some readyOnly properties; Maybe you could test before merge.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553:16,simpl,simplified,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-741936553,2,['simpl'],['simplified']
Usability,"@etienneschmitt, thank you for the test. ; ; The dashboard seems to report there is problem with the added test: ; https://www.sofa-framework.org/dash/?branch=pr/fix_vtkloader. EDIT1: isn't the file 'vox8_binary.vtk' missing ?. Apart from the dashboard issue i would say:; +1 for the use of c++x11 ; +1 for the test ; +1 for the new feature ; :). As @thomas-lemaire was assigned by Mathieu to this PR I assume having its feedback is important before merging.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803:421,feedback,feedback,421,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/72#issuecomment-265752803,2,['feedback'],['feedback']
Usability,"@fjourdes and @ChristianDuriez I think this comes from the collaboration between you guys.; Last moment for a feedback before merge, thx",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-456727444:110,feedback,feedback,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-456727444,2,['feedback'],['feedback']
Usability,"@fjourdes if you have 2 sec, could you please give your feedback on the 2 lines change in the FreeAnimationLoop. ; It was done to fix a problem of position update between the mapped tool and the geomagic driver. See #1148 ; I don't have the knowledge to say if it is a real fix or if it will bring side effects. ; Thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1217#issuecomment-558076674:56,feedback,feedback,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1217#issuecomment-558076674,2,['feedback'],['feedback']
Usability,"@fjourdes sorry for the assignment, miss click. I wanted to assign fredroy :/; But your answer looks good to me, thanks for the PR. I will try to fix the SimpleGUI soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/493#issuecomment-339258771:154,Simpl,SimpleGUI,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/493#issuecomment-339258771,1,['Simpl'],['SimpleGUI']
Usability,"@francoisfaure ; > E.g. Mat<3,3,SReal>. This just shifts the same issue to chunk types, then :-) . I probably misunderstood your proposal: you mentioned having the sparse matrix type passed as a template parameter for efficiency reasons. I was simply pointing out that this template type cannot be known outside of the component, and so cannot appear in the `back_insert_iterator` type which is part of the hypothetical API I hinted to. Maybe you had this in mind from the start and I did not get it. @fjourdes Maybe it would be preferable not to *return* a `std::vector`, but instead to push to an existing one like so:. ```c++; class BaseForceField; {; public: ; virtual void getMatrixChunks(std::vector<MatrixChunkType>& chunks) const = 0; ; };; ```. This way you make no assumption as to whom should manage the memory, and leave the opportunity to optimize memory allocations. . I assume the `MatrixChunkType` holds the type index, so you can `std::visit` it and dispatch using its actual type? Having a type index per chunk means having one dispatch per chunk, and I am afraid this would somewhat bring us back to the ""one virtual call per element"" issue :-/ But maybe the compiler would be clever enough to optimize this? . More problematic, each chunk would have the size of the largest element in the tagged union, unless we use an extra indirection. . I was more thinking of having one `std::vector` per chunk type in the chunk container like so: . ```c++. struct chunk_container {; // add more as needed; using chunk_vector = std::variant< std::vector< chunk<1, 1> >, ; std::vector< chunk<2, 2,> > >;; ; chunk_vector storage[2]; // size can be inferred automatically; ; template<int I, int J>; void push(chunk<I, J> c) {; static constexpr int index = chunk_index<I, J>(); // correct index in chunk_storage; std::get< std::vector<I, J> >(storage[index]).push_back(c);; }; };",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877:244,simpl,simply,244,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292914877,2,['simpl'],['simply']
Usability,"@fredroy I worked on this problem too, but my approach was to refactor texture references by using texture objects. It is not trivial. It's not working yet. I'll try again in the week, otherwise I suggest to simply remove the usage of textures. I'd use simply raw GPU pointers. This alternative is easier than the texture objects approach (but it may cost a bit of performances (perhaps negligible)).; My point is, don't merge this PR right now, unless is super urgent.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805:208,simpl,simply,208,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3640#issuecomment-1427103805,4,['simpl'],['simply']
Usability,"@fredroy The choice is given. User can simply change the value of `EIGEN_ROOT` to use another Eigen. @epernod I was also thinking about a submodule solution but I need time to decide between multiple possibilities:; 1. Use our own [custom external project mechanism](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/SofaFramework/SofaMacros.cmake#L164-L257) (already used for HighOrder plugin and Regression project). Some changes may be required to limit the fetching process (for now, it fetches at every configure as long as `SOFA_FETCH_XXXX=ON`).; 2. Use (correctly) the standard [CMake external project mechanism](https://cmake.org/cmake/help/latest/module/ExternalProject.html). As far as I understand, this should be used only when building the dependency, so Eigen is not concerned. But should we use it for others?; 3. Use [CMake FetchContent mechanism](https://cmake.org/cmake/help/v3.11/module/FetchContent.html), limited to CMake >= 3.11 (30 Nov 2018). As I'm writing this, I think solution 1 is the best but needs some rework at least to improve the fetching process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955:39,simpl,simply,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1101#issuecomment-510040955,2,['simpl'],['simply']
Usability,@fredroy This is a very good question and definitely worth investigation. . To me this is related to a systematic problem we have regarding the mix between Data update through DDG or updates using toModel and fromModel. As far as can think about it is that BarycentricMapping should stop using the to and from model to compute barycentric topologies Maybe it should be refactored to be part of the Data depenency graph by adding few data field.; - control_rest_position // The vector of positions that are the control points of the interpolation space. ; - target_rest_position // The vector of positions that are embeded into interpolation space.; ; With these two it is clear that a change in the contrl_rest_position or target_rest_position should trigger the recomputation of barycentric coordinates.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825:672,clear,clear,672,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2925#issuecomment-1124734825,2,['clear'],['clear']
Usability,"@fredroy a feedback from Hadrien from #3894. A crash is occuring from the SofaCUDALDI plugin, but it does concern SOFA.; The crash has been noticed when constraints are added on a ""non-mechanical"" object, aka a passive/non-moving object used for the collision detection (MechanicalObject with no solver). In the SofaCUDALDI plugin the following code is written : . ``` cpp; MatrixDerivRowConstIterator1 Re1= c1.readLine(c.myCId);; MatrixDerivRowConstIterator2 Re2= c2.readLine(c.myCId);; ; for (MatrixDerivColIterator1 it=Re1.begin(); it!=Re1.end();++it); {; //unsigned int dof = itSvd1->first;; dx1+= it.val(); //x1Free[dof] - x1[dof];; }; ```. while in CompressedRowSparseMatrixConstraint.h there is: ; ``` cpp; ColConstIterator begin() const; {; Range r = m_matrix->getRowRange(m_internal);; return ColConstIterator(m_internal, r.begin(), m_matrix);; }; ```. and in CompressedRowSparseMatrixGeneric.h :; ``` cpp ; Range getRowRange(Index id) const { return Range(rowBegin[id], rowBegin[id+1]); }. ``` . where rowBegin is empty. Hadrien explained that in a CRM structure, 2 values are required minimum in order to check whether the CRS is empty or not; Is this possible ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877:11,feedback,feedback,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4179#issuecomment-1723731877,2,['feedback'],['feedback']
Usability,"@fredroy what do you think about the feedback from @fjourdes and @JeremieA ? . This topic interests me because it is connected with a usability issue I would like to see solved one day. . Suppose you are using ""BeamAdapter"". After some time you stop using ""BeamAdapter"" and one year later you (or a collegue/successor) want to reload the scene. It will not work and the user has no idea why the scene is not working anymore (he forgot he is no compiling the plugin anymore). . There is no such problem when there is ```<RequirePlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/>``` but people forgot them too often because they are 'silently' loaded by runSofa. . In that view, the autoload system, by facilitating people not to write the ```<RequiredPlugin>``` does not seems very appealling to me making the situation worse. . This is why I suggest to add to add a mechanism that warns users each time a scene is loaded and this scene contains component based on either autoloaded (or loaded from a configuration file) plugins.; A gentle reminder like that would be great: ; ```; Warning(root): This scene is using components (Beam) from the plugin 'BeamAdapter' but ; the plugin is not indicated as required in your scene. ; Please fix your scene by cut&pasting the following line at the beggining. ; <RequiredPlugin name=""BeamAdapter"" url=""http://www.experimental.com/BeamAdapter.html""/> ; ```. To implement such warning we probably needs the kind of manifesto file @fjourdes is proposing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257:37,feedback,feedback,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-299312257,4,"['feedback', 'usab']","['feedback', 'usability']"
Usability,"@fredroy, welcome back, . When I'm in this situation here is my workflow: . If it is really important for other to see my progress, or have multiple person commiting in the branh and have systematic feedback from the CI...I let the PR open with the pr:wip tag as guillaume answered. . Otherwise, if I prefer less publicity on the work (and avoid the PR to stay for month in the wip status) I close the PR, then open a new issue sumerizing & centralizing the discussion and I continue working in the closed PR. If from time to time if I need CI's feedback I re-open the closed PR for few hours..then close it back again until I really think this is a work nearly done.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342:199,feedback,feedback,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/253#issuecomment-304904342,4,['feedback'],['feedback']
Usability,"@ggrosshenny ; Thank you for you PR. Being able to save timing in JSON is a very nice idea and as more and more sofa component are using JSON so it make sense to have that. . Now, some feedback about the implementation:; - There is a lot of new functions but there is not test for any of them. . - The way you handle errors in the binding code is now deprecated as it was not following the python standard. The proper way is that failure in binding code must return NULL (and not Py_RETURN_NONE). You can add an execption and a custom message with PyErr_SetString(...) but you don't need to do that when the failure is because of PyArg_ParseTuple...as it set the message itself so that it is standardized. . So, it should be like that: ; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); return NULL;; ```; Instead of:; ```cpp; if(!PyArg_ParseTuple(args, ""sO"", &id, &tempNode)); {; PyErr_BadArgument();; Py_RETURN_NONE;; }; ```. - You are commenting the python binding code using doxygen, thank you very much for that ! As these are python functions it would be great if you could also provide python docstrings (as this is the python standard of documenting code). You are using the SP_MODULE_METHOD macro which have and empty docstring by default... sofa is missing a macro one to specify the docstring (it exists for SP_CLASS_METHOD_DOC). So to document you functions you first need to add a new macro close to SP_MODULE_METHOD with:; ```cpp; #define SP_MODULE_METHOD_DOC(MODULENAME,M, D) {#M, MODULENAME##_##M, METH_VARARGS, D},; ```; Then you can document the python code in a way similar to when using ""SP_CLASS_METHOD_DOC"". . - the externals libraries should be in the repository extlibs/* so sofa/helper/json.hpp should be moved there. - I have no opinion whether the JSON output should be activated only when the json.hpp is found or if we should systematically ship this lib with sofa. @hugtalbot probably have better opinion on these aspects as this have connection with the Licens",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885:185,feedback,feedback,185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-322555885,2,['feedback'],['feedback']
Usability,@guparan ; Actually there were not used at all in the sofa code base so I simply remove them. To you have a suggestion about that ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/407#issuecomment-330469848:74,simpl,simply,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/407#issuecomment-330469848,2,['simpl'],['simply']
Usability,"@guparan In fact, calling `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` (line 89 of SceneLoaderPY.cpp) causes an inconvenient limitation: The python scene loader cannot be used correctly when using a different parser than `sofa::helper::ArgumentParser`. . And in SofaQtQuick, we precisely would like to use the class `SceneLoaderPY` but using `QCommandLineParser` (`sofa::helper::ArgumentParser` is not used at all in SofaQtQuick). In the suggested commit, I simply move the call of `sofa::helper::ArgumentParser::extra_args()` from `SceneLoaderPY::doLoad` into more high-level methods. But this change induces to add a second input parameter for `SceneLoaderPY::doLoad`, in order to forward sceneArgs. Knowing that `doLoad` is originally a pure virtual method defined in class SceneLoader (see file SceneLoaderFactory.h), the multiple method overrides of this one (so in each scene loader) have to take into account the sceneArgs parameter even if it does nothing with it, that's why I made the parameter optional (NULL by default).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265:487,simpl,simply,487,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/992#issuecomment-484164265,2,['simpl'],['simply']
Usability,@guparan It is relatively easy because there is already good examples in some Sofa components. So it is more a factor of refactoring/reorganize/reuse existing code. . I consider that anything that has consequence on the User Experience is of high priority (in order to get more and more happy sofa users). Data fields are a big part of the sofa User Interface.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270:220,User Experience,User Experience,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/64#issuecomment-264851270,1,['User Experience'],['User Experience']
Usability,"@guparan in our plugins organization objects is there to hold c++ class that are not components while in general 'core' in sofa is for the base classes and infrastructure. Actually what we are putting in this objects directory is much closer in essence to what is actually in sofa/helper (ie utilitary classes). But ""objects"" is not a very clear name after all and core is maybe not better but not worse so if you like it...let's use it ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552:340,clear,clear,340,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/426#issuecomment-334517552,2,['clear'],['clear']
Usability,"@guparan it was there and ""already in the path"" I simply dropped ninja in it :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/234#issuecomment-291500471:50,simpl,simply,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/234#issuecomment-291500471,2,['simpl'],['simply']
Usability,"@guparan thanks for the feedback, I will change all the #ifdef XXX_HAVE_SOFA_GL then",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1888#issuecomment-790721996:24,feedback,feedback,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1888#issuecomment-790721996,2,['feedback'],['feedback']
Usability,"@guparan the timeout in Jenkins is a timeout of ""no activity"" and not absolute...an application that constantly print on its ouput is not halted. This is clearly not enough. . We probably need both logics:; - a 'no activity' timeout that should be set to a short duration like 30min.; - an 'absolute' timeout configured to a much larger value (eg: build duration + all the test + 40% ). EDIT: one thing to add, timeout is not the panacea because a '3 hours timeout' (a sound value) already allows problematics build to cause a lot of harm in the CI. Our log files are always far below < 100 MB unless something goes really wrong. So my suggestion is some checks on the log file size to detect and cancel offending builds.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117:154,clear,clearly,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289728117,2,['clear'],['clearly']
Usability,"@guparan, @fredroy, @marques-bruno . I'm facing a problem here, all the scene are failing because of interaction between the library in this PR and the ""automatically loading plugin"" mechanism we have. . In this PR, a new module is added but as this does not contains sofa components there is no need for to implement the 'plugin' interface (the initExternalModule() and other functions). But, by default the build scripts are automatically adding all plugins&modules into the config file with the plugins to load by automatically including things that does not have components (and thus are ""simple shared libraries). . What do you think about:; - differentiate better the 'libraries' from the plugins. This may be by adding adding a ; sofa_add_library() ? ; - store the libraries in a different build location than the plugins/modules. ; - I can add the initSofaEditor.cpp with the missing function...it would work but as this does make sens I'm hesitating to such solution.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429:593,simpl,simple,593,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735#issuecomment-418049429,2,['simpl'],['simple']
Usability,"@guparan: ultimately what I wanted to achieve with this PR was to roll back to https://github.com/sofa-framework/sofa/commit/ca0402dbfb909c222f913cb7b8f03a522f71f9ad in terms of what the PluginRepository contains. I made a mistake when it came to the content of the PluginRepository except for the windows platform which is my most common development environment.; There have been multiple changes made to this file, most for no good, and mostly undocumented, reasons, this was working in the first place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134:446,undo,undocumented,446,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342480134,2,['undo'],['undocumented']
Usability,@guparan; ​Thanks for managing the pull request. I'll make a new one according to the commit guidelines within the week .,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/287#issuecomment-307788624:93,guid,guidelines,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-307788624,2,['guid'],['guidelines']
Usability,"@hugtalbot ; - it is not related to #1087, ; - it is more to prepare the evolution from the class that mix in a single object a static/singleton part of the object and a part that shouldn't be one. It was often said in discussion that such design was highly questionnable. ; - i prefer to have such move before implementing the import/namespace in the factory demonstrated in https://github.com/sofa-framework/sofa/pull/2512; ; About the use of the ""future"" namespace I use it to clearly show that there is two ""ObjectFactory"". The one with the old API (and it fully backward compatible) and the one with the new API. I could of course have mixed everything (the old and the new API) in a single one object but I found it quite convenient to clearly see the objects future::ObjectFatory and ObjectFactoryInstance in their final state and well separated from the ""compatbility"" layer in ObjectFactory. ; I could have use a different class name for future::ObjectFactory like NewObjectFactory but this is would have been behaving exactly like having a namespace glued to the class name (actually I see this a namespace hidden in the classname so people don't notice it is one ;)); I also consider using the approach of SofaNG to make deprecation but this only work if we move the new version of the object to be in a different namespace that the one we want to deprecate. In the present case I wasn't sure we really want to move sofa::core;;ObjectFactory somewhere less, if you find an appropriate suggestion i would be very welcome as I would found that easier than using the ""extra"" namespace. ; In NG we often do such a thing but this is done like that:; 1) move the new API to a new namespace (eg: sofa::type::); 2) make a deprecation layer (eg: sofa::defaulttypes::); In the ObjectFactory cas I'm not sure there is a need to have the new api moved in a new namespace (I see no problem in having it in sofa::core) . EDIT: and ""future"" this is nothing related to master branch. As being in master bra",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2712#issuecomment-1054507393:480,clear,clearly,480,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2712#issuecomment-1054507393,4,['clear'],['clearly']
Usability,@hugtalbot @alxbilger @fredroy ; I have added the deprecated lifecycle mechanism as requested. Could you tell me if I did it right. The instructions on the webpage are not 100% clear to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3327#issuecomment-1272091500:177,clear,clear,177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3327#issuecomment-1272091500,2,['clear'],['clear']
Usability,@hugtalbot Can you merge it please (unless someone see problems and give feedback),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/63#issuecomment-262619814:73,feedback,feedback,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/63#issuecomment-262619814,2,['feedback'],['feedback']
Usability,@hugtalbot I simply checked out #2999 :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3084#issuecomment-1172285654:13,simpl,simply,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3084#issuecomment-1172285654,2,['simpl'],['simply']
Usability,"@hugtalbot My intuition would answer no, but I cannot prove it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3233#issuecomment-1223895055:14,intuit,intuition,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3233#issuecomment-1223895055,2,['intuit'],['intuition']
Usability,"@hugtalbot unless it is a very important fix, please don't forget to wait a 1 week quarantaine before merging to give an oportunity to anyone to give feedback :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279689308:150,feedback,feedback,150,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-279689308,2,['feedback'],['feedback']
Usability,"@jnbrunet To be clear, there are 2 optimizations in this solver: 1) optimization for diagonal masses, 2) multiop optimization.; I did not touch anything in the non-optimized multiop code. I changed the velocity input in the position update in the optimized multiop code. # Non-optimized multiop code. I did not change this code. ## Symplectic. ```; newVel = vec + acc * dt; newPos = pos + newVel * dt; ```. ## Non-Symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Optimized multiop code. ```cpp; ops_vel.second.emplace_back(vel.id(), 1.0);; ops_vel.second.emplace_back(acc.id(), dt);; ops_pos.second.emplace_back(pos.id(), 1.0);; ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);; ```; `ops_vel` is executed first if symplectic. `ops_pos` is executed first if non-symplectic. If I translate this code to formulas:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + newVel * dt; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. This is exactly the same formulas than for the non-optimized code!; My change was on the line:; `ops_pos.second.emplace_back(d_symplectic.getValue() ? newVel.id() : vel.id(), dt);`; Before it was:; `ops_pos.second.emplace_back(vel.id(), dt);`. It would translate to:. ## Symplectic. ```; newVel = vel + acc * dt; newPos = pos + vel * dt <-- difference here with the non-optimized code; ```. ## Non-symplectic. ```; newPos = pos + vel * dt; newVel = vel + acc * dt; ```. # Conclusion. I believe that I fixed the multiop optimized symplectic version. Both optimized and non-optimized codes are now consistent. Note that this makes a difference only for the FreeMotion animation loops. @jnbrunet Regarding your math problem, I don't understand it. I don't see where you see a difference with SOFA. If you agree, I think we can merge this PR because it does not change the behavior (except for the fix). If there are some maths problems, it can probably be tackled later. What",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866:16,clear,clear,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2163#issuecomment-867677866,2,['clear'],['clear']
Usability,"@jnbrunet thanks for the code. I'm wondering if canCreate is the right stage to do that because if the link can't be resolved, your FF will not be created at all. But in a ideal SOFA world, if the component is set to invalid because the link is not working you could update it in your gui, solve the link which will act like a Data and update the component. I'm also wondering if the mstate link is set in your scene, is it already usable in the ForceField constructor ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048:432,usab,usable,432,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705099048,2,['usab'],['usable']
Usability,"@jnbrunet, @fredroy I updated the PR, . can you give me feedback on the implementation of error/warning promotion (in config.in.h)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485:56,feedback,feedback,56,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639#issuecomment-737198485,2,['feedback'],['feedback']
Usability,"@marques-bruno you're right! You had already mentioned that this would improve the reusability of PSDE-Python-Code written by the user. In that case I am in favor of this feature. About the intuitiveness: do you (and the others) think it would make sense to have an additional argument in createObject() that explicitly has to be set to use this feature of ""inline"" PSDE I/O creation?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-416164790:190,intuit,intuitiveness,190,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-416164790,2,['intuit'],['intuitiveness']
Usability,"@marques-bruno: can you provide examples for the behavior you describe? (maybe add them to the PR) I don't have as much experience with the update-on-demand feature. Pertaining to the discussion in PR#629 (should we use on-demand updating or events) I would also appreciate the opinion of the others. The pros of on-demand updating is consistency with the DataEngines, the pros of the event-based approach is simplicity. @marques-bruno has been raising the issue of code maintainability regarding the update-on-demand feature of DataEngines for a while and this PR seems a good opportunity to decide what the developments in the future could be. For me the questions are: Refactor the implementation? Document the behavior in a more understandable way? Simplify/Change behavior alltogether?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139:409,simpl,simplicity,409,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413554139,3,"['Simpl', 'simpl']","['Simplify', 'simplicity']"
Usability,@matthieu-nesme . Currently no-one answered to the checkData API related issues https://github.com/sofa-framework/sofa/issues/265 so I don't know when this will happen.I hope this will happen soon but currently I have no visibility so I prefer to make the change of existing function in batch when a PR related to #265 will be accepted. . In the meantime it is probably a good idea to add a function called checkDataValidity() called in init() just to simplify the transition when it will happen.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302639771:452,simpl,simplify,452,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302639771,2,['simpl'],['simplify']
Usability,"@matthieu-nesme . The version is very simple...; In the constructor we:; - record the already loaded modules, ; - install a hook on the import function. . At each subsequent import we record in a second list the imported modules. ; Then when calling uninstall we remove from python module cache the one that are in this second list...(thus returning to the previous loading state). This force python to reload them next time it sees an import. About the re-init... ; Do you know how to be notified when the scene is going to be destructed and if there is no...is this something you could implement easily ? . EDIT: I cleaned the branch for a PR once the reinit stuff cleared.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694:38,simpl,simple,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-285083694,4,"['clear', 'simpl']","['cleared', 'simple']"
Usability,@matthieu-nesme I like so much your concision I should learn from that when writing ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-276933049:55,learn,learn,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-276933049,2,['learn'],['learn']
Usability,@matthieu-nesme what's wrong with using `str` ? The semantics are clear and concise and you don't have to mentally infer the various checks that will take place when converting. The explicit case checking looks much worse to me. (sorry for bikeshedding). @damienmarchal why not recursive? This prevents setting `MechanicalObject` positions when `size > 1`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308039440:66,clear,clear,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308039440,2,['clear'],['clear']
Usability,"@matthieu-nesme, @EulalieCoevoet . I'm trying to fix the test failure in FixConstraint_test when compiled in debug. The failure is related to SparseLDLSolver that do things like that: ; ```cpp; METIS_NodeND(&n, &xadj[0],&adj[0], NULL, NULL, perm,invperm);; ``` ; Compiling the test in debug activates the vector bound checking which rise the error message as [0] on an empty vector does not make sense. This error message makes the test fails. . Compiling the test in release mode de-activates the vector bound checking so the test is not failling anymore. But adj.size() is still zero and adj[0] is still used. According to the standard this is undefined behavior so we need to fix that. . I made a fix in which I set a minimal size of one to the faulty vectors.... but I'm not sure that having an empty adj vector is not an indication of a deeper problem (or the manifestation of a specific case) and that the right fix should to properly handle this case instead of playing with memory array to ""hide"" it. . As you have experience with solvers any feedback would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180:1051,feedback,feedback,1051,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/279#issuecomment-305611180,2,['feedback'],['feedback']
Usability,"@maxime-tournier ; I think that any code that pass a sequence to createObject will work differently. ; Eg: ; 1) passing a python sequence to a Data<string> was resulting in [1,2,3], now it will be 1 2 3. If your component count on the [1,2,3] structure to do something it will not work anymore. ; 2) passing a python sequence to a Data<set> was resulting in [1, 2 3] but because the parser was not reporting problems this was resulting in something different (0 0 0 ?) ... if the scene was, 'by surprise', working...it will not work anymore. The case (1) is probably rare but not fundamentally bad.; The case (2) is clearly bad but exists. 1 & 2 are rare cases and I'm convinced we shouldn't annoy anyone using createObject with warning messages this is why I personally think that having a global switch (not an #ifdef) to print these kind of messages would be great to tools to help users to debug their scenes through the API changes. (maybe it is overkill :)). About having the warning in the 'else' case. It may be an option but we still want to support simple conversion from int/string/float values without a warning right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829:616,clear,clearly,616,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306600829,4,"['clear', 'simpl']","['clearly', 'simple']"
Usability,@maxime-tournier I believe the last commits takes your input into consideration (if I didn't miss anything); Looking forward your feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/317#issuecomment-315029412:130,feedback,feedback,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/317#issuecomment-315029412,2,['feedback'],['feedback']
Usability,@maxime-tournier I would alreay be happy with a feedback on the approach taken to cut the depdencies. I'm asking because I know the topic interests you.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343905851:48,feedback,feedback,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343905851,2,['feedback'],['feedback']
Usability,@maxime-tournier Thanks for your responsiveness ;). Mergeable to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306789278:33,responsiv,responsiveness,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306789278,2,['responsiv'],['responsiveness']
Usability,"@maxime-tournier and @matthieu-nesme ; Thanks for your suggestions,. It is not very clear when you are refering to ""current approach"" if you are discussing about the sofa version or the one that is already in this PR. . Existing Sofa looks like: ; ```cpp; namespace std{; ... operator<<(ostream, std::set); ; }; ```. In this PR it looks like: ; ```cpp; namespace sofa::helper{; using std::set ; /// do we need the template prefix as matthieu suggested ? ; ... operator<<(ostream, sofa::helper::set); ; }; ```. Maxime's suggestion ; ```cpp; namespace foo{; template<class ...T>; struct vector final : std::vector<T...> {; using std::vector<T...>::vector;; };; ... operator<<(ostream, sofa::helper::set); ; }; ```. The sofa existing one is clearly bad as it pollute the namespace. It seems to me that maxime's suggestion avoid the need to have 'using operator<<' in calling code. It is unclear to me what are the drawback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697:84,clear,clear,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278#issuecomment-303335697,4,['clear'],"['clear', 'clearly']"
Usability,"@maxime-tournier just to make things clear for me. ; You use an intermediate data structure to store the matrix values ( wherever they are coming from, mapping forcefield... ) and the mask data structure store the sparsity pattern. Since Flexible and Compliant rely extensively on the `Mapping` API, (conceptually everything can be broken down in a combination of application + linearisation around a given configuration) the only requirement in that case is to be able to express the sparsity pattern of each mapping, am I correct ? . That being said I agree that it would be ideal to have an intermediate data structure to supersede the `BaseMatrix` API, to fetch the matrix data ~~( and maybe the sparsity pattern at the same time ? )~~ that could fit with any linear algebra library with minimal overhead.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429:37,clear,clear,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292484429,2,['clear'],['clear']
Usability,"@maxime-tournier ok I am convinced, let's use str for everyone (except list/iterable) to remain on a simple implementation. Please could you propose us an implementation?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308057027:101,simpl,simple,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308057027,2,['simpl'],['simple']
Usability,@olivier-goury and @EulalieCoevoet this PR can be severly breaking so don't hesitate to review it and give feedback to Hugo.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199306:107,feedback,feedback,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-392199306,2,['feedback'],['feedback']
Usability,"@olivier-roussel thanks for the conda test and the feedbacks 👍; You should have made suggestions and/or make a PR on my branch, as I cannot credit you your patches 😵",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922632664:51,feedback,feedbacks,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471#issuecomment-1922632664,2,['feedback'],['feedbacks']
Usability,"@rgao15 Thanks a lot for the feedback!. I tried to reproduce your issue. On my end, I do have an error message:; ```; [ERROR] [MouseOperation] ConstraintAttachBody performer cannot be created with the picked model.; ```; Let us know if you have the same error message. I am also on Windows. Anyway, I tried to understand what's happening. Why ConstraintAttachBody cannot be created?; It is supposed to be added in a factory here : https://github.com/sofa-framework/sofa/blob/323e20e4168e1ab5b67352f4621d4f1b3fa39be9/modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp#L38; Registration in the factory works BUT not in the right factory.; The factory in `modules/SofaGuiCommon/src/sofa/gui/MouseOperations.cpp` and in `modules/SofaConstraint/src/SofaConstraint/ConstraintAttachBodyPerformer.cpp` are different. The factory is a singleton but there are 2 different instances. I confirmed it by printing the factory address. I suspect it's because they are used in different libraries. The question is: how to solve it? And is it the same story for other factories? @fredroy @damienmarchal I would need your help",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531:29,feedback,feedback,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2486#issuecomment-973088531,2,['feedback'],['feedback']
Usability,@sergeiNikolaev . I think your problem is interesting and is an important issue of Sofa usability. If you agree and other interested we could discuss here what ones can come up with possible solution (ie having more clear/simpler way to define component's properties).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462:88,usab,usability,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357354462,6,"['clear', 'simpl', 'usab']","['clear', 'simpler', 'usability']"
Usability,@sergeiNikolaev would you also have a simple example scene ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-644877800:38,simpl,simple,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-644877800,2,['simpl'],['simple']
Usability,"@sescaida I just took a look at the code of the ScriptDataEngine class.; You are partially right, the current implementation is the following:. `// Ok, so in the end we're stuck with using the AnimationBeginEvent? (20.02.2018, sescaida); void PythonScriptDataEngine::handleEvent(Event *event); {; if (AnimateBeginEvent::checkEventType(event)); {; setDirtyValue();; update();; }; }`; Here clearly, update is called everytime a AnimateBegin event is sent to the component. If it were a ""normal component"" (i.e. if it were a BaseObject-based component) that would be the only moment that update() method would be called. But the ScriptDataEngine also inherits core::DataEngine.; This is what I talked about during my presentation at the STC#5:; DataEngine both inherits from DDGNode & BaseObject. The update function is ""manually called"" from handleEvent, but it actually shouldn't be, because this is redundant to how DataEngine works, which is having its update() method called **when and only when** a component, taking as an input the output data of that engine, calls getValue() on that data, WHILE any of the engine's INPUTS are flagged dirty. . So basically, while some people call update() in their handleEvent method, this should never be done, except in some (quite) twisted cases.; Btw, it took me quite some time to understand that.. few months ago, all my engines were calling update() in handleEvent, and I had a lot of problems because of that.. ^^. Technically, in the case of the scriptDataEngine, if you remove entirely the call to the update function in handleEvent, and if your dependency graph is well built, you should get the behavior you want",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370:388,clear,clearly,388,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407008370,2,['clear'],['clearly']
Usability,"@sescaida Thanks for the review; The reason why I didn't add examples for this PR is because the current examples themselves, without any modification, demonstrate that it works as-is, thus showing that the call to update() in the handleEvent method was redundant with the default DDGNode's update mechanism. Basically, if your scene is well created (links are properly made between datafields & data are correctly accessed by components lower in the scene graph), everything should work just as well as before. The only difference I would say, is that the user has the hand over the cleanDirty() method, which allows him to fix use cases where a read acces is performed on an input, after setting an output's value has been set, in update(). as for whether it is a good idea to keep that system, I must say, that I agree with you, as we discussed before: Bringing the complexity of the DDGNode's mechanism in Python might be something we want to avoid.; Although, I think that the good approach to fight this issue would rather be to solve the problem on the C++ side (simplifying the Data-Update mechanism) than to diverge from it by simplifying the Python process.; I think @damienmarchal woul be the best placed to give us a feedback on this question, maybe? (When he'll be back from his holidays of course!)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022:1070,simpl,simplifying,1070,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/751#issuecomment-413560022,6,"['feedback', 'simpl']","['feedback', 'simplifying']"
Usability,"@sescaida as a reply to you previous comment:. - I think we should indeed remove the call to update from handleEvent, in the dataEngine. Although there are some twisted cases where it is necessary, it is not how it was designed initially I believe. I'd like @damienmarchal 's input on that, though.; Concerning the default value in addNewOutput, I totally agree with you. The only reason I kept it is because it would have even more impact on the error handling codebase in Sofa, which currently forces the existence of a ""value"" field to guarantee that the datatype can be deduced (which we are bypassing for outputs..); Overall, I think there's a decent amount of cleaning to do in this PR before it can be merged, including removing all the warnings that appear because we're working our way around the ""standard"" way to build datafields.; - I also agree with you that we need some reviews on this PR, and maybe also split it in multiple PRs for simpler reviewing. Things are getting mixed up now, between; - Populating the PSDE factory; - Deriving inputs / outputs; - passing datafields through createObject; - ...; I'll pass the PR to to_review and we can take a look at it on monday ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294:949,simpl,simpler,949,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-407791294,2,['simpl'],['simpler']
Usability,@thomas-lemaire currently I see that some components are doing; ```cpp; if(printLog) sout << ; ```; While the 'sout' is already checking the printLog which is redundant. This is what I'm refering as mis-usagse. To me the cleaning consist in defining what is the right pattern to employ and this may (or not) result in removing the if(printLog) from the component and replace them with the use of 'sout'. . About the link with PR106. With the PR a dedicated message handler has to be installed in the application or the scene to activate loggin into component... this is done with the following code ; ```cpp; MessageDispatcher::addHandler(&MainPerComponentLoggingMessageHandler::getInstance()) ;; ```; But currently this is not done in runSofa or any other app and the messages are not added to the log. This is why I'm saying the PR is independent and is without side effect. . When the printLog expected behavior is clear the current log 'to the big string' should be removed and replaced by installing the logging proposed in PR106.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662:918,clear,clear,918,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160#issuecomment-276932662,2,['clear'],['clear']
Usability,@thomas-lemaire pointed that in several place there is mis-usages of printLog. ; We should clean that by clearly defining what is the correct behavior. . We can clean the printLog stuff independently but this is in fact connected to the msg_* API (https://www.sofa-framework.org/community/doc/programming-with-sofa/logger/) as well as this PR(https://github.com/sofa-framework/sofa/pull/106) which are attempts to lay down the foundations for a general handling of all the messages in Sofa.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/160:105,clear,clearly,105,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/160,1,['clear'],['clearly']
Usability,@untereiner sorry I didn't saw you expected feedback on the tests. ; I will do that next monday.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570:44,feedback,feedback,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-328175570,2,['feedback'],['feedback']
Usability,"A bit of cleaning (formatting, removal of commented code, use of our friend `std::enable_if_t` etc) for `sofa::type::MatSym`. I added the `operator*` on matrices (symmetric and non-symmetric). I also added simple unit tests. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4600:206,simpl,simple,206,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4600,1,['simpl'],['simple']
Usability,"A bit of explanation about this PR:; When a attribute is passed to createObject, it is added to the BaseObjectDescription of the component. This means that, in cpp, the parse() method, that takes a BaseObjectDescription in parameter, has this information. The problem is, that in the PythonScriptDataEngine, the parse method calls the python version of the parse() method, which doesn't take this BaseObjectDescription in parameter (maybe that should change btw, since its mainly a simple key/value dictionnary after all...); The datafields could be added directly from the C++, but since most of the error handling in the creation of derived I/Os in #742 is performed in the bindings, it would mean recoding a lot of redundant code.; Since I didn't want to touch the parse() method, I created an additional method, that can (or not) be used in PSDEs, named ""datalinks"". This method is called right after the parse() binding, and takes a filtered version of the BaseObjectDescription as an argument (all datafields already created in the parse() method are removed from the dictionnary). The function then calls addNewInput() on each of the leftover fields. I'm certain there is a cleaner way of doing that.; - I was thinking maybe calling directly the python addNewInput() method from the cpp parse() method, to avoid the creation of this extra module function, but I am not sure I know how to do that. ; - Another idea would be to pass the BaseObjectDescription in the parse() method of the PSDE (as it should be done IMHO), and let the user decide whether or not he wants to loop over those fields to create inputs.. more error prone in my opinion. But you guys have good input on that ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524:482,simpl,simple,482,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-409859524,2,['simpl'],['simple']
Usability,"A bug has been detected when creating and deleting component using TopologyHandler during the simulation. ### Current Status; Right now in the code, components like FEM, Constraints, etc... are creating TopologyData and at init stage, those TopologyData are creating a TopologyHandler to support TopologicalChanges (only if the component is linked with a dynamic topology container).; The actual design is:; 1. Create the TopologyHandler at component init (internally through the TopologyData creation). ; 2. The TopologyHandler register itselft into the TopologyContainer to be able to receive topological events.; 3. When the simulation graph is destroyed, TopologyHandler is deleted and TopologyContainer is cleared. ### Limitation/Bug; Scenario like using the mouse picking is creating a temporary Node with springFF or attachedConstraint component which is creating a TopologyHandler. When the mouse is released the Node is destroyed, deleting the components and the TopologyHandler as well. ; But the TopologyHandler is not properly removed from the dynamic topologyContainer list of TopologyHandler. This is why in issue #3370 the scene crash as soon as a vertex is removed because the TopologyContainer is sending the POINTREMOVED event to all topologyHandler registered. Including the deleted one from the mouse attached constraint. The pointer to the topologyHandler is not null but pointed to a deleted object. ### PR changes description; This PR and the PR #3271 (included in this on) are introducing a mechanism to better register and unregister a TopologyHandler from the TopologyContainer.; 1. register is done at creation of the TopologyHandler; 2. If TopologyHandler has well been added to the list manged by the Container, a internal bool m_isRegisterd is set to true.; 3. When the TopologyHandler is deleted (meaning its component owner is deleted). If m_isRegisterd == true, the TopologyHandler will unregister itself.; 4. When the TopologyContainer is deleted, it will go through ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3369:711,clear,cleared,711,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3369,1,['clear'],['cleared']
Usability,"A continuation of ; - #4812 . but much bigger and less trivial. This PR removes SOFA_ENABLE_LEGACY_HEADERS, implying:; - no more collections/deprecated projects which was to ensure the continuity of Sofa.NG; - some renaming in MultiThreading and SofaCUDA. The deletion of the layer compat between old and new modules was acted for 23.06 so not a big deal by itself (only 1.5 year late🤷‍♂️ ).; But some olden modules still have some code/components:; - SofaGraphComponent: with a `Gravity` component; - SofaMiscCollision: with `DefaultCollisionGroupManager, SolverMerger` components and `RayTriangleVisitor` visitor; - SleepController: with a `SleepController`component; - SofaValidation: with various measuring stuff components.; There is also SofaExporter which had some forgotten(?) examples of components which were moved. So the examples have been just moved as well. So what should be done for these components?; IMO (not done yet); - `Gravity` seems useless/not usable.; - `SleepController` might maybe probably be interesting; - `DefaultCollisionGroupManager, SolverMerger` were bogus and RayTriangleVisitor not used at all; - SofaValidation may be totally transformed as a plugin (as in `applications/plugins`). To be discussed. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4813:968,usab,usable,968,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4813,1,['usab'],['usable']
Usability,A few minor change in matrix class to improve performance . FullMatrix: Restore fast matrix clear function; MatExpr: Remove console output in addTo function. Clear function in visual studio profiler. current: 0.51% inclusive samples; ![doubleForLoopClear](https://user-images.githubusercontent.com/3921764/63861622-85081200-c9ab-11e9-8192-e536e4c5b4eb.jpg). std::fill: 0.18% inclusive samples ; ![stdfillClear](https://user-images.githubusercontent.com/3921764/63861635-89ccc600-c9ab-11e9-9e87-2cac821888cf.jpg). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1128:92,clear,clear,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1128,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"A few people in the Mimesis team have made comments about errors that occur when the USE_MASK option is enabled. This PR simply sets the option as disabled by default, so that users will not unknowingly use it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/532:121,simpl,simply,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/532,1,['simpl'],['simply']
Usability,"A list of components is being defined, see issue #226 ; The idea is to present shortly a first prototype of SOFA NG to involve more and more people in the cleaning, testing of SOFA. This 1st SOFA NG version focuses on : . - very few classes (~20); - simple implementation of the base classes. This would allow to have a first set of simple components allowing for:; - new users to understand SOFA easier; - advanced developers and companies using SOFA for its core features (scene graph, DAG, visitors etc.) but without interests for all other codes. Example of these 20 components: DefaultAnimationLoop, UniformMass, ConstantForceField, EulerExplicit, Cholesky (see #244 ), IdentityMapping, FixedConstraint (see #246 ), ValuesFromIndices, MeshObjLoader (and others), RequiredPlugin. Any feedback is more than welcome : @ChristianDuriez @damienmarchal @StephaneCotin @JeremieA @matthieu-nesme",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/247:250,simpl,simple,250,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/247,3,"['feedback', 'simpl']","['feedback', 'simple']"
Usability,"A task from https://github.com/sofa-framework/sofa/issues/3967. A scene example is introduced because there wasn't one before. It is a simple beam under gravity. Usually, scene examples work with a CG. Here I use a direct solver. `addKToMatrix` was not implemented for this force field. So `buildStiffnessMatrix` has been written without a ""model"". I changed a type and remove a struct. It is therefore breaking. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4127:135,simpl,simple,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4127,1,['simpl'],['simple']
Usability,"A third solution, still in c++, to parse the added field into the function BoxROI::parse() and converts these fields values into the DataField used internally by BoxROI to do the computation. The good is that there is no performance cost. The drawback are the following:; - the parsed attribute are not visible in the GUI thus ppl cannot use them from the graphical interface and even worses, and when learning Sofa cannot discover they exists neither from the doc or from the GUI.; - the parsed attribute cannot be saved easily.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812:402,learn,learning,402,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357364812,2,['learn'],['learning']
Usability,"ADD msg_info_when(verboseSomething) as an alternative to ; if(veboseSomething) sout <<. This shouldn't break existing code. If interested, please give feedback to this way of writing conditional printing.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/101:151,feedback,feedback,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/101,1,['feedback'],['feedback']
Usability,About failure by default on warning & deprecated...this is a choice. . The positive thing about this 'bold' behavior is that it force tests maker to care about warning and deprecated messages otherwise they tend to ignore them. As I prefer to specify explicitely in every test case the expected behavior I dont' feel very concerned about that 'default mode'. ; But I think this 'bold' behavior sound nice to me and from the new failure we can see in the test reports this mode is rising interesting issue that requires investigations. About the disable color while testing. I disable it only for the tests to see if it improve the readability. Now red in the console only means that a test have failed and it not obfuscated with the red from an expected error message. (I 'm not sure I'm clear here). You can change that if you prefer :) . EDIT: I update the text to be more clear :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636:788,clear,clear,788,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-291933636,4,['clear'],['clear']
Usability,"About the UX, we have different possibilities to use multithreaded algorithms:. # Traditional components using usual DataTypes. They can have some Datas to enable/disable the use of multithreading.; - `FreeMotionAnimationLoop`; - `d_parallelCollisionDetectionAndFreeMotion`; - `d_parallelODESolving`; - `GenericConstraintSolver`; - `d_multithreading`; - `MechanicalMatrixMapper`; - `d_parallelTasks`. # Component in MultiThreading plugin starting with Parallel; Again using the regular DataTypes; - `ParallelBruteForceBroadPhase`; - `ParallelBVHNarrowPhase`; - `ParallelHexahedronFEMForceField`. # In the MultiThreading plugin, there is also these components:; - `BeamLinearMapping_mt`; - `AnimationLoopParallelScheduler`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067:10,UX,UX,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2049#issuecomment-1318486067,2,['UX'],['UX']
Usability,"About the last syntax your are proposing, I think it shouldn't be hard to do. . You simply have to in the c++ construction of the PSDEMagic dedicated code that get the argument named 'update', then extract its parameters (is callable, param names), transform all that as input and generate the output.; Actually this is very similar the use of decorator except that with decorator this ""magic binding"" logic is implemented in python while in your case the ""binding"" logic is done in the c++ part. . I will continue digging in this issue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028:84,simpl,simply,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380411028,2,['simpl'],['simply']
Usability,"AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::empty();; throw std::runtime_error(""Invalid operation"");; }. void setValueInteger(int index, int value) override ; { ; if constexpr(; !Info::Properties::IsSetContainer && ; Info::Properties::Type == DataType::Integer); return Info::setAt(index, value);; throw std::runtime_error(""Invalid operation"");; }; /// ...; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:1387,clear,clear,1387,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905,4,['clear'],['clear']
Usability,"According to @jnbrunet 's feedback I would say that the right approach to fix this is to stop using implicit and hidden link between objects. In defrost we are doing this kind of pattern (in pseudo code) this: ; ```cpp; class MyObject {; ....; SingleLink<Topology> topologyLink;; }; MyObject::init(){; /// Check if the link is explicitely set, ; if( !topologyLink.isSet() ){; /// If this is not the case so fallback to get the first topology in the context (buisness as usual) topologyLink.setLinkTo( getTopology() );; }. /// Here we use linked object. ; }; ```. Such an approach:; - is compatible with our existing scene base (when no link is specified then automatically retrieve something from the context) . But it brings the following: ; - As there is systematically a SingleLink for each getContext query, users can see in the GUI which object is actually linked to and so he can detect more easily what is wrong. . - With the SingleLink it become possible for the user to specify object should be used instead of the one retrived from the context (eg when you want the second object instead of the first one). . So to me we juste need to generalize this way of doing to all sofa objects. ; Any suggestion and feedback welcome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930:26,feedback,feedback,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/744#issuecomment-411381930,4,['feedback'],['feedback']
Usability,"According to the guidelines. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4664:17,guid,guidelines,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4664,15,['guid'],['guidelines']
Usability,"According to the guidelines; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4771:17,guid,guidelines,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4771,1,['guid'],['guidelines']
Usability,"Actually I was more thinking on tracking Mass::d_componentState to either be notified on changed or to simply detect when a mass is changed using a DataTracker. . Using a DataTracker situation would be more or less the following... . ```cpp; class MatrixLinearSystem; {; // .......; private:; DataTracker massChangedTracker; ; };. void MatrixLinearSystem<>::XXXX(); {; ...; /// somewhere where we add the mass to the lists of contributor; massChangedTracker->trackData(contributor->d_componentState); ... ; }. void MatrixLinearSystem<TMatrix, TVector>::contribute(const core::MechanicalParams* mparams); {; ...; /// Here we can then juste track the change; else if constexpr (c == Contribution::MASS); {; if( massChangedTracker->hasChanged(contributor->d_componentState) ) ; {; contributor->buildMassMatrix(m_mass[contributor]);; massChangedTracker->clean(contributor->d_componentState); ; }; }; ....; }; ```. PS: This is somehow connected to what @hugtalbot is doing in these PRs: https://github.com/sofa-framework/sofa/pull/3927",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4625#issuecomment-2042583615:103,simpl,simply,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4625#issuecomment-2042583615,2,['simpl'],['simply']
Usability,Actually there is no clear() method for Links.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/772#issuecomment-425903565:21,clear,clear,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-425903565,2,['clear'],['clear']
Usability,"Actually this is not really true, the problem is that the other things with a 'd_' are NOT data 🤪, they are Link and thus should be prefixed with 'l_' . ; So this class is not following the correct guidelines 😬 (and members not having 'm_' etc...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803896279:198,guid,guidelines,198,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803896279,2,['guid'],['guidelines']
Usability,"Add a Data<bool> maxIteration in LCPForceFeedBack to set a number max of iteration for the gauss seidel used to solve the constraint problem. ADD LCPForceFeedback_test using a simple scene of a tool falling on a floor, checking constraint problem and request some force computation from LCPForceFeedback. Will see in a next PR how to add a test on concurrent threads asking for LCP computeForce . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1576:176,simpl,simple,176,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1576,1,['simpl'],['simple']
Usability,"Add a `FixedWeakConstraint`. It is really a simplified version of `RestShapeSpringForcefield` that only fixes points with respect to their rest_shape given one single value of stiffness. I didn't use an inheritance because `RestShapeSpringForcefield` does too much and the two set of features aren't really compatible. Keep it simple... . This completes the holy trinity of fixed constraints, now we will have Weak, Projective and Langrangian fixed constraints. It unifies the mechanism. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4750:44,simpl,simplified,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4750,2,['simpl'],"['simple', 'simplified']"
Usability,"Add a new update mechanism for components which need to update / recompute internal variables when one or several data are modified. A visitor has been created for this, called at each begin of time step to refresh if necessary the internal variables. All feedback welcome. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1131:256,feedback,feedback,256,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1131,1,['feedback'],['feedback']
Usability,"Add two types in sofa: only header files that are not (yet) used by other components. ; The DataCallback allows to call a specific function after any modification of a data. in the declaration of the class ; ```; Data<double> d_data; DataCallback c_data; // I usually prefix with c_; ```. At the initialization of the constructor:; ```; : d_diff(initData(&d_diff, ""name"", ""desc"")); , c_diff(d_diff) // listen to d_diff data. The constructor of the DataCallback takes a data as reference; ```. Then anywhere (usually in the constructor body); ```; c_diff.addCallback(this,&MyComponent::myfunction1); ; c_diff.addCallback(this,&MyComponent::myfunction2); ; ```. The main difference with an existing type in sofa if the possibility to attach several functions and more importantly to specify the component on which the callback will be called. This allows to define callbacks as member functions of the component, which simplify access to parameters. Additional test are added allowing to modify the data while the callback is called (in order to avoid cyclic calls). This is usefull for linked data i.e. The callback receives a modification from the parent, the callback is then called and it is allowed to modify the data in the callback which will automatically call update of childs of the data. . The second type introduced in this PR is a wrapper allowing to easily associate a widget with a specific types of data. It can be used as follows: . in a cpp file; `sofa::helper::Creator<sofa::gui::qt::DataWidgetFactory, GenericDataWidget< Data<bool>, QtDataBoxEdit > >	DWClass_bool(""bool"",true);`. QtDataBoxEdit is a Qwidget class defined by the user that needs to define usual functions needed in sofa widgets : ; ```; void readFromData(const Data<bool>& data);; void writeToData(Data<bool>& data);; ```. And constructor must take as parameter the parent and the data as follows :; `QtDataBoxEdit(sofa::gui::qt::DataWidget* parent,const sofa::core::objectmodel::Data<bool> & data) : QCheckBox(parent)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/911:917,simpl,simplify,917,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/911,1,['simpl'],['simplify']
Usability,"Adding a few utility functionalities to simplify Data tracking. - Data tracking system is now using Data's counter (lighter and simpler).; - externalizing Data tracking system outside of DataEngine so it can be use elsewhere (including other kinds of components).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components.; - adding DataTrackerFunctor to call a functor as soon as a Data is modified. What you can do: (have a look at the tests). - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine); - do an action as soon as a Data is modified. E.g. updating the gui scene graph as soon as a Node is (de)activated (by tracking the Data Node::activated).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/80:40,simpl,simplify,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80,2,['simpl'],"['simpler', 'simplify']"
Usability,"Adding a few utility functionalities to simplify Data tracking. - externalizing Data tracking system outside of DataEngine so it can be use everywhere.; - Data tracking system is now using Data's counter (lighter and more simple).; - adding DataTrackerEngine that is a kind of DataEngine but that is not a component (not a BaseObject). It can easily be added anywhere and can link any Data, such as inside a Component, or even between components. What you can do: (have a look at the tests); - check if a Data changed on a regular rhythm. e.g check at each time step if a stiffness parameters changed to update a Matrix.; - automatically update a Data if its dependencies changed. e.g. young modulus can be set as a dependency of stiffness matrix, so each time you ask for the matrix, if the modulus changed, the matrix will be updated (behavior similar to DataEngine)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/60:40,simpl,simplify,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/60,2,['simpl'],"['simple', 'simplify']"
Usability,"Adds the ability to insert a BaseObject at front or at end in the node. ; Adds the corresponding tests; Adds one use case of the feature to handle the default loop added by a Simulation. ; Adds a root-less createNode in simpleapi (to implement the test in an easier way) . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2396:220,simpl,simpleapi,220,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2396,1,['simpl'],['simpleapi']
Usability,"After a successful build, I have the following trace when running:. ```; [INFO] [runSofa] PluginRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/plugins:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/collections:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib; [INFO] [runSofa] DataRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/examples:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/examples; [INFO] [runSofa] GuiDataRepository paths = /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/gui/runSofa:/nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/share/sofa/gui/qt; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/config; [ERROR] [FileSystem::createdirectory()] /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots: Permission denied; [INFO] [BaseGUI] Created directory: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Forward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.Backward.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-sofa-24.06.00/lib/libSofa.Component.ODESolver.so; [INFO] [PluginManager] Loaded plugin: /nix/store/mn6bilp3k5c238bk5g1hs67nn9cc2m27-so",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488:666,GuiD,GuiDataRepository,666,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5059#issuecomment-2417862488,1,['GuiD'],['GuiDataRepository']
Usability,"After some tries, I could not come up with something that fails either. This is good news, right? :-). As to the semantics, maybe we should simply add an `__str__` method to `BaseObject` that returns `getLinkPath()`. This way we don't have extra special cases in `createObject` and the semantics become clear enough to me: arguments are converted to strings unless they are sequences, in which case they are converted to the expected format.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307767628:140,simpl,simply,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307767628,4,"['clear', 'simpl']","['clear', 'simply']"
Usability,"After spending some (too much?) time on this topic, it seems that the fact that static_assert not being evaluated in uninstantiated functions of template classes is not consistent between compilers.; Neither could I find a way to trick the compiler to postpone the evaluation of the condition of the static_assert (for example replace (N==10) by (sizeof(T)==0||N==10) , of template tricks to force the compiler to wait for template instantiation before assertion evaluation. All this is also true for BOOST_STATIC_ASSERT (tried this with no chance, too). My opinion would be to simply remove the static_asserts, since in this context their behaviour is not specified by C++ references (and not consistent). We loose the benefit of the safeguard but are not subject to false-positive anymore. If anyone sees another solution...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017:578,simpl,simply,578,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/130#issuecomment-272476017,2,['simpl'],['simply']
Usability,"Agreed, I don't like adding a Data in every component just for this.; I think the underlying issue of having an empty scene bounding box when there is not visual models could also by fixed relatively simply and without introducing much cost by:; - including the collision models top-most bounding boxes that are already computed during each time step (in fact this could be the only information used by default, as it is cheaper in practice to obtain than the visual bounding boxes because it's already computed for the broad phase); - and/or having a flag in `DrawTool` to look at the given coordinates to compute a bounding box of all non-visual but visible elements. As the DrawTool API is quite inefficient anyway the overhead may be insignificant, and it will disappear in cases where there is no debug information visualised. To me this could be controlled by one of the master component in the root node, either the `AnimationLoop` (as the issue is when `UpdateBBox` happens and how it is implemented, bonus point is that this component would then have the ability to schedule it in parallel with the other computations), or the `VisualManager` (as the current use cases for bounding boxes are currently exclusively to setup the scene rendering bounds and/or show bounds of a subgraph). This control could either be by implementing this update directly, or providing the choice that is setup for this particular scene (which alternative to use, which frequency of bbox updates).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387:200,simpl,simply,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/29#issuecomment-261507387,2,['simpl'],['simply']
Usability,"Agreed. It's simpler.; To be clearer: plugin was equal to ""PSL"" and not ""PSL.dll"". In this case, we want to to load as a name, but the test based on std::equal crashes (in debug only).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776:13,simpl,simpler,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376458776,4,"['clear', 'simpl']","['clearer', 'simpler']"
Usability,"Aha! Well, just to be clear, my suggestion would have been PythonScriptDataEngine-> PyComponent and PythonScriptController -> PyController. I understand that in terms of implementation, even conceptually, a DataEngine is different from a BaseObject. But, this information is of no use to the user in my opinion. When he sees the PSDE he expects it to be updated when the Datas have changed. If I'm new to Sofa and I see a component that is called ""PythonScriptDataEngine"" I figure that it must be something very specific, related to an engine of some sorts. If I see ""PyComponent"" I understand immediately that this is a component in my scene whose behavior I can implement in python. But granted, it doesn't take much to explain in a documentation that what is hidden behind the name ""PythonScriptDataEngine"" is just that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406614649:22,clear,clear,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406614649,2,['clear'],['clear']
Usability,"All in the title. ~~Sofa.Testing.Tools aims to regroup all the test templates/skeletons, etc, so the *_test could use it.; It should also a ""header-only"" (aka INTERFACE syntax in cmake) but for now it is treated like a (empty) shared lib.; By itself it does not manage any dependencies, it is the role of the *_test itself to handle its own dependencies.~~. Sofa.Component.ODESolver.Testing gathers all tools/test template for odesolver tests.; Next step should removing SofaCreator and use SimpleAPI instead (and thus removing all binaries dependencies). But the finalization of this should be reviewed/discussed. Mandatory ref #1527; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2650:491,Simpl,SimpleAPI,491,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2650,1,['Simpl'],['SimpleAPI']
Usability,"All is in the title, scene originally from @virginiemarec; This new scene shows how to simply in XML define an heterogeneous object with different regions.; ![](https://i.ibb.co/WzqdPp8/snapshot.jpg). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2289:87,simpl,simply,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2289,1,['simpl'],['simply']
Usability,"Alright after digging a bit into the code, I noticed that the XML parser for SOFA has a builtin handling of (forcefully set to) empty strings in name, which has not been ported to SofaPython:. Basically the XML parser stores a map of instantiated components (typename, idx), uses the `shortname` of the component concatenated with the idx of the new instantiation.; For instance 2 MechanicalObjects would be called ""mObject1"" and ""mObject2"". I implemented the same mechanism in the bindings to stay coherent. This mechanism is not perfect though, as one could still easily trick it by creating any component and give it the name ""mObject1"".. but then who would purposely do that... For nodes, It's better handled because at the node's creation, I have access to the node's parent and can thus check the names of components / nodes in the parent to prevent duplications. Still, moving the node post-creation could still result in name duplications, of course. Also in the bindings I have no structure in which to put this map... meaning that It will not be resetted until the whole program restarts, which is kind of ugly (reloading the scene from the UI would not reset the map so the names would change from one execution to another (yuck). I'll remind you that the initial purpose of this code is to prevent creation of nodes/objects with an empty string as a name, not to prevent code duplication (which is a different issue and should be checked using the SceneChecker instead IMHO) Duplicated names can result in undefined behaviors, but empty names can lead to crashes (the component's pathname becomes corrupted). Looking fwd to your feedbacks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388:1641,feedback,feedbacks,1641,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1009#issuecomment-489135388,2,['feedback'],['feedbacks']
Usability,"Alright, it seems the config.h is also needed. This is what I have by simply putting back SofaSimulationCore in SofaFramework. **CMakeLists.txt**; ```; cmake_minimum_required(VERSION 3.1); project(mymy). find_package(SofaFramework); add_executable(${PROJECT_NAME} main.cpp); target_link_libraries(${PROJECT_NAME} SofaSimulationCore); ```. **main.cpp**; ```; #include <sofa/simulation/MechanicalMatrixVisitor.h>; int main () { return 0;} ; ```; **Result**; ```; sofa/build/install/include/SofaFramework/sofa/simulation/simulationcore.h:25:10: fatal error: sofa/simulation/config.h: No such file or directory; 25 | #include <sofa/simulation/config.h>; | ^~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645:70,simpl,simply,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540633645,2,['simpl'],['simply']
Usability,"Also, I'm seeing this pattern over and over again:; ```c++; if (!PyArg_ParseTuple(args, ""s"",&filename)) {; PyErr_BadArgument();; return NULL;; }; ```; Please don't do that since it replaces the slightly helpful error message set by `PyArg_ParseTuple` by a generic one. Simply return `NULL` instead:. ```c++; if (!PyArg_ParseTuple(args, ""s"",&filename)) {; return NULL;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306426870:269,Simpl,Simply,269,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283#issuecomment-306426870,1,['Simpl'],['Simply']
Usability,"Alternatively, you could simply stick all your data inside a dedicated structure as follows:. ```c++; class Component : public Base {; ; struct data_type {; Data<int> test;; Data<double> test2;. data_type(Component* owner); : test(owner->initData(&test, int(0), ""test"", ""test doc"")),; test2(owner->initData(&test2, double(0.0), ""test2"", ""test2 doc"")) {; ; }; ; } data;. Component(); : data(this) {. }. Component(int foo); : data(this) {. }; ; }; ; ```; As an added bonus, you don't even have to use `d_` prefixing to remember which attribute is a Data ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439:25,simpl,simply,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-303142439,2,['simpl'],['simply']
Usability,"Amazing work @sergeiNikolaev !; However, as it seems you want into SofaCommon, we have to be a bit strict on the guidelines 👍 ; So could you: ; - remove all useless commented code?; - set prefix for Data<> (d_) and member (m_) ?; - remove serr with msg_error; - maybe uncomment all the msg_info (as it is not print if you dont enable printLog); - would be cool to use pragma once instead of the preprocessor guards (ifdef); Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616515264:113,guid,guidelines,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-616515264,2,['guid'],['guidelines']
Usability,"An other method for better error handling. (the other one to be exception mechanism #1882 ). 'Expected' idiom : ; - [theory by Andrei Alexandrescu](https://channel9.msdn.com/Shows/Going+Deep/C-and-Beyond-2012-Andrei-Alexandrescu-Systematic-Error-Handling-in-C); - clear explanation and comparison with exception: https://bell0bytes.eu/expected/. I am using boost::outcome because we have already boost in SOFA, but this is just to show the concept (I dont want to introduce more boost in SOFA..): https://ned14.github.io/outcome/. (Issue #1924 ); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1925:264,clear,clear,264,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1925,1,['clear'],['clear']
Usability,"An other session of warnings removal. it *should* be harmless 🤫. Most important change: replace usage of enum {xxx = yyy} with constexpr keyword for compile-time constant expressions. This is clearer, was made for this, and you can specify the type, contrary to enum https://en.cppreference.com/w/cpp/language/enum :; ```; Values of unscoped enumeration type are [implicitly-convertible](https://en.cppreference.com/w/cpp/language/implicit_conversion#Integral_promotion) to integral types. ; If the underlying type is not fixed, the value is convertible to the first type from the following list able to hold their entire value range: int, unsigned int, long, unsigned long, long long, or unsigned long long, extended integer types with higher conversion rank (in rank order, signed given preference over unsigned) (since C++11).; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3118:192,clear,clearer,192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3118,1,['clear'],['clearer']
Usability,"And also I guess that for different people there are different ways to define the component the most usable way. So, I am afraid there won't be unique solution for this problem.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357642003:101,usab,usable,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-357642003,2,['usab'],['usable']
Usability,"And one more note -- with this scene, if using CG, it is even impossible to learn what is happening during the calculations. If you use a direct solver capable of exporting the matrix, you will learn that in the above scene, the size of the system matrix is 3*184 X 3*184. Thus mathematically speaking, the two mechanical systems were _concatenated_ (181 points in master node + 3 nodes in slave node) which is IMHO an absolute nonsense. But again, you'll never learn that directly from SOFA (only if you examine the matrix dumped by LDL before it crashes).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647:76,learn,learn,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390929647,6,['learn'],['learn']
Usability,Another alternative that could make sense would be to use std::optional that is part of the c++ language (see: https://en.cppreference.com/w/cpp/utility/optional). So in CableActuator it would look like:; ```; Data<float> m_actuatorValue; Data<std::optional<float>> m_actuatorMinValue;; Data<std::optional<float>> m_actuatorMaxValue;; ```. Of course it make things more verbose...but the good side of that is that it clearly indicate at every use of actuatorMinValue/MaxValue that these values are optional. So optionality is no more a runSofa widget issue but a structural property of the contained data. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754525924:417,clear,clearly,417,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754525924,2,['clear'],['clearly']
Usability,"Another question, If there are some ways to extract the **Constraints Matrix** and ""Internal Force Vector and its Jacobian"". Some simple examples would be greatly appreciated!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4954#issuecomment-2324076285:130,simpl,simple,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4954#issuecomment-2324076285,2,['simpl'],['simple']
Usability,Any reason to do this instead of adding a flag `--infinite-run` or similar ? `-1` is a bit counter-intuitive.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373062078:99,intuit,intuitive,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373062078,2,['intuit'],['intuitive']
Usability,Any update on your side @EulalieCoevoet?; Or could you just share a simple scene for us to test and reproduce the problem?; Thanks,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801:68,simpl,simple,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862#issuecomment-810881801,2,['simpl'],['simple']
Usability,"Appart from that, I did a quick search in the sofa code base, I didn't paid attention to how much of the doXXXX stuff are with a public visibility... which is clearly not what the design pattern suggested initially.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772637003:159,clear,clearly,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772637003,2,['clear'],['clearly']
Usability,As I already mentionned somewhere ( probably in the PR related to multithreading ) in our public branch we have already removed the dependency to boost in the Multithreading plugin. I guess in that respect there are very few commits that need to be backported. ; See : ; https://github.com/InSimo/sofa/commits/issofa_integration_2017/applications/plugins/MultiThreading. However note that we removed from the build of Multithreading all the things related to the components such as `BeamLinearMapping_mt` and so on. Mostly because we did not want to invest any time in adapating components code that we are not sure that it ; - worked at some point in the past ( and by working I mean without any occasional crash related to data races and without any deterministic issue ); - still used by someone somewhere. As a general remark I would downvote the very idea of putting actual implementation of Sofa components in that plugin to keep the dependencies of this plugin to the **bare** minimum. Any library that wants to implement something that rely on the Task mechanism exposed by that plugin should simply do a `find_package(Multithreading)` and react according to the outcome of this method.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270:1101,simpl,simply,1101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313039270,2,['simpl'],['simply']
Usability,"As I was not ready to kill all the existing tests I solved the issue in a different way that I found simple. ; The idea is based on a small api that mimick the Python API and then to use it to re-implement the SceneCreator functionnality. This is in the STC4 branch. If you are curious it look like that:; ```cpp; #include<SceneCreator/SimpleAPI.h> . Node::SPtr root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; ```. I'm quite sure we should be able to make much nicer things with a proper eDSLinstead of mimicking the python API but I'm not sure I have time for that. My target was to remove all dependencies between Sofa & SceneCreator and this make the job.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331:101,simpl,simple,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334524331,13,"['Simpl', 'simpl']","['SimpleAPI', 'simple', 'simpleapi']"
Usability,"As an additional thread management pattern, I would like to add a thread pool with persistent worker threads, which also uses ""Task"" instances to encapsulate single work items as in the Multithreading plugin.; The motivation for this alternative to the existing work-stealing approach in the Multithreading plugin is to use it for a simple parallelization scheme in the collision detection pipeline.; There are currently two Task types available:; * For running bounding volume hierarchy updates in parallel; * For running collision pair checks in parallel. Both task implementations require no modifications to the existing collision model implementations (especially not within the CubeModel class).; However, the implementation is not complete yet, as I have yet to find a reliable alternative to generate DetectionOutputVector instances after all collision pair checks have finished their computations.; I have implemented this as a separate library and plugin, largely independent of changes in SOFA core classes and completely independent of the existing MultiThreading plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437:333,simpl,simple,333,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-263825437,2,['simpl'],['simple']
Usability,"As asked I removed the Data in base. . Now here is my working plan regarding all that ordering all the feedback received: ; - PR0: was implementing a per component logging system on top of the msg_api to prove we can replace the existing error logging system. This was done in this PR. - PR1: with the introduced system to replace the existing logging of error (this PR is risky and touch a lot of file) it should contains: ; - removing the filling of the messages in sout.; - removing the old string based buffer (API BREAK). ; - removing all the uses of the old message buffers and replace them with the new one (API BREAK). ; - updating the gui to use the new msghandler buffers. - PR2: removing the printLog Data:; - backward compatibility solution must be implemented. ; - a replacement solution has to be implement to control the printing.; - a replacement solution has to be implement to control the messages based on a per-component selection of the printed messages . - PR3: extending/unifying the sout/serr with more sdebug/swarning. This must be discussed seriously during a meeting because I currently made a lot of attempts to this but didn't managed to implement a working solution without the sever flawn sout/serr have. If you have ideas on that please make a branch with working proposal so that we have sounded discussion. . Anyone interested in working on PR1, PR2 and PR3 ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662:103,feedback,feedback,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-277260662,2,['feedback'],['feedback']
Usability,"As convened. To have more consistency with the other SofaMisc* modules.; It should also simplify things when using SofaComponentAll, as SofaMiscCollision was excluded. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2127:88,simpl,simplify,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2127,1,['simpl'],['simplify']
Usability,"As decided at the last STC, a serie of plugins will be moved out from the SOFA repository and saved into their own repository.; List of related plugins [available here](https://docs.google.com/spreadsheets/d/1FVQN4rghI1SSYuhT1Y3L5fUZdL7XXPETgQ1GQ28KlD8/edit#gid=0). This will help in the process of deprecation and pluginization in SOFA. - Extraction process is clearly explained in this [documentation](https://docs.github.com/en/github/using-git/splitting-a-subfolder-out-into-a-new-repository); - Remaining: making a pull-request in SOFA to; - remove all plugin files; - add a plugin folder containing one file `ExternalProjectConfig.cmake.in`; - edit _applications/plugin/CMakeLists.txt_ to replace `sofa_add_plugin` by `sofa_add_plugin_external`; - Finalize the GitHub repository:; - add a description; - add reviewers (sofa-framework/reviewers, sofa-framework/consortium-staff and appropriate watcher); - add the ""plugin"" topic (flag). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1442:362,clear,clearly,362,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1442,1,['clear'],['clearly']
Usability,"As discussed in #3903, the renaming of RestShapeSpringFF was raised. The discussion widened to all SOFA constraints and we agreed on this new naming convention:. Here would be my suggested nomenclature:; - projective constraints :arrow_right: `XXXProjectiveConstraint` even if it repeats the package name ; (e.g. FixedProjectiveConstraint); - weak force constraints :arrow_right: `XXXPenalityForceField`; - Lagrange-based constraints :arrow_right: `XXXLagrangianConstraint` (to keep the current C++ class names). e.g. A code was the purpose of the `RestShapeSpringsForceField` would become `ShapePenalityForceField`. Any feedback is more than welcome :busts_in_silhouette:",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3952:621,feedback,feedback,621,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3952,1,['feedback'],['feedback']
Usability,"As far as I could see, BTDLinearSolver is the only linear solver which can partially solve system; this is the only solver which implements `init_partial_solve()` and `partial_solve()` from core::LinearSolver. Problems are:; - It seems to me that this API was introduced in core::LinearSolver only for this class and for linearsolverconstraintcorrection; - All the Linear Solvers will have partial_solve and init_partial_solve() in their codebase and will display msg_warn() ""does not support partial_solve"" only at run-time, which means there is no way to know at compile-time that a linear solver does not support partial solving. So I set the partial solving API in an interface (crudely called PartialLinearSolver, name can be gladly changed), and is implemented only by BTDLinearSolver.; As for LinearSolverConstraintCorrection, it will check at construction if the given linearsolver is able to handle partialsolving (by dynamic_cast sadly) and if not, can warn the user that the linear solver is not usable and will be in ""incorrect"" state afterwards, instead of printing ""partial_solve not implemented"" while simulating.... A nice side-effect is that linear solvers libs will be slightly smaller, as all instanciations of all linear solvers (except btd then) do not contain init_partial_solve() and partial_solve() functions anymore. EDIT: it is even worse, linear solvers not implementing partial_solve does a ""msg_info()"" so w/o printLog off, users wont even know why the ConstraintSolver/ConstraintCorrections is not doing its job....; See unit tests on LCPForceFieldback, it is using SparseLDLSolver (not implementing partial_solve) and the tests do not throw any warning, even if it is using LCPConstraintSolver and LinearSolverConstraintCorrection. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/ma",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3241:1007,usab,usable,1007,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3241,1,['usab'],['usable']
Usability,"As said in the title this PR puts SofaSparseSolver and SofaPreconditioner in plugins. . There was #define SOFA_HAVE_METIS/SOFA_HAVE_CSPARSE in config.h instead of using ; find_package to detect and activate conditional building depending on dependencies. I replaced this mechanisme by using find_package(Metis) which I found more clear. . NB: the PR is in wip as I want to check it is going in the same direction as SofaNG ; NB2: it may also be a good idea to add some unittest as SparseLDLSolver seems to be used (So @olivier-goury, @IPeterlik , @marques-bruno, @EulalieCoevoet if you have 1 hour to give feel free ;)); ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/663:330,clear,clear,330,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/663,1,['clear'],['clear']
Usability,"As simple as it is!. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1812:3,simpl,simple,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1812,1,['simpl'],['simple']
Usability,"As simple as that.; Mostly brackets ^^. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2097:3,simpl,simple,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2097,1,['simpl'],['simple']
Usability,As simple as this.; Ciao for 2 regression errors theoretically!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1321:3,simpl,simple,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1321,1,['simpl'],['simple']
Usability,"At https://defrobotics2022.sciencesconf.org/ we noticed that a lot of sofa users are manually setting SOFA_ROOT and PYTHONPATH. ; The problem is that when they are using a new version, they often forgot to update these path in their system configuration resulting in very hard to understand problems including random crashes (because runSofastarts, then try to load or use a plugin from a different sofa version which can only lead to ). We should think about some mecanisme to detect and guide users when this happens. The mecanism does not need to be bullet proof, guiding 80% of users would be already great. . Drafted suggestion on how we can do that is welcome.; On my side i think that we may have in SOFA_ROOT a file storing an unique ""token/md5 checksum"" telling which version of runSofa the plugin was compiled for and the same for every plugins. ; In case the runSofa version is different to the one stored into this file...and detect a ""wrong SOFA_ROOT"" prints a warning and use an empty SOFA_ROOT. ; Same in the plugin loader, if the runSofa unique token is not the one the plugin is expecting then prints a warning and refuse to load it.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3099:489,guid,guide,489,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3099,2,['guid'],"['guide', 'guiding']"
Usability,"BaseSimulationTest::importPlugin() and simpleapi::importPlugin() are exactly the same.; With SimpleApi, it does not really make sense to have this function anymore in BaseSimulationTest. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4467:39,simpl,simpleapi,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4467,2,"['Simpl', 'simpl']","['SimpleApi', 'simpleapi']"
Usability,"Based on #2522 this PR adds a sceneCheck to guide users when using collision responses.; For some, a specific animation loop / constraint solver is needed. This is added in the SceneCheckContactResponse !. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2523:44,guid,guide,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2523,1,['guid'],['guide']
Usability,"Based on https://github.com/sofa-framework/sofa/pull/2394. Previously, a `CompressedRowSparseMatrix` accumulated matrix entries and was then converted to Eigen. The conversion gets triplets and detects duplicates and does the compression. Therefore, all the work to build a matrix is done in the conversion. This work is not required during the accumulation as it is done later in any case. I propose to accumulate all the matrix entries in a simple list. This accumulation does nothing else than inserting a new element in the vector. This should be faster than using a `CompressedRowSparseMatrix`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2399:443,simpl,simple,443,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2399,1,['simpl'],['simple']
Usability,"Based on this thread: https://www.sofa-framework.org/community/forum/topic/collision-callback-function-in-python/. I wanted to create a SofaPython3 binding, that reads the number of contacts and their associated distances.; The variable in ContactListener that stores this information is private and cleared at every CollisionBeginEvent.; -> Added a getter function for ContactsVector.; -> Added a buffer variable that is over written before ContactsVector is cleared (storing a copy over different events).; -> Added functions to retrieve the number of contacts and their respective distance values and point pairs in the buffer. I will also create a pull request on SofaPython3 with the respective bindings, once this pull request is merged. Cheers,; Paul. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1678:300,clear,cleared,300,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1678,2,['clear'],['cleared']
Usability,"Based on:; - #4356 . Remove the (really old) cimg version and fetch it from cimg git repository (or let the user set-up its own cimg version. ; Not a requirement for #4221 anyway (header-only are acceptable). - \+200k lines removed; - fix compilation for newer version of cimg; - learnt how to export a symbol without the `declspec` shenanigans on MSVC 🫠 As the current cimg.h file has been modified to add a export symbol macro...). (compiles with the cimg provided by Ubuntu v22.04 and latest cimg on Windows). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4357:280,learn,learnt,280,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4357,1,['learn'],['learnt']
Usability,"Basically, when i compile sofa using cmake it says that it is adding sofapython3 and it seems not to have any problems. But when i run runSofa.exe sofapython3 is not in the plugin list and i cannot open python scenes in sofa. I can't load it manually fromn the plugin manager either. I tried also to follow the guide to install python3 on github but the problem still remains.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217:311,guid,guide,311,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1785018217,2,['guid'],['guide']
Usability,"Because having a single name for the same object makes things much clearer I remove the innter typedefs that are aliasing to common sofa::type. This includes Vector3, Vector2, Vec3, Vec2, Vec6, and Quat, sofa::Index and sofa::Size. . I didn't do Matrix3 and Matrix2 that deserve the same treatment. Follow-up on PR #3299 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3357:67,clear,clearer,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3357,1,['clear'],['clearer']
Usability,Because no-one should be forced to compile opengl 1.x code...it is now a real plugin. . CHANGELOG:; - make plugin CMake package ; - move code to src/SofaOpenglVisual for better encapsulation; - rename all data field that are not conformant to sofa guidelines (so use the d_ prefix); - remove commented code all around; - move defintion from .h to .cpp; - remove the GLEW specific code all around. This PR is based on #1070 ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1071:248,guid,guidelines,248,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1071,1,['guid'],['guidelines']
Usability,"Because why not. Doing the same as before but with proper guidelines and stuff.; Breaking ⛔ because of the change in the fields name, but this engine is not used anywhere 🙋‍♂️. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1404:58,guid,guidelines,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1404,1,['guid'],['guidelines']
Usability,"Bug reported by @AndreaMendizabal . When a SparseGridTopology doesn't contain any embedded nodes within its boundaries (set using `min` and `max` data parameters), it simply crashes. . Minimal reproducible example:; ```xml; <Node>; <Mesh name=""m"" position=""0 0 0"" />; <SparseGridTopology min=""0 0 1"" max=""1 1 1"" src=""@m"" />; </Node>; ```. Output:; ```; ########## SIG 11 - SIGSEGV: segfault ##########; -> /opt/sofa/lib/libSofaHelper.so.20.12.00(sofa::helper::BackTrace::dump()+0x23) [0x7f679f685cf3]; -> /opt/sofa/lib/libSofaHelper.so.20.12.00(sofa::helper::BackTrace::sig(int)+0x1cf) [0x7f679f68606f]; -> /lib64/libc.so.6(+0x3da60) [0x7f679ef35a60]; -> /opt/sofa/lib/libSofaBaseTopology.so.20.12.00(sofa::component::topology::SparseGridTopology::voxelizeTriangleMesh(sofa::helper::io::Mesh*, boost::intrusive_ptr<sofa::component::topology::RegularGridTopology>, sofa::helper::vector<sofa::component::topology::SparseGridTopology::Type, sofa::helper::CPUMemoryManager<sofa::component::topology::SparseGridTopology::Type> >&) const+0x1f2) [0x7f67a0b49082]; -> /opt/sofa/lib/libSofaBaseTopology.so.20.12.00(sofa::component::topology::SparseGridTopology::buildFromTriangleMesh(sofa::helper::io::Mesh*)+0x2c8) [0x7f67a0b4a3d8]; -> /opt/sofa/lib/libSofaBaseTopology.so.20.12.00(sofa::component::topology::SparseGridTopology::buildAsFinest()+0x2d8) [0x7f67a0b4ac58]; -> /opt/sofa/lib/libSofaBaseTopology.so.20.12.00(+0x2d2a2b) [0x7f67a0b3fa2b]; -> /opt/sofa/lib/libSofaSimulationCore.so.20.12.00(sofa::simulation::InitVisitor::processNodeTopDown(sofa::simulation::Node*)+0x1a3) [0x7f67a054e5b3]; -> /opt/sofa/lib/libSofaSimulationGraph.so.20.12.00(sofa::simulation::graph::DAGNode::executeVisitorTopDown(sofa::simulation::Visitor*, std::__cxx11::list<sofa::simulation::graph::DAGNode*, std::allocator<sofa::simulation::graph::DAGNode*> >&, std::map<sofa::simulation::graph::DAGNode*, sofa::simulation::graph::DAGNode::StatusStruct, std::less<sofa::simulation::graph::DAGNode*>, std::allocator<std::pair<sof",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1748:167,simpl,simply,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1748,1,['simpl'],['simply']
Usability,"Build process:. ```; cd ~/Apps/git-apps; git clone https://github.com/sofa-framework/sofa.git; cd sofa/src; git checkout master; mkdir build-master; cd build-master; cmake [options] ..; make; ```. To be clear, build directory is: `/home/emdash00/Apps/git-apps/sofa/src/build-master`. Edit: updated `cmake-log.txt`. Last one was the wrong configuration by accident. I tried remaking the config, though it might not be 100% accurate. I used cmake-gui for the options, so here's the [CMakeCache.txt](https://github.com/sofa-framework/sofa/files/4777146/CMakeCache.txt).; Here's the configuration process log of the `cmake [options] ..` command: [cmake-log.txt](https://github.com/sofa-framework/sofa/files/4777183/cmake-log.txt). Output is very long so I've attached it in this text file [log.txt](https://github.com/sofa-framework/sofa/files/4777142/log.txt). Probably the most notably part is on log.txt:385, which I'll post here. Note: I spaced it to make it visually easier to read. The original is all on a single line of course.; ```; /home/emdash00/Apps/git-apps/sofa/src/applications/plugins/SofaOpenCL/OpenCLIdentityMapping.cpp:71:16: error: duplicate explicit instantiation of; ‘class sofa::component::mapping::IdentityMapping<sofa::gpu::opencl::OpenCLVectorTypes<sofa::defaulttype::Vec<3, float>, ; 													 	 sofa::defaulttype::Vec<3, float>, float>,; 									 				 sofa::defaulttype::StdVectorTypes<sofa::defaulttype::Vec<3, float>, ; 													 	 sofa::defaulttype::Vec<3, float>, float> >’ [-fpermissive]; ```. I'm unsure of where the original instantiation is. I'm just trying to use the library since Ubuntu 19.10 doesn't have prebuilt packages yet. I don't think this is part of the issue; however, I'm using OpenCL for an Intel GPU. I wasn't sure how computationally intensive this library would be, but I thought might as well try to utilize my Intel HD Graphics Unit. . Here's an attachment of all relevant system specs using linux commands: [sysinfo.txt](https://github.com",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1419:203,clear,clear,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1419,1,['clear'],['clear']
Usability,"But then for the sake of clarity at least, wouldn't it still make sense to implement this function by checking whether or not the values are the same as the defaults?; One can argue that a zero-ed matrix doesn't mean an ""empty"" matrix, and some could consider the identity matrix to be an empty matrix maybe in some cases, but at least, with a little comment, it would make it clearer.; Otherwise a msg_warning in this method would be helpful for whoever tries to call it without knowing that it has a ""return false"" behavior?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303150889:377,clear,clearer,377,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303150889,2,['clear'],['clearer']
Usability,But we want PSL.dll to be loaded as a path and not as a name.; I think we should replace the whole test by a simple `if (plugin.find(dotExt) != std::string::npos)`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490:109,simpl,simple,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/617#issuecomment-376457490,2,['simpl'],['simple']
Usability,CHANGELOG:; - FIXES SofaGeneralEngines/CMakeLists.txt ; - CLEAN SofaGeneralEngines/ComplementaryROI (should not change anything); - CLEAN SofaSimpleFEM/HexahedronFEMForceField (should not change anything); - CLEAN SofaSimpleFEM/TetrahedronFEMForceField (should not change anything); - REMOVE SOFA_SUPPORT_MAPPED_MASS that was not used because of missing #define. In case you disagree on some action please provide feedback. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/831:414,feedback,feedback,414,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/831,1,['feedback'],['feedback']
Usability,"CI is clear now. ; This PR triggers following error:; ```; applications/plugins/SofaSphFluid/src/SofaSphFluid/SPHFluidForceField.inl:34:10: fatal error: execution: No such file or directory; #include <execution>; ^~~~~~~~~~~; compilation terminated.; ```; see https://ci.inria.fr/sofa-ci-dev/job/sofa-framework/job/PR-1249/CI_CONFIG=ubuntu_gcc-5.4,CI_PLUGINS=options,CI_TYPE=release/7/console",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418:6,clear,clear,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1249#issuecomment-598091418,2,['clear'],['clear']
Usability,Can I still ask a small question ? :-) . Why keeping the Framework directory? Would something like this be simpler?:. ```; /; plugins; BeamAdapter; ...; Sofa; Compat; Config; Core; DefaultType; Geometry; ...; Component; Collision; ...; scripts; tools; ...; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1117461438:107,simpl,simpler,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2876#issuecomment-1117461438,2,['simpl'],['simpler']
Usability,Can't wait to simplify all this !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1636#issuecomment-780706656:14,simpl,simplify,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1636#issuecomment-780706656,2,['simpl'],['simplify']
Usability,Changes DONE following guidelines of SOFA dev meeting.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1107#issuecomment-515002596:23,guid,guidelines,23,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1107#issuecomment-515002596,2,['guid'],['guidelines']
Usability,"Clean all cmake var/options/names to follow the new guidelines and the new SOFA-NG module names; (fulfill some TODO written long ago as well). + Fix #2972. Remark/question: should we keep compatibility with all the cmake variables/options and preproc defines?. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2974:52,guid,guidelines,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2974,1,['guid'],['guidelines']
Usability,"Cleaning and refactoring in BarycentricMapping (only for topology container). _description from comment below:_. Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology... ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/797:211,clear,clear,211,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797,1,['clear'],['clear']
Usability,Cleary not. I'm investigating because I have no idea where the problem could come from. OK. I Got it...it is an interesting one so I report the details. In the code comments.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/656#issuecomment-389848233:0,Clear,Cleary,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/656#issuecomment-389848233,1,['Clear'],['Cleary']
Usability,"Closing & Re-opning was a mistake :). You are right, breaking changes should be done only for punctual release...I wanted to discuss that in issue #318. But given the amount of breaking changes people want to merge...It think maybe the 17.16 will be a ""breaking"" release. To make the change more manageable by user I introduced a recent PR #329 for which I would like to have feedback (or support or thumb-up :)). ; ; Can you describe what exactly are the breaking and if you have time it would be super great if with #PR329 you can provide a custom hook to warn inform user of which changes happens.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276:376,feedback,feedback,376,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-315047276,2,['feedback'],['feedback']
Usability,Cmake 3.13 does not seem to allow the inclusion of `CPackNSIS` anymore.; This add a simple check on cmake version to prevent cmake configure failure.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/897:84,simpl,simple,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/897,1,['simpl'],['simple']
Usability,"Components; * VisualModel::updateVisual; * VisualModel::initVisual; * add in PythonEnvironment::getPythonCallingPointAsFileInfo() a function that return a string with the ; python file/line info to add report them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; _______________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304:2741,simpl,simplify,2741,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304,1,['simpl'],['simplify']
Usability,"Conclusion of several .. years of discussion with @damienmarchal :. such circular dependencies should be handled by defining clear input data which update output data.; For instance for a Mass:; - input data: `d_inputMassDensity` and `d_inputTotalMass` (input prefix would make it clear that a circular dependency is avoided); - actual data used in computations (outputs): `d_massDensity` and `d_totalMass`. When `d_inputMassDensity` is modified, it triggers a callback like:; ``` cpp; addUpdateCallback(""updateFromTotalMass"", {&d_inputTotalMass}, [this](const core::DataTracker& ); {; .. /// do the computation; return sofa::core::objectmodel::ComponentState::Valid;; }, {&d_massDensity, &d_totalMass});; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951:125,clear,clear,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2173#issuecomment-1564102951,4,['clear'],['clear']
Usability,"Container""/> <!-- Needed to use components [MechanicalObject] -->; <RequiredPlugin name=""Sofa.Component.Topology.Container.Dynamic""/> <!-- Needed to use components [EdgeSetGeometryAlgorithms EdgeSetTopologyContainer EdgeSetTopologyModifier QuadSetGeometryAlgorithms QuadSetTopologyContainer QuadSetTopologyModifier] -->; <RequiredPlugin name=""Sofa.Component.Topology.Container.Grid""/> <!-- Needed to use components [RegularGridTopology] -->; <RequiredPlugin name=""Sofa.Component.Topology.Mapping""/> <!-- Needed to use components [Edge2QuadTopologicalMapping] -->; <RequiredPlugin name=""Sofa.Component.Visual""/> <!-- Needed to use components [VisualStyle] -->; <RequiredPlugin name=""Sofa.GL.Component.Rendering3D""/> <!-- Needed to use components [OglModel] -->; <VisualStyle displayFlags='showVisualModels showBehaviorModels showCollisionModels hideMappings hideForceFields' />. 	<DefaultAnimationLoop />; 	<DefaultVisualManagerLoop/>. <!-- ------------------------- INTERVENTIONAL RADIOLOGY INSTRUMENTS (catheter, guidewire, coil) ------------------------------ -->. 	<Node name='topoLines_cath'>; <RodStraightSection name=""StraightSection"" youngModulus=""10000"" nbEdgesCollis=""40"" nbEdgesVisu=""120"" length=""600.0""/>; <RodSpireSection name=""SpireSection"" youngModulus=""10000"" nbEdgesCollis=""20"" nbEdgesVisu=""80"" length=""400.0"" spireDiameter=""4000.0"" spireHeight=""0.0""/> ; ; <WireRestShape template=""Rigid3d"" name=""catheterRestShape"" wireMaterials=""@StraightSection @SpireSection""/>; ; 		<EdgeSetTopologyContainer name='meshLinesCath' />; 		<EdgeSetTopologyModifier name='Modifier' />; 		<EdgeSetGeometryAlgorithms name='GeomAlgo' template='Rigid3d' />; 		<MechanicalObject template='Rigid3d' name='dofTopo1' />; 	</Node>; 	<Node name='topoLines_guide'>; <RodStraightSection name=""StraightSection"" youngModulus=""10000"" nbEdgesCollis=""25"" nbEdgesVisu=""98"" length=""490.0""/>; <RodStraightSection name=""StraightSection2"" youngModulus=""10000"" nbEdgesCollis=""25"" nbEdgesVisu=""98"" length=""490.0""/>; <RodSpireS",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4833:2925,guid,guidewire,2925,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4833,1,['guid'],['guidewire']
Usability,"Contains https://github.com/sofa-framework/sofa/pull/2557. This PR is the first step toward the conversion of the interaction force fields into simple force fields. This PR concerns the class `SpringForceField` and all its derived classes, including `StiffSpringForceField` which is used extensively to create springs. The changes maintain the backward compatibility with current scenes. However, the signature of some functions changed. That's why it's breaking. It is now impossible to construct a `StiffSpringForceField` between 2 objects in C++. Instead a utility function is provided. To maintain the backward compatibility and to facilitate the design of a simulation scene, `StiffSpringForceField` continues to accept two Data attributes ('object1' and 'object2') corresponding to two different objects. However, they don't correspond to any Data or Link in the component. Actually, during its creation, the component will instantiate other components in order to link both objects into one. In the end, the component is able to work on a single mechanical state while keeping the same physical behavior. The component now instantiates:. 1. A new Node; 2. A new mechanical state which will be the fusion of the provided objects, ; 3. A `SubsetMultiMapping` that will make the link between the two provided objects and the new mechanical state; 4. The spring force field. Since `SubsetMultiMapping` was initially in SofaMiscMapping, it has been moved into SofaBaseMechanics. A compatibility layer is available. Other components using `StiffSpringForceField` had to be adapted to create also the extra components. An example is `AttachBodyPerformer` which creates the spring between an object and the mouse (shift + clic). WARNING:; Since `StiffSpringForceField` is now necessarily located in a mapped node, its stiffness matrix is not mapped in case of a built linear system. The forces are then computed explicitly only. This issue will be addressed in the new design of the matrix assembly. TO",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554:144,simpl,simple,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554,1,['simpl'],['simple']
Usability,"Continuing task #2402 . ""Simple"" PR moving all code related to TopologyData/Handler from SofaBaseTopology to Sofa.Core, along the other core topology structure. A lot of modules wont need SofaBaseTopology anymore because it was including TopologyData.inl from it.... As usual, there is a compatibility layer which surprisingly works very well in this case (i did not touch any other file in other plugins/modules). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2423:25,Simpl,Simple,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2423,1,['Simpl'],['Simple']
Usability,"Create a ForceField for the ingration of the gravitional acceleration.; It could have a direct link to the mass in the scene and compute the forces related to the gravity. Associated to this change, the ContextObject should be removed (polluting BaseObject, used only in Gravity) along the PauseAnimationOnEvent & PauseAnimation.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2683:290,Pause,PauseAnimationOnEvent,290,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2683,2,['Pause'],"['PauseAnimation', 'PauseAnimationOnEvent']"
Usability,Create simple videos for SOFA,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2370:7,simpl,simple,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2370,2,['simpl'],['simple']
Usability,"Currently in Sofa the Link implementation is very hard to maintain because; in a single implementation based on type-traits we are trying to handle to object; of different nature that are BaseData and Base. Link between Base is used everywhere in Sofa but a Link between two data; is only to hold the parent of a Data. It is questionable if such complex; implementation for Link is needed for just this single use case ?. Not doing that have a lot of consequence:; - Data implementation is simpler (because it is no needed to have Class ); - Link implementation is much simpler (and Link is used everywhere); - The instanciation of Link is time consuming in the compilation process and; requieres a lot of #include<> making the dependency graph more dense and thus; slow to compile. So in this PR I introduce a new DataLink & AbstractDataLink that aims at replacing; SingleLink<BaseData*, BaseData*>. In this PR I also add PathResolver, as path link resolution is important an currently it is spread everywhere in the sofa codebase. The underlying idea; is to have all path related things in a single location so we can check there is no duplicated code. The implementation are provided with unittest. The PR does not touch other files.; A second PR will be in charge of refactoring Data.h. But to minimize deltas I prefer to have; this one merged first. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1485:490,simpl,simpler,490,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1485,2,['simpl'],['simpler']
Usability,Currently in Sofa there is no real dedicated toolbox for geometrical operation. . So I made this (very) drafted module with an emphasize on having a simple API instead of performances. Ideally it should use algorithm that are already implemented in Sofa otherwise it fallback to third party library or custom implementation. ; ; There is tests on the c++ side.; There is a python binding (made with cython) as an independent module (not using the SofaPython). ; There is tests for this python binding. ; The python part is documented with docstrings. . Feedback & Contribution welcome. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/747:149,simpl,simple,149,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747,2,"['Feedback', 'simpl']","['Feedback', 'simple']"
Usability,Data update: simplify Data tracking,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/80:13,simpl,simplify,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80,2,['simpl'],['simplify']
Usability,"Dear SOFA community and @sofa-framework/reviewers,. As you know, one of our main objectives is currently to propose a major evolution of SOFA: this is the project ""SOFA-NG"", standing for Next Gen. ; Let us give you some insight about the final plan and the steps to reach these objectives. Any feedback is welcome. ## Objectives. The final objective of SOFA-NG is to refactorize the current (non-core) modules and components by moving them into plugins. It will permit to:; - compile and load only the necessary modules; - clean all dependencies in SOFA; - help focusing the work of validation/verification/doc/test on specific codes; - improve the packaging of codes; - ease understanding the API of SOFA for new users. ## Steps of implementation. Our concerns; - Focus on non-core components only; - Make the transition as smooth as possible; - Keep the history. Steps to follow; - Propose an architecture and a folder structure; - Decide a place for each component (incrementally); - Create the folder structure in SOFA plugins directory; - Pluginize one by one the components towards their new place. Note that this project; - will be documented, scripts will be provided to help the transition in plugins; - is compatible (can be run in parallel) with the deprecation task. ## Proposed structure. ~~https://annuel2.framapad.org/p/sofang-v0~~; EDIT: latest proposal: https://annuel2.framapad.org/p/sofang-v3. As you can see the structure is quite similar to the old namespace structure of SOFA. ; Feel free to edit/comment this pad or to propose your own version.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543:294,feedback,feedback,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543,1,['feedback'],['feedback']
Usability,"DefaultMultiMatrixAccessor.h (388 ms); PrecomputedLinearSolver.cpp.o PrecomputedLinearSolver.inl PrecomputedLinearSolver.h MatrixLinearSolver.h (367 ms); MatrixLinearSolver.cpp.o MatrixLinearSolver.inl MatrixLinearSolver.h (350 ms); ... 18437 ms: /usr/bin/../lib/gcc/x86_64-linux-gnu/10/../../../../include/c++/10/bits/basic_string.h (included 167 times, avg 110 ms), included via:; cmake_pch.hxx Messaging.h MessageDispatcher.h Message.h iostream ostream ios ios_base.h locale_classes.h string (203 ms); cmake_pch.hxx Base.h StringUtils.h string (198 ms); cmake_pch.hxx Base.h StringUtils.h string (196 ms); cmake_pch.hxx Base.h StringUtils.h string (195 ms); cmake_pch.hxx Base.h StringUtils.h string (194 ms); cmake_pch.hxx Base.h StringUtils.h string (182 ms); ... 18298 ms: sofa/modules/SofaGuiQt/src/sofa/gui/qt/ModifyObject.h (included 19 times, avg 963 ms), included via:; MaterialDataWidget.cpp.o MaterialDataWidget.h DataWidget.h (1881 ms); StructDataWidget.cpp.o StructDataWidget.h SimpleDataWidget.h DataWidget.h (1645 ms); QDisplayDataWidget.cpp.o QDisplayDataWidget.h DataWidget.h (1580 ms); DisplayFlagsDataWidget.cpp.o DisplayFlagsDataWidget.h DataWidget.h (1567 ms); QRGBAColorPicker.cpp.o QRGBAColorPicker.h DataWidget.h (1555 ms); moc_QDisplayPropertyWidget.cpp.o QDisplayPropertyWidget.h (1496 ms); ... 17890 ms: sofa/modules/SofaGuiCommon/src/sofa/gui/BaseGUI.h (included 15 times, avg 1192 ms), included via:; RealGUI.cpp.o RealGUI.h (1659 ms); BaseViewer.cpp.o (1657 ms); BaseGUI.cpp.o (1589 ms); BatchGUI.cpp.o BatchGUI.h (1544 ms); moc_RealGUI.cpp.o RealGUI.h (1538 ms); QSofaListView.cpp.o RealGUI.h (1494 ms); ... 15454 ms: sofa/modules/SofaGuiQt/src/sofa/gui/qt/DataWidget.h (included 16 times, avg 965 ms), included via:; MaterialDataWidget.cpp.o MaterialDataWidget.h (1930 ms); StructDataWidget.cpp.o StructDataWidget.h SimpleDataWidget.h (1678 ms); QDisplayDataWidget.cpp.o QDisplayDataWidget.h (1613 ms); DisplayFlagsDataWidget.cpp.o DisplayFlagsDataWidget.h (1601 ms);",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:38321,Simpl,SimpleDataWidget,38321,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['Simpl'],['SimpleDataWidget']
Usability,"Depends on #1226 . This PR provides a callback method in Base to easily connect DDGNodes (inputs & outputs) within a component, through the use of DataTrackerEngines. It is inspired by a POC from @damienmarchal in a branch we have in SofaDefrost/sofa.; The syntax to create a callback is the following:. ```cpp; addUpdateCallback(""dataTrackerEngineName"", {&inputs}, []()->ComponentState{; // Some code in a lambda setting the componentState by return value; }, {&outputs});; ```; This method will create a DataTrackerEngine in a map within Base, give it a name, set this as its owner, set the given list of inputs and outputs for the engine, and finally, use the given lambda as a delegate method for the update() function of the engine (delegate, because engine->updateAllInputsIfDirty() is called before the lambda, and engine->cleanDirty() is called after... just like a normal engine.). The test in SofaSimulationGraph_test/DDGLink_test.cpp has been updated to show how to use it in a simple class with 1 input / 1 output. Actually, the code doesn't work... I get an ugly exception when my engine tries to call the delegate lambda:; ```; unknown file: Failure; C++ exception with description ""bad_function_call"" thrown in the test body.; ```. No idea what this is, if you have suggestions, please don't hesitate to correct me or tell me what I did wrong... ;); Enjoy the WE =). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1227:989,simpl,simple,989,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1227,1,['simpl'],['simple']
Usability,"Did not have time to start this yet. 😢 ; As discussed last wednesday, the idea would be to simply `cat` the output of crashed tests during the `print-summary()` phases (for unit tests and scene tests). So only scripts stuff.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155:91,simpl,simply,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/191#issuecomment-283715155,2,['simpl'],['simply']
Usability,Discussion : what about remove the usage of float within SOFA to lighten the code base of SOFA. This might affect (and feedback would be interesting) some guys @ziqiu-zeng @courtecuisse @bakpaul,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3435#issuecomment-1299944386:119,feedback,feedback,119,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3435#issuecomment-1299944386,2,['feedback'],['feedback']
Usability,Do you have questions guys? From the last SOFA meeting report: . #1258 [SofaKernel] Who hates warnings?; → still to review: wait for feedback from jnbrunet regarding the copy of constructor. @hugtalbot,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1258#issuecomment-592465740:133,feedback,feedback,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1258#issuecomment-592465740,2,['feedback'],['feedback']
Usability,"Doxygen shows too much information, we should simplify it to have the important stuff first:; - inheritance diagram; - Data members; - Methods. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/995:46,simpl,simplify,46,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/995,1,['simpl'],['simplify']
Usability,Draft of a proposition to enforce the API for a clear thread friendly semantics. ; ```cpp; class SOFA_CORE_API DetectionOutputVector; {; public:; ; virtual int acquireAddContact(){}; virtual releaseAddContact(int){}; virtual void addContact(DetectionOutput* detectionOutput){; if(getHasBeenAcquired){ fail }; if(notAcquired) { warn }; ; ...; }. /// ; virtual const DetectionOutput& getContacts(){; if(noToken) return array;; return nullptr; ; }; virtual void releaseGetContact(DetectionOutput& r){; ....; }; };; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645:48,clear,clear,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/965#issuecomment-474772645,2,['clear'],['clear']
Usability,"During my Way of the Cross of fusing StiffSpring and its parent, I saw that the topological change of removing points didn't work as planned for topologySubsetIndices when there is multiple occurrence of the same element in the data. . I've fixed that and added tests. . One question is remaining though : here I kept the original mechanism using a swap of the deleted element and the last one. This is efficient in term of memory but it has the side effect of changing the indices order in the data. ; --> My question is, *is that what we want ?* Do we prefer memory/time efficiency over order coherency for this data ? Is it logical to get a random order of the vector out of a simple topological change ? This answer will change a bit the way I'll finish the refactoring in https://github.com/sofa-framework/sofa/pull/4649 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4738:680,simpl,simple,680,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4738,1,['simpl'],['simple']
Usability,Error Messages in SOFA_Python are not clear,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/333:38,clear,clear,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333,2,['clear'],['clear']
Usability,"Error message when the creation of an object fails are difficult to read and it isn't always obvious where the error is. With this PR, the message is a little bit more clear. Now we only need to add error message inside the components `canCreate` methods (see the changes I made in the `ForceField` class in this PR). Before:; ![image](https://user-images.githubusercontent.com/6951981/75893831-a9015000-5e33-11ea-8871-ae414f1f8208.png). After:; ![image](https://user-images.githubusercontent.com/6951981/75893859-b0285e00-5e33-11ea-8318-12c484a4852a.png). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1266:168,clear,clear,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1266,1,['clear'],['clear']
Usability,"Everything looks clear to me. ; Why did you taggued this with ""bug"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/100#issuecomment-266839785:17,clear,clear,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/100#issuecomment-266839785,2,['clear'],['clear']
Usability,"Exactly, this is simple but it need to be discussed :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/552#issuecomment-367773729:17,simpl,simple,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/552#issuecomment-367773729,2,['simpl'],['simple']
Usability,Excellent ! Just make sure that you have an assembled matrix in the scene. Thanks for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432007612:90,feedback,feedback,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1432007612,2,['feedback'],['feedback']
Usability,"ExecParams, ConstraintParams, MechanicalParams and VisualParams are used in a lot of different place of our code base which thus requires to #include their corresponding header causing code coupling. . This PR contains:; - the implementation of a set of ""opaque/c-api"" function to be used in header when a ExecParams (or other Params) is needed. ; the advantage of using these ""opaque"" function is that there is not includes other than the ""fwd.h"".; - the removale of all the #include<XXXXXXParams.h> everywhere is was possible, ; - the adding of the missing #include<XXXXXXParams.h> (or other include) in translation units (.cpp) or (.inl) when it was needed. . Following our guidlines, the declaration for the ""opaque functions"" are in ```sofa/core/fwd.h``` and contains:; ```cpp; namespace sofa::core; {; namespace execparams; {; SOFA_CORE_API ExecParams* defaultInstance();; }. namespace constraintparams; {; SOFA_CORE_API const ConstraintParams* defaultInstance();; SOFA_CORE_API ExecParams* asExecParams(sofa::core::ConstraintParams*);; SOFA_CORE_API const ExecParams* asExecParams(const sofa::core::ConstraintParams*);; }. namespace mechanicalparams; {; SOFA_CORE_API const MechanicalParams* defaultInstance();; SOFA_CORE_API ExecParams* asExecParams(sofa::core::MechanicalParams*);; SOFA_CORE_API const ExecParams* asExecParams(const sofa::core::MechanicalParams*);. SOFA_CORE_API SReal kFactor(const sofa::core::MechanicalParams*);; SOFA_CORE_API SReal bFactor(const sofa::core::MechanicalParams*);; SOFA_CORE_API SReal kFactorIncludingRayleighDamping(const sofa::core::MechanicalParams*, SReal d);; SOFA_CORE_API SReal mFactorIncludingRayleighDamping(const sofa::core::MechanicalParams*, SReal d);; SOFA_CORE_API SReal dt(const sofa::core::MechanicalParams*);; }; }. namespace sofa::core::visual::visualparams; {; SOFA_CORE_API VisualParams* defaultInstance();. SOFA_CORE_API ExecParams* asExecParams(sofa::core::visual::VisualParams*);; SOFA_CORE_API const ExecParams* asExecParams(const so",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1794:677,guid,guidlines,677,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794,1,['guid'],['guidlines']
Usability,"FIX: a bug which appeared when the simulation is restarted without restarting SOFA. There is a map-vector (mapOrient) which was not cleared properly (unlike his friend ""map"") which was. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/710:132,clear,cleared,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/710,1,['clear'],['cleared']
Usability,"FYI, `SimpleCarving.py` is not exectuted by the CI (or more precisely, there is no mention of it in the logs)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3457#issuecomment-1707519816:6,Simpl,SimpleCarving,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3457#issuecomment-1707519816,1,['Simpl'],['SimpleCarving']
Usability,"FYI, the decision back in the sofa coding sprint of June 2014 (as fas as I remember), was to remove all `*GridTopology`, in favor of a new design based on `*GridLoader` or `*GridEngine` types of components. A workgroup worked on this topic during the sprint. The associated branch may or may not still exist, but unfortunatly it was not completed and merged back. The rational however is still valid, the current design of those topologies introduce many complexities that are not providing a lot of value, given how rarely then end-up being used, outside of quick and useful examples, but for which the performance gain (if any) of using these grids directly instead of using `MeshTopology` or `HexahedronSetTopologyContainer` does not really matter. So in term of maintenance it seems more practical to remove them completely from the codebase, once we have a usable (and simpler) alternative in place.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098:862,usab,usable,862,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/162#issuecomment-281638098,4,"['simpl', 'usab']","['simpler', 'usable']"
Usability,"Factorize all compatibility code in the SofaFramework (GL, Helper, Defaulttype, Core) into a common module, to simplify maintainability. For now, it is forcefully loaded for all the modules, as no code has been ported to the new architecture yet. In the future, this module should be optional (and its inclusion in an other cmake file in a module/ directory for example). (out-of-tree configuration tested with SofaPython3); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1944:111,simpl,simplify,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1944,1,['simpl'],['simplify']
Usability,Feedback from @damienmarchal : [PoC working here]([hugtalbot (Hugo)](https://matrix.to/#/@hugtalbot-5a840cffd73408ce4f8d167a:gitter.im): https://sofapython3.readthedocs.io/en/xp-readthedocs/). - The fastest would be to have a ci process like the generate-doxygen which generate an artifact with the build documentation; - Then in readthedocs we just have to download that artifact and copy it to the right location (this what I did in the xp-readthedoc); - The only missing part is make the ci script (which shouldn't be super hard for anyone that know how our jenkins ci is operating),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3764#issuecomment-1582191183:0,Feedback,Feedback,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3764#issuecomment-1582191183,1,['Feedback'],['Feedback']
Usability,Feel free to make PR when you think it is ready for you because this is the best way to get feedback.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/552#issuecomment-372658667:92,feedback,feedback,92,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/552#issuecomment-372658667,2,['feedback'],['feedback']
Usability,"First effort to evaluate the relevance and amount of effort necessary to remove / replace the DataTypeInfo API in SOFA's core. So far, the blocking points I see are the following:. - DataTypeInfo<T>::name() -> Not substituable. we need some form of RTTI, at least for the type name. decoding the typeid() is not an option, as it won't translate well for complex template types (simple example with std::string -> basic_string<char,char_traits<char>,allocator<char>>); - ValidInfo: -> set to false if no template specialization exists for DataTypeInfo<T> (guarantees that data from the structure have been filled and aren't the defaults from AbstractTypeInfo. Non-substituable, works by pair with name(). - DataTypeInfo<T>::size() / DataTypeInfo<T>::Size -> can be replaced in some cases, but not all:; - In most cases in Sofa, we don't know what type we are manipulating, but we are almost always manipulating structures that inherit fixed_array. That makes it possible to substitute DataTypeInfo<T>::Size with T::total_size inherited from fixed_array. Would require an enable_if_t<is_fixed_array> to make sure...; - Sometimes, T is a scalar value for instance, in which case there isn't any total_size to query. It's the case in Vec.h for single scalar value vector operations (multScalar, divScalar, etc.), where the size is used in static_asserts to guarantee we are manipulating a single scalar quantity. I used SFINAE as substitution, but this makes code hard to read for most non-robot people. - in BaseData, it is used in updateFromParentValue(), along with FixedSize(), Integer / Scalar / Text / get/setTextValue, get/setScalarValue, get/setIntegerValue to resize and copy data from the parent value. BaseData, of course, can be templated on any kind of data (Scalars, text, Containers, complex structures...); ; - CopyOnWrite: Used in Data.h to generate the getters / setters for Data fields (beginEdit, operator= etc.). - ZeroConstructor, SimpleCopy: In SOFA's core, used exclusively in vect",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1385:378,simpl,simple,378,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1385,1,['simpl'],['simple']
Usability,"First plugin to be moved out, as detailed in issue #1442 ; Plugin is now located here: https://github.com/sofa-framework/InvertibleFVM. All feedback are more than welcome. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1443:140,feedback,feedback,140,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1443,1,['feedback'],['feedback']
Usability,"First step to remove OBBMode/CapsuleModel from SofaBaseCollision, as those primitives are not really deemed as ""basic"".; They are instead displaced into SofaMiscCollision, with other custom primitives. The code in DiscreteIntersection, etc is much clearer in this way, and leads to less cluttering in dependencies. Next steps:; - refactor Intr* utilities classes; - refactor FixParticlePerformer; - finally move OBBModel and CapsuleModel (and their sidecar files) into SofaMiscCollision. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2073:248,clear,clearer,248,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2073,1,['clear'],['clearer']
Usability,"Fix #809; Following the STC decision to replace the DataEngine with the SimpleDataEngine, here's the PR that does just that. This replacement involves taking every engine in Sofa and:; - replacing its **update()** method with the new delegate **doUpdate()**.; - Remove the calls to **data.isDirty()** and (smartly) replacing them with **m_dataTracker.isDirty(data)**; - Remove the **cleanDirty()** calls while making sure we don't break the engine's behavior. Most engines present in SOFA are either in SofaGeneralEngine or SofaMiscEngine. ______________________________________________________ ; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/814:72,Simpl,SimpleDataEngine,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/814,1,['Simpl'],['SimpleDataEngine']
Usability,"Fixes #308 with initialization of SparseGridTopology with a mesh. Before, a 1% scaling was automatically applied on the grid bounding an input mesh. Removing the scaling was leading a crash since vertices could be exactly on the boundary surface (surface of the BBox of the mesh).; Now a safety check is done and a final check is done to alert if a vertex is not found. Minor cleans of the msg API are also added. @epernod @fredroy your feedback using your own scenes involving the SparseGrid would be useful. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/670:437,feedback,feedback,437,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/670,1,['feedback'],['feedback']
Usability,"Following #2777, `buildStiffnessMatrix` and `buildDampingMatrix` are implemented for `FastTetrahedralCorotationalForceField`. I took the opportunity to simplify the code and clean it compared to `addKToMatrix`. I also changed the example scene, as it was not really functional. Now, the scene is the same than `TetrahedronFEMForceField`. I also added the possibility to define the method as `small`, for consistency with `TetrahedronFEMForceField`. At some point, this should be refactored with an OptionGroup. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3929:152,simpl,simplify,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3929,1,['simpl'],['simplify']
Usability,"Following #4876 (but not depending on it) this PR proposes to define a gravity-inheritance from the parent node when the data gravity is not set. A test is added but does not work due to SimpleAPI not taking into account data set in nodes.; Currently under investigation (this is why I draft this PR). ---. Suggestion : **TODO after this PR**; - Remove the class Gravity and use one single way to play with gravity : the associated data in the nodes; - Apply the change in all scenes using the Gravity component. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4910:187,Simpl,SimpleAPI,187,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4910,1,['Simpl'],['SimpleAPI']
Usability,"Following https://github.com/sofa-framework/sofa/pull/4495; This is to fix https://github.com/sofa-framework/BeamAdapter/actions/runs/8069371516/job/22044285700?pr=140; ```; CMake Error at BeamAdapter_test/CMakeLists.txt:5 (find_package):; Found package configuration file:. D:/a/BeamAdapter/BeamAdapter/sofa/lib/cmake/Sofa.Testing/Sofa.TestingConfig.cmake. but it set Sofa.Testing_FOUND to FALSE so package ""Sofa.Testing"" is; considered to be NOT FOUND. Reason given by package:. The following imported targets are referenced, but are missing:; Sofa.SimpleApi. -- Configuring incomplete, errors occurred!; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4542:551,Simpl,SimpleApi,551,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4542,1,['Simpl'],['SimpleApi']
Usability,"Following our discussions:; SimpleDataEngine's update method now looks like this:. ```cpp; void update() final; {; updateAllInputs() // a method that calls `updateIfDirty()` on all inputs: can be overridden, but rarely necessary; DDGNode::cleanDirty() // same as cleanDirty(), but does NOT call m_datatracker->clean() so counters are still valid after; doUpdate() // actual magic; m_datatracker->clean() // cleaning the counters; }; ```. To my understanding, DataTrackerDDGNode's `cleanDirty()` method becomes useless in DataEngines at this point, making the workflow much smoother for the user's impl of `doUpdate()`. I believe there would be no side effects (apart from being BRAKING...) if we would replace `core::DataEngine` with `core::SimpleDataEngine`, and rename all engine's `udpate()` methods to `doUpdate()`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403:28,Simpl,SimpleDataEngine,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424761403,2,['Simpl'],['SimpleDataEngine']
Usability,"Following recent changes, when compiled externally (out-of-tree), plugin libraries are not generated in the `plugin/` folder of SOFA build repository anymore, but in a dedicated `external_directories` folder. However this folder was not included in the reference folders (defined in `FileRepository.cpp`) in which the RequiredPlugin component searches for plugins at run time. This is not necessarily an issue when loading manually the plugins using the GUI's plugin manager, but it doesn't work when launching a scene which requires an external plugin in batch mode. The issue was pointed out recently by @VannesteFelix . This commit simply add `external_directories/` in the reference folders to search for plugins. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2927:635,simpl,simply,635,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2927,1,['simpl'],['simply']
Usability,"Following the discussions of dev meeting, it is possible to add custom filters to Doxygen to parse initData as a member comment. Tested successfully on a simple example :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2613#issuecomment-1023300619:154,simpl,simple,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2613#issuecomment-1023300619,2,['simpl'],['simple']
Usability,"Following the rise of discussions about further using Eigen inside SOFA, this PR aims at standardizing its inclusion in the framework. Right now, SOFA automatically pulls a fixed version of Eigen (3.2). It also install it along with SOFA, which is a big problem when an external program or library tries to compile with both SOFA and another version of Eigen. . This PR removes the automatic pull of Eigen, and instead rely on the standard find_package(Eigen3) which is available in almost all distributions via the system package manager (apt, dnf, pacman, etc), for instance:. <table>; <tr><td>Debian 9</td><td>Eigen 3.3.2</td></tr>; <tr><td>Debian 10</td><td>Eigen 3.3.7</td></tr>; <tr><td>Ubuntu 18.04</td><td>Eigen 3.3.4</td></tr>; <tr><td>Ubuntu 19.10</td><td>Eigen 3.3.7</td></tr>; <tr><td>Fedora 29</td><td>Eigen 3.3.5</td></tr>; <tr><td>Fedora 30-31</td><td>Eigen 3.3.7</td></tr>; </table>; ; Right now, this PR compiles with all of the previous distributions (I've tested it with Docker by simply installing eigen3-devel and compiling Sofa). ~~However, there is a faulty test with Eigen > 3.2: the **compliant_test** from the Compliant plugin. It seems to come from the Assembly visitor of the plugin, which relies a lot on Eigen to build the system matrices. I'll have a look at it in the next days, but if someone have an idea...~~ ; Found the nasty bug at 53dd4f5 - memcopy is _dangerous_ !. Everything ~~else~~ seems to be fine with recent versions of Eigen. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1281:1000,simpl,simply,1000,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1281,1,['simpl'],['simply']
Usability,"For @sofa-framework/reviewers : this PR is now ready but it will have a **massive impact on all the code base.**. Any feedback is more than welcome. A compatibility layer is obviously implemented. We suggest to merge this PR but temporarily de-activating all the warnings (compilation-time and runtime). Another PR will start the cleaning within SOFA and its official plugins. When the main part will be done, warnings will be re-activated so that plugin authors can be informed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982:118,feedback,feedback,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4429#issuecomment-2205566982,2,['feedback'],['feedback']
Usability,"For consistency purpose, added a helper function to handle the file related errors for loaders and components. To use it: ; ```; FILE *f = fopen(filename.c_str(), ""r"");; msg_error_when(!f)<<sofa::helper::message::UnableToOpenFile(filename.c_str());; ```. Modified the usage in only ""MeshTrian.cpp"". With feedback, if I am in right direction, I will make changes to other loader and component accordingly.Solving issue #197 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639:304,feedback,feedback,304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639,1,['feedback'],['feedback']
Usability,"For historical explanations:; * we need to gather the pointers to all Data in a Base instance, so there must be a function somewhere that is called with both the pointer to the `Base*` object and to the `Data*`.; * a simple option could be to have the `Base*` pointer as a parameter of the Data constructor, however most compilers issue a warning if `this` is explicitly used when initializing member variables, as it is not fully constructed yet; * however, compilers are happy with calling a method, which itself use `this`, hence the initial implementation of `initData()` (which was called `dataField()`) had the `this` pointer implicitely, but needed the `Data*` pointer to add if to the ""fields"" map, which is why it was provided as an explicit parameter to the method; * later changes refactored this to add new features (such capturing which level of the class hierarchy is creating each Data), and the actual registration of the `Data*` in the list within Base was moved to the Data constructor, where the `Data*` pointer is available so the one from `initData()` became redundant. The newer similar design for initializing BaseLink did use an `initLink()` method without this pointer. And regarding this change:; * a useful aspect of having the pointer to the Data as the first parameter of `initData()` is to unambiguously know the type of the final `Data<T>`, so that there could be (relatively) good compile errors if the type of the provided default value is not matching it. I'm not sure how this PR is affecting / handling that (i.e. if you set a `float` value as a default to a `Data<int>`, how the gcc/clang/msvc error messages look like?); * one drawback in the current design is that there are sometimes bugs introduced by the multiple overloads of `initData()`, because of the ambiguity between the optional default value and the optional pair of bool flags at the end. In particular, for a `Data<std::string>`, calling `initData(&d, ""mydefaultvalue"", ""mydata"", ""help message"")` w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283:217,simpl,simple,217,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1196855283,2,['simpl'],['simple']
Usability,"For me handling different sets of sofa components with a lots of CMakeLists is cumbersome. ; I am not ashamed to say that I do not understand the difference between SofaKernel/SofaFramework/SofaMisc/SofaNG/SofaAdvanced/SofaGeneral. I would suggest an another direction more in the spirit of Qt, e.g. having meaningful modules. ; In Qt they have: Qt Core/ Qt Multimedia / Qt Network etc. ; I suggest to have something similar: Sofa Core (with only the glue) / Sofa Solvers / Sofa Elastic / Sofa Fluid / Sofa Collision /; In each of these modules we could have several algorithms from the simplest and cheap to the more complex expensive one.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332165689:587,simpl,simplest,587,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332165689,2,['simpl'],['simplest']
Usability,"For me, it makes no sense to have two different values based on the template in BilateralInteractionConstraint. But it would be nice to have some feedback from real expert on Constraints.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257862434:146,feedback,feedback,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257862434,2,['feedback'],['feedback']
Usability,"For non-time critical algorithm it is better to implements them in their base class (here BaseLink) instead of the in their concrete class (Link). In this PR we are moving the TLink::read() method to BaseLink::read().; To implement BaseLink::read() we added several methods in BaseLink:; - add and clear the internal container; We also added a new method in PathResolver::FindBaseFromClassAndPath. . This PR is based on #1735 ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1736:298,clear,clear,298,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1736,1,['clear'],['clear']
Usability,"For small scenes I found very convenient to write the scene directly in the test...; This allow to iterate on each variation of scene elements (PointLight, DirectionalLight, SpotLight) (or templates (Vec3d, Vec3f, Rigid)) with just a simple loop and string concat. . ```cpp; void mytestThatShouldExistsForAllLights(std::string& lighttype){; std::stringstream scene ;; scene << ""<?xml version='1.0'?> \n""; ""<Node 	name='Root' gravity='0 -9.81 0' time='0' animate='0' > \n""; "" <Node name='Level 1'> \n""; "" <MechanicalObject/> \n""; "" <""<< lighttype << "" name='light1'/> \n""; "" </Node> \n""; ""</Node> \n"" ;; Node::SPtr root = SceneLoaderXML::loadFromMemory (""testscene"",; scene.str().c_str(),; scene.str().size()) ;. ... the actual meat of the test....; }; ```; For complex scene I think that using a template langage could be an option ...but needs more work.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667:234,simpl,simple,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/43#issuecomment-265274667,2,['simpl'],['simple']
Usability,"For some reasons, the static task scheduler could not be destroyed by the end of the program because it results into a deadlock: the worker threads are not woken up by the destructor of the task scheduler. I did not find how to fix this issue. Therefore, I clear the task schedulers before the end of the program, in the module `cleanup` function. It did not happened before because the task scheduler was never destroyed resulting in a memory leak and not-joined idle threads.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347:257,clear,clear,257,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3480#issuecomment-1315357347,2,['clear'],['clear']
Usability,François is right but isn't doing this will only fix the find plugin problem... this can be problematic as there is other part of Sofa that are using the executable with relative path to locate resources directory (eg: GuiDataRepository).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358249596:219,GuiD,GuiDataRepository,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/561#issuecomment-358249596,1,['GuiD'],['GuiDataRepository']
Usability,"From what I understand, we have 2 different topics here. 1. cut dependencies to SofaTest, which I totally approve. This point reaches consensus I think. I don't see anything that can go against the merge of this PR in this topic. 2. split unit tests and functionnal tests; This is a different topic and should be discussed in a separate issue. Anyway my 2 cents about this:; - obviously this is a good idea. I cannot push forward enough this idea.; - just keep in mind that these unit-tests should remain FAST to run, since they will be run at each build. (ie. the filemonitor tests, for example, should be refactored to spend less than 10 seconds to run otherwise they will soon become a pain). To resume my point of view:; 1. merge this PR first; 2. communicate around the fact that tests should not rely on SofaTest anymore (when possible) ==> why not log a warning or ""deprecated"" message when using SofaTest utilities ?; 3. progressively cut unit tests from SofaTest, on-the-go. In parallel, open the ""always run unit-tests"" discussion on a separate topic.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700:699,resume,resume,699,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-339258700,2,['resume'],['resume']
Usability,"Glad you like it ; With a typesafe version you mean something like; ```cpp; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", 0.3},; {""contactDistance"", Vec3d(0,1,2)}}) ;; ```; This could be great especially with a version without string conversion so it would be both elegant and fast. . On my side the things I tried but didn't pushed were:; ```cpp; simpleapi::createObject(root, DefaultPipeline, {; { DefaultPipeline::name, ""myname"" },; { DefaultPipeline::position, ""1 2 3"" },; }) ; ```; The idea was to avoid to use strings as identifier because that are error prone and hard to maintain when something change. It also feature autocompletion, you write DefaultPipeline:: TAB and you get all the possible data field. The drawback is the extra DefaultPipeline prefix all around which impact readbility. . A was also curious on how we could make visible the graph structure of the scene (PSL like) and I cannot prevent myself to think about something like the following: ; ```cpp; createTree(; {; Node, { ; {""name"", ""root""}, ; MechanicalObject, {; {""name"", ""bob""},; {""position"", ""1 2 3""} ; },; } ; ); ```; With good template and operator overloading it is probably possible but I'm afraid of the trickyness of the approach (and the error message in case of compilation error) but compared to the current simpleapi that is ""straightforward"" to use and offer a smooth transition for people coming from SofaPython, I'm not sure this is worth the effort.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515:76,simpl,simpleapi,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-334575515,6,['simpl'],['simpleapi']
Usability,"Glut is a deprecated library and in my opinion, should be not used anymore. (not compatible with newer version of OpenGL, etc); It can be replaced with GLFW to create quick graphical applications. This first PR is moving the SofaGuiGlut to the applications directory, in case any people are still using it.; Actually, the code was not compatible with the current SofaGui API and was not compiling.; The code is now compilable and launchable anyway. Any reference to Glut are removed from the SofaFramework (header, CMake) and from runSofa. Lastly, a replacement using gflw will be pushed in the near future, for people wishing to have a simple GUI without the heavy-duty Qt Framework. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/598:637,simpl,simple,637,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/598,1,['simpl'],['simple']
Usability,"Good news, the mstate is already a link:. https://github.com/sofa-framework/sofa/blob/07119acb36dad5526e6af1c8e25190be2b575b57/SofaKernel/modules/SofaCore/src/sofa/core/behavior/ForceField.h#L228. Hence, you could simply do something like this:; ```cpp; template<class T>; static bool canCreate(T*& obj, objectmodel::BaseContext* context, objectmodel::BaseObjectDescription* arg); {; // Get the mechanical state link path set in the scene by the user; std::string requested_mstate_path = arg->getAttribute( ""mstate"", """");; ; // Get the mechanical state from the path; const auto * mstate = dynamic_cast<MechanicalState<DataTypes>*>(; PathResolver::FindBaseFromPath(context, requested_mstate_path); );; ; // If a mechanical state path was specified but could not get resolved (ex. is not of the same datatype, or simply if the path isn't good); if (!requested_mstate_path.empty() && !mstate) {; if (!PathResolver::CheckPath<BaseState>(context, requested_mstate_path)) {; arg->logError(std::string(""Unresolved path to a mechanical state ('"") + requested_mstate_path + ""')."");; } else {; arg->logError(std::string(""The specified mechanical state ('"") + requested_mstate_path + ""') was found but its datatype is not "" + DataTypes::Name() + ""."");; }; return false;; }; ; // If no mechanical state specified, try to find one in the current context node; if (!mstate) {; mstate = dynamic_cast<MechanicalState<DataTypes>*>(context->getMechanicalState());; }; ; if (!mstate) {; arg->logError(std::string(""No mechanical state with the datatype '"") + DataTypes::Name() + ""' found in the current context node."");; return false;; }. arg->setAttribute(mstate->getPathName());; return BaseObject::canCreate(obj, context, arg);; }; ```. Maybe @damienmarchal could validate if the usage of the `PathResolver` is correct here, I didn't find any documentation on these methods ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621:214,simpl,simply,214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705015621,4,['simpl'],['simply']
Usability,"Gravity back in SofaGraphComponents. ; New Issues created: creation of a dedicated gravity forcefield, remove the ContextObject (polluting BaseObject, used only in Gravity) and remove the PauseAnimationOnEvent & PauseAnimation.; TODO: rename Component.Utility into Component.SceneUtility",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2605#issuecomment-1027803616:188,Pause,PauseAnimationOnEvent,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2605#issuecomment-1027803616,2,['Pause'],"['PauseAnimation', 'PauseAnimationOnEvent']"
Usability,"Great :-). Well, PIMPLs and forward declarations solve two orthogonal issues:. - forward declarations are (mostly) for types in the API defined by the class i.e. public methods; - PIMPLs are for when the implementation pulls off too many includes that are only needed by the implementation, or when you want/need to break source dependency. Typically forward declarations are best packed in a header for each plugin/module e.g. ; ```c++; #include <sofa/core/types.h>; #include <Compliant/types.h>; ```. which itself may pull forward decls from subfolders, like `#include <Compliant/mapping/types.h>`. . Of course we don't want to end up with yet another gigantic include graph, but forward includes are typically much smaller than actual includes so we should be fine io-wise. . Concerning PIMPLs, you'll need to put it behind a `std::unique_ptr` like so:. ```c++; class foo {; struct pimpl_type;; std::unique_ptr<pimpl_type> pimpl;. public:; foo();; ~foo();; };; ```; otherwise your class will have undefined `sizeof`, and you won't be able to instantiate it unless you include the PIMPL definition (which you don't want by construction). My feeling is that the general guideline should be about forward declarations: PIMPLs are seldom needed, and really put some burden on the programmer as you need to write the glue code between the pimpl and the actual class. On the contrary, forward decls are easy to setup and to implement, and *should* definitely improve build times.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790:1171,guid,guideline,1171,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-333965790,2,['guid'],['guideline']
Usability,Great @guparan keeping one macro will make things so much clearer!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1941#issuecomment-806039493:58,clear,clearer,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1941#issuecomment-806039493,2,['clear'],['clearer']
Usability,Great! Thanks for the feedback @KantaphatLeelakunwet,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4527#issuecomment-1962333637:22,feedback,feedback,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4527#issuecomment-1962333637,2,['feedback'],['feedback']
Usability,"Great, thanks for the feedback JuanJo.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1476#issuecomment-693513752:22,feedback,feedback,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1476#issuecomment-693513752,2,['feedback'],['feedback']
Usability,Guidelines: https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/712#issuecomment-405873488:0,Guid,Guidelines,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/712#issuecomment-405873488,2,"['GUID', 'Guid']","['GUIDELINES', 'Guidelines']"
Usability,Guidelines: vector data must include an “s”,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2541:0,Guid,Guidelines,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2541,1,['Guid'],['Guidelines']
Usability,HI guys. several users are giving us feedback about the RequiredPlugin which is not working.; The plugin (dll) is not loaded and the associated components obviously can't be created. Any hints ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/558:37,feedback,feedback,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/558,1,['feedback'],['feedback']
Usability,Having BaseContext and BaseNode a single class would have simplified so much sofa.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4334#issuecomment-1856589634:58,simpl,simplified,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4334#issuecomment-1856589634,2,['simpl'],['simplified']
Usability,"Hello @ChristianDuriez,. I've been discussing the sparse matrix issue with @matthieu-nesme for some time now. Here are some thoughts on the subject. The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on. In particular, I see two major orthogonal uses of sparse matrices:; 1. getting matrix data out of components; 2. working with sparse matrices (linear algebra, factorization, assembly). It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly. I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly `push_back` matrix data into a `std::vector<Eigen::Triplet<SReal> >` through a `std::back_insert_iterator`. With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for *getting the data* and *working with the data* instead of a single structure is the way to go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716:943,simpl,simplest,943,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716,2,['simpl'],['simplest']
Usability,"Hello @JeremieA, the current approach about the changelog management is to have a description of the changes in the PR's description so that @guparan & @hugtalbot can easily integrate them into the CHANGELOG.md file in a (more or less :)) weekly basis. . You can add a dedicated CHANGELOG section in the PR description in which there is a summary of the changes and, in case of behavior or API changes, the mecanism used to notify other's and minimal guideline/example on how they should fix their code. You already provided this informations into the comments feeds...but, having that in the comments feed makes them hard to find so it is better if all that is summarized. . EDIT: I just updated the PR description up to my understanding.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705:451,guid,guideline,451,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-311016705,2,['guid'],['guideline']
Usability,"Hello @StephaneCotin . I'm glad you are asking. . On my side I generate the following view to visualize & navigate in the inclusion graph.: ; https://htmlpreview.github.io/?https://raw.githubusercontent.com/SofaDefrost/sofa/reduceInclude2/include_master_2017_12_18.html. It was suggested by @guparan that we could aggregate the files around their cmake ""components"" so we could identify easily the ""strengh"" (the amount of .h) between the cmake package. Then from this graph views, actions can be to guide the refactoring. ; Eg: ; 1) remove the includes that are not mandatory to make the graph more sparse (there is very easy cases that can be done during coding sprint). ; 2) when there is cycle in the graph, serious refactoring may be needed because this indicate it is not possible to properly make package out of it (this happens in Helper & DefaultType). ; 3) for the elements in the graph that are included only few time this means it is very easy to put them into ""external"" plugins without breaking a lot of code. . I practiced 1) in https://github.com/SofaDefrost/sofa/tree/reduceInclude2; I practiced 2) in https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel; I practiced 3) in several of our pluginization's PR. What I found very hard is to make that in coordinated way and in a smooth enough way not to kill anyone's projects. On the existing code base:; - make PR that unify the way to declare namespace/include guards so refactoring with string replacement instead of manually patching the code base would be faciliated.; - make PR to reduce the include's graph pressure (this will ease to cut the code into packages); - make more PR to deprecates components ; - put as real plugin the leaves of the dependency graph (starting with the leaves is easier because it indicate that only a small part of our code base needs to be updated). ; - find an agreement on the resulting structure.; - find an agreement on the amount of change and understand how this will impact th",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690:500,guid,guide,500,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-372626690,2,['guid'],['guide']
Usability,"Hello @alxbilger . Nice PR. . This is outside of the scope of the PR but the use of the very intrusive; ```cpp; if (this->d_componentState.getValue() != sofa::core::objectmodel::ComponentState::Valid); return;; ```; makes me thing one day we will have to do something. The way to go is probably to make clear when the component state validation/update issupposed to happen. The two choice are: ""everytime/everywhere"", update all the time including ""in-between"" timestep or only once at beginning of timestep (with visitor in the BeginAnimationStep event ?).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232:303,clear,clear,303,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3850#issuecomment-1556742232,2,['clear'],['clear']
Usability,"Hello @bruno-marques . After some thinking about that I'm more convinced now that the best approach is to simply display a warning message like that:; ```cpp; if( isIntelraphics() ); {; msg_error(""runSofa"") << ""Intel drivers have a problem ...with ..... to runSofa you need to set your manually set an environment variable named 'MESA_GL_VERSION_OVERRIDE' with the value '3.0' to fix the problem."";; exit(-1);; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951:106,simpl,simply,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/526#issuecomment-351956951,2,['simpl'],['simply']
Usability,Hello @damienmarchal It seems this file was included by mistake.; The code was commented because it didn't compile but I didn't mean to put it in the pull request.; Only the commits about SofaGeneralEngine should have been there.; Thank you for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694678251:249,feedback,feedback,249,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694678251,2,['feedback'],['feedback']
Usability,"Hello @etagliabue ; Thanks for your contribution. However, as @damienmarchal said, I don't see a use case where you would want this behavior instead of the engine behavior.; For the other proposals, I believe it should be done in another PR, just for the sake coherency/simplicity.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496422349:270,simpl,simplicity,270,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496422349,2,['simpl'],['simplicity']
Usability,"Hello @hugtalbot . thanks for feedback, and you are right and it would really help. Considering that I already documented the things in previous issues, in PRs, I systematically answer questions on github and I regularly gives the whole picture in our weekly meeting in addition to the refactoring work...well... a bit of help and involvement would be appreciated. And As usual, I welcome anyone willing to spend some time on project tracking or writing meeting notes and If you consider yourself a non expert on Data/Link, it is even better, do come in, this is a super opportunity for you to level-up and become an expert. . It is also very surprising to me that if things are not clear no-ones ask specific question in PR description. This is very annoying because if I don't know what you don't know how should I write a PR description to fill the gap ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717:30,feedback,feedback,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1503#issuecomment-705507717,4,"['clear', 'feedback']","['clear', 'feedback']"
Usability,Hello @maddin200 . Thanks for your PR. The fix avoid a crash with 7 char input string (that are invallid input for color code). ; It would be an improvement in usability if instead of silently ignoring these 7 char long strings something was reported as invalid to the user by setting the fail bits.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1868#issuecomment-786919775:160,usab,usability,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1868#issuecomment-786919775,2,['usab'],['usability']
Usability,"Hello @olivier-goury,. Thank you for the PR. ; I have added some comments (mostly about coding-style). . As I'm the author of some of the code you propose in the PR...could you add my name in a contributors section after the license header. In general I do the following.; ```cpp; /******************************************************************************; * Contributors: ; * - damien.marchal@univ-lille.fr ; * - olivier.goury@inria.fr ; ******************************************************************************; ```. I know @hugtalbot and @guparan complains...but to me this is a clear demonstration that relying on git to track authors ship (and thus copyright credit) is misleading...and thus having a per-file contributors sections.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701435773:592,clear,clear,592,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1510#issuecomment-701435773,2,['clear'],['clear']
Usability,"Hello Bruno,. Functional programming is very standard and part of the language:; http://book.pythontips.com/en/latest/map_filter.html ; as well as part of libraries:; https://docs.scipy.org/doc/numpy-1.13.0/reference/routines.functional.html. So functional programming is a must (and cheap thing) to have but to be honest the syntax:; ```py; m.position[OnDiagonal] = 0.0; ```; was just there for fun and to see if it was possible (actually I see it as a generalization of the slice syntax array[2:1] that is part of the language where instead of iterating between the slice interval you can provide funny iteration scheme). But I fear how slow may be generators compared to more classical iteration mechanisms. . About your question regarding the implementation: ; I wrote most of the change using the C-python API but after some time I was fed-up on how ugly it is and terminated the implementation using python. Mixing the python and c++ code was actually very simple thanks to the cython ability to generate dual-bindings... where a c++ function is exposed in python as well as having python functions exposed to C++ (so a .h is generated to include and use the python code in your c++ code base). ; That's said cython is not magic and the generated .cpp/.h are containing 100% python C-api ...so everything implemented in cython could be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value);",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:963,simpl,simple,963,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819,2,['simpl'],['simple']
Usability,"Hello Damien, and thanks for your feedback. Let met address your points one by one:. ## Invasiveness. That depends on the use cases for `Data` embedded in a component. From the code in `Base.h`, it seems that components essentially should be able to:; - Enumerate all its `Data`; - Associate a name to a `Data`; - Adding/removing `Data`. Assuming it's all there is to `Data` management in a component, then the following changes could enable opt-in, class-based data management when needed:; 1. Make all the associated methods virtual: `Base::findData, Base::addData, Base::removeData, Base::getDataFields`, possibly changing return type in the case of `Base::getDataFields` from `const VecData&` to `VecData`. In the latter case it would probably be even better to change the iteration strategy altogether, for instance by using:; ; ``` c++; virtual void Base::getDataFields(VecData& out) const = 0;; ```; ; ...to leave allocation to the caller. Grepping `getDataFields` on the whole SOFA codebase yields around 10 hits (python bindings, generateDoc, GUI and modeler, solver merger) so it should be manageable.; 2. Provide a protected `BaseData` constructor that does not initialize links/owner datas. Obviously we do not want to silently break existing code, so this behavior should be opt-in, for instance using a tag class:; ; ``` c++; class BaseData {; public:; struct no_init {};; ; protected:; BaseData(no_init) : // ...; };; ```; ; This one should be easy.; 3. Add a public `Data` constructor that only initializes value, something like:; ; ``` c++; template<class T>; class Data {; public: ; Data(BaseData::no_init, const T& value = T() ) : // ...; };; ```; ; Again, easy.; 4. Provide component constructors that do not initialize their `Data` so that optimized components can be derived:; ; ``` c++; Base::Base(BaseData::no_init) : name(BaseData::no_init), //...; BaseObject::BaseObject(BaseData::no_init) : f_listening(BaseData::no_init), //... ; ; // ... BaseMapping, Mapping, etc.; ```; ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923:34,feedback,feedback,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255340923,2,['feedback'],['feedback']
Usability,"Hello Erwan,. Good idea to make a warning. . Now at the fundamental level to me all this part of Sofa is ""broken"". The fault is that there is no clear difference between the ""in editor"" camera (the ones use in the viewer/runSofa editor) and the ""in-scene"" camera. Making this distinction is important and I'm sure that for runSofa2 we will need to make that clear. . To be clear...think how Unity is doing... some panel are showing ""external"" view of the scene for editting..while one or multiple ""in-scene"" cameras are used in the ""game"" panel for the rendering. . Actually we also have the same problem with all the interaction.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275:145,clear,clear,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/481#issuecomment-337361275,6,['clear'],['clear']
Usability,"Hello Eulalie,. Hello @EulalieCoevoet and thanks for the suggestion. . I'm not sure isSet() could be used for this task. ; Because there are cases:; - where a Data field has a default value and that this default value is used.; - there are cases where a Data field has a default value and that this default value is not used (ie. it is optional as in your example). Let's see for the other flags... There is the isDisplayed() flag. This flag can control if we show the data is showed all. The side effect of using it for hiding means that if not set at load time then it cannot be changed anymore later. . There is also the isRequired() flag. It is not used a lot and was primarely designed to indicate that need to be setted (mandatory)...which sound a bit like the reverse of ""optional"". Currently in Sofa component most of the data are not set to required (despite I bet that a lot of them are) and there is not graphical feedback related to this flag. So I will think a bit about this one to see if we can something out of that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754520239:925,feedback,feedback,925,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-754520239,2,['feedback'],['feedback']
Usability,"Hello François (@fjourdes),. Thank for the long and interesting reply. . Your last comment rise an interesting question related to differentiating unittest to functionnal tests. ; Currently in Sofa we don't make any distinction between unit test and functionnal test but my thinking is that in general utility classes have unit tests while components have functional tests . Making the distinction would be indeed better so the question is how to get there from where we are a now. Here is a proposal. ; In the current PR there is a ```BaseTest``` and ```BaseSimulationTest```, this could actually be transformed without too much effort into UnitTest and FunctionalTest. The tests inheriting from UnitTest shouldn't use the factory in any way and shouldn't have external dependencies. The test in-heriting from FunctionalTest should use the factory and can make the assumption that specific plugins are loaded. We could event go one step further and emphasizing things by having two set of file, ones named *MyClass_unittest.cpp* and *MyComponent_functionaltest.cpp* and in our CMakeLists.txt compile the two set of tests separately with different build targets. This would make things very clear, be compatible with your workflow where unit test are considered as compilation failure, be compatible with our workflow where functional tests are used because they allow to get decent code coverage and last point as it would use the loose coupling approach it would totally cut the dependency at compile time to SofaTest. . Small note, some Functional tests may rely on components implemented in plugins. I have not clear view if we should disable the test if the plugin is not there or if we should make it fails or if we should ""disable"" it at runtime. . EDIT: changes some sentences.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552:1191,clear,clear,1191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337536552,4,['clear'],['clear']
Usability,"Hello François, . Here is a summary of my current understanding of your comments. ; It seems that you want to:; 1 - cut the dependency to SofaTest; 2 - have a clear separation between unittest vs functionaltest; 3 - cut the dependency to SofaFramework (ie not having the test inheriting from SofaFramework/BaseTest or something like that) for the unittests. . Initially this PR was only about -1- cutting the dependency to SofaTest. My thinking is that the SofaTest dependency is a major problem for everyone using the master branch of sofa because of the high impact on code coupling. . About -2- Following your remarks I'm in favor of improving a more clear separation between unit-test and functional test but as this is something new and maybe this should discussed that in the ""issues"" section of github instead of inside a specific PR. . About -3- cutting the dependency to SofaFramework. This is something that was never discussed before and worse than that, up to now the general consensus that, as we are in Sofa, we should inherit from a single BaseTest that install all the may be needed to do the test. A good reason for this scenario is nothing related to Scene/Simulation management but because BaseTest provides a default handler for EXPECT_MSG_EMIT/NOEMIT. Of course if your code is not using at all those elements, then you should feel free to use gtest. . As said in previous comment compared to the current Sofa code base I would be very happy to have -1- and -2- done. . It seems that -3- is not a big deal for people using the CMakelists.txt from Sofa but it may be of importance for your specific workflow in which, if I understand your previous answers, you integrate unittest as compilation failure. Maybe you can provide us more details on your workflow so that we can see the drawback of having the tests written in SofaFramework to be inheriting from a BaseTest (which is also defined in SofaFramework). Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814:159,clear,clear,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-338697814,4,['clear'],['clear']
Usability,"Hello Fred, to avoid excessive code coupling maybe such kind of application could be done using the simpleapi instead of the raw c++ api. This would demonstrate the same ""no gui"" app.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418:100,simpl,simpleapi,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2792#issuecomment-1075513418,2,['simpl'],['simpleapi']
Usability,"Hello Guillaume,. I'have mixed feeling. On one side I would like the sprint branch to be merged asap so that we can all start from this baseline and continue deprecating/pluginizing (I know bruno is waiting, as is the pluginization done during the STC) but, on the other side I dislike to merge things that fails. . Currently the base branch have several tests failing and I fixed all of them in #457. I'm not sure all of them are easy to cherry-pick so I would recommend to merge this one and immediately after merge the #457 so that master is not in a broken state for a long time. . Actually in #457 only one test remains to be fixed, the ""VariationalXXX"". This one was not in the base branch but appeared during the sprint. I have no idea what is wrong so if this speak to you @hugtalbot , @StephaneCotin, @ChristianDuriez please help. . So my opinion is that we should accept the risk of merging #453 and #457 in a row so that we can restart working from a shared code base and continue our work and deals with the breaking/regression introduced. ; It also have advantages as more people will try this branch we will have more feedback on the deprecation process.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963:1132,feedback,feedback,1132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453#issuecomment-335416963,2,['feedback'],['feedback']
Usability,"Hello Hugo,. I disagree about your suggestion as this PR is not about binding GeometryAlgorithm's like object. . GeometryAlgorithm is inheriting from BaseObject. To use it you need the full Scene Graph and plenty of dependency to Base/BaseObject/Data/Link/SceneGraph/..... The underlying idea is to use them in ""your scene"" as part of your scene/simulation. But if you 'just' want to test intersection between ray/plane using GeometryAlgorithmes imply a lot of boilerplate code to manage the ""scene graph"" and baseobject management. . In this PR the target is not to expose GeometryAlgorithm in python, it is more to have a low-level API that propose geometrical object (c++ object, not BaseObject) and their associated operations as well as the corresponding binding to python. The key target of that this API is to be usable with as few as possible boilerplate code and without any scene graph/base/baseobject's folks. . So the SofaGeometry module proposed in this PR can be seen as 'one' level lower in the software stack that GeometryAlgorithm. The interest of this module is that it can be used as-is (API style), in C++ or in python. Of course it is possible to go one step further (in that case I suggest to do that in a different module and in a different PR) where the c++ object implemented in SofaGeometry are exposed in the SceneGraph by inhering from BaseObject. . Hope it is more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498:820,usab,usable,820,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/747#issuecomment-413541498,4,"['clear', 'usab']","['clear', 'usable']"
Usability,"Hello Hugo,. Thank for your will to change that. because I I fully agree that our naming are bad. . I see three different possible patterns:; (1) defaultX, genericXXX but they are vague (actually we could also rename the DefaultContactManager :)). ; (2) Penality or LagrangeMultiplier that are the name of numerical/mathematical method. ; (3) frictionalContact or stick that are the names of physical phenomenons/model. . To me (1) are totally non informative names and we should ban them everywhere. ; Now between (2) and (3) the choice is more terse. My thinking is that using a phenomenon base name is the best thing to do.; So we focus on what the method does (eg: provide a zero geometric intersection) instead of how this is done (with penality method or lagrange mutliplier). . It is possible that for on phenomena there is multiple method implemented to solve it. In that case I think that adding a second option field to specify the method name would be the clearest approach. ; This would results in something like:; ```xml; <CollisionManager response=""geometricIntersection"" method=""penality""/>; <CollisionManager response=""stickyContact"" method=""lagrangeMultiplier""/>; <CollisionManager response=""frictionalContact"" method=""lagrangeMultiplier""/>; ```; Of course doing so is probably a bigger refactoring than what you were thinking about. Maybe if and only if there is multiple methods for the same physical phenomenon adding the method name as a postfix could solve the issue.; This could look like: ; ```xml; <CollisionManager response=""geometricIntersectionWithPenality""/>; <CollisionManager response=""geometricIntersectionWithLagrangeMultiplier""/> (distanceLMConstraint ?); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261:967,clear,clearest,967,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1871#issuecomment-787489261,2,['clear'],['clearest']
Usability,"Hello Jérémie,. Thank you for rising this issue and for making a proposition answering the questions asked in #346. ""These types of changes can be very painful for everyone looking at file histories and/or not working exclusively on master:""; You are totally correct. ""So I would like to know if those considerations were understood before doing this once again ?""; As you ask the question, yes, these considerations were understood and discussed. The problem we have is that when people taking part in discussions are sharing similar concern they can agree on changes that does not fit others needs. This is why we value and regularly ask your feedback (using @JeremieA or @fjourdes). Since we are on github nothing have been ever merged without a minimal shared approval (and this is a keystone for me to contribute to Sofa). So on my side I see no problem in withdrawing or updating the changes made of this is too cumbersome for your workflow. In our workflow we try to stay as close as possible to master and among all the problem we see in the current sofa code base (eg: no being able to deprecate things, too long compilation time because of code coupling, in-coherent and hard to understand file scheme organization) keeping a traceable file history, despite important, was set to a low priority. ""And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :""; Impossible, I'm totally opposed to ignoring people contributions (as I'm oposed about endless discussion :)). ; Step 1 and 2 actually fit our needs so we can do that (and actually contribute by PR to make this happens)... About step 3...I have a:; - rather positive opinion on having a SofaPlugin/SofaPluginDeprecated; - moderated opinion on SofaPluginGPL; - negative opinion about using SofaGeneral/SofaAdvanced/SofaMisc because it is extremely confusing. To explaine why...I bet a coffee that, if we take 100 sofa components and ask 10 developers where the component should be we w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/482#issuecomment-338700994:645,feedback,feedback,645,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482#issuecomment-338700994,2,['feedback'],['feedback']
Usability,"Hello Marc, and thanks a lot for your feedback !. I'll address some of your points below:. > **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the init() functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the right time: the program will work correctly by design, not by coincidence;. To be more explicit: there is no guarantee whatsoever that calling `init` in a `static` RAII constructor will get called *after* every other `static` variable in the shared library is initialized. This can indeed be an issue. I was under the impression that there is exactly one of such RAII per dynamic library loaded by SOFA, so as long as `init` does not involve messing around with other `static` variables in the library we should be safe, right?. > **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the main() function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. Come on, we're talking about SOFA here ;-). > **choice** (or whatever): with an explicit call to init(), an application writer gets to decide both whether and when to initialize SOFA. Not sure I agree: when `dlopen`-ing a shared library, I prefer to have it initialized automatically if possible (and safe) as the converse is error-prone. In any case, `cleanup` should really be called in the RAII destructor, otherwise resources will leak in case an exception is thrown and not caught, or somebody calls `std::exit` (which they *can*). And of course, the destructor should not do silly stuff like calling a `MessageDispatcher` that was destructed already.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333:38,feedback,feedback,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280066333,2,['feedback'],['feedback']
Usability,"Hello Serguei,. Thanks for the clear explaination. This may actually be part of the BoxROI documentation. ; Now back to your problem...what do you think about implementing a python function to convert from (position, orientation, size) would generates these 10 values ? Is it enough / not enough ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/560#issuecomment-359809208:31,clear,clear,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/560#issuecomment-359809208,2,['clear'],['clear']
Usability,"Hello all, . I've added some modifications on this PR. . First I've created a new *Python* script in PythonSofa to make the use of the *AdvancedTimer* easier. Now, if you want to use it in a *Python scene*, the easiest way to do it is to use the script with the method *measureAnimationTime*. You will have to add this line: . ```py; from SofaPython import PythonAdvancedTimer; ```. at the beginning of your script. Then you have to add the method *bwdInitGraph(self, node)* method at least as the following:. ```py; def bwdInitGraph(self, node):; # It will call the simulationStep method too; PythonAdvancedTimer.measureAnimationTime(node, ""timerPoutre"", ; 2, ""ljson"", ""poutre_grid_sofa_timerLog"", 0.1, 1000); return 0; ```. If you already have defined a bwdInitGraph, you juste have to add the *measureAnimationTime()* method to get your scene analyzed. To use it by your own way, you can take a look at the *PythonAdvancedTimer.py* script. You'll find it in the *Sofa project* at *SofaPython/python/SofaPython/PythonAdvancedTimer.py*. Second, I've added two scripts to use the returned *light JSON* files of the *AdvancedTimer* : *TimerLJSONPlot.py* and *timerLjsonManyFilesPlot.py*. I've also added the documentation to informe future users how to use the *AdvancedTimer* and the plotting scripts. The tests will come soon. Thank you for your feedback @damienmarchal .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680:1347,feedback,feedback,1347,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-324669680,2,['feedback'],['feedback']
Usability,"Hello all,. This PR somewhat simplifies the creation and handling of `PythonScriptControllers` from python scenes. Here's the TL;DR version:. ```python; import Sofa ; class Script(Sofa.PythonScriptController): pass. def createScene(node):; # now you can do; script = Script(node, 'bar', egg = 'spam'). # the old behavior still works:; old = node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```. Now for the details:. ## Existing approach; The current approach is to use ; ```python; node.createObject('PythonScriptController', filename = '', classname = 'Script'); ```; which has several drawbacks:; - The returned object does not point to the control object, but to the component wrapper. This makes it complicated to pass data around at scene creation (people generally resort to `global` variables for this purpose).; - If `filename` is non-empty, the corresponding file is (re)loaded, causing all sorts of *interesting* side-effects. If you ever had to struggle with these, you know what I mean.; - If `filename` is empty, the control class has to lie in the `__main__` namespace; - It is quite verbose; - It just feels plain wrong *not* to create python objects directly when called from python. It does have a few advantages though:; - It does not require any `PythonScriptController`-specific code for object creation,; - It enables the creation of `PythonScriptController` instances from XML scenes . ## Current workaround; There is a workaround class `SofaPython.script.Controller` that somewhat fixes some of the issues by implementing `__new__` in a derived Python class, intercepting and returning the control instance and optional initialization arguments, but overall it feels more like a hack. ## This PR. This PR simply provides a clean binding for instance creation. You need to provide a node as a first argument, but otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283:29,simpl,simplifies,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283,1,['simpl'],['simplifies']
Usability,"Hello all,. While trying to disable some unused components/plugins from my setup in order to reduce compilation times, I discovered that SceneCreator depends on many base plugins, and that most test plugins depend on SceneCreator. This design makes it *really* hard to disable any plugin if somebody wants to compile tests for the remaining enabled plugins. I guess the ""correct"" way would be to split the SceneCreator features in each plugin so that you never pay for what you don't use (we're doing c++ after all :-). Any idea/feedback?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417:529,feedback,feedback,529,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417,1,['feedback'],['feedback']
Usability,"Hello everyone,. I'm still not sure I fully understand the problem, but I'll describe it and PR a solution for discussion. When SofaCUDA is required as a dependency in an in-tree build, the CMake configure step is unable to locate `SofaCUDANvccFlags.cmake`. To reproduce the issue you may choose a dummy plugin (eg, [MyAwesomeComponents](https://github.com/sofa-framework/MyAwesomeComponents)), add to `CMakeLists.txt` and `*Config.cmake.in`:; ```; find_package(SofaCUDA REQUIRED); ```; And compile it in-tree.; I haven't tested how this goes in out-of-tree compilation. A really simple fix (PR ready) is to update the installation path SofaCUDANvccFlags.cmake to `build/lib/cmake` where it is surely found.; So in `SofaCUDA/CMakeLists.txt`:; ```; configure_file(SofaCUDANvccFlags.cmake ${CMAKE_BINARY_DIR}/lib/cmake/SofaCUDANvccFlags.cmake COPYONLY); ```. I understand though cmake config files should be placed and found on `build/cmake` and I do not know why it does not happen. Every insight will be much appreciated. Pedro",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2021:580,simpl,simple,580,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2021,1,['simpl'],['simple']
Usability,"Hello guys! Is there any news regarding the updated features? @marques-bruno : Can you make a small update to the PR with some examples for the functionality:. - Normal type inheritance (PSDE Input type is inherited from existing component); - ""Forwarded"" type inheritance (PSDE Output type is inherited from a component linking to it). I'll discuss with Damien about the forwarded inheritance mechanism to verify that we are on the right track.Then, after checking the PR with examples, we can see the next steps more clearly, i think.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236:519,clear,clearly,519,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406574236,2,['clear'],['clearly']
Usability,"Hello thank you for the feedback,. I'm strongly reluctant to hard code in c++ trivial keyboard controller because there is a lot of boilerplate code and because this also encourage software obesity by having all the application specific's user interfaces in Sofa Core, think about just changing the keypress ""a"" to ""b"" without recompiling sofa. . But I'm ok to implement that in a python controllers, does it would be ok ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4163#issuecomment-1737430587:24,feedback,feedback,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4163#issuecomment-1737430587,2,['feedback'],['feedback']
Usability,"Hello, . I feel like a lot have changed in `MeshLoader`, but `GIDMeshLoader` hasn't been updated. . The problem I have is that the component is not working with the update callback mechanism :; - `doLoad()` is called three times, and it uses `push_back()` without clearing the lists (e.g. position, tetra...).; - and other problems related to transforms. I'd like to update the component, but I don't know how. I couldn't find a related PR.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1534:264,clear,clearing,264,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1534,1,['clear'],['clearing']
Usability,"Hello, . Since you made this PR @untereiner do you have any feedback on the NG proposal ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/707#issuecomment-404174229:60,feedback,feedback,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707#issuecomment-404174229,2,['feedback'],['feedback']
Usability,"Hello, in my opinion, this bug is related to the actual status of solvers in SOFA. Since CG is a very ""robust"" solver (where ""robust"" means that it constructs solutions which are mathematically not always justifiable), it is used everywhere in examples. However, there are other solvers available in SOFA (even if not used often), such as SparseLDL, SparseLU. I think it might be highly ""surprising"" for someone that while CG calculates some solution (which IMHO is not mathematically justifiable, but let's put this aside), LDL or LU will simply crash on such as simple scene without saying anything clear about the reason of crashing. Or to put it differently -- the above scene is not well-formed (a non-mapped MO in a subnode...), but if using CG, everything looks fine (even IMHO it really should not).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123:540,simpl,simply,540,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390928123,6,"['clear', 'simpl']","['clear', 'simple', 'simply']"
Usability,"Hello,. A simple [blame](https://github.com/sofa-framework/sofa/blame/25f245b2383a86f097cabdea13697aa42665568e/modules/SofaConstraint/BilateralInteractionConstraint.cpp) shows the 2 commits where these values where last set:; https://github.com/sofa-framework/sofa/commit/bb99399cba47a95301025531577c2e3ac3f728ab; https://github.com/sofa-framework/sofa/commit/8b294f75884a0216ce26f5457b8689da57dd081a. They were done for a PhD work, tuning for specific cases but without giving real reasons in the log. So this is not something that was really meant to be preserved like that, indeed it does not make sense that the value is much higher for double that floats. But the actual refactoring that is needed is to expose this tolerance as a Data instead of hiding it within the code itself, so that it can be tuning within the simulations that require it instead of requiring a patch within Sofa. Ideally the value in the Data should preserve the current behaviour in order not to break existing scenes, possibly with the isRequired flag set such that others will know that they should set the value specifically instead of relying on the previously hidden and inconsistent default. Jeremie.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683:10,simpl,simple,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/45#issuecomment-257955683,2,['simpl'],['simple']
Usability,"Hello,. I have been trying to run the CGAL Plugin with sofa, my aim is to create a tetrahedral mesh from a surface mesh, and then experiment that for Haptic Rendering within Sofa. I followed the page here: https://www.sofa-framework.org/community/doc/plugins/usual-plugins/cgal-library/. Although it does not tell what version of CGAL to use, or boost as well. Finally, I have been successful to build with the following versions of dependencies.; **Environment:**; Visual Studio 2017 vc 14.1; Sofa Master: commit 9d9100aa1b0acb9363c8ec7c9b5e4b470821bfc1; Boost: 1.71.0; CGAL: CGAL-4.13.2; QT: 5.12.0. ```; INFO] [runSofa] PluginRepository paths = C:/open_prj/sofa/build/mmaster/plugins;C:/open_prj/sofa/build/mmaster/bin/Release; [INFO] [runSofa] DataRepository paths = C:/open_prj/sofa/src/share;C:/open_prj/sofa/src/examples; [INFO] [runSofa] GuiDataRepository paths = C:/open_prj/sofa/src/applications/projects/runSofa/resources;C:/open_prj/sofa/src/applications/sofa/gui/qt/resources; [INFO] [runSofa] Loading automatically plugin list in C:\open_prj\sofa\build\mmaster\applications\projects\runSofa/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaExporter.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaSparseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaPreconditioner.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaHaptics.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaValidation.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaDenseSolver.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaNonUniformFem.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/build/mmaster/bin/Release/SofaOpenglVisual.dll; [INFO] [PluginManager] Loaded plugin: C:/open_prj/sofa/",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1402:846,GuiD,GuiDataRepository,846,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1402,1,['GuiD'],['GuiDataRepository']
Usability,"Hello,. I was playing with SimpleGUI, and it did not compile with recent sofa::type changes.; Here are some fixes, so it can compile and run well with the latest release. Cheers,. Pedro. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2274:27,Simpl,SimpleGUI,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2274,1,['Simpl'],['SimpleGUI']
Usability,"Hello,. I would like to add some new functions to the visualization in **TetrahedronFEMForcefield**:. 1) In the visualization of Von Mises Stress, the option ""_showVonMisesStressPerNode_"" shows the stress for each node:; ![VisualStress01](https://user-images.githubusercontent.com/56633656/234046047-3264cd75-896e-465a-8421-d2bf29b304cb.png); while the option ""_showVonMisesStressPerElement_"" computes the stress in another way:; ![VisualStress05](https://user-images.githubusercontent.com/56633656/234046608-193dee0f-9771-4526-be96-6987aa0b87d1.png). However, my desired color map of the stress is like the following image (using node stress data):; ![VisualStress04](https://user-images.githubusercontent.com/56633656/234047053-0d382e09-243c-470b-8f49-ebbc6b756482.png); Compared to the visualization with ""_showVonMisesStressPerElement_"", this color map accords more with my intuition of the stress forces (while the feet are pressed).; Therefore, I would like to add a new option ""_showVonMisesStressPerNodeColorMap_"" to show this color map. 2) I would like to add an option ""_showGapBetweenElements_"" to activate/deactivate drawing the gap between the elements, in order to show a smooth color map:; ![VisualStress07](https://user-images.githubusercontent.com/56633656/234049502-781340eb-e323-402d-8aeb-fc4f14c0e722.png). 3) I would like to add an option ""_showForceField_"" to decide if we draw the forcefield of the current object or not. This will be useful when we have several soft tissues and we want to focus on one of the objects:; ![VisualStress08](https://user-images.githubusercontent.com/56633656/234050359-c2c27e3b-ba45-48b9-98dc-337757e25b6d.png); ![VisualStress09](https://user-images.githubusercontent.com/56633656/234050426-38c84e34-49f8-4c2c-bcea-b8d4e2acef59.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/so",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3820:878,intuit,intuition,878,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3820,1,['intuit'],['intuition']
Usability,"Hello,. PR of a small fix to #1731. I simply removed the debug message which seems to be left behind at the code. It should be compatible to both master branch and the latest release. Please let me know if I should create a PR to master instead. Cheers,. Pedro. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1732:38,simpl,simply,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1732,1,['simpl'],['simply']
Usability,"Hello,. Thank for the PR. The added feature is nice and should be merged but the way it hack the command line by allowing ""-2"" is very confusing. . Why not doing: ; The standard way; ```runSofa -c 1```. Only for the init functions:; ```runSofa -b```; (as -i is already taken maybe -b to begin is a good choice). For the init function and for every second step:; ```runSofa -c 2 -b```. It would clearly separate the concerns instead of encoding different behavior in the same variable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901:394,clear,clearly,394,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/468#issuecomment-337522901,2,['clear'],['clearly']
Usability,"Hello,. Thanks for the PR. I fully agree on generalizing more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:955,clear,clear,955,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920,2,['clear'],['clear']
Usability,"Hello,; would it be possible to provide a simple test?; It seems there is no unit/scene/regression tests which are using Multi2Mapping and its `input2` apparently.; And by just looking at the code, I cannot see why `input2` would be impacted by #3665 as there is no `validator` for input2 😅; It would be much easier to track down the bug, thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112:42,simpl,simple,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3705#issuecomment-1457371112,2,['simpl'],['simple']
Usability,"Here are more details related to @alxbilger's concerns on ""do we want short name for fixed_array"". I think it would be interesting to go toward a systematic approach on generalizing the use of short names/alias in our code base because currently the ""do what you want"" policy leads to a lot of messiness in our code base with plenty of style inconsistencies. . So I would be in favor of the following rules: ; - every extern template XXXX should have use a short name. ; - every short name should be lead to an extern template. ; The two are good because it makes clear what is related to an extern template and what is not. . Now to have an idea on how much hardcoded short name do we want my guidelines are:; - every registered type in a factory (eg: TableDataWidget or in ObjectFactory) deserve a short name. ; - every type used in a Data<> in our code base deserve a short name (to be consistent with what is seen in the sofa scene). ; - never use long name if you can use a short name. . If you see other things to add/remove please tell.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3298#issuecomment-1253551760:564,clear,clear,564,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3298#issuecomment-1253551760,4,"['clear', 'guid']","['clear', 'guidelines']"
Usability,"Here is a fix for issue: https://github.com/sofa-framework/sofa/issues/512. # Objectives; - add optional short argument ☑; - add more flexibility. We don't want to edit the main.cpp each time we want to add new arguments ☑; - simplifcation of ArgumentParser. We will use the boost program option ☑. # Changelog. - `ArgumentParser` completely changed. It's now using boost program option. It's better using existing things rather than creating our own implementation and maintain it; - `SceneCreatorBenchmarks.cpp ` use the new ArgumentParser; - `runSofa/Main.cpp` use the new ArgumentParser; - `BaseGUI.h` use the new ArgumentParser, and changed the way we can parse arguments.; - `BatchGUI` use the new ArgumentParser, and add argument registration; - `GUIManager.cpp` changed the api, removed initGUI (useless most of the time); - `gui/Main.cpp` use the new GUIManager function (replace the GUIManager); - `MultithreadGUI` use the new ArgumentParser and GUIManager; - `SimpleGUI` use the new ArgumentParser and GUIManager; - `RealGUI` use the new ArgumentParser and GUIManager. ## API Breaking. - `ArgumentParser` everything changed; - `BaseGUI` use the new ArgumentParser, and changed the way we can parse arguments.; - `GUIManager` changed the api, removed initGUI (useless most of the time). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/513:226,simpl,simplifcation,226,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/513,2,"['Simpl', 'simpl']","['SimpleGUI', 'simplifcation']"
Usability,"Here is a list of component that are using raw attributes and thus will fail to be saved:; ImplicitSurfaceMapping: minx/max; RuleBasedContactManager: ; CubeTopology: parse, min/max; SelectConnectedLabelROI ; RegularGridTopology; GridTopology; MeshLoader; VisualModelImpl; BaseObject (the src/template). From my point of view using raw attribute in the parse function to ease scene writing allows developpers to implement 'creative' UX behaviors, and it is causing a lot of trouble. The problem is that doing this always breaks the consistency of the user interface of Sofa (when looking to the XML scene the user have not idea what is a 'parsed only' attribute and what is a data; when looking in the GUI he does not know that 'parsed attributes' exists and has no way to discover and manipulate them). . For attributes of the like: ""xmin"", ""ymin"" (in the CubeTopology) or the ""sx"", ""sy"" (in the VisualModelImpl); I'm considering to replace them with an extended point based notation for attribute ; ""sx"" -> ""scaled3d.x"" ; this would make it very clear that sx is in fact a subfield of the scale3d Data. (Haven't looked on how we can implement that) . Now about the 'size' attribute to set the size of all arrays in MechanicalObject...this a clear example of what you call a Dangerous behavior (having and saving Data that are not compatible to each other).; The best solution I currently have is to warn the user that 'size' is in fact transformed to setting all arrays into position.size='10'. We we could also rename that by writing 'initialSize' assuming that if the array is set...the initialSize is overwritten. . To be continuated... time to code.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360:432,UX,UX,432,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272412360,6,"['UX', 'clear']","['UX', 'clear']"
Usability,"Here is a plugin communication ; The purpose of this plugin is to add ability to the users to simply send/receive data´s from sofa. Instead of creating many plugins for each implementation/hardware, we propose to regroup all of them in one communication plugin. . Actually there is two network protocol implemented : ; - OSC (has packet size limiations ...); - ZMQ. Improvements : ; - better thread safe implementation; - more types; - add others library implementation. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/534:94,simpl,simply,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/534,1,['simpl'],['simply']
Usability,"Here is a short feedback of what we have done since the STC : . **First strategy :** Model the Data accesses using ORWL's concepts + high level task parallelism (coarse grain parallelism); - use abstract Data accesses stored in FIFOs to extract parallelism : thread safe data accesses allowing concurrent reads.; - ensures that the semantic of the program is preserved.; - tasks defined at Visitor level : a Task is defined as the execution of a Visitor on a component.; - this strategy should apply to all visitors and components, as it does not depend on the nature of the component. **Issues :** ; - We wanted to use the Data class, since all accesses to a data object in sofa should be done using this class. Problem : this is not true, some components use vectors directly, or use Data methods / ReadAccessor / WriteAccessor not as intended (this is possible since for now some methods such as Data::endEdit do nothing) -> we would need to look at all sofa components to make sure that the Data are properly used; - To properly model the data accesses using ORWL's concepts we need to slightly modify the API of the Data class; - sofa Engine mecanisms are complex to handle using FIFOs; - it is difficult to predict the data dependencies as the Visitors are launched dynamically and can launch Visitors -> we can't predict the data accesses in a preprocessing phase, so we need to adapt ORWL.; - This approach would not induce significant performance gains on simulations with only 1 object or with 1 ""main"" object since all the computationally intensive tasks inside a given object access the same Data object (Write access) and thus are inherently sequential. **Conclusion :** the potential speedup is not good enough to invest more time on this strategy given the difficulty. **Second strategy :** finer-grain parallelization; To extract parallelism from highly data-dependent tasks we need to divide these tasks into less-dependent subtasks.; To achieve that, we are currently implementing pa",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792:16,feedback,feedback,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/24#issuecomment-304903792,2,['feedback'],['feedback']
Usability,Here is a very simple implementation that enable extra printing to help in understanding why some scenes are failing/crashing. . I also add few scenes with single solvers because those components where not tested anywhere in our CI. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/667:15,simpl,simple,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/667,1,['simpl'],['simple']
Usability,"Here is the PR with the PSL plugin to simplify the writing of scene with SOFA. Video with examples:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. The ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/541:38,simpl,simplify,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/541,1,['simpl'],['simplify']
Usability,Here's a simpler implementation of sofa::core::DataEngine. This implementation hides the code related to updating datafields and calling cleanDirty() in an attempt to reduce human errors. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/760:9,simpl,simpler,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760,1,['simpl'],['simpler']
Usability,"Here's a small test class that displays the different features I implemented in that ImplicitDataEngine mother class of mine:. ```; struct TestEngine : public ImplicitDataEngine; {; SOFAOR_CALLBACK_SYSTEM(TestEngine); // Required to setup the callback mechanism. public:; sofa::Data<int> d_a;; sofa::Data<int> d_b;; sofa::Data<int> d_c;; sofa::Data<int> d_a_out;; sofa::Data<int> d_b_out;. SOFA_CLASS(TestEngine, ImplicitDataEngine);. TestEngine(); : d_a(initData(&d_a, 0, ""a"", ""An input with a callback method"")),; d_b(initData(&d_b, 0, ""b"", ""An input without callback methods"")),; d_c(initData(&d_c, 0, ""c"", ""A simple data field with a callback"")); d_d(initData(&d_d, 0, ""d"", ""A simple data field without callback"")); {; d_a_out.setName(""a_out""); // the processed output of a; d_b_out.setName(""a_out""); // the processed output of b; }. void init(); {; SOFAOR_ADD_INPUT_CALLBACK(&d_a, &TestEngine::increment, false);; addInput(&d_a);; addInput(&d_b);; SOFAOR_ADD_CALLBACK(&d_c);. addOutput(&d_a_out);; addOutput(&d_b_out);; addOutput(&d_c_out);; }. void update(); {; // do something that's generic for any of the data fields. Called AFTER the data callbacks; }. private:; void increment(sofa::core::objectmodel::BaseData* data); {; d_a.setValue(d_a.getValue() + 1);; }; void decrement(sofa::core::objectmodel::BaseData* data); {; d_b.setValue(d_b.getValue() - 1);; }; };; ```. And here's what happens in the base class:. - The SOFAOR_CALLBACK_SYSTEM is a macro that creates a callback functor:; ```; class CallbackFunctor; {; public:; virtual void call(sofa::core::objectmodel::BaseData* o) = 0;; };. #define SOFAOR_CALLBACK_SYSTEM(T) \; typedef T SOFAOR_CLASS; \; class Callback : public sofaor::common::CallbackFunctor \; { \; typedef void (SOFAOR_CLASS::*Func)(sofa::core::objectmodel::BaseData * o); \; \; SOFAOR_CLASS* m_obj; \; Func m_func; \; \; public: \; Callback(SOFAOR_CLASS* _this, Func f) : m_obj(_this), m_func(f) {} \; void call(sofa::core::objectmodel::BaseData* data = 0) \; { \; (m_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816:613,simpl,simple,613,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/597#issuecomment-367473816,4,['simpl'],['simple']
Usability,"Hey @alxbilger,. I'll describe here the different steps of the solving process for a dynamic solver. Hopefully this could be useful at some point. I have described this further in the documentation of Caribou's backward Euler solver [here](https://caribou.jnbrunet.com/classSofaCaribou_1_1ode_1_1BackwardEulerODESolver.html). The last two equations are the one that will be fully assembled, given any solver other than the SOFA's [un-preconditioned] conjugate gradient (this one doesn't assemble any matrices). We can simplify them for the case of only one Newton iteration, which is the same as the SOFA's EulerImplicit component:. ```; [(1+h r_m)M + hB + h(h+r_k)K] da = [r_mM + B + r_k K] v + [F - T]; (1) (2) (3); ```; where `h = dt`, `F` is the internal force vector computed by the elastic forcefields, and `T` is the external force vector computed by pressure fields, gravitational fields, collisions, etc. Here is what happens during the solve:. (1) A = [(1+h r_m)M + hB + h(h+r_k)K]. Building step:; Here we go down on the current context sub-graph and call :; 1. `ff->addKToMatrix(&A)` and `f->addBToMatrix(&A)` for every force field ""ff"" found.; 2. `pc->applyConstraint(&A)` for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:518,simpl,simplify,518,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263,2,['simpl'],['simplify']
Usability,"Hey @epernod ,. Look at both methods, they are exactly the same. In #744 , we are talking about how such methods should not be used, which I agree completely. But here, `getMeshTopologyLink` is not giving us an answer to this, it is simply an alias to `getMeshTopology`, which is quite confusing as we can find both of them in the source code, and it seems they are used for the same exact reason, find the first mesh topology in the current context (which is probably wrong since we can have more than one in the context).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605882145:233,simpl,simply,233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605882145,2,['simpl'],['simply']
Usability,"Hey @epernod . Yeah sorry, I'll give a bit more details. The force vector (built from addForce) should be the same (or very close), either you are using a lumped mass matrix or a (full) mass matrix. This was the case before, but isn't anymore. Here a quick unittest that could help:. ```c++; using sofa::helper::system::PluginManager ;; using namespace sofa::simulation;; using namespace sofa::simpleapi;. TEST(MeshMatrixMass, addForce) {; using namespace sofa::core::objectmodel;; setSimulation(new sofa::simulation::graph::DAGSimulation());. // Create the scene; auto root = getSimulation()->createNewNode(""root"");; createObject(root, ""RequiredPlugin"", {{""pluginName"", ""SofaBoundaryCondition SofaEngine SofaTopologyMapping""}});; createObject(root, ""RegularGridTopology"", {{""name"", ""grid""}, {""min"", ""-7.5 -7.5 0""}, {""max"", ""7.5 7.5 80""}, {""n"", ""3 3 9""}});; auto mo = dynamic_cast<sofa::component::container::MechanicalObject<sofa::defaulttype::Vec3Types> *>(; createObject(root, ""MechanicalObject"", {{""name"", ""mo""}, {""src"", ""@grid""}}).get(); );; createObject(root, ""TetrahedronSetTopologyContainer"", {{""name"", ""topology""}});; createObject(root, ""TetrahedronSetTopologyModifier"");; createObject(root, ""TetrahedronSetGeometryAlgorithms"");; createObject(root, ""Hexa2TetraTopologicalMapping"", {{""input"", ""@grid""}, {""output"", ""@topology""}});; auto sofa_mass = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""false""}}).get(); );; auto sofa_mass_diagonal = dynamic_cast<sofa::component::mass::MeshMatrixMass<sofa::defaulttype::Vec3Types, sofa::defaulttype::Vec3Types::Real> *> (; createObject(root, ""MeshMatrixMass"", {{""name"", ""sofa_mass_diagonal""}, {""topology"", ""@topology""}, {""massDensity"", ""2""}, {""lumping"", ""true""}}).get(); ); ; getSimulation()->init(root.get());. // Get residual vectors; DataVecDeriv d_",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585:394,simpl,simpleapi,394,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2301#issuecomment-901856585,2,['simpl'],['simpleapi']
Usability,"Hey @hugtalbot , the double flag was on purpose actually.. :D; The PR is clearly WIP (NOT to be merged) but I wanted it to be discussed today at the SOFA meeting",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1225#issuecomment-559400580:73,clear,clearly,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1225#issuecomment-559400580,2,['clear'],['clearly']
Usability,"Hey @jangirrishabh ,. You can already clone [this branch](https://github.com/jnbrunet/sofa/tree/sofa_python_without_executable). Once compiled, you will find the file libSofaPython.so in your **sofa_build_directory**/lib folder. Simply add this folder's path to your python sys path, and finally import the lib to your python script with `from libSofaPython import Sofa`. If you are not on Linux, you will have to manually copy the library name to the same file name but with the "".so"" extension (ex: libSofaPython.dylib -> libSofaPython.so). Also, I've stop the development of this feature since @damienmarchal is working on a newer python plugin that will support this feature much better than what I've done here. You can follow the development [here](https://github.com/sofa-framework/sofa/pull/771).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492#issuecomment-433831876:229,Simpl,Simply,229,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492#issuecomment-433831876,1,['Simpl'],['Simply']
Usability,"Hey @m4n4n,. Thanks for your updated PR!. Did you check this remark from @tgaugry on your previous PR?; > I kinda see what you went through. The argument parser isn't that intuitive TBO.; > ; > I recently had to do a similar task, so if you still want the ""infinite"" flag, you can check this [line](https://github.com/tgaugry/sofa/commit/326f4f4c8fea61783e40225cb4abac648e569922#diff-5904f9a1380b53f6de2fdc644b6b1a48R112) and the `parseSkipOption` function in the same file. ; > Maybe this would solve your problem ?. It would indeed be better to not allow a `-1` value to the `n` option but instead to create a new option like `-infinite`. It doesn't have to be a value of the `n` option ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/613#issuecomment-375686179:172,intuit,intuitive,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/613#issuecomment-375686179,2,['intuit'],['intuitive']
Usability,"Hey @marques-bruno !. I think this will help us a lot to add robustness to our components. With this PR, do you see any reason why one would use `BaseLink`s in his component instead of a `BaseDDGLink`s?. Also, maybe instead of have a new `InitDDGLink` function in BaseClass, we could simply overload the `initLink` with; `initLink(BaseDDGLink* owner, std::string name, std::string help, std::string group = """")` ?. Thanks !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561074421:284,simpl,simply,284,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226#issuecomment-561074421,2,['simpl'],['simply']
Usability,"Hey @nhnhan92 ; Thank you so much for your patience and your efforts regarding the headers. It is great to have homogeneous headers for the project, especially for people to use SOFA under one single LGPL license. To my best knowledge, it is not really possible to have ""two versions"" of the code in SOFA and a plugin of yours. But here is what I would recommend: once this PR is merged, create a specific branch in your fork where you can implement / test new evolutions. Each time you think the time is appropriate to contribute it back, you can simply pull-request your branch. This is the power of Git!. Finally, regarding my remark about the test, I was thinkg about a C++ test (that we run on the CI, you can have a look to the C++ files _\*\*\*\_test.cpp_. In this test, it would be ideal to have a numerical validation, assessing that the shell model is following the theoretical behavior (e.g. using method of manufactured solutions (MMS)); See: https://link.springer.com/article/10.1007/s00366-017-0572-4. Let us know what you think about it. We can make it step by step!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204:548,simpl,simply,548,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-786281204,2,['simpl'],['simply']
Usability,"Hey guys,. Sorry for the delay. This is a draft PR so that people can start reviewing/testing this feature if they want. There is still some things missing before merging. ### Needs to be addressed before merging. - MacOS and Windows compatibility: python import command only tries to load .so extension, so the cmake of the plugin should generate both SofaPython.dylib (.dll) and SofaPython.so for it to work.; - Handling the case of python script loading a python scene (the current GIL handling implementation will prevent the main python script to get back the interpreter after a python scene runs). ### What this PR brings. Right now, in order to use the SofaPython plugin, you need to create a python scene and run it through a C++ executable (such as runSofa). What I'm proposing here is to simply load the Sofa plugin inside a python script, that's it. A python script could then look like : . ```#!/usr/bin/python2.7; from libSofaPython import Sofa; import argparse. # Parse the arguments; parser = argparse.ArgumentParser(); parser.add_argument(""-n"", ""--number_of_steps"", type=int, help=""Number of steps until the final forces are reach"", default=10); o = parser.parse_args(). sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim); root = Sofa.createNode(""root""). # ...; # some code that creates the scene tree; # ... root.init(). for i in range(number_of_steps):; root.simulationStep(dt); updateConvergencePlot(root). analysis = complexCalculsOnMatrices(root); saveResults(root, analysis); ```. You could even make your own runSofa.py that launches the runSofa GUI (a more complete python runSofa script can be found in an example file provided by this PR) :. ```#!/usr/bin/python2.7. from libSofaPython import Sofa. sim = Sofa.createSimulation(""DAG""); Sofa.setSimulation(sim). root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(). sofa_prefix = ""/home/jnbrunet/sources/sofa/build""; Sofa.GUIManager.setSofaPrefix(sofa_prefix); Sofa.GUIManager.setConfigDirectoryPath(sofa",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/572:799,simpl,simply,799,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/572,1,['simpl'],['simply']
Usability,"Hey,. I am very new in sofa, and I am looking for a simple solution for the following :) :; I would like to simulate the cutting through of a 2-d mesh (surface) with a sharp tool.; My goal is to use this simulation to test the cutting of a soft tissue with a robot. For two reasons, I would not to use the cutting Plugin: I need it for a research project for which I do not have financial budget to buy the plugin (maybe in the future, I will). The second reason that I would like to keep the simulation very simple and operate with a low number of parameters. My question is: which examples should I take a look at? Is there anybody, how implemented such a scenario (maybe also with SofaPython3)?. Thank you very much in advance!",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4071:52,simpl,simple,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4071,2,['simpl'],['simple']
Usability,"Heyy guys,. I am doing a project targeting to simulate a needle is inserted into the eyeball and also then retinal. The target would be that in a simulation environment, the needle is controlled by haptic devices to approach the eyeballs. (This part is already finished [here](https://github.com/sofa-framework/sofa/issues/2786)) And then the needle would **penetrate the outer surface** of the eyeball and then continue approaching the retinal. Eventually, the needle is **inserted into a blood vessel** in the retina. And the eyeball and blood vessel should be deformable during the collision and insertion process. I have learned some tutorials on SOFA, the dentist-surgery simulation included. And I guess the difficult point may be the insertion process right? From one [post](https://www.sofa-framework.org/community/forum/topic/needle-insertion-into-soft-tissue/) in forum, I found the plugin [Cosserat plugin](https://github.com/SofaDefrost/plugin.Cosserat) is mentioned. But after reading its description I think it is designed to handle with deformation of needles. While in my scenario the needle does not need to be deformable. So I am a bit confused. **What could be done** to achieve such a scenario? Or in which sequence? Maybe is there any other tutorial that I could learn from?. Thanks for all your guys helping me out. Jingsong",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2806:625,learn,learned,625,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2806,2,['learn'],"['learn', 'learned']"
Usability,Hi ! This is of interest. But it would gain in usability if it was also generalized for triangles. Adding barycentric coords of size 2 limits its use to edges and thus cannot be hard coded in the general class. Have you done something similar for your cutting simulations @epernod ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1754590641:47,usab,usability,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4226#issuecomment-1754590641,2,['usab'],['usability']
Usability,"Hi @ChristianDuriez, @fjourdes, @EulalieCoevoet, . It would be nice to have feedback on this possible issue because this is related to your PR. If it is not an issue we can close it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/749#issuecomment-488587368:76,feedback,feedback,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/749#issuecomment-488587368,2,['feedback'],['feedback']
Usability,"Hi @EulalieCoevoet @ChristianDuriez ; Good to see you two super active and responsive on GitHub!! The SOFA GitHub is on :fire: . Just FYI pull-requests without a flag ""fast-merge"" are supposed to be let open 7 days for people to see it and review it.; But when @ChristianDuriez agrees, I guess we do as well :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1813#issuecomment-778080835:75,responsiv,responsive,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1813#issuecomment-778080835,2,['responsiv'],['responsive']
Usability,"Hi @EulalieCoevoet, @hugtalbot, @bakpaul . We discussed this PR today and agree this is nice work to merge... but it was not clear which part of the discussion still hold or not. Can you make a short summary and flag discussion as resolved.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3680#issuecomment-1479115587:125,clear,clear,125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3680#issuecomment-1479115587,2,['clear'],['clear']
Usability,"Hi @Gabriele111 ,; There is also a slightly more verbose guide on https://scheiklp.github.io/sofa_env/setting_up_sofa.html",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1750395312:57,guid,guide,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4223#issuecomment-1750395312,2,['guid'],['guide']
Usability,"Hi @Neustradamus,; Shipping Python with SOFA binaries is not a priority for now but I will definitely improve the installation instructions to make it very clear that users have to set their Python env by themselves and how to do it.; But actually I may have closed this one too quickly, the solution you proposed should be implemented. Let's re-open and put a more generic title. No promise on when I will tackle this though.; Do not hesitate to help in any way :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/879#issuecomment-486572133:156,clear,clear,156,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/879#issuecomment-486572133,2,['clear'],['clear']
Usability,"Hi @NouraHz,; Thank you for your work!. Please note that there are some [guidelines to follow](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) concerning the commit messages in SOFA. We also prefer when a pull-request comes [from a specific branch](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#reminder---how-to-pull-request-from-github-documentation) (not from a master branch) because it is easier to edit (all reviewers have write access). Therefore, could you please create a branch in your fork containing these commits and start a new pull-request? I will then take care of the messages.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464:73,guid,guidelines,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/287#issuecomment-306471464,3,"['GUID', 'guid']","['GUIDELINES', 'guidelines']"
Usability,"Hi @WilkGardariki,; Thanks for this fix. Let's start the [ci-build]. ; About your question, I guess the simpler is the better. There are other plugins with a scenes folder (CGal, Geomagic).; I am also interested in a _examples vs scenes_ discussion. I personally prefer _scenes_ as I find it more accurate.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188:104,simpl,simpler,104,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-307734188,2,['simpl'],['simpler']
Usability,"Hi @alxbilger . Thanks for the PR and requesting a review. The existing code makes the assumption we only want Vec3 and Rigid3, the PR builds on that assumption to make the implementation cleaner and clearer. The changes dones are relevant and can probably merged as-is. . Nevetheless the PR makes the underlying assumption that we only want Vec3Type and Rigid3Type is questionnable in several ways and is also connected to several of Sofa's code architecture issues that are worht discussing. 1) Do we want to support 1, 2,4, 6d constraint ? ; If this is the case then the current non specialized implementation need to be check it actually compiles and do the expected thing. If this is not the case we should consider fixing that.; But if handling 1,2,4, 6d is not possible nor a desirable property the we should consider making code extension through in-heritance and subclassing instead of templatization. . 2) Asymetrical implementation regarding the floating point precision: ; The current implemented allows users to add extra instanciation for Vec3 (f,d) but do not allow such a thing for Rigid3f. This asymetry in implementation is weird to me as I tend to think that if there is functionnal equivalence regarding the templated data (i.e that one data type is in no way special against the other => Vec3 is i no way ""better"" compared to Rigid3) then this functionnal equivalence results in a code base that exhibit symmetrical implementation where the Vec3 and Rigid3 are treated the same. This is not the case as one is specialized in .cpp while the other is not specialized and is implemented in the .inl. . 3) Shouldn't we remove the ""call-super"" ? ; The code and PR makes use of what we call the ""call super""design patern in which an specialization or an in-herited class must call its parent/general implementation to behave correctly. I think the PR contains a variation for ""template"" of this pattern with the unspecializedInit(). In most of the case I noticed that the ""call super"" w",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614:200,clear,clearer,200,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1187087614,2,['clear'],['clearer']
Usability,"Hi @alxbilger @courtecuisse . We understand what this function was used for in BaseFF. However, the API for topological changes introduced by @epernod more than a year ago now uses callbacks. Such callbacks appear to me like the appropriate way to implement an optimized update of the local stiffness (only on the updated elements). This PR proposed to remove a function, which had no implementation in the core. No feature in the code base, so it was polluting the code base and making it harder for new developers to read the API. @alxbilger had explicitly asked for feedback, and the above discussion led to the confirmation of this deletion.; However, you make a point: SOFA should indeed include examples (scenes and code) of 3D cutting and such contributions are most expected. Such PRs and topics are (and were in this case) discussed weekly at the [SOFA dev meeting](https://sympa.inria.fr/sympa/subscribe/sofa-dev). . Two solutions I see: ; - pulled-request a revert of the PR introducing the feature in the core of SOFA; - use the new API and updates existing FF in SOFA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643:569,feedback,feedback,569,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244#issuecomment-1171247643,2,['feedback'],['feedback']
Usability,"Hi @coolteemf . Thanks for your PR. The change of name for ""topology"" is legitimate and unify this component with the convention used in other component. You also did great by using the parse method to provide user feedback. . In Refine2mesh you commented a lot of code, could you explain a bit ? ; Because the general coding guidelines is that either the code is broken/invalid/deprecated and should be really removed or refactored or it is valid then it should be keept.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891:215,feedback,feedback,215,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694623891,4,"['feedback', 'guid']","['feedback', 'guidelines']"
Usability,"Hi @damienmarchal ,; Thanks for your reply!; Indeed, that is what I would like to do... I didn't know I could call parse() per component, instead of per data.. The solution is much simpler than I thought.. sorry!; I close the topic",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322704865:181,simpl,simpler,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322704865,2,['simpl'],['simpler']
Usability,"Hi @damienmarchal . Actually, it was more a linking/DLL problem than a compilation problem. (at least for OS X); GuiDataRepository is used in runSofa:. `GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources"").c_str()) ;`. runSofa knows the symbol as the header is included ; but if you dont compile SofaGuiQt, the symbol wont be present when the linking occurs (with SofaGuiMain which is supposed to load SofaGuiQt if present). Anyway, for now I was considering GuiDataRepository as a ""global"" repository for all GUIs. And making it into SofaGuiCommon seems to do the trick (at least in my point of view). But your solution with the SharedUIResources is more elegant indeed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368865927:113,GuiD,GuiDataRepository,113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368865927,3,['GuiD'],['GuiDataRepository']
Usability,"Hi @damienmarchal ; I closed this PR because I think this is the wrong way of doing binary data bindings..; First of all, using binary data serialization for special data types bindings forces the user to manually add deserialization in their python scripts, which is not good, and a source of error... I looked at the way the plugin Image made their ImageData bindings, and I will go for this approach for my datatypes. As for actual byte arrays bindings, that could still be an interesting feature, but what I did wouldn't be the proper way of binding byte arrays: for serialization to python, the size is known thanks to the std::string container, so it is possible to serialize to python the way I did in this pr. But desserialization to c++ would not work out, since there would be no way to know the size of the string to retrieve. If necessary, instead, a new TypeInfo could maybe be added to the interface of AbstractTypeInfo and VirtualTypeInfo, that would provide information about the byte array size, so that desserialization could be implemented. This explanation might not be very clear, I apologise in advance =) Maybe we can talk about this on Wednesday at the sofa meeting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780:1095,clear,clear,1095,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/416#issuecomment-331833780,2,['clear'],['clear']
Usability,"Hi @ewpostek . Thank you for getting involved in the SOFA community!; Unfortunately, this pull request is not well formatted. It is a merge of our master on our v16.08 and does not contain any commit from you. ; I think that what you wanted to do was to propose a change on our master branch. I invite you to **read [our CONTRIBUTING guide](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md)** and create a new pull request when you are ready.; If you have questions, do not hesitate to reply here. For now, I close this one (discussion is still possible). Cheers,; Guillaume.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/182#issuecomment-280387227:334,guid,guide,334,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/182#issuecomment-280387227,2,['guid'],['guide']
Usability,"Hi @fredroy , @guparan , @hugtalbot . I got several feedback saying that the fix suggested as advice is not clear ; (i.e people don't understand it) and worse that add a bbox at the root node is not working.; Can someone give it a try.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/524#issuecomment-358045787:52,feedback,feedback,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/524#issuecomment-358045787,4,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"Hi @fredroy,. I fully support removing the dependency to SceneCreator. Thanks for the effort. . Small comment: ; I think that using simpleapi is a better option for scene creation than using the raw c++one:; - it reduce the need for c++ includes (so the dependency graph (aka ""the giant spaggheti bowl"") pressure). ; - it reduce the compilation time,; - in theory simple and consistant API aligned with the python one (but It haven't been updated so it match with SofaPython3... but doing such a thing is worth the effort).; ; ; EDIT: I just try how would look a modernize simpleapi (https://godbolt.org/z/9EW9dbnvn)... and think I'm going to like doing things like that (thanks to c++ std::any):; ```cpp; mo = createObject(""MechanicalObject"",; {{""name"", std::string{""myMo""}}, ; {""position"", {{1,2,3},{4,5,6}}},; {""enable"", true}});; node.addObject(mo);; ```; The syntax is nice and there is no more this ugly data to string to data creation using ""BaseObjectDescription"" and its parse method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882:132,simpl,simpleapi,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3955#issuecomment-1592565882,6,['simpl'],"['simple', 'simpleapi']"
Usability,Hi @fredroy. Here it is:. [INFO] [runSofa] PluginRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/plugins;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/collections;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release; [INFO] [runSofa] DataRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/share;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/examples;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build; [INFO] [runSofa] GuiDataRepository paths = C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/applications/projects/runSofa/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/src/Sofa/GUI/Qt/src/sofa/gui/qt/resources;C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/config; [INFO] [BaseGUI] Created directory: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/screenshots; [INFO] [GUIManager] Registered batch as a GUI.; [INFO] [runSofa] Loading automatically plugin list in C:\Users\gfurn\anaconda3\envs\sofa_source\sofa\build\bin\Release/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Forward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.Backward.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.ODESolver.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.Mesh.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_source/sofa/build/bin/Release/Sofa.Component.IO.dll; [INFO] [PluginManager] Loaded plugin: C:/Users/gfurn/anaconda3/envs/sofa_sourc,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650:598,GuiD,GuiDataRepository,598,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4252#issuecomment-1792505650,1,['GuiD'],['GuiDataRepository']
Usability,"Hi @hdeling,; Could you give us more precisions regarding the need to change from enums to strings for the integration methods?. **If** the goal is to simplify the conversion from the string (passed in XML / Python scenes) to the C++ enums, wouldn't it be best to take advangate of the OptionsGroup datatype already present in SOFA?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581:151,simpl,simplify,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/936#issuecomment-465519581,2,['simpl'],['simplify']
Usability,"Hi @hugtalbot,. Thank you for your response. I've reviewed the CMakeLists.txt file in the SofaTearing plugin and noticed that the first two lines are:. find_package(SofaFramework REQUIRED); find_package(SofaGui REQUIRED). However, I couldn't find SofaFramework and SofaGui mentioned in the SOFA-NG transition list you provided. It's possible that I've misunderstood the process for integrating a v21.06 plugin with SOFA v23.06. Could you please clarify this for me or offer further guidance?. Thank you.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009:482,guid,guidance,482,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4461#issuecomment-1919100009,2,['guid'],['guidance']
Usability,"Hi @hugtalbot. In diagonalmass.cpp can you confirm that the following are bugs to fix: . The specialization for rigid3f ::init() & rigid3d ::init() are totally different. Seems to me they shouldn't. You said that ""totalMass parameter is re-computed in the un-specialized implementation of the reinit function sounds ok to me, but indeed, the specialization for rigid/vec should forward to this implementation"". ; I have the impression that the forwarding to the implementation is not missing in the specialized(rigid3) version. About the last point of your answer, sorry for not being very clear with ""not tagged"", I was in fact referring to the non usage of the readOnly flag.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/36#issuecomment-257843781:590,clear,clear,590,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36#issuecomment-257843781,2,['clear'],['clear']
Usability,"Hi @lagarkane . Maybe I have not clearly understood what you want to achieve but what about something like the following:; ```cpp; void YourObject::parse( BaseObjectDescription* arg ); {; /// Initialize the possible list of options by parsing ""manually"" the list:; if (arg->getAttribute(""availableOptions"")){; /// vectorFromString is not existing...but this is just to give you the idea ; OptionGroup options(vectorFromString( arg->getAttribute(""availableOptions"") ))) ; ; d_myOptionGroup.setValue(options) ; . /// don't remove the availableOptions so that it is parsed as ""usual"" ; /// and it will be correctly saved. ; } ; ; /// Call the normal parse function. ; Inherit1::parse(arg) ; ; }",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991:33,clear,clearly,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363#issuecomment-322543991,2,['clear'],['clearly']
Usability,"Hi @m4n4n . Thank you for considering this issue and sorry for my low responsiveness, I was away from the office for some days. Indeed, the problem disappeared since it was due to another issue : the PR #521 introduced a bug, fixed since the #556 ; This issue being linked to this issue should now be closed. Do not hesitate to consider any other issue ! :+1: . Best,",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/571#issuecomment-372656292:70,responsiv,responsiveness,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/571#issuecomment-372656292,2,['responsiv'],['responsiveness']
Usability,"Hi @maddin200 ; Thanks for the notice, I will test it within the week. But it clearly appears uninitialized.; I put here the [link to ImageTypes.h](https://github.com/sofa-framework/sofa/blob/d1434b2eaaf2b8ef516a428544f9c0d65ed3d4df/applications/plugins/image/ImageTypes.h#L303)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267:78,clear,clearly,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1133#issuecomment-526942267,2,['clear'],['clearly']
Usability,"Hi @matthieu-nesme . Thanks for your feedback, I really did my best on it to avoid as much as possible trouble. I suggest to cut this PR in several part (haha) to remove the Flexible/Compliant files from the changes, this woud make the move much smooth. . This will give you time to point out specifically the most problematic points in which you think that the remplacement will not do the work so that I can propose solutions to be closer to the ""semantic you want"". . I looked into the Flexible/Compliant and it seems to me that only a dozen of replacement (out of hundreds) are not equivalent to the old code. . If you take time pointing me which one are causing you troubles I will gladely help in how fixing them to use the msg_api AND and preserving the existing behavior. To convince you that this is worth the effort I took examples from Flexible/Compliant to illustrate the benefit of the changes. ; ==== ====; ```cpp; - if(this->f_printLog.getValue()==true); - std::cout << SOFA_CLASS_METHOD << std::endl;; + dmsg_info() << SOFA_CLASS_METHOD ;; ```; - Is functionnaly equivalent to the old code (if the application have installed an handler routing the message to std::cout); - It will print message in a totally consistant way with other sofa componant (which very important for users); - It is shorter to write (very important for the developer :)), ; - It benefit from the message dispatcher/handler (so it can be logger or routed or sended or whatever GUI in the end user application); - All developpers immediately know that the message is not for the end user of Sofa but for a developers. Consequently the message can be very drafty. It can also be remove by setting SOFA_DEVTOOLS to false and thus it should have a zero cost in a release . A second example: ; ```cpp; - if(this->f_printLog.getValue()) if(pos.size()) ; - std::cout<<""TopologyGaussPointSampler: ""<< pos.size() <<"" generated samples""<<std::endl;; +msg_info_when(pos.size()!=0) << "" topologyGaussPointSampler: ""<< pos.s",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960:37,feedback,feedback,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-285637960,2,['feedback'],['feedback']
Usability,"Hi @olivier-goury ; The info is in the sofa-dev meeting report but has not been copied here.; --> wip, use clear() instead of removeAt(0) on l_forceField link. @guparan will work on it, no worries",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/772#issuecomment-424997626:107,clear,clear,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-424997626,2,['clear'],['clear']
Usability,Hi @sergeiNikolaev . Respecting the existing gui rendering is not crucial in itself..but we should try to respect standard guidelines for GUIs. On that aspect it is more common to have QLabel & checkbox/textfield on the same line otherwise this look a bit weird and consume a lot of screen space for nothing. . EDIT: But if this is too much work I think we can live with that as runSofa should die :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324314176:123,guid,guidelines,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324314176,2,['guid'],['guidelines']
Usability,"Hi @sergeiNikolaev ; Sorry for the latency on this topic, tests can be made so that we create a simple scene in c++ imposing rest shape and an imposed displacement. Thus, the resulting force should be analytically defined.; By the way do you have any latex file for the polynomial equations?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261:96,simpl,simple,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1342#issuecomment-643111261,2,['simpl'],['simple']
Usability,"Hi @sofa-framework/reviewers,. Here are some news for September. ## Plugin vs Classic library; I removed the config/Sofa.*.cpp file from all modules that should not be using the PluginManager API.; This is necessary to clearly distinguish what is a Plugin (= bunch of Components that are loaded on user demand with a RequiredPlugin) and what is not (= core or misc library loaded automatically). ## Sofa.Helper.Types; I started the refactoring for Sofa.Helper.Types but it implies some sofa2ng modifications.; Since the sources come from 2 different places (SofaKernel/framework/sofa/helper and SofaKernel/framework/sofa/helper/types), I decided to use the recipe for SofaKernel/framework/sofa/helper only and then to refactor SofaKernel/framework/sofa/helper/types manually.; The result will be pull-requested soon. ## October objectives; - Finish refactoring Sofa.Helper.Types; - Open PR for Sofa.Helper.Types; - Start another Sofa.Helper.* refactoring. ---------------------------; As always, do not hesitate to comment. :wink:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491:219,clear,clearly,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-428105491,2,['clear'],['clearly']
Usability,"Hi @sofa-framework/reviewers,. Here is a follow up of NG project for April. ; The project is huge and still requires a lot of iterations to get the best refactoring process but we are going in the right direction :+1: . ## Discussions; It was decided to push all NG changes to [a specific NG branch](https://github.com/sofa-framework/sofa/tree/ng) on sofa-framework.; Still, all the developments will go through the PR process. Reminder: your feedback is VERY important, we need it to adapt our work and minimize future rollbacks. **Do not hesitate to put any comment in the pull-requests.**. ## Refactoring and adapting SPM for Sofa.Component.Utils. SPM is the set of scripts we use to make our work easily reproducible. You can check it out [here](https://github.com/guparan/sofa2ng). This work made me realize that it will be very hard, if not impossible, to anticipate every subtle change needed by the refactoring.; - Do we want SPM to be an all inclusive script to refactor completely SOFA? ; every refactoring is unique and needs to change SPM ; -> namespace handling ; -> includes refactoring; - Or should we prefer it to be an easy-to-use script to **bootstrap** any refactoring? ; -> very specific changes will have to be done by hand. I propose to go for solution 2 and to provide a git patch covering the work done after SPM job (fixing includes, fixing namespaces, ...). The progress of this task is **85%** since I now have to create the patch and to provide everything in the PR. ## Moving on with Sofa.Helper.Bvh; Following [the latest iteration on NG architecture](https://annuel2.framapad.org/p/sofang-v3) and Damien's first draft in his [cleanTheMessStep1](https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng) branch, I started refactoring SofaFramework with Sofa.Helper.Bvh. This task needed me to heavily change/adapt SPM. It contributed to make me prefer solution 2 above. The progress of this task is **60%**. TODO:; - update the recipe with latest SPM changes (namesp",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811:443,feedback,feedback,443,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-385973811,2,['feedback'],['feedback']
Usability,"Hi @sofa-framework/reviewers,. May was quite quiet for our beloved NG project.; Don't worry, I still have some news for you :wink:. ## Discussions. Pluginization works are possible but they have to be done in-place (not moving the files). This will permit to simplify the dependencies between SOFA modules. . About the NG branch, to avoid big divergence, we propose to merge it with master as soon as some big step is done. The next big step is SofaFramework coverage. ## Bootstrapping scripts. Previously named SPM, the [bootstrapping scripts](https://github.com/guparan/sofa2ng) are now able to handle test folders. ## Process. Here is the process to cover one module:; 1. Create/update a recipe based on an existing one.; 2. Run the bootstrapping scripts with the recipe.; 3. Inspect the output; 4. If something is wrong or missing, edit the bootstrapping scripts and *goto 1*; 5. Do specific changes by hand like namespace aliases; 6. Create a patch of all changes made by hand; 7. Open a pull-request providing the recipe and the patch (previously pushed to sofa2ng). This process will be rewritten in Sofa.Helper.Bvh pull-request. ## Sofa.Component.Utils. The first NG pull-request has been merged to the NG branch. There is still some updates to do though, because the bootstrapping scripts changed. ## Sofa.Helper.Bvh. The recipe has been updated. ; This work will be the base of further contributions. I will detail all the bootstrapping + patching process in the pull-request. ## Next steps; - Pluginize without moving files: use plugins mechanism to work on modules dependencies ; Start with the less dependent ones and progress towards SOFA core.; Objective: simplify dependencies between modules.; - Validate Damien's architecture proposal for SofaFramework: https://github.com/SofaDefrost/sofa/tree/cleanTheMessStep1/ng/kernel/Sofa; Particularly about Sofa.Helper.Types; - Create Sofa.Helper.Bvh pull-request; Will give a clear example and all the process to refactor parts of SofaFramew",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223:259,simpl,simplify,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/543#issuecomment-393927223,2,['simpl'],['simplify']
Usability,"Hi @thomas-lemaire,. About the ""\n"" ... why would it breaks windows console printing ? Windows and linux does not have the same ""\n"" but a windows app emits the ""\n"" the windows system understand. About using ""\n"" or better std::endl. My target was to supports messages written with a simple markdown syntax for which the ""\n"" is not an explicit line break, it is "" \n"" (double-space before the \n) . So i replaced std::endl/sendl by this "" \n"" ; But I found that ugly and hard to read so I finally made 'msgendl' that contains the explicit markdown line break, but I forgot to remove the old manually placed "" \n"" I used all around. . Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). Do you think msgendl is ok ? ; Do you like the msgendl ?. The change on how the messages are printed in runSofa is visible here: ; ![newmessage](https://cloud.githubusercontent.com/assets/12644882/23545144/72df7122-fffa-11e6-8c53-fc9a4415c493.png). The two panels Output/Error are now merged into a single ""Message"" one and the panel now shows in its title the number of messages (in this PR I removed the column with ""suggest a better message). In the Graph view there is also a small alert (green, yellow, red) on top of the icons showing the kind of message an object have. . EDIT: I fixed the "" \n""",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162:285,simpl,simple,285,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-283905162,2,['simpl'],['simple']
Usability,"Hi @untereiner . From my experience you will have more feedback if you provide more information on the PR description to give other some envy to try it. . Given the complexity of the PR here is what people passing by may need:; - what the PR does precisely ? ; - what is the existing state on this topic in Sofa (the title speak about dynamic topology...isn't there dynamic topology in Sofa since year) ? ; - how this PR handle the problem, ; - use CGOGN library... what is this CGOGN library ? ; - argument on why the PR is it useful/mandatory/improvement,; - trying to convince people why they should spend time testing it,; - provide some idea on how invasive the PR will be (non breaking at all, breaking the SofaCore API, breaking existing scenes)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819:55,feedback,feedback,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-402418819,2,['feedback'],['feedback']
Usability,"Hi @vmagno, thank you for your PR!; This should be merged fast.; Could you add a simple description please?; [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/384#issuecomment-327112983:81,simpl,simple,81,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/384#issuecomment-327112983,2,['simpl'],['simple']
Usability,"Hi Damien,. I haven't had much time to devote to this as of late, but here is some quick feedback so far:. - lots of code need modification (like *lots*), deep down the core and you need lots of patience to recompile everything over and over again,; - it makes little sense to optimize data initialization if you don't optimize links as well since they use a similar initialization mechanism,; - the speedups in my test scenes were disappointing, being largely dominated by other code paths (contact detection and response mostly, since this is the main use case as the graph gets dynamically altered at every time step),; - IIRC there was a data/link notification mechanism on insertion that could cause accidental quadratic complexity when used sequentially (I'll try to fix this one soon),; - beware of CollisionGroup managers that was causing huge slowdowns in my case for no visible reason as there was a single group. The takeaway: this is probably premature optimization at this point. I might give it another shot in the next few months as my work may depend on it but until then, don't expect major changes on this front. (edit: typos)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574:89,feedback,feedback,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-270123574,2,['feedback'],['feedback']
Usability,"Hi Damien,. Thanks a lot for your answer!. Regarding the BarycentricMapping, I indeed wasn't sure of which of the input and the output was driving the other (although I knew that the mechanical model was supposed to drive the collision model). It is definitely clear with your explanation. So I understand that there is no bug regarding the behaviour of the BarycentricMapping (as you pointed out), as it is not suppose to work for another input types than Vec3d.; For me, the (very minor) issue would rather be with the error message, as you said in your NB. My apologies for the typo, indeed, I hadn't paid attention...; As for the unexpected behaviour, I haven't tried yet to track down what is happening. As I'm looking to use a reduced topology for my collision model, I might investigate it more in a near future. If so, I'll report here anything I find unsettling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657:261,clear,clear,261,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1014#issuecomment-487582657,2,['clear'],['clear']
Usability,"Hi Didier @dweckmann ; thanks for your feedback! we actually had very recently a discussion about better supporting the latest version of libraries required for SOFA like CMake.; Are you using the master branch? because the TARGET parameter seems to be defined. Whatever, happy to see you back in the game!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513245249:39,feedback,feedback,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1105#issuecomment-513245249,2,['feedback'],['feedback']
Usability,"Hi Erik, . Thanks for the feedback. I reorder the SofaGUI Cmake inclusion order to have it compiling.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460066859:26,feedback,feedback,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/915#issuecomment-460066859,2,['feedback'],['feedback']
Usability,"Hi Erik,. Nice commit. Some (cosmetic) remarks:; - you updated some attributes/data field names but the name you use are not following the sofa guidelines. Data should starts with d_ not m_ (https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md). ; - there are std::cout which should be replaced by the msg_error api ; ; +1 for the examples.; Would be nice to also have a test file validating the behavior.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258:144,guid,guidelines,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133#issuecomment-273165258,3,"['GUID', 'guid']","['GUIDELINES', 'guidelines']"
Usability,"Hi Felix,. Thank you for your PR. ; Let's see if it builds and if people have feedback to give you. [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306476756:78,feedback,feedback,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306476756,2,['feedback'],['feedback']
Usability,"Hi Francois,; thank you for the feedback. Hopefully for the common good, this non-zero default value will disappear!; I did not know the historical explanation of the ForceField/Mass API. On my opinion, no matter how many scenes will be broken: hidden numerical damping is worse than anything else. Finally about making them clearly time dependent, I don't really see the point but whatever, this can be done in a second stage.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855:32,feedback,feedback,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338#issuecomment-316695855,4,"['clear', 'feedback']","['clearly', 'feedback']"
Usability,"Hi Fred, . The splitting seems to perpetuate the spurious dependency from SceneCreator to sofa.testing.tools. ; Maybe it is the time to remove the dependency to SceneCreator and use simpleapi in place so that sofa.testing is cleaned from SceneCreator.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818:182,simpl,simpleapi,182,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2692#issuecomment-1040449818,2,['simpl'],['simpleapi']
Usability,"Hi Fred,. On my side I have implemented the ""warning"" behavior. It is in PR #306 and I would appreciate your feedback (and if you have time, some support to fix the linking problem on windows).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/281#issuecomment-311036684:109,feedback,feedback,109,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/281#issuecomment-311036684,2,['feedback'],['feedback']
Usability,"Hi Fred,. Thank you for your pull-request. ; It looks really nice. . Some user friendly stuff...; - I would be great to have more details in the help string of the added Data. Currently it is more or less duplicating the name; maybe you can say what is it used for in term of rendering and shadowing.; - I have now clear opinion on that but maybe we should also add the default values in the docstring (I found it very annoying for the users to look in the source code to know what the default values are). ; - In the same spirit I think that somewhere VMS should be documented to the user. Maybe in the component helpstring when it is registered ? . I will test that by thursday unless someone else do that before.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195:315,clear,clear,315,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-263723195,2,['clear'],['clear']
Usability,"Hi Hugo, This is a very challenging target. I would probably try something something like:. 1- For release 17.12; - move all the ""not core"" files in plugins. ; - for each ""SofaXX/blahblah.h"" in the old location have this kind of file with:; ```cpp; /// This file is now deprecated and have been moved in the ""SofaXX"" plugin. You need to; /// update your code to #include <SofaConstraint/blabla.h> ; #ifdef SMOOTH_TRANSITION_UNTIL_17_12; #include <applications/plugins/SofaXX/blahblah.h>; #endif; ```; - for each component you really want to deprecate add a hook in the SceneChecker saying ""component xxYYZZ is now deprecated and will be removed in sofa 18.06. Use alternative XX and if there is none please contact us open Issue in our bugtracker with tag 'sofaNG'. "". Then in 18.06...really removes the component and update the SceneChecker hook so that it simply print somehing like ""this component have been removed since sofa 18.06. Alternative component is now XXXX."" . Of course the more automated it will be through script the best it will be.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481:858,simpl,simply,858,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-323710481,2,['simpl'],['simply']
Usability,"Hi I downloaded the windows .exe file to install SOFA, I attempted to go through the tutorials and eventually learned that I have to click show doc browser for the walk throughs. But I get the warning: ""[WARNING] [RealGUI] Doc browser has been disabled because Qt5WebEngine is not available"". During installation I didn't see an option to activate this. I downloaded [qt-unified-windows-x64-online.exe](https://download.qt.io/official_releases/online_installers/qt-unified-windows-x64-online.exe), to no avail. . I saw a similar post, but for someone who build it on linux using cmake. I tried following the steps for that but couldn't complete when I tried to run a command given that did nothing. . I want that when I click show doc browser in SOFA it pops open that little window that I saw in a video tutorial. How do I get this?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/5058:110,learn,learned,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5058,1,['learn'],['learned']
Usability,"Hi Mathieu,. Best wishes for this year. . Daccord is an old repository on gforge storing a lot of experimental feature (UI & modelling) that are pending for integration in sofa. . I fully agree with your suggestion for point first&second; for third:; - what about adding a Data for template & src ? (I really would like to preserve as much as much as possible the original scene because) ; - ""type"" I don't know but it handled specifically in (XML.cpp). I started a new branch for this task so we can work and tests : ; https://github.com/SofaDefrost/sofa/tree/xmlsave. EDIT: I have updated this branch saving is now working (at least the caduceus scene). If some of you have time please give feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246:693,feedback,feedback,693,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-270089246,2,['feedback'],['feedback']
Usability,"Hi Mathieu,. I see what you mean. ; ; The new implementation allows you to select precisely how gtest suceed or fail according to the messages emitted by a component by using either the MessageAsTestFailure or/and ExpectMessage RAII. . To update the old tests with *a minimal amount of effort* to restore the behavior you described. ; I think in each test setup we can simply add something like ; ```cpp; MessageAsTestFailure raii_warning(Message::Warning) ;; MessageAsTestFailure raii_error(Message::Error) ;; ```; I can devote some time to do that.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290:369,simpl,simply,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/211#issuecomment-288386290,2,['simpl'],['simply']
Usability,"Hi Mathieu,. Thank for the feedback. . STLExport & MeshExporter are exporting single object while OBJExporter is exporting a whole scene. ; I didn't change that because it would cause too much refactoring and it seems there is an agreement on that. . In this PR what I did was just to factorize the existing quasi-duplicated functionalities into an unique class. So now the three objects have a consistent behavior regarding the filename & path creation as well as the attributes behavior. . I'm very sorry about the difficulty to review this kind of changes... I think the best approach is not to use the diff which are too complex and instead review the resulting file which are (I hope) good looking. . I also have added tests (+30) to check that things goes fine and help in future refactoring to detect regression. As you said one year ago ...we need more tests :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631:27,feedback,feedback,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-328071631,2,['feedback'],['feedback']
Usability,"Hi Mathieu,. Thank you for the feedback... the GLSL stuff is a mistake... I didn't knew that pull-request was for a branch and not for a specific commit. So i continued to to work in this branch (I will not do the same mistake in the future). . Now to answer your question...the overhead is near zero. ; - The GLSLListener is triggered by the file FileMonitor. ; - FileMonitor is using the event based ""select"" system API and is not actively 'polling' the files. AFAIK this is the most efficient way to monitor files. ; - If your application don't call FileMonitor::update(0) then this cost nothing. Currently only runSofa is calling FileMonitor::update(0) when started with the -i (for interactive) command line option. . So the different scenarios is:; - runSofa -i & changing the file (this cost the reload of the shader); - runSofa -i & not changing the file (this cost calling the select system call) ; - runSofa as usual...this cost nothing. . I hope I answer you question and yet again, thank you for your feedback on this PR. . Now about FileListener... it is part of the FileMonitor API that is already in Sofa. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734:31,feedback,feedback,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/55#issuecomment-261506734,4,['feedback'],['feedback']
Usability,"Hi Maxime,. For 1. ; What about just setting the arguments into sys.argv using PySys_SetArgv(argc, argv) ? . For 2. ; Isn't __ file __ returning the current file... So in a python script controller __ file __ it would not contain the scene filename but the controller's one. But you are totally right that this could solve the initial @chrijopa question in a very simple way.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323698076:364,simpl,simple,364,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323698076,2,['simpl'],['simple']
Usability,"Hi Maxime,. Thanks for the feedback.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-271520439:27,feedback,feedback,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-271520439,2,['feedback'],['feedback']
Usability,"Hi Quentin !; Thanks for the notice !. @untereiner I recall that you recently had a look at the VTKLoader in SOFA. Am I correct?; Did you face these warnings ?. Since the file is well loaded, we would simply need to update the loader to have only Warning (and no error msg) when facing these new metadata.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616:201,simpl,simply,201,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-387752616,2,['simpl'],['simply']
Usability,"Hi Raphael,. Many thank for your pull request. ; The feature sounds appealing and at first sight it looks ok. I have never used this component so if someone can give feedback it would be great. . EDIT: do you mind if I push some cleaning commit on this component in your PR. I would like to add some test cases for this component.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531:166,feedback,feedback,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/394#issuecomment-328134531,2,['feedback'],['feedback']
Usability,"Hi Sergei,; reset in SOFA might not clear with zeros some state values. That could be interesting to dig in the scene to see where does the problem come from. Could you investigate deeper ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/571#issuecomment-360534630:36,clear,clear,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/571#issuecomment-360534630,2,['clear'],['clear']
Usability,"Hi Stéphane, thanks for the feedback, . If we split the existing set of components into sub-sets eg (""stable"", ""fullset"", ""deprecated"") our starting point would be the current sofa with everything in the ""fullset"". Starting from that we can start moving the good enough one in the ""minimal"" or ""stable"" set, the bad ones into the ""deprecated"" set and keep the one we cannot decide into the ""fullset"". . You are totally right that this proposal is not providing any ideas on who will take the decision to move one component into the deprecated set. This is very interesting question but it deserve a whole issue & STC or an autocratic gentle decision :). To me the presented approach is interesting as:; - it is incremental and thus we don't have to wait any decision of a definitive list of components that have to be keep. We can already, small step after small step, moving the ones for which there is a agreement into the right set (and people not using the set will stop being bothered with them). ; - it is bi-directionnal, so people can work in parallel either to move the components into ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functiona",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:28,feedback,feedback,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715,2,['feedback'],['feedback']
Usability,"Hi Thomas,. Glad you made this PR, so thank you. ; ; Some feedback:; - Everything in sofa is a component so the default name of ""DistanceGridComponent"" should be shortened into ""DistanceGrid"" when it is used in the scene. You can do that by overriding the function std::string Base::getClassName() const.; - I would be much better to have the number of samples (the nx,ny,nz) stored at the beginning of the tmg file. ; - I assume that in MeshGenerationFromDG, the DG is for DistanceGrid. As it work with ImplicitShape wouldn't it be better to name it MeshGenerationFromImplicitShape ? ; - There is not tests for the added classes.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815:58,feedback,feedback,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354#issuecomment-319761815,2,['feedback'],['feedback']
Usability,"Hi Thomas,. Many thanks for the feedback. ; I'm a bit confused because as far as I can read, Jeremie suggested to use OBJExporter not MeshObj to export visual things and I didn't changed this behavior. And there is no MeshObjExporter in sofa. Here is the current situation in Sofa: ; In sofa/helper/io:; MeshObj (a reading class, not a saving one) ; MeshStl (a reading class, not a saving one) . SofaExporter:; - MeshExporter (a writing component that focus on tetrahedral mesh forme as: VTKXML, VTK, Gmesh, Netgen, TetGen) All the format are coded in it. ; - OBJExporter (a writing component with a visitor that dump visual scene); - STLExporter ; - VTKExporter . As far as I can say the thee later are duplicating a lot of boiler plate code. The three reason why I created this BaseSimulationExporter was: to factorize theis code. To enforce a consistent behavior for each of them (eg having one component that create the missing ""directory"" while the other does not is too bad from a UX perspective). Finally it also help in writing the python binding because only one binding is needed instead of three. This is also consistent with what exists in SofaLoader where both MeshOBJLoader & MeshVTKLoader inherit from MeshLoader. . My current thinking and target is that we need to have more symetrical implementation between SofaLoader and SofaExporter. ; Eg: ; in SofaExporter: ; - SceneExporter (rename or inherit from BaseSimulationExporter) ; - SceneOBJExporter (the existing OBJExporter inheriting from SceneExporter); - SceneSTLExporter (the existing STLEXporter inheriting from SceneExporter); - ...; - MeshExporter (base class); - MeshTetGenExporter (result from splitting the MeshExporter); - MeshVTKExporter (result from splitting the MeshExporter). I don't have a lot of time to this so I prefer to stay focus on the ""SceneExporter"" (so STL & OBJ ones) and left the MeshExporter untouched for the moment. The rename with Scene* vs Mesh* is to clearly show the component that have a visitor ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236:32,feedback,feedback,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/372#issuecomment-324568236,4,"['UX', 'feedback']","['UX', 'feedback']"
Usability,"Hi all, . I wanted to discuss the default behavior of the friction coefficients in the contact models of the Compliant plugin (FrictionCompliantContact.h and CompliantContact.h). The current behavior seems kind of strange:. 1) the global mu coefficient set in the DefaultContactManager component always overrules friction coefficients defined locally for each collision model. 2) when the global mu is set to exactly 0.0, the local coefficients get activated. negative global mu does funny but not really useful stuff in simulations. 3) When having two mu defined by the two colliding models, currently they just get multiplied. So If both models have mu=0.5, they end up having a contact's mu=0.25! Same with large mu: mu=2.0 (i.e. rubber) -> 4.0. . I believe that especially the latter behavior would catch many users on the wrong foot. So here are some changes I propose:. ad 1) locally defined mu should take precedence over globally defined mu's. Of course, this means breaking the existing behavior and probably triggers many regressions, so this should be considered carefully. ad 2) replace `mu.getValue()?` with `(mu.getValue()>0.) ? ` or `(mu.getValue()>=0.) ?` -> a negative value simply means disabling the global override. . ad 3) use the geometric mean of the friction coefficients: replace ; `this->model1->getContactFriction(0)*this->model2->getContactFriction(0)`; with ; `sqrt(this->model1->getContactFriction(0)*this->model2->getContactFriction(0));`. An alternative could be to use the smaller of the two coefficients, but I'm not sure what's the more sensible behavior.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/81:1192,simpl,simply,1192,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81,1,['simpl'],['simply']
Usability,"Hi all, . It was tested two weeks ago at Defrost, @EulalieCoevoet try our tutorials/tripods and it works like a charm. @TanguyNav found a bug that was reported. To us, it is going in the right direction and we support the merge of this work. . We hope the rest of the community will provide feedback asap.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1469608892:291,feedback,feedback,291,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2777#issuecomment-1469608892,2,['feedback'],['feedback']
Usability,"Hi all, . Just a quick update asked by @hugtalbot on how we handled this issue at Anatoscope. It's been a while so our fork drifted quite a bit since the opening of this issue:. - `Data` are only allowed in `BaseObject` instances (i.e. `Nodes` have no data), which simplified many things; - We removed `initData/initLink` altogether, most constructors are now `(BaseObject* owner, const char* name, const char* doc, const T& value = {})`. A pleasant consequence in c++17 is that you may directly declare datas in the class like this:; ```c++; class Object: public BaseObject {; public:; Data<double> foo = {this, ""foo"", ""a foo that bars"", 1.0};; };; ```; - `BaseData` now maintains shareable information (like name/doc/etc) in a shared object, which can be shared between several data instances. In practice doing so is still very ad-hoc so we don't use it much, but it is possible in case we want to optimize dynamic component creation; - Dependency relations between `DDGNodes` no longer use the `Link` mechanism. ; - In fact component links and `Links` in general are mostly gone, and will be removed in the future as they're yet another dependency graph and we would like *everything* to use the data/engine graph instead; - Our `Data` have at most one input (another data or its owner engine), so we may move the `inputs` handling of `DDGNode` to derived classes to avoid needless allocations for `Data`. It's not done yet though. As you can see, things don't quite look the same, but I think old-timers would still recognize what's going on ;) By the same token I think this issue can be closed, but please don't hesitate if you have any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336:265,simpl,simplified,265,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-1033777336,2,['simpl'],['simplified']
Usability,"Hi all, . Thanks for the PR. . In the past it was consider that draw tools was a rendering abstraction layer to be used for debugging/inspection or GUI helpers. The recommendation was to use drawTools in the Base::visual() overrides. The main ideas was to allow component developpers to have rendering tools without having a dependency to opengl. On its side, OglXXX component in Sofa.GL exists to hold compoennts that, for whatever reason (performance, lack of time), are still implemented using the opengl api. Up to now, the evolution guidelines was something like:; - replace in the complete code base ogl call by drawTools calls into xxx::draw() ; - move every component for which ogl call remains (mostly in xxxx:drawVisual) into the Sofa.GL.XXX. This PR does something else, as it replace opengl calls from Sofa.GL.OglXXX by drawTools's ones. Implementing component rendering using drawTools instead of ogl calls is probably desirable (if there is no performance cost)... but it cannot be in Sofa.GL. . I recommand to create a new component in Sofa.Component.Visual, for the component using drawTools and if needed in Sofa.GL.Component have the ogl version subclassing it (if needed).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481:538,guid,guidelines,538,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1181534481,2,['guid'],['guidelines']
Usability,"Hi all, . Thanks for the discussion. . My current understanding is that removing the whole InitData Mechanisme is:; - possible, ; - desirable (would make the code more clear and maintainable). This mean converting every ; ```c++; myData(initData(&myData, 0.1, ""myData"", ""helpe)) ; /// into ; myData(this, 0.1, ""myData"", ""helpe""); ; ```; About the use of ""this"" in a child constructor. My understanding is that it is considered safe for non virutal methods and attributes from the superclass (https://isocpp.org/wiki/faq/ctors#using-this-in-ctors). I also tried a pure constructor based initialization with g++ and clang++ and got no warnings with -Wall and -pedantic. About the ambiguity case cause by the char* to bool implicit conversion... I would say it would be much easier to fix when the initData machinary will be dropped. . EDIT: One more thing about the bool to specify the parameter... I think that using directly the enum 'named"" value or the setXXXX method to set the parameter is far better than using bool.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877:168,clear,clear,168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3167#issuecomment-1234334877,2,['clear'],['clear']
Usability,"Hi all, any feedback on this PR ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/337#issuecomment-318174397:12,feedback,feedback,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/337#issuecomment-318174397,2,['feedback'],['feedback']
Usability,"Hi all, it appears that PR #521 breaks several scenes. ; I'm fixing that in PR: #548 . In some of the problematic scenes the mechanical object does not have a mass so it was simply fixed by adding one. . For examples/Components/forcefield/TetrahedronDiffusionFEMForceField.scn I'm not sure the zero mass is the cause of the problem. . @hugtalbot any idea ? . Now more fundamentally I'm puzzled by the ; ```; if( fabs(den)<f_smallDenominatorThreshold.getValue() && nb_iter > 1 ); ```. As there is a division by 'den' just after the condition so if den == 0 (which seems to happens in several cases) and first iteration then the scene explode with nan-nan everywhere. . A more robust & user friendly approach should be implemented.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/539#issuecomment-354131222:174,simpl,simply,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/539#issuecomment-354131222,2,['simpl'],['simply']
Usability,"Hi all,. For the next STC we are planning active coding sprint sessions to boost small tasks and have the pleasure to be working togther. . Feel free to propose any task in the comments!. Current task list (last update 2017-09-29):; - Deprecation: https://github.com/sofa-framework/sofa/issues/426; - Pluginization + SceneCreator dependencies (must be done AFTER deprecation): https://github.com/sofa-framework/sofa/issues/427; - `issofa_*` merges: https://github.com/sofa-framework/sofa/issues/428; - Code cleaning; - Doc. TODO List before the sprint:; - [x] finish to add the set management into the CMakeLists.txt (Damien & Bruno Carrez); - [x] make the list of component to deprecate (Fred, Stéphane, Guillaume); - [x] create a simple example of deprecation with the WashingMachineForceField (Damien); - [x] if needed make a list of ""advices"" we could add to the SceneChecker to warn user on how they can improve their scene (the StaticSolver thing) (Stéphane ?); - ~~add an attribute to BaseObjects to attach component quality info ?~~. Feel free to add whatever I mis-understood or forgot. ; ________________________________________; ping @sofa-framework/reviewers",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/413:732,simpl,simple,732,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/413,1,['simpl'],['simple']
Usability,"Hi all,. I have opened a new PR in WIP to handle the cleaning of set & vector. It currently contains an attempt to remove the std namespace ""pollution"" in commit https://github.com/sofa-framework/sofa/pull/278/commits/d3ecab1eaa7f2f29242aacf646910b2eb3ab47dd. Feedback & contribution in #278",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/113#issuecomment-303232819:260,Feedback,Feedback,260,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/113#issuecomment-303232819,1,['Feedback'],['Feedback']
Usability,"Hi all,. I think Eulalie's work is done. . Your feedback & review are welcome because it is a big PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/798#issuecomment-443732934:48,feedback,feedback,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/798#issuecomment-443732934,2,['feedback'],['feedback']
Usability,"Hi all,. One test related to LightManager is failing only on windows eg:; https://github.com/sofa-framework/sofa/commit/6d3e1398363cc617124fd25522193ef20b1b7b1c. The failing scene is rather simple: ; ```xml; <Node name='Root' gravity='0 -9.81 0' time='0' animate='0' >; <Node name='Level 1'>; <MechanicalObject template='Vec3d'/>; <LightManager name='lightmanager'/>; </Node>; </Node>; ```; Any one know why the test on Windows behave differently to to other plateforms ? . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/54:190,simpl,simple,190,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54,1,['simpl'],['simple']
Usability,"Hi all,. We are on our way to make a PR with our PSL plugin to simplify the writing of scene with SOFA.; If you never heard about it you can ; - read the ""in-progress"" documentation: https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/README.md; - have a look at this video introduction:; https://www.youtube.com/watch?v=_lU6hJIXz1g&feature=youtu.be. If you have idea of extension we have a ""pep"" directory with open-suggestion there:; https://github.com/SofaDefrost/sofa/tree/PSL/applications/plugins/PSL/pep. This is a WIP so feedback or contribution is more than welcome. . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/390:63,simpl,simplify,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/390,2,"['feedback', 'simpl']","['feedback', 'simplify']"
Usability,"Hi all,. as earlier, I'm making PR on several 'simple' behavior that I implemented a long time ago but could make user of runSofa happier. Here is one that allows to drag & drop data or scene from the gui into and external text editor to have the data serialized. This feature is very useful if you like editing your scene in runSofa and need to transfer the results into sofa. . As GUI stuff are nicer with image... I will make a small video to show it in use. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/373:47,simpl,simple,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/373,1,['simpl'],['simple']
Usability,Hi all. @EulalieCoevoet @epernod @matthieu-nesme @thomas-lemaire @hugtalbot @guparan @fredroy . I suggest we use this issue for general communication about what is happening on the UX group either on github and/or on gitlab. . Please tell anyone interested to join/. Our general target for the next sofa release (17.06) is to ship a runSofa2 application. ; This means we only have less than 3 month. ; I suggest that in April & first day of May we add the missing features and we keep the last month to test and bug fix the software. . DM.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457:181,UX,UX,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187#issuecomment-291478457,2,['UX'],['UX']
Usability,"Hi everyone!; I'm trying to develop a nodule detection exercise on SOFA v22.12. To do this I made a patch of skin: the behavior model is a box with a tetrahedral internal structure, the collision model is generated by making a topological mapping from those tetrahedra to triangles, and finally the visual model is defined as an identity mapping from the collision model. I want to create a sphere inside with a different stiffness's value so that a surgeon can feel the harder sphere inside the skin. The problem is that, although I feel the haptic feedback of both the skin and the sphere, it is very difficult to perceive the transition from the skin to the sphere, and it is impossible to perceive the size of the sphere. What can I do? Is there a way to manage the interface between two objects with different properties?. Thank you for your report.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4318:550,feedback,feedback,550,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4318,1,['feedback'],['feedback']
Usability,"Hi everyone, Marc here :-). I remember I introduced the `init()` and `cleanup()` functions, so I'll add a few words of explanations. Bear with me, it's actually simpler that the length of my response may suggest. > So unless there is a compelling reason to leave it this way (and I would really like to know it). The trick which consists in using static variables to run dynamic initialization code (or cleanup code, for that matter) is an anti-pattern, for a couple of reasons:. * **determinism**: as @matthieu-nesme mentionned, the order of initialization of objects with static storage duration is undefined across translation units. This is the first reason why I introduced the `init()` functions: to make initialization deterministic and reliable. And this is the same reason why it's better to call those functions explicitely, at the _right_ time: the program will work correctly by design, not by coincidence;. * **readability** (or something like that): calling the initialization function ""manually"" makes programs more readable: you can just start from the `main()` function and understand what code is going to run without actually running the code inside a debugger (or reading the entirety of SOFA's source code);. * **choice** (or whatever): with an explicit call to `init()`, an application writer gets to decide both *whether* and *when* to initialize SOFA. ### Now... In the end, I didn't actually bother to search for any single piece of initialization code in SOFA and move it into the appropriate init() function, so the init() functions are pretty light, but the setup is there. Also, the static-dynamic-initialization trick is used all over the place in SOFA, and what happens in the init() functions is ridiculous compared to all the code that probably runs when SOFA is loaded, so here again it is a drop in the ocean, but, I think, a step in the right direction. ### Anyway... > What I don't understand is why the above code snipped does not simply cleanup() the library in ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946:161,simpl,simpler,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168#issuecomment-280028946,2,['simpl'],['simpler']
Usability,"Hi everyone, sorry for taking so long to further explain my PR. I fully agree with @Camille-K, the referenced paper states it clearly that the matrix should be updated at each time step.; Thanks for merging my PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1060361474:126,clear,clearly,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1060361474,2,['clear'],['clearly']
Usability,"Hi everyone,. I'm working right now on a small improvement that will allow people to directly import SofaPython plugin library (libSofaPython.so) inside their python script without the need for an external application (exemple runSofa). A python script could than looks something like:. ```; # scene.py; from libSofaPython import Sofa. root = Sofa.loadScene(""examples/Demos/caduceus.scn""); root.init(); for i in range(0,2):; ...; root.simulationStep(0.01); # Some data and timing analysis in python here...; ...; Sofa.cleanup(); ```; and could be called simply with; `python scene.py`. You can follow the development on the branch; https://github.com/jnbrunet/sofa/tree/sofa_python_without_executable. For now, the primary use for us is to create a batch application directly in python for our experiments (mainly time and precision benchmarks), but maybe some day we could also use this for a complete GUI experience. If you got any suggestion, please do not hesitate to write them here. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/492:554,simpl,simply,554,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/492,1,['simpl'],['simply']
Usability,"Hi fred,. The sofa::qt::GuiDataRepository is pointing to the set of resources that are specific to the qt application complementing the shared DataRepository (""share/""). Consequently it is the expected behavior to have it only usable when SofaGuiQt is enabled. I quickly looked in the code base where it is used and the only usage are in qt specific code which shouldn't prevent the compilation. If it does then something is wrong and the right fix is to prevent non qt base code to use this repository. . But maybe the problem you are facing is not a compilation problem but is more about sharing UI resources in different GUI. ; To do that I my suggestion is to:; - always consider to have a specific GuiDataRepository in your application namespace, this repository should point to your application specific resource (the ones that are tied to you GUI functionality).; - use the DataRepository to store shared UI elements because this one is already shared by sofa (but do we really want to have UI resources in SofaCore ?).; - or, and I think this is the real way to go, make a plugin (SharedUIResources ) to hold and expose the UI elements we are considering as re-usable by different GUI projects. But maybe I'm all wrong, if so please tell me. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908:24,GuiD,GuiDataRepository,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368789908,6,"['GuiD', 'usab']","['GuiDataRepository', 'usable']"
Usability,"Hi guillaume, . Many thanks for the links to the jenkins API, this will helps us in differentiating the tests. . I think the meaning of the colors depend on what the dash board is used for:; a) if the dash board is used to know what is the current state of the sofa code base (so answer the question: ""is this version of sofa good"") then, as you say, it should be red showing that something is bad. . b) but, if the dash board is used to get feedback of a given (personal) contribution (answering the question: ""did I introduced regression or is my contribution positive""). In this perspective a transition from green-to-red will be considered as:; - ""SHIT, I did something wrong !""; - ""OMG, other people will see that !""; - ""I quickly need to revert or fix that mess"". ; - ""But I have no time to fix the Sofa bug...so I remove the test i made showing an existing defect"" . From what I see in the defrost team the dash board is only use in the (b) situation and I regularly see people not commiting because they are afraid of putting the dash board to red. . Consequently and if we want to increase the number of commits (containing tests showing existing sofa defect) we should reward contributor with an positive feedback mecanism (whatever it is). DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277:442,feedback,feedback,442,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-258838277,4,['feedback'],['feedback']
Usability,"Hi guys!. Thanks again, Bruno, for your suggestions! I'm happy to read you find the PSDE useful. I especially like your extension to allow for for automatic derivation of the types for Inputs. This was also one of my top ideas to improve the PSDE, but I didn't have any more time to pursue this development. In the next days I'll test your Pull Request and try to give feedback on the different topics discussed here!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499:369,feedback,feedback,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392039499,2,['feedback'],['feedback']
Usability,"Hi guys, I made the changes concerning your feedback and now the PR is ready for review from my side! . The main changes are:; - Created a basic example of usage; - Now uses a factory for data creation; - The use of both args and kwargs for I/O creation is possible; - No unnecessary changes in files / no geometries added, etc. (cleaning)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/583#issuecomment-367666857:44,feedback,feedback,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/583#issuecomment-367666857,2,['feedback'],['feedback']
Usability,"Hi guys,. I coded a component a few months ago that was designed to grab the OpenGL window of Sofa. It was pretty simple, a glReadPixels on the GL_VIEWPORT, and it was working fine.; Today though, I ran a scene that was using this component, and noticed that it isn't only grabbing the sofa scene, but also the whole user interface. I know the old GUI is destined to dissapear slowly, but the issue will be the same in sofaqtquick. It would be really interesting to be able to grab a specific opengl context from a widget for instance, or directly from the sofa scene. I don't think the way I'm doing so is a great idea, and to be honest I don't know what would be a clean way of doing so, especially give how slow a glReadPixels() is... It might be a very similar topic as the Headless recorder from @ErwanDouaille ? Except that I don't want to lose the GUI just to capture images. Any ideas?; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/600:114,simpl,simple,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/600,1,['simpl'],['simple']
Usability,"Hi guys,. This PR is a proof of concept to show an alternative implementation dynamic topologies and meshes using the CGOGN library. If you never heard about, CGOGN is a topological modeling kernel (see https://cgogn.github.io) implementing efficiently combinatorial maps to encode the topology and geometrical informations. . The current implementation is based on implementing new topology into new components. The PR introduce the following components: ; - VolumeTopologyContainer ; - CMTetrahedralCorotationalFEMForceField ; - MapTetrahedronSetTopologyContainer (wrapper that allows to use ""classical"" sofa components). The PR is not supposed to be merged in this state and we welcome any feedback on how to improve and generalize this work. EDIT: I (damien) changed the description of the PR trying to summary the discussion. . EDIT 2: ; Steps to compile:; - checkout the branch with a modularized version from [ (https://github.com/mimesis-inria/sofa/tree/cmtopology_module)](https://github.com/mimesis-inria/sofa/tree/cmtopology_module); - checkout CGoGN in a folder sofa/modules/SofaCombinatorialMaps/cgogn2; Compile and run the examples in sofa/modules/SofaCombinatorialMaps/examples. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700:693,feedback,feedback,693,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700,1,['feedback'],['feedback']
Usability,"Hi mathieu, ; ; This is a good question. . I recently wrote a lot test for sofa component and it appears to me that more than half of my tests cases are in fact verifying that component correctly rise errors or warnings when they are used improperly. Making these tests is very important to avoid un-detected bugs on the error handling code paths and it bring a lot to the general quality of sofa. . About the fact that the ""error as test failure by default"" is covering 99% of our tests... to me this is an indication that our tests are only covering half of the things they should and I'm not sure we should facilitate this behavior. . This is why I came up to making the things explicit in each test because it force the test writer to specify what are his underlying assumption and expectation for each of his tests making things very clear. In addition it put in front of his eyes what he is testing.. and what he is not testing. . PS: I really like the very detailed test failure that are reported with the explicit approach, we have either the filename & lineno of the failing test as well as the location of the message emission. ; eg: https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/DilateEngine_test_0/NormalBehavior/. EDIT: Your question make me think that some way to improve the things so maybe we can discuss what are the desirable features and how to expose them to the developpers. This is very hard because it is connected to lack of standardized way our code base reports errors (not exception, some uses error codes ,some uses messages). But I'm very afraid of starting such kind of very impacting discussion (I want to do UI ;)). In the meantime I suggest to use this PR. . EDIT2: what should i do with this:; https://ci.inria.fr/sofa-ci/job/ubuntu_gcc-4.8_options/5020/testReport/(root)/TrianglePressureForceField_test_0/trianglePressureForceFieldTest/ ? ; 1) Should I ignore the warning in the test generation ? ; 2) Should the function be pure virt",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197:839,clear,clear,839,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288543197,2,['clear'],['clear']
Usability,"Hi matt,. 1) Color are not disabled in runSofa for me. It is only one line that disable them in Sofa_test.cpp and I don't see why it would impact something else. Do you have any idea ? ; 2) Fatal is already part of the default mode. ; 3) I removed Warning&Deprecated by default ; 4) There is no need to change all the tests if in the future if we want to reactivate Warning&Deprecated by default, we will just have to change few lines in Sofa_test.h.; Maybe my scoping examples was not clear but the whole system is scoped per type of message so EXPECT_MSG_NOEMIT(Error) in tests have not consequence on the fact that you can add EXPECT_MSG_NOEMIT(Warning) in Sofa_test to catch all warnings. ; Do you see what I mean ? . About explicit test vs default mode... ; To me if the only aspect we care is how fast we can disable/re-enable tests failures then the default mode in Sofa_test is great. But is this the only aspect we care ? ; What about the fact that default mode is reporting useless filename&line (.../Sofa_test:93). Because of that I loose time each time I have to investigate test failures. On the contrary explicit messages specifications reports real file&line and allow to narrow the problem to very precise code location which save time. And these savings sums up each time someone is looking at tests failures. . In general I write a test once... but investigate failures several time... so I find it worth the effort of spending a bit more time on writing a good test with narrow message catching because they proved to saves time while investigating failure. . This is a totally different story with the time saving of changing the default mode by changing Sofa_test. It saves time as long as we are hesitating on what should be the default mode but after that it will slow down all failure investigations. . So... I made my best to explain why I care of explicit test but the important things to me are:; - what do I have to change so that PR can be be merged so that I can close it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008:486,clear,clear,486,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-292681008,2,['clear'],['clear']
Usability,"Hi raffaella,. We really appreciate feedback & suggestion, so thank you. . On the Python side we are currently actively working on improving the whole way to report error. This take place in PR #304 ; So it is the right moment to have that to be improved because release the next sofa release (17.12) will change things. . More generally Sofa messages are from ok to really bad but we lack (wo)man-power to fix all that so If you or anyone feel the envy to participate on this kind of task please don't hesitate because it is very important to have good error messages. . Damien.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439:36,feedback,feedback,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/333#issuecomment-315892439,2,['feedback'],['feedback']
Usability,"Hi thank you for the list, this is very informative. In the current state we clearly cannot trust that to feed the factory. So to me we have to add in the data factory base types like:; - double, int, float, Vec3, Vec4, Quaternion, Index, string, Matrices, Vector, ; - vector<XXX>, set<XXX>, . So that we already have a valid convention for the create data that is 'rich' and usable explicitely from python. . Then, for the automatic type deduction...isn't it possible to create a ""clone"" of an existing data without having to even have to get a typename ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380409414:77,clear,clearly,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380409414,4,"['clear', 'usab']","['clearly', 'usable']"
Usability,"Hi!. OptionsGroup in Sofa are currently created in 2 steps:. - in ctor: every option are created, from strings, usually by calling ""setNames()"". A default value is set, usually to 0 by calling setSelectedItem(0); - during parsing of the scene file: user value is taken into account. This is working great, except in one case:; What if my OptionsGroup is supposed to contain a list of values retrieved from another sofa::Data (let's say a vector of strings..)?; - In the Ctor, the string data is not yet initialized, so setNames cannot be called; - in parse() I don't know about the other data so I cannot retrieve the list of values. This also means that when calling setSelectedItem with the value passed in the scene file, I will get an error message as the entry does not exist ; - at init(), my list of values is set, so I can finally call setNames, but I'll lose my default user value from the scene file. To fix this, I modified the OptionsGroup class to store the user value in readFromString(), and added a public method: setSelectedItemToDefault() that calls setSelectedItem() with that stored user value. This solved the issue, but only for OptionsGroup (any sofa::Data that relies on another data for its initialization will have the problem), and it's maybe not in the cleanest way..; Some would argue that listing the values to feed the OptionsGroup with is a task for SofaPython, before calling CreateObject, but I'd like to have this feature even when using XML scene files. Do you have suggestions on how to solve this problem in a better way, and for all data? Do you think my way is clean enough to be PRed in SOFA?. @damienmarchal, maybe you have good ideas on the topic ? . Looking forward to your feedback,; - Bruno Marques; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/363:1718,feedback,feedback,1718,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/363,1,['feedback'],['feedback']
Usability,"Hi!; Here's a simple test scene showing the problem:; ```<?xml version=""1.0"" ?>; <Node name=""lroot"" gravity=""0 -9.81 0"" dt=""0.02"">; <Node name=""Liver"">; <EulerImplicitSolver name=""cg_odesolver"" rayleighStiffness=""0.1"" rayleighMass=""0.1"" />; <SparseLDLSolver saveMatrixToFile=""true""/>; <!-- <CGLinearSolver name=""linear solver"" iterations=""1000"" tolerance=""1e-09"" threshold=""1e-09"" /> -->; <MeshGmshLoader name=""meshLoader"" filename=""mesh/liver.msh"" />; <TetrahedronSetTopologyContainer name=""topo"" src=""@meshLoader"" />; <MechanicalObject name=""dofs"" src=""@meshLoader"" />; <TetrahedronSetGeometryAlgorithms template=""Vec3d"" name=""GeomAlgo"" />; <DiagonalMass name=""computed using mass density"" massDensity=""1"" />; <TetrahedralCorotationalFEMForceField template=""Vec3d"" name=""FEM"" method=""large"" poissonRatio=""0.3"" youngModulus=""3000"" computeGlobalMatrix=""0"" />; <FixedConstraint name=""FixedConstraint"" indices=""3 39 64"" />; <Node name=""BUG"" >; <MechanicalObject name=""MO"" position=""1 1 1 2 2 2 3 3 3"" />; <Sphere radius=""1"" />; </Node>; </Node>; </Node>; ```. I have a very bad comprehension of these things, but apparently, Sofa concatenates the points in the mechanical object ""/dofs"" and ""/BUG/MO"", even though there is no mapping to link both objects.; If you replace the SparseLDLSolver by the CGLinearSolver, it will work, but that's because CG doesn't invert the matrix.; I am reporting @IPeterlik's explanations here, but Igor can undoubtedly explain better than me what's actually happening here.. :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346:14,simpl,simple,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/581#issuecomment-390925346,4,"['simpl', 'undo']","['simple', 'undoubtedly']"
Usability,"Hi, I suppose you are speaking about this one:; https://github.com/sofa-framework/sofa/blob/801cda5c4042438f49970fc8233d915f60e334d1/applications/projects/SofaGuiGlut/SimpleGUI.cpp#L232. I think you are right, this is a bug.; I just checked the [configure file of the ci](https://github.com/sofa-framework/sofa/blob/master/scripts/ci/configure.sh) it doesn't seems to have the option SOFAGUIGLUT to ON and the option is set to false by default, so I don't think it is compiled on the CI. @guparan do you confirm?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942:167,Simpl,SimpleGUI,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/989#issuecomment-482104942,1,['Simpl'],['SimpleGUI']
Usability,"Hi, thanks four your feedback :-). I'm tackling 1. and it's almost done, however I lack a clean way of exposing the extra args to the sofa python plugin. any idea ?; 2. can't you just use `__file__` for that anyway ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853:21,feedback,feedback,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323693853,2,['feedback'],['feedback']
Usability,"Hi,. Here is our 'newtests' contributions for sofa this week. . It is very simple and consists in several new test for components:; - Light, LightManager, LocalMinDistance. One of them is tagged with OpenIssue because it shows a User Interface consistency problem; the ambient term of LightManager is a color but it does not accept string based color name as other sofa component do. To fix this we will need to unify the 'color' in all sofa. ; ; There is also a weird test called AllComponent that checks each sofa components if there is a corresponding example. Currently it fails because only 1/3 of them have one. . Finally Jérémie commited a script to convert the alias in a sofa scene to the real component name.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/69:75,simpl,simple,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/69,1,['simpl'],['simple']
Usability,"Hi,. I am wondering if there is a reason why Data related to Rayleigh damping and mass in ODE solvers (e.g. see [EulerImplicitSolver](https://github.com/sofa-framework/sofa/blob/master/SofaKernel/modules/SofaImplicitOdeSolver/EulerImplicitSolver.cpp)) are not zero by default. Couldn't it be very confusing for new users ?. Thanks for your feedback; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/338:340,feedback,feedback,340,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/338,1,['feedback'],['feedback']
Usability,"Hi,. In order to reduce compile time of sofa plugins, I decided to compile my plugins outside of Sofa (a build folder for each plugin, CMAKE_PREFIX_PATH and CMAKE_INSTALL_PREFIX to tell cmake where to find sofa); Compiling tests then doesn't work since the gtest headers, that are bundled in sofa, are not deployed on sofa's install dir. This PR rectifies that. @sofa-framework/consortium, I also believe that there should be clear guidelines in SOFA to determine what the ""normal"" way of compiling plugins should be.; I believe that outsourced builds should be the way to go, instead of adding plugins through ; `applications/plugins/CMakeLists.txt`; or cmake's; `EXTERNAL_DIRECTORIES`; since it allows people to isolate SOFA a bit more from their work. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/395:426,clear,clear,426,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/395,2,"['clear', 'guid']","['clear', 'guidelines']"
Usability,"Hi,; I don't actually want to use them, it's just that it was crashing! I created the mesh in Gmsh but exported it in vtk. Exporting it in the msh format does not lead to a crash indeed.; I can understand that my fix is not super clear! ; Essentially, in the code when it starts using the edges and something goes wrong, I move on to the option like if no edges had been given (For example in the function createEdgesInTetrahedronArray() with the if (hasEdges) ). I hope it clarifies a little bit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1008#issuecomment-487111948:230,clear,clear,230,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1008#issuecomment-487111948,2,['clear'],['clear']
Usability,"Hi,; I've noticed a trailing `#endif` in [SimpleGUI.cpp](https://github.com/sofa-framework/sofa/blob/master/applications/projects/SofaGuiGlut/SimpleGUI.cpp), which on my machine seems to break compilation. Is this normal? and if not, why does the CI build without errors?; Is SofaGuiGlut even compiled on the CI?. Cheers. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/989:42,Simpl,SimpleGUI,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/989,2,['Simpl'],['SimpleGUI']
Usability,"Hi,; thanks for your comments. 1) Indeed the local parameters should override the global parameter. If it is not the case there is a bug. 2) The friction coefficient cannot be negative, so set a positive value! Of course this could be checked. 3) Indeed the product of the two friction coefficients are used everywhere in SOFA (not only in Compliant as far as I know). In fact the friction coefficient should be defined for a pair of objects and not per object. Such an external table does not fit the actual Sofa design. But note that is possible to tweak the collision model's coefficients (even more easily when describing the scene in python).; `sqrt(coef1*coef2)` sounds a good suggestion to me, I guess it would produce a more intuitive behavior. Do you have a pointer talking about such behavior?. @maxime-tournier, your opinion?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/81#issuecomment-264505055:733,intuit,intuitive,733,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-264505055,2,['intuit'],['intuitive']
Usability,"However in the particular case your are mentionning ( ie compile time fixed size matrices ) nothing really strikes me as a ""bad behavior"" or undocumented behavior of some sort that needs to be amended in the current design. Then again in the standard which has `std::array` for compile time fixed size array, the `empty()` method always return false unless your array is degenerated ( ie it cannot contain anything at all ).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303156473:141,undo,undocumented,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/277#issuecomment-303156473,2,['undo'],['undocumented']
Usability,"I Agree with Alex, the first two ones are ok, but the third one is not good. Why not keeping it simple and call it XXXLagrangianConstraint",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3903#issuecomment-1569866405:96,simpl,simple,96,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3903#issuecomment-1569866405,2,['simpl'],['simple']
Usability,"I agree with the style checking + auto-formatting ideas, it has been regularly discussed for a long time now. Here is what I propose for the astyle sheet (based on the existing one):; ```bash; # Brace Style; --style=allman. # Indentation; --indent-switches; --indent=spaces=4; --indent-labels; --indent-col1-comments; --max-instatement-indent=100. # Padding; --pad-oper; --pad-comma; --align-pointer=type; --align-reference=type. # Formatting; --break-one-line-headers; --add-braces; --convert-tabs; ```; Tell me if this is breaking some of our [coding guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) but I think it is alright. My only doubt is about forcing or not braces around one line blocks (if, else, while, ...). I personally prefer when they are forced (particularly considering that SOFA devs are changing often and enjoy ""quick and dirty"" changes a lot) but the Google C++ Style Guide says the opposite [here](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md).; What do you guys think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234:553,guid,guidelines,553,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353112234,5,"['GUID', 'Guid', 'guid']","['GUIDELINES', 'Guide', 'guidelines']"
Usability,"I all,. I have improved the whole mecanism so now it is off by default and we can activate it selectively (progressively) ; per component during their registration in the factory. I also added a mecanism to handle in a smooth way the deprecation of aliases as well as a update the SceneCheckUsingAlias checker. . I don't see a lot of drawback for all this work, while I see a lot of benefits, so feedback welcome.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-981677782:396,feedback,feedback,396,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-981677782,2,['feedback'],['feedback']
Usability,I also think about creating a graph link instead of a simple copy:. ```cpp; if (!worldGravity_.isSet()); {; worldGravity_.setParent(&c); ///< Gravity IN THE WORLD COORDINATE SYSTEM.; }; ```. What do you think?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2264776309:54,simpl,simple,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2264776309,2,['simpl'],['simple']
Usability,"I am having a look at the CGLinearSolver and the ShewchukPCGLinearSolver. The purpose is to add a preconditioner to my system and I am following the algorithm from https://www.cs.ubc.ca/~ascher/papers/ab.pdf. Lets ignore for now the preconditioner and look the CGLinearSolver (or the Shewchuk but without preconditioner). The `r` vector at initialization should be S * (b - Ax). By looking at the code, I can see sofa does . CGLinearSolver.inl; ```; /// Compute the initial residual r; if( f_warmStart.getValue() ); {; r = M * x;; r.eq( b, r, -1.0 ); // initial residual r = b - Ax;; }; else; {; x.clear();; r = b; // initial residual; }; ```. or; ShewchukPCGLinearSolver; ```; r = M * x;; cgstep_beta(r,b,-1);// r = -1 * r + b = b - (M * x); ```; r = M*x is correct, since the operation is doing `mop.projectResponse`, but here `b` is not projected afaik. Where is this projection happening? . Later, in the ShewchukPCGLinearSolver, we have this. ```; if (apply_precond) {; sofa::helper::AdvancedTimer::stepBegin(""PCGLinearSolver::apply Precond"");; m_preconditioners->setSystemLHVector(w);; m_preconditioners->setSystemRHVector(r);; m_preconditioners->solveSystem();. sofa::helper::AdvancedTimer::stepEnd(""PCGLinearSolver::apply Precond"");; } else {; w = r;; }; double r_norm = r.dot(w);; graph_error.push_back(r_norm/b_norm);. unsigned iter=1;; while ((iter <= f_maxIter.getValue()) && (r_norm > tol)) {; s = M * w;; ```; which is essentially implementing `w = P^{-1} * r`. Then, we use that w to multiply it by M (s = M*w), which as said before, includes the projection. This is essentially the following computation (s = S * M * P^{-1} * r), which is different from what the paper says (s = S * M * S * P^{-1} * r). Is this a bug or am I missing something?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2074:598,clear,clear,598,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2074,1,['clear'],['clear']
Usability,"I am trying to add new types to template MechanicalObject. So far I have tried to create this:. ```; using Vec9 = sofa::defaulttype::Vec<9, double>;; using F33D = sofa::defaulttype::StdVectorTypes<Vec9, Vec9, double>;; ```. and tried to create the specializations that I think I need, but when creating the scene from a python scene, it says ; `[WARNING] [MechanicalObject(F)] Template F33D incorrect, used Vec3d`. The final idea is to actually use a 3x3 matrix, but I decided to go first with the Vec9 approach as I thought it would be easier since it just a specialization of an already supported type for MechanicalObject, but its clear that this is not easy. Could someone provide some documentation on how to create types for MechanicalObject? Which functions/classes/types should be specialized?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1524:634,clear,clear,634,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1524,1,['clear'],['clear']
Usability,"I am unsure this PR is correct, so it really needs a green light from others before merge. When trying to call `std::exit` in some plugin, I had a segfault in cleanup code similar to this one:. ```c++; // Detect missing cleanup() call.; static const struct CleanupCheck; {; CleanupCheck() {; }; ; ~CleanupCheck() {; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()""); // segfault; }; } check;; ```. In fact, most `init.cpp` files in SOFA have code similar to this one. In my case, `MessageDispatcher::LoggerStream::~LoggerStream` caused a call to `MessageDispatcher::process` which would then cause a segfault. What I don't understand is *why* the above code snipped does not simply `cleanup()` the library in the destructor, since the latter is being called while the library unloads and this is the last chance to actually clean things up, instead of (trying to) emit a warning while the whole program is being terminated. So unless there is a compelling reason to leave it this way (and I would really like to know it), I suggest the above to be changed to:. ```c++; static const struct CleanupCheck; {; CleanupCheck() {; init();; }; ; ~CleanupCheck() {; cleanup();; // leaving the warning if for some reason cleanup failed; if (core::isInitialized() && !core::isCleanedUp()); helper::printLibraryNotCleanedUpWarning(""SofaCore"", ""sofa::core::cleanup()"");; }; } check;; ```. so that the library automatically `init()` and `cleanup()` upon `dlopen`/`exit`. <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/168:754,simpl,simply,754,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/168,1,['simpl'],['simply']
Usability,"I am using a Visual(Ogl)Model to display a decorative mesh (ie not a simulated object); The geometry is loaded using a MeshLoader. If I change some transformation value in the MeshLoader, and update/reinit this component, I get:; - positions in mesh loader updated; - VisualModel linked positions updated; - the 3d display NOT updated; - even if I reinit the VisualModel the display is still not updated; - even if I step the display is still not updated. I would expect that a VisualModel reinit would do the trick. If I add a MechanicalObject node + bottom level with IdentityMapping+VisualModel, then when I step I have the VisualModel and display updated - this is what I expect in that case (and this is currently my workaround) - What the mapping is doing to make the VisualModel really updates ?. I attach a simple demo .scn that show the issue (well looks like .scn cannot be attached) :. <Node name=""Root"" >; <MeshObjLoader name=""loader"" filename=""mesh/floor3.obj"" />; <MechanicalObject name=""dofs"" src=""@loader"" />; <Node name=""simple"">; <VisualModel name=""visual"" src=""@../loader"" color=""red"" />; </Node>; <Node name=""mapping"">; <VisualModel name=""visual"" src=""@../loader"" color=""blue"" />; <IdentityMapping name=""mapping"" />; </Node>; </Node>. If you think this is not a bug, feel free to change the label of this issue",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/152:815,simpl,simple,815,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/152,2,['simpl'],['simple']
Usability,"I am vsync-limited on my setup so cannot really test.; Lets simply revert this PR, I will see later",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2458#issuecomment-967174468:60,simpl,simply,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2458#issuecomment-967174468,2,['simpl'],['simply']
Usability,I am wondering why the fields `nbPoints` and `points`in [PointSetTopologyContainer](https://github.com/sofa-framework/sofa/blob/463ad43061881fb94efc4366a80e3d1f9e99c4a1/SofaKernel/modules/SofaBaseTopology/PointSetTopologyContainer.h) are of type Data _and_ private in the class. They can not be directly accessed from the outside. They could also be a simple `unsiged int` and `helper::vector`... Is it for serialisation ?. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/529:352,simpl,simple,352,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/529,1,['simpl'],['simple']
Usability,"I believe whatever the approach taken it should allow to keep things pretty clear between ; - unit tests, ie tests that hardly depend on initializing a scene. In these tests you hardly need a concrete instance of node or simulation. If you need this it may be nice to have a class to derive from which does it for you, but then again it should stay optional, because you should really think again about how you designed your component if you need a full fledged simulation to actually make some basic testing on your component. ; No matter what, these tests should be executed at each build (even for devs) and must pass. Failing in this kind of tests must be equal to a compilation error.; In that respect there is something that I am reluctant to allow for this type of tests is a lose coupling approach where you instantiate components using keys from the object factory. You may end up writing tests that in fact do not compile from a scratch build because this allows you to not take care about the dependencies between the libs. That is to say a test may instantiate a component that is not available yet, because it belongs to a library which is deeper in the build dependency tree at the time the unit test is built and executed during the compilation. - Functional tests, that require a working scene with probably more components than the one actually tested. These tests can be longer and therefore should not be mandatory during the compilation. ; They will be run only in ci machines, but can be also easily executed by any developers on its machine mostly to debug what is the nature of a new regression in these kind of tests. ; From our experience at InSimo these kinds of tests regress quite often during the development of a new feature, because you make some optimisation in the code, and you get some epsilon difference, or because you change the approach entirely and the scene is no longer relevant for you and should be changed. So you probably do not want too many of these fun",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243:76,clear,clear,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-337507243,2,['clear'],['clear']
Usability,"I confirm this version works in my scenes:; > Note that I prefer the range-based for loop. It would look like:; > ; > ```c++; > for(auto*& constraintsResolution : constraintsResolutions); > {; > delete constraintsResolution;; > constraintsResolution = nullptr;; > }; > ```; The alternative of clearing the vector after the loop also seems to work well:; ```C++; for (auto*& constraintsResolution : constraintsResolutions); {; delete constraintsResolution;; }; constraintsResolutions.clear();; ```; It is a pretty important bug to fix, half of my scenes are also crashing.; Thanks for finding the bug and the solution ideas",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-887544609:293,clear,clearing,293,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2265#issuecomment-887544609,4,['clear'],"['clear', 'clearing']"
Usability,"I consider the fetch mechanism within the Sofa subdirectories as a flawned design that is causing more troubles than it solved. And it is the n°1 cause of ""Can you help me, I updated SOFA from master it does not compile anymore "" at DEFROST (eg: https://github.com/sofa-framework/sofa/issues/4343). . This fetch mechanism is simplifing the initial ""fetch"" of the plugins but it complexify a lot every subsequent updates for each of them. . So to me, the fetches should be done outside the sofa directory structures (or not be used at all).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380:325,simpl,simplifing,325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4409#issuecomment-1870264380,2,['simpl'],['simplifing']
Usability,I could not open a SOFA scene using the following command line as per the documentation guidelines: . ls applications/plugins/SofaPython/examples/fontain.scn; applications/plugins/SofaPython/examples/fontain.scn. runSofa applications/plugins/SofaPython/examples/fontain.scn; [ERROR] [XMLParser] Failed to open applications/plugins/SofaPython/examples/fontain.scn; Failed to open file at line 0 row 0. The issue was encountered on both - Mac OS and Linux. ; Please help to solve this. Thank you!. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/569:88,guid,guidelines,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/569,1,['guid'],['guidelines']
Usability,"I currently have no clear and precise idea what all the function in PathResolver do. ; For the moment it is just a place where I cut & paste functions from other place in Sofa and that give me the feel they are quasi-duplicates (like findDest in Base or Link, findDataDest). No documentation probably means...no documenation in the initial function :); My idea then is to refactor that, remove the duplication, and have a single location for PathResolution. I will probably ; refactored the function including their signature so...well you can use the functions... but given it will be refactored soon I would not using that in a plugin not in sofa/master. ; I do hope PathResolution::FindBaseFromPath will not change, but all the other's will. . Warning: for the moment some of these function are taking linkpath (like ""@/this/is/a/link"") as inputs while other are taking path while other are taking a path (like ""/this/is/a/path""). On this aspect my thinking is that on PathResolution we should focus on path only API. the ""@"" should be just a parsing specific aspect to differentiate value from link. . @epernod I fully agree with your comment. My current thinking on this aspect is that the all the canCreate method should be removed.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360:20,clear,clear,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1506#issuecomment-705135360,2,['clear'],['clear']
Usability,"I didn't do anything right now. But I was thinking how we could change it. For the char length problem it's quite simple, but i think we need to refactor a lot of things in it. By example, one cool feature would be to be able to add arguments without changing main.cpp. Like adding a virtual function to BaseGUI and let subclasses having the ability to add options.; The main.cpp will still have basic arguments and will be able to list registered gui options. I don't like the (aGui only) comment ... :/. I can start working on it on my free time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522:114,simpl,simple,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/512#issuecomment-343501522,2,['simpl'],['simple']
Usability,"I do understand the idea.; But I guess it should be possible to got only one component, let's call it `WarningAndErrorInGTest`, that would be created directly in Sofa_test (so added to every tests).; This component would have two tristates `{not_expected,expected,nothing}`, one for warnings and one for errors.; By default both states would be set to `not_expected`, such as by default every sofa warnings/errors would raise a gtest error.; It would be enough for most of the tests, so the user has NOTHING to do when writing its tests (and it would work for any existing tests, incl. plugins'). For more complex tests like in your example, rather than creating; `ErrorAsTestFailure err(SOURCE_LOCATION) ;; ExpectWarning warn(SOURCE_LOCATION) ;; `; you could write something like:; `this->warningAndErrorInGTest.warningState = expected;`. It is as explicit, not heavier, and even more flexible, as you can switch the state during the test (w/o having to delete objects and creating new ones). I am note sure to be clear enough, do you follow me?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630:1015,clear,clear,1015,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-288686630,2,['clear'],['clear']
Usability,"I don't know if this still an adequate proposition, but I was thinking that it might be also a nice idea to change the name of the PSDE to something that is intuitively more graspable. Some suggestions could be (in order of preference): . PyScriptableComponent; PyFunctionBlock; PyComponent. I don't think that at this time we would be breaking to much code by changing the name.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-400231695:157,intuit,intuitively,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-400231695,2,['intuit'],['intuitively']
Usability,"I don't know what exactly was TData for, but in years no-one ever use it so I merged Data & TData to make things more clear.; I also re-implemented the existing feature using the child-delegation pattern instead of relying on call super. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1753:118,clear,clear,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753,1,['clear'],['clear']
Usability,"I don't know... Some digging is needed. ; Eg the topology is ""mandatory"" because the checkAttributes test is calling ""init"" which emit an error if there is no topology. So do we add a topology or to we allow an MSG_EXPECT(Error) ? . The one about rigid is simpler as we simply this test is supposed to fail so it actually needs an MSG_EXPECT()",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295:256,simpl,simpler,256,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/832#issuecomment-440233295,4,['simpl'],"['simpler', 'simply']"
Usability,"I dont know why this file is in SofaSimulationCore, but if you look at the content of this header file, you can see; ```c++; #include <MultiThreading/config.h>; ...; #include <MultiThreading/Tasks.h>; ```. it would mean that the Multithreading plugin should be enabled **before** SofaSimulationCore (obviously impossible), so this code would never be usable as it is. 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734:351,usab,usable,351,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1994#issuecomment-816111734,2,['usab'],['usable']
Usability,"I finally got time to try a version with sptr as suggested by @epernod but because there is cycling reference counting there is memory leaks. So I reverted back to a raw pointer to old m_root and it is actually consistant with how are handled the other pointer to parents in DAGNode::l_parent (depsite it is not clear this are raw pointer because of the use of the Link's ""margic"" (the strong link vs weak link)) .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3059#issuecomment-1227602466:312,clear,clear,312,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3059#issuecomment-1227602466,2,['clear'],['clear']
Usability,I guess lowercasing on windows was to simplify path comparisons (using string comparison). Be careful not to break something else while removing it.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/250#issuecomment-300176048:38,simpl,simplify,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/250#issuecomment-300176048,2,['simpl'],['simplify']
Usability,I guess this simple change is not breaking SOFA.; @matthieu-nesme ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/11#issuecomment-236527691:13,simpl,simple,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/11#issuecomment-236527691,2,['simpl'],['simple']
Usability,"I guparan,. This is a nice idea. By doing so you will have to remove components which may break backward compatibility with users existing scenes. Maybe you will find helpful the following template of code we are using in the soft-robots plugin to handle such backward compatibility issues. The idea basically consist in registering into the factory an empty component that simply print a warning the user saying that the component was there but is now deprecated and provides hints on how the user could fix his scene to handle the situation. . ``` cpp; class SOFA_SOFTROBOTS_API PositionEffectorConstraintGS : public sofa::component::DeprecatedComponent; {; public:; /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* context, BaseObjectDescription* arg); {; SOFA_UNUSED(obj) ;; SOFA_UNUSED(context) ;; SOFA_UNUSED(arg) ;. msg_error(this) << ""'PositionEffectorConstraintGS' is a SoftRobot v1.0 feature that has been replaced since V2.0 by the component 'PositionEffectorGS'. \n ""; ""To remove this error message, you either need to: \n ""; "" - replace PositionEffectorConstraintGS with PositionEffectorGS\n ""; "" - or use the SoftRobot plugin v1.0 \n "";; return false;; }; } ;. SOFA_DECL_CLASS(PositionEffectorConstraintGS). int PositionEffectorConstraintGSClass = RegisterObject(""PositionEffectorConstraintGS is now deprecated and should be replaced with PositionEffectorGS""); .add< PositionEffectorConstraintGS >(); ;. ========================= ; class DeprecatedComponent : public BaseObject; {; public:; SOFA_CLASS(DeprecatedComponent, BaseObject) ;. /// Pre-construction check method called by ObjectFactory.; template<class T>; static bool canCreate(T* obj, BaseContext* /*context*/, BaseObjectDescription* /*arg*/); {; obj->serr << ""[Deprecated component]: "" << obj->getName() ;; return false;; }; private:; } ;. ```. If you have other way to handle this I'm interested to hear about them. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098:374,simpl,simply,374,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/28#issuecomment-253454098,2,['simpl'],['simply']
Usability,"I have a plugin with custom components which I try to use in a python3 scene, but SOFA segfaults when trying to add them to the scene. . My component code is pretty simple, is a basic example. ```; namespace VNCS; {; template <typename DataType>; class Clustering : public sofa::core::objectmodel::BaseObject; {; using Inherit = typename sofa::core::objectmodel::BaseObject;; using Real = typename DataType::Real;. public:; SOFA_CLASS(SOFA_TEMPLATE(VNCS::Clustering, DataType), sofa::core::objectmodel::BaseObject);. Clustering(); : Inherit(); {; }. private:; };; } // namespace VNCS; ```. but a scene contain a component like this fails to load. ```; ...; fineObject = simulationNode.addChild(""Fine""); dObject = fineObject.addChild(""dObject""); dObject.addObject(""MechanicalObject"", template=""Vec1"", name=""d_MO""); dObject.addObject(""Clustering"", template=""Vec1"", name=""Clustering""); ```. with the following backtrace. ```; ########## SIG 11 - SIGSEGV: segfault ##########; -> /home/jjcasmar/D/libs/builds/sofa/lib/libSofaHelper.so.20.06.99(sofa::helper::BackTrace::dump()+0x23) [0x7fa97395db13]; -> /home/jjcasmar/D/libs/builds/sofa/lib/libSofaHelper.so.20.06.99(sofa::helper::BackTrace::sig(int)+0x1df) [0x7fa97395deaf]; -> /usr/lib/libc.so.6(+0x3d6a0) [0x7fa9731316a0]; -> /home/jjcasmar/D/libs/builds/sofa/lib/libSofaCore.so.20.06.99(sofa::core::objectmodel::Base::findDataLinkDest(sofa::core::objectmodel::BaseData*&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, sofa::core::objectmodel::BaseLink const*)+0x7c) [0x7fa97464790c]; -> /home/jjcasmar/D/libs/builds/sofa/lib/libSofaCore.so.20.06.99(sofa::core::objectmodel::BaseNode::setObjectContext(boost::intrusive_ptr<sofa::core::objectmodel::BaseObject>)+0x61) [0x7fa974664f11]; -> /home/jjcasmar/D/libs/builds/sofa/lib/libSofaSimulationCore.so.20.06.99(sofa::simulation::Node::doAddObject(boost::intrusive_ptr<sofa::core::objectmodel::BaseObject>)+0x40) [0x7fa974a57ef0]; -> /home/jjcasmar/D/libs/builds",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1476:165,simpl,simple,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1476,1,['simpl'],['simple']
Usability,"I have a scene where I create MechanicalObjects after the init phase, from within the onBeginAnimationStep methods of a pythonScriptController. This would immediately spawn the following warning:; > [WARNING] [MechanicalObject(MecaObject)] Invalid vOp operation 1 (null(V_DERIV),0(0),null(V_DERIV),50). followed by a segmentation fault.; In order to show the problem in a simpler scene, I modified the fontain scene in SofaPython to spawn new particles on mouse clicks:. ```; import Sofa; import sys; import random. class Fontain(Sofa.PythonScriptController):. def createCube(self,parentNode,name,x,y,z,vx,vy,vz,color):; node = parentNode.createChild(name). node.createObject('EulerImplicit'); node.createObject('SparseLDLSolver', name=""precond""); object = node.createObject('MechanicalObject',name='MecaObject',template='Rigid'); node.createObject('UniformMass',totalMass=""1""); node.createObject('SphereModel',radius='0.5', group='1'). # VisualNode; VisuNode = node.createChild('Visu'); VisuNode.createObject('OglModel',name='Visual',fileMesh='mesh/PokeCube.obj',color=color); VisuNode.createObject('RigidMapping',input='@..',output='@Visual'). # apply wanted initial translation; #object.applyTranslation(x,y,z); object.findData('position').value=str(x)+' '+str(y)+' '+str(z)+' 0 0 0 1'; object.findData('velocity').value=str(vx)+' '+str(vy)+' '+str(vz)+' 0 0 0'; ; return node. ; # called once the script is loaded; def onLoaded(self,node):; print 'Fontain.onLoaded called from node '+node.name; self.rootNode = node; ; particleCount = 0; def spawnParticle(self):; # create the particle, with a random color; color='red'; colorRandom = random.randint(1,6); if colorRandom==1:; color = 'red'; if colorRandom==2:; color = 'green'; if colorRandom==3:; color = 'blue'; if colorRandom==4:; color = 'yellow'; if colorRandom==5:; color = 'cyan'; if colorRandom==6:; color = 'magenta'; node = self.createCube(self.rootNode,'particle'+str(self.particleCount),0,0,0,random.uniform(-10,10),random.uniform(10,3",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/725:372,simpl,simpler,372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/725,1,['simpl'],['simpler']
Usability,"I have identified the actual issue in ```$sofa_dir/Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - line 124 has a few mentions of ```/${PROJECT_NAME}``` too much, removing these at least reduces the header install path to ```$sofa_dir/build/install/include/extlibs/QGLViewer/QGLViewer/*.h```; - for some reason the ```MOC_HEADER_FILES``` (line 21 ff.) are not considered for copying by your ```sofa_create_package_with_targets``` macro. For testing I have simply copied the headers listed in ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES```. This does not affect the build and finally copies the previously missing MOC headers to the install include directory. I can make a pull request for this. Or I can wait a bit if someone has an idea on how to properly copy/install the MOC_HEADERS without the redundant mentioning in both header lists.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674:465,simpl,simply,465,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4196#issuecomment-1734430674,2,['simpl'],['simply']
Usability,"I have implemented a component ""MakeAlias"" to explicitely specify the Alias of a component (not a data) at the beginning of its scene. It is commited in https://github.com/sofa-framework/sofa/commit/92753c42b7eaa076ace4b3840aa4cac6c18172a7. Example of use: . ``` xml; <xml/>; <Node name=""Root"">; <MakeAlias targetcomponent=""TPointModel"" alias=""Point"">; ...; <Point> ; <Point> ; <Point> ; ...; </Node>; ```. With this approach people that want alias to simplify their scene...have them...but:; - there is not alias by default; - alias are explict so anyone reading the scene now that the object ""TPointModel"" will be named ""Point"". I'm looking on how to implement something equivalent for Data. . DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-258292916:452,simpl,simplify,452,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-258292916,2,['simpl'],['simplify']
Usability,"I have not the competence nore time to validate it on the mechanical aspect so I suggest to let 1 week to anyone to give feedback, and after one week we merge it :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765:121,feedback,feedback,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/147#issuecomment-275100765,2,['feedback'],['feedback']
Usability,I integrated most of your changes @fredroy but changes in Data field of OmniDriver and others is really bigger work. I would like to keep the PR simple and do this in another PR later,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721:145,simpl,simple,145,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1019#issuecomment-487891721,2,['simpl'],['simple']
Usability,I just added a commit to clean the custom `EXPECT_ATLEASE_ONE_NONFATAL_FAILURE` macro. Tell me if I'm wrong but it would better be a macro expecting MORE than 1 failure to clearly distinct from `EXPECT_NONFATAL_FAILURE` (GTest one).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370488262:172,clear,clearly,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-370488262,2,['clear'],['clearly']
Usability,"I just cherry-picked Anatoscope's changes related to SofaPython (excl. PythonScriptController that comes in #283).; It seems huge, but it is simply:; - mainly cleaning-up,; - adding bindings,; - refactoring python-tests. More cleanings are coming, and waiting for #283 and #286.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143:141,simpl,simply,141,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304#issuecomment-308411143,2,['simpl'],['simply']
Usability,"I just did a quick test in a simple scene (horizontal beam with downward force at one end), and the Newton static solver does *not* converge with the TetrahedronFEMForceField in single precision, using a CGSolver in double precision. The problem may be with the addDforce function used by CG, but it would need some more investigating. So basically, we can't simply switch to single precision without checking everything that could be sensitive to numerical errors (but I agree that it would be better if we could use mostly single precision).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191:29,simpl,simple,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-340728191,4,['simpl'],"['simple', 'simply']"
Usability,"I just gave it a look and it seems easy to move up the whole code at CollisionModel level... so please do so, code will be cleaner, shorter and will offer a more consistent interface to users. . In addition I see no problem in breaking code that does not follows Sofa guidelines. So renaming activated() into isActive() and other stuff like that would be welcome to :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851:268,guid,guidelines,268,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1259#issuecomment-593969851,2,['guid'],['guidelines']
Usability,I just removed all plugin-concerned commits. They are still available on guparan/sofa:clean_licenses_pr_139.; This PR should now be simple to review :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500:132,simpl,simple,132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-278993500,2,['simpl'],['simple']
Usability,I just replaced my commit by a simple typo fix.; Thank you for the clear explanations @damienmarchal,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/604#issuecomment-371135821:31,simpl,simple,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/604#issuecomment-371135821,4,"['clear', 'simpl']","['clear', 'simple']"
Usability,I just submitted a new PR #322 on top of the SceneChecker to implement gentle mecanism to guide users through changes in Sofa. . My underlying target is to favor a bit more the PR that improves things but changes the behavior as long as our users are warned and guided to fix their scenes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/318#issuecomment-313111808:90,guid,guide,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/318#issuecomment-313111808,4,['guid'],"['guide', 'guided']"
Usability,"I kinda see what you went through. The argument parser isn't that intuitive TBO. I recently had to do a similar task, so if you still want the ""infinite"" flag, you can check this [line](https://github.com/tgaugry/sofa/commit/326f4f4c8fea61783e40225cb4abac648e569922#diff-5904f9a1380b53f6de2fdc644b6b1a48R112) and the `parseSkipOption` function in the same file. ; Maybe this would solve your problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373443938:66,intuit,intuitive,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/610#issuecomment-373443938,2,['intuit'],['intuitive']
Usability,"I like the simplicity of your proposal, however the macro trick (does it work with clang ?) could be avoided if we decide some different names for the macro, like . msg_info () << ""Implicit 'this'""; // keep that one, the most common . msg_info_component ( this ) << ""Explicit""; // or s.t. else shorter ; msg_info_name ( "" Something else "" ) << ""Hep""; // I think that one is mostly used in python, should it be exposed in c++ as a macro ? . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Jeudi 16 Février 2017 13:54:11; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > About a possible implementation for the following syntax:; > msg_info () << ""Implicit 'this'""; msg_info ( this ) << ""Explicit""; msg_info (; > "" Something else "" ) << ""Hep"";. > I finally have one that seems to work on gcc and on visual studio.; > You can try it one-line at: http://www.cpp.sh/3xvfk. > I have a question to you @matthieu-nesme , @thomas-lemaire , @nurbal . I; > really like the implicit version but at the same time I fear using complex; > MACRO trick. What do you think ?. > DM. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722:11,simpl,simplicity,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281041722,2,['simpl'],['simplicity']
Usability,I made a quick POC using constructor delegation (c++x11) in; https://github.com/SofaDefrost/sofa/tree/constructor_delegation. (I messed up with the branch so only have a look at how I factorize the constructors in; RegularGridTopology.cpp & GridTopology.cpp). . To me this looks quite an improvement over the existing approach but maybe I made mistake or there is scenario in which we will have trouble if we generalize this...so any feedback from c++ you (guru or not) will be appreciated.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/274#issuecomment-302061194:434,feedback,feedback,434,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/274#issuecomment-302061194,2,['feedback'],['feedback']
Usability,"I made the code more concise, more efficient and clearer to me. It also removes the need of the variable which was initially shadowed. Let me know if you agree/disagree.; I also merged master.; I suggest also to move the methods definitions in the cpp file, but I did not want to be out of the scope of this PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840:49,clear,clearer,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2987#issuecomment-1152101840,2,['clear'],['clearer']
Usability,"I most definitely agree with you, this is very annoying. In fact, I have a custom build of the main SOFA executable just for this. As of now, there is no mechanism I know of that will forward `sys.argv` correctly. The simplest and by far the most natural solution would be to forward anything happening after `--` to `sys.argv`. . Unless there is a compelling reason not to do so (@damienmarchal ?), I'll give it a quick shot soon.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323679624:218,simpl,simplest,218,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-323679624,2,['simpl'],['simplest']
Usability,I noticed several flaw (or hard to understand) with the way mass and totalMass interact in DiagonalMass compared to what is done in UniformMass. . eg: ; - totalMass is set as readOnly in DiagonalMass while it is not in UniformMass; - despite totalMass is readOnly the value can still be changed in the scene file (so I wonder that the readOnly flag should be renamed to something that reflect what is it used for :)); - despite totalMass is readOnly there is no error message indicating to the user that the value he gave in his scene is simply dropped and that he should not use this flag. ; - the totalMass parameter is re-computed in the un-specialized implementation of the reinit function... but the specialization for rigid/vec and so on are not forwarding to this un-specialized implementation but the to implementation in-herited from the parent. (Is this really what we want ? This look a very weird design to me and I suspect problems on this forwarding to the parent.). ; - f_mass data (mass) field also seems to be a readOnly component (it seems deduced from massDensity and volume of the elements) but it is not tagged in the same way as totalMass. Why ? . Any feedback or confirmation/or not on these topics would help me to write the correct test. . DM.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/36:538,simpl,simply,538,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/36,2,"['feedback', 'simpl']","['feedback', 'simply']"
Usability,"I propose a more readable code for the component BruteForceDetection. It is a crucial component, used in many Sofa scenes, and yet it is hard to understand what it does.; Among the changes I propose:; - Split giant functions into multiple smaller functions; - Give meaningful names to functions, variables and types; - Merge simple operations which was hard to read into simple expressions; - Add a lot of comments. The algorithm stays the same. Note the number of lines is larger than before. It is the price for readability. It is mainly due to the several functions I added. I did not notice any performances drop. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1999:325,simpl,simple,325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1999,2,['simpl'],['simple']
Usability,"I propose to simply remove the `projectForce` Data from this PR, as this debug feature is not essential, and you have it in your own fork.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-292125250:13,simpl,simply,13,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-292125250,2,['simpl'],['simply']
Usability,I quickly applied a simple formatter online and finished manually. This file was a mess.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614500540:20,simpl,simple,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1335#issuecomment-614500540,2,['simpl'],['simple']
Usability,"I removed the check for a present topological mapping.; With the check a simple setup like. ```; TriangleSetTopologyContainer; TriangleSetTopologyModifier; MechanicalObject; TriangleCollisionModel with tag CarvingSurface; ```. is not recognized as a valid model for carving. Cheers,; Paul. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3276:73,simpl,simple,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3276,1,['simpl'],['simple']
Usability,"I saw that `addSubMBKToMatrix` was not used in the SOFA code base, so I removed it savagely. I don't know the consequence of it. I would like feedback. Of course, if it is decided to remove it, I'll add the deprecated flags in this PR. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2244:142,feedback,feedback,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2244,1,['feedback'],['feedback']
Usability,I see @fredroy you requested changes. I think it is clear now?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1180100688:52,clear,clear,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3115#issuecomment-1180100688,2,['clear'],['clear']
Usability,"I see the difference of point of view between you. Guillaume wants the dashboard to show the absolute current state of Sofa, with all failing tests marking the commits as ""broken/need to be fixed""; Damien sees more the average Sofa contributor point of view: ""did I break something?""/""is Sofa better or worse with my last commit"". **_Would it be acceptable**_ to add a simple checkbox on the dashboard, to filter the *_OpenIssue tests ? This way, open issues don't polute the workflow of people not concerned/competent with them. ; By default this option would be disabled. The same for pull request, new failing tests (marked as _OpenIssue) should not be marked as failures during the pull request, since they do not introduce new malfunctions but only reveal them, which is (in my opinion) a step toward the good direction, ie kind of an improvement ?. Once fixed, *_OpenIssue tests should be renamed and kept in the tests base as normal regression tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585:369,simpl,simple,369,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/52#issuecomment-261500585,2,['simpl'],['simple']
Usability,"I see what you want to do and of course it would be much more faster and simpler to add a new feature.; But I'm very relunctant to add an extra flag if it is redundant with others. . I would prefer to see a solution based on refactoring isRequired(), possibly with an hasDefaultValue() so we come up with a consistant and clear behavior. . EDIT:; My current thinking is thus:; - set isRequired() to true by default; - add an hasDefaultValue() (possibly implemented by using std::optional<> around Data::defaultvalue)); - change the code in BaseObject::init(); ```cpp; for(auto data: this->m_vecData); {; if (data->isRequired() && !data->isSet()); {; msg_error() << ""Required data \"""" << data->getName() << ""\"" has not been set. (Current value is "" << data->getValueString() << "")"" ;; }; }; ```; So it only warn if required and there is no default value. ; Update the GUI's so it can handle the isRequired + hasDefaultValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707:73,simpl,simpler,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1675#issuecomment-762259707,4,"['clear', 'simpl']","['clear', 'simpler']"
Usability,"I see, thanks to have a look at it.; Au secours encore un reinit! ;). Could we find a way to clear/empty the python environment rather than deleting and creating a new one?. I guess the numpy problem comes from PythonEnvironment.cpp:70 ^^",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284732397:93,clear,clear,93,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/193#issuecomment-284732397,2,['clear'],['clear']
Usability,"I see. :) What do you guys think about a CMake option for explicitly allowing to include non-LGPL parts in the SOFA build (default ON to stay compatible, and maybe even tag it as advanced option)? The idea is that if this switch is off, all the non-LGPL parts (or non-compatible parts) like the applications and a few plugins don't even show up for configuration anymore (technically the add_directory() call into these directories is never made in that case). Currently I have to bundle our own SOFA tarball for the purpose of getting rid of the non-LGPL parts and patch the build system a little bit to, in a nutshell, accept that parts are missing. I can continue to do so, but I'm also interested in contributing something like that. I imagine to follow the license rule mentioned in the top-level readme file: Exclude a few directories in principle and dynamically lookup the plugins if they are LGPL or not. This way, plugin developers wouldn't need to add a list entry somewhere depending on the license. They would just need to follow a convention in order to make the license determinable by the script. Could be as simple as a LICENSE.txt file or even the implementation of the getModuleLicense() function, which should be easy to parse (and is only missing in a single plugin at the moment). Opinions?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943:1125,simpl,simple,1125,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/139#issuecomment-275626943,2,['simpl'],['simple']
Usability,"I start in advance the lifecycle process for v23.06; I am looking for feedback if anything is wrong in my first changes, once this is validated I will proceed to the entire code base. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3634:70,feedback,feedback,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3634,1,['feedback'],['feedback']
Usability,"I still do not get the interest of storing `m_gridDim`. What is the limitation of a simple function? So you never have to change the value of this variable to keep it consistent. If it was in a data you want to plug in a Data/Engine graph, it would indeed be necessary to store it, but it is not the case here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259:84,simpl,simple,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/270#issuecomment-305409259,2,['simpl'],['simple']
Usability,"I suggest to add a message in GUI that a newer version of SOFA is available if an old version is used. I would look like:. ![image](https://github.com/sofa-framework/sofa/assets/10572752/4aeaabcf-ec81-4585-b53c-9a8f24ac68f1). I chose to rely on Qt because otherwise it requires a new lib for the http request, and Qt is already here. But having Qt is not enough. I have an error related to ssl (similar error to https://stackoverflow.com/questions/53805704/tls-initialization-failed-on-get-request). It requires additional components in the Qt installation. I did not try it myself because it changes the installation process of SOFA. So before going further, we need to conclude that this feature is desirable (and is not a gadget). If it is, we can decide to rely on Qt and its additional component, or to go with a simpler C++ library (https://github.com/JosephP91/curlcpp for example). The second solution would open the version checker to ImGui. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4648:818,simpl,simpler,818,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4648,1,['simpl'],['simpler']
Usability,"I switched to the dark side, running emacs as my IDE :smiling_imp:, and I was testing it on SOFA's codebase. (If you like coding & navigating through SOFA's codebase without having QtCreator transforming your laptop into an airplane, you should try it, it's great!) ; Anyway, I'd like to suggest adding some stuff to the .gitignore file:. * emacs auto-generates autosave files that have the following formats: `#*` and `~*` ; * When running emacs as an IDE, an emacs package called `projectile` creates a file called `.dir-locals.el`, containing project configuration, compilation, and running instructions for emacs in the project's root folder.; * Finally, Emacs uses `clangd` or `ccls` as its language servers. these programs store their index (LSP data for the project's codebase) in `.cache/` and `.ccls-cache/` respectively. clangd & ccls both require cmake to generate a `compile_commands.json` file, which we also don't want to be committed in the git repository. I also noticed that SOFA doesn't have a `.clang-format` file. A clang-format file gives great hints to contributors, regarding the formating guidelines for SOFA. This .clang-format file respects the [coding guidelines described here](https://www.sofa-framework.org/community/doc/programming-with-sofa/guidelines/); ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2884:1113,guid,guidelines,1113,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2884,3,['guid'],['guidelines']
Usability,"I think the problem you are raising here is a more general issue in Sofa. ""Engine components"" should be used seamlessly in Sofa, without the need for a distinction. After all, as you said, they are nothing but ""components"" in the sense that they are put in your python scene just like the others, with a createObject, and are visible in the scene graph, just like the others.; Sadly, DataEngines in Sofa needs to be manipulated with care, because their behavior changes drastically from their BaseObject counterpart: They do not respect the classical execution order of the scene graph, they can be called multiple times per animation steps (or not at all), etc. If their use in Sofa wasn't so different from the rest of the Sofa components, I would also vote for a simpler name, such as PyComponent vs PyScript for the current PythonScriptController. Newcomers in Sofa tend to mix up DataEngines with standard components, ending up with behaviors that they do not understand, as their code in not executed when they expect it to be for instance.; But I guess the subject is drifting a little bit towards the Data-update topic on gitter ;); Maybe for now it's not so important to rename anything, and we should maybe wait to see how things evolve with the animation loop and usages of DDGNodes in Sofa...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802:766,simpl,simpler,766,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406624802,2,['simpl'],['simpler']
Usability,"I think this is because you need to call the bwdInit after the init and addContact calls when this parameter is used (by checking quickly the code). It is harmless when the template is Vec3D but it prepares the computation for when you want to keep the orientation -> again this is really a bad API and might require some refactoring. . If you still have the diff locally, could you try this ? I guess the usability of your feature would really gain from this if it was working. But if this doesn't make any change, I am ok with the state of the PR. . Tell me how it goes !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4801#issuecomment-2235862086:406,usab,usability,406,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4801#issuecomment-2235862086,2,['usab'],['usability']
Usability,I thomas...I think something goes wrong in your PR as there is more than thousand file changed :) . I support the idea of removing one of the way to handle vector serialization in sofa. When your PR will be readable I will provide you with more feedback :),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/328#issuecomment-314191421:245,feedback,feedback,245,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/328#issuecomment-314191421,2,['feedback'],['feedback']
Usability,"I totally agree with the idea to limit dependencies, as a general state of mind. (not only in this particular case); +1 to backport the commits that cut boost dependency, though I have no idea how simply doable it is... :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473:197,simpl,simply,197,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/316#issuecomment-313043473,2,['simpl'],['simply']
Usability,"I tried it with a tetrahedron beam with a TetrahedronFEMForcefield (not parallel) and I don't have a speed up, it is quite the contrary : . ```; Parallel : 14.7546 FPS. 2 	 0.04	 1 	 61.29	 64.18	 62.09	 0.56	 62.09	 99.59	..solve; 3 	 0.04	 1 	 61.29	 64.18	 62.09	 0.56	 62.09	 99.59	...Mechanical; 4 	 0.06	 1 	 1.78	 2.54	 1.93	 0.14	 1.93	 3.09	....ComputeForce; 4 	 1.99	 1 	 1.01	 1.63	 1.20	 0.11	 1.20	 1.93	....ComputeRHTerm; 4 	 3.20	 1 	 50.63	 52.92	 51.24	 0.43	 51.24	 82.18	....MBKBuild; 5 	 3.20	 1 	 50.63	 52.92	 51.24	 0.43	 51.24	 82.18	.....CG-setSystemMBKMatrix; 6 	 3.20	 1 	 0.02	 0.02	 0.02	 0 	 0.02	 0.03	......getContributors; 6 	 3.22	 1 	 0.01	 0.01	 0.01	 0 	 0.01	 0.02	......buildMappingGraph; 6 	 3.23	 1 	 0.25	 0.82	 0.31	 0.08	 0.31	 0.50	......InitializeSystem; 7 	 3.23	 1 	 0.15	 0.40	 0.19	 0.04	 0.19	 0.30	.......resizeSystem; 7 	 3.41	 1 	 0.07	 0.40	 0.11	 0.05	 0.11	 0.18	.......clearSystem; 7 	 3.53	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.02	.......initializeLocalMatrices; 6 	 3.54	 1 	 50.34	 52.60	 50.89	 0.41	 50.89	 81.62	......AssembleSystem; 7 	 3.54	 1 	 50.31	 52.58	 50.87	 0.41	 50.87	 81.58	.......buildMatrices; 8 	 3.54	 1 	 50.03	 52.24	 50.56	 0.40	 50.56	 81.10	........buildStiffness; 8 	 54.11	 1 	 0.28	 0.45	 0.30	 0.03	 0.30	 0.48	........buildMass; 8 	 54.40	 1 	 0 	 0 	 0 	 0 	 0 	 0 	........buildDamping; 8 	 54.40	 1 	 0 	 0 	 0 	 0 	 0 	 0 	........buildGeometricStiffness; 7 	 54.41	 1 	 0 	 0 	 0 	 0 	 0 	 0 	.......projectMappedMatrices; 7 	 54.41	 1 	 0.02	 0.03	 0.02	 0 	 0.02	 0.03	.......applyProjectiveConstraint; 4 	 54.43	 1 	 7.47	 8.01	 7.68	 0.11	 7.68	 12.32	....MBKSolve; 5 	 54.57	 1 	 7.31	 7.85	 7.52	 0.11	 7.52	 12.06	.....CG-Solve; 4 	 62.12	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.02	....UpdateVAndX. --- . Normal : 27.3678 FPS. 2 	 0.04	 1 	 37.97	 39.96	 38.38	 0.34	 38.38	 99.38	..solve; 3 	 0.04	 1 	 37.96	 39.95	 38.38	 0.34	 38.38	 99.37	...Mechanical; 4 	 0.06	 1 	 1.70	 2.24	 1.88	 0.12	 1.88	 4.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717065958:927,clear,clearSystem,927,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717065958,2,['clear'],['clearSystem']
Usability,"I understand completely. Here, we are not talking about bringing back `getMeshTopology`. We are saying that both `getMeshTopologyLink` and `getMeshTopology` are the same. Following #744, both should be removed. Here we are simply talking about removing the duplicated one, even if at some point it should be also be removed and replaced by either a link or a new **getTopologies()** (plural) method that makes it clear we can have more than one topology in the context.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605887979:223,simpl,simply,223,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1297#issuecomment-605887979,4,"['clear', 'simpl']","['clear', 'simply']"
Usability,"I vote for no warning message, and no global switch! **Keep it light and simple.**; The only case where you really expect to have the string `""[1,2,3]""` is for Data<SVector> that would report a problem for `""1,2,3""`, and the fix is simple (simply add some `""""`). But frankly who was benefiting from that?!. Indeed we do not want warning messages when converting scalars, but we can easily add a test for specific types (float, bool, int...). At least everything would be clearly exposed in the code. Also, I propose that if you pass a Node, a BaseObject or a Data, it uses their getLinkPath (defined in the bindings, i.e. `""@/path/from/root/node""`, `""@/path/from/root/node/myobject""`, `""@/path/from/root/node/myobject.mydata""` ). It would be so useful when creating Links that are required during creation (like the mapping's inputs).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656:73,simpl,simple,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-306712656,8,"['clear', 'simpl']","['clearly', 'simple', 'simply']"
Usability,I would be glad to have feedback on this one...especially the switch from sofa::simulation::Node::Sptr to sofa::core::sptr<>,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-703541126:24,feedback,feedback,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-703541126,2,['feedback'],['feedback']
Usability,"I would like to add some new functions to the visualization in TetrahedronFEMForcefield:. 1) In the visualization of Von Mises Stress, the option ""_showVonMisesStressPerNode_"" shows the stress for each node:; ![VisualStress01](https://user-images.githubusercontent.com/56633656/234069177-73cab3bc-9c3a-408d-a0b9-02a2acaa6c1c.png); while the option ""_showVonMisesStressPerElement_"" computes the stress in another way:; ![VisualStress05](https://user-images.githubusercontent.com/56633656/234069221-f5b8d328-24e1-45c7-9250-c68bcf4422eb.png); However, my desired color map of the stress is like the following image (using node stress data):; ![VisualStress04](https://user-images.githubusercontent.com/56633656/234069253-030154aa-f3c1-4bff-9d92-eccffd3dbc45.png); Compared to the visualization with ""_showVonMisesStressPerElement_"", this color map accords more with my intuition of the stress forces (while the feet are pressed).; Therefore, I would like to add a new option ""_showVonMisesStressPerNodeColorMap_"" to show this color map. 2) I would like to add an option ""_showGapBetweenElements_"" to activate/deactivate drawing the gap between the elements, in order to show a smooth color map:; ![VisualStress07](https://user-images.githubusercontent.com/56633656/234069288-96543e38-47f5-44c7-8c3d-f813fe7557cd.png). 3) I would like to add an option ""_showForceField_"" to decide if we draw the forcefield of the current object or not. This will be useful when we have several soft tissues and we want to focus on one of the objects:; ![VisualStress08](https://user-images.githubusercontent.com/56633656/234069316-194be9c0-1abb-4380-a7e0-cad443d74206.png); ![VisualStress09](https://user-images.githubusercontent.com/56633656/234069330-5e07339a-de8b-4ee0-ae73-df787b64ccbc.png). Finally I would like to note that the addition of the new functions does not change the visualization with previous settings. ______________________________________________________. By submitting this pull request, I acknowle",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3821:866,intuit,intuition,866,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3821,1,['intuit'],['intuition']
Usability,"I would like to schedule a hangout in the coming days to synchronize everyone's job on CI. I have the feeling that everyone is not up-to-date with the current CI status, and I came to the point I would not touch anything until I understand clearly what has been done recently. ; This includes jenkins updates, use of tests ci scripts, etc.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576:240,clear,clearly,240,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/186#issuecomment-282669576,2,['clear'],['clearly']
Usability,"I would rather rename every ""scenes"" dir in ""examples"" to follow plugin guidelines.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531:72,guid,guidelines,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/299#issuecomment-308367531,2,['guid'],['guidelines']
Usability,"I'm actually a bit uncertain regarding your proposal @damienmarchal, I thought about it before this simple PR; My conclusion was the following: the more colors, the more confusing it can be for the users. On our hand, we want users to actually fix their scene for in both cases: deprecation and warnings. Having a single color for this purpose makes sense to me: simpler to read and simpler to understand for the user -> there is something to fix in the scene !. Maybe there is cases of warnings not requiring a scene fix which I am not thinking about..",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1575027962:100,simpl,simple,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3914#issuecomment-1575027962,6,['simpl'],"['simple', 'simpler']"
Usability,I'm always amazed by code duplicated just because of template specialization of equivalent types: Vec3f vs Vec3d and Rigid3dType vs Rigid3fType. The is clearly not the way to do that. TODO:; - [ ] RestShapeSpringForceField.cpp; - [ ] FixedConstraint; - [ ] FixedPlaneConstraint; - [ ] LinearForceField; - [ ] PositionBasedDynamicConstraint. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/802:152,clear,clearly,152,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/802,1,['clear'],['clearly']
Usability,"I'm always in favor of improving user experience and renaming coder's name by something with a mechanical meaning fit in this :) . For the PR, i suggest to first rename the class and filename, then adding an alias ""RestShapeSpringForceField"". So users are warned when using RestShapeSFF to use SpringConstraint.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3903#issuecomment-1568253488:33,user experience,user experience,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3903#issuecomment-1568253488,2,['user experience'],['user experience']
Usability,"I'm looking for the ""-"" in the read to detect the intervals syntax:; 0-5 or 0-10-2 as well as --5-5 or 10--10. This intervals syntax using '-' was not of my own and I'm actually quite surprised and happy it was possible to fix the crash & endless loop that were in the code while preserving the syntax and backward compatibility. . Now all this discussion about performance rise my interest as I wonder if all this discussion have a measurable impact on performances. As usual I cannot prevent myself to make a small benchmark. ; The benchmark is implemented in the test class so that we will be able to detect performance regression in the future. . First there is a +200ms variation between the same run so I average several runs which gaves these numbers: ; strtoll alone tooks 1645 ms to ""read"" 1 000 000 time a size 10 array. ; strtoll+early check of '-' tooks 1654 ms to ""read"" 1 000 000 times the same array. ; ; strtoll alone tooks 7758 ms to ""read"" 100 000 time a size 1000 array. ; strtoll+early check of '-' tooks 7719 ms to ""read"" 100 000 times the same array. . strtoll alone tooks 8464 ms to ""read"" 1000 time a size 100 000 array. ; strtoll+early check of '-' tooks 8403 ms to ""read"" 10000 times the same array. . So we are discussing about un-measurable effect and I switched to your version because it contains less lines of code and looks simpler which is a very good property. . Is there still question about this PR? . EDIT: and the dashboard is now green on linux. @bcarrez please finish #267 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828:1356,simpl,simpler,1356,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271#issuecomment-302814828,2,['simpl'],['simpler']
Usability,"I'm using Windows and compiling with Visual Studio. Thanks for the fixes made with PR #568 . I think there's one line that still needs to changed. When I ran the updated version, I received the following error: . [ERROR] [FileRepository] File docs/runsofa.html NOT FOUND in :C:\git\sofaframework\sofa\master\build\bin/share/sofa/gui/runSofa/resources/:C:/git/sofaframework/sofa/master/build/share/sofa/gui/qt/resources. I think the issue is in line 154 of sofa/applications/projects/runSofa/Main.cpp. ; Instead of:; GuiDataRepository.addFirstPath(SetDirectory::GetRelativeFromProcess(""../share/sofa/gui/runSofa/resources/"")) ;; ; I think it should be:; GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources/"").c_str()) ; . ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/577:516,GuiD,GuiDataRepository,516,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/577,2,['GuiD'],['GuiDataRepository']
Usability,"I'm waiting someone having interest on that topic so we can modernize the prefab's using the added feature of sp3 and experience gained since sofapython2. . Short answers to your questions: ; - should they be located in the SofaPython3 plugin?; It is unclear to me about what you are talking about, prefab are already in SofaPython3. Are you in fact talking about the prefab that are in stlib ? ; If this is the case, it make sense to have prefab in SofaPython3 to demonstrate a ""standard"" way of doing a prefab through ""examples"", there could also have a standard prefab library, but I see no problem in having that in stlib or any other third party plugin. That's said, I don't consider the prefab in stlib mature enough for such move, first, because they are still implemented as they were back to python2 time, and up to now, not a lot of people have expressed interest in changing that to move forward; . - should we create many level of abstractions/prefabs?; From the experience in stlib there is always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:1132,usab,usability,1132,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279,2,['usab'],['usability']
Usability,I've also mark const the source arguments from both `baseVector2MultiVector` and `multiVectorPeqBaseVector` so that it is clear that the source will never be changed by those two functions.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1248#issuecomment-579771707:122,clear,clear,122,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1248#issuecomment-579771707,2,['clear'],['clear']
Usability,"I've just cleaned the repo, removed unused mesh files.; It's 1.7MB of stl files now. Is it still too much ? I could also simplify the meshes but, yeah... it won't be as ""pretty"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1079011710:121,simpl,simplify,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2804#issuecomment-1079011710,2,['simpl'],['simplify']
Usability,I've just fixed the broken history for the PR so we can see the simple two commits which concern this PR. Hope we can discuss it next week.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1788#issuecomment-776623903:64,simpl,simple,64,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1788#issuecomment-776623903,2,['simpl'],['simple']
Usability,"If I remember correctly the discussion about the packages naming was something like the following.; The existing names like ""SofaGL"" is:; 1) ambiguous because it is not clear if it is sofagl::blabla (#include <sofagl/blabla>) or sofa::gl::blabla (#include <Sofa/blabla>) ; 2) inconsistant because there was a lot of packages that does ""how they want"" . There was strong agreement to have a non ambiguous and respected convention. ; The convention selected was to use the ""."" to indicate a sub-module because this is both the c++20 and python convention and there was a systematic translation to the namespaces separators ""::"" and path separators ""/"". . Maybe am I wrong but I think there is kind of a consensus here. . Maybe where there is more room for discussion is on how do we name and handle packages/repositories. ; We could have Core and GL subdirectories the Sofa repository. But it was considered as desirable to move some parts in separated repositories ; (while preserving the fact they are sub-modules of Sofa). . To make that clear we needed a symbol. ; Sofa_GL was considered but ""_"" first it is widely used without very clear semantics so it would have probably been misleading, second is that it was introducing a fourth symbol (in addition to / . and : ) ; Sofa.GL was considered and we found that as it was not used anywhere (in directories) and thus it has yet no associated semantics plus it match the symboles we already use in import ... ; so well it was like a perfect match :). I still think ""."" is clearly a much clearer and easier symbol to use compared to ""_"". All that says... this issue is only a consequence of allowing external repository to contain code that are part of the""Sofa"" module. I'm not sure this kind of extern sub-modules is wise (or just temporary) but not allowing this would solve the need for think kind of convention.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2503:169,clear,clear,169,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2503,5,['clear'],"['clear', 'clearer', 'clearly']"
Usability,"If the Data was simply renamed (but is having the same role as previously), it is not a big deal to have a alias. If the Data is no longer used, backward compatibility will have to be done in the 'parse' function (to fill others Data for instance), in that case, it is easy to add a deprecated message. Note that the initial Data should not exist anymore.; As an example, you can look at RigidMapping, where the Data 'repartition' was removed, but the 'parse' function still ensures backward compatibility and log a deprecated msg.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823:16,simpl,simply,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255372823,2,['simpl'],['simply']
Usability,"Implement missing methods to work in FreeMotionAnimationLoop. --> simply took what was implemented in FixedProjectiveConstraint. Also add a new feature to keep the constraint applied after all the key event have passed. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5025:66,simpl,simply,66,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5025,1,['simpl'],['simply']
Usability,"In #3838 we agreed on the misleading variable `symmetricMatrix` in the MechanicalParams.; I propose here a simple change using `m_supportOnlySymmetricMatrix` et associated read/write access function updates. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3861:107,simpl,simple,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3861,1,['simpl'],['simple']
Usability,"In #3905 Fred cleaned the way to use friction and frictionless contact solving using Lagrange multipliers. However, a discussion remains : how to have a cleaner, simpler and more generic way to define friction in SOFA simulation, possibly having different friction parameters per objects. Also related to #2014",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3953:162,simpl,simpler,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3953,1,['simpl'],['simpler']
Usability,In PR https://github.com/sofa-framework/sofa/pull/217. ```cpp; #ifdef BARYCENTRIC_MAPPER_TOPOCHANGE_REINIT; // handle topology changes in the From topology; virtual void handleTopologyChange(core::topology::Topology* t);; #endif // BARYCENTRIC_MAPPER_TOPOCHANGE_REINIT; ```; Is coding to change to runtime condition instead of #IFDEF. . @JeremieA pointed that this rise consistency issues in how the topology changes are handled into the mapping. . Maybe we should keep that in mind and in some future do something (eg making a test that should be done all mapping to validate a consistent and clear behavior).,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/223:594,clear,clear,594,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/223,1,['clear'],['clear']
Usability,"In SimpleAPI and SofaPython3 (surely XML too), ; if a data link is set to a data of a not-yet created BaseObject, `isSet` is not true. In the newly created tests, the last one would be false without the fix in BaseData. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5081:3,Simpl,SimpleAPI,3,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5081,1,['Simpl'],['SimpleAPI']
Usability,"In addition to a simplification, it allows also to automatically use the newly introduced constructors from `vector_device`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4864:17,simpl,simplification,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4864,1,['simpl'],['simplification']
Usability,"In createObject... When you given an object as argument instead of a string the binding convert it (with str). This is problematic in many cases eg. with a list it is converted with the bracket (ie: '[' ) and comma as separator. To resolve that I add a method that, if a list is passed as an argument, convert it as a string following the sofa style (without comma and bracket). CHANGELOG for @hugtalbot & @guparan :; [SofaPython]: change the way createObject() handle its arguments to simplify scene writing + batch of tests.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286:486,simpl,simplify,486,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286,1,['simpl'],['simplify']
Usability,In favor of a new sofa_generate_package function (with named arguments). It's never clear what the arguments passed to this function are for. Now you have to know to use it :). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/909:84,clear,clear,84,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/909,1,['clear'],['clear']
Usability,"In nearly every .cpp there is explicit template spcialization with such kind of lines:. ```cpp; #ifndef SOFA_FLOAT; template class SOFA_GENERAL_ENGINE_API PointsFromIndices<Vec3dTypes>;; #endif //SOFA_FLOAT; #ifndef SOFA_DOUBLE; template class SOFA_GENERAL_ENGINE_API PointsFromIndices<Vec3fTypes>;; #endif //SOFA_DOUBLE; ```. Aren't these lines useless given that the template are already specialized when they are added ; in the factory:. ```cpp; int PointsFromIndicesClass = core::RegisterObject(""Find the points given a list of indices""); #ifndef SOFA_FLOAT; .add< PointsFromIndices<Vec3dTypes> >(); // .add< PointsFromIndices<Rigid3dTypes> >(); #endif //SOFA_FLOAT; #ifndef SOFA_DOUBLE; .add< PointsFromIndices<Vec3fTypes> >(); // .add< PointsFromIndices<Rigid3fTypes> >(); #endif //SOFA_DOUBLE; ```; If this is the case why not simply removing them ? ; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/806:834,simpl,simply,834,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/806,1,['simpl'],['simply']
Usability,"In sofa, some component allows to specify colors by writing color=""1,0,0"" and ""red"" while others just allow color=""1,0,0"". This is a consistency issue (very very bad for the user experience). ; So we should unify this in all sofa for the next release. . DM.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/64:174,user experience,user experience,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/64,1,['user experience'],['user experience']
Usability,"In term of easy task for newcommers, ; finding excessive calls to getValue() is clearly one of them (same for begin/end vs accessor).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3503#issuecomment-1325242993:80,clear,clearly,80,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3503#issuecomment-1325242993,2,['clear'],['clearly']
Usability,"In the Gauss-Seidel implementation from the class GenericConstraintSolver, an array called 'errF' is used to store the error forces from ConstraintResolution objects:. https://github.com/sofa-framework/sofa/blob/v18.12/modules/SofaConstraint/GenericConstraintSolver.cpp#L870. This array have a static size of 6. Consequently, in the case the user uses a custom ConstraintResolution having more than 6 constraints to resolve (nbLines > 6), it results in a buffer overflow during the loop of the second phase of the Gauss-Seidel algorithm, and there is nothing to prevent it:. https://github.com/sofa-framework/sofa/blob/v18.12/modules/SofaConstraint/GenericConstraintSolver.cpp#L937. I am aware this is not really a bug but rather a limitation of the constraint resolutions and it is very specific. But maybe we should at least prevent it by adding a simple assertion `assert(nb <= 6);` at line 934 for example. I personnally encountered this issue and it cost me time to figure it out. By the way, I noticed there is the same kind of issue with the array called 'tempF':. https://github.com/sofa-framework/sofa/blob/v18.12/modules/SofaConstraint/GenericConstraintSolver.cpp#L997. ______________________________________________________. Suggested labels: bug (minor)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/914:850,simpl,simple,850,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/914,1,['simpl'],['simple']
Usability,In the case of the Light (and actually this is true to most of the sofa component) I see several very simple tests to add to validate the inputes. But you are totally right this cannot be done automatically (unless with a kind of ; code-path/coverage analysis) so the developper have to write at least the easy one.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230:102,simpl,simple,102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/73#issuecomment-264160230,2,['simpl'],['simple']
Usability,"In the guidelines, vector data must include an “s” to specify that there is several info",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2541:7,guid,guidelines,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2541,1,['guid'],['guidelines']
Usability,"In the new version, a default name is generated and if it does not suit your needs you simply need to implement a single function called CustomTemplateName function:; ```cpp; static std::string CustomTemplateName(); { ; return ""CustomName;; }; ```. Removal of nullptr in className, templateName, typeName; ----------------------------------------------------------------------------; In Base.h the className, templateName, typeName are static templated function with the templated type also provided as a parameter (and nullptr if not provided). If think that having the parameter duplicating the template one is not good as it is misleading on the purpose of the function.; In the following example ; ```cpp; MyObject* ptr;; Base::className(ptr); ; ```; You don't see this is a templated method and you have no idea what 'ptr' is for, and you don't even know if putting a nullptr will work or not. ; Using the templated only syntax is more clear on the role of the function; ```cpp; Base::className<MyObject>(); ; ```; Or if you have an object instance; ```cpp; Base::className<declspec(obj)>(); ; ```. Most common code update pattern; ============================; The most common compilation problem you will encounter with non updated external plugin is related to the overriding of getTemplateName or templateName() method. This method is now now considered as final and thus it is not possible to override it anymore. ; To update old code like this: ; ```cpp; MyClass : public BaseObject; virtual std::string getTemplateName() const { return templateName(); } ; static std::string templateName(const CapsuleCollisionModel<DataTypes>* = nullptr); {; return DataTypes::Name();; }; ```; You can remove the code as the default name generation mecanisme can handle that for you automatically using the ""Name"" . . In the case if your DataTypes does not have a Name() function or if some of the class template parameters should not be exposed as runtime template then you need to implement your custom ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1283:3039,clear,clear,3039,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1283,1,['clear'],['clear']
Usability,"In this PR I remove some of the un-needed create()/canCreate() function when they were simply forwarding to their parent creat()/canCreate() one.; ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1622:87,simpl,simply,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1622,1,['simpl'],['simply']
Usability,"In this PR:. - Added static class member `Visitor::runVisitorTask`; - Used `Visitor::runVisitorTask` in BaseMechanicalVisitor to replace all the boilerplate code; - Simplify the logic in `BaseMechanicalVisitor::processNodeTopDown` even though I have some concerns; - `Visitor::for_each` is now static; - `Visitor::for_each` accepts an optional string parameter giving the type of visitor ""fwd"" or ""bwd""; - `Visitor::for_each_r` is removed in favour of an overload of `Visitor::for_each`; - SOFA_VERBOSE_TRAVERSAL surrounds the calls of `debug_write_state_before` and `debug_write_state_after`, instead of the functions themselves. Doing that, it allows to actually compile the debug content of both function. And I noticed that they had compilation errors (we could not detect it as SOFA_VERBOSE_TRAVERSAL is never defined). My concerns:. 1. I wanted to use `Visitor::runVisitorTask` in other visitors than BaseMechanicalVisitor. But the logic is not the same. BaseMechanialVisitor is the only visitor checking the tags. Should we always check the tags? Also, the debug boilerplate code is not consistent over all the visitors.; 2. `Visitor::for_each` returns only the result of the last call in the loop. In another loop on the solvers at the beginning of `BaseMechanicalVisitor::processNodeTopDown`, we check the intermediate values. It is not consistent. I suspect that `Visitor::for_each` must also check intermediate values.; 3. In `BaseMechanicalVisitor::processNodeTopDown`, between the process of `mechanicalMapping` and `mechanicalState`, we don't check if `res == RESULT_PRUNE`. It means we do the process of `mechanicalState` even if the process of `mechanicalMapping` returned `RESULT_PRUNE`. It's not consistent with the rest of the code.; 4. It is not possible to define SOFA_VERBOSE_TRAVERSAL through cmake. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2125:165,Simpl,Simplify,165,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2125,1,['Simpl'],['Simplify']
Usability,"Including the development cycle and associated events in the CONTRIBUTING.md. Feedback most welcome. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3774:78,Feedback,Feedback,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3774,1,['Feedback'],['Feedback']
Usability,"Indeed @alxbilger , not compiled for 6 years. I would simply remove it.; You fixes are always welcome @maddin200 :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1967#issuecomment-811885973:54,simpl,simply,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1967#issuecomment-811885973,2,['simpl'],['simply']
Usability,"Indeed, it can be cumbersome to change simple values in the data inspector. Good point the video ;) but YouTube does not show it, is it private ?; When you change the data value, the data is updated as soon as the mouse moves left&right, correct ? I am no expert in UX, but it this the best way to do it",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007:39,simpl,simple,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413484007,4,"['UX', 'simpl']","['UX', 'simple']"
Usability,"Indeed, no example of the component was found, so I added a simple one: a beam under gravity",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3508#issuecomment-1331766967:60,simpl,simple,60,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3508#issuecomment-1331766967,2,['simpl'],['simple']
Usability,"Indeed, the naming is therefore pretty inappropriate, we will follow your guidelines ;); Thank you very much @matthieu-nesme . Isn't there a way of refactoring (inheritance) these components ? it would make things easier to understand, no?; Just curious, in which case the SpringForceField can be really useful ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346:74,guid,guidelines,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/248#issuecomment-295711346,2,['guid'],['guidelines']
Usability,"Initial test was very simple. This one exports at begin and every 5 steps, and the object it exports is deforming.; (and have all its _requiredplugin_ and should not show warnings). Illustrate than export every N steps works (issue #13). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1782:22,simpl,simple,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1782,1,['simpl'],['simple']
Usability,"Introduce a free function doing a simple loop in the general case, and use memset in the vector<Vec> case. The operator = on the vector object is faster than the loop. Performance improvements validated by https://github.com/alxbilger/SofaBenchmark/pull/29. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3284:34,simpl,simple,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3284,1,['simpl'],['simple']
Usability,"Introduce examples scenes for 4 cases of Euler explicit solver:; 1) Mass matrix is not diagonal and Euler is not symplectic: EulerExplicitSolver.scn; 2) Mass matrix is diagonal and Euler is not symplectic: EulerExplicitSolver_diagonal.scn; 3) Mass matrix is not diagonal and Euler is symplectic: EulerSymplecticSolver.scn; 4) Mass matrix is diagonal and Euler is symplectic: EulerSymplecticSolver_diagonal.scn. I did my best to create stable scenes, but it is not that simple with an Euler explicit solver. Especially if not symplectic. It comes at the price of very small time step sizes. This PR is based on #2163. It will need to be updated after #2165 is merged. [ci-depends-on https://github.com/sofa-framework/Regression/pull/15]",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2199:469,simpl,simple,469,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2199,1,['simpl'],['simple']
Usability,"Is there any scene to reproduce this error? ; Either already in the plugin SofaDistanceGrid, or if you could submit a simple scene to illustrate the problem ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417:118,simpl,simple,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1218#issuecomment-777528417,2,['simpl'],['simple']
Usability,Is this issue to guide devs @fredroy ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2402#issuecomment-1569836914:17,guid,guide,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2402#issuecomment-1569836914,2,['guid'],['guide']
Usability,"It is a good idea to finally remove the flag sofa_have_glew (it would be cool to remove it entirely in Sofa by the way), and I don't see anything wrong (code guidelines like prefixes etc, is not the point of this PR).; I dont know if we should flag this PR as ¨breaking¨ as some data have been removed (useVBO and isToPrint) ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392089:158,guid,guidelines,158,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069#issuecomment-499392089,2,['guid'],['guidelines']
Usability,"It seems like there is no way with the current implementation to set a default value to a DataFileName field. In fact, it is not possible at all to modify a value passed through a DataFileName. Neither setValue() nor read() etc. work, as the operator=() is made private...; Did I miss anything? otherwise, especially if DataFileName should be the official way of providing a file path to a component, this should be fixed. @damienmarchal, since it is about code cleaning and User Experience, I believe you might have nice inputs..? :); ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/321:475,User Experience,User Experience,475,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/321,1,['User Experience'],['User Experience']
Usability,It seems there is a problem on the CI with Centos. ; The compilation time that was around 1h increase to more than 10h since https://ci.inria.fr/sofa-ci/job/centos_clang-3.4_options/180/. We need to fix that. ; @matthieu-nesme when you have feedback on that can you report them here ?,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/178:241,feedback,feedback,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/178,1,['feedback'],['feedback']
Usability,"It was already marked deprecated but only in the documentation (comment).; It must be deprecated because it duplicates the functionality of two other visitors. It is clearer to call the two other visitors. In GenericConstraintSolver, `buildSystem_matrixAssembly` is divided into `parallelBuildSystem_matrixAssembly` and `sequentialBuildSystem_matrixAssembly` depending on the value of `d_multithreading`. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3393:166,clear,clearer,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3393,1,['clear'],['clearer']
Usability,"It was not possible to compile runSofa without activating SofaGuiQt, because GuiDataRepository was instantiated in SofaGuiQt library.; As GuiDataRepository seems to be rather generic and not tied to Qt, GuiDataRepository has been moved to SofaGuiCommon ; and allows runSofa to be compiled without enabling SOFA_GUI_QT. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599:77,GuiD,GuiDataRepository,77,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599,3,['GuiD'],['GuiDataRepository']
Usability,"It was pointed by @EulalieCoevoet that the callbacks update are only called when the modified data is accessed for reading. This has a consequence in the UX, when a data field value is changed in the inspector, the callback is only executed when data is accessed... but not when we click on the ""update"" or ""ok"" button. . It was thus suggested to trigger the callback by accessing the component state.; All other change are just cleaning and refactoring of the function. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3713:154,UX,UX,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3713,1,['UX'],['UX']
Usability,It would be much better to have it in Sofa implemented using simpleapi. And not in a reverting PR. _Originally posted by @damienmarchal in https://github.com/sofa-framework/sofa/issues/3464#issuecomment-1307358562_,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3469:61,simpl,simpleapi,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3469,1,['simpl'],['simpleapi']
Usability,It would be nice to have some feedback from @EtienneMenager @fjourdes @alxbilger @courtecuisse,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3888#issuecomment-1569740293:30,feedback,feedback,30,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3888#issuecomment-1569740293,2,['feedback'],['feedback']
Usability,"It's not perfect. The progress bar interacts with console messages (`msg_info`, `std::cout` etc), but it behaves well when the message is longer than the progress bar. Otherwise, both are mixed on a single line. It still does not behave correctly after a ctrl+c in a infinite loop (`runSofa -n infinite`). I also made some threading experiment in the case of infinite loop but no success. I wanted to add a command line option to hide the progress bar if needed. I wanted to add it only for BatchGUI, but it seems that parsing crashes for unkown arguments (the loading of the gui is after the parse). Maybe the help of @fredroy would be needed here (if we decide to go on).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089:22,progress bar,progress bar,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4168#issuecomment-1721325089,6,['progress bar'],['progress bar']
Usability,"It's simply an average found between the two points (in position/velocity/acc); What do you mean by ""aforementioned dynamic constraint fix"" ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/940#issuecomment-467077243:5,simpl,simply,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/940#issuecomment-467077243,2,['simpl'],['simply']
Usability,"Just my 2 cents (after the war) about this ```__str__``` stuff... . I don't know how to explain it clearly, but using the built-in ```str``` function to serialize objects in a createObject-specific format sounds weird to me, even if it works in our context. This is the first time we have to convert Sofa objects to string, it does not mean that converting sofa objects to string will only be needed for this specific purpose in the future. ; I am confident that we can find examples of bad variables usages in the code of Sofa : ""this var exists and seems not used by anyone, so I will use it to store my context-specific information without recompiling everything"". The wrong tool used for the good result, I don't know if you get me. . In a naive approach I would expect as a end-user, that issuing a ```print(mySofaStuff)``` from the sofa GUI built-in python console would return a human-readable string, a summary with the object class name, perhaps the object name, plus some useful infos. Getting either a path or a suite of numbers would be kinda disapointing in this context...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349:99,clear,clearly,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308102349,2,['clear'],['clearly']
Usability,"KE_BUILD_TYPE + Enable more plugins. ### [[DiffusionSolver] MOVE from image/extlibs to a real plugin](https://github.com/sofa-framework/sofa/commit/54f49d039aadaffd57a1d7f8ebab3af82e407674); I see no reason not to do that. Dependencies to DiffusionSolver are simpler this way. ### [[CImgPlugin] CLEAN include directory](https://github.com/sofa-framework/sofa/commit/1a617d5350f74ac4a816255960d92638a26cba1b); Sources moved to `src`. No more `../` horror in CImgPlugin include directories. ## Other changes. - [SofaHelper] FIX DynamicLibrary altered search path (Windows only) ; Needed to prefer `bin` libraries over neighboor libraries; - [SofaFramework] FIX typo in config.h.in; - [runSofa] Check if plugins dir exists before adding to PluginRepository; - [SofaTest] FIX SofaPython finding in *Config.cmake.in; - [plugins] ADD missing *Config.cmake.in files; Needed to use them as real plugins; - [All] Improve sofa_copy_libraries and sofa_install_libraries macros; Make them easier to use; - [CMake] Rename sofa_set_python_directory into sofa_install_pythonscripts; Clearer name in my opinion + using CMake multiValueArgs; - [CMake] Update package.cmake to enable plugins; Prepare package.cmake to produce binaries with all plugins from ""options"" configuration.; - [SofaImplicitField] FIX tests enabling; - [CMake] CLEAN package.cmake; - [SofaSimulationCore] Handle reload differently in SceneLoader::Listener; Needed to disable scene checks on reload.; - [SofaGraphComponent] Disable scene checks on reload; Needed by live editor (which reloads the scene every time the file is changed).; - [plugins] Remove commented lines in CMakeFiles. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1018:4274,Clear,Clearer,4274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1018,1,['Clear'],['Clearer']
Usability,Let's say it is a target (one would say a dream) to achieve more than a guide 😅,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2402#issuecomment-1571110655:72,guid,guide,72,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2402#issuecomment-1571110655,2,['guid'],['guide']
Usability,Let's see if we can make it cleaner and simpler!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453789725:40,simpl,simpler,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/218#issuecomment-453789725,2,['simpl'],['simpler']
Usability,Let's wait the 7 days for potential remark / feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/514#issuecomment-344212915:45,feedback,feedback,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/514#issuecomment-344212915,2,['feedback'],['feedback']
Usability,"LinearSolver.Ordering`. It is in `LinearSolver` because an ordering method is only used with linear solvers, more specifically sparse direct linear solvers. Only one ordering method is still in `LinearSolver.Direct`: `MetisOrderingMethod`. The goal is to move later this component in a plugin so that METIS is no longer a dependency of SOFA core. In the meantime, this method is still the preferred one for legacy reasons. Eigen-based solvers were problematic. In Eigen, everything is defined at compile-time, and it is not possible to use runtime polymorphism. Therefore, it was not possible to uncouple the solver itself from the ordering method. To comply with the new design, I introduced a factory that can be enriched in the new Metis plugin. This factory is able to register types and use runtime polymorphism using a few C++ tricks. The only concern is that the solvers in the factory will not use the algorithms from the `BaseOrderingMethod`. Instead, they use a simple string (defined in a `BaseOrderingMethod`), and its mapping to a type. This has to be registered in the initialization of the module. I tried hard to use the intelligence of the component instead of relying on a string and a factory, but the design of Eigen is not compatible. In order to not force the users to add an ordering method in their scenes, a default one is created automatically by the linear solver. It instantiates `MetisOrderingMethod` if it can find it, otherwise it's `AMDOrderingMethod`. Here are the tasks in a future PR:. 1. Create a plugin for Metis; 2. Move `MetisOrderingMethod` into this plugin; 3. Move some unit tests in this plugin; 4. Update the regression references; 5. Update `FillReducingOrdering`; 6. Remove METIS dependency in `LinearSolver.Direct`; 7. Create a new plugin for Scotch. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://gi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4477:1245,simpl,simple,1245,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4477,1,['simpl'],['simple']
Usability,"LinesCoils' />; 		<EdgeSetTopologyModifier name='Modifier' />; 		<EdgeSetGeometryAlgorithms name='GeomAlgo' template='Rigid3d' />; 		<MechanicalObject template='Rigid3d' name='dofTopo3' />; 	</Node>; 	. 	<Node name='InstrumentCombined'>; 		<EulerImplicitSolver rayleighStiffness='0.2' rayleighMass='0.1' printLog='false' />; 		<BTDLinearSolver subpartSolve='0' verification='0' verbose='0'/>; 		<RegularGridTopology name='meshLinesCombined'; nx='180' ny='1' nz='1'; xmin='0.0' xmax='1.0'; ymin='0' ymax='0'; zmin='1' zmax='1'; 		/>; 		<MechanicalObject template='Rigid3d' name='DOFs' showIndices='0' ry='-90'/> . 		<WireBeamInterpolation name='InterpolCatheter' WireRestShape='@../topoLines_cath/catheterRestShape' radius='1' printLog='0'/> ; 		<AdaptiveBeamForceFieldAndMass name='CatheterForceField' interpolation='@InterpolCatheter' massDensity='0.00000155'/> <!--stiff silicone E = 10000 MPa // 1550 Kg/m3-->	. 		<WireBeamInterpolation name='InterpolGuide' WireRestShape='@../topoLines_guide/GuideRestShape' radius='0.9' printLog='0'/> ; 		<AdaptiveBeamForceFieldAndMass name='GuideForceField' interpolation='@InterpolGuide' massDensity='0.00000155'/> 	. 		<WireBeamInterpolation name='InterpolCoils' WireRestShape='@../topoLines_coils/CoilRestShape' radius='0.1' printLog='0'/> ; 		<AdaptiveBeamForceFieldAndMass name='CoilsForceField' interpolation='@InterpolCoils' massDensity='0.000021'/> <!-- platine E = 168000 MPa // 21000 Kg/m3-->	. <BeamAdapterActionController name=""AController"" interventionController=""@IRController"" writeMode=""0""; timeSteps=""9.1 17.1 17.55 18.05 18.6 19.05 19.55 20.05 20.5 21 21.45 21.9 22.65 23.1 23.55 24.05 24.55 25 25.45 25.95 26.4 27.1 27.55 28.05 28.55 29 29.5 29.95 30.4 30.9 31.4 31.85 32.35 33.05 33.5 34 34.45 34.9 35.4 35.85 36.35 36.8 37.25 37.7 38.2 38.65 39.4 39.85 40.3 40.7 41.2 41.65 42.1 42.55 43 43.4 44.1 44.55 45 45.45 45.9 46.3 46.75 47.2 47.65 48.1 48.55 49 49.65 50.1 50.5 50.9 51.35 51.75 52.2 52.6 53.05 53.5 53.95 54.4 54.85 55.5 55.9 59.1 ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4833:5861,Guid,GuideRestShape,5861,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4833,1,['Guid'],['GuideRestShape']
Usability,"Looks like this particular case falls under the Euler angles singularities. The initial quaternion `q0` converted to Roll-Pitch-Yaw Euler angles has a pitch of `pi / 2`, which corresponds to a singularity case, i.e. there is no global and smooth solutions to the inverse problem of converting the rotation to Euler angles. In this particular case, one DOF is lost (I found the explanations of this quite intuitive and clear here: http://lavalle.pl/vr/node83.html ).; When we can afford it, a good way would be to only allow global parameterizations of SO(3) and simply not use Euler angles, but I guess we have reasons to have them in SOFA and have to deal with them.; I would not go to change anything in the `createQuaterFromEuler` or `toEulerVector` conversions functions, as to me they are valid as it and it is left to the user of Euler angles to know that they have to be used as their are, locally, as it is a local parameterization, i.e. not close to their singularities.; I guess this is what happened also in the random rotations failing tests.; What do you think about simply fixing our tests by excluding cases where quaternion `q0` is leading to a Euler angles singularity (here checking that pitch is not `pi / 2`), prior to converting them back to queternion `q1` ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376:404,intuit,intuitive,404,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4122#issuecomment-1698867376,8,"['clear', 'intuit', 'simpl']","['clear', 'intuitive', 'simply']"
Usability,Looks ok to me. Any one for a quick feedback on reviewing this fast-merge PR ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1761#issuecomment-770078796:36,feedback,feedback,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1761#issuecomment-770078796,2,['feedback'],['feedback']
Usability,Lots of weird stuff happening with those *_API (dllimport/dllexport) thingies 🥴; TIL I learnt that you cannot put it after the type if it is a reference (I suppose the `&` bothers the compilation); Seems better to put it always before the type.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2259#issuecomment-885610982:87,learn,learnt,87,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2259#issuecomment-885610982,2,['learn'],['learnt']
Usability,"Make contributors appear in headers.; Define clear policy on how, where set the credits. Revert [commit](https://github.com/sofa-framework/sofa/pull/1375/commits/6b87c5e72edbba68ab693b012920cb9a2ce5eb39)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1536:45,clear,clear,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1536,1,['clear'],['clear']
Usability,Many thanks for all your PR @untereiner . This looks simple and I trust you it is the thing to do. So let's wait our 7 days quarantine if someone says a 'no-go' and merge it otherwise.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/310#issuecomment-312254210:53,simpl,simple,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/310#issuecomment-312254210,2,['simpl'],['simple']
Usability,"Matt',. Yes the breakage would be minimal. . It would be possible to mix instance-based and class-based Data management as long as the consistency in maintained through the data API in `Base`. Static data would incur no extra penalty at construction time, but later add/remove would remain possible. . I am unsure this is desirable, however: a full-blown mix of class-based and instance-based management would require more efforts, mainly to chain class-based datas up the class hierarchy, and I am not sure it is worth it. It could be the case though, but this requires _significant_ changes and testing, like converting all the existing `initData` to the new system for example. The use case I had in mind was more like the 5-10% cases where it really matters to be fast, and we don't really care whether data's are setup properly, and we sure do _not_ want to pay for it. . If data inspection turns out to be required (e.g. for debug), then we can come up with an ad-hoc solution when/if it's needed, but at this point it is not clear whether this will be of sufficient interest. But maybe more people could step in and provide feedback?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557:1032,clear,clear,1032,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-255404557,4,"['clear', 'feedback']","['clear', 'feedback']"
Usability,Maxime (@maxime-tournier); I would appreciate to have your feedback on this PR.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343516044:59,feedback,feedback,59,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-343516044,2,['feedback'],['feedback']
Usability,Maybe we should add in the object factory a way to detect the use of Vec3f and warn user that it needs to update its scene to use Vec3 instead. So we can start simplifying the code base ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342:160,simpl,simplifying,160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-440306342,2,['simpl'],['simplifying']
Usability,"MeshTetraStuffing was the only component in SofaMiscExtra, and was simply a BaseObject.; This PR converts it as an engine (which it was already by its behavior) and move it in S.C.Engine.Generate.; \+ compat. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2917:67,simpl,simply,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2917,1,['simpl'],['simply']
Usability,"Minor refactoring to simplify the reading (it avoids the call to many `for` loops), and to match https://github.com/sofa-framework/sofa/pull/3981. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3983:21,simpl,simplify,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3983,1,['simpl'],['simplify']
Usability,"More seriously, defaultCompliance can be considered in a simplified way as the inverse of the nodal mass.; This is close to 184 in this simulation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4187#issuecomment-1730239279:57,simpl,simplified,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4187#issuecomment-1730239279,2,['simpl'],['simplified']
Usability,"My 2 cents... . Taking ""16 days to merge 20 lines of code is a waste of time"" is true...and this is the consequence that no-one ever took time to handle that properly. As usual no one's concerns tend to become everyone's waste of time. . My suggestion to fix that is:; - 0) make a style sheet that matches the Sofa guideline (or change the guideline to match an automated formatter style sheet which is much easier :)); - 1) apply an automated style sheet to format the whole code base. ; - 2) when making PR, everyone should apply the provided style sheet.; - 3) when merging a PR, the automated stylesheet should be applied again. . But ho wait ! ; Some told me here is already a stylesheet for astyle (to use in qtcreator) since years in the tools/astyle ; directory. ; This may be a good starting point for (0) and (1). . What about having 0 et 1 done for 17.16 release ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497:315,guid,guideline,315,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353068497,4,['guid'],['guideline']
Usability,"My 2 cents...; Eulalie is right, there is no 'formal' ambiguity as by just following the vector<> symbol the code editor jump to the 'using sofa::helper'. ; Guillaume is right in the fact that allowing using std::vector and using sofa::helper::vector in our code base it will generate a lot of ambiguity. . May I suggest two strategy: ; 1) 'using sofa::*' as much as you want unless it hides somethings from the stl. ; 2) 'using sofa::*' even for sofa::helper::vector etc. After all we are in sofa so it makes sense to get rid of as much as of the sofa::prefix for code simplicity. To avoid ambiguities, forbid the employement of using on external type eg no 'using std::vector' or 'using std::string'. . Strategy 2 would produce a very consistent and readable code making it obvious we we are using external object or lib;. EDIT: I forgot to say: :+1: Eulalie for the bugtracking, the fixing, cleaning and PRing",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358766000:570,simpl,simplicity,570,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358766000,2,['simpl'],['simplicity']
Usability,"My bad for the video...it is now public. About UX, I'm not sure there exists something like ""the best way"" to do something :) ; So I can only answer that sliding left/right is a very common and appreciated way in software like Blender or Unity3D.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413547350:47,UX,UX,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750#issuecomment-413547350,2,['UX'],['UX']
Usability,"My checklist:; - tests coverage (none, low, good); - have at least one working example (yes, no); - is validated in the Igor's sense (if yes provide a link to the validation references); - is thread safe according a given thread safe design provided by the Multi-thread WG. ; - sofa code guidelines violation (none, a few, a lot) . I suggest this checklist to be part of the component as a kind of meta-data in the factory.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132:288,guid,guidelines,288,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/228#issuecomment-291091132,2,['guid'],['guidelines']
Usability,"My goal was to simplify the writing of vector operations in ODE solvers. Before. ```C++; VMultiOp ops;; ops.resize(2);; // vel += dx * dt; ops[0].first = vel2; // <-- What is first???; ops[0].second.push_back(std::make_pair(vel.id(),1.0)); // <-- What does a pair represent? What does this list represent?; ops[0].second.push_back(std::make_pair(dx.id(),dt));; // pos += vel * dt; ops[1].first = pos2;; ops[1].second.push_back(std::make_pair(pos.id(),1.0));; ops[1].second.push_back(std::make_pair(vel2.id(),dt));; ```. to . ```C++; VMultiOp ops(2);. // vel += dx * dt; ops[0] = VMultiOpEntry{ vel2,; ScaledConstMultiVecId{vel.id(), 1._sreal} + ScaledConstMultiVecId{dx.id(), dt}};; // ok, now we know that the scalar and the MultiVecId are multiplied together.; // there is also an operator +, suggesting that the whole operation is a linear combination. // pos += vel * dt; ops[1] = VMultiOpEntry{ pos2,; ScaledConstMultiVecId{pos.id(), 1._sreal} + ScaledConstMultiVecId{vel2.id(), dt}};; ```. Note that in C++20, we can write something like:; ```C++; ops[1] = VMultiOpEntry{ .outputId = pos2,; ScaledConstMultiVecId{pos.id(), 1._sreal} + ScaledConstMultiVecId{vel2.id(), dt}};; ```; which is IMO clearer. **NOT IMPLEMENTED**:; I wanted to go even further (but there are problems of type conversion, so it's not yet ready):. ```C++; VMultiOp ops(2);. // vel += dx * dt; ops[0] = VMultiOpEntry{ vel2, vel.id() + dx.id() * dt};. // pos += vel * dt; ops[1] = VMultiOpEntry{ pos2, pos.id() + vel2.id() * dt};; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not gener",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4333:15,simpl,simplify,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4333,1,['simpl'],['simplify']
Usability,"Name=['BugPosition']); root.addObject(""MechanicalObject"", name=""MO"", template=""Vec3d"", position=[1, 0, 0]); root.addObject(""TestComponent"", position=""@MO.position""); root.addObject(Controller(root.MO)); ```. **Steps to reproduce**; I've put everything needed to reproduce the issue here https://github.com/jnbrunet/BugPosition. Hence, the following steps can be taken (the SOFA installation path must be changed, and SofaPython3 plugin must be installed alongside SOFA):; ```bash; export SOFA_ROOT=/opt/sofa; export PYTHONPATH=$PYTHONPATH:$SOFA_ROOT/plugins/SofaPython3/lib/python3/site-packages; ```; Then, compile and launch the scene; ```bash; git clone git@github.com:jnbrunet/BugPosition.git; cmake -DCMAKE_PREFIX_PATH=$SOFA_ROOT/lib/cmake -S BugPosition -B BugPosition/build -DCMAKE_BUILD_TYPE=Release; cmake --build BugPosition/build; python3 BugPosition/scene.py; ```; which should produce the erroneous results (random displacement isn't taken into account).; ```; (...); onAnimateBeginEvent; random_disp[0]=array([-0.01092411, -0.00742505, -0.01442109]); self.MO.position.value[0]=array([1., 0., 0.]); onAnimateEndEvent; self.MO.position.value[0]=array([1., 0., 0.]); ```. **Expected behavior**; The correct behaviour can be obtained using the GUI. In the previous example, simply adding the `gui` parameter to the scene will do the trick:. ```commandline; python3 BugPosition/scene.py gui; (...); onAnimateBeginEvent; random_disp[0]=array([-0.00746889, -0.01065234, 0.00446683]); self.MO.position.value[0]=array([ 0.99253111, -0.01065234, 0.00446683]); onAnimateEndEvent; self.MO.position.value[0]=array([ 0.99253111, -0.01065234, 0.00446683]); ```. ---------------------------------------------. ### Environment. **Context**. - System: MacOS 12.1 but reproductible on Ubuntu 20.04; - Version of SOFA: master branch ([888a159f4c](https://github.com/sofa-framework/sofa/tree/888a159f4c)); - State: install directory. ---------------------------------------------. Thank you for your report.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2761:3516,simpl,simply,3516,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761,1,['simpl'],['simply']
Usability,"New changes:; - Move Sofa.GL module under Sofa directory; - SofaKernel is gone.; - Everything was moved under applications/collections/deprecated; - New cosmetic feature in SofaMacros to hide sub-options when base-option is disabled (like cmake_dependent_option but simpler). E.g. when I disable SOFA_COMPONENT, all SOFA_COMPONENT_* are hidden.; - A bit of cleaning",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180587977:266,simpl,simpler,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3120#issuecomment-1180587977,2,['simpl'],['simpler']
Usability,Nice and simple :ok_hand:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1956#issuecomment-808329941:9,simpl,simple,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1956#issuecomment-808329941,2,['simpl'],['simple']
Usability,"No change of code. Just applying guidelines for a clean code. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3476:33,guid,guidelines,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3476,1,['guid'],['guidelines']
Usability,"No problem, I'll do my best to rebase my fixes here in a PR. As for the buffer overflow, it's definitely not a serious one (read-only, static size) but it aborts execution when compiled with address sanitizer, which prevents further bug discovery. Another show-stopper in SofaCUDA, `CudaBarycentricMappingRigid.cpp:50`, ODR violation:. ```; ==13885==ERROR: AddressSanitizer: odr-violation (0x7f474c739640):; [1] size=4 'class_BarycentricMappingRigid' ../applications/plugins/SofaCUDA/sofa/gpu/cuda/CudaBarycentricMappingRigid.cpp:47:1; [2] size=4 'class_BarycentricMappingRigid' ../modules/SofaMiscMapping/BarycentricMappingRigid.cpp:42:18; ```. Fix is simple: remove the `SOFA_DECL` as it's defined already somewhere else. After that, it's a world of memleaks! ;-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851:653,simpl,simple,653,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-347130851,2,['simpl'],['simple']
Usability,"Not sure it solves any problem and it might degrade performances. A full refactoring of AdvancedTimer should be the objective to make it simple, thread-safe and shiny!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688:137,simpl,simple,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3424#issuecomment-1308450688,2,['simpl'],['simple']
Usability,"Note for @sofa-framework/reviewers ; The PR now builds and tests run.; This PR might be really breaking, and your careful review and feedback is more than welcome. I am available for any question.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881:133,feedback,feedback,133,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-391685881,2,['feedback'],['feedback']
Usability,"Now the user will be clearly warned :exclamation: . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4059:21,clear,clearly,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4059,1,['clear'],['clearly']
Usability,"OK,; I updated the PR with a few things:; 1 / the test now checks the content of the generated files for error; 2 / Monitor has an additional data field ""fileName"" through which one can override the default path to the generated files; 3 / Monitor now respects basic coding guidelines; Looks a bit better now",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828:274,guid,guidelines,274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/312#issuecomment-313136828,2,['guid'],['guidelines']
Usability,"Of course the PR will be breaking and we will need to update our code base. ; But this is all for the good. ; ; Clearly congratulation @SofaFramework for such high quality management of software evolution. So if I understand correctly, this will be merge into master the day after the official release of v22.06 right ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1174731843:112,Clear,Clearly,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3090#issuecomment-1174731843,1,['Clear'],['Clearly']
Usability,"Ok I see the problem (why qtcreator is not capable of showing this ""usage"" of GuiDataRepository is a mystery to me). . Anyhow you are right in moving GuiDataRepository in SofaGuiCommon you need to fix then the path. In SofaGuiCommon.cpp ; FileRepository GuiDataRepository(""GUI_DATA_PATH"", Utils::getSofaPathTo(""share/sofa/gui/common/resources"").c_str());. And somewhere in qt:; GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/qt/resources"").c_str()) ;",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368866830:78,GuiD,GuiDataRepository,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368866830,4,['GuiD'],['GuiDataRepository']
Usability,"Ok it's all clear now, many thanks for your time :-)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342832090:12,clear,clear,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/502#issuecomment-342832090,2,['clear'],['clear']
Usability,"Ok so it seems to be ready, let's just wait the feedback from @damienmarchal regarding the current incompatibility problem at Defrost.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637#issuecomment-395357378:48,feedback,feedback,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637#issuecomment-395357378,2,['feedback'],['feedback']
Usability,"Ok sorry my message was not totally clear. I meant, you check the option in the Node and it propagate the printLog to all child Node and their components.; So if you want all the printLog, you activate it in the root Node.; Just suggesting.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1194083853:36,clear,clear,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1194083853,2,['clear'],['clear']
Usability,"Ok thanks for the movie, the goal is more clear now.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1012#issuecomment-489031815:42,clear,clear,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1012#issuecomment-489031815,2,['clear'],['clear']
Usability,"Ok, great! I will check out the examples and give you feedback next week. Regarding the naming: This could end up being a lengthy discussion. My reasoning is that names like ""DataEngine"" have their origin in how things are implemented. I think from a user perspective it is easier to understand names like ""PyScriptableComponent"" or even ""PyComponent"", because that is what they are: components, just like any other in Sofa, with Datas, Inputs and Outputs and a certain behavior, which can be implemented in python. Of course there's the disadvantage of breaking the name consistency. If we keep the ""DataEngine"" name somehow, I vote for PythonDataEngine. Saying it is also ""Script"" is redundant.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449:54,feedback,feedback,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-406602449,2,['feedback'],['feedback']
Usability,"Ok.... so when a node does not have parent.... which I assume is the case of the root ...; then the getPathName() string is empty... and ; Which make the function CreateString to return ""@"". . I have no clear idea where to fix that... the current fix is in #377",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/375#issuecomment-324900504:203,clear,clear,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/375#issuecomment-324900504,2,['clear'],['clear']
Usability,"Olivier's point me that in his code the clearing of the links is really ""perfectible"".",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/772#issuecomment-422772768:40,clear,clearing,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/772#issuecomment-422772768,2,['clear'],['clearing']
Usability,On this pull-request we would need the feedback of @Younesssss and @ChristianDuriez about how to sort the mapping components in SOFA? How should be differentiated the different kind of mappings?. Your input is important to us for NG.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1048622163:39,feedback,feedback,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2635#issuecomment-1048622163,2,['feedback'],['feedback']
Usability,"On top of the introduction of the stable Neo Hookean hyperelastic material (from Smith, Breannan, Fernando De Goes, and Theodore Kim. ""Stable neo-hookean flesh simulation."" ACM Transactions on Graphics (TOG) 37.2 (2018): 1-15.), I rewrote the St Venant-Kirchhoff and Neo Hookean materials to make it clearer to read. I also added unit tests, validating some material constitutive equations. I added an example having inverted tetrahedra:. ![invertedTets](https://github.com/sofa-framework/sofa/assets/10572752/3eea7447-dec2-4912-a4a4-f9d104f45630). Based on https://github.com/sofa-framework/sofa/pull/4600. $$; \alpha = 1 + \frac{\mu}{\lambda + \mu}; $$. ### Strain Energy Density Function. $$; \psi = \frac{1}{2} \left(\mu (I_C - 3) + (\lambda + \mu) (J - \alpha)^2 \right); $$. ### Second Piola-Kirchoff stress tensor. $$; S = \mu I_3 + \left((\lambda + \mu) J (J - \alpha)\right) C^{-1}; $$. ### Elasticity tensor. $$; \mathbb{C} = (\lambda + \mu); \left(-2 J (J - \alpha) C^{-1} \underline{\overline{\otimes}} C^{-1} + J (2 J-\alpha) C^{-1} \otimes C^{-1} \right); $$; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4603:300,clear,clearer,300,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4603,1,['clear'],['clearer']
Usability,One possible next-step could be to connect the BaseSimulationTest with the simpleapi work discussed with @maxime-tournier. So that we would have a fully loosed coupling equivalent to scenecreator and sofatest with good looking syntax.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799:75,simpl,simpleapi,75,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471#issuecomment-336184799,2,['simpl'],['simpleapi']
Usability,One remark about commented blocks: couldn't they be simply removed if not used anymore? ; Would be better to avoid introducing commented/unmaintained/why-is-this-here code.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/12#issuecomment-241391253:52,simpl,simply,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/12#issuecomment-241391253,2,['simpl'],['simply']
Usability,"One simple solution, it to add [Base::checkDataValidity()](url). Its call would be let to the application.; For example, runSofa would call it right before `init` and `reinit`, but a more specific application could chose not to call it not to add over-cost. Note that high level checkers could be implemented (such as `check_it_is_a_valid_vector_of_indices`, ...). The downside is how to perform the check on a single Data rather than at the component level? But maybe it would be way sufficient for what we attend to do?; To perform the test at the Data level, we need to differentiate Data modification coming from a user vs coming from a computation.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603:4,simpl,simple,4,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/265#issuecomment-302649603,2,['simpl'],['simple']
Usability,"Operator= is deprecated because it hides operations. Readers might think that = is simply an assignment, but it is more than that. As a replacement, the method `setSystemMBKMatrix` is provided. Removing calls to operator= will be done in another PR, once this one is validated. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2167:83,simpl,simply,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2167,1,['simpl'],['simply']
Usability,"Originally, the goal was not really to go for ; - #4221. But more to upgrade the gtest version, as the one in SOFA is really old (1.7.0 , *Sep 19, 2013* :exclamation: ) and was throwing warnings for newer cmake.; So instead of simply update the source in extlibs, I took the liberty to go into the find/fetch mechanism. A bit difficult as the CMakefile in the embedded version was heavily customized, so I am not 100% sure the install/package process is working well. But it should 😅. Last note: it is adding a target `gtest_main` which is always activated in the gtest cmake file. It is not used by SOFA as we have our own main for gtest. [ci-depends-on https://github.com/sofa-framework/PluginExample/pull/5]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4471:227,simpl,simply,227,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4471,1,['simpl'],['simply']
Usability,"PR #351 should be merged before. ## Description. This PR aims at meshing an implicit shape with CGAL ; ImplicitShape is a concept of class (inheriting from BaseObject) defining any implicit shape by a common method `eval(Point p)` which returns the value of the function at this point.; Basically, it's possible to create a component inheriting from ImplicitShape, to describe a shape (torus, sphere etc.) by its literal equation. ## User Guide. A Sofa scene file is featured (in the CGALPlugin scene repertory) and allows the user to choose the type of ImplicitShape he wants to mesh, and to change the values relating to the mesh (**facet_size**, **approximation** and **cell_size**). - Fill the scene with a shape :. `<DistanceGridComponent` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""grid_cmp""`; > .tmg is our extention file which is actually a simple list of values corresponding to the function evaluated at each point : see PR #353 ; `filename=""/path/file.tmg""` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nx=""243""` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ny=""243"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`nz=""243""` ; `/>` . or ; `<ImplicitSphere name=""sphere"" />`. or any class inhereting from ImplicitShape. - Modify the mesh component value's and use the correct component in the link. ` <MeshGenerationFromDG` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`name=""mesh"" `; > The 3 following parameters can change the execution time (from a few seconds to much more) ; `facet_size=""0.7"" ` ; `approximation=""0.5""` ; `cell_size=""0.4"" ` . &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`drawTetras=""false""` . > Then the link ; `function=""@sphere""` which is actually a torus ; or	 ; `grid=""@grid_cmp""`; ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymin_box=""0.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`zmin_box=""-5.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`xmax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`ymax_box=""27.0"" ` ; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/354:439,Guid,Guide,439,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/354,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"PR 2419 restores the correct behavior of CGLinearSolver regarding the call-super-init; https://github.com/sofa-framework/sofa/pull/2419. But as some of its data are tagged as Required, this rise an error message when the value; is not set by the user. I'm not sure it is wise to set the required flag when data provides meaningful and usable default values. I recommand removing it and more generally keep the isRequired only for data field that really have no possibility to have a default value (eg: the filename for a loader). . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2498:335,usab,usable,335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2498,1,['usab'],['usable']
Usability,"PR looks fine, but we absolutely need to define the convention about \_doXXX\_ or \_isXXXX\_; This should be definitely generalized within the whole code base AND the guidelines of SOFA.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772399008:167,guid,guidelines,167,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1753#issuecomment-772399008,2,['guid'],['guidelines']
Usability,"Parse function should warn when using the removed Data `blockSize` :pray: ; Then, without additional feedback, will be merged",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3556#issuecomment-1386675840:101,feedback,feedback,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3556#issuecomment-1386675840,2,['feedback'],['feedback']
Usability,"Personnally I'm wondering if using a string here instead of magical systems is not better because otherwise it means we are relying on undocumented feature in our UX (because NameDecoder are used to register object in the factory). . More fundamentally, exposing the implementation names through the UX is considered as as bad design and is very typical of application make by developpers that considere themselves as their first users... so they find themselves find super cool as a kind of ""super print debuggin"" as well as the ability to see ""their"" naming in the end user app. . When targetted users are not the developpers, it is considered much better to make a glossary of the term they use... shape the UX on top of that and use their term in the UX... while keeping implementation's names out of user's eyes .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776:135,undo,undocumented,135,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4514#issuecomment-2061005776,10,"['UX', 'undo']","['UX', 'undocumented']"
Usability,"Playing with UndefinedBehaviorSanitizer and came across UBs at the very start... This first one is triggered because of misaligned adress when reinterpret_cast a a pointer of char to a a pointer of uintr32_t. ```; Sofa/framework/Core/src/sofa/core/objectmodel/Base.cpp:149:35: runtime error: load of misaligned address 0x7f5e01822917 for type 'const uint32_t', which requires 4 byte alignment; 0x7f5e01822917: note: pointer points here; 6c 2e 68 00 64 72 61 77 00 73 68 6f 77 00 56 69 73 75 61 6c 69 7a 61 74 69 6f 6e 00 22 20 00 4c; ```. This is easily fixed by removing this `questionnable` (sic 😅) ""optimized"" test for comparing strings, and convert to a more readable (and modern) code; I dont really see the need to optimize (and in this way...) this part . For those curious about the optimization, it comes from; https://github.com/sofa-framework/sofa/blame/b3fdf7e4619536941e9cfdd6d4bc6f3e7169af0b/framework/sofa/core/objectmodel/Base.cpp#L96; and; https://learn.microsoft.com/en-us/windows/win32/directshow/fourcc-codes; apparently. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3664:965,learn,learn,965,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3664,1,['learn'],['learn']
Usability,"Please gently welcome this first NG pull-request :blush: . The base idea was to remove the SofaComponent* packages from modules and to put them in their own place instead.; Doing this, I realized that SofaComponentBase contains actual components (it's not only a basic package as it should be).; Thus, it permitted me to introduce the first NG module Sofa.Component.Utils and fill it with SofaComponentBase intruders (MakeAliasComponent, MakeDataAliasComponent, MessageHandlerComponent, InfoComponent). NG architecture is based on the discussions in #543.; Transition headers are also provided (in deprecated_layout folder) to ensure old includes. I am also working with @damienmarchal on a way to cleanly automatize this kind of NG refactoring with python: see https://github.com/guparan/sofa2ng. Feedback is more than welcome!. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/620:798,Feedback,Feedback,798,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/620,1,['Feedback'],['Feedback']
Usability,Project User Experience : general discussion,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/187:8,User Experience,User Experience,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187,1,['User Experience'],['User Experience']
Usability,"Proof of concept further to STC#15 discussions but so far, no use of this mechanism. Feedback from the community requested. A usecase could be to warn the user in LCPConstraintSolver when adding BilateralInteractionConstraint while this constraint solver does not support it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3888#issuecomment-1569747933:85,Feedback,Feedback,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3888#issuecomment-1569747933,1,['Feedback'],['Feedback']
Usability,Quick and simple!; Will fix Base_test.testComponentState. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1204:10,simpl,simple,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1204,1,['simpl'],['simple']
Usability,"ReadState was only reading the file and making the changes after the first time step (or later). ; This PR allows to load the state at init. . Edit: I forgot to mention that it shouldn't change the behavior of existing scenes. ; The file loaded by ReadState has time values that define at which time steps of the simulation each different state should be applied. Currently T=0 is not working, this PR simply allows that. ; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1654:402,simpl,simply,402,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1654,1,['simpl'],['simply']
Usability,"Ref: #1521, #1527. ### Description; All the previous PR/commits (#1521 should list all the main ones) allow now the fact that each module of SofaFramework can be its own cmake package/configuration.; - No more dependency checks in the SofaFrameworkConfig.cmake.in, etc; they are now in their own *Config.cmake.in; - No more weird cross-dependencies between headers (no more add_include_dir in SofaHelper!): a change in SofaCore will not trigger a new compilation of SofaHelper for example...; - clearer and more logical use of packages: if you want SofaHelper you do:; ```cmake; find_package(SofaHelper); ....; target_link_libraries(${target} SofaHelper); ```. - SofaFramework is now a ""meta-package"" or collection like SofaBase. Obviously it will stay like that for compatibility reason. ### Note; - The removal of the cross-includes paths in SofaHelper pointed to an error I made in the Sofa.Topo/Sofa.Geo PR #1912 , which is a good demonstration of the cross-include path madness 🤡.; - I successfully compiled SofaPython3 out-of-tree with an install of SOFA so the *Config.cmake.in should be okay. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1990:495,clear,clearer,495,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1990,1,['clear'],['clearer']
Usability,"Refactor CImg & CImgPlugin and fix the code that depend on it. . The general problem is that CImg is header only library thus the; multiple inclusion of the code in multiple dll seems to cause trouble; on the mutexes initialization causing the crash & failure when two plugins compile; with CImg & CImgPlugin are loaded (eg image, flexible). To avoid this scenario, CImg is moved into the CImgPlugin that; hold the mutex and other code needs to include #include<CImgPlugin/SOFACImg.h>; instead of the raw CImg. This PR is resulting from the split of #548 (for clearity and to ease reviewing). . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/562:560,clear,clearity,560,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/562,1,['clear'],['clearity']
Usability,"Referee: @matthieu-nesme @ChristianDuriez. Members: @JeremieA @francoisfaure @courtecuisse, Eulalie Coevoet, Igor Peterlik. Main objective: build or compute the mechanical system when forcefields, constraints etc... are under mapping. 1 implementations available using Compliance plugin (and EigenMatrix) and masks; 1 implementation todo using sparseMatrix of SOFA without masks. For that, the fact that we remove the particular case of InteractionForceField could greatly simplify the solution. There are many different cases depending on the number of dofs that are concerned by the mapped values... Difficult to have the ideal implementation for all the case, but we need to allow several strategies. Maybe possible to avoid the ""explicit"" use of masks given the knowledge of the sparsity of the matrices... . Subtasks:; - Make option ""use Mask"" to false by default; - Tag ""InteractionForceField"" as deprecated; - First implementation for the sparseMatrix of SOFA using applyJt(SparseMatrixDeriv => not ideal for all the case; - see if we could define a common strategy without the use of masks.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26:473,simpl,simplify,473,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26,1,['simpl'],['simplify']
Usability,"Related to PR #1259 ; It appears that several ways (and API) exist to create a custom collision with discrete models (Point, Line, Sphere..). It should be restricted to one, consistent, clear, documented and logical way. This could definitely be addressed in the next STC# 9 in Lille. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1262:186,clear,clear,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1262,1,['clear'],['clear']
Usability,"Removed unused variables; Removed MechanicalGetDimensionVisitor which was no longer used; Renamed variables (groupData is not clear). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2195:126,clear,clear,126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2195,1,['clear'],['clear']
Usability,"Rename OBJExporter into VisualModelOBJExporter to express more clearly that it only exports the VisualModels; Compatibility layer added + Alias. Fix #1783. Q: does it make sense to keep examples in the module itself?. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2505:63,clear,clearly,63,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2505,1,['clear'],['clearly']
Usability,Review done. Amazing PR it will be so much clearer in a few months !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1183#issuecomment-542794168:43,clear,clearer,43,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1183#issuecomment-542794168,2,['clear'],['clearer']
Usability,"Right for the overhead, my target was clearly to minimize the developement time because this is a very scarce resource. The good news I see is that if the function a performance limiting we are still able to improve it a lot (by order of magnitude).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/332#issuecomment-316340088:38,clear,clearly,38,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/332#issuecomment-316340088,2,['clear'],['clearly']
Usability,"Right, thank you guys for your quick feedback.; Cheers.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496454265:37,feedback,feedback,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1066#issuecomment-496454265,2,['feedback'],['feedback']
Usability,"SAP is usually a method to discriminate pairs of objects that are not in collision. The output is pairs of objects to be further investigated in the narrow phase.; However, in SOFA, the `DirectSAP` component is written as a component doing the broad phase and the narrow phase. Almost all the work is actually done in the narrow phase. That is why, we can consider this component is mainly a narrow phase component.; All the broad phase code has been removed. It is still a broad phase, but the code is located in its base class: `BruteForceBroadPhase`.; The narrow phase code has been extracted and put in a new component: `DirectSAPNarrowPhase`. `DirectSAP` inherits from `DirectSAPNarrowPhase`.; In the narrow phase, the result of the broad phase is used to skip the boxes which have been totally ignored in the broad phase. Initially, the `DirectSAP` component did not perform any discrimination in its broad phase. Now it performs a `BruteForceBroadPhase`. It is not yet clear if it is always a good choice regarding the performances. In the case of the caduceus scene, the performances are slightly better. I guess if the broad phase takes a lot of time (many objects), it is better to avoid it. `DirectSAP` would not be the best choice. I would use a more performant broad phase, or no broad phase, when used with `DirectSAPNarrowPhase`. From now, the user can decide to design its scene with two different ways resulting to the same behavior:; ```; <DirectSAP/>; ```; or; ```; <BruteForceBroadPhase/>; <DirectSAPNarrowPhase/>; ```; In the second option, it will be possible to change the combination of broad phase/narrow phase.; Note: I kept the component `DirectSAP`, but I don't think its name is meaningful. This is the following of the work started in #2010 . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/s",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2030:976,clear,clear,976,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2030,1,['clear'],['clear']
Usability,"SOFA-dev meeting report: @damienmarchal will merge this PR with #373 since their contents are related. Doing so, he will try to get rid of this box problem simply by removing all boxes (separating Datas with lines). To be continued...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/369#issuecomment-329142955:156,simpl,simply,156,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-329142955,2,['simpl'],['simply']
Usability,"STC10 Feedback: (https://annuel2.framapad.org/p/sofang-v6). SofaFramework will be re-designed like that:; ```; * Type (Vec, Mat, Quat, Frame, BaseMatrix, BaseVector, BoundingBox, Ray, ...) ( + leurs algos); * StdType (fixed_array, vector, map, etc); * Geometry (Triangle, Tetra...); * Topology; * Mesh; * Helper; * Config; * Messaging; * Logging; * Image; * BVH; * IO; * System; * Visual; * DefaultType (VecTypes, RigidTypes, ...); * Core; * Data (#1605 #1611 .... ); * TypeInfo (TypeInfo_Vec, TypeInfo_Quat, etc); * DataTypeInfo (DataTypeInfo_Vec, DataTypeInfo_Quat). * Simulation; * Testing (to isolate the dependency gtest); * OpenGL (to isolate the dependency opengl); ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737:6,Feedback,Feedback,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1521#issuecomment-734300737,1,['Feedback'],['Feedback']
Usability,SceneCreator.; If you get a message saying:; ```; create: component 'Euler Explicit' of type 'EulerSolver Object type EulerSolver<> creation failed ; ```; Emitted by the simpleapi as in; ```; source code loc: /home/sofa/jenkins_1/workspace/ubuntu_gcc-5.4_options/src/applications/plugins/SceneCreator/SimpleApi.cpp:83; ```. This means that the factory does not contains the object. This message appears because the implementation of SceneCreator is totally new and it is now based on the content of the ObjectFactory. The consequence is that to create object the factory needs to be initialized properly (by loading the plugins/modules). . PS: to get the emitting location you can start runSofa with the clang message formatter.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535:170,simpl,simpleapi,170,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/418#issuecomment-335752535,3,"['Simpl', 'simpl']","['SimpleApi', 'simpleapi']"
Usability,See 48b8dd0c70c400da8a7054f90bb413f8e0ee5483 for `nbOfMonomial` creation. ; This makes me think about [a wise advice I read once](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md#formatting).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/442#issuecomment-334484252:181,GUID,GUIDELINES,181,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/442#issuecomment-334484252,1,['GUID'],['GUIDELINES']
Usability,"See [this gist](https://gist.github.com/maxime-tournier/3c59175c9219098d419768d89af8a51e#file-attribute_list-cpp) for a simple prototype (start from the main function at the end). It uses a nifty trick for erasing and recovering type information through a throw/catch, which is a little slow but not slower than string conversion anyway. The one with member function pointers won't fly as it requires e.g. `DefaultPipeline::name` to be public, which is often not the case. I don't see how to come up with a reasonably usable syntax for the last one, since `Node, MechanicalObject` are (possibly dependent) type names. Also, putting them all inside a single `initializer_list` will drop type informations to make type checking possible in `createTree`, so I'm afraid this won't be worth it.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143:120,simpl,simple,120,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-335082143,4,"['simpl', 'usab']","['simple', 'usable']"
Usability,"Seems OK, could you just rebase/merge with master to remove the failed CUDA/whatever scenes? Just to be in the clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-839603263:111,clear,clear,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2050#issuecomment-839603263,2,['clear'],['clear']
Usability,"Seems VS2017 is not happy ; ```; j:\0\src\sofakernel\modules\sofabasemechanics\src\sofabasemechanics\diagonalmass.inl(573) : fatal error C1001: An internal error has occurred in the compiler.; (compiler file 'd:\agent\_work\1\s\src\vctools\compiler\utc\src\p2\main.c', line 187); To work around this problem, try simplifying or changing the program near the locations listed above.; Please choose the Technical Support command on the Visual C++ ; Help menu, or open the Technical Support help file for more information; ```; but we are ditching vs2017, right ? 😗. Or it could be that the CI is on a VM, maybe the vCPU is also at fault here.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028148021:313,simpl,simplifying,313,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2652#issuecomment-1028148021,2,['simpl'],['simplifying']
Usability,Several lines of thought:; + Proposal around a new way of adding contribution in addKtoMatrix in SOFA and avoid a virtual call at each call; + Merge MatrixDeriv with a sparse matrix representation; + SparseVectors in SOFA; + Simplify the (quite complex) multi-matrix things as a lot of the initial intentions have never been really implemented and can be (maybe) solved in a more simple way using efficient sparse matrices and sparse vectors.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265:225,Simpl,Simplify,225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292212265,3,"['Simpl', 'simpl']","['Simplify', 'simple']"
Usability,Short and ~~simple~~ :). Related to #2173,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3900:12,simpl,simple,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3900,1,['simpl'],['simple']
Usability,Should fix crash and error on scenes:; - SimpleBox-Method2.scn; - testOmniDriverEmu.scn; - /scene-tests/archive/examples/Tutorials/Topologies/TopologyTetra2TriangleTopologicalMapping.scn. Fix unit test:; - ReadState_test.test_loadFailure. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/982:41,Simpl,SimpleBox-,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/982,1,['Simpl'],['SimpleBox-']
Usability,"Simple PR to clean up DeformableOnRigidFrameMapping, during DEFROST team coding friday. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/848:0,Simpl,Simple,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/848,1,['Simpl'],['Simple']
Usability,"Simple add to make sure the return value corresponds to the package found (qt5 or 6). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2346:0,Simpl,Simple,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2346,1,['Simpl'],['Simple']
Usability,"Simple as is the title, namely:. - MeshTopology instead of Mesh; - PointCollisionModel instead of: Point, TPointModel, PointModel, PointMesh, PointSet; - LineCollisionModel instead of: Line, TLineModel, LineMeshModel, LineSetModel, LineMesh, LineSet, LineModel; - TriangleCollisionModel instead of: Triangle, TriangleSet, TriangleMesh, TriangleSetModel, TriangleMeshModel, TriangleModel, TTriangleModel; - SphereCollisionModel instead of: Sphere, SphereModel, TSphereModel; - CapsuleCollisionModel instead of: Capsule, CapsuleModel, TCapsuleModel; - CubeCollisionModel instead of: Cube, CubeModel; - CylinderCollisionModel instead of: Cylinder, CylinderModel; - RayCollisionModel instead of: Ray, RayModel; - TetrahedronCollisionModel instead of: Tetrahedron, TetrahedronModel; - EulerExplicitSolver instead of: Euler, EulerExplicit, ExplicitEuler, EulerSolver, ExplicitEulerSolver; - CGLinearSolver instead of CGSolver, ConjugateGradient; - SparseGridTopology instead of SparseGrid; - SVDLinearSolver instead of SVD, SVDSolver; - FreeMotionAnimationLoop instead of ; - DampVelocitySolver instead of DampVelocity. just you @epernod . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1292:0,Simpl,Simple,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1292,1,['Simpl'],['Simple']
Usability,"Simple change so isDiagonal is now const.; However, this PR is also to discuss the utility of this function. I did not found any usage of it. Should we keep it?. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1903:0,Simpl,Simple,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1903,1,['Simpl'],['Simple']
Usability,Simple cleaning. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/856:0,Simpl,Simple,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/856,1,['Simpl'],['Simple']
Usability,"Simple fixes and improvements while wandering in SOFA. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2667:0,Simpl,Simple,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2667,1,['Simpl'],['Simple']
Usability,"Simple for a summer restart !. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2294:0,Simpl,Simple,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2294,1,['Simpl'],['Simple']
Usability,"Simple move of example files. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1778:0,Simpl,Simple,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1778,1,['Simpl'],['Simple']
Usability,"Simple, fast-merge :sunglasses: . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1484:0,Simpl,Simple,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1484,1,['Simpl'],['Simple']
Usability,SimpleAPI does not define data isSet in Node,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4911:0,Simpl,SimpleAPI,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4911,1,['Simpl'],['SimpleAPI']
Usability,"SimpleApi feature is not really related to Simulation.Graph (even if it has a dependency on it); So it was decided to make its own module for it, aka **Sofa.SimpleApi**. Actually it was already using the sofa::simpleapi namespace so this move is making the code more consistent. There is a compatibility layer but if the user was relying only on Simulation,Graph (instead of Sofa.Testing for example) to use SimpleApi, it will break. But the user will be informed on how to fix the break nevertheless. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/397]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4495:0,Simpl,SimpleApi,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4495,4,"['Simpl', 'simpl']","['SimpleApi', 'simpleapi']"
Usability,"SimpleGUI broken, ImageBMP.h no such file or directory",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/493:0,Simpl,SimpleGUI,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/493,1,['Simpl'],['SimpleGUI']
Usability,"Simpler, easier, more generic definition of friction in SOFA",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3953:0,Simpl,Simpler,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3953,1,['Simpl'],['Simpler']
Usability,Simplify Doxygen,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/995:0,Simpl,Simplify,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/995,1,['Simpl'],['Simplify']
Usability,Simplify base mechanisms in SOFA,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1341:0,Simpl,Simplify,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1341,1,['Simpl'],['Simplify']
Usability,"Simply add an example scene for the THMPGSpatialHashing plugin. No scene were available. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2148:0,Simpl,Simply,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2148,1,['Simpl'],['Simply']
Usability,"Simply change the keyboard shortcut associated to camera mode: M key instead of Space key, because the latter is already used to interact with the GUI buttons.; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/997:0,Simpl,Simply,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/997,1,['Simpl'],['Simply']
Usability,Simply remove a useless if block. Related to : https://github.com/sofa-framework/sofa/issues/535; Fixes #535 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/590:0,Simpl,Simply,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/590,1,['Simpl'],['Simply']
Usability,"Simply remove all lines in scenes (scn) including a DefaultCollisionGroupManager. `$ find . -type f -name ""*.scn"" -exec sed -i '/DefaultCollisionGroupManager/d' {} +`. [ci-depends-on https://github.com/sofa-framework/Regression/pull/30]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3104:0,Simpl,Simply,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3104,1,['Simpl'],['Simply']
Usability,"Since drawQuad (as well as drawTriangle..) is a public function, one could think that we can call it from any draw function and get a Quad drawn. But drawQuad doesn't call glBegin(GL_QUADS) which than fail to draw the quad. We must call ourself glBegin(GL_QUADS) or simply call drawQuads with a vector of 4 vertices. Should drawQuad function (as well as drawTriangle..) be made private? Or maybe add a boolean parameter in drawQuad to disable the glBegin calls when we are drawing more than one quad?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/7:266,simpl,simply,266,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/7,1,['simpl'],['simply']
Usability,"Since the two questions are related, I combined them together. **BoxROI minor bug**. When I use BoxROI together with RestShapeSpringsForceField, I found that everytime RestShapeSpringsForceField updates indices in recomputeIndices(), the indices stored in BoxROI disappeared. When trying to figure out the problem, I found that in BoxROI.inl, the code piece as:; ```; // Clear lists; indices.clear();; edgeIndices.clear();; triangleIndices.clear();; tetrahedronIndices.clear();; hexahedronIndices.clear();; quadIndices.clear();. pointsInROI.clear();; edgesInROI.clear();; trianglesInROI.clear();; tetrahedraInROI.clear();; hexahedraInROI.clear();; quadInROI.clear();. if(m_componentstate==ComponentState::Invalid){; return ;; }. if(!d_doUpdate.getValue()){; return ;; }; ```; The question is, if we did not requrest ""doUpdate"" in BoxROI, the whole indices are cleared. I think this is not the expected behavior for BoxROI and ""doUpdate"". I suggest put forward the code piece; ```; if(!d_doUpdate.getValue()){; return ;; }; ```; before all the clear() functions. **RestShapeSpringsForceField warning information**. I suggested to add a warning message in the function ""recomputeIndices()"" in RestShapeSpringsForceField.inl something likes:; ```; if (m_indices.empty()); {; // no point are defined, default case: points = all points; msg_warning() << ""No point are defined. Change to default case: points = all points"";; for (unsigned int i = 0; i < (unsigned)this->mstate->getSize(); i++); {; m_indices.push_back(i);; }; }; ```; The reason is this is an unexpected behaivor, and we'd better to warn the users that the result may not be as expected. I spent a whole day to locate the problem in BoxROI when I met unexpected behavior in my model. If there were this warning message, much time will be saved during debugging.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1390:371,Clear,Clear,371,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1390,15,"['Clear', 'clear']","['Clear', 'clear', 'cleared']"
Usability,"Small (and first) Pullrequest to add several methods in plugin SceneCreator:. - to add basic 3D object: Cube, Cylinder, Plane. In rigid or deformable.; - also add an executable sceneCreatorExamples to run simple examples using those methods.; - Minor changes in TriangularFEM and CylindricalGrid to use those components. This PR: ; - [x] succeed on each compilation setup on the CI; - [x] does not generates new warnings or test failure; - [x] does not seems to break existing scenes.; - [x] does not seems to break API compatibility. ; - [x] clean stuff; - [x] is now 1 week old and no one send a 'no go' comment. ; - [x] have tests on the introduced features.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/133:205,simpl,simple,205,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/133,1,['simpl'],['simple']
Usability,"Small feedback on where is recent SOFA version spend most of their compilation time.; (it is with clang, with recent PR to clean Link/Data, one change in Node to remove template instanciation of Single & Sequence and precompiled header ). ```console; `Analyzing build trace from 'analyze5.data'...; **** Time summary:; Compilation (2459 times):; Parsing (frontend): 2552.4 s; Codegen & opts (backend): 2641.2 s. **** Files that took longest to parse (compiler frontend):; 6901 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/RealGUI.cpp.o; 6266 ms: clangbuild//SofaGeneral/SofaConstraint/CMakeFiles/SofaConstraint.dir/LMConstraintDirectSolver.cpp.o; 6259 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/PickHandlerCallBacks.cpp.o; 6060 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/TableDataWidget.cpp.o; 5918 ms: clangbuild//SofaGui/SofaGuiMain/CMakeFiles/SofaGuiMain.dir/src/sofa/gui/Main.cpp.o; 5803 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/moc_RealGUI.cpp.o; 5767 ms: clangbuild//applications/plugins/SofaTest/CMakeFiles/SofaTest.dir/Elasticity_test_deprecated.cpp.o; 5757 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/viewer/qgl/QtGLViewer.cpp.o; 5735 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/viewer/SofaViewer.cpp.o; 5640 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/panels/QDocBrowser.cpp.o; 5611 ms: clangbuild//SofaGui/SofaGuiQt/CMakeFiles/SofaGuiQt.dir/src/sofa/gui/qt/QSofaListView.cpp.o; 5585 ms: clangbuild//applications/plugins/SofaTest/CMakeFiles/SofaTest.dir/Elasticity_test.cpp.o; 5398 ms: clangbuild//SofaKernel/SofaBase/SofaBaseMechanics/CMakeFiles/SofaBaseMechanics.dir/MechanicalObject.cpp.o; 5301 ms: clangbuild//SofaKernel/SofaCommon/SofaRigid/SofaRigid_test/CMakeFiles/SofaRigid_test.dir/RigidMapping_test.cpp.o; 5242 ms: clangbuild//SofaKernel/SofaBase/SofaEigen2Sol",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:6,feedback,feedback,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,1,['feedback'],['feedback']
Usability,Small warning before back porting... ; I got 10 minuets ago a preliminary feedback from @samFabrice that this change is not working as expected. ; He is investigating and will confirm/cancel the warning.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3232#issuecomment-1229950339:74,feedback,feedback,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3232#issuecomment-1229950339,2,['feedback'],['feedback']
Usability,"So I took a look at the SleepController. It simply puts context to sleep where the mechanical object has a max velocity under a certain threshold. Then wake them up again only when a collision occurs with another object that is moving. ; Three remarks : ; - Being put to sleep disables any mechanical visitor to be applied on the node and deactivates its constraint corrections. So no more computing (no system build, no integration, only collision detection); - This works well only for scenes where external interaction only arise between two objects colliding, neither by the mean of a change of external forces (dynamic vector field for instance), or of constraint state changes not managed by the collision pipeline (for instance statically defined interaction constraints such as cable constraints). ; - The code seems overly complicated for what it performs but certainly does what it says it does. I didn't try it but it looks ok. . Sincerely, I cannot see myself advising anyone to use it in their scene given the fact that the use case doesn't apply for the majority of the scenes (especially for soft robotics). So I wouldn't mind never seeing it again...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106:44,simpl,simply,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4813#issuecomment-2236872106,2,['simpl'],['simply']
Usability,So apparently `ImagePNG_test.ImagePNG_NoFile` fails when executed **after** `logging_test`.; I don't know Message API enough to understand what is wrong but it seems to be related to `MessageDispatcher::clearHandlers()` calls in `logging_test`.; Any idea @matthieu-nesme @damienmarchal ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802:203,clear,clearHandlers,203,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/83#issuecomment-265115802,2,['clear'],['clearHandlers']
Usability,Some feedbacks:; I compiled with https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer and I did not get any difference in leaks while executing TorusFall.scn and caduceus.scn in batch for 100 steps unfortunately.; The output is huge (20Mo of logs) so not easy shareable (can give it on demand). Final outputs for both (PR and master branches) :; caduceus: `SUMMARY: AddressSanitizer: 10282202 byte(s) leaked in 111987 allocation(s).`; torusfall: `SUMMARY: AddressSanitizer: 6271499 byte(s) leaked in 28416 allocation(s).`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443:5,feedback,feedbacks,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4838#issuecomment-2249517443,2,['feedback'],['feedbacks']
Usability,"Some notes:. - It was extremely hard to understand why L^T was used in the first step of the solve, and not L. I hope it's clearer now with the comment I added. Anyway, it requires to have the knowledge of the CSR and CSC formats, and how they relates to the transpose.; - I would like to use C++20 `std::span` in some functions such as `solveLowerUnitriangularSystemCSR`.; - Regression tests threshold are usually set to 1e-4. IMO it's not enough to capture errors happening on a single DOF because it's an average",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1653112403:123,clear,clearer,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3986#issuecomment-1653112403,2,['clear'],['clearer']
Usability,Some very simple clean ups while I was there. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1124:10,simpl,simple,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1124,1,['simpl'],['simple']
Usability,"Sounds good to me :) ; So to be clear I should remove all the `using std::*`.; And all the `using sofa::*`, including `sofa::helper::vector` are okay?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358917071:32,clear,clear,32,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/567#issuecomment-358917071,2,['clear'],['clear']
Usability,"Started from the fact that there was an option to profile MT scheduling but the header `TaskSchedulerProfiler.h`is not available anywhere (git history, etc) so I removed the macros related to profiling. - some files did not have the SOFA licence header; - indentation was all over the place; - guidelines, etc; - clean some includes. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3448:294,guid,guidelines,294,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3448,1,['guid'],['guidelines']
Usability,"Starting the work of cleaning the topology in Sofa.. resting in peace since 2012... - Change those methods: now returns unsigned int instead of int: ; - getEdgeIndex(PointID v1, PointID v2);; - getTriangleIndex(PointID v1, PointID v2, PointID v3);; - getQuadIndex(PointID v1, PointID v2, PointID v3, PointID v4);; - getTetrahedronIndex(PointID v1, PointID v2, PointID v3, PointID v4);; - getHexahedronIndex(PointID v1, PointID v2, PointID v3, PointID v4, PointID v5, PointID v6, PointID v7, PointID v8);; - Now unfound ID == UINT_MAX instead of -1.; - Change several serr/sout into msg_. In this PR, 2 scene tests are now sending error due to the conversion of serr into msg_error.; This is beacuse some scene test try to do topological change on regularGrid which doesnt support that. I would like to keep those scene error and handle that in a next PR (to split PRs and simplify review process). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/866:872,simpl,simplify,872,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/866,1,['simpl'],['simplify']
Usability,"Strangely, gcc cannot find the operator for the implicit conversion from `Mat<1,1,int>` to `int`. So I simply made the conversion explicit and it's working.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3584#issuecomment-1385001387:103,simpl,simply,103,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3584#issuecomment-1385001387,2,['simpl'],['simply']
Usability,"Sure, I am including that file. My point is that to be able to include that file correctly I need to find the SofaBase package and then link against SofaBaseTopology. ; If I dont link against that target, I still can include; ```; #include <SofaBase/SofaBaseTopology/MeshTopology>; ```; which looks completely okay but it fails in a inner include; This happens because when you install SOFA in usr/local/ you get the following directory `usr/local/SofaBase/SofaBaseTopology/`; If you for example install something else in usr/local, lets say CGAL, you get the following directory `usr/local/include/CGAL` and when linking against `CGAL::CGAL` target, you get the following include dir: `usr/local/include`. ; Since you get that include, it looks like you could include `SofaBase/SofaBaseTopology/MeshTopology.h`, but this fails as in reality you should include `SofaBaseTopology/MeshTopology.h`. If you are going to create extra directories in usr/include when installed, I would suggest naming them in lowercase, as for example Eigen does. When you install Eigen it creates the following structure `usr/local/eigen3/Eigen` so even if you add `usr/include` to you include dirs, you still know that you shouldn't include `eigen3/Eigen/Dense.h`. . Also, its hard to know in which cmake package and in which target each file is. I would suggest creating, for example, some global targets:; Sofa::Sofa would link against everything; SofaBase::SofaBase would link against everything in SofaBase package; SofaBase::SofaBaseTopology would link only against the SofaBaseTopology; Probably this would simplify linking against SOFA in general",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514:1592,simpl,simplify,1592,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1288#issuecomment-607161514,2,['simpl'],['simplify']
Usability,"Sure, sorry. So I wanted to optimize the initialization of BarycentricMapping, see issue #784 for clear description of the problem. . To avoid more duplication of code, and to allow the optimization to be available for a maximum of topology types, I needed the code to be refactored. . So:. 1. I created an abstract class (BarycentricMapperTopologyContainer) that gather the shared implementations of BarycentricMapperEdgeSetTopology, BarycentricMapperTriangleSetTopology, BarycentricMapperQuadSetTopology, BarycentricMapperTetrahedronSetTopology, and BarycentricMapperHexahedronSetTopology. 2. Enabeling to refactor the apply(), applyJ(), applyJT(), getJ(), draw() functions and more importantly the function I want to optimize, init(). The PR also include some cleaning, in particular the renaming of variables. That could indeed break not updated code. . What I couldn't do, is to also refactor the code of BarycentricMapperMeshTopology...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901:98,clear,clear,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/797#issuecomment-432581901,2,['clear'],['clear']
Usability,"TODO : use a generic container level for static, dynamic and grid; SimpleTesselatedTetraTopologicalMapping should join the SimpleTesselatedTetraMechanicalMapping",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2612#issuecomment-1033632088:67,Simpl,SimpleTesselatedTetraTopologicalMapping,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2612#issuecomment-1033632088,2,['Simpl'],"['SimpleTesselatedTetraMechanicalMapping', 'SimpleTesselatedTetraTopologicalMapping']"
Usability,"TODO: Component must have an S (components), and must be tested first; Add to guidelines: vector data must include an “s” to specify that there is several info",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-994673970:78,guid,guidelines,78,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-994673970,2,['guid'],['guidelines']
Usability,"Tackles one point of #4221.; Replace embedded version of nlohmann_json library by an external one, using the modern ""find or fetch"" mechanism from CMake >=v3.24 (see https://cmake.org/cmake/help/latest/guide/using-dependencies/index.html#fetchcontent-and-find-package-integration ), similarly to what has been done in https://github.com/sofa-framework/sofa/pull/4240 for TinyXML2.; This is not required by conda-forge for the SOFA conda package as the library is header-only, only recommanded.; We also discussed to remove this dependency as only used by AdvancedTimer, but meanwhile, if not removed by the next-release, we might consider this PR or not. Let me know.; As for other dependencies that will be handled by this ""find or fetch"" mechanism, additional work needs to be done to forbid the fetch if the find package failed (also required for the next release). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4257:202,guid,guide,202,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4257,1,['guid'],['guide']
Usability,Test to be added for getRoot in case of diamond scenes written with SimpleAPI,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3469:68,Simpl,SimpleAPI,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3469,1,['Simpl'],['SimpleAPI']
Usability,"Thank Eulalie for this report. After discussion with Erik, STL was remove on purpose but the error message is not clear on that and on how to fix the Scene. We will fix that this friday. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059:114,clear,clear,114,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/768#issuecomment-420558059,2,['clear'],['clear']
Usability,Thank Mathieu for the info. So you are confirming that the name getContactPointWithSurfacePoint mismatch the behavior of what is actually implemented for vec3. Shouln't we separate the two behavior in two function with clear naming ?. DM,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/47#issuecomment-262492386:219,clear,clear,219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/47#issuecomment-262492386,2,['clear'],['clear']
Usability,"Thank for your feedback, . As you I don't understand the SofaKernel/SofaFramework stuff and I'm always searching for the right component in the wrong place so I fully support you on that, the reason is that Misc vs Advanced vs NG have different meaning for different person so it is a totally arbitrary segmentation. . But I'm not really talking about this here. What I have in mind is more or less orthogonal to this aspect (and it is fully compatible with the existing scheme or one you could define in the future grouping stuff like Qt). What I would like to discuss is more about how do we management the components life-time (from integration to deprecation) and not where to put them. I'm not sure I'm very clear sorry for that. . Here is our working branch: ; https://github.com/SofaDefrost/sofa/tree/deprecating_components. You can see there that there is no more CMakeLists than what we have now (or what we could have in some future if some serious cleaning and refactoring is done to organize the component 'à la Qt'...but I have no time for that ;)). . The goods I see of the proposed approach, in addition to be orthogonal to the other concerns, is that it is very progressive. It change nothing for existing user of Sofa while at the same time we can progressively deprecated components from Sofa by just moving them from one set to one other (and updating the scenechecker). In a symetric way we can also progressively integrate in the core set of components the one that have been ""elected"" by the SofaNG workgroup. And for the other component...well nothing change. . My dream is that by doing so we could small step after small step, remove 50% of the components that should be deprecated and that, combined with the pluginization lighten sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332175148,4,"['clear', 'feedback']","['clear', 'feedback']"
Usability,"Thank you @Camille-K and @jnbrunet for your feedback and explanation. . **As highlighted, we will keep the Lagrangian formulation and use the rest area to keep consistency with the others FEM implementation**. . - Regarding the triangle Thickness, it is not used anymore and will be removed when TriangleFEMForceField and TriangularFEMForceField will be merged to keep the code as simple as possible.; - Comparing the results with FEBio or Fenics is a very good idea. Which one do you recommend ? Considering starting from 0 with not much time.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-1068911072:44,feedback,feedback,44,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2275#issuecomment-1068911072,4,"['feedback', 'simpl']","['feedback', 'simple']"
Usability,"Thank you @maxime-tournier and sorry for the delay; @damienmarchal @matthieu-nesme do you have any feedback regarding the PR, otherwise it should be merged. Thx guys",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/411#issuecomment-334453911:99,feedback,feedback,99,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411#issuecomment-334453911,2,['feedback'],['feedback']
Usability,"Thank you Guillaume, ; I vote for fast-merge. But i think it is better to chain the two message like that:; ```console; msg_info() << ""Blahblah"" << msgendl; << ""Other thing"";; ```; Because it faster and if the two line are forming a single message it is more clear to have that:; ```console; INFO (MyComponent) : ""Blahblah"" ; ""OtherThing""; ```; Instead of: ; ```console; INFO (MyComponent) : ""Blahblah""; INFO (MyComponent) : ""OtherThing""; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289:259,clear,clear,259,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/380#issuecomment-325982289,2,['clear'],['clear']
Usability,"Thank you Jeremie for this valuable feedback. . I started working towards a faster initialization path for `Data` and `Link` in a separate branch, I will post some results here if I get anything meaningful. The main use-case is a scene with many contacts, thus many components/data are added and removed at each time step due to collision handling. We'll see whether this is worth the effort. A small thing: I've seen that the DataTypeInfo for fixed array-like types (RigidCoord, Vec, and the like) all enable the CopyOnWrite flag, which makes any Data holding such type allocate on the heap on construction. Is this needed?. Thanks again for your help.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/44#issuecomment-256399737:36,feedback,feedback,36,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/44#issuecomment-256399737,2,['feedback'],['feedback']
Usability,"Thank you a lot for the nice proposals preventing potential hacks like the ones I presented above. I just checked your pull request and I really like its simple usage - I hope it will be merged soon! . @damienmarchal : I am excited to see your solution to 3., if you would like to have further information about my approach, please let me know. To create python scenes, I am using the [scene to python transform script](https://github.com/sofa-framework/sofa/blob/master/applications/plugins/SofaPython/scn2python.py) and with the direct usage your approach works well, i.e.; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn -o caduceus2 -p`; generates the python scene `caduceus2.py` and when launching it I can retrieve all the arguments of the command line, i.e. the output of ; `runSofa caduceusPython.scn --argv test test2`; is `['caduceusPython', 'test', 'test2']`. However, by default (i.e. without -p) the scene to python transform script generates a .scn file calling a .py file - a choice made to prevent having to load the python plugin before launching python scenes. For example; `applications/plugins/SofaPython/scn2python.py examples/Demos/caduceus.scn`; outputs the caduceusPython.scn and caduceusPython.py. Now when using ; `runSofa caduceusPython.scn --argv test test2`; and running ; `print sys.argv`; only the filename can be retrieved, i.e. the output is `['caduceusPython']`. 1. Is the usage presented as second approach (i.e. using .scn and .py) still up to date/a recommended approach?; 2. If yes, is it possible to access the argv in the .py file when it is used from the .scn file? Or is it possible to improve the implementation such that it can handle it?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656:154,simpl,simple,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/356#issuecomment-324056656,2,['simpl'],['simple']
Usability,"Thank you for this work @damienmarchal. ; I agree there are some location problems with tests in SofaKernel but I'm not sure the solution you propose would be clearer at a CMake point of view.; This is what I would find consistent:; ```; SofaKernel; framework; sofa; core; core_test; defaulttype; defaulttype_test; helper; helper_test; simulation; simulation_test; ```; Is this possible? Too long to implement? Breaking too much?. I think that any *_test should be located besides the library it tests, not in a package. I would even say that we should have **nothing except CMake files in CMake packages**.; I'm afraid that your proposal will mix SofaFramework package definition and test sources. ; I know we are creating a SofaFramework_test executable and that it's obviously related to the SofaFramework package but the problem is not the test location, it's the fact that it's bubbled like a package while it should be factorized following SofaFramework's libraries. Not sure I was very clear. I may have misunderstand stuff. Please be sure I don't want to kill your work <3",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122:159,clear,clearer,159,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/605#issuecomment-370851122,4,['clear'],"['clear', 'clearer']"
Usability,"Thank you for your feedback @damienmarchal ! . I've done most of your enhancements, but I can't figure out what tests we can create for this PR. ; Do you have some suggestions ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216:19,feedback,feedback,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/360#issuecomment-323296216,2,['feedback'],['feedback']
Usability,"Thank you for your feedback Eulalie!; I guess some fixes / merges are required to fit the current master. To start with, let's [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459#issuecomment-363549848:19,feedback,feedback,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459#issuecomment-363549848,2,['feedback'],['feedback']
Usability,"Thank you for your response. Yesterday I tried with my home PC and it occured that error. Today I'm trying with my office PC and it occurs another error but still in the same process. Here is the log:. ```; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giangnguyen/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python3.8 (found version ""3.8.10"") ; Adding library Sofa.Framework; Adding module Sofa.Component; Adding module Sofa.Component.ODESolver; Adding module Sofa.Component.ODESolver.Forward; Adding module Sofa.Component.ODESolver.Backward; Adding module Sofa.Component.IO; Adding module Sofa.Component.IO.Mesh; Adding module Sofa.Component.Playback; Adding module Sofa.Component.SceneUtility; Adding module Sofa.Component.Topology; Adding module Sofa.Component.Topology.Container; Adding module Sofa.Component.Topology.Container.Constant; Adding module Sofa.Component.Topology.Container.Dynamic; Adding module Sofa.Component.Topology.Container.Grid; Adding module Sofa.Component.Topology.Mapping; Adding module Sofa.Component.Topology.Utility; Adding module Sofa.Component.Visual; Adding module Sofa.Component.LinearSolver; Adding module Sofa.Component.LinearSolver.Iterative; Adding module Sofa.Component.LinearSolver.Direct; Sofa.Component.LinearSolver.Direct: using built-in metis library; Adding m",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062:435,usab,usable,435,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1486548062,2,['usab'],['usable']
Usability,"Thanks @damienmarchal for this already really nice POC on how to make a really simple to use Python DataEngine!. Concerning the registration of typename creators in the factory, I was wondering if the PSDEDataFactory couldn't somehow be merged together with the PythonFactory, currently used to bind types to python?. It's very quickly going to be unmaintainable otherwise I think. with the most basic matrices, vectors, scalars, basicTopologicalElements and their vector<X> version alone, I already have 50creators to register in the PSDEFactory, all of which were already somehow registered in the PythonFactory, for a different purpose, sure, but I think it could be combined.; Plus I have my own python bindings in my plugins, & I wouldn't like having to register them in sofa's Binding_Base.cpp file. I'd already be more ok to have a way to do this directly from my plugin (like it's done using the SP_ADD_CLASS_IN_FACTORY macros from SofaPython.. but again, why not have this macro doing all the work by itself?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469:79,simpl,simple,79,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-381072469,2,['simpl'],['simple']
Usability,"Thanks @fredroy for taking the feedback into account. ; To me this PR is ready to merge because it fullfill our checklist and no one said ""no go"" in 15 days.; I rebuild from a fresh [ci-build]",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311036354:31,feedback,feedback,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/301#issuecomment-311036354,2,['feedback'],['feedback']
Usability,Thanks @jnbrunet for the interesting feedback indeed.; I can run the tests!. Agreed @damienmarchal ; What is this DISPLAY_TIME!?! wtf!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317:37,feedback,feedback,37,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1263#issuecomment-594847317,2,['feedback'],['feedback']
Usability,Thanks @jnbrunet. I made some messages clearer. Some of them was meant to facilitate debugging (it helped me) and are not necessarily meant for the user. I converted them to developers messages (but still made them clearer).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967:39,clear,clearer,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2076#issuecomment-844140967,4,['clear'],['clearer']
Usability,"Thanks @matthieu-nesme for the feedbacks and discussions. . About the implementation I agree there is some smoothing to do (there is redundency in the classes, the constructors with std::initializer are now useless as vs2013 don't like them)... But I would be happy to have that happens in a second PR as I think I can change this without touching the API :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213#issuecomment-290018588:31,feedback,feedbacks,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213#issuecomment-290018588,2,['feedback'],['feedbacks']
Usability,"Thanks Bruno,. To me the pro in this PR:; - the design seems clearer with the use of final and the delegates. ; - more efficient (no listener in each Nodes, no need to maintaint).; - more consistent with begin/end notifications. . The bad:; - no backward compatibility (can one be implemented ?), but this listener are not used so much (only in GUI).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/917#issuecomment-461186420:61,clear,clearer,61,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/917#issuecomment-461186420,2,['clear'],['clearer']
Usability,Thanks Guillaume for the feedback. I'm very surprise this fails since ; https://github.com/sofa-framework/sofa/commit/b70b477f9cdae6a1d31d4f462f23780d3bdbcde1. because I see no link between the two.... this is very strange to me.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263270733:25,feedback,feedback,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/54#issuecomment-263270733,2,['feedback'],['feedback']
Usability,"Thanks a lot @alxbilger for your feedback, I will make the requested change :+1:",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3227#issuecomment-1222392543:33,feedback,feedback,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3227#issuecomment-1222392543,2,['feedback'],['feedback']
Usability,"Thanks a lot @chhas for the investigation :raised_hands:; I'm no specialist either, but, although most changes in the commit are simply `Vector3 -> Vec3`, there are two things that seem suspicious to me, in `SofaViewer.cpp` (l.256-295) and `QtGLViewer.cpp`(l.823-860) (sorry, I can't find an easy way to link to a specific line in a commit diff view).; In both, there is a change of condition from :; ```; if( isControlPressed() ); ```; to; ```; if (!isControlPressed() && !e->isAutoRepeat()); ```; before calling a `propagateEvent` method on the `QKeyEvent` being processed.; I had a brief look: `isAutoRepeat` seems to be a Qt routine always returning an `autor` variable being set to 1 in `qevent.h`. And `isControlPressed()` refers to an internal variable `m_isControlPressed` in `SofaViewer.h`, which does what its name suggests. At this point, it seems that these modifications could very well explain the two changes of behaviour I was describing above.; @damienmarchal, could you give us some input on this ?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910:129,simpl,simply,129,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3510#issuecomment-1333567910,2,['simpl'],['simply']
Usability,"Thanks a lot Matthieu 👍 . Can you expand a little bit on ""easy"" vs. ""hard"" to get global/local mu parameters?. Looking quickly at the code, one could just add a GLOBAL flag and use the global mu (if any): that would make the code a bit simpler and the behaviour more explicit.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/81#issuecomment-264918392:236,simpl,simpler,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-264918392,2,['simpl'],['simpler']
Usability,"Thanks a lot for being able to solve that because it has been a pain in the ass for too long!. But please, remove all that stuff about plugin reinit!!! Moreover it depends on the app/gui implementation, it is not satisfying. I think a simple workaround would do the job in PythonEnvironment::Init():; `; PyRun_SimpleString(""; try: __SofaPython_mainenvironment__.uninstall(); except: __SofaPython_mainenvironment__=ImportFrame()"");; `; (approximative code)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641:235,simpl,simple,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/198#issuecomment-285697641,2,['simpl'],['simple']
Usability,"Thanks again for the investigation. I see you are using the raw c++ code to make your scene. Instead of doing that the ""hard way"" you can use ""simplapi"" which mimick in c++ de python one. It is in sofa/simulation/graph/simpleapi.h and there are exemple in the code base.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256001467:143,simpl,simplapi,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256001467,4,['simpl'],"['simplapi', 'simpleapi']"
Usability,"Thanks again for this nice contribution @nhnhan92 ; Sorry I had prepared many similar feedback as @epernod so, some might be duplicated. A more general remark, could you point us out the documentation you used to write this code please?; Do you have an idea of when you would plan to consider rotations around the z axis?; I also noticed in this paper typical tests for testing accuracy: https://sci-hub.se/10.1007/s00366-020-00974-4 it would be great to get a similar test for the continuous integration!. If this is too much questions, we can discuss about this live if you'd like",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209:86,feedback,feedback,86,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1745#issuecomment-773359209,2,['feedback'],['feedback']
Usability,"Thanks for reporting this issue @margaretkoehler. . > GuiDataRepository.addFirstPath(Utils::getSofaPathTo(""share/sofa/gui/runSofa/resources/"").c_str()) ;. Does it fix the problem ? If yes, we need to test it on other OS. . I will investigate it tomorrow afternoon during the coding friday. Feel free to join us for helping :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/577#issuecomment-360522585:54,GuiD,GuiDataRepository,54,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/577#issuecomment-360522585,1,['GuiD'],['GuiDataRepository']
Usability,"Thanks for the PR @alxbilger ; I notify here @courtecuisse since he could have valuable feedback / review on this simple parallelization of the LDL factorization. Feedback could also be nice to factorize things and make sure some private plugins can rely on this solver. By the way, it also follows the design proposed several years ago (4!) by @damienmarchal in this branch: https://github.com/SofaDefrost/sofa/tree/pluginSofaCoreAsync",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936:88,feedback,feedback,88,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661#issuecomment-1041358936,5,"['Feedback', 'feedback', 'simpl']","['Feedback', 'feedback', 'simple']"
Usability,"Thanks for the clear answer, . I'm afraid that if no one spend time on fixing this issue, the whole PR will wait for an un-defined amount of time. ; On my side I'm fully booked.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-312803016:15,clear,clear,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-312803016,2,['clear'],['clear']
Usability,Thanks for the feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2787#issuecomment-1067804077:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2787#issuecomment-1067804077,2,['feedback'],['feedback']
Usability,Thanks for the feedback @untereiner maybe it is because in batch mode there is no opengl context. ; If I remember correctly this crash macos's tests that way. . Can you providing line/file that cause problem ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/548#issuecomment-357533958,2,['feedback'],['feedback']
Usability,"Thanks for the feedback Jean-Nicolas, . Could you provide examples of what would look like a generic/inituitive version in your view ? . On my side I'm thinking of something like:; ```xml; <CustomField name=""scalarfield"" source=""myfield.py"" evalFunctionName=""myImplicitFunction""/> ; <SurfaceMeshGenerationFromScalarField field=""@scalarfield"" output=""@topology""/>. <MetaBallField name=""scalarfield2"" radius=""0.5"" positions=""0 0 0""/> ; <SurfaceMeshGenerationFromScalarField field=""@scalarfield2"" output=""@topology2""/>; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339468578:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339468578,2,['feedback'],['feedback']
Usability,"Thanks for the feedback,. I totally agree that O(log n) as well as memory/indirection optimization would be nicer but this topic should have its own issue. About the checking...I also like the idea of the Visitor and this is very consistent as we already have existing SceneCheckerVisitor.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/362#issuecomment-323972382,2,['feedback'],['feedback']
Usability,Thanks for the feedback...actually this is what is done:; https://github.com/sofa-framework/sofa/pull/1269/files#diff-5b014f309073c89dc456a09768028992. But having hunderds of thousand of warnings for using deprecation method give me the envy to fix all the visible calling points.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603891481:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1269#issuecomment-603891481,2,['feedback'],['feedback']
Usability,"Thanks for the feedbacks,. This seems related to the fact that Engines are designed to be data flow oriented and, keeping that in mind, we shouldn't break the general design of engines. But, it also appears that in several scenarios, ROIs are used to select features, eg 'position', but not necessarily at initialization time and not necessarily at rest_position and that there may not have an associated 'not changing' data field. My impression is that being able to pick a set of features from data field in a quick way, at controlled instant, is as desirable as not breaking the Engine logics. . What do you think about refactoring that and separate the two behaviors in different components. BoxROISelector and BoxROIEngine ?. DM.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238:15,feedback,feedbacks,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/38#issuecomment-258126238,2,['feedback'],['feedbacks']
Usability,Thanks for the heads up @epernod .; I just updated [my CLangFormat config](https://gist.github.com/pedroperrusi/f85f0d0db94a2b046716ec0e759c3550) to use Allman break before brackets as the [Guidelines](https://github.com/sofa-framework/sofa/blob/master/GUIDELINES.md) request.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243:190,Guid,Guidelines,190,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2020#issuecomment-822360243,2,"['GUID', 'Guid']","['GUIDELINES', 'Guidelines']"
Usability,Thanks for the screenshot @alxbilger and the feedback.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2416#issuecomment-981686033:45,feedback,feedback,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2416#issuecomment-981686033,2,['feedback'],['feedback']
Usability,"Thanks for you feedback @epernod. I think your suggestion is the more natural. Actually, I tried to set `printLog` in a log, to see if it was already working (but no). But I always feel uncomfortable when modifying such an important base class. I don't want that some classes become God classes. That's why I did not touch the Node class. But I am definitively open to discussion",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1196614783:15,feedback,feedback,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3162#issuecomment-1196614783,2,['feedback'],['feedback']
Usability,"Thanks for your PR @gaurab4163 :+1: . I'm not sure about the place (file and namespace) this function should be. @damienmarchal you have a clearer vision of logging and messages in SOFA, what do you think?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967:139,clear,clearer,139,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/639#issuecomment-381898967,2,['clear'],['clearer']
Usability,"Thanks for your feedback @hugtalbot!. So I understand everything is on tracks on this bug then. I guess you have a lot of job to do guys with all the issues that you have to treat, and you are doing such a great job with SOFA framework!; I am discovering it since a few days now, and I really enjoy the journey :). Is there any chance that this issue will be treated in the near future?. Anyway, I found a work around:; - I read the `.vtk` file with the `meshio` python library.; - Then I export the mesh in `.mesh` format.; - I finally import the `.mesh` file into the gmsh python API, and export it in `.msh` format, which is readable by the `MeshGmshLoader`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155660392:16,feedback,feedback,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/652#issuecomment-2155660392,2,['feedback'],['feedback']
Usability,"Thanks for your feedback @jnbrunet @damienmarchal . Meanwhile, this PR is ready, and I suggest reviewing it as a fast-merge since it's not much and fixes a compile-time issue for quite a few people.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/827#issuecomment-439025656:16,feedback,feedback,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/827#issuecomment-439025656,2,['feedback'],['feedback']
Usability,"Thanks for your feedback,. We need examples of use of Data & Base conversion to add in the tests.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319:16,feedback,feedback,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307789319,2,['feedback'],['feedback']
Usability,"Thanks for your feedbacks,; I've encountered the problem with the Fontain.scn scene in sofa python examples. I don't think there's a mechanical state controller there though",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/724#issuecomment-406516354:16,feedback,feedbacks,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/724#issuecomment-406516354,2,['feedback'],['feedbacks']
Usability,"Thanks for your feedbacks. . @matthieu-nesme I agree with you about adding Data to base. This was discussed in; issue https://github.com/sofa-framework/sofa/issues/44 for which there was no clear conclusion so I still have no clear idea on what to do. My current thinking is that fundamentally Data are good (among other things they are a big part of the sofa UIs as well as offer saving capabilities)...the problem is that their init cost is too high. Instead of not using them shouldn't we accelerate that ? (To restart the discussion I have added few benchmark to the issue https://github.com/sofa-framework/sofa/issues/44). . @thomas-lemaire You are totally right about the printLog. Actually this was my long term target. But as I didn't wanted to break everything I just set-up the foundation of an alternative in this PR, to have your feedbacks, try the feature on few component then do the changing and cleaning all around in a second PR. Could we pursue the discussion in a dedicated issue (https://github.com/sofa-framework/sofa/issues/160) to define how we should do the general cleaning.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927:16,feedback,feedbacks,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/106#issuecomment-276751927,8,"['clear', 'feedback']","['clear', 'feedbacks']"
Usability,"Thanks you all the for the feedback. . I appologize about the reviewing work. And you are right, this one is very hard. We can also be a bit more ""lazy"" in the reviewing, merging it, write a good changelog a tell people to send feedback if something goes wrong. . I'm pushing this one because we have a nice other PR waiting and this one have new cool features (from distance field modeling to tetrahedral meshing). . EDIT: actually moving from module to plugins without refactoring is much easier...but well... I was not able to prevent me.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663:27,feedback,feedback,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389#issuecomment-328528663,4,['feedback'],['feedback']
Usability,Thanks you very much for this interesting PR. ; I hope we will have feedback on the NG direction.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/707#issuecomment-403004833:68,feedback,feedback,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/707#issuecomment-403004833,2,['feedback'],['feedback']
Usability,"The CI does not look happy, but I think it's nothing:. for Linux: some permission error at CMake phase. and Windows: ; - `139 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/applications/plugins/SensableEmulation/examples/SimpleBox-Method2.scn/output.txt`; - `3 - see BUILD_URL/artifact/parent_dir/build/scene-tests/archive/examples/Components/topology/TopologicalModifiers/HexahedronForceFieldTopologyChangeHandling.scn/output.txt`. + scenes not working:; HexahedronCompositeFEMMapping.scn; HexahedronCompositeFEMForceFieldAndMass.scn",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637:236,Simpl,SimpleBox-,236,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1397#issuecomment-646697637,1,['Simpl'],['SimpleBox-']
Usability,"The Data's hold their actual content within a dedicated container called DataContentValue.; Two versions of this containers exists, on holding the data using a copy-on-write mechanism while an other is using a systematic copy. . Currently the selection is based on the content of DataTypeInfo, I found it more explicit and clear to rely on type_traits to select the proper DataContentValue version. . ```console; Caduceuse, 10 000 iterations:; - master: 24.15 s; - copy on write to true: 24.2 s; - copy on write to false: 23.78 s; - copy on write to is_scalar: 25.0 s; - copy on write to !is_scalar: 23.0 s. collisionMultiple.scn, 1 000 iterations:; - master: 15.9 s; - copy on write to true: 15.9 s; - copy on write to false: 14.7 s; - copy on write to is_scalar: 16.3 s; - copy on write to !is_scalar: 14.5 s; ; beam16x16x76-hexafem-rk4-CPU.scn: 2000 iterations; - master: 1 m 30; - copy on write to true: 1 m 32; - copy on write to false: 1 m 30 ; - copy on write to is_scalar: 1 m 26; - copy on write to !is_scalar: 1 m 18; ; TorusFall: 4000 iterations; - master: 41.5 s; - copy on write to true: 43.9 s; - copy on write to false: 41.2 s ; - copy on write to is_scalar: 43.3 s ; - copy on write to !is_scalar: 42.5 s; ```; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2285:323,clear,clear,323,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2285,1,['clear'],['clear']
Usability,The FindAssimp you use does not seem to handle versions so let's keep it simple.; ```cmake; find_package(Assimp NO_MODULE QUIET; PATHS /usr/lib/${CMAKE_LIBRARY_ARCHITECTURE}/cmake; ); ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-640559850:73,simpl,simple,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1360#issuecomment-640559850,2,['simpl'],['simple']
Usability,"The LinearForceField component does not contribute anything to the matrix when solving a system. Accordingly, the addKToMatrix function does nothing. However, since it is not implemented, it displays a warning when running a simulation. This PR simply adds an empty implementation of that function, which removes the warning displayed by the definition in the base class. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/384:245,simpl,simply,245,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/384,1,['simpl'],['simply']
Usability,"The Qt application is highly slowed down when the profiler window is displayed. The reasons:. - The tree is updated at each frame from scratch: 1) clearing the tree is time consuming, 2) building the widget tree is time consuming and 3) converting all the data (double) to `QString` is time consuming. I am not sure it is necessary to update the tree at each frame. We would need to find another mechanism (for example only when the button `Animate` is unpressed).; - The chart is updated at each frame from scratch",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2142:147,clear,clearing,147,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2142,1,['clear'],['clearing']
Usability,"The abstract class `BaseNonLinearMapping` is introduced. All mappings from the folder, except `RigidMapping`, inherit from `BaseNonLinearMapping`. The class relies on the delegate pattern to simplify the implementation of non-linear mappings. All the affected mappings relied on the same design, so it made sense to factorize common code in a base class. Breaking because I removed some aliases, made some methods final etc. What I would like for a next work is to factorize the 3 methods `buildGeometricStiffnessMatrix`, `applyDJT` and `updateK` (if possible). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5006:191,simpl,simplify,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5006,1,['simpl'],['simplify']
Usability,The changes have not been propagated everywhere @epernod ; ```bash; /builds/workspace/sofa-framework/PR-1495/mac_clang-3.5_options_release/src/modules/SofaGeneralLoader/SphereLoader.cpp:81:5: error: use of undeclared identifier 'radius'; did you mean 'd_radius'?; radius.beginEdit()->clear();; ^~~~~~; d_radius; ```,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696242423:284,clear,clear,284,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1495#issuecomment-696242423,2,['clear'],['clear']
Usability,"The code removed in simpleapi was an experiment to avoid having to type ""string"" that shouldn't be merged. Given that no one use such a thin and how hard it would be to generalize the idea to the whole code base it is far better to remove it. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1845:20,simpl,simpleapi,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1845,1,['simpl'],['simpleapi']
Usability,"The computation of the compliance matrices is expensive. When we have multiple objects in our scene it can be interesting to compute these matrices concurrently. ; I'm not an expert in multithreading... so any feedback would be much appreciated :) ; Here's the speed up I get (percentage wrt the whole simulation):. With two identical FEM models:; ![image](https://user-images.githubusercontent.com/12150715/109066864-b609f580-76bb-11eb-89e7-b76e3932fe0d.png); ![image](https://user-images.githubusercontent.com/12150715/109066298-deddbb00-76ba-11eb-935a-74966977f5a2.png) with multithreading. With four identical FEM models:; ![image](https://user-images.githubusercontent.com/12150715/109066733-822ed000-76bb-11eb-9f6a-d3376ecfeeef.png); ![image](https://user-images.githubusercontent.com/12150715/109066480-1f3d3900-76bb-11eb-8128-b2a3270f95a4.png) with multithreading. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1862:210,feedback,feedback,210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1862,1,['feedback'],['feedback']
Usability,The config.h here clearly seems to be used within SofaSimulation modules. I guess the clean solution here is to remove the inclusion of this file in SofaFramework.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903:18,clear,clearly,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-541028903,2,['clear'],['clearly']
Usability,"The current implementation is now converting things like:; Sequence (non recursively), string, scalar, and boolean without a warning. . If the object has a method named ""getSofaPath()"". This one is used in the createObject to do the conversion. My target was to avoid collision with the existing str() function that may have a different semantic and I wanted to preserve it. This function could be implemented in Base and Data but in virtually any object we want to be used as a parameter in createObject. . It sounds nice to me because it make things ""explicit"" and convenient as it simplify user's scripts.; I'm not a big fan of 'getAsSofaPath()' and though about getAsSofaValue or getAsACreateObjectParameter(). What do you think ? Do you have alternative names ? . PS: @matthieu-nesme you said: ... ""Data's str already gives the stringvalue"", ; ```python; first = rootNode.createObject( 'ExternalComponent', name='theFirst'); print('VERSION 1:'+ str( first.findData('name') + "" type: "" + str(type(first.name)) ); print('VERSION 2:'+ str( first.name ) + "" type: "" + str(type(first.name)) ); ```; Actually prints: ; ```; VERSION 1: <Sofa.Data object at 0x7ff43b77f6f0> -> <type 'Sofa.Data'>; VERSION 2: theFirst -> <type 'str'>; ```; So str() function is not implemented as you said.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307835375:584,simpl,simplify,584,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-307835375,2,['simpl'],['simplify']
Usability,"The current implementation of Node::Single rely on SingleLink. . It is questionnable if the iterable list of typed sofa object should be stored in link instead of a a much simpler container. They are not using any of specific feature of SingleLink (like path read/writing which is actually invalid behavior as the content of the container is fully defined by the node and cannot be filled with user specified component). . At that time the sole puprose of using SingleLink seems to able to expose the content of these container in the GUI. If this is the case a much simpler code architecture should be used to avoid bloating the Node.h and API. In this PR we replace the Node::Single by the combination of two objects:; - NodeContainerSingle which only handle the ""container"" specific part of the SingleLink; - LinkeableContainer which wrap a container to expose it as a BaseLink. . The advantage of this design is twofold:; - only NodeContainerSingle is needed in Node.h and has a much reduce code-generation compared to SingleLink. ; - NodeContainerSingle can operate with forward declaration (which is not the case of SingleLink which helps to keep clean the inclusion tree.; - there is a clear separation between the Container and the Link part which lead to a very readable code. The LinkeableContainer is only used visible in Node.cpp. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more t",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1737:172,simpl,simpler,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1737,2,['simpl'],['simpler']
Usability,"The doxygen comments describe what the new component is. AsyncSparseLDLSolver is compatible to be used with a preconditioned CG (ShewchukPCGLinearSolver) and a WarpPreconditioner. The following scene examples are introduced:; - `examples/Components/linearsolver/FEMBAR-AsyncSparseLDLSolver.scn`: the simplest use case of AsyncSparseLDLSolver. This scene is to compare to `examples/Components/linearsolver/FEMBAR-SparseLDLSolver.scn`. The tests show a significant speed up.; - `examples/Components/linearsolver/preconditioner/FEMBAR-ShewchukPCGLinearSolver-AsyncSparseLDLSolver.scn`: AsyncSparseLDLSolver used as a preconditioner for ShewchukPCGLinearSolver; - `examples/Components/linearsolver/preconditioner/FEMBAR-ShewchukPCGLinearSolver-NoPreconditioner.scn`: ShewchukPCGLinearSolver with no preconditioner. Similar to the classical CG. Can be used for comparison.; - `examples/Components/linearsolver/preconditioner/FEMBAR-ShewchukPCGLinearSolver-WarpedAsyncSparseLDLSolver.scn`: AsyncSparseLDLSolver used as a preconditioner for ShewchukPCGLinearSolver. When the matrix has not been assembled, it is warped using a RotationFinder. This is done using an intermediate component: WarpPreconditioner. All the other scenes from the `examples/Components/linearsolver` folder have been modified so it is easy to change the resolution of the deformable beam. `totalMass` instead of `vertexMass`, and `BoxROI` instead of raw indices. In WarpPreconditioner, an additional Data is introduced to request matrix assembly at a given frequency. This is to minimize the cost of matrix assembly. Instead of assembling the matrix, the old one is used, taking into account the rotations compared to the previous time step. The same mechanism exists in ShewchukPCGLinearSolver. There are some refactoring in SparseLDLSolver to make more elegant code (without duplicated code) in AsyncSparseLDLSolver, but no changes are introduced.; ______________________________________________________. By submitting this pull req",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2661:300,simpl,simplest,300,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2661,1,['simpl'],['simplest']
Usability,"The failing tests were mainly due to a unintended side effect that projective constraints were no longer applied at the end of Simulation::init(). To make sure similar issues were not hidden somewhere else, in the last commit I renamed the propagate visitor to make sure existing codes fail at compilation time. Fixing other codes in private/external repos should be easy:; - if projective constraints should not be applied, simply apply the rename to the visitor class; - if projective constraints should be applied, add a MechanicalProject???Visitor first, then rename the existing one. This information should be added to the changelog, but as far as I understood this needs to be done after the PR is merged.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542:425,simpl,simply,425,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/216#issuecomment-308269542,2,['simpl'],['simply']
Usability,"The following warnings appears everytime a Link is declared:. https://learn.microsoft.com/en-us/cpp/error-messages/compiler-warnings/compiler-warning-level-1-c4305?view=msvc-170. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3763:70,learn,learn,70,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3763,1,['learn'],['learn']
Usability,"The function asin is defined in [-1,1].; The fix prevents NAN when the argument is slightly >1 due to numerical errors (1,000000000000001).; Hope it's clear enough.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/399#issuecomment-335735433:151,clear,clear,151,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/399#issuecomment-335735433,2,['clear'],['clear']
Usability,"The implementations of `addDForce` and `addBToMatrix` were removed in https://github.com/sofa-framework/sofa/commit/044f78ad4e3931b9754a90c251360f8f1e69c902. According to the commit message, an explicit formulation of the forces gives ""the best results"". This could not be tested on the example provided with SOFA as it is too simple (particles). To me, the computations seem ok, so I am in favor to keep them. However, we can discuss about activating the implicit formulation or not (through a Data?).; The implementation of `buildDampingMatrix` has been added according to #3967. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3999:327,simpl,simple,327,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3999,1,['simpl'],['simple']
Usability,"The issue with #1913 was that Sofa.GL was added to plugin_list.conf.default ; This PR aims to clarify things between modules and plugins.; `sofa_add_plugin` will now be the ONLY macro that adds targets to plugin_list.conf.default, which totally makes sense. Also, for the record:; > Plugin = Something that CAN be loaded by the PluginManager, through a RequiredPlugin for example. The entry point of a Plugin is initExternalModule (and that name could be better).; > ; > Module = Something that CANNOT be loaded by the PluginManager. Most of the time, modules are not loaded manually, they are loaded implicitly during dependency resolution. The entry point of a Module is init (and that name could also be better).; > ; > From a CMake point of view, both Plugin and Module can be standalone packages or simple targets added to a bigger package. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1941:804,simpl,simple,804,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1941,1,['simpl'],['simple']
Usability,"The line `dJ.startVec( row );` crashes in an example in the branch of #2777. I am not able to explain why, and I am not able to reproduce it in a simple example. But from what I can understand:. - Usage of `startVec` is internal to Eigen. I am not sure it is meant to be used outside of Eigen (but it's in the public API); - Manipulation of the `EigenSparseMatrix` is not consistent with the other non-linear mappings. This PR mimics the pattern from the other mappings. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3803:146,simpl,simple,146,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3803,1,['simpl'],['simple']
Usability,"The never-ending quest of eradicating implicit type conversion. This PR contains two things:. 1) Introduction of a user-defined literal for SReal constants.; 2) Avoid implicit conversions. **Introduction of a user-defined literal for SReal constants**. When dealing with constants that should be SReal, I saw the the following behavior in the SOFA code base:. - The `SReal` type is ignored and the constant is considered either as a double or a float, or any other primitive type. Example: `Vector3(1.f, 1.f, 1.f)`, `Vector3(1., 1., 1.)`, or `Vector3(1,1,1)`.; - The constant is C-style cast. Example: `Vector3( (SReal)1, (SReal)1, (SReal)1)`; - The constant is `static_cast`. Example: `Vector3( static_cast<SReal>(1), static_cast<SReal>(1), static_cast<SReal>(1))`. The first option is what we want to avoid. The second option has some problems that the third can solve. However, the third option is ugly, long and can be complex to read. To simplify such expressions, I introduced a user-defined literal. Example: `Vector3(1_sreal, 1_sreal, 1_sreal)`. This PR also fixes some implicit conversions that can be avoided.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3314:943,simpl,simplify,943,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3314,1,['simpl'],['simplify']
Usability,The new UX demo is so clean that it's hard to look again at the old one.; That's what I call perfect work.; Thanks @alxbilger :+1:,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2356#issuecomment-929326581:8,UX,UX,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2356#issuecomment-929326581,2,['UX'],['UX']
Usability,The plugin is not finish at all but is already usable. ; I will improve it in future works but this PR start to be very old so it would be nice to review and push it to avoid propagating the changes.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827:47,usab,usable,47,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/603#issuecomment-415749827,2,['usab'],['usable']
Usability,"The position and edges vectors were not cleared if load() is called multiple times. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/337]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3702:40,clear,cleared,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3702,1,['clear'],['cleared']
Usability,"The problem is because the alias introduced in commit https://github.com/sofa-framework/sofa/commit/cd3b8aea26c296c2f0bb948ec6f96807565522bf translated every ""float"" to 'f"" ... which only works for component that implement GetCustemTemplateName() consistently with the sofa template name convention. For component that does not do such a thing the templateName() is decoded from the typeid().name() (which is plateform specific). The automatic decoding from typeid is bad practice that leaks to the UX implementation/compiler details. . To fix the issue the NameDecoder mechanism (or the SOFA_CLASS macro) should be improved to check if there is DataTypeInfo<T>::name() before calling the NameDecoder.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3450#issuecomment-1307832420:499,UX,UX,499,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3450#issuecomment-1307832420,2,['UX'],['UX']
Usability,The problem is clearly related to the DAG graph. A workaround until the bug is corrected is to use the Tree instead:. `$ runSofa -s tree`,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/127#issuecomment-276599880:15,clear,clearly,15,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/127#issuecomment-276599880,2,['clear'],['clearly']
Usability,"The problem with SceneCreator is discussed in #417. ; But to summary the problem SceneCreator (which is supposed to be a plugin) is including tons of ; includes because he prefer to create the objects using ::New<MyObject>() instead of using abstracted BaseObject through the factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:309,simpl,simple,309,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901,4,['simpl'],"['simple', 'simpleapi']"
Usability,"The pull-request #95 contains code that automatically install the dispatcher needed in tests. ; So normally it is not needed any more to clearHandlers (unless you really want a specific behavior). . EDIT: The Pull request #95 was not clean so I did a new one, sorry for the noise.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897:137,clear,clearHandlers,137,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94#issuecomment-265592897,2,['clear'],['clearHandlers']
Usability,"The purpose of this PR is to unify the mass components in SOFA (UniformMass, DiagonalMass and MeshMatrixMass):; - unify the naming of data for mass information (vertexMass, massDensity and totalMass); - unify their initialization process; - apply the coding rules (especially regarding the variable prefix d_ and m_) and use the msg API; - add the feature of dataTracker on the data for mass information; - add support for additional CUDA templates for the MeshMatrixMass (that should always be preferred as default mass). This should ease the understanding of new users at first look.; All tests and checks added should also make these codes more robust. A script is added with this PR to automatically update all your scene files (.xml and .scn). I invite to be really **prudent** before merging this PR, since it affect basically all simulations. Note: @hdeling I removed unused functions (numericalIntegrationOrder, numericalIntegrationMethod, integrationMethod) in MeshMatrixMass that I think were used before the ""plugin.HighOrder"" plugin was created. Can you confirm this?. Suggestion for future work:; - rename MeshMatrixMass into SparseMass; - move MeshMatrixMass with DiagonalMass; - make DiagonalMass depends from MeshMatrixMass (since it's a simplified -lumped- derived approach from MeshMatrixMass) : this would clearly factorize the code and make it more robust. PS : bisous. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/637:1254,simpl,simplified,1254,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/637,2,"['clear', 'simpl']","['clearly', 'simplified']"
Usability,"The rational is that we should reduce as much as possible the interface size of an object as long as the same service can be done in our case the two variation are:; myData == value; vs; myData.getValue() == value. The second one has the advantage:; - to make explicit that there is computation/accessor. ; - the object we put in Data<> does not need anymore to have == operators. ; - as the Data interface has less functions so it is easier to learn/discover/read/remember. . EDIT: I'm not sure it is a good idea to remove the operator== directly without transition period, this is why I'm searching for some template tricks that would print the deprecation warning then stop the compilation but I didn't managed to do so. Any help appreciated.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1639:445,learn,learn,445,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1639,1,['learn'],['learn']
Usability,"The removed line prevents referencing this plugin in another, externally built SOFA plugin.; (doing a `find_package(SofaPython)` from the CMakeLists.txt of another plugin, built as a standalone project did not work). I don't know the side-effect of simply removing this line, but I also don't see in which case this could (or should) work anyway: there is no reason to create a target during the import of a package. the targets are created at install, and loaded during the package import, not created, to my understanding. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/888:249,simpl,simply,249,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/888,1,['simpl'],['simply']
Usability,The second happened by calling the MeshSpringForceField.init() method at each iteration. I simply removed the call since it wasn’t needed. See post: https://www.sofa-framework.org/community/forum/topic/memory-leaks/. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/804:91,simpl,simply,91,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/804,1,['simpl'],['simply']
Usability,"The state of vector.h and set.h is a bit messy right now. . A recent PR have added tests to vector & fix several crashes & infinite loop. It appears that the problematic code is also in set.h so a general code factoring is needed. . There is also some details on container refactoring in PR #113 ; Finally it is not very clear what should be in std:: and what should be in sofa::helper:: ...; and there is a lot of code in the .h for only two specialization I see no reason why they shouldn't be make extern and implemented in .cpp. . So this PR is a WIP in which everyone is welcome to contribute. My current todo list is:; - implement tests for set so we can refactor safely. ; - declare int & unsigned int as extern template & move specialization from .h to .cpp for vector & set; - have everything in sofa::helper for consistancy (vector, set, map, pair, list, deque); - fix the problem pointed by @maxime-tournier in #271 in the remove* functions. ; - remove the lines added by hugo ; ```cpp; /// \todo: refactoring of the containers required; /// More info PR #113: https://github.com/sofa-framework/sofa/pull/113; ```; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/278:321,clear,clear,321,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/278,1,['clear'],['clear']
Usability,"The static problem can be simply described as $F_{int} = F_{out}$, and $F_{int}=F_{nl}+KU$, where $F_{nl}$ is the nonlinear internal force vector while $KU$ is the linear one. If I have a **Arbitrarily Reasonable Displacement Fields** (U), how can I input this into SOFA and compute the $F_{out}$ by solving a static problem or extract the external force from API, and the nonlinear internal force $F_{nl}$ vector is then calculated. ; Your answers will be appreciated !",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4960:26,simpl,simply,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4960,1,['simpl'],['simply']
Usability,"The suggested change is much better, thank @jnbrunet for all the pr helping to make sofa more usable.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1652#issuecomment-742387960:94,usab,usable,94,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1652#issuecomment-742387960,2,['usab'],['usable']
Usability,"The underlying idea is that we should have only one alias for code consistency and to make things clearer.; I didn't deprecates/removed the long names alias but this should be done in a future PR. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3299:98,clear,clearer,98,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3299,1,['clear'],['clearer']
Usability,"The unit test `ParallelImplementationsRegistry_test` is failing for CGLinearSolver, stating that it has no creator although it is clear that such a component has one.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4323:130,clear,clear,130,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4323,1,['clear'],['clear']
Usability,"The unit tests failure came from the fact that the order of the files changed in the CMakeLists.txt. It highlights the facts that `EXPECT_MSG_EMIT` works only if `MainGtestMessageHandler` is added to the `MessageDispatcher`. But `logging_test.cpp` calls `clearHandlers`. Since `logging_test.cpp` is now sorted before `FileSystem_test.cpp`, it clears the message handler required by `FileSystem_test.cpp`. The message handler must be added in any case, and not relying on the fact that it might have been added earlier.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603:255,clear,clearHandlers,255,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3737#issuecomment-1479260603,4,['clear'],"['clearHandlers', 'clears']"
Usability,The workflow is really slow when changing simple values in the data inspectors ; (validating by clicking on update). In this pr we allows the user to change the numeric values; by moving the mouse left&right to decrease/increase with immediate update. I will do a small video to show the results to make that more clear. ; https://www.youtube.com/watch?v=fuWz3Dn1-oM; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/750:42,simpl,simple,42,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/750,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"There is a primary template class that can act on any type (not just Data). In this case, the class is a simple proxy.; A second implementation partially specializes the class for vector types. Again, no need to be a Data. The type needs to implement the `begin` and `end` methods, and the `[](int)` operator, to be considered a vector type.; Finally, a third implementation partially specializes the class for Data. This specialization uses one of the first two implementation: `template<class T> class ReadAccessor<Data<T> > : public ReadAccessor<T>`.; We can say that accessors are meant to be used for Data only, but they need the implementations for any type (the type that is contained by the Data). And those implementations can be tested, even if they are not used. Worth to be noted:; `std::vector` is of course considered as a vector type. If I want to use it through an accessor, it matches the partial specialization for vector types. However, accessors for vector types require the type `Size` in the vector type (there is an alias). `std::vector` has not such a type, so the compilation fails. Accessors to vector types can be used only for `sofa::type::vector` (and its derived types). Conclusion: ; 1) there is a discrepancy between the `is_vector` type trait and the requirements of the accessors.; 2) Write `ReadAccessor<std::vector<Real> >` or `ReadAccessor<Data<std::vector<Real> > >` does not compile. To fix this behavior, I'll suggest in another PR something like; ```cpp; using Size = std::conditional_t<hasSizeSize<T>::value, T::Size, T::size_type>;; ```. I think the read-only flag has nothing to do with the accessors. I think it is related to the GUI only.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278:105,simpl,simple,105,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3234#issuecomment-1228215278,2,['simpl'],['simple']
Usability,"There is severe performance issues on MacOS reported by users (@ChristianDuriez), the framerate is very slow. When we uncheck the visual model rendering (OglModel) the rendering goes much higher. . @fredroy and @bcarrez investigated the issue, the problem seems to be related to the use of GL_DOUBLE when passing data to opengl. . After some additional tests the issue also exists on Linux but is hardly noticeable on small mesh (like Caduceus) because the computation cost is dominated by simulation. But on a pure rendering test with tenth of Armadillo mesh (10*75000 triangles) there is undoubtly a performance drop. . This should be fixed before 19.06; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1070:590,undo,undoubtly,590,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1070,1,['undo'],['undoubtly']
Usability,"There was a SVector<T> class added in sofa::helper simply to change the stream operators to use commas to delimit values and [ ] to delimit the vector itself (allowing for vectors inside vectors), but I don't like this design because the type itself is different affecting all the code that uses it...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/21#issuecomment-250735840:51,simpl,simply,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/21#issuecomment-250735840,2,['simpl'],['simply']
Usability,"These two components were added as a tool to smooth the transition between the use of hard-coded alias in our code base to ""no alias"" at all. The underlying idea was to propose our users, and more specifically the one complaining about the disappearance of the alias they are using, a simple way to restore it (if they don't want to update their complete scene base). . About the fact is it not used... this is not surprising as we are not removing the aliases as it was planned and when we do it we are updating all the scenes in our code base (removing the need for MakeAlias). I personally think that the approach proposed in (#PR 2512: https://github.com/sofa-framework/sofa/pull/2512) is much elegant compared to the MakeAlias (and would advocate to remove MakeAlias when something similar to 2512 is merged) . In any case (either with MakeAlias *or* the Import component) hard-coding multiple aliases for a single component in our c++ code is an UX mistake while letting user specify their aliases is an UX feature, so I would be more in favor for having a clear roadmap to remove the aliases.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648:285,simpl,simple,285,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3353#issuecomment-1265109648,8,"['UX', 'clear', 'simpl']","['UX', 'clear', 'simple']"
Usability,"This PR adds a first implementation of the augmented lagrangian collision (see [A Surface-to-Surface Finite Element Algorithm for Large Deformation Frictional Contact](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6056201/pdf/bio-17-1579_081013.pdf)). . To do so, because it is very close to the classical Unilateral constraint, I've tried to factorize code by adding a virtualization layer for both the constraints and the associated contact responses (see added class BaseContactLagrangianConstraint and BaseUnilateralContactResponse). It rely on a contact param template which is the only thing that differs in term of data and of course the type of ConstraintResolution used. . An example scene is introduced in the Demo folder, simply copying the falling beam example and replacing the response by the augmented lagrangian one. . There are still one todo for the future, even if this PR is already working on its own : adding the per-contact-point penalty modulation. This should be done by going back to the collision element using the DetectionOutput.elem attribute. This allows to go back to the topology. The only unknown is how to compute the element volume when the colliding topology is mapped to the simulated one. . [ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/142]; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge lab",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5003:732,simpl,simply,732,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5003,1,['simpl'],['simply']
Usability,"This PR contains all the changes I did to produce SOFA releases.; Basically it is almost only CMake improvements to ease SOFA installation. Some of them may not be clean/wanted/useful, **please give feedback**. WARNING: I renamed some macros in SofaMacros.cmake so this could break your code. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/635:199,feedback,feedback,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/635,1,['feedback'],['feedback']
Usability,"This PR diffs against the sofa-framework::issofa_constrainsolving branch until it has been merged into master. # Objectives; - Adjust FreeMotionAnimationLoop so that it is more faithful to the actual equations, most notably by ; allowing only one linearisation of the mappings within the time step. ; - Update the API in order to compute a linearised version of the constraint forces, in a similar fashion to ; what is done in the Compliant plugin. . # Requirements ; The following PR are required in order to build this ; - #484 ✔️; - #450 ✔️ ; - #452 ✔️ ; - #456 ✔️ . For testing: ; - `SOFA_USE_MASK` **must** be deactivated, otherwise derivatives quantities ( velocity at contact points for example) are not propagated at all since all dofs are ""masked"" by default. After having a rather quick look, apparently the `SOFA_USE_MASK` impose some strict (undocumented) requirements (on top of other limitations like the fact that it does not support changes in the topology) about where in the time step the ""apply"" method of mappings is called. - There is a branch on my local fork that integrates all the requirements for testing that can be found at the following location [fjourdes:insimo_freemotion_integration](https://github.com/fjourdes/sofa/tree/insimo_freemotion_integration). # Changelog; API Breaking. [SofaCore]; - `ConstraintSolver` can now define the VecId where the constraint lambdas and constraint correction are stored. Previously, these were fixed locations, usually VecId::externalForce() and VecId::dx(), but it could vary depending on the implementation of both the ConstraintSolver and the ConstraintCorrection API. Components can retrieve these locations when inspecting their ConstraintParams object which is usually a parameter of the API methods for constraint solving.; - `ConstraintParams` contains the `MultiMatrixDerivId` that can be used by components related to the `ConstraintSolver` to retrieve the location of the constraint jacobian.; - `ConstraintResolution` API ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/459:854,undo,undocumented,854,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/459,1,['undo'],['undocumented']
Usability,"This PR fix the opengl performance issue reported in #https://github.com/sofa-framework/sofa/issues/1070. The fix is in OglModel.cpp/OglModel.h and is very simple, when the positions and normals array are containg double precision numbers they are converted into single precision one before sending the data to OpenGL. I'm sure we can optimize further the conversion loop...but I have not time for that (volunteer needed). . Because the code in OglModel was hard to read because of the #ifdef GLEW all around I first cleaned the whole SofaOpenglVisual code, by removing the #ifdef. I also updated the call to function with name *ARB because they are now part of any baseline opengl implementation since nearly a decade. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1069:156,simpl,simple,156,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1069,1,['simpl'],['simple']
Usability,"This PR fixes a requirement of https://github.com/conda-forge/staged-recipes/pull/23085 for the SOFA conda package on conda-forge.; This add a find package to the cmakelists to avoid the cmake fetch of cxxopts sources if a cxxopts is already available and found. This is a simplified version of a find or fetch mechanism which looks enough here, and does not require cmake >= 3.24 (which embedds a more sophisticated find or fetch within an improved FetchContent set of macros).; The PR also adds a cmake SOFA option, which may be re-used if other dependencies will be managed by a similar mechanism, to allow or disable the fetch content of cmake (default behavior is to allow fetching to keep compatibility). ; This is required by the conda-forge PR to disable the fetching of source. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4273:273,simpl,simplified,273,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4273,1,['simpl'],['simplified']
Usability,"This PR fixes exception handling in Python bindings. Mostly, the PR replaces the incorrect:; ```c++; PyErr_BadArgument();; Py_RETURN_NONE;; ```; with the correct:; ```c++; PyErr_BadArgument();; return NULL;; ```. As the [Python API](https://docs.python.org/2/c-api/exceptions.html) documentation says: . > [Python exception handling] works somewhat like the Unix errno variable: there is a global indicator (per thread) of the last error that occurred. Most functions don’t clear this on success, but will set it to indicate the cause of the error on failure.; > ; > **Most functions also return an error indicator, usually NULL if they are supposed to return a pointer, or -1 if they return an integer (exception: the PyArg_*() functions return 1 for success and 0 for failure).**. As it happened, any error triggered within the python bindings would go unnoticed until someone else would check the error flag using `PyErr_Occurred`, possibly during a python code error or by some other C extension (in my case, Numpy). . Hopefully the behaviour is now correct. <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] the content of the PR is clear and that a future PR from @maxime-tournier may follow the @matthieu-nesme suggestion. ; - [x] is more than 1 week old.; **Reviewers will merge only if all this checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/156:474,clear,clear,474,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/156,2,['clear'],['clear']
Usability,"This PR gives the ability to exchange images between different threads in the MultiThreading plugin. It would be especially usefull for multithreading a camera grabber component and other components (for instance computer vision algorithms). In more details: ; - It consists in adding, in the DataExchange component, exchanges of image data types (ImageUC, ImageUS, ImageF). It involves a depedency with the image plugin, handled in the CMakeLists through a preprocessor directive (WITH_IMAGE) defined in config.h.in.; - A simple example passing an image loaded from an ImageContainer component (thread 1) to an ImageViewer component (thread 2), to display the image in the GUI, is added.; - An issue with OpenGL in the draw() function in the Kinect component in the image plugin has also been fixed, by using the SOFA_NO_OPENGL directive (in the CMakeLists and in Kinect.h). Indeed, with the lib FREENECT detected, the OpenGL functions in draw() may not be compiled given the OpenGL support of SOFA. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/770:523,simpl,simple,523,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/770,1,['simpl'],['simple']
Usability,"This PR is based on #1406 and #1407 and uses the callback mechanism on some SOFA components (mainly Mesh loaders); It also takes advantage of the newly added ""isDirectory"" method in DataFileName in AddResourceRepository. It also:; - Removes the isPersistent flag from datafields in MeshLoaders (because this flag should only be used to set application-specific behaviors: in runSofa2, this flag is used to determine whether the datafield should be recorded when saving the scene for instance); - takes advantage of the getAccessors introduced by @damienmarchal in #1254 ; - Clears log messages from components withing update callbacks if the componentState changes to ""Valid""; - Sets the dynamic datafields created on-the-fly in the MeshVTKLoader depending on the mesh file content as outputs of the component (to guarantee they're update when the component's inputs change; - Checks for the validity of binary STL files using `isBinarySTLValid` for better error handling (see comment in the code l.103 in MeshSTLLoader.cpp); - Removes the autoLink flag from fileMesh in VisualModelImpl. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1408:574,Clear,Clears,574,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1408,1,['Clear'],['Clears']
Usability,"This PR is based on https://github.com/sofa-framework/sofa/pull/2613 and makes sense only if https://github.com/sofa-framework/sofa/pull/2613 is accepted. A macro is introduced to simplify declaration and definition of Data's. See code comments for a description of this macro. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2614:180,simpl,simplify,180,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2614,1,['simpl'],['simplify']
Usability,This PR is connected with:; https://github.com/sofa-framework/sofa/issues/61. I refresh the build to see if this still work then integrate it as no one gave negative feedbacks. ; [ci-build],MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624:166,feedback,feedbacks,166,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/80#issuecomment-267016624,2,['feedback'],['feedbacks']
Usability,"This PR is focused on cleaning the DefaultPipeline component. It contains:; - several tests with one of them is an OpenIssue (the depth parameter that is not checked nor generate warnings); - fix of the data field names that are not following the sofa guidelines, this may break code; directly using these attributes. ; - change some of the docstring to be more helpful; ; It also depend on the following other pull-requests: ; - https://github.com/sofa-framework/sofa/pull/101",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/105:252,guid,guidelines,252,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/105,1,['guid'],['guidelines']
Usability,This PR is here to support Issue #388 . This is the beginning of a work on cleaning and modularizing the; SofaVolumetricData.; The module is splitted in two Plugins.; - SofaDistanceGrid; - SofaImplicitField. A third plugin act as a transitional package SofaVolumetricData guiding; other developpers on the change they have to do in order to have their; code compiling again. CHANGELOG.txt:; - SofaVolumetricData was strongly refactored and splitted in two plugins SofaDistanceGrid and SofaImplicitField. Please report to sofa-dev any broken behavior. A transitional plugin SofaVolumetricData is provided for one year. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/389:272,guid,guiding,272,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/389,1,['guid'],['guiding']
Usability,This PR is so simple I cannot imagine anything that would go against its fast merging.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/282#issuecomment-305491712:14,simpl,simple,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/282#issuecomment-305491712,2,['simpl'],['simple']
Usability,"This PR links PythonLibs 2.7 to SofaPython ""the proper way"":. Until now, a target was created within SofaPython, in order to expose PythonLibs' leaders & libraries to linked projects. This led to issues when trying to link an external project to SofaPython, since the targets were not properly installed (see #888). Since there's not reason to create a separated target for PythonLibs anyway, I removed it, and simply linked PythonLibs as you would do for any other lib. It should not cause any issue to plugins using SofaPython, since PythonLibs' headers / lib are exposed publicly through the SofaPython target anyway. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/891:411,simpl,simply,411,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/891,1,['simpl'],['simply']
Usability,"This PR provides support for aliasing Eigen sparse matrices (classes derived from `EigenBaseSparseMatrix`) through scipy sparse matrices. The scipy matrix *aliases* the eigen matrix, so that any modification will reflect on both sides provided the sparsity pattern does not change (on either side). A python context manager is provided to commit modifications back, should the sparsity pattern change, as shown in the example below. The binding is somewhat unconventional as it uses `ctypes` for simplicity. Perhaps a cleaner version could be made using regular bindings + passing Eigen matrix pointers through python capsules if someone is motivated. # Example; ```python; from SofaPython import sparse; import numpy as np. import Sofa; Sofa.loadPlugin('Flexible'). def createScene(node):; template = 'Affine'. dofs = node.createObject('MechanicalObject', template = template, size = 1); dofs.init(); ; mass = node.createObject('AffineMass', template = template); mass.init(); mass.bwdInit(). ref = np.identity(12); ; with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(). m[10, 10] = 14; ref[10, 10] = 14. # assert our in-place modifications are reflected; with sparse.data_view(mass, 'massMatrix') as mm:; assert (mm == ref).all(). m[0, 10] = 14; ref[0, 10] = 14. # sparsity change: scipy matrix reallocates, no longer aliases ; with sparse.data_view(mass, 'massMatrix') as mm:; assert not (mm == ref).all(); ; # modification commit happens here. with sparse.data_view(mass, 'massMatrix') as m:; assert (m == ref).all(); ```. # Changelog. - Added `DataTypeInfo` for `EigenBaseSparseMatrix` derived classes; - Added a bunch of C functions in `SofaPython/ctypes.cpp` for aliasing logic; - Added a ctypes binding for aliasing + contexts in `SofaPython.sparse`; - Added an example in `SofaPython/examples/sparse.py`; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/411:496,simpl,simplicity,496,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/411,1,['simpl'],['simplicity']
Usability,This PR replaces #510 with a simple fix suggested by @vmagno (thank you). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/515:29,simpl,simple,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/515,1,['simpl'],['simple']
Usability,"This PR seems to include several major changes (ptr / include vs typedef). All directly or indirectly related to the simplification of the headers. Could you also explain if we earn something by the change on typedef (perf, etc) or is this in prevision for c++20 modules? is this lightening the compilation?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704844429:117,simpl,simplification,117,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1509#issuecomment-704844429,2,['simpl'],['simplification']
Usability,"This PR shows how to replace sofa::type::Mat with Eigen::Matrix. The goal was to minimize the amount of code change in the code base. Several difficulties arise:; - `sofa::type::Mat` initializes the values, but `Eigen::Matrix` don't; - `sofa::type::Mat` relies on the [] operators from `fixed_array`. I tried to add the [] operators in `Eigen::Matrix`, but too much cases makes it difficult. Maybe not impossible.; - `sofa::type::Vec` must also be a `Eigen::Vector`, but `Eigen::Vector` is a `Eigen::Matrix`, so all the methods we add in `Eigen::Matrix` are also available in `Eigen::Vector`, but sometimes it does not make sense. So conditions must be added on the availability of those methods. Because of those difficulties, the replacement is not simple. This PR is not finished. It just show how (at least the first step). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4993:751,simpl,simple,751,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4993,1,['simpl'],['simple']
Usability,This PR simply add a default class named NoArgument in Factory.h.; NoArgument is usefull when you try to instantiate BaseCreator or Factory without passing arguments. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/385:8,simpl,simply,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/385,1,['simpl'],['simply']
Usability,"This PR simply introduces the template alias:. ```c++ ; sofa::core::sptr<T> = boost::intrusive_ptr<T>;; ```; in `<sofa/core/sptr.h>` and reflects the needed changes in the codebase. # Motivation. Most (all?) component types in SOFA come with a member typename `T::SPtr` referring to `boost::intrusive_ptr<T>`, which makes it impossible to declare a member shared pointer to another component without including the component header file. In an effort to decrease compilation times by removing unneeded include files, this PR introduces a template alias to solve this problem. It is now possible to declare member shared pointers using a forward declaration of their types only, as shown in 48f1447. # Changelog. - added `sofa::core::sptr<T>` template alias; - reflected changes in BaseClass macros, Base and Aspects; - replaced many constructors in `New` with variadic templates; - added an example include fix in `Compliant`. # Note. This PR is *not* intended to be a place for fixing every member SPtr + includes, otherwise it will never get merged. . If we can agree on the PR's philosophy and get it merged, please make separate PRs for include simplifications. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/436:8,simpl,simply,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436,2,['simpl'],"['simplifications', 'simply']"
Usability,"This PR slightly improves the doc around the DataTypeInfo API according to our findings while digging in to implement the Data type binding in SofaPython3.; It also adds a specialization of the `DataTypeInfo<helper::vector<T> >` with `T=std::string`, which proves that it is possible to iterate over containers with `SimpleLayout() == true` and `BaseType()->FixedSize() == false`, which is important for SofaPython3 bindings. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1113:317,Simpl,SimpleLayout,317,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1113,1,['Simpl'],['SimpleLayout']
Usability,This PR was considered to simplify the dev of #2777 but it is no longer required.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1534342157:26,simpl,simplify,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2554#issuecomment-1534342157,2,['simpl'],['simplify']
Usability,"This branch is to prepare the coding sprint. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and 425 . Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/429:179,simpl,simpleapi,179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/429,3,['simpl'],"['simpleapi', 'simplify']"
Usability,This change has been performed to make the usage of the script and the documentary clearer. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/570:83,clear,clearer,83,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/570,1,['clear'],['clearer']
Usability,"This could be a step toward the removal of some visitors. The goal is to write something like the following instead of going through visitors:. ```C++; //simple counter of BaseMechanicalState; std::size_t counter {};; for (const auto* state : simulation::SceneGraphObjectTraversal<sofa::core::behavior::BaseMechanicalState>(root.get())); {; ++counter;; }. // The following replaces the visitor MechanicalGetNonDiagonalMassesCountVisitor; const auto massTraversal = simulation::SceneGraphObjectTraversal<sofa::core::behavior::BaseMass>(this->getContext());; const std::size_t nbNonDiagonalMasses = std::count_if(massTraversal.begin(), massTraversal.end(), ; [](auto* mass){ return !mass->isDiagonal();});; //note that these lines don't compile yet because this->getContext() does not give a Node*; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4334:154,simpl,simple,154,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4334,1,['simpl'],['simple']
Usability,"This fixes a segmentation fault I had with the SofaPython3 where the valid gui name was a python string variable. Since the GUI manager was storing a raw pointer to it, and since the python variable was later destroyed, the GUI manager was seg faulting when accessing the pointer. This PR simply creates a copy of the string instead of storing a raw pointer to it. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1108:289,simpl,simply,289,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1108,1,['simpl'],['simply']
Usability,This include PR #389 #407 #396 ; It would be nice to have feedback..otherwise...well after merge it will be to late ;),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-330655449:58,feedback,feedback,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-330655449,2,['feedback'],['feedback']
Usability,"This is a long standing issue in Sofa about not being able to save 'usable' scene in runSofa. . This is the result of multiple problems combined together among which:; - there is keywords that are not Data field but parsing hook (eg: src, compatbility hook) and they needs to be converted into Data.; - the Data have a persistant field. But it is let to the component to specify which are or not depending on some object property but depend on their context of ""use"".; Eg:; *) a data changed in the GUI should be saved; *) a data filled with a script shouldn't; etc... To allow to control fine grain the state of a data is now set to non persitant; by default and should only be activated specifically (by the GUI, or the script); if it is needed to save it. This is what this PR do, and despiste this is a behavior change...it is on a totally broken feature. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1191:68,usab,usable,68,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1191,1,['usab'],['usable']
Usability,"This is a variation of the proposal done by @fjourdes in #455 where I allow me a bit more refactoring. . Here is what the PR does:; - implement basic test class in sofa/helper/testing/ BaseTest & NumericTest so that all framework tests can use them. ; - in SofaSimulationGraph/testing add a BaseSimulationTest class that implement facilities for tests that needs scene manipulation & loading. ; - udpates SofaTest to use the previously defined classes but still behaving as they used to in the past. ; - updates the framework_test to use BaseTest or NumericTest in place of Sofa_test or ::testing; - moves the tests in framework to framework_extra when they are manipulating a simulation (thus requires BaseSimulationTest instead of BaseTest); - updates the tests in simulation_test so that they don't use SofaTest anymore. ; - moves SimpleApi from SceneCreator to SofaSimulationGraph & fix a bug.; - creates a plugin in a the application/package directory so that in our tests we can load all the common sofa component with a single RequirePlugin(""SofaAllCommonComponents""). The consequences are:; - SofaTest is no more needed in framework & simulation ; - we can now progressively make the other tests to rely on BaseTest, BaseSimulation and SimpleAPI that are dependency free instead of SofaTest/SceneCreator. . Feel free to provide feedback/comment. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/471:834,Simpl,SimpleApi,834,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/471,3,"['Simpl', 'feedback']","['SimpleAPI', 'SimpleApi', 'feedback']"
Usability,"This is a very wide topic, but having a clearer API for collisions, constraints would definitely help in getting more contributions. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1341:40,clear,clearer,40,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1341,1,['clear'],['clearer']
Usability,"This is an attempt at fixing #1528. At the moment, file parsing in MeshGmsh.cpp and MeshGmshLoader.cpp is (hopefully) correctly handled, including more recent MSH file formats (=>4.0).; EDIT: I don't fully understand how the loader works, mainly why MeshGmshLoader::readGmsh() is temporarily not used (commented in l.111), with the parsing apparently relying only on MeshGmsh::readGmsh(). However I tried to keep the same structure as before, simply taking into account the case where the .msh version is > 2.; A .msh file with version 4.1 is added (share/mesh/msh4_cube.msh), and its parsing by the MeshGmshLoader is tested both in examples/Components/loader/MeshGmshLoader.scn and in a new unit test. Both tests are working locally. Regarding the original purpose of #1528, the PR should be sufficient. Fixes #2433 #1528; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2155:443,simpl,simply,443,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2155,1,['simpl'],['simply']
Usability,"This is an old work that has already been merged into ng branch (see #620) but since the NG task is paused for now I think it would be appreciable to have this in master. The idea is to remove SofaComponent* from modules (because they are not modules) and put them next to SofaAllCommonComponents. Concretely, this PR does:; - Move SofaComponent* next to SofaAllCommonComponents; - Rename SofaAllCommonComponents into SofaComponentAll; - Rename ""packages"" into ""collections"" to avoid confusion with CMake packages like SofaGeneral, SofaFramework, ...; - Somes fixes in SofaPreconditioner and SofaSparseSolver completing #1137 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1155:100,pause,paused,100,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1155,1,['pause'],['paused']
Usability,This is connected but as the Image_png is not inheriting from Sofa_test then no. ; Maybe #96 also fix the test but this is more a side-effect. Actually I planned to make a future pull-request in which I will unify all the *_test ; to inherits from sofa_test and removing all the clearHandler/addHandler but this ; is not done yet. But as I don't know when I will have time for that I prefer to have ; this PR merged (to remove the failing test).,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479:279,clear,clearHandler,279,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/92#issuecomment-265831479,2,['clear'],['clearHandler']
Usability,"This is how I would do it:. 1. Separate the `SceneCheckMissingRequiredPlugin` class into 3: 1) an abstract base class, 2) a derived class printing the XML summary, 3) a derived class printing the Python summary.; 2. Move the XML class near the XML scene loader; 3. Move the Python class in SofaPython3; 4. Add (optionally) a new instance of the classes in each scene loader (see `void addListener( Listener* l )`). I admit this is quite complex to do. The reason is that all the scene checkers are all grouped in the same module, and `SceneCheck` is not in Core (but it could be). In any case, I am uncomfortable with the idea to have a scene checker for Python in the core. Somehow, it should be in SofaPython3. Another case to support is simpleapi :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155193405:740,simpl,simpleapi,740,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155193405,2,['simpl'],['simpleapi']
Usability,"This is pretty close to what I had in mind. Maybe call (or alias) the component with simply... ""MarchingCube"". It would become easy to find for everybody. Like you said, at the same time we could clean (refactor, delete) the other implementations of MarchingCube variations . Then a simple grep on the code from a new Sofa user would outline the ""MarchingCube"" component and welcome him in the community with joy :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638:85,simpl,simply,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/496#issuecomment-339581638,4,['simpl'],"['simple', 'simply']"
Usability,"This is still WIP be I would be happy to have some feedback. As discuss in #744 . The idea at the end is to remove all GetMeshTopology. ; 1. Add SingleLink in all component accessing GetMeshTopology from context; 2. Update all scenes but keep backward compability:; ```; if (linkTopology.empty()){; msg_warning() <<""set the link"";; linkTopology.set((this->getContext()->getMeshTopology());; }; ```; 3. Flag all getXXXMeshTopology to Depreciate 20.06 ?; 4. after 20.06 Remove all getMeshTopology(). Component upgraded: ; - DiagonalMass; - [SofaGeneralSimpleFEM]; - BeamFEMForceField; - TetrahedralCorotationalFEMForceField; - TriangularFEMForceFieldOptim; - [SofaSimpleFEM]; - HexahedronFEMForceField; - TetrahedronFEMForceField; - TetrahedronDiffusionFEMForceField; - NonUniformHexahedronFEMForceField; - [SofaGeneralDeformable] ; - QuadBendingSpring; - QuadularBendingSprings; - VectorSpringFF; - FastTriangularBendingSpring; - TriangleBendingSpring; - TriangularBendingSpring; - TriangularBiquadraticSpringFF; - TriangularQuadraticSpringFF; - TriangularTensorMassFF. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1183:51,feedback,feedback,51,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1183,1,['feedback'],['feedback']
Usability,"This is the Defrost week contribution in cleaning & testing. CHANGE for Hugo:; - [FileMonitor] fix the recurrent problem with file 'SofaKernel/framework/framework_test/resources/existing.txt' pointed in Issue https://github.com/sofa-framework/sofa/issues/146; - [ConstantForceField] clean to follow sofa guideline & fix the ""visible dependencies"", ; - [ConstantForceField] replace the ""points"" attribute by ""indices"" (with backward compatibility & deprecation message); - [ConstantForceField] add test in ConstantForceField_test, some of them are OpenIssue demonstrating existing problem (as crashing sofa when using negative (or too large) values in indices). ; - [Light] clean and strenghening the interface; - [Light] add tests ; - [DefaultAnimationLoop] add tests; - [LocalMinDistance] add tests; - [RequiredPlugin] add tests; - [ClipPlane] add tests; - [DistanceGrid] add tests. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [ ] is more than 1 week old (or has fast-merge label).; - [ ] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/258:304,guid,guideline,304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/258,1,['guid'],['guideline']
Usability,"This is the callback system we use in our dev branch for runSofa2.; It lets you add a callback function so that outputs can be updated upon changes on their input data.; The callback function returns a component state (Valid / invalid / ...) which guarantees that the component's state is properly maintained. I kept this PR simple (only tests to show the working principle), but will make another one later on with a few components that we've updated to use this callback mechanism (AddResourceRepository, MeshLoaders (OBJ / VTK / STL ...) . This mechanism is also used in the ""nodephysics"" Links POC (https://github.com/SofaDefrost/ComponentData_POC/pull/2). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1406:325,simpl,simple,325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1406,1,['simpl'],['simple']
Usability,"This is the return of PR https://github.com/sofa-framework/sofa/pull/106 taking into account all the feedback and discussion in https://github.com/sofa-framework/sofa/issues/179. This PR contains: ; - a PerComponentLoggingMessageHandler to stores the messages in components in a much cleaner way compared to the existing code in Sofa.; - the old history code is removed but a compatibility layer on top of the new one is provided to ; provide backward compatibility (eg in third party code like qtSofaQuick). ; - the runSofa GUI is slighly updated and improved to make use of the new component. ; - the msg_api is extended to facilitate its use and coherency; - I fixed all around in the code base the mis-usages of printLog eg: if(f_printLog) cout << .... ; - I didn't replaced the f_printLog data field because it would have broken the API too much ; (maybe one day if someone care). Now a bried summary of the new functions in the msg_* API; ```cpp; msg_info() << ""This is a message sended by the this component"" ;; msg_info(other) << ""This is a message sended by the 'other' component"" ;; msg_info(""A String"") << ""This message is not sended by a component"";; ```; Each version also exist in a conditional form eg:; ```cpp ; msg_info_when(!file.valid()) << ""File is not valid"" ; ```. In the previous examples you can also replace 'info' with the type of message you want to emit among:; 'info', 'advice', 'deprecated', 'warning', 'error', 'fatal'. ; ; 'warning', 'error' and 'fatal' and 'deprecated' message cannot be muted with the printLog parameter while 'info','advice',' can. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed.; - [x] is more than 1 week old. **Reviewers will merge only if all th",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190:101,feedback,feedback,101,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190,1,['feedback'],['feedback']
Usability,"This is the work on which was based the STC#4 coding sprint.; It has to be merged to clearly differentiate deprecation and pluginization works afterwards. It is a reopening of #429 (sort of).; I started from https://github.com/SofaDefrost/sofa/commits/deprecating_components beheaded until 456d88343e210ce89d9f7436c290be92fe438313 and merged it with master.; ________________________________________________________________. It does:; - split the CMakeFile.txt in three sets to allow component deprecation/stabilization.; - implement a light C++ api in sofa::simpleapi::* to create component with a pythonic look & feel; - use the simpleapi to change the code of SceneCreator to cut the dependencies and to simplify the plugizniation of modules. ; - in SceneCreator, create SceneUtil.h where some function from SceneCreator are now. ; - remove the module/sofa/component/typedef/* (which seems to cause no real problem); - mute the SOFA_DECL_CLASS/SOFA_LINK_CLASS so maybe...as everything works in the CI we ca n probably remove those lines and stop using them in .cpp ; - remove c++ tutorials from CMakeList before real removal they are slow to compile, and induce big dependencies so it will slow down the deprecation. ; - add an InfoComponent in the loaded scene to indicate when an object failed to be created. . To avoid post-cleaning workload I merged:; - PR#422 Fix for SofaImplicitField and SofaVolumetricData plugin; - PR#407 [SofaSphFluid & SofaMiscCollision] Pluginizing the two modules; For the same reasons we may also merge #414 #424 and #425. Notes: ; - the SceneCreator refactoring is not fully working and generates few test failures but this can be fix easily. ; - removing the typedef & SOFA_DECl/SOFA_LINK seems to ok. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/453:85,clear,clearly,85,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/453,4,"['clear', 'simpl']","['clearly', 'simpleapi', 'simplify']"
Usability,"This is to ease debugging by identifying threads managed by the task scheduler (Windows only).; Source: https://learn.microsoft.com/en-us/visualstudio/debugger/how-to-set-a-thread-name-in-native-code?view=vs-2022. ![image](https://user-images.githubusercontent.com/10572752/208109683-d20496a6-0d0c-4b4e-ad97-b139150d4c76.png). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3551:112,learn,learn,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3551,1,['learn'],['learn']
Usability,"This issue is connected to the discussion: ; https://github.com/sofa-framework/sofa/commit/aee0d912432d043a792f3b43160417e724b11704. This discussion was continued between I, Mathieu and Guillaume, during our weekly meeting. . Our conclusion were that: ; - in sofa::core the defaultmessagehandler should be the simplest so that people making third party applications out of Sofa are not disturbed by the new formatter. . - runSofa & Test may use the RichStyleFormater . - it would be nice to add more capability of routing the messages (explaination and details in the following). **New features:** ; Currently the _msg_* API has two class of message (Dev and Runtime). Message of class Runtime are supposed to be for ""the users"". Message of class Dev are supposed to be for developers. ; You can send message of class Runtime with _msg_info()_...and message of class Dev with _dmsg info()_. The use of macro was to allows us to totally remove the _dmsg*_ from the sofa official releases (they are totally removed from the binary and thus have a zero cost). ; ; In addition to the classes of message is the 'type' which is among: Advice, Info, Warning, Error, Deprecated, Fatal. To select the type you can use the macro _msg info_, _msg advice, _msg error_, ... or their dmsg_ equivalent. . It was suggested:; - to add one extra class of message for ""Log""; - to add a new MessageHandler that can route precisely the messages depending on the developper's need. ; (eg:; - route all the message to a FileMessageHandler but not the one of type advice); - route all the messages of class Log to a FileMessageHandler as well as the class Runtime&Error). DM",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/56:310,simpl,simplest,310,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/56,1,['simpl'],['simplest']
Usability,"This issue is created further to #4943 . This PR proposed to define base class functions as final and override these functions (which are templated) in child classes as a protected function. These changes are breaking but could be done in several steps:; 1. set the function of the abstract class to final; 2. fix the components which were overriding this function #4982; 3. set the functions overriding the templated one as protected (for v25.06 ?); 4. rename functions with a clear delegate name `doFunctionName()` + compatibility layer; 5. tests should be fixed to use the public virtual class (access protected functions); 6. add the check on the component state:; - first check non-invalidity; - then, check the validity. This project could have several benefits:; - cleaning the API and expliciting the delegation mechanism; - allowing to introduce and generalize more easily the componentState mechanims",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/5020:478,clear,clear,478,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/5020,1,['clear'],['clear']
Usability,This issue is the general discussion about the project User Experience.; Please feel free to share any remark or ongoing work about it.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/187:55,User Experience,User Experience,55,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/187,1,['User Experience'],['User Experience']
Usability,"This issue will be closed as SparseGrid is working as intended (even if it is not really clear); Excerpt [SparseGridTopology.h](https://github.com/sofa-framework/sofa/blob/c05ff12d4540a7b0f62052583f318090bfe91c31/SofaKernel/modules/SofaBaseTopology/src/SofaBaseTopology/SparseGridTopology.h#L44) :; ```; A sparse grid topology. Like a sparse FFD building from the bounding box of the object. Starting from a RegularGrid, only valid cells containing matter (ie intersecting the original surface mesh or totally inside the object) are considered.; * Valid cells are tagged by a Type BOUNDARY or INSIDE; ```; Closing.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1974#issuecomment-834199786:89,clear,clear,89,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1974#issuecomment-834199786,2,['clear'],['clear']
Usability,"This last parameter can be deduced from the container traits so there is no need to specify it. ; This allow to simplifying some calling point as in MechanicalVisitor & UpdateMappingVisitor.h. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1689:112,simpl,simplifying,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1689,1,['simpl'],['simplifying']
Usability,"This operator is not defined for RGBAColor. However, the compilator; somehow found a suitable operator in Vec.h, probably through implicit; conversion (?). This commit does not fix the compilation, but makes; things clearer. It also help the IDE to find the path to the operator; (it could not before). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1952:216,clear,clearer,216,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1952,1,['clear'],['clearer']
Usability,"This part of Sofa.GUI (main codebase):; - is an option in Sofa.GUI (strongly non-recommended in Sofa nowadays); - need X11 libs (so being deprecated with the arrival of Wayland); - almost 99.9% restricted to Linux due to X11; - has replacement (https://github.com/jnbrunet/SofaOffscreenCamera among others); - is not compiling 😂. So IMO it was time to make it a plugin (as in, being in `applications/plugins`); Due to all recent implemented mechanisms, it was quite straight-forward and almost as easy as simply cut-pasting into the new folder. IMO 2, I would even directly put it into an external fetchable plugin. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4928:505,simpl,simply,505,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4928,1,['simpl'],['simply']
Usability,"This plugin allows us to load images using CImg API. For now this plugin is located in applications/plugins of Sofa, and does not supersede ImageQt/ImagePNG/ImageBMP. Tests and a simple scene to test all the supported formats are provided. An other pull-request will be done to remove ImageQt/ImagePNG/ImageBMP and their posssible dependencies in SofaKernel (e.g libpng), following further discussions. Linked to issue #51 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [ ] does not break existing scenes.; - [ ] does not break API compatibility.; - [ ] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/185:179,simpl,simple,179,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/185,1,['simpl'],['simple']
Usability,"This pull request aims at making the gravity clearly appearing in object nodes as a GravityForceField.; Old way to define gravity still works and is not deprecated. Main changes:; - By implementing this, the Mass is not inheriting from ForceField anymore.; - The optional mechanism of a separate gravity and the **Gravity** class are also deprecated.; - Default gravity is now 0 (therefore some scenes might fail and need an update). The GravityForceField can:; - either be manually added by the user in the node; - or the gravity can still be globally defined in the root node which will create the automatic creation of a GravityForceField for each mass in the graph. Fix: #2683. [ci-depends-on https://github.com/sofa-framework/SofaPython3/pull/305]; [ci-depends-on https://github.com/sofa-framework/BeamAdapter/pull/56]; [ci-depends-on https://github.com/sofa-framework/ci/pull/18]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2988:45,clear,clearly,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2988,1,['clear'],['clearly']
Usability,This pull request fix the problem proposed in issue #1390 . **1. BoxROI.inl**; Move the code piece; ```; if(!d_doUpdate.getValue()){; return ;; }; ```; in front of indices clear operations. **2. RestShapeSpringsForceField.inl**; Add warning message in function recomputeIndices(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1391:172,clear,clear,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1391,1,['clear'],['clear']
Usability,"This pull request fixes issue #3510. In a nutshell: PR #3299 introduced a change of behavior in how the keyboard inputs are taken into account by the GUI during a simulation. This modification is actually a good idea (see #3384), but it was pushed in #3299 by mistake and should be introduced distinctively (as it seems to be breaking for the majority of scenes). This PR simply reverts the two lines in #3299 responsible for the change of behavior.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3562:372,simpl,simply,372,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3562,1,['simpl'],['simply']
Usability,This pull request removes classes implementing High Order simplicial elements from SOFA.; Those classes have been moved to plugin sofaFramework/ plugin.HighOrder; Updates include . - removing topological classes for High order triangulation and tetrahedral meshes; - removing tests associated with topological classes; - removing topological and mechanical mapping between regular and highorder meshes; - update of MeshMassMatrix by removing code to compute mass of high order elements. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] has been reviewed and agreed to be transitional.; - [x] is more than 1 week old. **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/222:58,simpl,simplicial,58,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/222,1,['simpl'],['simplicial']
Usability,"This was introduced by e33ff21e75356e6967509cc0822d72c74f2d0247 ; So in order to have the ""_d"" debug postfix in your binary, you must use the `sofa_add_plugin` macro. ; I do not use this macro, and I did not mind its existence because I thought it was only related to have a pretty presentation of the plugins in the cmake-gui. https://github.com/fjourdes/sofa/blob/insimo_sofabuild/CMakeLists.txt is the main CMakelists.txt I use in my fork. Could be much simpler, because I started it by modifying the CMakeLists.txt fomr master, and also I really spent 5 minutes on it. The list of projects and plugin to build is simply passed through CMake cache variables. However now you are in the case where doing a ; `add_subdirectory(my_plugin_directory)` and ; `sofa_add_plugin(my_plugin_directory)` both works, and ends up giving different names for your binaries regarding of the config you use for building. . I do not mind strategies like https://github.com/fjourdes/sofa/blob/insimo_sofabuild/SofaKernel/SofaCommon/CMakeLists.txt for packages that are a composition of libraries - I think it is an improvement in this particular case - but for plugins that are a single library, all the necessary information should reside on their CMakeLists.txt. ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/490:457,simpl,simpler,457,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/490,2,['simpl'],"['simpler', 'simply']"
Usability,"This will contain all the matters about testing (things in SofaHelper, gtest, tools/gtestmain) and make things clearer.; And it will be also a first step for a refactoring of all about testing (deprecated SofaTest, etc)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1827:111,clear,clearer,111,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1827,1,['clear'],['clearer']
Usability,This will help everyone to provide clear/readable bug reports.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2365:35,clear,clear,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2365,1,['clear'],['clear']
Usability,"Those 2 components are purely based on OpenGL (opengl code in update visual and draw().; But unexpectedly, updateVisual() is called, even in batch mode; This PR simply skips the updateVisual() if the Visual params does not handle opengl (which is the case in batch). Philosophical question: should we really updateVisual if there is no visual ?. https://github.com/sofa-framework/sofa/blob/26f65f15accb058053f49fbcd862cf59dec50352/Sofa/framework/Simulation/Core/src/sofa/simulation/Simulation.cpp#L274. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4436:161,simpl,simply,161,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4436,1,['simpl'],['simply']
Usability,"Timeout on tests was disabled in 2bc5db53 with commit message ""I have the intuition that this timeout mess might be the reason why continuous builds on Windows are so long. Let's see...""; Should we re-enable this?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033:74,intuit,intuition,74,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289726033,2,['intuit'],['intuition']
Usability,"To anyone (@guparan and @hugtalbot, @fredroy, @bcarrez ) Can you please check how the formatting sheet should be updated to stick the the sofa guidelines (or withdrawn some rule from the guidelines) so we have an up-to date sheet to use.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986:143,guid,guidelines,143,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/536#issuecomment-353082986,4,['guid'],['guidelines']
Usability,"To be clear, the simulation is not slower. The measured durations don't have overhead. The time consuming part due to the GUI is not measured. So, you are right, the percentages are accurate, but the durations also. It just takes time to display them.; I agree that optimizing this tool is not a priority. This issue is to keep it in mind.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2142#issuecomment-853001162:6,clear,clear,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2142#issuecomment-853001162,2,['clear'],['clear']
Usability,"To be honest, I don't think this INI file should be in the Sofa API, but more on the application side (GUI, python or whatever). The API should simply be giving the FFMPEG path by the application.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540453199:144,simpl,simply,144,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1177#issuecomment-540453199,2,['simpl'],['simply']
Usability,"To be noted, this change would only work in XML : SimpleAPI or Python do not change the ""isSet"" property as does the XML. I investigate on this currently",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2275612706:50,Simpl,SimpleAPI,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4876#issuecomment-2275612706,1,['Simpl'],['SimpleAPI']
Usability,"To cite Jeff Johson from GUI-Bloopers:; ""An even more blatant mistake is when designers put the same command onto different menus, but label it differently ... It is fairly serious because users almost always assume that differently labeled commands invoke different function"". . "" Another problem with putting the same command on multiple name is that it misleads users into believing that the application is more complex than it really is"". On my side I not that Jeff Johson is right and this is exactly the behavior I observed with new-comers to sofa. They are always puzzled and annoyed but the alias and this generates a lot of troubles and frustration. . So I think from an usability point of view this a bigger deal than what we, as developper, are thinking. . To improve the situation maybe we could: ; - each time an alias is used print a message using msg_info. This message should say:. ```; [INFO] Using of the data ""rest_position"" which is an alias (http://thedoctosofa/alias) pointing to the ""position' data field. To remove this message you can replace in myscele.xml:30 :; ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - each time an alias is used to for backward compatibility from previous name we should print a message using msg_warning:. ```; [WARNING] Using of the data ""rest_position"" is now deprecated. ; To remove this message you must update your scene and replace in myscele.xml:30 : ""<MechanicalObject rest_position='0 1 2 3 '> with ""<MechanicalObject 'position'=; ```; - indicate in the GUI the alternative names (because some user may search the alias name in the GUI) ; - we could also totally remove the addAlias from the sofa core (unless for developement convenience) and implement a component that explicitely give data alias in a scene (I don't know if this is hard to implement) ; Maybe something like:. ```; <DataAlias src='@position.postion' 'rest_position'> ; <ComponentAlias src='OGLModel' dest='VisualModel'>; ```. At ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194:680,usab,usability,680,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/35#issuecomment-255722194,2,['usab'],['usability']
Usability,"To keep history simple, I will push your commit manually and close this PR afterwards.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/433#issuecomment-333822629:16,simpl,simple,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/433#issuecomment-333822629,2,['simpl'],['simple']
Usability,"To make it more simple to manage deprecation and more specifically to not override the parse() method for that purpose. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3934:16,simpl,simple,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3934,1,['simpl'],['simple']
Usability,To me adding more and more hard coded drawing function by copy-pasting other's drawing function in every components is not desirable. . I see two better solutions: ; 1) the drawing code & related datafield should at least be moved in a separated c++ object to factor rendering & UX. ; 2) the drawing code & related datafields should be in a separated sofa component so they can be compose in the scene.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4945#issuecomment-2325930280:279,UX,UX,279,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4945#issuecomment-2325930280,2,['UX'],['UX']
Usability,To me it is important to clarify (a one more ambiguity) about sofa where the same code is used for both editing scenes and for final scene rendering in a simulator application. . To me these two are different concerns which should be clearly separated in our code base. ; Currently the same code is use for both concerns which make things very confusing while it may be organized that way:; - The 'final scene' rendering code should be externalized from the objects (from the draw/drawVisual function) and put in a specific plugin. The plugin may contain a complete rendering stack using whatever API. Of course ones that do not want not to use this code can just don't use it and if nobody wants it nobody implement it. . - The 'in-editor' rendering is a bit different as we need it for at least to implement runSofa/runSofa2 editing features. So I think this rendering code will still need to be provided (probably as part of runSofa more than of Sofa). . One my side one big difference between the 'in-editor' and 'scene' rendering is that ; the 'in-editor' rendering code shouldn't appears in the scenegraph.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626:234,clear,clearly,234,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/678#issuecomment-396846626,2,['clear'],['clearly']
Usability,"To me, the real question is do we want to keep float+double at the same time?; I.e. do we want to be able to have double dofs mapped from float dofs themselves mapped from double dofs?. A simple typedef for SReal would be so easy... Otherwise the graal would rather be to keep only float everywhere, and having just a few double where it is really necessary for numerical precision.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/495#issuecomment-339577323:188,simpl,simple,188,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/495#issuecomment-339577323,2,['simpl'],['simple']
Usability,"To reproduce the bug, simply add a `msg_error()` at the first line of `static std::string computeSofaPathPrefix()` (sofa/helper/Utils.cpp) on a mac OSX system. I believe this bug was due to an order mixup of global static initializer since this bug wasn't affecting Linux (not sure about Windows). I would need more time to prove this though. I moved the faulty global static intializer to local static initializer and that fixed the crashes. It may be a good idea in the future to minimize the uses of static objects (singletons, static global variables, etc) since they are pretty hard to debug and can cause behaviors dependent of the compiler used. @guparan could you test this in your PR #635 (by reinserting the msg_error) and make sure that the seg fault is gone?. Fixes #636 . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642:22,simpl,simply,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642,1,['simpl'],['simply']
Usability,Today RST doc is in the /doc folder of the SofaPython3.; It needs to be manually compiled and uploaded on readthedoc to update the documentation.; This should be simplified. It could also be the occasion to improve the doc.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3764:162,simpl,simplified,162,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3764,1,['simpl'],['simplified']
Usability,"Today, SOFA proposes two ConstraintSolvers:; - LCPConstraintSolver; - GenericConstraintSolvers. Both solve a constraint problem (LCP or NCLP).; Therefore, here are some todo suggestions:; - implementations should be merged, triggering the optimization for UnilateralInteractionConstraint of the LCPConstraintSolver when the problem only involves such constraints; - a unique component with a clear/simple name (ConstraintSolver) should be used; - the solver used should be a dedicated component in the scene : different methods to solve such a problem could be used, #3053 introduced a NNGS on top of the GaussSeidel (double implementation in LCPConstraintSolver & GenericConstraintSolvers) they should be extracted as components. Possibly interested people: @courtecuisse @ChristianDuriez @alxbilger @EulalieCoevoet @Younesssss",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3148:392,clear,clear,392,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3148,2,"['clear', 'simpl']","['clear', 'simple']"
Usability,"Two change needed by the SofaPython3 plugin. . - In BaseData Some method have two version, one without arguments the other with an ExecParm. In pybind11 we need to differentiate explicitely the two version making the code more complex. As I see no good reason why to keep the two version in Sofa I merged these two into one by using a default param = nullptr. . - I have added a join/split function in the StringUtils class. . - In SimpleAPI I found allowing BaseObjectDescription useful to create object and node. So I added new functions.; _____________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/860:432,Simpl,SimpleAPI,432,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/860,1,['Simpl'],['SimpleAPI']
Usability,"UX is not perfect : some plugins loaded are in blue in the GUI (the one loaded by the GUI itself).; Even with a tooltip, the user can be a bit confused but this is a dev feature. An issue will be created (double mechanism of plugin loading)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887:0,UX,UX,0,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109#issuecomment-1190072887,2,['UX'],['UX']
Usability,Update ChangeLog to better guide users when facing issues with recent breaking PRs. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1562:27,guid,guide,27,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1562,1,['guid'],['guide']
Usability,Update GUIDELINES.md,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/59:7,GUID,GUIDELINES,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/59,1,['GUID'],['GUIDELINES']
Usability,Update guidelines with sofa::type,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2506:7,guid,guidelines,7,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2506,2,['guid'],['guidelines']
Usability,"Update of my suggestion:; - Analyze; - Process; - Mesh; - Rigid (possibly to merge into Process); - Select; - Transform. It ""merges"" your proposals more or less. If no other feedback Fred will do the changes and ... :arrow_down: merge !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2812#issuecomment-1106528695:174,feedback,feedback,174,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2812#issuecomment-1106528695,2,['feedback'],['feedback']
Usability,"Update the guidelines so that they take into account the latest discussions and conclusion regarding the policy for:; - auto,; - epsilon,; - messaging,; - getContext(). ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1135:11,guid,guidelines,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1135,1,['guid'],['guidelines']
Usability,"Vec, Matrices and few other types have ""short name"" version. ; I added the one corresponding to fixed_array<>. I also added a BoundingBox3D so it become consistent with the other ones. . Comment for future code evolution: ; To know when to have an extern template or a short name alias it could be interesting to see if the type is used (or a consequence of a registration) in a ""factory"" (see SimpleDataWidget, TableDataWidget, ObjectFactory, ...). ; Each type used there may be extern templated and have its alias. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3298:394,Simpl,SimpleDataWidget,394,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3298,1,['Simpl'],['SimpleDataWidget']
Usability,Very simple PR to allow Windows loading MultiThreading plugin.; Will fix these errors: https://ci.inria.fr/sofa-ci/job/windows7_VS-2015_options_amd64/550/warnings2Result/category.96784904/. [ci-build][with-scene-tests]; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.; - [x] does not generate new unit test failures.; - [x] does not generate new scene test failures.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/507:5,simpl,simple,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/507,1,['simpl'],['simple']
Usability,"VirtualTypeInfoA was just to allow me to test without breaking other part of Sofa by side effect. So it is clearly temporary, I have not thought about that seriously on how to proceed the transition and if we need a separated VirtualTypeInfoA",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606:107,clear,clearly,107,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1552#issuecomment-712792606,2,['clear'],['clearly']
Usability,"VisualModelImpl inherits from State which allows it to be mapped (with Mappings) .; This State is slightly specialized for Visual thing (contains positions, normals and rest_positions(?) ). It was previously located exclusively in VisualModelImpl.h, this PR renames it and moves it into Sofa.Core.Visual.; Follows the guideline one class -> one (set of) file. Slightly breaking because some includes have been removed. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3782:318,guid,guideline,318,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3782,1,['guid'],['guideline']
Usability,"We already talked about that, and indeed you explained very well the nature of the problem and how to solve it. I don't think of a better approach. It is important to note that this pattern needs to be implemented again for classes, derived from BaseObject, and base class themselves. Look at `BarycentricMapping`, derived from `Mapping`, for example: it calls `Inherit1::doBaseObjectInit`, which is actually the same problem that you described. Here also it should be replaced by a ""delegate"" pattern. Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252283975:670,guid,guide,670,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252283975,2,['guid'],['guide']
Usability,We definitely need to get timing and position regression feedback from (at least a few) scene tests. Already existing tools for position regressions:; - applications/plugins/SofaTest/SofaTest_test/Regression_test; - applications/projects/sofaVerification. TODO:; - [x] Choose one tool to update and reactivate; - [ ] Add execution time measure; - [x] Integrate it in CI,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/801:57,feedback,feedback,57,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/801,1,['feedback'],['feedback']
Usability,"We discussed a lot about it...but we never did a PR on that topic probably fearing the refactoring work and the amount of workload it would generates. . > It is important to note that this pattern needs to be implemented again for classes, derived from BaseObject, and base class themselves. Look at BarycentricMapping, derived from Mapping, for example: it calls Inherit1::doBaseObjectInit, which is actually the same problem that you described. Here also it should be replaced by a ""delegate"" pattern. Yes, all call-super need to be fixed that way (which I didn't in the PR), I will not do that unless it is clear we are really going to do such a breaking change in the sofa code base ;) . > Currently, the fact that `init()` is no longer virtual is breaking. I had the same problem in https://github.com/sofa-framework/sofa/pull/3242. Do you have an idea to guide the developers in the update of their code?. I'm not sure I get the point . EDIT: (....I'm reading 3242 to see if I understand). ; EDIT2: the easy non breaking strategy is to use new names for the base virtual function eg: newInit (not sure we want that). (good code use override so if we keep the old name the code will breaks will be detected at compile time) but this is probably not enough... > Finally, I don't like `doBaseObjectInit`, and it is a problem of this pattern: we need to invent new names for delegate methods even though they are similar to the initial method. Instead of ""inventing"" new names for delegates methods I strongly advocate to rely on single and clear name scheme. . Currently I'm doing:; ```console; do _ ClassThatDelegatesToYou _ MethodDelegated; ```; so ```BaseObject::init()``` become ```doBaseObjectInit()``` (which I interpret as ""do"" the init as requested by BaseObject). . The underlying idea of the naming scheme is that with a first sight we get a lot of information... the (do) show the intention of the code and the pattern used, while the class's name indicates where to look at to get docum",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162:610,clear,clear,610,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3317#issuecomment-1252323162,4,"['clear', 'guid']","['clear', 'guide']"
Usability,"We should have clean guidelines for issue creation.; --> What is an issue, what is not? If something is not an issue, what should we do?; --> What are the guidelines for issue title?; --> What are the guidelines for issue description?. TODOs:; - [ ] See how other projects are handling this; - [ ] Propose a nice solution. Some leads:; - https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests; - https://github.com/devspace/awesome-github-templates; - https://github.com/stevemao/github-issue-templates",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2130:21,guid,guidelines,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2130,3,['guid'],['guidelines']
Usability,"Well I found a fix, it involves `sys.excepthook` to register a toplevel handler for uncaught python errors. In this case I simply abort the test. We should be fine now, but just in case we should also:. 1. limit logging size; 2. limit simulation time for tests. I'll look into the second part. And again, my deepest apologies.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371:123,simpl,simply,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/221#issuecomment-289694371,2,['simpl'],['simply']
Usability,"Well spotted @jnbrunet :+1: . This is due to the fact that SofaSimulationCore is part of the SofaFramework package and NOT the SofaSimulation package.; I think I wanted to make things simpler by installing SofaSimulationCore under SofaSimulation but I forgot to set the target_include_directories accordingly (as you saw by yourself). I think the most consistent solution is to install SofaSimulationCore back in SofaFramework by setting, in sofa/simulation/CMakeLists.txt, `sofa_install_targets(SofaFramework ${PROJECT_NAME} ""SofaFramework/sofa/simulation"")`.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203:184,simpl,simpler,184,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1180#issuecomment-540482203,2,['simpl'],['simpler']
Usability,"Well, I guess this isn't thread safe. . One solution could be to simply remove these static variables and create one loopup table per object created (using a good old private class member). It will duplicate the lookup table for each class instance, but seriously, how many `DefaultStyleMessageFormatter` objects can be created in your typical simulation :-P",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339:65,simpl,simply,65,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/642#issuecomment-384919339,2,['simpl'],['simply']
Usability,"Well, runSofa was not really following guidelines on that :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324327683:39,guid,guidelines,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/369#issuecomment-324327683,2,['guid'],['guidelines']
Usability,"Well:; - `doLoad()` was called three times, without clearing the lists (e.g. d_position, d_tetra...). So I had duplicated positions, triangles and tetra in my scene, which caused failures. Those calls seemed to be triggered by `addUpdateCallback` in `MeshLoader`.; - the transforms wasn't called three times, so the last positions were not transformed.... but that's not really important I guess. After digging, I found that using `getWriteOnlyAccessor()` to access the `d_positions`... instead of `beginEdit()`, like it was done in most other loaders, reduced this number of calls, which fixed everything for me. I should also mention that my scene was failing at init (when loading the scene).",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804:52,clear,clearing,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1554#issuecomment-713100804,2,['clear'],['clearing']
Usability,"What is the ""daccord repository""?. I would be happy to talk about saving a sofa scene (and to help making it work). first: indeed that's critical and it would do most of the job. second: most of the time these are other ways to describe existing Data (e.g. the Data 'translation' is a Vec3 , but the parse function is able to read scalars 'tx', 'ty' and 'tz'). In that case the Data ""translation"" is modified and should be saved. In Fact we could simply forbid parsing stuff that is not filling existing Data. third:; 'src' is not a problem, it is simply a way to automatically link Data together, so if a Data is modified, it will be saved (the saved scene would not have the 'src' arguments, but all the explicit Data links).; 'template' is not a problem, it is already working (you just have to always export the template name); 'name' is already a data.; what is 'type'?. I would add that saving a scene in the middle of a simulation could bring more problems:; - the states (pos,vel,rest_pos) of every *independent* dofs (only the mechanical objects at the roots of the mapping graph) should be exported.; - maybe others stuffs to find (external_forces of every dofs?); - maybe Data links broken by a copy-on-write should be exported.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/41#issuecomment-268987556:447,simpl,simply,447,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/41#issuecomment-268987556,4,['simpl'],['simply']
Usability,"When adding a new DataType for a MechanicalObject, I need to provide an operator* implementations which computes the dot product between two DataTypes. . ```; Real r = 0.0;. if (a.type == sofa::core::V_COORD && b.type == sofa::core::V_COORD); {; const VecCoord &va = this->read(core::ConstVecCoordId(a))->getValue();; const VecCoord &vb = this->read(core::ConstVecCoordId(b))->getValue();. for (unsigned int i=0; i<va.size(); i++); {; r += va[i] * vb[i];; }; }; ```. This is clearly an issue if for example you use Eigen as a DataType, as the operator* has a clear meaning. If for example you have an `Eigen::Matrix<double, 3, 3>`, you cant override operator* because you wont be able to perform normal algebraic matrix multiplication. . Consider using free functions instead of overloading operator*. . ```; ```; Real r = 0.0;. if (a.type == sofa::core::V_COORD && b.type == sofa::core::V_COORD); {; const VecCoord &va = this->read(core::ConstVecCoordId(a))->getValue();; const VecCoord &vb = this->read(core::ConstVecCoordId(b))->getValue();; using Sofa::dot;; for (unsigned int i=0; i<va.size(); i++); {; r += dot(va[i], vb[i]); }; }; ```",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1525:475,clear,clearly,475,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1525,2,['clear'],"['clear', 'clearly']"
Usability,"When new messages are received or the message log is clear the componentState is changed. ; This allows the GUI (or other component) to detect that the object has changed (because its message log grew up). . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2397:53,clear,clear,53,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2397,1,['clear'],['clear']
Usability,"When running a simulation where a node as some specified / set Data, the SimpleAPI does not allow to recover the information since the `m_isSet` data flag is not properly propagated. The problem arose in https://github.com/sofa-framework/sofa/pull/4910. Still digging into it, but it's some kind of blocking",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4911:73,Simpl,SimpleAPI,73,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4911,1,['Simpl'],['SimpleAPI']
Usability,"While refactoring a bit, I also stumbled upon the `typedef` plugin, which automatically couples every potential test file with every single include file through `<typedef/Sofa_typedef.h>`. Why is there such a plugin? Why not simply have plugins define their own `typedef.h`? . And more importantly why are we aggregating typedefs *across* modules boundaries? This completely defeats modularity which in turn complicates refactoring quite a lot!",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172:225,simpl,simply,225,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/417#issuecomment-340416172,2,['simpl'],['simply']
Usability,"While there are some pretty nice ideas going on considering the improvement the output of the advanced timer #348, to my knowledge (please correct me if I am wrong!), the component has some shortcomings:; 1. The timing output does not show up when using the batch gui, i.e. when specifying -g batch over the command line. Together with @ggrosshenny, we already took care of this in the work related to #348, a pull request will follow soon.; 2. The advanced timer can not be used at the initialization, i.e. in methods like init and I believe as well the backward init. To resolve the second point, I propose to change the variable computationTimeSampling to an integer (see Main.cpp, line 182). When set at ; - a negative integer c, it does output the timings of the initialization, but at every time step -c; - 0, it only outputs the timings of the initialization; - a positive integer c, it does not output the timings of the initialization and at every time step c. Thus the persons having used the timer before will not have any impact on their potential scripts using the SOFA output.; An implementation already has been started with @ggrosshenny, but it is not clear where an insertion has the less impact and yields the results. @ggrosshenny, could you precise that please?. Has there been any work considering this point?; Do you have any propositions how to address it?. Label propositions: discussion, bug",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/357:1168,clear,clear,1168,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/357,1,['clear'],['clear']
Usability,"While trying to clear the build from compiler-warnings I found these pieces of code in in the metioned files:. ` if (!added) listOfMonoMial.push_back(b); nbOfMonomial++;` at 410; ` if (!added) listOfMonoMial.push_back((*itb)); nbOfMonomial++;` at 431; ` if (!added) listOfMonoMial.push_back(-(*itb)); nbOfMonomial++;` at 452. The compiler warning is indicating that the second statement is not effected by the if-statement. But from my point of view, the second statement should be included like. `if(!added); {; .... ;; nbOfMonomial++;; }; `",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/434:16,clear,clear,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/434,1,['clear'],['clear']
Usability,"While trying to clear the build from compiler-warnings I found these pieces of code in in the metioned files:. ```C++; unsigned int idx = 0;; for( size_t i=0 ; i<size ; ); for( size_t j=0; j<value && i<size ; ++j, ++i ); rigidIndexPerPoint[i] = idx;; ++idx;; ```; (code is at line 280 in the file); The compiler warning is indicating that the `++idx;` statement is not effected by the outer or inner for-loop. As in this case `rigidIndexPerPoint[i] = idx;` is always assigning ""0"" to the `rigidIndexPerPoint[i]` I would purpose either to change change the mentioned statement to `rigidIndexPerPoint[i] = idx++;` or make `idx` a constant variable.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/435:16,clear,clear,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/435,1,['clear'],['clear']
Usability,"While trying to provide a complete answer to the discussion #4218 I wondered if it was that difficult to do this. In fact, it only requires to scale the stored data `d_position` while calling apply and modifying the attribute `m_rotatedPoints` because this is used to compute every ohter step (applyJ, JT etc...). . I've tried it in a simple scene with lagrangian constraint to see if it works, and after changing the scale factor in the middle of the simulation its maps correctly the forces (you can se the torque scaled) and the lambda are computed accordingly. . ``` xml; <?xml version=""1.0""?>. <Node name=""root"" dt=""0.01"" gravity=""0 0 0"" >; <RequiredPlugin name=""Sofa.Component.AnimationLoop""/> <!-- Needed to use components [FreeMotionAnimationLoop] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Lagrangian.Correction""/> <!-- Needed to use components [LinearSolverConstraintCorrection] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Lagrangian.Model""/> <!-- Needed to use components [BilateralInteractionConstraint] -->; <RequiredPlugin name=""Sofa.Component.Constraint.Lagrangian.Solver""/> <!-- Needed to use components [GenericConstraintSolver] -->; <RequiredPlugin name=""Sofa.Component.LinearSolver.Direct""/> <!-- Needed to use components [SparseLDLSolver] -->; <RequiredPlugin name=""Sofa.Component.Mapping.NonLinear""/> <!-- Needed to use components [RigidMapping] -->; <RequiredPlugin name=""Sofa.Component.Mass""/> <!-- Needed to use components [UniformMass] -->; <RequiredPlugin name=""Sofa.Component.MechanicalLoad""/> <!-- Needed to use components [ConstantForceField] -->; <RequiredPlugin name=""Sofa.Component.ODESolver.Backward""/> <!-- Needed to use components [EulerImplicitSolver] -->; <RequiredPlugin name=""Sofa.Component.Setting""/> <!-- Needed to use components [BackgroundSetting] -->; <RequiredPlugin name=""Sofa.Component.StateContainer""/> <!-- Needed to use components [MechanicalObject] -->; <RequiredPlugin name=""Sofa.Component.Visual""/> <!-- Needed to use components ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4234:335,simpl,simple,335,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4234,1,['simpl'],['simple']
Usability,Why there is not CI feedback ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1253#issuecomment-610312311:20,feedback,feedback,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1253#issuecomment-610312311,2,['feedback'],['feedback']
Usability,"With:; - guidelines,; - symbols export (for Windows); - example of mandatory dep and optional dep in Cmake; - cleaning (pragma/nested namespace); - updated init (with data from CMake); - installable (and usable as dep); - add test mechanism (with BaseTest); - Readme as markdown. Remove useless python files. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1356:9,guid,guidelines,9,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1356,2,"['guid', 'usab']","['guidelines', 'usable']"
Usability,Without feedback of yours @courtecuisse and @JeremieA this will be merged tomorrow (7 days since we poked you),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306526433:8,feedback,feedback,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/276#issuecomment-306526433,2,['feedback'],['feedback']
Usability,"Working on master.; SOFAGUI_GLUT turned on. #include <sofa/helper/io/ImageBMP.h> no such file or directory, same for #include <sofa/defaulttype/LaparoscopicRigidTypes.h>. Both are needed for SimpleGUI.cpp and MultithreadGUI.cpp. Does anybody know where I can found it ? ; Plus, the need of LaparoscopicRigidTypes sounds weird to me ... ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/493:191,Simpl,SimpleGUI,191,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/493,1,['Simpl'],['SimpleGUI']
Usability,"Wouldn't it make sense to alias the std container to sofa::helper ? . So that the general guideline could be to always use sofa::helper::* and not ""if your are using a list then use std::list, if it is a vector then use a sofa::helper::vector, ..."". . More generally ; - it would make the source code more consistent ; - it would ease newcommer's life to get into sofa.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/107#issuecomment-270331991:90,guid,guideline,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/107#issuecomment-270331991,2,['guid'],['guideline']
Usability,"Wow, UX improvements are always so impressive. Especially when it comes with a demo :). +1, the scene graph is so much more readable with this change.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2356#issuecomment-925453020:5,UX,UX,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2356#issuecomment-925453020,2,['UX'],['UX']
Usability,"Wow, didn't expect that much interest :) My proposal for geometric average just came from intuition. There acutally may be users out there that have tables of friction values for material pairings, so we might want to consider that use case too. Here's a try:. We introduce a new ""material number"" property attached to collision models which could then be used as indices for looking up coefficients in a symmetric matrix within the ContactManager. An undefined material number could be mapped to 0 by default. Negative values indicate cells, whose friction coefficient has not (yet) been determined . * querying unset cells during contact creation triggers a computation from the locally defined mu values, using one of the mentioned heuristics (AVG, GEOMETRIC, MIN, MAX...). This mechanism maintains backwards compatibility with existing simulations, and it preserves the ability to distribute coefficient definitions across the simulation tree.; * presetting the friction coefficients matrix directly provides a way to override any local definitions via mu; * having a freely modifiable matrix covers all possible use cases. The ""material number"" concept might also come in handy in other circumstances.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265756690:90,intuit,intuition,90,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/81#issuecomment-265756690,2,['intuit'],['intuition']
Usability,"Write access (copy-less), the data counter is updated after the 'with' block; with c.position.writeable() as w:; o = numpy.ones((len(c.position), 3))) ; w += o ; w *= 2.0; ```. Wrap around types (copy-less) to typify the data fields on demand; ```python; # syntax 1; c = o.showColor.as(RGBAColor); # syntax 2; c = RGBAColor(o.showColor); c.setFromHSC(1,2,3); c.setFromHSV(1,2,3); ```. Implement your own ForceField in python:; ```python; class MyForceField(Sofa.Core.BaseForceField):; def __init__(self, *args, **kwargs):; Sofa.Core.BaseForceField.__init__(self, *args, **kwargs); ; def init(self):; self.refx = self.position.toarray().copy(). def addForce(self, m, f, x, v):; n = numpy.ones((len(self.position),1)); f = (self.refx-x) * 2 + n; ```; ; To test the binding you need to de-activate SofaPython and activate SofaPython3. ; Then; - runSimu.py to launch a sofa simulation from the command line eg: ; python3 runSimu.py mySimulation.py; - or runSofa. . General guidelines:; - Fix existing API consistency issues; - Improve the performance of the binding by supporting supporting the different python protocols (sequence, buffer+memoryview, copy-less mechanism).; - unified data access and API.; - implementation is currently done with pybind11 and cython.; - modular design. About the tools we use: ; - pybind because it is very consistent with our code base ; - cython becaues it is much more powerful and general and so we can accelerate python code by un-warping the warped object in other part of the code base. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/771:1692,guid,guidelines,1692,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/771,1,['guid'],['guidelines']
Usability,"Yep, drawText could be enhanced, especially by changing the texture containing the letters.; Or directly generating the bitmaps by using libfreetype (http://learnopengl.com/#!In-Practice/Text-Rendering)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350:157,learn,learnopengl,157,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/62#issuecomment-262460350,2,['learn'],['learnopengl']
Usability,Yes exactly. Normally runing a simple cmake with the desired flags to activate or deactivate some plugins will be enough. All dependency are met for most of the plugins.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797:31,simpl,simple,31,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4230#issuecomment-1758196797,2,['simpl'],['simple']
Usability,"Yes the method exists... but, contrary to the XML loader, the SofaPython3 scene loader does not use the setInstanciationSourceFileName to set the filename associated with the root node. ; This can be done in a simple PR at SofaPython3. . EDIT: I made a quick pr to for SofapythoN3: https://github.com/sofa-framework/SofaPython3/pull/271",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155095712:210,simpl,simple,210,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3033#issuecomment-1155095712,2,['simpl'],['simple']
Usability,"Yes, I kind of hijacked the PR to open general discussion, but as my first line was saying:. ""The existing code makes the assumption we only want Vec3 and Rigid3, the PR builds on that assumption to make the implementation cleaner and clearer. The changes dones are relevant and can probably merged as-is."". All what follow is probably for future PR.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1188825154:235,clear,clearer,235,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3126#issuecomment-1188825154,2,['clear'],['clearer']
Usability,"Yes, you are right about the path when GuiDataRepository is instanciated !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368870090:39,GuiD,GuiDataRepository,39,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/599#issuecomment-368870090,1,['GuiD'],['GuiDataRepository']
Usability,"You are clearly in a dev state, each time you push a commit it triggers a new build on the CI. I'll put the flag wip again until you tell me that you've finished your fixes to avoid loading the CI.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084580463:8,clear,clearly,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4673#issuecomment-2084580463,2,['clear'],['clearly']
Usability,You are right (once again).; I just pushed a new proposition where nothing is done in your back anymore.; You simply have to call `SofaPython.unloadModules()` manually where you want unload the modules.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286384827:110,simpl,simply,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/202#issuecomment-286384827,2,['simpl'],['simply']
Usability,You can find example in:; - SimpleApi.cpp in the createObject function; - Binding_BaseContext in the createObject_impl function,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465731199:28,Simpl,SimpleApi,28,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/939#issuecomment-465731199,1,['Simpl'],['SimpleApi']
Usability,"You can simply start a python sofa scene using the main sofa executable, either through `File/Open` or from the command line. . A simple scene goes like this:. ```python; def createScene(node):; child = node.createChild('childname'); object = child.createObject('MechanicalObject', name = 'mobject', size = 1); ```. Please see the docs for more details.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/400#issuecomment-330498906:8,simpl,simply,8,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/400#issuecomment-330498906,4,['simpl'],"['simple', 'simply']"
Usability,Your remarks are taken into account @IPeterlik :); let's see if any further feedback,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/556#issuecomment-356127976:76,feedback,feedback,76,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/556#issuecomment-356127976,2,['feedback'],['feedback']
Usability,[All] Removing the simplest bwdInit functions,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2851:19,simpl,simplest,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2851,2,['simpl'],['simplest']
Usability,[BatchGUI] Show progress bar,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4168:16,progress bar,progress bar,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4168,2,['progress bar'],['progress bar']
Usability,[FEM.Elastic] Simplify addkToMatrix in TriangularFEMForceFieldOptim,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2861:14,Simpl,Simplify,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2861,1,['Simpl'],['Simplify']
Usability,[Guidelines] Format cpp code,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4695:1,Guid,Guidelines,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4695,1,['Guid'],['Guidelines']
Usability,[Helper] Make clearer from where plugins are loaded,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3109:14,clear,clearer,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3109,2,['clear'],['clearer']
Usability,[Simulation.Graph] Move SimpleApi into its own library,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4495:24,Simpl,SimpleApi,24,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4495,1,['Simpl'],['SimpleApi']
Usability,[Simulation.Graph] SimpleAPI: Remove reference to Node argument in createChild(),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3620:19,Simpl,SimpleAPI,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3620,1,['Simpl'],['SimpleAPI']
Usability,[Sofa.Testing] Add SimpleApi in Config.cmake.in,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4542:19,Simpl,SimpleApi,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4542,1,['Simpl'],['SimpleApi']
Usability,[Sofa.Type] Simplify template rebinding,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2570:12,Simpl,Simplify,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2570,1,['Simpl'],['Simplify']
Usability,[SofaBaseLinearSolver][FullMatrix] Restore fast clear function,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1128:48,clear,clear,48,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1128,2,['clear'],['clear']
Usability,[SofaBaseMechanics] Simplify expression,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2468:20,Simpl,Simplify,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2468,1,['Simpl'],['Simplify']
Usability,[SofaBaseMechanics] Use directly clear() when resetting force in MechanicalObject,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2518:33,clear,clear,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2518,2,['clear'],['clear']
Usability,[SofaBaseTopology] Clearer error message,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2638:19,Clear,Clearer,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2638,1,['Clear'],['Clearer']
Usability,[SofaCUDA] Simplify definition of CudaVector type,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4864:11,Simpl,Simplify,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4864,1,['Simpl'],['Simplify']
Usability,[SofaCore] Add new (simpler) DataEngine implementation,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/760:20,simpl,simpler,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760,2,['simpl'],['simpler']
Usability,[SofaCore] Clearer message when template parameter is not compatible with current context,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2262:11,Clear,Clearer,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2262,1,['Clear'],['Clearer']
Usability,[SofaCore] FIX SingleLink clear/set behavior,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1749:26,clear,clear,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1749,2,['clear'],['clear']
Usability,[SofaGuiGlut] Lonely #endif without its #ifdef in SimpleGUI.cpp,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/989:50,Simpl,SimpleGUI,50,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/989,1,['Simpl'],['SimpleGUI']
Usability,[SofaGuiQt] Rename attributes to follow SOFA guidelines.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2944:45,guid,guidelines,45,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2944,2,['guid'],['guidelines']
Usability,[SofaGuiQt] UX: graph is easier to read,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2356:12,UX,UX,12,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2356,2,['UX'],['UX']
Usability,[SofaHaptics] Add simple tests on LCPForceFeedback component,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1576:18,simpl,simple,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1576,2,['simpl'],['simple']
Usability,[SofaKernel] BREAKING: Replacing DataEngine with SimpleDataEngine,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/814:49,Simpl,SimpleDataEngine,49,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/814,1,['Simpl'],['SimpleDataEngine']
Usability,[SofaKernel] Fix SimpleApi forward declaration of BaseObject and relocatable of Sofa.GL,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1760:17,Simpl,SimpleApi,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1760,1,['Simpl'],['SimpleApi']
Usability,[SofaSimpleFem] Simplify bloc-based optimization,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2281:16,Simpl,Simplify,16,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2281,1,['Simpl'],['Simplify']
Usability,[SofaSimpleFem] Stc clean simplefem,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/826:26,simpl,simplefem,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/826,2,['simpl'],['simplefem']
Usability,[SofaSimulationCore] Clearer message when a linear solver is missing,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2221:21,Clear,Clearer,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2221,1,['Clear'],['Clearer']
Usability,[SofaSimulationCore] Simplify repetitive code in BaseMechanicalVisitor,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2125:21,Simpl,Simplify,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2125,1,['Simpl'],['Simplify']
Usability,[SofaSimulationGraph] Remove dead-end experiment in SimpleApi.h,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1845:52,Simpl,SimpleApi,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1845,1,['Simpl'],['SimpleApi']
Usability,[Topology.Mapping] SimpleTesselatedHexaTopologicalMapping: use correct type for Index,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4279:19,Simpl,SimpleTesselatedHexaTopologicalMapping,19,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4279,1,['Simpl'],['SimpleTesselatedHexaTopologicalMapping']
Usability,[UX] Default values for DataFileName,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/321:1,UX,UX,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/321,2,['UX'],['UX']
Usability,[UX] Handle dependencies between data field.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/235:1,UX,UX,1,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/235,2,['UX'],['UX']
Usability,[all] Minor last fixes using SimpleApi,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4627:29,Simpl,SimpleApi,29,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4627,1,['Simpl'],['SimpleApi']
Usability,[all] Remove some simple uses of bwdInit(),MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4075:18,simpl,simple,18,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4075,2,['simpl'],['simple']
Usability,[all] Simple robustification,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3685:6,Simpl,Simple,6,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3685,1,['Simpl'],['Simple']
Usability,[all] Update the SOFA Guidelines,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1135:22,Guid,Guidelines,22,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1135,1,['Guid'],['Guidelines']
Usability,"[ci-build][with-all-tests]. > Don't you think that moving `errF` and `tempF` out of the loop is enough? I would test to only resize them in the loop. The underlying memory allocation should not happen a lot. My suggestion is because I think it is simpler to understand compared to the buffer implementation. I will try that 👍. > ; > In any case, I think the condition `if (nb > bufferSize)` is not necessary. Thats what I was thinking but not sure 🧐",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460:247,simpl,simpler,247,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4195#issuecomment-1733123460,2,['simpl'],['simpler']
Usability,[image] Add warning guiding users regarding pluginization of DiffusionSolver,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1067:20,guid,guiding,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1067,2,['guid'],['guiding']
Usability,[plugins] Add SimpleApi as a dependency in SofaCarving_test,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4572:14,Simpl,SimpleApi,14,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4572,1,['Simpl'],['SimpleApi']
Usability,[runSofa] Unable to find file from GuiDataRepository,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/577:35,GuiD,GuiDataRepository,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/577,1,['GuiD'],['GuiDataRepository']
Usability,[runSofa] User experience fixes in the ModifyData view.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1011:10,User experience,User experience,10,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1011,1,['User experience'],['User experience']
Usability,"_I suggest we use this issue card to track ongoing work (aka as dashboard/ChangeLog)_; Observation: Link implementation is invasive too complex, thus making SOFA respectively long to compile and hard to maintain / support. An ongoing work led by @damienmarchal aims at: ; - simplifying the Link implementation:; - avoiding the use of Traits; - split SingleLink into several cases: links between Data (DataLink), links between multiple Data (DataMultiLink?) links between BaseObject (?); - reducing massively used / included of SingleLinks. DONE:; - introduce Data Link (#1491 ); - remove duplicated SingleLink<> parentData in BaseData to ease further refactoring (#1491 ); - replace the use of the SingleLink<Data> by a DataLink class in BaseData.h (#1491 ); - remove traits code from Link.h and BaseLink.h. (#1503 ); - remove reflection code in BaseData (#1541). Also done:; - use forward declaration to reduce dependency (due to headers included in header) between modules --> cleaning code dependency graph and reducing compilation time (#1509 ); - DataContentValue : was there as DataValue, extracted from Data and renamed as DataContentValue; - PathResolver : mechanism to generalize for resolving path (parsing string, search in graph, convert in to an object), extracted from Link in order isolate it (for now reoriente towards existing SOFA functions). ______________________________________________________. **Next step** :; - refactoring the whole Link to separate SingleLink & MultiLink; - rename AbstractDataLink as BaseDataLink ?; - remove reflection mechanism inn BaseData (due to removal of SingleLink for Data). ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1526:274,simpl,simplifying,274,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1526,1,['simpl'],['simplifying']
Usability,"`BoxStiffSpringForceField` was a force field, deriving from `StiffSpringForceField`. Its only difference is in the `init()` step, where there is a matching of pairs of points, based on the minimal distances. This behavior could be achieved with a `StiffSpringForceField` along with components which the goal is to compute the matching of pairs of points. This is done with 2 `BoxROI` and a `NearestPointROI`.; Therefore, `BoxStiffSpringForceField` is now a simple `BaseObject` that instantiates a pack of components that mimics the previous behavior. Based on:; - https://github.com/sofa-framework/sofa/pull/2595; - https://github.com/sofa-framework/sofa/pull/2620. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2621:457,simpl,simple,457,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2621,1,['simpl'],['simple']
Usability,`MessageDispatcher::clearHandlers()` can have side effects on other tests in same suite.; See #83 for error case. SofaTest API should ensure that each test starts with a clean MessageDispatcher containing always the same set of MessageHandlers.,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/94:20,clear,clearHandlers,20,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/94,1,['clear'],['clearHandlers']
Usability,"```; void NarrowPhaseDetection::endNarrowPhase(); {; for (auto it = m_outputsMap.begin(); it != m_outputsMap.end();); {; DetectionOutputVector *do_vec = (it->second);; if (!do_vec || do_vec->empty()); {; if (do_vec); {; do_vec->release();; }; m_outputsMap.erase(it++);; }; else; {; ++it;; }; }; }; ```. The intended behavior of this is ""if the vector is empty, or it's a nullpointer, remove it from the map. If it is not a nullpointer, also release the vector"", right?. Since the `do_vec->clear()` is in `beginNarrowPhase`, the vector is never released correctly.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256642333:489,clear,clear,489,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3318#issuecomment-1256642333,2,['clear'],['clear']
Usability,"``cmake --install``` on a freshly built Sofa repo, the header files for libQGLViewer are not properly copied to the install/include directory.; First of all the install path is too long and has at least one ${PROJECT_NAME}, i.e. ""QGLViewer"" too much in the path. Also there are header files missing which are relevant for using the provided libQGLViewer in external projects/plugins. This is caused by the now modified ```Sofa/GUI/Qt/libQGLViewer/QGLViewer/CMakeLists.txt```:; - The last argument for the ```sofa_create_package_with_targets``` macro adds too many ```/${PROJECT_NAME}``` causing the long install path (line 118); - For some reason the ```sofa_create_package_with_targets``` macro does not copy the ```MOC_HEADER_FILES``` (line 21 ff.). ## Solution:; This PR shortens the output path and copies the contents of ```MOC_HEADER_FILES``` to the ""normal"" ```HEADER_FILES``` which causes them to be copied to the install/include directory. This does not affect the build but ensures that all headers are copied. This was tested on Windows and two different Linux installations. I am aware that simply re-mentioning the MOC_HEADERS may look redundant, but I could not find a solution to convince the ```sofa_create_package_with_targets``` macro to also consider the MOC_HEADERS for copying. . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4198:1233,simpl,simply,1233,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4198,1,['simpl'],['simply']
Usability,"`computeStressAcrossDirection` was clearly for tearing, are you using it yourself @epernod?",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1057066085:35,clear,clearly,35,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2706#issuecomment-1057066085,2,['clear'],['clearly']
Usability,"`m_filename` now becomes `d_filename` as simple (and breaking as that). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2095:41,simpl,simple,41,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2095,1,['simpl'],['simple']
Usability,"`sofa::helper::io::Mesh*` has been deprecated since many years, replace by `MeshLoader` components, it would be indeed good now to clean it up ;); The biggest chunk of work required is to remove all the `""filename""` Data still around in quite a few components (BaseMeshTopology, MechanicalObject, DiagonalMass, UniformMass, VisualModelImpl, SpringForceField, RigidMapping, RigidRigidMapping), which would be easy except that we need clear warnings if an XML is loaded still using this, as those components are used everywhere. A quick search in Sofa examples directory finds 500 instances of OglModel with a filename or fileMesh attribute...",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/42#issuecomment-261508845:433,clear,clear,433,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/42#issuecomment-261508845,2,['clear'],['clear']
Usability,"aceDetection` did exactly the same thing than the broad phase in `BruteForceDetection`. It means duplicated code. With `BruteForceBroadPhase` we have an opportunity to factorize the broad phase by inheriting from `BruteForceBroadPhase` instead of `BroadPhaseDetection`. This is what I did in `RayTraceDetection`. Doing that, I could remove all the broad phase code from `RayTraceDetection`. # What comes next. It is also my intention to inherit from `BruteForceBroadPhase` in `BruteForceDetection`, and remove all the broad phase code from `BruteForceDetection`. The broad phase code from `BruteForceDetection` and `RayTraceDetection` would be shared from `BruteForceBroadPhase`. However, I expect complex conflicts because of #1999. I'll do that if #1999 is accepted and merged. It is also my intention to extract the narrow phase from `BruteForceDetection` and put it in another component which would inherit from `NarrowPhaseDetection`. The narrow phase in `BruteForceDetection` is not brute force, and should be named with a clearer and more meaningful name. It will be the case with the new component. I also believe SAP can be implemented as a broad phase only component. We would have the choice between `BruteForceBroadPhase` and `SAPBroadPhase`. Any narrow phase would work with both broad phases (`BruteForceBroadPhase` and `SAPBroadPhase`). Finally, with all those changes, we can consider more modularity on the collision detection and choose any combination of broad phase and narrow phase. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new w",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2010:1694,clear,clearer,1694,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2010,1,['clear'],['clearer']
Usability,"actions/github-script@v4 is output errors due to deprecation in actions/core:; ```; (node:1614) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.; (Use `node --trace-deprecation ...` to show where the warning was created); RequestError [HttpError]: Resource not accessible by integration; at /home/runner/work/_actions/actions/github-script/v4/dist/index.js:4662:21; at processTicksAndRejections (node:internal/process/task_queues:96:5) {; status: 403,; response: {; url: 'https://api.github.com/repos/sofa-framework/sofa/issues/4496/comments',; Error: Unhandled error: HttpError: Resource not accessible by integration; status: 403,; ```. This PR also :; - updates list of GHD reviewers with @rmolazem and @samuelmyoussef ; - updates with stargazer's name . ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4522:169,usab,usability,169,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4522,1,['usab'],['usability']
Usability,"actory. - Regarding the question of linking and automatic deriving of data-types for Outputs my ideas are not as concrete, but maybe helpful. For me there exist two cases:. 1) The Output of the PSDE is connected to an Input of a sofa-object that has static datas, e.g., sofa-objects whose code is written in C++. An example for such an object would be MechanicalObject (MO) that always has the same data (position, velocity, force, …). 2) The Output of the PSDE is connected to a scripted sofa-object, like another PSDE or similar. For case 1.:. It could be possible to define a special BaseData with a name but vacant type. This is a kind of “forward declaration” for the Output. Then, by extending the linking mechanism one could think of the following: At the time of parsing, a sofa-object (e.g. MO) will establish the link between one of its Inputs to the Output of a PSDE (i.e. PSDE->MO). Since the type of the Input is clear (we have static sofa-object whose BaseData doesn’t change) one could at this time create the clone and replace the BaseData with vacant type at the PSDE with the desired one. After that, this BaseData for the Output is valid and can be linked to in a normal way. . I don’t think this is especially dangerous, because this would not be allowed after parsing(). This also handles the problem that the sofa-objects involved would need to be created before the PSDE is created. In this way they can be created after the PSDE. This doesn’t cause confusion for the user neither, because he is aware of the types of the datas. Yet, overall this solution is a little bit complicated because it relies on changing the behavior of linking. Linking has to be extended to detect whether the Output that is being linked to has a valid type or is vacant. Overall I’m not 100% confident this kind of approach would work. For case 2.:. In this case one kind of remains in the “python-world” and it is not necessary to have an exhaustive set of possible types, I think. It would be eno",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416:2297,clear,clear,2297,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-392689416,2,['clear'],['clear']
Usability,"adding instantiation with RigidType + removal of ""hard"" usage of VecTypes. In my case, it was to support grabbing a beam (BeamAdapter) with the mouse and constraints. https://github.com/sofa-framework/sofa/assets/11028016/8eeb22ff-396d-4d87-8d9e-22e2849eefec. Reminder: BilateralConstraint needs a GenericConstraintSolver (+FreeMotionAL), LCPConstraintSolver is not usable. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4801:366,usab,usable,366,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4801,1,['usab'],['usable']
Usability,"alright, that should fix the failing test. Although, the test doesn't reflect very well the behavior of the component. the SimpleDataEngine *must* exclusively be used in cases where the process performed the engine has to be applied no matter which datafield is set to dirty.; Currently, the engine would even be called if NO data is set to dirty, which is also the case in the core::DataEngine if there's no check performed on the DataTracker. I believe this is a mistake. I think that doUpdate() should be called iff at least 1 data field is dirty.; What do you think?. concretely, it means that in DataEngine_test.cpp, line 151 would assert FALSE",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945:123,Simpl,SimpleDataEngine,123,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/760#issuecomment-424285945,1,['Simpl'],['SimpleDataEngine']
Usability,"and about the process, I think this PR is a very good test case for everyone to give it a try.; Regarding the feedback we should be able to package it together as a public plugin.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057:110,feedback,feedback,110,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/700#issuecomment-400260057,2,['feedback'],['feedback']
Usability,"and replace MapMapSparseMatrix. Continuation of #3515 . Breaking because one or two functions have been deleted (for perf reasons), especially the batch clear function. Some benchs, where constraints are supposedly the bottleneck. caduceus.scn; ```; before: 5000 iterations done in 48.2532 s ( 103.62 FPS).; after: 5000 iterations done in 22.042 s ( 226.839 FPS).; ```. TorusFall.scn; ```; before: 5000 iterations done in 47.5045 s ( 105.253 FPS).; after: 5000 iterations done in 37.8749 s ( 132.014 FPS).; ```. 3instruments_collis.scn; ```; before: 5000 iterations done in 63.3632 s ( 78.9101 FPS).; after: 5000 iterations done in 53.7899 s ( 92.9542 FPS).; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3894:153,clear,clear,153,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3894,1,['clear'],['clear']
Usability,"applications/plugins/CGALPlugin/src/CGALPlugin/BooleanOperations.cpp line 274; Code:; helper::WriteAccessor< Data<helper::vector<int>> > indices1 = d_indices1Out;; helper::WriteAccessor< Data<helper::vector<int>> > indices2 = d_indices2Out;; m_distribution.clear();; std::pair<int, std::pair<int, int>> pair; // <- better with space (> >)",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2219:257,clear,clear,257,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2219,1,['clear'],['clear']
Usability,applications/projects/SofaGuiGlut/SimpleGUI.cpp line 1124. Code:; case 'q': //GLUT_KEY_Escape:; {; exit(0);; break; // <- unreachable; },MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2159:34,Simpl,SimpleGUI,34,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2159,1,['Simpl'],['SimpleGUI']
Usability,"aseLoader.h>; #include <sofa/core/objectmodel/Event.h>. class Sequence : MultiLink {} ;. Sequence<sofa::core::BehaviorModel> behaviorModel;; Sequence<sofa::core::BaseMapping> mapping;. Sequence<sofa::core::behavior::OdeSolver> solver;; Sequence<sofa::core::behavior::ConstraintSolver> constraintSolver;; Sequence<sofa::core::behavior::BaseLinearSolver> linearSolver;. Single<sofa::core::topology::Topology> topology;; Single<sofa::core::topology::BaseMeshTopology> meshTopology;; Sequence<sofa::core::topology::BaseTopologyObject> topologyObject;. Single<sofa::core::BaseState> state;; Single<sofa::core::behavior::BaseMechanicalState> mechanicalState;; Single<sofa::core::BaseMapping> mechanicalMapping;; Single<sofa::core::behavior::BaseMass> mass;; Sequence<sofa::core::behavior::BaseForceField> forceField;; Sequence<sofa::core::behavior::BaseInteractionForceField> interactionForceField;; Sequence<sofa::core::behavior::BaseProjectiveConstraintSet> projectiveConstraintSet;; Sequence<sofa::core::behavior::BaseConstraintSet> constraintSet;; Sequence<sofa::core::objectmodel::ContextObject> contextObject;; Sequence<sofa::core::objectmodel::ConfigurationSetting> configurationSetting;. Sequence<sofa::core::visual::Shader> shaders;; Sequence<sofa::core::visual::VisualModel> visualModel;; Sequence<sofa::core::visual::VisualManager> visualManager;; ```. This is why I'm searching for a way to fix SingleLink/MultiLink to make it forward declaration friendly. . More fundamentally the Link implementation is interesting but it is also very complex. This complexity and its consequence in term of maintainability (very few of the sofa developpers can understand it easily) and compilation cost make me wonder if we shouldn't investigate/consider simpler approach. . So to anyone @JeremieA, @bcarrez , @maxime-tournier , @matthieu-nesme, @hugtalbot , @StephaneCotin, @guparan , @ErwanDouaille ... if you have idea for a simpler and/or forward declaration friendly approach help would be appreciated.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104:2978,simpl,simpler,2978,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/436#issuecomment-334378104,4,['simpl'],['simpler']
Usability,"at least I would push for simplicity here, like if msgInfoLevel==InfoMessageLevel::MUTED, then no info message goes to the component stack, ; when using: ; msg_info () << ""I print if I am not muted"" ; . the _when version can be kept for fine tuning (I personally find it overkill) . thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 17 Février 2017 13:21:47; > Objet: Re: [sofa-framework/sofa] Cleaning the way we handle message in Sofa.; > (#179). > Almost done... the f_printLog stuff is replaced with d_msgInfoLevel.; > Backward compatibility is implemented as well as deprecation warning. > This allow to write the follow things:; > msg_info_when ( d_msgInfoLevel.getValue() != InfoMessageLevel::MUTED ) << ""I; > print often"" ; msg_info_when ( d_msgInfoLevel.getValue() !=; > InfoMessageLevel::MUTED ) << ""I print often"" ;. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493:26,simpl,simplicity,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/179#issuecomment-281043493,2,['simpl'],['simplicity']
Usability,"ate was somehow linked to its input topology. The solution is not to go back to the old (broken) behavior, but instead to understand what is the actual root cause here. Theoretically, if the logic described above was behaving correctly, the output state would not be able to see the input topology because of the use of getActiveMeshTopology() and the fact that the mapping sameTopology() method would return false (thanks to its ""safe"" default implementation). The reason why this incorrect link was being created was because the mapping was created in the wrong Node. Normally, Sofa requires mappings to be in the same node as its output state. This is important in order to know for example which mapping is associated to which state (at least prior to the introduction of reflective Links, and still required because Mapping->State links are only one-way). This is used for example by visitors to know if a state is to be considered as real DOFs (because of the absence of a mapping in its node). But the MappingTest initialization code was not respecting this requirement, instead putting the mapping in the root node along with the input state (and the topology). Only the output state was in the child node. In this case, getActiveMeshTopology() from the output state does not see any mapping in the child, allowing to go to the parent to find a topology. It assumes that the Mapping in the root node is there to write to the state/topology of the root node, so it is not considered as something that would block the topology to remain active. Hence the wrong link being created, and the bug. The fix (beaaaf5) is a simple one-line change in MappingTest, creating the mapping in childNode instead of root, which should have been the case to respect Sofa's conventions (but which are unfortunately not checked/asserted by anyone). Hopefully all is well now. It's difficult to know for sure because not-disabled tests are still failing on my computer (but they are also failing on the master...)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201:3429,simpl,simple,3429,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/243#issuecomment-335477201,2,['simpl'],['simple']
Usability,"boost::program_option was introduced in SofaHelper because of the utility class ArgumentParser. ; This class is only used from application/gui-related modules, so this file and the boost::program_option dependency are moved into SofaGuiCommon. And boost::system seems not used at all so lets remove this unused thing. SofaFramework needs now only:; - thread (for the not-so-used TimeoutWatcher) and could be replaced with the future [std::jthread](https://en.cppreference.com/w/cpp/thread/jthread) from C++20; - filesystem, which could be removed if std::filesystem could be used everywhere 😥; The other boost dependencies (stable_vector, intrusive_ptr, graph?) seems to be usable with a header-only version.; ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1848:674,usab,usable,674,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1848,1,['usab'],['usable']
Usability,"c/x86_64-linux-gnu/10/../../../../include/c++/10/bits/basic_string.h (included 167 times, avg 110 ms), included via:; cmake_pch.hxx Messaging.h MessageDispatcher.h Message.h iostream ostream ios ios_base.h locale_classes.h string (203 ms); cmake_pch.hxx Base.h StringUtils.h string (198 ms); cmake_pch.hxx Base.h StringUtils.h string (196 ms); cmake_pch.hxx Base.h StringUtils.h string (195 ms); cmake_pch.hxx Base.h StringUtils.h string (194 ms); cmake_pch.hxx Base.h StringUtils.h string (182 ms); ... 18298 ms: sofa/modules/SofaGuiQt/src/sofa/gui/qt/ModifyObject.h (included 19 times, avg 963 ms), included via:; MaterialDataWidget.cpp.o MaterialDataWidget.h DataWidget.h (1881 ms); StructDataWidget.cpp.o StructDataWidget.h SimpleDataWidget.h DataWidget.h (1645 ms); QDisplayDataWidget.cpp.o QDisplayDataWidget.h DataWidget.h (1580 ms); DisplayFlagsDataWidget.cpp.o DisplayFlagsDataWidget.h DataWidget.h (1567 ms); QRGBAColorPicker.cpp.o QRGBAColorPicker.h DataWidget.h (1555 ms); moc_QDisplayPropertyWidget.cpp.o QDisplayPropertyWidget.h (1496 ms); ... 17890 ms: sofa/modules/SofaGuiCommon/src/sofa/gui/BaseGUI.h (included 15 times, avg 1192 ms), included via:; RealGUI.cpp.o RealGUI.h (1659 ms); BaseViewer.cpp.o (1657 ms); BaseGUI.cpp.o (1589 ms); BatchGUI.cpp.o BatchGUI.h (1544 ms); moc_RealGUI.cpp.o RealGUI.h (1538 ms); QSofaListView.cpp.o RealGUI.h (1494 ms); ... 15454 ms: sofa/modules/SofaGuiQt/src/sofa/gui/qt/DataWidget.h (included 16 times, avg 965 ms), included via:; MaterialDataWidget.cpp.o MaterialDataWidget.h (1930 ms); StructDataWidget.cpp.o StructDataWidget.h SimpleDataWidget.h (1678 ms); QDisplayDataWidget.cpp.o QDisplayDataWidget.h (1613 ms); DisplayFlagsDataWidget.cpp.o DisplayFlagsDataWidget.h (1601 ms); QRGBAColorPicker.cpp.o QRGBAColorPicker.h (1587 ms); SimpleDataWidget.cpp.o SimpleDataWidget.h (1478 ms); ... done in 3.7s.; ```; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1523:39178,Simpl,SimpleDataWidget,39178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1523,3,['Simpl'],['SimpleDataWidget']
Usability,"cool @fredroy . > Note that you need to do one step before being able to see the boxes (dont know if it is on purpose or not). this might clearly be computed at first step, but I do not see why it could not be done at init..",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3658#issuecomment-1433788701:138,clear,clearly,138,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3658#issuecomment-1433788701,2,['clear'],['clearly']
Usability,"copy pasting discussion (+ automatic translation) for the record:. > The bboxes are actually used to calculate the znear / far of the camera but in a well licked interface you want to be able to select nodes / components in the scenegraph and have a visual feedback in the 3D scene in SQQ we do this by displaying the bbox of the selected object and its descendants. > if you calculate only 1 global bbox in the camera, you lose this granularity. > If we want to fix the bbox at the beginning we do it via another component (""BoundingBox"") connected to the bbox field of ddgnode. To avoid having a boolean indicating if we want to update or not ... we clean the system of ""parent"" of Data to implement the following mechanism:; > - if connected parent the data is copied from the parent.; > - if have setValue the value of a data field which has a parent ... the relationship is broken.; > - if you want to cut the relationship, one can use the setParent (null) function.; > - the visitor who recursively updates the bboxes check if the box has a settled parent to avoid calling setValue.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981:257,feedback,feedback,257,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1277#issuecomment-601643981,2,['feedback'],['feedback']
Usability,"d by this massive move? I would like to know because that's the number-one time-waster on our end for merges/history tracking). So I would like to know if those considerations were understood before doing this once again ?. And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :. 1. First only change the CMake scripts / per-lib main header/cpp to convert them to plugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we had to release the main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/482:1985,simpl,simpler,1985,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482,1,['simpl'],['simpler']
Usability,"d idea to now force the str() function to return the path just to make the createObject function happy. In this version prevent us to warn user there is a conversion done and that if they change the str() because, well its python they can do that, it may break something. This version is imposing that people writing a 'str' function have to keep in mind that (even if they don't know nothing about that) it must work if their object is called in createObject. (see later I try to explain better the problem). ; So to me this version will generate a lot of subtile problems and backward compatibility issues. . 3) The third version is close to use the str() in term of design but it makes it explicit that if an object want conversion to be used in the parameters of the createObject function it have to follow a specific protocol...this is done by implementing a dedicated function (eg: getAsACreateObjectParameter()). The implementation of this function for BaseObject and Sofa.Data could simply link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:1837,simpl,simply,1837,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,2,['simpl'],['simply']
Usability,"d in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though about that. My initial worrying was it was transformating a complex structure into a f",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3559,clear,clearly,3559,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,2,['clear'],['clearly']
Usability,"dChild(""ball""); ball_node.addObject(""EulerImplicitSolver"", vdamping=0, rayleighMass=0, rayleighStiffness=0); ball_node.addObject(""CGLinearSolver"", iterations=100, tolerance=1e-5, threshold=1e-5). ball_node.addObject(""MechanicalObject"", template=""Rigid3d"", position=[0, 5, 0, 0, 0, 0, 1], showObject=True, showObjectScale=2.0); ball_node.addObject(""UniformMass"", totalMass=10000.0); ball_node.addObject(""SphereCollisionModel"", radius=0.5, group=1); ball_node.addObject(""UncoupledConstraintCorrection""); ```. As a side question: Am I even using the right components? How would you model this scene of a liver with an embedded tumor? I also tested the Heterogeneous-TetrahedronFEMForceField.scn example, but that is even more unstable. When you interact with the object through the mouse, it applies a huge force in the opposite direction. <video src=""https://github.com/sofa-framework/sofa/assets/29635054/dc863ba3-7e55-48e1-8b5d-30d078fd5b88; "" width=""200"" height=""auto"">. I also simplified the liver scene to just the SOFA liver. Same problem with the instability. ```python; import Sofa; import Sofa.Core. PLUGINS = [; ""Sofa.Component.AnimationLoop"",; ""Sofa.Component.Collision.Detection.Algorithm"",; ""Sofa.Component.Collision.Detection.Intersection"",; ""Sofa.Component.Collision.Response.Contact"",; ""Sofa.Component.Constraint.Lagrangian.Solver"",; ""Sofa.Component.Visual"",; ""Sofa.Component.Collision.Geometry"",; ""Sofa.Component.Constraint.Projective"",; ""Sofa.Component.LinearSolver.Iterative"",; ""Sofa.Component.Mapping.NonLinear"",; ""Sofa.Component.Mass"",; ""Sofa.Component.ODESolver.Backward"",; ""Sofa.Component.StateContainer"",; ""Sofa.GL.Component.Rendering3D"",; ""Sofa.Component.Constraint.Lagrangian.Correction"",; ""Sofa.Component.Topology.Container.Dynamic"",; ""MultiThreading"",; ""Sofa.Component.SolidMechanics.FEM.NonUniform"",; ""Sofa.Component.Topology.Container.Grid"",; ""Sofa.Component.IO.Mesh"",; ""Sofa.Component.LinearSolver.Direct"",; ""Sofa.Component.Mapping.Linear"",; ""Sofa.Component.Topology.Cont",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838:7712,simpl,simplified,7712,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4597#issuecomment-2006525838,2,['simpl'],['simplified']
Usability,"e Gui(bottom part), could you copy-paste it ?. Sorry for the delay, here is the log output:; ```; The C compiler identification is Clang 10.0.0; The CXX compiler identification is Clang 10.0.0; Check for working C compiler: /usr/bin/clang; Check for working C compiler: /usr/bin/clang -- works; Detecting C compiler ABI info; Detecting C compiler ABI info - done; Detecting C compile features; Detecting C compile features - done; Check for working CXX compiler: /usr/bin/clang++; Check for working CXX compiler: /usr/bin/clang++ -- works; Detecting CXX compiler ABI info; Detecting CXX compiler ABI info - done; Detecting CXX compile features; Detecting CXX compile features - done; Setting build type to Release as none was specified.; -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: /home/giang/sofa/build/install; Adding library Sofa.Config; Using legacy headers is enabled.; Headers from v21.12 are usable, but it is advised to change your code to use the new headers introduced in v22.06.; Adding library Sofa.Compat; Adding library Sofa.Component.Compat; Adding library Sofa.Type; Adding library Sofa.Geometry; Adding library Sofa.Topology; Adding library Sofa.Helper; Found Eigen3: /usr/include/eigen3 (Required is at least version ""2.91.0"") ; Found Json: /home/giang/sofa/src/extlibs/json (Required is at least version ""3.1.2"") ; Found STB: /home/giang/sofa/src/extlibs/stb ; Found DIFFLIB: /home/giang/sofa/src/extlibs/difflib ; Adding library Sofa.LinearAlgebra; Adding library Sofa.DefaultType; Adding library Sofa.Core; Adding library Sofa.Simulation; Adding library Sofa.Simulation.Core; Adding library Sofa.Simulation.Common; Adding library Sofa.Simulation.Graph; Adding library Sofa.Testing; Found PythonInterp: /usr/bin/python (found version ""3.8.10"") ; Looking for pthread.h; Looking for pthread.h - found; Performing Test CMAKE_HAVE_LIBC_PTHREAD; Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; Check if compiler accepts -p",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815:1035,usab,usable,1035,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3752#issuecomment-1489430815,2,['usab'],['usable']
Usability,"e anything. It's time for refactoring!. My focus was the refactoring of the unit tests. Before the PR, a unique class tested the 3 components using a series of `if`. I refactored the 3 classes in order to reduce the specific processing in the unit test, i.e. reduce the number of `if`. - The 3 classes now inherit from a common base class `BaseLinearElasticityFEMForceField`. I moved everything that was common (only regarding the unit test. More common code is remaining) in this class. It includes:; - A common `Data` for Young's modulus and Poisson's ratio. This way, they share type, the same default value, and the same description. Note that Young's modulus in `FastTetrahedralCorotationalForceField` and `TetrahedralCorotationalFEMForceField` was a scalar, and now it's a vector of scalars. This requires to add a common way to access the Young's modulus of the i-th element. This is also a breaking change. This allows to define a typed unit test for all 3 classes. The particularities of the classes are defined in a derived class of the unit test. To me, a great advantage, is that we identify clearly that there are unit tests for the 3 components, because there a file for each class. It was not obvious before. [ci-depends-on https://github.com/SofaDefrost/ModelOrderReduction/pull/133]. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4778:1353,clear,clearly,1353,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4778,1,['clear'],['clearly']
Usability,"e or template was too complex than what it should requiring to implement several function (the virtual one and the static one). So I propose here a different implementation where, to customize the template or className you just needs to implement the CustomClassName()/CustomTemplateName() static function in your class ...and everthing will work out of the box. For curious people have look at the SFINAE used to implement that in NameDecoder. The NameDecoder class is now used by the BaseClass to decode names. Remove duplicated custom template name; -------------------------------------------------------; A complete mecanisme is now implemented in the NameDecoder & BaseClass to provide default templateName for sofa object. The underlying idea was to remove the needs to those kind of code ; ```cpp; MyClass : public BaseObject; virtual std::string getTemplateName() const { return ""CustomName""; } ; static std::string templateName(const CapsuleCollisionModel<DataTypes>* = nullptr); {; return ""CustomName"";; }; ```; In the new version, a default name is generated and if it does not suit your needs you simply need to implement a single function called CustomTemplateName function:; ```cpp; static std::string CustomTemplateName(); { ; return ""CustomName;; }; ```. Removal of nullptr in className, templateName, typeName; ----------------------------------------------------------------------------; In Base.h the className, templateName, typeName are static templated function with the templated type also provided as a parameter (and nullptr if not provided). If think that having the parameter duplicating the template one is not good as it is misleading on the purpose of the function.; In the following example ; ```cpp; MyObject* ptr;; Base::className(ptr); ; ```; You don't see this is a templated method and you have no idea what 'ptr' is for, and you don't even know if putting a nullptr will work or not. ; Using the templated only syntax is more clear on the role of the function; `",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1283:2185,simpl,simply,2185,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1283,1,['simpl'],['simply']
Usability,"e the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an alternative, for the libs that are currently modules, instead of moving to a generic uninformative ""SofaPlugins"" directory, we could instead move them to the SofaGeneral/SofaAdvanced/SofaMisc directory that already exists and host their main cmake file. 4 advantages to this instead of everything is `applications/plugins`:; 1. one less directory to browse to in order to get to the actual source files; 2. it discourage any assumption that all plugins are/must be in the same directory; 3. clear separation of the different licences, so that we can be sure that a LGPL-only app does not actually include GPL-licenced headers (because of the useful convention to include plugins/lib classes with `MyPlugin/MyClass.h`, all codes must be compiled with options to add to the compiler path the parent of a plugin directory, currently because it is the same parent as plugins with different licences it is difficult to be sure unwanted code is not included); 4. it fits with the way of organizing all codes around collections of libraries, which was the original intent behind Helper/Core/DefaultType within SofaFramework, Simulation* within SofaSimulation, Base* within SofaBase, ..., but which unfortunately was not agreed to with everyone so stuck in years-long discussions and is now broken by adding a ""SofaKernel"" level. As a reminder of the key points of this way of organizing codes, the idea was to make it consistent where the code/targets are found (always within a sub-subdirectory) while allowing to share common scripts/docs/packaging/... at the ""collection"" level instead of copy/pasted withi",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/482:3061,clear,clear,3061,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482,1,['clear'],['clear']
Usability,"e... which I was not sure we agreed at this point. ; - the existing mecanism to define the target in ObjectFactory.h is buggy because two identical ObjectFactory::register<XX> compiled in different compilation units produces different getTarget() functions. There was an agreement we should remove it, so this PR was a good opporunity to trying such a thing. . Hope this clarify things. EDIT:; I just found a funny bug related to the automatic registration. Because it rely on the use of a backward macro expansion. There is currently more than 20 components that does not have their target properly set.; Eg: DataDisplay.cpp the code is like that:; ```cpp; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/config.h>; #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>. namespace sofa::component::visual::model; {; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; }; ```. The problem is that the ```SOFA_TARGET``` macro is used in ```ObjetFactory``` but is actually initialized in ```<SofaOpenglVisual/config.h>```; To fix the code it is needed to move the inclusion of the config.h before the one of ObjectFactory so that RegisterObject behave as expected. ; ```cpp; #include <SofaOpenglVisual/config.h>; #include <sofa/core/ObjectFactory.h>; #include <sofa/defaulttype/VecTypes.h>. #include <SofaOpenglVisual/DataDisplay.h>; #include <sofa/core/visual/VisualParams.h>; ```. Given all that, I'm wonder if going for things like ; ```cpp; int DataDisplayClass = core::RegisterObject(""Rendering of meshes colored by data""); .add< DataDisplay >();; .addTargetName(""SofaOpenglVisual""); ``` ; or even:; ```cpp; int DataDisplayClass = core::RegisterObject(); .setClassName(""DataDisplay""), ; .setTargetName(""SofaOpenglVisual""), ; .setDocString(""Rendering of meshes colored by data""); .addCreator<DataDisplay>();; ``` ; Would not make things much more clear.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615:2441,clear,clear,2441,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2512#issuecomment-982527615,2,['clear'],['clear']
Usability,"ecide what is good to save or not. This is what SOFA actually does and this behave terribly. ; I see two reason for that:; - there is a lot of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explicitely in the scene file; - the value specified explicitely in the GUI via the widget or the manipulators; Despite being very simple this work very well and without any risk that some authors breaks the saving because he forgot/decide not to setPersistent(false) in his component (and this happened quite a lot in the past). For your context of use, for which saving a simulated scene is important I think a very simple solution would be to write a visitor to switch all the Data values to persistent. And I would suggest to put this feature to a different entry in the menu (what about ""Export"" or ""Dump"" ?) so that in the same application we can either save or dump the scene with very well defined semantics ? . Now about the fact that some Data editted in the UI can be incompatible with another Data. I will let that for another day because to me this is a much more general UI problem. . Finally to improve a bit the general readability in any context of use we could, when writing big chunk of numbers (like vector.size() > 20) save them in separated files leading to something like: ; <MechanicalO",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:2126,simpl,simple,2126,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495,2,['simpl'],['simple']
Usability,"elocitySolver.cpp:47: .addAlias(""DampVelocity""); modules/SofaMiscSolver/NewmarkImplicitSolver.cpp:227: .addAlias(""Newmark"");; modules/SofaNonUniformFem/SparseGridMultipleTopology.cpp:41: .addAlias(""SparseGridMultiple""); modules/SofaNonUniformFem/SparseGridRamificationTopology.cpp:43: .addAlias(""SparseGridRamification""); modules/SofaOpenglVisual/OglColorMap.cpp:48: .addAlias(""ColorMap""); modules/SofaOpenglVisual/PointSplatModel.cpp:54: .addAlias(""PointSplat""); modules/SofaPreconditioner/JacobiPreconditioner.cpp:48: .addAlias(""JacobiLinearSolver""); modules/SofaPreconditioner/JacobiPreconditioner.cpp:49: .addAlias(""JacobiSolver""); modules/SofaPreconditioner/ShewchukPCGLinearSolver.cpp:231:.addAlias(""PCGLinearSolver"");; modules/SofaPreconditioner/SSORPreconditioner.cpp:56: .addAlias(""SSORLinearSolver""); modules/SofaPreconditioner/SSORPreconditioner.cpp:57: .addAlias(""SSORSolver""); modules/SofaTopologyMapping/Mesh2PointMechanicalMapping.cpp:60://.addAlias(""SimpleTesselatedTetraMechanicalMapping""); modules/SofaUserInteraction/RayModel.cpp:42: .addAlias(""Ray""); ```; ```; $ grep -rn '.addAlias *( *""' SofaKernel/; SofaKernel/modules/SofaBaseCollision/CapsuleModel.cpp:49: .addAlias(""Capsule""); SofaKernel/modules/SofaBaseCollision/CapsuleModel.cpp:50: .addAlias(""CapsuleModel""); SofaKernel/modules/SofaBaseCollision/CapsuleModel.cpp:51://.addAlias(""CapsuleMesh""); SofaKernel/modules/SofaBaseCollision/CapsuleModel.cpp:52://.addAlias(""CapsuleSet""); SofaKernel/modules/SofaBaseCollision/CubeModel.cpp:44: .addAlias(""Cube""); SofaKernel/modules/SofaBaseCollision/CylinderModel.cpp:48: .addAlias(""Cylinder""); SofaKernel/modules/SofaBaseCollision/CylinderModel.cpp:49: .addAlias(""CylinderModel""); SofaKernel/modules/SofaBaseCollision/CylinderModel.cpp:50://.addAlias(""CylinderMesh""); SofaKernel/modules/SofaBaseCollision/CylinderModel.cpp:51://.addAlias(""CylinderSet""); SofaKernel/modules/SofaBaseCollision/DefaultContactManager.cpp:41: .addAlias(""CollisionResponse""); SofaKernel/modules/SofaBaseCo",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/677#issuecomment-398795436:3722,Simpl,SimpleTesselatedTetraMechanicalMapping,3722,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/677#issuecomment-398795436,1,['Simpl'],['SimpleTesselatedTetraMechanicalMapping']
Usability,er; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaLoader/lib/libSofaLoader.so; [WARNING] [ObjectFactory] Class already registered: RecordedCamera; [WARNING] [ObjectFactory] Class already registered: VisualTransform; [WARNING] [ObjectFactory] Class already registered: Visual3DText; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralVisual/lib/libSofaGeneralVisual.so; [WARNING] [ObjectFactory] Class already registered: AddFrameButtonSetting; [WARNING] [ObjectFactory] Class already registered: AddRecordedCameraButtonSetting; [WARNING] [ObjectFactory] Class already registered: StartNavigationButtonSetting; [WARNING] [ObjectFactory] Class already registered: AttachBodyButtonSetting; [WARNING] [ObjectFactory] Class already registered: FixPickedParticleButtonSetting; [WARNING] [ObjectFactory] Class already registered: Gravity; [WARNING] [ObjectFactory] Class already registered: PauseAnimationOnEvent; [WARNING] [ObjectFactory] Class already registered: SofaDefaultPathSetting; [WARNING] [ObjectFactory] Class already registered: StatsSetting; [WARNING] [ObjectFactory] Class already registered: ViewerSetting; [WARNING] [ObjectFactory] Class already registered: APIVersion; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGraphComponent/lib/libSofaGraphComponent.so; [WARNING] [ObjectFactory] Class already registered: DirectSAP; [WARNING] [ObjectFactory] Class already registered: DirectSAPNarrowPhase; [WARNING] [ObjectFactory] Class already registered: IncrSAP; [WARNING] [ObjectFactory] Class already registered: RayTraceNarrowPhase; [WARNING] [ObjectFactory] Class already registered: TriangleOctreeModel; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralMeshCollision/lib/libSofaGeneralMeshCol,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:14041,Pause,PauseAnimationOnEvent,14041,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,1,['Pause'],['PauseAnimationOnEvent']
Usability,"eshLoader.cpp b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp; index 2f00fe62dc..782ce854ce 100644; --- a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp; +++ b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp; @@ -72,6 +72,7 @@ MeshLoader::MeshLoader() : BaseLoader(); , d_rotation(initData(&d_rotation, Vec3(), ""rotation"", ""Rotation of the DOFs"")); , d_scale(initData(&d_scale, Vec3(1.0, 1.0, 1.0), ""scale3d"", ""Scale of the DOFs in 3 dimensions"")); , d_transformation(initData(&d_transformation, type::Matrix4::s_identity, ""transformation"", ""4x4 Homogeneous matrix to transform the DOFs (when present replace any)"")); + , d_dataset1(initData(&d_dataset1, ""dataset1"", ""Data from dataset"")); , d_previousTransformation(type::Matrix4::s_identity ); {; addAlias(&d_tetrahedra, ""tetras"");; @@ -184,6 +185,8 @@ void MeshLoader::clearBuffers(); getWriteOnlyAccessor(d_pyramidsGroups).clear();; getWriteOnlyAccessor(d_polygonsGroups).clear();; ; + getWriteOnlyAccessor(d_dataset1).clear();; +; doClearBuffers();; }; ; diff --git a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h; index d972c27d75..5fc1d75345 100644; --- a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h; +++ b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h; @@ -183,6 +183,7 @@ public:; Data< Vec3 > d_scale; ///< Scale of the DOFs in 3 dimensions; Data< type::Matrix4 > d_transformation; ///< 4x4 Homogeneous matrix to transform the DOFs (when present replace any); ; + Data< type::vector< SReal > > d_dataset1; ///< mesh dataset; ; virtual void updateMesh();; virtual void updateElements();; diff --git a/SofaKernel/modules/SofaLoader/src/SofaLoader/MeshVTKLoader.cpp b/SofaKernel/modules/SofaLoader/src/SofaLoader/MeshVTKLoader.cpp; index fcf73fb5f2..241067ea0b 100644; --- a/SofaKernel/modules/SofaLoader/src/SofaLoader/MeshVTKLoader.cpp; +++ b/SofaKernel/modules/SofaLoader/src/",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:3474,clear,clear,3474,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,1,['clear'],['clear']
Usability,"faKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp; index 2f00fe62dc..782ce854ce 100644; --- a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp; +++ b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp; @@ -72,6 +72,7 @@ MeshLoader::MeshLoader() : BaseLoader(); , d_rotation(initData(&d_rotation, Vec3(), ""rotation"", ""Rotation of the DOFs"")); , d_scale(initData(&d_scale, Vec3(1.0, 1.0, 1.0), ""scale3d"", ""Scale of the DOFs in 3 dimensions"")); , d_transformation(initData(&d_transformation, type::Matrix4::s_identity, ""transformation"", ""4x4 Homogeneous matrix to transform the DOFs (when present replace any)"")); + , d_dataset1(initData(&d_dataset1, ""dataset1"", ""Data from dataset"")); , d_previousTransformation(type::Matrix4::s_identity ); {; addAlias(&d_tetrahedra, ""tetras"");; @@ -184,6 +185,8 @@ void MeshLoader::clearBuffers(); getWriteOnlyAccessor(d_pyramidsGroups).clear();; getWriteOnlyAccessor(d_polygonsGroups).clear();; ; + getWriteOnlyAccessor(d_dataset1).clear();; +; doClearBuffers();; }; ; diff --git a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h; index d972c27d75..5fc1d75345 100644; --- a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h; +++ b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h; @@ -183,6 +183,7 @@ public:; Data< Vec3 > d_scale; ///< Scale of the DOFs in 3 dimensions; Data< type::Matrix4 > d_transformation; ///< 4x4 Homogeneous matrix to transform the DOFs (when present replace any); ; + Data< type::vector< SReal > > d_dataset1; ///< mesh dataset; ; virtual void updateMesh();; virtual void updateElements();; diff --git a/SofaKernel/modules/SofaLoader/src/SofaLoader/MeshVTKLoader.cpp b/SofaKernel/modules/SofaLoader/src/SofaLoader/MeshVTKLoader.cpp; index fcf73fb5f2..241067ea0b 100644; --- a/SofaKernel/modules/SofaLoader/src/SofaLoader/MeshVTKLoad",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:3425,clear,clear,3425,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,1,['clear'],['clear']
Usability,"factory. . In the following is a simple proposal to replace the problematic code: ; ```cpp; namespace simpleapi; {. BaseObject::SPtr createObject(Node::SPtr self, const std::string& type, const std::map<std::string, std::string>& params={}); {; /// temporarily, the name is set to the type name.; /// if a ""name"" parameter is provided, it will overwrite it.; BaseObjectDescription desc(type.c_str(),type.c_str());; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }. /// Create the object.; BaseObject::SPtr obj = ObjectFactory::getInstance()->createObject(self.get(), &desc);; if (obj==0); {; std::stringstream msg;; msg << ""create: component '"" << desc.getName() << ""' of type '"" << desc.getAttribute(""type"","""")<< ""' in node '""<<self->getName()<<""'"" ;; for (std::vector< std::string >::const_iterator it = desc.getErrors().begin(); it != desc.getErrors().end(); ++it); msg << "" "" << *it << msgendl ;; return NULL;; }. return obj ;; }. Node::SPtr createChild(Node::SPtr& node, const std::string& name, const std::map<std::string, std::string>& params={}); {; BaseObjectDescription desc(""Node"", ""Node"");; for(auto& kv : params); {; desc.setAttribute(kv.first.c_str(), kv.second.c_str());; }; Node::SPtr tmp = node->createChild(name); ; tmp->parse(desc);; return tmp;; }; }. Node::SPtr createRootWithCollisionPipeline(const std::string& responseType); {; root = simulation::getSimulation()->createNewGraph(""root"");; simpleapi::createObject(root, ""DefaultPipeline"", {{""name"",""Collision Pipeline""}}) ;; simpleapi::createObject(root, ""BruteForceDetection"", {{""name"",""Detection""}}) ;; simpleapi::createObject(root, ""MinProximityIntersection"", {{""name"",""Proximity""},; {""alarmDistance"", ""0.3""},; {""contactDistance"", ""0.2""}}) ;. simpleapi::createObject(root, ""DefaultContactManager"", {; {""name"", ""Contact Manager""},; {""response"", responseType}; });. simpleapi::createObject(root, ""DefaultCollisionGroupManager"", {{""name"", ""Collision Group Manager""}});; return root;; }; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901:1726,simpl,simpleapi,1726,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/427#issuecomment-333236901,10,['simpl'],['simpleapi']
Usability,failure are catched from Sofa_test. This means that the information returned; /// in the test failure are the location of the failure in Sofa_test.cpp:lineno; /// This is why it is always better to explicitely specify the test behavior (possible the same as ; /// the default one as it will report correct testname/line number information. ; void noEmitTestBehavior(); {; EXPECT_MSG_NOEMIT(Warning) ;; EXPECT_MSG_NOEMIT(Error) ;; }; ; /// Finally it is possible to narrow where the messages are expected using blocks...; void complexTestBehavior(); {; /// Here is the default mode. ; ....; {; /// We will report a failure is there no warning nor error emitted before the end of this block. ; EXPECT_MSG_EMIT(Warning) ;; EXPECT_MSG_EMIT(Error) ;; ...; { ; /// But this sub-part does not count... and it shouldn't emit a message. ; EXPECT_MSG_NOEMIT(Error) ;; .... ; }; }; }; ```. This PR will generate a lot of new test failure... that are either real failure that deserve investigation or ; tests that was previously simply previously ignoring error & warning messages; . CHANGELOG for @hugtalbot & @guparan :; - TestMessageHandler.cpp implements a new & robust way to connect msg_* message to test failure ; - TestMessageHandler_test.cpp implements test for TestMessageHandler. ; - Sofa_test is updated to use the new TestMessageHandler where msg_error generates test failures ; - All the existing tests have been changed to use the new API & removed the old one. ; - MeshSTL.cpp replace a std:cerr by a msg_error so that FIX the corresponding failing test.; - Message.cpp adds a way to convert message type to string.; - updates externs/gtest to a fresh checkout. ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings nor unit test failures. (This PR cannot do that...read my comment about that). ; - [x] does not break existing scene,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/213:2491,simpl,simply,2491,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/213,1,['simpl'],['simply']
Usability,"for every BaseProjectiveConstraintSet ""pc"" found. This will set to 0 lines and columns of fixed constraints.; If a mechanical mapping ""m"" is found during the traversal, and m->areMatricesMapped() is false, the traversal stops before entering the subgraph of the mapping. Mechanical mappings step:; In case we have mapped matrices, which is, system matrix of a slave mechanical object, accumulate its contribution to the global system matrix with:; [A]ij += Jt * [A']ij * J; where `A` is the master mechanical object's matrix (top level), `A'` is the slave mechanical object matrix (linked to the top level MO using a mapping) and `J=m.getJ()`; is the mapping relation between the slave and its master. (2) [r_m M + B + r_k K] v; Go down in the current context tree calling `addMBKdx` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings. If the k mechanical parameter is not zero, the `applyDJT` will also be applied.; NOTE: This correspond to the force terms dependent on the velocity, i.e. the damping terms : ; [- r_m M - B + r_k K] v; where K is in fact -K by SOFA's convention, hence the positive (+) sign. (3) [F - T]; Go down in the current context tree calling `addForce` on every force field components, then go up from the leaves calling `applyJT` on every mechanical mappings.; NOTE: This correspond to the force terms dependent on the displacement, i.e. :; (-Ku + T). Now, the damping and stiffness matrices `B` and `K` are usually sparse. Knowing in advanced that `M` is also sparse (or even diagonal), I would bet that we could optimize these operations `(aM + b B + c K) v`. This is even more important for non-linear systems since a third term of the type `(aM + bB + cK) a` appears and must be computed multiples times per time steps. . Let me know if something is not clear, this part is very un-intuitive and I spent the past 2 weeks trying to understand it to implement non-linear dynamic solvers so it is fresh in my memory !",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263:3026,clear,clear,3026,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1923#issuecomment-804095263,4,"['clear', 'intuit']","['clear', 'intuitive']"
Usability,"good job @coolteemf ; All you have to do is, go on your branch and revert your commit:; ```; # Make sure you are on the right branch; git checkout Improve_MeshBarycentricMapperEngine. # Undo the desired commit; git revert 130a13d. # Update the remote with the undo of the code; git push origin Improve_MeshBarycentricMapperEngine; ```; Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694692149:186,Undo,Undo,186,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1487#issuecomment-694692149,3,"['Undo', 'undo']","['Undo', 'undo']"
Usability,"gorithms name='GeomAlgo' template='Rigid3d' />; 		<MechanicalObject template='Rigid3d' name='dofTopo3' />; 	</Node>; 	. 	<Node name='InstrumentCombined'>; 		<EulerImplicitSolver rayleighStiffness='0.2' rayleighMass='0.1' printLog='false' />; 		<BTDLinearSolver subpartSolve='0' verification='0' verbose='0'/>; 		<RegularGridTopology name='meshLinesCombined'; nx='180' ny='1' nz='1'; xmin='0.0' xmax='1.0'; ymin='0' ymax='0'; zmin='1' zmax='1'; 		/>; 		<MechanicalObject template='Rigid3d' name='DOFs' showIndices='0' ry='-90'/> . 		<WireBeamInterpolation name='InterpolCatheter' WireRestShape='@../topoLines_cath/catheterRestShape' radius='1' printLog='0'/> ; 		<AdaptiveBeamForceFieldAndMass name='CatheterForceField' interpolation='@InterpolCatheter' massDensity='0.00000155'/> <!--stiff silicone E = 10000 MPa // 1550 Kg/m3-->	. 		<WireBeamInterpolation name='InterpolGuide' WireRestShape='@../topoLines_guide/GuideRestShape' radius='0.9' printLog='0'/> ; 		<AdaptiveBeamForceFieldAndMass name='GuideForceField' interpolation='@InterpolGuide' massDensity='0.00000155'/> 	. 		<WireBeamInterpolation name='InterpolCoils' WireRestShape='@../topoLines_coils/CoilRestShape' radius='0.1' printLog='0'/> ; 		<AdaptiveBeamForceFieldAndMass name='CoilsForceField' interpolation='@InterpolCoils' massDensity='0.000021'/> <!-- platine E = 168000 MPa // 21000 Kg/m3-->	. <BeamAdapterActionController name=""AController"" interventionController=""@IRController"" writeMode=""0""; timeSteps=""9.1 17.1 17.55 18.05 18.6 19.05 19.55 20.05 20.5 21 21.45 21.9 22.65 23.1 23.55 24.05 24.55 25 25.45 25.95 26.4 27.1 27.55 28.05 28.55 29 29.5 29.95 30.4 30.9 31.4 31.85 32.35 33.05 33.5 34 34.45 34.9 35.4 35.85 36.35 36.8 37.25 37.7 38.2 38.65 39.4 39.85 40.3 40.7 41.2 41.65 42.1 42.55 43 43.4 44.1 44.55 45 45.45 45.9 46.3 46.75 47.2 47.65 48.1 48.55 49 49.65 50.1 50.5 50.9 51.35 51.75 52.2 52.6 53.05 53.5 53.95 54.4 54.85 55.5 55.9 59.1 66.15 66.6 67.05 67.45 67.9 68.35 68.8 69.25 69.65 70.1 70.55 71.2 71.6 72.05 72.5",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4833:5946,Guid,GuideForceField,5946,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4833,1,['Guid'],['GuideForceField']
Usability,"he topology state variable with respect to the change in the topology. For example in a `TriangularFEM` this means computing the variables related to the rest configuration when new triangles are added. See [TriangularFEMForceFieldOptim.inl](https://github.com/sofa-framework/sofa/blob/master/modules/SofaGeneralSimpleFem/TriangularFEMForceFieldOptim.inl#L54-L70) for the related code. ; An attempt to uniform this design has been tried in `MechanicalObject`, but stopped because it would have required some other drastic changes, namely that it would no longer be possible to have a `MechanicalObject`, without any `TopologyContainer` of some sort either in its local context or in its parent context.; With the current implementation ( which does not rely on `TopologyData` ) if no `TopologyContainer` is specified, it is therefore implicit that the topology is a point topology, no `PointSetTopologyContainer` is required to describe that fact.; However working with `TopologyData` ( or at least clarifying why ultimately it was decided not to use it ) API to store the state vectors of a `MechanicalObject` would have the benefit of removing the need to call the `resize()` method ( it is usually done during `apply` methods of mapping ).; Ultimately it would also lead to rework the current implementation of `PointSetTopologyContainer`, which can only contain set of contiguous indices ( e.g 0 1 2 3 4 5 ... ) and not any sub set of indices ( e.g 2 6 8 9 12) unlike the other TopologyContainers.; This would lead to at least two clarifications : ; - some forcefields specify the list of the dof indices they contribute to, it would no longer be necessary to do so, they would simply fetch the list of point indices they are supposed to work on from the closest `PointSetTopologyContainer`; - `SubsetMapping` would be deprecated, ( and not `SubsetMultiMapping` which has some other purpose ), since it would be only necessary to describe the point subset of interest that needs to be considered.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672:2378,simpl,simply,2378,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/242#issuecomment-295286672,2,['simpl'],['simply']
Usability,"he use of doxygen comments and we are in fact mixing two different approaches. Let's name them ""code centric"" and ""doxygen centric"". . In the code centric approach: ; - /// or ///< is used to state that this the comment *is part of the documentation*. ; - // is for any other *non-documenting* comment (eg: commented code). ; With this approach the main focus is that the documentation parts should be easily visible from the source code and that documentation is composed of declaration parts related part (that must fullfill doxygen rules) as well as internal details. ; The added value of using /// or ///< is that developper when they see them clearly knows ""this is part of the documentation"". This aproach is a super-set of doxygen but is not limiting the documentation to only what doxygen understand (the underlying assumption is that we need to document much more than just declaration/api). . The doxygen centric approach is slighly different: ; - // should be used for internal-documentation as well as non-documentating comments; - /// or ///< should be used only for documentation what can be understood by Doxgen to generate html pages. ; Te main focus with this approach is to make very clear what will be use by Doxygen what it will use to auto-generate its public documentation, the counter part I see is that it mix comments and what should be considered as internal documentation. . It is important is of course to have doxygen friendly declaration centric (the public API) documentation ...but it is equally important to have proper documentation for the internal details. ; If would probably do something like that in a new project:; - always use /** */ for documenting public API (what should and must be visible in doxygen, mostly the comment close to declaration) ; - always use /// or ///< for internal details (no requirement that it must be close to declaration) ; - use // or /* */ for other usages. . But given our code base ... I'm not sure which direction we should go.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417:1527,clear,clear,1527,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1794#issuecomment-794162417,2,['clear'],['clear']
Usability,"helper::vector, helper::set, helper::list, etc. lack of important c++11 functionalities; such as move constructor, initializer_list and maybe other stuffs. helper::vector is adding several stuffs to std::vector, so it makes sense to add these functionalities. But is derivating helper::set, helper::list from stl container the right design since they are simply adding the stream operators (for string serialization)? Could not we simply add these operators outside of the class, and always use std containers?",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/107:355,simpl,simply,355,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/107,2,['simpl'],['simply']
Usability,"hey @maxime-tournier could you provide me some info for the changelog ?; i also add a flag setting your PR as wip, but do not hesitate to change its status to review when the ci is fine and you want feedback. Cheers",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/347#issuecomment-317654029:199,feedback,feedback,199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/347#issuecomment-317654029,2,['feedback'],['feedback']
Usability,"hi @fredroy, thanks for getting back. I am using Ubuntu 18.04.6 LTS. In `sofaframework/sofabuilder_ubuntu`, I clone the repo `git clone -b v22.06.00 https://github.com/sofa-framework/sofa.git sofa/src` and followed the procedure for `build SOFA on [Linux](https://www.sofa-framework.org/community/doc/getting-started/build/linux/)` and got the same error while running ./runSofa. while using `sofaframework/sofa_nightly_ubuntu:v22.06-full`, I first directly run ./runSofa without building sofa and then with building as earlier but again same error. ; Please also guide me if I have even have to build in second case `(sofaframework/sofa_nightly_ubuntu:v22.06-full)`",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315420671:564,guid,guide,564,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3486#issuecomment-1315420671,2,['guid'],['guide']
Usability,"hin git in order to be able to use merge with 10s of commits with mismatching file hierarchies (and there is none that I know of that will work well enough to be always used); - the history of all affected files will be polluted by this move. Example: it is tricky to know the history of all the SofaKernel files before May 2016 [(example)](https://github.com/sofa-framework/sofa/commits/master/SofaKernel/framework/sofa/core/BaseState.h) (can someone remind me what we gained by this massive move? I would like to know because that's the number-one time-waster on our end for merges/history tracking). So I would like to know if those considerations were understood before doing this once again ?. And as a counter-proposal, for discussion, that you are free to ignore, I would suggest a 3 steps approach :. 1. First only change the CMake scripts / per-lib main header/cpp to convert them to plugins WITHOUT moving the actual source files; 2. Document the proposed new directory hierarchy, propose it and wait for feedback from enough community members; 3. Once there is an agreement on the hierarchy, apply it via a commit that does not change anything else (changes in cmake scripts should be done as a separate commit, to ease solving later merge/conflict issues). And regarding point 2, instead of moving everything in `applications/plugins` that is only there because of a bad decision 10 years ago (it was simpler as we had to release the main directories as separate archives for licensing reason so we packed the couple of plugins we had together with the executables), I would propose to use the following:; - _Sofa root directory_; - SofaPlugins; - SofaMiscForceField; _..._; - SofaPluginsDeprecated; - SofaVRPNClient _any plugin we no longer support but still keep around if someone else want to pick it up_; - SofaPluginsGPL; - SceneCreator; - SofaPML; ... _any plugins with a GPL licence_; - SofaPlugins(.*) _any other licences or additional private ones in other repos_. Note: as an al",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/482:1587,feedback,feedback,1587,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/482,1,['feedback'],['feedback']
Usability,"hon310\\DLLs', 'C:\\Python310\\lib', 'C:\\Python310', 'C:\\Users\\Manas\\AppData\\Roaming\\Python\\Python310\\site-packages', 'C:\\Python310\\lib\\site-packages', 'C:\\Python310\\lib\\site-packages\\win32', 'C:\\Python310\\lib\\site-packages\\win32\\lib', 'C:\\Python310\\lib\\site-packages\\Pythonwin']; #################. ```. ---------------------------------------------. ### Logs. **Full output**. ```txt. [WARNING] [SofaEigen2Solver] SofaEigen2Solver is deprecated; Eigen classes are now located in Sofa.LinearAlgebra and SVDLinearSolver in SofaDenseSolver.You can remove SofaEigen2Solver from your scene, and if using SVDLinearSolver, please load SofaDenseSolver instead.; [INFO] [runSofa] PluginRepository paths = D:/github-clones/sofa/build/bin;D:/github-clones/sofa/build/plugins;D:/github-clones/sofa/build/bin/RelWithDebInfo; [INFO] [runSofa] DataRepository paths = D:/github-clones/sofa/src/share;D:/github-clones/sofa/src/examples;D:/github-clones/sofa/build;D:/github-clones/sofa/build; [INFO] [runSofa] GuiDataRepository paths = D:/github-clones/sofa/src/applications/projects/runSofa/resources;D:/github-clones/sofa/src/modules/SofaGuiQt/src/sofa/gui/qt/resources;D:/github-clones/sofa/build; [INFO] [runSofa] Loading automatically plugin list in D:\github-clones\sofa\build\bin\RelWithDebInfo/plugin_list.conf.default; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaSimpleFem.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaRigid.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaDeformable.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaObjectInteraction.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaMeshCollision.dll; [INFO] [PluginManager] Loaded plugin: D:/github-clones/sofa/build/bin/RelWithDebInfo/SofaEngine.dll; [INFO] [PluginManager] Loaded plug",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3110:5050,GuiD,GuiDataRepository,5050,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3110,1,['GuiD'],['GuiDataRepository']
Usability,"https://github.com/fredroy/SofaGLFW. Why?; - Bothersome to need Qt to have a 3D rendering of a scene; - The existing ""simple"" GUI SofaGLUT is not supported anymore and is based on a deprecated library (glut). This PR brings a simple GUI based on GLFW (a spiritual heir of Glut).; It only needs SofaGUICommon, SofaBaseVisual and Sofa.GL as dependencies.; Integration of GLFW is automatic (automatic fetching and integration with cmake), and linked statically (does not need a glfw.dll to be shipped with). This GUI is launchable with the standard runSofa (with the parameter ""-g glfw""), or can be used with a (provided) stand-alone executable (which needs much less dependencies than runSofa). Lastly, this GUI was designed to support multiple windows in the same time and multiple simulations. So when multiple simulations is possible is the future, it should be easy to modify the code to support this feature.; And multiple windows could be based on the fact having multiple Camera in the scene (feature not implemented yet). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2062:118,simpl,simple,118,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2062,2,['simpl'],['simple']
Usability,"https://github.com/sofa-framework/sofa/pull/3512 is already merged.; But you could try to add your changes on https://github.com/sofa-framework/sofa/pull/3501. According to my unit test, a simple; ```cpp; if (n == 0); {; return true;; }; ```; makes the job",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1337325939:189,simpl,simple,189,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3499#issuecomment-1337325939,2,['simpl'],['simple']
Usability,https://www.sofa-framework.org/community/doc/programming-with-sofa/guidelines/ is still not formatted appropriately. Any idea @hugtalbot @bakpaul @fredroy ?,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4695#issuecomment-2084536191:67,guid,guidelines,67,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4695#issuecomment-2084536191,2,['guid'],['guidelines']
Usability,"ils.addObject('MechanicalObject',template='Rigid3d',name='dofTopo3'). InstrumentCombined = rootNode.addChild('InstrumentCombined'); InstrumentCombined.addObject('EulerImplicitSolver',rayleighStiffness=0.2,rayleighMass=0.1,printLog='false'); InstrumentCombined.addObject('BTDLinearSolver',subpartSolve='0',verification='0',verbose='0'); InstrumentCombined.addObject('RegularGridTopology',name='meshLinesCombined',nx=60, ny=1, nz=1,xmin=0.0, xmax=1.0,ymin=0, ymax=0,zmin=1, zmax=1); InstrumentCombined.addObject('MechanicalObject',template='Rigid3d',name='DOFs',showIndices='0',ry=-90); InstrumentCombined.addObject('WireBeamInterpolation',name='InterpolCatheter',WireRestShape='@../topoLines_cath/catheterRestShape',radius=1,printLog='0'); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass',name='CatheterForceField',interpolation='@InterpolCatheter',massDensity=0.00000155); InstrumentCombined.addObject('WireBeamInterpolation', name='InterpolGuide', WireRestShape='@../topoLines_guide/GuideRestShape', radius=0.9, printLog='0'); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass',name='GuideForceField',interpolation='@InterpolGuide',massDensity=0.00000155); InstrumentCombined.addObject('WireBeamInterpolation', name='InterpolCoils', WireRestShape='@../topoLines_coils/CoilRestShape', radius=0.1, printLog='0'); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass', name='CoilsForceField', interpolation='@InterpolCoils', massDensity=0.000021); InstrumentCombined.addObject('InterventionalRadiologyController',name='m_ircontroller',template='Rigid3d',printLog='0',instruments='InterpolCatheter InterpolGuide InterpolCoils',startingPos=[0, 0 ,0 ,0 ,-0.7071068, 0, 0.7071068],xtip=[1 ,0 ,0] ,rotationInstrument=[0, 0, 0 ],controlledInstrument=0,step=3,speed=2 ); InstrumentCombined.addObject('LinearSolverConstraintCorrection',printLog='false',wire_optimization='true'); InstrumentCombined.addObject('FixedConstraint',name='FixedConstraint',indices='0'); InstrumentCombined",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243:4193,Guid,GuideRestShape,4193,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243,1,['Guid'],['GuideRestShape']
Usability,"in DataExchange component, add exchanges of image data types (ImageUC, ImageUS, ImageF), requiring a depedency with the image plugin; + add a simple example passing an image from an ImageContainer (Thread 1) to an ImageViewer (Thread 2); + fix OpenGL issues in the draw() function in the Kinect component in the image plugin. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/769:142,simpl,simple,142,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/769,1,['simpl'],['simple']
Usability,"in compile time code, one is dynamic interface API. AbstractTypeInfo is the dynamic interface (with the virtual function). The AbstractTypeInfoDynamicWrapper is a façade to ""wrap"" the compile time TypeInfo type-traits into the virtual one. . The TypeInfo type-traits API has several consistancy issues (probably dating back to pre-c++17 area) mixing a lot of different behavior into a single dynamic API... making things very fuzzy. . In the current status of the PR I just wanted to draft something to have a gimplse of the look and feel of a more modern code architecture (without breaking everything). . Regarding your question about insertion in a vector... the problem is that insert is not a push_back... it means inserting ""somewhere"" which could of course be implemented on vector. But it would requires a serious work on the AbstractTypeInfo API to make all that consistent. ;   | set | map | vector | fixed_array; -- | -- | -- | -- | --; clear() | X | X | X |  ; insert(A) | X |   |   |  ; insert(std::pair<key, B>) |   | X | Y |  ; size() | X | X | X | X; resize() |   |   | X |  ; empty() | X | X | X | X. So in short:; ! IsFixedSizeContainer => clear(), resize(); isContainer => empty(), size(); isSet => insert(A) and !insert(std::pair<>). I drafted the general implementation, to illustrate what the current TypeInfo is really doing and how to refactor it: https://godbolt.org/z/srsq3ExPq; extract:; ```cpp. template<class Info>; class AbstractTypeInfoDynamicWrapper : public BaseAbstractTypeInfo; {; public:; bool size() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::clear();; throw std::runtime_error(""Invalid operation"");; }. bool empty() override ; { ; if constexpr(; Info::IsContainer && ; Info::Properties::IsContainer); return Info::empty();; throw std::runtime_error(""Invalid operation"");; }. void setValueInteger(int index, int value) override ; { ; if constexpr(; !Info::Properties::IsSetContainer && ; Info::Properties::Ty",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905:1177,clear,clear,1177,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3851#issuecomment-1545409905,2,['clear'],['clear']
Usability,"indings. - get/setValue: Probably the trickiest one, these methods are used to compute stuff on templates without any knowledge of the inner layout of the template type. I'm not 100% sure that I found all instances of those calls in Sofa's core, but it seems like it is *exclusively* used with TDataType::Coord and TDataType::Deriv (which are either VecX or RigidCoord/RigidDeriv). In conclusion the usage of DataTypeInfo in BaseData justifies its existence to me. Maybe some features could be isolated in a separate API, but that would only mean maintaining 2 APIs instead of one. I think that instead of trying to remove it from SOFA, we should investigate how to make the API better:; 1. size() / byteSize() / size(void* data) are really unclear (hence the shitty doc on those methods I guess, and it is really hard to know which of these methods serves what purpose. If we base ourselves on the terminology of another data abstraction tool (say numpy), we will still not be able to easily cover complex data types such as sparse matrices easily, but we at least will have a way clearer API to dig into: len, size, shape, ndim...; 2. just like SimpleLayout, we could add a dedicated flag for specific types, to simplify conversions in bindings (Keep the Container flag but maybe add additional ""Matrix"", ""Vector"", and ""Complex"" flags to further discriminate, maybe a SparseMatrix too...; 3. We could add extra pre-filled specializations of DataTypeInfo with clear names to simplify writing new ones (so that we don't have to fill up every flags ourselves everytime); 3. @jnbrunet @damienmarchal what do you think?. ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 wee",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1385:3263,clear,clearer,3263,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1385,1,['clear'],['clearer']
Usability,"ipal advantage: we will be able to get redistributable plugin binaries through a classic SOFA build. . ### [Defrost binaries changes for a better install, specifically on MacOS](https://github.com/sofa-framework/sofa/commit/22f3c14a25bf879143fb58403a34d569e8ab727f); - [CMake] FIX install: SofaMiscCollision, SofaDistanceGrid, SofaImplicitField; - [CMake] FIX install on MacOS: differentiate SOFA_BUILD_RELEASE_PACKAGE and SOFA_BUILD_APP_BUNDLE; - [SofaMacros] ADD backward compatibility for INCLUDE_INSTALL_DIR; - [SofaMacros] ADD EXAMPLE_INSTALL_DIR to sofa_create_package; - [SofaMacros] Improve sofa_set_python_directory macro; - [SofaPython] Wider dir search for env loading; - [SofaGuiQt] Remove VSync message; - [package.cmake] Do not force CMAKE_BUILD_TYPE + Enable more plugins. ### [[DiffusionSolver] MOVE from image/extlibs to a real plugin](https://github.com/sofa-framework/sofa/commit/54f49d039aadaffd57a1d7f8ebab3af82e407674); I see no reason not to do that. Dependencies to DiffusionSolver are simpler this way. ### [[CImgPlugin] CLEAN include directory](https://github.com/sofa-framework/sofa/commit/1a617d5350f74ac4a816255960d92638a26cba1b); Sources moved to `src`. No more `../` horror in CImgPlugin include directories. ## Other changes. - [SofaHelper] FIX DynamicLibrary altered search path (Windows only) ; Needed to prefer `bin` libraries over neighboor libraries; - [SofaFramework] FIX typo in config.h.in; - [runSofa] Check if plugins dir exists before adding to PluginRepository; - [SofaTest] FIX SofaPython finding in *Config.cmake.in; - [plugins] ADD missing *Config.cmake.in files; Needed to use them as real plugins; - [All] Improve sofa_copy_libraries and sofa_install_libraries macros; Make them easier to use; - [CMake] Rename sofa_set_python_directory into sofa_install_pythonscripts; Clearer name in my opinion + using CMake multiValueArgs; - [CMake] Update package.cmake to enable plugins; Prepare package.cmake to produce binaries with all plugins from ""options"" ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1018:3465,simpl,simpler,3465,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1018,1,['simpl'],['simpler']
Usability,"is deprecated because it is not used. I believe it stopped to be used here: https://github.com/sofa-framework/sofa/commit/50fe60f28306912e0e853c0a9493bccdd9735ff7#diff-b0264445a2a81f648e146f0b1d59d5d197cf3a935f3b7cbb24af11a38b8e6e68L433; - `override` keyword was missing in `~LinearSolverConstraintCorrection`; - `LinearSolverConstraintCorrection::J` is renamed to `m_constraintMatrix`. Its floating-type is no longer `SReal`, but `Real`. In theory, it's breaking.; - `computeJ` is no longer used. Instead, I introduce the method `convertConstraintMatrix`, which is IMO clearer. `computeJ` could be removed I think. But for some reasons it is virtual. Anyone overrides it?; - Added a timer in `convertConstraintMatrix`. This must be used for benchmark to evaluate the cost of the conversion. I believe that we can think of a way to avoid the conversions (only if it costs too much).; - `MatrixLinearSolverInternalData::copyJmatrix` is renamed to `convertMatrix` and it is now protected.; - Made `getLocalJ` clearer.; - Added details for `addJMInvJt`; - Introduced rebind types for `CompressedRowSparseMatrixConstraint`, `CompressedRowSparseMatrixGeneric` and `CompressedRowSparseMatrixMechanical`; - `CompressedRowSparseMatrixConstraint`: added test for the stream operator. The operator no longer adds trailing spaces on each line.; - Better iterators in `CompressedRowSparseMatrixConstraint`; - Missing header guard in `CompressedRowSparseMatrixConstraintEigenUtils.h`; - Fixed `operator()` in `CompressedRowSparseMatrixToEigenSparseVec`. Also added error message if out-of-bounds. Required for https://github.com/sofa-framework/SofaPython3/pull/459; - Introduction of `is_specialization_of`. Used in [a SofaPython3 PR](https://github.com/sofa-framework/SofaPython3/pull/459). ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framew",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/5017:1047,clear,clearer,1047,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/5017,1,['clear'],['clearer']
Usability,it doesn't on mac.... I pushed a simple test on EdgeSetTopologyAlgorithm.; Feel free to do some tests.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644:33,simpl,simple,33,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/777#issuecomment-422350644,2,['simpl'],['simple']
Usability,"it's not compiling on the CI due to incompatibility of gcc 5.4 with C++17; otherwise I would appreciate a feedback from @epernod and @marques-bruno, especially about the updateIfDirty (and no clean dirty) thanks",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526506834:106,feedback,feedback,106,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1131#issuecomment-526506834,2,['feedback'],['feedback']
Usability,"k on this specific container through the override of _fwd_* and _bwd_* functions, because of the boilerplate code. In a nutshell, there are race conditions which can be avoided if the derived class can execute only the code they are designed to execute, and nothing more. ### Proposition. I added boolean variables named `applyFwd*` and `applyBwd*`, each corresponding to the `fwd*` and `bwd*` functions. They are all set to false by default.; For example, if `applyFwdMechanicalState` is true, then the code related to `fwdMechanicalState` is executed. Remember that previously, the boilerplate code related to `fwdMechanicalState` was executed even if `fwdMechanicalState` does nothing. To change that, the derived class must set the right variables to true, so the right code is executed. For example, if a derived class wants to execute `fwdMechanicalState`, it must set `applyFwdMechanicalState` first, usually in its constructor. ### Pros. - Avoid unnecessary race conditions; - Does not execute unnecessary boilerplate code; - Simple to understand. ### Cons. - Breaks all classes derived from `BaseMechanicalVisitor`; - Forces the developers of classes derived from `BaseMechanicalVisitor` to tune booleans according the goal of the visitor.; - Runtime check of the variables. This PR is not to merge yet. IIt is suggested as an alternative to PR #1963. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibili",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1962:2214,Simpl,Simple,2214,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1962,1,['Simpl'],['Simple']
Usability,"ld be implemented exactly the same using the C-python API. ; It is just 10x longer to write an equivalent code. . As you ask I pushed a branch (https://github.com/SofaDefrost/sofa/tree/sofa_refactorSofaPython) with the implementation don't expect the branch to compile today as it contains irrelevant code that are wip to support the buffer protocol for seamless integration with numpy. . For the syntax about Data...everything is implemented in 'Binding_Data.cpp'. ; The function SofaData_asMapping_ass_subscript is the one called when using the [aaa] = operation. ; ```cpp; static int SofaData_asMapping_ass_subscript(PyObject *o, PyObject *key, PyObject *value); {; ....; /// This line is actually calling the ""python"" part implementation because I was too lazy; /// to implement it using C-Python API. So the function is really implemented partially with python ; /// and partially with c++ :) ; if( Data_ass_subscript(o,key,value) ); return 0;; ; /// after that it is a lot of ugly c-python api code. ; ....; ```. And the corresponding cython code (in Binding_DataArray.pyx); ```python; def sliceToRange(c, end):; start = 0; stop = end; if c.start != None:; start = c.start; if c.stop != None:; stop = c.stop; return xrange(start, stop) . cdef public bool Data_ass_subscript(o,key,value):; if isinstance(key, slice):; start, stop, step = key.start, key.stop, key.step; for i in xrange(start,stop):; Data_helper(o, i, value); return True; elif callable(key):; g = key(o) ; for i in g:; Data_helper(o, i, value); return True; elif isinstance(key, tuple):; if isinstance(key[0], slice) and isinstance(key[1], slice):; igen = sliceToRange(key[0], o.shape[0]); jgen = sliceToRange(key[1], o.shape[1]); for i in igen:; for j in jgen:; Data_helper(o,(i,j),value) ; return True ; return False; ```. Mixing code to implement a single function is clearly not the way to go. But i found that implementing complete complex function using the C-python api in cython is way more easier than writing them in C.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819:3178,clear,clearly,3178,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/767#issuecomment-419024819,2,['clear'],['clearly']
Usability,"ly link to getLinkPath(). But if you have your own 'complex' object and want it to be used as a parameter in createObject you can just implement your own conversion schema. So fundamentally it is like 'str' but with a specific semantic saying that the function returns a string ""that can be parsed as a Sofa parameter"". . This approach has several advantages:; - it does not requires to have a lot of ""hard-coded"" test into the createObject function. ; - it does not mess with the existing str() function and there is no risk to break existing scenes or applications and we haven't to worry about backward compatibility. ; - it makes things very explicit, because people that want to have their object used in createObject have to implement it instead of ""assuming"" that by default any object's str function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. ",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:2808,clear,clear,2808,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,2,['clear'],['clear']
Usability,modules/SofaTopologyMapping/src/SofaTopologyMapping/SimpleTesselatedTetraMechanicalMapping.inl line 163. Code:; typename Out::MatrixDeriv::ColConstIterator colIt = rowIt.begin();; typename Out::MatrixDeriv::ColConstIterator colItEnd = rowIt.end();. // Creates a constraints if the input constraint is not empty.; if (colIt != colItEnd); {; typename In::MatrixDeriv::RowIterator o = out.writeLine(rowIt.index());. for (typename Out::MatrixDeriv::ColConstIterator colIt = rowIt.begin(); colIt != colItEnd; ++colIt) // <- shadow,MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2106:52,Simpl,SimpleTesselatedTetraMechanicalMapping,52,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2106,1,['Simpl'],['SimpleTesselatedTetraMechanicalMapping']
Usability,msg_advice are emitted if the component it not muted. ; The default condition to be muted is when printLog is false. So it should behave as a msg_info... except it is more clear this is a suggestion.,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2969#issuecomment-1134916530:172,clear,clear,172,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2969#issuecomment-1134916530,2,['clear'],['clear']
Usability,"n/sofagym/envs), [SOFA homepage documentation](https://www.sofa-framework.org/?post_type=doc-page&s=), and [examples of BeamAdapter](https://github.com/sofa-framework/BeamAdapter/tree/master/examples). However, it's really hard to find the elements of simulator.; For example, I wanted to make an object by using a component `MeshSTLLoader` with the desired position and orientation. However, there was no explanation what attributes can be used for position and orientation. There was even no explanation which order Euler rotation is using. Finally, I figured out them by trial and error, not by documentation. What I want to know is as follow:; 1. What components does SOFA have?; For example, in the code below, there are components: `DefaultAnimationLoop`, `MeshGmshLoader`, `EulerImplicitSolver`, `CGLinearSolver`, `PointSetTopologyContainer`, `MechanicalObject`, `UniformMass`, and `ConstantForceField`.; 2. Which attributes are usable in each component?; For example, in the code below, the component `MechanicalObject` has three attributes: `template`, `name`, and `showObject`.; 3. What data should each attribute have?; For example, in the code below, the attribute `totalForce` of the component `ConstantForceField` has six floats: `""1 0 0 0 0 0""`. ```; <?xml version=""1.0"" ?>. <!-- Loader and topology -->; <Node name=""root"" dt=""0.01"" gravity=""0 0 0"">. <RequiredPlugin name=""Sofa.Component.Mass""/>; <RequiredPlugin name=""Sofa.Component.MechanicalLoad""/>; <RequiredPlugin name=""Sofa.Component.StateContainer""/>; <RequiredPlugin name=""Sofa.Component.LinearSolver.Iterative""/>; <RequiredPlugin name=""Sofa.Component.ODESolver.Backward""/>; <RequiredPlugin name=""Sofa.Component.IO.Mesh""/>; <RequiredPlugin name=""Sofa.Component.Topology.Container.Dynamic""/>; ; <DefaultAnimationLoop computeBoundingBox=""false""/>. <MeshGmshLoader name=""meshLoaderCoarse"" filename=""mesh/liver.msh"" />. <Node name=""Liver"">. <EulerImplicitSolver />; <CGLinearSolver iterations=""200"" tolerance=""1e-09"" threshold=""1e-0",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4647:1325,usab,usable,1325,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4647,1,['usab'],['usable']
Usability,"nce `disabledDate`; &nbsp;&nbsp;&nbsp; - was firstly deprecated on `deprecateDate`; and gives the toFixMsg instructions to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it ha",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:1787,usab,usable,1787,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249,2,['usab'],['usable']
Usability,"ng more the 'delegate' pattern and this is a proper usecase. . - About the use of final (on the public api) and private (on the delegated part): both are the way to go. . - About testing privates methods:; In tests, shouldn't we prefer implementing tests using the generic interface, so by calling BaseForceField::addKToMatrix() on instance of BeamFEMForceField instead of writing tests for the specific BeamFEMFOrceFIeld::doAddKToMatrix(). I see a lot of added values of writing tests using the public API while testing private method of a delegated patterns are not obvious to me but. ; That's said if BeamFEMForceFIeld::doAddKToMatrix() is private and final, we can probably make it ""testable"" by having a friend class Test<BeamFEMForceField>; . In the code base we are making the use of this pattern obvious by using a specific naming scheme (XXXX -> doXXX). ; The intention what to make visually clear what part was part of the public API and what part was using the ""delegate"" pattern. ; As in: ; ```cpp; BaseData::beginEditVoidPtr() ; Data<T>::doBeginEditVoidPtr() ; ```. I think it would be worth to stick to the scheme for the following reasons: ; - it de-ambiguate the purpose of each of the function. With addKToMatrix(blabla) and addKToMapping(otherblabla) nothing indicates, at first glance, that the two are in fact not equivalent, and ones has to refer to code comment or documentation (if any) to get that a very specific design pattern is involved. Having addKToMatrix(blablag) and doAddKToMapping(otherblablab) makes it in the contrary cristal clear).; - using the ""do"" prefix also have the advantage that to the pattern is possible when the method's attributes are the same (In the PR using the same names works because the de-ambiguation is implicitly done through the different BaseMatrix and MechanicalParams). ; - more consistant codebase . Of course, this means renaming the the addKToMatrix but in that matter, earlier is better and as the PR is breaking... this may be ok ;)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920:1616,clear,clear,1616,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4943#issuecomment-2340099920,2,['clear'],['clear']
Usability,ng-tidy/checks/readability-redundant-declaration.html) |; | [google-readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html) | [readability-redundant-function-ptr-dereference](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html) |; | [google-readability-todo](https://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html) | [readability-redundant-member-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html) |; | [google-runtime-int](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html) | [readability-redundant-smartptr-get](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html) |; | [google-runtime-member-string-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html) | [readability-redundant-string-cstr](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html) |; | [google-runtime-operator](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html) | [readability-redundant-string-init](https://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html) |; | [google-runtime-references](https://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html) | [readability-simplify-boolean-expr](https://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html) |; | | [readability-static-accessed-through-instance](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html) |; | | [readability-static-definition-in-anonymous-namespace](https://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html) |; | | [readability-uniqueptr-delete-release](https://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html) |,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651:29980,simpl,simplify-boolean-expr,29980,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/899#issuecomment-455504651,4,['simpl'],['simplify-boolean-expr']
Usability,nice job and thx for the clear PR explanation,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3412#issuecomment-1288098257:25,clear,clear,25,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3412#issuecomment-1288098257,2,['clear'],['clear']
Usability,"nk inherits DDGNode.; A DDGLink thus benefits from the whole dirty flag propagation thingy, and implements the update() function to clean its dirty flag, and update from its inputs.; Just like Datas, a DDGLink also possesses a counter, that is incremented when the link value changes. Just like BaseLinks, and SPtrs, to retrieve the object linked with a DDGLink, you need to call the get() method. The set() method will set the link. When a link is set within a DDGLink, the componentState of the linked object is set as input to that DDGLink. It's up to you to connect your DDGLink to some datas to connect your dependency graph. Contrary to the current link implementation in SOFA, these links, can be very easily manipulated as their base class (BaseDDGLink), or as DDGNodes even. DDGLinks are parsed in Base::parseField just like BaseLinks and BaseDatas, which makes them usable with the BaseObjectDescriptions. (they really mirror the behavior of all other field types.). A very simple test case is present in this PR to show you how it's used. You can reference your links with their pathnames, just like normal datas or links, by calling the getPathName() method. There's not bi-directionality implemented in this PR, (because I didn't have time in the end...) but it's not rocket science:; - all there is to do is add a vector of Base* in Base with helper methods to add, remove retrieve the list of link owners. Then in DDGLink::set(), call the add() method of your link to register`this`. (maybe in another PR...) . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1226:1160,simpl,simple,1160,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1226,1,['simpl'],['simple']
Usability,non je refuse un award pour un patch sur un design de qtwidget aussi compliqué! Alors qu'il y a tellement moyen de faire simple avec qt....,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540592456:121,simpl,simple,121,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1181#issuecomment-540592456,2,['simpl'],['simple']
Usability,"nt. nothing to do with constraint but anyway. ~~This work started from the fact that {Point/Line/Triangle}CollisionModel have a dependency on {Point/Line/Triangle}LocalMinDistanceFilter.~~. ~~These filters are only used by LMDNewProximityIntersection, which has naturally NO example scene and no doc 😛; After creating a scene (inspired from TriangleModel.scn), LMDNewProximityIntersection :~~; - ~~is not checking at all if there is a filter for each collision model (crashes like a charm)~~; - ~~point/line filters cannot work (infinite loop)~~; - ~~displays a lot of debug for fun~~. ~~After fixing (totally randomly), I have finally implemented what I wanted from the start, which was lettingLMDNewProximityIntersection managing the filters, and not the CollisionModel themselves. ; Bonus point, it checks if there is a filter for each collision model and is set to Invalid if not (should not crash then)~~. ~~I really wondered whether or not simply deleting this Intersection (and the associated LMDFilter) as the latest meaningful commits were clearly stating it was a work in progress. But it seems to work so thats why I kept it (and by pity as well).~~. ~~@ChristianDuriez whats your opinion on this component ?~~. EDIT: After a meeting with other sofa-dev guys, it has been decided to totally remove this component from the code base, as there was no example, no test and it was even not working before this PR.; As such, I removed:; - LMDNewProximityIntersection ; - Point/Line/TriangleLocalMinDistanceFilter; - and the newly created example.; I let the headers to inform the eventual unfortunate user that these headers must not been used anymore, and update the ComponentChange list. I have squashed the first commit, so IF ONE DAY, people wants to resurrect this code (which was working in the end), one can just come back to the commit https://github.com/sofa-framework/sofa/pull/2272/commits/0d9a1af8d14b1fa508400b05b83588a9d704e34c. ____________________________________________________",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2272:1004,simpl,simply,1004,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2272,2,"['clear', 'simpl']","['clearly', 'simply']"
Usability,"o ""stable"" or into ""deprecated"". So team looking for the ""future"" should put their time on making a good ""stable set""; - the approach also cares about users because until a component is removed from the deprecated set"" a Sofa version can still be compiled with the deprecated components. ; - it is reversible, and each time a component is put into the ""deprecated"" set users of the component are warned when loading their scene, and thus, they can complain to sofa-dev that we shouldn't have deprecated a specific component (or that they are going to invest themself to maintain it). ; - it is complementary to organizing component sharing functionalities into module or plugins or packages (group of plugins) which also help to reduce the compilation time of sofa. . @untereiner I think in the existing sofa we have used component grouping (with modules or plugins) to handle lifetime management & functionally grouping & level of quality, which are different concerns, with a single tool (the modules). ; As you are proposing I dream of a clear re-organization of the different modules/plugins but I this sound very ambitious to me and I remember of a meeting 2 years ago where this was already discussed...and nothing moved. My assumption is that this is because the step is so big that no-one can afford it. . This is why I'm trying to find less ambitious but more incremental approach. . Eg with the current approach if you have 1 hour time to offer you can: ; - locate the leaves of the #include graph (these are component that have low coupling and thus are easy to remove); - move the file to the deprecated set (if you think it should); - add the component into the scene-checker to warn users. ; - make a PR; - if the PR is accepted you can be proud of the result because you saved:; ```; 1 second (average compilation time per component); * 20 (number of sofa compilation per day); * 150 (number of sofa developpers); = 3000 seconds per day. ; ```; The return of investment is very high :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715:2134,clear,clear,2134,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/346#issuecomment-332339715,2,['clear'],['clear']
Usability,"oadSceneWithArguments(char const*, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allo; cator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, boost::intrusive_ptr<sofa::simulation::Node>*) S; ceneLoaderPY.cpp:128; #12 0x14a8a6287 in sofa::simulation::SceneLoaderPY::load(char const*) SceneLoaderPY.cpp:88; #13 0x13a76cdee in sofa::simulation::Simulation::load(char const*) Simulation.cpp:472; #14 0x10f83fc80 in main Main.cpp:388; #15 0x7fffa5650234 in start (libdyld.dylib:x86_64+0x5234). 0x00013d5e5ee3 is located 0 bytes to the right of global variable '<string literal>' defined in '/Users/krasin/src/github.com/sofa-framework/sofa/src/SofaKernel/framework/sofa/core/; objectmodel/Context.cpp:37:37' (0x13d5e5ee0) of size 3; '<string literal>' is ascii string 'dt'; SUMMARY: AddressSanitizer: global-buffer-overflow Base.cpp:128 in sofa::core::objectmodel::Base::initData0(sofa::core::objectmodel::BaseData*, sofa::core::objectmodel::BaseData::BaseInitData&, char const*, char const*, unsigned int); ```. The code to blame (as pointed in the first message) is Base.cpp:128:. ```; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; ```. I propose to fix it in a simple, though, not very elegant way:. ```; if (strlen(name) >= 3) {; uint32_t prefix = *(uint32_t*)name;. if (prefix == draw_prefix || prefix == show_prefix); res.group = ""Visualization"";; }; ```. Shall I create a PR like that?. I am currently tracking down some real issue with SOFA crashing on a VTU input, and having this buffer overflow on my way is a distraction. While it's not hard to fix it locally, this thread shows that I am not the first bitten by it, and suggests I won't be the last. It will save everyone time and effort, if we fix trivialities. Let me know, what would be the next steps here. I will be glad to follow your guidance.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566:3956,simpl,simple,3956,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/528#issuecomment-366422566,4,"['guid', 'simpl']","['guidance', 'simple']"
Usability,"ofa/build_release/install/bin/runSofa -l /home/sergei/Source_code/Sofa_development/SofaPython3/build_release/install/lib/libSofaPython3.so /home/sergei/Source_code/test_scene/test_scene.py ; [WARNING] [SofaEigen2Solver] SofaEigen2Solver is deprecated; Eigen classes are now located in Sofa.LinearAlgebra and SVDLinearSolver in SofaDenseSolver.You can remove SofaEigen2Solver from your scene, and if using SVDLinearSolver, please load SofaDenseSolver instead.; [INFO] [runSofa] PluginRepository paths = /home/sergei/Source_code/Sofa_development/Optimus/build_release:/home/sergei/Source_code/Sofa_development/SofaAuxiliaryComponents/build_release:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/lib; [INFO] [runSofa] DataRepository paths = /home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/examples:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/examples; [INFO] [runSofa] GuiDataRepository paths = /home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/gui/runSofa:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/gui/qt:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/gui/qt; [INFO] [SofaPython3] Initializing with python version 3.10.4 (main, Mar 23 2022, 23:05:40) [GCC 11.2.0]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.1m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/home/sergei/Source_code/Sofa_development/SofaPython3/build_release/install/lib/python3/site-packages' to sys.path; ---------------------------------------; Checking SOFA_ROOT and SOFAPYT",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918:1575,GuiD,GuiDataRepository,1575,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897#issuecomment-1111187918,1,['GuiD'],['GuiDataRepository']
Usability,"ogyHandler. This is why in issue #3370 the scene crash as soon as a vertex is removed because the TopologyContainer is sending the POINTREMOVED event to all topologyHandler registered. Including the deleted one from the mouse attached constraint. The pointer to the topologyHandler is not null but pointed to a deleted object. ### PR changes description; This PR and the PR #3271 (included in this on) are introducing a mechanism to better register and unregister a TopologyHandler from the TopologyContainer.; 1. register is done at creation of the TopologyHandler; 2. If TopologyHandler has well been added to the list manged by the Container, a internal bool m_isRegisterd is set to true.; 3. When the TopologyHandler is deleted (meaning its component owner is deleted). If m_isRegisterd == true, the TopologyHandler will unregister itself.; 4. When the TopologyContainer is deleted, it will go through each TopologyHandler it is managing and turn m_isRegisted to false. And then clear the list without deleting the Handler. The bool m_isRegisterd is used because to unregister itself, the handler need to access the topologyContainer which could have already been destroyed (depending on the graph order). But the TopologyHandler doesn't now the container is null. That's why if the TopologyContainer is deleted first it sets all its topologyHander as unregistered. ### Linked issues; Based on PR #3271 ; Fixes #3370 #3202. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not gen",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3369:2078,clear,clear,2078,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3369,1,['clear'],['clear']
Usability,"ok, I agree with your choice ! ; thomas . ----- Mail original -----. > De: ""Damien Marchal"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""Mention""; > <mention@noreply.github.com>; > Envoyé: Vendredi 3 Mars 2017 10:18:55; > Objet: Re: [sofa-framework/sofa] [all] Improve msg_api and logging of message; > (#190). > Hi @thomas-lemaire ,. > About the ""\n"" ... why would it breaks windows console printing ? Windows and; > linux does not have the same ""\n"" but a windows app emits the ""\n"" the; > windows system understand. > About using ""\n"" or better std::endl. My target was to supports messages; > written with a simple markdown syntax for which the ""\n"" is not an explicit; > line break, it is "" \n"" . So i replaced std::endl/sendl by "" \n""; > But I found that ugly and hard to read so I finally made 'msgendl' that; > contains the explicit markdown line break, but I forgot to remove the old; > manually placed "" \n"" I used all around. > Now I will have to re-fix the old "" \n"" all around (but this is nothing :)). > Do you think msgendl is ok ?; > Do you like the msg_endl. > The change on how the messages are printed in runSofa is visible here:. > The two panels are merged and the panel now shows in its title the number of; > messages.; > (in this PR I removed the column with ""suggest a better message). > In the Graph view there is now a small alert (green, yellow, red) on top of; > th icons showing the kind of message an object have. > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211:700,simpl,simple,700,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/190#issuecomment-284326211,2,['simpl'],['simple']
Usability,ok... I think we should do an afternoon of brainless coding sprint to update all those components with the good guidelines... ; so this one is ready to go I guess. ; LGTM !,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803903671:112,guid,guidelines,112,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1939#issuecomment-803903671,2,['guid'],['guidelines']
Usability,"on (people generally resort to `global` variables for this purpose).; - If `filename` is non-empty, the corresponding file is (re)loaded, causing all sorts of *interesting* side-effects. If you ever had to struggle with these, you know what I mean.; - If `filename` is empty, the control class has to lie in the `__main__` namespace; - It is quite verbose; - It just feels plain wrong *not* to create python objects directly when called from python. It does have a few advantages though:; - It does not require any `PythonScriptController`-specific code for object creation,; - It enables the creation of `PythonScriptController` instances from XML scenes . ## Current workaround; There is a workaround class `SofaPython.script.Controller` that somewhat fixes some of the issues by implementing `__new__` in a derived Python class, intercepting and returning the control instance and optional initialization arguments, but overall it feels more like a hack. ## This PR. This PR simply provides a clean binding for instance creation. You need to provide a node as a first argument, but otherwise Controllers now act as any other python object. The old behavior still works, should you need it. ```python; ; import Sofa ; class Script(Sofa.PythonScriptController):. def __init__(self, node, *args, **kwargs):; self.bacon = kwargs.pop('egg', 'spam'). def onBeginAnimationStep(self, dt):; print(self.bacon). ; def createScene(node):; script = Script(node, egg = 'spam'); . ```. Creating instances directly no longer calls `onLoaded` nor `createGraph`:. - nothing is actually loaded; - code in `createGraph` really belongs to `__init__` anyways. This behavior can be changed of course, maybe a warning can/should be emitted if the instance creation detects a derived implementation. Comments welcome :). The PR also removes heavy copypasta in some files, removes unneeded `extern ""C""` linkage and a few other cosmetic changes. # Changelog. - `PythonScriptController` and derived classes are now instantiabl",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/283:1762,simpl,simply,1762,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/283,1,['simpl'],['simply']
Usability,"onInstrument=rotationInstrument, speed=speed, ; controlledInstrument=controlledInstrument); InstrumentCombined.addObject('LinearSolverConstraintCorrection', wire_optimization='true', printLog=False); InstrumentCombined.addObject('FixedConstraint', indices=0, name='FixedConstraint'); InstrumentCombined.addObject('RestShapeSpringsForceField', points='@m_ircontroller.indexFirstNode', ; angularStiffness=1e8, stiffness=1e8); # Collision model; Collis = InstrumentCombined.addChild('Collis'); #Collis.activated = 'true'; Collis.addObject('EdgeSetTopologyContainer', name='collisEdgeSet'); Collis.addObject('EdgeSetTopologyModifier', name='colliseEdgeModifier'); Collis.addObject('MechanicalObject', name='CollisionDOFs'); Collis.addObject('MultiAdaptiveBeamMapping', controller='../m_ircontroller', ; useCurvAbs=True, printLog=False, name='collisMap'); Collis.addObject('LineCollisionModel', proximity=0.0, group=1); Collis.addObject('PointCollisionModel', proximity=0.0, group=1); # Visualization Guide; VisuGuide = InstrumentCombined.addChild('VisuGuide'); #VisuGuide.activated = 'true'; VisuGuide.addObject('MechanicalObject', name='Quads'); VisuGuide.addObject('QuadSetTopologyContainer', name='ContainerGuide'); VisuGuide.addObject('QuadSetTopologyModifier', name='Modifier'); VisuGuide.addObject('QuadSetGeometryAlgorithms', name='GeomAlgo', template='Vec3d'); VisuGuide.addObject('Edge2QuadTopologicalMapping', radius='1', listening=True, ; input='@../../topoLines_guide/meshLinesGuide', ; nbPointsOnEachCircle='10', flipNormals='true', output='@ContainerGuide'); VisuGuide.addObject('AdaptiveBeamMapping', interpolation='@../InterpolGuide', ; name='visuMapGuide', output='@Quads', isMechanical=False, ; input='@../DOFs', useCurvAbs=True, printLog=True); TriangleTopology = VisuGuide.addChild('TriangleTopology'); TriangleTopology.addObject('TriangleSetTopologyContainer', name='TriangleContainer'); TriangleTopology.addObject('TriangleSetTopologyModifier', name='Modifier'); TriangleTopology.add",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4636:16219,Guid,Guide,16219,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4636,1,['Guid'],['Guide']
Usability,onstraint; 4 	 54.43	 1 	 7.47	 8.01	 7.68	 0.11	 7.68	 12.32	....MBKSolve; 5 	 54.57	 1 	 7.31	 7.85	 7.52	 0.11	 7.52	 12.06	.....CG-Solve; 4 	 62.12	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.02	....UpdateVAndX. --- . Normal : 27.3678 FPS. 2 	 0.04	 1 	 37.97	 39.96	 38.38	 0.34	 38.38	 99.38	..solve; 3 	 0.04	 1 	 37.96	 39.95	 38.38	 0.34	 38.38	 99.37	...Mechanical; 4 	 0.06	 1 	 1.70	 2.24	 1.88	 0.12	 1.88	 4.88	....ComputeForce; 4 	 1.94	 1 	 0.94	 1.23	 1.04	 0.06	 1.04	 2.68	....ComputeRHTerm; 4 	 2.98	 1 	 22.20	 23.41	 22.47	 0.18	 22.47	 58.17	....MBKBuild; 5 	 2.98	 1 	 22.20	 23.40	 22.46	 0.18	 22.46	 58.16	.....CG-setSystemMBKMatrix; 6 	 2.98	 1 	 0.01	 0.03	 0.02	 0 	 0.02	 0.04	......getContributors; 6 	 3 	 1 	 0.01	 0.01	 0.01	 0 	 0.01	 0.02	......buildMappingGraph; 6 	 3.01	 1 	 0.25	 0.56	 0.30	 0.04	 0.30	 0.77	......InitializeSystem; 7 	 3.01	 1 	 0.13	 0.28	 0.16	 0.03	 0.16	 0.41	.......resizeSystem; 7 	 3.17	 1 	 0.09	 0.25	 0.12	 0.02	 0.12	 0.32	.......clearSystem; 7 	 3.29	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.04	.......initializeLocalMatrices; 6 	 3.31	 1 	 21.92	 22.80	 22.13	 0.15	 22.13	 57.31	......AssembleSystem; 7 	 3.31	 1 	 21.90	 22.77	 22.11	 0.14	 22.11	 57.25	.......buildMatrices; 8 	 3.31	 1 	 21.62	 22.44	 21.82	 0.14	 21.82	 56.50	........buildStiffness; 8 	 25.13	 1 	 0.27	 0.33	 0.28	 0.01	 0.29	 0.74	........buildMass; 8 	 25.42	 1 	 0 	 0 	 0 	 0 	 0 	 0 	........buildDamping; 8 	 25.42	 1 	 0 	 0 	 0 	 0 	 0 	 0 	........buildGeometricStiffness; 7 	 25.42	 1 	 0 	 0 	 0 	 0 	 0 	 0 	.......projectMappedMatrices; 7 	 25.42	 1 	 0.02	 0.02	 0.02	 0 	 0.02	 0.05	.......applyProjectiveConstraint; 4 	 25.45	 1 	 12.80	 13.57	 12.96	 0.12	 12.96	 33.55	....MBKSolve; 5 	 25.63	 1 	 12.61	 13.31	 12.75	 0.11	 12.75	 33 	.....CG-Solve; 4 	 38.41	 1 	 0.01	 0.02	 0.01	 0 	 0.01	 0.03	....UpdateVAndX; ```. Here is the scene. ; [4000-Cantilever-CG.scn.zip](https://github.com/sofa-framework/sofa/files/12594473/4000-Cantilever-CG.scn.zip),MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717065958:2579,clear,clearSystem,2579,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4138#issuecomment-1717065958,2,['clear'],['clearSystem']
Usability,"plate=""Rigid3d"" name=""catheterRestShape"" wireMaterials=""@StraightSection @SpireSection""/>; ; 		<EdgeSetTopologyContainer name='meshLinesCath' />; 		<EdgeSetTopologyModifier name='Modifier' />; 		<EdgeSetGeometryAlgorithms name='GeomAlgo' template='Rigid3d' />; 		<MechanicalObject template='Rigid3d' name='dofTopo1' />; 	</Node>; 	<Node name='topoLines_guide'>; <RodStraightSection name=""StraightSection"" youngModulus=""10000"" nbEdgesCollis=""25"" nbEdgesVisu=""98"" length=""490.0""/>; <RodStraightSection name=""StraightSection2"" youngModulus=""10000"" nbEdgesCollis=""25"" nbEdgesVisu=""98"" length=""490.0""/>; <RodSpireSection name=""SpireSection"" youngModulus=""10000"" nbEdgesCollis=""10"" nbEdgesVisu=""4"" length=""20.0"" spireDiameter=""25"" spireHeight=""0.0""/> ; 		; <WireRestShape template=""Rigid3d"" name=""GuideRestShape"" wireMaterials=""@StraightSection @StraightSection2 @SpireSection""/>; ; 		<EdgeSetTopologyContainer name='meshLinesGuide' />; 		<EdgeSetTopologyModifier name='Modifier' />; 		<EdgeSetGeometryAlgorithms name='GeomAlgo' template='Rigid3d' />; 		<MechanicalObject template='Rigid3d' name='dofTopo2' />; 	</Node>; 	<Node name='topoLines_coils'>; <RodStraightSection name=""StraightSection"" youngModulus=""168000"" nbEdgesCollis=""30"" nbEdgesVisu=""360"" length=""540.0""/>; <RodSpireSection name=""SpireSection"" youngModulus=""168000"" nbEdgesCollis=""30"" nbEdgesVisu=""40"" length=""60.0"" spireDiameter=""7"" spireHeight=""5.0""/> ; 		; <WireRestShape template=""Rigid3d"" name=""CoilRestShape"" wireMaterials=""@StraightSection @SpireSection""/>; ; <EdgeSetTopologyContainer name='meshLinesCoils' />; 		<EdgeSetTopologyModifier name='Modifier' />; 		<EdgeSetGeometryAlgorithms name='GeomAlgo' template='Rigid3d' />; 		<MechanicalObject template='Rigid3d' name='dofTopo3' />; 	</Node>; 	. 	<Node name='InstrumentCombined'>; 		<EulerImplicitSolver rayleighStiffness='0.2' rayleighMass='0.1' printLog='false' />; 		<BTDLinearSolver subpartSolve='0' verification='0' verbose='0'/>; 		<RegularGridTopology name='meshLinesCombine",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4833:4093,Guid,GuideRestShape,4093,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4833,1,['Guid'],['GuideRestShape']
Usability,"pology; [WARNING] [ObjectFactory] Class already registered: SphereGridTopology; [WARNING] [ObjectFactory] Class already registered: SphereQuadTopology; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaGeneralTopology/lib/libSofaGeneralTopology.so; [WARNING] [ObjectFactory] Class already registered: CenterPointTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: Edge2QuadTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: Hexa2QuadTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: Hexa2TetraTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: IdentityTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: Mesh2PointMechanicalMapping<Vec3d,Vec3d>; [WARNING] [ObjectFactory] Class already registered: Mesh2PointTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: Quad2TriangleTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: SimpleTesselatedHexaTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: SimpleTesselatedTetraMechanicalMapping<Vec3d,Vec3d>; [WARNING] [ObjectFactory] Class already registered: SimpleTesselatedTetraTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: SubsetTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: Tetra2TriangleTopologicalMapping; [WARNING] [ObjectFactory] Class already registered: Triangle2EdgeTopologicalMapping; [INFO] [PluginManager] Loaded plugin: /home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins/SofaTopologyMapping/lib/libSofaTopologyMapping.so; [WARNING] [ObjectFactory] Class already registered: MouseInteractor<Vec2d>; [WARNING] [ObjectFactory] Class already registered: MouseInteractor<Vec3d>; [WARNING] [ObjectFactory] Class already registered: MouseInteractor<Rigid3d>; [WARNING] [ObjectFactory] Class already registered: MechanicalStateController<Ri",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:26969,Simpl,SimpleTesselatedHexaTopologicalMapping,26969,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,3,['Simpl'],"['SimpleTesselatedHexaTopologicalMapping', 'SimpleTesselatedTetraMechanicalMapping', 'SimpleTesselatedTetraTopologicalMapping']"
Usability,"ports full Condition; Syntax. Run ""cmake --help-policy CMP0127"" for policy details. Use the; cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:45 (cmake_dependent_option); This warning is for project developers. Use -Wno-dev to suppress it. -- Precompiled headers: disabled (SOFA_BUILD_WITH_PCH_ENABLED is OFF or CMake < 3.16).; Install prefix: J:/GitHub/sofa/build/install; CMake Deprecation Warning at SofaKernel/modules/Sofa.Config/CMakeLists.txt:74 (message):; Deprecated components are activated (SOFA_WITH_DEPRECATED_COMPONENTS; variable is ON). CMake Error at extlibs/CMakeLists.txt:28 (set_target_properties):; set_target_properties Can not find target to add properties to: tinyxml. CMake Error at extlibs/CMakeLists.txt:29 (set_target_properties):; set_target_properties Can not find target to add properties to: tinyxml. Using legacy headers is enabled.; Headers from v20.12 are usable, but it is advised to change your code to use the new headers introduced in v21.06.; Found Boost: E:/GitHub/vcpkg/installed/x64-windows/include (found version ""1.77.0"") ; Found Boost: E:/GitHub/vcpkg/installed/x64-windows/include (found version ""1.77.0"") found components: filesystem thread chrono atomic ; Adding module Sofa.GL; Adding plugin SofaSimpleFem; Adding plugin SofaRigid; Adding plugin SofaDeformable; Adding plugin SofaObjectInteraction; Adding plugin SofaMeshCollision; Adding plugin SofaEngine; Adding plugin SofaExplicitOdeSolver; Adding plugin SofaImplicitOdeSolver; Adding plugin SofaLoader; Adding plugin SofaGeneralVisual; Adding plugin SofaGraphComponent; Adding plugin SofaGeneralMeshCollision; Adding plugin SofaBoundaryCondition; Adding plugin SofaGeneralAnimationLoop; Adding plugin SofaGeneralDeformable; Adding plugin SofaGeneralEngine; Adding plugin SofaGeneralExplicitOdeSolver; Adding plugin SofaGeneralImplicitOdeSolver; Adding plugin SofaGeneralLinearSolver; Adding plugin SofaGeneralRigid; Adding plu",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2814:1277,usab,usable,1277,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2814,1,['usab'],['usable']
Usability,"r function will produce a string parsable as a Sofa parameter. ; - it is extensible as it allows users to provide their own conversion for their object. ; - it returns a clear warning helping user to locate problems and teach them how to fix their scenes. . As you said Maxime, ""In python semantic of str is to provide a concise representation of an object as a string, which is exactly what BaseObject.getLinkPath does. "" . A ""concise representation"" is a very flexible/weak semantic with a lot of different meaning that will change depending on the context.; For matthieu (and the Anatoscope fork), a concise representation could be ""5.0""; For you it seems to be ""@/myObject.param"" ; For me it should be ""@/myObject.param=5.0"" ; For others it could be ""Sofa.Data: @/myObject.param=5.0"" . These options are more or less adequate depending on the context...but they are all fully valid description because they match the clearly defined and accepted semantic. This is why I think solution 2 is clearly not the way to go because it change this well defined semantic for something narrower in which the str() function should return something that can be parsed as an argument in the createObject function. Doing so is like forcing anyone passing an object to createObject to modify their str() function to make it work with createObject. . I personally think that as the python specification for str() is very weak it is only a way to generate string to be read by human (that can cope with the inherent flexibility of its specification) but I prefer avoiding it to generate string that have to be processed by a program. When I have to generate string that are ""parsable"" I tend to use specific function with much tighter specification. . @maxime-tournier You are totally right about the recursive aspect...I didn't though about that. My initial worrying was it was transformating a complex structure into a flat one and I wasn't sure it was something that should be done in every cases for any types.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575:3632,clear,clearly,3632,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/286#issuecomment-308062575,2,['clear'],['clearly']
Usability,"r sofa]$ /home/sergei/Source_code/Sofa_development/sofa/build_release/bin/runSofa -l /home/sergei/Source_code/Sofa_development/SofaPython3/build_release/lib/libSofaPython3.so /home/sergei/Optimus_test/test_scene.py ; [ERROR] [FileSystem::isDirectory()] /home/sergei/Source_code/Sofa_development/sofa/build_release/share/sofa/gui/runSofa: No such file or directory; [WARNING] [SofaEigen2Solver] SofaEigen2Solver is deprecated; Eigen classes are now located in Sofa.LinearAlgebra and SVDLinearSolver in SofaDenseSolver.You can remove SofaEigen2Solver from your scene, and if using SVDLinearSolver, please load SofaDenseSolver instead.; [INFO] [runSofa] PluginRepository paths = /home/sergei/Source_code/Sofa_development/Optimus/build_release:/home/sergei/Source_code/Sofa_development/SofaAuxiliaryComponents/build_release:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/plugins:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/lib; [INFO] [runSofa] DataRepository paths = /home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa:/home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/examples; [INFO] [runSofa] GuiDataRepository paths = /home/sergei/Source_code/Sofa_development/sofa/build_release/install/share/sofa/gui/qt; [INFO] [SofaPython3] Initializing with python version 3.10.4 (main, Mar 23 2022, 23:05:40) [GCC 11.2.0]; [INFO] [SofaPython3] Registering a scene loader for [.py, .py3, .pyscn, .py3scn] files.; [INFO] [SofaPython3] Shared library name is 'libpython3.1m.so'; [INFO] [SofaPython3] Intializing python; [INFO] [SofaPython3] Added '/home/sergei/Source_code/Sofa_development/SofaPython3/build_release/lib/python3/site-packages' to sys.path; ---------------------------------------; Checking SOFA_ROOT and SOFAPYTHON3_ROOT; Using environment variable SOFA_ROOT: /home/sergei/Source_code/Sofa_development/sofa/build_release/install; ---------------------------------------; [INFO] [PluginManager]",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:8303,GuiD,GuiDataRepository,8303,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,1,['GuiD'],['GuiDataRepository']
Usability,"ranslationTex; Vec2i | localRange; Vec3d | direction; Vec3f | scale3d; Vec3i | dataResolution; Vec4f | showColor; vector&lt;double> | compliance; vector&lt;Edge> | edges; vector&lt;fixed_array&lt;string,2>> | suffixMap; vector&lt;fixed_array&lt;unsigned int,4>> | highOrderEdgePositions; vector&lt;fixed_array&lt;unsigned int,5>> | highOrderTrianglePositions; vector&lt;fixed_array&lt;unsigned int,6>> | highOrderTetrahedronPositions; vector&lt;fixed_array&lt;unsigned int,8>> | highOrderHexahedronPositions; vector&lt;float> | projectionMatrix; vector&lt;Hexahedron> | hexahedra; vector&lt;int> | indices; vector&lt;Mat&lt;24,24,double>> | stiffnessMatrices; vector&lt;Pentahedron> | pentahedra; vector&lt;Pyramid> | pyramids; vector&lt;Quad> | quads; vector&lt;string> | pluginName; vector&lt;Tetrahedron> | tetrahedra; vector&lt;Triangle> | triangles; vector&lt;unknown> | groups; vector&lt;Vec2d> | uv; vector&lt;Vec3d> | reset_velocity; vector&lt;vector&lt;int>> | facets; vector&lt;vector&lt;unsigned int>> | polygons. Interesting to see that there are some ""unknown"" typenames in Sofa... Concerning the idea of reducing the syntax to its minimum when creating 1-instruction engines, I think that in terms of user experience, it would be ideal if an engine could be created by doing something like this:; ```; node.createObject('Component1', name=""1""); e = node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out""); e.addNewOutput('myIntOutput'); e.update = lambda e: e.myIntOutput = e.myIntVector[0]; node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. Or even better but I don't see any technical approach for it:; ```; node.createObject('Component1', name=""1""); node.createEngine('PSDEMagic', name='2', myIntVector=""@1.vector_out"", update=lambda magic:(magic.myIntOutput = magic.myIntVector[0]) ); node.createObject('AnotherComponent', name=""3"", myInt=""@2.myIntOutput); ```. **EDIT: markdown didn't like the angle brackets.. now it shows all the types!**",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613:2000,user experience,user experience,2000,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/629#issuecomment-380402613,2,['user experience'],['user experience']
Usability,rebase (to clear the previous failing scenes) +; ignore scene from the Geomatic plugin,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2115#issuecomment-853025370:11,clear,clear,11,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2115#issuecomment-853025370,2,['clear'],['clear']
Usability,"related to the ""lambda"" state vectors. The GenericConstraintSolver contains an attribute GenericConstraintSolver::m_lambdaId which is roughly a map maintaining the connection between the multiple MechanicalObjects of the scene and the ID of their respective state vectors storing constraint correction forces. When GenericConstraintSolver::prepareStates method is called, GenericConstraintSolver::m_lambdaId data can eventually change. For instance, it happens in the case new MechanicalObjects have been dynamically added into the scene graph. However, the constraint parameters (cParams) also contains a map (ConstraintParams::m_lambda attribute) having the same purpose. The latter is initialized as a copy of GenericConstraintSolver::m_lambdaId at the beginning of the FreeMotionAnimationLoop::step method. Consequently, the two maps eventually differs from each other at the end of GenericConstraintSolver::prepareStates method call!. To simply proove it, I used the following chunk of code before and after GenericConstraintSolver::prepareStates execution. ; ```; std::cout << ""lambda's idMap of constraint params: "" << std::endl;; for(auto pair : cParams->lambda().getIdMap()) {; std::cout << pair.first << ""->"" << pair.second << std::endl;; }; std::cout << ""lambda's idMap of constraint solver: "" << std::endl;; for(auto pair : getLambda().getIdMap()) {; std::cout << pair.first << ""->"" << pair.second << std::endl;; }; ```; As you can notice, it browses the map to display its entries. The keys are pointers to BaseState instances and the values correspond to vector state IDs. Console output BEFORE GenericConstraintSolver::prepareStates execution:; ```; lambda's idMap of constraint params: ; 0xf6297e0->9(V_DERIV); 0xf70af50->9(V_DERIV); 0xf810910->9(V_DERIV); lambda's idMap of constraint solver: ; 0xf6297e0->9(V_DERIV); 0xf70af50->9(V_DERIV); 0xf810910->9(V_DERIV); ```. Console output AFTER GenericConstraintSolver::prepareStates execution:; ```; lambda's idMap of constraint params: ;",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/1270:959,simpl,simply,959,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/1270,1,['simpl'],['simply']
Usability,"response='FrictionContactConstraint'). name='guide'; straightLength=980.0; length=1000.0; numEdges=200; youngModulus=20000; spireDiameter=25; numEdgesCollis=[50,10]; spireHeight=0.0; densityOfBeams=[30,5]; youngModulusExtremity=10000; topoLines_guide = root.addChild('topoLines_'+name); topoLines_guide.addObject('WireRestShape', name=name+'RestShape', ; straightLength=straightLength, length=length, ; numEdges=numEdges, youngModulus=youngModulus, ; spireDiameter=spireDiameter, numEdgesCollis=numEdgesCollis, ; printLog=True, template='Rigid3d', spireHeight=spireHeight, ; densityOfBeams=densityOfBeams, youngModulusExtremity=youngModulusExtremity); topoLines_guide.addObject('MechanicalObject', name='dofTopo2', template='Rigid3d'); topoLines_guide.addObject('EdgeSetTopologyContainer', name='meshLinesGuide'); topoLines_guide.addObject('EdgeSetTopologyModifier', name='Modifier'); topoLines_guide.addObject('EdgeSetGeometryAlgorithms', name='GeomAlgo', template='Rigid3d'). xtip=[1, 0, 0]; instruments=['guide']; step=0.5; listening=True; startingPos=[0, 0, 0, 1, 0, 0, 0]; rotationInstrument=[0, 0, 0]; speed=0; controlledInstrument=0; InstrumentCombined = root.addChild('InstrumentCombined'); InstrumentCombined.addObject('EulerImplicitSolver', rayleighStiffness=0.2, ; printLog=False, rayleighMass=0.1); InstrumentCombined.addObject('BTDLinearSolver', verification=False, ; subpartSolve=False, verbose=False); InstrumentCombined.addObject('RegularGridTopology', name='meshLinesCombined', ; zmax=1, zmin=1, nx=60, ny=1, nz=1, ; xmax=1.0, xmin=0.0, ymin=0, ymax=0); InstrumentCombined.addObject('MechanicalObject', showIndices=False, name='DOFs', template='Rigid3d', ry=-90); for i in range(len(instruments)):; InstrumentCombined.addObject('WireBeamInterpolation', WireRestShape='@../topoLines_'+instruments[i]+'/'+instruments[i]+'RestShape', ; radius=0.15, printLog=False, name='Interpol'+instruments[i]); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass', massDensity=0.00000155, ; n",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4636:13874,guid,guide,13874,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4636,1,['guid'],['guide']
Usability,"rt them in msg_* ; * adds 'override' keyword when needed (more info => http://en.cppreference.com/w/cpp/language/override); * adds tests on PythonScriptController; * adds tests on SofaModule; * adds a exception handler in python so that the un-catched exceptions are sended as msg_error instead of being printed on the console. ; * cosmetic changes like replacing 'using namespace a;' with the precise 'using a:TheClass', removing in-consistant line spacing. ; * replace ""extern C"" with static. - [Flexible/python] Fix the examples & the tests to take into account the changes in SofaPython; - [Compliant/python] Fix the examples & the tests to take into account the changes in SofaPython. To simplify the submitter's life (and don't waste their time) some extras (read not really relevant) changes are also added to the PR:; - remove a virtual in-heritance on BaseController and plugin/optitracknet. ; - adds a << operator to Message.h to handle file:line information (now in PR: #314 ) ; - made some changes in STLExporter to stay consistant with Sofa guidelines. . There is still some work todo (if you have free time to offer):; Eg: ; in Compliant there is still patterns like:; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: wrong arguments"" );; return NULL;; ```; The SP_MESSAGE_ERROR is probably not needed as it duplicate the one provided by the python exception. . While in ; ```cpp; SP_MESSAGE_ERROR( ""_Compliant_getAssembledImplicitMatrix: first argument is not a BaseNode"" );; PyErr_BadArgument();; return NULL;; ```; PyExc_SetString() should replace the message error & the bad argument. . More generally there is still a lot of SP_MESSAGE_*() instead of msg_* and there is a lot of method that haven't their docstring. ; ; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate ne",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/304:3102,guid,guidelines,3102,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/304,1,['guid'],['guidelines']
Usability,"rumentCombined'); InstrumentCombined.addObject('EulerImplicitSolver',rayleighStiffness=0.2,rayleighMass=0.1,printLog='false'); InstrumentCombined.addObject('BTDLinearSolver',subpartSolve='0',verification='0',verbose='0'); InstrumentCombined.addObject('RegularGridTopology',name='meshLinesCombined',nx=60, ny=1, nz=1,xmin=0.0, xmax=1.0,ymin=0, ymax=0,zmin=1, zmax=1); InstrumentCombined.addObject('MechanicalObject',template='Rigid3d',name='DOFs',showIndices='0',ry=-90); InstrumentCombined.addObject('WireBeamInterpolation',name='InterpolCatheter',WireRestShape='@../topoLines_cath/catheterRestShape',radius=1,printLog='0'); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass',name='CatheterForceField',interpolation='@InterpolCatheter',massDensity=0.00000155); InstrumentCombined.addObject('WireBeamInterpolation', name='InterpolGuide', WireRestShape='@../topoLines_guide/GuideRestShape', radius=0.9, printLog='0'); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass',name='GuideForceField',interpolation='@InterpolGuide',massDensity=0.00000155); InstrumentCombined.addObject('WireBeamInterpolation', name='InterpolCoils', WireRestShape='@../topoLines_coils/CoilRestShape', radius=0.1, printLog='0'); InstrumentCombined.addObject('AdaptiveBeamForceFieldAndMass', name='CoilsForceField', interpolation='@InterpolCoils', massDensity=0.000021); InstrumentCombined.addObject('InterventionalRadiologyController',name='m_ircontroller',template='Rigid3d',printLog='0',instruments='InterpolCatheter InterpolGuide InterpolCoils',startingPos=[0, 0 ,0 ,0 ,-0.7071068, 0, 0.7071068],xtip=[1 ,0 ,0] ,rotationInstrument=[0, 0, 0 ],controlledInstrument=0,step=3,speed=2 ); InstrumentCombined.addObject('LinearSolverConstraintCorrection',printLog='false',wire_optimization='true'); InstrumentCombined.addObject('FixedConstraint',name='FixedConstraint',indices='0'); InstrumentCombined.addObject('RestShapeSpringsForceField',points='@m_ircontroller.indexFirstNode',stiffness=1e8,angularStiffness=1e",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243:4304,Guid,GuideForceField,4304,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243,1,['Guid'],['GuideForceField']
Usability,"s always a trade-off between abstraction and usability and the overhead of modularization. But yes, there is always an interest in being able to build prefab from other prefab to make complex systems. . - definition of current prefabs, e.g. ElasticObject using a UniformMass?; Prefab just means you have an ""all-in-one"" object. There is no more constraint except from that. So it the choice of the one that make a prefab to decide prefabricating ""what"". That's said it is highly desirable to have set of prefabs that shares common structures and idioms so they are interoperable in the same scene. . Additional point:; - the prefabs implementation in SofaPython3 is only partially working and some fix are required; - there is a far too much limited support for prefab in our user interface, if we are going for generalize their use then additional support should be added.(eg: right-click navigating itno prefab should be implemented, dedicated icons in the scene graph, docbrowser linking the the prefab documentation => so updating the prefab documentation now we managed to fix the sofapython3 one) . - there is also non trivial issues related to design practices, especially on re-usability through inheritance, composition or prototypes. . - there is an issue smoothing transition from a scene to a prefab (visible in the two way by which you can define a prefab, with the python decorator or by in-heriting from Sofa.Prefab). - there is also issues related to the fact that Sofa is relying on the scenegraph to do the simulation, this has the consequence that currently some useful scene-patterns are not easy to make through prefab. I think the work from @alxbilger on refactoring the animation loop and solving relax these constraints... I'm not sure it is at the point there is no more contraint so we can freely move on that. . Probably there is many more on that... but I can for sure make a clear summary of all that are missing before having prefab first class citizen in SofaPython3 :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279:2273,usab,usability,2273,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/4206#issuecomment-1740442279,4,"['clear', 'usab']","['clear', 'usability']"
Usability,"s should be removed. . The current WIP is in the following branch:; https://github.com/sofa-framework/sofa/compare/master...SofaDefrost:splitSofaVolumetricDataSquashed. The result is to have:; ```; plugins/SofaDistanceGrid/; - components/collision/BarycentricPenalty, DistanceGridCollision, FFDDistanceGrid, RigidDistanceGird; - components/forcefield/DistanceGridForceFIeld. plugins/SofaImplicitField/ ; - components/geometry/ScalarField (base class); - components/geometry/DiscreteGridField (inherit from ScalarField); - components/geometry/SphericalField (inherit from ScalarField); - components/geometry/otherToComeFromDefrost; - components/mapping/ImplictSurfaceMapping; - deprecated/ImplicitSurfaceContainer (override) components/geometry/DiscreteGridField ; - deprecated/InterpolatedImplicitSurface (override) components/geometry/DiscreteGridField; - deprecated/SphereSurface (override) component/geometry/SphericalField; ```. ...of course we need to add test to all these classes & refactor the MHD loading parts....etc... . Please have a quick look at it and provide feedback on the general way to manage this kind of changes (eg do we really need to keep the SofaVolumetricData transitional plugin or do we allow a more breaking approach and directly remove the SofaVolumetricData with a ChangeLog entry ?). I would be very happy to have opinion & help to be sure to take the right direction resulting PR that match everyone's needs...@jeremieAllard, @fjourdes, @hugtalbot , @guparan , @thomas-lemaire , @matthieu-nesme, @maxime-tournier, @bruno-marques, @bcarrez, @EulalieCoevoet . DM. EDIT: If you are curious about the feature we are adding... it is about having a tetrahedralMesh with CGAL straight out of an implicit function provided in python (and cython if you care about performances)...more on that later. . EDIT2: I changed the url of the branch; ______________________________________________________. Suggested labels: <!--- see https://github.com/sofa-framework/sofa/labels -->",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/388:2241,feedback,feedback,2241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/388,1,['feedback'],['feedback']
Usability,"s[0].second.push_back(std::make_pair(vel.id(),1.0)); // <-- What does a pair represent? What does this list represent?; ops[0].second.push_back(std::make_pair(dx.id(),dt));; // pos += vel * dt; ops[1].first = pos2;; ops[1].second.push_back(std::make_pair(pos.id(),1.0));; ops[1].second.push_back(std::make_pair(vel2.id(),dt));; ```. to . ```C++; VMultiOp ops(2);. // vel += dx * dt; ops[0] = VMultiOpEntry{ vel2,; ScaledConstMultiVecId{vel.id(), 1._sreal} + ScaledConstMultiVecId{dx.id(), dt}};; // ok, now we know that the scalar and the MultiVecId are multiplied together.; // there is also an operator +, suggesting that the whole operation is a linear combination. // pos += vel * dt; ops[1] = VMultiOpEntry{ pos2,; ScaledConstMultiVecId{pos.id(), 1._sreal} + ScaledConstMultiVecId{vel2.id(), dt}};; ```. Note that in C++20, we can write something like:; ```C++; ops[1] = VMultiOpEntry{ .outputId = pos2,; ScaledConstMultiVecId{pos.id(), 1._sreal} + ScaledConstMultiVecId{vel2.id(), dt}};; ```; which is IMO clearer. **NOT IMPLEMENTED**:; I wanted to go even further (but there are problems of type conversion, so it's not yet ready):. ```C++; VMultiOp ops(2);. // vel += dx * dt; ops[0] = VMultiOpEntry{ vel2, vel.id() + dx.id() * dt};. // pos += vel * dt; ops[1] = VMultiOpEntry{ pos2, pos.id() + vel2.id() * dt};; ```. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (o",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4333:1199,clear,clearer,1199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4333,1,['clear'],['clearer']
Usability,"self.name = name; self.addNewInput('positions', datatype=""vector<Vec3d>"", value=positions, help=""test""); self.addNewOutput('average', datatype=""Vec3d"", help=""average""); ; def parse(self, arg):; pass; ; def init(self):; 	pass; ; def update(self):; value = [0, 0, 0]; for pos in self.positions:; value[0] += pos[0]; value[1] += pos[1]; value[2] += pos[2]; value[0] /= len(self.positions); value[1] /= len(self.positions); value[2] /= len(self.positions); self.cleanDirty(); self.average = [[-value[0],-value[1],-value[2]]]; pass. def createScene(rootNode):; loader = rootNode.createObject(""MeshVTKLoader"", name=""loader"", filename='mesh/liver.vtk'); psde = PyEng(rootNode, name=""PSDE"", positions=loader.findData('position').getLinkPath()); rootNode.createObject('TransformEngine', name='TE', input_position=""@loader.position"", translation=psde.findData('average').getLinkPath()); rootNode.createObject('OglModel', name=""visu"", position=""@TE.output_position"", triangles=""@loader.triangles"",; color=""1 0 0 1""); ```. With this syntax, I can create my engines definition once, and create as many as I want, on the fly, with any parameter I want for my input fields. It's actually even better, because:; - I don't have to create inputs with the fields I pass to the constructor. It could be simple data (addNewData vs addNewInput); - Construction of datafields is more explicit, thus less error-prone; - No need to go search for a decorator function somewhere in SofaPython, or to declare a dictionary of default arguments, everything is performed in the constructor. So, yeah, this PR is now virtually useless.; There's one thing I don't like with this syntax though, it's that the creation of the object is performed at the same time as it is assigned to the scene graph, which, in my opinion is not always desirable.; Something closer to this would be neat:; ```py; rootNode.addObject(PyEng(name='PSDE', positions=loader.findData('position').getLinkPath()); ```. I'll work on that in the following days :)",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442:1522,simpl,simple,1522,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/743#issuecomment-417366442,2,['simpl'],['simple']
Usability,"sorry, it looked simple and fine for me... . ----- Mail original -----. > De: ""Guillaume Paran"" <notifications@github.com>; > À: ""sofa-framework/sofa"" <sofa@noreply.github.com>; > Cc: ""thomas-lemaire"" <thomas.lemaire@inria.fr>, ""State change""; > <state_change@noreply.github.com>; > Envoyé: Jeudi 26 Janvier 2017 10:21:34; > Objet: Re: [sofa-framework/sofa] [CI] Replace 'make' by 'ninja' when; > available. (#141). > This one was merged too fast.; > I wanted to change a bit the code :(. > —; > You are receiving this because you modified the open/close state.; > Reply to this email directly, view it on GitHub , or mute the thread .",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/141#issuecomment-275343846:17,simpl,simple,17,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/141#issuecomment-275343846,2,['simpl'],['simple']
Usability,"sting scene will just work as they should. Now what happens if a scene with a given level is loaded in a sofa that have a different level (eg: '17.12'). In this case dedicated messages are printed to warn user things may go wrong. . Here is an example of what happen when loading a scene at level '17.06' on runSofa at level '17.12' (our master branch) with a BoxStiffSpringForceField (that could behave differently because of PR #290); ```; [INFO] [SceneChecker] The 'APIVersion' directive is missing in the current scene. ; Switching to the APIVersion level '17.06' ; [INFO] [SceneChecker] Validating a scene: ; - APIVersion checking: 1 ; - RequiredPlugin checking: 1; [WARNING] [BoxStiffSpringForceField(Spring)] BoxStiffSpringForceField have changed since 17.06. To use the old behavior you need to set parameter 'forceOldBehavior=true'; ```. The nice thing with the approach is that we can write custom condition to rise those messages. Here is a simple example (to handle PR315 & an imaginary deprecation of a component):; ```cpp; addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""RestShapeSpringsForceField"" && o->findData(""external_rest_shape"")->isSet()); msg_warning(o) << ""RestShapeSpringsForceField have changed since 17.06. The parameter 'external_rest_shape' is now a Link. To fix your scene you need to add and '@' in front of the provided path. See PR#315"" ;; }) ;. addHookInChangeSet(""17.06"", [](Base* o){; if(o->getClassName() == ""TheComponentWeWantToRemove"" ); msg_warning(o) << ""TheComponentWewantToRemove is deprecated since sofa 17.06. It have been replaced by TheSuperComponent. #See PR318"" ;; }) ;; }; ```. Everything is in SceneChecker.cpp/SceneChecker.h and APIVersion.* ...the other files in the changes are ; in fact the content of PR #314; ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings.",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/322:1526,simpl,simple,1526,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/322,2,['simpl'],['simple']
Usability,"t of component that 'forgot' to set/unset the persistent values.; - it is very hard to identify what is relevant to save, IMO because what is relevant to save is a matter of context of use, a Data 'useless' for one may be very useful for someone else. . This is why I choose to do things in the reversed way and let the client code to select what to save (so that you may eventually implement dedicated widgets to let the user select what to save). . I see at least to different context of use and thus saving strategies. . For my context of use it is more important to save scenes that are as close as possible as the one written by the user. This is why I made the XML loader and the GUI have the responsability to make persistent:; - the value given explicitely in the scene file; - the value specified explicitely in the GUI via the widget or the manipulators; Despite being very simple this work very well and without any risk that some authors breaks the saving because he forgot/decide not to setPersistent(false) in his component (and this happened quite a lot in the past). For your context of use, for which saving a simulated scene is important I think a very simple solution would be to write a visitor to switch all the Data values to persistent. And I would suggest to put this feature to a different entry in the menu (what about ""Export"" or ""Dump"" ?) so that in the same application we can either save or dump the scene with very well defined semantics ? . Now about the fact that some Data editted in the UI can be incompatible with another Data. I will let that for another day because to me this is a much more general UI problem. . Finally to improve a bit the general readability in any context of use we could, when writing big chunk of numbers (like vector.size() > 20) save them in separated files leading to something like: ; <MechanicalObject name position=""@file://./name.position468768764568.txt"" />. I will come back later with commit that take your remarks into account.",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495:2413,simpl,simple,2413,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/116#issuecomment-272314495,2,['simpl'],['simple']
Usability,"t3x3>>. Pr. Francois Faure; https://team.inria.fr/imagine/francois-faure/. > Le 6 avr. 2017 à 19:30, Maxime Tournier <notifications@github.com> a écrit :; > ; > ; > The biggest issue with sparse matrices is that there is no silver bullet representation that covers everyone's needs: some people like it compressed (row/column), others like to have small dense chunks instead of single floating points, and so on.; > ; > In particular, I see two major orthogonal uses of sparse matrices:; > ; > getting matrix data out of components; > working with sparse matrices (linear algebra, factorization, assembly); > It is not at all obvious that the two operations should use the same representation, and in fact I would argue against it. For instance in the Compliant plugin, we use Eigen sparse matrices for everything, and end up doing a lot of work in order to shift matrix blocks around which is tedious and costly.; > ; > I've been toying around with alternate designs, and the simplest I found so far is to use a plain old vector of triplets (row, column, value) for fetching matrix data. More precisely, mappings/forcefields directly push_back matrix data into a std::vector<Eigen::Triplet<SReal> > through a std::back_insert_iterator.; > ; > With this design the caller is then responsible for structuring the sparse data further (sorting/converting to CSR, shifting rows/columns, handing over to another library, etc) Of course this approach is tailored for our needs and might not fit others, and performance-wise it needs thorough benchmarking anyways, but I think that using separate data structures for getting the data and working with the data instead of a single structure is the way to go.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/sofa-framework/sofa/issues/26#issuecomment-292248716>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AHUGIb2x8bFdYI3KTJsLE_7Qy-d2FFJiks5rtSFPg",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399:1859,simpl,simplest,1859,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/26#issuecomment-292785399,2,['simpl'],['simplest']
Usability,"t<is_fixed_array> to make sure...; - Sometimes, T is a scalar value for instance, in which case there isn't any total_size to query. It's the case in Vec.h for single scalar value vector operations (multScalar, divScalar, etc.), where the size is used in static_asserts to guarantee we are manipulating a single scalar quantity. I used SFINAE as substitution, but this makes code hard to read for most non-robot people. - in BaseData, it is used in updateFromParentValue(), along with FixedSize(), Integer / Scalar / Text / get/setTextValue, get/setScalarValue, get/setIntegerValue to resize and copy data from the parent value. BaseData, of course, can be templated on any kind of data (Scalars, text, Containers, complex structures...); ; - CopyOnWrite: Used in Data.h to generate the getters / setters for Data fields (beginEdit, operator= etc.). - ZeroConstructor, SimpleCopy: In SOFA's core, used exclusively in vector_device.h. (which is used by SofaCUDA for GPGPU stuff. - SimpleLayout, FixedSize, Container, Scalar...: Unused in SOFA (only used in SofaPython, SofaPython3, SofaQtQuick... for bindings. - get/setValue: Probably the trickiest one, these methods are used to compute stuff on templates without any knowledge of the inner layout of the template type. I'm not 100% sure that I found all instances of those calls in Sofa's core, but it seems like it is *exclusively* used with TDataType::Coord and TDataType::Deriv (which are either VecX or RigidCoord/RigidDeriv). In conclusion the usage of DataTypeInfo in BaseData justifies its existence to me. Maybe some features could be isolated in a separate API, but that would only mean maintaining 2 APIs instead of one. I think that instead of trying to remove it from SOFA, we should investigate how to make the API better:; 1. size() / byteSize() / size(void* data) are really unclear (hence the shitty doc on those methods I guess, and it is really hard to know which of these methods serves what purpose. If we base ourselves on the ",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1385:2060,Simpl,SimpleLayout,2060,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1385,1,['Simpl'],['SimpleLayout']
Usability,"tNode(sofa::simulation::Node*); sofa::simulation::Simulation::init(sofa::simulation::Node*); __libc_start_main; Segmentation fault (core dumped). **Expected behavior**; the scene has to run (When I replace dataset with dataset1 which I declared as:. diff --git a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp; index 2f00fe62dc..782ce854ce 100644; --- a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp; +++ b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.cpp; @@ -72,6 +72,7 @@ MeshLoader::MeshLoader() : BaseLoader(); , d_rotation(initData(&d_rotation, Vec3(), ""rotation"", ""Rotation of the DOFs"")); , d_scale(initData(&d_scale, Vec3(1.0, 1.0, 1.0), ""scale3d"", ""Scale of the DOFs in 3 dimensions"")); , d_transformation(initData(&d_transformation, type::Matrix4::s_identity, ""transformation"", ""4x4 Homogeneous matrix to transform the DOFs (when present replace any)"")); + , d_dataset1(initData(&d_dataset1, ""dataset1"", ""Data from dataset"")); , d_previousTransformation(type::Matrix4::s_identity ); {; addAlias(&d_tetrahedra, ""tetras"");; @@ -184,6 +185,8 @@ void MeshLoader::clearBuffers(); getWriteOnlyAccessor(d_pyramidsGroups).clear();; getWriteOnlyAccessor(d_polygonsGroups).clear();; ; + getWriteOnlyAccessor(d_dataset1).clear();; +; doClearBuffers();; }; ; diff --git a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h; index d972c27d75..5fc1d75345 100644; --- a/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h; +++ b/SofaKernel/modules/SofaCore/src/sofa/core/loader/MeshLoader.h; @@ -183,6 +183,7 @@ public:; Data< Vec3 > d_scale; ///< Scale of the DOFs in 3 dimensions; Data< type::Matrix4 > d_transformation; ///< 4x4 Homogeneous matrix to transform the DOFs (when present replace any); ; + Data< type::vector< SReal > > d_dataset1; ///< mesh dataset; ; virtual void updateMesh();; virtual",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2897:3370,clear,clearBuffers,3370,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2897,1,['clear'],['clearBuffers']
Usability,"tance',alarmDistance='2',contactDistance='1',angleCone='0.8',coneFactor='0.8'); rootNode.addObject('DefaultContactManager',name='Response',response='FrictionContact'); rootNode.addObject('DefaultCollisionGroupManager',name='Group'). topoLines_cath = rootNode.addChild('topoLines_cath'); topoLines_cath.addObject('WireRestShape',name='catheterRestShape',template='Rigid3d',printLog='0',length=1000.0, straightLength=600,spireDiameter=4000.0,spireHeight=0.0,densityOfBeams=[40,10],numEdges=200, numEdgesCollis=[40,20],youngModulus=10000 ,youngModulusExtremity=10000); topoLines_cath.addObject('EdgeSetTopologyContainer',name='meshLinesCath'); topoLines_cath.addObject('EdgeSetTopologyModifier', name='Modifier'); topoLines_cath.addObject('EdgeSetGeometryAlgorithms',name='GeomAlgo',template='Rigid3d'); topoLines_cath.addObject('MechanicalObject',template='Rigid3d',name='dofTopo1'). topoLines_guide = rootNode.addChild('topoLines_guide'); topoLines_guide.addObject('WireRestShape',name='GuideRestShape',template='Rigid3d',printLog='0',length=1000.0, straightLength=980.0, spireDiameter=25, spireHeight=0.0,densityOfBeams=[30 ,5],numEdges=200,numEdgesCollis=[50, 10], youngModulus=10000,youngModulusExtremity=10000); topoLines_guide.addObject('EdgeSetTopologyContainer',name='meshLinesGuide'); topoLines_guide.addObject('EdgeSetTopologyModifier',name='Modifier'); topoLines_guide.addObject('EdgeSetGeometryAlgorithms',name='GeomAlgo',template='Rigid3d'); topoLines_guide.addObject('MechanicalObject', template='Rigid3d', name='dofTopo2'). topoLines_coils = rootNode.addChild('topoLines_coils'); topoLines_coils.addObject('WireRestShape',name='CoilRestShape',template='Rigid3d',printLog='0',length=600.0, straightLength=540.0,spireDiameter=7, spireHeight=5.0,densityOfBeams=[40,20], numEdges=400, numEdgesCollis=[30,30],youngModulus=168000, youngModulusExtremity=168000); topoLines_coils.addObject('EdgeSetTopologyContainer',name='meshLinesCoils'); topoLines_coils.addObject('EdgeSetTopologyModifier',na",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243:2063,Guid,GuideRestShape,2063,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/3483#issuecomment-1345193243,1,['Guid'],['GuideRestShape']
Usability,"tdtype::vector; - sofa::helper::stable_vector becomes sofa::type::stdtype::stable_vector ; - sofa::helper::SVector becomes sofa::type::stdtype::SVector ; - sofa::helper::vector_device becomes sofa::type::stdtype::vector_device . This PR solves as well the depencency on defaulttype::DataTypeInfo for vector_device by introducing a new template parameter.; (information needed by vector_device like ZeroConstructor cannot be guessed with STL functions, or not from what I know of). ## Breaking; ### Code; Same as #1734:; - if inclusion of _defaulttype_ and _type_ namespace, the compiler cannot chose which one to chose for the free functions like invert, etc. when the code did not called them from their respective namespace.It was not a problem because the compiler could find them previously thanks to [ADL](https://en.wikipedia.org/wiki/Argument-dependent_name_lookup).; Fixing is easy by just adding the respective namespace.; - vector_device now needs a new template parameter, implementing ZeroConstructor and SimpleCopy (already done in SofaCUDA and SofaOpenCL). ### Functionality:; - vector does not use the Messaging mechanism anymore; it was used in the `int` and `unsigned int` specialized version of read(). Instead, I replaced it with std::cerr AND setting a failbit to the resulting stream (which should have been done before actually).; Furthermore, I also changed Data to catch any cerr message (if any) and transpose it into the Messaging mechanism (if the stream as a failbit flag enabled) ; - vector can check bounds with the operator[], in debug mode. ; Before, it was displaying a message (with the Messaging mechanism), tried to dump the stack and quit on an assertion error.; Now it throws an exception (with the same message) which : ; - makes it crash if it is not caught (like before actually); - displays the message and carry on if caught somewhere (and can further debug with stack trace or whatever); which is a not so-bad solution in my opinion. ## Talking; - the cerr",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1893:1456,Simpl,SimpleCopy,1456,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1893,1,['Simpl'],['SimpleCopy']
Usability,thanks a lot all for your feedback all!; @EulalieCoevoet would be great to have that example added.; @ChristianDuriez definitely a big thumb up :+1: for the URDF support. Maud Marchal stressed out the importance of this aspect as well !. Let's create a dedicated plugin @fredroy as you proposed,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056667710:26,feedback,feedback,26,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2684#issuecomment-1056667710,2,['feedback'],['feedback']
Usability,thanks a lot for the feedback @alxbilger ; you are perfectly right!,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/2427#issuecomment-948583464:21,feedback,feedback,21,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/2427#issuecomment-948583464,2,['feedback'],['feedback']
Usability,"to fix the compilation error. ## How to use them. Create a new deprecation macro specifying the deprecation topic you are tackling.; This way, you won't have dates everywhere in your code. ## Example. ### Deprecate. I want to rename something that will break my API. ; To ease the transition for my users, I will propose a deprecation period with a fine message by using a deprecation macro.; Latest release is v20.06, next release (currently under development) is v20.12, after that will come the v21.06. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DEPRECATED( \; ""v20.12 (PR#12345)"", ""v21.06"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DEPRECATED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod();; ```. Anyone using myDeprecatedMethod will get this **warning**: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is still usable but has been DEPRECATED since v20.12 (PR#12345). You have until v21.06 to fix your code. XXX must be renamed into YYY.; ```. ### Disable. Now forward in time ...; Latest release is v20.12, next release (currently under development) is v21.06, after that will come the v21.12.; It is time to stop the deprecation period. To provide a clear message to my users, I will not just remove my deprecated method but I will disable it with `= delete` and use a deprecation macro. In my config.h.in; ```cpp; #define SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC() \; SOFA_ATTRIBUTE_DISABLED( \; ""v20.12 (PR#12345)"", ""v21.06 (PR#45678)"", \; ""XXX must be renamed into YYY.""); ```. In my code; ```cpp; SOFA_ATTRIBUTE_DISABLED__MYDEPRECATIONTOPIC(); void myDeprecatedMethod() = delete;; ```. Anyone using myDeprecatedMethod will get an **error** right after this warning: ; ```text; warning: 'myDeprecatedMethod' is deprecated: It is not usable anymore because it has been DISABLED since v21.06 (PR#45678) after being deprecated on v20.12 (PR#12345). XXX must be renamed into YYY.; ```",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249:2127,clear,clear,2127,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1793#issuecomment-785801249,4,"['clear', 'usab']","['clear', 'usable']"
Usability,"to substitute DataTypeInfo<T>::Size with T::total_size inherited from fixed_array. Would require an enable_if_t<is_fixed_array> to make sure...; - Sometimes, T is a scalar value for instance, in which case there isn't any total_size to query. It's the case in Vec.h for single scalar value vector operations (multScalar, divScalar, etc.), where the size is used in static_asserts to guarantee we are manipulating a single scalar quantity. I used SFINAE as substitution, but this makes code hard to read for most non-robot people. - in BaseData, it is used in updateFromParentValue(), along with FixedSize(), Integer / Scalar / Text / get/setTextValue, get/setScalarValue, get/setIntegerValue to resize and copy data from the parent value. BaseData, of course, can be templated on any kind of data (Scalars, text, Containers, complex structures...); ; - CopyOnWrite: Used in Data.h to generate the getters / setters for Data fields (beginEdit, operator= etc.). - ZeroConstructor, SimpleCopy: In SOFA's core, used exclusively in vector_device.h. (which is used by SofaCUDA for GPGPU stuff. - SimpleLayout, FixedSize, Container, Scalar...: Unused in SOFA (only used in SofaPython, SofaPython3, SofaQtQuick... for bindings. - get/setValue: Probably the trickiest one, these methods are used to compute stuff on templates without any knowledge of the inner layout of the template type. I'm not 100% sure that I found all instances of those calls in Sofa's core, but it seems like it is *exclusively* used with TDataType::Coord and TDataType::Deriv (which are either VecX or RigidCoord/RigidDeriv). In conclusion the usage of DataTypeInfo in BaseData justifies its existence to me. Maybe some features could be isolated in a separate API, but that would only mean maintaining 2 APIs instead of one. I think that instead of trying to remove it from SOFA, we should investigate how to make the API better:; 1. size() / byteSize() / size(void* data) are really unclear (hence the shitty doc on those methods I",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1385:1949,Simpl,SimpleCopy,1949,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1385,1,['Simpl'],['SimpleCopy']
Usability,"uldn't be too disturbing. The biggest is probably the fixing done in sofa::helper::vector (have a look at the allowed syntax in the _test""). . CHANGELOG:; - ADD sofa::helper::vector<int> tests validating the different possible syntax ; - ADD sofa::helper::vector<unsigned int> tests validating the different possible syntax ; - FIX sofa::helper::vector<int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<int>::read() so that there is no more endless loop for some input; - FIX sofa::helper::vector<unsigned int>::read() so that it reports errors message in case of problem ; - FIX sofa::helper::vector<unsigned int>::read() so that there is no more endless loop for some input; - FIX in all tests the ""_OpenIssue"" suffix that I forgot to remove when I fix the tests; - FIX MassSpringLoader to refuse to load a Xsp containing a rigid object and send warning messages. ; - FIX DefaultPipeline that was allowing negative depth attribute. Now it warns the user and set it default value (6).; - FIX DiagonalMass_test that was not checking that some pointer were valid before using them. ; - CHG GenerateRigiMass.inl now sends a warning message instead of an error. ; - FIX DistanceGrid add basic validation of dimensions given to the constructors. Sends a dmsg_warning if they are invalid and returns 0. ; - FIX DistanceGrid rename the attributes' names to match the sofa guidelines. . That's all, ; if merged with #267, #264 and #257 we should have a nearly green dashboard . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [x] builds with SUCCESS for all platforms on the CI.; - [x] does not generate new warnings nor unit test failures.; - [x] does not break existing scenes.; - [x] does not break API compatibility.; - [x] is more than 1 week old (or has fast-merge label).; - [x] reports important changes in Changelog. **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/271:1554,guid,guidelines,1554,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/271,1,['guid'],['guidelines']
Usability,"void handleEvent(sofa::core::objectmodel::Event* event); {; using namespace sofa::helper;; using namespace sofa::core::objectmodel;; using namespace sofa::core::behavior;. if (simulation::AnimateBeginEvent::checkEventType(event)); {; std::cout << ""onAnimateBeginEvent"" << std::endl;; auto moValue = sofa::helper::getWriteAccessor(*m_mo->write(core::VecCoordId::position()));; std::cout << moValue[0] << std::endl;; moValue[0] = moValue[0] + type::Vec3{ 1.0, 2.0, 3.0 };; std::cout << moValue[0] << std::endl;; }. if (simulation::AnimateEndEvent::checkEventType(event)); {; std::cout << ""onAnimateEndEvent"" << std::endl;; auto moValue = sofa::helper::getReadAccessor(*m_mo->read(core::VecCoordId::position()));; std::cout << moValue[0] << std::endl;; }; }. };; ```. ```c++; Simulation::SPtr simu = createSimulation(""DAG"");; Node::SPtr root = createRootNode(simu, ""root"");; sofa::component::initSofaBaseUtils();. simpleapi::createObject(root, ""RequiredPlugin"", { { ""pluginName"", ""SofaBaseMechanics""} });; simpleapi::createObject(root, ""RequiredPlugin"", { { ""pluginName"", ""PluginExample""} });. auto meca = createObject(root, ""MechanicalObject"", {; {""name"", ""MO""},; {""template"", ""Vec3d""},; {""position"", ""1 0 0""}; });; ; using MechaObjVec3 = sofa::component::container::MechanicalObject<defaulttype::Vec3Types>;; MechaObjVec3* mecaobj = dynamic_cast<MechaObjVec3*>(meca.get());; ; auto tcom = createObject(root, ""MyTestComponent"", {; {""position"", ""@MO.position""},; });. //auto cont = createObject(root, ""MyTestController"", {; // {""MO"", ""@MO""},; // }); . sofa::component::behaviormodel::MyTestController::SPtr cont = sofa::core::objectmodel::New<sofa::component::behaviormodel::MyTestController>(mecaobj);; root->addObject(cont);; ; sofa::simulation::getSimulation()->init(root.get());. sofa::simulation::getSimulation()->animate(root.get(), 0.01);; ```. ```; onAnimateBeginEvent; 1 0 0; 2 2 3; onAnimateEndEvent; 2 2 3; ```. (the controller just adding {1,2,3} to the mecha.position[0]). With both cases (",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1063030017:1608,simpl,simpleapi,1608,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/issues/2761#issuecomment-1063030017,4,['simpl'],['simpleapi']
Usability,"w():; s = SofaEditor.getSelection(); drawSomethingSpecialForSelectedObject(s); ```. The python binding is different to the one we have yet into Sofa s it is made totally independently to SofaPython and is done using cython (http://cython.org/) ; (for which I'm curious to see how this will survive our CI). . Other notable things are that there is unittest either on the c++ side & python side and that the CMakeLists.txt are installing everything into a single the install location with the following structure: ; module/SofaEditor/SofaEditor.so; module/SofaEditor/python/SofaEditor/__init__.py; module/SofaEditor/python/SofaEditor/SofaEditor.so ; module/SofaEditor/examples; (I'm not sure it is a good idea but this is a kind of ""package"" but I think it is an interesting way to ship plugins). . I will open other PR to integrate this feature into runSofa and runSofa2. . For the records, I was hesitating between three designs. The first one consists in using the ""context/ExecParams"" to hold the editor state. As this context is passed to the components during the scenegraph traversal this would allows them to know the status of the editor. The second approach was using flexible messages/event transmitted through the scene graph. The third design was much simpler and simply consist of using a singleton so that it can be used everywhere there is a need to know the editor status. Between the three I made the decision to use the simplest approach (simpler to implement & simpler to use) despite he is more limited. . ______________________________________________________; <!--- Please leave this at the end of your message -->; This PR: ; - [ ] builds with SUCCESS for all platforms on the CI.; - [ ] does not generate new warnings.; - [ ] does not generate new unit test failures.; - [ ] does not generate new scene test failures.; - [ ] does not break API compatibility.; - [ ] is more than 1 week old (or has fast-merge label). **Reviewers will merge only if all these checks are true.**",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/735:2199,simpl,simpler,2199,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/735,5,['simpl'],"['simpler', 'simplest', 'simply']"
Usability,"you are welcomed, I did it as well as I need it.; Do not hesitate to send me some feedback if you see bugs or potential improvement",MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/1028#issuecomment-499424270:82,feedback,feedback,82,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/1028#issuecomment-499424270,2,['feedback'],['feedback']
Usability,your feedback would be good @bakpaul @courtecuisse @ziqiu-zeng,MatchSource.ISSUE_COMMENT,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/3335#issuecomment-1257009032:5,feedback,feedback,5,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/3335#issuecomment-1257009032,2,['feedback'],['feedback']
Usability,"⚠️ DO NOT MERGE ! ⚠️ . The CI only compiles in debug for one configuration and only when a commit is done on the master.; AND a lot of failures just happen because of timeouts. So the readings are uncomfortable, to say the least. So This PR simply enable assertions in release mode (overriding the flags) and should show where the assertions happen,. ______________________________________________________. By submitting this pull request, I acknowledge that ; **I have read, understand, and agree [SOFA Developer Certificate of Origin (DCO)](https://github.com/sofa-framework/sofa/blob/master/CONTRIBUTING.md#sofa-developer-certificate-of-origin-dco)**.; ______________________________________________________. **Reviewers will merge this pull-request only if** ; - it builds with SUCCESS for all platforms on the CI.; - it does not generate new warnings.; - it does not generate new unit test failures.; - it does not generate new scene test failures.; - it does not break API compatibility.; - it is more than 1 week old (or has fast-merge label).",MatchSource.ISSUE,sofa-framework,sofa,v24.06.00,https://github.com/sofa-framework/sofa/pull/4496:241,simpl,simply,241,https://www.sofa-framework.org,https://github.com/sofa-framework/sofa/pull/4496,1,['simpl'],['simply']
